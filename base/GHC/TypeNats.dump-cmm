
==================== Output Cmm ====================
2018-03-16 16:00:27.616721076 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:27.617855928 UTC

[section ""data" . GHC.TypeNats.natSing_closure" {
     GHC.TypeNats.natSing_closure:
         const GHC.TypeNats.natSing_info;
 },
 GHC.TypeNats.natSing_entry() //  [R2]
         { info_tbl: [(c5s8y,
                       label: GHC.TypeNats.natSing_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5s8y: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.61875337 UTC

[section ""data" . GHC.TypeNats.natVal1_closure" {
     GHC.TypeNats.natVal1_closure:
         const GHC.TypeNats.natVal1_info;
 },
 GHC.TypeNats.natVal1_entry() //  [R2]
         { info_tbl: [(c5s8F,
                       label: GHC.TypeNats.natVal1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5s8F: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.619576605 UTC

[section ""data" . GHC.TypeNats.natVal_closure" {
     GHC.TypeNats.natVal_closure:
         const GHC.TypeNats.natVal_info;
 },
 GHC.TypeNats.natVal_entry() //  [R2, R3]
         { info_tbl: [(c5s8M,
                       label: GHC.TypeNats.natVal_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5s8M: // global
           R3 = R3;
           R2 = R2;
           call GHC.TypeNats.natVal1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.620320253 UTC

[section ""data" . GHC.TypeNats.sameNat1_closure" {
     GHC.TypeNats.sameNat1_closure:
         const GHC.Base.Just_con_info;
         const Data.Type.Equality.$WRefl_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.621215452 UTC

[section ""data" . GHC.TypeNats.sameNat_closure" {
     GHC.TypeNats.sameNat_closure:
         const GHC.TypeNats.sameNat_info;
 },
 GHC.TypeNats.sameNat_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5s8Y,
                       label: GHC.TypeNats.sameNat_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5s8Y: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5s8Z; else goto c5s90;
       c5s8Z: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.sameNat_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5s90: // global
           I64[Sp - 8] = block_c5s8T_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5s8T() //  [R1]
         { info_tbl: [(c5s8T,
                       label: block_c5s8T_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5s8T: // global
           if (R1 == 1) goto c5s8X; else goto c5s8W;
       c5s8X: // global
           R1 = GHC.TypeNats.sameNat1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5s8W: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.622574514 UTC

[section ""data" . GHC.TypeNats.$fShowSomeNat_$cshowsPrec_closure" {
     GHC.TypeNats.$fShowSomeNat_$cshowsPrec_closure:
         const GHC.TypeNats.$fShowSomeNat_$cshowsPrec_info;
         const 0;
 },
 GHC.TypeNats.$fShowSomeNat_$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c5s9e,
                       label: GHC.TypeNats.$fShowSomeNat_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5s9e: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5s9f; else goto c5s9g;
       c5s9f: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fShowSomeNat_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5s9g: // global
           I64[Sp - 24] = block_c5s9b_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5s9k; else goto c5s9c;
       u5s9k: // global
           call _c5s9b(R1) args: 0, res: 0, upd: 0;
       c5s9c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5s9b() //  [R1]
         { info_tbl: [(c5s9b,
                       label: block_c5s9b_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5s9b: // global
           R4 = P64[Sp + 16];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Show.$fShowInteger_$cshowsPrec_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.624002215 UTC

[section ""data" . GHC.TypeNats.$fShowSomeNat_$cshow_closure" {
     GHC.TypeNats.$fShowSomeNat_$cshow_closure:
         const GHC.TypeNats.$fShowSomeNat_$cshow_info;
         const 0;
 },
 GHC.TypeNats.$fShowSomeNat_$cshow_entry() //  [R2]
         { info_tbl: [(c5s9t,
                       label: GHC.TypeNats.$fShowSomeNat_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5s9t: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5s9z; else goto c5s9A;
       c5s9z: // global
           R2 = R2;
           R1 = GHC.TypeNats.$fShowSomeNat_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5s9A: // global
           I64[Sp - 8] = block_c5s9q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5s9F; else goto c5s9r;
       u5s9F: // global
           call _c5s9q(R1) args: 0, res: 0, upd: 0;
       c5s9r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5s9q() //  [R1]
         { info_tbl: [(c5s9q,
                       label: block_c5s9q_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5s9q: // global
           I64[Sp] = block_c5s9w_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5s9w() //  [R1, R2]
         { info_tbl: [(c5s9w,
                       label: block_c5s9w_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5s9w: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5s9E; else goto c5s9D;
       c5s9E: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5s9D: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.625606012 UTC

[section ""data" . GHC.TypeNats.$fShowSomeNat1_closure" {
     GHC.TypeNats.$fShowSomeNat1_closure:
         const GHC.TypeNats.$fShowSomeNat1_info;
         const 0;
 },
 GHC.TypeNats.$fShowSomeNat1_entry() //  [R2, R3]
         { info_tbl: [(c5s9N,
                       label: GHC.TypeNats.$fShowSomeNat1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5s9N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5s9T; else goto c5s9U;
       c5s9T: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fShowSomeNat1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5s9U: // global
           I64[Sp - 16] = block_c5s9K_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5s9Z; else goto c5s9L;
       u5s9Z: // global
           call _c5s9K(R1) args: 0, res: 0, upd: 0;
       c5s9L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5s9K() //  [R1]
         { info_tbl: [(c5s9K,
                       label: block_c5s9K_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5s9K: // global
           _s5s6D::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5s9Q_info;
           R4 = _s5s6D::P64;
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5s9Q() //  [R1, R2]
         { info_tbl: [(c5s9Q,
                       label: block_c5s9Q_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5s9Q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5s9Y; else goto c5s9X;
       c5s9Y: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5s9X: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.627002859 UTC

[section ""data" . GHC.TypeNats.$fShowSomeNat_$cshowList_closure" {
     GHC.TypeNats.$fShowSomeNat_$cshowList_closure:
         const GHC.TypeNats.$fShowSomeNat_$cshowList_info;
         const 0;
 },
 GHC.TypeNats.$fShowSomeNat_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c5sa4,
                       label: GHC.TypeNats.$fShowSomeNat_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sa4: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.TypeNats.$fShowSomeNat1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.627779085 UTC

[section ""data" . GHC.TypeNats.$fShowSomeNat_closure" {
     GHC.TypeNats.$fShowSomeNat_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.TypeNats.$fShowSomeNat_$cshowsPrec_closure+3;
         const GHC.TypeNats.$fShowSomeNat_$cshow_closure+1;
         const GHC.TypeNats.$fShowSomeNat_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.628692827 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$ccompare_closure" {
     GHC.TypeNats.$fOrdSomeNat_$ccompare_closure:
         const GHC.TypeNats.$fOrdSomeNat_$ccompare_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c5sae,
                       label: GHC.TypeNats.$fOrdSomeNat_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sae: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sai; else goto c5saj;
       c5sai: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5saj: // global
           I64[Sp - 16] = block_c5sab_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5sar; else goto c5sac;
       u5sar: // global
           call _c5sab(R1) args: 0, res: 0, upd: 0;
       c5sac: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sab() //  [R1]
         { info_tbl: [(c5sab,
                       label: block_c5sab_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sab: // global
           I64[Sp] = block_c5sah_info;
           _s5s6P::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5s6P::P64;
           if (R1 & 7 != 0) goto u5saq; else goto c5sal;
       u5saq: // global
           call _c5sah(R1) args: 0, res: 0, upd: 0;
       c5sal: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sah() //  [R1]
         { info_tbl: [(c5sah,
                       label: block_c5sah_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sah: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.630265273 UTC

[section ""data" . GHC.TypeNats.$fEqSomeNat_$c==_closure" {
     GHC.TypeNats.$fEqSomeNat_$c==_closure:
         const GHC.TypeNats.$fEqSomeNat_$c==_info;
 },
 GHC.TypeNats.$fEqSomeNat_$c==_entry() //  [R2, R3]
         { info_tbl: [(c5saz,
                       label: GHC.TypeNats.$fEqSomeNat_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5saz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5saD; else goto c5saE;
       c5saD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fEqSomeNat_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5saE: // global
           I64[Sp - 16] = block_c5saw_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5saM; else goto c5sax;
       u5saM: // global
           call _c5saw(R1) args: 0, res: 0, upd: 0;
       c5sax: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5saw() //  [R1]
         { info_tbl: [(c5saw,
                       label: block_c5saw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5saw: // global
           I64[Sp] = block_c5saC_info;
           _s5s6X::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5s6X::P64;
           if (R1 & 7 != 0) goto u5saL; else goto c5saG;
       u5saL: // global
           call _c5saC(R1) args: 0, res: 0, upd: 0;
       c5saG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5saC() //  [R1]
         { info_tbl: [(c5saC,
                       label: block_c5saC_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5saC: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.eqInteger_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.631902603 UTC

[section ""data" . GHC.TypeNats.$fEqSomeNat_$c/=_closure" {
     GHC.TypeNats.$fEqSomeNat_$c/=_closure:
         const GHC.TypeNats.$fEqSomeNat_$c/=_info;
 },
 GHC.TypeNats.$fEqSomeNat_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c5saU,
                       label: GHC.TypeNats.$fEqSomeNat_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5saU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5saY; else goto c5saZ;
       c5saY: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fEqSomeNat_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5saZ: // global
           I64[Sp - 16] = block_c5saR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5sbi; else goto c5saS;
       u5sbi: // global
           call _c5saR(R1) args: 0, res: 0, upd: 0;
       c5saS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5saR() //  [R1]
         { info_tbl: [(c5saR,
                       label: block_c5saR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5saR: // global
           I64[Sp] = block_c5saX_info;
           _s5s75::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5s75::P64;
           if (R1 & 7 != 0) goto u5sbh; else goto c5sb1;
       u5sbh: // global
           call _c5saX(R1) args: 0, res: 0, upd: 0;
       c5sb1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5saX() //  [R1]
         { info_tbl: [(c5saX,
                       label: block_c5saX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5saX: // global
           _s5s75::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5sb5_info;
           R3 = P64[R1 + 7];
           R2 = _s5s75::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sb5() //  [R1]
         { info_tbl: [(c5sb5,
                       label: block_c5sb5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sb5: // global
           if (R1 == 1) goto c5sbg; else goto c5sbc;
       c5sbg: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5sbc: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.633421654 UTC

[section ""data" . GHC.TypeNats.$fEqSomeNat_closure" {
     GHC.TypeNats.$fEqSomeNat_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.TypeNats.$fEqSomeNat_$c==_closure+2;
         const GHC.TypeNats.$fEqSomeNat_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.634434362 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$c<_closure" {
     GHC.TypeNats.$fOrdSomeNat_$c<_closure:
         const GHC.TypeNats.$fOrdSomeNat_$c<_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$c<_entry() //  [R2, R3]
         { info_tbl: [(c5sbq,
                       label: GHC.TypeNats.$fOrdSomeNat_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sbq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sbu; else goto c5sbv;
       c5sbu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sbv: // global
           I64[Sp - 16] = block_c5sbn_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5sbP; else goto c5sbo;
       u5sbP: // global
           call _c5sbn(R1) args: 0, res: 0, upd: 0;
       c5sbo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sbn() //  [R1]
         { info_tbl: [(c5sbn,
                       label: block_c5sbn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sbn: // global
           I64[Sp] = block_c5sbt_info;
           _s5s7e::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5s7e::P64;
           if (R1 & 7 != 0) goto u5sbO; else goto c5sbx;
       u5sbO: // global
           call _c5sbt(R1) args: 0, res: 0, upd: 0;
       c5sbx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sbt() //  [R1]
         { info_tbl: [(c5sbt,
                       label: block_c5sbt_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sbt: // global
           _s5s7e::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5sbB_info;
           R3 = P64[R1 + 7];
           R2 = _s5s7e::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sbB() //  [R1]
         { info_tbl: [(c5sbB,
                       label: block_c5sbB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sbB: // global
           if (R1 & 7 == 1) goto c5sbM; else goto c5sbI;
       c5sbM: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5sbI: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.636269475 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$c>=_closure" {
     GHC.TypeNats.$fOrdSomeNat_$c>=_closure:
         const GHC.TypeNats.$fOrdSomeNat_$c>=_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c5sbX,
                       label: GHC.TypeNats.$fOrdSomeNat_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sbX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sc1; else goto c5sc2;
       c5sc1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sc2: // global
           I64[Sp - 16] = block_c5sbU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5scm; else goto c5sbV;
       u5scm: // global
           call _c5sbU(R1) args: 0, res: 0, upd: 0;
       c5sbV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sbU() //  [R1]
         { info_tbl: [(c5sbU,
                       label: block_c5sbU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sbU: // global
           I64[Sp] = block_c5sc0_info;
           _s5s7n::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5s7n::P64;
           if (R1 & 7 != 0) goto u5scl; else goto c5sc4;
       u5scl: // global
           call _c5sc0(R1) args: 0, res: 0, upd: 0;
       c5sc4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sc0() //  [R1]
         { info_tbl: [(c5sc0,
                       label: block_c5sc0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sc0: // global
           _s5s7n::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5sc8_info;
           R3 = P64[R1 + 7];
           R2 = _s5s7n::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sc8() //  [R1]
         { info_tbl: [(c5sc8,
                       label: block_c5sc8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sc8: // global
           if (R1 & 7 == 1) goto c5scj; else goto c5scf;
       c5scj: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5scf: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.638071377 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$c>_closure" {
     GHC.TypeNats.$fOrdSomeNat_$c>_closure:
         const GHC.TypeNats.$fOrdSomeNat_$c>_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$c>_entry() //  [R2, R3]
         { info_tbl: [(c5scu,
                       label: GHC.TypeNats.$fOrdSomeNat_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5scu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5scy; else goto c5scz;
       c5scy: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5scz: // global
           I64[Sp - 16] = block_c5scr_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5scT; else goto c5scs;
       u5scT: // global
           call _c5scr(R1) args: 0, res: 0, upd: 0;
       c5scs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5scr() //  [R1]
         { info_tbl: [(c5scr,
                       label: block_c5scr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5scr: // global
           I64[Sp] = block_c5scx_info;
           _s5s7w::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5s7w::P64;
           if (R1 & 7 != 0) goto u5scS; else goto c5scB;
       u5scS: // global
           call _c5scx(R1) args: 0, res: 0, upd: 0;
       c5scB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5scx() //  [R1]
         { info_tbl: [(c5scx,
                       label: block_c5scx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5scx: // global
           _s5s7w::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5scF_info;
           R3 = P64[R1 + 7];
           R2 = _s5s7w::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5scF() //  [R1]
         { info_tbl: [(c5scF,
                       label: block_c5scF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5scF: // global
           if (R1 & 7 == 3) goto c5scQ; else goto c5scM;
       c5scQ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5scM: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.639887515 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$c<=_closure" {
     GHC.TypeNats.$fOrdSomeNat_$c<=_closure:
         const GHC.TypeNats.$fOrdSomeNat_$c<=_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c5sd1,
                       label: GHC.TypeNats.$fOrdSomeNat_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sd1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sd5; else goto c5sd6;
       c5sd5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sd6: // global
           I64[Sp - 16] = block_c5scY_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5sdq; else goto c5scZ;
       u5sdq: // global
           call _c5scY(R1) args: 0, res: 0, upd: 0;
       c5scZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5scY() //  [R1]
         { info_tbl: [(c5scY,
                       label: block_c5scY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5scY: // global
           I64[Sp] = block_c5sd4_info;
           _s5s7F::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5s7F::P64;
           if (R1 & 7 != 0) goto u5sdp; else goto c5sd8;
       u5sdp: // global
           call _c5sd4(R1) args: 0, res: 0, upd: 0;
       c5sd8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sd4() //  [R1]
         { info_tbl: [(c5sd4,
                       label: block_c5sd4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sd4: // global
           _s5s7F::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5sdc_info;
           R3 = P64[R1 + 7];
           R2 = _s5s7F::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sdc() //  [R1]
         { info_tbl: [(c5sdc,
                       label: block_c5sdc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sdc: // global
           if (R1 & 7 == 3) goto c5sdn; else goto c5sdj;
       c5sdn: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5sdj: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.641780756 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$cmax_closure" {
     GHC.TypeNats.$fOrdSomeNat_$cmax_closure:
         const GHC.TypeNats.$fOrdSomeNat_$cmax_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c5sdy,
                       label: GHC.TypeNats.$fOrdSomeNat_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sdy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5sdC; else goto c5sdD;
       c5sdC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sdD: // global
           I64[Sp - 16] = block_c5sdv_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5sdX; else goto c5sdw;
       u5sdX: // global
           call _c5sdv(R1) args: 0, res: 0, upd: 0;
       c5sdw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sdv() //  [R1]
         { info_tbl: [(c5sdv,
                       label: block_c5sdv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sdv: // global
           I64[Sp - 8] = block_c5sdB_info;
           _s5s7N::P64 = R1;
           _s5s7O::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _s5s7O::P64;
           P64[Sp + 8] = _s5s7N::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5sdW; else goto c5sdF;
       u5sdW: // global
           call _c5sdB(R1) args: 0, res: 0, upd: 0;
       c5sdF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sdB() //  [R1]
         { info_tbl: [(c5sdB,
                       label: block_c5sdB_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sdB: // global
           I64[Sp] = block_c5sdJ_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sdJ() //  [R1]
         { info_tbl: [(c5sdJ,
                       label: block_c5sdJ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sdJ: // global
           if (R1 & 7 == 3) goto c5sdU; else goto c5sdQ;
       c5sdU: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5sdQ: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.643670128 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$cmin_closure" {
     GHC.TypeNats.$fOrdSomeNat_$cmin_closure:
         const GHC.TypeNats.$fOrdSomeNat_$cmin_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c5se5,
                       label: GHC.TypeNats.$fOrdSomeNat_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5se5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5se9; else goto c5sea;
       c5se9: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sea: // global
           I64[Sp - 16] = block_c5se2_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5seu; else goto c5se3;
       u5seu: // global
           call _c5se2(R1) args: 0, res: 0, upd: 0;
       c5se3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5se2() //  [R1]
         { info_tbl: [(c5se2,
                       label: block_c5se2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5se2: // global
           I64[Sp - 8] = block_c5se8_info;
           _s5s7W::P64 = R1;
           _s5s7X::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _s5s7X::P64;
           P64[Sp + 8] = _s5s7W::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5set; else goto c5sec;
       u5set: // global
           call _c5se8(R1) args: 0, res: 0, upd: 0;
       c5sec: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5se8() //  [R1]
         { info_tbl: [(c5se8,
                       label: block_c5se8_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5se8: // global
           I64[Sp] = block_c5seg_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5seg() //  [R1]
         { info_tbl: [(c5seg,
                       label: block_c5seg_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5seg: // global
           if (R1 & 7 == 3) goto c5ser; else goto c5sen;
       c5ser: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5sen: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.645226612 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_closure" {
     GHC.TypeNats.$fOrdSomeNat_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.TypeNats.$fEqSomeNat_closure+1;
         const GHC.TypeNats.$fOrdSomeNat_$ccompare_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$c<_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$c<=_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$c>_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$c>=_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$cmax_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.646113148 UTC

[section ""data" . GHC.TypeNats.natVal'1_closure" {
     GHC.TypeNats.natVal'1_closure:
         const GHC.TypeNats.natVal'1_info;
 },
 GHC.TypeNats.natVal'1_entry() //  [R2]
         { info_tbl: [(c5sez,
                       label: GHC.TypeNats.natVal'1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sez: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.648227393 UTC

[section ""data" . GHC.TypeNats.natVal'_closure" {
     GHC.TypeNats.natVal'_closure:
         const GHC.TypeNats.natVal'_info;
 },
 GHC.TypeNats.natVal'_entry() //  [R2]
         { info_tbl: [(c5seG,
                       label: GHC.TypeNats.natVal'_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5seG: // global
           R2 = R2;
           call GHC.TypeNats.natVal'1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.649155691 UTC

[section ""data" . GHC.TypeNats.someNatVal_closure" {
     GHC.TypeNats.someNatVal_closure:
         const GHC.TypeNats.someNatVal_info;
 },
 GHC.TypeNats.someNatVal_entry() //  [R2]
         { info_tbl: [(c5seO,
                       label: GHC.TypeNats.someNatVal_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5seO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5seS; else goto c5seR;
       c5seS: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.TypeNats.someNatVal_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5seR: // global
           I64[Hp - 16] = GHC.TypeNats.SomeNat_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Data.Proxy.Proxy_closure+1;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.650747519 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat_go_closure" {
     GHC.TypeNats.$fReadSomeNat_go_closure:
         const GHC.TypeNats.$fReadSomeNat_go_info;
 },
 sat_s5s8f_entry() //  [R1]
         { info_tbl: [(c5sfc,
                       label: sat_s5s8f_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sfc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sfd; else goto c5sfe;
       c5sfd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5sfe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.TypeNats.$fReadSomeNat_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.TypeNats.$fReadSomeNat_go_entry() //  [R2]
         { info_tbl: [(c5sfj,
                       label: GHC.TypeNats.$fReadSomeNat_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sfj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sfk; else goto c5sfl;
       c5sfk: // global
           R2 = R2;
           R1 = GHC.TypeNats.$fReadSomeNat_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5sfl: // global
           I64[Sp - 8] = block_c5seX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5sfw; else goto c5seY;
       u5sfw: // global
           call _c5seX(R1) args: 0, res: 0, upd: 0;
       c5seY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5seX() //  [R1]
         { info_tbl: [(c5seX,
                       label: block_c5seX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5seX: // global
           if (R1 & 7 == 1) goto c5sfg; else goto c5sfh;
       c5sfg: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5sfh: // global
           I64[Sp - 8] = block_c5sf3_info;
           _s5s89::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5s89::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5sfv; else goto c5sf4;
       u5sfv: // global
           call _c5sf3(R1) args: 0, res: 0, upd: 0;
       c5sf4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sf3() //  [R1]
         { info_tbl: [(c5sf3,
                       label: block_c5sf3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sf3: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c5sfu; else goto c5sft;
       c5sfu: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5sft: // global
           _s5s8b::P64 = P64[R1 + 7];
           _s5s8c::P64 = P64[R1 + 15];
           I64[Hp - 88] = sat_s5s8f_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = GHC.TypeNats.SomeNat_con_info;
           P64[Hp - 56] = _s5s8b::P64;
           P64[Hp - 48] = Data.Proxy.Proxy_closure+1;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 63;
           P64[Hp - 24] = _s5s8c::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.652738477 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat_$creadsPrec_closure" {
     GHC.TypeNats.$fReadSomeNat_$creadsPrec_closure:
         const GHC.TypeNats.$fReadSomeNat_$creadsPrec_info;
         const 0;
 },
 GHC.TypeNats.$fReadSomeNat_$creadsPrec_entry() //  [R2, R3]
         { info_tbl: [(c5sfD,
                       label: GHC.TypeNats.$fReadSomeNat_$creadsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sfD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sfL; else goto c5sfM;
       c5sfL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fReadSomeNat_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sfM: // global
           I64[Sp - 16] = block_c5sfB_info;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           _s5s8h::P64 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadInteger2_closure+1;
           P64[Sp - 8] = _s5s8h::P64;
           Sp = Sp - 16;
           call GHC.Read.$fReadInteger_$sreadNumber_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sfB() //  [R1]
         { info_tbl: [(c5sfB,
                       label: block_c5sfB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sfB: // global
           _s5s8h::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5sfG_info;
           R3 = _s5s8h::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sfG() //  [R1]
         { info_tbl: [(c5sfG,
                       label: block_c5sfG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sfG: // global
           I64[Sp] = block_c5sfK_info;
           R2 = R1;
           call GHC.Natural.$fReadNatural_go_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sfK() //  [R1]
         { info_tbl: [(c5sfK,
                       label: block_c5sfK_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sfK: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.TypeNats.$fReadSomeNat_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.654729324 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat4_closure" {
     GHC.TypeNats.$fReadSomeNat4_closure:
         const GHC.TypeNats.$fReadSomeNat4_info;
         const 0;
 },
 sat_s5s8n_entry() //  [R1, R2]
         { info_tbl: [(c5sg2,
                       label: sat_s5s8n_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sg2: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.TypeNats.$fReadSomeNat_$creadsPrec_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 GHC.TypeNats.$fReadSomeNat4_entry() //  [R2, R3]
         { info_tbl: [(c5sg8,
                       label: GHC.TypeNats.$fReadSomeNat4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sg8: // global
           _s5s8m::P64 = R3;
           _s5s8l::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c5sg9; else goto c5sga;
       c5sga: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5sgc; else goto c5sgb;
       c5sgc: // global
           HpAlloc = 16;
           goto c5sg9;
       c5sg9: // global
           R3 = _s5s8m::P64;
           R2 = _s5s8l::P64;
           R1 = GHC.TypeNats.$fReadSomeNat4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sgb: // global
           I64[Hp - 8] = sat_s5s8n_info;
           P64[Hp] = _s5s8l::P64;
           I64[Sp - 8] = block_c5sg5_info;
           R3 = _s5s8m::P64;
           R2 = Hp - 7;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sg5() //  [R1]
         { info_tbl: [(c5sg5,
                       label: block_c5sg5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sg5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5sgf; else goto c5sge;
       c5sgf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5sge: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.65607637 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat3_closure" {
     GHC.TypeNats.$fReadSomeNat3_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.656874263 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat2_closure" {
     GHC.TypeNats.$fReadSomeNat2_closure:
         const GHC.TypeNats.$fReadSomeNat2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.TypeNats.$fReadSomeNat2_entry() //  [R1]
         { info_tbl: [(c5sgm,
                       label: GHC.TypeNats.$fReadSomeNat2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sgm: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5sgn; else goto c5sgo;
       c5sgn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5sgo: // global
           (_c5sgj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5sgj::I64 == 0) goto c5sgl; else goto c5sgk;
       c5sgl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5sgk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5sgj::I64;
           R2 = GHC.TypeNats.$fReadSomeNat4_closure+2;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.TypeNats.$fReadSomeNat3_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.657969542 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat_$creadList_closure" {
     GHC.TypeNats.$fReadSomeNat_$creadList_closure:
         const GHC.TypeNats.$fReadSomeNat_$creadList_info;
         const 0;
 },
 GHC.TypeNats.$fReadSomeNat_$creadList_entry() //  [R2]
         { info_tbl: [(c5sgt,
                       label: GHC.TypeNats.$fReadSomeNat_$creadList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sgt: // global
           R3 = R2;
           R2 = GHC.TypeNats.$fReadSomeNat2_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.658977666 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat1_closure" {
     GHC.TypeNats.$fReadSomeNat1_closure:
         const GHC.TypeNats.$fReadSomeNat1_info;
         const 0;
 },
 GHC.TypeNats.$fReadSomeNat1_entry() //  [R2, R3]
         { info_tbl: [(c5sgD,
                       label: GHC.TypeNats.$fReadSomeNat1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sgD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5sgE; else goto c5sgF;
       c5sgE: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fReadSomeNat1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sgF: // global
           I64[Sp - 8] = block_c5sgA_info;
           R3 = R3;
           R2 = GHC.TypeNats.$fReadSomeNat_$creadList_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sgA() //  [R1]
         { info_tbl: [(c5sgA,
                       label: block_c5sgA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sgA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5sgI; else goto c5sgH;
       c5sgI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5sgH: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.660067549 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat_closure" {
     GHC.TypeNats.$fReadSomeNat_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.TypeNats.$fReadSomeNat_$creadsPrec_closure+2;
         const GHC.TypeNats.$fReadSomeNat_$creadList_closure+1;
         const GHC.TypeNats.$fReadSomeNat4_closure+2;
         const GHC.TypeNats.$fReadSomeNat1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.660641727 UTC

[section ""cstring" . GHC.TypeNats.$trModule4_bytes" {
     GHC.TypeNats.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.661214931 UTC

[section ""data" . GHC.TypeNats.$trModule3_closure" {
     GHC.TypeNats.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.661805368 UTC

[section ""cstring" . GHC.TypeNats.$trModule2_bytes" {
     GHC.TypeNats.$trModule2_bytes:
         I8[] [71,72,67,46,84,121,112,101,78,97,116,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.662341688 UTC

[section ""data" . GHC.TypeNats.$trModule1_closure" {
     GHC.TypeNats.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.662856025 UTC

[section ""data" . GHC.TypeNats.$trModule_closure" {
     GHC.TypeNats.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.TypeNats.$trModule3_closure+1;
         const GHC.TypeNats.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.663408744 UTC

[section ""data" . $krep_r5s5Z_closure" {
     $krep_r5s5Z_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.663965297 UTC

[section ""data" . $krep1_r5s60_closure" {
     $krep1_r5s60_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Natural.$tcNatural_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.664568697 UTC

[section ""data" . $krep2_r5s61_closure" {
     $krep2_r5s61_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.665171916 UTC

[section ""data" . $krep3_r5s62_closure" {
     $krep3_r5s62_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcNat_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.666017836 UTC

[section ""data" . $krep4_r5s63_closure" {
     $krep4_r5s63_closure:
         const :_con_info;
         const $krep_r5s5Z_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.666615792 UTC

[section ""data" . $krep5_r5s64_closure" {
     $krep5_r5s64_closure:
         const :_con_info;
         const $krep3_r5s62_closure+1;
         const $krep4_r5s63_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.66714326 UTC

[section ""data" . $krep6_r5s65_closure" {
     $krep6_r5s65_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Proxy.$tcProxy_closure;
         const $krep5_r5s64_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.667690862 UTC

[section ""data" . GHC.TypeNats.$tcKnownNat1_closure" {
     GHC.TypeNats.$tcKnownNat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r5s62_closure+1;
         const $krep2_r5s61_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.668255088 UTC

[section ""data" . GHC.TypeNats.$tcSNat1_closure" {
     GHC.TypeNats.$tcSNat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r5s62_closure+1;
         const GHC.Types.krep$*_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.668825519 UTC

[section ""data" . GHC.TypeNats.$tcWrapN1_closure" {
     GHC.TypeNats.$tcWrapN1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r5s62_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.669403468 UTC

[section ""data" . $krep7_r5s66_closure" {
     $krep7_r5s66_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.669982699 UTC

[section ""data" . $krep8_r5s67_closure" {
     $krep8_r5s67_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r5s65_closure+1;
         const $krep7_r5s66_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.670502674 UTC

[section ""cstring" . GHC.TypeNats.$tcSNat3_bytes" {
     GHC.TypeNats.$tcSNat3_bytes:
         I8[] [83,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.671041315 UTC

[section ""data" . GHC.TypeNats.$tcSNat2_closure" {
     GHC.TypeNats.$tcSNat2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tcSNat3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.671616207 UTC

[section ""data" . GHC.TypeNats.$tcSNat_closure" {
     GHC.TypeNats.$tcSNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tcSNat2_closure+1;
         const GHC.TypeNats.$tcSNat1_closure+4;
         const 14249323166640683464;
         const 2956401390546376063;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.672199881 UTC

[section ""data" . $krep9_r5s68_closure" {
     $krep9_r5s68_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.TypeNats.$tcSNat_closure+1;
         const $krep4_r5s63_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.672765111 UTC

[section ""data" . GHC.TypeNats.$tc'SNat1_closure" {
     GHC.TypeNats.$tc'SNat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r5s60_closure+1;
         const $krep9_r5s68_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.673435192 UTC

[section ""cstring" . GHC.TypeNats.$tc'SNat3_bytes" {
     GHC.TypeNats.$tc'SNat3_bytes:
         I8[] [39,83,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.673959502 UTC

[section ""data" . GHC.TypeNats.$tc'SNat2_closure" {
     GHC.TypeNats.$tc'SNat2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tc'SNat3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.674535438 UTC

[section ""data" . GHC.TypeNats.$tc'SNat_closure" {
     GHC.TypeNats.$tc'SNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tc'SNat2_closure+1;
         const GHC.TypeNats.$tc'SNat1_closure+4;
         const 10248898659057561068;
         const 4968065829559829914;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.67511277 UTC

[section ""cstring" . GHC.TypeNats.$tcKnownNat3_bytes" {
     GHC.TypeNats.$tcKnownNat3_bytes:
         I8[] [75,110,111,119,110,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.675689292 UTC

[section ""data" . GHC.TypeNats.$tcKnownNat2_closure" {
     GHC.TypeNats.$tcKnownNat2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tcKnownNat3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.676242849 UTC

[section ""data" . GHC.TypeNats.$tcKnownNat_closure" {
     GHC.TypeNats.$tcKnownNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tcKnownNat2_closure+1;
         const GHC.TypeNats.$tcKnownNat1_closure+4;
         const 4406426137333124098;
         const 3858660218128115833;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.676855823 UTC

[section ""data" . $krep10_r5s69_closure" {
     $krep10_r5s69_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.TypeNats.$tcKnownNat_closure+1;
         const $krep4_r5s63_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.677596909 UTC

[section ""data" . $krep11_r5s6a_closure" {
     $krep11_r5s6a_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r5s69_closure+1;
         const $krep8_r5s67_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.678157225 UTC

[section ""data" . GHC.TypeNats.$tc'C:KnownNat1_closure" {
     GHC.TypeNats.$tc'C:KnownNat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r5s68_closure+1;
         const $krep10_r5s69_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.67870552 UTC

[section ""cstring" . GHC.TypeNats.$tc'C:KnownNat3_bytes" {
     GHC.TypeNats.$tc'C:KnownNat3_bytes:
         I8[] [39,67,58,75,110,111,119,110,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.680333496 UTC

[section ""data" . GHC.TypeNats.$tc'C:KnownNat2_closure" {
     GHC.TypeNats.$tc'C:KnownNat2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tc'C:KnownNat3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.680893695 UTC

[section ""data" . GHC.TypeNats.$tc'C:KnownNat_closure" {
     GHC.TypeNats.$tc'C:KnownNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tc'C:KnownNat2_closure+1;
         const GHC.TypeNats.$tc'C:KnownNat1_closure+4;
         const 12421457977663053218;
         const 18328904747962077722;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.681585253 UTC

[section ""cstring" . GHC.TypeNats.$tcSomeNat2_bytes" {
     GHC.TypeNats.$tcSomeNat2_bytes:
         I8[] [83,111,109,101,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.682144417 UTC

[section ""data" . GHC.TypeNats.$tcSomeNat1_closure" {
     GHC.TypeNats.$tcSomeNat1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tcSomeNat2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.682712556 UTC

[section ""data" . GHC.TypeNats.$tcSomeNat_closure" {
     GHC.TypeNats.$tcSomeNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tcSomeNat1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9244180789053763601;
         const 6189216451384407387;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.683291829 UTC

[section ""data" . $krep12_r5s6b_closure" {
     $krep12_r5s6b_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.TypeNats.$tcSomeNat_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.683928572 UTC

[section ""data" . $krep13_r5s6c_closure" {
     $krep13_r5s6c_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r5s65_closure+1;
         const $krep12_r5s6b_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.684451234 UTC

[section ""data" . GHC.TypeNats.$tc'SomeNat1_closure" {
     GHC.TypeNats.$tc'SomeNat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r5s69_closure+1;
         const $krep13_r5s6c_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.685002595 UTC

[section ""cstring" . GHC.TypeNats.$tc'SomeNat3_bytes" {
     GHC.TypeNats.$tc'SomeNat3_bytes:
         I8[] [39,83,111,109,101,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.685658643 UTC

[section ""data" . GHC.TypeNats.$tc'SomeNat2_closure" {
     GHC.TypeNats.$tc'SomeNat2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tc'SomeNat3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.686233524 UTC

[section ""data" . GHC.TypeNats.$tc'SomeNat_closure" {
     GHC.TypeNats.$tc'SomeNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tc'SomeNat2_closure+1;
         const GHC.TypeNats.$tc'SomeNat1_closure+4;
         const 5872332339143923373;
         const 16743196919708003695;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.686816471 UTC

[section ""cstring" . GHC.TypeNats.$tcWrapN3_bytes" {
     GHC.TypeNats.$tcWrapN3_bytes:
         I8[] [87,114,97,112,78]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.687367778 UTC

[section ""data" . GHC.TypeNats.$tcWrapN2_closure" {
     GHC.TypeNats.$tcWrapN2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tcWrapN3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.687945501 UTC

[section ""data" . GHC.TypeNats.$tcWrapN_closure" {
     GHC.TypeNats.$tcWrapN_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tcWrapN2_closure+1;
         const GHC.TypeNats.$tcWrapN1_closure+4;
         const 825875854269014453;
         const 10073258292275044429;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.688548357 UTC

[section ""data" . $krep14_r5s6d_closure" {
     $krep14_r5s6d_closure:
         const :_con_info;
         const $krep7_r5s66_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.689129798 UTC

[section ""data" . $krep15_r5s6e_closure" {
     $krep15_r5s6e_closure:
         const :_con_info;
         const $krep_r5s5Z_closure+2;
         const $krep14_r5s6d_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.689759218 UTC

[section ""data" . $krep16_r5s6f_closure" {
     $krep16_r5s6f_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.TypeNats.$tcWrapN_closure+1;
         const $krep15_r5s6e_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.690320459 UTC

[section ""data" . GHC.TypeNats.$tc'WrapN1_closure" {
     GHC.TypeNats.$tc'WrapN1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r5s6a_closure+4;
         const $krep16_r5s6f_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.690876298 UTC

[section ""cstring" . GHC.TypeNats.$tc'WrapN3_bytes" {
     GHC.TypeNats.$tc'WrapN3_bytes:
         I8[] [39,87,114,97,112,78]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.69142822 UTC

[section ""data" . GHC.TypeNats.$tc'WrapN2_closure" {
     GHC.TypeNats.$tc'WrapN2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tc'WrapN3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.69195192 UTC

[section ""data" . GHC.TypeNats.$tc'WrapN_closure" {
     GHC.TypeNats.$tc'WrapN_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tc'WrapN2_closure+1;
         const GHC.TypeNats.$tc'WrapN1_closure+4;
         const 731800900372900037;
         const 17722817696101367246;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.692795285 UTC

[section ""data" . GHC.TypeNats.WrapN_closure" {
     GHC.TypeNats.WrapN_closure:
         const GHC.TypeNats.WrapN_info;
 },
 GHC.TypeNats.WrapN_entry() //  [R2]
         { info_tbl: [(c5sgO,
                       label: GHC.TypeNats.WrapN_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sgO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5sgS; else goto c5sgR;
       c5sgS: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.TypeNats.WrapN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5sgR: // global
           I64[Hp - 8] = GHC.TypeNats.WrapN_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.693888121 UTC

[section ""data" . GHC.TypeNats.SomeNat_closure" {
     GHC.TypeNats.SomeNat_closure:
         const GHC.TypeNats.SomeNat_info;
 },
 GHC.TypeNats.SomeNat_entry() //  [R2, R3]
         { info_tbl: [(c5sgY,
                       label: GHC.TypeNats.SomeNat_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sgY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5sh2; else goto c5sh1;
       c5sh2: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.SomeNat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sh1: // global
           I64[Hp - 16] = GHC.TypeNats.SomeNat_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.69473756 UTC

[GHC.TypeNats.WrapN_con_entry() //  [R1]
         { info_tbl: [(c5sh3,
                       label: GHC.TypeNats.WrapN_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,84,121,112,101,78,97,116,115,46,87,114,97,112,78]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sh3: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.695455942 UTC

[GHC.TypeNats.SomeNat_con_entry() //  [R1]
         { info_tbl: [(c5sh4,
                       label: GHC.TypeNats.SomeNat_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,84,121,112,101,78,97,116,115,46,83,111,109,101,78,97,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sh4: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.696145516 UTC

[section ""relreadonly" . S5s9l_srt" {
     S5s9l_srt:
         const GHC.Show.$fShowInteger_$cshowsPrec_closure;
         const GHC.TypeNats.$fShowSomeNat_$cshowsPrec_closure;
         const GHC.Show.$w$cshowsPrec4_closure;
         const GHC.TypeNats.$fShowSomeNat_$cshow_closure;
         const GHC.TypeNats.$fShowSomeNat1_closure;
         const GHC.Read.$fReadInteger2_closure;
         const GHC.Read.$fReadInteger_$sreadNumber_closure;
         const GHC.Natural.$fReadNatural_go_closure;
         const GHC.TypeNats.$fReadSomeNat_$creadsPrec_closure;
         const GHC.TypeNats.$fReadSomeNat4_closure;
         const GHC.Read.list_closure;
         const GHC.TypeNats.$fReadSomeNat2_closure;
         const GHC.TypeNats.$fReadSomeNat1_closure;
         const GHC.TypeNats.$fReadSomeNat_$creadList_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.696785717 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:27.697528712 UTC

[section ""data" . GHC.TypeNats.natSing_closure" {
     GHC.TypeNats.natSing_closure:
         const GHC.TypeNats.natSing_info;
 },
 GHC.TypeNats.natSing_entry() //  [R2]
         { info_tbl: [(c5sh9,
                       label: GHC.TypeNats.natSing_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sh9: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.698368998 UTC

[section ""data" . GHC.TypeNats.natVal1_closure" {
     GHC.TypeNats.natVal1_closure:
         const GHC.TypeNats.natVal1_info;
 },
 GHC.TypeNats.natVal1_entry() //  [R2]
         { info_tbl: [(c5shg,
                       label: GHC.TypeNats.natVal1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5shg: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.699206394 UTC

[section ""data" . GHC.TypeNats.natVal_closure" {
     GHC.TypeNats.natVal_closure:
         const GHC.TypeNats.natVal_info;
 },
 GHC.TypeNats.natVal_entry() //  [R2, R3]
         { info_tbl: [(c5shn,
                       label: GHC.TypeNats.natVal_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5shn: // global
           R3 = R3;
           R2 = R2;
           call GHC.TypeNats.natVal1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.699902552 UTC

[section ""data" . GHC.TypeNats.sameNat1_closure" {
     GHC.TypeNats.sameNat1_closure:
         const GHC.Base.Just_con_info;
         const Data.Type.Equality.$WRefl_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.700724103 UTC

[section ""data" . GHC.TypeNats.sameNat_closure" {
     GHC.TypeNats.sameNat_closure:
         const GHC.TypeNats.sameNat_info;
 },
 GHC.TypeNats.sameNat_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5shz,
                       label: GHC.TypeNats.sameNat_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5shz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5shA; else goto c5shB;
       c5shA: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.sameNat_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5shB: // global
           I64[Sp - 8] = block_c5shu_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5shu() //  [R1]
         { info_tbl: [(c5shu,
                       label: block_c5shu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5shu: // global
           if (R1 == 1) goto c5shy; else goto c5shx;
       c5shy: // global
           R1 = GHC.TypeNats.sameNat1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5shx: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.702424532 UTC

[section ""data" . GHC.TypeNats.$fShowSomeNat_$cshowsPrec_closure" {
     GHC.TypeNats.$fShowSomeNat_$cshowsPrec_closure:
         const GHC.TypeNats.$fShowSomeNat_$cshowsPrec_info;
         const 0;
 },
 GHC.TypeNats.$fShowSomeNat_$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c5shP,
                       label: GHC.TypeNats.$fShowSomeNat_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5shP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5shQ; else goto c5shR;
       c5shQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fShowSomeNat_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5shR: // global
           I64[Sp - 24] = block_c5shM_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5shV; else goto c5shN;
       u5shV: // global
           call _c5shM(R1) args: 0, res: 0, upd: 0;
       c5shN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5shM() //  [R1]
         { info_tbl: [(c5shM,
                       label: block_c5shM_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5shM: // global
           R4 = P64[Sp + 16];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Show.$fShowInteger_$cshowsPrec_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.703881579 UTC

[section ""data" . GHC.TypeNats.$fShowSomeNat_$cshow_closure" {
     GHC.TypeNats.$fShowSomeNat_$cshow_closure:
         const GHC.TypeNats.$fShowSomeNat_$cshow_info;
         const 0;
 },
 GHC.TypeNats.$fShowSomeNat_$cshow_entry() //  [R2]
         { info_tbl: [(c5si3,
                       label: GHC.TypeNats.$fShowSomeNat_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5si3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5si9; else goto c5sia;
       c5si9: // global
           R2 = R2;
           R1 = GHC.TypeNats.$fShowSomeNat_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5sia: // global
           I64[Sp - 8] = block_c5si0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5sif; else goto c5si1;
       u5sif: // global
           call _c5si0(R1) args: 0, res: 0, upd: 0;
       c5si1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5si0() //  [R1]
         { info_tbl: [(c5si0,
                       label: block_c5si0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5si0: // global
           I64[Sp] = block_c5si6_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5si6() //  [R1, R2]
         { info_tbl: [(c5si6,
                       label: block_c5si6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5si6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5sie; else goto c5sid;
       c5sie: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5sid: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.705582856 UTC

[section ""data" . GHC.TypeNats.$fShowSomeNat1_closure" {
     GHC.TypeNats.$fShowSomeNat1_closure:
         const GHC.TypeNats.$fShowSomeNat1_info;
         const 0;
 },
 GHC.TypeNats.$fShowSomeNat1_entry() //  [R2, R3]
         { info_tbl: [(c5sin,
                       label: GHC.TypeNats.$fShowSomeNat1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sin: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sit; else goto c5siu;
       c5sit: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fShowSomeNat1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5siu: // global
           I64[Sp - 16] = block_c5sik_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5siz; else goto c5sil;
       u5siz: // global
           call _c5sik(R1) args: 0, res: 0, upd: 0;
       c5sil: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sik() //  [R1]
         { info_tbl: [(c5sik,
                       label: block_c5sik_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sik: // global
           _s5s6D::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5siq_info;
           R4 = _s5s6D::P64;
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5siq() //  [R1, R2]
         { info_tbl: [(c5siq,
                       label: block_c5siq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5siq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5siy; else goto c5six;
       c5siy: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5six: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.707068695 UTC

[section ""data" . GHC.TypeNats.$fShowSomeNat_$cshowList_closure" {
     GHC.TypeNats.$fShowSomeNat_$cshowList_closure:
         const GHC.TypeNats.$fShowSomeNat_$cshowList_info;
         const 0;
 },
 GHC.TypeNats.$fShowSomeNat_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c5siE,
                       label: GHC.TypeNats.$fShowSomeNat_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5siE: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.TypeNats.$fShowSomeNat1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.707824112 UTC

[section ""data" . GHC.TypeNats.$fShowSomeNat_closure" {
     GHC.TypeNats.$fShowSomeNat_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.TypeNats.$fShowSomeNat_$cshowsPrec_closure+3;
         const GHC.TypeNats.$fShowSomeNat_$cshow_closure+1;
         const GHC.TypeNats.$fShowSomeNat_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.708744668 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$ccompare_closure" {
     GHC.TypeNats.$fOrdSomeNat_$ccompare_closure:
         const GHC.TypeNats.$fOrdSomeNat_$ccompare_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c5siO,
                       label: GHC.TypeNats.$fOrdSomeNat_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5siO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5siS; else goto c5siT;
       c5siS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5siT: // global
           I64[Sp - 16] = block_c5siL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5sj1; else goto c5siM;
       u5sj1: // global
           call _c5siL(R1) args: 0, res: 0, upd: 0;
       c5siM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5siL() //  [R1]
         { info_tbl: [(c5siL,
                       label: block_c5siL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5siL: // global
           I64[Sp] = block_c5siR_info;
           _s5s6P::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5s6P::P64;
           if (R1 & 7 != 0) goto u5sj0; else goto c5siV;
       u5sj0: // global
           call _c5siR(R1) args: 0, res: 0, upd: 0;
       c5siV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5siR() //  [R1]
         { info_tbl: [(c5siR,
                       label: block_c5siR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5siR: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.710386503 UTC

[section ""data" . GHC.TypeNats.$fEqSomeNat_$c==_closure" {
     GHC.TypeNats.$fEqSomeNat_$c==_closure:
         const GHC.TypeNats.$fEqSomeNat_$c==_info;
 },
 GHC.TypeNats.$fEqSomeNat_$c==_entry() //  [R2, R3]
         { info_tbl: [(c5sj9,
                       label: GHC.TypeNats.$fEqSomeNat_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sj9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sjd; else goto c5sje;
       c5sjd: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fEqSomeNat_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sje: // global
           I64[Sp - 16] = block_c5sj6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5sjm; else goto c5sj7;
       u5sjm: // global
           call _c5sj6(R1) args: 0, res: 0, upd: 0;
       c5sj7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sj6() //  [R1]
         { info_tbl: [(c5sj6,
                       label: block_c5sj6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sj6: // global
           I64[Sp] = block_c5sjc_info;
           _s5s6X::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5s6X::P64;
           if (R1 & 7 != 0) goto u5sjl; else goto c5sjg;
       u5sjl: // global
           call _c5sjc(R1) args: 0, res: 0, upd: 0;
       c5sjg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sjc() //  [R1]
         { info_tbl: [(c5sjc,
                       label: block_c5sjc_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sjc: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.eqInteger_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.712041056 UTC

[section ""data" . GHC.TypeNats.$fEqSomeNat_$c/=_closure" {
     GHC.TypeNats.$fEqSomeNat_$c/=_closure:
         const GHC.TypeNats.$fEqSomeNat_$c/=_info;
 },
 GHC.TypeNats.$fEqSomeNat_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c5sju,
                       label: GHC.TypeNats.$fEqSomeNat_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sju: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sjy; else goto c5sjz;
       c5sjy: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fEqSomeNat_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sjz: // global
           I64[Sp - 16] = block_c5sjr_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5sjS; else goto c5sjs;
       u5sjS: // global
           call _c5sjr(R1) args: 0, res: 0, upd: 0;
       c5sjs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sjr() //  [R1]
         { info_tbl: [(c5sjr,
                       label: block_c5sjr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sjr: // global
           I64[Sp] = block_c5sjx_info;
           _s5s75::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5s75::P64;
           if (R1 & 7 != 0) goto u5sjR; else goto c5sjB;
       u5sjR: // global
           call _c5sjx(R1) args: 0, res: 0, upd: 0;
       c5sjB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sjx() //  [R1]
         { info_tbl: [(c5sjx,
                       label: block_c5sjx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sjx: // global
           _s5s75::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5sjF_info;
           R3 = P64[R1 + 7];
           R2 = _s5s75::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sjF() //  [R1]
         { info_tbl: [(c5sjF,
                       label: block_c5sjF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sjF: // global
           if (R1 == 1) goto c5sjQ; else goto c5sjM;
       c5sjQ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5sjM: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.713585179 UTC

[section ""data" . GHC.TypeNats.$fEqSomeNat_closure" {
     GHC.TypeNats.$fEqSomeNat_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.TypeNats.$fEqSomeNat_$c==_closure+2;
         const GHC.TypeNats.$fEqSomeNat_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.714647522 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$c<_closure" {
     GHC.TypeNats.$fOrdSomeNat_$c<_closure:
         const GHC.TypeNats.$fOrdSomeNat_$c<_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$c<_entry() //  [R2, R3]
         { info_tbl: [(c5sk0,
                       label: GHC.TypeNats.$fOrdSomeNat_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sk0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sk4; else goto c5sk5;
       c5sk4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sk5: // global
           I64[Sp - 16] = block_c5sjX_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5skp; else goto c5sjY;
       u5skp: // global
           call _c5sjX(R1) args: 0, res: 0, upd: 0;
       c5sjY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sjX() //  [R1]
         { info_tbl: [(c5sjX,
                       label: block_c5sjX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sjX: // global
           I64[Sp] = block_c5sk3_info;
           _s5s7e::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5s7e::P64;
           if (R1 & 7 != 0) goto u5sko; else goto c5sk7;
       u5sko: // global
           call _c5sk3(R1) args: 0, res: 0, upd: 0;
       c5sk7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sk3() //  [R1]
         { info_tbl: [(c5sk3,
                       label: block_c5sk3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sk3: // global
           _s5s7e::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5skb_info;
           R3 = P64[R1 + 7];
           R2 = _s5s7e::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5skb() //  [R1]
         { info_tbl: [(c5skb,
                       label: block_c5skb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5skb: // global
           if (R1 & 7 == 1) goto c5skm; else goto c5ski;
       c5skm: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5ski: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.716535302 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$c>=_closure" {
     GHC.TypeNats.$fOrdSomeNat_$c>=_closure:
         const GHC.TypeNats.$fOrdSomeNat_$c>=_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c5skx,
                       label: GHC.TypeNats.$fOrdSomeNat_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5skx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5skB; else goto c5skC;
       c5skB: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5skC: // global
           I64[Sp - 16] = block_c5sku_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5skW; else goto c5skv;
       u5skW: // global
           call _c5sku(R1) args: 0, res: 0, upd: 0;
       c5skv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sku() //  [R1]
         { info_tbl: [(c5sku,
                       label: block_c5sku_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sku: // global
           I64[Sp] = block_c5skA_info;
           _s5s7n::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5s7n::P64;
           if (R1 & 7 != 0) goto u5skV; else goto c5skE;
       u5skV: // global
           call _c5skA(R1) args: 0, res: 0, upd: 0;
       c5skE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5skA() //  [R1]
         { info_tbl: [(c5skA,
                       label: block_c5skA_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5skA: // global
           _s5s7n::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5skI_info;
           R3 = P64[R1 + 7];
           R2 = _s5s7n::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5skI() //  [R1]
         { info_tbl: [(c5skI,
                       label: block_c5skI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5skI: // global
           if (R1 & 7 == 1) goto c5skT; else goto c5skP;
       c5skT: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5skP: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.719539385 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$c>_closure" {
     GHC.TypeNats.$fOrdSomeNat_$c>_closure:
         const GHC.TypeNats.$fOrdSomeNat_$c>_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$c>_entry() //  [R2, R3]
         { info_tbl: [(c5sl4,
                       label: GHC.TypeNats.$fOrdSomeNat_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sl4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sl8; else goto c5sl9;
       c5sl8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sl9: // global
           I64[Sp - 16] = block_c5sl1_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5slt; else goto c5sl2;
       u5slt: // global
           call _c5sl1(R1) args: 0, res: 0, upd: 0;
       c5sl2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sl1() //  [R1]
         { info_tbl: [(c5sl1,
                       label: block_c5sl1_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sl1: // global
           I64[Sp] = block_c5sl7_info;
           _s5s7w::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5s7w::P64;
           if (R1 & 7 != 0) goto u5sls; else goto c5slb;
       u5sls: // global
           call _c5sl7(R1) args: 0, res: 0, upd: 0;
       c5slb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sl7() //  [R1]
         { info_tbl: [(c5sl7,
                       label: block_c5sl7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sl7: // global
           _s5s7w::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5slf_info;
           R3 = P64[R1 + 7];
           R2 = _s5s7w::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5slf() //  [R1]
         { info_tbl: [(c5slf,
                       label: block_c5slf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5slf: // global
           if (R1 & 7 == 3) goto c5slq; else goto c5slm;
       c5slq: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5slm: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.722310032 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$c<=_closure" {
     GHC.TypeNats.$fOrdSomeNat_$c<=_closure:
         const GHC.TypeNats.$fOrdSomeNat_$c<=_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c5slB,
                       label: GHC.TypeNats.$fOrdSomeNat_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5slB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5slF; else goto c5slG;
       c5slF: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5slG: // global
           I64[Sp - 16] = block_c5sly_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5sm0; else goto c5slz;
       u5sm0: // global
           call _c5sly(R1) args: 0, res: 0, upd: 0;
       c5slz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sly() //  [R1]
         { info_tbl: [(c5sly,
                       label: block_c5sly_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sly: // global
           I64[Sp] = block_c5slE_info;
           _s5s7F::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5s7F::P64;
           if (R1 & 7 != 0) goto u5slZ; else goto c5slI;
       u5slZ: // global
           call _c5slE(R1) args: 0, res: 0, upd: 0;
       c5slI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5slE() //  [R1]
         { info_tbl: [(c5slE,
                       label: block_c5slE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5slE: // global
           _s5s7F::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5slM_info;
           R3 = P64[R1 + 7];
           R2 = _s5s7F::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5slM() //  [R1]
         { info_tbl: [(c5slM,
                       label: block_c5slM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5slM: // global
           if (R1 & 7 == 3) goto c5slX; else goto c5slT;
       c5slX: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5slT: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.724324398 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$cmax_closure" {
     GHC.TypeNats.$fOrdSomeNat_$cmax_closure:
         const GHC.TypeNats.$fOrdSomeNat_$cmax_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c5sm8,
                       label: GHC.TypeNats.$fOrdSomeNat_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sm8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5smc; else goto c5smd;
       c5smc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5smd: // global
           I64[Sp - 16] = block_c5sm5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5smx; else goto c5sm6;
       u5smx: // global
           call _c5sm5(R1) args: 0, res: 0, upd: 0;
       c5sm6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sm5() //  [R1]
         { info_tbl: [(c5sm5,
                       label: block_c5sm5_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sm5: // global
           I64[Sp - 8] = block_c5smb_info;
           _s5s7N::P64 = R1;
           _s5s7O::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _s5s7O::P64;
           P64[Sp + 8] = _s5s7N::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5smw; else goto c5smf;
       u5smw: // global
           call _c5smb(R1) args: 0, res: 0, upd: 0;
       c5smf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5smb() //  [R1]
         { info_tbl: [(c5smb,
                       label: block_c5smb_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5smb: // global
           I64[Sp] = block_c5smj_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5smj() //  [R1]
         { info_tbl: [(c5smj,
                       label: block_c5smj_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5smj: // global
           if (R1 & 7 == 3) goto c5smu; else goto c5smq;
       c5smu: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5smq: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.726350927 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$cmin_closure" {
     GHC.TypeNats.$fOrdSomeNat_$cmin_closure:
         const GHC.TypeNats.$fOrdSomeNat_$cmin_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c5smF,
                       label: GHC.TypeNats.$fOrdSomeNat_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5smF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5smJ; else goto c5smK;
       c5smJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5smK: // global
           I64[Sp - 16] = block_c5smC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5sn4; else goto c5smD;
       u5sn4: // global
           call _c5smC(R1) args: 0, res: 0, upd: 0;
       c5smD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5smC() //  [R1]
         { info_tbl: [(c5smC,
                       label: block_c5smC_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5smC: // global
           I64[Sp - 8] = block_c5smI_info;
           _s5s7W::P64 = R1;
           _s5s7X::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _s5s7X::P64;
           P64[Sp + 8] = _s5s7W::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5sn3; else goto c5smM;
       u5sn3: // global
           call _c5smI(R1) args: 0, res: 0, upd: 0;
       c5smM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5smI() //  [R1]
         { info_tbl: [(c5smI,
                       label: block_c5smI_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5smI: // global
           I64[Sp] = block_c5smQ_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5smQ() //  [R1]
         { info_tbl: [(c5smQ,
                       label: block_c5smQ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5smQ: // global
           if (R1 & 7 == 3) goto c5sn1; else goto c5smX;
       c5sn1: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5smX: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.727836458 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_closure" {
     GHC.TypeNats.$fOrdSomeNat_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.TypeNats.$fEqSomeNat_closure+1;
         const GHC.TypeNats.$fOrdSomeNat_$ccompare_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$c<_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$c<=_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$c>_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$c>=_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$cmax_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.728638027 UTC

[section ""data" . GHC.TypeNats.natVal'1_closure" {
     GHC.TypeNats.natVal'1_closure:
         const GHC.TypeNats.natVal'1_info;
 },
 GHC.TypeNats.natVal'1_entry() //  [R2]
         { info_tbl: [(c5sn9,
                       label: GHC.TypeNats.natVal'1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sn9: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.72956253 UTC

[section ""data" . GHC.TypeNats.natVal'_closure" {
     GHC.TypeNats.natVal'_closure:
         const GHC.TypeNats.natVal'_info;
 },
 GHC.TypeNats.natVal'_entry() //  [R2]
         { info_tbl: [(c5sng,
                       label: GHC.TypeNats.natVal'_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sng: // global
           R2 = R2;
           call GHC.TypeNats.natVal'1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.730411824 UTC

[section ""data" . GHC.TypeNats.someNatVal_closure" {
     GHC.TypeNats.someNatVal_closure:
         const GHC.TypeNats.someNatVal_info;
 },
 GHC.TypeNats.someNatVal_entry() //  [R2]
         { info_tbl: [(c5sno,
                       label: GHC.TypeNats.someNatVal_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sno: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5sns; else goto c5snr;
       c5sns: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.TypeNats.someNatVal_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5snr: // global
           I64[Hp - 16] = GHC.TypeNats.SomeNat_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Data.Proxy.Proxy_closure+1;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.731912126 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat_go_closure" {
     GHC.TypeNats.$fReadSomeNat_go_closure:
         const GHC.TypeNats.$fReadSomeNat_go_info;
 },
 sat_s5s8f_entry() //  [R1]
         { info_tbl: [(c5snM,
                       label: sat_s5s8f_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5snM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5snN; else goto c5snO;
       c5snN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5snO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.TypeNats.$fReadSomeNat_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.TypeNats.$fReadSomeNat_go_entry() //  [R2]
         { info_tbl: [(c5snT,
                       label: GHC.TypeNats.$fReadSomeNat_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5snT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5snU; else goto c5snV;
       c5snU: // global
           R2 = R2;
           R1 = GHC.TypeNats.$fReadSomeNat_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5snV: // global
           I64[Sp - 8] = block_c5snx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5so6; else goto c5sny;
       u5so6: // global
           call _c5snx(R1) args: 0, res: 0, upd: 0;
       c5sny: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5snx() //  [R1]
         { info_tbl: [(c5snx,
                       label: block_c5snx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5snx: // global
           if (R1 & 7 == 1) goto c5snQ; else goto c5snR;
       c5snQ: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5snR: // global
           I64[Sp - 8] = block_c5snD_info;
           _s5s89::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5s89::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5so5; else goto c5snE;
       u5so5: // global
           call _c5snD(R1) args: 0, res: 0, upd: 0;
       c5snE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5snD() //  [R1]
         { info_tbl: [(c5snD,
                       label: block_c5snD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5snD: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c5so4; else goto c5so3;
       c5so4: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5so3: // global
           _s5s8b::P64 = P64[R1 + 7];
           _s5s8c::P64 = P64[R1 + 15];
           I64[Hp - 88] = sat_s5s8f_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = GHC.TypeNats.SomeNat_con_info;
           P64[Hp - 56] = _s5s8b::P64;
           P64[Hp - 48] = Data.Proxy.Proxy_closure+1;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 63;
           P64[Hp - 24] = _s5s8c::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.734390215 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat_$creadsPrec_closure" {
     GHC.TypeNats.$fReadSomeNat_$creadsPrec_closure:
         const GHC.TypeNats.$fReadSomeNat_$creadsPrec_info;
         const 0;
 },
 GHC.TypeNats.$fReadSomeNat_$creadsPrec_entry() //  [R2, R3]
         { info_tbl: [(c5sod,
                       label: GHC.TypeNats.$fReadSomeNat_$creadsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sod: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sol; else goto c5som;
       c5sol: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fReadSomeNat_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5som: // global
           I64[Sp - 16] = block_c5sob_info;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           _s5s8h::P64 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadInteger2_closure+1;
           P64[Sp - 8] = _s5s8h::P64;
           Sp = Sp - 16;
           call GHC.Read.$fReadInteger_$sreadNumber_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sob() //  [R1]
         { info_tbl: [(c5sob,
                       label: block_c5sob_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sob: // global
           _s5s8h::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5sog_info;
           R3 = _s5s8h::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sog() //  [R1]
         { info_tbl: [(c5sog,
                       label: block_c5sog_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sog: // global
           I64[Sp] = block_c5sok_info;
           R2 = R1;
           call GHC.Natural.$fReadNatural_go_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sok() //  [R1]
         { info_tbl: [(c5sok,
                       label: block_c5sok_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sok: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.TypeNats.$fReadSomeNat_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.736978034 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat4_closure" {
     GHC.TypeNats.$fReadSomeNat4_closure:
         const GHC.TypeNats.$fReadSomeNat4_info;
         const 0;
 },
 sat_s5s8n_entry() //  [R1, R2]
         { info_tbl: [(c5soC,
                       label: sat_s5s8n_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5soC: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.TypeNats.$fReadSomeNat_$creadsPrec_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 GHC.TypeNats.$fReadSomeNat4_entry() //  [R2, R3]
         { info_tbl: [(c5soI,
                       label: GHC.TypeNats.$fReadSomeNat4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5soI: // global
           _s5s8m::P64 = R3;
           _s5s8l::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c5soJ; else goto c5soK;
       c5soK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5soM; else goto c5soL;
       c5soM: // global
           HpAlloc = 16;
           goto c5soJ;
       c5soJ: // global
           R3 = _s5s8m::P64;
           R2 = _s5s8l::P64;
           R1 = GHC.TypeNats.$fReadSomeNat4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5soL: // global
           I64[Hp - 8] = sat_s5s8n_info;
           P64[Hp] = _s5s8l::P64;
           I64[Sp - 8] = block_c5soF_info;
           R3 = _s5s8m::P64;
           R2 = Hp - 7;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5soF() //  [R1]
         { info_tbl: [(c5soF,
                       label: block_c5soF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5soF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5soP; else goto c5soO;
       c5soP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5soO: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.739091307 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat3_closure" {
     GHC.TypeNats.$fReadSomeNat3_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.740283261 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat2_closure" {
     GHC.TypeNats.$fReadSomeNat2_closure:
         const GHC.TypeNats.$fReadSomeNat2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.TypeNats.$fReadSomeNat2_entry() //  [R1]
         { info_tbl: [(c5soW,
                       label: GHC.TypeNats.$fReadSomeNat2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5soW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5soX; else goto c5soY;
       c5soX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5soY: // global
           (_c5soT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5soT::I64 == 0) goto c5soV; else goto c5soU;
       c5soV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5soU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5soT::I64;
           R2 = GHC.TypeNats.$fReadSomeNat4_closure+2;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.TypeNats.$fReadSomeNat3_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.742063774 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat_$creadList_closure" {
     GHC.TypeNats.$fReadSomeNat_$creadList_closure:
         const GHC.TypeNats.$fReadSomeNat_$creadList_info;
         const 0;
 },
 GHC.TypeNats.$fReadSomeNat_$creadList_entry() //  [R2]
         { info_tbl: [(c5sp3,
                       label: GHC.TypeNats.$fReadSomeNat_$creadList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sp3: // global
           R3 = R2;
           R2 = GHC.TypeNats.$fReadSomeNat2_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.74357957 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat1_closure" {
     GHC.TypeNats.$fReadSomeNat1_closure:
         const GHC.TypeNats.$fReadSomeNat1_info;
         const 0;
 },
 GHC.TypeNats.$fReadSomeNat1_entry() //  [R2, R3]
         { info_tbl: [(c5spd,
                       label: GHC.TypeNats.$fReadSomeNat1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5spd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5spe; else goto c5spf;
       c5spe: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fReadSomeNat1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5spf: // global
           I64[Sp - 8] = block_c5spa_info;
           R3 = R3;
           R2 = GHC.TypeNats.$fReadSomeNat_$creadList_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5spa() //  [R1]
         { info_tbl: [(c5spa,
                       label: block_c5spa_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5spa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5spi; else goto c5sph;
       c5spi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5sph: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.745393828 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat_closure" {
     GHC.TypeNats.$fReadSomeNat_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.TypeNats.$fReadSomeNat_$creadsPrec_closure+2;
         const GHC.TypeNats.$fReadSomeNat_$creadList_closure+1;
         const GHC.TypeNats.$fReadSomeNat4_closure+2;
         const GHC.TypeNats.$fReadSomeNat1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.74624709 UTC

[section ""cstring" . GHC.TypeNats.$trModule4_bytes" {
     GHC.TypeNats.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.746977171 UTC

[section ""data" . GHC.TypeNats.$trModule3_closure" {
     GHC.TypeNats.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.747766329 UTC

[section ""cstring" . GHC.TypeNats.$trModule2_bytes" {
     GHC.TypeNats.$trModule2_bytes:
         I8[] [71,72,67,46,84,121,112,101,78,97,116,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.748509208 UTC

[section ""data" . GHC.TypeNats.$trModule1_closure" {
     GHC.TypeNats.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.749704947 UTC

[section ""data" . GHC.TypeNats.$trModule_closure" {
     GHC.TypeNats.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.TypeNats.$trModule3_closure+1;
         const GHC.TypeNats.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.750523699 UTC

[section ""data" . $krep_r5s5Z_closure" {
     $krep_r5s5Z_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.751313206 UTC

[section ""data" . $krep1_r5s60_closure" {
     $krep1_r5s60_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Natural.$tcNatural_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.752149103 UTC

[section ""data" . $krep2_r5s61_closure" {
     $krep2_r5s61_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.753022619 UTC

[section ""data" . $krep3_r5s62_closure" {
     $krep3_r5s62_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcNat_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.753919766 UTC

[section ""data" . $krep4_r5s63_closure" {
     $krep4_r5s63_closure:
         const :_con_info;
         const $krep_r5s5Z_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.754793904 UTC

[section ""data" . $krep5_r5s64_closure" {
     $krep5_r5s64_closure:
         const :_con_info;
         const $krep3_r5s62_closure+1;
         const $krep4_r5s63_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.755615641 UTC

[section ""data" . $krep6_r5s65_closure" {
     $krep6_r5s65_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Proxy.$tcProxy_closure;
         const $krep5_r5s64_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.756374117 UTC

[section ""data" . GHC.TypeNats.$tcKnownNat1_closure" {
     GHC.TypeNats.$tcKnownNat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r5s62_closure+1;
         const $krep2_r5s61_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.757196305 UTC

[section ""data" . GHC.TypeNats.$tcSNat1_closure" {
     GHC.TypeNats.$tcSNat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r5s62_closure+1;
         const GHC.Types.krep$*_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.758075957 UTC

[section ""data" . GHC.TypeNats.$tcWrapN1_closure" {
     GHC.TypeNats.$tcWrapN1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r5s62_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.758878693 UTC

[section ""data" . $krep7_r5s66_closure" {
     $krep7_r5s66_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.759720989 UTC

[section ""data" . $krep8_r5s67_closure" {
     $krep8_r5s67_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r5s65_closure+1;
         const $krep7_r5s66_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.760521125 UTC

[section ""cstring" . GHC.TypeNats.$tcSNat3_bytes" {
     GHC.TypeNats.$tcSNat3_bytes:
         I8[] [83,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.761306232 UTC

[section ""data" . GHC.TypeNats.$tcSNat2_closure" {
     GHC.TypeNats.$tcSNat2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tcSNat3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.761908291 UTC

[section ""data" . GHC.TypeNats.$tcSNat_closure" {
     GHC.TypeNats.$tcSNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tcSNat2_closure+1;
         const GHC.TypeNats.$tcSNat1_closure+4;
         const 14249323166640683464;
         const 2956401390546376063;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.762510649 UTC

[section ""data" . $krep9_r5s68_closure" {
     $krep9_r5s68_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.TypeNats.$tcSNat_closure+1;
         const $krep4_r5s63_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.763080195 UTC

[section ""data" . GHC.TypeNats.$tc'SNat1_closure" {
     GHC.TypeNats.$tc'SNat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r5s60_closure+1;
         const $krep9_r5s68_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.763641244 UTC

[section ""cstring" . GHC.TypeNats.$tc'SNat3_bytes" {
     GHC.TypeNats.$tc'SNat3_bytes:
         I8[] [39,83,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.764188253 UTC

[section ""data" . GHC.TypeNats.$tc'SNat2_closure" {
     GHC.TypeNats.$tc'SNat2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tc'SNat3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.764784836 UTC

[section ""data" . GHC.TypeNats.$tc'SNat_closure" {
     GHC.TypeNats.$tc'SNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tc'SNat2_closure+1;
         const GHC.TypeNats.$tc'SNat1_closure+4;
         const 10248898659057561068;
         const 4968065829559829914;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.765899912 UTC

[section ""cstring" . GHC.TypeNats.$tcKnownNat3_bytes" {
     GHC.TypeNats.$tcKnownNat3_bytes:
         I8[] [75,110,111,119,110,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.766429597 UTC

[section ""data" . GHC.TypeNats.$tcKnownNat2_closure" {
     GHC.TypeNats.$tcKnownNat2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tcKnownNat3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.768289602 UTC

[section ""data" . GHC.TypeNats.$tcKnownNat_closure" {
     GHC.TypeNats.$tcKnownNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tcKnownNat2_closure+1;
         const GHC.TypeNats.$tcKnownNat1_closure+4;
         const 4406426137333124098;
         const 3858660218128115833;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.768968463 UTC

[section ""data" . $krep10_r5s69_closure" {
     $krep10_r5s69_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.TypeNats.$tcKnownNat_closure+1;
         const $krep4_r5s63_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.769645906 UTC

[section ""data" . $krep11_r5s6a_closure" {
     $krep11_r5s6a_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r5s69_closure+1;
         const $krep8_r5s67_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.770210838 UTC

[section ""data" . GHC.TypeNats.$tc'C:KnownNat1_closure" {
     GHC.TypeNats.$tc'C:KnownNat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r5s68_closure+1;
         const $krep10_r5s69_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.770755479 UTC

[section ""cstring" . GHC.TypeNats.$tc'C:KnownNat3_bytes" {
     GHC.TypeNats.$tc'C:KnownNat3_bytes:
         I8[] [39,67,58,75,110,111,119,110,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.771347305 UTC

[section ""data" . GHC.TypeNats.$tc'C:KnownNat2_closure" {
     GHC.TypeNats.$tc'C:KnownNat2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tc'C:KnownNat3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.771914178 UTC

[section ""data" . GHC.TypeNats.$tc'C:KnownNat_closure" {
     GHC.TypeNats.$tc'C:KnownNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tc'C:KnownNat2_closure+1;
         const GHC.TypeNats.$tc'C:KnownNat1_closure+4;
         const 12421457977663053218;
         const 18328904747962077722;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.772523072 UTC

[section ""cstring" . GHC.TypeNats.$tcSomeNat2_bytes" {
     GHC.TypeNats.$tcSomeNat2_bytes:
         I8[] [83,111,109,101,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.773059134 UTC

[section ""data" . GHC.TypeNats.$tcSomeNat1_closure" {
     GHC.TypeNats.$tcSomeNat1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tcSomeNat2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.773664881 UTC

[section ""data" . GHC.TypeNats.$tcSomeNat_closure" {
     GHC.TypeNats.$tcSomeNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tcSomeNat1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9244180789053763601;
         const 6189216451384407387;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.774273875 UTC

[section ""data" . $krep12_r5s6b_closure" {
     $krep12_r5s6b_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.TypeNats.$tcSomeNat_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.774818552 UTC

[section ""data" . $krep13_r5s6c_closure" {
     $krep13_r5s6c_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r5s65_closure+1;
         const $krep12_r5s6b_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.775364592 UTC

[section ""data" . GHC.TypeNats.$tc'SomeNat1_closure" {
     GHC.TypeNats.$tc'SomeNat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r5s69_closure+1;
         const $krep13_r5s6c_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.775892095 UTC

[section ""cstring" . GHC.TypeNats.$tc'SomeNat3_bytes" {
     GHC.TypeNats.$tc'SomeNat3_bytes:
         I8[] [39,83,111,109,101,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.776427609 UTC

[section ""data" . GHC.TypeNats.$tc'SomeNat2_closure" {
     GHC.TypeNats.$tc'SomeNat2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tc'SomeNat3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.776964596 UTC

[section ""data" . GHC.TypeNats.$tc'SomeNat_closure" {
     GHC.TypeNats.$tc'SomeNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tc'SomeNat2_closure+1;
         const GHC.TypeNats.$tc'SomeNat1_closure+4;
         const 5872332339143923373;
         const 16743196919708003695;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.777555685 UTC

[section ""cstring" . GHC.TypeNats.$tcWrapN3_bytes" {
     GHC.TypeNats.$tcWrapN3_bytes:
         I8[] [87,114,97,112,78]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.778058008 UTC

[section ""data" . GHC.TypeNats.$tcWrapN2_closure" {
     GHC.TypeNats.$tcWrapN2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tcWrapN3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.778555291 UTC

[section ""data" . GHC.TypeNats.$tcWrapN_closure" {
     GHC.TypeNats.$tcWrapN_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tcWrapN2_closure+1;
         const GHC.TypeNats.$tcWrapN1_closure+4;
         const 825875854269014453;
         const 10073258292275044429;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.779205047 UTC

[section ""data" . $krep14_r5s6d_closure" {
     $krep14_r5s6d_closure:
         const :_con_info;
         const $krep7_r5s66_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.779773712 UTC

[section ""data" . $krep15_r5s6e_closure" {
     $krep15_r5s6e_closure:
         const :_con_info;
         const $krep_r5s5Z_closure+2;
         const $krep14_r5s6d_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.780356406 UTC

[section ""data" . $krep16_r5s6f_closure" {
     $krep16_r5s6f_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.TypeNats.$tcWrapN_closure+1;
         const $krep15_r5s6e_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.780942724 UTC

[section ""data" . GHC.TypeNats.$tc'WrapN1_closure" {
     GHC.TypeNats.$tc'WrapN1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r5s6a_closure+4;
         const $krep16_r5s6f_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.782043611 UTC

[section ""cstring" . GHC.TypeNats.$tc'WrapN3_bytes" {
     GHC.TypeNats.$tc'WrapN3_bytes:
         I8[] [39,87,114,97,112,78]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.782614066 UTC

[section ""data" . GHC.TypeNats.$tc'WrapN2_closure" {
     GHC.TypeNats.$tc'WrapN2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tc'WrapN3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.78319265 UTC

[section ""data" . GHC.TypeNats.$tc'WrapN_closure" {
     GHC.TypeNats.$tc'WrapN_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tc'WrapN2_closure+1;
         const GHC.TypeNats.$tc'WrapN1_closure+4;
         const 731800900372900037;
         const 17722817696101367246;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.784151554 UTC

[section ""data" . GHC.TypeNats.WrapN_closure" {
     GHC.TypeNats.WrapN_closure:
         const GHC.TypeNats.WrapN_info;
 },
 GHC.TypeNats.WrapN_entry() //  [R2]
         { info_tbl: [(c5spo,
                       label: GHC.TypeNats.WrapN_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5spo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5sps; else goto c5spr;
       c5sps: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.TypeNats.WrapN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5spr: // global
           I64[Hp - 8] = GHC.TypeNats.WrapN_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.785280517 UTC

[section ""data" . GHC.TypeNats.SomeNat_closure" {
     GHC.TypeNats.SomeNat_closure:
         const GHC.TypeNats.SomeNat_info;
 },
 GHC.TypeNats.SomeNat_entry() //  [R2, R3]
         { info_tbl: [(c5spy,
                       label: GHC.TypeNats.SomeNat_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5spy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5spC; else goto c5spB;
       c5spC: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.SomeNat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5spB: // global
           I64[Hp - 16] = GHC.TypeNats.SomeNat_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.786208627 UTC

[GHC.TypeNats.WrapN_con_entry() //  [R1]
         { info_tbl: [(c5spD,
                       label: GHC.TypeNats.WrapN_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,84,121,112,101,78,97,116,115,46,87,114,97,112,78]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5spD: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.786952116 UTC

[GHC.TypeNats.SomeNat_con_entry() //  [R1]
         { info_tbl: [(c5spF,
                       label: GHC.TypeNats.SomeNat_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,84,121,112,101,78,97,116,115,46,83,111,109,101,78,97,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5spF: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.787589521 UTC

[section ""relreadonly" . S5s9l_srt" {
     S5s9l_srt:
         const GHC.Show.$fShowInteger_$cshowsPrec_closure;
         const GHC.TypeNats.$fShowSomeNat_$cshowsPrec_closure;
         const GHC.Show.$w$cshowsPrec4_closure;
         const GHC.TypeNats.$fShowSomeNat_$cshow_closure;
         const GHC.TypeNats.$fShowSomeNat1_closure;
         const GHC.Read.$fReadInteger2_closure;
         const GHC.Read.$fReadInteger_$sreadNumber_closure;
         const GHC.Natural.$fReadNatural_go_closure;
         const GHC.TypeNats.$fReadSomeNat_$creadsPrec_closure;
         const GHC.TypeNats.$fReadSomeNat4_closure;
         const GHC.Read.list_closure;
         const GHC.TypeNats.$fReadSomeNat2_closure;
         const GHC.TypeNats.$fReadSomeNat1_closure;
         const GHC.TypeNats.$fReadSomeNat_$creadList_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.788474295 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:27.789820355 UTC

[section ""data" . GHC.TypeNats.natSing_closure" {
     GHC.TypeNats.natSing_closure:
         const GHC.TypeNats.natSing_info;
 },
 GHC.TypeNats.natSing_entry() //  [R2]
         { info_tbl: [(c5spL,
                       label: GHC.TypeNats.natSing_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5spL: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.793601626 UTC

[section ""data" . GHC.TypeNats.natVal1_closure" {
     GHC.TypeNats.natVal1_closure:
         const GHC.TypeNats.natVal1_info;
 },
 GHC.TypeNats.natVal1_entry() //  [R2]
         { info_tbl: [(c5spY,
                       label: GHC.TypeNats.natVal1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5spY: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.798041848 UTC

[section ""data" . GHC.TypeNats.natVal_closure" {
     GHC.TypeNats.natVal_closure:
         const GHC.TypeNats.natVal_info;
 },
 GHC.TypeNats.natVal_entry() //  [R2, R3]
         { info_tbl: [(c5sqb,
                       label: GHC.TypeNats.natVal_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sqb: // global
           R3 = R3;
           R2 = R2;
           call GHC.TypeNats.natVal1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.801575808 UTC

[section ""data" . GHC.TypeNats.sameNat1_closure" {
     GHC.TypeNats.sameNat1_closure:
         const GHC.Base.Just_con_info;
         const Data.Type.Equality.$WRefl_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.804411587 UTC

[section ""data" . GHC.TypeNats.sameNat_closure" {
     GHC.TypeNats.sameNat_closure:
         const GHC.TypeNats.sameNat_info;
 },
 GHC.TypeNats.sameNat_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5sqs,
                       label: GHC.TypeNats.sameNat_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sqs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5sqt; else goto c5squ;
       c5sqt: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.sameNat_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5squ: // global
           I64[Sp - 8] = block_c5sqn_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sqn() //  [R1]
         { info_tbl: [(c5sqn,
                       label: block_c5sqn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sqn: // global
           if (R1 == 1) goto c5sqr; else goto c5sqq;
       c5sqr: // global
           R1 = GHC.TypeNats.sameNat1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5sqq: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.813168636 UTC

[section ""data" . GHC.TypeNats.$fShowSomeNat_$cshowsPrec_closure" {
     GHC.TypeNats.$fShowSomeNat_$cshowsPrec_closure:
         const GHC.TypeNats.$fShowSomeNat_$cshowsPrec_info;
         const 0;
 },
 GHC.TypeNats.$fShowSomeNat_$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c5sqS,
                       label: GHC.TypeNats.$fShowSomeNat_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sqS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5sqT; else goto c5sqU;
       c5sqT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fShowSomeNat_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sqU: // global
           I64[Sp - 24] = block_c5sqP_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5sqY; else goto c5sqQ;
       u5sqY: // global
           call _c5sqP(R1) args: 0, res: 0, upd: 0;
       c5sqQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sqP() //  [R1]
         { info_tbl: [(c5sqP,
                       label: block_c5sqP_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sqP: // global
           R4 = P64[Sp + 16];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Show.$fShowInteger_$cshowsPrec_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.822460888 UTC

[section ""data" . GHC.TypeNats.$fShowSomeNat_$cshow_closure" {
     GHC.TypeNats.$fShowSomeNat_$cshow_closure:
         const GHC.TypeNats.$fShowSomeNat_$cshow_info;
         const 0;
 },
 GHC.TypeNats.$fShowSomeNat_$cshow_entry() //  [R2]
         { info_tbl: [(c5srf,
                       label: GHC.TypeNats.$fShowSomeNat_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5srf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5srl; else goto c5srm;
       c5srl: // global
           R2 = R2;
           R1 = GHC.TypeNats.$fShowSomeNat_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5srm: // global
           I64[Sp - 8] = block_c5src_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5srr; else goto c5srd;
       u5srr: // global
           call _c5src(R1) args: 0, res: 0, upd: 0;
       c5srd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5src() //  [R1]
         { info_tbl: [(c5src,
                       label: block_c5src_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5src: // global
           I64[Sp] = block_c5sri_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sri() //  [R1, R2]
         { info_tbl: [(c5sri,
                       label: block_c5sri_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sri: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5srq; else goto c5srp;
       c5srq: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5srp: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.838331862 UTC

[section ""data" . GHC.TypeNats.$fShowSomeNat1_closure" {
     GHC.TypeNats.$fShowSomeNat1_closure:
         const GHC.TypeNats.$fShowSomeNat1_info;
         const 0;
 },
 GHC.TypeNats.$fShowSomeNat1_entry() //  [R2, R3]
         { info_tbl: [(c5srM,
                       label: GHC.TypeNats.$fShowSomeNat1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5srM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5srS; else goto c5srT;
       c5srS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fShowSomeNat1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5srT: // global
           I64[Sp - 16] = block_c5srJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5srY; else goto c5srK;
       u5srY: // global
           call _c5srJ(R1) args: 0, res: 0, upd: 0;
       c5srK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5srJ() //  [R1]
         { info_tbl: [(c5srJ,
                       label: block_c5srJ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5srJ: // global
           _s5s6D::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5srP_info;
           R4 = _s5s6D::P64;
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5srP() //  [R1, R2]
         { info_tbl: [(c5srP,
                       label: block_c5srP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5srP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5srX; else goto c5srW;
       c5srX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5srW: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.849382657 UTC

[section ""data" . GHC.TypeNats.$fShowSomeNat_$cshowList_closure" {
     GHC.TypeNats.$fShowSomeNat_$cshowList_closure:
         const GHC.TypeNats.$fShowSomeNat_$cshowList_info;
         const 0;
 },
 GHC.TypeNats.$fShowSomeNat_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c5ssg,
                       label: GHC.TypeNats.$fShowSomeNat_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ssg: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.TypeNats.$fShowSomeNat1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.855318574 UTC

[section ""data" . GHC.TypeNats.$fShowSomeNat_closure" {
     GHC.TypeNats.$fShowSomeNat_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.TypeNats.$fShowSomeNat_$cshowsPrec_closure+3;
         const GHC.TypeNats.$fShowSomeNat_$cshow_closure+1;
         const GHC.TypeNats.$fShowSomeNat_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.858677752 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$ccompare_closure" {
     GHC.TypeNats.$fOrdSomeNat_$ccompare_closure:
         const GHC.TypeNats.$fOrdSomeNat_$ccompare_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c5ssv,
                       label: GHC.TypeNats.$fOrdSomeNat_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ssv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5ssz; else goto c5ssA;
       c5ssz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5ssA: // global
           I64[Sp - 16] = block_c5sss_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5ssI; else goto c5sst;
       u5ssI: // global
           call _c5sss(R1) args: 0, res: 0, upd: 0;
       c5sst: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sss() //  [R1]
         { info_tbl: [(c5sss,
                       label: block_c5sss_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sss: // global
           I64[Sp] = block_c5ssy_info;
           _s5s6P::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5s6P::P64;
           if (R1 & 7 != 0) goto u5ssH; else goto c5ssC;
       u5ssH: // global
           call _c5ssy(R1) args: 0, res: 0, upd: 0;
       c5ssC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5ssy() //  [R1]
         { info_tbl: [(c5ssy,
                       label: block_c5ssy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5ssy: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.874668674 UTC

[section ""data" . GHC.TypeNats.$fEqSomeNat_$c==_closure" {
     GHC.TypeNats.$fEqSomeNat_$c==_closure:
         const GHC.TypeNats.$fEqSomeNat_$c==_info;
 },
 GHC.TypeNats.$fEqSomeNat_$c==_entry() //  [R2, R3]
         { info_tbl: [(c5st3,
                       label: GHC.TypeNats.$fEqSomeNat_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5st3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5st7; else goto c5st8;
       c5st7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fEqSomeNat_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5st8: // global
           I64[Sp - 16] = block_c5st0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5stg; else goto c5st1;
       u5stg: // global
           call _c5st0(R1) args: 0, res: 0, upd: 0;
       c5st1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5st0() //  [R1]
         { info_tbl: [(c5st0,
                       label: block_c5st0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5st0: // global
           I64[Sp] = block_c5st6_info;
           _s5s6X::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5s6X::P64;
           if (R1 & 7 != 0) goto u5stf; else goto c5sta;
       u5stf: // global
           call _c5st6(R1) args: 0, res: 0, upd: 0;
       c5sta: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5st6() //  [R1]
         { info_tbl: [(c5st6,
                       label: block_c5st6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5st6: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.eqInteger_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.887282661 UTC

[section ""data" . GHC.TypeNats.$fEqSomeNat_$c/=_closure" {
     GHC.TypeNats.$fEqSomeNat_$c/=_closure:
         const GHC.TypeNats.$fEqSomeNat_$c/=_info;
 },
 GHC.TypeNats.$fEqSomeNat_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c5stB,
                       label: GHC.TypeNats.$fEqSomeNat_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5stB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5stF; else goto c5stG;
       c5stF: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fEqSomeNat_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5stG: // global
           I64[Sp - 16] = block_c5sty_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5stZ; else goto c5stz;
       u5stZ: // global
           call _c5sty(R1) args: 0, res: 0, upd: 0;
       c5stz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sty() //  [R1]
         { info_tbl: [(c5sty,
                       label: block_c5sty_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sty: // global
           I64[Sp] = block_c5stE_info;
           _s5s75::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5s75::P64;
           if (R1 & 7 != 0) goto u5stY; else goto c5stI;
       u5stY: // global
           call _c5stE(R1) args: 0, res: 0, upd: 0;
       c5stI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5stE() //  [R1]
         { info_tbl: [(c5stE,
                       label: block_c5stE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5stE: // global
           _s5s75::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5stM_info;
           R3 = P64[R1 + 7];
           R2 = _s5s75::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5stM() //  [R1]
         { info_tbl: [(c5stM,
                       label: block_c5stM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5stM: // global
           if (R1 == 1) goto c5stX; else goto c5stT;
       c5stX: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5stT: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.897718054 UTC

[section ""data" . GHC.TypeNats.$fEqSomeNat_closure" {
     GHC.TypeNats.$fEqSomeNat_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.TypeNats.$fEqSomeNat_$c==_closure+2;
         const GHC.TypeNats.$fEqSomeNat_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.900811339 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$c<_closure" {
     GHC.TypeNats.$fOrdSomeNat_$c<_closure:
         const GHC.TypeNats.$fOrdSomeNat_$c<_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$c<_entry() //  [R2, R3]
         { info_tbl: [(c5suq,
                       label: GHC.TypeNats.$fOrdSomeNat_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5suq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5suu; else goto c5suv;
       c5suu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5suv: // global
           I64[Sp - 16] = block_c5sun_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5suP; else goto c5suo;
       u5suP: // global
           call _c5sun(R1) args: 0, res: 0, upd: 0;
       c5suo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sun() //  [R1]
         { info_tbl: [(c5sun,
                       label: block_c5sun_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sun: // global
           I64[Sp] = block_c5sut_info;
           _s5s7e::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5s7e::P64;
           if (R1 & 7 != 0) goto u5suO; else goto c5sux;
       u5suO: // global
           call _c5sut(R1) args: 0, res: 0, upd: 0;
       c5sux: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sut() //  [R1]
         { info_tbl: [(c5sut,
                       label: block_c5sut_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sut: // global
           _s5s7e::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5suB_info;
           R3 = P64[R1 + 7];
           R2 = _s5s7e::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5suB() //  [R1]
         { info_tbl: [(c5suB,
                       label: block_c5suB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5suB: // global
           if (R1 & 7 == 1) goto c5suM; else goto c5suI;
       c5suM: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5suI: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.91317767 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$c>=_closure" {
     GHC.TypeNats.$fOrdSomeNat_$c>=_closure:
         const GHC.TypeNats.$fOrdSomeNat_$c>=_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c5svh,
                       label: GHC.TypeNats.$fOrdSomeNat_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5svh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5svl; else goto c5svm;
       c5svl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5svm: // global
           I64[Sp - 16] = block_c5sve_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5svG; else goto c5svf;
       u5svG: // global
           call _c5sve(R1) args: 0, res: 0, upd: 0;
       c5svf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sve() //  [R1]
         { info_tbl: [(c5sve,
                       label: block_c5sve_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sve: // global
           I64[Sp] = block_c5svk_info;
           _s5s7n::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5s7n::P64;
           if (R1 & 7 != 0) goto u5svF; else goto c5svo;
       u5svF: // global
           call _c5svk(R1) args: 0, res: 0, upd: 0;
       c5svo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5svk() //  [R1]
         { info_tbl: [(c5svk,
                       label: block_c5svk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5svk: // global
           _s5s7n::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5svs_info;
           R3 = P64[R1 + 7];
           R2 = _s5s7n::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5svs() //  [R1]
         { info_tbl: [(c5svs,
                       label: block_c5svs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5svs: // global
           if (R1 & 7 == 1) goto c5svD; else goto c5svz;
       c5svD: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5svz: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.923452343 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$c>_closure" {
     GHC.TypeNats.$fOrdSomeNat_$c>_closure:
         const GHC.TypeNats.$fOrdSomeNat_$c>_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$c>_entry() //  [R2, R3]
         { info_tbl: [(c5sw8,
                       label: GHC.TypeNats.$fOrdSomeNat_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sw8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5swc; else goto c5swd;
       c5swc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5swd: // global
           I64[Sp - 16] = block_c5sw5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5swx; else goto c5sw6;
       u5swx: // global
           call _c5sw5(R1) args: 0, res: 0, upd: 0;
       c5sw6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sw5() //  [R1]
         { info_tbl: [(c5sw5,
                       label: block_c5sw5_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sw5: // global
           I64[Sp] = block_c5swb_info;
           _s5s7w::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5s7w::P64;
           if (R1 & 7 != 0) goto u5sww; else goto c5swf;
       u5sww: // global
           call _c5swb(R1) args: 0, res: 0, upd: 0;
       c5swf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5swb() //  [R1]
         { info_tbl: [(c5swb,
                       label: block_c5swb_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5swb: // global
           _s5s7w::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5swj_info;
           R3 = P64[R1 + 7];
           R2 = _s5s7w::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5swj() //  [R1]
         { info_tbl: [(c5swj,
                       label: block_c5swj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5swj: // global
           if (R1 & 7 == 3) goto c5swu; else goto c5swq;
       c5swu: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5swq: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.935149538 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$c<=_closure" {
     GHC.TypeNats.$fOrdSomeNat_$c<=_closure:
         const GHC.TypeNats.$fOrdSomeNat_$c<=_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c5swZ,
                       label: GHC.TypeNats.$fOrdSomeNat_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5swZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sx3; else goto c5sx4;
       c5sx3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sx4: // global
           I64[Sp - 16] = block_c5swW_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5sxo; else goto c5swX;
       u5sxo: // global
           call _c5swW(R1) args: 0, res: 0, upd: 0;
       c5swX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5swW() //  [R1]
         { info_tbl: [(c5swW,
                       label: block_c5swW_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5swW: // global
           I64[Sp] = block_c5sx2_info;
           _s5s7F::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5s7F::P64;
           if (R1 & 7 != 0) goto u5sxn; else goto c5sx6;
       u5sxn: // global
           call _c5sx2(R1) args: 0, res: 0, upd: 0;
       c5sx6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sx2() //  [R1]
         { info_tbl: [(c5sx2,
                       label: block_c5sx2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sx2: // global
           _s5s7F::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5sxa_info;
           R3 = P64[R1 + 7];
           R2 = _s5s7F::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sxa() //  [R1]
         { info_tbl: [(c5sxa,
                       label: block_c5sxa_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sxa: // global
           if (R1 & 7 == 3) goto c5sxl; else goto c5sxh;
       c5sxl: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5sxh: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.945946965 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$cmax_closure" {
     GHC.TypeNats.$fOrdSomeNat_$cmax_closure:
         const GHC.TypeNats.$fOrdSomeNat_$cmax_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c5sxQ,
                       label: GHC.TypeNats.$fOrdSomeNat_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sxQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5sxU; else goto c5sxV;
       c5sxU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sxV: // global
           I64[Sp - 16] = block_c5sxN_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5syf; else goto c5sxO;
       u5syf: // global
           call _c5sxN(R1) args: 0, res: 0, upd: 0;
       c5sxO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sxN() //  [R1]
         { info_tbl: [(c5sxN,
                       label: block_c5sxN_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sxN: // global
           I64[Sp - 8] = block_c5sxT_info;
           _s5s7N::P64 = R1;
           _s5s7O::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _s5s7O::P64;
           P64[Sp + 8] = _s5s7N::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5sye; else goto c5sxX;
       u5sye: // global
           call _c5sxT(R1) args: 0, res: 0, upd: 0;
       c5sxX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sxT() //  [R1]
         { info_tbl: [(c5sxT,
                       label: block_c5sxT_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sxT: // global
           I64[Sp] = block_c5sy1_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sy1() //  [R1]
         { info_tbl: [(c5sy1,
                       label: block_c5sy1_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sy1: // global
           if (R1 & 7 == 3) goto c5syc; else goto c5sy8;
       c5syc: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5sy8: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.9575872 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$cmin_closure" {
     GHC.TypeNats.$fOrdSomeNat_$cmin_closure:
         const GHC.TypeNats.$fOrdSomeNat_$cmin_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c5syJ,
                       label: GHC.TypeNats.$fOrdSomeNat_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5syJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5syN; else goto c5syO;
       c5syN: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5syO: // global
           I64[Sp - 16] = block_c5syG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5sz8; else goto c5syH;
       u5sz8: // global
           call _c5syG(R1) args: 0, res: 0, upd: 0;
       c5syH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5syG() //  [R1]
         { info_tbl: [(c5syG,
                       label: block_c5syG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5syG: // global
           I64[Sp - 8] = block_c5syM_info;
           _s5s7W::P64 = R1;
           _s5s7X::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _s5s7X::P64;
           P64[Sp + 8] = _s5s7W::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5sz7; else goto c5syQ;
       u5sz7: // global
           call _c5syM(R1) args: 0, res: 0, upd: 0;
       c5syQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5syM() //  [R1]
         { info_tbl: [(c5syM,
                       label: block_c5syM_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5syM: // global
           I64[Sp] = block_c5syU_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5syU() //  [R1]
         { info_tbl: [(c5syU,
                       label: block_c5syU_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5syU: // global
           if (R1 & 7 == 3) goto c5sz5; else goto c5sz1;
       c5sz5: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5sz1: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.966552875 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_closure" {
     GHC.TypeNats.$fOrdSomeNat_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.TypeNats.$fEqSomeNat_closure+1;
         const GHC.TypeNats.$fOrdSomeNat_$ccompare_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$c<_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$c<=_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$c>_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$c>=_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$cmax_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.96851259 UTC

[section ""data" . GHC.TypeNats.natVal'1_closure" {
     GHC.TypeNats.natVal'1_closure:
         const GHC.TypeNats.natVal'1_info;
 },
 GHC.TypeNats.natVal'1_entry() //  [R2]
         { info_tbl: [(c5szA,
                       label: GHC.TypeNats.natVal'1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5szA: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.971957007 UTC

[section ""data" . GHC.TypeNats.natVal'_closure" {
     GHC.TypeNats.natVal'_closure:
         const GHC.TypeNats.natVal'_info;
 },
 GHC.TypeNats.natVal'_entry() //  [R2]
         { info_tbl: [(c5szN,
                       label: GHC.TypeNats.natVal'_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5szN: // global
           R2 = R2;
           call GHC.TypeNats.natVal'1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.976100056 UTC

[section ""data" . GHC.TypeNats.someNatVal_closure" {
     GHC.TypeNats.someNatVal_closure:
         const GHC.TypeNats.someNatVal_info;
 },
 GHC.TypeNats.someNatVal_entry() //  [R2]
         { info_tbl: [(c5szZ,
                       label: GHC.TypeNats.someNatVal_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5szZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5sA3; else goto c5sA2;
       c5sA3: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.TypeNats.someNatVal_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5sA2: // global
           I64[Hp - 16] = GHC.TypeNats.SomeNat_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Data.Proxy.Proxy_closure+1;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.98230739 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat_go_closure" {
     GHC.TypeNats.$fReadSomeNat_go_closure:
         const GHC.TypeNats.$fReadSomeNat_go_info;
 },
 sat_s5s8f_entry() //  [R1]
         { info_tbl: [(c5sAs,
                       label: sat_s5s8f_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sAs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sAt; else goto c5sAu;
       c5sAt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5sAu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.TypeNats.$fReadSomeNat_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.TypeNats.$fReadSomeNat_go_entry() //  [R2]
         { info_tbl: [(c5sAz,
                       label: GHC.TypeNats.$fReadSomeNat_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sAz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sAA; else goto c5sAB;
       c5sAA: // global
           R2 = R2;
           R1 = GHC.TypeNats.$fReadSomeNat_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5sAB: // global
           I64[Sp - 8] = block_c5sAd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5sAM; else goto c5sAe;
       u5sAM: // global
           call _c5sAd(R1) args: 0, res: 0, upd: 0;
       c5sAe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sAd() //  [R1]
         { info_tbl: [(c5sAd,
                       label: block_c5sAd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sAd: // global
           if (R1 & 7 == 1) goto c5sAw; else goto c5sAx;
       c5sAw: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5sAx: // global
           I64[Sp - 8] = block_c5sAj_info;
           _s5s89::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5s89::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5sAL; else goto c5sAk;
       u5sAL: // global
           call _c5sAj(R1) args: 0, res: 0, upd: 0;
       c5sAk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sAj() //  [R1]
         { info_tbl: [(c5sAj,
                       label: block_c5sAj_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sAj: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c5sAK; else goto c5sAJ;
       c5sAK: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5sAJ: // global
           _s5s8b::P64 = P64[R1 + 7];
           _s5s8c::P64 = P64[R1 + 15];
           I64[Hp - 88] = sat_s5s8f_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = GHC.TypeNats.SomeNat_con_info;
           P64[Hp - 56] = _s5s8b::P64;
           P64[Hp - 48] = Data.Proxy.Proxy_closure+1;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 63;
           P64[Hp - 24] = _s5s8c::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:27.998423142 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat_$creadsPrec_closure" {
     GHC.TypeNats.$fReadSomeNat_$creadsPrec_closure:
         const GHC.TypeNats.$fReadSomeNat_$creadsPrec_info;
         const 0;
 },
 GHC.TypeNats.$fReadSomeNat_$creadsPrec_entry() //  [R2, R3]
         { info_tbl: [(c5sBi,
                       label: GHC.TypeNats.$fReadSomeNat_$creadsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sBi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sBq; else goto c5sBr;
       c5sBq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fReadSomeNat_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sBr: // global
           I64[Sp - 16] = block_c5sBg_info;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           _s5s8h::P64 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadInteger2_closure+1;
           P64[Sp - 8] = _s5s8h::P64;
           Sp = Sp - 16;
           call GHC.Read.$fReadInteger_$sreadNumber_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sBg() //  [R1]
         { info_tbl: [(c5sBg,
                       label: block_c5sBg_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sBg: // global
           _s5s8h::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5sBl_info;
           R3 = _s5s8h::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sBl() //  [R1]
         { info_tbl: [(c5sBl,
                       label: block_c5sBl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sBl: // global
           I64[Sp] = block_c5sBp_info;
           R2 = R1;
           call GHC.Natural.$fReadNatural_go_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sBp() //  [R1]
         { info_tbl: [(c5sBp,
                       label: block_c5sBp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sBp: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.TypeNats.$fReadSomeNat_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.009663594 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat4_closure" {
     GHC.TypeNats.$fReadSomeNat4_closure:
         const GHC.TypeNats.$fReadSomeNat4_info;
         const 0;
 },
 sat_s5s8n_entry() //  [R1, R2]
         { info_tbl: [(c5sBV,
                       label: sat_s5s8n_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sBV: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.TypeNats.$fReadSomeNat_$creadsPrec_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 GHC.TypeNats.$fReadSomeNat4_entry() //  [R2, R3]
         { info_tbl: [(c5sC1,
                       label: GHC.TypeNats.$fReadSomeNat4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sC1: // global
           _s5s8m::P64 = R3;
           _s5s8l::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c5sC2; else goto c5sC3;
       c5sC3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5sC5; else goto c5sC4;
       c5sC5: // global
           HpAlloc = 16;
           goto c5sC2;
       c5sC2: // global
           R3 = _s5s8m::P64;
           R2 = _s5s8l::P64;
           R1 = GHC.TypeNats.$fReadSomeNat4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sC4: // global
           I64[Hp - 8] = sat_s5s8n_info;
           P64[Hp] = _s5s8l::P64;
           I64[Sp - 8] = block_c5sBY_info;
           R3 = _s5s8m::P64;
           R2 = Hp - 7;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sBY() //  [R1]
         { info_tbl: [(c5sBY,
                       label: block_c5sBY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sBY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5sC8; else goto c5sC7;
       c5sC8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5sC7: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.019513288 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat3_closure" {
     GHC.TypeNats.$fReadSomeNat3_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.022115181 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat2_closure" {
     GHC.TypeNats.$fReadSomeNat2_closure:
         const GHC.TypeNats.$fReadSomeNat2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.TypeNats.$fReadSomeNat2_entry() //  [R1]
         { info_tbl: [(c5sCs,
                       label: GHC.TypeNats.$fReadSomeNat2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sCs: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5sCt; else goto c5sCu;
       c5sCt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5sCu: // global
           (_c5sCp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5sCp::I64 == 0) goto c5sCr; else goto c5sCq;
       c5sCr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5sCq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5sCp::I64;
           R2 = GHC.TypeNats.$fReadSomeNat4_closure+2;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.TypeNats.$fReadSomeNat3_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.026547921 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat_$creadList_closure" {
     GHC.TypeNats.$fReadSomeNat_$creadList_closure:
         const GHC.TypeNats.$fReadSomeNat_$creadList_info;
         const 0;
 },
 GHC.TypeNats.$fReadSomeNat_$creadList_entry() //  [R2]
         { info_tbl: [(c5sCG,
                       label: GHC.TypeNats.$fReadSomeNat_$creadList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sCG: // global
           R3 = R2;
           R2 = GHC.TypeNats.$fReadSomeNat2_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.030476354 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat1_closure" {
     GHC.TypeNats.$fReadSomeNat1_closure:
         const GHC.TypeNats.$fReadSomeNat1_info;
         const 0;
 },
 GHC.TypeNats.$fReadSomeNat1_entry() //  [R2, R3]
         { info_tbl: [(c5sCU,
                       label: GHC.TypeNats.$fReadSomeNat1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sCU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5sCV; else goto c5sCW;
       c5sCV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fReadSomeNat1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sCW: // global
           I64[Sp - 8] = block_c5sCR_info;
           R3 = R3;
           R2 = GHC.TypeNats.$fReadSomeNat_$creadList_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sCR() //  [R1]
         { info_tbl: [(c5sCR,
                       label: block_c5sCR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sCR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5sCZ; else goto c5sCY;
       c5sCZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5sCY: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.038584196 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat_closure" {
     GHC.TypeNats.$fReadSomeNat_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.TypeNats.$fReadSomeNat_$creadsPrec_closure+2;
         const GHC.TypeNats.$fReadSomeNat_$creadList_closure+1;
         const GHC.TypeNats.$fReadSomeNat4_closure+2;
         const GHC.TypeNats.$fReadSomeNat1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.040956223 UTC

[section ""cstring" . GHC.TypeNats.$trModule4_bytes" {
     GHC.TypeNats.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.043232024 UTC

[section ""data" . GHC.TypeNats.$trModule3_closure" {
     GHC.TypeNats.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.046057115 UTC

[section ""cstring" . GHC.TypeNats.$trModule2_bytes" {
     GHC.TypeNats.$trModule2_bytes:
         I8[] [71,72,67,46,84,121,112,101,78,97,116,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.048174199 UTC

[section ""data" . GHC.TypeNats.$trModule1_closure" {
     GHC.TypeNats.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.050370082 UTC

[section ""data" . GHC.TypeNats.$trModule_closure" {
     GHC.TypeNats.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.TypeNats.$trModule3_closure+1;
         const GHC.TypeNats.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.052616213 UTC

[section ""data" . $krep_r5s5Z_closure" {
     $krep_r5s5Z_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.05471276 UTC

[section ""data" . $krep1_r5s60_closure" {
     $krep1_r5s60_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Natural.$tcNatural_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.056982081 UTC

[section ""data" . $krep2_r5s61_closure" {
     $krep2_r5s61_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.058767852 UTC

[section ""data" . $krep3_r5s62_closure" {
     $krep3_r5s62_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcNat_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.060420215 UTC

[section ""data" . $krep4_r5s63_closure" {
     $krep4_r5s63_closure:
         const :_con_info;
         const $krep_r5s5Z_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.062396695 UTC

[section ""data" . $krep5_r5s64_closure" {
     $krep5_r5s64_closure:
         const :_con_info;
         const $krep3_r5s62_closure+1;
         const $krep4_r5s63_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.063945743 UTC

[section ""data" . $krep6_r5s65_closure" {
     $krep6_r5s65_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Proxy.$tcProxy_closure;
         const $krep5_r5s64_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.065586827 UTC

[section ""data" . GHC.TypeNats.$tcKnownNat1_closure" {
     GHC.TypeNats.$tcKnownNat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r5s62_closure+1;
         const $krep2_r5s61_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.067994566 UTC

[section ""data" . GHC.TypeNats.$tcSNat1_closure" {
     GHC.TypeNats.$tcSNat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r5s62_closure+1;
         const GHC.Types.krep$*_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.070484378 UTC

[section ""data" . GHC.TypeNats.$tcWrapN1_closure" {
     GHC.TypeNats.$tcWrapN1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r5s62_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.072122181 UTC

[section ""data" . $krep7_r5s66_closure" {
     $krep7_r5s66_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.073746053 UTC

[section ""data" . $krep8_r5s67_closure" {
     $krep8_r5s67_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r5s65_closure+1;
         const $krep7_r5s66_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.075425261 UTC

[section ""cstring" . GHC.TypeNats.$tcSNat3_bytes" {
     GHC.TypeNats.$tcSNat3_bytes:
         I8[] [83,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.077009519 UTC

[section ""data" . GHC.TypeNats.$tcSNat2_closure" {
     GHC.TypeNats.$tcSNat2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tcSNat3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.078653679 UTC

[section ""data" . GHC.TypeNats.$tcSNat_closure" {
     GHC.TypeNats.$tcSNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tcSNat2_closure+1;
         const GHC.TypeNats.$tcSNat1_closure+4;
         const 14249323166640683464;
         const 2956401390546376063;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.080409126 UTC

[section ""data" . $krep9_r5s68_closure" {
     $krep9_r5s68_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.TypeNats.$tcSNat_closure+1;
         const $krep4_r5s63_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.082160901 UTC

[section ""data" . GHC.TypeNats.$tc'SNat1_closure" {
     GHC.TypeNats.$tc'SNat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r5s60_closure+1;
         const $krep9_r5s68_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.083768433 UTC

[section ""cstring" . GHC.TypeNats.$tc'SNat3_bytes" {
     GHC.TypeNats.$tc'SNat3_bytes:
         I8[] [39,83,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.085415016 UTC

[section ""data" . GHC.TypeNats.$tc'SNat2_closure" {
     GHC.TypeNats.$tc'SNat2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tc'SNat3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.087101519 UTC

[section ""data" . GHC.TypeNats.$tc'SNat_closure" {
     GHC.TypeNats.$tc'SNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tc'SNat2_closure+1;
         const GHC.TypeNats.$tc'SNat1_closure+4;
         const 10248898659057561068;
         const 4968065829559829914;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.088864915 UTC

[section ""cstring" . GHC.TypeNats.$tcKnownNat3_bytes" {
     GHC.TypeNats.$tcKnownNat3_bytes:
         I8[] [75,110,111,119,110,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.090603822 UTC

[section ""data" . GHC.TypeNats.$tcKnownNat2_closure" {
     GHC.TypeNats.$tcKnownNat2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tcKnownNat3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.09288201 UTC

[section ""data" . GHC.TypeNats.$tcKnownNat_closure" {
     GHC.TypeNats.$tcKnownNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tcKnownNat2_closure+1;
         const GHC.TypeNats.$tcKnownNat1_closure+4;
         const 4406426137333124098;
         const 3858660218128115833;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.09504109 UTC

[section ""data" . $krep10_r5s69_closure" {
     $krep10_r5s69_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.TypeNats.$tcKnownNat_closure+1;
         const $krep4_r5s63_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.096730122 UTC

[section ""data" . $krep11_r5s6a_closure" {
     $krep11_r5s6a_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r5s69_closure+1;
         const $krep8_r5s67_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.098454659 UTC

[section ""data" . GHC.TypeNats.$tc'C:KnownNat1_closure" {
     GHC.TypeNats.$tc'C:KnownNat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r5s68_closure+1;
         const $krep10_r5s69_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.100123951 UTC

[section ""cstring" . GHC.TypeNats.$tc'C:KnownNat3_bytes" {
     GHC.TypeNats.$tc'C:KnownNat3_bytes:
         I8[] [39,67,58,75,110,111,119,110,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.101827816 UTC

[section ""data" . GHC.TypeNats.$tc'C:KnownNat2_closure" {
     GHC.TypeNats.$tc'C:KnownNat2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tc'C:KnownNat3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.103501275 UTC

[section ""data" . GHC.TypeNats.$tc'C:KnownNat_closure" {
     GHC.TypeNats.$tc'C:KnownNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tc'C:KnownNat2_closure+1;
         const GHC.TypeNats.$tc'C:KnownNat1_closure+4;
         const 12421457977663053218;
         const 18328904747962077722;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.105309631 UTC

[section ""cstring" . GHC.TypeNats.$tcSomeNat2_bytes" {
     GHC.TypeNats.$tcSomeNat2_bytes:
         I8[] [83,111,109,101,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.106965392 UTC

[section ""data" . GHC.TypeNats.$tcSomeNat1_closure" {
     GHC.TypeNats.$tcSomeNat1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tcSomeNat2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.108653314 UTC

[section ""data" . GHC.TypeNats.$tcSomeNat_closure" {
     GHC.TypeNats.$tcSomeNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tcSomeNat1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9244180789053763601;
         const 6189216451384407387;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.110517286 UTC

[section ""data" . $krep12_r5s6b_closure" {
     $krep12_r5s6b_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.TypeNats.$tcSomeNat_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.112173909 UTC

[section ""data" . $krep13_r5s6c_closure" {
     $krep13_r5s6c_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r5s65_closure+1;
         const $krep12_r5s6b_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.11395372 UTC

[section ""data" . GHC.TypeNats.$tc'SomeNat1_closure" {
     GHC.TypeNats.$tc'SomeNat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r5s69_closure+1;
         const $krep13_r5s6c_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.115603033 UTC

[section ""cstring" . GHC.TypeNats.$tc'SomeNat3_bytes" {
     GHC.TypeNats.$tc'SomeNat3_bytes:
         I8[] [39,83,111,109,101,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.118539499 UTC

[section ""data" . GHC.TypeNats.$tc'SomeNat2_closure" {
     GHC.TypeNats.$tc'SomeNat2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tc'SomeNat3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.120326656 UTC

[section ""data" . GHC.TypeNats.$tc'SomeNat_closure" {
     GHC.TypeNats.$tc'SomeNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tc'SomeNat2_closure+1;
         const GHC.TypeNats.$tc'SomeNat1_closure+4;
         const 5872332339143923373;
         const 16743196919708003695;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.122113903 UTC

[section ""cstring" . GHC.TypeNats.$tcWrapN3_bytes" {
     GHC.TypeNats.$tcWrapN3_bytes:
         I8[] [87,114,97,112,78]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.123629016 UTC

[section ""data" . GHC.TypeNats.$tcWrapN2_closure" {
     GHC.TypeNats.$tcWrapN2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tcWrapN3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.125299227 UTC

[section ""data" . GHC.TypeNats.$tcWrapN_closure" {
     GHC.TypeNats.$tcWrapN_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tcWrapN2_closure+1;
         const GHC.TypeNats.$tcWrapN1_closure+4;
         const 825875854269014453;
         const 10073258292275044429;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.127057938 UTC

[section ""data" . $krep14_r5s6d_closure" {
     $krep14_r5s6d_closure:
         const :_con_info;
         const $krep7_r5s66_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.128697144 UTC

[section ""data" . $krep15_r5s6e_closure" {
     $krep15_r5s6e_closure:
         const :_con_info;
         const $krep_r5s5Z_closure+2;
         const $krep14_r5s6d_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.130378916 UTC

[section ""data" . $krep16_r5s6f_closure" {
     $krep16_r5s6f_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.TypeNats.$tcWrapN_closure+1;
         const $krep15_r5s6e_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.132081591 UTC

[section ""data" . GHC.TypeNats.$tc'WrapN1_closure" {
     GHC.TypeNats.$tc'WrapN1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r5s6a_closure+4;
         const $krep16_r5s6f_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.133905309 UTC

[section ""cstring" . GHC.TypeNats.$tc'WrapN3_bytes" {
     GHC.TypeNats.$tc'WrapN3_bytes:
         I8[] [39,87,114,97,112,78]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.135545734 UTC

[section ""data" . GHC.TypeNats.$tc'WrapN2_closure" {
     GHC.TypeNats.$tc'WrapN2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tc'WrapN3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.13719237 UTC

[section ""data" . GHC.TypeNats.$tc'WrapN_closure" {
     GHC.TypeNats.$tc'WrapN_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tc'WrapN2_closure+1;
         const GHC.TypeNats.$tc'WrapN1_closure+4;
         const 731800900372900037;
         const 17722817696101367246;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.140048042 UTC

[section ""data" . GHC.TypeNats.WrapN_closure" {
     GHC.TypeNats.WrapN_closure:
         const GHC.TypeNats.WrapN_info;
 },
 GHC.TypeNats.WrapN_entry() //  [R2]
         { info_tbl: [(c5sE6,
                       label: GHC.TypeNats.WrapN_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sE6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5sEa; else goto c5sE9;
       c5sEa: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.TypeNats.WrapN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5sE9: // global
           I64[Hp - 8] = GHC.TypeNats.WrapN_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.14406755 UTC

[section ""data" . GHC.TypeNats.SomeNat_closure" {
     GHC.TypeNats.SomeNat_closure:
         const GHC.TypeNats.SomeNat_info;
 },
 GHC.TypeNats.SomeNat_entry() //  [R2, R3]
         { info_tbl: [(c5sEl,
                       label: GHC.TypeNats.SomeNat_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sEl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5sEp; else goto c5sEo;
       c5sEp: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.SomeNat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sEo: // global
           I64[Hp - 16] = GHC.TypeNats.SomeNat_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.148575236 UTC

[GHC.TypeNats.WrapN_con_entry() //  [R1]
         { info_tbl: [(c5sEv,
                       label: GHC.TypeNats.WrapN_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,84,121,112,101,78,97,116,115,46,87,114,97,112,78]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sEv: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.15198167 UTC

[GHC.TypeNats.SomeNat_con_entry() //  [R1]
         { info_tbl: [(c5sEB,
                       label: GHC.TypeNats.SomeNat_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,84,121,112,101,78,97,116,115,46,83,111,109,101,78,97,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sEB: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.155843224 UTC

[section ""relreadonly" . S5s9l_srt" {
     S5s9l_srt:
         const GHC.Show.$fShowInteger_$cshowsPrec_closure;
         const GHC.TypeNats.$fShowSomeNat_$cshowsPrec_closure;
         const GHC.Show.$w$cshowsPrec4_closure;
         const GHC.TypeNats.$fShowSomeNat_$cshow_closure;
         const GHC.TypeNats.$fShowSomeNat1_closure;
         const GHC.Read.$fReadInteger2_closure;
         const GHC.Read.$fReadInteger_$sreadNumber_closure;
         const GHC.Natural.$fReadNatural_go_closure;
         const GHC.TypeNats.$fReadSomeNat_$creadsPrec_closure;
         const GHC.TypeNats.$fReadSomeNat4_closure;
         const GHC.Read.list_closure;
         const GHC.TypeNats.$fReadSomeNat2_closure;
         const GHC.TypeNats.$fReadSomeNat1_closure;
         const GHC.TypeNats.$fReadSomeNat_$creadList_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.688088134 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:00:28.68952656 UTC

[section ""data" . GHC.TypeNats.natSing_closure" {
     GHC.TypeNats.natSing_closure:
         const GHC.TypeNats.natSing_info;
 },
 GHC.TypeNats.natSing_entry() //  [R2]
         { info_tbl: [(c5sGZ,
                       label: GHC.TypeNats.natSing_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sGZ: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.693057528 UTC

[section ""data" . GHC.TypeNats.natVal1_closure" {
     GHC.TypeNats.natVal1_closure:
         const GHC.TypeNats.natVal1_info;
 },
 GHC.TypeNats.natVal1_entry() //  [R2]
         { info_tbl: [(c5sHc,
                       label: GHC.TypeNats.natVal1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sHc: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.696505072 UTC

[section ""data" . GHC.TypeNats.natVal_closure" {
     GHC.TypeNats.natVal_closure:
         const GHC.TypeNats.natVal_info;
 },
 GHC.TypeNats.natVal_entry() //  [R2, R3]
         { info_tbl: [(c5sHp,
                       label: GHC.TypeNats.natVal_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sHp: // global
           R3 = R3;
           R2 = R2;
           call GHC.TypeNats.natVal1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.699950602 UTC

[section ""data" . GHC.TypeNats.sameNat1_closure" {
     GHC.TypeNats.sameNat1_closure:
         const GHC.Base.Just_con_info;
         const Data.Type.Equality.$WRefl_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.702189576 UTC

[section ""data" . GHC.TypeNats.sameNat_closure" {
     GHC.TypeNats.sameNat_closure:
         const GHC.TypeNats.sameNat_info;
 },
 GHC.TypeNats.sameNat_entry() //  [R2, R3, R4, R5]
         { info_tbl: [(c5sHG,
                       label: GHC.TypeNats.sameNat_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 24} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sHG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5sHH; else goto c5sHI;
       c5sHH: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.sameNat_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sHI: // global
           I64[Sp - 8] = block_c5sHB_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sHB() //  [R1]
         { info_tbl: [(c5sHB,
                       label: block_c5sHB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sHB: // global
           if (R1 == 1) goto c5sHF; else goto c5sHE;
       c5sHF: // global
           R1 = GHC.TypeNats.sameNat1_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5sHE: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.708434138 UTC

[section ""data" . GHC.TypeNats.$fShowSomeNat_$cshowsPrec_closure" {
     GHC.TypeNats.$fShowSomeNat_$cshowsPrec_closure:
         const GHC.TypeNats.$fShowSomeNat_$cshowsPrec_info;
         const 0;
 },
 GHC.TypeNats.$fShowSomeNat_$cshowsPrec_entry() //  [R2, R3, R4]
         { info_tbl: [(c5sI8,
                       label: GHC.TypeNats.$fShowSomeNat_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sI8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5sI9; else goto c5sIa;
       c5sI9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fShowSomeNat_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sIa: // global
           I64[Sp - 24] = block_c5sI5_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u5sIe; else goto c5sI6;
       u5sIe: // global
           call _c5sI5(R1) args: 0, res: 0, upd: 0;
       c5sI6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sI5() //  [R1]
         { info_tbl: [(c5sI5,
                       label: block_c5sI5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sI5: // global
           R4 = P64[Sp + 16];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Show.$fShowInteger_$cshowsPrec_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.715231769 UTC

[section ""data" . GHC.TypeNats.$fShowSomeNat_$cshow_closure" {
     GHC.TypeNats.$fShowSomeNat_$cshow_closure:
         const GHC.TypeNats.$fShowSomeNat_$cshow_info;
         const 0;
 },
 GHC.TypeNats.$fShowSomeNat_$cshow_entry() //  [R2]
         { info_tbl: [(c5sIx,
                       label: GHC.TypeNats.$fShowSomeNat_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sIx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5sID; else goto c5sIE;
       c5sID: // global
           R2 = R2;
           R1 = GHC.TypeNats.$fShowSomeNat_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5sIE: // global
           I64[Sp - 8] = block_c5sIu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5sIJ; else goto c5sIv;
       u5sIJ: // global
           call _c5sIu(R1) args: 0, res: 0, upd: 0;
       c5sIv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sIu() //  [R1]
         { info_tbl: [(c5sIu,
                       label: block_c5sIu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sIu: // global
           I64[Sp] = block_c5sIA_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 7];
           R2 = 0;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sIA() //  [R1, R2]
         { info_tbl: [(c5sIA,
                       label: block_c5sIA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sIA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5sII; else goto c5sIH;
       c5sII: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5sIH: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.724629235 UTC

[section ""data" . GHC.TypeNats.$fShowSomeNat1_closure" {
     GHC.TypeNats.$fShowSomeNat1_closure:
         const GHC.TypeNats.$fShowSomeNat1_info;
         const 0;
 },
 GHC.TypeNats.$fShowSomeNat1_entry() //  [R2, R3]
         { info_tbl: [(c5sJ8,
                       label: GHC.TypeNats.$fShowSomeNat1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sJ8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sJe; else goto c5sJf;
       c5sJe: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fShowSomeNat1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sJf: // global
           I64[Sp - 16] = block_c5sJ5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5sJk; else goto c5sJ6;
       u5sJk: // global
           call _c5sJ5(R1) args: 0, res: 0, upd: 0;
       c5sJ6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sJ5() //  [R1]
         { info_tbl: [(c5sJ5,
                       label: block_c5sJ5_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sJ5: // global
           _s5sF4::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5sJb_info;
           R4 = _s5sF4::P64;
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sJb() //  [R1, R2]
         { info_tbl: [(c5sJb,
                       label: block_c5sJb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sJb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5sJj; else goto c5sJi;
       c5sJj: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c5sJi: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.733324195 UTC

[section ""data" . GHC.TypeNats.$fShowSomeNat_$cshowList_closure" {
     GHC.TypeNats.$fShowSomeNat_$cshowList_closure:
         const GHC.TypeNats.$fShowSomeNat_$cshowList_info;
         const 0;
 },
 GHC.TypeNats.$fShowSomeNat_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c5sJF,
                       label: GHC.TypeNats.$fShowSomeNat_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sJF: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.TypeNats.$fShowSomeNat1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.736780324 UTC

[section ""data" . GHC.TypeNats.$fShowSomeNat_closure" {
     GHC.TypeNats.$fShowSomeNat_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.TypeNats.$fShowSomeNat_$cshowsPrec_closure+3;
         const GHC.TypeNats.$fShowSomeNat_$cshow_closure+1;
         const GHC.TypeNats.$fShowSomeNat_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.739055615 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$ccompare_closure" {
     GHC.TypeNats.$fOrdSomeNat_$ccompare_closure:
         const GHC.TypeNats.$fOrdSomeNat_$ccompare_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c5sJU,
                       label: GHC.TypeNats.$fOrdSomeNat_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sJU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sJY; else goto c5sJZ;
       c5sJY: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sJZ: // global
           I64[Sp - 16] = block_c5sJR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5sK7; else goto c5sJS;
       u5sK7: // global
           call _c5sJR(R1) args: 0, res: 0, upd: 0;
       c5sJS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sJR() //  [R1]
         { info_tbl: [(c5sJR,
                       label: block_c5sJR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sJR: // global
           I64[Sp] = block_c5sJX_info;
           _s5sFg::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5sFg::P64;
           if (R1 & 7 != 0) goto u5sK6; else goto c5sK1;
       u5sK6: // global
           call _c5sJX(R1) args: 0, res: 0, upd: 0;
       c5sK1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sJX() //  [R1]
         { info_tbl: [(c5sJX,
                       label: block_c5sJX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sJX: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.747508634 UTC

[section ""data" . GHC.TypeNats.$fEqSomeNat_$c==_closure" {
     GHC.TypeNats.$fEqSomeNat_$c==_closure:
         const GHC.TypeNats.$fEqSomeNat_$c==_info;
 },
 GHC.TypeNats.$fEqSomeNat_$c==_entry() //  [R2, R3]
         { info_tbl: [(c5sKu,
                       label: GHC.TypeNats.$fEqSomeNat_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sKu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sKy; else goto c5sKz;
       c5sKy: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fEqSomeNat_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sKz: // global
           I64[Sp - 16] = block_c5sKr_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5sKH; else goto c5sKs;
       u5sKH: // global
           call _c5sKr(R1) args: 0, res: 0, upd: 0;
       c5sKs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sKr() //  [R1]
         { info_tbl: [(c5sKr,
                       label: block_c5sKr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sKr: // global
           I64[Sp] = block_c5sKx_info;
           _s5sFo::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5sFo::P64;
           if (R1 & 7 != 0) goto u5sKG; else goto c5sKB;
       u5sKG: // global
           call _c5sKx(R1) args: 0, res: 0, upd: 0;
       c5sKB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sKx() //  [R1]
         { info_tbl: [(c5sKx,
                       label: block_c5sKx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sKx: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.eqInteger_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.755668426 UTC

[section ""data" . GHC.TypeNats.$fEqSomeNat_$c/=_closure" {
     GHC.TypeNats.$fEqSomeNat_$c/=_closure:
         const GHC.TypeNats.$fEqSomeNat_$c/=_info;
 },
 GHC.TypeNats.$fEqSomeNat_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c5sL4,
                       label: GHC.TypeNats.$fEqSomeNat_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sL4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sL8; else goto c5sL9;
       c5sL8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fEqSomeNat_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sL9: // global
           I64[Sp - 16] = block_c5sL1_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5sLs; else goto c5sL2;
       u5sLs: // global
           call _c5sL1(R1) args: 0, res: 0, upd: 0;
       c5sL2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sL1() //  [R1]
         { info_tbl: [(c5sL1,
                       label: block_c5sL1_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sL1: // global
           I64[Sp] = block_c5sL7_info;
           _s5sFw::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5sFw::P64;
           if (R1 & 7 != 0) goto u5sLr; else goto c5sLb;
       u5sLr: // global
           call _c5sL7(R1) args: 0, res: 0, upd: 0;
       c5sLb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sL7() //  [R1]
         { info_tbl: [(c5sL7,
                       label: block_c5sL7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sL7: // global
           _s5sFw::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5sLf_info;
           R3 = P64[R1 + 7];
           R2 = _s5sFw::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sLf() //  [R1]
         { info_tbl: [(c5sLf,
                       label: block_c5sLf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sLf: // global
           if (R1 == 1) goto c5sLq; else goto c5sLm;
       c5sLq: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5sLm: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.764588457 UTC

[section ""data" . GHC.TypeNats.$fEqSomeNat_closure" {
     GHC.TypeNats.$fEqSomeNat_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.TypeNats.$fEqSomeNat_$c==_closure+2;
         const GHC.TypeNats.$fEqSomeNat_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.766956205 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$c<_closure" {
     GHC.TypeNats.$fOrdSomeNat_$c<_closure:
         const GHC.TypeNats.$fOrdSomeNat_$c<_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$c<_entry() //  [R2, R3]
         { info_tbl: [(c5sLY,
                       label: GHC.TypeNats.$fOrdSomeNat_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sLY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sM2; else goto c5sM3;
       c5sM2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sM3: // global
           I64[Sp - 16] = block_c5sLV_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5sMn; else goto c5sLW;
       u5sMn: // global
           call _c5sLV(R1) args: 0, res: 0, upd: 0;
       c5sLW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sLV() //  [R1]
         { info_tbl: [(c5sLV,
                       label: block_c5sLV_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sLV: // global
           I64[Sp] = block_c5sM1_info;
           _s5sFF::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5sFF::P64;
           if (R1 & 7 != 0) goto u5sMm; else goto c5sM5;
       u5sMm: // global
           call _c5sM1(R1) args: 0, res: 0, upd: 0;
       c5sM5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sM1() //  [R1]
         { info_tbl: [(c5sM1,
                       label: block_c5sM1_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sM1: // global
           _s5sFF::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5sM9_info;
           R3 = P64[R1 + 7];
           R2 = _s5sFF::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sM9() //  [R1]
         { info_tbl: [(c5sM9,
                       label: block_c5sM9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sM9: // global
           if (R1 & 7 == 1) goto c5sMk; else goto c5sMg;
       c5sMk: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5sMg: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.779755378 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$c>=_closure" {
     GHC.TypeNats.$fOrdSomeNat_$c>=_closure:
         const GHC.TypeNats.$fOrdSomeNat_$c>=_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c5sMU,
                       label: GHC.TypeNats.$fOrdSomeNat_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sMU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sMY; else goto c5sMZ;
       c5sMY: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sMZ: // global
           I64[Sp - 16] = block_c5sMR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5sNj; else goto c5sMS;
       u5sNj: // global
           call _c5sMR(R1) args: 0, res: 0, upd: 0;
       c5sMS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sMR() //  [R1]
         { info_tbl: [(c5sMR,
                       label: block_c5sMR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sMR: // global
           I64[Sp] = block_c5sMX_info;
           _s5sFO::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5sFO::P64;
           if (R1 & 7 != 0) goto u5sNi; else goto c5sN1;
       u5sNi: // global
           call _c5sMX(R1) args: 0, res: 0, upd: 0;
       c5sN1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sMX() //  [R1]
         { info_tbl: [(c5sMX,
                       label: block_c5sMX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sMX: // global
           _s5sFO::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5sN5_info;
           R3 = P64[R1 + 7];
           R2 = _s5sFO::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sN5() //  [R1]
         { info_tbl: [(c5sN5,
                       label: block_c5sN5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sN5: // global
           if (R1 & 7 == 1) goto c5sNg; else goto c5sNc;
       c5sNg: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5sNc: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.794008638 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$c>_closure" {
     GHC.TypeNats.$fOrdSomeNat_$c>_closure:
         const GHC.TypeNats.$fOrdSomeNat_$c>_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$c>_entry() //  [R2, R3]
         { info_tbl: [(c5sNQ,
                       label: GHC.TypeNats.$fOrdSomeNat_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sNQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sNU; else goto c5sNV;
       c5sNU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sNV: // global
           I64[Sp - 16] = block_c5sNN_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5sOf; else goto c5sNO;
       u5sOf: // global
           call _c5sNN(R1) args: 0, res: 0, upd: 0;
       c5sNO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sNN() //  [R1]
         { info_tbl: [(c5sNN,
                       label: block_c5sNN_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sNN: // global
           I64[Sp] = block_c5sNT_info;
           _s5sFX::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5sFX::P64;
           if (R1 & 7 != 0) goto u5sOe; else goto c5sNX;
       u5sOe: // global
           call _c5sNT(R1) args: 0, res: 0, upd: 0;
       c5sNX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sNT() //  [R1]
         { info_tbl: [(c5sNT,
                       label: block_c5sNT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sNT: // global
           _s5sFX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5sO1_info;
           R3 = P64[R1 + 7];
           R2 = _s5sFX::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sO1() //  [R1]
         { info_tbl: [(c5sO1,
                       label: block_c5sO1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sO1: // global
           if (R1 & 7 == 3) goto c5sOc; else goto c5sO8;
       c5sOc: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5sO8: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.808275042 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$c<=_closure" {
     GHC.TypeNats.$fOrdSomeNat_$c<=_closure:
         const GHC.TypeNats.$fOrdSomeNat_$c<=_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c5sOM,
                       label: GHC.TypeNats.$fOrdSomeNat_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sOM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sOQ; else goto c5sOR;
       c5sOQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sOR: // global
           I64[Sp - 16] = block_c5sOJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5sPb; else goto c5sOK;
       u5sPb: // global
           call _c5sOJ(R1) args: 0, res: 0, upd: 0;
       c5sOK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sOJ() //  [R1]
         { info_tbl: [(c5sOJ,
                       label: block_c5sOJ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sOJ: // global
           I64[Sp] = block_c5sOP_info;
           _s5sG6::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s5sG6::P64;
           if (R1 & 7 != 0) goto u5sPa; else goto c5sOT;
       u5sPa: // global
           call _c5sOP(R1) args: 0, res: 0, upd: 0;
       c5sOT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sOP() //  [R1]
         { info_tbl: [(c5sOP,
                       label: block_c5sOP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sOP: // global
           _s5sG6::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5sOX_info;
           R3 = P64[R1 + 7];
           R2 = _s5sG6::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sOX() //  [R1]
         { info_tbl: [(c5sOX,
                       label: block_c5sOX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sOX: // global
           if (R1 & 7 == 3) goto c5sP8; else goto c5sP4;
       c5sP8: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5sP4: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.821186785 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$cmax_closure" {
     GHC.TypeNats.$fOrdSomeNat_$cmax_closure:
         const GHC.TypeNats.$fOrdSomeNat_$cmax_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c5sPI,
                       label: GHC.TypeNats.$fOrdSomeNat_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sPI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5sPM; else goto c5sPN;
       c5sPM: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sPN: // global
           I64[Sp - 16] = block_c5sPF_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5sQ7; else goto c5sPG;
       u5sQ7: // global
           call _c5sPF(R1) args: 0, res: 0, upd: 0;
       c5sPG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sPF() //  [R1]
         { info_tbl: [(c5sPF,
                       label: block_c5sPF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sPF: // global
           I64[Sp - 8] = block_c5sPL_info;
           _s5sGe::P64 = R1;
           _s5sGf::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _s5sGf::P64;
           P64[Sp + 8] = _s5sGe::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5sQ6; else goto c5sPP;
       u5sQ6: // global
           call _c5sPL(R1) args: 0, res: 0, upd: 0;
       c5sPP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sPL() //  [R1]
         { info_tbl: [(c5sPL,
                       label: block_c5sPL_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sPL: // global
           I64[Sp] = block_c5sPT_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sPT() //  [R1]
         { info_tbl: [(c5sPT,
                       label: block_c5sPT_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sPT: // global
           if (R1 & 7 == 3) goto c5sQ4; else goto c5sQ0;
       c5sQ4: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5sQ0: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.831679032 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_$cmin_closure" {
     GHC.TypeNats.$fOrdSomeNat_$cmin_closure:
         const GHC.TypeNats.$fOrdSomeNat_$cmin_info;
 },
 GHC.TypeNats.$fOrdSomeNat_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c5sQE,
                       label: GHC.TypeNats.$fOrdSomeNat_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sQE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c5sQI; else goto c5sQJ;
       c5sQI: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fOrdSomeNat_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sQJ: // global
           I64[Sp - 16] = block_c5sQB_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u5sR3; else goto c5sQC;
       u5sR3: // global
           call _c5sQB(R1) args: 0, res: 0, upd: 0;
       c5sQC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sQB() //  [R1]
         { info_tbl: [(c5sQB,
                       label: block_c5sQB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sQB: // global
           I64[Sp - 8] = block_c5sQH_info;
           _s5sGn::P64 = R1;
           _s5sGo::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp] = _s5sGo::P64;
           P64[Sp + 8] = _s5sGn::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5sR2; else goto c5sQL;
       u5sR2: // global
           call _c5sQH(R1) args: 0, res: 0, upd: 0;
       c5sQL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sQH() //  [R1]
         { info_tbl: [(c5sQH,
                       label: block_c5sQH_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sQH: // global
           I64[Sp] = block_c5sQP_info;
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call GHC.Integer.Type.compareInteger_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sQP() //  [R1]
         { info_tbl: [(c5sQP,
                       label: block_c5sQP_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sQP: // global
           if (R1 & 7 == 3) goto c5sR0; else goto c5sQW;
       c5sR0: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c5sQW: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.841627866 UTC

[section ""data" . GHC.TypeNats.$fOrdSomeNat_closure" {
     GHC.TypeNats.$fOrdSomeNat_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.TypeNats.$fEqSomeNat_closure+1;
         const GHC.TypeNats.$fOrdSomeNat_$ccompare_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$c<_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$c<=_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$c>_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$c>=_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$cmax_closure+2;
         const GHC.TypeNats.$fOrdSomeNat_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.843865341 UTC

[section ""data" . GHC.TypeNats.natVal'1_closure" {
     GHC.TypeNats.natVal'1_closure:
         const GHC.TypeNats.natVal'1_info;
 },
 GHC.TypeNats.natVal'1_entry() //  [R2]
         { info_tbl: [(c5sRy,
                       label: GHC.TypeNats.natVal'1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sRy: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.847872695 UTC

[section ""data" . GHC.TypeNats.natVal'_closure" {
     GHC.TypeNats.natVal'_closure:
         const GHC.TypeNats.natVal'_info;
 },
 GHC.TypeNats.natVal'_entry() //  [R2]
         { info_tbl: [(c5sRL,
                       label: GHC.TypeNats.natVal'_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sRL: // global
           R2 = R2;
           call GHC.TypeNats.natVal'1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.852164286 UTC

[section ""data" . GHC.TypeNats.someNatVal_closure" {
     GHC.TypeNats.someNatVal_closure:
         const GHC.TypeNats.someNatVal_info;
 },
 GHC.TypeNats.someNatVal_entry() //  [R2]
         { info_tbl: [(c5sRX,
                       label: GHC.TypeNats.someNatVal_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sRX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5sS1; else goto c5sS0;
       c5sS1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.TypeNats.someNatVal_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5sS0: // global
           I64[Hp - 16] = GHC.TypeNats.SomeNat_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Data.Proxy.Proxy_closure+1;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.856984797 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat_go_closure" {
     GHC.TypeNats.$fReadSomeNat_go_closure:
         const GHC.TypeNats.$fReadSomeNat_go_info;
 },
 sat_s5sGG_entry() //  [R1]
         { info_tbl: [(c5sSt,
                       label: sat_s5sGG_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sSt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sSu; else goto c5sSv;
       c5sSu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5sSv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.TypeNats.$fReadSomeNat_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.TypeNats.$fReadSomeNat_go_entry() //  [R2]
         { info_tbl: [(c5sSA,
                       label: GHC.TypeNats.$fReadSomeNat_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sSA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sSB; else goto c5sSC;
       c5sSB: // global
           R2 = R2;
           R1 = GHC.TypeNats.$fReadSomeNat_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5sSC: // global
           I64[Sp - 8] = block_c5sSe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5sSN; else goto c5sSf;
       u5sSN: // global
           call _c5sSe(R1) args: 0, res: 0, upd: 0;
       c5sSf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sSe() //  [R1]
         { info_tbl: [(c5sSe,
                       label: block_c5sSe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sSe: // global
           if (R1 & 7 == 1) goto c5sSx; else goto c5sSy;
       c5sSx: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c5sSy: // global
           I64[Sp - 8] = block_c5sSk_info;
           _s5sGA::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s5sGA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u5sSM; else goto c5sSl;
       u5sSM: // global
           call _c5sSk(R1) args: 0, res: 0, upd: 0;
       c5sSl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c5sSk() //  [R1]
         { info_tbl: [(c5sSk,
                       label: block_c5sSk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sSk: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c5sSL; else goto c5sSK;
       c5sSL: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5sSK: // global
           _s5sGC::P64 = P64[R1 + 7];
           _s5sGD::P64 = P64[R1 + 15];
           I64[Hp - 88] = sat_s5sGG_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = GHC.TypeNats.SomeNat_con_info;
           P64[Hp - 56] = _s5sGC::P64;
           P64[Hp - 48] = Data.Proxy.Proxy_closure+1;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = Hp - 63;
           P64[Hp - 24] = _s5sGD::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.868765886 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat_$creadsPrec_closure" {
     GHC.TypeNats.$fReadSomeNat_$creadsPrec_closure:
         const GHC.TypeNats.$fReadSomeNat_$creadsPrec_info;
         const 0;
 },
 GHC.TypeNats.$fReadSomeNat_$creadsPrec_entry() //  [R2, R3]
         { info_tbl: [(c5sTt,
                       label: GHC.TypeNats.$fReadSomeNat_$creadsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sTt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c5sTB; else goto c5sTC;
       c5sTB: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fReadSomeNat_$creadsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sTC: // global
           I64[Sp - 16] = block_c5sTr_info;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           _s5sGI::P64 = R3;
           R3 = R2;
           R2 = GHC.Read.$fReadInteger2_closure+1;
           P64[Sp - 8] = _s5sGI::P64;
           Sp = Sp - 16;
           call GHC.Read.$fReadInteger_$sreadNumber_entry(R4,
                                                          R3,
                                                          R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sTr() //  [R1]
         { info_tbl: [(c5sTr,
                       label: block_c5sTr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sTr: // global
           _s5sGI::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c5sTw_info;
           R3 = _s5sGI::P64;
           R2 = R1;
           Sp = Sp + 8;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sTw() //  [R1]
         { info_tbl: [(c5sTw,
                       label: block_c5sTw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sTw: // global
           I64[Sp] = block_c5sTA_info;
           R2 = R1;
           call GHC.Natural.$fReadNatural_go_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sTA() //  [R1]
         { info_tbl: [(c5sTA,
                       label: block_c5sTA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sTA: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.TypeNats.$fReadSomeNat_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.878462316 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat4_closure" {
     GHC.TypeNats.$fReadSomeNat4_closure:
         const GHC.TypeNats.$fReadSomeNat4_info;
         const 0;
 },
 sat_s5sGO_entry() //  [R1, R2]
         { info_tbl: [(c5sUb,
                       label: sat_s5sGO_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sUb: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.TypeNats.$fReadSomeNat_$creadsPrec_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 GHC.TypeNats.$fReadSomeNat4_entry() //  [R2, R3]
         { info_tbl: [(c5sUh,
                       label: GHC.TypeNats.$fReadSomeNat4_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sUh: // global
           _s5sGN::P64 = R3;
           _s5sGM::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c5sUi; else goto c5sUj;
       c5sUj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5sUl; else goto c5sUk;
       c5sUl: // global
           HpAlloc = 16;
           goto c5sUi;
       c5sUi: // global
           R3 = _s5sGN::P64;
           R2 = _s5sGM::P64;
           R1 = GHC.TypeNats.$fReadSomeNat4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sUk: // global
           I64[Hp - 8] = sat_s5sGO_info;
           P64[Hp] = _s5sGM::P64;
           I64[Sp - 8] = block_c5sUe_info;
           R3 = _s5sGN::P64;
           R2 = Hp - 7;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sUe() //  [R1]
         { info_tbl: [(c5sUe,
                       label: block_c5sUe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sUe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5sUo; else goto c5sUn;
       c5sUo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5sUn: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.890158448 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat3_closure" {
     GHC.TypeNats.$fReadSomeNat3_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.892958183 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat2_closure" {
     GHC.TypeNats.$fReadSomeNat2_closure:
         const GHC.TypeNats.$fReadSomeNat2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.TypeNats.$fReadSomeNat2_entry() //  [R1]
         { info_tbl: [(c5sUL,
                       label: GHC.TypeNats.$fReadSomeNat2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sUL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c5sUM; else goto c5sUN;
       c5sUM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c5sUN: // global
           (_c5sUI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c5sUI::I64 == 0) goto c5sUK; else goto c5sUJ;
       c5sUK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c5sUJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c5sUI::I64;
           R2 = GHC.TypeNats.$fReadSomeNat4_closure+2;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.TypeNats.$fReadSomeNat3_closure+1;
           P64[Sp - 24] = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           Sp = Sp - 40;
           call GHC.Read.list_entry(R2) args: 48, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.900089814 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat_$creadList_closure" {
     GHC.TypeNats.$fReadSomeNat_$creadList_closure:
         const GHC.TypeNats.$fReadSomeNat_$creadList_info;
         const 0;
 },
 GHC.TypeNats.$fReadSomeNat_$creadList_entry() //  [R2]
         { info_tbl: [(c5sV4,
                       label: GHC.TypeNats.$fReadSomeNat_$creadList_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sV4: // global
           R3 = R2;
           R2 = GHC.TypeNats.$fReadSomeNat2_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.905529691 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat1_closure" {
     GHC.TypeNats.$fReadSomeNat1_closure:
         const GHC.TypeNats.$fReadSomeNat1_info;
         const 0;
 },
 GHC.TypeNats.$fReadSomeNat1_entry() //  [R2, R3]
         { info_tbl: [(c5sVi,
                       label: GHC.TypeNats.$fReadSomeNat1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sVi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c5sVj; else goto c5sVk;
       c5sVj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.$fReadSomeNat1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sVk: // global
           I64[Sp - 8] = block_c5sVf_info;
           R3 = R3;
           R2 = GHC.TypeNats.$fReadSomeNat_$creadList_closure+1;
           Sp = Sp - 8;
           call Text.ParserCombinators.ReadP.$wreadS_to_P_entry(R3,
                                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _c5sVf() //  [R1]
         { info_tbl: [(c5sVf,
                       label: block_c5sVf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sVf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5sVn; else goto c5sVm;
       c5sVn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c5sVm: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.914550435 UTC

[section ""data" . GHC.TypeNats.$fReadSomeNat_closure" {
     GHC.TypeNats.$fReadSomeNat_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.TypeNats.$fReadSomeNat_$creadsPrec_closure+2;
         const GHC.TypeNats.$fReadSomeNat_$creadList_closure+1;
         const GHC.TypeNats.$fReadSomeNat4_closure+2;
         const GHC.TypeNats.$fReadSomeNat1_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.917313107 UTC

[section ""cstring" . GHC.TypeNats.$trModule4_bytes" {
     GHC.TypeNats.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.919031739 UTC

[section ""data" . GHC.TypeNats.$trModule3_closure" {
     GHC.TypeNats.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.921833624 UTC

[section ""cstring" . GHC.TypeNats.$trModule2_bytes" {
     GHC.TypeNats.$trModule2_bytes:
         I8[] [71,72,67,46,84,121,112,101,78,97,116,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.925142874 UTC

[section ""data" . GHC.TypeNats.$trModule1_closure" {
     GHC.TypeNats.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.92777475 UTC

[section ""data" . GHC.TypeNats.$trModule_closure" {
     GHC.TypeNats.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.TypeNats.$trModule3_closure+1;
         const GHC.TypeNats.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.930355554 UTC

[section ""data" . $krep_r5s5Z_closure" {
     $krep_r5s5Z_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.932968267 UTC

[section ""data" . $krep1_r5s60_closure" {
     $krep1_r5s60_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Natural.$tcNatural_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.935783823 UTC

[section ""data" . $krep2_r5s61_closure" {
     $krep2_r5s61_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.938506193 UTC

[section ""data" . $krep3_r5s62_closure" {
     $krep3_r5s62_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcNat_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.941118251 UTC

[section ""data" . $krep4_r5s63_closure" {
     $krep4_r5s63_closure:
         const :_con_info;
         const $krep_r5s5Z_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.943556009 UTC

[section ""data" . $krep5_r5s64_closure" {
     $krep5_r5s64_closure:
         const :_con_info;
         const $krep3_r5s62_closure+1;
         const $krep4_r5s63_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.946728663 UTC

[section ""data" . $krep6_r5s65_closure" {
     $krep6_r5s65_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Proxy.$tcProxy_closure;
         const $krep5_r5s64_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.949510763 UTC

[section ""data" . GHC.TypeNats.$tcKnownNat1_closure" {
     GHC.TypeNats.$tcKnownNat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r5s62_closure+1;
         const $krep2_r5s61_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.952133941 UTC

[section ""data" . GHC.TypeNats.$tcSNat1_closure" {
     GHC.TypeNats.$tcSNat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r5s62_closure+1;
         const GHC.Types.krep$*_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.954850874 UTC

[section ""data" . GHC.TypeNats.$tcWrapN1_closure" {
     GHC.TypeNats.$tcWrapN1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r5s62_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.957872234 UTC

[section ""data" . $krep7_r5s66_closure" {
     $krep7_r5s66_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.960536765 UTC

[section ""data" . $krep8_r5s67_closure" {
     $krep8_r5s67_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r5s65_closure+1;
         const $krep7_r5s66_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.964154104 UTC

[section ""cstring" . GHC.TypeNats.$tcSNat3_bytes" {
     GHC.TypeNats.$tcSNat3_bytes:
         I8[] [83,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.966488074 UTC

[section ""data" . GHC.TypeNats.$tcSNat2_closure" {
     GHC.TypeNats.$tcSNat2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tcSNat3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.968924504 UTC

[section ""data" . GHC.TypeNats.$tcSNat_closure" {
     GHC.TypeNats.$tcSNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tcSNat2_closure+1;
         const GHC.TypeNats.$tcSNat1_closure+4;
         const 14249323166640683464;
         const 2956401390546376063;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.971730525 UTC

[section ""data" . $krep9_r5s68_closure" {
     $krep9_r5s68_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.TypeNats.$tcSNat_closure+1;
         const $krep4_r5s63_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.974811863 UTC

[section ""data" . GHC.TypeNats.$tc'SNat1_closure" {
     GHC.TypeNats.$tc'SNat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r5s60_closure+1;
         const $krep9_r5s68_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.97742384 UTC

[section ""cstring" . GHC.TypeNats.$tc'SNat3_bytes" {
     GHC.TypeNats.$tc'SNat3_bytes:
         I8[] [39,83,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.979685769 UTC

[section ""data" . GHC.TypeNats.$tc'SNat2_closure" {
     GHC.TypeNats.$tc'SNat2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tc'SNat3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.981950827 UTC

[section ""data" . GHC.TypeNats.$tc'SNat_closure" {
     GHC.TypeNats.$tc'SNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tc'SNat2_closure+1;
         const GHC.TypeNats.$tc'SNat1_closure+4;
         const 10248898659057561068;
         const 4968065829559829914;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.983715335 UTC

[section ""cstring" . GHC.TypeNats.$tcKnownNat3_bytes" {
     GHC.TypeNats.$tcKnownNat3_bytes:
         I8[] [75,110,111,119,110,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.98531977 UTC

[section ""data" . GHC.TypeNats.$tcKnownNat2_closure" {
     GHC.TypeNats.$tcKnownNat2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tcKnownNat3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.98701319 UTC

[section ""data" . GHC.TypeNats.$tcKnownNat_closure" {
     GHC.TypeNats.$tcKnownNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tcKnownNat2_closure+1;
         const GHC.TypeNats.$tcKnownNat1_closure+4;
         const 4406426137333124098;
         const 3858660218128115833;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.988724993 UTC

[section ""data" . $krep10_r5s69_closure" {
     $krep10_r5s69_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.TypeNats.$tcKnownNat_closure+1;
         const $krep4_r5s63_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.991151829 UTC

[section ""data" . $krep11_r5s6a_closure" {
     $krep11_r5s6a_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r5s69_closure+1;
         const $krep8_r5s67_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.9929634 UTC

[section ""data" . GHC.TypeNats.$tc'C:KnownNat1_closure" {
     GHC.TypeNats.$tc'C:KnownNat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r5s68_closure+1;
         const $krep10_r5s69_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.995312091 UTC

[section ""cstring" . GHC.TypeNats.$tc'C:KnownNat3_bytes" {
     GHC.TypeNats.$tc'C:KnownNat3_bytes:
         I8[] [39,67,58,75,110,111,119,110,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.996886625 UTC

[section ""data" . GHC.TypeNats.$tc'C:KnownNat2_closure" {
     GHC.TypeNats.$tc'C:KnownNat2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tc'C:KnownNat3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:28.998549377 UTC

[section ""data" . GHC.TypeNats.$tc'C:KnownNat_closure" {
     GHC.TypeNats.$tc'C:KnownNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tc'C:KnownNat2_closure+1;
         const GHC.TypeNats.$tc'C:KnownNat1_closure+4;
         const 12421457977663053218;
         const 18328904747962077722;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.000201409 UTC

[section ""cstring" . GHC.TypeNats.$tcSomeNat2_bytes" {
     GHC.TypeNats.$tcSomeNat2_bytes:
         I8[] [83,111,109,101,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.001832902 UTC

[section ""data" . GHC.TypeNats.$tcSomeNat1_closure" {
     GHC.TypeNats.$tcSomeNat1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tcSomeNat2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.003436563 UTC

[section ""data" . GHC.TypeNats.$tcSomeNat_closure" {
     GHC.TypeNats.$tcSomeNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tcSomeNat1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9244180789053763601;
         const 6189216451384407387;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.005178533 UTC

[section ""data" . $krep12_r5s6b_closure" {
     $krep12_r5s6b_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.TypeNats.$tcSomeNat_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.00688834 UTC

[section ""data" . $krep13_r5s6c_closure" {
     $krep13_r5s6c_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r5s65_closure+1;
         const $krep12_r5s6b_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.008554065 UTC

[section ""data" . GHC.TypeNats.$tc'SomeNat1_closure" {
     GHC.TypeNats.$tc'SomeNat1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_r5s69_closure+1;
         const $krep13_r5s6c_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.010787764 UTC

[section ""cstring" . GHC.TypeNats.$tc'SomeNat3_bytes" {
     GHC.TypeNats.$tc'SomeNat3_bytes:
         I8[] [39,83,111,109,101,78,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.012390463 UTC

[section ""data" . GHC.TypeNats.$tc'SomeNat2_closure" {
     GHC.TypeNats.$tc'SomeNat2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tc'SomeNat3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.014060381 UTC

[section ""data" . GHC.TypeNats.$tc'SomeNat_closure" {
     GHC.TypeNats.$tc'SomeNat_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tc'SomeNat2_closure+1;
         const GHC.TypeNats.$tc'SomeNat1_closure+4;
         const 5872332339143923373;
         const 16743196919708003695;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.015846475 UTC

[section ""cstring" . GHC.TypeNats.$tcWrapN3_bytes" {
     GHC.TypeNats.$tcWrapN3_bytes:
         I8[] [87,114,97,112,78]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.017480876 UTC

[section ""data" . GHC.TypeNats.$tcWrapN2_closure" {
     GHC.TypeNats.$tcWrapN2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tcWrapN3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.019742234 UTC

[section ""data" . GHC.TypeNats.$tcWrapN_closure" {
     GHC.TypeNats.$tcWrapN_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tcWrapN2_closure+1;
         const GHC.TypeNats.$tcWrapN1_closure+4;
         const 825875854269014453;
         const 10073258292275044429;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.021525835 UTC

[section ""data" . $krep14_r5s6d_closure" {
     $krep14_r5s6d_closure:
         const :_con_info;
         const $krep7_r5s66_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.023176026 UTC

[section ""data" . $krep15_r5s6e_closure" {
     $krep15_r5s6e_closure:
         const :_con_info;
         const $krep_r5s5Z_closure+2;
         const $krep14_r5s6d_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.024812968 UTC

[section ""data" . $krep16_r5s6f_closure" {
     $krep16_r5s6f_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.TypeNats.$tcWrapN_closure+1;
         const $krep15_r5s6e_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.026485906 UTC

[section ""data" . GHC.TypeNats.$tc'WrapN1_closure" {
     GHC.TypeNats.$tc'WrapN1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r5s6a_closure+4;
         const $krep16_r5s6f_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.028098729 UTC

[section ""cstring" . GHC.TypeNats.$tc'WrapN3_bytes" {
     GHC.TypeNats.$tc'WrapN3_bytes:
         I8[] [39,87,114,97,112,78]
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.029671454 UTC

[section ""data" . GHC.TypeNats.$tc'WrapN2_closure" {
     GHC.TypeNats.$tc'WrapN2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TypeNats.$tc'WrapN3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.031320705 UTC

[section ""data" . GHC.TypeNats.$tc'WrapN_closure" {
     GHC.TypeNats.$tc'WrapN_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.TypeNats.$trModule_closure+1;
         const GHC.TypeNats.$tc'WrapN2_closure+1;
         const GHC.TypeNats.$tc'WrapN1_closure+4;
         const 731800900372900037;
         const 17722817696101367246;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.033437799 UTC

[section ""data" . GHC.TypeNats.WrapN_closure" {
     GHC.TypeNats.WrapN_closure:
         const GHC.TypeNats.WrapN_info;
 },
 GHC.TypeNats.WrapN_entry() //  [R2]
         { info_tbl: [(c5sWw,
                       label: GHC.TypeNats.WrapN_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sWw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c5sWA; else goto c5sWz;
       c5sWA: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.TypeNats.WrapN_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c5sWz: // global
           I64[Hp - 8] = GHC.TypeNats.WrapN_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.03732532 UTC

[section ""data" . GHC.TypeNats.SomeNat_closure" {
     GHC.TypeNats.SomeNat_closure:
         const GHC.TypeNats.SomeNat_info;
 },
 GHC.TypeNats.SomeNat_entry() //  [R2, R3]
         { info_tbl: [(c5sWM,
                       label: GHC.TypeNats.SomeNat_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sWM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c5sWQ; else goto c5sWP;
       c5sWQ: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.TypeNats.SomeNat_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c5sWP: // global
           I64[Hp - 16] = GHC.TypeNats.SomeNat_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.04093427 UTC

[GHC.TypeNats.WrapN_con_entry() //  [R1]
         { info_tbl: [(c5sWX,
                       label: GHC.TypeNats.WrapN_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,84,121,112,101,78,97,116,115,46,87,114,97,112,78]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sWX: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.045392629 UTC

[GHC.TypeNats.SomeNat_con_entry() //  [R1]
         { info_tbl: [(c5sX4,
                       label: GHC.TypeNats.SomeNat_con_info
                       rep:HeapRep 2 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,84,121,112,101,78,97,116,115,46,83,111,109,101,78,97,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c5sX4: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:00:29.049179496 UTC

[section ""relreadonly" . S5sIf_srt" {
     S5sIf_srt:
         const GHC.Show.$fShowInteger_$cshowsPrec_closure;
         const GHC.TypeNats.$fShowSomeNat_$cshowsPrec_closure;
         const GHC.Show.$w$cshowsPrec4_closure;
         const GHC.TypeNats.$fShowSomeNat_$cshow_closure;
         const GHC.TypeNats.$fShowSomeNat1_closure;
         const GHC.Read.$fReadInteger2_closure;
         const GHC.Read.$fReadInteger_$sreadNumber_closure;
         const GHC.Natural.$fReadNatural_go_closure;
         const GHC.TypeNats.$fReadSomeNat_$creadsPrec_closure;
         const GHC.TypeNats.$fReadSomeNat4_closure;
         const GHC.Read.list_closure;
         const GHC.TypeNats.$fReadSomeNat2_closure;
         const GHC.TypeNats.$fReadSomeNat1_closure;
         const GHC.TypeNats.$fReadSomeNat_$creadList_closure;
 }]

