
==================== Output Cmm ====================
2018-03-16 15:56:32.11952694 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:56:32.120617242 UTC

[section ""data" . GHC.STRef.$fEqSTRef_$c==_closure" {
     GHC.STRef.$fEqSTRef_$c==_closure:
         const GHC.STRef.$fEqSTRef_$c==_info;
 },
 GHC.STRef.$fEqSTRef_$c==_entry() //  [R2, R3]
         { info_tbl: [(c1KDp,
                       label: GHC.STRef.$fEqSTRef_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KDp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1KDt; else goto c1KDu;
       c1KDt: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.STRef.$fEqSTRef_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1KDu: // global
           I64[Sp - 16] = block_c1KDm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1KDD; else goto c1KDn;
       u1KDD: // global
           call _c1KDm(R1) args: 0, res: 0, upd: 0;
       c1KDn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KDm() //  [R1]
         { info_tbl: [(c1KDm,
                       label: block_c1KDm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KDm: // global
           I64[Sp] = block_c1KDs_info;
           _s1KCR::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1KCR::P64;
           if (R1 & 7 != 0) goto u1KDC; else goto c1KDw;
       u1KDC: // global
           call _c1KDs(R1) args: 0, res: 0, upd: 0;
       c1KDw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KDs() //  [R1]
         { info_tbl: [(c1KDs,
                       label: block_c1KDs_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KDs: // global
           R1 = I64[((P64[Sp + 8] == P64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.12240719 UTC

[section ""data" . GHC.STRef.$fEqSTRef_$c/=_closure" {
     GHC.STRef.$fEqSTRef_$c/=_closure:
         const GHC.STRef.$fEqSTRef_$c/=_info;
 },
 GHC.STRef.$fEqSTRef_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c1KDL,
                       label: GHC.STRef.$fEqSTRef_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KDL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1KDP; else goto c1KDQ;
       c1KDP: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.STRef.$fEqSTRef_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1KDQ: // global
           I64[Sp - 16] = block_c1KDI_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1KEd; else goto c1KDJ;
       u1KEd: // global
           call _c1KDI(R1) args: 0, res: 0, upd: 0;
       c1KDJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KDI() //  [R1]
         { info_tbl: [(c1KDI,
                       label: block_c1KDI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KDI: // global
           I64[Sp] = block_c1KDO_info;
           _s1KCY::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1KCY::P64;
           if (R1 & 7 != 0) goto u1KEc; else goto c1KDS;
       u1KEc: // global
           call _c1KDO(R1) args: 0, res: 0, upd: 0;
       c1KDS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KDO() //  [R1]
         { info_tbl: [(c1KDO,
                       label: block_c1KDO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KDO: // global
           if (P64[Sp + 8] == P64[R1 + 7]) goto c1KE8; else goto c1KE2;
       c1KE8: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1KE2: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.123694146 UTC

[section ""data" . GHC.STRef.$fEqSTRef_closure" {
     GHC.STRef.$fEqSTRef_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.STRef.$fEqSTRef_$c==_closure+2;
         const GHC.STRef.$fEqSTRef_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.125002398 UTC

[section ""data" . GHC.STRef.newSTRef1_closure" {
     GHC.STRef.newSTRef1_closure:
         const GHC.STRef.newSTRef1_info;
 },
 GHC.STRef.newSTRef1_entry() //  [R2]
         { info_tbl: [(c1KEl,
                       label: GHC.STRef.newSTRef1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KEl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1KEm; else goto c1KEn;
       c1KEm: // global
           R2 = R2;
           R1 = GHC.STRef.newSTRef1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KEn: // global
           I64[Sp - 8] = block_c1KEi_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KEi() //  [R1]
         { info_tbl: [(c1KEi,
                       label: block_c1KEi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KEi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1KEq; else goto c1KEp;
       c1KEq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1KEp: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.126126954 UTC

[section ""data" . GHC.STRef.newSTRef_closure" {
     GHC.STRef.newSTRef_closure:
         const GHC.STRef.newSTRef_info;
 },
 GHC.STRef.newSTRef_entry() //  [R2]
         { info_tbl: [(c1KEv,
                       label: GHC.STRef.newSTRef_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KEv: // global
           R2 = R2;
           call GHC.STRef.newSTRef1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.127016677 UTC

[section ""data" . GHC.STRef.readSTRef1_closure" {
     GHC.STRef.readSTRef1_closure:
         const GHC.STRef.readSTRef1_info;
 },
 GHC.STRef.readSTRef1_entry() //  [R2]
         { info_tbl: [(c1KEF,
                       label: GHC.STRef.readSTRef1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KEF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1KEJ; else goto c1KEK;
       c1KEJ: // global
           R2 = R2;
           R1 = GHC.STRef.readSTRef1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KEK: // global
           I64[Sp - 8] = block_c1KEC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1KEM; else goto c1KED;
       u1KEM: // global
           call _c1KEC(R1) args: 0, res: 0, upd: 0;
       c1KED: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KEC() //  [R1]
         { info_tbl: [(c1KEC,
                       label: block_c1KEC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KEC: // global
           R1 = P64[P64[R1 + 7] + 8];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.128088475 UTC

[section ""data" . GHC.STRef.readSTRef_closure" {
     GHC.STRef.readSTRef_closure:
         const GHC.STRef.readSTRef_info;
 },
 GHC.STRef.readSTRef_entry() //  [R2]
         { info_tbl: [(c1KER,
                       label: GHC.STRef.readSTRef_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KER: // global
           R2 = R2;
           call GHC.STRef.readSTRef1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.129046994 UTC

[section ""data" . GHC.STRef.writeSTRef1_closure" {
     GHC.STRef.writeSTRef1_closure:
         const GHC.STRef.writeSTRef1_info;
 },
 GHC.STRef.writeSTRef1_entry() //  [R2, R3]
         { info_tbl: [(c1KF1,
                       label: GHC.STRef.writeSTRef1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KF1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1KF2; else goto c1KF3;
       c1KF2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.STRef.writeSTRef1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1KF3: // global
           I64[Sp - 16] = block_c1KEY_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1KFa; else goto c1KEZ;
       u1KFa: // global
           call _c1KEY(R1) args: 0, res: 0, upd: 0;
       c1KEZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KEY() //  [R1]
         { info_tbl: [(c1KEY,
                       label: block_c1KEY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KEY: // global
           _s1KDd::P64 = P64[Sp + 8];
           _s1KDg::P64 = P64[R1 + 7];
           call MO_WriteBarrier();
           P64[_s1KDg::P64 + 8] = _s1KDd::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s1KDg::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.13033081 UTC

[section ""data" . GHC.STRef.writeSTRef_closure" {
     GHC.STRef.writeSTRef_closure:
         const GHC.STRef.writeSTRef_info;
 },
 GHC.STRef.writeSTRef_entry() //  [R2, R3]
         { info_tbl: [(c1KFf,
                       label: GHC.STRef.writeSTRef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KFf: // global
           R3 = R3;
           R2 = R2;
           call GHC.STRef.writeSTRef1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.131031328 UTC

[section ""cstring" . GHC.STRef.$trModule4_bytes" {
     GHC.STRef.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.131566095 UTC

[section ""data" . GHC.STRef.$trModule3_closure" {
     GHC.STRef.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.STRef.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.132131517 UTC

[section ""cstring" . GHC.STRef.$trModule2_bytes" {
     GHC.STRef.$trModule2_bytes:
         I8[] [71,72,67,46,83,84,82,101,102]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.132676101 UTC

[section ""data" . GHC.STRef.$trModule1_closure" {
     GHC.STRef.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.STRef.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.133421258 UTC

[section ""data" . GHC.STRef.$trModule_closure" {
     GHC.STRef.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.STRef.$trModule3_closure+1;
         const GHC.STRef.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.134006547 UTC

[section ""data" . $krep_r1KCH_closure" {
     $krep_r1KCH_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.13455565 UTC

[section ""data" . $krep1_r1KCI_closure" {
     $krep1_r1KCI_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.135131041 UTC

[section ""data" . $krep2_r1KCJ_closure" {
     $krep2_r1KCJ_closure:
         const :_con_info;
         const $krep_r1KCH_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.136212849 UTC

[section ""data" . $krep3_r1KCK_closure" {
     $krep3_r1KCK_closure:
         const :_con_info;
         const $krep1_r1KCI_closure+2;
         const $krep2_r1KCJ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.136770202 UTC

[section ""data" . $krep4_r1KCL_closure" {
     $krep4_r1KCL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutVar#_closure;
         const $krep3_r1KCK_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.137391982 UTC

[section ""cstring" . GHC.STRef.$tcSTRef2_bytes" {
     GHC.STRef.$tcSTRef2_bytes:
         I8[] [83,84,82,101,102]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.137935585 UTC

[section ""data" . GHC.STRef.$tcSTRef1_closure" {
     GHC.STRef.$tcSTRef1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.STRef.$tcSTRef2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.138473561 UTC

[section ""data" . GHC.STRef.$tcSTRef_closure" {
     GHC.STRef.$tcSTRef_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.STRef.$trModule_closure+1;
         const GHC.STRef.$tcSTRef1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 12301805959212734792;
         const 9407763519371677403;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.139072143 UTC

[section ""data" . $krep5_r1KCM_closure" {
     $krep5_r1KCM_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.STRef.$tcSTRef_closure+1;
         const $krep3_r1KCK_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.139627124 UTC

[section ""data" . GHC.STRef.$tc'STRef1_closure" {
     GHC.STRef.$tc'STRef1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r1KCL_closure+1;
         const $krep5_r1KCM_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.140174139 UTC

[section ""cstring" . GHC.STRef.$tc'STRef3_bytes" {
     GHC.STRef.$tc'STRef3_bytes:
         I8[] [39,83,84,82,101,102]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.140722227 UTC

[section ""data" . GHC.STRef.$tc'STRef2_closure" {
     GHC.STRef.$tc'STRef2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.STRef.$tc'STRef3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.141329927 UTC

[section ""data" . GHC.STRef.$tc'STRef_closure" {
     GHC.STRef.$tc'STRef_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.STRef.$trModule_closure+1;
         const GHC.STRef.$tc'STRef2_closure+1;
         const GHC.STRef.$tc'STRef1_closure+4;
         const 18008618360073045522;
         const 5182275770463432138;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.1422513 UTC

[section ""data" . GHC.STRef.STRef_closure" {
     GHC.STRef.STRef_closure:
         const GHC.STRef.STRef_info;
 },
 GHC.STRef.STRef_entry() //  [R2]
         { info_tbl: [(c1KFn,
                       label: GHC.STRef.STRef_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KFn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1KFr; else goto c1KFq;
       c1KFr: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.STRef.STRef_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KFq: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.143180834 UTC

[GHC.STRef.STRef_con_entry() //  [R1]
         { info_tbl: [(c1KFs,
                       label: GHC.STRef.STRef_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,83,84,82,101,102,46,83,84,82,101,102]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KFs: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.143839062 UTC

[section ""relreadonly" . S1KFt_srt" { S1KFt_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.144396642 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:56:32.145283351 UTC

[section ""data" . GHC.STRef.$fEqSTRef_$c==_closure" {
     GHC.STRef.$fEqSTRef_$c==_closure:
         const GHC.STRef.$fEqSTRef_$c==_info;
 },
 GHC.STRef.$fEqSTRef_$c==_entry() //  [R2, R3]
         { info_tbl: [(c1KFB,
                       label: GHC.STRef.$fEqSTRef_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KFB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1KFF; else goto c1KFG;
       c1KFF: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.STRef.$fEqSTRef_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1KFG: // global
           I64[Sp - 16] = block_c1KFy_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1KFP; else goto c1KFz;
       u1KFP: // global
           call _c1KFy(R1) args: 0, res: 0, upd: 0;
       c1KFz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KFy() //  [R1]
         { info_tbl: [(c1KFy,
                       label: block_c1KFy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KFy: // global
           I64[Sp] = block_c1KFE_info;
           _s1KCR::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1KCR::P64;
           if (R1 & 7 != 0) goto u1KFO; else goto c1KFI;
       u1KFO: // global
           call _c1KFE(R1) args: 0, res: 0, upd: 0;
       c1KFI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KFE() //  [R1]
         { info_tbl: [(c1KFE,
                       label: block_c1KFE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KFE: // global
           R1 = I64[((P64[Sp + 8] == P64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.147433367 UTC

[section ""data" . GHC.STRef.$fEqSTRef_$c/=_closure" {
     GHC.STRef.$fEqSTRef_$c/=_closure:
         const GHC.STRef.$fEqSTRef_$c/=_info;
 },
 GHC.STRef.$fEqSTRef_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c1KFX,
                       label: GHC.STRef.$fEqSTRef_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KFX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1KG1; else goto c1KG2;
       c1KG1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.STRef.$fEqSTRef_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1KG2: // global
           I64[Sp - 16] = block_c1KFU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1KGp; else goto c1KFV;
       u1KGp: // global
           call _c1KFU(R1) args: 0, res: 0, upd: 0;
       c1KFV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KFU() //  [R1]
         { info_tbl: [(c1KFU,
                       label: block_c1KFU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KFU: // global
           I64[Sp] = block_c1KG0_info;
           _s1KCY::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1KCY::P64;
           if (R1 & 7 != 0) goto u1KGo; else goto c1KG4;
       u1KGo: // global
           call _c1KG0(R1) args: 0, res: 0, upd: 0;
       c1KG4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KG0() //  [R1]
         { info_tbl: [(c1KG0,
                       label: block_c1KG0_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KG0: // global
           if (P64[Sp + 8] == P64[R1 + 7]) goto c1KGk; else goto c1KGe;
       c1KGk: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1KGe: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.148736572 UTC

[section ""data" . GHC.STRef.$fEqSTRef_closure" {
     GHC.STRef.$fEqSTRef_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.STRef.$fEqSTRef_$c==_closure+2;
         const GHC.STRef.$fEqSTRef_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.149589842 UTC

[section ""data" . GHC.STRef.newSTRef1_closure" {
     GHC.STRef.newSTRef1_closure:
         const GHC.STRef.newSTRef1_info;
 },
 GHC.STRef.newSTRef1_entry() //  [R2]
         { info_tbl: [(c1KGx,
                       label: GHC.STRef.newSTRef1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KGx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1KGy; else goto c1KGz;
       c1KGy: // global
           R2 = R2;
           R1 = GHC.STRef.newSTRef1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KGz: // global
           I64[Sp - 8] = block_c1KGu_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KGu() //  [R1]
         { info_tbl: [(c1KGu,
                       label: block_c1KGu_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KGu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1KGC; else goto c1KGB;
       c1KGC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1KGB: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.150758934 UTC

[section ""data" . GHC.STRef.newSTRef_closure" {
     GHC.STRef.newSTRef_closure:
         const GHC.STRef.newSTRef_info;
 },
 GHC.STRef.newSTRef_entry() //  [R2]
         { info_tbl: [(c1KGH,
                       label: GHC.STRef.newSTRef_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KGH: // global
           R2 = R2;
           call GHC.STRef.newSTRef1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.151675504 UTC

[section ""data" . GHC.STRef.readSTRef1_closure" {
     GHC.STRef.readSTRef1_closure:
         const GHC.STRef.readSTRef1_info;
 },
 GHC.STRef.readSTRef1_entry() //  [R2]
         { info_tbl: [(c1KGR,
                       label: GHC.STRef.readSTRef1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KGR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1KGV; else goto c1KGW;
       c1KGV: // global
           R2 = R2;
           R1 = GHC.STRef.readSTRef1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KGW: // global
           I64[Sp - 8] = block_c1KGO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1KGY; else goto c1KGP;
       u1KGY: // global
           call _c1KGO(R1) args: 0, res: 0, upd: 0;
       c1KGP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KGO() //  [R1]
         { info_tbl: [(c1KGO,
                       label: block_c1KGO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KGO: // global
           R1 = P64[P64[R1 + 7] + 8];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.152718566 UTC

[section ""data" . GHC.STRef.readSTRef_closure" {
     GHC.STRef.readSTRef_closure:
         const GHC.STRef.readSTRef_info;
 },
 GHC.STRef.readSTRef_entry() //  [R2]
         { info_tbl: [(c1KH3,
                       label: GHC.STRef.readSTRef_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KH3: // global
           R2 = R2;
           call GHC.STRef.readSTRef1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.153741125 UTC

[section ""data" . GHC.STRef.writeSTRef1_closure" {
     GHC.STRef.writeSTRef1_closure:
         const GHC.STRef.writeSTRef1_info;
 },
 GHC.STRef.writeSTRef1_entry() //  [R2, R3]
         { info_tbl: [(c1KHd,
                       label: GHC.STRef.writeSTRef1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KHd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1KHe; else goto c1KHf;
       c1KHe: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.STRef.writeSTRef1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1KHf: // global
           I64[Sp - 16] = block_c1KHa_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1KHm; else goto c1KHb;
       u1KHm: // global
           call _c1KHa(R1) args: 0, res: 0, upd: 0;
       c1KHb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KHa() //  [R1]
         { info_tbl: [(c1KHa,
                       label: block_c1KHa_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KHa: // global
           _s1KDd::P64 = P64[Sp + 8];
           _s1KDg::P64 = P64[R1 + 7];
           call MO_WriteBarrier();
           P64[_s1KDg::P64 + 8] = _s1KDd::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s1KDg::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.15488824 UTC

[section ""data" . GHC.STRef.writeSTRef_closure" {
     GHC.STRef.writeSTRef_closure:
         const GHC.STRef.writeSTRef_info;
 },
 GHC.STRef.writeSTRef_entry() //  [R2, R3]
         { info_tbl: [(c1KHr,
                       label: GHC.STRef.writeSTRef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KHr: // global
           R3 = R3;
           R2 = R2;
           call GHC.STRef.writeSTRef1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.155610504 UTC

[section ""cstring" . GHC.STRef.$trModule4_bytes" {
     GHC.STRef.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.156199545 UTC

[section ""data" . GHC.STRef.$trModule3_closure" {
     GHC.STRef.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.STRef.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.156762883 UTC

[section ""cstring" . GHC.STRef.$trModule2_bytes" {
     GHC.STRef.$trModule2_bytes:
         I8[] [71,72,67,46,83,84,82,101,102]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.157391794 UTC

[section ""data" . GHC.STRef.$trModule1_closure" {
     GHC.STRef.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.STRef.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.157926623 UTC

[section ""data" . GHC.STRef.$trModule_closure" {
     GHC.STRef.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.STRef.$trModule3_closure+1;
         const GHC.STRef.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.159046421 UTC

[section ""data" . $krep_r1KCH_closure" {
     $krep_r1KCH_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.159610051 UTC

[section ""data" . $krep1_r1KCI_closure" {
     $krep1_r1KCI_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.160184273 UTC

[section ""data" . $krep2_r1KCJ_closure" {
     $krep2_r1KCJ_closure:
         const :_con_info;
         const $krep_r1KCH_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.160757662 UTC

[section ""data" . $krep3_r1KCK_closure" {
     $krep3_r1KCK_closure:
         const :_con_info;
         const $krep1_r1KCI_closure+2;
         const $krep2_r1KCJ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.161458565 UTC

[section ""data" . $krep4_r1KCL_closure" {
     $krep4_r1KCL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutVar#_closure;
         const $krep3_r1KCK_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.162020383 UTC

[section ""cstring" . GHC.STRef.$tcSTRef2_bytes" {
     GHC.STRef.$tcSTRef2_bytes:
         I8[] [83,84,82,101,102]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.162521302 UTC

[section ""data" . GHC.STRef.$tcSTRef1_closure" {
     GHC.STRef.$tcSTRef1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.STRef.$tcSTRef2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.163091705 UTC

[section ""data" . GHC.STRef.$tcSTRef_closure" {
     GHC.STRef.$tcSTRef_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.STRef.$trModule_closure+1;
         const GHC.STRef.$tcSTRef1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 12301805959212734792;
         const 9407763519371677403;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.163681767 UTC

[section ""data" . $krep5_r1KCM_closure" {
     $krep5_r1KCM_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.STRef.$tcSTRef_closure+1;
         const $krep3_r1KCK_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.164275444 UTC

[section ""data" . GHC.STRef.$tc'STRef1_closure" {
     GHC.STRef.$tc'STRef1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r1KCL_closure+1;
         const $krep5_r1KCM_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.164843155 UTC

[section ""cstring" . GHC.STRef.$tc'STRef3_bytes" {
     GHC.STRef.$tc'STRef3_bytes:
         I8[] [39,83,84,82,101,102]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.165384735 UTC

[section ""data" . GHC.STRef.$tc'STRef2_closure" {
     GHC.STRef.$tc'STRef2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.STRef.$tc'STRef3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.165943139 UTC

[section ""data" . GHC.STRef.$tc'STRef_closure" {
     GHC.STRef.$tc'STRef_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.STRef.$trModule_closure+1;
         const GHC.STRef.$tc'STRef2_closure+1;
         const GHC.STRef.$tc'STRef1_closure+4;
         const 18008618360073045522;
         const 5182275770463432138;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.166839416 UTC

[section ""data" . GHC.STRef.STRef_closure" {
     GHC.STRef.STRef_closure:
         const GHC.STRef.STRef_info;
 },
 GHC.STRef.STRef_entry() //  [R2]
         { info_tbl: [(c1KHz,
                       label: GHC.STRef.STRef_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KHz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1KHD; else goto c1KHC;
       c1KHD: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.STRef.STRef_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KHC: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.167758252 UTC

[GHC.STRef.STRef_con_entry() //  [R1]
         { info_tbl: [(c1KHE,
                       label: GHC.STRef.STRef_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,83,84,82,101,102,46,83,84,82,101,102]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KHE: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.168525956 UTC

[section ""relreadonly" . S1KFt_srt" { S1KFt_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.169809139 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:56:32.171355486 UTC

[section ""data" . GHC.STRef.$fEqSTRef_$c==_closure" {
     GHC.STRef.$fEqSTRef_$c==_closure:
         const GHC.STRef.$fEqSTRef_$c==_info;
 },
 GHC.STRef.$fEqSTRef_$c==_entry() //  [R2, R3]
         { info_tbl: [(c1KHN,
                       label: GHC.STRef.$fEqSTRef_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KHN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1KHR; else goto c1KHS;
       c1KHR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.STRef.$fEqSTRef_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1KHS: // global
           I64[Sp - 16] = block_c1KHK_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1KI1; else goto c1KHL;
       u1KI1: // global
           call _c1KHK(R1) args: 0, res: 0, upd: 0;
       c1KHL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KHK() //  [R1]
         { info_tbl: [(c1KHK,
                       label: block_c1KHK_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KHK: // global
           I64[Sp] = block_c1KHQ_info;
           _s1KCR::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1KCR::P64;
           if (R1 & 7 != 0) goto u1KI0; else goto c1KHU;
       u1KI0: // global
           call _c1KHQ(R1) args: 0, res: 0, upd: 0;
       c1KHU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KHQ() //  [R1]
         { info_tbl: [(c1KHQ,
                       label: block_c1KHQ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KHQ: // global
           R1 = I64[((P64[Sp + 8] == P64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.179443392 UTC

[section ""data" . GHC.STRef.$fEqSTRef_$c/=_closure" {
     GHC.STRef.$fEqSTRef_$c/=_closure:
         const GHC.STRef.$fEqSTRef_$c/=_info;
 },
 GHC.STRef.$fEqSTRef_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c1KIq,
                       label: GHC.STRef.$fEqSTRef_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KIq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1KIu; else goto c1KIv;
       c1KIu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.STRef.$fEqSTRef_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1KIv: // global
           I64[Sp - 16] = block_c1KIn_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1KIS; else goto c1KIo;
       u1KIS: // global
           call _c1KIn(R1) args: 0, res: 0, upd: 0;
       c1KIo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KIn() //  [R1]
         { info_tbl: [(c1KIn,
                       label: block_c1KIn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KIn: // global
           I64[Sp] = block_c1KIt_info;
           _s1KCY::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1KCY::P64;
           if (R1 & 7 != 0) goto u1KIR; else goto c1KIx;
       u1KIR: // global
           call _c1KIt(R1) args: 0, res: 0, upd: 0;
       c1KIx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KIt() //  [R1]
         { info_tbl: [(c1KIt,
                       label: block_c1KIt_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KIt: // global
           if (P64[Sp + 8] == P64[R1 + 7]) goto c1KIN; else goto c1KIH;
       c1KIN: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1KIH: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.187227994 UTC

[section ""data" . GHC.STRef.$fEqSTRef_closure" {
     GHC.STRef.$fEqSTRef_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.STRef.$fEqSTRef_$c==_closure+2;
         const GHC.STRef.$fEqSTRef_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.190063893 UTC

[section ""data" . GHC.STRef.newSTRef1_closure" {
     GHC.STRef.newSTRef1_closure:
         const GHC.STRef.newSTRef1_info;
 },
 GHC.STRef.newSTRef1_entry() //  [R2]
         { info_tbl: [(c1KJh,
                       label: GHC.STRef.newSTRef1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KJh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1KJi; else goto c1KJj;
       c1KJi: // global
           R2 = R2;
           R1 = GHC.STRef.newSTRef1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KJj: // global
           I64[Sp - 8] = block_c1KJe_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KJe() //  [R1]
         { info_tbl: [(c1KJe,
                       label: block_c1KJe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KJe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1KJm; else goto c1KJl;
       c1KJm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1KJl: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.196139355 UTC

[section ""data" . GHC.STRef.newSTRef_closure" {
     GHC.STRef.newSTRef_closure:
         const GHC.STRef.newSTRef_info;
 },
 GHC.STRef.newSTRef_entry() //  [R2]
         { info_tbl: [(c1KJA,
                       label: GHC.STRef.newSTRef_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KJA: // global
           R2 = R2;
           call GHC.STRef.newSTRef1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.199613082 UTC

[section ""data" . GHC.STRef.readSTRef1_closure" {
     GHC.STRef.readSTRef1_closure:
         const GHC.STRef.readSTRef1_info;
 },
 GHC.STRef.readSTRef1_entry() //  [R2]
         { info_tbl: [(c1KJO,
                       label: GHC.STRef.readSTRef1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KJO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1KJS; else goto c1KJT;
       c1KJS: // global
           R2 = R2;
           R1 = GHC.STRef.readSTRef1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KJT: // global
           I64[Sp - 8] = block_c1KJL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1KJV; else goto c1KJM;
       u1KJV: // global
           call _c1KJL(R1) args: 0, res: 0, upd: 0;
       c1KJM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KJL() //  [R1]
         { info_tbl: [(c1KJL,
                       label: block_c1KJL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KJL: // global
           R1 = P64[P64[R1 + 7] + 8];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.206036961 UTC

[section ""data" . GHC.STRef.readSTRef_closure" {
     GHC.STRef.readSTRef_closure:
         const GHC.STRef.readSTRef_info;
 },
 GHC.STRef.readSTRef_entry() //  [R2]
         { info_tbl: [(c1KKb,
                       label: GHC.STRef.readSTRef_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KKb: // global
           R2 = R2;
           call GHC.STRef.readSTRef1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.209625853 UTC

[section ""data" . GHC.STRef.writeSTRef1_closure" {
     GHC.STRef.writeSTRef1_closure:
         const GHC.STRef.writeSTRef1_info;
 },
 GHC.STRef.writeSTRef1_entry() //  [R2, R3]
         { info_tbl: [(c1KKp,
                       label: GHC.STRef.writeSTRef1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KKp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1KKq; else goto c1KKr;
       c1KKq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.STRef.writeSTRef1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1KKr: // global
           I64[Sp - 16] = block_c1KKm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1KKy; else goto c1KKn;
       u1KKy: // global
           call _c1KKm(R1) args: 0, res: 0, upd: 0;
       c1KKn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KKm() //  [R1]
         { info_tbl: [(c1KKm,
                       label: block_c1KKm_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KKm: // global
           _s1KDd::P64 = P64[Sp + 8];
           _s1KDg::P64 = P64[R1 + 7];
           call MO_WriteBarrier();
           P64[_s1KDg::P64 + 8] = _s1KDd::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s1KDg::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.216293081 UTC

[section ""data" . GHC.STRef.writeSTRef_closure" {
     GHC.STRef.writeSTRef_closure:
         const GHC.STRef.writeSTRef_info;
 },
 GHC.STRef.writeSTRef_entry() //  [R2, R3]
         { info_tbl: [(c1KKO,
                       label: GHC.STRef.writeSTRef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KKO: // global
           R3 = R3;
           R2 = R2;
           call GHC.STRef.writeSTRef1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.219598385 UTC

[section ""cstring" . GHC.STRef.$trModule4_bytes" {
     GHC.STRef.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.221313226 UTC

[section ""data" . GHC.STRef.$trModule3_closure" {
     GHC.STRef.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.STRef.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.222921658 UTC

[section ""cstring" . GHC.STRef.$trModule2_bytes" {
     GHC.STRef.$trModule2_bytes:
         I8[] [71,72,67,46,83,84,82,101,102]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.224549471 UTC

[section ""data" . GHC.STRef.$trModule1_closure" {
     GHC.STRef.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.STRef.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.227078016 UTC

[section ""data" . GHC.STRef.$trModule_closure" {
     GHC.STRef.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.STRef.$trModule3_closure+1;
         const GHC.STRef.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.228780734 UTC

[section ""data" . $krep_r1KCH_closure" {
     $krep_r1KCH_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.230614996 UTC

[section ""data" . $krep1_r1KCI_closure" {
     $krep1_r1KCI_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.232252844 UTC

[section ""data" . $krep2_r1KCJ_closure" {
     $krep2_r1KCJ_closure:
         const :_con_info;
         const $krep_r1KCH_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.234079369 UTC

[section ""data" . $krep3_r1KCK_closure" {
     $krep3_r1KCK_closure:
         const :_con_info;
         const $krep1_r1KCI_closure+2;
         const $krep2_r1KCJ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.235838411 UTC

[section ""data" . $krep4_r1KCL_closure" {
     $krep4_r1KCL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutVar#_closure;
         const $krep3_r1KCK_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.238107942 UTC

[section ""cstring" . GHC.STRef.$tcSTRef2_bytes" {
     GHC.STRef.$tcSTRef2_bytes:
         I8[] [83,84,82,101,102]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.239757263 UTC

[section ""data" . GHC.STRef.$tcSTRef1_closure" {
     GHC.STRef.$tcSTRef1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.STRef.$tcSTRef2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.241525949 UTC

[section ""data" . GHC.STRef.$tcSTRef_closure" {
     GHC.STRef.$tcSTRef_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.STRef.$trModule_closure+1;
         const GHC.STRef.$tcSTRef1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 12301805959212734792;
         const 9407763519371677403;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.243364243 UTC

[section ""data" . $krep5_r1KCM_closure" {
     $krep5_r1KCM_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.STRef.$tcSTRef_closure+1;
         const $krep3_r1KCK_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.245075776 UTC

[section ""data" . GHC.STRef.$tc'STRef1_closure" {
     GHC.STRef.$tc'STRef1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r1KCL_closure+1;
         const $krep5_r1KCM_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.247644955 UTC

[section ""cstring" . GHC.STRef.$tc'STRef3_bytes" {
     GHC.STRef.$tc'STRef3_bytes:
         I8[] [39,83,84,82,101,102]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.249340018 UTC

[section ""data" . GHC.STRef.$tc'STRef2_closure" {
     GHC.STRef.$tc'STRef2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.STRef.$tc'STRef3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.250969012 UTC

[section ""data" . GHC.STRef.$tc'STRef_closure" {
     GHC.STRef.$tc'STRef_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.STRef.$trModule_closure+1;
         const GHC.STRef.$tc'STRef2_closure+1;
         const GHC.STRef.$tc'STRef1_closure+4;
         const 18008618360073045522;
         const 5182275770463432138;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.253055645 UTC

[section ""data" . GHC.STRef.STRef_closure" {
     GHC.STRef.STRef_closure:
         const GHC.STRef.STRef_info;
 },
 GHC.STRef.STRef_entry() //  [R2]
         { info_tbl: [(c1KLi,
                       label: GHC.STRef.STRef_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KLi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1KLm; else goto c1KLl;
       c1KLm: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.STRef.STRef_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KLl: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.25686999 UTC

[GHC.STRef.STRef_con_entry() //  [R1]
         { info_tbl: [(c1KLs,
                       label: GHC.STRef.STRef_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,83,84,82,101,102,46,83,84,82,101,102]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KLs: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.260428943 UTC

[section ""relreadonly" . S1KFt_srt" { S1KFt_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.384488045 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:56:32.386057184 UTC

[section ""data" . GHC.STRef.$fEqSTRef_$c==_closure" {
     GHC.STRef.$fEqSTRef_$c==_closure:
         const GHC.STRef.$fEqSTRef_$c==_info;
 },
 GHC.STRef.$fEqSTRef_$c==_entry() //  [R2, R3]
         { info_tbl: [(c1KMa,
                       label: GHC.STRef.$fEqSTRef_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KMa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1KMe; else goto c1KMf;
       c1KMe: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.STRef.$fEqSTRef_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1KMf: // global
           I64[Sp - 16] = block_c1KM7_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1KMo; else goto c1KM8;
       u1KMo: // global
           call _c1KM7(R1) args: 0, res: 0, upd: 0;
       c1KM8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KM7() //  [R1]
         { info_tbl: [(c1KM7,
                       label: block_c1KM7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KM7: // global
           I64[Sp] = block_c1KMd_info;
           _s1KLC::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1KLC::P64;
           if (R1 & 7 != 0) goto u1KMn; else goto c1KMh;
       u1KMn: // global
           call _c1KMd(R1) args: 0, res: 0, upd: 0;
       c1KMh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KMd() //  [R1]
         { info_tbl: [(c1KMd,
                       label: block_c1KMd_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KMd: // global
           R1 = I64[((P64[Sp + 8] == P64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.394443443 UTC

[section ""data" . GHC.STRef.$fEqSTRef_$c/=_closure" {
     GHC.STRef.$fEqSTRef_$c/=_closure:
         const GHC.STRef.$fEqSTRef_$c/=_info;
 },
 GHC.STRef.$fEqSTRef_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c1KMQ,
                       label: GHC.STRef.$fEqSTRef_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KMQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1KMU; else goto c1KMV;
       c1KMU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.STRef.$fEqSTRef_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1KMV: // global
           I64[Sp - 16] = block_c1KMN_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1KNi; else goto c1KMO;
       u1KNi: // global
           call _c1KMN(R1) args: 0, res: 0, upd: 0;
       c1KMO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KMN() //  [R1]
         { info_tbl: [(c1KMN,
                       label: block_c1KMN_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KMN: // global
           I64[Sp] = block_c1KMT_info;
           _s1KLJ::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1KLJ::P64;
           if (R1 & 7 != 0) goto u1KNh; else goto c1KMX;
       u1KNh: // global
           call _c1KMT(R1) args: 0, res: 0, upd: 0;
       c1KMX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KMT() //  [R1]
         { info_tbl: [(c1KMT,
                       label: block_c1KMT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KMT: // global
           if (P64[Sp + 8] == P64[R1 + 7]) goto c1KNd; else goto c1KN7;
       c1KNd: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1KN7: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.402262693 UTC

[section ""data" . GHC.STRef.$fEqSTRef_closure" {
     GHC.STRef.$fEqSTRef_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.STRef.$fEqSTRef_$c==_closure+2;
         const GHC.STRef.$fEqSTRef_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.404422347 UTC

[section ""data" . GHC.STRef.newSTRef1_closure" {
     GHC.STRef.newSTRef1_closure:
         const GHC.STRef.newSTRef1_info;
 },
 GHC.STRef.newSTRef1_entry() //  [R2]
         { info_tbl: [(c1KNL,
                       label: GHC.STRef.newSTRef1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KNL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1KNM; else goto c1KNN;
       c1KNM: // global
           R2 = R2;
           R1 = GHC.STRef.newSTRef1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KNN: // global
           I64[Sp - 8] = block_c1KNI_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KNI() //  [R1]
         { info_tbl: [(c1KNI,
                       label: block_c1KNI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KNI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1KNQ; else goto c1KNP;
       c1KNQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1KNP: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.410868943 UTC

[section ""data" . GHC.STRef.newSTRef_closure" {
     GHC.STRef.newSTRef_closure:
         const GHC.STRef.newSTRef_info;
 },
 GHC.STRef.newSTRef_entry() //  [R2]
         { info_tbl: [(c1KO6,
                       label: GHC.STRef.newSTRef_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KO6: // global
           R2 = R2;
           call GHC.STRef.newSTRef1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.414483757 UTC

[section ""data" . GHC.STRef.readSTRef1_closure" {
     GHC.STRef.readSTRef1_closure:
         const GHC.STRef.readSTRef1_info;
 },
 GHC.STRef.readSTRef1_entry() //  [R2]
         { info_tbl: [(c1KOk,
                       label: GHC.STRef.readSTRef1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KOk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1KOo; else goto c1KOp;
       c1KOo: // global
           R2 = R2;
           R1 = GHC.STRef.readSTRef1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KOp: // global
           I64[Sp - 8] = block_c1KOh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1KOr; else goto c1KOi;
       u1KOr: // global
           call _c1KOh(R1) args: 0, res: 0, upd: 0;
       c1KOi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KOh() //  [R1]
         { info_tbl: [(c1KOh,
                       label: block_c1KOh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KOh: // global
           R1 = P64[P64[R1 + 7] + 8];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.420467751 UTC

[section ""data" . GHC.STRef.readSTRef_closure" {
     GHC.STRef.readSTRef_closure:
         const GHC.STRef.readSTRef_info;
 },
 GHC.STRef.readSTRef_entry() //  [R2]
         { info_tbl: [(c1KOI,
                       label: GHC.STRef.readSTRef_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KOI: // global
           R2 = R2;
           call GHC.STRef.readSTRef1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.424352006 UTC

[section ""data" . GHC.STRef.writeSTRef1_closure" {
     GHC.STRef.writeSTRef1_closure:
         const GHC.STRef.writeSTRef1_info;
 },
 GHC.STRef.writeSTRef1_entry() //  [R2, R3]
         { info_tbl: [(c1KOW,
                       label: GHC.STRef.writeSTRef1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KOW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1KOX; else goto c1KOY;
       c1KOX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.STRef.writeSTRef1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1KOY: // global
           I64[Sp - 16] = block_c1KOT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1KP5; else goto c1KOU;
       u1KP5: // global
           call _c1KOT(R1) args: 0, res: 0, upd: 0;
       c1KOU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c1KOT() //  [R1]
         { info_tbl: [(c1KOT,
                       label: block_c1KOT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KOT: // global
           _s1KLY::P64 = P64[Sp + 8];
           _s1KM1::P64 = P64[R1 + 7];
           call MO_WriteBarrier();
           P64[_s1KM1::P64 + 8] = _s1KLY::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s1KM1::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.430784913 UTC

[section ""data" . GHC.STRef.writeSTRef_closure" {
     GHC.STRef.writeSTRef_closure:
         const GHC.STRef.writeSTRef_info;
 },
 GHC.STRef.writeSTRef_entry() //  [R2, R3]
         { info_tbl: [(c1KPn,
                       label: GHC.STRef.writeSTRef_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KPn: // global
           R3 = R3;
           R2 = R2;
           call GHC.STRef.writeSTRef1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.43462381 UTC

[section ""cstring" . GHC.STRef.$trModule4_bytes" {
     GHC.STRef.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.436227145 UTC

[section ""data" . GHC.STRef.$trModule3_closure" {
     GHC.STRef.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.STRef.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.440805144 UTC

[section ""cstring" . GHC.STRef.$trModule2_bytes" {
     GHC.STRef.$trModule2_bytes:
         I8[] [71,72,67,46,83,84,82,101,102]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.443606059 UTC

[section ""data" . GHC.STRef.$trModule1_closure" {
     GHC.STRef.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.STRef.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.446578005 UTC

[section ""data" . GHC.STRef.$trModule_closure" {
     GHC.STRef.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.STRef.$trModule3_closure+1;
         const GHC.STRef.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.449171434 UTC

[section ""data" . $krep_r1KCH_closure" {
     $krep_r1KCH_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.451433174 UTC

[section ""data" . $krep1_r1KCI_closure" {
     $krep1_r1KCI_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.453717368 UTC

[section ""data" . $krep2_r1KCJ_closure" {
     $krep2_r1KCJ_closure:
         const :_con_info;
         const $krep_r1KCH_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.455826202 UTC

[section ""data" . $krep3_r1KCK_closure" {
     $krep3_r1KCK_closure:
         const :_con_info;
         const $krep1_r1KCI_closure+2;
         const $krep2_r1KCJ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.457627866 UTC

[section ""data" . $krep4_r1KCL_closure" {
     $krep4_r1KCL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutVar#_closure;
         const $krep3_r1KCK_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.459362547 UTC

[section ""cstring" . GHC.STRef.$tcSTRef2_bytes" {
     GHC.STRef.$tcSTRef2_bytes:
         I8[] [83,84,82,101,102]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.46107204 UTC

[section ""data" . GHC.STRef.$tcSTRef1_closure" {
     GHC.STRef.$tcSTRef1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.STRef.$tcSTRef2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.463126505 UTC

[section ""data" . GHC.STRef.$tcSTRef_closure" {
     GHC.STRef.$tcSTRef_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.STRef.$trModule_closure+1;
         const GHC.STRef.$tcSTRef1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 12301805959212734792;
         const 9407763519371677403;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.464973735 UTC

[section ""data" . $krep5_r1KCM_closure" {
     $krep5_r1KCM_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.STRef.$tcSTRef_closure+1;
         const $krep3_r1KCK_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.466763725 UTC

[section ""data" . GHC.STRef.$tc'STRef1_closure" {
     GHC.STRef.$tc'STRef1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r1KCL_closure+1;
         const $krep5_r1KCM_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.468542478 UTC

[section ""cstring" . GHC.STRef.$tc'STRef3_bytes" {
     GHC.STRef.$tc'STRef3_bytes:
         I8[] [39,83,84,82,101,102]
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.470652026 UTC

[section ""data" . GHC.STRef.$tc'STRef2_closure" {
     GHC.STRef.$tc'STRef2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.STRef.$tc'STRef3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.472405038 UTC

[section ""data" . GHC.STRef.$tc'STRef_closure" {
     GHC.STRef.$tc'STRef_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.STRef.$trModule_closure+1;
         const GHC.STRef.$tc'STRef2_closure+1;
         const GHC.STRef.$tc'STRef1_closure+4;
         const 18008618360073045522;
         const 5182275770463432138;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.474916129 UTC

[section ""data" . GHC.STRef.STRef_closure" {
     GHC.STRef.STRef_closure:
         const GHC.STRef.STRef_info;
 },
 GHC.STRef.STRef_entry() //  [R2]
         { info_tbl: [(c1KPR,
                       label: GHC.STRef.STRef_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KPR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1KPV; else goto c1KPU;
       c1KPV: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.STRef.STRef_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KPU: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.479012345 UTC

[GHC.STRef.STRef_con_entry() //  [R1]
         { info_tbl: [(c1KQ2,
                       label: GHC.STRef.STRef_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,83,84,82,101,102,46,83,84,82,101,102]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c1KQ2: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:56:32.48273771 UTC

[section ""relreadonly" . S1KQ9_srt" { S1KQ9_srt:
 }]

