
==================== Raw Cmm ====================
2018-03-16 15:59:27.689402134 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:59:27.691979076 UTC

[section ""data" . GHC.Storable.readWideCharOffPtr1_closure" {
     GHC.Storable.readWideCharOffPtr1_closure:
         const GHC.Storable.readWideCharOffPtr1_info;
 },
 GHC.Storable.readWideCharOffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4C5h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4C5q; else goto c4C5r;
       c4C5q: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readWideCharOffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4C5r: // global
           I64[Sp - 16] = block_c4C5e_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4C5x; else goto c4C5f;
       u4C5x: // global
           call _c4C5e(R1) args: 0, res: 0, upd: 0;
       c4C5f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWideCharOffPtr1_info" {
     GHC.Storable.readWideCharOffPtr1_info:
         const GHC.Storable.readWideCharOffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4C5e() //  [R1]
         { []
         }
     {offset
       c4C5e: // global
           I64[Sp] = block_c4C5k_info;
           _s4Brt::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Brt::I64;
           if (R1 & 7 != 0) goto u4C5w; else goto c4C5l;
       u4C5w: // global
           call _c4C5k(R1) args: 0, res: 0, upd: 0;
       c4C5l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4C5e_info" {
     block_c4C5e_info:
         const _c4C5e;
         const 1;
         const 30;
 },
 _c4C5k() //  [R1]
         { []
         }
     {offset
       c4C5k: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4C5v; else goto c4C5u;
       c4C5v: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4C5u: // global
           _s4Bry::I64 = %MO_UU_Conv_W32_W64(I32[I64[Sp + 8] + (I64[R1 + 7] << 2)]);
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s4Bry::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4C5k_info" {
     block_c4C5k_info:
         const _c4C5k;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.699585172 UTC

[section ""data" . GHC.Storable.readWideCharOffPtr_closure" {
     GHC.Storable.readWideCharOffPtr_closure:
         const GHC.Storable.readWideCharOffPtr_info;
 },
 GHC.Storable.readWideCharOffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4C5S: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readWideCharOffPtr1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWideCharOffPtr_info" {
     GHC.Storable.readWideCharOffPtr_info:
         const GHC.Storable.readWideCharOffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.704582094 UTC

[section ""data" . GHC.Storable.readIntOffPtr1_closure" {
     GHC.Storable.readIntOffPtr1_closure:
         const GHC.Storable.readIntOffPtr1_info;
 },
 GHC.Storable.readIntOffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4C66: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4C6f; else goto c4C6g;
       c4C6f: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readIntOffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4C6g: // global
           I64[Sp - 16] = block_c4C63_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4C6m; else goto c4C64;
       u4C6m: // global
           call _c4C63(R1) args: 0, res: 0, upd: 0;
       c4C64: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readIntOffPtr1_info" {
     GHC.Storable.readIntOffPtr1_info:
         const GHC.Storable.readIntOffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4C63() //  [R1]
         { []
         }
     {offset
       c4C63: // global
           I64[Sp] = block_c4C69_info;
           _s4BrE::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4BrE::I64;
           if (R1 & 7 != 0) goto u4C6l; else goto c4C6a;
       u4C6l: // global
           call _c4C69(R1) args: 0, res: 0, upd: 0;
       c4C6a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4C63_info" {
     block_c4C63_info:
         const _c4C63;
         const 1;
         const 30;
 },
 _c4C69() //  [R1]
         { []
         }
     {offset
       c4C69: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4C6k; else goto c4C6j;
       c4C6k: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4C6j: // global
           _s4BrJ::I64 = I64[I64[Sp + 8] + (I64[R1 + 7] << 3)];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s4BrJ::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4C69_info" {
     block_c4C69_info:
         const _c4C69;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.713520893 UTC

[section ""data" . GHC.Storable.readIntOffPtr_closure" {
     GHC.Storable.readIntOffPtr_closure:
         const GHC.Storable.readIntOffPtr_info;
 },
 GHC.Storable.readIntOffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4C6H: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readIntOffPtr1_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readIntOffPtr_info" {
     GHC.Storable.readIntOffPtr_info:
         const GHC.Storable.readIntOffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.718517417 UTC

[section ""data" . GHC.Storable.readWordOffPtr1_closure" {
     GHC.Storable.readWordOffPtr1_closure:
         const GHC.Storable.readWordOffPtr1_info;
 },
 GHC.Storable.readWordOffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4C6V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4C74; else goto c4C75;
       c4C74: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readWordOffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4C75: // global
           I64[Sp - 16] = block_c4C6S_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4C7b; else goto c4C6T;
       u4C7b: // global
           call _c4C6S(R1) args: 0, res: 0, upd: 0;
       c4C6T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWordOffPtr1_info" {
     GHC.Storable.readWordOffPtr1_info:
         const GHC.Storable.readWordOffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4C6S() //  [R1]
         { []
         }
     {offset
       c4C6S: // global
           I64[Sp] = block_c4C6Y_info;
           _s4BrP::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4BrP::I64;
           if (R1 & 7 != 0) goto u4C7a; else goto c4C6Z;
       u4C7a: // global
           call _c4C6Y(R1) args: 0, res: 0, upd: 0;
       c4C6Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4C6S_info" {
     block_c4C6S_info:
         const _c4C6S;
         const 1;
         const 30;
 },
 _c4C6Y() //  [R1]
         { []
         }
     {offset
       c4C6Y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4C79; else goto c4C78;
       c4C79: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4C78: // global
           _s4BrU::I64 = I64[I64[Sp + 8] + (I64[R1 + 7] << 3)];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s4BrU::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4C6Y_info" {
     block_c4C6Y_info:
         const _c4C6Y;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.727163732 UTC

[section ""data" . GHC.Storable.readWordOffPtr_closure" {
     GHC.Storable.readWordOffPtr_closure:
         const GHC.Storable.readWordOffPtr_info;
 },
 GHC.Storable.readWordOffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4C7w: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readWordOffPtr1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWordOffPtr_info" {
     GHC.Storable.readWordOffPtr_info:
         const GHC.Storable.readWordOffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.731988063 UTC

[section ""data" . GHC.Storable.readPtrOffPtr1_closure" {
     GHC.Storable.readPtrOffPtr1_closure:
         const GHC.Storable.readPtrOffPtr1_info;
 },
 GHC.Storable.readPtrOffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4C7K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4C7T; else goto c4C7U;
       c4C7T: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readPtrOffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4C7U: // global
           I64[Sp - 16] = block_c4C7H_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4C80; else goto c4C7I;
       u4C80: // global
           call _c4C7H(R1) args: 0, res: 0, upd: 0;
       c4C7I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readPtrOffPtr1_info" {
     GHC.Storable.readPtrOffPtr1_info:
         const GHC.Storable.readPtrOffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4C7H() //  [R1]
         { []
         }
     {offset
       c4C7H: // global
           I64[Sp] = block_c4C7N_info;
           _s4Bs0::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Bs0::I64;
           if (R1 & 7 != 0) goto u4C7Z; else goto c4C7O;
       u4C7Z: // global
           call _c4C7N(R1) args: 0, res: 0, upd: 0;
       c4C7O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4C7H_info" {
     block_c4C7H_info:
         const _c4C7H;
         const 1;
         const 30;
 },
 _c4C7N() //  [R1]
         { []
         }
     {offset
       c4C7N: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4C7Y; else goto c4C7X;
       c4C7Y: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4C7X: // global
           _s4Bs5::I64 = I64[I64[Sp + 8] + (I64[R1 + 7] << 3)];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s4Bs5::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4C7N_info" {
     block_c4C7N_info:
         const _c4C7N;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.739498166 UTC

[section ""data" . GHC.Storable.readPtrOffPtr_closure" {
     GHC.Storable.readPtrOffPtr_closure:
         const GHC.Storable.readPtrOffPtr_info;
 },
 GHC.Storable.readPtrOffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4C8l: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readPtrOffPtr1_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readPtrOffPtr_info" {
     GHC.Storable.readPtrOffPtr_info:
         const GHC.Storable.readPtrOffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.744729928 UTC

[section ""data" . GHC.Storable.readFunPtrOffPtr1_closure" {
     GHC.Storable.readFunPtrOffPtr1_closure:
         const GHC.Storable.readFunPtrOffPtr1_info;
 },
 GHC.Storable.readFunPtrOffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4C8z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4C8I; else goto c4C8J;
       c4C8I: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readFunPtrOffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4C8J: // global
           I64[Sp - 16] = block_c4C8w_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4C8P; else goto c4C8x;
       u4C8P: // global
           call _c4C8w(R1) args: 0, res: 0, upd: 0;
       c4C8x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readFunPtrOffPtr1_info" {
     GHC.Storable.readFunPtrOffPtr1_info:
         const GHC.Storable.readFunPtrOffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4C8w() //  [R1]
         { []
         }
     {offset
       c4C8w: // global
           I64[Sp] = block_c4C8C_info;
           _s4Bsb::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Bsb::I64;
           if (R1 & 7 != 0) goto u4C8O; else goto c4C8D;
       u4C8O: // global
           call _c4C8C(R1) args: 0, res: 0, upd: 0;
       c4C8D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4C8w_info" {
     block_c4C8w_info:
         const _c4C8w;
         const 1;
         const 30;
 },
 _c4C8C() //  [R1]
         { []
         }
     {offset
       c4C8C: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4C8N; else goto c4C8M;
       c4C8N: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4C8M: // global
           _s4Bsg::I64 = I64[I64[Sp + 8] + (I64[R1 + 7] << 3)];
           I64[Hp - 8] = GHC.Ptr.FunPtr_con_info;
           I64[Hp] = _s4Bsg::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4C8C_info" {
     block_c4C8C_info:
         const _c4C8C;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.752617837 UTC

[section ""data" . GHC.Storable.readFunPtrOffPtr_closure" {
     GHC.Storable.readFunPtrOffPtr_closure:
         const GHC.Storable.readFunPtrOffPtr_info;
 },
 GHC.Storable.readFunPtrOffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4C9a: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readFunPtrOffPtr1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readFunPtrOffPtr_info" {
     GHC.Storable.readFunPtrOffPtr_info:
         const GHC.Storable.readFunPtrOffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.757392613 UTC

[section ""data" . GHC.Storable.readFloatOffPtr1_closure" {
     GHC.Storable.readFloatOffPtr1_closure:
         const GHC.Storable.readFloatOffPtr1_info;
 },
 GHC.Storable.readFloatOffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4C9o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4C9x; else goto c4C9y;
       c4C9x: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readFloatOffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4C9y: // global
           I64[Sp - 16] = block_c4C9l_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4C9E; else goto c4C9m;
       u4C9E: // global
           call _c4C9l(R1) args: 0, res: 0, upd: 0;
       c4C9m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readFloatOffPtr1_info" {
     GHC.Storable.readFloatOffPtr1_info:
         const GHC.Storable.readFloatOffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4C9l() //  [R1]
         { []
         }
     {offset
       c4C9l: // global
           I64[Sp] = block_c4C9r_info;
           _s4Bsm::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Bsm::I64;
           if (R1 & 7 != 0) goto u4C9D; else goto c4C9s;
       u4C9D: // global
           call _c4C9r(R1) args: 0, res: 0, upd: 0;
       c4C9s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4C9l_info" {
     block_c4C9l_info:
         const _c4C9l;
         const 1;
         const 30;
 },
 _c4C9r() //  [R1]
         { []
         }
     {offset
       c4C9r: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4C9C; else goto c4C9B;
       c4C9C: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4C9B: // global
           _s4Bsr::F32 = F32[I64[Sp + 8] + (I64[R1 + 7] << 2)];
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s4Bsr::F32;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4C9r_info" {
     block_c4C9r_info:
         const _c4C9r;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.765416285 UTC

[section ""data" . GHC.Storable.readFloatOffPtr_closure" {
     GHC.Storable.readFloatOffPtr_closure:
         const GHC.Storable.readFloatOffPtr_info;
 },
 GHC.Storable.readFloatOffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4C9Z: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readFloatOffPtr1_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readFloatOffPtr_info" {
     GHC.Storable.readFloatOffPtr_info:
         const GHC.Storable.readFloatOffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.769912355 UTC

[section ""data" . GHC.Storable.readDoubleOffPtr1_closure" {
     GHC.Storable.readDoubleOffPtr1_closure:
         const GHC.Storable.readDoubleOffPtr1_info;
 },
 GHC.Storable.readDoubleOffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Cad: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Cam; else goto c4Can;
       c4Cam: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readDoubleOffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Can: // global
           I64[Sp - 16] = block_c4Caa_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4Cat; else goto c4Cab;
       u4Cat: // global
           call _c4Caa(R1) args: 0, res: 0, upd: 0;
       c4Cab: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readDoubleOffPtr1_info" {
     GHC.Storable.readDoubleOffPtr1_info:
         const GHC.Storable.readDoubleOffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4Caa() //  [R1]
         { []
         }
     {offset
       c4Caa: // global
           I64[Sp] = block_c4Cag_info;
           _s4Bsx::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Bsx::I64;
           if (R1 & 7 != 0) goto u4Cas; else goto c4Cah;
       u4Cas: // global
           call _c4Cag(R1) args: 0, res: 0, upd: 0;
       c4Cah: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Caa_info" {
     block_c4Caa_info:
         const _c4Caa;
         const 1;
         const 30;
 },
 _c4Cag() //  [R1]
         { []
         }
     {offset
       c4Cag: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4Car; else goto c4Caq;
       c4Car: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4Caq: // global
           _s4BsC::F64 = F64[I64[Sp + 8] + (I64[R1 + 7] << 3)];
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s4BsC::F64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cag_info" {
     block_c4Cag_info:
         const _c4Cag;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.77742419 UTC

[section ""data" . GHC.Storable.readDoubleOffPtr_closure" {
     GHC.Storable.readDoubleOffPtr_closure:
         const GHC.Storable.readDoubleOffPtr_info;
 },
 GHC.Storable.readDoubleOffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CaO: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readDoubleOffPtr1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readDoubleOffPtr_info" {
     GHC.Storable.readDoubleOffPtr_info:
         const GHC.Storable.readDoubleOffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.782541205 UTC

[section ""data" . GHC.Storable.readStablePtrOffPtr1_closure" {
     GHC.Storable.readStablePtrOffPtr1_closure:
         const GHC.Storable.readStablePtrOffPtr1_info;
 },
 GHC.Storable.readStablePtrOffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Cb2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Cbb; else goto c4Cbc;
       c4Cbb: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readStablePtrOffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Cbc: // global
           I64[Sp - 16] = block_c4CaZ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4Cbi; else goto c4Cb0;
       u4Cbi: // global
           call _c4CaZ(R1) args: 0, res: 0, upd: 0;
       c4Cb0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readStablePtrOffPtr1_info" {
     GHC.Storable.readStablePtrOffPtr1_info:
         const GHC.Storable.readStablePtrOffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4CaZ() //  [R1]
         { []
         }
     {offset
       c4CaZ: // global
           I64[Sp] = block_c4Cb5_info;
           _s4BsI::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4BsI::I64;
           if (R1 & 7 != 0) goto u4Cbh; else goto c4Cb6;
       u4Cbh: // global
           call _c4Cb5(R1) args: 0, res: 0, upd: 0;
       c4Cb6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CaZ_info" {
     block_c4CaZ_info:
         const _c4CaZ;
         const 1;
         const 30;
 },
 _c4Cb5() //  [R1]
         { []
         }
     {offset
       c4Cb5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4Cbg; else goto c4Cbf;
       c4Cbg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4Cbf: // global
           _s4BsN::I64 = I64[I64[Sp + 8] + (I64[R1 + 7] << 3)];
           I64[Hp - 8] = GHC.Stable.StablePtr_con_info;
           I64[Hp] = _s4BsN::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cb5_info" {
     block_c4Cb5_info:
         const _c4Cb5;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.789833134 UTC

[section ""data" . GHC.Storable.readStablePtrOffPtr_closure" {
     GHC.Storable.readStablePtrOffPtr_closure:
         const GHC.Storable.readStablePtrOffPtr_info;
 },
 GHC.Storable.readStablePtrOffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CbD: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readStablePtrOffPtr1_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readStablePtrOffPtr_info" {
     GHC.Storable.readStablePtrOffPtr_info:
         const GHC.Storable.readStablePtrOffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.795315488 UTC

[section ""data" . GHC.Storable.readInt8OffPtr1_closure" {
     GHC.Storable.readInt8OffPtr1_closure:
         const GHC.Storable.readInt8OffPtr1_info;
 },
 GHC.Storable.readInt8OffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CbR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Cc0; else goto c4Cc1;
       c4Cc0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readInt8OffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Cc1: // global
           I64[Sp - 16] = block_c4CbO_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4Cc7; else goto c4CbP;
       u4Cc7: // global
           call _c4CbO(R1) args: 0, res: 0, upd: 0;
       c4CbP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readInt8OffPtr1_info" {
     GHC.Storable.readInt8OffPtr1_info:
         const GHC.Storable.readInt8OffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4CbO() //  [R1]
         { []
         }
     {offset
       c4CbO: // global
           I64[Sp] = block_c4CbU_info;
           _s4BsT::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4BsT::I64;
           if (R1 & 7 != 0) goto u4Cc6; else goto c4CbV;
       u4Cc6: // global
           call _c4CbU(R1) args: 0, res: 0, upd: 0;
       c4CbV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CbO_info" {
     block_c4CbO_info:
         const _c4CbO;
         const 1;
         const 30;
 },
 _c4CbU() //  [R1]
         { []
         }
     {offset
       c4CbU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4Cc5; else goto c4Cc4;
       c4Cc5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4Cc4: // global
           _s4BsY::I64 = %MO_SS_Conv_W8_W64(I8[I64[Sp + 8] + I64[R1 + 7]]);
           I64[Hp - 8] = GHC.Int.I8#_con_info;
           I64[Hp] = _s4BsY::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CbU_info" {
     block_c4CbU_info:
         const _c4CbU;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.803418708 UTC

[section ""data" . GHC.Storable.readInt8OffPtr_closure" {
     GHC.Storable.readInt8OffPtr_closure:
         const GHC.Storable.readInt8OffPtr_info;
 },
 GHC.Storable.readInt8OffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Ccs: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readInt8OffPtr1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readInt8OffPtr_info" {
     GHC.Storable.readInt8OffPtr_info:
         const GHC.Storable.readInt8OffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.807895572 UTC

[section ""data" . GHC.Storable.readWord8OffPtr1_closure" {
     GHC.Storable.readWord8OffPtr1_closure:
         const GHC.Storable.readWord8OffPtr1_info;
 },
 GHC.Storable.readWord8OffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CcG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4CcP; else goto c4CcQ;
       c4CcP: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readWord8OffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CcQ: // global
           I64[Sp - 16] = block_c4CcD_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4CcW; else goto c4CcE;
       u4CcW: // global
           call _c4CcD(R1) args: 0, res: 0, upd: 0;
       c4CcE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWord8OffPtr1_info" {
     GHC.Storable.readWord8OffPtr1_info:
         const GHC.Storable.readWord8OffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4CcD() //  [R1]
         { []
         }
     {offset
       c4CcD: // global
           I64[Sp] = block_c4CcJ_info;
           _s4Bt4::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Bt4::I64;
           if (R1 & 7 != 0) goto u4CcV; else goto c4CcK;
       u4CcV: // global
           call _c4CcJ(R1) args: 0, res: 0, upd: 0;
       c4CcK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CcD_info" {
     block_c4CcD_info:
         const _c4CcD;
         const 1;
         const 30;
 },
 _c4CcJ() //  [R1]
         { []
         }
     {offset
       c4CcJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4CcU; else goto c4CcT;
       c4CcU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4CcT: // global
           _s4Bt9::I64 = %MO_UU_Conv_W8_W64(I8[I64[Sp + 8] + I64[R1 + 7]]);
           I64[Hp - 8] = GHC.Word.W8#_con_info;
           I64[Hp] = _s4Bt9::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CcJ_info" {
     block_c4CcJ_info:
         const _c4CcJ;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.815692841 UTC

[section ""data" . GHC.Storable.readWord8OffPtr_closure" {
     GHC.Storable.readWord8OffPtr_closure:
         const GHC.Storable.readWord8OffPtr_info;
 },
 GHC.Storable.readWord8OffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Cdh: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readWord8OffPtr1_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWord8OffPtr_info" {
     GHC.Storable.readWord8OffPtr_info:
         const GHC.Storable.readWord8OffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.820899591 UTC

[section ""data" . GHC.Storable.readInt16OffPtr1_closure" {
     GHC.Storable.readInt16OffPtr1_closure:
         const GHC.Storable.readInt16OffPtr1_info;
 },
 GHC.Storable.readInt16OffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Cdv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4CdE; else goto c4CdF;
       c4CdE: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readInt16OffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CdF: // global
           I64[Sp - 16] = block_c4Cds_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4CdL; else goto c4Cdt;
       u4CdL: // global
           call _c4Cds(R1) args: 0, res: 0, upd: 0;
       c4Cdt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readInt16OffPtr1_info" {
     GHC.Storable.readInt16OffPtr1_info:
         const GHC.Storable.readInt16OffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4Cds() //  [R1]
         { []
         }
     {offset
       c4Cds: // global
           I64[Sp] = block_c4Cdy_info;
           _s4Btf::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Btf::I64;
           if (R1 & 7 != 0) goto u4CdK; else goto c4Cdz;
       u4CdK: // global
           call _c4Cdy(R1) args: 0, res: 0, upd: 0;
       c4Cdz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cds_info" {
     block_c4Cds_info:
         const _c4Cds;
         const 1;
         const 30;
 },
 _c4Cdy() //  [R1]
         { []
         }
     {offset
       c4Cdy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4CdJ; else goto c4CdI;
       c4CdJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4CdI: // global
           _s4Btk::I64 = %MO_SS_Conv_W16_W64(I16[I64[Sp + 8] + (I64[R1 + 7] << 1)]);
           I64[Hp - 8] = GHC.Int.I16#_con_info;
           I64[Hp] = _s4Btk::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cdy_info" {
     block_c4Cdy_info:
         const _c4Cdy;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.828191623 UTC

[section ""data" . GHC.Storable.readInt16OffPtr_closure" {
     GHC.Storable.readInt16OffPtr_closure:
         const GHC.Storable.readInt16OffPtr_info;
 },
 GHC.Storable.readInt16OffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Ce6: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readInt16OffPtr1_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readInt16OffPtr_info" {
     GHC.Storable.readInt16OffPtr_info:
         const GHC.Storable.readInt16OffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.832962637 UTC

[section ""data" . GHC.Storable.readWord16OffPtr1_closure" {
     GHC.Storable.readWord16OffPtr1_closure:
         const GHC.Storable.readWord16OffPtr1_info;
 },
 GHC.Storable.readWord16OffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Cek: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Cet; else goto c4Ceu;
       c4Cet: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readWord16OffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Ceu: // global
           I64[Sp - 16] = block_c4Ceh_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4CeA; else goto c4Cei;
       u4CeA: // global
           call _c4Ceh(R1) args: 0, res: 0, upd: 0;
       c4Cei: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWord16OffPtr1_info" {
     GHC.Storable.readWord16OffPtr1_info:
         const GHC.Storable.readWord16OffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4Ceh() //  [R1]
         { []
         }
     {offset
       c4Ceh: // global
           I64[Sp] = block_c4Cen_info;
           _s4Btq::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Btq::I64;
           if (R1 & 7 != 0) goto u4Cez; else goto c4Ceo;
       u4Cez: // global
           call _c4Cen(R1) args: 0, res: 0, upd: 0;
       c4Ceo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Ceh_info" {
     block_c4Ceh_info:
         const _c4Ceh;
         const 1;
         const 30;
 },
 _c4Cen() //  [R1]
         { []
         }
     {offset
       c4Cen: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4Cey; else goto c4Cex;
       c4Cey: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4Cex: // global
           _s4Btv::I64 = %MO_UU_Conv_W16_W64(I16[I64[Sp + 8] + (I64[R1 + 7] << 1)]);
           I64[Hp - 8] = GHC.Word.W16#_con_info;
           I64[Hp] = _s4Btv::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cen_info" {
     block_c4Cen_info:
         const _c4Cen;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.840780433 UTC

[section ""data" . GHC.Storable.readWord16OffPtr_closure" {
     GHC.Storable.readWord16OffPtr_closure:
         const GHC.Storable.readWord16OffPtr_info;
 },
 GHC.Storable.readWord16OffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CeV: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readWord16OffPtr1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWord16OffPtr_info" {
     GHC.Storable.readWord16OffPtr_info:
         const GHC.Storable.readWord16OffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.845547663 UTC

[section ""data" . GHC.Storable.readInt32OffPtr1_closure" {
     GHC.Storable.readInt32OffPtr1_closure:
         const GHC.Storable.readInt32OffPtr1_info;
 },
 GHC.Storable.readInt32OffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Cf9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Cfi; else goto c4Cfj;
       c4Cfi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readInt32OffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Cfj: // global
           I64[Sp - 16] = block_c4Cf6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4Cfp; else goto c4Cf7;
       u4Cfp: // global
           call _c4Cf6(R1) args: 0, res: 0, upd: 0;
       c4Cf7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readInt32OffPtr1_info" {
     GHC.Storable.readInt32OffPtr1_info:
         const GHC.Storable.readInt32OffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4Cf6() //  [R1]
         { []
         }
     {offset
       c4Cf6: // global
           I64[Sp] = block_c4Cfc_info;
           _s4BtB::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4BtB::I64;
           if (R1 & 7 != 0) goto u4Cfo; else goto c4Cfd;
       u4Cfo: // global
           call _c4Cfc(R1) args: 0, res: 0, upd: 0;
       c4Cfd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cf6_info" {
     block_c4Cf6_info:
         const _c4Cf6;
         const 1;
         const 30;
 },
 _c4Cfc() //  [R1]
         { []
         }
     {offset
       c4Cfc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4Cfn; else goto c4Cfm;
       c4Cfn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4Cfm: // global
           _s4BtG::I64 = %MO_SS_Conv_W32_W64(I32[I64[Sp + 8] + (I64[R1 + 7] << 2)]);
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _s4BtG::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cfc_info" {
     block_c4Cfc_info:
         const _c4Cfc;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.854262852 UTC

[section ""data" . GHC.Storable.readInt32OffPtr_closure" {
     GHC.Storable.readInt32OffPtr_closure:
         const GHC.Storable.readInt32OffPtr_info;
 },
 GHC.Storable.readInt32OffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CfK: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readInt32OffPtr1_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readInt32OffPtr_info" {
     GHC.Storable.readInt32OffPtr_info:
         const GHC.Storable.readInt32OffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.859299365 UTC

[section ""data" . GHC.Storable.readWord32OffPtr1_closure" {
     GHC.Storable.readWord32OffPtr1_closure:
         const GHC.Storable.readWord32OffPtr1_info;
 },
 GHC.Storable.readWord32OffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CfY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4Cg7; else goto c4Cg8;
       c4Cg7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readWord32OffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Cg8: // global
           I64[Sp - 16] = block_c4CfV_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4Cge; else goto c4CfW;
       u4Cge: // global
           call _c4CfV(R1) args: 0, res: 0, upd: 0;
       c4CfW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWord32OffPtr1_info" {
     GHC.Storable.readWord32OffPtr1_info:
         const GHC.Storable.readWord32OffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4CfV() //  [R1]
         { []
         }
     {offset
       c4CfV: // global
           I64[Sp] = block_c4Cg1_info;
           _s4BtM::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4BtM::I64;
           if (R1 & 7 != 0) goto u4Cgd; else goto c4Cg2;
       u4Cgd: // global
           call _c4Cg1(R1) args: 0, res: 0, upd: 0;
       c4Cg2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CfV_info" {
     block_c4CfV_info:
         const _c4CfV;
         const 1;
         const 30;
 },
 _c4Cg1() //  [R1]
         { []
         }
     {offset
       c4Cg1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4Cgc; else goto c4Cgb;
       c4Cgc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4Cgb: // global
           _s4BtR::I64 = %MO_UU_Conv_W32_W64(I32[I64[Sp + 8] + (I64[R1 + 7] << 2)]);
           I64[Hp - 8] = GHC.Word.W32#_con_info;
           I64[Hp] = _s4BtR::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cg1_info" {
     block_c4Cg1_info:
         const _c4Cg1;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.867048539 UTC

[section ""data" . GHC.Storable.readWord32OffPtr_closure" {
     GHC.Storable.readWord32OffPtr_closure:
         const GHC.Storable.readWord32OffPtr_info;
 },
 GHC.Storable.readWord32OffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Cgz: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readWord32OffPtr1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWord32OffPtr_info" {
     GHC.Storable.readWord32OffPtr_info:
         const GHC.Storable.readWord32OffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.872627848 UTC

[section ""data" . GHC.Storable.readInt64OffPtr1_closure" {
     GHC.Storable.readInt64OffPtr1_closure:
         const GHC.Storable.readInt64OffPtr1_info;
 },
 GHC.Storable.readInt64OffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CgN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4CgW; else goto c4CgX;
       c4CgW: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readInt64OffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CgX: // global
           I64[Sp - 16] = block_c4CgK_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4Ch3; else goto c4CgL;
       u4Ch3: // global
           call _c4CgK(R1) args: 0, res: 0, upd: 0;
       c4CgL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readInt64OffPtr1_info" {
     GHC.Storable.readInt64OffPtr1_info:
         const GHC.Storable.readInt64OffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4CgK() //  [R1]
         { []
         }
     {offset
       c4CgK: // global
           I64[Sp] = block_c4CgQ_info;
           _s4BtX::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4BtX::I64;
           if (R1 & 7 != 0) goto u4Ch2; else goto c4CgR;
       u4Ch2: // global
           call _c4CgQ(R1) args: 0, res: 0, upd: 0;
       c4CgR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CgK_info" {
     block_c4CgK_info:
         const _c4CgK;
         const 1;
         const 30;
 },
 _c4CgQ() //  [R1]
         { []
         }
     {offset
       c4CgQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4Ch1; else goto c4Ch0;
       c4Ch1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4Ch0: // global
           _s4Bu2::I64 = I64[I64[Sp + 8] + (I64[R1 + 7] << 3)];
           I64[Hp - 8] = GHC.Int.I64#_con_info;
           I64[Hp] = _s4Bu2::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CgQ_info" {
     block_c4CgQ_info:
         const _c4CgQ;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.880439254 UTC

[section ""data" . GHC.Storable.readInt64OffPtr_closure" {
     GHC.Storable.readInt64OffPtr_closure:
         const GHC.Storable.readInt64OffPtr_info;
 },
 GHC.Storable.readInt64OffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Cho: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readInt64OffPtr1_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readInt64OffPtr_info" {
     GHC.Storable.readInt64OffPtr_info:
         const GHC.Storable.readInt64OffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.885116776 UTC

[section ""data" . GHC.Storable.readWord64OffPtr1_closure" {
     GHC.Storable.readWord64OffPtr1_closure:
         const GHC.Storable.readWord64OffPtr1_info;
 },
 GHC.Storable.readWord64OffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4ChC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4ChL; else goto c4ChM;
       c4ChL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readWord64OffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4ChM: // global
           I64[Sp - 16] = block_c4Chz_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4ChS; else goto c4ChA;
       u4ChS: // global
           call _c4Chz(R1) args: 0, res: 0, upd: 0;
       c4ChA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWord64OffPtr1_info" {
     GHC.Storable.readWord64OffPtr1_info:
         const GHC.Storable.readWord64OffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4Chz() //  [R1]
         { []
         }
     {offset
       c4Chz: // global
           I64[Sp] = block_c4ChF_info;
           _s4Bu8::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Bu8::I64;
           if (R1 & 7 != 0) goto u4ChR; else goto c4ChG;
       u4ChR: // global
           call _c4ChF(R1) args: 0, res: 0, upd: 0;
       c4ChG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Chz_info" {
     block_c4Chz_info:
         const _c4Chz;
         const 1;
         const 30;
 },
 _c4ChF() //  [R1]
         { []
         }
     {offset
       c4ChF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4ChQ; else goto c4ChP;
       c4ChQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4ChP: // global
           _s4Bud::I64 = I64[I64[Sp + 8] + (I64[R1 + 7] << 3)];
           I64[Hp - 8] = GHC.Word.W64#_con_info;
           I64[Hp] = _s4Bud::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4ChF_info" {
     block_c4ChF_info:
         const _c4ChF;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.893434491 UTC

[section ""data" . GHC.Storable.readWord64OffPtr_closure" {
     GHC.Storable.readWord64OffPtr_closure:
         const GHC.Storable.readWord64OffPtr_info;
 },
 GHC.Storable.readWord64OffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4Cid: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readWord64OffPtr1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWord64OffPtr_info" {
     GHC.Storable.readWord64OffPtr_info:
         const GHC.Storable.readWord64OffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.898277308 UTC

[section ""data" . GHC.Storable.writeWideCharOffPtr1_closure" {
     GHC.Storable.writeWideCharOffPtr1_closure:
         const GHC.Storable.writeWideCharOffPtr1_info;
 },
 GHC.Storable.writeWideCharOffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4Cir: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4CiA; else goto c4CiB;
       c4CiA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeWideCharOffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CiB: // global
           I64[Sp - 24] = block_c4Cio_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4CiK; else goto c4Cip;
       u4CiK: // global
           call _c4Cio(R1) args: 0, res: 0, upd: 0;
       c4Cip: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWideCharOffPtr1_info" {
     GHC.Storable.writeWideCharOffPtr1_info:
         const GHC.Storable.writeWideCharOffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4Cio() //  [R1]
         { []
         }
     {offset
       c4Cio: // global
           I64[Sp] = block_c4Ciu_info;
           _s4Buk::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Buk::I64;
           if (R1 & 7 != 0) goto u4CiJ; else goto c4Civ;
       u4CiJ: // global
           call _c4Ciu(R1) args: 0, res: 0, upd: 0;
       c4Civ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cio_info" {
     block_c4Cio_info:
         const _c4Cio;
         const 2;
         const 30;
 },
 _c4Ciu() //  [R1]
         { []
         }
     {offset
       c4Ciu: // global
           I64[Sp] = block_c4Ciz_info;
           _s4Bum::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4Bum::I64;
           if (R1 & 7 != 0) goto u4CiL; else goto c4CiE;
       u4CiL: // global
           call _c4Ciz(R1) args: 0, res: 0, upd: 0;
       c4CiE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Ciu_info" {
     block_c4Ciu_info:
         const _c4Ciu;
         const 66;
         const 30;
 },
 _c4Ciz() //  [R1]
         { []
         }
     {offset
       c4Ciz: // global
           I32[I64[Sp + 8] + (I64[Sp + 16] << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Ciz_info" {
     block_c4Ciz_info:
         const _c4Ciz;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.907487023 UTC

[section ""data" . GHC.Storable.writeWideCharOffPtr_closure" {
     GHC.Storable.writeWideCharOffPtr_closure:
         const GHC.Storable.writeWideCharOffPtr_info;
 },
 GHC.Storable.writeWideCharOffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4Cjb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeWideCharOffPtr1_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWideCharOffPtr_info" {
     GHC.Storable.writeWideCharOffPtr_info:
         const GHC.Storable.writeWideCharOffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.912491194 UTC

[section ""data" . GHC.Storable.writeIntOffPtr1_closure" {
     GHC.Storable.writeIntOffPtr1_closure:
         const GHC.Storable.writeIntOffPtr1_info;
 },
 GHC.Storable.writeIntOffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4Cjp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4Cjy; else goto c4Cjz;
       c4Cjy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeIntOffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Cjz: // global
           I64[Sp - 24] = block_c4Cjm_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4CjI; else goto c4Cjn;
       u4CjI: // global
           call _c4Cjm(R1) args: 0, res: 0, upd: 0;
       c4Cjn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeIntOffPtr1_info" {
     GHC.Storable.writeIntOffPtr1_info:
         const GHC.Storable.writeIntOffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4Cjm() //  [R1]
         { []
         }
     {offset
       c4Cjm: // global
           I64[Sp] = block_c4Cjs_info;
           _s4Buv::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Buv::I64;
           if (R1 & 7 != 0) goto u4CjH; else goto c4Cjt;
       u4CjH: // global
           call _c4Cjs(R1) args: 0, res: 0, upd: 0;
       c4Cjt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cjm_info" {
     block_c4Cjm_info:
         const _c4Cjm;
         const 2;
         const 30;
 },
 _c4Cjs() //  [R1]
         { []
         }
     {offset
       c4Cjs: // global
           I64[Sp] = block_c4Cjx_info;
           _s4Bux::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4Bux::I64;
           if (R1 & 7 != 0) goto u4CjJ; else goto c4CjC;
       u4CjJ: // global
           call _c4Cjx(R1) args: 0, res: 0, upd: 0;
       c4CjC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cjs_info" {
     block_c4Cjs_info:
         const _c4Cjs;
         const 66;
         const 30;
 },
 _c4Cjx() //  [R1]
         { []
         }
     {offset
       c4Cjx: // global
           I64[I64[Sp + 8] + (I64[Sp + 16] << 3)] = I64[R1 + 7];
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cjx_info" {
     block_c4Cjx_info:
         const _c4Cjx;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.921302556 UTC

[section ""data" . GHC.Storable.writeIntOffPtr_closure" {
     GHC.Storable.writeIntOffPtr_closure:
         const GHC.Storable.writeIntOffPtr_info;
 },
 GHC.Storable.writeIntOffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4Ck9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeIntOffPtr1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeIntOffPtr_info" {
     GHC.Storable.writeIntOffPtr_info:
         const GHC.Storable.writeIntOffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.927450266 UTC

[section ""data" . GHC.Storable.writeWordOffPtr1_closure" {
     GHC.Storable.writeWordOffPtr1_closure:
         const GHC.Storable.writeWordOffPtr1_info;
 },
 GHC.Storable.writeWordOffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4Ckn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4Ckw; else goto c4Ckx;
       c4Ckw: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeWordOffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Ckx: // global
           I64[Sp - 24] = block_c4Ckk_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4CkG; else goto c4Ckl;
       u4CkG: // global
           call _c4Ckk(R1) args: 0, res: 0, upd: 0;
       c4Ckl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWordOffPtr1_info" {
     GHC.Storable.writeWordOffPtr1_info:
         const GHC.Storable.writeWordOffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4Ckk() //  [R1]
         { []
         }
     {offset
       c4Ckk: // global
           I64[Sp] = block_c4Ckq_info;
           _s4BuG::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4BuG::I64;
           if (R1 & 7 != 0) goto u4CkF; else goto c4Ckr;
       u4CkF: // global
           call _c4Ckq(R1) args: 0, res: 0, upd: 0;
       c4Ckr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Ckk_info" {
     block_c4Ckk_info:
         const _c4Ckk;
         const 2;
         const 30;
 },
 _c4Ckq() //  [R1]
         { []
         }
     {offset
       c4Ckq: // global
           I64[Sp] = block_c4Ckv_info;
           _s4BuI::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4BuI::I64;
           if (R1 & 7 != 0) goto u4CkH; else goto c4CkA;
       u4CkH: // global
           call _c4Ckv(R1) args: 0, res: 0, upd: 0;
       c4CkA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Ckq_info" {
     block_c4Ckq_info:
         const _c4Ckq;
         const 66;
         const 30;
 },
 _c4Ckv() //  [R1]
         { []
         }
     {offset
       c4Ckv: // global
           I64[I64[Sp + 8] + (I64[Sp + 16] << 3)] = I64[R1 + 7];
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Ckv_info" {
     block_c4Ckv_info:
         const _c4Ckv;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.940487752 UTC

[section ""data" . GHC.Storable.writeWordOffPtr_closure" {
     GHC.Storable.writeWordOffPtr_closure:
         const GHC.Storable.writeWordOffPtr_info;
 },
 GHC.Storable.writeWordOffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4Cl7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeWordOffPtr1_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWordOffPtr_info" {
     GHC.Storable.writeWordOffPtr_info:
         const GHC.Storable.writeWordOffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.947837821 UTC

[section ""data" . GHC.Storable.writePtrOffPtr1_closure" {
     GHC.Storable.writePtrOffPtr1_closure:
         const GHC.Storable.writePtrOffPtr1_info;
 },
 GHC.Storable.writePtrOffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4Cll: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4Clu; else goto c4Clv;
       c4Clu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writePtrOffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Clv: // global
           I64[Sp - 24] = block_c4Cli_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4ClE; else goto c4Clj;
       u4ClE: // global
           call _c4Cli(R1) args: 0, res: 0, upd: 0;
       c4Clj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writePtrOffPtr1_info" {
     GHC.Storable.writePtrOffPtr1_info:
         const GHC.Storable.writePtrOffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4Cli() //  [R1]
         { []
         }
     {offset
       c4Cli: // global
           I64[Sp] = block_c4Clo_info;
           _s4BuR::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4BuR::I64;
           if (R1 & 7 != 0) goto u4ClD; else goto c4Clp;
       u4ClD: // global
           call _c4Clo(R1) args: 0, res: 0, upd: 0;
       c4Clp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cli_info" {
     block_c4Cli_info:
         const _c4Cli;
         const 2;
         const 30;
 },
 _c4Clo() //  [R1]
         { []
         }
     {offset
       c4Clo: // global
           I64[Sp] = block_c4Clt_info;
           _s4BuT::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4BuT::I64;
           if (R1 & 7 != 0) goto u4ClF; else goto c4Cly;
       u4ClF: // global
           call _c4Clt(R1) args: 0, res: 0, upd: 0;
       c4Cly: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Clo_info" {
     block_c4Clo_info:
         const _c4Clo;
         const 66;
         const 30;
 },
 _c4Clt() //  [R1]
         { []
         }
     {offset
       c4Clt: // global
           I64[I64[Sp + 8] + (I64[Sp + 16] << 3)] = I64[R1 + 7];
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Clt_info" {
     block_c4Clt_info:
         const _c4Clt;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.957769617 UTC

[section ""data" . GHC.Storable.writePtrOffPtr_closure" {
     GHC.Storable.writePtrOffPtr_closure:
         const GHC.Storable.writePtrOffPtr_info;
 },
 GHC.Storable.writePtrOffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4Cm5: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writePtrOffPtr1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writePtrOffPtr_info" {
     GHC.Storable.writePtrOffPtr_info:
         const GHC.Storable.writePtrOffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.962490901 UTC

[section ""data" . GHC.Storable.writeFunPtrOffPtr1_closure" {
     GHC.Storable.writeFunPtrOffPtr1_closure:
         const GHC.Storable.writeFunPtrOffPtr1_info;
 },
 GHC.Storable.writeFunPtrOffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4Cmj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4Cms; else goto c4Cmt;
       c4Cms: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeFunPtrOffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Cmt: // global
           I64[Sp - 24] = block_c4Cmg_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4CmC; else goto c4Cmh;
       u4CmC: // global
           call _c4Cmg(R1) args: 0, res: 0, upd: 0;
       c4Cmh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeFunPtrOffPtr1_info" {
     GHC.Storable.writeFunPtrOffPtr1_info:
         const GHC.Storable.writeFunPtrOffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4Cmg() //  [R1]
         { []
         }
     {offset
       c4Cmg: // global
           I64[Sp] = block_c4Cmm_info;
           _s4Bv2::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Bv2::I64;
           if (R1 & 7 != 0) goto u4CmB; else goto c4Cmn;
       u4CmB: // global
           call _c4Cmm(R1) args: 0, res: 0, upd: 0;
       c4Cmn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cmg_info" {
     block_c4Cmg_info:
         const _c4Cmg;
         const 2;
         const 30;
 },
 _c4Cmm() //  [R1]
         { []
         }
     {offset
       c4Cmm: // global
           I64[Sp] = block_c4Cmr_info;
           _s4Bv4::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4Bv4::I64;
           if (R1 & 7 != 0) goto u4CmD; else goto c4Cmw;
       u4CmD: // global
           call _c4Cmr(R1) args: 0, res: 0, upd: 0;
       c4Cmw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cmm_info" {
     block_c4Cmm_info:
         const _c4Cmm;
         const 66;
         const 30;
 },
 _c4Cmr() //  [R1]
         { []
         }
     {offset
       c4Cmr: // global
           I64[I64[Sp + 8] + (I64[Sp + 16] << 3)] = I64[R1 + 7];
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cmr_info" {
     block_c4Cmr_info:
         const _c4Cmr;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.972355243 UTC

[section ""data" . GHC.Storable.writeFunPtrOffPtr_closure" {
     GHC.Storable.writeFunPtrOffPtr_closure:
         const GHC.Storable.writeFunPtrOffPtr_info;
 },
 GHC.Storable.writeFunPtrOffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4Cn3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeFunPtrOffPtr1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeFunPtrOffPtr_info" {
     GHC.Storable.writeFunPtrOffPtr_info:
         const GHC.Storable.writeFunPtrOffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.977025797 UTC

[section ""data" . GHC.Storable.writeFloatOffPtr1_closure" {
     GHC.Storable.writeFloatOffPtr1_closure:
         const GHC.Storable.writeFloatOffPtr1_info;
 },
 GHC.Storable.writeFloatOffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4Cnh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4Cnq; else goto c4Cnr;
       c4Cnq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeFloatOffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Cnr: // global
           I64[Sp - 24] = block_c4Cne_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4CnA; else goto c4Cnf;
       u4CnA: // global
           call _c4Cne(R1) args: 0, res: 0, upd: 0;
       c4Cnf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeFloatOffPtr1_info" {
     GHC.Storable.writeFloatOffPtr1_info:
         const GHC.Storable.writeFloatOffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4Cne() //  [R1]
         { []
         }
     {offset
       c4Cne: // global
           I64[Sp] = block_c4Cnk_info;
           _s4Bvd::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Bvd::I64;
           if (R1 & 7 != 0) goto u4Cnz; else goto c4Cnl;
       u4Cnz: // global
           call _c4Cnk(R1) args: 0, res: 0, upd: 0;
       c4Cnl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cne_info" {
     block_c4Cne_info:
         const _c4Cne;
         const 2;
         const 30;
 },
 _c4Cnk() //  [R1]
         { []
         }
     {offset
       c4Cnk: // global
           I64[Sp] = block_c4Cnp_info;
           _s4Bvf::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4Bvf::I64;
           if (R1 & 7 != 0) goto u4CnB; else goto c4Cnu;
       u4CnB: // global
           call _c4Cnp(R1) args: 0, res: 0, upd: 0;
       c4Cnu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cnk_info" {
     block_c4Cnk_info:
         const _c4Cnk;
         const 66;
         const 30;
 },
 _c4Cnp() //  [R1]
         { []
         }
     {offset
       c4Cnp: // global
           F32[I64[Sp + 8] + (I64[Sp + 16] << 2)] = F32[R1 + 7];
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cnp_info" {
     block_c4Cnp_info:
         const _c4Cnp;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.986165085 UTC

[section ""data" . GHC.Storable.writeFloatOffPtr_closure" {
     GHC.Storable.writeFloatOffPtr_closure:
         const GHC.Storable.writeFloatOffPtr_info;
 },
 GHC.Storable.writeFloatOffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4Co1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeFloatOffPtr1_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeFloatOffPtr_info" {
     GHC.Storable.writeFloatOffPtr_info:
         const GHC.Storable.writeFloatOffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:27.991194583 UTC

[section ""data" . GHC.Storable.writeDoubleOffPtr1_closure" {
     GHC.Storable.writeDoubleOffPtr1_closure:
         const GHC.Storable.writeDoubleOffPtr1_info;
 },
 GHC.Storable.writeDoubleOffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4Cof: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4Coo; else goto c4Cop;
       c4Coo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeDoubleOffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Cop: // global
           I64[Sp - 24] = block_c4Coc_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4Coy; else goto c4Cod;
       u4Coy: // global
           call _c4Coc(R1) args: 0, res: 0, upd: 0;
       c4Cod: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeDoubleOffPtr1_info" {
     GHC.Storable.writeDoubleOffPtr1_info:
         const GHC.Storable.writeDoubleOffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4Coc() //  [R1]
         { []
         }
     {offset
       c4Coc: // global
           I64[Sp] = block_c4Coi_info;
           _s4Bvo::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Bvo::I64;
           if (R1 & 7 != 0) goto u4Cox; else goto c4Coj;
       u4Cox: // global
           call _c4Coi(R1) args: 0, res: 0, upd: 0;
       c4Coj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Coc_info" {
     block_c4Coc_info:
         const _c4Coc;
         const 2;
         const 30;
 },
 _c4Coi() //  [R1]
         { []
         }
     {offset
       c4Coi: // global
           I64[Sp] = block_c4Con_info;
           _s4Bvq::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4Bvq::I64;
           if (R1 & 7 != 0) goto u4Coz; else goto c4Cos;
       u4Coz: // global
           call _c4Con(R1) args: 0, res: 0, upd: 0;
       c4Cos: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Coi_info" {
     block_c4Coi_info:
         const _c4Coi;
         const 66;
         const 30;
 },
 _c4Con() //  [R1]
         { []
         }
     {offset
       c4Con: // global
           F64[I64[Sp + 8] + (I64[Sp + 16] << 3)] = F64[R1 + 7];
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Con_info" {
     block_c4Con_info:
         const _c4Con;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.000277633 UTC

[section ""data" . GHC.Storable.writeDoubleOffPtr_closure" {
     GHC.Storable.writeDoubleOffPtr_closure:
         const GHC.Storable.writeDoubleOffPtr_info;
 },
 GHC.Storable.writeDoubleOffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CoZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeDoubleOffPtr1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeDoubleOffPtr_info" {
     GHC.Storable.writeDoubleOffPtr_info:
         const GHC.Storable.writeDoubleOffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.004814931 UTC

[section ""data" . GHC.Storable.writeStablePtrOffPtr1_closure" {
     GHC.Storable.writeStablePtrOffPtr1_closure:
         const GHC.Storable.writeStablePtrOffPtr1_info;
 },
 GHC.Storable.writeStablePtrOffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4Cpd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4Cpm; else goto c4Cpn;
       c4Cpm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeStablePtrOffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Cpn: // global
           I64[Sp - 24] = block_c4Cpa_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4Cpw; else goto c4Cpb;
       u4Cpw: // global
           call _c4Cpa(R1) args: 0, res: 0, upd: 0;
       c4Cpb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeStablePtrOffPtr1_info" {
     GHC.Storable.writeStablePtrOffPtr1_info:
         const GHC.Storable.writeStablePtrOffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4Cpa() //  [R1]
         { []
         }
     {offset
       c4Cpa: // global
           I64[Sp] = block_c4Cpg_info;
           _s4Bvz::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Bvz::I64;
           if (R1 & 7 != 0) goto u4Cpv; else goto c4Cph;
       u4Cpv: // global
           call _c4Cpg(R1) args: 0, res: 0, upd: 0;
       c4Cph: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cpa_info" {
     block_c4Cpa_info:
         const _c4Cpa;
         const 2;
         const 30;
 },
 _c4Cpg() //  [R1]
         { []
         }
     {offset
       c4Cpg: // global
           I64[Sp] = block_c4Cpl_info;
           _s4BvB::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4BvB::I64;
           if (R1 & 7 != 0) goto u4Cpx; else goto c4Cpq;
       u4Cpx: // global
           call _c4Cpl(R1) args: 0, res: 0, upd: 0;
       c4Cpq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cpg_info" {
     block_c4Cpg_info:
         const _c4Cpg;
         const 66;
         const 30;
 },
 _c4Cpl() //  [R1]
         { []
         }
     {offset
       c4Cpl: // global
           I64[I64[Sp + 8] + (I64[Sp + 16] << 3)] = I64[R1 + 7];
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cpl_info" {
     block_c4Cpl_info:
         const _c4Cpl;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.013895879 UTC

[section ""data" . GHC.Storable.writeStablePtrOffPtr_closure" {
     GHC.Storable.writeStablePtrOffPtr_closure:
         const GHC.Storable.writeStablePtrOffPtr_info;
 },
 GHC.Storable.writeStablePtrOffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CpX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeStablePtrOffPtr1_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeStablePtrOffPtr_info" {
     GHC.Storable.writeStablePtrOffPtr_info:
         const GHC.Storable.writeStablePtrOffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.018447217 UTC

[section ""data" . GHC.Storable.writeInt8OffPtr1_closure" {
     GHC.Storable.writeInt8OffPtr1_closure:
         const GHC.Storable.writeInt8OffPtr1_info;
 },
 GHC.Storable.writeInt8OffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4Cqb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4Cqk; else goto c4Cql;
       c4Cqk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeInt8OffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Cql: // global
           I64[Sp - 24] = block_c4Cq8_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4Cqu; else goto c4Cq9;
       u4Cqu: // global
           call _c4Cq8(R1) args: 0, res: 0, upd: 0;
       c4Cq9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeInt8OffPtr1_info" {
     GHC.Storable.writeInt8OffPtr1_info:
         const GHC.Storable.writeInt8OffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4Cq8() //  [R1]
         { []
         }
     {offset
       c4Cq8: // global
           I64[Sp] = block_c4Cqe_info;
           _s4BvK::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4BvK::I64;
           if (R1 & 7 != 0) goto u4Cqt; else goto c4Cqf;
       u4Cqt: // global
           call _c4Cqe(R1) args: 0, res: 0, upd: 0;
       c4Cqf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cq8_info" {
     block_c4Cq8_info:
         const _c4Cq8;
         const 2;
         const 30;
 },
 _c4Cqe() //  [R1]
         { []
         }
     {offset
       c4Cqe: // global
           I64[Sp] = block_c4Cqj_info;
           _s4BvM::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4BvM::I64;
           if (R1 & 7 != 0) goto u4Cqv; else goto c4Cqo;
       u4Cqv: // global
           call _c4Cqj(R1) args: 0, res: 0, upd: 0;
       c4Cqo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cqe_info" {
     block_c4Cqe_info:
         const _c4Cqe;
         const 66;
         const 30;
 },
 _c4Cqj() //  [R1]
         { []
         }
     {offset
       c4Cqj: // global
           I8[I64[Sp + 8] + I64[Sp + 16]] = %MO_UU_Conv_W64_W8(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cqj_info" {
     block_c4Cqj_info:
         const _c4Cqj;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.028004451 UTC

[section ""data" . GHC.Storable.writeInt8OffPtr_closure" {
     GHC.Storable.writeInt8OffPtr_closure:
         const GHC.Storable.writeInt8OffPtr_info;
 },
 GHC.Storable.writeInt8OffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CqV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeInt8OffPtr1_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeInt8OffPtr_info" {
     GHC.Storable.writeInt8OffPtr_info:
         const GHC.Storable.writeInt8OffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.032547002 UTC

[section ""data" . GHC.Storable.writeWord8OffPtr1_closure" {
     GHC.Storable.writeWord8OffPtr1_closure:
         const GHC.Storable.writeWord8OffPtr1_info;
 },
 GHC.Storable.writeWord8OffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4Cr9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4Cri; else goto c4Crj;
       c4Cri: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeWord8OffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Crj: // global
           I64[Sp - 24] = block_c4Cr6_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4Crs; else goto c4Cr7;
       u4Crs: // global
           call _c4Cr6(R1) args: 0, res: 0, upd: 0;
       c4Cr7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWord8OffPtr1_info" {
     GHC.Storable.writeWord8OffPtr1_info:
         const GHC.Storable.writeWord8OffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4Cr6() //  [R1]
         { []
         }
     {offset
       c4Cr6: // global
           I64[Sp] = block_c4Crc_info;
           _s4BvV::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4BvV::I64;
           if (R1 & 7 != 0) goto u4Crr; else goto c4Crd;
       u4Crr: // global
           call _c4Crc(R1) args: 0, res: 0, upd: 0;
       c4Crd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cr6_info" {
     block_c4Cr6_info:
         const _c4Cr6;
         const 2;
         const 30;
 },
 _c4Crc() //  [R1]
         { []
         }
     {offset
       c4Crc: // global
           I64[Sp] = block_c4Crh_info;
           _s4BvX::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4BvX::I64;
           if (R1 & 7 != 0) goto u4Crt; else goto c4Crm;
       u4Crt: // global
           call _c4Crh(R1) args: 0, res: 0, upd: 0;
       c4Crm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Crc_info" {
     block_c4Crc_info:
         const _c4Crc;
         const 66;
         const 30;
 },
 _c4Crh() //  [R1]
         { []
         }
     {offset
       c4Crh: // global
           I8[I64[Sp + 8] + I64[Sp + 16]] = %MO_UU_Conv_W64_W8(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Crh_info" {
     block_c4Crh_info:
         const _c4Crh;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.041862993 UTC

[section ""data" . GHC.Storable.writeWord8OffPtr_closure" {
     GHC.Storable.writeWord8OffPtr_closure:
         const GHC.Storable.writeWord8OffPtr_info;
 },
 GHC.Storable.writeWord8OffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CrT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeWord8OffPtr1_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWord8OffPtr_info" {
     GHC.Storable.writeWord8OffPtr_info:
         const GHC.Storable.writeWord8OffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.046855744 UTC

[section ""data" . GHC.Storable.writeInt16OffPtr1_closure" {
     GHC.Storable.writeInt16OffPtr1_closure:
         const GHC.Storable.writeInt16OffPtr1_info;
 },
 GHC.Storable.writeInt16OffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4Cs7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4Csg; else goto c4Csh;
       c4Csg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeInt16OffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Csh: // global
           I64[Sp - 24] = block_c4Cs4_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4Csq; else goto c4Cs5;
       u4Csq: // global
           call _c4Cs4(R1) args: 0, res: 0, upd: 0;
       c4Cs5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeInt16OffPtr1_info" {
     GHC.Storable.writeInt16OffPtr1_info:
         const GHC.Storable.writeInt16OffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4Cs4() //  [R1]
         { []
         }
     {offset
       c4Cs4: // global
           I64[Sp] = block_c4Csa_info;
           _s4Bw6::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Bw6::I64;
           if (R1 & 7 != 0) goto u4Csp; else goto c4Csb;
       u4Csp: // global
           call _c4Csa(R1) args: 0, res: 0, upd: 0;
       c4Csb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cs4_info" {
     block_c4Cs4_info:
         const _c4Cs4;
         const 2;
         const 30;
 },
 _c4Csa() //  [R1]
         { []
         }
     {offset
       c4Csa: // global
           I64[Sp] = block_c4Csf_info;
           _s4Bw8::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4Bw8::I64;
           if (R1 & 7 != 0) goto u4Csr; else goto c4Csk;
       u4Csr: // global
           call _c4Csf(R1) args: 0, res: 0, upd: 0;
       c4Csk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Csa_info" {
     block_c4Csa_info:
         const _c4Csa;
         const 66;
         const 30;
 },
 _c4Csf() //  [R1]
         { []
         }
     {offset
       c4Csf: // global
           I16[I64[Sp + 8] + (I64[Sp + 16] << 1)] = %MO_UU_Conv_W64_W16(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Csf_info" {
     block_c4Csf_info:
         const _c4Csf;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.055337058 UTC

[section ""data" . GHC.Storable.writeInt16OffPtr_closure" {
     GHC.Storable.writeInt16OffPtr_closure:
         const GHC.Storable.writeInt16OffPtr_info;
 },
 GHC.Storable.writeInt16OffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CsR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeInt16OffPtr1_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeInt16OffPtr_info" {
     GHC.Storable.writeInt16OffPtr_info:
         const GHC.Storable.writeInt16OffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.060598014 UTC

[section ""data" . GHC.Storable.writeWord16OffPtr1_closure" {
     GHC.Storable.writeWord16OffPtr1_closure:
         const GHC.Storable.writeWord16OffPtr1_info;
 },
 GHC.Storable.writeWord16OffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4Ct5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4Cte; else goto c4Ctf;
       c4Cte: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeWord16OffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Ctf: // global
           I64[Sp - 24] = block_c4Ct2_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4Cto; else goto c4Ct3;
       u4Cto: // global
           call _c4Ct2(R1) args: 0, res: 0, upd: 0;
       c4Ct3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWord16OffPtr1_info" {
     GHC.Storable.writeWord16OffPtr1_info:
         const GHC.Storable.writeWord16OffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4Ct2() //  [R1]
         { []
         }
     {offset
       c4Ct2: // global
           I64[Sp] = block_c4Ct8_info;
           _s4Bwh::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Bwh::I64;
           if (R1 & 7 != 0) goto u4Ctn; else goto c4Ct9;
       u4Ctn: // global
           call _c4Ct8(R1) args: 0, res: 0, upd: 0;
       c4Ct9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Ct2_info" {
     block_c4Ct2_info:
         const _c4Ct2;
         const 2;
         const 30;
 },
 _c4Ct8() //  [R1]
         { []
         }
     {offset
       c4Ct8: // global
           I64[Sp] = block_c4Ctd_info;
           _s4Bwj::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4Bwj::I64;
           if (R1 & 7 != 0) goto u4Ctp; else goto c4Cti;
       u4Ctp: // global
           call _c4Ctd(R1) args: 0, res: 0, upd: 0;
       c4Cti: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Ct8_info" {
     block_c4Ct8_info:
         const _c4Ct8;
         const 66;
         const 30;
 },
 _c4Ctd() //  [R1]
         { []
         }
     {offset
       c4Ctd: // global
           I16[I64[Sp + 8] + (I64[Sp + 16] << 1)] = %MO_UU_Conv_W64_W16(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Ctd_info" {
     block_c4Ctd_info:
         const _c4Ctd;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.06958417 UTC

[section ""data" . GHC.Storable.writeWord16OffPtr_closure" {
     GHC.Storable.writeWord16OffPtr_closure:
         const GHC.Storable.writeWord16OffPtr_info;
 },
 GHC.Storable.writeWord16OffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CtP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeWord16OffPtr1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWord16OffPtr_info" {
     GHC.Storable.writeWord16OffPtr_info:
         const GHC.Storable.writeWord16OffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.074268211 UTC

[section ""data" . GHC.Storable.writeInt32OffPtr1_closure" {
     GHC.Storable.writeInt32OffPtr1_closure:
         const GHC.Storable.writeInt32OffPtr1_info;
 },
 GHC.Storable.writeInt32OffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4Cu3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4Cuc; else goto c4Cud;
       c4Cuc: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeInt32OffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Cud: // global
           I64[Sp - 24] = block_c4Cu0_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4Cum; else goto c4Cu1;
       u4Cum: // global
           call _c4Cu0(R1) args: 0, res: 0, upd: 0;
       c4Cu1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeInt32OffPtr1_info" {
     GHC.Storable.writeInt32OffPtr1_info:
         const GHC.Storable.writeInt32OffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4Cu0() //  [R1]
         { []
         }
     {offset
       c4Cu0: // global
           I64[Sp] = block_c4Cu6_info;
           _s4Bws::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Bws::I64;
           if (R1 & 7 != 0) goto u4Cul; else goto c4Cu7;
       u4Cul: // global
           call _c4Cu6(R1) args: 0, res: 0, upd: 0;
       c4Cu7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cu0_info" {
     block_c4Cu0_info:
         const _c4Cu0;
         const 2;
         const 30;
 },
 _c4Cu6() //  [R1]
         { []
         }
     {offset
       c4Cu6: // global
           I64[Sp] = block_c4Cub_info;
           _s4Bwu::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4Bwu::I64;
           if (R1 & 7 != 0) goto u4Cun; else goto c4Cug;
       u4Cun: // global
           call _c4Cub(R1) args: 0, res: 0, upd: 0;
       c4Cug: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cu6_info" {
     block_c4Cu6_info:
         const _c4Cu6;
         const 66;
         const 30;
 },
 _c4Cub() //  [R1]
         { []
         }
     {offset
       c4Cub: // global
           I32[I64[Sp + 8] + (I64[Sp + 16] << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cub_info" {
     block_c4Cub_info:
         const _c4Cub;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.086041591 UTC

[section ""data" . GHC.Storable.writeInt32OffPtr_closure" {
     GHC.Storable.writeInt32OffPtr_closure:
         const GHC.Storable.writeInt32OffPtr_info;
 },
 GHC.Storable.writeInt32OffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CuN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeInt32OffPtr1_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeInt32OffPtr_info" {
     GHC.Storable.writeInt32OffPtr_info:
         const GHC.Storable.writeInt32OffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.090633843 UTC

[section ""data" . GHC.Storable.writeWord32OffPtr1_closure" {
     GHC.Storable.writeWord32OffPtr1_closure:
         const GHC.Storable.writeWord32OffPtr1_info;
 },
 GHC.Storable.writeWord32OffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4Cv1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4Cva; else goto c4Cvb;
       c4Cva: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeWord32OffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Cvb: // global
           I64[Sp - 24] = block_c4CuY_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4Cvk; else goto c4CuZ;
       u4Cvk: // global
           call _c4CuY(R1) args: 0, res: 0, upd: 0;
       c4CuZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWord32OffPtr1_info" {
     GHC.Storable.writeWord32OffPtr1_info:
         const GHC.Storable.writeWord32OffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4CuY() //  [R1]
         { []
         }
     {offset
       c4CuY: // global
           I64[Sp] = block_c4Cv4_info;
           _s4BwD::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4BwD::I64;
           if (R1 & 7 != 0) goto u4Cvj; else goto c4Cv5;
       u4Cvj: // global
           call _c4Cv4(R1) args: 0, res: 0, upd: 0;
       c4Cv5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CuY_info" {
     block_c4CuY_info:
         const _c4CuY;
         const 2;
         const 30;
 },
 _c4Cv4() //  [R1]
         { []
         }
     {offset
       c4Cv4: // global
           I64[Sp] = block_c4Cv9_info;
           _s4BwF::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4BwF::I64;
           if (R1 & 7 != 0) goto u4Cvl; else goto c4Cve;
       u4Cvl: // global
           call _c4Cv9(R1) args: 0, res: 0, upd: 0;
       c4Cve: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cv4_info" {
     block_c4Cv4_info:
         const _c4Cv4;
         const 66;
         const 30;
 },
 _c4Cv9() //  [R1]
         { []
         }
     {offset
       c4Cv9: // global
           I32[I64[Sp + 8] + (I64[Sp + 16] << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cv9_info" {
     block_c4Cv9_info:
         const _c4Cv9;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.100171643 UTC

[section ""data" . GHC.Storable.writeWord32OffPtr_closure" {
     GHC.Storable.writeWord32OffPtr_closure:
         const GHC.Storable.writeWord32OffPtr_info;
 },
 GHC.Storable.writeWord32OffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CvL: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeWord32OffPtr1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWord32OffPtr_info" {
     GHC.Storable.writeWord32OffPtr_info:
         const GHC.Storable.writeWord32OffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.104834202 UTC

[section ""data" . GHC.Storable.writeInt64OffPtr1_closure" {
     GHC.Storable.writeInt64OffPtr1_closure:
         const GHC.Storable.writeInt64OffPtr1_info;
 },
 GHC.Storable.writeInt64OffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CvZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4Cw8; else goto c4Cw9;
       c4Cw8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeInt64OffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Cw9: // global
           I64[Sp - 24] = block_c4CvW_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4Cwi; else goto c4CvX;
       u4Cwi: // global
           call _c4CvW(R1) args: 0, res: 0, upd: 0;
       c4CvX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeInt64OffPtr1_info" {
     GHC.Storable.writeInt64OffPtr1_info:
         const GHC.Storable.writeInt64OffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4CvW() //  [R1]
         { []
         }
     {offset
       c4CvW: // global
           I64[Sp] = block_c4Cw2_info;
           _s4BwO::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4BwO::I64;
           if (R1 & 7 != 0) goto u4Cwh; else goto c4Cw3;
       u4Cwh: // global
           call _c4Cw2(R1) args: 0, res: 0, upd: 0;
       c4Cw3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CvW_info" {
     block_c4CvW_info:
         const _c4CvW;
         const 2;
         const 30;
 },
 _c4Cw2() //  [R1]
         { []
         }
     {offset
       c4Cw2: // global
           I64[Sp] = block_c4Cw7_info;
           _s4BwQ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4BwQ::I64;
           if (R1 & 7 != 0) goto u4Cwj; else goto c4Cwc;
       u4Cwj: // global
           call _c4Cw7(R1) args: 0, res: 0, upd: 0;
       c4Cwc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cw2_info" {
     block_c4Cw2_info:
         const _c4Cw2;
         const 66;
         const 30;
 },
 _c4Cw7() //  [R1]
         { []
         }
     {offset
       c4Cw7: // global
           I64[I64[Sp + 8] + (I64[Sp + 16] << 3)] = I64[R1 + 7];
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cw7_info" {
     block_c4Cw7_info:
         const _c4Cw7;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.115193967 UTC

[section ""data" . GHC.Storable.writeInt64OffPtr_closure" {
     GHC.Storable.writeInt64OffPtr_closure:
         const GHC.Storable.writeInt64OffPtr_info;
 },
 GHC.Storable.writeInt64OffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CwJ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeInt64OffPtr1_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeInt64OffPtr_info" {
     GHC.Storable.writeInt64OffPtr_info:
         const GHC.Storable.writeInt64OffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.120276871 UTC

[section ""data" . GHC.Storable.writeWord64OffPtr1_closure" {
     GHC.Storable.writeWord64OffPtr1_closure:
         const GHC.Storable.writeWord64OffPtr1_info;
 },
 GHC.Storable.writeWord64OffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CwX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4Cx6; else goto c4Cx7;
       c4Cx6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeWord64OffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4Cx7: // global
           I64[Sp - 24] = block_c4CwU_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4Cxg; else goto c4CwV;
       u4Cxg: // global
           call _c4CwU(R1) args: 0, res: 0, upd: 0;
       c4CwV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWord64OffPtr1_info" {
     GHC.Storable.writeWord64OffPtr1_info:
         const GHC.Storable.writeWord64OffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4CwU() //  [R1]
         { []
         }
     {offset
       c4CwU: // global
           I64[Sp] = block_c4Cx0_info;
           _s4BwZ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4BwZ::I64;
           if (R1 & 7 != 0) goto u4Cxf; else goto c4Cx1;
       u4Cxf: // global
           call _c4Cx0(R1) args: 0, res: 0, upd: 0;
       c4Cx1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CwU_info" {
     block_c4CwU_info:
         const _c4CwU;
         const 2;
         const 30;
 },
 _c4Cx0() //  [R1]
         { []
         }
     {offset
       c4Cx0: // global
           I64[Sp] = block_c4Cx5_info;
           _s4Bx1::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4Bx1::I64;
           if (R1 & 7 != 0) goto u4Cxh; else goto c4Cxa;
       u4Cxh: // global
           call _c4Cx5(R1) args: 0, res: 0, upd: 0;
       c4Cxa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cx0_info" {
     block_c4Cx0_info:
         const _c4Cx0;
         const 66;
         const 30;
 },
 _c4Cx5() //  [R1]
         { []
         }
     {offset
       c4Cx5: // global
           I64[I64[Sp + 8] + (I64[Sp + 16] << 3)] = I64[R1 + 7];
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4Cx5_info" {
     block_c4Cx5_info:
         const _c4Cx5;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.128836284 UTC

[section ""data" . GHC.Storable.writeWord64OffPtr_closure" {
     GHC.Storable.writeWord64OffPtr_closure:
         const GHC.Storable.writeWord64OffPtr_info;
 },
 GHC.Storable.writeWord64OffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CxH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeWord64OffPtr1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWord64OffPtr_info" {
     GHC.Storable.writeWord64OffPtr_info:
         const GHC.Storable.writeWord64OffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.13221483 UTC

[section ""cstring" . GHC.Storable.$trModule4_bytes" {
     GHC.Storable.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.135520686 UTC

[section ""data" . GHC.Storable.$trModule3_closure" {
     GHC.Storable.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Storable.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.137321105 UTC

[section ""cstring" . GHC.Storable.$trModule2_bytes" {
     GHC.Storable.$trModule2_bytes:
         I8[] [71,72,67,46,83,116,111,114,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.139028694 UTC

[section ""data" . GHC.Storable.$trModule1_closure" {
     GHC.Storable.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Storable.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.140756392 UTC

[section ""data" . GHC.Storable.$trModule_closure" {
     GHC.Storable.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Storable.$trModule3_closure+1;
         const GHC.Storable.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:28.142712032 UTC

[section ""relreadonly" . S4BO7_srt" { S4BO7_srt:
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.443224058 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:59:29.445714202 UTC

[section ""data" . GHC.Storable.readWideCharOffPtr1_closure" {
     GHC.Storable.readWideCharOffPtr1_closure:
         const GHC.Storable.readWideCharOffPtr1_info;
 },
 GHC.Storable.readWideCharOffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CDH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4CDQ; else goto c4CDR;
       c4CDQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readWideCharOffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CDR: // global
           I64[Sp - 16] = block_c4CDE_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4CDX; else goto c4CDF;
       u4CDX: // global
           call _c4CDE(R1) args: 0, res: 0, upd: 0;
       c4CDF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWideCharOffPtr1_info" {
     GHC.Storable.readWideCharOffPtr1_info:
         const GHC.Storable.readWideCharOffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4CDE() //  [R1]
         { []
         }
     {offset
       c4CDE: // global
           I64[Sp] = block_c4CDK_info;
           _s4CxY::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CxY::I64;
           if (R1 & 7 != 0) goto u4CDW; else goto c4CDL;
       u4CDW: // global
           call _c4CDK(R1) args: 0, res: 0, upd: 0;
       c4CDL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CDE_info" {
     block_c4CDE_info:
         const _c4CDE;
         const 1;
         const 30;
 },
 _c4CDK() //  [R1]
         { []
         }
     {offset
       c4CDK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4CDV; else goto c4CDU;
       c4CDV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4CDU: // global
           _s4Cy3::I64 = %MO_UU_Conv_W32_W64(I32[I64[Sp + 8] + (I64[R1 + 7] << 2)]);
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s4Cy3::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CDK_info" {
     block_c4CDK_info:
         const _c4CDK;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.452811122 UTC

[section ""data" . GHC.Storable.readWideCharOffPtr_closure" {
     GHC.Storable.readWideCharOffPtr_closure:
         const GHC.Storable.readWideCharOffPtr_info;
 },
 GHC.Storable.readWideCharOffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CEl: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readWideCharOffPtr1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWideCharOffPtr_info" {
     GHC.Storable.readWideCharOffPtr_info:
         const GHC.Storable.readWideCharOffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.457174434 UTC

[section ""data" . GHC.Storable.readIntOffPtr1_closure" {
     GHC.Storable.readIntOffPtr1_closure:
         const GHC.Storable.readIntOffPtr1_info;
 },
 GHC.Storable.readIntOffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CEz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4CEI; else goto c4CEJ;
       c4CEI: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readIntOffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CEJ: // global
           I64[Sp - 16] = block_c4CEw_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4CEP; else goto c4CEx;
       u4CEP: // global
           call _c4CEw(R1) args: 0, res: 0, upd: 0;
       c4CEx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readIntOffPtr1_info" {
     GHC.Storable.readIntOffPtr1_info:
         const GHC.Storable.readIntOffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4CEw() //  [R1]
         { []
         }
     {offset
       c4CEw: // global
           I64[Sp] = block_c4CEC_info;
           _s4Cy9::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Cy9::I64;
           if (R1 & 7 != 0) goto u4CEO; else goto c4CED;
       u4CEO: // global
           call _c4CEC(R1) args: 0, res: 0, upd: 0;
       c4CED: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CEw_info" {
     block_c4CEw_info:
         const _c4CEw;
         const 1;
         const 30;
 },
 _c4CEC() //  [R1]
         { []
         }
     {offset
       c4CEC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4CEN; else goto c4CEM;
       c4CEN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4CEM: // global
           _s4Cye::I64 = I64[I64[Sp + 8] + (I64[R1 + 7] << 3)];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s4Cye::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CEC_info" {
     block_c4CEC_info:
         const _c4CEC;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.464273578 UTC

[section ""data" . GHC.Storable.readIntOffPtr_closure" {
     GHC.Storable.readIntOffPtr_closure:
         const GHC.Storable.readIntOffPtr_info;
 },
 GHC.Storable.readIntOffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CFd: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readIntOffPtr1_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readIntOffPtr_info" {
     GHC.Storable.readIntOffPtr_info:
         const GHC.Storable.readIntOffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.469456389 UTC

[section ""data" . GHC.Storable.readWordOffPtr1_closure" {
     GHC.Storable.readWordOffPtr1_closure:
         const GHC.Storable.readWordOffPtr1_info;
 },
 GHC.Storable.readWordOffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CFr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4CFA; else goto c4CFB;
       c4CFA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readWordOffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CFB: // global
           I64[Sp - 16] = block_c4CFo_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4CFH; else goto c4CFp;
       u4CFH: // global
           call _c4CFo(R1) args: 0, res: 0, upd: 0;
       c4CFp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWordOffPtr1_info" {
     GHC.Storable.readWordOffPtr1_info:
         const GHC.Storable.readWordOffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4CFo() //  [R1]
         { []
         }
     {offset
       c4CFo: // global
           I64[Sp] = block_c4CFu_info;
           _s4Cyk::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Cyk::I64;
           if (R1 & 7 != 0) goto u4CFG; else goto c4CFv;
       u4CFG: // global
           call _c4CFu(R1) args: 0, res: 0, upd: 0;
       c4CFv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CFo_info" {
     block_c4CFo_info:
         const _c4CFo;
         const 1;
         const 30;
 },
 _c4CFu() //  [R1]
         { []
         }
     {offset
       c4CFu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4CFF; else goto c4CFE;
       c4CFF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4CFE: // global
           _s4Cyp::I64 = I64[I64[Sp + 8] + (I64[R1 + 7] << 3)];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _s4Cyp::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CFu_info" {
     block_c4CFu_info:
         const _c4CFu;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.47632751 UTC

[section ""data" . GHC.Storable.readWordOffPtr_closure" {
     GHC.Storable.readWordOffPtr_closure:
         const GHC.Storable.readWordOffPtr_info;
 },
 GHC.Storable.readWordOffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CG5: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readWordOffPtr1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWordOffPtr_info" {
     GHC.Storable.readWordOffPtr_info:
         const GHC.Storable.readWordOffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.480639752 UTC

[section ""data" . GHC.Storable.readPtrOffPtr1_closure" {
     GHC.Storable.readPtrOffPtr1_closure:
         const GHC.Storable.readPtrOffPtr1_info;
 },
 GHC.Storable.readPtrOffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CGj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4CGs; else goto c4CGt;
       c4CGs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readPtrOffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CGt: // global
           I64[Sp - 16] = block_c4CGg_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4CGz; else goto c4CGh;
       u4CGz: // global
           call _c4CGg(R1) args: 0, res: 0, upd: 0;
       c4CGh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readPtrOffPtr1_info" {
     GHC.Storable.readPtrOffPtr1_info:
         const GHC.Storable.readPtrOffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4CGg() //  [R1]
         { []
         }
     {offset
       c4CGg: // global
           I64[Sp] = block_c4CGm_info;
           _s4Cyv::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Cyv::I64;
           if (R1 & 7 != 0) goto u4CGy; else goto c4CGn;
       u4CGy: // global
           call _c4CGm(R1) args: 0, res: 0, upd: 0;
       c4CGn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CGg_info" {
     block_c4CGg_info:
         const _c4CGg;
         const 1;
         const 30;
 },
 _c4CGm() //  [R1]
         { []
         }
     {offset
       c4CGm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4CGx; else goto c4CGw;
       c4CGx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4CGw: // global
           _s4CyA::I64 = I64[I64[Sp + 8] + (I64[R1 + 7] << 3)];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _s4CyA::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CGm_info" {
     block_c4CGm_info:
         const _c4CGm;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.48749534 UTC

[section ""data" . GHC.Storable.readPtrOffPtr_closure" {
     GHC.Storable.readPtrOffPtr_closure:
         const GHC.Storable.readPtrOffPtr_info;
 },
 GHC.Storable.readPtrOffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CGX: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readPtrOffPtr1_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readPtrOffPtr_info" {
     GHC.Storable.readPtrOffPtr_info:
         const GHC.Storable.readPtrOffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.491625539 UTC

[section ""data" . GHC.Storable.readFunPtrOffPtr1_closure" {
     GHC.Storable.readFunPtrOffPtr1_closure:
         const GHC.Storable.readFunPtrOffPtr1_info;
 },
 GHC.Storable.readFunPtrOffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CHb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4CHk; else goto c4CHl;
       c4CHk: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readFunPtrOffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CHl: // global
           I64[Sp - 16] = block_c4CH8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4CHr; else goto c4CH9;
       u4CHr: // global
           call _c4CH8(R1) args: 0, res: 0, upd: 0;
       c4CH9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readFunPtrOffPtr1_info" {
     GHC.Storable.readFunPtrOffPtr1_info:
         const GHC.Storable.readFunPtrOffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4CH8() //  [R1]
         { []
         }
     {offset
       c4CH8: // global
           I64[Sp] = block_c4CHe_info;
           _s4CyG::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CyG::I64;
           if (R1 & 7 != 0) goto u4CHq; else goto c4CHf;
       u4CHq: // global
           call _c4CHe(R1) args: 0, res: 0, upd: 0;
       c4CHf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CH8_info" {
     block_c4CH8_info:
         const _c4CH8;
         const 1;
         const 30;
 },
 _c4CHe() //  [R1]
         { []
         }
     {offset
       c4CHe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4CHp; else goto c4CHo;
       c4CHp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4CHo: // global
           _s4CyL::I64 = I64[I64[Sp + 8] + (I64[R1 + 7] << 3)];
           I64[Hp - 8] = GHC.Ptr.FunPtr_con_info;
           I64[Hp] = _s4CyL::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CHe_info" {
     block_c4CHe_info:
         const _c4CHe;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.498431145 UTC

[section ""data" . GHC.Storable.readFunPtrOffPtr_closure" {
     GHC.Storable.readFunPtrOffPtr_closure:
         const GHC.Storable.readFunPtrOffPtr_info;
 },
 GHC.Storable.readFunPtrOffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CHP: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readFunPtrOffPtr1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readFunPtrOffPtr_info" {
     GHC.Storable.readFunPtrOffPtr_info:
         const GHC.Storable.readFunPtrOffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.503124797 UTC

[section ""data" . GHC.Storable.readFloatOffPtr1_closure" {
     GHC.Storable.readFloatOffPtr1_closure:
         const GHC.Storable.readFloatOffPtr1_info;
 },
 GHC.Storable.readFloatOffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CI3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4CIc; else goto c4CId;
       c4CIc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readFloatOffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CId: // global
           I64[Sp - 16] = block_c4CI0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4CIj; else goto c4CI1;
       u4CIj: // global
           call _c4CI0(R1) args: 0, res: 0, upd: 0;
       c4CI1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readFloatOffPtr1_info" {
     GHC.Storable.readFloatOffPtr1_info:
         const GHC.Storable.readFloatOffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4CI0() //  [R1]
         { []
         }
     {offset
       c4CI0: // global
           I64[Sp] = block_c4CI6_info;
           _s4CyR::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CyR::I64;
           if (R1 & 7 != 0) goto u4CIi; else goto c4CI7;
       u4CIi: // global
           call _c4CI6(R1) args: 0, res: 0, upd: 0;
       c4CI7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CI0_info" {
     block_c4CI0_info:
         const _c4CI0;
         const 1;
         const 30;
 },
 _c4CI6() //  [R1]
         { []
         }
     {offset
       c4CI6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4CIh; else goto c4CIg;
       c4CIh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4CIg: // global
           _s4CyW::F32 = F32[I64[Sp + 8] + (I64[R1 + 7] << 2)];
           I64[Hp - 8] = GHC.Types.F#_con_info;
           F32[Hp] = _s4CyW::F32;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CI6_info" {
     block_c4CI6_info:
         const _c4CI6;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.510127901 UTC

[section ""data" . GHC.Storable.readFloatOffPtr_closure" {
     GHC.Storable.readFloatOffPtr_closure:
         const GHC.Storable.readFloatOffPtr_info;
 },
 GHC.Storable.readFloatOffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CIH: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readFloatOffPtr1_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readFloatOffPtr_info" {
     GHC.Storable.readFloatOffPtr_info:
         const GHC.Storable.readFloatOffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.514397367 UTC

[section ""data" . GHC.Storable.readDoubleOffPtr1_closure" {
     GHC.Storable.readDoubleOffPtr1_closure:
         const GHC.Storable.readDoubleOffPtr1_info;
 },
 GHC.Storable.readDoubleOffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CIV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4CJ4; else goto c4CJ5;
       c4CJ4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readDoubleOffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CJ5: // global
           I64[Sp - 16] = block_c4CIS_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4CJb; else goto c4CIT;
       u4CJb: // global
           call _c4CIS(R1) args: 0, res: 0, upd: 0;
       c4CIT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readDoubleOffPtr1_info" {
     GHC.Storable.readDoubleOffPtr1_info:
         const GHC.Storable.readDoubleOffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4CIS() //  [R1]
         { []
         }
     {offset
       c4CIS: // global
           I64[Sp] = block_c4CIY_info;
           _s4Cz2::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Cz2::I64;
           if (R1 & 7 != 0) goto u4CJa; else goto c4CIZ;
       u4CJa: // global
           call _c4CIY(R1) args: 0, res: 0, upd: 0;
       c4CIZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CIS_info" {
     block_c4CIS_info:
         const _c4CIS;
         const 1;
         const 30;
 },
 _c4CIY() //  [R1]
         { []
         }
     {offset
       c4CIY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4CJ9; else goto c4CJ8;
       c4CJ9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4CJ8: // global
           _s4Cz7::F64 = F64[I64[Sp + 8] + (I64[R1 + 7] << 3)];
           I64[Hp - 8] = GHC.Types.D#_con_info;
           F64[Hp] = _s4Cz7::F64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CIY_info" {
     block_c4CIY_info:
         const _c4CIY;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.522720988 UTC

[section ""data" . GHC.Storable.readDoubleOffPtr_closure" {
     GHC.Storable.readDoubleOffPtr_closure:
         const GHC.Storable.readDoubleOffPtr_info;
 },
 GHC.Storable.readDoubleOffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CJz: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readDoubleOffPtr1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readDoubleOffPtr_info" {
     GHC.Storable.readDoubleOffPtr_info:
         const GHC.Storable.readDoubleOffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.528422879 UTC

[section ""data" . GHC.Storable.readStablePtrOffPtr1_closure" {
     GHC.Storable.readStablePtrOffPtr1_closure:
         const GHC.Storable.readStablePtrOffPtr1_info;
 },
 GHC.Storable.readStablePtrOffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CJN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4CJW; else goto c4CJX;
       c4CJW: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readStablePtrOffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CJX: // global
           I64[Sp - 16] = block_c4CJK_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4CK3; else goto c4CJL;
       u4CK3: // global
           call _c4CJK(R1) args: 0, res: 0, upd: 0;
       c4CJL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readStablePtrOffPtr1_info" {
     GHC.Storable.readStablePtrOffPtr1_info:
         const GHC.Storable.readStablePtrOffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4CJK() //  [R1]
         { []
         }
     {offset
       c4CJK: // global
           I64[Sp] = block_c4CJQ_info;
           _s4Czd::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Czd::I64;
           if (R1 & 7 != 0) goto u4CK2; else goto c4CJR;
       u4CK2: // global
           call _c4CJQ(R1) args: 0, res: 0, upd: 0;
       c4CJR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CJK_info" {
     block_c4CJK_info:
         const _c4CJK;
         const 1;
         const 30;
 },
 _c4CJQ() //  [R1]
         { []
         }
     {offset
       c4CJQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4CK1; else goto c4CK0;
       c4CK1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4CK0: // global
           _s4Czi::I64 = I64[I64[Sp + 8] + (I64[R1 + 7] << 3)];
           I64[Hp - 8] = GHC.Stable.StablePtr_con_info;
           I64[Hp] = _s4Czi::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CJQ_info" {
     block_c4CJQ_info:
         const _c4CJQ;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.539121627 UTC

[section ""data" . GHC.Storable.readStablePtrOffPtr_closure" {
     GHC.Storable.readStablePtrOffPtr_closure:
         const GHC.Storable.readStablePtrOffPtr_info;
 },
 GHC.Storable.readStablePtrOffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CKr: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readStablePtrOffPtr1_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readStablePtrOffPtr_info" {
     GHC.Storable.readStablePtrOffPtr_info:
         const GHC.Storable.readStablePtrOffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.546262062 UTC

[section ""data" . GHC.Storable.readInt8OffPtr1_closure" {
     GHC.Storable.readInt8OffPtr1_closure:
         const GHC.Storable.readInt8OffPtr1_info;
 },
 GHC.Storable.readInt8OffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CKF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4CKO; else goto c4CKP;
       c4CKO: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readInt8OffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CKP: // global
           I64[Sp - 16] = block_c4CKC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4CKV; else goto c4CKD;
       u4CKV: // global
           call _c4CKC(R1) args: 0, res: 0, upd: 0;
       c4CKD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readInt8OffPtr1_info" {
     GHC.Storable.readInt8OffPtr1_info:
         const GHC.Storable.readInt8OffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4CKC() //  [R1]
         { []
         }
     {offset
       c4CKC: // global
           I64[Sp] = block_c4CKI_info;
           _s4Czo::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Czo::I64;
           if (R1 & 7 != 0) goto u4CKU; else goto c4CKJ;
       u4CKU: // global
           call _c4CKI(R1) args: 0, res: 0, upd: 0;
       c4CKJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CKC_info" {
     block_c4CKC_info:
         const _c4CKC;
         const 1;
         const 30;
 },
 _c4CKI() //  [R1]
         { []
         }
     {offset
       c4CKI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4CKT; else goto c4CKS;
       c4CKT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4CKS: // global
           _s4Czt::I64 = %MO_SS_Conv_W8_W64(I8[I64[Sp + 8] + I64[R1 + 7]]);
           I64[Hp - 8] = GHC.Int.I8#_con_info;
           I64[Hp] = _s4Czt::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CKI_info" {
     block_c4CKI_info:
         const _c4CKI;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.55664395 UTC

[section ""data" . GHC.Storable.readInt8OffPtr_closure" {
     GHC.Storable.readInt8OffPtr_closure:
         const GHC.Storable.readInt8OffPtr_info;
 },
 GHC.Storable.readInt8OffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CLj: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readInt8OffPtr1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readInt8OffPtr_info" {
     GHC.Storable.readInt8OffPtr_info:
         const GHC.Storable.readInt8OffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.562664029 UTC

[section ""data" . GHC.Storable.readWord8OffPtr1_closure" {
     GHC.Storable.readWord8OffPtr1_closure:
         const GHC.Storable.readWord8OffPtr1_info;
 },
 GHC.Storable.readWord8OffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CLx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4CLG; else goto c4CLH;
       c4CLG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readWord8OffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CLH: // global
           I64[Sp - 16] = block_c4CLu_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4CLN; else goto c4CLv;
       u4CLN: // global
           call _c4CLu(R1) args: 0, res: 0, upd: 0;
       c4CLv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWord8OffPtr1_info" {
     GHC.Storable.readWord8OffPtr1_info:
         const GHC.Storable.readWord8OffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4CLu() //  [R1]
         { []
         }
     {offset
       c4CLu: // global
           I64[Sp] = block_c4CLA_info;
           _s4Czz::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4Czz::I64;
           if (R1 & 7 != 0) goto u4CLM; else goto c4CLB;
       u4CLM: // global
           call _c4CLA(R1) args: 0, res: 0, upd: 0;
       c4CLB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CLu_info" {
     block_c4CLu_info:
         const _c4CLu;
         const 1;
         const 30;
 },
 _c4CLA() //  [R1]
         { []
         }
     {offset
       c4CLA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4CLL; else goto c4CLK;
       c4CLL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4CLK: // global
           _s4CzE::I64 = %MO_UU_Conv_W8_W64(I8[I64[Sp + 8] + I64[R1 + 7]]);
           I64[Hp - 8] = GHC.Word.W8#_con_info;
           I64[Hp] = _s4CzE::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CLA_info" {
     block_c4CLA_info:
         const _c4CLA;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.571902323 UTC

[section ""data" . GHC.Storable.readWord8OffPtr_closure" {
     GHC.Storable.readWord8OffPtr_closure:
         const GHC.Storable.readWord8OffPtr_info;
 },
 GHC.Storable.readWord8OffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CMb: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readWord8OffPtr1_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWord8OffPtr_info" {
     GHC.Storable.readWord8OffPtr_info:
         const GHC.Storable.readWord8OffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.578303992 UTC

[section ""data" . GHC.Storable.readInt16OffPtr1_closure" {
     GHC.Storable.readInt16OffPtr1_closure:
         const GHC.Storable.readInt16OffPtr1_info;
 },
 GHC.Storable.readInt16OffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CMp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4CMy; else goto c4CMz;
       c4CMy: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readInt16OffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CMz: // global
           I64[Sp - 16] = block_c4CMm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4CMF; else goto c4CMn;
       u4CMF: // global
           call _c4CMm(R1) args: 0, res: 0, upd: 0;
       c4CMn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readInt16OffPtr1_info" {
     GHC.Storable.readInt16OffPtr1_info:
         const GHC.Storable.readInt16OffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4CMm() //  [R1]
         { []
         }
     {offset
       c4CMm: // global
           I64[Sp] = block_c4CMs_info;
           _s4CzK::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CzK::I64;
           if (R1 & 7 != 0) goto u4CME; else goto c4CMt;
       u4CME: // global
           call _c4CMs(R1) args: 0, res: 0, upd: 0;
       c4CMt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CMm_info" {
     block_c4CMm_info:
         const _c4CMm;
         const 1;
         const 30;
 },
 _c4CMs() //  [R1]
         { []
         }
     {offset
       c4CMs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4CMD; else goto c4CMC;
       c4CMD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4CMC: // global
           _s4CzP::I64 = %MO_SS_Conv_W16_W64(I16[I64[Sp + 8] + (I64[R1 + 7] << 1)]);
           I64[Hp - 8] = GHC.Int.I16#_con_info;
           I64[Hp] = _s4CzP::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CMs_info" {
     block_c4CMs_info:
         const _c4CMs;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.586354128 UTC

[section ""data" . GHC.Storable.readInt16OffPtr_closure" {
     GHC.Storable.readInt16OffPtr_closure:
         const GHC.Storable.readInt16OffPtr_info;
 },
 GHC.Storable.readInt16OffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CN3: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readInt16OffPtr1_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readInt16OffPtr_info" {
     GHC.Storable.readInt16OffPtr_info:
         const GHC.Storable.readInt16OffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.590819185 UTC

[section ""data" . GHC.Storable.readWord16OffPtr1_closure" {
     GHC.Storable.readWord16OffPtr1_closure:
         const GHC.Storable.readWord16OffPtr1_info;
 },
 GHC.Storable.readWord16OffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CNh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4CNq; else goto c4CNr;
       c4CNq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readWord16OffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CNr: // global
           I64[Sp - 16] = block_c4CNe_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4CNx; else goto c4CNf;
       u4CNx: // global
           call _c4CNe(R1) args: 0, res: 0, upd: 0;
       c4CNf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWord16OffPtr1_info" {
     GHC.Storable.readWord16OffPtr1_info:
         const GHC.Storable.readWord16OffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4CNe() //  [R1]
         { []
         }
     {offset
       c4CNe: // global
           I64[Sp] = block_c4CNk_info;
           _s4CzV::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CzV::I64;
           if (R1 & 7 != 0) goto u4CNw; else goto c4CNl;
       u4CNw: // global
           call _c4CNk(R1) args: 0, res: 0, upd: 0;
       c4CNl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CNe_info" {
     block_c4CNe_info:
         const _c4CNe;
         const 1;
         const 30;
 },
 _c4CNk() //  [R1]
         { []
         }
     {offset
       c4CNk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4CNv; else goto c4CNu;
       c4CNv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4CNu: // global
           _s4CA0::I64 = %MO_UU_Conv_W16_W64(I16[I64[Sp + 8] + (I64[R1 + 7] << 1)]);
           I64[Hp - 8] = GHC.Word.W16#_con_info;
           I64[Hp] = _s4CA0::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CNk_info" {
     block_c4CNk_info:
         const _c4CNk;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.598426277 UTC

[section ""data" . GHC.Storable.readWord16OffPtr_closure" {
     GHC.Storable.readWord16OffPtr_closure:
         const GHC.Storable.readWord16OffPtr_info;
 },
 GHC.Storable.readWord16OffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CNV: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readWord16OffPtr1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWord16OffPtr_info" {
     GHC.Storable.readWord16OffPtr_info:
         const GHC.Storable.readWord16OffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.603261642 UTC

[section ""data" . GHC.Storable.readInt32OffPtr1_closure" {
     GHC.Storable.readInt32OffPtr1_closure:
         const GHC.Storable.readInt32OffPtr1_info;
 },
 GHC.Storable.readInt32OffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CO9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4COi; else goto c4COj;
       c4COi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readInt32OffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4COj: // global
           I64[Sp - 16] = block_c4CO6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4COp; else goto c4CO7;
       u4COp: // global
           call _c4CO6(R1) args: 0, res: 0, upd: 0;
       c4CO7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readInt32OffPtr1_info" {
     GHC.Storable.readInt32OffPtr1_info:
         const GHC.Storable.readInt32OffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4CO6() //  [R1]
         { []
         }
     {offset
       c4CO6: // global
           I64[Sp] = block_c4COc_info;
           _s4CA6::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CA6::I64;
           if (R1 & 7 != 0) goto u4COo; else goto c4COd;
       u4COo: // global
           call _c4COc(R1) args: 0, res: 0, upd: 0;
       c4COd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CO6_info" {
     block_c4CO6_info:
         const _c4CO6;
         const 1;
         const 30;
 },
 _c4COc() //  [R1]
         { []
         }
     {offset
       c4COc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4COn; else goto c4COm;
       c4COn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4COm: // global
           _s4CAb::I64 = %MO_SS_Conv_W32_W64(I32[I64[Sp + 8] + (I64[R1 + 7] << 2)]);
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _s4CAb::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4COc_info" {
     block_c4COc_info:
         const _c4COc;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.610224963 UTC

[section ""data" . GHC.Storable.readInt32OffPtr_closure" {
     GHC.Storable.readInt32OffPtr_closure:
         const GHC.Storable.readInt32OffPtr_info;
 },
 GHC.Storable.readInt32OffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CON: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readInt32OffPtr1_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readInt32OffPtr_info" {
     GHC.Storable.readInt32OffPtr_info:
         const GHC.Storable.readInt32OffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.614683071 UTC

[section ""data" . GHC.Storable.readWord32OffPtr1_closure" {
     GHC.Storable.readWord32OffPtr1_closure:
         const GHC.Storable.readWord32OffPtr1_info;
 },
 GHC.Storable.readWord32OffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CP1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4CPa; else goto c4CPb;
       c4CPa: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readWord32OffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CPb: // global
           I64[Sp - 16] = block_c4COY_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4CPh; else goto c4COZ;
       u4CPh: // global
           call _c4COY(R1) args: 0, res: 0, upd: 0;
       c4COZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWord32OffPtr1_info" {
     GHC.Storable.readWord32OffPtr1_info:
         const GHC.Storable.readWord32OffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4COY() //  [R1]
         { []
         }
     {offset
       c4COY: // global
           I64[Sp] = block_c4CP4_info;
           _s4CAh::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CAh::I64;
           if (R1 & 7 != 0) goto u4CPg; else goto c4CP5;
       u4CPg: // global
           call _c4CP4(R1) args: 0, res: 0, upd: 0;
       c4CP5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4COY_info" {
     block_c4COY_info:
         const _c4COY;
         const 1;
         const 30;
 },
 _c4CP4() //  [R1]
         { []
         }
     {offset
       c4CP4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4CPf; else goto c4CPe;
       c4CPf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4CPe: // global
           _s4CAm::I64 = %MO_UU_Conv_W32_W64(I32[I64[Sp + 8] + (I64[R1 + 7] << 2)]);
           I64[Hp - 8] = GHC.Word.W32#_con_info;
           I64[Hp] = _s4CAm::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CP4_info" {
     block_c4CP4_info:
         const _c4CP4;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.6218018 UTC

[section ""data" . GHC.Storable.readWord32OffPtr_closure" {
     GHC.Storable.readWord32OffPtr_closure:
         const GHC.Storable.readWord32OffPtr_info;
 },
 GHC.Storable.readWord32OffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CPF: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readWord32OffPtr1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWord32OffPtr_info" {
     GHC.Storable.readWord32OffPtr_info:
         const GHC.Storable.readWord32OffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.626169343 UTC

[section ""data" . GHC.Storable.readInt64OffPtr1_closure" {
     GHC.Storable.readInt64OffPtr1_closure:
         const GHC.Storable.readInt64OffPtr1_info;
 },
 GHC.Storable.readInt64OffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CPT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4CQ2; else goto c4CQ3;
       c4CQ2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readInt64OffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CQ3: // global
           I64[Sp - 16] = block_c4CPQ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4CQ9; else goto c4CPR;
       u4CQ9: // global
           call _c4CPQ(R1) args: 0, res: 0, upd: 0;
       c4CPR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readInt64OffPtr1_info" {
     GHC.Storable.readInt64OffPtr1_info:
         const GHC.Storable.readInt64OffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4CPQ() //  [R1]
         { []
         }
     {offset
       c4CPQ: // global
           I64[Sp] = block_c4CPW_info;
           _s4CAs::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CAs::I64;
           if (R1 & 7 != 0) goto u4CQ8; else goto c4CPX;
       u4CQ8: // global
           call _c4CPW(R1) args: 0, res: 0, upd: 0;
       c4CPX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CPQ_info" {
     block_c4CPQ_info:
         const _c4CPQ;
         const 1;
         const 30;
 },
 _c4CPW() //  [R1]
         { []
         }
     {offset
       c4CPW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4CQ7; else goto c4CQ6;
       c4CQ7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4CQ6: // global
           _s4CAx::I64 = I64[I64[Sp + 8] + (I64[R1 + 7] << 3)];
           I64[Hp - 8] = GHC.Int.I64#_con_info;
           I64[Hp] = _s4CAx::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CPW_info" {
     block_c4CPW_info:
         const _c4CPW;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.633926252 UTC

[section ""data" . GHC.Storable.readInt64OffPtr_closure" {
     GHC.Storable.readInt64OffPtr_closure:
         const GHC.Storable.readInt64OffPtr_info;
 },
 GHC.Storable.readInt64OffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CQx: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readInt64OffPtr1_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readInt64OffPtr_info" {
     GHC.Storable.readInt64OffPtr_info:
         const GHC.Storable.readInt64OffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.63817338 UTC

[section ""data" . GHC.Storable.readWord64OffPtr1_closure" {
     GHC.Storable.readWord64OffPtr1_closure:
         const GHC.Storable.readWord64OffPtr1_info;
 },
 GHC.Storable.readWord64OffPtr1_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CQL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c4CQU; else goto c4CQV;
       c4CQU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.readWord64OffPtr1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CQV: // global
           I64[Sp - 16] = block_c4CQI_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u4CR1; else goto c4CQJ;
       u4CR1: // global
           call _c4CQI(R1) args: 0, res: 0, upd: 0;
       c4CQJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWord64OffPtr1_info" {
     GHC.Storable.readWord64OffPtr1_info:
         const GHC.Storable.readWord64OffPtr1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c4CQI() //  [R1]
         { []
         }
     {offset
       c4CQI: // global
           I64[Sp] = block_c4CQO_info;
           _s4CAD::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CAD::I64;
           if (R1 & 7 != 0) goto u4CR0; else goto c4CQP;
       u4CR0: // global
           call _c4CQO(R1) args: 0, res: 0, upd: 0;
       c4CQP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CQI_info" {
     block_c4CQI_info:
         const _c4CQI;
         const 1;
         const 30;
 },
 _c4CQO() //  [R1]
         { []
         }
     {offset
       c4CQO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c4CQZ; else goto c4CQY;
       c4CQZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c4CQY: // global
           _s4CAI::I64 = I64[I64[Sp + 8] + (I64[R1 + 7] << 3)];
           I64[Hp - 8] = GHC.Word.W64#_con_info;
           I64[Hp] = _s4CAI::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CQO_info" {
     block_c4CQO_info:
         const _c4CQO;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.645010616 UTC

[section ""data" . GHC.Storable.readWord64OffPtr_closure" {
     GHC.Storable.readWord64OffPtr_closure:
         const GHC.Storable.readWord64OffPtr_info;
 },
 GHC.Storable.readWord64OffPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       c4CRp: // global
           R3 = R3;
           R2 = R2;
           call GHC.Storable.readWord64OffPtr1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.readWord64OffPtr_info" {
     GHC.Storable.readWord64OffPtr_info:
         const GHC.Storable.readWord64OffPtr_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.649670222 UTC

[section ""data" . GHC.Storable.writeWideCharOffPtr1_closure" {
     GHC.Storable.writeWideCharOffPtr1_closure:
         const GHC.Storable.writeWideCharOffPtr1_info;
 },
 GHC.Storable.writeWideCharOffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CRD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4CRM; else goto c4CRN;
       c4CRM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeWideCharOffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CRN: // global
           I64[Sp - 24] = block_c4CRA_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4CRW; else goto c4CRB;
       u4CRW: // global
           call _c4CRA(R1) args: 0, res: 0, upd: 0;
       c4CRB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWideCharOffPtr1_info" {
     GHC.Storable.writeWideCharOffPtr1_info:
         const GHC.Storable.writeWideCharOffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4CRA() //  [R1]
         { []
         }
     {offset
       c4CRA: // global
           I64[Sp] = block_c4CRG_info;
           _s4CAP::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CAP::I64;
           if (R1 & 7 != 0) goto u4CRV; else goto c4CRH;
       u4CRV: // global
           call _c4CRG(R1) args: 0, res: 0, upd: 0;
       c4CRH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CRA_info" {
     block_c4CRA_info:
         const _c4CRA;
         const 2;
         const 30;
 },
 _c4CRG() //  [R1]
         { []
         }
     {offset
       c4CRG: // global
           I64[Sp] = block_c4CRL_info;
           _s4CAR::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4CAR::I64;
           if (R1 & 7 != 0) goto u4CRX; else goto c4CRQ;
       u4CRX: // global
           call _c4CRL(R1) args: 0, res: 0, upd: 0;
       c4CRQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CRG_info" {
     block_c4CRG_info:
         const _c4CRG;
         const 66;
         const 30;
 },
 _c4CRL() //  [R1]
         { []
         }
     {offset
       c4CRL: // global
           I32[I64[Sp + 8] + (I64[Sp + 16] << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CRL_info" {
     block_c4CRL_info:
         const _c4CRL;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.657990682 UTC

[section ""data" . GHC.Storable.writeWideCharOffPtr_closure" {
     GHC.Storable.writeWideCharOffPtr_closure:
         const GHC.Storable.writeWideCharOffPtr_info;
 },
 GHC.Storable.writeWideCharOffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CSr: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeWideCharOffPtr1_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWideCharOffPtr_info" {
     GHC.Storable.writeWideCharOffPtr_info:
         const GHC.Storable.writeWideCharOffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.6625299 UTC

[section ""data" . GHC.Storable.writeIntOffPtr1_closure" {
     GHC.Storable.writeIntOffPtr1_closure:
         const GHC.Storable.writeIntOffPtr1_info;
 },
 GHC.Storable.writeIntOffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CSF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4CSO; else goto c4CSP;
       c4CSO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeIntOffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CSP: // global
           I64[Sp - 24] = block_c4CSC_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4CSY; else goto c4CSD;
       u4CSY: // global
           call _c4CSC(R1) args: 0, res: 0, upd: 0;
       c4CSD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeIntOffPtr1_info" {
     GHC.Storable.writeIntOffPtr1_info:
         const GHC.Storable.writeIntOffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4CSC() //  [R1]
         { []
         }
     {offset
       c4CSC: // global
           I64[Sp] = block_c4CSI_info;
           _s4CB0::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CB0::I64;
           if (R1 & 7 != 0) goto u4CSX; else goto c4CSJ;
       u4CSX: // global
           call _c4CSI(R1) args: 0, res: 0, upd: 0;
       c4CSJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CSC_info" {
     block_c4CSC_info:
         const _c4CSC;
         const 2;
         const 30;
 },
 _c4CSI() //  [R1]
         { []
         }
     {offset
       c4CSI: // global
           I64[Sp] = block_c4CSN_info;
           _s4CB2::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4CB2::I64;
           if (R1 & 7 != 0) goto u4CSZ; else goto c4CSS;
       u4CSZ: // global
           call _c4CSN(R1) args: 0, res: 0, upd: 0;
       c4CSS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CSI_info" {
     block_c4CSI_info:
         const _c4CSI;
         const 66;
         const 30;
 },
 _c4CSN() //  [R1]
         { []
         }
     {offset
       c4CSN: // global
           I64[I64[Sp + 8] + (I64[Sp + 16] << 3)] = I64[R1 + 7];
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CSN_info" {
     block_c4CSN_info:
         const _c4CSN;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.671033476 UTC

[section ""data" . GHC.Storable.writeIntOffPtr_closure" {
     GHC.Storable.writeIntOffPtr_closure:
         const GHC.Storable.writeIntOffPtr_info;
 },
 GHC.Storable.writeIntOffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CTt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeIntOffPtr1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeIntOffPtr_info" {
     GHC.Storable.writeIntOffPtr_info:
         const GHC.Storable.writeIntOffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.675228984 UTC

[section ""data" . GHC.Storable.writeWordOffPtr1_closure" {
     GHC.Storable.writeWordOffPtr1_closure:
         const GHC.Storable.writeWordOffPtr1_info;
 },
 GHC.Storable.writeWordOffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CTH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4CTQ; else goto c4CTR;
       c4CTQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeWordOffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CTR: // global
           I64[Sp - 24] = block_c4CTE_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4CU0; else goto c4CTF;
       u4CU0: // global
           call _c4CTE(R1) args: 0, res: 0, upd: 0;
       c4CTF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWordOffPtr1_info" {
     GHC.Storable.writeWordOffPtr1_info:
         const GHC.Storable.writeWordOffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4CTE() //  [R1]
         { []
         }
     {offset
       c4CTE: // global
           I64[Sp] = block_c4CTK_info;
           _s4CBb::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CBb::I64;
           if (R1 & 7 != 0) goto u4CTZ; else goto c4CTL;
       u4CTZ: // global
           call _c4CTK(R1) args: 0, res: 0, upd: 0;
       c4CTL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CTE_info" {
     block_c4CTE_info:
         const _c4CTE;
         const 2;
         const 30;
 },
 _c4CTK() //  [R1]
         { []
         }
     {offset
       c4CTK: // global
           I64[Sp] = block_c4CTP_info;
           _s4CBd::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4CBd::I64;
           if (R1 & 7 != 0) goto u4CU1; else goto c4CTU;
       u4CU1: // global
           call _c4CTP(R1) args: 0, res: 0, upd: 0;
       c4CTU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CTK_info" {
     block_c4CTK_info:
         const _c4CTK;
         const 66;
         const 30;
 },
 _c4CTP() //  [R1]
         { []
         }
     {offset
       c4CTP: // global
           I64[I64[Sp + 8] + (I64[Sp + 16] << 3)] = I64[R1 + 7];
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CTP_info" {
     block_c4CTP_info:
         const _c4CTP;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.683531563 UTC

[section ""data" . GHC.Storable.writeWordOffPtr_closure" {
     GHC.Storable.writeWordOffPtr_closure:
         const GHC.Storable.writeWordOffPtr_info;
 },
 GHC.Storable.writeWordOffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CUv: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeWordOffPtr1_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWordOffPtr_info" {
     GHC.Storable.writeWordOffPtr_info:
         const GHC.Storable.writeWordOffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.688517418 UTC

[section ""data" . GHC.Storable.writePtrOffPtr1_closure" {
     GHC.Storable.writePtrOffPtr1_closure:
         const GHC.Storable.writePtrOffPtr1_info;
 },
 GHC.Storable.writePtrOffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CUJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4CUS; else goto c4CUT;
       c4CUS: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writePtrOffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CUT: // global
           I64[Sp - 24] = block_c4CUG_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4CV2; else goto c4CUH;
       u4CV2: // global
           call _c4CUG(R1) args: 0, res: 0, upd: 0;
       c4CUH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writePtrOffPtr1_info" {
     GHC.Storable.writePtrOffPtr1_info:
         const GHC.Storable.writePtrOffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4CUG() //  [R1]
         { []
         }
     {offset
       c4CUG: // global
           I64[Sp] = block_c4CUM_info;
           _s4CBm::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CBm::I64;
           if (R1 & 7 != 0) goto u4CV1; else goto c4CUN;
       u4CV1: // global
           call _c4CUM(R1) args: 0, res: 0, upd: 0;
       c4CUN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CUG_info" {
     block_c4CUG_info:
         const _c4CUG;
         const 2;
         const 30;
 },
 _c4CUM() //  [R1]
         { []
         }
     {offset
       c4CUM: // global
           I64[Sp] = block_c4CUR_info;
           _s4CBo::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4CBo::I64;
           if (R1 & 7 != 0) goto u4CV3; else goto c4CUW;
       u4CV3: // global
           call _c4CUR(R1) args: 0, res: 0, upd: 0;
       c4CUW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CUM_info" {
     block_c4CUM_info:
         const _c4CUM;
         const 66;
         const 30;
 },
 _c4CUR() //  [R1]
         { []
         }
     {offset
       c4CUR: // global
           I64[I64[Sp + 8] + (I64[Sp + 16] << 3)] = I64[R1 + 7];
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CUR_info" {
     block_c4CUR_info:
         const _c4CUR;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.696937813 UTC

[section ""data" . GHC.Storable.writePtrOffPtr_closure" {
     GHC.Storable.writePtrOffPtr_closure:
         const GHC.Storable.writePtrOffPtr_info;
 },
 GHC.Storable.writePtrOffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CVx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writePtrOffPtr1_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writePtrOffPtr_info" {
     GHC.Storable.writePtrOffPtr_info:
         const GHC.Storable.writePtrOffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.701783653 UTC

[section ""data" . GHC.Storable.writeFunPtrOffPtr1_closure" {
     GHC.Storable.writeFunPtrOffPtr1_closure:
         const GHC.Storable.writeFunPtrOffPtr1_info;
 },
 GHC.Storable.writeFunPtrOffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CVL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4CVU; else goto c4CVV;
       c4CVU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeFunPtrOffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CVV: // global
           I64[Sp - 24] = block_c4CVI_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4CW4; else goto c4CVJ;
       u4CW4: // global
           call _c4CVI(R1) args: 0, res: 0, upd: 0;
       c4CVJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeFunPtrOffPtr1_info" {
     GHC.Storable.writeFunPtrOffPtr1_info:
         const GHC.Storable.writeFunPtrOffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4CVI() //  [R1]
         { []
         }
     {offset
       c4CVI: // global
           I64[Sp] = block_c4CVO_info;
           _s4CBx::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CBx::I64;
           if (R1 & 7 != 0) goto u4CW3; else goto c4CVP;
       u4CW3: // global
           call _c4CVO(R1) args: 0, res: 0, upd: 0;
       c4CVP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CVI_info" {
     block_c4CVI_info:
         const _c4CVI;
         const 2;
         const 30;
 },
 _c4CVO() //  [R1]
         { []
         }
     {offset
       c4CVO: // global
           I64[Sp] = block_c4CVT_info;
           _s4CBz::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4CBz::I64;
           if (R1 & 7 != 0) goto u4CW5; else goto c4CVY;
       u4CW5: // global
           call _c4CVT(R1) args: 0, res: 0, upd: 0;
       c4CVY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CVO_info" {
     block_c4CVO_info:
         const _c4CVO;
         const 66;
         const 30;
 },
 _c4CVT() //  [R1]
         { []
         }
     {offset
       c4CVT: // global
           I64[I64[Sp + 8] + (I64[Sp + 16] << 3)] = I64[R1 + 7];
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CVT_info" {
     block_c4CVT_info:
         const _c4CVT;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.710403728 UTC

[section ""data" . GHC.Storable.writeFunPtrOffPtr_closure" {
     GHC.Storable.writeFunPtrOffPtr_closure:
         const GHC.Storable.writeFunPtrOffPtr_info;
 },
 GHC.Storable.writeFunPtrOffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CWz: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeFunPtrOffPtr1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeFunPtrOffPtr_info" {
     GHC.Storable.writeFunPtrOffPtr_info:
         const GHC.Storable.writeFunPtrOffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.714753943 UTC

[section ""data" . GHC.Storable.writeFloatOffPtr1_closure" {
     GHC.Storable.writeFloatOffPtr1_closure:
         const GHC.Storable.writeFloatOffPtr1_info;
 },
 GHC.Storable.writeFloatOffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CWN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4CWW; else goto c4CWX;
       c4CWW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeFloatOffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CWX: // global
           I64[Sp - 24] = block_c4CWK_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4CX6; else goto c4CWL;
       u4CX6: // global
           call _c4CWK(R1) args: 0, res: 0, upd: 0;
       c4CWL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeFloatOffPtr1_info" {
     GHC.Storable.writeFloatOffPtr1_info:
         const GHC.Storable.writeFloatOffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4CWK() //  [R1]
         { []
         }
     {offset
       c4CWK: // global
           I64[Sp] = block_c4CWQ_info;
           _s4CBI::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CBI::I64;
           if (R1 & 7 != 0) goto u4CX5; else goto c4CWR;
       u4CX5: // global
           call _c4CWQ(R1) args: 0, res: 0, upd: 0;
       c4CWR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CWK_info" {
     block_c4CWK_info:
         const _c4CWK;
         const 2;
         const 30;
 },
 _c4CWQ() //  [R1]
         { []
         }
     {offset
       c4CWQ: // global
           I64[Sp] = block_c4CWV_info;
           _s4CBK::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4CBK::I64;
           if (R1 & 7 != 0) goto u4CX7; else goto c4CX0;
       u4CX7: // global
           call _c4CWV(R1) args: 0, res: 0, upd: 0;
       c4CX0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CWQ_info" {
     block_c4CWQ_info:
         const _c4CWQ;
         const 66;
         const 30;
 },
 _c4CWV() //  [R1]
         { []
         }
     {offset
       c4CWV: // global
           F32[I64[Sp + 8] + (I64[Sp + 16] << 2)] = F32[R1 + 7];
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CWV_info" {
     block_c4CWV_info:
         const _c4CWV;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.72312411 UTC

[section ""data" . GHC.Storable.writeFloatOffPtr_closure" {
     GHC.Storable.writeFloatOffPtr_closure:
         const GHC.Storable.writeFloatOffPtr_info;
 },
 GHC.Storable.writeFloatOffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CXB: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeFloatOffPtr1_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeFloatOffPtr_info" {
     GHC.Storable.writeFloatOffPtr_info:
         const GHC.Storable.writeFloatOffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.727487515 UTC

[section ""data" . GHC.Storable.writeDoubleOffPtr1_closure" {
     GHC.Storable.writeDoubleOffPtr1_closure:
         const GHC.Storable.writeDoubleOffPtr1_info;
 },
 GHC.Storable.writeDoubleOffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CXP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4CXY; else goto c4CXZ;
       c4CXY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeDoubleOffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CXZ: // global
           I64[Sp - 24] = block_c4CXM_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4CY8; else goto c4CXN;
       u4CY8: // global
           call _c4CXM(R1) args: 0, res: 0, upd: 0;
       c4CXN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeDoubleOffPtr1_info" {
     GHC.Storable.writeDoubleOffPtr1_info:
         const GHC.Storable.writeDoubleOffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4CXM() //  [R1]
         { []
         }
     {offset
       c4CXM: // global
           I64[Sp] = block_c4CXS_info;
           _s4CBT::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CBT::I64;
           if (R1 & 7 != 0) goto u4CY7; else goto c4CXT;
       u4CY7: // global
           call _c4CXS(R1) args: 0, res: 0, upd: 0;
       c4CXT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CXM_info" {
     block_c4CXM_info:
         const _c4CXM;
         const 2;
         const 30;
 },
 _c4CXS() //  [R1]
         { []
         }
     {offset
       c4CXS: // global
           I64[Sp] = block_c4CXX_info;
           _s4CBV::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4CBV::I64;
           if (R1 & 7 != 0) goto u4CY9; else goto c4CY2;
       u4CY9: // global
           call _c4CXX(R1) args: 0, res: 0, upd: 0;
       c4CY2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CXS_info" {
     block_c4CXS_info:
         const _c4CXS;
         const 66;
         const 30;
 },
 _c4CXX() //  [R1]
         { []
         }
     {offset
       c4CXX: // global
           F64[I64[Sp + 8] + (I64[Sp + 16] << 3)] = F64[R1 + 7];
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CXX_info" {
     block_c4CXX_info:
         const _c4CXX;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.737042263 UTC

[section ""data" . GHC.Storable.writeDoubleOffPtr_closure" {
     GHC.Storable.writeDoubleOffPtr_closure:
         const GHC.Storable.writeDoubleOffPtr_info;
 },
 GHC.Storable.writeDoubleOffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CYD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeDoubleOffPtr1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeDoubleOffPtr_info" {
     GHC.Storable.writeDoubleOffPtr_info:
         const GHC.Storable.writeDoubleOffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.742067704 UTC

[section ""data" . GHC.Storable.writeStablePtrOffPtr1_closure" {
     GHC.Storable.writeStablePtrOffPtr1_closure:
         const GHC.Storable.writeStablePtrOffPtr1_info;
 },
 GHC.Storable.writeStablePtrOffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CYR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4CZ0; else goto c4CZ1;
       c4CZ0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeStablePtrOffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4CZ1: // global
           I64[Sp - 24] = block_c4CYO_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4CZa; else goto c4CYP;
       u4CZa: // global
           call _c4CYO(R1) args: 0, res: 0, upd: 0;
       c4CYP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeStablePtrOffPtr1_info" {
     GHC.Storable.writeStablePtrOffPtr1_info:
         const GHC.Storable.writeStablePtrOffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4CYO() //  [R1]
         { []
         }
     {offset
       c4CYO: // global
           I64[Sp] = block_c4CYU_info;
           _s4CC4::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CC4::I64;
           if (R1 & 7 != 0) goto u4CZ9; else goto c4CYV;
       u4CZ9: // global
           call _c4CYU(R1) args: 0, res: 0, upd: 0;
       c4CYV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CYO_info" {
     block_c4CYO_info:
         const _c4CYO;
         const 2;
         const 30;
 },
 _c4CYU() //  [R1]
         { []
         }
     {offset
       c4CYU: // global
           I64[Sp] = block_c4CYZ_info;
           _s4CC6::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4CC6::I64;
           if (R1 & 7 != 0) goto u4CZb; else goto c4CZ4;
       u4CZb: // global
           call _c4CYZ(R1) args: 0, res: 0, upd: 0;
       c4CZ4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CYU_info" {
     block_c4CYU_info:
         const _c4CYU;
         const 66;
         const 30;
 },
 _c4CYZ() //  [R1]
         { []
         }
     {offset
       c4CYZ: // global
           I64[I64[Sp + 8] + (I64[Sp + 16] << 3)] = I64[R1 + 7];
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CYZ_info" {
     block_c4CYZ_info:
         const _c4CYZ;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.75030767 UTC

[section ""data" . GHC.Storable.writeStablePtrOffPtr_closure" {
     GHC.Storable.writeStablePtrOffPtr_closure:
         const GHC.Storable.writeStablePtrOffPtr_info;
 },
 GHC.Storable.writeStablePtrOffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CZF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeStablePtrOffPtr1_entry(R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeStablePtrOffPtr_info" {
     GHC.Storable.writeStablePtrOffPtr_info:
         const GHC.Storable.writeStablePtrOffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.754788217 UTC

[section ""data" . GHC.Storable.writeInt8OffPtr1_closure" {
     GHC.Storable.writeInt8OffPtr1_closure:
         const GHC.Storable.writeInt8OffPtr1_info;
 },
 GHC.Storable.writeInt8OffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4CZT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4D02; else goto c4D03;
       c4D02: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeInt8OffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4D03: // global
           I64[Sp - 24] = block_c4CZQ_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4D0c; else goto c4CZR;
       u4D0c: // global
           call _c4CZQ(R1) args: 0, res: 0, upd: 0;
       c4CZR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeInt8OffPtr1_info" {
     GHC.Storable.writeInt8OffPtr1_info:
         const GHC.Storable.writeInt8OffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4CZQ() //  [R1]
         { []
         }
     {offset
       c4CZQ: // global
           I64[Sp] = block_c4CZW_info;
           _s4CCf::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CCf::I64;
           if (R1 & 7 != 0) goto u4D0b; else goto c4CZX;
       u4D0b: // global
           call _c4CZW(R1) args: 0, res: 0, upd: 0;
       c4CZX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CZQ_info" {
     block_c4CZQ_info:
         const _c4CZQ;
         const 2;
         const 30;
 },
 _c4CZW() //  [R1]
         { []
         }
     {offset
       c4CZW: // global
           I64[Sp] = block_c4D01_info;
           _s4CCh::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4CCh::I64;
           if (R1 & 7 != 0) goto u4D0d; else goto c4D06;
       u4D0d: // global
           call _c4D01(R1) args: 0, res: 0, upd: 0;
       c4D06: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4CZW_info" {
     block_c4CZW_info:
         const _c4CZW;
         const 66;
         const 30;
 },
 _c4D01() //  [R1]
         { []
         }
     {offset
       c4D01: // global
           I8[I64[Sp + 8] + I64[Sp + 16]] = %MO_UU_Conv_W64_W8(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4D01_info" {
     block_c4D01_info:
         const _c4D01;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.763461174 UTC

[section ""data" . GHC.Storable.writeInt8OffPtr_closure" {
     GHC.Storable.writeInt8OffPtr_closure:
         const GHC.Storable.writeInt8OffPtr_info;
 },
 GHC.Storable.writeInt8OffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4D0H: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeInt8OffPtr1_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeInt8OffPtr_info" {
     GHC.Storable.writeInt8OffPtr_info:
         const GHC.Storable.writeInt8OffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.767846417 UTC

[section ""data" . GHC.Storable.writeWord8OffPtr1_closure" {
     GHC.Storable.writeWord8OffPtr1_closure:
         const GHC.Storable.writeWord8OffPtr1_info;
 },
 GHC.Storable.writeWord8OffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4D0V: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4D14; else goto c4D15;
       c4D14: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeWord8OffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4D15: // global
           I64[Sp - 24] = block_c4D0S_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4D1e; else goto c4D0T;
       u4D1e: // global
           call _c4D0S(R1) args: 0, res: 0, upd: 0;
       c4D0T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWord8OffPtr1_info" {
     GHC.Storable.writeWord8OffPtr1_info:
         const GHC.Storable.writeWord8OffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4D0S() //  [R1]
         { []
         }
     {offset
       c4D0S: // global
           I64[Sp] = block_c4D0Y_info;
           _s4CCq::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CCq::I64;
           if (R1 & 7 != 0) goto u4D1d; else goto c4D0Z;
       u4D1d: // global
           call _c4D0Y(R1) args: 0, res: 0, upd: 0;
       c4D0Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4D0S_info" {
     block_c4D0S_info:
         const _c4D0S;
         const 2;
         const 30;
 },
 _c4D0Y() //  [R1]
         { []
         }
     {offset
       c4D0Y: // global
           I64[Sp] = block_c4D13_info;
           _s4CCs::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4CCs::I64;
           if (R1 & 7 != 0) goto u4D1f; else goto c4D18;
       u4D1f: // global
           call _c4D13(R1) args: 0, res: 0, upd: 0;
       c4D18: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4D0Y_info" {
     block_c4D0Y_info:
         const _c4D0Y;
         const 66;
         const 30;
 },
 _c4D13() //  [R1]
         { []
         }
     {offset
       c4D13: // global
           I8[I64[Sp + 8] + I64[Sp + 16]] = %MO_UU_Conv_W64_W8(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4D13_info" {
     block_c4D13_info:
         const _c4D13;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.776649253 UTC

[section ""data" . GHC.Storable.writeWord8OffPtr_closure" {
     GHC.Storable.writeWord8OffPtr_closure:
         const GHC.Storable.writeWord8OffPtr_info;
 },
 GHC.Storable.writeWord8OffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4D1J: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeWord8OffPtr1_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWord8OffPtr_info" {
     GHC.Storable.writeWord8OffPtr_info:
         const GHC.Storable.writeWord8OffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.781172211 UTC

[section ""data" . GHC.Storable.writeInt16OffPtr1_closure" {
     GHC.Storable.writeInt16OffPtr1_closure:
         const GHC.Storable.writeInt16OffPtr1_info;
 },
 GHC.Storable.writeInt16OffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4D1X: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4D26; else goto c4D27;
       c4D26: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeInt16OffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4D27: // global
           I64[Sp - 24] = block_c4D1U_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4D2g; else goto c4D1V;
       u4D2g: // global
           call _c4D1U(R1) args: 0, res: 0, upd: 0;
       c4D1V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeInt16OffPtr1_info" {
     GHC.Storable.writeInt16OffPtr1_info:
         const GHC.Storable.writeInt16OffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4D1U() //  [R1]
         { []
         }
     {offset
       c4D1U: // global
           I64[Sp] = block_c4D20_info;
           _s4CCB::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CCB::I64;
           if (R1 & 7 != 0) goto u4D2f; else goto c4D21;
       u4D2f: // global
           call _c4D20(R1) args: 0, res: 0, upd: 0;
       c4D21: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4D1U_info" {
     block_c4D1U_info:
         const _c4D1U;
         const 2;
         const 30;
 },
 _c4D20() //  [R1]
         { []
         }
     {offset
       c4D20: // global
           I64[Sp] = block_c4D25_info;
           _s4CCD::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4CCD::I64;
           if (R1 & 7 != 0) goto u4D2h; else goto c4D2a;
       u4D2h: // global
           call _c4D25(R1) args: 0, res: 0, upd: 0;
       c4D2a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4D20_info" {
     block_c4D20_info:
         const _c4D20;
         const 66;
         const 30;
 },
 _c4D25() //  [R1]
         { []
         }
     {offset
       c4D25: // global
           I16[I64[Sp + 8] + (I64[Sp + 16] << 1)] = %MO_UU_Conv_W64_W16(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4D25_info" {
     block_c4D25_info:
         const _c4D25;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.790183896 UTC

[section ""data" . GHC.Storable.writeInt16OffPtr_closure" {
     GHC.Storable.writeInt16OffPtr_closure:
         const GHC.Storable.writeInt16OffPtr_info;
 },
 GHC.Storable.writeInt16OffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4D2L: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeInt16OffPtr1_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeInt16OffPtr_info" {
     GHC.Storable.writeInt16OffPtr_info:
         const GHC.Storable.writeInt16OffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.794965485 UTC

[section ""data" . GHC.Storable.writeWord16OffPtr1_closure" {
     GHC.Storable.writeWord16OffPtr1_closure:
         const GHC.Storable.writeWord16OffPtr1_info;
 },
 GHC.Storable.writeWord16OffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4D2Z: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4D38; else goto c4D39;
       c4D38: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeWord16OffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4D39: // global
           I64[Sp - 24] = block_c4D2W_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4D3i; else goto c4D2X;
       u4D3i: // global
           call _c4D2W(R1) args: 0, res: 0, upd: 0;
       c4D2X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWord16OffPtr1_info" {
     GHC.Storable.writeWord16OffPtr1_info:
         const GHC.Storable.writeWord16OffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4D2W() //  [R1]
         { []
         }
     {offset
       c4D2W: // global
           I64[Sp] = block_c4D32_info;
           _s4CCM::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CCM::I64;
           if (R1 & 7 != 0) goto u4D3h; else goto c4D33;
       u4D3h: // global
           call _c4D32(R1) args: 0, res: 0, upd: 0;
       c4D33: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4D2W_info" {
     block_c4D2W_info:
         const _c4D2W;
         const 2;
         const 30;
 },
 _c4D32() //  [R1]
         { []
         }
     {offset
       c4D32: // global
           I64[Sp] = block_c4D37_info;
           _s4CCO::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4CCO::I64;
           if (R1 & 7 != 0) goto u4D3j; else goto c4D3c;
       u4D3j: // global
           call _c4D37(R1) args: 0, res: 0, upd: 0;
       c4D3c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4D32_info" {
     block_c4D32_info:
         const _c4D32;
         const 66;
         const 30;
 },
 _c4D37() //  [R1]
         { []
         }
     {offset
       c4D37: // global
           I16[I64[Sp + 8] + (I64[Sp + 16] << 1)] = %MO_UU_Conv_W64_W16(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4D37_info" {
     block_c4D37_info:
         const _c4D37;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.803266061 UTC

[section ""data" . GHC.Storable.writeWord16OffPtr_closure" {
     GHC.Storable.writeWord16OffPtr_closure:
         const GHC.Storable.writeWord16OffPtr_info;
 },
 GHC.Storable.writeWord16OffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4D3N: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeWord16OffPtr1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWord16OffPtr_info" {
     GHC.Storable.writeWord16OffPtr_info:
         const GHC.Storable.writeWord16OffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.808172716 UTC

[section ""data" . GHC.Storable.writeInt32OffPtr1_closure" {
     GHC.Storable.writeInt32OffPtr1_closure:
         const GHC.Storable.writeInt32OffPtr1_info;
 },
 GHC.Storable.writeInt32OffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4D41: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4D4a; else goto c4D4b;
       c4D4a: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeInt32OffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4D4b: // global
           I64[Sp - 24] = block_c4D3Y_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4D4k; else goto c4D3Z;
       u4D4k: // global
           call _c4D3Y(R1) args: 0, res: 0, upd: 0;
       c4D3Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeInt32OffPtr1_info" {
     GHC.Storable.writeInt32OffPtr1_info:
         const GHC.Storable.writeInt32OffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4D3Y() //  [R1]
         { []
         }
     {offset
       c4D3Y: // global
           I64[Sp] = block_c4D44_info;
           _s4CCX::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CCX::I64;
           if (R1 & 7 != 0) goto u4D4j; else goto c4D45;
       u4D4j: // global
           call _c4D44(R1) args: 0, res: 0, upd: 0;
       c4D45: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4D3Y_info" {
     block_c4D3Y_info:
         const _c4D3Y;
         const 2;
         const 30;
 },
 _c4D44() //  [R1]
         { []
         }
     {offset
       c4D44: // global
           I64[Sp] = block_c4D49_info;
           _s4CCZ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4CCZ::I64;
           if (R1 & 7 != 0) goto u4D4l; else goto c4D4e;
       u4D4l: // global
           call _c4D49(R1) args: 0, res: 0, upd: 0;
       c4D4e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4D44_info" {
     block_c4D44_info:
         const _c4D44;
         const 66;
         const 30;
 },
 _c4D49() //  [R1]
         { []
         }
     {offset
       c4D49: // global
           I32[I64[Sp + 8] + (I64[Sp + 16] << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4D49_info" {
     block_c4D49_info:
         const _c4D49;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.816768676 UTC

[section ""data" . GHC.Storable.writeInt32OffPtr_closure" {
     GHC.Storable.writeInt32OffPtr_closure:
         const GHC.Storable.writeInt32OffPtr_info;
 },
 GHC.Storable.writeInt32OffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4D4P: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeInt32OffPtr1_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeInt32OffPtr_info" {
     GHC.Storable.writeInt32OffPtr_info:
         const GHC.Storable.writeInt32OffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.821030579 UTC

[section ""data" . GHC.Storable.writeWord32OffPtr1_closure" {
     GHC.Storable.writeWord32OffPtr1_closure:
         const GHC.Storable.writeWord32OffPtr1_info;
 },
 GHC.Storable.writeWord32OffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4D53: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4D5c; else goto c4D5d;
       c4D5c: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeWord32OffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4D5d: // global
           I64[Sp - 24] = block_c4D50_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4D5m; else goto c4D51;
       u4D5m: // global
           call _c4D50(R1) args: 0, res: 0, upd: 0;
       c4D51: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWord32OffPtr1_info" {
     GHC.Storable.writeWord32OffPtr1_info:
         const GHC.Storable.writeWord32OffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4D50() //  [R1]
         { []
         }
     {offset
       c4D50: // global
           I64[Sp] = block_c4D56_info;
           _s4CD8::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CD8::I64;
           if (R1 & 7 != 0) goto u4D5l; else goto c4D57;
       u4D5l: // global
           call _c4D56(R1) args: 0, res: 0, upd: 0;
       c4D57: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4D50_info" {
     block_c4D50_info:
         const _c4D50;
         const 2;
         const 30;
 },
 _c4D56() //  [R1]
         { []
         }
     {offset
       c4D56: // global
           I64[Sp] = block_c4D5b_info;
           _s4CDa::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4CDa::I64;
           if (R1 & 7 != 0) goto u4D5n; else goto c4D5g;
       u4D5n: // global
           call _c4D5b(R1) args: 0, res: 0, upd: 0;
       c4D5g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4D56_info" {
     block_c4D56_info:
         const _c4D56;
         const 66;
         const 30;
 },
 _c4D5b() //  [R1]
         { []
         }
     {offset
       c4D5b: // global
           I32[I64[Sp + 8] + (I64[Sp + 16] << 2)] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4D5b_info" {
     block_c4D5b_info:
         const _c4D5b;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.82983057 UTC

[section ""data" . GHC.Storable.writeWord32OffPtr_closure" {
     GHC.Storable.writeWord32OffPtr_closure:
         const GHC.Storable.writeWord32OffPtr_info;
 },
 GHC.Storable.writeWord32OffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4D5R: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeWord32OffPtr1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWord32OffPtr_info" {
     GHC.Storable.writeWord32OffPtr_info:
         const GHC.Storable.writeWord32OffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.83417168 UTC

[section ""data" . GHC.Storable.writeInt64OffPtr1_closure" {
     GHC.Storable.writeInt64OffPtr1_closure:
         const GHC.Storable.writeInt64OffPtr1_info;
 },
 GHC.Storable.writeInt64OffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4D65: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4D6e; else goto c4D6f;
       c4D6e: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeInt64OffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4D6f: // global
           I64[Sp - 24] = block_c4D62_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4D6o; else goto c4D63;
       u4D6o: // global
           call _c4D62(R1) args: 0, res: 0, upd: 0;
       c4D63: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeInt64OffPtr1_info" {
     GHC.Storable.writeInt64OffPtr1_info:
         const GHC.Storable.writeInt64OffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4D62() //  [R1]
         { []
         }
     {offset
       c4D62: // global
           I64[Sp] = block_c4D68_info;
           _s4CDj::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CDj::I64;
           if (R1 & 7 != 0) goto u4D6n; else goto c4D69;
       u4D6n: // global
           call _c4D68(R1) args: 0, res: 0, upd: 0;
       c4D69: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4D62_info" {
     block_c4D62_info:
         const _c4D62;
         const 2;
         const 30;
 },
 _c4D68() //  [R1]
         { []
         }
     {offset
       c4D68: // global
           I64[Sp] = block_c4D6d_info;
           _s4CDl::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4CDl::I64;
           if (R1 & 7 != 0) goto u4D6p; else goto c4D6i;
       u4D6p: // global
           call _c4D6d(R1) args: 0, res: 0, upd: 0;
       c4D6i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4D68_info" {
     block_c4D68_info:
         const _c4D68;
         const 66;
         const 30;
 },
 _c4D6d() //  [R1]
         { []
         }
     {offset
       c4D6d: // global
           I64[I64[Sp + 8] + (I64[Sp + 16] << 3)] = I64[R1 + 7];
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4D6d_info" {
     block_c4D6d_info:
         const _c4D6d;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.843274877 UTC

[section ""data" . GHC.Storable.writeInt64OffPtr_closure" {
     GHC.Storable.writeInt64OffPtr_closure:
         const GHC.Storable.writeInt64OffPtr_info;
 },
 GHC.Storable.writeInt64OffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4D6T: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeInt64OffPtr1_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeInt64OffPtr_info" {
     GHC.Storable.writeInt64OffPtr_info:
         const GHC.Storable.writeInt64OffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.847481353 UTC

[section ""data" . GHC.Storable.writeWord64OffPtr1_closure" {
     GHC.Storable.writeWord64OffPtr1_closure:
         const GHC.Storable.writeWord64OffPtr1_info;
 },
 GHC.Storable.writeWord64OffPtr1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4D77: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c4D7g; else goto c4D7h;
       c4D7g: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Storable.writeWord64OffPtr1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c4D7h: // global
           I64[Sp - 24] = block_c4D74_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u4D7q; else goto c4D75;
       u4D7q: // global
           call _c4D74(R1) args: 0, res: 0, upd: 0;
       c4D75: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWord64OffPtr1_info" {
     GHC.Storable.writeWord64OffPtr1_info:
         const GHC.Storable.writeWord64OffPtr1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c4D74() //  [R1]
         { []
         }
     {offset
       c4D74: // global
           I64[Sp] = block_c4D7a_info;
           _s4CDu::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s4CDu::I64;
           if (R1 & 7 != 0) goto u4D7p; else goto c4D7b;
       u4D7p: // global
           call _c4D7a(R1) args: 0, res: 0, upd: 0;
       c4D7b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4D74_info" {
     block_c4D74_info:
         const _c4D74;
         const 2;
         const 30;
 },
 _c4D7a() //  [R1]
         { []
         }
     {offset
       c4D7a: // global
           I64[Sp] = block_c4D7f_info;
           _s4CDw::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s4CDw::I64;
           if (R1 & 7 != 0) goto u4D7r; else goto c4D7k;
       u4D7r: // global
           call _c4D7f(R1) args: 0, res: 0, upd: 0;
       c4D7k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c4D7a_info" {
     block_c4D7a_info:
         const _c4D7a;
         const 66;
         const 30;
 },
 _c4D7f() //  [R1]
         { []
         }
     {offset
       c4D7f: // global
           I64[I64[Sp + 8] + (I64[Sp + 16] << 3)] = I64[R1 + 7];
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c4D7f_info" {
     block_c4D7f_info:
         const _c4D7f;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.856071689 UTC

[section ""data" . GHC.Storable.writeWord64OffPtr_closure" {
     GHC.Storable.writeWord64OffPtr_closure:
         const GHC.Storable.writeWord64OffPtr_info;
 },
 GHC.Storable.writeWord64OffPtr_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c4D7V: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Storable.writeWord64OffPtr1_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Storable.writeWord64OffPtr_info" {
     GHC.Storable.writeWord64OffPtr_info:
         const GHC.Storable.writeWord64OffPtr_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.859561878 UTC

[section ""cstring" . GHC.Storable.$trModule4_bytes" {
     GHC.Storable.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.861327091 UTC

[section ""data" . GHC.Storable.$trModule3_closure" {
     GHC.Storable.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Storable.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.862955375 UTC

[section ""cstring" . GHC.Storable.$trModule2_bytes" {
     GHC.Storable.$trModule2_bytes:
         I8[] [71,72,67,46,83,116,111,114,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.864544252 UTC

[section ""data" . GHC.Storable.$trModule1_closure" {
     GHC.Storable.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Storable.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.866715922 UTC

[section ""data" . GHC.Storable.$trModule_closure" {
     GHC.Storable.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Storable.$trModule3_closure+1;
         const GHC.Storable.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:59:29.868350932 UTC

[section ""relreadonly" . S4D87_srt" { S4D87_srt:
 }]

