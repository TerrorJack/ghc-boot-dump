
==================== Pre unarise: ====================
2018-03-16 15:57:09.480487659 UTC

GHC.Word.$fEnumWord8_$cfromEnum :: GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uFT]
        case ds_s2uFT of {
          GHC.Word.W8# x#_s2uFV [Occ=Once] ->
              case word2Int# [x#_s2uFV] of sat_s2uFW {
                __DEFAULT -> GHC.Types.I# [sat_s2uFW];
              };
        };

GHC.Word.$fEnumWord16_$cfromEnum
  :: GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uFX]
        case ds_s2uFX of {
          GHC.Word.W16# x#_s2uFZ [Occ=Once] ->
              case word2Int# [x#_s2uFZ] of sat_s2uG0 {
                __DEFAULT -> GHC.Types.I# [sat_s2uG0];
              };
        };

GHC.Word.$fEnumWord32_$cfromEnum
  :: GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uG1]
        case ds_s2uG1 of {
          GHC.Word.W32# x#_s2uG3 [Occ=Once] ->
              case word2Int# [x#_s2uG3] of sat_s2uG4 {
                __DEFAULT -> GHC.Types.I# [sat_s2uG4];
              };
        };

GHC.Word.$fNumWord64_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Word.Word64
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s2uG5]
        case GHC.Integer.Type.integerToWord i_s2uG5 of wild_s2uG6 {
          __DEFAULT -> GHC.Word.W64# [wild_s2uG6];
        };

GHC.Word.$fNumWord64_$cabs :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_s2uG7] x_s2uG7;

GHC.Word.$fNumWord64_$cnegate :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uG8]
        case ds_s2uG8 of {
          GHC.Word.W64# x#_s2uGa [Occ=Once] ->
              case word2Int# [x#_s2uGa] of sat_s2uGb {
                __DEFAULT ->
                    case negateInt# [sat_s2uGb] of sat_s2uGc {
                      __DEFAULT ->
                          case int2Word# [sat_s2uGc] of sat_s2uGd {
                            __DEFAULT -> GHC.Word.W64# [sat_s2uGd];
                          };
                    };
              };
        };

GHC.Word.$fNumWord64_$c*
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uGe ds1_s2uGf]
        case ds_s2uGe of {
          GHC.Word.W64# x#_s2uGh [Occ=Once] ->
              case ds1_s2uGf of {
                GHC.Word.W64# y#_s2uGj [Occ=Once] ->
                    case timesWord# [x#_s2uGh y#_s2uGj] of sat_s2uGk {
                      __DEFAULT -> GHC.Word.W64# [sat_s2uGk];
                    };
              };
        };

GHC.Word.$fNumWord64_$c-
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uGl ds1_s2uGm]
        case ds_s2uGl of {
          GHC.Word.W64# x#_s2uGo [Occ=Once] ->
              case ds1_s2uGm of {
                GHC.Word.W64# y#_s2uGq [Occ=Once] ->
                    case minusWord# [x#_s2uGo y#_s2uGq] of sat_s2uGr {
                      __DEFAULT -> GHC.Word.W64# [sat_s2uGr];
                    };
              };
        };

GHC.Word.$fNumWord64_$c+
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uGs ds1_s2uGt]
        case ds_s2uGs of {
          GHC.Word.W64# x#_s2uGv [Occ=Once] ->
              case ds1_s2uGt of {
                GHC.Word.W64# y#_s2uGx [Occ=Once] ->
                    case plusWord# [x#_s2uGv y#_s2uGx] of sat_s2uGy {
                      __DEFAULT -> GHC.Word.W64# [sat_s2uGy];
                    };
              };
        };

GHC.Word.$tcWord6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word64"#;

lvl_r2uFF :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Word.$tcWord6;

GHC.Word.$fIntegralWord64_$ctoInteger
  :: GHC.Word.Word64 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uGz]
        case ds_s2uGz of {
          GHC.Word.W64# x#_s2uGB ->
              case word2Int# [x#_s2uGB] of i#_s2uGC [Dmd=<S,U>] {
                __DEFAULT ->
                    case >=# [i#_s2uGC 0#] of {
                      __DEFAULT -> GHC.Integer.Type.wordToInteger x#_s2uGB;
                      1# -> GHC.Integer.Type.smallInteger i#_s2uGC;
                    };
              };
        };

GHC.Word.$fShowWord3 :: GHC.Word.Word64 -> GHC.Show.ShowS
[GblId, Arity=1, Str=<L,1*U(U)>, Unf=OtherCon []] =
    [] \r [x_s2uGE]
        let {
          w1_s2uGF [Occ=OnceL] :: GHC.Integer.Type.Integer
          [LclId] =
              [x_s2uGE] \u []
                  case x_s2uGE of {
                    GHC.Word.W64# x#_s2uGH ->
                        case word2Int# [x#_s2uGH] of i#_s2uGI [Dmd=<S,U>] {
                          __DEFAULT ->
                              case >=# [i#_s2uGI 0#] of {
                                __DEFAULT -> GHC.Integer.Type.wordToInteger x#_s2uGH;
                                1# -> GHC.Integer.Type.smallInteger i#_s2uGI;
                              };
                        };
                  }; } in
        let {
          sat_s2uGO [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
          [LclId] =
              [w1_s2uGF] \r [w2_s2uGK]
                  case GHC.Show.$w$cshowsPrec4 0# w1_s2uGF w2_s2uGK of {
                    (#,#) ww3_s2uGM [Occ=Once] ww4_s2uGN [Occ=Once] ->
                        : [ww3_s2uGM ww4_s2uGN];
                  };
        } in  sat_s2uGO;

GHC.Word.$fShowWord64_$cshowList
  :: [GHC.Word.Word64] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s2uGP s_s2uGQ]
        GHC.Show.showList__ GHC.Word.$fShowWord3 ls_s2uGP s_s2uGQ;

GHC.Word.$w$cshow [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s2uGR]
        case word2Int# [ww_s2uGR] of i#_s2uGS [Dmd=<S,U>] {
          __DEFAULT ->
              case >=# [i#_s2uGS 0#] of {
                __DEFAULT ->
                    case GHC.Integer.Type.wordToInteger ww_s2uGR of sat_s2uGU {
                      __DEFAULT -> GHC.Show.$w$cshowsPrec4 0# sat_s2uGU GHC.Types.[];
                    };
                1# ->
                    case GHC.Integer.Type.smallInteger i#_s2uGS of sat_s2uGV {
                      __DEFAULT -> GHC.Show.$w$cshowsPrec4 0# sat_s2uGV GHC.Types.[];
                    };
              };
        };

GHC.Word.$fShowWord64_$cshow [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word64 -> GHC.Base.String
[GblId, Arity=1, Str=<S(S),1*U(U)>m2, Unf=OtherCon []] =
    [] \r [w_s2uGW]
        case w_s2uGW of {
          GHC.Word.W64# ww1_s2uGY [Occ=Once] ->
              case GHC.Word.$w$cshow ww1_s2uGY of {
                (#,#) ww3_s2uH0 [Occ=Once] ww4_s2uH1 [Occ=Once] ->
                    : [ww3_s2uH0 ww4_s2uH1];
              };
        };

GHC.Word.$fShowWord64_$cshowsPrec
  :: GHC.Types.Int -> GHC.Word.Word64 -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,U(U)><L,1*U(U)>, Unf=OtherCon []] =
    [] \r [p_s2uH2 x_s2uH3]
        let {
          w1_s2uH4 [Occ=OnceL] :: GHC.Integer.Type.Integer
          [LclId] =
              [x_s2uH3] \u []
                  case x_s2uH3 of {
                    GHC.Word.W64# x#_s2uH6 ->
                        case word2Int# [x#_s2uH6] of i#_s2uH7 [Dmd=<S,U>] {
                          __DEFAULT ->
                              case >=# [i#_s2uH7 0#] of {
                                __DEFAULT -> GHC.Integer.Type.wordToInteger x#_s2uH6;
                                1# -> GHC.Integer.Type.smallInteger i#_s2uH7;
                              };
                        };
                  }; } in
        let {
          sat_s2uHf [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
          [LclId] =
              [p_s2uH2 w1_s2uH4] \r [w2_s2uH9]
                  case p_s2uH2 of {
                    GHC.Types.I# ww1_s2uHb [Occ=Once] ->
                        case GHC.Show.$w$cshowsPrec4 ww1_s2uHb w1_s2uH4 w2_s2uH9 of {
                          (#,#) ww3_s2uHd [Occ=Once] ww4_s2uHe [Occ=Once] ->
                              : [ww3_s2uHd ww4_s2uHe];
                        };
                  };
        } in  sat_s2uHf;

GHC.Word.$fShowWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Word.$fShowWord64_$cshowsPrec
                                    GHC.Word.$fShowWord64_$cshow
                                    GHC.Word.$fShowWord64_$cshowList];

GHC.Word.$fEnumWord5 :: GHC.Word.Word64 -> GHC.Types.Int
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [x_s2uHg]
        GHC.Enum.fromEnumError GHC.Word.$fShowWord64 lvl_r2uFF x_s2uHg;

sat_s2uHh :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_s2uHi :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s2uHh GHC.Types.[]];

GHC.Word.$fRealWord1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s2uHi;

GHC.Word.$w$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s2uHj]
        case word2Int# [ww_s2uHj] of i#_s2uHk [Dmd=<S,U>] {
          __DEFAULT ->
              case >=# [i#_s2uHk 0#] of {
                __DEFAULT ->
                    case GHC.Integer.Type.wordToInteger ww_s2uHj of sat_s2uHm {
                      __DEFAULT ->
                          case
                              GHC.Integer.Type.timesInteger sat_s2uHm GHC.Word.$fRealWord1
                          of
                          sat_s2uHn
                          { __DEFAULT -> GHC.Real.$w$sreduce sat_s2uHn GHC.Word.$fRealWord1;
                          };
                    };
                1# ->
                    case GHC.Integer.Type.smallInteger i#_s2uHk of sat_s2uHo {
                      __DEFAULT ->
                          case
                              GHC.Integer.Type.timesInteger sat_s2uHo GHC.Word.$fRealWord1
                          of
                          sat_s2uHp
                          { __DEFAULT -> GHC.Real.$w$sreduce sat_s2uHp GHC.Word.$fRealWord1;
                          };
                    };
              };
        };

GHC.Word.$fRealWord64_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word64 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2uHq]
        case w_s2uHq of {
          GHC.Word.W64# ww1_s2uHs [Occ=Once] ->
              case GHC.Word.$w$ctoRational ww1_s2uHs of {
                (#,#) ww3_s2uHu [Occ=Once] ww4_s2uHv [Occ=Once] ->
                    GHC.Real.:% [ww3_s2uHu ww4_s2uHv];
              };
        };

GHC.Word.$tcWord9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word8"#;

GHC.Word.$fEnumWord10 :: GHC.Word.Word8
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord9 of sat_s2uHw {
          __DEFAULT -> GHC.Enum.predError sat_s2uHw;
        };

GHC.Word.$fEnumWord11 :: GHC.Word.Word8
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord9 of sat_s2uHx {
          __DEFAULT -> GHC.Enum.succError sat_s2uHx;
        };

GHC.Word.neWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uHy ds1_s2uHz]
        case ds_s2uHy of {
          GHC.Word.W8# x_s2uHB [Occ=Once] ->
              case ds1_s2uHz of {
                GHC.Word.W8# y_s2uHD [Occ=Once] ->
                    case neWord# [x_s2uHB y_s2uHD] of sat_s2uHE {
                      __DEFAULT -> tagToEnum# [sat_s2uHE];
                    };
              };
        };

lvl2_r2uFH :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Word.$tcWord9;

GHC.Word.$fBitsWord8_$cminBound :: GHC.Word.Word8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W8#! [0##];

GHC.Word.$fEnumWord8_$cpred :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2uHF]
        case x_s2uHF of {
          GHC.Word.W8# x1_s2uHH [Occ=Once!] ->
              case x1_s2uHH of wild1_s2uHI {
                __DEFAULT ->
                    case minusWord# [wild1_s2uHI 1##] of sat_s2uHJ {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2uHJ] of sat_s2uHK {
                            __DEFAULT -> GHC.Word.W8# [sat_s2uHK];
                          };
                    };
                0## -> GHC.Word.$fEnumWord10;
              };
        };

GHC.Word.$fBoundedWord8_$cmaxBound :: GHC.Word.Word8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W8#! [255##];

GHC.Word.$fBoundedWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Word.$fBitsWord8_$cminBound
                                       GHC.Word.$fBoundedWord8_$cmaxBound];

GHC.Word.$fEnumWord8_$csucc :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2uHL]
        case x_s2uHL of {
          GHC.Word.W8# x1_s2uHN [Occ=Once!] ->
              case x1_s2uHN of wild1_s2uHO {
                __DEFAULT ->
                    case plusWord# [wild1_s2uHO 1##] of sat_s2uHP {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2uHP] of sat_s2uHQ {
                            __DEFAULT -> GHC.Word.W8# [sat_s2uHQ];
                          };
                    };
                255## -> GHC.Word.$fEnumWord11;
              };
        };

GHC.Word.$fShowWord8_$cshowsPrec
  :: GHC.Types.Int -> GHC.Word.Word8 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s2uHR x_s2uHS eta_s2uHT]
        case x_s2uHS of {
          GHC.Word.W8# x#_s2uHV [Occ=Once] ->
              case p_s2uHR of {
                GHC.Types.I# ww1_s2uHX [Occ=Once] ->
                    case word2Int# [x#_s2uHV] of sat_s2uHY {
                      __DEFAULT ->
                          case GHC.Show.$wshowSignedInt ww1_s2uHX sat_s2uHY eta_s2uHT of {
                            (#,#) ww5_s2uI0 [Occ=Once] ww6_s2uI1 [Occ=Once] ->
                                : [ww5_s2uI0 ww6_s2uI1];
                          };
                    };
              };
        };

GHC.Word.$fShowWord8_$cshow :: GHC.Word.Word8 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s2uI2]
        case x_s2uI2 of {
          GHC.Word.W8# x#_s2uI4 [Occ=Once] ->
              case word2Int# [x#_s2uI4] of sat_s2uI5 {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2uI5 GHC.Types.[] of {
                      (#,#) ww5_s2uI7 [Occ=Once] ww6_s2uI8 [Occ=Once] ->
                          : [ww5_s2uI7 ww6_s2uI8];
                    };
              };
        };

GHC.Word.$fShowWord4
  :: GHC.Word.Word8 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s2uI9 eta_s2uIa]
        case x_s2uI9 of {
          GHC.Word.W8# x#_s2uIc [Occ=Once] ->
              case word2Int# [x#_s2uIc] of sat_s2uId {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2uId eta_s2uIa of {
                      (#,#) ww5_s2uIf [Occ=Once] ww6_s2uIg [Occ=Once] ->
                          : [ww5_s2uIf ww6_s2uIg];
                    };
              };
        };

GHC.Word.$fShowWord8_$cshowList
  :: [GHC.Word.Word8] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s2uIh s_s2uIi]
        GHC.Show.showList__ GHC.Word.$fShowWord4 ls_s2uIh s_s2uIi;

GHC.Word.$fShowWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Word.$fShowWord8_$cshowsPrec
                                    GHC.Word.$fShowWord8_$cshow
                                    GHC.Word.$fShowWord8_$cshowList];

GHC.Word.$wlvl3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Word.Word8
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s2uIj]
        GHC.Enum.$wtoEnumError
            GHC.Word.$fShowWord8
            lvl2_r2uFH
            ww_s2uIj
            GHC.Word.$fBitsWord8_$cminBound
            GHC.Word.$fBoundedWord8_$cmaxBound;

GHC.Word.$w$ctoEnum2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s2uIk]
        case >=# [ww_s2uIk 0#] of {
          __DEFAULT -> GHC.Word.$wlvl3 ww_s2uIk;
          1# ->
              case <=# [ww_s2uIk 255#] of {
                __DEFAULT -> GHC.Word.$wlvl3 ww_s2uIk;
                1# -> int2Word# [ww_s2uIk];
              };
        };

GHC.Word.$fEnumWord8_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Word.Word8
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2uIp]
        case w_s2uIp of {
          GHC.Types.I# ww1_s2uIr [Occ=Once] ->
              case GHC.Word.$w$ctoEnum2 ww1_s2uIr of ww2_s2uIs {
                __DEFAULT -> GHC.Word.W8# [ww2_s2uIs];
              };
        };

GHC.Word.$w$cenumFromThenTo2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word8]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2uIt ww1_s2uIu ww2_s2uIv]
        case word2Int# [ww_s2uIt] of x1_s2uIw [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2uIu] of x2_s2uIx [Dmd=<S,U>] {
                __DEFAULT ->
                    case >=# [x2_s2uIx x1_s2uIw] of {
                      __DEFAULT ->
                          case word2Int# [ww2_s2uIv] of y_s2uIz [Dmd=<S,U>] {
                            __DEFAULT ->
                                case ># [y_s2uIz x2_s2uIx] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2uIU [Occ=Once] :: [GHC.Word.Word8]
                                        [LclId] =
                                            [x1_s2uIw x2_s2uIx y_s2uIz] \u []
                                                case
                                                    -# [x2_s2uIx x1_s2uIw]
                                                of
                                                delta_s2uIF [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2uIz delta_s2uIF]
                                                      of
                                                      y'_s2uIG [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_dn_s2uIH [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int# -> [GHC.Word.Word8]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2uIF
                                                                            y'_s2uIG
                                                                            go_dn_s2uIH] \r [x_s2uII]
                                                                      case
                                                                          <# [x_s2uII y'_s2uIG]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2uIP [Occ=Once]
                                                                                :: [GHC.Word.Word8]
                                                                              [LclId] =
                                                                                  [delta_s2uIF
                                                                                   go_dn_s2uIH
                                                                                   x_s2uII] \u []
                                                                                      case
                                                                                          +# [x_s2uII
                                                                                              delta_s2uIF]
                                                                                      of
                                                                                      sat_s2uIO
                                                                                      { __DEFAULT ->
                                                                                            go_dn_s2uIH
                                                                                                sat_s2uIO;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2uIN [Occ=Once]
                                                                                :: GHC.Word.Word8
                                                                              [LclId] =
                                                                                  [x_s2uII] \u []
                                                                                      case
                                                                                          >=# [x_s2uII
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl3
                                                                                                x_s2uII;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uII
                                                                                                     255#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl3
                                                                                                      x_s2uII;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uII]
                                                                                                  of
                                                                                                  sat_s2uIM
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W8# [sat_s2uIM];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uIN
                                                                                 sat_s2uIP];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2uIT [Occ=Once]
                                                                                :: GHC.Word.Word8
                                                                              [LclId] =
                                                                                  [x_s2uII] \u []
                                                                                      case
                                                                                          >=# [x_s2uII
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl3
                                                                                                x_s2uII;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uII
                                                                                                     255#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl3
                                                                                                      x_s2uII;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uII]
                                                                                                  of
                                                                                                  sat_s2uIS
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W8# [sat_s2uIS];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uIT
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_dn_s2uIH x2_s2uIx;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2uIE [Occ=Once] :: GHC.Word.Word8
                                        [LclId] =
                                            [x1_s2uIw] \u []
                                                case >=# [x1_s2uIw 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl3 x1_s2uIw;
                                                  1# ->
                                                      case <=# [x1_s2uIw 255#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl3 x1_s2uIw;
                                                        1# ->
                                                            case int2Word# [x1_s2uIw] of sat_s2uID {
                                                              __DEFAULT -> GHC.Word.W8# [sat_s2uID];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2uIE sat_s2uIU];
                                  1# ->
                                      case ># [y_s2uIz x1_s2uIw] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2uIZ [Occ=Once] :: GHC.Word.Word8
                                              [LclId] =
                                                  [x1_s2uIw] \u []
                                                      case >=# [x1_s2uIw 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl3 x1_s2uIw;
                                                        1# ->
                                                            case <=# [x1_s2uIw 255#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl3 x1_s2uIw;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2uIw]
                                                                  of
                                                                  sat_s2uIY
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W8# [sat_s2uIY];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2uIZ GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                      1# ->
                          case word2Int# [ww2_s2uIv] of y_s2uJ0 [Dmd=<S,U>] {
                            __DEFAULT ->
                                case <# [y_s2uJ0 x2_s2uIx] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2uJl [Occ=Once] :: [GHC.Word.Word8]
                                        [LclId] =
                                            [x1_s2uIw x2_s2uIx y_s2uJ0] \u []
                                                case
                                                    -# [x2_s2uIx x1_s2uIw]
                                                of
                                                delta_s2uJ6 [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2uJ0 delta_s2uJ6]
                                                      of
                                                      y'_s2uJ7 [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_up_s2uJ8 [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int# -> [GHC.Word.Word8]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2uJ6
                                                                            y'_s2uJ7
                                                                            go_up_s2uJ8] \r [x_s2uJ9]
                                                                      case
                                                                          ># [x_s2uJ9 y'_s2uJ7]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2uJg [Occ=Once]
                                                                                :: [GHC.Word.Word8]
                                                                              [LclId] =
                                                                                  [delta_s2uJ6
                                                                                   go_up_s2uJ8
                                                                                   x_s2uJ9] \u []
                                                                                      case
                                                                                          +# [x_s2uJ9
                                                                                              delta_s2uJ6]
                                                                                      of
                                                                                      sat_s2uJf
                                                                                      { __DEFAULT ->
                                                                                            go_up_s2uJ8
                                                                                                sat_s2uJf;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2uJe [Occ=Once]
                                                                                :: GHC.Word.Word8
                                                                              [LclId] =
                                                                                  [x_s2uJ9] \u []
                                                                                      case
                                                                                          >=# [x_s2uJ9
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl3
                                                                                                x_s2uJ9;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uJ9
                                                                                                     255#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl3
                                                                                                      x_s2uJ9;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uJ9]
                                                                                                  of
                                                                                                  sat_s2uJd
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W8# [sat_s2uJd];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uJe
                                                                                 sat_s2uJg];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2uJk [Occ=Once]
                                                                                :: GHC.Word.Word8
                                                                              [LclId] =
                                                                                  [x_s2uJ9] \u []
                                                                                      case
                                                                                          >=# [x_s2uJ9
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl3
                                                                                                x_s2uJ9;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uJ9
                                                                                                     255#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl3
                                                                                                      x_s2uJ9;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uJ9]
                                                                                                  of
                                                                                                  sat_s2uJj
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W8# [sat_s2uJj];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uJk
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_up_s2uJ8 x2_s2uIx;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2uJ5 [Occ=Once] :: GHC.Word.Word8
                                        [LclId] =
                                            [x1_s2uIw] \u []
                                                case >=# [x1_s2uIw 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl3 x1_s2uIw;
                                                  1# ->
                                                      case <=# [x1_s2uIw 255#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl3 x1_s2uIw;
                                                        1# ->
                                                            case int2Word# [x1_s2uIw] of sat_s2uJ4 {
                                                              __DEFAULT -> GHC.Word.W8# [sat_s2uJ4];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2uJ5 sat_s2uJl];
                                  1# ->
                                      case <# [y_s2uJ0 x1_s2uIw] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2uJq [Occ=Once] :: GHC.Word.Word8
                                              [LclId] =
                                                  [x1_s2uIw] \u []
                                                      case >=# [x1_s2uIw 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl3 x1_s2uIw;
                                                        1# ->
                                                            case <=# [x1_s2uIw 255#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl3 x1_s2uIw;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2uIw]
                                                                  of
                                                                  sat_s2uJp
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W8# [sat_s2uJp];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2uJq GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fEnumWord8_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word8
     -> GHC.Word.Word8 -> GHC.Word.Word8 -> [GHC.Word.Word8]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s2uJr w1_s2uJs w2_s2uJt]
        case w_s2uJr of {
          GHC.Word.W8# ww1_s2uJv [Occ=Once] ->
              case w1_s2uJs of {
                GHC.Word.W8# ww3_s2uJx [Occ=Once] ->
                    case w2_s2uJt of {
                      GHC.Word.W8# ww5_s2uJz [Occ=Once] ->
                          GHC.Word.$w$cenumFromThenTo2 ww1_s2uJv ww3_s2uJx ww5_s2uJz;
                    };
              };
        };

GHC.Word.$w$cenumFromTo2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word8]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2uJA ww1_s2uJB]
        case word2Int# [ww_s2uJA] of x0_s2uJC [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2uJB] of y_s2uJD [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x0_s2uJC y_s2uJD] of {
                      __DEFAULT ->
                          let {
                            go_s2uJF [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Word.Word8]
                            [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                                sat-only [y_s2uJD go_s2uJF] \r [x_s2uJG]
                                    let {
                                      sat_s2uJN [Occ=Once] :: [GHC.Word.Word8]
                                      [LclId] =
                                          [y_s2uJD go_s2uJF x_s2uJG] \u []
                                              case ==# [x_s2uJG y_s2uJD] of {
                                                __DEFAULT ->
                                                    case +# [x_s2uJG 1#] of sat_s2uJM {
                                                      __DEFAULT -> go_s2uJF sat_s2uJM;
                                                    };
                                                1# -> [] [];
                                              }; } in
                                    let {
                                      sat_s2uJK [Occ=Once] :: GHC.Word.Word8
                                      [LclId] =
                                          [x_s2uJG] \u []
                                              case >=# [x_s2uJG 0#] of {
                                                __DEFAULT -> GHC.Word.$wlvl3 x_s2uJG;
                                                1# ->
                                                    case <=# [x_s2uJG 255#] of {
                                                      __DEFAULT -> GHC.Word.$wlvl3 x_s2uJG;
                                                      1# ->
                                                          case int2Word# [x_s2uJG] of sat_s2uJJ {
                                                            __DEFAULT -> GHC.Word.W8# [sat_s2uJJ];
                                                          };
                                                    };
                                              };
                                    } in  : [sat_s2uJK sat_s2uJN];
                          } in  go_s2uJF x0_s2uJC;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord8_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> [GHC.Word.Word8]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s2uJO w1_s2uJP]
        case w_s2uJO of {
          GHC.Word.W8# ww1_s2uJR [Occ=Once] ->
              case w1_s2uJP of {
                GHC.Word.W8# ww3_s2uJT [Occ=Once] ->
                    GHC.Word.$w$cenumFromTo2 ww1_s2uJR ww3_s2uJT;
              };
        };

GHC.Word.$wgo2 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Word.Word8, [GHC.Word.Word8] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s2uJU]
        let {
          sat_s2uK4 [Occ=Once] :: [GHC.Word.Word8]
          [LclId] =
              [w_s2uJU] \u []
                  case w_s2uJU of wild_s2uJZ {
                    __DEFAULT ->
                        case +# [wild_s2uJZ 1#] of sat_s2uK0 {
                          __DEFAULT ->
                              case GHC.Word.$wgo2 sat_s2uK0 of {
                                (#,#) ww1_s2uK2 [Occ=Once] ww2_s2uK3 [Occ=Once] ->
                                    : [ww1_s2uK2 ww2_s2uK3];
                              };
                        };
                    255# -> [] [];
                  }; } in
        let {
          sat_s2uJY [Occ=Once] :: GHC.Word.Word8
          [LclId] =
              [w_s2uJU] \u []
                  case >=# [w_s2uJU 0#] of {
                    __DEFAULT -> GHC.Word.$wlvl3 w_s2uJU;
                    1# ->
                        case <=# [w_s2uJU 255#] of {
                          __DEFAULT -> GHC.Word.$wlvl3 w_s2uJU;
                          1# ->
                              case int2Word# [w_s2uJU] of sat_s2uJX {
                                __DEFAULT -> GHC.Word.W8# [sat_s2uJX];
                              };
                        };
                  };
        } in  (#,#) [sat_s2uJY sat_s2uK4];

GHC.Word.$fEnumWord8_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Word.Word8]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s2uK5]
        case GHC.Word.$wgo2 w_s2uK5 of {
          (#,#) ww1_s2uK7 [Occ=Once] ww2_s2uK8 [Occ=Once] ->
              : [ww1_s2uK7 ww2_s2uK8];
        };

GHC.Word.$fEnumWord8_$cenumFrom
  :: GHC.Word.Word8 -> [GHC.Word.Word8]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s2uK9]
        case n_s2uK9 of {
          GHC.Word.W8# x#_s2uKb [Occ=Once] ->
              case word2Int# [x#_s2uKb] of x_s2uKc [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x_s2uKc 255#] of {
                      __DEFAULT -> GHC.Word.$fEnumWord8_go x_s2uKc;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Word.$fEnumWord8_$csucc
                                    GHC.Word.$fEnumWord8_$cpred
                                    GHC.Word.$fEnumWord8_$ctoEnum
                                    GHC.Word.$fEnumWord8_$cfromEnum
                                    GHC.Word.$fEnumWord8_$cenumFrom
                                    GHC.Word.$fEnumWord8_$cenumFromThen
                                    GHC.Word.$fEnumWord8_$cenumFromTo
                                    GHC.Word.$fEnumWord8_$cenumFromThenTo];
GHC.Word.$fEnumWord8_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> [GHC.Word.Word8]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Word.$fEnumWord8 GHC.Word.$fBoundedWord8 eta_B2 eta_B1;

GHC.Word.$tcWord2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word16"#;

GHC.Word.$fEnumWord1 :: GHC.Word.Word16
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord2 of sat_s2uKe {
          __DEFAULT -> GHC.Enum.predError sat_s2uKe;
        };

GHC.Word.$fEnumWord2 :: GHC.Word.Word16
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord2 of sat_s2uKf {
          __DEFAULT -> GHC.Enum.succError sat_s2uKf;
        };

GHC.Word.neWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uKg ds1_s2uKh]
        case ds_s2uKg of {
          GHC.Word.W16# x_s2uKj [Occ=Once] ->
              case ds1_s2uKh of {
                GHC.Word.W16# y_s2uKl [Occ=Once] ->
                    case neWord# [x_s2uKj y_s2uKl] of sat_s2uKm {
                      __DEFAULT -> tagToEnum# [sat_s2uKm];
                    };
              };
        };

lvl4_r2uFJ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Word.$tcWord2;

GHC.Word.$fBitsWord16_$cminBound :: GHC.Word.Word16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W16#! [0##];

GHC.Word.$fEnumWord16_$cpred :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2uKn]
        case x_s2uKn of {
          GHC.Word.W16# x1_s2uKp [Occ=Once!] ->
              case x1_s2uKp of wild1_s2uKq {
                __DEFAULT ->
                    case minusWord# [wild1_s2uKq 1##] of sat_s2uKr {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2uKr] of sat_s2uKs {
                            __DEFAULT -> GHC.Word.W16# [sat_s2uKs];
                          };
                    };
                0## -> GHC.Word.$fEnumWord1;
              };
        };

GHC.Word.$fBoundedWord16_$cmaxBound :: GHC.Word.Word16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W16#! [65535##];

GHC.Word.$fBoundedWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Word.$fBitsWord16_$cminBound
                                       GHC.Word.$fBoundedWord16_$cmaxBound];

GHC.Word.$fEnumWord16_$csucc :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2uKt]
        case x_s2uKt of {
          GHC.Word.W16# x1_s2uKv [Occ=Once!] ->
              case x1_s2uKv of wild1_s2uKw {
                __DEFAULT ->
                    case plusWord# [wild1_s2uKw 1##] of sat_s2uKx {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2uKx] of sat_s2uKy {
                            __DEFAULT -> GHC.Word.W16# [sat_s2uKy];
                          };
                    };
                65535## -> GHC.Word.$fEnumWord2;
              };
        };

GHC.Word.$fShowWord16_$cshowsPrec
  :: GHC.Types.Int -> GHC.Word.Word16 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s2uKz x_s2uKA eta_s2uKB]
        case x_s2uKA of {
          GHC.Word.W16# x#_s2uKD [Occ=Once] ->
              case p_s2uKz of {
                GHC.Types.I# ww1_s2uKF [Occ=Once] ->
                    case word2Int# [x#_s2uKD] of sat_s2uKG {
                      __DEFAULT ->
                          case GHC.Show.$wshowSignedInt ww1_s2uKF sat_s2uKG eta_s2uKB of {
                            (#,#) ww5_s2uKI [Occ=Once] ww6_s2uKJ [Occ=Once] ->
                                : [ww5_s2uKI ww6_s2uKJ];
                          };
                    };
              };
        };

GHC.Word.$fShowWord16_$cshow :: GHC.Word.Word16 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s2uKK]
        case x_s2uKK of {
          GHC.Word.W16# x#_s2uKM [Occ=Once] ->
              case word2Int# [x#_s2uKM] of sat_s2uKN {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2uKN GHC.Types.[] of {
                      (#,#) ww5_s2uKP [Occ=Once] ww6_s2uKQ [Occ=Once] ->
                          : [ww5_s2uKP ww6_s2uKQ];
                    };
              };
        };

GHC.Word.$fShowWord1
  :: GHC.Word.Word16 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s2uKR eta_s2uKS]
        case x_s2uKR of {
          GHC.Word.W16# x#_s2uKU [Occ=Once] ->
              case word2Int# [x#_s2uKU] of sat_s2uKV {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2uKV eta_s2uKS of {
                      (#,#) ww5_s2uKX [Occ=Once] ww6_s2uKY [Occ=Once] ->
                          : [ww5_s2uKX ww6_s2uKY];
                    };
              };
        };

GHC.Word.$fShowWord16_$cshowList
  :: [GHC.Word.Word16] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s2uKZ s_s2uL0]
        GHC.Show.showList__ GHC.Word.$fShowWord1 ls_s2uKZ s_s2uL0;

GHC.Word.$fShowWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Word.$fShowWord16_$cshowsPrec
                                    GHC.Word.$fShowWord16_$cshow
                                    GHC.Word.$fShowWord16_$cshowList];

GHC.Word.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Word.Word16
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s2uL1]
        GHC.Enum.$wtoEnumError
            GHC.Word.$fShowWord16
            lvl4_r2uFJ
            ww_s2uL1
            GHC.Word.$fBitsWord16_$cminBound
            GHC.Word.$fBoundedWord16_$cmaxBound;

GHC.Word.$w$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s2uL2]
        case >=# [ww_s2uL2 0#] of {
          __DEFAULT -> GHC.Word.$wlvl ww_s2uL2;
          1# ->
              case <=# [ww_s2uL2 65535#] of {
                __DEFAULT -> GHC.Word.$wlvl ww_s2uL2;
                1# -> int2Word# [ww_s2uL2];
              };
        };

GHC.Word.$fEnumWord16_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Word.Word16
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2uL7]
        case w_s2uL7 of {
          GHC.Types.I# ww1_s2uL9 [Occ=Once] ->
              case GHC.Word.$w$ctoEnum ww1_s2uL9 of ww2_s2uLa {
                __DEFAULT -> GHC.Word.W16# [ww2_s2uLa];
              };
        };

GHC.Word.$w$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word16]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2uLb ww1_s2uLc ww2_s2uLd]
        case word2Int# [ww_s2uLb] of x1_s2uLe [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2uLc] of x2_s2uLf [Dmd=<S,U>] {
                __DEFAULT ->
                    case >=# [x2_s2uLf x1_s2uLe] of {
                      __DEFAULT ->
                          case word2Int# [ww2_s2uLd] of y_s2uLh [Dmd=<S,U>] {
                            __DEFAULT ->
                                case ># [y_s2uLh x2_s2uLf] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2uLC [Occ=Once] :: [GHC.Word.Word16]
                                        [LclId] =
                                            [x1_s2uLe x2_s2uLf y_s2uLh] \u []
                                                case
                                                    -# [x2_s2uLf x1_s2uLe]
                                                of
                                                delta_s2uLn [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2uLh delta_s2uLn]
                                                      of
                                                      y'_s2uLo [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_dn_s2uLp [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int#
                                                                   -> [GHC.Word.Word16]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2uLn
                                                                            y'_s2uLo
                                                                            go_dn_s2uLp] \r [x_s2uLq]
                                                                      case
                                                                          <# [x_s2uLq y'_s2uLo]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2uLx [Occ=Once]
                                                                                :: [GHC.Word.Word16]
                                                                              [LclId] =
                                                                                  [delta_s2uLn
                                                                                   go_dn_s2uLp
                                                                                   x_s2uLq] \u []
                                                                                      case
                                                                                          +# [x_s2uLq
                                                                                              delta_s2uLn]
                                                                                      of
                                                                                      sat_s2uLw
                                                                                      { __DEFAULT ->
                                                                                            go_dn_s2uLp
                                                                                                sat_s2uLw;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2uLv [Occ=Once]
                                                                                :: GHC.Word.Word16
                                                                              [LclId] =
                                                                                  [x_s2uLq] \u []
                                                                                      case
                                                                                          >=# [x_s2uLq
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl
                                                                                                x_s2uLq;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uLq
                                                                                                     65535#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl
                                                                                                      x_s2uLq;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uLq]
                                                                                                  of
                                                                                                  sat_s2uLu
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W16# [sat_s2uLu];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uLv
                                                                                 sat_s2uLx];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2uLB [Occ=Once]
                                                                                :: GHC.Word.Word16
                                                                              [LclId] =
                                                                                  [x_s2uLq] \u []
                                                                                      case
                                                                                          >=# [x_s2uLq
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl
                                                                                                x_s2uLq;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uLq
                                                                                                     65535#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl
                                                                                                      x_s2uLq;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uLq]
                                                                                                  of
                                                                                                  sat_s2uLA
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W16# [sat_s2uLA];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uLB
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_dn_s2uLp x2_s2uLf;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2uLm [Occ=Once] :: GHC.Word.Word16
                                        [LclId] =
                                            [x1_s2uLe] \u []
                                                case >=# [x1_s2uLe 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl x1_s2uLe;
                                                  1# ->
                                                      case <=# [x1_s2uLe 65535#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl x1_s2uLe;
                                                        1# ->
                                                            case int2Word# [x1_s2uLe] of sat_s2uLl {
                                                              __DEFAULT ->
                                                                  GHC.Word.W16# [sat_s2uLl];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2uLm sat_s2uLC];
                                  1# ->
                                      case ># [y_s2uLh x1_s2uLe] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2uLH [Occ=Once] :: GHC.Word.Word16
                                              [LclId] =
                                                  [x1_s2uLe] \u []
                                                      case >=# [x1_s2uLe 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl x1_s2uLe;
                                                        1# ->
                                                            case <=# [x1_s2uLe 65535#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl x1_s2uLe;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2uLe]
                                                                  of
                                                                  sat_s2uLG
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W16# [sat_s2uLG];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2uLH GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                      1# ->
                          case word2Int# [ww2_s2uLd] of y_s2uLI [Dmd=<S,U>] {
                            __DEFAULT ->
                                case <# [y_s2uLI x2_s2uLf] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2uM3 [Occ=Once] :: [GHC.Word.Word16]
                                        [LclId] =
                                            [x1_s2uLe x2_s2uLf y_s2uLI] \u []
                                                case
                                                    -# [x2_s2uLf x1_s2uLe]
                                                of
                                                delta_s2uLO [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2uLI delta_s2uLO]
                                                      of
                                                      y'_s2uLP [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_up_s2uLQ [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int#
                                                                   -> [GHC.Word.Word16]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2uLO
                                                                            y'_s2uLP
                                                                            go_up_s2uLQ] \r [x_s2uLR]
                                                                      case
                                                                          ># [x_s2uLR y'_s2uLP]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2uLY [Occ=Once]
                                                                                :: [GHC.Word.Word16]
                                                                              [LclId] =
                                                                                  [delta_s2uLO
                                                                                   go_up_s2uLQ
                                                                                   x_s2uLR] \u []
                                                                                      case
                                                                                          +# [x_s2uLR
                                                                                              delta_s2uLO]
                                                                                      of
                                                                                      sat_s2uLX
                                                                                      { __DEFAULT ->
                                                                                            go_up_s2uLQ
                                                                                                sat_s2uLX;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2uLW [Occ=Once]
                                                                                :: GHC.Word.Word16
                                                                              [LclId] =
                                                                                  [x_s2uLR] \u []
                                                                                      case
                                                                                          >=# [x_s2uLR
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl
                                                                                                x_s2uLR;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uLR
                                                                                                     65535#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl
                                                                                                      x_s2uLR;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uLR]
                                                                                                  of
                                                                                                  sat_s2uLV
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W16# [sat_s2uLV];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uLW
                                                                                 sat_s2uLY];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2uM2 [Occ=Once]
                                                                                :: GHC.Word.Word16
                                                                              [LclId] =
                                                                                  [x_s2uLR] \u []
                                                                                      case
                                                                                          >=# [x_s2uLR
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl
                                                                                                x_s2uLR;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uLR
                                                                                                     65535#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl
                                                                                                      x_s2uLR;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uLR]
                                                                                                  of
                                                                                                  sat_s2uM1
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W16# [sat_s2uM1];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uM2
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_up_s2uLQ x2_s2uLf;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2uLN [Occ=Once] :: GHC.Word.Word16
                                        [LclId] =
                                            [x1_s2uLe] \u []
                                                case >=# [x1_s2uLe 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl x1_s2uLe;
                                                  1# ->
                                                      case <=# [x1_s2uLe 65535#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl x1_s2uLe;
                                                        1# ->
                                                            case int2Word# [x1_s2uLe] of sat_s2uLM {
                                                              __DEFAULT ->
                                                                  GHC.Word.W16# [sat_s2uLM];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2uLN sat_s2uM3];
                                  1# ->
                                      case <# [y_s2uLI x1_s2uLe] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2uM8 [Occ=Once] :: GHC.Word.Word16
                                              [LclId] =
                                                  [x1_s2uLe] \u []
                                                      case >=# [x1_s2uLe 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl x1_s2uLe;
                                                        1# ->
                                                            case <=# [x1_s2uLe 65535#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl x1_s2uLe;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2uLe]
                                                                  of
                                                                  sat_s2uM7
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W16# [sat_s2uM7];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2uM8 GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fEnumWord16_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word16
     -> GHC.Word.Word16 -> GHC.Word.Word16 -> [GHC.Word.Word16]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s2uM9 w1_s2uMa w2_s2uMb]
        case w_s2uM9 of {
          GHC.Word.W16# ww1_s2uMd [Occ=Once] ->
              case w1_s2uMa of {
                GHC.Word.W16# ww3_s2uMf [Occ=Once] ->
                    case w2_s2uMb of {
                      GHC.Word.W16# ww5_s2uMh [Occ=Once] ->
                          GHC.Word.$w$cenumFromThenTo ww1_s2uMd ww3_s2uMf ww5_s2uMh;
                    };
              };
        };

GHC.Word.$w$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word16]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2uMi ww1_s2uMj]
        case word2Int# [ww_s2uMi] of x0_s2uMk [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2uMj] of y_s2uMl [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x0_s2uMk y_s2uMl] of {
                      __DEFAULT ->
                          let {
                            go_s2uMn [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Word.Word16]
                            [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                                sat-only [y_s2uMl go_s2uMn] \r [x_s2uMo]
                                    let {
                                      sat_s2uMv [Occ=Once] :: [GHC.Word.Word16]
                                      [LclId] =
                                          [y_s2uMl go_s2uMn x_s2uMo] \u []
                                              case ==# [x_s2uMo y_s2uMl] of {
                                                __DEFAULT ->
                                                    case +# [x_s2uMo 1#] of sat_s2uMu {
                                                      __DEFAULT -> go_s2uMn sat_s2uMu;
                                                    };
                                                1# -> [] [];
                                              }; } in
                                    let {
                                      sat_s2uMs [Occ=Once] :: GHC.Word.Word16
                                      [LclId] =
                                          [x_s2uMo] \u []
                                              case >=# [x_s2uMo 0#] of {
                                                __DEFAULT -> GHC.Word.$wlvl x_s2uMo;
                                                1# ->
                                                    case <=# [x_s2uMo 65535#] of {
                                                      __DEFAULT -> GHC.Word.$wlvl x_s2uMo;
                                                      1# ->
                                                          case int2Word# [x_s2uMo] of sat_s2uMr {
                                                            __DEFAULT -> GHC.Word.W16# [sat_s2uMr];
                                                          };
                                                    };
                                              };
                                    } in  : [sat_s2uMs sat_s2uMv];
                          } in  go_s2uMn x0_s2uMk;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord16_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> [GHC.Word.Word16]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s2uMw w1_s2uMx]
        case w_s2uMw of {
          GHC.Word.W16# ww1_s2uMz [Occ=Once] ->
              case w1_s2uMx of {
                GHC.Word.W16# ww3_s2uMB [Occ=Once] ->
                    GHC.Word.$w$cenumFromTo ww1_s2uMz ww3_s2uMB;
              };
        };

GHC.Word.$wgo [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Word.Word16, [GHC.Word.Word16] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s2uMC]
        let {
          sat_s2uMM [Occ=Once] :: [GHC.Word.Word16]
          [LclId] =
              [w_s2uMC] \u []
                  case w_s2uMC of wild_s2uMH {
                    __DEFAULT ->
                        case +# [wild_s2uMH 1#] of sat_s2uMI {
                          __DEFAULT ->
                              case GHC.Word.$wgo sat_s2uMI of {
                                (#,#) ww1_s2uMK [Occ=Once] ww2_s2uML [Occ=Once] ->
                                    : [ww1_s2uMK ww2_s2uML];
                              };
                        };
                    65535# -> [] [];
                  }; } in
        let {
          sat_s2uMG [Occ=Once] :: GHC.Word.Word16
          [LclId] =
              [w_s2uMC] \u []
                  case >=# [w_s2uMC 0#] of {
                    __DEFAULT -> GHC.Word.$wlvl w_s2uMC;
                    1# ->
                        case <=# [w_s2uMC 65535#] of {
                          __DEFAULT -> GHC.Word.$wlvl w_s2uMC;
                          1# ->
                              case int2Word# [w_s2uMC] of sat_s2uMF {
                                __DEFAULT -> GHC.Word.W16# [sat_s2uMF];
                              };
                        };
                  };
        } in  (#,#) [sat_s2uMG sat_s2uMM];

GHC.Word.$fEnumWord16_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Word.Word16]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s2uMN]
        case GHC.Word.$wgo w_s2uMN of {
          (#,#) ww1_s2uMP [Occ=Once] ww2_s2uMQ [Occ=Once] ->
              : [ww1_s2uMP ww2_s2uMQ];
        };

GHC.Word.$fEnumWord16_$cenumFrom
  :: GHC.Word.Word16 -> [GHC.Word.Word16]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s2uMR]
        case n_s2uMR of {
          GHC.Word.W16# x#_s2uMT [Occ=Once] ->
              case word2Int# [x#_s2uMT] of x_s2uMU [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x_s2uMU 65535#] of {
                      __DEFAULT -> GHC.Word.$fEnumWord16_go x_s2uMU;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Word.$fEnumWord16_$csucc
                                    GHC.Word.$fEnumWord16_$cpred
                                    GHC.Word.$fEnumWord16_$ctoEnum
                                    GHC.Word.$fEnumWord16_$cfromEnum
                                    GHC.Word.$fEnumWord16_$cenumFrom
                                    GHC.Word.$fEnumWord16_$cenumFromThen
                                    GHC.Word.$fEnumWord16_$cenumFromTo
                                    GHC.Word.$fEnumWord16_$cenumFromThenTo];
GHC.Word.$fEnumWord16_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> [GHC.Word.Word16]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Word.$fEnumWord16 GHC.Word.$fBoundedWord16 eta_B2 eta_B1;

GHC.Word.$tcWord4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word32"#;

GHC.Word.$fEnumWord3 :: GHC.Word.Word32
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord4 of sat_s2uMW {
          __DEFAULT -> GHC.Enum.predError sat_s2uMW;
        };

GHC.Word.$fEnumWord4 :: GHC.Word.Word32
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord4 of sat_s2uMX {
          __DEFAULT -> GHC.Enum.succError sat_s2uMX;
        };

GHC.Word.neWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uMY ds1_s2uMZ]
        case ds_s2uMY of {
          GHC.Word.W32# x_s2uN1 [Occ=Once] ->
              case ds1_s2uMZ of {
                GHC.Word.W32# y_s2uN3 [Occ=Once] ->
                    case neWord# [x_s2uN1 y_s2uN3] of sat_s2uN4 {
                      __DEFAULT -> tagToEnum# [sat_s2uN4];
                    };
              };
        };

lvl6_r2uFL :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Word.$tcWord4;

GHC.Word.$fBitsWord32_$cminBound :: GHC.Word.Word32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W32#! [0##];

GHC.Word.$fEnumWord32_$cpred :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2uN5]
        case x_s2uN5 of {
          GHC.Word.W32# x1_s2uN7 [Occ=Once!] ->
              case x1_s2uN7 of wild1_s2uN8 {
                __DEFAULT ->
                    case minusWord# [wild1_s2uN8 1##] of sat_s2uN9 {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2uN9] of sat_s2uNa {
                            __DEFAULT -> GHC.Word.W32# [sat_s2uNa];
                          };
                    };
                0## -> GHC.Word.$fEnumWord3;
              };
        };

GHC.Word.$fBoundedWord32_$cmaxBound :: GHC.Word.Word32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W32#! [4294967295##];

GHC.Word.$fBoundedWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Word.$fBitsWord32_$cminBound
                                       GHC.Word.$fBoundedWord32_$cmaxBound];

GHC.Word.$fEnumWord32_$csucc :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2uNb]
        case x_s2uNb of {
          GHC.Word.W32# x1_s2uNd [Occ=Once!] ->
              case x1_s2uNd of wild1_s2uNe {
                __DEFAULT ->
                    case plusWord# [wild1_s2uNe 1##] of sat_s2uNf {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2uNf] of sat_s2uNg {
                            __DEFAULT -> GHC.Word.W32# [sat_s2uNg];
                          };
                    };
                4294967295## -> GHC.Word.$fEnumWord4;
              };
        };

GHC.Word.$fShowWord32_$cshowsPrec
  :: GHC.Types.Int -> GHC.Word.Word32 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s2uNh x_s2uNi eta_s2uNj]
        case x_s2uNi of {
          GHC.Word.W32# x#_s2uNl [Occ=Once] ->
              case p_s2uNh of {
                GHC.Types.I# ww1_s2uNn [Occ=Once] ->
                    case word2Int# [x#_s2uNl] of sat_s2uNo {
                      __DEFAULT ->
                          case GHC.Show.$wshowSignedInt ww1_s2uNn sat_s2uNo eta_s2uNj of {
                            (#,#) ww5_s2uNq [Occ=Once] ww6_s2uNr [Occ=Once] ->
                                : [ww5_s2uNq ww6_s2uNr];
                          };
                    };
              };
        };

GHC.Word.$fShowWord32_$cshow :: GHC.Word.Word32 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s2uNs]
        case x_s2uNs of {
          GHC.Word.W32# x#_s2uNu [Occ=Once] ->
              case word2Int# [x#_s2uNu] of sat_s2uNv {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2uNv GHC.Types.[] of {
                      (#,#) ww5_s2uNx [Occ=Once] ww6_s2uNy [Occ=Once] ->
                          : [ww5_s2uNx ww6_s2uNy];
                    };
              };
        };

GHC.Word.$fShowWord2
  :: GHC.Word.Word32 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s2uNz eta_s2uNA]
        case x_s2uNz of {
          GHC.Word.W32# x#_s2uNC [Occ=Once] ->
              case word2Int# [x#_s2uNC] of sat_s2uND {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2uND eta_s2uNA of {
                      (#,#) ww5_s2uNF [Occ=Once] ww6_s2uNG [Occ=Once] ->
                          : [ww5_s2uNF ww6_s2uNG];
                    };
              };
        };

GHC.Word.$fShowWord32_$cshowList
  :: [GHC.Word.Word32] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s2uNH s_s2uNI]
        GHC.Show.showList__ GHC.Word.$fShowWord2 ls_s2uNH s_s2uNI;

GHC.Word.$fShowWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Word.$fShowWord32_$cshowsPrec
                                    GHC.Word.$fShowWord32_$cshow
                                    GHC.Word.$fShowWord32_$cshowList];

GHC.Word.$wlvl1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Word.Word32
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s2uNJ]
        GHC.Enum.$wtoEnumError
            GHC.Word.$fShowWord32
            lvl6_r2uFL
            ww_s2uNJ
            GHC.Word.$fBitsWord32_$cminBound
            GHC.Word.$fBoundedWord32_$cmaxBound;

GHC.Word.$w$ctoEnum1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s2uNK]
        case >=# [ww_s2uNK 0#] of {
          __DEFAULT -> GHC.Word.$wlvl1 ww_s2uNK;
          1# ->
              case <=# [ww_s2uNK 4294967295#] of {
                __DEFAULT -> GHC.Word.$wlvl1 ww_s2uNK;
                1# -> int2Word# [ww_s2uNK];
              };
        };

GHC.Word.$fEnumWord32_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Word.Word32
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2uNP]
        case w_s2uNP of {
          GHC.Types.I# ww1_s2uNR [Occ=Once] ->
              case GHC.Word.$w$ctoEnum1 ww1_s2uNR of ww2_s2uNS {
                __DEFAULT -> GHC.Word.W32# [ww2_s2uNS];
              };
        };

GHC.Word.$w$cenumFromThenTo1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word32]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2uNT ww1_s2uNU ww2_s2uNV]
        case word2Int# [ww_s2uNT] of x1_s2uNW [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2uNU] of x2_s2uNX [Dmd=<S,U>] {
                __DEFAULT ->
                    case >=# [x2_s2uNX x1_s2uNW] of {
                      __DEFAULT ->
                          case word2Int# [ww2_s2uNV] of y_s2uNZ [Dmd=<S,U>] {
                            __DEFAULT ->
                                case ># [y_s2uNZ x2_s2uNX] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2uOk [Occ=Once] :: [GHC.Word.Word32]
                                        [LclId] =
                                            [x1_s2uNW x2_s2uNX y_s2uNZ] \u []
                                                case
                                                    -# [x2_s2uNX x1_s2uNW]
                                                of
                                                delta_s2uO5 [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2uNZ delta_s2uO5]
                                                      of
                                                      y'_s2uO6 [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_dn_s2uO7 [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int#
                                                                   -> [GHC.Word.Word32]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2uO5
                                                                            y'_s2uO6
                                                                            go_dn_s2uO7] \r [x_s2uO8]
                                                                      case
                                                                          <# [x_s2uO8 y'_s2uO6]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2uOf [Occ=Once]
                                                                                :: [GHC.Word.Word32]
                                                                              [LclId] =
                                                                                  [delta_s2uO5
                                                                                   go_dn_s2uO7
                                                                                   x_s2uO8] \u []
                                                                                      case
                                                                                          +# [x_s2uO8
                                                                                              delta_s2uO5]
                                                                                      of
                                                                                      sat_s2uOe
                                                                                      { __DEFAULT ->
                                                                                            go_dn_s2uO7
                                                                                                sat_s2uOe;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2uOd [Occ=Once]
                                                                                :: GHC.Word.Word32
                                                                              [LclId] =
                                                                                  [x_s2uO8] \u []
                                                                                      case
                                                                                          >=# [x_s2uO8
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl1
                                                                                                x_s2uO8;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uO8
                                                                                                     4294967295#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl1
                                                                                                      x_s2uO8;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uO8]
                                                                                                  of
                                                                                                  sat_s2uOc
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W32# [sat_s2uOc];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uOd
                                                                                 sat_s2uOf];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2uOj [Occ=Once]
                                                                                :: GHC.Word.Word32
                                                                              [LclId] =
                                                                                  [x_s2uO8] \u []
                                                                                      case
                                                                                          >=# [x_s2uO8
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl1
                                                                                                x_s2uO8;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uO8
                                                                                                     4294967295#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl1
                                                                                                      x_s2uO8;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uO8]
                                                                                                  of
                                                                                                  sat_s2uOi
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W32# [sat_s2uOi];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uOj
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_dn_s2uO7 x2_s2uNX;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2uO4 [Occ=Once] :: GHC.Word.Word32
                                        [LclId] =
                                            [x1_s2uNW] \u []
                                                case >=# [x1_s2uNW 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl1 x1_s2uNW;
                                                  1# ->
                                                      case <=# [x1_s2uNW 4294967295#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl1 x1_s2uNW;
                                                        1# ->
                                                            case int2Word# [x1_s2uNW] of sat_s2uO3 {
                                                              __DEFAULT ->
                                                                  GHC.Word.W32# [sat_s2uO3];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2uO4 sat_s2uOk];
                                  1# ->
                                      case ># [y_s2uNZ x1_s2uNW] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2uOp [Occ=Once] :: GHC.Word.Word32
                                              [LclId] =
                                                  [x1_s2uNW] \u []
                                                      case >=# [x1_s2uNW 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl1 x1_s2uNW;
                                                        1# ->
                                                            case <=# [x1_s2uNW 4294967295#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl1 x1_s2uNW;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2uNW]
                                                                  of
                                                                  sat_s2uOo
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W32# [sat_s2uOo];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2uOp GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                      1# ->
                          case word2Int# [ww2_s2uNV] of y_s2uOq [Dmd=<S,U>] {
                            __DEFAULT ->
                                case <# [y_s2uOq x2_s2uNX] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2uOL [Occ=Once] :: [GHC.Word.Word32]
                                        [LclId] =
                                            [x1_s2uNW x2_s2uNX y_s2uOq] \u []
                                                case
                                                    -# [x2_s2uNX x1_s2uNW]
                                                of
                                                delta_s2uOw [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2uOq delta_s2uOw]
                                                      of
                                                      y'_s2uOx [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_up_s2uOy [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int#
                                                                   -> [GHC.Word.Word32]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2uOw
                                                                            y'_s2uOx
                                                                            go_up_s2uOy] \r [x_s2uOz]
                                                                      case
                                                                          ># [x_s2uOz y'_s2uOx]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2uOG [Occ=Once]
                                                                                :: [GHC.Word.Word32]
                                                                              [LclId] =
                                                                                  [delta_s2uOw
                                                                                   go_up_s2uOy
                                                                                   x_s2uOz] \u []
                                                                                      case
                                                                                          +# [x_s2uOz
                                                                                              delta_s2uOw]
                                                                                      of
                                                                                      sat_s2uOF
                                                                                      { __DEFAULT ->
                                                                                            go_up_s2uOy
                                                                                                sat_s2uOF;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2uOE [Occ=Once]
                                                                                :: GHC.Word.Word32
                                                                              [LclId] =
                                                                                  [x_s2uOz] \u []
                                                                                      case
                                                                                          >=# [x_s2uOz
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl1
                                                                                                x_s2uOz;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uOz
                                                                                                     4294967295#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl1
                                                                                                      x_s2uOz;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uOz]
                                                                                                  of
                                                                                                  sat_s2uOD
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W32# [sat_s2uOD];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uOE
                                                                                 sat_s2uOG];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2uOK [Occ=Once]
                                                                                :: GHC.Word.Word32
                                                                              [LclId] =
                                                                                  [x_s2uOz] \u []
                                                                                      case
                                                                                          >=# [x_s2uOz
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl1
                                                                                                x_s2uOz;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uOz
                                                                                                     4294967295#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl1
                                                                                                      x_s2uOz;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uOz]
                                                                                                  of
                                                                                                  sat_s2uOJ
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W32# [sat_s2uOJ];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uOK
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_up_s2uOy x2_s2uNX;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2uOv [Occ=Once] :: GHC.Word.Word32
                                        [LclId] =
                                            [x1_s2uNW] \u []
                                                case >=# [x1_s2uNW 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl1 x1_s2uNW;
                                                  1# ->
                                                      case <=# [x1_s2uNW 4294967295#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl1 x1_s2uNW;
                                                        1# ->
                                                            case int2Word# [x1_s2uNW] of sat_s2uOu {
                                                              __DEFAULT ->
                                                                  GHC.Word.W32# [sat_s2uOu];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2uOv sat_s2uOL];
                                  1# ->
                                      case <# [y_s2uOq x1_s2uNW] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2uOQ [Occ=Once] :: GHC.Word.Word32
                                              [LclId] =
                                                  [x1_s2uNW] \u []
                                                      case >=# [x1_s2uNW 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl1 x1_s2uNW;
                                                        1# ->
                                                            case <=# [x1_s2uNW 4294967295#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl1 x1_s2uNW;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2uNW]
                                                                  of
                                                                  sat_s2uOP
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W32# [sat_s2uOP];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2uOQ GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fEnumWord32_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word32
     -> GHC.Word.Word32 -> GHC.Word.Word32 -> [GHC.Word.Word32]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s2uOR w1_s2uOS w2_s2uOT]
        case w_s2uOR of {
          GHC.Word.W32# ww1_s2uOV [Occ=Once] ->
              case w1_s2uOS of {
                GHC.Word.W32# ww3_s2uOX [Occ=Once] ->
                    case w2_s2uOT of {
                      GHC.Word.W32# ww5_s2uOZ [Occ=Once] ->
                          GHC.Word.$w$cenumFromThenTo1 ww1_s2uOV ww3_s2uOX ww5_s2uOZ;
                    };
              };
        };

GHC.Word.$w$cenumFromTo1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word32]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2uP0 ww1_s2uP1]
        case word2Int# [ww_s2uP0] of x0_s2uP2 [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2uP1] of y_s2uP3 [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x0_s2uP2 y_s2uP3] of {
                      __DEFAULT ->
                          let {
                            go_s2uP5 [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Word.Word32]
                            [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                                sat-only [y_s2uP3 go_s2uP5] \r [x_s2uP6]
                                    let {
                                      sat_s2uPd [Occ=Once] :: [GHC.Word.Word32]
                                      [LclId] =
                                          [y_s2uP3 go_s2uP5 x_s2uP6] \u []
                                              case ==# [x_s2uP6 y_s2uP3] of {
                                                __DEFAULT ->
                                                    case +# [x_s2uP6 1#] of sat_s2uPc {
                                                      __DEFAULT -> go_s2uP5 sat_s2uPc;
                                                    };
                                                1# -> [] [];
                                              }; } in
                                    let {
                                      sat_s2uPa [Occ=Once] :: GHC.Word.Word32
                                      [LclId] =
                                          [x_s2uP6] \u []
                                              case >=# [x_s2uP6 0#] of {
                                                __DEFAULT -> GHC.Word.$wlvl1 x_s2uP6;
                                                1# ->
                                                    case <=# [x_s2uP6 4294967295#] of {
                                                      __DEFAULT -> GHC.Word.$wlvl1 x_s2uP6;
                                                      1# ->
                                                          case int2Word# [x_s2uP6] of sat_s2uP9 {
                                                            __DEFAULT -> GHC.Word.W32# [sat_s2uP9];
                                                          };
                                                    };
                                              };
                                    } in  : [sat_s2uPa sat_s2uPd];
                          } in  go_s2uP5 x0_s2uP2;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord32_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> [GHC.Word.Word32]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s2uPe w1_s2uPf]
        case w_s2uPe of {
          GHC.Word.W32# ww1_s2uPh [Occ=Once] ->
              case w1_s2uPf of {
                GHC.Word.W32# ww3_s2uPj [Occ=Once] ->
                    GHC.Word.$w$cenumFromTo1 ww1_s2uPh ww3_s2uPj;
              };
        };

GHC.Word.$wgo1 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Word.Word32, [GHC.Word.Word32] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s2uPk]
        let {
          sat_s2uPu [Occ=Once] :: [GHC.Word.Word32]
          [LclId] =
              [w_s2uPk] \u []
                  case w_s2uPk of wild_s2uPp {
                    __DEFAULT ->
                        case +# [wild_s2uPp 1#] of sat_s2uPq {
                          __DEFAULT ->
                              case GHC.Word.$wgo1 sat_s2uPq of {
                                (#,#) ww1_s2uPs [Occ=Once] ww2_s2uPt [Occ=Once] ->
                                    : [ww1_s2uPs ww2_s2uPt];
                              };
                        };
                    4294967295# -> [] [];
                  }; } in
        let {
          sat_s2uPo [Occ=Once] :: GHC.Word.Word32
          [LclId] =
              [w_s2uPk] \u []
                  case >=# [w_s2uPk 0#] of {
                    __DEFAULT -> GHC.Word.$wlvl1 w_s2uPk;
                    1# ->
                        case <=# [w_s2uPk 4294967295#] of {
                          __DEFAULT -> GHC.Word.$wlvl1 w_s2uPk;
                          1# ->
                              case int2Word# [w_s2uPk] of sat_s2uPn {
                                __DEFAULT -> GHC.Word.W32# [sat_s2uPn];
                              };
                        };
                  };
        } in  (#,#) [sat_s2uPo sat_s2uPu];

GHC.Word.$fEnumWord32_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Word.Word32]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s2uPv]
        case GHC.Word.$wgo1 w_s2uPv of {
          (#,#) ww1_s2uPx [Occ=Once] ww2_s2uPy [Occ=Once] ->
              : [ww1_s2uPx ww2_s2uPy];
        };

GHC.Word.$fEnumWord32_$cenumFrom
  :: GHC.Word.Word32 -> [GHC.Word.Word32]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s2uPz]
        case n_s2uPz of {
          GHC.Word.W32# x#_s2uPB [Occ=Once] ->
              case word2Int# [x#_s2uPB] of x_s2uPC [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x_s2uPC 4294967295#] of {
                      __DEFAULT -> GHC.Word.$fEnumWord32_go x_s2uPC;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Word.$fEnumWord32_$csucc
                                    GHC.Word.$fEnumWord32_$cpred
                                    GHC.Word.$fEnumWord32_$ctoEnum
                                    GHC.Word.$fEnumWord32_$cfromEnum
                                    GHC.Word.$fEnumWord32_$cenumFrom
                                    GHC.Word.$fEnumWord32_$cenumFromThen
                                    GHC.Word.$fEnumWord32_$cenumFromTo
                                    GHC.Word.$fEnumWord32_$cenumFromThenTo];
GHC.Word.$fEnumWord32_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> [GHC.Word.Word32]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Word.$fEnumWord32 GHC.Word.$fBoundedWord32 eta_B2 eta_B1;

GHC.Word.$fBitsWord7 :: GHC.Word.Word64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W64#! [0##];

GHC.Word.$fNumWord3 :: GHC.Word.Word64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W64#! [1##];

GHC.Word.eqWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uPE ds1_s2uPF]
        case ds_s2uPE of {
          GHC.Word.W64# x_s2uPH [Occ=Once] ->
              case ds1_s2uPF of {
                GHC.Word.W64# y_s2uPJ [Occ=Once] ->
                    case eqWord# [x_s2uPH y_s2uPJ] of sat_s2uPK {
                      __DEFAULT -> tagToEnum# [sat_s2uPK];
                    };
              };
        };

GHC.Word.$fNumWord64_$csignum :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uPL]
        case ds_s2uPL of {
          GHC.Word.W64# x_s2uPN [Occ=Once!] ->
              case x_s2uPN of {
                __DEFAULT -> GHC.Word.$fNumWord3;
                0## -> GHC.Word.$fBitsWord7;
              };
        };

GHC.Word.$fNumWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Word.$fNumWord64_$c+
                                  GHC.Word.$fNumWord64_$c-
                                  GHC.Word.$fNumWord64_$c*
                                  GHC.Word.$fNumWord64_$cnegate
                                  GHC.Word.$fNumWord64_$cabs
                                  GHC.Word.$fNumWord64_$csignum
                                  GHC.Word.$fNumWord64_$cfromInteger];

GHC.Word.$fEnumWord7 :: GHC.Word.Word64
[GblId, Str=x] =
    [] \u [] GHC.Enum.predError lvl_r2uFF;

GHC.Word.$fEnumWord9 :: GHC.Word.Word64
[GblId, Str=x] =
    [] \u [] GHC.Enum.succError lvl_r2uFF;

GHC.Word.neWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uPP ds1_s2uPQ]
        case ds_s2uPP of {
          GHC.Word.W64# x_s2uPS [Occ=Once] ->
              case ds1_s2uPQ of {
                GHC.Word.W64# y_s2uPU [Occ=Once] ->
                    case neWord# [x_s2uPS y_s2uPU] of sat_s2uPV {
                      __DEFAULT -> tagToEnum# [sat_s2uPV];
                    };
              };
        };

GHC.Word.$fIntegralWord64_$cdivMod
  :: GHC.Word.Word64
     -> GHC.Word.Word64 -> (GHC.Word.Word64, GHC.Word.Word64)
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s2uPW y_s2uPX]
        case ds_s2uPW of {
          GHC.Word.W64# x#_s2uPZ ->
              case y_s2uPX of {
                GHC.Word.W64# y#_s2uQ1 [Occ=Once!] ->
                    case y#_s2uQ1 of wild2_s2uQ2 {
                      __DEFAULT ->
                          let {
                            sat_s2uQ6 [Occ=Once] :: GHC.Word.Word64
                            [LclId] =
                                [x#_s2uPZ wild2_s2uQ2] \u []
                                    case remWord# [x#_s2uPZ wild2_s2uQ2] of wild3_s2uQ5 {
                                      __DEFAULT -> GHC.Word.W64# [wild3_s2uQ5];
                                    }; } in
                          let {
                            sat_s2uQ4 [Occ=Once] :: GHC.Word.Word64
                            [LclId] =
                                [x#_s2uPZ wild2_s2uQ2] \u []
                                    case quotWord# [x#_s2uPZ wild2_s2uQ2] of wild3_s2uQ3 {
                                      __DEFAULT -> GHC.Word.W64# [wild3_s2uQ3];
                                    };
                          } in  (,) [sat_s2uQ4 sat_s2uQ6];
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord64_$cquotRem
  :: GHC.Word.Word64
     -> GHC.Word.Word64 -> (GHC.Word.Word64, GHC.Word.Word64)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uQ7 y_s2uQ8]
        case ds_s2uQ7 of {
          GHC.Word.W64# x#_s2uQa [Occ=Once] ->
              case y_s2uQ8 of {
                GHC.Word.W64# y#_s2uQc [Occ=Once!] ->
                    case y#_s2uQc of wild2_s2uQd {
                      __DEFAULT ->
                          case quotRemWord# [x#_s2uQa wild2_s2uQd] of {
                            (#,#) ipv_s2uQf [Occ=Once] ipv1_s2uQg [Occ=Once] ->
                                let {
                                  sat_s2uQi [Occ=Once] :: GHC.Word.Word64
                                  [LclId] =
                                      CCCS GHC.Word.W64#! [ipv1_s2uQg]; } in
                                let {
                                  sat_s2uQh [Occ=Once] :: GHC.Word.Word64
                                  [LclId] =
                                      CCCS GHC.Word.W64#! [ipv_s2uQf];
                                } in  (,) [sat_s2uQh sat_s2uQi];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord64_$cmod
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uQj y_s2uQk]
        case ds_s2uQj of {
          GHC.Word.W64# x#_s2uQm [Occ=Once] ->
              case y_s2uQk of {
                GHC.Word.W64# y#_s2uQo [Occ=Once!] ->
                    case y#_s2uQo of wild2_s2uQp {
                      __DEFAULT ->
                          case remWord# [x#_s2uQm wild2_s2uQp] of wild3_s2uQq {
                            __DEFAULT -> GHC.Word.W64# [wild3_s2uQq];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord64_$cdiv
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uQr y_s2uQs]
        case ds_s2uQr of {
          GHC.Word.W64# x#_s2uQu [Occ=Once] ->
              case y_s2uQs of {
                GHC.Word.W64# y#_s2uQw [Occ=Once!] ->
                    case y#_s2uQw of wild2_s2uQx {
                      __DEFAULT ->
                          case quotWord# [x#_s2uQu wild2_s2uQx] of wild3_s2uQy {
                            __DEFAULT -> GHC.Word.W64# [wild3_s2uQy];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fEqWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Word.eqWord64
                                     GHC.Word.neWord64];

GHC.Word.$fEnumWord64_$cpred :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2uQz]
        case x_s2uQz of {
          GHC.Word.W64# x1_s2uQB [Occ=Once!] ->
              case x1_s2uQB of wild1_s2uQC {
                __DEFAULT ->
                    case minusWord# [wild1_s2uQC 1##] of sat_s2uQD {
                      __DEFAULT -> GHC.Word.W64# [sat_s2uQD];
                    };
                0## -> GHC.Word.$fEnumWord7;
              };
        };

GHC.Word.$fBoundedWord64_$cmaxBound :: GHC.Word.Word64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W64#! [18446744073709551615##];

GHC.Word.$fBoundedWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Word.$fBitsWord7
                                       GHC.Word.$fBoundedWord64_$cmaxBound];

GHC.Word.$fEnumWord64_$csucc :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2uQE]
        case x_s2uQE of {
          GHC.Word.W64# x1_s2uQG [Occ=Once!] ->
              case x1_s2uQG of wild1_s2uQH {
                __DEFAULT ->
                    case plusWord# [wild1_s2uQH 1##] of sat_s2uQI {
                      __DEFAULT -> GHC.Word.W64# [sat_s2uQI];
                    };
                18446744073709551615## -> GHC.Word.$fEnumWord9;
              };
        };

GHC.Word.$wlvl2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Word.Word64
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s2uQJ]
        GHC.Enum.$wtoEnumError
            GHC.Word.$fShowWord64
            lvl_r2uFF
            ww_s2uQJ
            GHC.Word.$fBitsWord7
            GHC.Word.$fBoundedWord64_$cmaxBound;

GHC.Word.$fEnumWord6 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Word.Word64
[GblId, Arity=1, Str=<B,1*U(U)>x, Unf=OtherCon []] =
    [] \r [w_s2uQK]
        case w_s2uQK of {
          GHC.Types.I# ww1_s2uQM [Occ=Once] -> GHC.Word.$wlvl2 ww1_s2uQM;
        };

GHC.Word.$fEnumWord64_$ctoEnum :: GHC.Types.Int -> GHC.Word.Word64
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [i_s2uQN]
        case i_s2uQN of {
          GHC.Types.I# i#_s2uQP ->
              case >=# [i#_s2uQP 0#] of {
                __DEFAULT -> GHC.Word.$wlvl2 i#_s2uQP;
                1# ->
                    case int2Word# [i#_s2uQP] of sat_s2uQR {
                      __DEFAULT -> GHC.Word.W64# [sat_s2uQR];
                    };
              };
        };

GHC.Word.gtWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uQS ds1_s2uQT]
        case ds_s2uQS of {
          GHC.Word.W64# x_s2uQV [Occ=Once] ->
              case ds1_s2uQT of {
                GHC.Word.W64# y_s2uQX [Occ=Once] ->
                    case gtWord# [x_s2uQV y_s2uQX] of sat_s2uQY {
                      __DEFAULT -> tagToEnum# [sat_s2uQY];
                    };
              };
        };

GHC.Word.geWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uQZ ds1_s2uR0]
        case ds_s2uQZ of {
          GHC.Word.W64# x_s2uR2 [Occ=Once] ->
              case ds1_s2uR0 of {
                GHC.Word.W64# y_s2uR4 [Occ=Once] ->
                    case geWord# [x_s2uR2 y_s2uR4] of sat_s2uR5 {
                      __DEFAULT -> tagToEnum# [sat_s2uR5];
                    };
              };
        };

GHC.Word.ltWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uR6 ds1_s2uR7]
        case ds_s2uR6 of {
          GHC.Word.W64# x_s2uR9 [Occ=Once] ->
              case ds1_s2uR7 of {
                GHC.Word.W64# y_s2uRb [Occ=Once] ->
                    case ltWord# [x_s2uR9 y_s2uRb] of sat_s2uRc {
                      __DEFAULT -> tagToEnum# [sat_s2uRc];
                    };
              };
        };

GHC.Word.leWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uRd ds1_s2uRe]
        case ds_s2uRd of {
          GHC.Word.W64# x_s2uRg [Occ=Once] ->
              case ds1_s2uRe of {
                GHC.Word.W64# y_s2uRi [Occ=Once] ->
                    case leWord# [x_s2uRg y_s2uRi] of sat_s2uRj {
                      __DEFAULT -> tagToEnum# [sat_s2uRj];
                    };
              };
        };

GHC.Word.$fOrdWord64_$cmin
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2uRk y_s2uRl]
        case x_s2uRk of wild_s2uRm {
          GHC.Word.W64# x1_s2uRn [Occ=Once] ->
              case y_s2uRl of wild1_s2uRo {
                GHC.Word.W64# y1_s2uRp [Occ=Once] ->
                    case leWord# [x1_s2uRn y1_s2uRp] of {
                      __DEFAULT -> wild1_s2uRo;
                      1# -> wild_s2uRm;
                    };
              };
        };

GHC.Word.$fOrdWord64_$cmax
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2uRr y_s2uRs]
        case x_s2uRr of wild_s2uRt {
          GHC.Word.W64# x1_s2uRu [Occ=Once] ->
              case y_s2uRs of wild1_s2uRv {
                GHC.Word.W64# y1_s2uRw [Occ=Once] ->
                    case leWord# [x1_s2uRu y1_s2uRw] of {
                      __DEFAULT -> wild_s2uRt;
                      1# -> wild1_s2uRv;
                    };
              };
        };

GHC.Word.$fOrdWord64_$ccompare
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2uRy y_s2uRz]
        case x_s2uRy of {
          GHC.Word.W64# x1_s2uRB ->
              case y_s2uRz of {
                GHC.Word.W64# y1_s2uRD ->
                    case eqWord# [x1_s2uRB y1_s2uRD] of {
                      __DEFAULT ->
                          case leWord# [x1_s2uRB y1_s2uRD] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Word.$fOrdWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Word.$fEqWord64
                                      GHC.Word.$fOrdWord64_$ccompare
                                      GHC.Word.ltWord64
                                      GHC.Word.leWord64
                                      GHC.Word.gtWord64
                                      GHC.Word.geWord64
                                      GHC.Word.$fOrdWord64_$cmax
                                      GHC.Word.$fOrdWord64_$cmin];

GHC.Word.$fRealWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Word.$fNumWord64
                                    GHC.Word.$fOrdWord64
                                    GHC.Word.$fRealWord64_$ctoRational];

GHC.Word.$fEnumWord64_$cfromEnum
  :: GHC.Word.Word64 -> GHC.Types.Int
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_s2uRG]
        case x_s2uRG of wild_s2uRH {
          GHC.Word.W64# x#_s2uRI ->
              case leWord# [x#_s2uRI 9223372036854775807##] of {
                __DEFAULT -> GHC.Word.$fEnumWord5 wild_s2uRH;
                1# ->
                    case word2Int# [x#_s2uRI] of sat_s2uRK {
                      __DEFAULT -> GHC.Types.I# [sat_s2uRK];
                    };
              };
        };

GHC.Word.$fEnumWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Word.$fEnumWord64_$csucc
                                    GHC.Word.$fEnumWord64_$cpred
                                    GHC.Word.$fEnumWord64_$ctoEnum
                                    GHC.Word.$fEnumWord64_$cfromEnum
                                    GHC.Word.$fEnumWord64_$cenumFrom
                                    GHC.Word.$fEnumWord64_$cenumFromThen
                                    GHC.Word.$fEnumWord64_$cenumFromTo
                                    GHC.Word.$fEnumWord64_$cenumFromThenTo];
GHC.Word.$fIntegralWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Word.$fRealWord64
                                        GHC.Word.$fEnumWord64
                                        GHC.Word.$fIntegralWord64_$cdiv
                                        GHC.Word.$fIntegralWord64_$cmod
                                        GHC.Word.$fIntegralWord64_$cdiv
                                        GHC.Word.$fIntegralWord64_$cmod
                                        GHC.Word.$fIntegralWord64_$cquotRem
                                        GHC.Word.$fIntegralWord64_$cdivMod
                                        GHC.Word.$fIntegralWord64_$ctoInteger];
GHC.Word.$fEnumWord64_$cenumFromThenTo [Occ=LoopBreaker]
  :: GHC.Word.Word64
     -> GHC.Word.Word64 -> GHC.Word.Word64 -> [GHC.Word.Word64]
[GblId, Arity=3, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Real.integralEnumFromThenTo
            GHC.Word.$fIntegralWord64 eta_B3 eta_B2 eta_B1;
GHC.Word.$fEnumWord64_$cenumFromTo [Occ=LoopBreaker]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> [GHC.Word.Word64]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Real.integralEnumFromTo
            GHC.Word.$fIntegralWord64 eta_B2 eta_B1;
GHC.Word.$fEnumWord64_$cenumFrom [Occ=LoopBreaker]
  :: GHC.Word.Word64 -> [GHC.Word.Word64]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Real.integralEnumFrom
            GHC.Word.$fIntegralWord64 GHC.Word.$fBoundedWord64 eta_B1;
GHC.Word.$fEnumWord64_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> [GHC.Word.Word64]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Real.integralEnumFromThen
            GHC.Word.$fIntegralWord64 GHC.Word.$fBoundedWord64 eta_B2 eta_B1;

GHC.Word.$fNumWord8_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Word.Word8
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s2uRL]
        case GHC.Integer.Type.integerToWord i_s2uRL of wild_s2uRM {
          __DEFAULT ->
              case narrow8Word# [wild_s2uRM] of sat_s2uRN {
                __DEFAULT -> GHC.Word.W8# [sat_s2uRN];
              };
        };

GHC.Word.$fNumWord8_$cabs :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_s2uRO] x_s2uRO;

GHC.Word.$fNumWord8_$cnegate :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uRP]
        case ds_s2uRP of {
          GHC.Word.W8# x#_s2uRR [Occ=Once] ->
              case word2Int# [x#_s2uRR] of sat_s2uRS {
                __DEFAULT ->
                    case negateInt# [sat_s2uRS] of sat_s2uRT {
                      __DEFAULT ->
                          case int2Word# [sat_s2uRT] of sat_s2uRU {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2uRU] of sat_s2uRV {
                                  __DEFAULT -> GHC.Word.W8# [sat_s2uRV];
                                };
                          };
                    };
              };
        };

GHC.Word.$fNumWord8_$c*
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uRW ds1_s2uRX]
        case ds_s2uRW of {
          GHC.Word.W8# x#_s2uRZ [Occ=Once] ->
              case ds1_s2uRX of {
                GHC.Word.W8# y#_s2uS1 [Occ=Once] ->
                    case timesWord# [x#_s2uRZ y#_s2uS1] of sat_s2uS2 {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2uS2] of sat_s2uS3 {
                            __DEFAULT -> GHC.Word.W8# [sat_s2uS3];
                          };
                    };
              };
        };

GHC.Word.$fNumWord8_$c-
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uS4 ds1_s2uS5]
        case ds_s2uS4 of {
          GHC.Word.W8# x#_s2uS7 [Occ=Once] ->
              case ds1_s2uS5 of {
                GHC.Word.W8# y#_s2uS9 [Occ=Once] ->
                    case minusWord# [x#_s2uS7 y#_s2uS9] of sat_s2uSa {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2uSa] of sat_s2uSb {
                            __DEFAULT -> GHC.Word.W8# [sat_s2uSb];
                          };
                    };
              };
        };

GHC.Word.$fNumWord8_$c+
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uSc ds1_s2uSd]
        case ds_s2uSc of {
          GHC.Word.W8# x#_s2uSf [Occ=Once] ->
              case ds1_s2uSd of {
                GHC.Word.W8# y#_s2uSh [Occ=Once] ->
                    case plusWord# [x#_s2uSf y#_s2uSh] of sat_s2uSi {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2uSi] of sat_s2uSj {
                            __DEFAULT -> GHC.Word.W8# [sat_s2uSj];
                          };
                    };
              };
        };

GHC.Word.$ctoInteger :: GHC.Word.Word8 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uSk]
        case ds_s2uSk of {
          GHC.Word.W8# x#_s2uSm [Occ=Once] ->
              case word2Int# [x#_s2uSm] of sat_s2uSn {
                __DEFAULT -> GHC.Integer.Type.smallInteger sat_s2uSn;
              };
        };

GHC.Word.$fBitsWord8_$cpopCount :: GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uSo]
        case ds_s2uSo of {
          GHC.Word.W8# x#_s2uSq [Occ=Once] ->
              case popCnt8# [x#_s2uSq] of sat_s2uSr {
                __DEFAULT ->
                    case word2Int# [sat_s2uSr] of sat_s2uSs {
                      __DEFAULT -> GHC.Types.I# [sat_s2uSs];
                    };
              };
        };

GHC.Word.$fBitsWord8_$cunsafeShiftR
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uSt ds1_s2uSu]
        case ds_s2uSt of {
          GHC.Word.W8# x#_s2uSw [Occ=Once] ->
              case ds1_s2uSu of {
                GHC.Types.I# i#_s2uSy [Occ=Once] ->
                    case uncheckedShiftRL# [x#_s2uSw i#_s2uSy] of sat_s2uSz {
                      __DEFAULT -> GHC.Word.W8# [sat_s2uSz];
                    };
              };
        };

GHC.Word.$fBitsWord8_$cshiftR
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uSA ds1_s2uSB]
        case ds_s2uSA of {
          GHC.Word.W8# x#_s2uSD [Occ=Once] ->
              case ds1_s2uSB of {
                GHC.Types.I# i#_s2uSF ->
                    case >=# [i#_s2uSF 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftRL# [x#_s2uSD i#_s2uSF] of sat_s2uSH {
                            __DEFAULT -> GHC.Word.W8# [sat_s2uSH];
                          };
                      1# -> GHC.Word.$fBitsWord8_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord8_$cunsafeShiftL
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uSI ds1_s2uSJ]
        case ds_s2uSI of {
          GHC.Word.W8# x#_s2uSL [Occ=Once] ->
              case ds1_s2uSJ of {
                GHC.Types.I# i#_s2uSN [Occ=Once] ->
                    case uncheckedShiftL# [x#_s2uSL i#_s2uSN] of sat_s2uSO {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2uSO] of sat_s2uSP {
                            __DEFAULT -> GHC.Word.W8# [sat_s2uSP];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord8_$cshiftL
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uSQ ds1_s2uSR]
        case ds_s2uSQ of {
          GHC.Word.W8# x#_s2uST [Occ=Once] ->
              case ds1_s2uSR of {
                GHC.Types.I# i#_s2uSV ->
                    case >=# [i#_s2uSV 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [x#_s2uST i#_s2uSV] of sat_s2uSX {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2uSX] of sat_s2uSY {
                                  __DEFAULT -> GHC.Word.W8# [sat_s2uSY];
                                };
                          };
                      1# -> GHC.Word.$fBitsWord8_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord8_$cisSigned :: GHC.Word.Word8 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s2uSZ] GHC.Types.False [];

GHC.Word.$fBitsWord8_$crotate
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uT0 ds1_s2uT1]
        case ds_s2uT0 of wild_s2uT2 {
          GHC.Word.W8# x#_s2uT3 ->
              case ds1_s2uT1 of {
                GHC.Types.I# i#_s2uT5 [Occ=Once] ->
                    case int2Word# [i#_s2uT5] of sat_s2uT6 {
                      __DEFAULT ->
                          case and# [sat_s2uT6 7##] of sat_s2uT7 {
                            __DEFAULT ->
                                case word2Int# [sat_s2uT7] of wild2_s2uT8 {
                                  __DEFAULT ->
                                      case -# [8# wild2_s2uT8] of sat_s2uTa {
                                        __DEFAULT ->
                                            case
                                                uncheckedShiftRL# [x#_s2uT3 sat_s2uTa]
                                            of
                                            sat_s2uTb
                                            { __DEFAULT ->
                                                  case
                                                      uncheckedShiftL# [x#_s2uT3 wild2_s2uT8]
                                                  of
                                                  sat_s2uT9
                                                  { __DEFAULT ->
                                                        case
                                                            or# [sat_s2uT9 sat_s2uTb]
                                                        of
                                                        sat_s2uTc
                                                        { __DEFAULT ->
                                                              case
                                                                  narrow8Word# [sat_s2uTc]
                                                              of
                                                              sat_s2uTd
                                                              { __DEFAULT ->
                                                                    GHC.Word.W8# [sat_s2uTd];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s2uT2;
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord8_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uTe ds1_s2uTf]
        case ds_s2uTe of {
          GHC.Word.W8# x#_s2uTh [Occ=Once*] ->
              case ds1_s2uTf of {
                GHC.Types.I# i#_s2uTj ->
                    case >=# [i#_s2uTj 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s2uTj] of b_s2uTl [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s2uTl 64#] of {
                                  __DEFAULT ->
                                      case uncheckedShiftRL# [x#_s2uTh b_s2uTl] of sat_s2uTn {
                                        __DEFAULT -> GHC.Word.W8# [sat_s2uTn];
                                      };
                                  1# -> GHC.Word.$fBitsWord8_$cminBound;
                                };
                          };
                      1# ->
                          case >=# [i#_s2uTj 64#] of {
                            __DEFAULT ->
                                case uncheckedShiftL# [x#_s2uTh i#_s2uTj] of sat_s2uTp {
                                  __DEFAULT ->
                                      case narrow8Word# [sat_s2uTp] of sat_s2uTq {
                                        __DEFAULT -> GHC.Word.W8# [sat_s2uTq];
                                      };
                                };
                            1# -> GHC.Word.$fBitsWord8_$cminBound;
                          };
                    };
              };
        };

GHC.Word.$fBitsWord8_$cxor
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uTr ds1_s2uTs]
        case ds_s2uTr of {
          GHC.Word.W8# x#_s2uTu [Occ=Once] ->
              case ds1_s2uTs of {
                GHC.Word.W8# y#_s2uTw [Occ=Once] ->
                    case xor# [x#_s2uTu y#_s2uTw] of sat_s2uTx {
                      __DEFAULT -> GHC.Word.W8# [sat_s2uTx];
                    };
              };
        };

GHC.Word.$fBitsWord8_$c.|.
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uTy ds1_s2uTz]
        case ds_s2uTy of {
          GHC.Word.W8# x#_s2uTB [Occ=Once] ->
              case ds1_s2uTz of {
                GHC.Word.W8# y#_s2uTD [Occ=Once] ->
                    case or# [x#_s2uTB y#_s2uTD] of sat_s2uTE {
                      __DEFAULT -> GHC.Word.W8# [sat_s2uTE];
                    };
              };
        };

GHC.Word.$fBitsWord8_$c.&.
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uTF ds1_s2uTG]
        case ds_s2uTF of {
          GHC.Word.W8# x#_s2uTI [Occ=Once] ->
              case ds1_s2uTG of {
                GHC.Word.W8# y#_s2uTK [Occ=Once] ->
                    case and# [x#_s2uTI y#_s2uTK] of sat_s2uTL {
                      __DEFAULT -> GHC.Word.W8# [sat_s2uTL];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord8_$ccountTrailingZeros
  :: GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uTM]
        case ds_s2uTM of {
          GHC.Word.W8# x#_s2uTO [Occ=Once] ->
              case ctz8# [x#_s2uTO] of sat_s2uTP {
                __DEFAULT ->
                    case word2Int# [sat_s2uTP] of sat_s2uTQ {
                      __DEFAULT -> GHC.Types.I# [sat_s2uTQ];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord8_$ccountLeadingZeros
  :: GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uTR]
        case ds_s2uTR of {
          GHC.Word.W8# x#_s2uTT [Occ=Once] ->
              case clz8# [x#_s2uTT] of sat_s2uTU {
                __DEFAULT ->
                    case word2Int# [sat_s2uTU] of sat_s2uTV {
                      __DEFAULT -> GHC.Types.I# [sat_s2uTV];
                    };
              };
        };

GHC.Word.$fBitsWord9 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

GHC.Word.$fBitsWord8_$cfiniteBitSize
  :: GHC.Word.Word8 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s2uTW] GHC.Word.$fBitsWord9;

GHC.Word.$fNumWord16_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Word.Word16
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s2uTX]
        case GHC.Integer.Type.integerToWord i_s2uTX of wild_s2uTY {
          __DEFAULT ->
              case narrow16Word# [wild_s2uTY] of sat_s2uTZ {
                __DEFAULT -> GHC.Word.W16# [sat_s2uTZ];
              };
        };

GHC.Word.$fNumWord16_$cabs :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_s2uU0] x_s2uU0;

GHC.Word.$fNumWord16_$cnegate :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uU1]
        case ds_s2uU1 of {
          GHC.Word.W16# x#_s2uU3 [Occ=Once] ->
              case word2Int# [x#_s2uU3] of sat_s2uU4 {
                __DEFAULT ->
                    case negateInt# [sat_s2uU4] of sat_s2uU5 {
                      __DEFAULT ->
                          case int2Word# [sat_s2uU5] of sat_s2uU6 {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2uU6] of sat_s2uU7 {
                                  __DEFAULT -> GHC.Word.W16# [sat_s2uU7];
                                };
                          };
                    };
              };
        };

GHC.Word.$fNumWord16_$c*
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uU8 ds1_s2uU9]
        case ds_s2uU8 of {
          GHC.Word.W16# x#_s2uUb [Occ=Once] ->
              case ds1_s2uU9 of {
                GHC.Word.W16# y#_s2uUd [Occ=Once] ->
                    case timesWord# [x#_s2uUb y#_s2uUd] of sat_s2uUe {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2uUe] of sat_s2uUf {
                            __DEFAULT -> GHC.Word.W16# [sat_s2uUf];
                          };
                    };
              };
        };

GHC.Word.$fNumWord16_$c-
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uUg ds1_s2uUh]
        case ds_s2uUg of {
          GHC.Word.W16# x#_s2uUj [Occ=Once] ->
              case ds1_s2uUh of {
                GHC.Word.W16# y#_s2uUl [Occ=Once] ->
                    case minusWord# [x#_s2uUj y#_s2uUl] of sat_s2uUm {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2uUm] of sat_s2uUn {
                            __DEFAULT -> GHC.Word.W16# [sat_s2uUn];
                          };
                    };
              };
        };

GHC.Word.$fNumWord16_$c+
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uUo ds1_s2uUp]
        case ds_s2uUo of {
          GHC.Word.W16# x#_s2uUr [Occ=Once] ->
              case ds1_s2uUp of {
                GHC.Word.W16# y#_s2uUt [Occ=Once] ->
                    case plusWord# [x#_s2uUr y#_s2uUt] of sat_s2uUu {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2uUu] of sat_s2uUv {
                            __DEFAULT -> GHC.Word.W16# [sat_s2uUv];
                          };
                    };
              };
        };

GHC.Word.$ctoInteger1
  :: GHC.Word.Word16 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uUw]
        case ds_s2uUw of {
          GHC.Word.W16# x#_s2uUy [Occ=Once] ->
              case word2Int# [x#_s2uUy] of sat_s2uUz {
                __DEFAULT -> GHC.Integer.Type.smallInteger sat_s2uUz;
              };
        };

GHC.Word.$fBitsWord16_$cpopCount
  :: GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uUA]
        case ds_s2uUA of {
          GHC.Word.W16# x#_s2uUC [Occ=Once] ->
              case popCnt16# [x#_s2uUC] of sat_s2uUD {
                __DEFAULT ->
                    case word2Int# [sat_s2uUD] of sat_s2uUE {
                      __DEFAULT -> GHC.Types.I# [sat_s2uUE];
                    };
              };
        };

GHC.Word.$fBitsWord16_$cunsafeShiftR
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uUF ds1_s2uUG]
        case ds_s2uUF of {
          GHC.Word.W16# x#_s2uUI [Occ=Once] ->
              case ds1_s2uUG of {
                GHC.Types.I# i#_s2uUK [Occ=Once] ->
                    case uncheckedShiftRL# [x#_s2uUI i#_s2uUK] of sat_s2uUL {
                      __DEFAULT -> GHC.Word.W16# [sat_s2uUL];
                    };
              };
        };

GHC.Word.$fBitsWord16_$cshiftR
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uUM ds1_s2uUN]
        case ds_s2uUM of {
          GHC.Word.W16# x#_s2uUP [Occ=Once] ->
              case ds1_s2uUN of {
                GHC.Types.I# i#_s2uUR ->
                    case >=# [i#_s2uUR 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftRL# [x#_s2uUP i#_s2uUR] of sat_s2uUT {
                            __DEFAULT -> GHC.Word.W16# [sat_s2uUT];
                          };
                      1# -> GHC.Word.$fBitsWord16_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord16_$cunsafeShiftL
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uUU ds1_s2uUV]
        case ds_s2uUU of {
          GHC.Word.W16# x#_s2uUX [Occ=Once] ->
              case ds1_s2uUV of {
                GHC.Types.I# i#_s2uUZ [Occ=Once] ->
                    case uncheckedShiftL# [x#_s2uUX i#_s2uUZ] of sat_s2uV0 {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2uV0] of sat_s2uV1 {
                            __DEFAULT -> GHC.Word.W16# [sat_s2uV1];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord16_$cshiftL
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uV2 ds1_s2uV3]
        case ds_s2uV2 of {
          GHC.Word.W16# x#_s2uV5 [Occ=Once] ->
              case ds1_s2uV3 of {
                GHC.Types.I# i#_s2uV7 ->
                    case >=# [i#_s2uV7 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [x#_s2uV5 i#_s2uV7] of sat_s2uV9 {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2uV9] of sat_s2uVa {
                                  __DEFAULT -> GHC.Word.W16# [sat_s2uVa];
                                };
                          };
                      1# -> GHC.Word.$fBitsWord16_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord16_$cisSigned
  :: GHC.Word.Word16 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s2uVb] GHC.Types.False [];

GHC.Word.$fBitsWord16_$crotate
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uVc ds1_s2uVd]
        case ds_s2uVc of wild_s2uVe {
          GHC.Word.W16# x#_s2uVf ->
              case ds1_s2uVd of {
                GHC.Types.I# i#_s2uVh [Occ=Once] ->
                    case int2Word# [i#_s2uVh] of sat_s2uVi {
                      __DEFAULT ->
                          case and# [sat_s2uVi 15##] of sat_s2uVj {
                            __DEFAULT ->
                                case word2Int# [sat_s2uVj] of wild2_s2uVk {
                                  __DEFAULT ->
                                      case -# [16# wild2_s2uVk] of sat_s2uVm {
                                        __DEFAULT ->
                                            case
                                                uncheckedShiftRL# [x#_s2uVf sat_s2uVm]
                                            of
                                            sat_s2uVn
                                            { __DEFAULT ->
                                                  case
                                                      uncheckedShiftL# [x#_s2uVf wild2_s2uVk]
                                                  of
                                                  sat_s2uVl
                                                  { __DEFAULT ->
                                                        case
                                                            or# [sat_s2uVl sat_s2uVn]
                                                        of
                                                        sat_s2uVo
                                                        { __DEFAULT ->
                                                              case
                                                                  narrow16Word# [sat_s2uVo]
                                                              of
                                                              sat_s2uVp
                                                              { __DEFAULT ->
                                                                    GHC.Word.W16# [sat_s2uVp];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s2uVe;
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord16_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uVq ds1_s2uVr]
        case ds_s2uVq of {
          GHC.Word.W16# x#_s2uVt [Occ=Once*] ->
              case ds1_s2uVr of {
                GHC.Types.I# i#_s2uVv ->
                    case >=# [i#_s2uVv 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s2uVv] of b_s2uVx [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s2uVx 64#] of {
                                  __DEFAULT ->
                                      case uncheckedShiftRL# [x#_s2uVt b_s2uVx] of sat_s2uVz {
                                        __DEFAULT -> GHC.Word.W16# [sat_s2uVz];
                                      };
                                  1# -> GHC.Word.$fBitsWord16_$cminBound;
                                };
                          };
                      1# ->
                          case >=# [i#_s2uVv 64#] of {
                            __DEFAULT ->
                                case uncheckedShiftL# [x#_s2uVt i#_s2uVv] of sat_s2uVB {
                                  __DEFAULT ->
                                      case narrow16Word# [sat_s2uVB] of sat_s2uVC {
                                        __DEFAULT -> GHC.Word.W16# [sat_s2uVC];
                                      };
                                };
                            1# -> GHC.Word.$fBitsWord16_$cminBound;
                          };
                    };
              };
        };

GHC.Word.$fBitsWord16_$cxor
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uVD ds1_s2uVE]
        case ds_s2uVD of {
          GHC.Word.W16# x#_s2uVG [Occ=Once] ->
              case ds1_s2uVE of {
                GHC.Word.W16# y#_s2uVI [Occ=Once] ->
                    case xor# [x#_s2uVG y#_s2uVI] of sat_s2uVJ {
                      __DEFAULT -> GHC.Word.W16# [sat_s2uVJ];
                    };
              };
        };

GHC.Word.$fBitsWord16_$c.|.
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uVK ds1_s2uVL]
        case ds_s2uVK of {
          GHC.Word.W16# x#_s2uVN [Occ=Once] ->
              case ds1_s2uVL of {
                GHC.Word.W16# y#_s2uVP [Occ=Once] ->
                    case or# [x#_s2uVN y#_s2uVP] of sat_s2uVQ {
                      __DEFAULT -> GHC.Word.W16# [sat_s2uVQ];
                    };
              };
        };

GHC.Word.$fBitsWord16_$c.&.
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uVR ds1_s2uVS]
        case ds_s2uVR of {
          GHC.Word.W16# x#_s2uVU [Occ=Once] ->
              case ds1_s2uVS of {
                GHC.Word.W16# y#_s2uVW [Occ=Once] ->
                    case and# [x#_s2uVU y#_s2uVW] of sat_s2uVX {
                      __DEFAULT -> GHC.Word.W16# [sat_s2uVX];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord16_$ccountTrailingZeros
  :: GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uVY]
        case ds_s2uVY of {
          GHC.Word.W16# x#_s2uW0 [Occ=Once] ->
              case ctz16# [x#_s2uW0] of sat_s2uW1 {
                __DEFAULT ->
                    case word2Int# [sat_s2uW1] of sat_s2uW2 {
                      __DEFAULT -> GHC.Types.I# [sat_s2uW2];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord16_$ccountLeadingZeros
  :: GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uW3]
        case ds_s2uW3 of {
          GHC.Word.W16# x#_s2uW5 [Occ=Once] ->
              case clz16# [x#_s2uW5] of sat_s2uW6 {
                __DEFAULT ->
                    case word2Int# [sat_s2uW6] of sat_s2uW7 {
                      __DEFAULT -> GHC.Types.I# [sat_s2uW7];
                    };
              };
        };

GHC.Word.$fBitsWord1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

GHC.Word.$fBitsWord16_$cfiniteBitSize
  :: GHC.Word.Word16 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s2uW8] GHC.Word.$fBitsWord1;

GHC.Word.$fNumWord32_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Word.Word32
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s2uW9]
        case GHC.Integer.Type.integerToWord i_s2uW9 of wild_s2uWa {
          __DEFAULT ->
              case narrow32Word# [wild_s2uWa] of sat_s2uWb {
                __DEFAULT -> GHC.Word.W32# [sat_s2uWb];
              };
        };

GHC.Word.$fNumWord32_$cabs :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_s2uWc] x_s2uWc;

GHC.Word.$fNumWord32_$cnegate :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uWd]
        case ds_s2uWd of {
          GHC.Word.W32# x#_s2uWf [Occ=Once] ->
              case word2Int# [x#_s2uWf] of sat_s2uWg {
                __DEFAULT ->
                    case negateInt# [sat_s2uWg] of sat_s2uWh {
                      __DEFAULT ->
                          case int2Word# [sat_s2uWh] of sat_s2uWi {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2uWi] of sat_s2uWj {
                                  __DEFAULT -> GHC.Word.W32# [sat_s2uWj];
                                };
                          };
                    };
              };
        };

GHC.Word.$fNumWord32_$c*
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uWk ds1_s2uWl]
        case ds_s2uWk of {
          GHC.Word.W32# x#_s2uWn [Occ=Once] ->
              case ds1_s2uWl of {
                GHC.Word.W32# y#_s2uWp [Occ=Once] ->
                    case timesWord# [x#_s2uWn y#_s2uWp] of sat_s2uWq {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2uWq] of sat_s2uWr {
                            __DEFAULT -> GHC.Word.W32# [sat_s2uWr];
                          };
                    };
              };
        };

GHC.Word.$fNumWord32_$c-
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uWs ds1_s2uWt]
        case ds_s2uWs of {
          GHC.Word.W32# x#_s2uWv [Occ=Once] ->
              case ds1_s2uWt of {
                GHC.Word.W32# y#_s2uWx [Occ=Once] ->
                    case minusWord# [x#_s2uWv y#_s2uWx] of sat_s2uWy {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2uWy] of sat_s2uWz {
                            __DEFAULT -> GHC.Word.W32# [sat_s2uWz];
                          };
                    };
              };
        };

GHC.Word.$fNumWord32_$c+
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uWA ds1_s2uWB]
        case ds_s2uWA of {
          GHC.Word.W32# x#_s2uWD [Occ=Once] ->
              case ds1_s2uWB of {
                GHC.Word.W32# y#_s2uWF [Occ=Once] ->
                    case plusWord# [x#_s2uWD y#_s2uWF] of sat_s2uWG {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2uWG] of sat_s2uWH {
                            __DEFAULT -> GHC.Word.W32# [sat_s2uWH];
                          };
                    };
              };
        };

GHC.Word.$ctoInteger2
  :: GHC.Word.Word32 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uWI]
        case ds_s2uWI of {
          GHC.Word.W32# x#_s2uWK [Occ=Once] ->
              case word2Int# [x#_s2uWK] of sat_s2uWL {
                __DEFAULT -> GHC.Integer.Type.smallInteger sat_s2uWL;
              };
        };

GHC.Word.$fBitsWord32_$cpopCount
  :: GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uWM]
        case ds_s2uWM of {
          GHC.Word.W32# x#_s2uWO [Occ=Once] ->
              case popCnt32# [x#_s2uWO] of sat_s2uWP {
                __DEFAULT ->
                    case word2Int# [sat_s2uWP] of sat_s2uWQ {
                      __DEFAULT -> GHC.Types.I# [sat_s2uWQ];
                    };
              };
        };

GHC.Word.$fBitsWord32_$cunsafeShiftR
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uWR ds1_s2uWS]
        case ds_s2uWR of {
          GHC.Word.W32# x#_s2uWU [Occ=Once] ->
              case ds1_s2uWS of {
                GHC.Types.I# i#_s2uWW [Occ=Once] ->
                    case uncheckedShiftRL# [x#_s2uWU i#_s2uWW] of sat_s2uWX {
                      __DEFAULT -> GHC.Word.W32# [sat_s2uWX];
                    };
              };
        };

GHC.Word.$fBitsWord32_$cshiftR
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uWY ds1_s2uWZ]
        case ds_s2uWY of {
          GHC.Word.W32# x#_s2uX1 [Occ=Once] ->
              case ds1_s2uWZ of {
                GHC.Types.I# i#_s2uX3 ->
                    case >=# [i#_s2uX3 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftRL# [x#_s2uX1 i#_s2uX3] of sat_s2uX5 {
                            __DEFAULT -> GHC.Word.W32# [sat_s2uX5];
                          };
                      1# -> GHC.Word.$fBitsWord32_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord32_$cunsafeShiftL
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uX6 ds1_s2uX7]
        case ds_s2uX6 of {
          GHC.Word.W32# x#_s2uX9 [Occ=Once] ->
              case ds1_s2uX7 of {
                GHC.Types.I# i#_s2uXb [Occ=Once] ->
                    case uncheckedShiftL# [x#_s2uX9 i#_s2uXb] of sat_s2uXc {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2uXc] of sat_s2uXd {
                            __DEFAULT -> GHC.Word.W32# [sat_s2uXd];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord32_$cshiftL
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uXe ds1_s2uXf]
        case ds_s2uXe of {
          GHC.Word.W32# x#_s2uXh [Occ=Once] ->
              case ds1_s2uXf of {
                GHC.Types.I# i#_s2uXj ->
                    case >=# [i#_s2uXj 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [x#_s2uXh i#_s2uXj] of sat_s2uXl {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2uXl] of sat_s2uXm {
                                  __DEFAULT -> GHC.Word.W32# [sat_s2uXm];
                                };
                          };
                      1# -> GHC.Word.$fBitsWord32_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord32_$cisSigned
  :: GHC.Word.Word32 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s2uXn] GHC.Types.False [];

GHC.Word.$fBitsWord32_$crotate
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uXo ds1_s2uXp]
        case ds_s2uXo of wild_s2uXq {
          GHC.Word.W32# x#_s2uXr ->
              case ds1_s2uXp of {
                GHC.Types.I# i#_s2uXt [Occ=Once] ->
                    case int2Word# [i#_s2uXt] of sat_s2uXu {
                      __DEFAULT ->
                          case and# [sat_s2uXu 31##] of sat_s2uXv {
                            __DEFAULT ->
                                case word2Int# [sat_s2uXv] of wild2_s2uXw {
                                  __DEFAULT ->
                                      case -# [32# wild2_s2uXw] of sat_s2uXy {
                                        __DEFAULT ->
                                            case
                                                uncheckedShiftRL# [x#_s2uXr sat_s2uXy]
                                            of
                                            sat_s2uXz
                                            { __DEFAULT ->
                                                  case
                                                      uncheckedShiftL# [x#_s2uXr wild2_s2uXw]
                                                  of
                                                  sat_s2uXx
                                                  { __DEFAULT ->
                                                        case
                                                            or# [sat_s2uXx sat_s2uXz]
                                                        of
                                                        sat_s2uXA
                                                        { __DEFAULT ->
                                                              case
                                                                  narrow32Word# [sat_s2uXA]
                                                              of
                                                              sat_s2uXB
                                                              { __DEFAULT ->
                                                                    GHC.Word.W32# [sat_s2uXB];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s2uXq;
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord32_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uXC ds1_s2uXD]
        case ds_s2uXC of {
          GHC.Word.W32# x#_s2uXF [Occ=Once*] ->
              case ds1_s2uXD of {
                GHC.Types.I# i#_s2uXH ->
                    case >=# [i#_s2uXH 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s2uXH] of b_s2uXJ [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s2uXJ 64#] of {
                                  __DEFAULT ->
                                      case uncheckedShiftRL# [x#_s2uXF b_s2uXJ] of sat_s2uXL {
                                        __DEFAULT -> GHC.Word.W32# [sat_s2uXL];
                                      };
                                  1# -> GHC.Word.$fBitsWord32_$cminBound;
                                };
                          };
                      1# ->
                          case >=# [i#_s2uXH 64#] of {
                            __DEFAULT ->
                                case uncheckedShiftL# [x#_s2uXF i#_s2uXH] of sat_s2uXN {
                                  __DEFAULT ->
                                      case narrow32Word# [sat_s2uXN] of sat_s2uXO {
                                        __DEFAULT -> GHC.Word.W32# [sat_s2uXO];
                                      };
                                };
                            1# -> GHC.Word.$fBitsWord32_$cminBound;
                          };
                    };
              };
        };

GHC.Word.$fBitsWord32_$cxor
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uXP ds1_s2uXQ]
        case ds_s2uXP of {
          GHC.Word.W32# x#_s2uXS [Occ=Once] ->
              case ds1_s2uXQ of {
                GHC.Word.W32# y#_s2uXU [Occ=Once] ->
                    case xor# [x#_s2uXS y#_s2uXU] of sat_s2uXV {
                      __DEFAULT -> GHC.Word.W32# [sat_s2uXV];
                    };
              };
        };

GHC.Word.$fBitsWord32_$c.|.
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uXW ds1_s2uXX]
        case ds_s2uXW of {
          GHC.Word.W32# x#_s2uXZ [Occ=Once] ->
              case ds1_s2uXX of {
                GHC.Word.W32# y#_s2uY1 [Occ=Once] ->
                    case or# [x#_s2uXZ y#_s2uY1] of sat_s2uY2 {
                      __DEFAULT -> GHC.Word.W32# [sat_s2uY2];
                    };
              };
        };

GHC.Word.$fBitsWord32_$c.&.
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uY3 ds1_s2uY4]
        case ds_s2uY3 of {
          GHC.Word.W32# x#_s2uY6 [Occ=Once] ->
              case ds1_s2uY4 of {
                GHC.Word.W32# y#_s2uY8 [Occ=Once] ->
                    case and# [x#_s2uY6 y#_s2uY8] of sat_s2uY9 {
                      __DEFAULT -> GHC.Word.W32# [sat_s2uY9];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros
  :: GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uYa]
        case ds_s2uYa of {
          GHC.Word.W32# x#_s2uYc [Occ=Once] ->
              case ctz32# [x#_s2uYc] of sat_s2uYd {
                __DEFAULT ->
                    case word2Int# [sat_s2uYd] of sat_s2uYe {
                      __DEFAULT -> GHC.Types.I# [sat_s2uYe];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros
  :: GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uYf]
        case ds_s2uYf of {
          GHC.Word.W32# x#_s2uYh [Occ=Once] ->
              case clz32# [x#_s2uYh] of sat_s2uYi {
                __DEFAULT ->
                    case word2Int# [sat_s2uYi] of sat_s2uYj {
                      __DEFAULT -> GHC.Types.I# [sat_s2uYj];
                    };
              };
        };

GHC.Word.$fBitsWord3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [32#];

GHC.Word.$fBitsWord32_$cfiniteBitSize
  :: GHC.Word.Word32 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s2uYk] GHC.Word.$fBitsWord3;

GHC.Word.$fBitsWord64_$cpopCount
  :: GHC.Word.Word64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uYl]
        case ds_s2uYl of {
          GHC.Word.W64# x#_s2uYn [Occ=Once] ->
              case popCnt64# [x#_s2uYn] of sat_s2uYo {
                __DEFAULT ->
                    case word2Int# [sat_s2uYo] of sat_s2uYp {
                      __DEFAULT -> GHC.Types.I# [sat_s2uYp];
                    };
              };
        };

GHC.Word.$fBitsWord64_$cunsafeShiftR
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uYq ds1_s2uYr]
        case ds_s2uYq of {
          GHC.Word.W64# x#_s2uYt [Occ=Once] ->
              case ds1_s2uYr of {
                GHC.Types.I# i#_s2uYv [Occ=Once] ->
                    case uncheckedShiftRL# [x#_s2uYt i#_s2uYv] of sat_s2uYw {
                      __DEFAULT -> GHC.Word.W64# [sat_s2uYw];
                    };
              };
        };

GHC.Word.$fBitsWord64_$cshiftR
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uYx ds1_s2uYy]
        case ds_s2uYx of {
          GHC.Word.W64# x#_s2uYA [Occ=Once] ->
              case ds1_s2uYy of {
                GHC.Types.I# i#_s2uYC ->
                    case >=# [i#_s2uYC 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftRL# [x#_s2uYA i#_s2uYC] of sat_s2uYE {
                            __DEFAULT -> GHC.Word.W64# [sat_s2uYE];
                          };
                      1# -> GHC.Word.$fBitsWord7;
                    };
              };
        };

GHC.Word.$fBitsWord64_$cunsafeShiftL
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uYF ds1_s2uYG]
        case ds_s2uYF of {
          GHC.Word.W64# x#_s2uYI [Occ=Once] ->
              case ds1_s2uYG of {
                GHC.Types.I# i#_s2uYK [Occ=Once] ->
                    case uncheckedShiftL# [x#_s2uYI i#_s2uYK] of sat_s2uYL {
                      __DEFAULT -> GHC.Word.W64# [sat_s2uYL];
                    };
              };
        };

GHC.Word.$fBitsWord64_$cshiftL
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uYM ds1_s2uYN]
        case ds_s2uYM of {
          GHC.Word.W64# x#_s2uYP [Occ=Once] ->
              case ds1_s2uYN of {
                GHC.Types.I# i#_s2uYR ->
                    case >=# [i#_s2uYR 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [x#_s2uYP i#_s2uYR] of sat_s2uYT {
                            __DEFAULT -> GHC.Word.W64# [sat_s2uYT];
                          };
                      1# -> GHC.Word.$fBitsWord7;
                    };
              };
        };

GHC.Word.$fBitsWord64_$cisSigned
  :: GHC.Word.Word64 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s2uYU] GHC.Types.False [];

GHC.Word.$fBitsWord64_$crotate
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uYV ds1_s2uYW]
        case ds_s2uYV of wild_s2uYX {
          GHC.Word.W64# x#_s2uYY ->
              case ds1_s2uYW of {
                GHC.Types.I# i#_s2uZ0 [Occ=Once] ->
                    case int2Word# [i#_s2uZ0] of sat_s2uZ1 {
                      __DEFAULT ->
                          case and# [sat_s2uZ1 63##] of sat_s2uZ2 {
                            __DEFAULT ->
                                case word2Int# [sat_s2uZ2] of wild2_s2uZ3 {
                                  __DEFAULT ->
                                      case -# [64# wild2_s2uZ3] of sat_s2uZ5 {
                                        __DEFAULT ->
                                            case
                                                uncheckedShiftRL# [x#_s2uYY sat_s2uZ5]
                                            of
                                            sat_s2uZ6
                                            { __DEFAULT ->
                                                  case
                                                      uncheckedShiftL# [x#_s2uYY wild2_s2uZ3]
                                                  of
                                                  sat_s2uZ4
                                                  { __DEFAULT ->
                                                        case
                                                            or# [sat_s2uZ4 sat_s2uZ6]
                                                        of
                                                        sat_s2uZ7
                                                        { __DEFAULT -> GHC.Word.W64# [sat_s2uZ7];
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s2uYX;
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord64_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uZ8 ds1_s2uZ9]
        case ds_s2uZ8 of {
          GHC.Word.W64# x#_s2uZb [Occ=Once*] ->
              case ds1_s2uZ9 of {
                GHC.Types.I# i#_s2uZd ->
                    case >=# [i#_s2uZd 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s2uZd] of b_s2uZf [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s2uZf 64#] of {
                                  __DEFAULT ->
                                      case uncheckedShiftRL# [x#_s2uZb b_s2uZf] of sat_s2uZh {
                                        __DEFAULT -> GHC.Word.W64# [sat_s2uZh];
                                      };
                                  1# -> GHC.Word.$fBitsWord7;
                                };
                          };
                      1# ->
                          case >=# [i#_s2uZd 64#] of {
                            __DEFAULT ->
                                case uncheckedShiftL# [x#_s2uZb i#_s2uZd] of sat_s2uZj {
                                  __DEFAULT -> GHC.Word.W64# [sat_s2uZj];
                                };
                            1# -> GHC.Word.$fBitsWord7;
                          };
                    };
              };
        };

GHC.Word.$fBitsWord64_$cxor
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uZk ds1_s2uZl]
        case ds_s2uZk of {
          GHC.Word.W64# x#_s2uZn [Occ=Once] ->
              case ds1_s2uZl of {
                GHC.Word.W64# y#_s2uZp [Occ=Once] ->
                    case xor# [x#_s2uZn y#_s2uZp] of sat_s2uZq {
                      __DEFAULT -> GHC.Word.W64# [sat_s2uZq];
                    };
              };
        };

GHC.Word.$fBitsWord64_$c.|.
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uZr ds1_s2uZs]
        case ds_s2uZr of {
          GHC.Word.W64# x#_s2uZu [Occ=Once] ->
              case ds1_s2uZs of {
                GHC.Word.W64# y#_s2uZw [Occ=Once] ->
                    case or# [x#_s2uZu y#_s2uZw] of sat_s2uZx {
                      __DEFAULT -> GHC.Word.W64# [sat_s2uZx];
                    };
              };
        };

GHC.Word.$fBitsWord64_$c.&.
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uZy ds1_s2uZz]
        case ds_s2uZy of {
          GHC.Word.W64# x#_s2uZB [Occ=Once] ->
              case ds1_s2uZz of {
                GHC.Word.W64# y#_s2uZD [Occ=Once] ->
                    case and# [x#_s2uZB y#_s2uZD] of sat_s2uZE {
                      __DEFAULT -> GHC.Word.W64# [sat_s2uZE];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
  :: GHC.Word.Word64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uZF]
        case ds_s2uZF of {
          GHC.Word.W64# x#_s2uZH [Occ=Once] ->
              case ctz64# [x#_s2uZH] of sat_s2uZI {
                __DEFAULT ->
                    case word2Int# [sat_s2uZI] of sat_s2uZJ {
                      __DEFAULT -> GHC.Types.I# [sat_s2uZJ];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
  :: GHC.Word.Word64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uZK]
        case ds_s2uZK of {
          GHC.Word.W64# x#_s2uZM [Occ=Once] ->
              case clz64# [x#_s2uZM] of sat_s2uZN {
                __DEFAULT ->
                    case word2Int# [sat_s2uZN] of sat_s2uZO {
                      __DEFAULT -> GHC.Types.I# [sat_s2uZO];
                    };
              };
        };

GHC.Word.$fBitsWord5 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [64#];

GHC.Word.$fBitsWord64_$cfiniteBitSize
  :: GHC.Word.Word64 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s2uZP] GHC.Word.$fBitsWord5;

GHC.Word.eqWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uZQ ds1_s2uZR]
        case ds_s2uZQ of {
          GHC.Word.W8# x_s2uZT [Occ=Once] ->
              case ds1_s2uZR of {
                GHC.Word.W8# y_s2uZV [Occ=Once] ->
                    case eqWord# [x_s2uZT y_s2uZV] of sat_s2uZW {
                      __DEFAULT -> tagToEnum# [sat_s2uZW];
                    };
              };
        };

GHC.Word.$fEqWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Word.eqWord8
                                     GHC.Word.neWord8];

GHC.Word.$fNumWord4 :: GHC.Word.Word8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W8#! [1##];

GHC.Word.$fNumWord8_$csignum :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uZX]
        case ds_s2uZX of {
          GHC.Word.W8# x_s2uZZ [Occ=Once!] ->
              case x_s2uZZ of {
                __DEFAULT -> GHC.Word.$fNumWord4;
                0## -> GHC.Word.$fBitsWord8_$cminBound;
              };
        };

GHC.Word.$fNumWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Word.$fNumWord8_$c+
                                  GHC.Word.$fNumWord8_$c-
                                  GHC.Word.$fNumWord8_$c*
                                  GHC.Word.$fNumWord8_$cnegate
                                  GHC.Word.$fNumWord8_$cabs
                                  GHC.Word.$fNumWord8_$csignum
                                  GHC.Word.$fNumWord8_$cfromInteger];

GHC.Word.$fBitsWord8_$ccomplement
  :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v01]
        case ds_s2v01 of {
          GHC.Word.W8# x#_s2v03 [Occ=Once] ->
              case xor# [x#_s2v03 255##] of sat_s2v04 {
                __DEFAULT -> GHC.Word.W8# [sat_s2v04];
              };
        };

GHC.Word.$fBitsWord10 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Word.$fBitsWord9];

GHC.Word.$fBitsWord8_$cbitSizeMaybe
  :: GHC.Word.Word8 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s2v05] GHC.Word.$fBitsWord10;

GHC.Word.$fBitsWord8_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s2v06]
        case i_s2v06 of {
          GHC.Types.I# i#_s2v08 ->
              case >=# [i#_s2v08 64#] of {
                __DEFAULT ->
                    case uncheckedShiftL# [1## i#_s2v08] of sat_s2v0a {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2v0a] of sat_s2v0b {
                            __DEFAULT -> GHC.Word.W8# [sat_s2v0b];
                          };
                    };
                1# -> GHC.Word.$fBitsWord8_$cminBound;
              };
        };

GHC.Word.$fBitsWord8_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2v0c i_s2v0d]
        case x_s2v0c of {
          GHC.Word.W8# x#_s2v0f [Occ=Once] ->
              case i_s2v0d of {
                GHC.Types.I# i#_s2v0h ->
                    case >=# [i#_s2v0h 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v0h] of sat_s2v0j {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2v0j] of sat_s2v0k {
                                  __DEFAULT ->
                                      case and# [x#_s2v0f sat_s2v0k] of {
                                        __DEFAULT -> GHC.Types.True [];
                                        0## -> GHC.Types.False [];
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Word.$fBitsWord8_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v0m eta1_s2v0n]
        case eta_s2v0m of wild_s2v0o {
          GHC.Word.W8# x#_s2v0p ->
              case eta1_s2v0n of {
                GHC.Types.I# x1_s2v0r [Occ=Once] ->
                    case negateInt# [x1_s2v0r] of sat_s2v0s {
                      __DEFAULT ->
                          case int2Word# [sat_s2v0s] of sat_s2v0t {
                            __DEFAULT ->
                                case and# [sat_s2v0t 7##] of sat_s2v0u {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2v0u] of wild2_s2v0v {
                                        __DEFAULT ->
                                            case -# [8# wild2_s2v0v] of sat_s2v0x {
                                              __DEFAULT ->
                                                  case
                                                      uncheckedShiftRL# [x#_s2v0p sat_s2v0x]
                                                  of
                                                  sat_s2v0y
                                                  { __DEFAULT ->
                                                        case
                                                            uncheckedShiftL# [x#_s2v0p wild2_s2v0v]
                                                        of
                                                        sat_s2v0w
                                                        { __DEFAULT ->
                                                              case
                                                                  or# [sat_s2v0w sat_s2v0y]
                                                              of
                                                              sat_s2v0z
                                                              { __DEFAULT ->
                                                                    case
                                                                        narrow8Word# [sat_s2v0z]
                                                                    of
                                                                    sat_s2v0A
                                                                    { __DEFAULT ->
                                                                          GHC.Word.W8# [sat_s2v0A];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s2v0o;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord8_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Word.$fBitsWord8_$crotate eta_B2 eta_B1;

GHC.Word.$fBitsWord8_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v0B eta1_s2v0C]
        case eta_s2v0B of wild_s2v0D {
          GHC.Word.W8# x#_s2v0E [Occ=Once] ->
              case eta1_s2v0C of {
                GHC.Types.I# i#_s2v0G ->
                    case >=# [i#_s2v0G 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v0G] of sat_s2v0I {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2v0I] of sat_s2v0J {
                                  __DEFAULT ->
                                      case xor# [x#_s2v0E sat_s2v0J] of sat_s2v0K {
                                        __DEFAULT -> GHC.Word.W8# [sat_s2v0K];
                                      };
                                };
                          };
                      1# -> wild_s2v0D;
                    };
              };
        };

GHC.Word.$fBitsWord8_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v0L eta1_s2v0M]
        case eta_s2v0L of {
          GHC.Word.W8# x#_s2v0O [Occ=Once*] ->
              case eta1_s2v0M of {
                GHC.Types.I# i#_s2v0Q ->
                    case >=# [i#_s2v0Q 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v0Q] of sat_s2v0S {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2v0S] of sat_s2v0T {
                                  __DEFAULT ->
                                      case xor# [sat_s2v0T 255##] of sat_s2v0U {
                                        __DEFAULT ->
                                            case and# [x#_s2v0O sat_s2v0U] of sat_s2v0V {
                                              __DEFAULT -> GHC.Word.W8# [sat_s2v0V];
                                            };
                                      };
                                };
                          };
                      1# ->
                          case and# [x#_s2v0O 255##] of sat_s2v0W {
                            __DEFAULT -> GHC.Word.W8# [sat_s2v0W];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord8_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v0X eta1_s2v0Y]
        case eta_s2v0X of wild_s2v0Z {
          GHC.Word.W8# x#_s2v10 [Occ=Once] ->
              case eta1_s2v0Y of {
                GHC.Types.I# i#_s2v12 ->
                    case >=# [i#_s2v12 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v12] of sat_s2v14 {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2v14] of sat_s2v15 {
                                  __DEFAULT ->
                                      case or# [x#_s2v10 sat_s2v15] of sat_s2v16 {
                                        __DEFAULT -> GHC.Word.W8# [sat_s2v16];
                                      };
                                };
                          };
                      1# -> wild_s2v0Z;
                    };
              };
        };

GHC.Word.$fBitsWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Word.$fEqWord8
                                     GHC.Word.$fBitsWord8_$c.&.
                                     GHC.Word.$fBitsWord8_$c.|.
                                     GHC.Word.$fBitsWord8_$cxor
                                     GHC.Word.$fBitsWord8_$ccomplement
                                     GHC.Word.$fBitsWord8_$cshift
                                     GHC.Word.$fBitsWord8_$crotate
                                     GHC.Word.$fBitsWord8_$cminBound
                                     GHC.Word.$fBitsWord8_$cbit
                                     GHC.Word.$fBitsWord8_$csetBit
                                     GHC.Word.$fBitsWord8_$cclearBit
                                     GHC.Word.$fBitsWord8_$ccomplementBit
                                     GHC.Word.$fBitsWord8_$ctestBit
                                     GHC.Word.$fBitsWord8_$cbitSizeMaybe
                                     GHC.Word.$fBitsWord8_$cfiniteBitSize
                                     GHC.Word.$fBitsWord8_$cisSigned
                                     GHC.Word.$fBitsWord8_$cshiftL
                                     GHC.Word.$fBitsWord8_$cunsafeShiftL
                                     GHC.Word.$fBitsWord8_$cshiftR
                                     GHC.Word.$fBitsWord8_$cunsafeShiftR
                                     GHC.Word.$fBitsWord8_$crotateL
                                     GHC.Word.$fBitsWord8_$crotateR
                                     GHC.Word.$fBitsWord8_$cpopCount];

GHC.Word.$fFiniteBitsWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Word.$fBitsWord8
                                           GHC.Word.$fBitsWord8_$cfiniteBitSize
                                           GHC.Word.$fFiniteBitsWord8_$ccountLeadingZeros
                                           GHC.Word.$fFiniteBitsWord8_$ccountTrailingZeros];

GHC.Word.$fIntegralWord8_$cquot
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v17 y_s2v18]
        case ds_s2v17 of {
          GHC.Word.W8# x#_s2v1a [Occ=Once] ->
              case y_s2v18 of {
                GHC.Word.W8# y#_s2v1c [Occ=Once!] ->
                    case y#_s2v1c of wild2_s2v1d {
                      __DEFAULT ->
                          case quotWord# [x#_s2v1a wild2_s2v1d] of wild3_s2v1e {
                            __DEFAULT -> GHC.Word.W8# [wild3_s2v1e];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord8_$crem
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v1f y_s2v1g]
        case ds_s2v1f of {
          GHC.Word.W8# x#_s2v1i [Occ=Once] ->
              case y_s2v1g of {
                GHC.Word.W8# y#_s2v1k [Occ=Once!] ->
                    case y#_s2v1k of wild2_s2v1l {
                      __DEFAULT ->
                          case remWord# [x#_s2v1i wild2_s2v1l] of wild3_s2v1m {
                            __DEFAULT -> GHC.Word.W8# [wild3_s2v1m];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord8_$cquotRem
  :: GHC.Word.Word8
     -> GHC.Word.Word8 -> (GHC.Word.Word8, GHC.Word.Word8)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v1n y_s2v1o]
        case ds_s2v1n of {
          GHC.Word.W8# x#_s2v1q [Occ=Once] ->
              case y_s2v1o of {
                GHC.Word.W8# y#_s2v1s [Occ=Once!] ->
                    case y#_s2v1s of wild2_s2v1t {
                      __DEFAULT ->
                          case quotRemWord# [x#_s2v1q wild2_s2v1t] of {
                            (#,#) ipv_s2v1v [Occ=Once] ipv1_s2v1w [Occ=Once] ->
                                let {
                                  sat_s2v1y [Occ=Once] :: GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.Word.W8#! [ipv1_s2v1w]; } in
                                let {
                                  sat_s2v1x [Occ=Once] :: GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.Word.W8#! [ipv_s2v1v];
                                } in  (,) [sat_s2v1x sat_s2v1y];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord8_$cdivMod
  :: GHC.Word.Word8
     -> GHC.Word.Word8 -> (GHC.Word.Word8, GHC.Word.Word8)
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s2v1z y_s2v1A]
        case ds_s2v1z of {
          GHC.Word.W8# x#_s2v1C ->
              case y_s2v1A of {
                GHC.Word.W8# y#_s2v1E [Occ=Once!] ->
                    case y#_s2v1E of wild2_s2v1F {
                      __DEFAULT ->
                          let {
                            sat_s2v1J [Occ=Once] :: GHC.Word.Word8
                            [LclId] =
                                [x#_s2v1C wild2_s2v1F] \u []
                                    case remWord# [x#_s2v1C wild2_s2v1F] of wild3_s2v1I {
                                      __DEFAULT -> GHC.Word.W8# [wild3_s2v1I];
                                    }; } in
                          let {
                            sat_s2v1H [Occ=Once] :: GHC.Word.Word8
                            [LclId] =
                                [x#_s2v1C wild2_s2v1F] \u []
                                    case quotWord# [x#_s2v1C wild2_s2v1F] of wild3_s2v1G {
                                      __DEFAULT -> GHC.Word.W8# [wild3_s2v1G];
                                    };
                          } in  (,) [sat_s2v1H sat_s2v1J];
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.gtWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v1K ds1_s2v1L]
        case ds_s2v1K of {
          GHC.Word.W8# x_s2v1N [Occ=Once] ->
              case ds1_s2v1L of {
                GHC.Word.W8# y_s2v1P [Occ=Once] ->
                    case gtWord# [x_s2v1N y_s2v1P] of sat_s2v1Q {
                      __DEFAULT -> tagToEnum# [sat_s2v1Q];
                    };
              };
        };

GHC.Word.geWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v1R ds1_s2v1S]
        case ds_s2v1R of {
          GHC.Word.W8# x_s2v1U [Occ=Once] ->
              case ds1_s2v1S of {
                GHC.Word.W8# y_s2v1W [Occ=Once] ->
                    case geWord# [x_s2v1U y_s2v1W] of sat_s2v1X {
                      __DEFAULT -> tagToEnum# [sat_s2v1X];
                    };
              };
        };

GHC.Word.ltWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v1Y ds1_s2v1Z]
        case ds_s2v1Y of {
          GHC.Word.W8# x_s2v21 [Occ=Once] ->
              case ds1_s2v1Z of {
                GHC.Word.W8# y_s2v23 [Occ=Once] ->
                    case ltWord# [x_s2v21 y_s2v23] of sat_s2v24 {
                      __DEFAULT -> tagToEnum# [sat_s2v24];
                    };
              };
        };

GHC.Word.leWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v25 ds1_s2v26]
        case ds_s2v25 of {
          GHC.Word.W8# x_s2v28 [Occ=Once] ->
              case ds1_s2v26 of {
                GHC.Word.W8# y_s2v2a [Occ=Once] ->
                    case leWord# [x_s2v28 y_s2v2a] of sat_s2v2b {
                      __DEFAULT -> tagToEnum# [sat_s2v2b];
                    };
              };
        };

GHC.Word.$fOrdWord8_$ccompare
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2v2c y_s2v2d]
        case x_s2v2c of {
          GHC.Word.W8# x1_s2v2f ->
              case y_s2v2d of {
                GHC.Word.W8# y1_s2v2h ->
                    case eqWord# [x1_s2v2f y1_s2v2h] of {
                      __DEFAULT ->
                          case leWord# [x1_s2v2f y1_s2v2h] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Word.$fOrdWord8_$cmax
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2v2k y_s2v2l]
        case x_s2v2k of wild_s2v2m {
          GHC.Word.W8# x1_s2v2n [Occ=Once] ->
              case y_s2v2l of wild1_s2v2o {
                GHC.Word.W8# y1_s2v2p [Occ=Once] ->
                    case leWord# [x1_s2v2n y1_s2v2p] of {
                      __DEFAULT -> wild_s2v2m;
                      1# -> wild1_s2v2o;
                    };
              };
        };

GHC.Word.$fOrdWord8_$cmin
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2v2r y_s2v2s]
        case x_s2v2r of wild_s2v2t {
          GHC.Word.W8# x1_s2v2u [Occ=Once] ->
              case y_s2v2s of wild1_s2v2v {
                GHC.Word.W8# y1_s2v2w [Occ=Once] ->
                    case leWord# [x1_s2v2u y1_s2v2w] of {
                      __DEFAULT -> wild1_s2v2v;
                      1# -> wild_s2v2t;
                    };
              };
        };

GHC.Word.$fOrdWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Word.$fEqWord8
                                      GHC.Word.$fOrdWord8_$ccompare
                                      GHC.Word.ltWord8
                                      GHC.Word.leWord8
                                      GHC.Word.gtWord8
                                      GHC.Word.geWord8
                                      GHC.Word.$fOrdWord8_$cmax
                                      GHC.Word.$fOrdWord8_$cmin];

GHC.Word.$fIxWord8_$cinRange
  :: (GHC.Word.Word8, GHC.Word.Word8)
     -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v2y i_s2v2z]
        case ds_s2v2y of {
          (,) m_s2v2B [Occ=Once!] n_s2v2C [Occ=Once!] ->
              case m_s2v2B of {
                GHC.Word.W8# x_s2v2E [Occ=Once] ->
                    case i_s2v2z of {
                      GHC.Word.W8# y_s2v2G ->
                          case leWord# [x_s2v2E y_s2v2G] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s2v2C of {
                                  GHC.Word.W8# y1_s2v2J [Occ=Once] ->
                                      case leWord# [y_s2v2G y1_s2v2J] of sat_s2v2K {
                                        __DEFAULT -> tagToEnum# [sat_s2v2K];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord8_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word8 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2v2L]
        case w_s2v2L of {
          GHC.Word.W8# ww1_s2v2N [Occ=Once] ->
              case word2Int# [ww1_s2v2N] of sat_s2v2O {
                __DEFAULT ->
                    case GHC.Integer.Type.smallInteger sat_s2v2O of sat_s2v2P {
                      __DEFAULT ->
                          case
                              GHC.Integer.Type.timesInteger sat_s2v2P GHC.Word.$fRealWord1
                          of
                          sat_s2v2Q
                          { __DEFAULT ->
                                case GHC.Real.$w$sreduce sat_s2v2Q GHC.Word.$fRealWord1 of {
                                  (#,#) ww3_s2v2S [Occ=Once] ww4_s2v2T [Occ=Once] ->
                                      GHC.Real.:% [ww3_s2v2S ww4_s2v2T];
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Word.$fNumWord8
                                    GHC.Word.$fOrdWord8
                                    GHC.Word.$fRealWord8_$ctoRational];

GHC.Word.$fIntegralWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Word.$fRealWord8
                                        GHC.Word.$fEnumWord8
                                        GHC.Word.$fIntegralWord8_$cquot
                                        GHC.Word.$fIntegralWord8_$crem
                                        GHC.Word.$fIntegralWord8_$cquot
                                        GHC.Word.$fIntegralWord8_$crem
                                        GHC.Word.$fIntegralWord8_$cquotRem
                                        GHC.Word.$fIntegralWord8_$cdivMod
                                        GHC.Word.$ctoInteger];

GHC.Word.$fIxWord8_$cunsafeIndex
  :: (GHC.Word.Word8, GHC.Word.Word8)
     -> GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v2U i_s2v2V]
        case ds_s2v2U of {
          (,) m_s2v2X [Occ=Once!] _ [Occ=Dead] ->
              case i_s2v2V of {
                GHC.Word.W8# x#_s2v30 [Occ=Once] ->
                    case m_s2v2X of {
                      GHC.Word.W8# y#_s2v32 [Occ=Once] ->
                          case minusWord# [x#_s2v30 y#_s2v32] of sat_s2v33 {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2v33] of sat_s2v34 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2v34] of sat_s2v35 {
                                        __DEFAULT -> GHC.Types.I# [sat_s2v35];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord8_$crange
  :: (GHC.Word.Word8, GHC.Word.Word8) -> [GHC.Word.Word8]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s2v36]
        case ds_s2v36 of {
          (,) m_s2v38 [Occ=Once] n_s2v39 [Occ=Once] ->
              GHC.Word.$fEnumWord8_$cenumFromTo m_s2v38 n_s2v39;
        };

GHC.Word.$fIxWord1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Word.$fIxWord8_$crangeSize
  :: (GHC.Word.Word8, GHC.Word.Word8) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2v3a]
        case b_s2v3a of {
          (,) _l_s2v3c [Occ=Once!] h_s2v3d [Occ=Once!] ->
              case _l_s2v3c of {
                GHC.Word.W8# x_s2v3f ->
                    case h_s2v3d of {
                      GHC.Word.W8# y_s2v3h ->
                          case leWord# [x_s2v3f y_s2v3h] of {
                            __DEFAULT -> GHC.Word.$fIxWord1;
                            1# ->
                                case minusWord# [y_s2v3h x_s2v3f] of sat_s2v3j {
                                  __DEFAULT ->
                                      case narrow8Word# [sat_s2v3j] of sat_s2v3k {
                                        __DEFAULT ->
                                            case word2Int# [sat_s2v3k] of sat_s2v3l {
                                              __DEFAULT ->
                                                  case +# [sat_s2v3l 1#] of sat_s2v3m {
                                                    __DEFAULT -> GHC.Types.I# [sat_s2v3m];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord8_$cunsafeRangeSize
  :: (GHC.Word.Word8, GHC.Word.Word8) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2v3n]
        case b_s2v3n of {
          (,) _l_s2v3p [Occ=Once!] h_s2v3q [Occ=Once!] ->
              case h_s2v3q of {
                GHC.Word.W8# x#_s2v3s [Occ=Once] ->
                    case _l_s2v3p of {
                      GHC.Word.W8# y#_s2v3u [Occ=Once] ->
                          case minusWord# [x#_s2v3s y#_s2v3u] of sat_s2v3v {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2v3v] of sat_s2v3w {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2v3w] of sat_s2v3x {
                                        __DEFAULT ->
                                            case +# [sat_s2v3x 1#] of sat_s2v3y {
                                              __DEFAULT -> GHC.Types.I# [sat_s2v3y];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord8_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Word.Word8, GHC.Word.Word8)
     -> GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v3z eta1_s2v3A]
        case eta_s2v3z of {
          (,) m_s2v3C [Occ=Once!] n_s2v3D [Occ=Once!] ->
              case m_s2v3C of {
                GHC.Word.W8# x_s2v3F ->
                    case eta1_s2v3A of {
                      GHC.Word.W8# y_s2v3H ->
                          case leWord# [x_s2v3F y_s2v3H] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s2v3D of {
                                  GHC.Word.W8# y1_s2v3K [Occ=Once] ->
                                      case leWord# [y_s2v3H y1_s2v3K] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case minusWord# [y_s2v3H x_s2v3F] of sat_s2v3M {
                                              __DEFAULT ->
                                                  case narrow8Word# [sat_s2v3M] of sat_s2v3N {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s2v3N] of sat_s2v3O {
                                                          __DEFAULT -> GHC.Types.I# [sat_s2v3O];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Word.$fOrdWord8
                                 GHC.Word.$fIxWord8_$crange
                                 GHC.Word.$fIxWord8_$cindex
                                 GHC.Word.$fIxWord8_$cunsafeIndex
                                 GHC.Word.$fIxWord8_$cinRange
                                 GHC.Word.$fIxWord8_$crangeSize
                                 GHC.Word.$fIxWord8_$cunsafeRangeSize];

GHC.Word.eqWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v3P ds1_s2v3Q]
        case ds_s2v3P of {
          GHC.Word.W16# x_s2v3S [Occ=Once] ->
              case ds1_s2v3Q of {
                GHC.Word.W16# y_s2v3U [Occ=Once] ->
                    case eqWord# [x_s2v3S y_s2v3U] of sat_s2v3V {
                      __DEFAULT -> tagToEnum# [sat_s2v3V];
                    };
              };
        };

GHC.Word.$fEqWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Word.eqWord16
                                     GHC.Word.neWord16];

GHC.Word.$fNumWord1 :: GHC.Word.Word16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W16#! [1##];

GHC.Word.$fNumWord16_$csignum :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v3W]
        case ds_s2v3W of {
          GHC.Word.W16# x_s2v3Y [Occ=Once!] ->
              case x_s2v3Y of {
                __DEFAULT -> GHC.Word.$fNumWord1;
                0## -> GHC.Word.$fBitsWord16_$cminBound;
              };
        };

GHC.Word.$fNumWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Word.$fNumWord16_$c+
                                  GHC.Word.$fNumWord16_$c-
                                  GHC.Word.$fNumWord16_$c*
                                  GHC.Word.$fNumWord16_$cnegate
                                  GHC.Word.$fNumWord16_$cabs
                                  GHC.Word.$fNumWord16_$csignum
                                  GHC.Word.$fNumWord16_$cfromInteger];

GHC.Word.$fBitsWord16_$ccomplement
  :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v40]
        case ds_s2v40 of {
          GHC.Word.W16# x#_s2v42 [Occ=Once] ->
              case xor# [x#_s2v42 65535##] of sat_s2v43 {
                __DEFAULT -> GHC.Word.W16# [sat_s2v43];
              };
        };

GHC.Word.$fBitsWord2 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Word.$fBitsWord1];

GHC.Word.$fBitsWord16_$cbitSizeMaybe
  :: GHC.Word.Word16 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s2v44] GHC.Word.$fBitsWord2;

GHC.Word.$fBitsWord16_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s2v45]
        case i_s2v45 of {
          GHC.Types.I# i#_s2v47 ->
              case >=# [i#_s2v47 64#] of {
                __DEFAULT ->
                    case uncheckedShiftL# [1## i#_s2v47] of sat_s2v49 {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2v49] of sat_s2v4a {
                            __DEFAULT -> GHC.Word.W16# [sat_s2v4a];
                          };
                    };
                1# -> GHC.Word.$fBitsWord16_$cminBound;
              };
        };

GHC.Word.$fBitsWord16_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2v4b i_s2v4c]
        case x_s2v4b of {
          GHC.Word.W16# x#_s2v4e [Occ=Once] ->
              case i_s2v4c of {
                GHC.Types.I# i#_s2v4g ->
                    case >=# [i#_s2v4g 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v4g] of sat_s2v4i {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2v4i] of sat_s2v4j {
                                  __DEFAULT ->
                                      case and# [x#_s2v4e sat_s2v4j] of {
                                        __DEFAULT -> GHC.Types.True [];
                                        0## -> GHC.Types.False [];
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Word.$fBitsWord16_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v4l eta1_s2v4m]
        case eta_s2v4l of wild_s2v4n {
          GHC.Word.W16# x#_s2v4o ->
              case eta1_s2v4m of {
                GHC.Types.I# x1_s2v4q [Occ=Once] ->
                    case negateInt# [x1_s2v4q] of sat_s2v4r {
                      __DEFAULT ->
                          case int2Word# [sat_s2v4r] of sat_s2v4s {
                            __DEFAULT ->
                                case and# [sat_s2v4s 15##] of sat_s2v4t {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2v4t] of wild2_s2v4u {
                                        __DEFAULT ->
                                            case -# [16# wild2_s2v4u] of sat_s2v4w {
                                              __DEFAULT ->
                                                  case
                                                      uncheckedShiftRL# [x#_s2v4o sat_s2v4w]
                                                  of
                                                  sat_s2v4x
                                                  { __DEFAULT ->
                                                        case
                                                            uncheckedShiftL# [x#_s2v4o wild2_s2v4u]
                                                        of
                                                        sat_s2v4v
                                                        { __DEFAULT ->
                                                              case
                                                                  or# [sat_s2v4v sat_s2v4x]
                                                              of
                                                              sat_s2v4y
                                                              { __DEFAULT ->
                                                                    case
                                                                        narrow16Word# [sat_s2v4y]
                                                                    of
                                                                    sat_s2v4z
                                                                    { __DEFAULT ->
                                                                          GHC.Word.W16# [sat_s2v4z];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s2v4n;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord16_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Word.$fBitsWord16_$crotate eta_B2 eta_B1;

GHC.Word.$fBitsWord16_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v4A eta1_s2v4B]
        case eta_s2v4A of wild_s2v4C {
          GHC.Word.W16# x#_s2v4D [Occ=Once] ->
              case eta1_s2v4B of {
                GHC.Types.I# i#_s2v4F ->
                    case >=# [i#_s2v4F 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v4F] of sat_s2v4H {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2v4H] of sat_s2v4I {
                                  __DEFAULT ->
                                      case xor# [x#_s2v4D sat_s2v4I] of sat_s2v4J {
                                        __DEFAULT -> GHC.Word.W16# [sat_s2v4J];
                                      };
                                };
                          };
                      1# -> wild_s2v4C;
                    };
              };
        };

GHC.Word.$fBitsWord16_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v4K eta1_s2v4L]
        case eta_s2v4K of {
          GHC.Word.W16# x#_s2v4N [Occ=Once*] ->
              case eta1_s2v4L of {
                GHC.Types.I# i#_s2v4P ->
                    case >=# [i#_s2v4P 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v4P] of sat_s2v4R {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2v4R] of sat_s2v4S {
                                  __DEFAULT ->
                                      case xor# [sat_s2v4S 65535##] of sat_s2v4T {
                                        __DEFAULT ->
                                            case and# [x#_s2v4N sat_s2v4T] of sat_s2v4U {
                                              __DEFAULT -> GHC.Word.W16# [sat_s2v4U];
                                            };
                                      };
                                };
                          };
                      1# ->
                          case and# [x#_s2v4N 65535##] of sat_s2v4V {
                            __DEFAULT -> GHC.Word.W16# [sat_s2v4V];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord16_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v4W eta1_s2v4X]
        case eta_s2v4W of wild_s2v4Y {
          GHC.Word.W16# x#_s2v4Z [Occ=Once] ->
              case eta1_s2v4X of {
                GHC.Types.I# i#_s2v51 ->
                    case >=# [i#_s2v51 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v51] of sat_s2v53 {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2v53] of sat_s2v54 {
                                  __DEFAULT ->
                                      case or# [x#_s2v4Z sat_s2v54] of sat_s2v55 {
                                        __DEFAULT -> GHC.Word.W16# [sat_s2v55];
                                      };
                                };
                          };
                      1# -> wild_s2v4Y;
                    };
              };
        };

GHC.Word.$fBitsWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Word.$fEqWord16
                                     GHC.Word.$fBitsWord16_$c.&.
                                     GHC.Word.$fBitsWord16_$c.|.
                                     GHC.Word.$fBitsWord16_$cxor
                                     GHC.Word.$fBitsWord16_$ccomplement
                                     GHC.Word.$fBitsWord16_$cshift
                                     GHC.Word.$fBitsWord16_$crotate
                                     GHC.Word.$fBitsWord16_$cminBound
                                     GHC.Word.$fBitsWord16_$cbit
                                     GHC.Word.$fBitsWord16_$csetBit
                                     GHC.Word.$fBitsWord16_$cclearBit
                                     GHC.Word.$fBitsWord16_$ccomplementBit
                                     GHC.Word.$fBitsWord16_$ctestBit
                                     GHC.Word.$fBitsWord16_$cbitSizeMaybe
                                     GHC.Word.$fBitsWord16_$cfiniteBitSize
                                     GHC.Word.$fBitsWord16_$cisSigned
                                     GHC.Word.$fBitsWord16_$cshiftL
                                     GHC.Word.$fBitsWord16_$cunsafeShiftL
                                     GHC.Word.$fBitsWord16_$cshiftR
                                     GHC.Word.$fBitsWord16_$cunsafeShiftR
                                     GHC.Word.$fBitsWord16_$crotateL
                                     GHC.Word.$fBitsWord16_$crotateR
                                     GHC.Word.$fBitsWord16_$cpopCount];

GHC.Word.$fFiniteBitsWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Word.$fBitsWord16
                                           GHC.Word.$fBitsWord16_$cfiniteBitSize
                                           GHC.Word.$fFiniteBitsWord16_$ccountLeadingZeros
                                           GHC.Word.$fFiniteBitsWord16_$ccountTrailingZeros];

GHC.Word.$fIntegralWord16_$cquot
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v56 y_s2v57]
        case ds_s2v56 of {
          GHC.Word.W16# x#_s2v59 [Occ=Once] ->
              case y_s2v57 of {
                GHC.Word.W16# y#_s2v5b [Occ=Once!] ->
                    case y#_s2v5b of wild2_s2v5c {
                      __DEFAULT ->
                          case quotWord# [x#_s2v59 wild2_s2v5c] of wild3_s2v5d {
                            __DEFAULT -> GHC.Word.W16# [wild3_s2v5d];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord16_$crem
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v5e y_s2v5f]
        case ds_s2v5e of {
          GHC.Word.W16# x#_s2v5h [Occ=Once] ->
              case y_s2v5f of {
                GHC.Word.W16# y#_s2v5j [Occ=Once!] ->
                    case y#_s2v5j of wild2_s2v5k {
                      __DEFAULT ->
                          case remWord# [x#_s2v5h wild2_s2v5k] of wild3_s2v5l {
                            __DEFAULT -> GHC.Word.W16# [wild3_s2v5l];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord16_$cquotRem
  :: GHC.Word.Word16
     -> GHC.Word.Word16 -> (GHC.Word.Word16, GHC.Word.Word16)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v5m y_s2v5n]
        case ds_s2v5m of {
          GHC.Word.W16# x#_s2v5p [Occ=Once] ->
              case y_s2v5n of {
                GHC.Word.W16# y#_s2v5r [Occ=Once!] ->
                    case y#_s2v5r of wild2_s2v5s {
                      __DEFAULT ->
                          case quotRemWord# [x#_s2v5p wild2_s2v5s] of {
                            (#,#) ipv_s2v5u [Occ=Once] ipv1_s2v5v [Occ=Once] ->
                                let {
                                  sat_s2v5x [Occ=Once] :: GHC.Word.Word16
                                  [LclId] =
                                      CCCS GHC.Word.W16#! [ipv1_s2v5v]; } in
                                let {
                                  sat_s2v5w [Occ=Once] :: GHC.Word.Word16
                                  [LclId] =
                                      CCCS GHC.Word.W16#! [ipv_s2v5u];
                                } in  (,) [sat_s2v5w sat_s2v5x];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord16_$cdivMod
  :: GHC.Word.Word16
     -> GHC.Word.Word16 -> (GHC.Word.Word16, GHC.Word.Word16)
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s2v5y y_s2v5z]
        case ds_s2v5y of {
          GHC.Word.W16# x#_s2v5B ->
              case y_s2v5z of {
                GHC.Word.W16# y#_s2v5D [Occ=Once!] ->
                    case y#_s2v5D of wild2_s2v5E {
                      __DEFAULT ->
                          let {
                            sat_s2v5I [Occ=Once] :: GHC.Word.Word16
                            [LclId] =
                                [x#_s2v5B wild2_s2v5E] \u []
                                    case remWord# [x#_s2v5B wild2_s2v5E] of wild3_s2v5H {
                                      __DEFAULT -> GHC.Word.W16# [wild3_s2v5H];
                                    }; } in
                          let {
                            sat_s2v5G [Occ=Once] :: GHC.Word.Word16
                            [LclId] =
                                [x#_s2v5B wild2_s2v5E] \u []
                                    case quotWord# [x#_s2v5B wild2_s2v5E] of wild3_s2v5F {
                                      __DEFAULT -> GHC.Word.W16# [wild3_s2v5F];
                                    };
                          } in  (,) [sat_s2v5G sat_s2v5I];
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.gtWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v5J ds1_s2v5K]
        case ds_s2v5J of {
          GHC.Word.W16# x_s2v5M [Occ=Once] ->
              case ds1_s2v5K of {
                GHC.Word.W16# y_s2v5O [Occ=Once] ->
                    case gtWord# [x_s2v5M y_s2v5O] of sat_s2v5P {
                      __DEFAULT -> tagToEnum# [sat_s2v5P];
                    };
              };
        };

GHC.Word.geWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v5Q ds1_s2v5R]
        case ds_s2v5Q of {
          GHC.Word.W16# x_s2v5T [Occ=Once] ->
              case ds1_s2v5R of {
                GHC.Word.W16# y_s2v5V [Occ=Once] ->
                    case geWord# [x_s2v5T y_s2v5V] of sat_s2v5W {
                      __DEFAULT -> tagToEnum# [sat_s2v5W];
                    };
              };
        };

GHC.Word.ltWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v5X ds1_s2v5Y]
        case ds_s2v5X of {
          GHC.Word.W16# x_s2v60 [Occ=Once] ->
              case ds1_s2v5Y of {
                GHC.Word.W16# y_s2v62 [Occ=Once] ->
                    case ltWord# [x_s2v60 y_s2v62] of sat_s2v63 {
                      __DEFAULT -> tagToEnum# [sat_s2v63];
                    };
              };
        };

GHC.Word.leWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v64 ds1_s2v65]
        case ds_s2v64 of {
          GHC.Word.W16# x_s2v67 [Occ=Once] ->
              case ds1_s2v65 of {
                GHC.Word.W16# y_s2v69 [Occ=Once] ->
                    case leWord# [x_s2v67 y_s2v69] of sat_s2v6a {
                      __DEFAULT -> tagToEnum# [sat_s2v6a];
                    };
              };
        };

GHC.Word.$fOrdWord16_$ccompare
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2v6b y_s2v6c]
        case x_s2v6b of {
          GHC.Word.W16# x1_s2v6e ->
              case y_s2v6c of {
                GHC.Word.W16# y1_s2v6g ->
                    case eqWord# [x1_s2v6e y1_s2v6g] of {
                      __DEFAULT ->
                          case leWord# [x1_s2v6e y1_s2v6g] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Word.$fOrdWord16_$cmax
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2v6j y_s2v6k]
        case x_s2v6j of wild_s2v6l {
          GHC.Word.W16# x1_s2v6m [Occ=Once] ->
              case y_s2v6k of wild1_s2v6n {
                GHC.Word.W16# y1_s2v6o [Occ=Once] ->
                    case leWord# [x1_s2v6m y1_s2v6o] of {
                      __DEFAULT -> wild_s2v6l;
                      1# -> wild1_s2v6n;
                    };
              };
        };

GHC.Word.$fOrdWord16_$cmin
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2v6q y_s2v6r]
        case x_s2v6q of wild_s2v6s {
          GHC.Word.W16# x1_s2v6t [Occ=Once] ->
              case y_s2v6r of wild1_s2v6u {
                GHC.Word.W16# y1_s2v6v [Occ=Once] ->
                    case leWord# [x1_s2v6t y1_s2v6v] of {
                      __DEFAULT -> wild1_s2v6u;
                      1# -> wild_s2v6s;
                    };
              };
        };

GHC.Word.$fOrdWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Word.$fEqWord16
                                      GHC.Word.$fOrdWord16_$ccompare
                                      GHC.Word.ltWord16
                                      GHC.Word.leWord16
                                      GHC.Word.gtWord16
                                      GHC.Word.geWord16
                                      GHC.Word.$fOrdWord16_$cmax
                                      GHC.Word.$fOrdWord16_$cmin];

GHC.Word.$fIxWord16_$cinRange
  :: (GHC.Word.Word16, GHC.Word.Word16)
     -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v6x i_s2v6y]
        case ds_s2v6x of {
          (,) m_s2v6A [Occ=Once!] n_s2v6B [Occ=Once!] ->
              case m_s2v6A of {
                GHC.Word.W16# x_s2v6D [Occ=Once] ->
                    case i_s2v6y of {
                      GHC.Word.W16# y_s2v6F ->
                          case leWord# [x_s2v6D y_s2v6F] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s2v6B of {
                                  GHC.Word.W16# y1_s2v6I [Occ=Once] ->
                                      case leWord# [y_s2v6F y1_s2v6I] of sat_s2v6J {
                                        __DEFAULT -> tagToEnum# [sat_s2v6J];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord16_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word16 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2v6K]
        case w_s2v6K of {
          GHC.Word.W16# ww1_s2v6M [Occ=Once] ->
              case word2Int# [ww1_s2v6M] of sat_s2v6N {
                __DEFAULT ->
                    case GHC.Integer.Type.smallInteger sat_s2v6N of sat_s2v6O {
                      __DEFAULT ->
                          case
                              GHC.Integer.Type.timesInteger sat_s2v6O GHC.Word.$fRealWord1
                          of
                          sat_s2v6P
                          { __DEFAULT ->
                                case GHC.Real.$w$sreduce sat_s2v6P GHC.Word.$fRealWord1 of {
                                  (#,#) ww3_s2v6R [Occ=Once] ww4_s2v6S [Occ=Once] ->
                                      GHC.Real.:% [ww3_s2v6R ww4_s2v6S];
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Word.$fNumWord16
                                    GHC.Word.$fOrdWord16
                                    GHC.Word.$fRealWord16_$ctoRational];

GHC.Word.$fIntegralWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Word.$fRealWord16
                                        GHC.Word.$fEnumWord16
                                        GHC.Word.$fIntegralWord16_$cquot
                                        GHC.Word.$fIntegralWord16_$crem
                                        GHC.Word.$fIntegralWord16_$cquot
                                        GHC.Word.$fIntegralWord16_$crem
                                        GHC.Word.$fIntegralWord16_$cquotRem
                                        GHC.Word.$fIntegralWord16_$cdivMod
                                        GHC.Word.$ctoInteger1];

GHC.Word.$fIxWord16_$cunsafeIndex
  :: (GHC.Word.Word16, GHC.Word.Word16)
     -> GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v6T i_s2v6U]
        case ds_s2v6T of {
          (,) m_s2v6W [Occ=Once!] _ [Occ=Dead] ->
              case i_s2v6U of {
                GHC.Word.W16# x#_s2v6Z [Occ=Once] ->
                    case m_s2v6W of {
                      GHC.Word.W16# y#_s2v71 [Occ=Once] ->
                          case minusWord# [x#_s2v6Z y#_s2v71] of sat_s2v72 {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2v72] of sat_s2v73 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2v73] of sat_s2v74 {
                                        __DEFAULT -> GHC.Types.I# [sat_s2v74];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord16_$crange
  :: (GHC.Word.Word16, GHC.Word.Word16) -> [GHC.Word.Word16]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s2v75]
        case ds_s2v75 of {
          (,) m_s2v77 [Occ=Once] n_s2v78 [Occ=Once] ->
              GHC.Word.$fEnumWord16_$cenumFromTo m_s2v77 n_s2v78;
        };

GHC.Word.$fIxWord16_$crangeSize
  :: (GHC.Word.Word16, GHC.Word.Word16) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2v79]
        case b_s2v79 of {
          (,) _l_s2v7b [Occ=Once!] h_s2v7c [Occ=Once!] ->
              case _l_s2v7b of {
                GHC.Word.W16# x_s2v7e ->
                    case h_s2v7c of {
                      GHC.Word.W16# y_s2v7g ->
                          case leWord# [x_s2v7e y_s2v7g] of {
                            __DEFAULT -> GHC.Word.$fIxWord1;
                            1# ->
                                case minusWord# [y_s2v7g x_s2v7e] of sat_s2v7i {
                                  __DEFAULT ->
                                      case narrow16Word# [sat_s2v7i] of sat_s2v7j {
                                        __DEFAULT ->
                                            case word2Int# [sat_s2v7j] of sat_s2v7k {
                                              __DEFAULT ->
                                                  case +# [sat_s2v7k 1#] of sat_s2v7l {
                                                    __DEFAULT -> GHC.Types.I# [sat_s2v7l];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord16_$cunsafeRangeSize
  :: (GHC.Word.Word16, GHC.Word.Word16) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2v7m]
        case b_s2v7m of {
          (,) _l_s2v7o [Occ=Once!] h_s2v7p [Occ=Once!] ->
              case h_s2v7p of {
                GHC.Word.W16# x#_s2v7r [Occ=Once] ->
                    case _l_s2v7o of {
                      GHC.Word.W16# y#_s2v7t [Occ=Once] ->
                          case minusWord# [x#_s2v7r y#_s2v7t] of sat_s2v7u {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2v7u] of sat_s2v7v {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2v7v] of sat_s2v7w {
                                        __DEFAULT ->
                                            case +# [sat_s2v7w 1#] of sat_s2v7x {
                                              __DEFAULT -> GHC.Types.I# [sat_s2v7x];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord16_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Word.Word16, GHC.Word.Word16)
     -> GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v7y eta1_s2v7z]
        case eta_s2v7y of {
          (,) m_s2v7B [Occ=Once!] n_s2v7C [Occ=Once!] ->
              case m_s2v7B of {
                GHC.Word.W16# x_s2v7E ->
                    case eta1_s2v7z of {
                      GHC.Word.W16# y_s2v7G ->
                          case leWord# [x_s2v7E y_s2v7G] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s2v7C of {
                                  GHC.Word.W16# y1_s2v7J [Occ=Once] ->
                                      case leWord# [y_s2v7G y1_s2v7J] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case minusWord# [y_s2v7G x_s2v7E] of sat_s2v7L {
                                              __DEFAULT ->
                                                  case narrow16Word# [sat_s2v7L] of sat_s2v7M {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s2v7M] of sat_s2v7N {
                                                          __DEFAULT -> GHC.Types.I# [sat_s2v7N];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Word.$fOrdWord16
                                 GHC.Word.$fIxWord16_$crange
                                 GHC.Word.$fIxWord16_$cindex
                                 GHC.Word.$fIxWord16_$cunsafeIndex
                                 GHC.Word.$fIxWord16_$cinRange
                                 GHC.Word.$fIxWord16_$crangeSize
                                 GHC.Word.$fIxWord16_$cunsafeRangeSize];

GHC.Word.byteSwap16 :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v7O]
        case ds_s2v7O of {
          GHC.Word.W16# w#_s2v7Q [Occ=Once] ->
              case byteSwap16# [w#_s2v7Q] of sat_s2v7R {
                __DEFAULT ->
                    case narrow16Word# [sat_s2v7R] of sat_s2v7S {
                      __DEFAULT -> GHC.Word.W16# [sat_s2v7S];
                    };
              };
        };

GHC.Word.eqWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v7T ds1_s2v7U]
        case ds_s2v7T of {
          GHC.Word.W32# x_s2v7W [Occ=Once] ->
              case ds1_s2v7U of {
                GHC.Word.W32# y_s2v7Y [Occ=Once] ->
                    case eqWord# [x_s2v7W y_s2v7Y] of sat_s2v7Z {
                      __DEFAULT -> tagToEnum# [sat_s2v7Z];
                    };
              };
        };

GHC.Word.$fEqWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Word.eqWord32
                                     GHC.Word.neWord32];

GHC.Word.$fNumWord2 :: GHC.Word.Word32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W32#! [1##];

GHC.Word.$fNumWord32_$csignum :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v80]
        case ds_s2v80 of {
          GHC.Word.W32# x_s2v82 [Occ=Once!] ->
              case x_s2v82 of {
                __DEFAULT -> GHC.Word.$fNumWord2;
                0## -> GHC.Word.$fBitsWord32_$cminBound;
              };
        };

GHC.Word.$fNumWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Word.$fNumWord32_$c+
                                  GHC.Word.$fNumWord32_$c-
                                  GHC.Word.$fNumWord32_$c*
                                  GHC.Word.$fNumWord32_$cnegate
                                  GHC.Word.$fNumWord32_$cabs
                                  GHC.Word.$fNumWord32_$csignum
                                  GHC.Word.$fNumWord32_$cfromInteger];

GHC.Word.$fBitsWord32_$ccomplement
  :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v84]
        case ds_s2v84 of {
          GHC.Word.W32# x#_s2v86 [Occ=Once] ->
              case xor# [x#_s2v86 4294967295##] of sat_s2v87 {
                __DEFAULT -> GHC.Word.W32# [sat_s2v87];
              };
        };

GHC.Word.$fBitsWord4 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Word.$fBitsWord3];

GHC.Word.$fBitsWord32_$cbitSizeMaybe
  :: GHC.Word.Word32 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s2v88] GHC.Word.$fBitsWord4;

GHC.Word.$fBitsWord32_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s2v89]
        case i_s2v89 of {
          GHC.Types.I# i#_s2v8b ->
              case >=# [i#_s2v8b 64#] of {
                __DEFAULT ->
                    case uncheckedShiftL# [1## i#_s2v8b] of sat_s2v8d {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2v8d] of sat_s2v8e {
                            __DEFAULT -> GHC.Word.W32# [sat_s2v8e];
                          };
                    };
                1# -> GHC.Word.$fBitsWord32_$cminBound;
              };
        };

GHC.Word.$fBitsWord32_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2v8f i_s2v8g]
        case x_s2v8f of {
          GHC.Word.W32# x#_s2v8i [Occ=Once] ->
              case i_s2v8g of {
                GHC.Types.I# i#_s2v8k ->
                    case >=# [i#_s2v8k 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v8k] of sat_s2v8m {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2v8m] of sat_s2v8n {
                                  __DEFAULT ->
                                      case and# [x#_s2v8i sat_s2v8n] of {
                                        __DEFAULT -> GHC.Types.True [];
                                        0## -> GHC.Types.False [];
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Word.$fBitsWord32_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v8p eta1_s2v8q]
        case eta_s2v8p of wild_s2v8r {
          GHC.Word.W32# x#_s2v8s ->
              case eta1_s2v8q of {
                GHC.Types.I# x1_s2v8u [Occ=Once] ->
                    case negateInt# [x1_s2v8u] of sat_s2v8v {
                      __DEFAULT ->
                          case int2Word# [sat_s2v8v] of sat_s2v8w {
                            __DEFAULT ->
                                case and# [sat_s2v8w 31##] of sat_s2v8x {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2v8x] of wild2_s2v8y {
                                        __DEFAULT ->
                                            case -# [32# wild2_s2v8y] of sat_s2v8A {
                                              __DEFAULT ->
                                                  case
                                                      uncheckedShiftRL# [x#_s2v8s sat_s2v8A]
                                                  of
                                                  sat_s2v8B
                                                  { __DEFAULT ->
                                                        case
                                                            uncheckedShiftL# [x#_s2v8s wild2_s2v8y]
                                                        of
                                                        sat_s2v8z
                                                        { __DEFAULT ->
                                                              case
                                                                  or# [sat_s2v8z sat_s2v8B]
                                                              of
                                                              sat_s2v8C
                                                              { __DEFAULT ->
                                                                    case
                                                                        narrow32Word# [sat_s2v8C]
                                                                    of
                                                                    sat_s2v8D
                                                                    { __DEFAULT ->
                                                                          GHC.Word.W32# [sat_s2v8D];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s2v8r;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord32_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v8E eta1_s2v8F]
        case eta_s2v8E of wild_s2v8G {
          GHC.Word.W32# x#_s2v8H [Occ=Once] ->
              case eta1_s2v8F of {
                GHC.Types.I# i#_s2v8J ->
                    case >=# [i#_s2v8J 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v8J] of sat_s2v8L {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2v8L] of sat_s2v8M {
                                  __DEFAULT ->
                                      case xor# [x#_s2v8H sat_s2v8M] of sat_s2v8N {
                                        __DEFAULT -> GHC.Word.W32# [sat_s2v8N];
                                      };
                                };
                          };
                      1# -> wild_s2v8G;
                    };
              };
        };

GHC.Word.$fBitsWord32_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v8O eta1_s2v8P]
        case eta_s2v8O of {
          GHC.Word.W32# x#_s2v8R [Occ=Once*] ->
              case eta1_s2v8P of {
                GHC.Types.I# i#_s2v8T ->
                    case >=# [i#_s2v8T 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v8T] of sat_s2v8V {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2v8V] of sat_s2v8W {
                                  __DEFAULT ->
                                      case xor# [sat_s2v8W 4294967295##] of sat_s2v8X {
                                        __DEFAULT ->
                                            case and# [x#_s2v8R sat_s2v8X] of sat_s2v8Y {
                                              __DEFAULT -> GHC.Word.W32# [sat_s2v8Y];
                                            };
                                      };
                                };
                          };
                      1# ->
                          case and# [x#_s2v8R 4294967295##] of sat_s2v8Z {
                            __DEFAULT -> GHC.Word.W32# [sat_s2v8Z];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord32_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v90 eta1_s2v91]
        case eta_s2v90 of wild_s2v92 {
          GHC.Word.W32# x#_s2v93 [Occ=Once] ->
              case eta1_s2v91 of {
                GHC.Types.I# i#_s2v95 ->
                    case >=# [i#_s2v95 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v95] of sat_s2v97 {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2v97] of sat_s2v98 {
                                  __DEFAULT ->
                                      case or# [x#_s2v93 sat_s2v98] of sat_s2v99 {
                                        __DEFAULT -> GHC.Word.W32# [sat_s2v99];
                                      };
                                };
                          };
                      1# -> wild_s2v92;
                    };
              };
        };

GHC.Word.$fBitsWord32_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Word.$fBitsWord32_$crotate eta_B2 eta_B1;

GHC.Word.$fBitsWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Word.$fEqWord32
                                     GHC.Word.$fBitsWord32_$c.&.
                                     GHC.Word.$fBitsWord32_$c.|.
                                     GHC.Word.$fBitsWord32_$cxor
                                     GHC.Word.$fBitsWord32_$ccomplement
                                     GHC.Word.$fBitsWord32_$cshift
                                     GHC.Word.$fBitsWord32_$crotate
                                     GHC.Word.$fBitsWord32_$cminBound
                                     GHC.Word.$fBitsWord32_$cbit
                                     GHC.Word.$fBitsWord32_$csetBit
                                     GHC.Word.$fBitsWord32_$cclearBit
                                     GHC.Word.$fBitsWord32_$ccomplementBit
                                     GHC.Word.$fBitsWord32_$ctestBit
                                     GHC.Word.$fBitsWord32_$cbitSizeMaybe
                                     GHC.Word.$fBitsWord32_$cfiniteBitSize
                                     GHC.Word.$fBitsWord32_$cisSigned
                                     GHC.Word.$fBitsWord32_$cshiftL
                                     GHC.Word.$fBitsWord32_$cunsafeShiftL
                                     GHC.Word.$fBitsWord32_$cshiftR
                                     GHC.Word.$fBitsWord32_$cunsafeShiftR
                                     GHC.Word.$fBitsWord32_$crotateL
                                     GHC.Word.$fBitsWord32_$crotateR
                                     GHC.Word.$fBitsWord32_$cpopCount];

GHC.Word.$fFiniteBitsWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Word.$fBitsWord32
                                           GHC.Word.$fBitsWord32_$cfiniteBitSize
                                           GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros
                                           GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros];

GHC.Word.$fIntegralWord32_$cquot
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v9a y_s2v9b]
        case ds_s2v9a of {
          GHC.Word.W32# x#_s2v9d [Occ=Once] ->
              case y_s2v9b of {
                GHC.Word.W32# y#_s2v9f [Occ=Once!] ->
                    case y#_s2v9f of wild2_s2v9g {
                      __DEFAULT ->
                          case quotWord# [x#_s2v9d wild2_s2v9g] of wild3_s2v9h {
                            __DEFAULT -> GHC.Word.W32# [wild3_s2v9h];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord32_$crem
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v9i y_s2v9j]
        case ds_s2v9i of {
          GHC.Word.W32# x#_s2v9l [Occ=Once] ->
              case y_s2v9j of {
                GHC.Word.W32# y#_s2v9n [Occ=Once!] ->
                    case y#_s2v9n of wild2_s2v9o {
                      __DEFAULT ->
                          case remWord# [x#_s2v9l wild2_s2v9o] of wild3_s2v9p {
                            __DEFAULT -> GHC.Word.W32# [wild3_s2v9p];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord32_$cquotRem
  :: GHC.Word.Word32
     -> GHC.Word.Word32 -> (GHC.Word.Word32, GHC.Word.Word32)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v9q y_s2v9r]
        case ds_s2v9q of {
          GHC.Word.W32# x#_s2v9t [Occ=Once] ->
              case y_s2v9r of {
                GHC.Word.W32# y#_s2v9v [Occ=Once!] ->
                    case y#_s2v9v of wild2_s2v9w {
                      __DEFAULT ->
                          case quotRemWord# [x#_s2v9t wild2_s2v9w] of {
                            (#,#) ipv_s2v9y [Occ=Once] ipv1_s2v9z [Occ=Once] ->
                                let {
                                  sat_s2v9B [Occ=Once] :: GHC.Word.Word32
                                  [LclId] =
                                      CCCS GHC.Word.W32#! [ipv1_s2v9z]; } in
                                let {
                                  sat_s2v9A [Occ=Once] :: GHC.Word.Word32
                                  [LclId] =
                                      CCCS GHC.Word.W32#! [ipv_s2v9y];
                                } in  (,) [sat_s2v9A sat_s2v9B];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord32_$cdivMod
  :: GHC.Word.Word32
     -> GHC.Word.Word32 -> (GHC.Word.Word32, GHC.Word.Word32)
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s2v9C y_s2v9D]
        case ds_s2v9C of {
          GHC.Word.W32# x#_s2v9F ->
              case y_s2v9D of {
                GHC.Word.W32# y#_s2v9H [Occ=Once!] ->
                    case y#_s2v9H of wild2_s2v9I {
                      __DEFAULT ->
                          let {
                            sat_s2v9M [Occ=Once] :: GHC.Word.Word32
                            [LclId] =
                                [x#_s2v9F wild2_s2v9I] \u []
                                    case remWord# [x#_s2v9F wild2_s2v9I] of wild3_s2v9L {
                                      __DEFAULT -> GHC.Word.W32# [wild3_s2v9L];
                                    }; } in
                          let {
                            sat_s2v9K [Occ=Once] :: GHC.Word.Word32
                            [LclId] =
                                [x#_s2v9F wild2_s2v9I] \u []
                                    case quotWord# [x#_s2v9F wild2_s2v9I] of wild3_s2v9J {
                                      __DEFAULT -> GHC.Word.W32# [wild3_s2v9J];
                                    };
                          } in  (,) [sat_s2v9K sat_s2v9M];
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.gtWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v9N ds1_s2v9O]
        case ds_s2v9N of {
          GHC.Word.W32# x_s2v9Q [Occ=Once] ->
              case ds1_s2v9O of {
                GHC.Word.W32# y_s2v9S [Occ=Once] ->
                    case gtWord# [x_s2v9Q y_s2v9S] of sat_s2v9T {
                      __DEFAULT -> tagToEnum# [sat_s2v9T];
                    };
              };
        };

GHC.Word.geWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v9U ds1_s2v9V]
        case ds_s2v9U of {
          GHC.Word.W32# x_s2v9X [Occ=Once] ->
              case ds1_s2v9V of {
                GHC.Word.W32# y_s2v9Z [Occ=Once] ->
                    case geWord# [x_s2v9X y_s2v9Z] of sat_s2va0 {
                      __DEFAULT -> tagToEnum# [sat_s2va0];
                    };
              };
        };

GHC.Word.ltWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2va1 ds1_s2va2]
        case ds_s2va1 of {
          GHC.Word.W32# x_s2va4 [Occ=Once] ->
              case ds1_s2va2 of {
                GHC.Word.W32# y_s2va6 [Occ=Once] ->
                    case ltWord# [x_s2va4 y_s2va6] of sat_s2va7 {
                      __DEFAULT -> tagToEnum# [sat_s2va7];
                    };
              };
        };

GHC.Word.leWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2va8 ds1_s2va9]
        case ds_s2va8 of {
          GHC.Word.W32# x_s2vab [Occ=Once] ->
              case ds1_s2va9 of {
                GHC.Word.W32# y_s2vad [Occ=Once] ->
                    case leWord# [x_s2vab y_s2vad] of sat_s2vae {
                      __DEFAULT -> tagToEnum# [sat_s2vae];
                    };
              };
        };

GHC.Word.$fOrdWord32_$ccompare
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2vaf y_s2vag]
        case x_s2vaf of {
          GHC.Word.W32# x1_s2vai ->
              case y_s2vag of {
                GHC.Word.W32# y1_s2vak ->
                    case eqWord# [x1_s2vai y1_s2vak] of {
                      __DEFAULT ->
                          case leWord# [x1_s2vai y1_s2vak] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Word.$fOrdWord32_$cmax
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2van y_s2vao]
        case x_s2van of wild_s2vap {
          GHC.Word.W32# x1_s2vaq [Occ=Once] ->
              case y_s2vao of wild1_s2var {
                GHC.Word.W32# y1_s2vas [Occ=Once] ->
                    case leWord# [x1_s2vaq y1_s2vas] of {
                      __DEFAULT -> wild_s2vap;
                      1# -> wild1_s2var;
                    };
              };
        };

GHC.Word.$fOrdWord32_$cmin
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2vau y_s2vav]
        case x_s2vau of wild_s2vaw {
          GHC.Word.W32# x1_s2vax [Occ=Once] ->
              case y_s2vav of wild1_s2vay {
                GHC.Word.W32# y1_s2vaz [Occ=Once] ->
                    case leWord# [x1_s2vax y1_s2vaz] of {
                      __DEFAULT -> wild1_s2vay;
                      1# -> wild_s2vaw;
                    };
              };
        };

GHC.Word.$fOrdWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Word.$fEqWord32
                                      GHC.Word.$fOrdWord32_$ccompare
                                      GHC.Word.ltWord32
                                      GHC.Word.leWord32
                                      GHC.Word.gtWord32
                                      GHC.Word.geWord32
                                      GHC.Word.$fOrdWord32_$cmax
                                      GHC.Word.$fOrdWord32_$cmin];

GHC.Word.$fIxWord32_$cinRange
  :: (GHC.Word.Word32, GHC.Word.Word32)
     -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2vaB i_s2vaC]
        case ds_s2vaB of {
          (,) m_s2vaE [Occ=Once!] n_s2vaF [Occ=Once!] ->
              case m_s2vaE of {
                GHC.Word.W32# x_s2vaH [Occ=Once] ->
                    case i_s2vaC of {
                      GHC.Word.W32# y_s2vaJ ->
                          case leWord# [x_s2vaH y_s2vaJ] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s2vaF of {
                                  GHC.Word.W32# y1_s2vaM [Occ=Once] ->
                                      case leWord# [y_s2vaJ y1_s2vaM] of sat_s2vaN {
                                        __DEFAULT -> tagToEnum# [sat_s2vaN];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord32_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word32 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2vaO]
        case w_s2vaO of {
          GHC.Word.W32# ww1_s2vaQ [Occ=Once] ->
              case word2Int# [ww1_s2vaQ] of sat_s2vaR {
                __DEFAULT ->
                    case GHC.Integer.Type.smallInteger sat_s2vaR of sat_s2vaS {
                      __DEFAULT ->
                          case
                              GHC.Integer.Type.timesInteger sat_s2vaS GHC.Word.$fRealWord1
                          of
                          sat_s2vaT
                          { __DEFAULT ->
                                case GHC.Real.$w$sreduce sat_s2vaT GHC.Word.$fRealWord1 of {
                                  (#,#) ww3_s2vaV [Occ=Once] ww4_s2vaW [Occ=Once] ->
                                      GHC.Real.:% [ww3_s2vaV ww4_s2vaW];
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Word.$fNumWord32
                                    GHC.Word.$fOrdWord32
                                    GHC.Word.$fRealWord32_$ctoRational];

GHC.Word.$fIntegralWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Word.$fRealWord32
                                        GHC.Word.$fEnumWord32
                                        GHC.Word.$fIntegralWord32_$cquot
                                        GHC.Word.$fIntegralWord32_$crem
                                        GHC.Word.$fIntegralWord32_$cquot
                                        GHC.Word.$fIntegralWord32_$crem
                                        GHC.Word.$fIntegralWord32_$cquotRem
                                        GHC.Word.$fIntegralWord32_$cdivMod
                                        GHC.Word.$ctoInteger2];

GHC.Word.$fIxWord32_$cunsafeIndex
  :: (GHC.Word.Word32, GHC.Word.Word32)
     -> GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2vaX i_s2vaY]
        case ds_s2vaX of {
          (,) m_s2vb0 [Occ=Once!] _ [Occ=Dead] ->
              case i_s2vaY of {
                GHC.Word.W32# x#_s2vb3 [Occ=Once] ->
                    case m_s2vb0 of {
                      GHC.Word.W32# y#_s2vb5 [Occ=Once] ->
                          case minusWord# [x#_s2vb3 y#_s2vb5] of sat_s2vb6 {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2vb6] of sat_s2vb7 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2vb7] of sat_s2vb8 {
                                        __DEFAULT -> GHC.Types.I# [sat_s2vb8];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord32_$crange
  :: (GHC.Word.Word32, GHC.Word.Word32) -> [GHC.Word.Word32]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s2vb9]
        case ds_s2vb9 of {
          (,) m_s2vbb [Occ=Once] n_s2vbc [Occ=Once] ->
              GHC.Word.$fEnumWord32_$cenumFromTo m_s2vbb n_s2vbc;
        };

GHC.Word.$fIxWord32_$crangeSize
  :: (GHC.Word.Word32, GHC.Word.Word32) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2vbd]
        case b_s2vbd of {
          (,) _l_s2vbf [Occ=Once!] h_s2vbg [Occ=Once!] ->
              case _l_s2vbf of {
                GHC.Word.W32# x_s2vbi ->
                    case h_s2vbg of {
                      GHC.Word.W32# y_s2vbk ->
                          case leWord# [x_s2vbi y_s2vbk] of {
                            __DEFAULT -> GHC.Word.$fIxWord1;
                            1# ->
                                case minusWord# [y_s2vbk x_s2vbi] of sat_s2vbm {
                                  __DEFAULT ->
                                      case narrow32Word# [sat_s2vbm] of sat_s2vbn {
                                        __DEFAULT ->
                                            case word2Int# [sat_s2vbn] of sat_s2vbo {
                                              __DEFAULT ->
                                                  case +# [sat_s2vbo 1#] of sat_s2vbp {
                                                    __DEFAULT -> GHC.Types.I# [sat_s2vbp];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord32_$cunsafeRangeSize
  :: (GHC.Word.Word32, GHC.Word.Word32) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2vbq]
        case b_s2vbq of {
          (,) _l_s2vbs [Occ=Once!] h_s2vbt [Occ=Once!] ->
              case h_s2vbt of {
                GHC.Word.W32# x#_s2vbv [Occ=Once] ->
                    case _l_s2vbs of {
                      GHC.Word.W32# y#_s2vbx [Occ=Once] ->
                          case minusWord# [x#_s2vbv y#_s2vbx] of sat_s2vby {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2vby] of sat_s2vbz {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2vbz] of sat_s2vbA {
                                        __DEFAULT ->
                                            case +# [sat_s2vbA 1#] of sat_s2vbB {
                                              __DEFAULT -> GHC.Types.I# [sat_s2vbB];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord32_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Word.Word32, GHC.Word.Word32)
     -> GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2vbC eta1_s2vbD]
        case eta_s2vbC of {
          (,) m_s2vbF [Occ=Once!] n_s2vbG [Occ=Once!] ->
              case m_s2vbF of {
                GHC.Word.W32# x_s2vbI ->
                    case eta1_s2vbD of {
                      GHC.Word.W32# y_s2vbK ->
                          case leWord# [x_s2vbI y_s2vbK] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s2vbG of {
                                  GHC.Word.W32# y1_s2vbN [Occ=Once] ->
                                      case leWord# [y_s2vbK y1_s2vbN] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case minusWord# [y_s2vbK x_s2vbI] of sat_s2vbP {
                                              __DEFAULT ->
                                                  case narrow32Word# [sat_s2vbP] of sat_s2vbQ {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s2vbQ] of sat_s2vbR {
                                                          __DEFAULT -> GHC.Types.I# [sat_s2vbR];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Word.$fOrdWord32
                                 GHC.Word.$fIxWord32_$crange
                                 GHC.Word.$fIxWord32_$cindex
                                 GHC.Word.$fIxWord32_$cunsafeIndex
                                 GHC.Word.$fIxWord32_$cinRange
                                 GHC.Word.$fIxWord32_$crangeSize
                                 GHC.Word.$fIxWord32_$cunsafeRangeSize];

GHC.Word.byteSwap32 :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2vbS]
        case ds_s2vbS of {
          GHC.Word.W32# w#_s2vbU [Occ=Once] ->
              case byteSwap32# [w#_s2vbU] of sat_s2vbV {
                __DEFAULT ->
                    case narrow32Word# [sat_s2vbV] of sat_s2vbW {
                      __DEFAULT -> GHC.Word.W32# [sat_s2vbW];
                    };
              };
        };

GHC.Word.$fBitsWord64_$ccomplement
  :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2vbX]
        case ds_s2vbX of {
          GHC.Word.W64# x#_s2vbZ [Occ=Once] ->
              case xor# [x#_s2vbZ 18446744073709551615##] of sat_s2vc0 {
                __DEFAULT -> GHC.Word.W64# [sat_s2vc0];
              };
        };

GHC.Word.$fBitsWord6 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Word.$fBitsWord5];

GHC.Word.$fBitsWord64_$cbitSizeMaybe
  :: GHC.Word.Word64 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s2vc1] GHC.Word.$fBitsWord6;

GHC.Word.$fBitsWord64_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s2vc2]
        case i_s2vc2 of {
          GHC.Types.I# i#_s2vc4 ->
              case >=# [i#_s2vc4 64#] of {
                __DEFAULT ->
                    case uncheckedShiftL# [1## i#_s2vc4] of sat_s2vc6 {
                      __DEFAULT -> GHC.Word.W64# [sat_s2vc6];
                    };
                1# -> GHC.Word.$fBitsWord7;
              };
        };

GHC.Word.$fBitsWord64_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2vc7 i_s2vc8]
        case x_s2vc7 of {
          GHC.Word.W64# x#_s2vca [Occ=Once] ->
              case i_s2vc8 of {
                GHC.Types.I# i#_s2vcc ->
                    case >=# [i#_s2vcc 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2vcc] of sat_s2vce {
                            __DEFAULT ->
                                case and# [x#_s2vca sat_s2vce] of {
                                  __DEFAULT -> GHC.Types.True [];
                                  0## -> GHC.Types.False [];
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Word.$fBitsWord64_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2vcg eta1_s2vch]
        case eta_s2vcg of wild_s2vci {
          GHC.Word.W64# x#_s2vcj ->
              case eta1_s2vch of {
                GHC.Types.I# x1_s2vcl [Occ=Once] ->
                    case negateInt# [x1_s2vcl] of sat_s2vcm {
                      __DEFAULT ->
                          case int2Word# [sat_s2vcm] of sat_s2vcn {
                            __DEFAULT ->
                                case and# [sat_s2vcn 63##] of sat_s2vco {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2vco] of wild2_s2vcp {
                                        __DEFAULT ->
                                            case -# [64# wild2_s2vcp] of sat_s2vcr {
                                              __DEFAULT ->
                                                  case
                                                      uncheckedShiftRL# [x#_s2vcj sat_s2vcr]
                                                  of
                                                  sat_s2vcs
                                                  { __DEFAULT ->
                                                        case
                                                            uncheckedShiftL# [x#_s2vcj wild2_s2vcp]
                                                        of
                                                        sat_s2vcq
                                                        { __DEFAULT ->
                                                              case
                                                                  or# [sat_s2vcq sat_s2vcs]
                                                              of
                                                              sat_s2vct
                                                              { __DEFAULT ->
                                                                    GHC.Word.W64# [sat_s2vct];
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s2vci;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord64_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2vcu eta1_s2vcv]
        case eta_s2vcu of wild_s2vcw {
          GHC.Word.W64# x#_s2vcx [Occ=Once] ->
              case eta1_s2vcv of {
                GHC.Types.I# i#_s2vcz ->
                    case >=# [i#_s2vcz 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2vcz] of sat_s2vcB {
                            __DEFAULT ->
                                case xor# [x#_s2vcx sat_s2vcB] of sat_s2vcC {
                                  __DEFAULT -> GHC.Word.W64# [sat_s2vcC];
                                };
                          };
                      1# -> wild_s2vcw;
                    };
              };
        };

GHC.Word.$fBitsWord64_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2vcD eta1_s2vcE]
        case eta_s2vcD of {
          GHC.Word.W64# x#_s2vcG [Occ=Once*] ->
              case eta1_s2vcE of {
                GHC.Types.I# i#_s2vcI ->
                    case >=# [i#_s2vcI 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2vcI] of sat_s2vcK {
                            __DEFAULT ->
                                case xor# [sat_s2vcK 18446744073709551615##] of sat_s2vcL {
                                  __DEFAULT ->
                                      case and# [x#_s2vcG sat_s2vcL] of sat_s2vcM {
                                        __DEFAULT -> GHC.Word.W64# [sat_s2vcM];
                                      };
                                };
                          };
                      1# ->
                          case and# [x#_s2vcG 18446744073709551615##] of sat_s2vcN {
                            __DEFAULT -> GHC.Word.W64# [sat_s2vcN];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord64_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2vcO eta1_s2vcP]
        case eta_s2vcO of wild_s2vcQ {
          GHC.Word.W64# x#_s2vcR [Occ=Once] ->
              case eta1_s2vcP of {
                GHC.Types.I# i#_s2vcT ->
                    case >=# [i#_s2vcT 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2vcT] of sat_s2vcV {
                            __DEFAULT ->
                                case or# [x#_s2vcR sat_s2vcV] of sat_s2vcW {
                                  __DEFAULT -> GHC.Word.W64# [sat_s2vcW];
                                };
                          };
                      1# -> wild_s2vcQ;
                    };
              };
        };

GHC.Word.$fBitsWord64_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Word.$fBitsWord64_$crotate eta_B2 eta_B1;

GHC.Word.$fBitsWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Word.$fEqWord64
                                     GHC.Word.$fBitsWord64_$c.&.
                                     GHC.Word.$fBitsWord64_$c.|.
                                     GHC.Word.$fBitsWord64_$cxor
                                     GHC.Word.$fBitsWord64_$ccomplement
                                     GHC.Word.$fBitsWord64_$cshift
                                     GHC.Word.$fBitsWord64_$crotate
                                     GHC.Word.$fBitsWord7
                                     GHC.Word.$fBitsWord64_$cbit
                                     GHC.Word.$fBitsWord64_$csetBit
                                     GHC.Word.$fBitsWord64_$cclearBit
                                     GHC.Word.$fBitsWord64_$ccomplementBit
                                     GHC.Word.$fBitsWord64_$ctestBit
                                     GHC.Word.$fBitsWord64_$cbitSizeMaybe
                                     GHC.Word.$fBitsWord64_$cfiniteBitSize
                                     GHC.Word.$fBitsWord64_$cisSigned
                                     GHC.Word.$fBitsWord64_$cshiftL
                                     GHC.Word.$fBitsWord64_$cunsafeShiftL
                                     GHC.Word.$fBitsWord64_$cshiftR
                                     GHC.Word.$fBitsWord64_$cunsafeShiftR
                                     GHC.Word.$fBitsWord64_$crotateL
                                     GHC.Word.$fBitsWord64_$crotateR
                                     GHC.Word.$fBitsWord64_$cpopCount];

GHC.Word.$fFiniteBitsWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Word.$fBitsWord64
                                           GHC.Word.$fBitsWord64_$cfiniteBitSize
                                           GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                                           GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros];

GHC.Word.$fIxWord64_$cinRange
  :: (GHC.Word.Word64, GHC.Word.Word64)
     -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2vcX i_s2vcY]
        case ds_s2vcX of {
          (,) m_s2vd0 [Occ=Once!] n_s2vd1 [Occ=Once!] ->
              case m_s2vd0 of {
                GHC.Word.W64# x_s2vd3 [Occ=Once] ->
                    case i_s2vcY of {
                      GHC.Word.W64# y_s2vd5 ->
                          case leWord# [x_s2vd3 y_s2vd5] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s2vd1 of {
                                  GHC.Word.W64# y1_s2vd8 [Occ=Once] ->
                                      case leWord# [y_s2vd5 y1_s2vd8] of sat_s2vd9 {
                                        __DEFAULT -> tagToEnum# [sat_s2vd9];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord64_$crange
  :: (GHC.Word.Word64, GHC.Word.Word64) -> [GHC.Word.Word64]
[GblId, Arity=1, Str=<S,1*U(U,U)>, Unf=OtherCon []] =
    [] \r [ds_s2vda]
        case ds_s2vda of {
          (,) m_s2vdc [Occ=Once] n_s2vdd [Occ=Once] ->
              GHC.Word.$fEnumWord64_$cenumFromTo m_s2vdc n_s2vdd;
        };

GHC.Word.$fIxWord64_$cunsafeIndex
  :: (GHC.Word.Word64, GHC.Word.Word64)
     -> GHC.Word.Word64 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2vde i_s2vdf]
        case ds_s2vde of {
          (,) m_s2vdh [Occ=Once!] _ [Occ=Dead] ->
              case i_s2vdf of {
                GHC.Word.W64# x#_s2vdk [Occ=Once] ->
                    case m_s2vdh of {
                      GHC.Word.W64# y#_s2vdm [Occ=Once] ->
                          case minusWord# [x#_s2vdk y#_s2vdm] of sat_s2vdn {
                            __DEFAULT ->
                                case word2Int# [sat_s2vdn] of sat_s2vdo {
                                  __DEFAULT -> GHC.Types.I# [sat_s2vdo];
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord64_$crangeSize
  :: (GHC.Word.Word64, GHC.Word.Word64) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2vdp]
        case b_s2vdp of {
          (,) _l_s2vdr [Occ=Once!] h_s2vds [Occ=Once!] ->
              case _l_s2vdr of {
                GHC.Word.W64# x_s2vdu ->
                    case h_s2vds of {
                      GHC.Word.W64# y_s2vdw ->
                          case leWord# [x_s2vdu y_s2vdw] of {
                            __DEFAULT -> GHC.Word.$fIxWord1;
                            1# ->
                                case minusWord# [y_s2vdw x_s2vdu] of sat_s2vdy {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2vdy] of sat_s2vdz {
                                        __DEFAULT ->
                                            case +# [sat_s2vdz 1#] of sat_s2vdA {
                                              __DEFAULT -> GHC.Types.I# [sat_s2vdA];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord64_$cunsafeRangeSize
  :: (GHC.Word.Word64, GHC.Word.Word64) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2vdB]
        case b_s2vdB of {
          (,) _l_s2vdD [Occ=Once!] h_s2vdE [Occ=Once!] ->
              case h_s2vdE of {
                GHC.Word.W64# x#_s2vdG [Occ=Once] ->
                    case _l_s2vdD of {
                      GHC.Word.W64# y#_s2vdI [Occ=Once] ->
                          case minusWord# [x#_s2vdG y#_s2vdI] of sat_s2vdJ {
                            __DEFAULT ->
                                case word2Int# [sat_s2vdJ] of sat_s2vdK {
                                  __DEFAULT ->
                                      case +# [sat_s2vdK 1#] of sat_s2vdL {
                                        __DEFAULT -> GHC.Types.I# [sat_s2vdL];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord64_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Word.Word64, GHC.Word.Word64)
     -> GHC.Word.Word64 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2vdM eta1_s2vdN]
        case eta_s2vdM of {
          (,) m_s2vdP [Occ=Once!] n_s2vdQ [Occ=Once!] ->
              case m_s2vdP of {
                GHC.Word.W64# x_s2vdS ->
                    case eta1_s2vdN of {
                      GHC.Word.W64# y_s2vdU ->
                          case leWord# [x_s2vdS y_s2vdU] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s2vdQ of {
                                  GHC.Word.W64# y1_s2vdX [Occ=Once] ->
                                      case leWord# [y_s2vdU y1_s2vdX] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case minusWord# [y_s2vdU x_s2vdS] of sat_s2vdZ {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s2vdZ] of sat_s2ve0 {
                                                    __DEFAULT -> GHC.Types.I# [sat_s2ve0];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Word.$fOrdWord64
                                 GHC.Word.$fIxWord64_$crange
                                 GHC.Word.$fIxWord64_$cindex
                                 GHC.Word.$fIxWord64_$cunsafeIndex
                                 GHC.Word.$fIxWord64_$cinRange
                                 GHC.Word.$fIxWord64_$crangeSize
                                 GHC.Word.$fIxWord64_$cunsafeRangeSize];

GHC.Word.uncheckedShiftL64#
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedShiftL# [eta_B2 eta_B1];

GHC.Word.uncheckedShiftRL64#
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedShiftRL# [eta_B2 eta_B1];

GHC.Word.byteSwap64 :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2ve1]
        case ds_s2ve1 of {
          GHC.Word.W64# w#_s2ve3 [Occ=Once] ->
              case byteSwap# [w#_s2ve3] of sat_s2ve4 {
                __DEFAULT -> GHC.Word.W64# [sat_s2ve4];
              };
        };

GHC.Word.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Word.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$trModule4];

GHC.Word.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Word"#;

GHC.Word.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$trModule2];

GHC.Word.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Word.$trModule3
                                     GHC.Word.$trModule1];

$krep_r2uFN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWord#
                                              GHC.Types.[]];

GHC.Word.$tcWord7 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tcWord9];

GHC.Word.$tcWord8 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2052113150978616866##
                                    10393726928463219846##
                                    GHC.Word.$trModule
                                    GHC.Word.$tcWord7
                                    0#
                                    GHC.Types.krep$*];

$krep1_r2uFO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord8
                                              GHC.Types.[]];

GHC.Word.$tc'W8#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r2uFN $krep1_r2uFO];

GHC.Word.$tc'W8#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'W8#"#;

GHC.Word.$tc'W8#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tc'W8#3];

GHC.Word.$tc'W8# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12964227823649101302##
                                    11115249754126507208##
                                    GHC.Word.$trModule
                                    GHC.Word.$tc'W8#2
                                    0#
                                    GHC.Word.$tc'W8#1];

GHC.Word.$tcWord1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tcWord2];

GHC.Word.$tcWord16 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1884349046328127494##
                                    12602100146125136909##
                                    GHC.Word.$trModule
                                    GHC.Word.$tcWord1
                                    0#
                                    GHC.Types.krep$*];

$krep2_r2uFP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord16
                                              GHC.Types.[]];

GHC.Word.$tc'W16#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r2uFN $krep2_r2uFP];

GHC.Word.$tc'W16#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'W16#"#;

GHC.Word.$tc'W16#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tc'W16#3];

GHC.Word.$tc'W16# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13828125037659739325##
                                    16689402625363715300##
                                    GHC.Word.$trModule
                                    GHC.Word.$tc'W16#2
                                    0#
                                    GHC.Word.$tc'W16#1];

GHC.Word.$tcWord3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tcWord4];

GHC.Word.$tcWord32 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3293767376230595825##
                                    2424786049275339072##
                                    GHC.Word.$trModule
                                    GHC.Word.$tcWord3
                                    0#
                                    GHC.Types.krep$*];

$krep3_r2uFQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord32
                                              GHC.Types.[]];

GHC.Word.$tc'W32#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r2uFN $krep3_r2uFQ];

GHC.Word.$tc'W32#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'W32#"#;

GHC.Word.$tc'W32#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tc'W32#3];

GHC.Word.$tc'W32# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15609358257729636621##
                                    4567728021977807739##
                                    GHC.Word.$trModule
                                    GHC.Word.$tc'W32#2
                                    0#
                                    GHC.Word.$tc'W32#1];

GHC.Word.$tcWord5 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tcWord6];

GHC.Word.$tcWord64 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3342358330123258062##
                                    10610880953247303810##
                                    GHC.Word.$trModule
                                    GHC.Word.$tcWord5
                                    0#
                                    GHC.Types.krep$*];

$krep4_r2uFR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord64
                                              GHC.Types.[]];

GHC.Word.$tc'W64#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r2uFN $krep4_r2uFR];

GHC.Word.$tc'W64#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'W64#"#;

GHC.Word.$tc'W64#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tc'W64#3];

GHC.Word.$tc'W64# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3390197976568817661##
                                    1176743391454549598##
                                    GHC.Word.$trModule
                                    GHC.Word.$tc'W64#2
                                    0#
                                    GHC.Word.$tc'W64#1];

GHC.Word.W8# :: GHC.Prim.Word# -> GHC.Word.Word8
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Word.W8# [eta_B1];

GHC.Word.W16# :: GHC.Prim.Word# -> GHC.Word.Word16
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Word.W16# [eta_B1];

GHC.Word.W32# :: GHC.Prim.Word# -> GHC.Word.Word32
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Word.W32# [eta_B1];

GHC.Word.W64# :: GHC.Prim.Word# -> GHC.Word.Word64
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Word.W64# [eta_B1];


==================== STG syntax: ====================
2018-03-16 15:57:09.767067187 UTC

GHC.Word.$fEnumWord8_$cfromEnum :: GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uFT]
        case ds_s2uFT of {
          GHC.Word.W8# x#_s2uFV [Occ=Once] ->
              case word2Int# [x#_s2uFV] of sat_s2uFW {
                __DEFAULT -> GHC.Types.I# [sat_s2uFW];
              };
        };

GHC.Word.$fEnumWord16_$cfromEnum
  :: GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uFX]
        case ds_s2uFX of {
          GHC.Word.W16# x#_s2uFZ [Occ=Once] ->
              case word2Int# [x#_s2uFZ] of sat_s2uG0 {
                __DEFAULT -> GHC.Types.I# [sat_s2uG0];
              };
        };

GHC.Word.$fEnumWord32_$cfromEnum
  :: GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uG1]
        case ds_s2uG1 of {
          GHC.Word.W32# x#_s2uG3 [Occ=Once] ->
              case word2Int# [x#_s2uG3] of sat_s2uG4 {
                __DEFAULT -> GHC.Types.I# [sat_s2uG4];
              };
        };

GHC.Word.$fNumWord64_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Word.Word64
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s2uG5]
        case GHC.Integer.Type.integerToWord i_s2uG5 of wild_s2uG6 {
          __DEFAULT -> GHC.Word.W64# [wild_s2uG6];
        };

GHC.Word.$fNumWord64_$cabs :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_s2uG7] x_s2uG7;

GHC.Word.$fNumWord64_$cnegate :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uG8]
        case ds_s2uG8 of {
          GHC.Word.W64# x#_s2uGa [Occ=Once] ->
              case word2Int# [x#_s2uGa] of sat_s2uGb {
                __DEFAULT ->
                    case negateInt# [sat_s2uGb] of sat_s2uGc {
                      __DEFAULT ->
                          case int2Word# [sat_s2uGc] of sat_s2uGd {
                            __DEFAULT -> GHC.Word.W64# [sat_s2uGd];
                          };
                    };
              };
        };

GHC.Word.$fNumWord64_$c*
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uGe ds1_s2uGf]
        case ds_s2uGe of {
          GHC.Word.W64# x#_s2uGh [Occ=Once] ->
              case ds1_s2uGf of {
                GHC.Word.W64# y#_s2uGj [Occ=Once] ->
                    case timesWord# [x#_s2uGh y#_s2uGj] of sat_s2uGk {
                      __DEFAULT -> GHC.Word.W64# [sat_s2uGk];
                    };
              };
        };

GHC.Word.$fNumWord64_$c-
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uGl ds1_s2uGm]
        case ds_s2uGl of {
          GHC.Word.W64# x#_s2uGo [Occ=Once] ->
              case ds1_s2uGm of {
                GHC.Word.W64# y#_s2uGq [Occ=Once] ->
                    case minusWord# [x#_s2uGo y#_s2uGq] of sat_s2uGr {
                      __DEFAULT -> GHC.Word.W64# [sat_s2uGr];
                    };
              };
        };

GHC.Word.$fNumWord64_$c+
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uGs ds1_s2uGt]
        case ds_s2uGs of {
          GHC.Word.W64# x#_s2uGv [Occ=Once] ->
              case ds1_s2uGt of {
                GHC.Word.W64# y#_s2uGx [Occ=Once] ->
                    case plusWord# [x#_s2uGv y#_s2uGx] of sat_s2uGy {
                      __DEFAULT -> GHC.Word.W64# [sat_s2uGy];
                    };
              };
        };

GHC.Word.$tcWord6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word64"#;

lvl_r2uFF :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Word.$tcWord6;

GHC.Word.$fIntegralWord64_$ctoInteger
  :: GHC.Word.Word64 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uGz]
        case ds_s2uGz of {
          GHC.Word.W64# x#_s2uGB ->
              case word2Int# [x#_s2uGB] of i#_s2uGC [Dmd=<S,U>] {
                __DEFAULT ->
                    case >=# [i#_s2uGC 0#] of {
                      __DEFAULT -> GHC.Integer.Type.wordToInteger x#_s2uGB;
                      1# -> GHC.Integer.Type.smallInteger i#_s2uGC;
                    };
              };
        };

GHC.Word.$fShowWord3 :: GHC.Word.Word64 -> GHC.Show.ShowS
[GblId, Arity=1, Str=<L,1*U(U)>, Unf=OtherCon []] =
    [] \r [x_s2uGE]
        let {
          w1_s2uGF [Occ=OnceL] :: GHC.Integer.Type.Integer
          [LclId] =
              [x_s2uGE] \u []
                  case x_s2uGE of {
                    GHC.Word.W64# x#_s2uGH ->
                        case word2Int# [x#_s2uGH] of i#_s2uGI [Dmd=<S,U>] {
                          __DEFAULT ->
                              case >=# [i#_s2uGI 0#] of {
                                __DEFAULT -> GHC.Integer.Type.wordToInteger x#_s2uGH;
                                1# -> GHC.Integer.Type.smallInteger i#_s2uGI;
                              };
                        };
                  }; } in
        let {
          sat_s2uGO [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
          [LclId] =
              [w1_s2uGF] \r [w2_s2uGK]
                  case GHC.Show.$w$cshowsPrec4 0# w1_s2uGF w2_s2uGK of {
                    (#,#) ww3_s2uGM [Occ=Once] ww4_s2uGN [Occ=Once] ->
                        : [ww3_s2uGM ww4_s2uGN];
                  };
        } in  sat_s2uGO;

GHC.Word.$fShowWord64_$cshowList
  :: [GHC.Word.Word64] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s2uGP s_s2uGQ]
        GHC.Show.showList__ GHC.Word.$fShowWord3 ls_s2uGP s_s2uGQ;

GHC.Word.$w$cshow [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s2uGR]
        case word2Int# [ww_s2uGR] of i#_s2uGS [Dmd=<S,U>] {
          __DEFAULT ->
              case >=# [i#_s2uGS 0#] of {
                __DEFAULT ->
                    case GHC.Integer.Type.wordToInteger ww_s2uGR of sat_s2uGU {
                      __DEFAULT -> GHC.Show.$w$cshowsPrec4 0# sat_s2uGU GHC.Types.[];
                    };
                1# ->
                    case GHC.Integer.Type.smallInteger i#_s2uGS of sat_s2uGV {
                      __DEFAULT -> GHC.Show.$w$cshowsPrec4 0# sat_s2uGV GHC.Types.[];
                    };
              };
        };

GHC.Word.$fShowWord64_$cshow [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word64 -> GHC.Base.String
[GblId, Arity=1, Str=<S(S),1*U(U)>m2, Unf=OtherCon []] =
    [] \r [w_s2uGW]
        case w_s2uGW of {
          GHC.Word.W64# ww1_s2uGY [Occ=Once] ->
              case GHC.Word.$w$cshow ww1_s2uGY of {
                (#,#) ww3_s2uH0 [Occ=Once] ww4_s2uH1 [Occ=Once] ->
                    : [ww3_s2uH0 ww4_s2uH1];
              };
        };

GHC.Word.$fShowWord64_$cshowsPrec
  :: GHC.Types.Int -> GHC.Word.Word64 -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,U(U)><L,1*U(U)>, Unf=OtherCon []] =
    [] \r [p_s2uH2 x_s2uH3]
        let {
          w1_s2uH4 [Occ=OnceL] :: GHC.Integer.Type.Integer
          [LclId] =
              [x_s2uH3] \u []
                  case x_s2uH3 of {
                    GHC.Word.W64# x#_s2uH6 ->
                        case word2Int# [x#_s2uH6] of i#_s2uH7 [Dmd=<S,U>] {
                          __DEFAULT ->
                              case >=# [i#_s2uH7 0#] of {
                                __DEFAULT -> GHC.Integer.Type.wordToInteger x#_s2uH6;
                                1# -> GHC.Integer.Type.smallInteger i#_s2uH7;
                              };
                        };
                  }; } in
        let {
          sat_s2uHf [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
          [LclId] =
              [p_s2uH2 w1_s2uH4] \r [w2_s2uH9]
                  case p_s2uH2 of {
                    GHC.Types.I# ww1_s2uHb [Occ=Once] ->
                        case GHC.Show.$w$cshowsPrec4 ww1_s2uHb w1_s2uH4 w2_s2uH9 of {
                          (#,#) ww3_s2uHd [Occ=Once] ww4_s2uHe [Occ=Once] ->
                              : [ww3_s2uHd ww4_s2uHe];
                        };
                  };
        } in  sat_s2uHf;

GHC.Word.$fShowWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Word.$fShowWord64_$cshowsPrec
                                    GHC.Word.$fShowWord64_$cshow
                                    GHC.Word.$fShowWord64_$cshowList];

GHC.Word.$fEnumWord5 :: GHC.Word.Word64 -> GHC.Types.Int
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [x_s2uHg]
        GHC.Enum.fromEnumError GHC.Word.$fShowWord64 lvl_r2uFF x_s2uHg;

sat_s2uHh :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_s2uHi :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s2uHh GHC.Types.[]];

GHC.Word.$fRealWord1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s2uHi;

GHC.Word.$w$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s2uHj]
        case word2Int# [ww_s2uHj] of i#_s2uHk [Dmd=<S,U>] {
          __DEFAULT ->
              case >=# [i#_s2uHk 0#] of {
                __DEFAULT ->
                    case GHC.Integer.Type.wordToInteger ww_s2uHj of sat_s2uHm {
                      __DEFAULT ->
                          case
                              GHC.Integer.Type.timesInteger sat_s2uHm GHC.Word.$fRealWord1
                          of
                          sat_s2uHn
                          { __DEFAULT -> GHC.Real.$w$sreduce sat_s2uHn GHC.Word.$fRealWord1;
                          };
                    };
                1# ->
                    case GHC.Integer.Type.smallInteger i#_s2uHk of sat_s2uHo {
                      __DEFAULT ->
                          case
                              GHC.Integer.Type.timesInteger sat_s2uHo GHC.Word.$fRealWord1
                          of
                          sat_s2uHp
                          { __DEFAULT -> GHC.Real.$w$sreduce sat_s2uHp GHC.Word.$fRealWord1;
                          };
                    };
              };
        };

GHC.Word.$fRealWord64_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word64 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2uHq]
        case w_s2uHq of {
          GHC.Word.W64# ww1_s2uHs [Occ=Once] ->
              case GHC.Word.$w$ctoRational ww1_s2uHs of {
                (#,#) ww3_s2uHu [Occ=Once] ww4_s2uHv [Occ=Once] ->
                    GHC.Real.:% [ww3_s2uHu ww4_s2uHv];
              };
        };

GHC.Word.$tcWord9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word8"#;

GHC.Word.$fEnumWord10 :: GHC.Word.Word8
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord9 of sat_s2uHw {
          __DEFAULT -> GHC.Enum.predError sat_s2uHw;
        };

GHC.Word.$fEnumWord11 :: GHC.Word.Word8
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord9 of sat_s2uHx {
          __DEFAULT -> GHC.Enum.succError sat_s2uHx;
        };

GHC.Word.neWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uHy ds1_s2uHz]
        case ds_s2uHy of {
          GHC.Word.W8# x_s2uHB [Occ=Once] ->
              case ds1_s2uHz of {
                GHC.Word.W8# y_s2uHD [Occ=Once] ->
                    case neWord# [x_s2uHB y_s2uHD] of sat_s2uHE {
                      __DEFAULT -> tagToEnum# [sat_s2uHE];
                    };
              };
        };

lvl2_r2uFH :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Word.$tcWord9;

GHC.Word.$fBitsWord8_$cminBound :: GHC.Word.Word8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W8#! [0##];

GHC.Word.$fEnumWord8_$cpred :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2uHF]
        case x_s2uHF of {
          GHC.Word.W8# x1_s2uHH [Occ=Once!] ->
              case x1_s2uHH of wild1_s2uHI {
                __DEFAULT ->
                    case minusWord# [wild1_s2uHI 1##] of sat_s2uHJ {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2uHJ] of sat_s2uHK {
                            __DEFAULT -> GHC.Word.W8# [sat_s2uHK];
                          };
                    };
                0## -> GHC.Word.$fEnumWord10;
              };
        };

GHC.Word.$fBoundedWord8_$cmaxBound :: GHC.Word.Word8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W8#! [255##];

GHC.Word.$fBoundedWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Word.$fBitsWord8_$cminBound
                                       GHC.Word.$fBoundedWord8_$cmaxBound];

GHC.Word.$fEnumWord8_$csucc :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2uHL]
        case x_s2uHL of {
          GHC.Word.W8# x1_s2uHN [Occ=Once!] ->
              case x1_s2uHN of wild1_s2uHO {
                __DEFAULT ->
                    case plusWord# [wild1_s2uHO 1##] of sat_s2uHP {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2uHP] of sat_s2uHQ {
                            __DEFAULT -> GHC.Word.W8# [sat_s2uHQ];
                          };
                    };
                255## -> GHC.Word.$fEnumWord11;
              };
        };

GHC.Word.$fShowWord8_$cshowsPrec
  :: GHC.Types.Int -> GHC.Word.Word8 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s2uHR x_s2uHS eta_s2uHT]
        case x_s2uHS of {
          GHC.Word.W8# x#_s2uHV [Occ=Once] ->
              case p_s2uHR of {
                GHC.Types.I# ww1_s2uHX [Occ=Once] ->
                    case word2Int# [x#_s2uHV] of sat_s2uHY {
                      __DEFAULT ->
                          case GHC.Show.$wshowSignedInt ww1_s2uHX sat_s2uHY eta_s2uHT of {
                            (#,#) ww5_s2uI0 [Occ=Once] ww6_s2uI1 [Occ=Once] ->
                                : [ww5_s2uI0 ww6_s2uI1];
                          };
                    };
              };
        };

GHC.Word.$fShowWord8_$cshow :: GHC.Word.Word8 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s2uI2]
        case x_s2uI2 of {
          GHC.Word.W8# x#_s2uI4 [Occ=Once] ->
              case word2Int# [x#_s2uI4] of sat_s2uI5 {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2uI5 GHC.Types.[] of {
                      (#,#) ww5_s2uI7 [Occ=Once] ww6_s2uI8 [Occ=Once] ->
                          : [ww5_s2uI7 ww6_s2uI8];
                    };
              };
        };

GHC.Word.$fShowWord4
  :: GHC.Word.Word8 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s2uI9 eta_s2uIa]
        case x_s2uI9 of {
          GHC.Word.W8# x#_s2uIc [Occ=Once] ->
              case word2Int# [x#_s2uIc] of sat_s2uId {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2uId eta_s2uIa of {
                      (#,#) ww5_s2uIf [Occ=Once] ww6_s2uIg [Occ=Once] ->
                          : [ww5_s2uIf ww6_s2uIg];
                    };
              };
        };

GHC.Word.$fShowWord8_$cshowList
  :: [GHC.Word.Word8] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s2uIh s_s2uIi]
        GHC.Show.showList__ GHC.Word.$fShowWord4 ls_s2uIh s_s2uIi;

GHC.Word.$fShowWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Word.$fShowWord8_$cshowsPrec
                                    GHC.Word.$fShowWord8_$cshow
                                    GHC.Word.$fShowWord8_$cshowList];

GHC.Word.$wlvl3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Word.Word8
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s2uIj]
        GHC.Enum.$wtoEnumError
            GHC.Word.$fShowWord8
            lvl2_r2uFH
            ww_s2uIj
            GHC.Word.$fBitsWord8_$cminBound
            GHC.Word.$fBoundedWord8_$cmaxBound;

GHC.Word.$w$ctoEnum2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s2uIk]
        case >=# [ww_s2uIk 0#] of {
          __DEFAULT -> GHC.Word.$wlvl3 ww_s2uIk;
          1# ->
              case <=# [ww_s2uIk 255#] of {
                __DEFAULT -> GHC.Word.$wlvl3 ww_s2uIk;
                1# -> int2Word# [ww_s2uIk];
              };
        };

GHC.Word.$fEnumWord8_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Word.Word8
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2uIp]
        case w_s2uIp of {
          GHC.Types.I# ww1_s2uIr [Occ=Once] ->
              case GHC.Word.$w$ctoEnum2 ww1_s2uIr of ww2_s2uIs {
                __DEFAULT -> GHC.Word.W8# [ww2_s2uIs];
              };
        };

GHC.Word.$w$cenumFromThenTo2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word8]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2uIt ww1_s2uIu ww2_s2uIv]
        case word2Int# [ww_s2uIt] of x1_s2uIw [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2uIu] of x2_s2uIx [Dmd=<S,U>] {
                __DEFAULT ->
                    case >=# [x2_s2uIx x1_s2uIw] of {
                      __DEFAULT ->
                          case word2Int# [ww2_s2uIv] of y_s2uIz [Dmd=<S,U>] {
                            __DEFAULT ->
                                case ># [y_s2uIz x2_s2uIx] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2uIU [Occ=Once] :: [GHC.Word.Word8]
                                        [LclId] =
                                            [x1_s2uIw x2_s2uIx y_s2uIz] \u []
                                                case
                                                    -# [x2_s2uIx x1_s2uIw]
                                                of
                                                delta_s2uIF [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2uIz delta_s2uIF]
                                                      of
                                                      y'_s2uIG [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_dn_s2uIH [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int# -> [GHC.Word.Word8]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2uIF
                                                                            y'_s2uIG
                                                                            go_dn_s2uIH] \r [x_s2uII]
                                                                      case
                                                                          <# [x_s2uII y'_s2uIG]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2uIP [Occ=Once]
                                                                                :: [GHC.Word.Word8]
                                                                              [LclId] =
                                                                                  [delta_s2uIF
                                                                                   go_dn_s2uIH
                                                                                   x_s2uII] \u []
                                                                                      case
                                                                                          +# [x_s2uII
                                                                                              delta_s2uIF]
                                                                                      of
                                                                                      sat_s2uIO
                                                                                      { __DEFAULT ->
                                                                                            go_dn_s2uIH
                                                                                                sat_s2uIO;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2uIN [Occ=Once]
                                                                                :: GHC.Word.Word8
                                                                              [LclId] =
                                                                                  [x_s2uII] \u []
                                                                                      case
                                                                                          >=# [x_s2uII
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl3
                                                                                                x_s2uII;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uII
                                                                                                     255#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl3
                                                                                                      x_s2uII;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uII]
                                                                                                  of
                                                                                                  sat_s2uIM
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W8# [sat_s2uIM];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uIN
                                                                                 sat_s2uIP];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2uIT [Occ=Once]
                                                                                :: GHC.Word.Word8
                                                                              [LclId] =
                                                                                  [x_s2uII] \u []
                                                                                      case
                                                                                          >=# [x_s2uII
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl3
                                                                                                x_s2uII;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uII
                                                                                                     255#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl3
                                                                                                      x_s2uII;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uII]
                                                                                                  of
                                                                                                  sat_s2uIS
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W8# [sat_s2uIS];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uIT
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_dn_s2uIH x2_s2uIx;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2uIE [Occ=Once] :: GHC.Word.Word8
                                        [LclId] =
                                            [x1_s2uIw] \u []
                                                case >=# [x1_s2uIw 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl3 x1_s2uIw;
                                                  1# ->
                                                      case <=# [x1_s2uIw 255#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl3 x1_s2uIw;
                                                        1# ->
                                                            case int2Word# [x1_s2uIw] of sat_s2uID {
                                                              __DEFAULT -> GHC.Word.W8# [sat_s2uID];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2uIE sat_s2uIU];
                                  1# ->
                                      case ># [y_s2uIz x1_s2uIw] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2uIZ [Occ=Once] :: GHC.Word.Word8
                                              [LclId] =
                                                  [x1_s2uIw] \u []
                                                      case >=# [x1_s2uIw 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl3 x1_s2uIw;
                                                        1# ->
                                                            case <=# [x1_s2uIw 255#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl3 x1_s2uIw;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2uIw]
                                                                  of
                                                                  sat_s2uIY
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W8# [sat_s2uIY];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2uIZ GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                      1# ->
                          case word2Int# [ww2_s2uIv] of y_s2uJ0 [Dmd=<S,U>] {
                            __DEFAULT ->
                                case <# [y_s2uJ0 x2_s2uIx] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2uJl [Occ=Once] :: [GHC.Word.Word8]
                                        [LclId] =
                                            [x1_s2uIw x2_s2uIx y_s2uJ0] \u []
                                                case
                                                    -# [x2_s2uIx x1_s2uIw]
                                                of
                                                delta_s2uJ6 [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2uJ0 delta_s2uJ6]
                                                      of
                                                      y'_s2uJ7 [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_up_s2uJ8 [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int# -> [GHC.Word.Word8]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2uJ6
                                                                            y'_s2uJ7
                                                                            go_up_s2uJ8] \r [x_s2uJ9]
                                                                      case
                                                                          ># [x_s2uJ9 y'_s2uJ7]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2uJg [Occ=Once]
                                                                                :: [GHC.Word.Word8]
                                                                              [LclId] =
                                                                                  [delta_s2uJ6
                                                                                   go_up_s2uJ8
                                                                                   x_s2uJ9] \u []
                                                                                      case
                                                                                          +# [x_s2uJ9
                                                                                              delta_s2uJ6]
                                                                                      of
                                                                                      sat_s2uJf
                                                                                      { __DEFAULT ->
                                                                                            go_up_s2uJ8
                                                                                                sat_s2uJf;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2uJe [Occ=Once]
                                                                                :: GHC.Word.Word8
                                                                              [LclId] =
                                                                                  [x_s2uJ9] \u []
                                                                                      case
                                                                                          >=# [x_s2uJ9
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl3
                                                                                                x_s2uJ9;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uJ9
                                                                                                     255#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl3
                                                                                                      x_s2uJ9;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uJ9]
                                                                                                  of
                                                                                                  sat_s2uJd
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W8# [sat_s2uJd];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uJe
                                                                                 sat_s2uJg];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2uJk [Occ=Once]
                                                                                :: GHC.Word.Word8
                                                                              [LclId] =
                                                                                  [x_s2uJ9] \u []
                                                                                      case
                                                                                          >=# [x_s2uJ9
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl3
                                                                                                x_s2uJ9;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uJ9
                                                                                                     255#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl3
                                                                                                      x_s2uJ9;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uJ9]
                                                                                                  of
                                                                                                  sat_s2uJj
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W8# [sat_s2uJj];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uJk
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_up_s2uJ8 x2_s2uIx;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2uJ5 [Occ=Once] :: GHC.Word.Word8
                                        [LclId] =
                                            [x1_s2uIw] \u []
                                                case >=# [x1_s2uIw 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl3 x1_s2uIw;
                                                  1# ->
                                                      case <=# [x1_s2uIw 255#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl3 x1_s2uIw;
                                                        1# ->
                                                            case int2Word# [x1_s2uIw] of sat_s2uJ4 {
                                                              __DEFAULT -> GHC.Word.W8# [sat_s2uJ4];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2uJ5 sat_s2uJl];
                                  1# ->
                                      case <# [y_s2uJ0 x1_s2uIw] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2uJq [Occ=Once] :: GHC.Word.Word8
                                              [LclId] =
                                                  [x1_s2uIw] \u []
                                                      case >=# [x1_s2uIw 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl3 x1_s2uIw;
                                                        1# ->
                                                            case <=# [x1_s2uIw 255#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl3 x1_s2uIw;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2uIw]
                                                                  of
                                                                  sat_s2uJp
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W8# [sat_s2uJp];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2uJq GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fEnumWord8_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word8
     -> GHC.Word.Word8 -> GHC.Word.Word8 -> [GHC.Word.Word8]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s2uJr w1_s2uJs w2_s2uJt]
        case w_s2uJr of {
          GHC.Word.W8# ww1_s2uJv [Occ=Once] ->
              case w1_s2uJs of {
                GHC.Word.W8# ww3_s2uJx [Occ=Once] ->
                    case w2_s2uJt of {
                      GHC.Word.W8# ww5_s2uJz [Occ=Once] ->
                          GHC.Word.$w$cenumFromThenTo2 ww1_s2uJv ww3_s2uJx ww5_s2uJz;
                    };
              };
        };

GHC.Word.$w$cenumFromTo2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word8]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2uJA ww1_s2uJB]
        case word2Int# [ww_s2uJA] of x0_s2uJC [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2uJB] of y_s2uJD [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x0_s2uJC y_s2uJD] of {
                      __DEFAULT ->
                          let {
                            go_s2uJF [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Word.Word8]
                            [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                                sat-only [y_s2uJD go_s2uJF] \r [x_s2uJG]
                                    let {
                                      sat_s2uJN [Occ=Once] :: [GHC.Word.Word8]
                                      [LclId] =
                                          [y_s2uJD go_s2uJF x_s2uJG] \u []
                                              case ==# [x_s2uJG y_s2uJD] of {
                                                __DEFAULT ->
                                                    case +# [x_s2uJG 1#] of sat_s2uJM {
                                                      __DEFAULT -> go_s2uJF sat_s2uJM;
                                                    };
                                                1# -> [] [];
                                              }; } in
                                    let {
                                      sat_s2uJK [Occ=Once] :: GHC.Word.Word8
                                      [LclId] =
                                          [x_s2uJG] \u []
                                              case >=# [x_s2uJG 0#] of {
                                                __DEFAULT -> GHC.Word.$wlvl3 x_s2uJG;
                                                1# ->
                                                    case <=# [x_s2uJG 255#] of {
                                                      __DEFAULT -> GHC.Word.$wlvl3 x_s2uJG;
                                                      1# ->
                                                          case int2Word# [x_s2uJG] of sat_s2uJJ {
                                                            __DEFAULT -> GHC.Word.W8# [sat_s2uJJ];
                                                          };
                                                    };
                                              };
                                    } in  : [sat_s2uJK sat_s2uJN];
                          } in  go_s2uJF x0_s2uJC;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord8_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> [GHC.Word.Word8]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s2uJO w1_s2uJP]
        case w_s2uJO of {
          GHC.Word.W8# ww1_s2uJR [Occ=Once] ->
              case w1_s2uJP of {
                GHC.Word.W8# ww3_s2uJT [Occ=Once] ->
                    GHC.Word.$w$cenumFromTo2 ww1_s2uJR ww3_s2uJT;
              };
        };

GHC.Word.$wgo2 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Word.Word8, [GHC.Word.Word8] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s2uJU]
        let {
          sat_s2uK4 [Occ=Once] :: [GHC.Word.Word8]
          [LclId] =
              [w_s2uJU] \u []
                  case w_s2uJU of wild_s2uJZ {
                    __DEFAULT ->
                        case +# [wild_s2uJZ 1#] of sat_s2uK0 {
                          __DEFAULT ->
                              case GHC.Word.$wgo2 sat_s2uK0 of {
                                (#,#) ww1_s2uK2 [Occ=Once] ww2_s2uK3 [Occ=Once] ->
                                    : [ww1_s2uK2 ww2_s2uK3];
                              };
                        };
                    255# -> [] [];
                  }; } in
        let {
          sat_s2uJY [Occ=Once] :: GHC.Word.Word8
          [LclId] =
              [w_s2uJU] \u []
                  case >=# [w_s2uJU 0#] of {
                    __DEFAULT -> GHC.Word.$wlvl3 w_s2uJU;
                    1# ->
                        case <=# [w_s2uJU 255#] of {
                          __DEFAULT -> GHC.Word.$wlvl3 w_s2uJU;
                          1# ->
                              case int2Word# [w_s2uJU] of sat_s2uJX {
                                __DEFAULT -> GHC.Word.W8# [sat_s2uJX];
                              };
                        };
                  };
        } in  (#,#) [sat_s2uJY sat_s2uK4];

GHC.Word.$fEnumWord8_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Word.Word8]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s2uK5]
        case GHC.Word.$wgo2 w_s2uK5 of {
          (#,#) ww1_s2uK7 [Occ=Once] ww2_s2uK8 [Occ=Once] ->
              : [ww1_s2uK7 ww2_s2uK8];
        };

GHC.Word.$fEnumWord8_$cenumFrom
  :: GHC.Word.Word8 -> [GHC.Word.Word8]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s2uK9]
        case n_s2uK9 of {
          GHC.Word.W8# x#_s2uKb [Occ=Once] ->
              case word2Int# [x#_s2uKb] of x_s2uKc [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x_s2uKc 255#] of {
                      __DEFAULT -> GHC.Word.$fEnumWord8_go x_s2uKc;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Word.$fEnumWord8_$csucc
                                    GHC.Word.$fEnumWord8_$cpred
                                    GHC.Word.$fEnumWord8_$ctoEnum
                                    GHC.Word.$fEnumWord8_$cfromEnum
                                    GHC.Word.$fEnumWord8_$cenumFrom
                                    GHC.Word.$fEnumWord8_$cenumFromThen
                                    GHC.Word.$fEnumWord8_$cenumFromTo
                                    GHC.Word.$fEnumWord8_$cenumFromThenTo];
GHC.Word.$fEnumWord8_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> [GHC.Word.Word8]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Word.$fEnumWord8 GHC.Word.$fBoundedWord8 eta_B2 eta_B1;

GHC.Word.$tcWord2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word16"#;

GHC.Word.$fEnumWord1 :: GHC.Word.Word16
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord2 of sat_s2uKe {
          __DEFAULT -> GHC.Enum.predError sat_s2uKe;
        };

GHC.Word.$fEnumWord2 :: GHC.Word.Word16
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord2 of sat_s2uKf {
          __DEFAULT -> GHC.Enum.succError sat_s2uKf;
        };

GHC.Word.neWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uKg ds1_s2uKh]
        case ds_s2uKg of {
          GHC.Word.W16# x_s2uKj [Occ=Once] ->
              case ds1_s2uKh of {
                GHC.Word.W16# y_s2uKl [Occ=Once] ->
                    case neWord# [x_s2uKj y_s2uKl] of sat_s2uKm {
                      __DEFAULT -> tagToEnum# [sat_s2uKm];
                    };
              };
        };

lvl4_r2uFJ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Word.$tcWord2;

GHC.Word.$fBitsWord16_$cminBound :: GHC.Word.Word16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W16#! [0##];

GHC.Word.$fEnumWord16_$cpred :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2uKn]
        case x_s2uKn of {
          GHC.Word.W16# x1_s2uKp [Occ=Once!] ->
              case x1_s2uKp of wild1_s2uKq {
                __DEFAULT ->
                    case minusWord# [wild1_s2uKq 1##] of sat_s2uKr {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2uKr] of sat_s2uKs {
                            __DEFAULT -> GHC.Word.W16# [sat_s2uKs];
                          };
                    };
                0## -> GHC.Word.$fEnumWord1;
              };
        };

GHC.Word.$fBoundedWord16_$cmaxBound :: GHC.Word.Word16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W16#! [65535##];

GHC.Word.$fBoundedWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Word.$fBitsWord16_$cminBound
                                       GHC.Word.$fBoundedWord16_$cmaxBound];

GHC.Word.$fEnumWord16_$csucc :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2uKt]
        case x_s2uKt of {
          GHC.Word.W16# x1_s2uKv [Occ=Once!] ->
              case x1_s2uKv of wild1_s2uKw {
                __DEFAULT ->
                    case plusWord# [wild1_s2uKw 1##] of sat_s2uKx {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2uKx] of sat_s2uKy {
                            __DEFAULT -> GHC.Word.W16# [sat_s2uKy];
                          };
                    };
                65535## -> GHC.Word.$fEnumWord2;
              };
        };

GHC.Word.$fShowWord16_$cshowsPrec
  :: GHC.Types.Int -> GHC.Word.Word16 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s2uKz x_s2uKA eta_s2uKB]
        case x_s2uKA of {
          GHC.Word.W16# x#_s2uKD [Occ=Once] ->
              case p_s2uKz of {
                GHC.Types.I# ww1_s2uKF [Occ=Once] ->
                    case word2Int# [x#_s2uKD] of sat_s2uKG {
                      __DEFAULT ->
                          case GHC.Show.$wshowSignedInt ww1_s2uKF sat_s2uKG eta_s2uKB of {
                            (#,#) ww5_s2uKI [Occ=Once] ww6_s2uKJ [Occ=Once] ->
                                : [ww5_s2uKI ww6_s2uKJ];
                          };
                    };
              };
        };

GHC.Word.$fShowWord16_$cshow :: GHC.Word.Word16 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s2uKK]
        case x_s2uKK of {
          GHC.Word.W16# x#_s2uKM [Occ=Once] ->
              case word2Int# [x#_s2uKM] of sat_s2uKN {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2uKN GHC.Types.[] of {
                      (#,#) ww5_s2uKP [Occ=Once] ww6_s2uKQ [Occ=Once] ->
                          : [ww5_s2uKP ww6_s2uKQ];
                    };
              };
        };

GHC.Word.$fShowWord1
  :: GHC.Word.Word16 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s2uKR eta_s2uKS]
        case x_s2uKR of {
          GHC.Word.W16# x#_s2uKU [Occ=Once] ->
              case word2Int# [x#_s2uKU] of sat_s2uKV {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2uKV eta_s2uKS of {
                      (#,#) ww5_s2uKX [Occ=Once] ww6_s2uKY [Occ=Once] ->
                          : [ww5_s2uKX ww6_s2uKY];
                    };
              };
        };

GHC.Word.$fShowWord16_$cshowList
  :: [GHC.Word.Word16] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s2uKZ s_s2uL0]
        GHC.Show.showList__ GHC.Word.$fShowWord1 ls_s2uKZ s_s2uL0;

GHC.Word.$fShowWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Word.$fShowWord16_$cshowsPrec
                                    GHC.Word.$fShowWord16_$cshow
                                    GHC.Word.$fShowWord16_$cshowList];

GHC.Word.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Word.Word16
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s2uL1]
        GHC.Enum.$wtoEnumError
            GHC.Word.$fShowWord16
            lvl4_r2uFJ
            ww_s2uL1
            GHC.Word.$fBitsWord16_$cminBound
            GHC.Word.$fBoundedWord16_$cmaxBound;

GHC.Word.$w$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s2uL2]
        case >=# [ww_s2uL2 0#] of {
          __DEFAULT -> GHC.Word.$wlvl ww_s2uL2;
          1# ->
              case <=# [ww_s2uL2 65535#] of {
                __DEFAULT -> GHC.Word.$wlvl ww_s2uL2;
                1# -> int2Word# [ww_s2uL2];
              };
        };

GHC.Word.$fEnumWord16_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Word.Word16
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2uL7]
        case w_s2uL7 of {
          GHC.Types.I# ww1_s2uL9 [Occ=Once] ->
              case GHC.Word.$w$ctoEnum ww1_s2uL9 of ww2_s2uLa {
                __DEFAULT -> GHC.Word.W16# [ww2_s2uLa];
              };
        };

GHC.Word.$w$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word16]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2uLb ww1_s2uLc ww2_s2uLd]
        case word2Int# [ww_s2uLb] of x1_s2uLe [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2uLc] of x2_s2uLf [Dmd=<S,U>] {
                __DEFAULT ->
                    case >=# [x2_s2uLf x1_s2uLe] of {
                      __DEFAULT ->
                          case word2Int# [ww2_s2uLd] of y_s2uLh [Dmd=<S,U>] {
                            __DEFAULT ->
                                case ># [y_s2uLh x2_s2uLf] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2uLC [Occ=Once] :: [GHC.Word.Word16]
                                        [LclId] =
                                            [x1_s2uLe x2_s2uLf y_s2uLh] \u []
                                                case
                                                    -# [x2_s2uLf x1_s2uLe]
                                                of
                                                delta_s2uLn [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2uLh delta_s2uLn]
                                                      of
                                                      y'_s2uLo [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_dn_s2uLp [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int#
                                                                   -> [GHC.Word.Word16]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2uLn
                                                                            y'_s2uLo
                                                                            go_dn_s2uLp] \r [x_s2uLq]
                                                                      case
                                                                          <# [x_s2uLq y'_s2uLo]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2uLx [Occ=Once]
                                                                                :: [GHC.Word.Word16]
                                                                              [LclId] =
                                                                                  [delta_s2uLn
                                                                                   go_dn_s2uLp
                                                                                   x_s2uLq] \u []
                                                                                      case
                                                                                          +# [x_s2uLq
                                                                                              delta_s2uLn]
                                                                                      of
                                                                                      sat_s2uLw
                                                                                      { __DEFAULT ->
                                                                                            go_dn_s2uLp
                                                                                                sat_s2uLw;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2uLv [Occ=Once]
                                                                                :: GHC.Word.Word16
                                                                              [LclId] =
                                                                                  [x_s2uLq] \u []
                                                                                      case
                                                                                          >=# [x_s2uLq
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl
                                                                                                x_s2uLq;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uLq
                                                                                                     65535#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl
                                                                                                      x_s2uLq;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uLq]
                                                                                                  of
                                                                                                  sat_s2uLu
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W16# [sat_s2uLu];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uLv
                                                                                 sat_s2uLx];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2uLB [Occ=Once]
                                                                                :: GHC.Word.Word16
                                                                              [LclId] =
                                                                                  [x_s2uLq] \u []
                                                                                      case
                                                                                          >=# [x_s2uLq
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl
                                                                                                x_s2uLq;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uLq
                                                                                                     65535#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl
                                                                                                      x_s2uLq;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uLq]
                                                                                                  of
                                                                                                  sat_s2uLA
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W16# [sat_s2uLA];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uLB
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_dn_s2uLp x2_s2uLf;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2uLm [Occ=Once] :: GHC.Word.Word16
                                        [LclId] =
                                            [x1_s2uLe] \u []
                                                case >=# [x1_s2uLe 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl x1_s2uLe;
                                                  1# ->
                                                      case <=# [x1_s2uLe 65535#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl x1_s2uLe;
                                                        1# ->
                                                            case int2Word# [x1_s2uLe] of sat_s2uLl {
                                                              __DEFAULT ->
                                                                  GHC.Word.W16# [sat_s2uLl];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2uLm sat_s2uLC];
                                  1# ->
                                      case ># [y_s2uLh x1_s2uLe] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2uLH [Occ=Once] :: GHC.Word.Word16
                                              [LclId] =
                                                  [x1_s2uLe] \u []
                                                      case >=# [x1_s2uLe 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl x1_s2uLe;
                                                        1# ->
                                                            case <=# [x1_s2uLe 65535#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl x1_s2uLe;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2uLe]
                                                                  of
                                                                  sat_s2uLG
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W16# [sat_s2uLG];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2uLH GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                      1# ->
                          case word2Int# [ww2_s2uLd] of y_s2uLI [Dmd=<S,U>] {
                            __DEFAULT ->
                                case <# [y_s2uLI x2_s2uLf] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2uM3 [Occ=Once] :: [GHC.Word.Word16]
                                        [LclId] =
                                            [x1_s2uLe x2_s2uLf y_s2uLI] \u []
                                                case
                                                    -# [x2_s2uLf x1_s2uLe]
                                                of
                                                delta_s2uLO [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2uLI delta_s2uLO]
                                                      of
                                                      y'_s2uLP [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_up_s2uLQ [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int#
                                                                   -> [GHC.Word.Word16]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2uLO
                                                                            y'_s2uLP
                                                                            go_up_s2uLQ] \r [x_s2uLR]
                                                                      case
                                                                          ># [x_s2uLR y'_s2uLP]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2uLY [Occ=Once]
                                                                                :: [GHC.Word.Word16]
                                                                              [LclId] =
                                                                                  [delta_s2uLO
                                                                                   go_up_s2uLQ
                                                                                   x_s2uLR] \u []
                                                                                      case
                                                                                          +# [x_s2uLR
                                                                                              delta_s2uLO]
                                                                                      of
                                                                                      sat_s2uLX
                                                                                      { __DEFAULT ->
                                                                                            go_up_s2uLQ
                                                                                                sat_s2uLX;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2uLW [Occ=Once]
                                                                                :: GHC.Word.Word16
                                                                              [LclId] =
                                                                                  [x_s2uLR] \u []
                                                                                      case
                                                                                          >=# [x_s2uLR
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl
                                                                                                x_s2uLR;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uLR
                                                                                                     65535#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl
                                                                                                      x_s2uLR;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uLR]
                                                                                                  of
                                                                                                  sat_s2uLV
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W16# [sat_s2uLV];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uLW
                                                                                 sat_s2uLY];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2uM2 [Occ=Once]
                                                                                :: GHC.Word.Word16
                                                                              [LclId] =
                                                                                  [x_s2uLR] \u []
                                                                                      case
                                                                                          >=# [x_s2uLR
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl
                                                                                                x_s2uLR;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uLR
                                                                                                     65535#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl
                                                                                                      x_s2uLR;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uLR]
                                                                                                  of
                                                                                                  sat_s2uM1
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W16# [sat_s2uM1];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uM2
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_up_s2uLQ x2_s2uLf;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2uLN [Occ=Once] :: GHC.Word.Word16
                                        [LclId] =
                                            [x1_s2uLe] \u []
                                                case >=# [x1_s2uLe 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl x1_s2uLe;
                                                  1# ->
                                                      case <=# [x1_s2uLe 65535#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl x1_s2uLe;
                                                        1# ->
                                                            case int2Word# [x1_s2uLe] of sat_s2uLM {
                                                              __DEFAULT ->
                                                                  GHC.Word.W16# [sat_s2uLM];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2uLN sat_s2uM3];
                                  1# ->
                                      case <# [y_s2uLI x1_s2uLe] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2uM8 [Occ=Once] :: GHC.Word.Word16
                                              [LclId] =
                                                  [x1_s2uLe] \u []
                                                      case >=# [x1_s2uLe 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl x1_s2uLe;
                                                        1# ->
                                                            case <=# [x1_s2uLe 65535#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl x1_s2uLe;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2uLe]
                                                                  of
                                                                  sat_s2uM7
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W16# [sat_s2uM7];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2uM8 GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fEnumWord16_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word16
     -> GHC.Word.Word16 -> GHC.Word.Word16 -> [GHC.Word.Word16]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s2uM9 w1_s2uMa w2_s2uMb]
        case w_s2uM9 of {
          GHC.Word.W16# ww1_s2uMd [Occ=Once] ->
              case w1_s2uMa of {
                GHC.Word.W16# ww3_s2uMf [Occ=Once] ->
                    case w2_s2uMb of {
                      GHC.Word.W16# ww5_s2uMh [Occ=Once] ->
                          GHC.Word.$w$cenumFromThenTo ww1_s2uMd ww3_s2uMf ww5_s2uMh;
                    };
              };
        };

GHC.Word.$w$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word16]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2uMi ww1_s2uMj]
        case word2Int# [ww_s2uMi] of x0_s2uMk [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2uMj] of y_s2uMl [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x0_s2uMk y_s2uMl] of {
                      __DEFAULT ->
                          let {
                            go_s2uMn [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Word.Word16]
                            [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                                sat-only [y_s2uMl go_s2uMn] \r [x_s2uMo]
                                    let {
                                      sat_s2uMv [Occ=Once] :: [GHC.Word.Word16]
                                      [LclId] =
                                          [y_s2uMl go_s2uMn x_s2uMo] \u []
                                              case ==# [x_s2uMo y_s2uMl] of {
                                                __DEFAULT ->
                                                    case +# [x_s2uMo 1#] of sat_s2uMu {
                                                      __DEFAULT -> go_s2uMn sat_s2uMu;
                                                    };
                                                1# -> [] [];
                                              }; } in
                                    let {
                                      sat_s2uMs [Occ=Once] :: GHC.Word.Word16
                                      [LclId] =
                                          [x_s2uMo] \u []
                                              case >=# [x_s2uMo 0#] of {
                                                __DEFAULT -> GHC.Word.$wlvl x_s2uMo;
                                                1# ->
                                                    case <=# [x_s2uMo 65535#] of {
                                                      __DEFAULT -> GHC.Word.$wlvl x_s2uMo;
                                                      1# ->
                                                          case int2Word# [x_s2uMo] of sat_s2uMr {
                                                            __DEFAULT -> GHC.Word.W16# [sat_s2uMr];
                                                          };
                                                    };
                                              };
                                    } in  : [sat_s2uMs sat_s2uMv];
                          } in  go_s2uMn x0_s2uMk;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord16_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> [GHC.Word.Word16]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s2uMw w1_s2uMx]
        case w_s2uMw of {
          GHC.Word.W16# ww1_s2uMz [Occ=Once] ->
              case w1_s2uMx of {
                GHC.Word.W16# ww3_s2uMB [Occ=Once] ->
                    GHC.Word.$w$cenumFromTo ww1_s2uMz ww3_s2uMB;
              };
        };

GHC.Word.$wgo [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Word.Word16, [GHC.Word.Word16] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s2uMC]
        let {
          sat_s2uMM [Occ=Once] :: [GHC.Word.Word16]
          [LclId] =
              [w_s2uMC] \u []
                  case w_s2uMC of wild_s2uMH {
                    __DEFAULT ->
                        case +# [wild_s2uMH 1#] of sat_s2uMI {
                          __DEFAULT ->
                              case GHC.Word.$wgo sat_s2uMI of {
                                (#,#) ww1_s2uMK [Occ=Once] ww2_s2uML [Occ=Once] ->
                                    : [ww1_s2uMK ww2_s2uML];
                              };
                        };
                    65535# -> [] [];
                  }; } in
        let {
          sat_s2uMG [Occ=Once] :: GHC.Word.Word16
          [LclId] =
              [w_s2uMC] \u []
                  case >=# [w_s2uMC 0#] of {
                    __DEFAULT -> GHC.Word.$wlvl w_s2uMC;
                    1# ->
                        case <=# [w_s2uMC 65535#] of {
                          __DEFAULT -> GHC.Word.$wlvl w_s2uMC;
                          1# ->
                              case int2Word# [w_s2uMC] of sat_s2uMF {
                                __DEFAULT -> GHC.Word.W16# [sat_s2uMF];
                              };
                        };
                  };
        } in  (#,#) [sat_s2uMG sat_s2uMM];

GHC.Word.$fEnumWord16_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Word.Word16]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s2uMN]
        case GHC.Word.$wgo w_s2uMN of {
          (#,#) ww1_s2uMP [Occ=Once] ww2_s2uMQ [Occ=Once] ->
              : [ww1_s2uMP ww2_s2uMQ];
        };

GHC.Word.$fEnumWord16_$cenumFrom
  :: GHC.Word.Word16 -> [GHC.Word.Word16]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s2uMR]
        case n_s2uMR of {
          GHC.Word.W16# x#_s2uMT [Occ=Once] ->
              case word2Int# [x#_s2uMT] of x_s2uMU [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x_s2uMU 65535#] of {
                      __DEFAULT -> GHC.Word.$fEnumWord16_go x_s2uMU;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Word.$fEnumWord16_$csucc
                                    GHC.Word.$fEnumWord16_$cpred
                                    GHC.Word.$fEnumWord16_$ctoEnum
                                    GHC.Word.$fEnumWord16_$cfromEnum
                                    GHC.Word.$fEnumWord16_$cenumFrom
                                    GHC.Word.$fEnumWord16_$cenumFromThen
                                    GHC.Word.$fEnumWord16_$cenumFromTo
                                    GHC.Word.$fEnumWord16_$cenumFromThenTo];
GHC.Word.$fEnumWord16_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> [GHC.Word.Word16]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Word.$fEnumWord16 GHC.Word.$fBoundedWord16 eta_B2 eta_B1;

GHC.Word.$tcWord4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word32"#;

GHC.Word.$fEnumWord3 :: GHC.Word.Word32
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord4 of sat_s2uMW {
          __DEFAULT -> GHC.Enum.predError sat_s2uMW;
        };

GHC.Word.$fEnumWord4 :: GHC.Word.Word32
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord4 of sat_s2uMX {
          __DEFAULT -> GHC.Enum.succError sat_s2uMX;
        };

GHC.Word.neWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uMY ds1_s2uMZ]
        case ds_s2uMY of {
          GHC.Word.W32# x_s2uN1 [Occ=Once] ->
              case ds1_s2uMZ of {
                GHC.Word.W32# y_s2uN3 [Occ=Once] ->
                    case neWord# [x_s2uN1 y_s2uN3] of sat_s2uN4 {
                      __DEFAULT -> tagToEnum# [sat_s2uN4];
                    };
              };
        };

lvl6_r2uFL :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Word.$tcWord4;

GHC.Word.$fBitsWord32_$cminBound :: GHC.Word.Word32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W32#! [0##];

GHC.Word.$fEnumWord32_$cpred :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2uN5]
        case x_s2uN5 of {
          GHC.Word.W32# x1_s2uN7 [Occ=Once!] ->
              case x1_s2uN7 of wild1_s2uN8 {
                __DEFAULT ->
                    case minusWord# [wild1_s2uN8 1##] of sat_s2uN9 {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2uN9] of sat_s2uNa {
                            __DEFAULT -> GHC.Word.W32# [sat_s2uNa];
                          };
                    };
                0## -> GHC.Word.$fEnumWord3;
              };
        };

GHC.Word.$fBoundedWord32_$cmaxBound :: GHC.Word.Word32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W32#! [4294967295##];

GHC.Word.$fBoundedWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Word.$fBitsWord32_$cminBound
                                       GHC.Word.$fBoundedWord32_$cmaxBound];

GHC.Word.$fEnumWord32_$csucc :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2uNb]
        case x_s2uNb of {
          GHC.Word.W32# x1_s2uNd [Occ=Once!] ->
              case x1_s2uNd of wild1_s2uNe {
                __DEFAULT ->
                    case plusWord# [wild1_s2uNe 1##] of sat_s2uNf {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2uNf] of sat_s2uNg {
                            __DEFAULT -> GHC.Word.W32# [sat_s2uNg];
                          };
                    };
                4294967295## -> GHC.Word.$fEnumWord4;
              };
        };

GHC.Word.$fShowWord32_$cshowsPrec
  :: GHC.Types.Int -> GHC.Word.Word32 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s2uNh x_s2uNi eta_s2uNj]
        case x_s2uNi of {
          GHC.Word.W32# x#_s2uNl [Occ=Once] ->
              case p_s2uNh of {
                GHC.Types.I# ww1_s2uNn [Occ=Once] ->
                    case word2Int# [x#_s2uNl] of sat_s2uNo {
                      __DEFAULT ->
                          case GHC.Show.$wshowSignedInt ww1_s2uNn sat_s2uNo eta_s2uNj of {
                            (#,#) ww5_s2uNq [Occ=Once] ww6_s2uNr [Occ=Once] ->
                                : [ww5_s2uNq ww6_s2uNr];
                          };
                    };
              };
        };

GHC.Word.$fShowWord32_$cshow :: GHC.Word.Word32 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s2uNs]
        case x_s2uNs of {
          GHC.Word.W32# x#_s2uNu [Occ=Once] ->
              case word2Int# [x#_s2uNu] of sat_s2uNv {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2uNv GHC.Types.[] of {
                      (#,#) ww5_s2uNx [Occ=Once] ww6_s2uNy [Occ=Once] ->
                          : [ww5_s2uNx ww6_s2uNy];
                    };
              };
        };

GHC.Word.$fShowWord2
  :: GHC.Word.Word32 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s2uNz eta_s2uNA]
        case x_s2uNz of {
          GHC.Word.W32# x#_s2uNC [Occ=Once] ->
              case word2Int# [x#_s2uNC] of sat_s2uND {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2uND eta_s2uNA of {
                      (#,#) ww5_s2uNF [Occ=Once] ww6_s2uNG [Occ=Once] ->
                          : [ww5_s2uNF ww6_s2uNG];
                    };
              };
        };

GHC.Word.$fShowWord32_$cshowList
  :: [GHC.Word.Word32] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s2uNH s_s2uNI]
        GHC.Show.showList__ GHC.Word.$fShowWord2 ls_s2uNH s_s2uNI;

GHC.Word.$fShowWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Word.$fShowWord32_$cshowsPrec
                                    GHC.Word.$fShowWord32_$cshow
                                    GHC.Word.$fShowWord32_$cshowList];

GHC.Word.$wlvl1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Word.Word32
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s2uNJ]
        GHC.Enum.$wtoEnumError
            GHC.Word.$fShowWord32
            lvl6_r2uFL
            ww_s2uNJ
            GHC.Word.$fBitsWord32_$cminBound
            GHC.Word.$fBoundedWord32_$cmaxBound;

GHC.Word.$w$ctoEnum1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s2uNK]
        case >=# [ww_s2uNK 0#] of {
          __DEFAULT -> GHC.Word.$wlvl1 ww_s2uNK;
          1# ->
              case <=# [ww_s2uNK 4294967295#] of {
                __DEFAULT -> GHC.Word.$wlvl1 ww_s2uNK;
                1# -> int2Word# [ww_s2uNK];
              };
        };

GHC.Word.$fEnumWord32_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Word.Word32
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2uNP]
        case w_s2uNP of {
          GHC.Types.I# ww1_s2uNR [Occ=Once] ->
              case GHC.Word.$w$ctoEnum1 ww1_s2uNR of ww2_s2uNS {
                __DEFAULT -> GHC.Word.W32# [ww2_s2uNS];
              };
        };

GHC.Word.$w$cenumFromThenTo1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word32]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2uNT ww1_s2uNU ww2_s2uNV]
        case word2Int# [ww_s2uNT] of x1_s2uNW [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2uNU] of x2_s2uNX [Dmd=<S,U>] {
                __DEFAULT ->
                    case >=# [x2_s2uNX x1_s2uNW] of {
                      __DEFAULT ->
                          case word2Int# [ww2_s2uNV] of y_s2uNZ [Dmd=<S,U>] {
                            __DEFAULT ->
                                case ># [y_s2uNZ x2_s2uNX] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2uOk [Occ=Once] :: [GHC.Word.Word32]
                                        [LclId] =
                                            [x1_s2uNW x2_s2uNX y_s2uNZ] \u []
                                                case
                                                    -# [x2_s2uNX x1_s2uNW]
                                                of
                                                delta_s2uO5 [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2uNZ delta_s2uO5]
                                                      of
                                                      y'_s2uO6 [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_dn_s2uO7 [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int#
                                                                   -> [GHC.Word.Word32]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2uO5
                                                                            y'_s2uO6
                                                                            go_dn_s2uO7] \r [x_s2uO8]
                                                                      case
                                                                          <# [x_s2uO8 y'_s2uO6]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2uOf [Occ=Once]
                                                                                :: [GHC.Word.Word32]
                                                                              [LclId] =
                                                                                  [delta_s2uO5
                                                                                   go_dn_s2uO7
                                                                                   x_s2uO8] \u []
                                                                                      case
                                                                                          +# [x_s2uO8
                                                                                              delta_s2uO5]
                                                                                      of
                                                                                      sat_s2uOe
                                                                                      { __DEFAULT ->
                                                                                            go_dn_s2uO7
                                                                                                sat_s2uOe;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2uOd [Occ=Once]
                                                                                :: GHC.Word.Word32
                                                                              [LclId] =
                                                                                  [x_s2uO8] \u []
                                                                                      case
                                                                                          >=# [x_s2uO8
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl1
                                                                                                x_s2uO8;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uO8
                                                                                                     4294967295#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl1
                                                                                                      x_s2uO8;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uO8]
                                                                                                  of
                                                                                                  sat_s2uOc
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W32# [sat_s2uOc];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uOd
                                                                                 sat_s2uOf];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2uOj [Occ=Once]
                                                                                :: GHC.Word.Word32
                                                                              [LclId] =
                                                                                  [x_s2uO8] \u []
                                                                                      case
                                                                                          >=# [x_s2uO8
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl1
                                                                                                x_s2uO8;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uO8
                                                                                                     4294967295#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl1
                                                                                                      x_s2uO8;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uO8]
                                                                                                  of
                                                                                                  sat_s2uOi
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W32# [sat_s2uOi];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uOj
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_dn_s2uO7 x2_s2uNX;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2uO4 [Occ=Once] :: GHC.Word.Word32
                                        [LclId] =
                                            [x1_s2uNW] \u []
                                                case >=# [x1_s2uNW 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl1 x1_s2uNW;
                                                  1# ->
                                                      case <=# [x1_s2uNW 4294967295#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl1 x1_s2uNW;
                                                        1# ->
                                                            case int2Word# [x1_s2uNW] of sat_s2uO3 {
                                                              __DEFAULT ->
                                                                  GHC.Word.W32# [sat_s2uO3];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2uO4 sat_s2uOk];
                                  1# ->
                                      case ># [y_s2uNZ x1_s2uNW] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2uOp [Occ=Once] :: GHC.Word.Word32
                                              [LclId] =
                                                  [x1_s2uNW] \u []
                                                      case >=# [x1_s2uNW 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl1 x1_s2uNW;
                                                        1# ->
                                                            case <=# [x1_s2uNW 4294967295#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl1 x1_s2uNW;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2uNW]
                                                                  of
                                                                  sat_s2uOo
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W32# [sat_s2uOo];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2uOp GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                      1# ->
                          case word2Int# [ww2_s2uNV] of y_s2uOq [Dmd=<S,U>] {
                            __DEFAULT ->
                                case <# [y_s2uOq x2_s2uNX] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2uOL [Occ=Once] :: [GHC.Word.Word32]
                                        [LclId] =
                                            [x1_s2uNW x2_s2uNX y_s2uOq] \u []
                                                case
                                                    -# [x2_s2uNX x1_s2uNW]
                                                of
                                                delta_s2uOw [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2uOq delta_s2uOw]
                                                      of
                                                      y'_s2uOx [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_up_s2uOy [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int#
                                                                   -> [GHC.Word.Word32]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2uOw
                                                                            y'_s2uOx
                                                                            go_up_s2uOy] \r [x_s2uOz]
                                                                      case
                                                                          ># [x_s2uOz y'_s2uOx]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2uOG [Occ=Once]
                                                                                :: [GHC.Word.Word32]
                                                                              [LclId] =
                                                                                  [delta_s2uOw
                                                                                   go_up_s2uOy
                                                                                   x_s2uOz] \u []
                                                                                      case
                                                                                          +# [x_s2uOz
                                                                                              delta_s2uOw]
                                                                                      of
                                                                                      sat_s2uOF
                                                                                      { __DEFAULT ->
                                                                                            go_up_s2uOy
                                                                                                sat_s2uOF;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2uOE [Occ=Once]
                                                                                :: GHC.Word.Word32
                                                                              [LclId] =
                                                                                  [x_s2uOz] \u []
                                                                                      case
                                                                                          >=# [x_s2uOz
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl1
                                                                                                x_s2uOz;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uOz
                                                                                                     4294967295#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl1
                                                                                                      x_s2uOz;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uOz]
                                                                                                  of
                                                                                                  sat_s2uOD
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W32# [sat_s2uOD];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uOE
                                                                                 sat_s2uOG];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2uOK [Occ=Once]
                                                                                :: GHC.Word.Word32
                                                                              [LclId] =
                                                                                  [x_s2uOz] \u []
                                                                                      case
                                                                                          >=# [x_s2uOz
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl1
                                                                                                x_s2uOz;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2uOz
                                                                                                     4294967295#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl1
                                                                                                      x_s2uOz;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2uOz]
                                                                                                  of
                                                                                                  sat_s2uOJ
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W32# [sat_s2uOJ];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2uOK
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_up_s2uOy x2_s2uNX;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2uOv [Occ=Once] :: GHC.Word.Word32
                                        [LclId] =
                                            [x1_s2uNW] \u []
                                                case >=# [x1_s2uNW 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl1 x1_s2uNW;
                                                  1# ->
                                                      case <=# [x1_s2uNW 4294967295#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl1 x1_s2uNW;
                                                        1# ->
                                                            case int2Word# [x1_s2uNW] of sat_s2uOu {
                                                              __DEFAULT ->
                                                                  GHC.Word.W32# [sat_s2uOu];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2uOv sat_s2uOL];
                                  1# ->
                                      case <# [y_s2uOq x1_s2uNW] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2uOQ [Occ=Once] :: GHC.Word.Word32
                                              [LclId] =
                                                  [x1_s2uNW] \u []
                                                      case >=# [x1_s2uNW 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl1 x1_s2uNW;
                                                        1# ->
                                                            case <=# [x1_s2uNW 4294967295#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl1 x1_s2uNW;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2uNW]
                                                                  of
                                                                  sat_s2uOP
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W32# [sat_s2uOP];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2uOQ GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fEnumWord32_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word32
     -> GHC.Word.Word32 -> GHC.Word.Word32 -> [GHC.Word.Word32]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s2uOR w1_s2uOS w2_s2uOT]
        case w_s2uOR of {
          GHC.Word.W32# ww1_s2uOV [Occ=Once] ->
              case w1_s2uOS of {
                GHC.Word.W32# ww3_s2uOX [Occ=Once] ->
                    case w2_s2uOT of {
                      GHC.Word.W32# ww5_s2uOZ [Occ=Once] ->
                          GHC.Word.$w$cenumFromThenTo1 ww1_s2uOV ww3_s2uOX ww5_s2uOZ;
                    };
              };
        };

GHC.Word.$w$cenumFromTo1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word32]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2uP0 ww1_s2uP1]
        case word2Int# [ww_s2uP0] of x0_s2uP2 [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2uP1] of y_s2uP3 [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x0_s2uP2 y_s2uP3] of {
                      __DEFAULT ->
                          let {
                            go_s2uP5 [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Word.Word32]
                            [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                                sat-only [y_s2uP3 go_s2uP5] \r [x_s2uP6]
                                    let {
                                      sat_s2uPd [Occ=Once] :: [GHC.Word.Word32]
                                      [LclId] =
                                          [y_s2uP3 go_s2uP5 x_s2uP6] \u []
                                              case ==# [x_s2uP6 y_s2uP3] of {
                                                __DEFAULT ->
                                                    case +# [x_s2uP6 1#] of sat_s2uPc {
                                                      __DEFAULT -> go_s2uP5 sat_s2uPc;
                                                    };
                                                1# -> [] [];
                                              }; } in
                                    let {
                                      sat_s2uPa [Occ=Once] :: GHC.Word.Word32
                                      [LclId] =
                                          [x_s2uP6] \u []
                                              case >=# [x_s2uP6 0#] of {
                                                __DEFAULT -> GHC.Word.$wlvl1 x_s2uP6;
                                                1# ->
                                                    case <=# [x_s2uP6 4294967295#] of {
                                                      __DEFAULT -> GHC.Word.$wlvl1 x_s2uP6;
                                                      1# ->
                                                          case int2Word# [x_s2uP6] of sat_s2uP9 {
                                                            __DEFAULT -> GHC.Word.W32# [sat_s2uP9];
                                                          };
                                                    };
                                              };
                                    } in  : [sat_s2uPa sat_s2uPd];
                          } in  go_s2uP5 x0_s2uP2;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord32_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> [GHC.Word.Word32]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s2uPe w1_s2uPf]
        case w_s2uPe of {
          GHC.Word.W32# ww1_s2uPh [Occ=Once] ->
              case w1_s2uPf of {
                GHC.Word.W32# ww3_s2uPj [Occ=Once] ->
                    GHC.Word.$w$cenumFromTo1 ww1_s2uPh ww3_s2uPj;
              };
        };

GHC.Word.$wgo1 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Word.Word32, [GHC.Word.Word32] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s2uPk]
        let {
          sat_s2uPu [Occ=Once] :: [GHC.Word.Word32]
          [LclId] =
              [w_s2uPk] \u []
                  case w_s2uPk of wild_s2uPp {
                    __DEFAULT ->
                        case +# [wild_s2uPp 1#] of sat_s2uPq {
                          __DEFAULT ->
                              case GHC.Word.$wgo1 sat_s2uPq of {
                                (#,#) ww1_s2uPs [Occ=Once] ww2_s2uPt [Occ=Once] ->
                                    : [ww1_s2uPs ww2_s2uPt];
                              };
                        };
                    4294967295# -> [] [];
                  }; } in
        let {
          sat_s2uPo [Occ=Once] :: GHC.Word.Word32
          [LclId] =
              [w_s2uPk] \u []
                  case >=# [w_s2uPk 0#] of {
                    __DEFAULT -> GHC.Word.$wlvl1 w_s2uPk;
                    1# ->
                        case <=# [w_s2uPk 4294967295#] of {
                          __DEFAULT -> GHC.Word.$wlvl1 w_s2uPk;
                          1# ->
                              case int2Word# [w_s2uPk] of sat_s2uPn {
                                __DEFAULT -> GHC.Word.W32# [sat_s2uPn];
                              };
                        };
                  };
        } in  (#,#) [sat_s2uPo sat_s2uPu];

GHC.Word.$fEnumWord32_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Word.Word32]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s2uPv]
        case GHC.Word.$wgo1 w_s2uPv of {
          (#,#) ww1_s2uPx [Occ=Once] ww2_s2uPy [Occ=Once] ->
              : [ww1_s2uPx ww2_s2uPy];
        };

GHC.Word.$fEnumWord32_$cenumFrom
  :: GHC.Word.Word32 -> [GHC.Word.Word32]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s2uPz]
        case n_s2uPz of {
          GHC.Word.W32# x#_s2uPB [Occ=Once] ->
              case word2Int# [x#_s2uPB] of x_s2uPC [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x_s2uPC 4294967295#] of {
                      __DEFAULT -> GHC.Word.$fEnumWord32_go x_s2uPC;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Word.$fEnumWord32_$csucc
                                    GHC.Word.$fEnumWord32_$cpred
                                    GHC.Word.$fEnumWord32_$ctoEnum
                                    GHC.Word.$fEnumWord32_$cfromEnum
                                    GHC.Word.$fEnumWord32_$cenumFrom
                                    GHC.Word.$fEnumWord32_$cenumFromThen
                                    GHC.Word.$fEnumWord32_$cenumFromTo
                                    GHC.Word.$fEnumWord32_$cenumFromThenTo];
GHC.Word.$fEnumWord32_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> [GHC.Word.Word32]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Word.$fEnumWord32 GHC.Word.$fBoundedWord32 eta_B2 eta_B1;

GHC.Word.$fBitsWord7 :: GHC.Word.Word64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W64#! [0##];

GHC.Word.$fNumWord3 :: GHC.Word.Word64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W64#! [1##];

GHC.Word.eqWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uPE ds1_s2uPF]
        case ds_s2uPE of {
          GHC.Word.W64# x_s2uPH [Occ=Once] ->
              case ds1_s2uPF of {
                GHC.Word.W64# y_s2uPJ [Occ=Once] ->
                    case eqWord# [x_s2uPH y_s2uPJ] of sat_s2uPK {
                      __DEFAULT -> tagToEnum# [sat_s2uPK];
                    };
              };
        };

GHC.Word.$fNumWord64_$csignum :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uPL]
        case ds_s2uPL of {
          GHC.Word.W64# x_s2uPN [Occ=Once!] ->
              case x_s2uPN of {
                __DEFAULT -> GHC.Word.$fNumWord3;
                0## -> GHC.Word.$fBitsWord7;
              };
        };

GHC.Word.$fNumWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Word.$fNumWord64_$c+
                                  GHC.Word.$fNumWord64_$c-
                                  GHC.Word.$fNumWord64_$c*
                                  GHC.Word.$fNumWord64_$cnegate
                                  GHC.Word.$fNumWord64_$cabs
                                  GHC.Word.$fNumWord64_$csignum
                                  GHC.Word.$fNumWord64_$cfromInteger];

GHC.Word.$fEnumWord7 :: GHC.Word.Word64
[GblId, Str=x] =
    [] \u [] GHC.Enum.predError lvl_r2uFF;

GHC.Word.$fEnumWord9 :: GHC.Word.Word64
[GblId, Str=x] =
    [] \u [] GHC.Enum.succError lvl_r2uFF;

GHC.Word.neWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uPP ds1_s2uPQ]
        case ds_s2uPP of {
          GHC.Word.W64# x_s2uPS [Occ=Once] ->
              case ds1_s2uPQ of {
                GHC.Word.W64# y_s2uPU [Occ=Once] ->
                    case neWord# [x_s2uPS y_s2uPU] of sat_s2uPV {
                      __DEFAULT -> tagToEnum# [sat_s2uPV];
                    };
              };
        };

GHC.Word.$fIntegralWord64_$cdivMod
  :: GHC.Word.Word64
     -> GHC.Word.Word64 -> (GHC.Word.Word64, GHC.Word.Word64)
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s2uPW y_s2uPX]
        case ds_s2uPW of {
          GHC.Word.W64# x#_s2uPZ ->
              case y_s2uPX of {
                GHC.Word.W64# y#_s2uQ1 [Occ=Once!] ->
                    case y#_s2uQ1 of wild2_s2uQ2 {
                      __DEFAULT ->
                          let {
                            sat_s2uQ6 [Occ=Once] :: GHC.Word.Word64
                            [LclId] =
                                [x#_s2uPZ wild2_s2uQ2] \u []
                                    case remWord# [x#_s2uPZ wild2_s2uQ2] of wild3_s2uQ5 {
                                      __DEFAULT -> GHC.Word.W64# [wild3_s2uQ5];
                                    }; } in
                          let {
                            sat_s2uQ4 [Occ=Once] :: GHC.Word.Word64
                            [LclId] =
                                [x#_s2uPZ wild2_s2uQ2] \u []
                                    case quotWord# [x#_s2uPZ wild2_s2uQ2] of wild3_s2uQ3 {
                                      __DEFAULT -> GHC.Word.W64# [wild3_s2uQ3];
                                    };
                          } in  (,) [sat_s2uQ4 sat_s2uQ6];
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord64_$cquotRem
  :: GHC.Word.Word64
     -> GHC.Word.Word64 -> (GHC.Word.Word64, GHC.Word.Word64)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uQ7 y_s2uQ8]
        case ds_s2uQ7 of {
          GHC.Word.W64# x#_s2uQa [Occ=Once] ->
              case y_s2uQ8 of {
                GHC.Word.W64# y#_s2uQc [Occ=Once!] ->
                    case y#_s2uQc of wild2_s2uQd {
                      __DEFAULT ->
                          case quotRemWord# [x#_s2uQa wild2_s2uQd] of {
                            (#,#) ipv_s2uQf [Occ=Once] ipv1_s2uQg [Occ=Once] ->
                                let {
                                  sat_s2uQi [Occ=Once] :: GHC.Word.Word64
                                  [LclId] =
                                      CCCS GHC.Word.W64#! [ipv1_s2uQg]; } in
                                let {
                                  sat_s2uQh [Occ=Once] :: GHC.Word.Word64
                                  [LclId] =
                                      CCCS GHC.Word.W64#! [ipv_s2uQf];
                                } in  (,) [sat_s2uQh sat_s2uQi];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord64_$cmod
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uQj y_s2uQk]
        case ds_s2uQj of {
          GHC.Word.W64# x#_s2uQm [Occ=Once] ->
              case y_s2uQk of {
                GHC.Word.W64# y#_s2uQo [Occ=Once!] ->
                    case y#_s2uQo of wild2_s2uQp {
                      __DEFAULT ->
                          case remWord# [x#_s2uQm wild2_s2uQp] of wild3_s2uQq {
                            __DEFAULT -> GHC.Word.W64# [wild3_s2uQq];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord64_$cdiv
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uQr y_s2uQs]
        case ds_s2uQr of {
          GHC.Word.W64# x#_s2uQu [Occ=Once] ->
              case y_s2uQs of {
                GHC.Word.W64# y#_s2uQw [Occ=Once!] ->
                    case y#_s2uQw of wild2_s2uQx {
                      __DEFAULT ->
                          case quotWord# [x#_s2uQu wild2_s2uQx] of wild3_s2uQy {
                            __DEFAULT -> GHC.Word.W64# [wild3_s2uQy];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fEqWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Word.eqWord64
                                     GHC.Word.neWord64];

GHC.Word.$fEnumWord64_$cpred :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2uQz]
        case x_s2uQz of {
          GHC.Word.W64# x1_s2uQB [Occ=Once!] ->
              case x1_s2uQB of wild1_s2uQC {
                __DEFAULT ->
                    case minusWord# [wild1_s2uQC 1##] of sat_s2uQD {
                      __DEFAULT -> GHC.Word.W64# [sat_s2uQD];
                    };
                0## -> GHC.Word.$fEnumWord7;
              };
        };

GHC.Word.$fBoundedWord64_$cmaxBound :: GHC.Word.Word64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W64#! [18446744073709551615##];

GHC.Word.$fBoundedWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Word.$fBitsWord7
                                       GHC.Word.$fBoundedWord64_$cmaxBound];

GHC.Word.$fEnumWord64_$csucc :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2uQE]
        case x_s2uQE of {
          GHC.Word.W64# x1_s2uQG [Occ=Once!] ->
              case x1_s2uQG of wild1_s2uQH {
                __DEFAULT ->
                    case plusWord# [wild1_s2uQH 1##] of sat_s2uQI {
                      __DEFAULT -> GHC.Word.W64# [sat_s2uQI];
                    };
                18446744073709551615## -> GHC.Word.$fEnumWord9;
              };
        };

GHC.Word.$wlvl2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Word.Word64
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s2uQJ]
        GHC.Enum.$wtoEnumError
            GHC.Word.$fShowWord64
            lvl_r2uFF
            ww_s2uQJ
            GHC.Word.$fBitsWord7
            GHC.Word.$fBoundedWord64_$cmaxBound;

GHC.Word.$fEnumWord6 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Word.Word64
[GblId, Arity=1, Str=<B,1*U(U)>x, Unf=OtherCon []] =
    [] \r [w_s2uQK]
        case w_s2uQK of {
          GHC.Types.I# ww1_s2uQM [Occ=Once] -> GHC.Word.$wlvl2 ww1_s2uQM;
        };

GHC.Word.$fEnumWord64_$ctoEnum :: GHC.Types.Int -> GHC.Word.Word64
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [i_s2uQN]
        case i_s2uQN of {
          GHC.Types.I# i#_s2uQP ->
              case >=# [i#_s2uQP 0#] of {
                __DEFAULT -> GHC.Word.$wlvl2 i#_s2uQP;
                1# ->
                    case int2Word# [i#_s2uQP] of sat_s2uQR {
                      __DEFAULT -> GHC.Word.W64# [sat_s2uQR];
                    };
              };
        };

GHC.Word.gtWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uQS ds1_s2uQT]
        case ds_s2uQS of {
          GHC.Word.W64# x_s2uQV [Occ=Once] ->
              case ds1_s2uQT of {
                GHC.Word.W64# y_s2uQX [Occ=Once] ->
                    case gtWord# [x_s2uQV y_s2uQX] of sat_s2uQY {
                      __DEFAULT -> tagToEnum# [sat_s2uQY];
                    };
              };
        };

GHC.Word.geWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uQZ ds1_s2uR0]
        case ds_s2uQZ of {
          GHC.Word.W64# x_s2uR2 [Occ=Once] ->
              case ds1_s2uR0 of {
                GHC.Word.W64# y_s2uR4 [Occ=Once] ->
                    case geWord# [x_s2uR2 y_s2uR4] of sat_s2uR5 {
                      __DEFAULT -> tagToEnum# [sat_s2uR5];
                    };
              };
        };

GHC.Word.ltWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uR6 ds1_s2uR7]
        case ds_s2uR6 of {
          GHC.Word.W64# x_s2uR9 [Occ=Once] ->
              case ds1_s2uR7 of {
                GHC.Word.W64# y_s2uRb [Occ=Once] ->
                    case ltWord# [x_s2uR9 y_s2uRb] of sat_s2uRc {
                      __DEFAULT -> tagToEnum# [sat_s2uRc];
                    };
              };
        };

GHC.Word.leWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uRd ds1_s2uRe]
        case ds_s2uRd of {
          GHC.Word.W64# x_s2uRg [Occ=Once] ->
              case ds1_s2uRe of {
                GHC.Word.W64# y_s2uRi [Occ=Once] ->
                    case leWord# [x_s2uRg y_s2uRi] of sat_s2uRj {
                      __DEFAULT -> tagToEnum# [sat_s2uRj];
                    };
              };
        };

GHC.Word.$fOrdWord64_$cmin
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2uRk y_s2uRl]
        case x_s2uRk of wild_s2uRm {
          GHC.Word.W64# x1_s2uRn [Occ=Once] ->
              case y_s2uRl of wild1_s2uRo {
                GHC.Word.W64# y1_s2uRp [Occ=Once] ->
                    case leWord# [x1_s2uRn y1_s2uRp] of {
                      __DEFAULT -> wild1_s2uRo;
                      1# -> wild_s2uRm;
                    };
              };
        };

GHC.Word.$fOrdWord64_$cmax
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2uRr y_s2uRs]
        case x_s2uRr of wild_s2uRt {
          GHC.Word.W64# x1_s2uRu [Occ=Once] ->
              case y_s2uRs of wild1_s2uRv {
                GHC.Word.W64# y1_s2uRw [Occ=Once] ->
                    case leWord# [x1_s2uRu y1_s2uRw] of {
                      __DEFAULT -> wild_s2uRt;
                      1# -> wild1_s2uRv;
                    };
              };
        };

GHC.Word.$fOrdWord64_$ccompare
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2uRy y_s2uRz]
        case x_s2uRy of {
          GHC.Word.W64# x1_s2uRB ->
              case y_s2uRz of {
                GHC.Word.W64# y1_s2uRD ->
                    case eqWord# [x1_s2uRB y1_s2uRD] of {
                      __DEFAULT ->
                          case leWord# [x1_s2uRB y1_s2uRD] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Word.$fOrdWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Word.$fEqWord64
                                      GHC.Word.$fOrdWord64_$ccompare
                                      GHC.Word.ltWord64
                                      GHC.Word.leWord64
                                      GHC.Word.gtWord64
                                      GHC.Word.geWord64
                                      GHC.Word.$fOrdWord64_$cmax
                                      GHC.Word.$fOrdWord64_$cmin];

GHC.Word.$fRealWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Word.$fNumWord64
                                    GHC.Word.$fOrdWord64
                                    GHC.Word.$fRealWord64_$ctoRational];

GHC.Word.$fEnumWord64_$cfromEnum
  :: GHC.Word.Word64 -> GHC.Types.Int
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_s2uRG]
        case x_s2uRG of wild_s2uRH {
          GHC.Word.W64# x#_s2uRI ->
              case leWord# [x#_s2uRI 9223372036854775807##] of {
                __DEFAULT -> GHC.Word.$fEnumWord5 wild_s2uRH;
                1# ->
                    case word2Int# [x#_s2uRI] of sat_s2uRK {
                      __DEFAULT -> GHC.Types.I# [sat_s2uRK];
                    };
              };
        };

GHC.Word.$fEnumWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Word.$fEnumWord64_$csucc
                                    GHC.Word.$fEnumWord64_$cpred
                                    GHC.Word.$fEnumWord64_$ctoEnum
                                    GHC.Word.$fEnumWord64_$cfromEnum
                                    GHC.Word.$fEnumWord64_$cenumFrom
                                    GHC.Word.$fEnumWord64_$cenumFromThen
                                    GHC.Word.$fEnumWord64_$cenumFromTo
                                    GHC.Word.$fEnumWord64_$cenumFromThenTo];
GHC.Word.$fIntegralWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Word.$fRealWord64
                                        GHC.Word.$fEnumWord64
                                        GHC.Word.$fIntegralWord64_$cdiv
                                        GHC.Word.$fIntegralWord64_$cmod
                                        GHC.Word.$fIntegralWord64_$cdiv
                                        GHC.Word.$fIntegralWord64_$cmod
                                        GHC.Word.$fIntegralWord64_$cquotRem
                                        GHC.Word.$fIntegralWord64_$cdivMod
                                        GHC.Word.$fIntegralWord64_$ctoInteger];
GHC.Word.$fEnumWord64_$cenumFromThenTo [Occ=LoopBreaker]
  :: GHC.Word.Word64
     -> GHC.Word.Word64 -> GHC.Word.Word64 -> [GHC.Word.Word64]
[GblId, Arity=3, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Real.integralEnumFromThenTo
            GHC.Word.$fIntegralWord64 eta_B3 eta_B2 eta_B1;
GHC.Word.$fEnumWord64_$cenumFromTo [Occ=LoopBreaker]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> [GHC.Word.Word64]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Real.integralEnumFromTo
            GHC.Word.$fIntegralWord64 eta_B2 eta_B1;
GHC.Word.$fEnumWord64_$cenumFrom [Occ=LoopBreaker]
  :: GHC.Word.Word64 -> [GHC.Word.Word64]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Real.integralEnumFrom
            GHC.Word.$fIntegralWord64 GHC.Word.$fBoundedWord64 eta_B1;
GHC.Word.$fEnumWord64_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> [GHC.Word.Word64]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Real.integralEnumFromThen
            GHC.Word.$fIntegralWord64 GHC.Word.$fBoundedWord64 eta_B2 eta_B1;

GHC.Word.$fNumWord8_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Word.Word8
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s2uRL]
        case GHC.Integer.Type.integerToWord i_s2uRL of wild_s2uRM {
          __DEFAULT ->
              case narrow8Word# [wild_s2uRM] of sat_s2uRN {
                __DEFAULT -> GHC.Word.W8# [sat_s2uRN];
              };
        };

GHC.Word.$fNumWord8_$cabs :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_s2uRO] x_s2uRO;

GHC.Word.$fNumWord8_$cnegate :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uRP]
        case ds_s2uRP of {
          GHC.Word.W8# x#_s2uRR [Occ=Once] ->
              case word2Int# [x#_s2uRR] of sat_s2uRS {
                __DEFAULT ->
                    case negateInt# [sat_s2uRS] of sat_s2uRT {
                      __DEFAULT ->
                          case int2Word# [sat_s2uRT] of sat_s2uRU {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2uRU] of sat_s2uRV {
                                  __DEFAULT -> GHC.Word.W8# [sat_s2uRV];
                                };
                          };
                    };
              };
        };

GHC.Word.$fNumWord8_$c*
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uRW ds1_s2uRX]
        case ds_s2uRW of {
          GHC.Word.W8# x#_s2uRZ [Occ=Once] ->
              case ds1_s2uRX of {
                GHC.Word.W8# y#_s2uS1 [Occ=Once] ->
                    case timesWord# [x#_s2uRZ y#_s2uS1] of sat_s2uS2 {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2uS2] of sat_s2uS3 {
                            __DEFAULT -> GHC.Word.W8# [sat_s2uS3];
                          };
                    };
              };
        };

GHC.Word.$fNumWord8_$c-
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uS4 ds1_s2uS5]
        case ds_s2uS4 of {
          GHC.Word.W8# x#_s2uS7 [Occ=Once] ->
              case ds1_s2uS5 of {
                GHC.Word.W8# y#_s2uS9 [Occ=Once] ->
                    case minusWord# [x#_s2uS7 y#_s2uS9] of sat_s2uSa {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2uSa] of sat_s2uSb {
                            __DEFAULT -> GHC.Word.W8# [sat_s2uSb];
                          };
                    };
              };
        };

GHC.Word.$fNumWord8_$c+
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uSc ds1_s2uSd]
        case ds_s2uSc of {
          GHC.Word.W8# x#_s2uSf [Occ=Once] ->
              case ds1_s2uSd of {
                GHC.Word.W8# y#_s2uSh [Occ=Once] ->
                    case plusWord# [x#_s2uSf y#_s2uSh] of sat_s2uSi {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2uSi] of sat_s2uSj {
                            __DEFAULT -> GHC.Word.W8# [sat_s2uSj];
                          };
                    };
              };
        };

GHC.Word.$ctoInteger :: GHC.Word.Word8 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uSk]
        case ds_s2uSk of {
          GHC.Word.W8# x#_s2uSm [Occ=Once] ->
              case word2Int# [x#_s2uSm] of sat_s2uSn {
                __DEFAULT -> GHC.Integer.Type.smallInteger sat_s2uSn;
              };
        };

GHC.Word.$fBitsWord8_$cpopCount :: GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uSo]
        case ds_s2uSo of {
          GHC.Word.W8# x#_s2uSq [Occ=Once] ->
              case popCnt8# [x#_s2uSq] of sat_s2uSr {
                __DEFAULT ->
                    case word2Int# [sat_s2uSr] of sat_s2uSs {
                      __DEFAULT -> GHC.Types.I# [sat_s2uSs];
                    };
              };
        };

GHC.Word.$fBitsWord8_$cunsafeShiftR
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uSt ds1_s2uSu]
        case ds_s2uSt of {
          GHC.Word.W8# x#_s2uSw [Occ=Once] ->
              case ds1_s2uSu of {
                GHC.Types.I# i#_s2uSy [Occ=Once] ->
                    case uncheckedShiftRL# [x#_s2uSw i#_s2uSy] of sat_s2uSz {
                      __DEFAULT -> GHC.Word.W8# [sat_s2uSz];
                    };
              };
        };

GHC.Word.$fBitsWord8_$cshiftR
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uSA ds1_s2uSB]
        case ds_s2uSA of {
          GHC.Word.W8# x#_s2uSD [Occ=Once] ->
              case ds1_s2uSB of {
                GHC.Types.I# i#_s2uSF ->
                    case >=# [i#_s2uSF 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftRL# [x#_s2uSD i#_s2uSF] of sat_s2uSH {
                            __DEFAULT -> GHC.Word.W8# [sat_s2uSH];
                          };
                      1# -> GHC.Word.$fBitsWord8_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord8_$cunsafeShiftL
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uSI ds1_s2uSJ]
        case ds_s2uSI of {
          GHC.Word.W8# x#_s2uSL [Occ=Once] ->
              case ds1_s2uSJ of {
                GHC.Types.I# i#_s2uSN [Occ=Once] ->
                    case uncheckedShiftL# [x#_s2uSL i#_s2uSN] of sat_s2uSO {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2uSO] of sat_s2uSP {
                            __DEFAULT -> GHC.Word.W8# [sat_s2uSP];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord8_$cshiftL
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uSQ ds1_s2uSR]
        case ds_s2uSQ of {
          GHC.Word.W8# x#_s2uST [Occ=Once] ->
              case ds1_s2uSR of {
                GHC.Types.I# i#_s2uSV ->
                    case >=# [i#_s2uSV 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [x#_s2uST i#_s2uSV] of sat_s2uSX {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2uSX] of sat_s2uSY {
                                  __DEFAULT -> GHC.Word.W8# [sat_s2uSY];
                                };
                          };
                      1# -> GHC.Word.$fBitsWord8_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord8_$cisSigned :: GHC.Word.Word8 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s2uSZ] GHC.Types.False [];

GHC.Word.$fBitsWord8_$crotate
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uT0 ds1_s2uT1]
        case ds_s2uT0 of wild_s2uT2 {
          GHC.Word.W8# x#_s2uT3 ->
              case ds1_s2uT1 of {
                GHC.Types.I# i#_s2uT5 [Occ=Once] ->
                    case int2Word# [i#_s2uT5] of sat_s2uT6 {
                      __DEFAULT ->
                          case and# [sat_s2uT6 7##] of sat_s2uT7 {
                            __DEFAULT ->
                                case word2Int# [sat_s2uT7] of wild2_s2uT8 {
                                  __DEFAULT ->
                                      case -# [8# wild2_s2uT8] of sat_s2uTa {
                                        __DEFAULT ->
                                            case
                                                uncheckedShiftRL# [x#_s2uT3 sat_s2uTa]
                                            of
                                            sat_s2uTb
                                            { __DEFAULT ->
                                                  case
                                                      uncheckedShiftL# [x#_s2uT3 wild2_s2uT8]
                                                  of
                                                  sat_s2uT9
                                                  { __DEFAULT ->
                                                        case
                                                            or# [sat_s2uT9 sat_s2uTb]
                                                        of
                                                        sat_s2uTc
                                                        { __DEFAULT ->
                                                              case
                                                                  narrow8Word# [sat_s2uTc]
                                                              of
                                                              sat_s2uTd
                                                              { __DEFAULT ->
                                                                    GHC.Word.W8# [sat_s2uTd];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s2uT2;
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord8_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uTe ds1_s2uTf]
        case ds_s2uTe of {
          GHC.Word.W8# x#_s2uTh [Occ=Once*] ->
              case ds1_s2uTf of {
                GHC.Types.I# i#_s2uTj ->
                    case >=# [i#_s2uTj 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s2uTj] of b_s2uTl [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s2uTl 64#] of {
                                  __DEFAULT ->
                                      case uncheckedShiftRL# [x#_s2uTh b_s2uTl] of sat_s2uTn {
                                        __DEFAULT -> GHC.Word.W8# [sat_s2uTn];
                                      };
                                  1# -> GHC.Word.$fBitsWord8_$cminBound;
                                };
                          };
                      1# ->
                          case >=# [i#_s2uTj 64#] of {
                            __DEFAULT ->
                                case uncheckedShiftL# [x#_s2uTh i#_s2uTj] of sat_s2uTp {
                                  __DEFAULT ->
                                      case narrow8Word# [sat_s2uTp] of sat_s2uTq {
                                        __DEFAULT -> GHC.Word.W8# [sat_s2uTq];
                                      };
                                };
                            1# -> GHC.Word.$fBitsWord8_$cminBound;
                          };
                    };
              };
        };

GHC.Word.$fBitsWord8_$cxor
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uTr ds1_s2uTs]
        case ds_s2uTr of {
          GHC.Word.W8# x#_s2uTu [Occ=Once] ->
              case ds1_s2uTs of {
                GHC.Word.W8# y#_s2uTw [Occ=Once] ->
                    case xor# [x#_s2uTu y#_s2uTw] of sat_s2uTx {
                      __DEFAULT -> GHC.Word.W8# [sat_s2uTx];
                    };
              };
        };

GHC.Word.$fBitsWord8_$c.|.
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uTy ds1_s2uTz]
        case ds_s2uTy of {
          GHC.Word.W8# x#_s2uTB [Occ=Once] ->
              case ds1_s2uTz of {
                GHC.Word.W8# y#_s2uTD [Occ=Once] ->
                    case or# [x#_s2uTB y#_s2uTD] of sat_s2uTE {
                      __DEFAULT -> GHC.Word.W8# [sat_s2uTE];
                    };
              };
        };

GHC.Word.$fBitsWord8_$c.&.
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uTF ds1_s2uTG]
        case ds_s2uTF of {
          GHC.Word.W8# x#_s2uTI [Occ=Once] ->
              case ds1_s2uTG of {
                GHC.Word.W8# y#_s2uTK [Occ=Once] ->
                    case and# [x#_s2uTI y#_s2uTK] of sat_s2uTL {
                      __DEFAULT -> GHC.Word.W8# [sat_s2uTL];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord8_$ccountTrailingZeros
  :: GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uTM]
        case ds_s2uTM of {
          GHC.Word.W8# x#_s2uTO [Occ=Once] ->
              case ctz8# [x#_s2uTO] of sat_s2uTP {
                __DEFAULT ->
                    case word2Int# [sat_s2uTP] of sat_s2uTQ {
                      __DEFAULT -> GHC.Types.I# [sat_s2uTQ];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord8_$ccountLeadingZeros
  :: GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uTR]
        case ds_s2uTR of {
          GHC.Word.W8# x#_s2uTT [Occ=Once] ->
              case clz8# [x#_s2uTT] of sat_s2uTU {
                __DEFAULT ->
                    case word2Int# [sat_s2uTU] of sat_s2uTV {
                      __DEFAULT -> GHC.Types.I# [sat_s2uTV];
                    };
              };
        };

GHC.Word.$fBitsWord9 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

GHC.Word.$fBitsWord8_$cfiniteBitSize
  :: GHC.Word.Word8 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s2uTW] GHC.Word.$fBitsWord9;

GHC.Word.$fNumWord16_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Word.Word16
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s2uTX]
        case GHC.Integer.Type.integerToWord i_s2uTX of wild_s2uTY {
          __DEFAULT ->
              case narrow16Word# [wild_s2uTY] of sat_s2uTZ {
                __DEFAULT -> GHC.Word.W16# [sat_s2uTZ];
              };
        };

GHC.Word.$fNumWord16_$cabs :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_s2uU0] x_s2uU0;

GHC.Word.$fNumWord16_$cnegate :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uU1]
        case ds_s2uU1 of {
          GHC.Word.W16# x#_s2uU3 [Occ=Once] ->
              case word2Int# [x#_s2uU3] of sat_s2uU4 {
                __DEFAULT ->
                    case negateInt# [sat_s2uU4] of sat_s2uU5 {
                      __DEFAULT ->
                          case int2Word# [sat_s2uU5] of sat_s2uU6 {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2uU6] of sat_s2uU7 {
                                  __DEFAULT -> GHC.Word.W16# [sat_s2uU7];
                                };
                          };
                    };
              };
        };

GHC.Word.$fNumWord16_$c*
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uU8 ds1_s2uU9]
        case ds_s2uU8 of {
          GHC.Word.W16# x#_s2uUb [Occ=Once] ->
              case ds1_s2uU9 of {
                GHC.Word.W16# y#_s2uUd [Occ=Once] ->
                    case timesWord# [x#_s2uUb y#_s2uUd] of sat_s2uUe {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2uUe] of sat_s2uUf {
                            __DEFAULT -> GHC.Word.W16# [sat_s2uUf];
                          };
                    };
              };
        };

GHC.Word.$fNumWord16_$c-
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uUg ds1_s2uUh]
        case ds_s2uUg of {
          GHC.Word.W16# x#_s2uUj [Occ=Once] ->
              case ds1_s2uUh of {
                GHC.Word.W16# y#_s2uUl [Occ=Once] ->
                    case minusWord# [x#_s2uUj y#_s2uUl] of sat_s2uUm {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2uUm] of sat_s2uUn {
                            __DEFAULT -> GHC.Word.W16# [sat_s2uUn];
                          };
                    };
              };
        };

GHC.Word.$fNumWord16_$c+
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uUo ds1_s2uUp]
        case ds_s2uUo of {
          GHC.Word.W16# x#_s2uUr [Occ=Once] ->
              case ds1_s2uUp of {
                GHC.Word.W16# y#_s2uUt [Occ=Once] ->
                    case plusWord# [x#_s2uUr y#_s2uUt] of sat_s2uUu {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2uUu] of sat_s2uUv {
                            __DEFAULT -> GHC.Word.W16# [sat_s2uUv];
                          };
                    };
              };
        };

GHC.Word.$ctoInteger1
  :: GHC.Word.Word16 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uUw]
        case ds_s2uUw of {
          GHC.Word.W16# x#_s2uUy [Occ=Once] ->
              case word2Int# [x#_s2uUy] of sat_s2uUz {
                __DEFAULT -> GHC.Integer.Type.smallInteger sat_s2uUz;
              };
        };

GHC.Word.$fBitsWord16_$cpopCount
  :: GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uUA]
        case ds_s2uUA of {
          GHC.Word.W16# x#_s2uUC [Occ=Once] ->
              case popCnt16# [x#_s2uUC] of sat_s2uUD {
                __DEFAULT ->
                    case word2Int# [sat_s2uUD] of sat_s2uUE {
                      __DEFAULT -> GHC.Types.I# [sat_s2uUE];
                    };
              };
        };

GHC.Word.$fBitsWord16_$cunsafeShiftR
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uUF ds1_s2uUG]
        case ds_s2uUF of {
          GHC.Word.W16# x#_s2uUI [Occ=Once] ->
              case ds1_s2uUG of {
                GHC.Types.I# i#_s2uUK [Occ=Once] ->
                    case uncheckedShiftRL# [x#_s2uUI i#_s2uUK] of sat_s2uUL {
                      __DEFAULT -> GHC.Word.W16# [sat_s2uUL];
                    };
              };
        };

GHC.Word.$fBitsWord16_$cshiftR
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uUM ds1_s2uUN]
        case ds_s2uUM of {
          GHC.Word.W16# x#_s2uUP [Occ=Once] ->
              case ds1_s2uUN of {
                GHC.Types.I# i#_s2uUR ->
                    case >=# [i#_s2uUR 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftRL# [x#_s2uUP i#_s2uUR] of sat_s2uUT {
                            __DEFAULT -> GHC.Word.W16# [sat_s2uUT];
                          };
                      1# -> GHC.Word.$fBitsWord16_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord16_$cunsafeShiftL
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uUU ds1_s2uUV]
        case ds_s2uUU of {
          GHC.Word.W16# x#_s2uUX [Occ=Once] ->
              case ds1_s2uUV of {
                GHC.Types.I# i#_s2uUZ [Occ=Once] ->
                    case uncheckedShiftL# [x#_s2uUX i#_s2uUZ] of sat_s2uV0 {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2uV0] of sat_s2uV1 {
                            __DEFAULT -> GHC.Word.W16# [sat_s2uV1];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord16_$cshiftL
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uV2 ds1_s2uV3]
        case ds_s2uV2 of {
          GHC.Word.W16# x#_s2uV5 [Occ=Once] ->
              case ds1_s2uV3 of {
                GHC.Types.I# i#_s2uV7 ->
                    case >=# [i#_s2uV7 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [x#_s2uV5 i#_s2uV7] of sat_s2uV9 {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2uV9] of sat_s2uVa {
                                  __DEFAULT -> GHC.Word.W16# [sat_s2uVa];
                                };
                          };
                      1# -> GHC.Word.$fBitsWord16_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord16_$cisSigned
  :: GHC.Word.Word16 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s2uVb] GHC.Types.False [];

GHC.Word.$fBitsWord16_$crotate
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uVc ds1_s2uVd]
        case ds_s2uVc of wild_s2uVe {
          GHC.Word.W16# x#_s2uVf ->
              case ds1_s2uVd of {
                GHC.Types.I# i#_s2uVh [Occ=Once] ->
                    case int2Word# [i#_s2uVh] of sat_s2uVi {
                      __DEFAULT ->
                          case and# [sat_s2uVi 15##] of sat_s2uVj {
                            __DEFAULT ->
                                case word2Int# [sat_s2uVj] of wild2_s2uVk {
                                  __DEFAULT ->
                                      case -# [16# wild2_s2uVk] of sat_s2uVm {
                                        __DEFAULT ->
                                            case
                                                uncheckedShiftRL# [x#_s2uVf sat_s2uVm]
                                            of
                                            sat_s2uVn
                                            { __DEFAULT ->
                                                  case
                                                      uncheckedShiftL# [x#_s2uVf wild2_s2uVk]
                                                  of
                                                  sat_s2uVl
                                                  { __DEFAULT ->
                                                        case
                                                            or# [sat_s2uVl sat_s2uVn]
                                                        of
                                                        sat_s2uVo
                                                        { __DEFAULT ->
                                                              case
                                                                  narrow16Word# [sat_s2uVo]
                                                              of
                                                              sat_s2uVp
                                                              { __DEFAULT ->
                                                                    GHC.Word.W16# [sat_s2uVp];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s2uVe;
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord16_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uVq ds1_s2uVr]
        case ds_s2uVq of {
          GHC.Word.W16# x#_s2uVt [Occ=Once*] ->
              case ds1_s2uVr of {
                GHC.Types.I# i#_s2uVv ->
                    case >=# [i#_s2uVv 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s2uVv] of b_s2uVx [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s2uVx 64#] of {
                                  __DEFAULT ->
                                      case uncheckedShiftRL# [x#_s2uVt b_s2uVx] of sat_s2uVz {
                                        __DEFAULT -> GHC.Word.W16# [sat_s2uVz];
                                      };
                                  1# -> GHC.Word.$fBitsWord16_$cminBound;
                                };
                          };
                      1# ->
                          case >=# [i#_s2uVv 64#] of {
                            __DEFAULT ->
                                case uncheckedShiftL# [x#_s2uVt i#_s2uVv] of sat_s2uVB {
                                  __DEFAULT ->
                                      case narrow16Word# [sat_s2uVB] of sat_s2uVC {
                                        __DEFAULT -> GHC.Word.W16# [sat_s2uVC];
                                      };
                                };
                            1# -> GHC.Word.$fBitsWord16_$cminBound;
                          };
                    };
              };
        };

GHC.Word.$fBitsWord16_$cxor
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uVD ds1_s2uVE]
        case ds_s2uVD of {
          GHC.Word.W16# x#_s2uVG [Occ=Once] ->
              case ds1_s2uVE of {
                GHC.Word.W16# y#_s2uVI [Occ=Once] ->
                    case xor# [x#_s2uVG y#_s2uVI] of sat_s2uVJ {
                      __DEFAULT -> GHC.Word.W16# [sat_s2uVJ];
                    };
              };
        };

GHC.Word.$fBitsWord16_$c.|.
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uVK ds1_s2uVL]
        case ds_s2uVK of {
          GHC.Word.W16# x#_s2uVN [Occ=Once] ->
              case ds1_s2uVL of {
                GHC.Word.W16# y#_s2uVP [Occ=Once] ->
                    case or# [x#_s2uVN y#_s2uVP] of sat_s2uVQ {
                      __DEFAULT -> GHC.Word.W16# [sat_s2uVQ];
                    };
              };
        };

GHC.Word.$fBitsWord16_$c.&.
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uVR ds1_s2uVS]
        case ds_s2uVR of {
          GHC.Word.W16# x#_s2uVU [Occ=Once] ->
              case ds1_s2uVS of {
                GHC.Word.W16# y#_s2uVW [Occ=Once] ->
                    case and# [x#_s2uVU y#_s2uVW] of sat_s2uVX {
                      __DEFAULT -> GHC.Word.W16# [sat_s2uVX];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord16_$ccountTrailingZeros
  :: GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uVY]
        case ds_s2uVY of {
          GHC.Word.W16# x#_s2uW0 [Occ=Once] ->
              case ctz16# [x#_s2uW0] of sat_s2uW1 {
                __DEFAULT ->
                    case word2Int# [sat_s2uW1] of sat_s2uW2 {
                      __DEFAULT -> GHC.Types.I# [sat_s2uW2];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord16_$ccountLeadingZeros
  :: GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uW3]
        case ds_s2uW3 of {
          GHC.Word.W16# x#_s2uW5 [Occ=Once] ->
              case clz16# [x#_s2uW5] of sat_s2uW6 {
                __DEFAULT ->
                    case word2Int# [sat_s2uW6] of sat_s2uW7 {
                      __DEFAULT -> GHC.Types.I# [sat_s2uW7];
                    };
              };
        };

GHC.Word.$fBitsWord1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

GHC.Word.$fBitsWord16_$cfiniteBitSize
  :: GHC.Word.Word16 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s2uW8] GHC.Word.$fBitsWord1;

GHC.Word.$fNumWord32_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Word.Word32
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s2uW9]
        case GHC.Integer.Type.integerToWord i_s2uW9 of wild_s2uWa {
          __DEFAULT ->
              case narrow32Word# [wild_s2uWa] of sat_s2uWb {
                __DEFAULT -> GHC.Word.W32# [sat_s2uWb];
              };
        };

GHC.Word.$fNumWord32_$cabs :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_s2uWc] x_s2uWc;

GHC.Word.$fNumWord32_$cnegate :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uWd]
        case ds_s2uWd of {
          GHC.Word.W32# x#_s2uWf [Occ=Once] ->
              case word2Int# [x#_s2uWf] of sat_s2uWg {
                __DEFAULT ->
                    case negateInt# [sat_s2uWg] of sat_s2uWh {
                      __DEFAULT ->
                          case int2Word# [sat_s2uWh] of sat_s2uWi {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2uWi] of sat_s2uWj {
                                  __DEFAULT -> GHC.Word.W32# [sat_s2uWj];
                                };
                          };
                    };
              };
        };

GHC.Word.$fNumWord32_$c*
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uWk ds1_s2uWl]
        case ds_s2uWk of {
          GHC.Word.W32# x#_s2uWn [Occ=Once] ->
              case ds1_s2uWl of {
                GHC.Word.W32# y#_s2uWp [Occ=Once] ->
                    case timesWord# [x#_s2uWn y#_s2uWp] of sat_s2uWq {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2uWq] of sat_s2uWr {
                            __DEFAULT -> GHC.Word.W32# [sat_s2uWr];
                          };
                    };
              };
        };

GHC.Word.$fNumWord32_$c-
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uWs ds1_s2uWt]
        case ds_s2uWs of {
          GHC.Word.W32# x#_s2uWv [Occ=Once] ->
              case ds1_s2uWt of {
                GHC.Word.W32# y#_s2uWx [Occ=Once] ->
                    case minusWord# [x#_s2uWv y#_s2uWx] of sat_s2uWy {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2uWy] of sat_s2uWz {
                            __DEFAULT -> GHC.Word.W32# [sat_s2uWz];
                          };
                    };
              };
        };

GHC.Word.$fNumWord32_$c+
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uWA ds1_s2uWB]
        case ds_s2uWA of {
          GHC.Word.W32# x#_s2uWD [Occ=Once] ->
              case ds1_s2uWB of {
                GHC.Word.W32# y#_s2uWF [Occ=Once] ->
                    case plusWord# [x#_s2uWD y#_s2uWF] of sat_s2uWG {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2uWG] of sat_s2uWH {
                            __DEFAULT -> GHC.Word.W32# [sat_s2uWH];
                          };
                    };
              };
        };

GHC.Word.$ctoInteger2
  :: GHC.Word.Word32 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uWI]
        case ds_s2uWI of {
          GHC.Word.W32# x#_s2uWK [Occ=Once] ->
              case word2Int# [x#_s2uWK] of sat_s2uWL {
                __DEFAULT -> GHC.Integer.Type.smallInteger sat_s2uWL;
              };
        };

GHC.Word.$fBitsWord32_$cpopCount
  :: GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uWM]
        case ds_s2uWM of {
          GHC.Word.W32# x#_s2uWO [Occ=Once] ->
              case popCnt32# [x#_s2uWO] of sat_s2uWP {
                __DEFAULT ->
                    case word2Int# [sat_s2uWP] of sat_s2uWQ {
                      __DEFAULT -> GHC.Types.I# [sat_s2uWQ];
                    };
              };
        };

GHC.Word.$fBitsWord32_$cunsafeShiftR
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uWR ds1_s2uWS]
        case ds_s2uWR of {
          GHC.Word.W32# x#_s2uWU [Occ=Once] ->
              case ds1_s2uWS of {
                GHC.Types.I# i#_s2uWW [Occ=Once] ->
                    case uncheckedShiftRL# [x#_s2uWU i#_s2uWW] of sat_s2uWX {
                      __DEFAULT -> GHC.Word.W32# [sat_s2uWX];
                    };
              };
        };

GHC.Word.$fBitsWord32_$cshiftR
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uWY ds1_s2uWZ]
        case ds_s2uWY of {
          GHC.Word.W32# x#_s2uX1 [Occ=Once] ->
              case ds1_s2uWZ of {
                GHC.Types.I# i#_s2uX3 ->
                    case >=# [i#_s2uX3 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftRL# [x#_s2uX1 i#_s2uX3] of sat_s2uX5 {
                            __DEFAULT -> GHC.Word.W32# [sat_s2uX5];
                          };
                      1# -> GHC.Word.$fBitsWord32_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord32_$cunsafeShiftL
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uX6 ds1_s2uX7]
        case ds_s2uX6 of {
          GHC.Word.W32# x#_s2uX9 [Occ=Once] ->
              case ds1_s2uX7 of {
                GHC.Types.I# i#_s2uXb [Occ=Once] ->
                    case uncheckedShiftL# [x#_s2uX9 i#_s2uXb] of sat_s2uXc {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2uXc] of sat_s2uXd {
                            __DEFAULT -> GHC.Word.W32# [sat_s2uXd];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord32_$cshiftL
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uXe ds1_s2uXf]
        case ds_s2uXe of {
          GHC.Word.W32# x#_s2uXh [Occ=Once] ->
              case ds1_s2uXf of {
                GHC.Types.I# i#_s2uXj ->
                    case >=# [i#_s2uXj 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [x#_s2uXh i#_s2uXj] of sat_s2uXl {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2uXl] of sat_s2uXm {
                                  __DEFAULT -> GHC.Word.W32# [sat_s2uXm];
                                };
                          };
                      1# -> GHC.Word.$fBitsWord32_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord32_$cisSigned
  :: GHC.Word.Word32 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s2uXn] GHC.Types.False [];

GHC.Word.$fBitsWord32_$crotate
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uXo ds1_s2uXp]
        case ds_s2uXo of wild_s2uXq {
          GHC.Word.W32# x#_s2uXr ->
              case ds1_s2uXp of {
                GHC.Types.I# i#_s2uXt [Occ=Once] ->
                    case int2Word# [i#_s2uXt] of sat_s2uXu {
                      __DEFAULT ->
                          case and# [sat_s2uXu 31##] of sat_s2uXv {
                            __DEFAULT ->
                                case word2Int# [sat_s2uXv] of wild2_s2uXw {
                                  __DEFAULT ->
                                      case -# [32# wild2_s2uXw] of sat_s2uXy {
                                        __DEFAULT ->
                                            case
                                                uncheckedShiftRL# [x#_s2uXr sat_s2uXy]
                                            of
                                            sat_s2uXz
                                            { __DEFAULT ->
                                                  case
                                                      uncheckedShiftL# [x#_s2uXr wild2_s2uXw]
                                                  of
                                                  sat_s2uXx
                                                  { __DEFAULT ->
                                                        case
                                                            or# [sat_s2uXx sat_s2uXz]
                                                        of
                                                        sat_s2uXA
                                                        { __DEFAULT ->
                                                              case
                                                                  narrow32Word# [sat_s2uXA]
                                                              of
                                                              sat_s2uXB
                                                              { __DEFAULT ->
                                                                    GHC.Word.W32# [sat_s2uXB];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s2uXq;
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord32_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uXC ds1_s2uXD]
        case ds_s2uXC of {
          GHC.Word.W32# x#_s2uXF [Occ=Once*] ->
              case ds1_s2uXD of {
                GHC.Types.I# i#_s2uXH ->
                    case >=# [i#_s2uXH 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s2uXH] of b_s2uXJ [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s2uXJ 64#] of {
                                  __DEFAULT ->
                                      case uncheckedShiftRL# [x#_s2uXF b_s2uXJ] of sat_s2uXL {
                                        __DEFAULT -> GHC.Word.W32# [sat_s2uXL];
                                      };
                                  1# -> GHC.Word.$fBitsWord32_$cminBound;
                                };
                          };
                      1# ->
                          case >=# [i#_s2uXH 64#] of {
                            __DEFAULT ->
                                case uncheckedShiftL# [x#_s2uXF i#_s2uXH] of sat_s2uXN {
                                  __DEFAULT ->
                                      case narrow32Word# [sat_s2uXN] of sat_s2uXO {
                                        __DEFAULT -> GHC.Word.W32# [sat_s2uXO];
                                      };
                                };
                            1# -> GHC.Word.$fBitsWord32_$cminBound;
                          };
                    };
              };
        };

GHC.Word.$fBitsWord32_$cxor
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uXP ds1_s2uXQ]
        case ds_s2uXP of {
          GHC.Word.W32# x#_s2uXS [Occ=Once] ->
              case ds1_s2uXQ of {
                GHC.Word.W32# y#_s2uXU [Occ=Once] ->
                    case xor# [x#_s2uXS y#_s2uXU] of sat_s2uXV {
                      __DEFAULT -> GHC.Word.W32# [sat_s2uXV];
                    };
              };
        };

GHC.Word.$fBitsWord32_$c.|.
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uXW ds1_s2uXX]
        case ds_s2uXW of {
          GHC.Word.W32# x#_s2uXZ [Occ=Once] ->
              case ds1_s2uXX of {
                GHC.Word.W32# y#_s2uY1 [Occ=Once] ->
                    case or# [x#_s2uXZ y#_s2uY1] of sat_s2uY2 {
                      __DEFAULT -> GHC.Word.W32# [sat_s2uY2];
                    };
              };
        };

GHC.Word.$fBitsWord32_$c.&.
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uY3 ds1_s2uY4]
        case ds_s2uY3 of {
          GHC.Word.W32# x#_s2uY6 [Occ=Once] ->
              case ds1_s2uY4 of {
                GHC.Word.W32# y#_s2uY8 [Occ=Once] ->
                    case and# [x#_s2uY6 y#_s2uY8] of sat_s2uY9 {
                      __DEFAULT -> GHC.Word.W32# [sat_s2uY9];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros
  :: GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uYa]
        case ds_s2uYa of {
          GHC.Word.W32# x#_s2uYc [Occ=Once] ->
              case ctz32# [x#_s2uYc] of sat_s2uYd {
                __DEFAULT ->
                    case word2Int# [sat_s2uYd] of sat_s2uYe {
                      __DEFAULT -> GHC.Types.I# [sat_s2uYe];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros
  :: GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uYf]
        case ds_s2uYf of {
          GHC.Word.W32# x#_s2uYh [Occ=Once] ->
              case clz32# [x#_s2uYh] of sat_s2uYi {
                __DEFAULT ->
                    case word2Int# [sat_s2uYi] of sat_s2uYj {
                      __DEFAULT -> GHC.Types.I# [sat_s2uYj];
                    };
              };
        };

GHC.Word.$fBitsWord3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [32#];

GHC.Word.$fBitsWord32_$cfiniteBitSize
  :: GHC.Word.Word32 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s2uYk] GHC.Word.$fBitsWord3;

GHC.Word.$fBitsWord64_$cpopCount
  :: GHC.Word.Word64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uYl]
        case ds_s2uYl of {
          GHC.Word.W64# x#_s2uYn [Occ=Once] ->
              case popCnt64# [x#_s2uYn] of sat_s2uYo {
                __DEFAULT ->
                    case word2Int# [sat_s2uYo] of sat_s2uYp {
                      __DEFAULT -> GHC.Types.I# [sat_s2uYp];
                    };
              };
        };

GHC.Word.$fBitsWord64_$cunsafeShiftR
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uYq ds1_s2uYr]
        case ds_s2uYq of {
          GHC.Word.W64# x#_s2uYt [Occ=Once] ->
              case ds1_s2uYr of {
                GHC.Types.I# i#_s2uYv [Occ=Once] ->
                    case uncheckedShiftRL# [x#_s2uYt i#_s2uYv] of sat_s2uYw {
                      __DEFAULT -> GHC.Word.W64# [sat_s2uYw];
                    };
              };
        };

GHC.Word.$fBitsWord64_$cshiftR
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uYx ds1_s2uYy]
        case ds_s2uYx of {
          GHC.Word.W64# x#_s2uYA [Occ=Once] ->
              case ds1_s2uYy of {
                GHC.Types.I# i#_s2uYC ->
                    case >=# [i#_s2uYC 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftRL# [x#_s2uYA i#_s2uYC] of sat_s2uYE {
                            __DEFAULT -> GHC.Word.W64# [sat_s2uYE];
                          };
                      1# -> GHC.Word.$fBitsWord7;
                    };
              };
        };

GHC.Word.$fBitsWord64_$cunsafeShiftL
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uYF ds1_s2uYG]
        case ds_s2uYF of {
          GHC.Word.W64# x#_s2uYI [Occ=Once] ->
              case ds1_s2uYG of {
                GHC.Types.I# i#_s2uYK [Occ=Once] ->
                    case uncheckedShiftL# [x#_s2uYI i#_s2uYK] of sat_s2uYL {
                      __DEFAULT -> GHC.Word.W64# [sat_s2uYL];
                    };
              };
        };

GHC.Word.$fBitsWord64_$cshiftL
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uYM ds1_s2uYN]
        case ds_s2uYM of {
          GHC.Word.W64# x#_s2uYP [Occ=Once] ->
              case ds1_s2uYN of {
                GHC.Types.I# i#_s2uYR ->
                    case >=# [i#_s2uYR 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [x#_s2uYP i#_s2uYR] of sat_s2uYT {
                            __DEFAULT -> GHC.Word.W64# [sat_s2uYT];
                          };
                      1# -> GHC.Word.$fBitsWord7;
                    };
              };
        };

GHC.Word.$fBitsWord64_$cisSigned
  :: GHC.Word.Word64 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s2uYU] GHC.Types.False [];

GHC.Word.$fBitsWord64_$crotate
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uYV ds1_s2uYW]
        case ds_s2uYV of wild_s2uYX {
          GHC.Word.W64# x#_s2uYY ->
              case ds1_s2uYW of {
                GHC.Types.I# i#_s2uZ0 [Occ=Once] ->
                    case int2Word# [i#_s2uZ0] of sat_s2uZ1 {
                      __DEFAULT ->
                          case and# [sat_s2uZ1 63##] of sat_s2uZ2 {
                            __DEFAULT ->
                                case word2Int# [sat_s2uZ2] of wild2_s2uZ3 {
                                  __DEFAULT ->
                                      case -# [64# wild2_s2uZ3] of sat_s2uZ5 {
                                        __DEFAULT ->
                                            case
                                                uncheckedShiftRL# [x#_s2uYY sat_s2uZ5]
                                            of
                                            sat_s2uZ6
                                            { __DEFAULT ->
                                                  case
                                                      uncheckedShiftL# [x#_s2uYY wild2_s2uZ3]
                                                  of
                                                  sat_s2uZ4
                                                  { __DEFAULT ->
                                                        case
                                                            or# [sat_s2uZ4 sat_s2uZ6]
                                                        of
                                                        sat_s2uZ7
                                                        { __DEFAULT -> GHC.Word.W64# [sat_s2uZ7];
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s2uYX;
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord64_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uZ8 ds1_s2uZ9]
        case ds_s2uZ8 of {
          GHC.Word.W64# x#_s2uZb [Occ=Once*] ->
              case ds1_s2uZ9 of {
                GHC.Types.I# i#_s2uZd ->
                    case >=# [i#_s2uZd 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s2uZd] of b_s2uZf [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s2uZf 64#] of {
                                  __DEFAULT ->
                                      case uncheckedShiftRL# [x#_s2uZb b_s2uZf] of sat_s2uZh {
                                        __DEFAULT -> GHC.Word.W64# [sat_s2uZh];
                                      };
                                  1# -> GHC.Word.$fBitsWord7;
                                };
                          };
                      1# ->
                          case >=# [i#_s2uZd 64#] of {
                            __DEFAULT ->
                                case uncheckedShiftL# [x#_s2uZb i#_s2uZd] of sat_s2uZj {
                                  __DEFAULT -> GHC.Word.W64# [sat_s2uZj];
                                };
                            1# -> GHC.Word.$fBitsWord7;
                          };
                    };
              };
        };

GHC.Word.$fBitsWord64_$cxor
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uZk ds1_s2uZl]
        case ds_s2uZk of {
          GHC.Word.W64# x#_s2uZn [Occ=Once] ->
              case ds1_s2uZl of {
                GHC.Word.W64# y#_s2uZp [Occ=Once] ->
                    case xor# [x#_s2uZn y#_s2uZp] of sat_s2uZq {
                      __DEFAULT -> GHC.Word.W64# [sat_s2uZq];
                    };
              };
        };

GHC.Word.$fBitsWord64_$c.|.
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uZr ds1_s2uZs]
        case ds_s2uZr of {
          GHC.Word.W64# x#_s2uZu [Occ=Once] ->
              case ds1_s2uZs of {
                GHC.Word.W64# y#_s2uZw [Occ=Once] ->
                    case or# [x#_s2uZu y#_s2uZw] of sat_s2uZx {
                      __DEFAULT -> GHC.Word.W64# [sat_s2uZx];
                    };
              };
        };

GHC.Word.$fBitsWord64_$c.&.
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uZy ds1_s2uZz]
        case ds_s2uZy of {
          GHC.Word.W64# x#_s2uZB [Occ=Once] ->
              case ds1_s2uZz of {
                GHC.Word.W64# y#_s2uZD [Occ=Once] ->
                    case and# [x#_s2uZB y#_s2uZD] of sat_s2uZE {
                      __DEFAULT -> GHC.Word.W64# [sat_s2uZE];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
  :: GHC.Word.Word64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uZF]
        case ds_s2uZF of {
          GHC.Word.W64# x#_s2uZH [Occ=Once] ->
              case ctz64# [x#_s2uZH] of sat_s2uZI {
                __DEFAULT ->
                    case word2Int# [sat_s2uZI] of sat_s2uZJ {
                      __DEFAULT -> GHC.Types.I# [sat_s2uZJ];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
  :: GHC.Word.Word64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uZK]
        case ds_s2uZK of {
          GHC.Word.W64# x#_s2uZM [Occ=Once] ->
              case clz64# [x#_s2uZM] of sat_s2uZN {
                __DEFAULT ->
                    case word2Int# [sat_s2uZN] of sat_s2uZO {
                      __DEFAULT -> GHC.Types.I# [sat_s2uZO];
                    };
              };
        };

GHC.Word.$fBitsWord5 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [64#];

GHC.Word.$fBitsWord64_$cfiniteBitSize
  :: GHC.Word.Word64 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s2uZP] GHC.Word.$fBitsWord5;

GHC.Word.eqWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2uZQ ds1_s2uZR]
        case ds_s2uZQ of {
          GHC.Word.W8# x_s2uZT [Occ=Once] ->
              case ds1_s2uZR of {
                GHC.Word.W8# y_s2uZV [Occ=Once] ->
                    case eqWord# [x_s2uZT y_s2uZV] of sat_s2uZW {
                      __DEFAULT -> tagToEnum# [sat_s2uZW];
                    };
              };
        };

GHC.Word.$fEqWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Word.eqWord8
                                     GHC.Word.neWord8];

GHC.Word.$fNumWord4 :: GHC.Word.Word8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W8#! [1##];

GHC.Word.$fNumWord8_$csignum :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2uZX]
        case ds_s2uZX of {
          GHC.Word.W8# x_s2uZZ [Occ=Once!] ->
              case x_s2uZZ of {
                __DEFAULT -> GHC.Word.$fNumWord4;
                0## -> GHC.Word.$fBitsWord8_$cminBound;
              };
        };

GHC.Word.$fNumWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Word.$fNumWord8_$c+
                                  GHC.Word.$fNumWord8_$c-
                                  GHC.Word.$fNumWord8_$c*
                                  GHC.Word.$fNumWord8_$cnegate
                                  GHC.Word.$fNumWord8_$cabs
                                  GHC.Word.$fNumWord8_$csignum
                                  GHC.Word.$fNumWord8_$cfromInteger];

GHC.Word.$fBitsWord8_$ccomplement
  :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v01]
        case ds_s2v01 of {
          GHC.Word.W8# x#_s2v03 [Occ=Once] ->
              case xor# [x#_s2v03 255##] of sat_s2v04 {
                __DEFAULT -> GHC.Word.W8# [sat_s2v04];
              };
        };

GHC.Word.$fBitsWord10 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Word.$fBitsWord9];

GHC.Word.$fBitsWord8_$cbitSizeMaybe
  :: GHC.Word.Word8 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s2v05] GHC.Word.$fBitsWord10;

GHC.Word.$fBitsWord8_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s2v06]
        case i_s2v06 of {
          GHC.Types.I# i#_s2v08 ->
              case >=# [i#_s2v08 64#] of {
                __DEFAULT ->
                    case uncheckedShiftL# [1## i#_s2v08] of sat_s2v0a {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2v0a] of sat_s2v0b {
                            __DEFAULT -> GHC.Word.W8# [sat_s2v0b];
                          };
                    };
                1# -> GHC.Word.$fBitsWord8_$cminBound;
              };
        };

GHC.Word.$fBitsWord8_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2v0c i_s2v0d]
        case x_s2v0c of {
          GHC.Word.W8# x#_s2v0f [Occ=Once] ->
              case i_s2v0d of {
                GHC.Types.I# i#_s2v0h ->
                    case >=# [i#_s2v0h 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v0h] of sat_s2v0j {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2v0j] of sat_s2v0k {
                                  __DEFAULT ->
                                      case and# [x#_s2v0f sat_s2v0k] of {
                                        __DEFAULT -> GHC.Types.True [];
                                        0## -> GHC.Types.False [];
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Word.$fBitsWord8_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v0m eta1_s2v0n]
        case eta_s2v0m of wild_s2v0o {
          GHC.Word.W8# x#_s2v0p ->
              case eta1_s2v0n of {
                GHC.Types.I# x1_s2v0r [Occ=Once] ->
                    case negateInt# [x1_s2v0r] of sat_s2v0s {
                      __DEFAULT ->
                          case int2Word# [sat_s2v0s] of sat_s2v0t {
                            __DEFAULT ->
                                case and# [sat_s2v0t 7##] of sat_s2v0u {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2v0u] of wild2_s2v0v {
                                        __DEFAULT ->
                                            case -# [8# wild2_s2v0v] of sat_s2v0x {
                                              __DEFAULT ->
                                                  case
                                                      uncheckedShiftRL# [x#_s2v0p sat_s2v0x]
                                                  of
                                                  sat_s2v0y
                                                  { __DEFAULT ->
                                                        case
                                                            uncheckedShiftL# [x#_s2v0p wild2_s2v0v]
                                                        of
                                                        sat_s2v0w
                                                        { __DEFAULT ->
                                                              case
                                                                  or# [sat_s2v0w sat_s2v0y]
                                                              of
                                                              sat_s2v0z
                                                              { __DEFAULT ->
                                                                    case
                                                                        narrow8Word# [sat_s2v0z]
                                                                    of
                                                                    sat_s2v0A
                                                                    { __DEFAULT ->
                                                                          GHC.Word.W8# [sat_s2v0A];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s2v0o;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord8_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Word.$fBitsWord8_$crotate eta_B2 eta_B1;

GHC.Word.$fBitsWord8_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v0B eta1_s2v0C]
        case eta_s2v0B of wild_s2v0D {
          GHC.Word.W8# x#_s2v0E [Occ=Once] ->
              case eta1_s2v0C of {
                GHC.Types.I# i#_s2v0G ->
                    case >=# [i#_s2v0G 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v0G] of sat_s2v0I {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2v0I] of sat_s2v0J {
                                  __DEFAULT ->
                                      case xor# [x#_s2v0E sat_s2v0J] of sat_s2v0K {
                                        __DEFAULT -> GHC.Word.W8# [sat_s2v0K];
                                      };
                                };
                          };
                      1# -> wild_s2v0D;
                    };
              };
        };

GHC.Word.$fBitsWord8_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v0L eta1_s2v0M]
        case eta_s2v0L of {
          GHC.Word.W8# x#_s2v0O [Occ=Once*] ->
              case eta1_s2v0M of {
                GHC.Types.I# i#_s2v0Q ->
                    case >=# [i#_s2v0Q 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v0Q] of sat_s2v0S {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2v0S] of sat_s2v0T {
                                  __DEFAULT ->
                                      case xor# [sat_s2v0T 255##] of sat_s2v0U {
                                        __DEFAULT ->
                                            case and# [x#_s2v0O sat_s2v0U] of sat_s2v0V {
                                              __DEFAULT -> GHC.Word.W8# [sat_s2v0V];
                                            };
                                      };
                                };
                          };
                      1# ->
                          case and# [x#_s2v0O 255##] of sat_s2v0W {
                            __DEFAULT -> GHC.Word.W8# [sat_s2v0W];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord8_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v0X eta1_s2v0Y]
        case eta_s2v0X of wild_s2v0Z {
          GHC.Word.W8# x#_s2v10 [Occ=Once] ->
              case eta1_s2v0Y of {
                GHC.Types.I# i#_s2v12 ->
                    case >=# [i#_s2v12 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v12] of sat_s2v14 {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2v14] of sat_s2v15 {
                                  __DEFAULT ->
                                      case or# [x#_s2v10 sat_s2v15] of sat_s2v16 {
                                        __DEFAULT -> GHC.Word.W8# [sat_s2v16];
                                      };
                                };
                          };
                      1# -> wild_s2v0Z;
                    };
              };
        };

GHC.Word.$fBitsWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Word.$fEqWord8
                                     GHC.Word.$fBitsWord8_$c.&.
                                     GHC.Word.$fBitsWord8_$c.|.
                                     GHC.Word.$fBitsWord8_$cxor
                                     GHC.Word.$fBitsWord8_$ccomplement
                                     GHC.Word.$fBitsWord8_$cshift
                                     GHC.Word.$fBitsWord8_$crotate
                                     GHC.Word.$fBitsWord8_$cminBound
                                     GHC.Word.$fBitsWord8_$cbit
                                     GHC.Word.$fBitsWord8_$csetBit
                                     GHC.Word.$fBitsWord8_$cclearBit
                                     GHC.Word.$fBitsWord8_$ccomplementBit
                                     GHC.Word.$fBitsWord8_$ctestBit
                                     GHC.Word.$fBitsWord8_$cbitSizeMaybe
                                     GHC.Word.$fBitsWord8_$cfiniteBitSize
                                     GHC.Word.$fBitsWord8_$cisSigned
                                     GHC.Word.$fBitsWord8_$cshiftL
                                     GHC.Word.$fBitsWord8_$cunsafeShiftL
                                     GHC.Word.$fBitsWord8_$cshiftR
                                     GHC.Word.$fBitsWord8_$cunsafeShiftR
                                     GHC.Word.$fBitsWord8_$crotateL
                                     GHC.Word.$fBitsWord8_$crotateR
                                     GHC.Word.$fBitsWord8_$cpopCount];

GHC.Word.$fFiniteBitsWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Word.$fBitsWord8
                                           GHC.Word.$fBitsWord8_$cfiniteBitSize
                                           GHC.Word.$fFiniteBitsWord8_$ccountLeadingZeros
                                           GHC.Word.$fFiniteBitsWord8_$ccountTrailingZeros];

GHC.Word.$fIntegralWord8_$cquot
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v17 y_s2v18]
        case ds_s2v17 of {
          GHC.Word.W8# x#_s2v1a [Occ=Once] ->
              case y_s2v18 of {
                GHC.Word.W8# y#_s2v1c [Occ=Once!] ->
                    case y#_s2v1c of wild2_s2v1d {
                      __DEFAULT ->
                          case quotWord# [x#_s2v1a wild2_s2v1d] of wild3_s2v1e {
                            __DEFAULT -> GHC.Word.W8# [wild3_s2v1e];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord8_$crem
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v1f y_s2v1g]
        case ds_s2v1f of {
          GHC.Word.W8# x#_s2v1i [Occ=Once] ->
              case y_s2v1g of {
                GHC.Word.W8# y#_s2v1k [Occ=Once!] ->
                    case y#_s2v1k of wild2_s2v1l {
                      __DEFAULT ->
                          case remWord# [x#_s2v1i wild2_s2v1l] of wild3_s2v1m {
                            __DEFAULT -> GHC.Word.W8# [wild3_s2v1m];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord8_$cquotRem
  :: GHC.Word.Word8
     -> GHC.Word.Word8 -> (GHC.Word.Word8, GHC.Word.Word8)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v1n y_s2v1o]
        case ds_s2v1n of {
          GHC.Word.W8# x#_s2v1q [Occ=Once] ->
              case y_s2v1o of {
                GHC.Word.W8# y#_s2v1s [Occ=Once!] ->
                    case y#_s2v1s of wild2_s2v1t {
                      __DEFAULT ->
                          case quotRemWord# [x#_s2v1q wild2_s2v1t] of {
                            (#,#) ipv_s2v1v [Occ=Once] ipv1_s2v1w [Occ=Once] ->
                                let {
                                  sat_s2v1y [Occ=Once] :: GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.Word.W8#! [ipv1_s2v1w]; } in
                                let {
                                  sat_s2v1x [Occ=Once] :: GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.Word.W8#! [ipv_s2v1v];
                                } in  (,) [sat_s2v1x sat_s2v1y];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord8_$cdivMod
  :: GHC.Word.Word8
     -> GHC.Word.Word8 -> (GHC.Word.Word8, GHC.Word.Word8)
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s2v1z y_s2v1A]
        case ds_s2v1z of {
          GHC.Word.W8# x#_s2v1C ->
              case y_s2v1A of {
                GHC.Word.W8# y#_s2v1E [Occ=Once!] ->
                    case y#_s2v1E of wild2_s2v1F {
                      __DEFAULT ->
                          let {
                            sat_s2v1J [Occ=Once] :: GHC.Word.Word8
                            [LclId] =
                                [x#_s2v1C wild2_s2v1F] \u []
                                    case remWord# [x#_s2v1C wild2_s2v1F] of wild3_s2v1I {
                                      __DEFAULT -> GHC.Word.W8# [wild3_s2v1I];
                                    }; } in
                          let {
                            sat_s2v1H [Occ=Once] :: GHC.Word.Word8
                            [LclId] =
                                [x#_s2v1C wild2_s2v1F] \u []
                                    case quotWord# [x#_s2v1C wild2_s2v1F] of wild3_s2v1G {
                                      __DEFAULT -> GHC.Word.W8# [wild3_s2v1G];
                                    };
                          } in  (,) [sat_s2v1H sat_s2v1J];
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.gtWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v1K ds1_s2v1L]
        case ds_s2v1K of {
          GHC.Word.W8# x_s2v1N [Occ=Once] ->
              case ds1_s2v1L of {
                GHC.Word.W8# y_s2v1P [Occ=Once] ->
                    case gtWord# [x_s2v1N y_s2v1P] of sat_s2v1Q {
                      __DEFAULT -> tagToEnum# [sat_s2v1Q];
                    };
              };
        };

GHC.Word.geWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v1R ds1_s2v1S]
        case ds_s2v1R of {
          GHC.Word.W8# x_s2v1U [Occ=Once] ->
              case ds1_s2v1S of {
                GHC.Word.W8# y_s2v1W [Occ=Once] ->
                    case geWord# [x_s2v1U y_s2v1W] of sat_s2v1X {
                      __DEFAULT -> tagToEnum# [sat_s2v1X];
                    };
              };
        };

GHC.Word.ltWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v1Y ds1_s2v1Z]
        case ds_s2v1Y of {
          GHC.Word.W8# x_s2v21 [Occ=Once] ->
              case ds1_s2v1Z of {
                GHC.Word.W8# y_s2v23 [Occ=Once] ->
                    case ltWord# [x_s2v21 y_s2v23] of sat_s2v24 {
                      __DEFAULT -> tagToEnum# [sat_s2v24];
                    };
              };
        };

GHC.Word.leWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v25 ds1_s2v26]
        case ds_s2v25 of {
          GHC.Word.W8# x_s2v28 [Occ=Once] ->
              case ds1_s2v26 of {
                GHC.Word.W8# y_s2v2a [Occ=Once] ->
                    case leWord# [x_s2v28 y_s2v2a] of sat_s2v2b {
                      __DEFAULT -> tagToEnum# [sat_s2v2b];
                    };
              };
        };

GHC.Word.$fOrdWord8_$ccompare
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2v2c y_s2v2d]
        case x_s2v2c of {
          GHC.Word.W8# x1_s2v2f ->
              case y_s2v2d of {
                GHC.Word.W8# y1_s2v2h ->
                    case eqWord# [x1_s2v2f y1_s2v2h] of {
                      __DEFAULT ->
                          case leWord# [x1_s2v2f y1_s2v2h] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Word.$fOrdWord8_$cmax
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2v2k y_s2v2l]
        case x_s2v2k of wild_s2v2m {
          GHC.Word.W8# x1_s2v2n [Occ=Once] ->
              case y_s2v2l of wild1_s2v2o {
                GHC.Word.W8# y1_s2v2p [Occ=Once] ->
                    case leWord# [x1_s2v2n y1_s2v2p] of {
                      __DEFAULT -> wild_s2v2m;
                      1# -> wild1_s2v2o;
                    };
              };
        };

GHC.Word.$fOrdWord8_$cmin
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2v2r y_s2v2s]
        case x_s2v2r of wild_s2v2t {
          GHC.Word.W8# x1_s2v2u [Occ=Once] ->
              case y_s2v2s of wild1_s2v2v {
                GHC.Word.W8# y1_s2v2w [Occ=Once] ->
                    case leWord# [x1_s2v2u y1_s2v2w] of {
                      __DEFAULT -> wild1_s2v2v;
                      1# -> wild_s2v2t;
                    };
              };
        };

GHC.Word.$fOrdWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Word.$fEqWord8
                                      GHC.Word.$fOrdWord8_$ccompare
                                      GHC.Word.ltWord8
                                      GHC.Word.leWord8
                                      GHC.Word.gtWord8
                                      GHC.Word.geWord8
                                      GHC.Word.$fOrdWord8_$cmax
                                      GHC.Word.$fOrdWord8_$cmin];

GHC.Word.$fIxWord8_$cinRange
  :: (GHC.Word.Word8, GHC.Word.Word8)
     -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v2y i_s2v2z]
        case ds_s2v2y of {
          (,) m_s2v2B [Occ=Once!] n_s2v2C [Occ=Once!] ->
              case m_s2v2B of {
                GHC.Word.W8# x_s2v2E [Occ=Once] ->
                    case i_s2v2z of {
                      GHC.Word.W8# y_s2v2G ->
                          case leWord# [x_s2v2E y_s2v2G] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s2v2C of {
                                  GHC.Word.W8# y1_s2v2J [Occ=Once] ->
                                      case leWord# [y_s2v2G y1_s2v2J] of sat_s2v2K {
                                        __DEFAULT -> tagToEnum# [sat_s2v2K];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord8_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word8 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2v2L]
        case w_s2v2L of {
          GHC.Word.W8# ww1_s2v2N [Occ=Once] ->
              case word2Int# [ww1_s2v2N] of sat_s2v2O {
                __DEFAULT ->
                    case GHC.Integer.Type.smallInteger sat_s2v2O of sat_s2v2P {
                      __DEFAULT ->
                          case
                              GHC.Integer.Type.timesInteger sat_s2v2P GHC.Word.$fRealWord1
                          of
                          sat_s2v2Q
                          { __DEFAULT ->
                                case GHC.Real.$w$sreduce sat_s2v2Q GHC.Word.$fRealWord1 of {
                                  (#,#) ww3_s2v2S [Occ=Once] ww4_s2v2T [Occ=Once] ->
                                      GHC.Real.:% [ww3_s2v2S ww4_s2v2T];
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Word.$fNumWord8
                                    GHC.Word.$fOrdWord8
                                    GHC.Word.$fRealWord8_$ctoRational];

GHC.Word.$fIntegralWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Word.$fRealWord8
                                        GHC.Word.$fEnumWord8
                                        GHC.Word.$fIntegralWord8_$cquot
                                        GHC.Word.$fIntegralWord8_$crem
                                        GHC.Word.$fIntegralWord8_$cquot
                                        GHC.Word.$fIntegralWord8_$crem
                                        GHC.Word.$fIntegralWord8_$cquotRem
                                        GHC.Word.$fIntegralWord8_$cdivMod
                                        GHC.Word.$ctoInteger];

GHC.Word.$fIxWord8_$cunsafeIndex
  :: (GHC.Word.Word8, GHC.Word.Word8)
     -> GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v2U i_s2v2V]
        case ds_s2v2U of {
          (,) m_s2v2X [Occ=Once!] _ [Occ=Dead] ->
              case i_s2v2V of {
                GHC.Word.W8# x#_s2v30 [Occ=Once] ->
                    case m_s2v2X of {
                      GHC.Word.W8# y#_s2v32 [Occ=Once] ->
                          case minusWord# [x#_s2v30 y#_s2v32] of sat_s2v33 {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2v33] of sat_s2v34 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2v34] of sat_s2v35 {
                                        __DEFAULT -> GHC.Types.I# [sat_s2v35];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord8_$crange
  :: (GHC.Word.Word8, GHC.Word.Word8) -> [GHC.Word.Word8]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s2v36]
        case ds_s2v36 of {
          (,) m_s2v38 [Occ=Once] n_s2v39 [Occ=Once] ->
              GHC.Word.$fEnumWord8_$cenumFromTo m_s2v38 n_s2v39;
        };

GHC.Word.$fIxWord1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Word.$fIxWord8_$crangeSize
  :: (GHC.Word.Word8, GHC.Word.Word8) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2v3a]
        case b_s2v3a of {
          (,) _l_s2v3c [Occ=Once!] h_s2v3d [Occ=Once!] ->
              case _l_s2v3c of {
                GHC.Word.W8# x_s2v3f ->
                    case h_s2v3d of {
                      GHC.Word.W8# y_s2v3h ->
                          case leWord# [x_s2v3f y_s2v3h] of {
                            __DEFAULT -> GHC.Word.$fIxWord1;
                            1# ->
                                case minusWord# [y_s2v3h x_s2v3f] of sat_s2v3j {
                                  __DEFAULT ->
                                      case narrow8Word# [sat_s2v3j] of sat_s2v3k {
                                        __DEFAULT ->
                                            case word2Int# [sat_s2v3k] of sat_s2v3l {
                                              __DEFAULT ->
                                                  case +# [sat_s2v3l 1#] of sat_s2v3m {
                                                    __DEFAULT -> GHC.Types.I# [sat_s2v3m];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord8_$cunsafeRangeSize
  :: (GHC.Word.Word8, GHC.Word.Word8) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2v3n]
        case b_s2v3n of {
          (,) _l_s2v3p [Occ=Once!] h_s2v3q [Occ=Once!] ->
              case h_s2v3q of {
                GHC.Word.W8# x#_s2v3s [Occ=Once] ->
                    case _l_s2v3p of {
                      GHC.Word.W8# y#_s2v3u [Occ=Once] ->
                          case minusWord# [x#_s2v3s y#_s2v3u] of sat_s2v3v {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2v3v] of sat_s2v3w {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2v3w] of sat_s2v3x {
                                        __DEFAULT ->
                                            case +# [sat_s2v3x 1#] of sat_s2v3y {
                                              __DEFAULT -> GHC.Types.I# [sat_s2v3y];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord8_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Word.Word8, GHC.Word.Word8)
     -> GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v3z eta1_s2v3A]
        case eta_s2v3z of {
          (,) m_s2v3C [Occ=Once!] n_s2v3D [Occ=Once!] ->
              case m_s2v3C of {
                GHC.Word.W8# x_s2v3F ->
                    case eta1_s2v3A of {
                      GHC.Word.W8# y_s2v3H ->
                          case leWord# [x_s2v3F y_s2v3H] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s2v3D of {
                                  GHC.Word.W8# y1_s2v3K [Occ=Once] ->
                                      case leWord# [y_s2v3H y1_s2v3K] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case minusWord# [y_s2v3H x_s2v3F] of sat_s2v3M {
                                              __DEFAULT ->
                                                  case narrow8Word# [sat_s2v3M] of sat_s2v3N {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s2v3N] of sat_s2v3O {
                                                          __DEFAULT -> GHC.Types.I# [sat_s2v3O];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Word.$fOrdWord8
                                 GHC.Word.$fIxWord8_$crange
                                 GHC.Word.$fIxWord8_$cindex
                                 GHC.Word.$fIxWord8_$cunsafeIndex
                                 GHC.Word.$fIxWord8_$cinRange
                                 GHC.Word.$fIxWord8_$crangeSize
                                 GHC.Word.$fIxWord8_$cunsafeRangeSize];

GHC.Word.eqWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v3P ds1_s2v3Q]
        case ds_s2v3P of {
          GHC.Word.W16# x_s2v3S [Occ=Once] ->
              case ds1_s2v3Q of {
                GHC.Word.W16# y_s2v3U [Occ=Once] ->
                    case eqWord# [x_s2v3S y_s2v3U] of sat_s2v3V {
                      __DEFAULT -> tagToEnum# [sat_s2v3V];
                    };
              };
        };

GHC.Word.$fEqWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Word.eqWord16
                                     GHC.Word.neWord16];

GHC.Word.$fNumWord1 :: GHC.Word.Word16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W16#! [1##];

GHC.Word.$fNumWord16_$csignum :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v3W]
        case ds_s2v3W of {
          GHC.Word.W16# x_s2v3Y [Occ=Once!] ->
              case x_s2v3Y of {
                __DEFAULT -> GHC.Word.$fNumWord1;
                0## -> GHC.Word.$fBitsWord16_$cminBound;
              };
        };

GHC.Word.$fNumWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Word.$fNumWord16_$c+
                                  GHC.Word.$fNumWord16_$c-
                                  GHC.Word.$fNumWord16_$c*
                                  GHC.Word.$fNumWord16_$cnegate
                                  GHC.Word.$fNumWord16_$cabs
                                  GHC.Word.$fNumWord16_$csignum
                                  GHC.Word.$fNumWord16_$cfromInteger];

GHC.Word.$fBitsWord16_$ccomplement
  :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v40]
        case ds_s2v40 of {
          GHC.Word.W16# x#_s2v42 [Occ=Once] ->
              case xor# [x#_s2v42 65535##] of sat_s2v43 {
                __DEFAULT -> GHC.Word.W16# [sat_s2v43];
              };
        };

GHC.Word.$fBitsWord2 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Word.$fBitsWord1];

GHC.Word.$fBitsWord16_$cbitSizeMaybe
  :: GHC.Word.Word16 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s2v44] GHC.Word.$fBitsWord2;

GHC.Word.$fBitsWord16_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s2v45]
        case i_s2v45 of {
          GHC.Types.I# i#_s2v47 ->
              case >=# [i#_s2v47 64#] of {
                __DEFAULT ->
                    case uncheckedShiftL# [1## i#_s2v47] of sat_s2v49 {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2v49] of sat_s2v4a {
                            __DEFAULT -> GHC.Word.W16# [sat_s2v4a];
                          };
                    };
                1# -> GHC.Word.$fBitsWord16_$cminBound;
              };
        };

GHC.Word.$fBitsWord16_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2v4b i_s2v4c]
        case x_s2v4b of {
          GHC.Word.W16# x#_s2v4e [Occ=Once] ->
              case i_s2v4c of {
                GHC.Types.I# i#_s2v4g ->
                    case >=# [i#_s2v4g 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v4g] of sat_s2v4i {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2v4i] of sat_s2v4j {
                                  __DEFAULT ->
                                      case and# [x#_s2v4e sat_s2v4j] of {
                                        __DEFAULT -> GHC.Types.True [];
                                        0## -> GHC.Types.False [];
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Word.$fBitsWord16_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v4l eta1_s2v4m]
        case eta_s2v4l of wild_s2v4n {
          GHC.Word.W16# x#_s2v4o ->
              case eta1_s2v4m of {
                GHC.Types.I# x1_s2v4q [Occ=Once] ->
                    case negateInt# [x1_s2v4q] of sat_s2v4r {
                      __DEFAULT ->
                          case int2Word# [sat_s2v4r] of sat_s2v4s {
                            __DEFAULT ->
                                case and# [sat_s2v4s 15##] of sat_s2v4t {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2v4t] of wild2_s2v4u {
                                        __DEFAULT ->
                                            case -# [16# wild2_s2v4u] of sat_s2v4w {
                                              __DEFAULT ->
                                                  case
                                                      uncheckedShiftRL# [x#_s2v4o sat_s2v4w]
                                                  of
                                                  sat_s2v4x
                                                  { __DEFAULT ->
                                                        case
                                                            uncheckedShiftL# [x#_s2v4o wild2_s2v4u]
                                                        of
                                                        sat_s2v4v
                                                        { __DEFAULT ->
                                                              case
                                                                  or# [sat_s2v4v sat_s2v4x]
                                                              of
                                                              sat_s2v4y
                                                              { __DEFAULT ->
                                                                    case
                                                                        narrow16Word# [sat_s2v4y]
                                                                    of
                                                                    sat_s2v4z
                                                                    { __DEFAULT ->
                                                                          GHC.Word.W16# [sat_s2v4z];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s2v4n;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord16_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Word.$fBitsWord16_$crotate eta_B2 eta_B1;

GHC.Word.$fBitsWord16_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v4A eta1_s2v4B]
        case eta_s2v4A of wild_s2v4C {
          GHC.Word.W16# x#_s2v4D [Occ=Once] ->
              case eta1_s2v4B of {
                GHC.Types.I# i#_s2v4F ->
                    case >=# [i#_s2v4F 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v4F] of sat_s2v4H {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2v4H] of sat_s2v4I {
                                  __DEFAULT ->
                                      case xor# [x#_s2v4D sat_s2v4I] of sat_s2v4J {
                                        __DEFAULT -> GHC.Word.W16# [sat_s2v4J];
                                      };
                                };
                          };
                      1# -> wild_s2v4C;
                    };
              };
        };

GHC.Word.$fBitsWord16_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v4K eta1_s2v4L]
        case eta_s2v4K of {
          GHC.Word.W16# x#_s2v4N [Occ=Once*] ->
              case eta1_s2v4L of {
                GHC.Types.I# i#_s2v4P ->
                    case >=# [i#_s2v4P 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v4P] of sat_s2v4R {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2v4R] of sat_s2v4S {
                                  __DEFAULT ->
                                      case xor# [sat_s2v4S 65535##] of sat_s2v4T {
                                        __DEFAULT ->
                                            case and# [x#_s2v4N sat_s2v4T] of sat_s2v4U {
                                              __DEFAULT -> GHC.Word.W16# [sat_s2v4U];
                                            };
                                      };
                                };
                          };
                      1# ->
                          case and# [x#_s2v4N 65535##] of sat_s2v4V {
                            __DEFAULT -> GHC.Word.W16# [sat_s2v4V];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord16_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v4W eta1_s2v4X]
        case eta_s2v4W of wild_s2v4Y {
          GHC.Word.W16# x#_s2v4Z [Occ=Once] ->
              case eta1_s2v4X of {
                GHC.Types.I# i#_s2v51 ->
                    case >=# [i#_s2v51 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v51] of sat_s2v53 {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2v53] of sat_s2v54 {
                                  __DEFAULT ->
                                      case or# [x#_s2v4Z sat_s2v54] of sat_s2v55 {
                                        __DEFAULT -> GHC.Word.W16# [sat_s2v55];
                                      };
                                };
                          };
                      1# -> wild_s2v4Y;
                    };
              };
        };

GHC.Word.$fBitsWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Word.$fEqWord16
                                     GHC.Word.$fBitsWord16_$c.&.
                                     GHC.Word.$fBitsWord16_$c.|.
                                     GHC.Word.$fBitsWord16_$cxor
                                     GHC.Word.$fBitsWord16_$ccomplement
                                     GHC.Word.$fBitsWord16_$cshift
                                     GHC.Word.$fBitsWord16_$crotate
                                     GHC.Word.$fBitsWord16_$cminBound
                                     GHC.Word.$fBitsWord16_$cbit
                                     GHC.Word.$fBitsWord16_$csetBit
                                     GHC.Word.$fBitsWord16_$cclearBit
                                     GHC.Word.$fBitsWord16_$ccomplementBit
                                     GHC.Word.$fBitsWord16_$ctestBit
                                     GHC.Word.$fBitsWord16_$cbitSizeMaybe
                                     GHC.Word.$fBitsWord16_$cfiniteBitSize
                                     GHC.Word.$fBitsWord16_$cisSigned
                                     GHC.Word.$fBitsWord16_$cshiftL
                                     GHC.Word.$fBitsWord16_$cunsafeShiftL
                                     GHC.Word.$fBitsWord16_$cshiftR
                                     GHC.Word.$fBitsWord16_$cunsafeShiftR
                                     GHC.Word.$fBitsWord16_$crotateL
                                     GHC.Word.$fBitsWord16_$crotateR
                                     GHC.Word.$fBitsWord16_$cpopCount];

GHC.Word.$fFiniteBitsWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Word.$fBitsWord16
                                           GHC.Word.$fBitsWord16_$cfiniteBitSize
                                           GHC.Word.$fFiniteBitsWord16_$ccountLeadingZeros
                                           GHC.Word.$fFiniteBitsWord16_$ccountTrailingZeros];

GHC.Word.$fIntegralWord16_$cquot
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v56 y_s2v57]
        case ds_s2v56 of {
          GHC.Word.W16# x#_s2v59 [Occ=Once] ->
              case y_s2v57 of {
                GHC.Word.W16# y#_s2v5b [Occ=Once!] ->
                    case y#_s2v5b of wild2_s2v5c {
                      __DEFAULT ->
                          case quotWord# [x#_s2v59 wild2_s2v5c] of wild3_s2v5d {
                            __DEFAULT -> GHC.Word.W16# [wild3_s2v5d];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord16_$crem
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v5e y_s2v5f]
        case ds_s2v5e of {
          GHC.Word.W16# x#_s2v5h [Occ=Once] ->
              case y_s2v5f of {
                GHC.Word.W16# y#_s2v5j [Occ=Once!] ->
                    case y#_s2v5j of wild2_s2v5k {
                      __DEFAULT ->
                          case remWord# [x#_s2v5h wild2_s2v5k] of wild3_s2v5l {
                            __DEFAULT -> GHC.Word.W16# [wild3_s2v5l];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord16_$cquotRem
  :: GHC.Word.Word16
     -> GHC.Word.Word16 -> (GHC.Word.Word16, GHC.Word.Word16)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v5m y_s2v5n]
        case ds_s2v5m of {
          GHC.Word.W16# x#_s2v5p [Occ=Once] ->
              case y_s2v5n of {
                GHC.Word.W16# y#_s2v5r [Occ=Once!] ->
                    case y#_s2v5r of wild2_s2v5s {
                      __DEFAULT ->
                          case quotRemWord# [x#_s2v5p wild2_s2v5s] of {
                            (#,#) ipv_s2v5u [Occ=Once] ipv1_s2v5v [Occ=Once] ->
                                let {
                                  sat_s2v5x [Occ=Once] :: GHC.Word.Word16
                                  [LclId] =
                                      CCCS GHC.Word.W16#! [ipv1_s2v5v]; } in
                                let {
                                  sat_s2v5w [Occ=Once] :: GHC.Word.Word16
                                  [LclId] =
                                      CCCS GHC.Word.W16#! [ipv_s2v5u];
                                } in  (,) [sat_s2v5w sat_s2v5x];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord16_$cdivMod
  :: GHC.Word.Word16
     -> GHC.Word.Word16 -> (GHC.Word.Word16, GHC.Word.Word16)
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s2v5y y_s2v5z]
        case ds_s2v5y of {
          GHC.Word.W16# x#_s2v5B ->
              case y_s2v5z of {
                GHC.Word.W16# y#_s2v5D [Occ=Once!] ->
                    case y#_s2v5D of wild2_s2v5E {
                      __DEFAULT ->
                          let {
                            sat_s2v5I [Occ=Once] :: GHC.Word.Word16
                            [LclId] =
                                [x#_s2v5B wild2_s2v5E] \u []
                                    case remWord# [x#_s2v5B wild2_s2v5E] of wild3_s2v5H {
                                      __DEFAULT -> GHC.Word.W16# [wild3_s2v5H];
                                    }; } in
                          let {
                            sat_s2v5G [Occ=Once] :: GHC.Word.Word16
                            [LclId] =
                                [x#_s2v5B wild2_s2v5E] \u []
                                    case quotWord# [x#_s2v5B wild2_s2v5E] of wild3_s2v5F {
                                      __DEFAULT -> GHC.Word.W16# [wild3_s2v5F];
                                    };
                          } in  (,) [sat_s2v5G sat_s2v5I];
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.gtWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v5J ds1_s2v5K]
        case ds_s2v5J of {
          GHC.Word.W16# x_s2v5M [Occ=Once] ->
              case ds1_s2v5K of {
                GHC.Word.W16# y_s2v5O [Occ=Once] ->
                    case gtWord# [x_s2v5M y_s2v5O] of sat_s2v5P {
                      __DEFAULT -> tagToEnum# [sat_s2v5P];
                    };
              };
        };

GHC.Word.geWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v5Q ds1_s2v5R]
        case ds_s2v5Q of {
          GHC.Word.W16# x_s2v5T [Occ=Once] ->
              case ds1_s2v5R of {
                GHC.Word.W16# y_s2v5V [Occ=Once] ->
                    case geWord# [x_s2v5T y_s2v5V] of sat_s2v5W {
                      __DEFAULT -> tagToEnum# [sat_s2v5W];
                    };
              };
        };

GHC.Word.ltWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v5X ds1_s2v5Y]
        case ds_s2v5X of {
          GHC.Word.W16# x_s2v60 [Occ=Once] ->
              case ds1_s2v5Y of {
                GHC.Word.W16# y_s2v62 [Occ=Once] ->
                    case ltWord# [x_s2v60 y_s2v62] of sat_s2v63 {
                      __DEFAULT -> tagToEnum# [sat_s2v63];
                    };
              };
        };

GHC.Word.leWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v64 ds1_s2v65]
        case ds_s2v64 of {
          GHC.Word.W16# x_s2v67 [Occ=Once] ->
              case ds1_s2v65 of {
                GHC.Word.W16# y_s2v69 [Occ=Once] ->
                    case leWord# [x_s2v67 y_s2v69] of sat_s2v6a {
                      __DEFAULT -> tagToEnum# [sat_s2v6a];
                    };
              };
        };

GHC.Word.$fOrdWord16_$ccompare
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2v6b y_s2v6c]
        case x_s2v6b of {
          GHC.Word.W16# x1_s2v6e ->
              case y_s2v6c of {
                GHC.Word.W16# y1_s2v6g ->
                    case eqWord# [x1_s2v6e y1_s2v6g] of {
                      __DEFAULT ->
                          case leWord# [x1_s2v6e y1_s2v6g] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Word.$fOrdWord16_$cmax
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2v6j y_s2v6k]
        case x_s2v6j of wild_s2v6l {
          GHC.Word.W16# x1_s2v6m [Occ=Once] ->
              case y_s2v6k of wild1_s2v6n {
                GHC.Word.W16# y1_s2v6o [Occ=Once] ->
                    case leWord# [x1_s2v6m y1_s2v6o] of {
                      __DEFAULT -> wild_s2v6l;
                      1# -> wild1_s2v6n;
                    };
              };
        };

GHC.Word.$fOrdWord16_$cmin
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2v6q y_s2v6r]
        case x_s2v6q of wild_s2v6s {
          GHC.Word.W16# x1_s2v6t [Occ=Once] ->
              case y_s2v6r of wild1_s2v6u {
                GHC.Word.W16# y1_s2v6v [Occ=Once] ->
                    case leWord# [x1_s2v6t y1_s2v6v] of {
                      __DEFAULT -> wild1_s2v6u;
                      1# -> wild_s2v6s;
                    };
              };
        };

GHC.Word.$fOrdWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Word.$fEqWord16
                                      GHC.Word.$fOrdWord16_$ccompare
                                      GHC.Word.ltWord16
                                      GHC.Word.leWord16
                                      GHC.Word.gtWord16
                                      GHC.Word.geWord16
                                      GHC.Word.$fOrdWord16_$cmax
                                      GHC.Word.$fOrdWord16_$cmin];

GHC.Word.$fIxWord16_$cinRange
  :: (GHC.Word.Word16, GHC.Word.Word16)
     -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v6x i_s2v6y]
        case ds_s2v6x of {
          (,) m_s2v6A [Occ=Once!] n_s2v6B [Occ=Once!] ->
              case m_s2v6A of {
                GHC.Word.W16# x_s2v6D [Occ=Once] ->
                    case i_s2v6y of {
                      GHC.Word.W16# y_s2v6F ->
                          case leWord# [x_s2v6D y_s2v6F] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s2v6B of {
                                  GHC.Word.W16# y1_s2v6I [Occ=Once] ->
                                      case leWord# [y_s2v6F y1_s2v6I] of sat_s2v6J {
                                        __DEFAULT -> tagToEnum# [sat_s2v6J];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord16_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word16 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2v6K]
        case w_s2v6K of {
          GHC.Word.W16# ww1_s2v6M [Occ=Once] ->
              case word2Int# [ww1_s2v6M] of sat_s2v6N {
                __DEFAULT ->
                    case GHC.Integer.Type.smallInteger sat_s2v6N of sat_s2v6O {
                      __DEFAULT ->
                          case
                              GHC.Integer.Type.timesInteger sat_s2v6O GHC.Word.$fRealWord1
                          of
                          sat_s2v6P
                          { __DEFAULT ->
                                case GHC.Real.$w$sreduce sat_s2v6P GHC.Word.$fRealWord1 of {
                                  (#,#) ww3_s2v6R [Occ=Once] ww4_s2v6S [Occ=Once] ->
                                      GHC.Real.:% [ww3_s2v6R ww4_s2v6S];
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Word.$fNumWord16
                                    GHC.Word.$fOrdWord16
                                    GHC.Word.$fRealWord16_$ctoRational];

GHC.Word.$fIntegralWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Word.$fRealWord16
                                        GHC.Word.$fEnumWord16
                                        GHC.Word.$fIntegralWord16_$cquot
                                        GHC.Word.$fIntegralWord16_$crem
                                        GHC.Word.$fIntegralWord16_$cquot
                                        GHC.Word.$fIntegralWord16_$crem
                                        GHC.Word.$fIntegralWord16_$cquotRem
                                        GHC.Word.$fIntegralWord16_$cdivMod
                                        GHC.Word.$ctoInteger1];

GHC.Word.$fIxWord16_$cunsafeIndex
  :: (GHC.Word.Word16, GHC.Word.Word16)
     -> GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v6T i_s2v6U]
        case ds_s2v6T of {
          (,) m_s2v6W [Occ=Once!] _ [Occ=Dead] ->
              case i_s2v6U of {
                GHC.Word.W16# x#_s2v6Z [Occ=Once] ->
                    case m_s2v6W of {
                      GHC.Word.W16# y#_s2v71 [Occ=Once] ->
                          case minusWord# [x#_s2v6Z y#_s2v71] of sat_s2v72 {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2v72] of sat_s2v73 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2v73] of sat_s2v74 {
                                        __DEFAULT -> GHC.Types.I# [sat_s2v74];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord16_$crange
  :: (GHC.Word.Word16, GHC.Word.Word16) -> [GHC.Word.Word16]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s2v75]
        case ds_s2v75 of {
          (,) m_s2v77 [Occ=Once] n_s2v78 [Occ=Once] ->
              GHC.Word.$fEnumWord16_$cenumFromTo m_s2v77 n_s2v78;
        };

GHC.Word.$fIxWord16_$crangeSize
  :: (GHC.Word.Word16, GHC.Word.Word16) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2v79]
        case b_s2v79 of {
          (,) _l_s2v7b [Occ=Once!] h_s2v7c [Occ=Once!] ->
              case _l_s2v7b of {
                GHC.Word.W16# x_s2v7e ->
                    case h_s2v7c of {
                      GHC.Word.W16# y_s2v7g ->
                          case leWord# [x_s2v7e y_s2v7g] of {
                            __DEFAULT -> GHC.Word.$fIxWord1;
                            1# ->
                                case minusWord# [y_s2v7g x_s2v7e] of sat_s2v7i {
                                  __DEFAULT ->
                                      case narrow16Word# [sat_s2v7i] of sat_s2v7j {
                                        __DEFAULT ->
                                            case word2Int# [sat_s2v7j] of sat_s2v7k {
                                              __DEFAULT ->
                                                  case +# [sat_s2v7k 1#] of sat_s2v7l {
                                                    __DEFAULT -> GHC.Types.I# [sat_s2v7l];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord16_$cunsafeRangeSize
  :: (GHC.Word.Word16, GHC.Word.Word16) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2v7m]
        case b_s2v7m of {
          (,) _l_s2v7o [Occ=Once!] h_s2v7p [Occ=Once!] ->
              case h_s2v7p of {
                GHC.Word.W16# x#_s2v7r [Occ=Once] ->
                    case _l_s2v7o of {
                      GHC.Word.W16# y#_s2v7t [Occ=Once] ->
                          case minusWord# [x#_s2v7r y#_s2v7t] of sat_s2v7u {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2v7u] of sat_s2v7v {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2v7v] of sat_s2v7w {
                                        __DEFAULT ->
                                            case +# [sat_s2v7w 1#] of sat_s2v7x {
                                              __DEFAULT -> GHC.Types.I# [sat_s2v7x];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord16_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Word.Word16, GHC.Word.Word16)
     -> GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v7y eta1_s2v7z]
        case eta_s2v7y of {
          (,) m_s2v7B [Occ=Once!] n_s2v7C [Occ=Once!] ->
              case m_s2v7B of {
                GHC.Word.W16# x_s2v7E ->
                    case eta1_s2v7z of {
                      GHC.Word.W16# y_s2v7G ->
                          case leWord# [x_s2v7E y_s2v7G] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s2v7C of {
                                  GHC.Word.W16# y1_s2v7J [Occ=Once] ->
                                      case leWord# [y_s2v7G y1_s2v7J] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case minusWord# [y_s2v7G x_s2v7E] of sat_s2v7L {
                                              __DEFAULT ->
                                                  case narrow16Word# [sat_s2v7L] of sat_s2v7M {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s2v7M] of sat_s2v7N {
                                                          __DEFAULT -> GHC.Types.I# [sat_s2v7N];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Word.$fOrdWord16
                                 GHC.Word.$fIxWord16_$crange
                                 GHC.Word.$fIxWord16_$cindex
                                 GHC.Word.$fIxWord16_$cunsafeIndex
                                 GHC.Word.$fIxWord16_$cinRange
                                 GHC.Word.$fIxWord16_$crangeSize
                                 GHC.Word.$fIxWord16_$cunsafeRangeSize];

GHC.Word.byteSwap16 :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v7O]
        case ds_s2v7O of {
          GHC.Word.W16# w#_s2v7Q [Occ=Once] ->
              case byteSwap16# [w#_s2v7Q] of sat_s2v7R {
                __DEFAULT ->
                    case narrow16Word# [sat_s2v7R] of sat_s2v7S {
                      __DEFAULT -> GHC.Word.W16# [sat_s2v7S];
                    };
              };
        };

GHC.Word.eqWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v7T ds1_s2v7U]
        case ds_s2v7T of {
          GHC.Word.W32# x_s2v7W [Occ=Once] ->
              case ds1_s2v7U of {
                GHC.Word.W32# y_s2v7Y [Occ=Once] ->
                    case eqWord# [x_s2v7W y_s2v7Y] of sat_s2v7Z {
                      __DEFAULT -> tagToEnum# [sat_s2v7Z];
                    };
              };
        };

GHC.Word.$fEqWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Word.eqWord32
                                     GHC.Word.neWord32];

GHC.Word.$fNumWord2 :: GHC.Word.Word32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W32#! [1##];

GHC.Word.$fNumWord32_$csignum :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v80]
        case ds_s2v80 of {
          GHC.Word.W32# x_s2v82 [Occ=Once!] ->
              case x_s2v82 of {
                __DEFAULT -> GHC.Word.$fNumWord2;
                0## -> GHC.Word.$fBitsWord32_$cminBound;
              };
        };

GHC.Word.$fNumWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Word.$fNumWord32_$c+
                                  GHC.Word.$fNumWord32_$c-
                                  GHC.Word.$fNumWord32_$c*
                                  GHC.Word.$fNumWord32_$cnegate
                                  GHC.Word.$fNumWord32_$cabs
                                  GHC.Word.$fNumWord32_$csignum
                                  GHC.Word.$fNumWord32_$cfromInteger];

GHC.Word.$fBitsWord32_$ccomplement
  :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v84]
        case ds_s2v84 of {
          GHC.Word.W32# x#_s2v86 [Occ=Once] ->
              case xor# [x#_s2v86 4294967295##] of sat_s2v87 {
                __DEFAULT -> GHC.Word.W32# [sat_s2v87];
              };
        };

GHC.Word.$fBitsWord4 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Word.$fBitsWord3];

GHC.Word.$fBitsWord32_$cbitSizeMaybe
  :: GHC.Word.Word32 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s2v88] GHC.Word.$fBitsWord4;

GHC.Word.$fBitsWord32_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s2v89]
        case i_s2v89 of {
          GHC.Types.I# i#_s2v8b ->
              case >=# [i#_s2v8b 64#] of {
                __DEFAULT ->
                    case uncheckedShiftL# [1## i#_s2v8b] of sat_s2v8d {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2v8d] of sat_s2v8e {
                            __DEFAULT -> GHC.Word.W32# [sat_s2v8e];
                          };
                    };
                1# -> GHC.Word.$fBitsWord32_$cminBound;
              };
        };

GHC.Word.$fBitsWord32_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2v8f i_s2v8g]
        case x_s2v8f of {
          GHC.Word.W32# x#_s2v8i [Occ=Once] ->
              case i_s2v8g of {
                GHC.Types.I# i#_s2v8k ->
                    case >=# [i#_s2v8k 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v8k] of sat_s2v8m {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2v8m] of sat_s2v8n {
                                  __DEFAULT ->
                                      case and# [x#_s2v8i sat_s2v8n] of {
                                        __DEFAULT -> GHC.Types.True [];
                                        0## -> GHC.Types.False [];
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Word.$fBitsWord32_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v8p eta1_s2v8q]
        case eta_s2v8p of wild_s2v8r {
          GHC.Word.W32# x#_s2v8s ->
              case eta1_s2v8q of {
                GHC.Types.I# x1_s2v8u [Occ=Once] ->
                    case negateInt# [x1_s2v8u] of sat_s2v8v {
                      __DEFAULT ->
                          case int2Word# [sat_s2v8v] of sat_s2v8w {
                            __DEFAULT ->
                                case and# [sat_s2v8w 31##] of sat_s2v8x {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2v8x] of wild2_s2v8y {
                                        __DEFAULT ->
                                            case -# [32# wild2_s2v8y] of sat_s2v8A {
                                              __DEFAULT ->
                                                  case
                                                      uncheckedShiftRL# [x#_s2v8s sat_s2v8A]
                                                  of
                                                  sat_s2v8B
                                                  { __DEFAULT ->
                                                        case
                                                            uncheckedShiftL# [x#_s2v8s wild2_s2v8y]
                                                        of
                                                        sat_s2v8z
                                                        { __DEFAULT ->
                                                              case
                                                                  or# [sat_s2v8z sat_s2v8B]
                                                              of
                                                              sat_s2v8C
                                                              { __DEFAULT ->
                                                                    case
                                                                        narrow32Word# [sat_s2v8C]
                                                                    of
                                                                    sat_s2v8D
                                                                    { __DEFAULT ->
                                                                          GHC.Word.W32# [sat_s2v8D];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s2v8r;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord32_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v8E eta1_s2v8F]
        case eta_s2v8E of wild_s2v8G {
          GHC.Word.W32# x#_s2v8H [Occ=Once] ->
              case eta1_s2v8F of {
                GHC.Types.I# i#_s2v8J ->
                    case >=# [i#_s2v8J 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v8J] of sat_s2v8L {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2v8L] of sat_s2v8M {
                                  __DEFAULT ->
                                      case xor# [x#_s2v8H sat_s2v8M] of sat_s2v8N {
                                        __DEFAULT -> GHC.Word.W32# [sat_s2v8N];
                                      };
                                };
                          };
                      1# -> wild_s2v8G;
                    };
              };
        };

GHC.Word.$fBitsWord32_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v8O eta1_s2v8P]
        case eta_s2v8O of {
          GHC.Word.W32# x#_s2v8R [Occ=Once*] ->
              case eta1_s2v8P of {
                GHC.Types.I# i#_s2v8T ->
                    case >=# [i#_s2v8T 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v8T] of sat_s2v8V {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2v8V] of sat_s2v8W {
                                  __DEFAULT ->
                                      case xor# [sat_s2v8W 4294967295##] of sat_s2v8X {
                                        __DEFAULT ->
                                            case and# [x#_s2v8R sat_s2v8X] of sat_s2v8Y {
                                              __DEFAULT -> GHC.Word.W32# [sat_s2v8Y];
                                            };
                                      };
                                };
                          };
                      1# ->
                          case and# [x#_s2v8R 4294967295##] of sat_s2v8Z {
                            __DEFAULT -> GHC.Word.W32# [sat_s2v8Z];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord32_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2v90 eta1_s2v91]
        case eta_s2v90 of wild_s2v92 {
          GHC.Word.W32# x#_s2v93 [Occ=Once] ->
              case eta1_s2v91 of {
                GHC.Types.I# i#_s2v95 ->
                    case >=# [i#_s2v95 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2v95] of sat_s2v97 {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2v97] of sat_s2v98 {
                                  __DEFAULT ->
                                      case or# [x#_s2v93 sat_s2v98] of sat_s2v99 {
                                        __DEFAULT -> GHC.Word.W32# [sat_s2v99];
                                      };
                                };
                          };
                      1# -> wild_s2v92;
                    };
              };
        };

GHC.Word.$fBitsWord32_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Word.$fBitsWord32_$crotate eta_B2 eta_B1;

GHC.Word.$fBitsWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Word.$fEqWord32
                                     GHC.Word.$fBitsWord32_$c.&.
                                     GHC.Word.$fBitsWord32_$c.|.
                                     GHC.Word.$fBitsWord32_$cxor
                                     GHC.Word.$fBitsWord32_$ccomplement
                                     GHC.Word.$fBitsWord32_$cshift
                                     GHC.Word.$fBitsWord32_$crotate
                                     GHC.Word.$fBitsWord32_$cminBound
                                     GHC.Word.$fBitsWord32_$cbit
                                     GHC.Word.$fBitsWord32_$csetBit
                                     GHC.Word.$fBitsWord32_$cclearBit
                                     GHC.Word.$fBitsWord32_$ccomplementBit
                                     GHC.Word.$fBitsWord32_$ctestBit
                                     GHC.Word.$fBitsWord32_$cbitSizeMaybe
                                     GHC.Word.$fBitsWord32_$cfiniteBitSize
                                     GHC.Word.$fBitsWord32_$cisSigned
                                     GHC.Word.$fBitsWord32_$cshiftL
                                     GHC.Word.$fBitsWord32_$cunsafeShiftL
                                     GHC.Word.$fBitsWord32_$cshiftR
                                     GHC.Word.$fBitsWord32_$cunsafeShiftR
                                     GHC.Word.$fBitsWord32_$crotateL
                                     GHC.Word.$fBitsWord32_$crotateR
                                     GHC.Word.$fBitsWord32_$cpopCount];

GHC.Word.$fFiniteBitsWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Word.$fBitsWord32
                                           GHC.Word.$fBitsWord32_$cfiniteBitSize
                                           GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros
                                           GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros];

GHC.Word.$fIntegralWord32_$cquot
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v9a y_s2v9b]
        case ds_s2v9a of {
          GHC.Word.W32# x#_s2v9d [Occ=Once] ->
              case y_s2v9b of {
                GHC.Word.W32# y#_s2v9f [Occ=Once!] ->
                    case y#_s2v9f of wild2_s2v9g {
                      __DEFAULT ->
                          case quotWord# [x#_s2v9d wild2_s2v9g] of wild3_s2v9h {
                            __DEFAULT -> GHC.Word.W32# [wild3_s2v9h];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord32_$crem
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v9i y_s2v9j]
        case ds_s2v9i of {
          GHC.Word.W32# x#_s2v9l [Occ=Once] ->
              case y_s2v9j of {
                GHC.Word.W32# y#_s2v9n [Occ=Once!] ->
                    case y#_s2v9n of wild2_s2v9o {
                      __DEFAULT ->
                          case remWord# [x#_s2v9l wild2_s2v9o] of wild3_s2v9p {
                            __DEFAULT -> GHC.Word.W32# [wild3_s2v9p];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord32_$cquotRem
  :: GHC.Word.Word32
     -> GHC.Word.Word32 -> (GHC.Word.Word32, GHC.Word.Word32)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2v9q y_s2v9r]
        case ds_s2v9q of {
          GHC.Word.W32# x#_s2v9t [Occ=Once] ->
              case y_s2v9r of {
                GHC.Word.W32# y#_s2v9v [Occ=Once!] ->
                    case y#_s2v9v of wild2_s2v9w {
                      __DEFAULT ->
                          case quotRemWord# [x#_s2v9t wild2_s2v9w] of {
                            (#,#) ipv_s2v9y [Occ=Once] ipv1_s2v9z [Occ=Once] ->
                                let {
                                  sat_s2v9B [Occ=Once] :: GHC.Word.Word32
                                  [LclId] =
                                      CCCS GHC.Word.W32#! [ipv1_s2v9z]; } in
                                let {
                                  sat_s2v9A [Occ=Once] :: GHC.Word.Word32
                                  [LclId] =
                                      CCCS GHC.Word.W32#! [ipv_s2v9y];
                                } in  (,) [sat_s2v9A sat_s2v9B];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord32_$cdivMod
  :: GHC.Word.Word32
     -> GHC.Word.Word32 -> (GHC.Word.Word32, GHC.Word.Word32)
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s2v9C y_s2v9D]
        case ds_s2v9C of {
          GHC.Word.W32# x#_s2v9F ->
              case y_s2v9D of {
                GHC.Word.W32# y#_s2v9H [Occ=Once!] ->
                    case y#_s2v9H of wild2_s2v9I {
                      __DEFAULT ->
                          let {
                            sat_s2v9M [Occ=Once] :: GHC.Word.Word32
                            [LclId] =
                                [x#_s2v9F wild2_s2v9I] \u []
                                    case remWord# [x#_s2v9F wild2_s2v9I] of wild3_s2v9L {
                                      __DEFAULT -> GHC.Word.W32# [wild3_s2v9L];
                                    }; } in
                          let {
                            sat_s2v9K [Occ=Once] :: GHC.Word.Word32
                            [LclId] =
                                [x#_s2v9F wild2_s2v9I] \u []
                                    case quotWord# [x#_s2v9F wild2_s2v9I] of wild3_s2v9J {
                                      __DEFAULT -> GHC.Word.W32# [wild3_s2v9J];
                                    };
                          } in  (,) [sat_s2v9K sat_s2v9M];
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.gtWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v9N ds1_s2v9O]
        case ds_s2v9N of {
          GHC.Word.W32# x_s2v9Q [Occ=Once] ->
              case ds1_s2v9O of {
                GHC.Word.W32# y_s2v9S [Occ=Once] ->
                    case gtWord# [x_s2v9Q y_s2v9S] of sat_s2v9T {
                      __DEFAULT -> tagToEnum# [sat_s2v9T];
                    };
              };
        };

GHC.Word.geWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2v9U ds1_s2v9V]
        case ds_s2v9U of {
          GHC.Word.W32# x_s2v9X [Occ=Once] ->
              case ds1_s2v9V of {
                GHC.Word.W32# y_s2v9Z [Occ=Once] ->
                    case geWord# [x_s2v9X y_s2v9Z] of sat_s2va0 {
                      __DEFAULT -> tagToEnum# [sat_s2va0];
                    };
              };
        };

GHC.Word.ltWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2va1 ds1_s2va2]
        case ds_s2va1 of {
          GHC.Word.W32# x_s2va4 [Occ=Once] ->
              case ds1_s2va2 of {
                GHC.Word.W32# y_s2va6 [Occ=Once] ->
                    case ltWord# [x_s2va4 y_s2va6] of sat_s2va7 {
                      __DEFAULT -> tagToEnum# [sat_s2va7];
                    };
              };
        };

GHC.Word.leWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2va8 ds1_s2va9]
        case ds_s2va8 of {
          GHC.Word.W32# x_s2vab [Occ=Once] ->
              case ds1_s2va9 of {
                GHC.Word.W32# y_s2vad [Occ=Once] ->
                    case leWord# [x_s2vab y_s2vad] of sat_s2vae {
                      __DEFAULT -> tagToEnum# [sat_s2vae];
                    };
              };
        };

GHC.Word.$fOrdWord32_$ccompare
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2vaf y_s2vag]
        case x_s2vaf of {
          GHC.Word.W32# x1_s2vai ->
              case y_s2vag of {
                GHC.Word.W32# y1_s2vak ->
                    case eqWord# [x1_s2vai y1_s2vak] of {
                      __DEFAULT ->
                          case leWord# [x1_s2vai y1_s2vak] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Word.$fOrdWord32_$cmax
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2van y_s2vao]
        case x_s2van of wild_s2vap {
          GHC.Word.W32# x1_s2vaq [Occ=Once] ->
              case y_s2vao of wild1_s2var {
                GHC.Word.W32# y1_s2vas [Occ=Once] ->
                    case leWord# [x1_s2vaq y1_s2vas] of {
                      __DEFAULT -> wild_s2vap;
                      1# -> wild1_s2var;
                    };
              };
        };

GHC.Word.$fOrdWord32_$cmin
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2vau y_s2vav]
        case x_s2vau of wild_s2vaw {
          GHC.Word.W32# x1_s2vax [Occ=Once] ->
              case y_s2vav of wild1_s2vay {
                GHC.Word.W32# y1_s2vaz [Occ=Once] ->
                    case leWord# [x1_s2vax y1_s2vaz] of {
                      __DEFAULT -> wild1_s2vay;
                      1# -> wild_s2vaw;
                    };
              };
        };

GHC.Word.$fOrdWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Word.$fEqWord32
                                      GHC.Word.$fOrdWord32_$ccompare
                                      GHC.Word.ltWord32
                                      GHC.Word.leWord32
                                      GHC.Word.gtWord32
                                      GHC.Word.geWord32
                                      GHC.Word.$fOrdWord32_$cmax
                                      GHC.Word.$fOrdWord32_$cmin];

GHC.Word.$fIxWord32_$cinRange
  :: (GHC.Word.Word32, GHC.Word.Word32)
     -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2vaB i_s2vaC]
        case ds_s2vaB of {
          (,) m_s2vaE [Occ=Once!] n_s2vaF [Occ=Once!] ->
              case m_s2vaE of {
                GHC.Word.W32# x_s2vaH [Occ=Once] ->
                    case i_s2vaC of {
                      GHC.Word.W32# y_s2vaJ ->
                          case leWord# [x_s2vaH y_s2vaJ] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s2vaF of {
                                  GHC.Word.W32# y1_s2vaM [Occ=Once] ->
                                      case leWord# [y_s2vaJ y1_s2vaM] of sat_s2vaN {
                                        __DEFAULT -> tagToEnum# [sat_s2vaN];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord32_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word32 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2vaO]
        case w_s2vaO of {
          GHC.Word.W32# ww1_s2vaQ [Occ=Once] ->
              case word2Int# [ww1_s2vaQ] of sat_s2vaR {
                __DEFAULT ->
                    case GHC.Integer.Type.smallInteger sat_s2vaR of sat_s2vaS {
                      __DEFAULT ->
                          case
                              GHC.Integer.Type.timesInteger sat_s2vaS GHC.Word.$fRealWord1
                          of
                          sat_s2vaT
                          { __DEFAULT ->
                                case GHC.Real.$w$sreduce sat_s2vaT GHC.Word.$fRealWord1 of {
                                  (#,#) ww3_s2vaV [Occ=Once] ww4_s2vaW [Occ=Once] ->
                                      GHC.Real.:% [ww3_s2vaV ww4_s2vaW];
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Word.$fNumWord32
                                    GHC.Word.$fOrdWord32
                                    GHC.Word.$fRealWord32_$ctoRational];

GHC.Word.$fIntegralWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Word.$fRealWord32
                                        GHC.Word.$fEnumWord32
                                        GHC.Word.$fIntegralWord32_$cquot
                                        GHC.Word.$fIntegralWord32_$crem
                                        GHC.Word.$fIntegralWord32_$cquot
                                        GHC.Word.$fIntegralWord32_$crem
                                        GHC.Word.$fIntegralWord32_$cquotRem
                                        GHC.Word.$fIntegralWord32_$cdivMod
                                        GHC.Word.$ctoInteger2];

GHC.Word.$fIxWord32_$cunsafeIndex
  :: (GHC.Word.Word32, GHC.Word.Word32)
     -> GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2vaX i_s2vaY]
        case ds_s2vaX of {
          (,) m_s2vb0 [Occ=Once!] _ [Occ=Dead] ->
              case i_s2vaY of {
                GHC.Word.W32# x#_s2vb3 [Occ=Once] ->
                    case m_s2vb0 of {
                      GHC.Word.W32# y#_s2vb5 [Occ=Once] ->
                          case minusWord# [x#_s2vb3 y#_s2vb5] of sat_s2vb6 {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2vb6] of sat_s2vb7 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2vb7] of sat_s2vb8 {
                                        __DEFAULT -> GHC.Types.I# [sat_s2vb8];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord32_$crange
  :: (GHC.Word.Word32, GHC.Word.Word32) -> [GHC.Word.Word32]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s2vb9]
        case ds_s2vb9 of {
          (,) m_s2vbb [Occ=Once] n_s2vbc [Occ=Once] ->
              GHC.Word.$fEnumWord32_$cenumFromTo m_s2vbb n_s2vbc;
        };

GHC.Word.$fIxWord32_$crangeSize
  :: (GHC.Word.Word32, GHC.Word.Word32) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2vbd]
        case b_s2vbd of {
          (,) _l_s2vbf [Occ=Once!] h_s2vbg [Occ=Once!] ->
              case _l_s2vbf of {
                GHC.Word.W32# x_s2vbi ->
                    case h_s2vbg of {
                      GHC.Word.W32# y_s2vbk ->
                          case leWord# [x_s2vbi y_s2vbk] of {
                            __DEFAULT -> GHC.Word.$fIxWord1;
                            1# ->
                                case minusWord# [y_s2vbk x_s2vbi] of sat_s2vbm {
                                  __DEFAULT ->
                                      case narrow32Word# [sat_s2vbm] of sat_s2vbn {
                                        __DEFAULT ->
                                            case word2Int# [sat_s2vbn] of sat_s2vbo {
                                              __DEFAULT ->
                                                  case +# [sat_s2vbo 1#] of sat_s2vbp {
                                                    __DEFAULT -> GHC.Types.I# [sat_s2vbp];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord32_$cunsafeRangeSize
  :: (GHC.Word.Word32, GHC.Word.Word32) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2vbq]
        case b_s2vbq of {
          (,) _l_s2vbs [Occ=Once!] h_s2vbt [Occ=Once!] ->
              case h_s2vbt of {
                GHC.Word.W32# x#_s2vbv [Occ=Once] ->
                    case _l_s2vbs of {
                      GHC.Word.W32# y#_s2vbx [Occ=Once] ->
                          case minusWord# [x#_s2vbv y#_s2vbx] of sat_s2vby {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2vby] of sat_s2vbz {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2vbz] of sat_s2vbA {
                                        __DEFAULT ->
                                            case +# [sat_s2vbA 1#] of sat_s2vbB {
                                              __DEFAULT -> GHC.Types.I# [sat_s2vbB];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord32_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Word.Word32, GHC.Word.Word32)
     -> GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2vbC eta1_s2vbD]
        case eta_s2vbC of {
          (,) m_s2vbF [Occ=Once!] n_s2vbG [Occ=Once!] ->
              case m_s2vbF of {
                GHC.Word.W32# x_s2vbI ->
                    case eta1_s2vbD of {
                      GHC.Word.W32# y_s2vbK ->
                          case leWord# [x_s2vbI y_s2vbK] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s2vbG of {
                                  GHC.Word.W32# y1_s2vbN [Occ=Once] ->
                                      case leWord# [y_s2vbK y1_s2vbN] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case minusWord# [y_s2vbK x_s2vbI] of sat_s2vbP {
                                              __DEFAULT ->
                                                  case narrow32Word# [sat_s2vbP] of sat_s2vbQ {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s2vbQ] of sat_s2vbR {
                                                          __DEFAULT -> GHC.Types.I# [sat_s2vbR];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Word.$fOrdWord32
                                 GHC.Word.$fIxWord32_$crange
                                 GHC.Word.$fIxWord32_$cindex
                                 GHC.Word.$fIxWord32_$cunsafeIndex
                                 GHC.Word.$fIxWord32_$cinRange
                                 GHC.Word.$fIxWord32_$crangeSize
                                 GHC.Word.$fIxWord32_$cunsafeRangeSize];

GHC.Word.byteSwap32 :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2vbS]
        case ds_s2vbS of {
          GHC.Word.W32# w#_s2vbU [Occ=Once] ->
              case byteSwap32# [w#_s2vbU] of sat_s2vbV {
                __DEFAULT ->
                    case narrow32Word# [sat_s2vbV] of sat_s2vbW {
                      __DEFAULT -> GHC.Word.W32# [sat_s2vbW];
                    };
              };
        };

GHC.Word.$fBitsWord64_$ccomplement
  :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2vbX]
        case ds_s2vbX of {
          GHC.Word.W64# x#_s2vbZ [Occ=Once] ->
              case xor# [x#_s2vbZ 18446744073709551615##] of sat_s2vc0 {
                __DEFAULT -> GHC.Word.W64# [sat_s2vc0];
              };
        };

GHC.Word.$fBitsWord6 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Word.$fBitsWord5];

GHC.Word.$fBitsWord64_$cbitSizeMaybe
  :: GHC.Word.Word64 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s2vc1] GHC.Word.$fBitsWord6;

GHC.Word.$fBitsWord64_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s2vc2]
        case i_s2vc2 of {
          GHC.Types.I# i#_s2vc4 ->
              case >=# [i#_s2vc4 64#] of {
                __DEFAULT ->
                    case uncheckedShiftL# [1## i#_s2vc4] of sat_s2vc6 {
                      __DEFAULT -> GHC.Word.W64# [sat_s2vc6];
                    };
                1# -> GHC.Word.$fBitsWord7;
              };
        };

GHC.Word.$fBitsWord64_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2vc7 i_s2vc8]
        case x_s2vc7 of {
          GHC.Word.W64# x#_s2vca [Occ=Once] ->
              case i_s2vc8 of {
                GHC.Types.I# i#_s2vcc ->
                    case >=# [i#_s2vcc 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2vcc] of sat_s2vce {
                            __DEFAULT ->
                                case and# [x#_s2vca sat_s2vce] of {
                                  __DEFAULT -> GHC.Types.True [];
                                  0## -> GHC.Types.False [];
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Word.$fBitsWord64_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2vcg eta1_s2vch]
        case eta_s2vcg of wild_s2vci {
          GHC.Word.W64# x#_s2vcj ->
              case eta1_s2vch of {
                GHC.Types.I# x1_s2vcl [Occ=Once] ->
                    case negateInt# [x1_s2vcl] of sat_s2vcm {
                      __DEFAULT ->
                          case int2Word# [sat_s2vcm] of sat_s2vcn {
                            __DEFAULT ->
                                case and# [sat_s2vcn 63##] of sat_s2vco {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2vco] of wild2_s2vcp {
                                        __DEFAULT ->
                                            case -# [64# wild2_s2vcp] of sat_s2vcr {
                                              __DEFAULT ->
                                                  case
                                                      uncheckedShiftRL# [x#_s2vcj sat_s2vcr]
                                                  of
                                                  sat_s2vcs
                                                  { __DEFAULT ->
                                                        case
                                                            uncheckedShiftL# [x#_s2vcj wild2_s2vcp]
                                                        of
                                                        sat_s2vcq
                                                        { __DEFAULT ->
                                                              case
                                                                  or# [sat_s2vcq sat_s2vcs]
                                                              of
                                                              sat_s2vct
                                                              { __DEFAULT ->
                                                                    GHC.Word.W64# [sat_s2vct];
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s2vci;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord64_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2vcu eta1_s2vcv]
        case eta_s2vcu of wild_s2vcw {
          GHC.Word.W64# x#_s2vcx [Occ=Once] ->
              case eta1_s2vcv of {
                GHC.Types.I# i#_s2vcz ->
                    case >=# [i#_s2vcz 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2vcz] of sat_s2vcB {
                            __DEFAULT ->
                                case xor# [x#_s2vcx sat_s2vcB] of sat_s2vcC {
                                  __DEFAULT -> GHC.Word.W64# [sat_s2vcC];
                                };
                          };
                      1# -> wild_s2vcw;
                    };
              };
        };

GHC.Word.$fBitsWord64_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2vcD eta1_s2vcE]
        case eta_s2vcD of {
          GHC.Word.W64# x#_s2vcG [Occ=Once*] ->
              case eta1_s2vcE of {
                GHC.Types.I# i#_s2vcI ->
                    case >=# [i#_s2vcI 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2vcI] of sat_s2vcK {
                            __DEFAULT ->
                                case xor# [sat_s2vcK 18446744073709551615##] of sat_s2vcL {
                                  __DEFAULT ->
                                      case and# [x#_s2vcG sat_s2vcL] of sat_s2vcM {
                                        __DEFAULT -> GHC.Word.W64# [sat_s2vcM];
                                      };
                                };
                          };
                      1# ->
                          case and# [x#_s2vcG 18446744073709551615##] of sat_s2vcN {
                            __DEFAULT -> GHC.Word.W64# [sat_s2vcN];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord64_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2vcO eta1_s2vcP]
        case eta_s2vcO of wild_s2vcQ {
          GHC.Word.W64# x#_s2vcR [Occ=Once] ->
              case eta1_s2vcP of {
                GHC.Types.I# i#_s2vcT ->
                    case >=# [i#_s2vcT 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2vcT] of sat_s2vcV {
                            __DEFAULT ->
                                case or# [x#_s2vcR sat_s2vcV] of sat_s2vcW {
                                  __DEFAULT -> GHC.Word.W64# [sat_s2vcW];
                                };
                          };
                      1# -> wild_s2vcQ;
                    };
              };
        };

GHC.Word.$fBitsWord64_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Word.$fBitsWord64_$crotate eta_B2 eta_B1;

GHC.Word.$fBitsWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Word.$fEqWord64
                                     GHC.Word.$fBitsWord64_$c.&.
                                     GHC.Word.$fBitsWord64_$c.|.
                                     GHC.Word.$fBitsWord64_$cxor
                                     GHC.Word.$fBitsWord64_$ccomplement
                                     GHC.Word.$fBitsWord64_$cshift
                                     GHC.Word.$fBitsWord64_$crotate
                                     GHC.Word.$fBitsWord7
                                     GHC.Word.$fBitsWord64_$cbit
                                     GHC.Word.$fBitsWord64_$csetBit
                                     GHC.Word.$fBitsWord64_$cclearBit
                                     GHC.Word.$fBitsWord64_$ccomplementBit
                                     GHC.Word.$fBitsWord64_$ctestBit
                                     GHC.Word.$fBitsWord64_$cbitSizeMaybe
                                     GHC.Word.$fBitsWord64_$cfiniteBitSize
                                     GHC.Word.$fBitsWord64_$cisSigned
                                     GHC.Word.$fBitsWord64_$cshiftL
                                     GHC.Word.$fBitsWord64_$cunsafeShiftL
                                     GHC.Word.$fBitsWord64_$cshiftR
                                     GHC.Word.$fBitsWord64_$cunsafeShiftR
                                     GHC.Word.$fBitsWord64_$crotateL
                                     GHC.Word.$fBitsWord64_$crotateR
                                     GHC.Word.$fBitsWord64_$cpopCount];

GHC.Word.$fFiniteBitsWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Word.$fBitsWord64
                                           GHC.Word.$fBitsWord64_$cfiniteBitSize
                                           GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                                           GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros];

GHC.Word.$fIxWord64_$cinRange
  :: (GHC.Word.Word64, GHC.Word.Word64)
     -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2vcX i_s2vcY]
        case ds_s2vcX of {
          (,) m_s2vd0 [Occ=Once!] n_s2vd1 [Occ=Once!] ->
              case m_s2vd0 of {
                GHC.Word.W64# x_s2vd3 [Occ=Once] ->
                    case i_s2vcY of {
                      GHC.Word.W64# y_s2vd5 ->
                          case leWord# [x_s2vd3 y_s2vd5] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s2vd1 of {
                                  GHC.Word.W64# y1_s2vd8 [Occ=Once] ->
                                      case leWord# [y_s2vd5 y1_s2vd8] of sat_s2vd9 {
                                        __DEFAULT -> tagToEnum# [sat_s2vd9];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord64_$crange
  :: (GHC.Word.Word64, GHC.Word.Word64) -> [GHC.Word.Word64]
[GblId, Arity=1, Str=<S,1*U(U,U)>, Unf=OtherCon []] =
    [] \r [ds_s2vda]
        case ds_s2vda of {
          (,) m_s2vdc [Occ=Once] n_s2vdd [Occ=Once] ->
              GHC.Word.$fEnumWord64_$cenumFromTo m_s2vdc n_s2vdd;
        };

GHC.Word.$fIxWord64_$cunsafeIndex
  :: (GHC.Word.Word64, GHC.Word.Word64)
     -> GHC.Word.Word64 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2vde i_s2vdf]
        case ds_s2vde of {
          (,) m_s2vdh [Occ=Once!] _ [Occ=Dead] ->
              case i_s2vdf of {
                GHC.Word.W64# x#_s2vdk [Occ=Once] ->
                    case m_s2vdh of {
                      GHC.Word.W64# y#_s2vdm [Occ=Once] ->
                          case minusWord# [x#_s2vdk y#_s2vdm] of sat_s2vdn {
                            __DEFAULT ->
                                case word2Int# [sat_s2vdn] of sat_s2vdo {
                                  __DEFAULT -> GHC.Types.I# [sat_s2vdo];
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord64_$crangeSize
  :: (GHC.Word.Word64, GHC.Word.Word64) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2vdp]
        case b_s2vdp of {
          (,) _l_s2vdr [Occ=Once!] h_s2vds [Occ=Once!] ->
              case _l_s2vdr of {
                GHC.Word.W64# x_s2vdu ->
                    case h_s2vds of {
                      GHC.Word.W64# y_s2vdw ->
                          case leWord# [x_s2vdu y_s2vdw] of {
                            __DEFAULT -> GHC.Word.$fIxWord1;
                            1# ->
                                case minusWord# [y_s2vdw x_s2vdu] of sat_s2vdy {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2vdy] of sat_s2vdz {
                                        __DEFAULT ->
                                            case +# [sat_s2vdz 1#] of sat_s2vdA {
                                              __DEFAULT -> GHC.Types.I# [sat_s2vdA];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord64_$cunsafeRangeSize
  :: (GHC.Word.Word64, GHC.Word.Word64) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2vdB]
        case b_s2vdB of {
          (,) _l_s2vdD [Occ=Once!] h_s2vdE [Occ=Once!] ->
              case h_s2vdE of {
                GHC.Word.W64# x#_s2vdG [Occ=Once] ->
                    case _l_s2vdD of {
                      GHC.Word.W64# y#_s2vdI [Occ=Once] ->
                          case minusWord# [x#_s2vdG y#_s2vdI] of sat_s2vdJ {
                            __DEFAULT ->
                                case word2Int# [sat_s2vdJ] of sat_s2vdK {
                                  __DEFAULT ->
                                      case +# [sat_s2vdK 1#] of sat_s2vdL {
                                        __DEFAULT -> GHC.Types.I# [sat_s2vdL];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord64_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Word.Word64, GHC.Word.Word64)
     -> GHC.Word.Word64 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2vdM eta1_s2vdN]
        case eta_s2vdM of {
          (,) m_s2vdP [Occ=Once!] n_s2vdQ [Occ=Once!] ->
              case m_s2vdP of {
                GHC.Word.W64# x_s2vdS ->
                    case eta1_s2vdN of {
                      GHC.Word.W64# y_s2vdU ->
                          case leWord# [x_s2vdS y_s2vdU] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s2vdQ of {
                                  GHC.Word.W64# y1_s2vdX [Occ=Once] ->
                                      case leWord# [y_s2vdU y1_s2vdX] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case minusWord# [y_s2vdU x_s2vdS] of sat_s2vdZ {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s2vdZ] of sat_s2ve0 {
                                                    __DEFAULT -> GHC.Types.I# [sat_s2ve0];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Word.$fOrdWord64
                                 GHC.Word.$fIxWord64_$crange
                                 GHC.Word.$fIxWord64_$cindex
                                 GHC.Word.$fIxWord64_$cunsafeIndex
                                 GHC.Word.$fIxWord64_$cinRange
                                 GHC.Word.$fIxWord64_$crangeSize
                                 GHC.Word.$fIxWord64_$cunsafeRangeSize];

GHC.Word.uncheckedShiftL64#
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedShiftL# [eta_B2 eta_B1];

GHC.Word.uncheckedShiftRL64#
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedShiftRL# [eta_B2 eta_B1];

GHC.Word.byteSwap64 :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2ve1]
        case ds_s2ve1 of {
          GHC.Word.W64# w#_s2ve3 [Occ=Once] ->
              case byteSwap# [w#_s2ve3] of sat_s2ve4 {
                __DEFAULT -> GHC.Word.W64# [sat_s2ve4];
              };
        };

GHC.Word.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Word.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$trModule4];

GHC.Word.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Word"#;

GHC.Word.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$trModule2];

GHC.Word.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Word.$trModule3
                                     GHC.Word.$trModule1];

$krep_r2uFN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWord#
                                              GHC.Types.[]];

GHC.Word.$tcWord7 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tcWord9];

GHC.Word.$tcWord8 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2052113150978616866##
                                    10393726928463219846##
                                    GHC.Word.$trModule
                                    GHC.Word.$tcWord7
                                    0#
                                    GHC.Types.krep$*];

$krep1_r2uFO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord8
                                              GHC.Types.[]];

GHC.Word.$tc'W8#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r2uFN $krep1_r2uFO];

GHC.Word.$tc'W8#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'W8#"#;

GHC.Word.$tc'W8#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tc'W8#3];

GHC.Word.$tc'W8# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12964227823649101302##
                                    11115249754126507208##
                                    GHC.Word.$trModule
                                    GHC.Word.$tc'W8#2
                                    0#
                                    GHC.Word.$tc'W8#1];

GHC.Word.$tcWord1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tcWord2];

GHC.Word.$tcWord16 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1884349046328127494##
                                    12602100146125136909##
                                    GHC.Word.$trModule
                                    GHC.Word.$tcWord1
                                    0#
                                    GHC.Types.krep$*];

$krep2_r2uFP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord16
                                              GHC.Types.[]];

GHC.Word.$tc'W16#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r2uFN $krep2_r2uFP];

GHC.Word.$tc'W16#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'W16#"#;

GHC.Word.$tc'W16#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tc'W16#3];

GHC.Word.$tc'W16# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13828125037659739325##
                                    16689402625363715300##
                                    GHC.Word.$trModule
                                    GHC.Word.$tc'W16#2
                                    0#
                                    GHC.Word.$tc'W16#1];

GHC.Word.$tcWord3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tcWord4];

GHC.Word.$tcWord32 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3293767376230595825##
                                    2424786049275339072##
                                    GHC.Word.$trModule
                                    GHC.Word.$tcWord3
                                    0#
                                    GHC.Types.krep$*];

$krep3_r2uFQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord32
                                              GHC.Types.[]];

GHC.Word.$tc'W32#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r2uFN $krep3_r2uFQ];

GHC.Word.$tc'W32#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'W32#"#;

GHC.Word.$tc'W32#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tc'W32#3];

GHC.Word.$tc'W32# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15609358257729636621##
                                    4567728021977807739##
                                    GHC.Word.$trModule
                                    GHC.Word.$tc'W32#2
                                    0#
                                    GHC.Word.$tc'W32#1];

GHC.Word.$tcWord5 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tcWord6];

GHC.Word.$tcWord64 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3342358330123258062##
                                    10610880953247303810##
                                    GHC.Word.$trModule
                                    GHC.Word.$tcWord5
                                    0#
                                    GHC.Types.krep$*];

$krep4_r2uFR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord64
                                              GHC.Types.[]];

GHC.Word.$tc'W64#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r2uFN $krep4_r2uFR];

GHC.Word.$tc'W64#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'W64#"#;

GHC.Word.$tc'W64#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tc'W64#3];

GHC.Word.$tc'W64# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3390197976568817661##
                                    1176743391454549598##
                                    GHC.Word.$trModule
                                    GHC.Word.$tc'W64#2
                                    0#
                                    GHC.Word.$tc'W64#1];

GHC.Word.W8# :: GHC.Prim.Word# -> GHC.Word.Word8
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Word.W8# [eta_B1];

GHC.Word.W16# :: GHC.Prim.Word# -> GHC.Word.Word16
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Word.W16# [eta_B1];

GHC.Word.W32# :: GHC.Prim.Word# -> GHC.Word.Word32
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Word.W32# [eta_B1];

GHC.Word.W64# :: GHC.Prim.Word# -> GHC.Word.Word64
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Word.W64# [eta_B1];


==================== Pre unarise: ====================
2018-03-16 15:57:22.385742815 UTC

GHC.Word.$fEnumWord8_$cfromEnum :: GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2Dxw]
        case ds_s2Dxw of {
          GHC.Word.W8# x#_s2Dxy [Occ=Once] ->
              case word2Int# [x#_s2Dxy] of sat_s2Dxz {
                __DEFAULT -> GHC.Types.I# [sat_s2Dxz];
              };
        };

GHC.Word.$fEnumWord16_$cfromEnum
  :: GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DxA]
        case ds_s2DxA of {
          GHC.Word.W16# x#_s2DxC [Occ=Once] ->
              case word2Int# [x#_s2DxC] of sat_s2DxD {
                __DEFAULT -> GHC.Types.I# [sat_s2DxD];
              };
        };

GHC.Word.$fEnumWord32_$cfromEnum
  :: GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DxE]
        case ds_s2DxE of {
          GHC.Word.W32# x#_s2DxG [Occ=Once] ->
              case word2Int# [x#_s2DxG] of sat_s2DxH {
                __DEFAULT -> GHC.Types.I# [sat_s2DxH];
              };
        };

GHC.Word.$fNumWord64_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Word.Word64
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s2DxI]
        case GHC.Integer.Type.integerToWord i_s2DxI of wild_s2DxJ {
          __DEFAULT -> GHC.Word.W64# [wild_s2DxJ];
        };

GHC.Word.$fNumWord64_$cabs :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_s2DxK] x_s2DxK;

GHC.Word.$fNumWord64_$cnegate :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DxL]
        case ds_s2DxL of {
          GHC.Word.W64# x#_s2DxN [Occ=Once] ->
              case word2Int# [x#_s2DxN] of sat_s2DxO {
                __DEFAULT ->
                    case negateInt# [sat_s2DxO] of sat_s2DxP {
                      __DEFAULT ->
                          case int2Word# [sat_s2DxP] of sat_s2DxQ {
                            __DEFAULT -> GHC.Word.W64# [sat_s2DxQ];
                          };
                    };
              };
        };

GHC.Word.$fNumWord64_$c*
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DxR ds1_s2DxS]
        case ds_s2DxR of {
          GHC.Word.W64# x#_s2DxU [Occ=Once] ->
              case ds1_s2DxS of {
                GHC.Word.W64# y#_s2DxW [Occ=Once] ->
                    case timesWord# [x#_s2DxU y#_s2DxW] of sat_s2DxX {
                      __DEFAULT -> GHC.Word.W64# [sat_s2DxX];
                    };
              };
        };

GHC.Word.$fNumWord64_$c-
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DxY ds1_s2DxZ]
        case ds_s2DxY of {
          GHC.Word.W64# x#_s2Dy1 [Occ=Once] ->
              case ds1_s2DxZ of {
                GHC.Word.W64# y#_s2Dy3 [Occ=Once] ->
                    case minusWord# [x#_s2Dy1 y#_s2Dy3] of sat_s2Dy4 {
                      __DEFAULT -> GHC.Word.W64# [sat_s2Dy4];
                    };
              };
        };

GHC.Word.$fNumWord64_$c+
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2Dy5 ds1_s2Dy6]
        case ds_s2Dy5 of {
          GHC.Word.W64# x#_s2Dy8 [Occ=Once] ->
              case ds1_s2Dy6 of {
                GHC.Word.W64# y#_s2Dya [Occ=Once] ->
                    case plusWord# [x#_s2Dy8 y#_s2Dya] of sat_s2Dyb {
                      __DEFAULT -> GHC.Word.W64# [sat_s2Dyb];
                    };
              };
        };

GHC.Word.$tcWord6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word64"#;

lvl_r2uFF :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Word.$tcWord6;

GHC.Word.$fIntegralWord64_$ctoInteger
  :: GHC.Word.Word64 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2Dyc]
        case ds_s2Dyc of {
          GHC.Word.W64# x#_s2Dye ->
              case word2Int# [x#_s2Dye] of i#_s2Dyf [Dmd=<S,U>] {
                __DEFAULT ->
                    case >=# [i#_s2Dyf 0#] of {
                      __DEFAULT -> GHC.Integer.Type.wordToInteger x#_s2Dye;
                      1# -> GHC.Integer.Type.smallInteger i#_s2Dyf;
                    };
              };
        };

GHC.Word.$fShowWord3 :: GHC.Word.Word64 -> GHC.Show.ShowS
[GblId, Arity=1, Str=<L,1*U(U)>, Unf=OtherCon []] =
    [] \r [x_s2Dyh]
        let {
          w1_s2Dyi [Occ=OnceL] :: GHC.Integer.Type.Integer
          [LclId] =
              [x_s2Dyh] \u []
                  case x_s2Dyh of {
                    GHC.Word.W64# x#_s2Dyk ->
                        case word2Int# [x#_s2Dyk] of i#_s2Dyl [Dmd=<S,U>] {
                          __DEFAULT ->
                              case >=# [i#_s2Dyl 0#] of {
                                __DEFAULT -> GHC.Integer.Type.wordToInteger x#_s2Dyk;
                                1# -> GHC.Integer.Type.smallInteger i#_s2Dyl;
                              };
                        };
                  }; } in
        let {
          sat_s2Dyr [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
          [LclId] =
              [w1_s2Dyi] \r [w2_s2Dyn]
                  case GHC.Show.$w$cshowsPrec4 0# w1_s2Dyi w2_s2Dyn of {
                    (#,#) ww3_s2Dyp [Occ=Once] ww4_s2Dyq [Occ=Once] ->
                        : [ww3_s2Dyp ww4_s2Dyq];
                  };
        } in  sat_s2Dyr;

GHC.Word.$fShowWord64_$cshowList
  :: [GHC.Word.Word64] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s2Dys s_s2Dyt]
        GHC.Show.showList__ GHC.Word.$fShowWord3 ls_s2Dys s_s2Dyt;

GHC.Word.$w$cshow [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s2Dyu]
        case word2Int# [ww_s2Dyu] of i#_s2Dyv [Dmd=<S,U>] {
          __DEFAULT ->
              case >=# [i#_s2Dyv 0#] of {
                __DEFAULT ->
                    case GHC.Integer.Type.wordToInteger ww_s2Dyu of sat_s2Dyx {
                      __DEFAULT -> GHC.Show.$w$cshowsPrec4 0# sat_s2Dyx GHC.Types.[];
                    };
                1# ->
                    case GHC.Integer.Type.smallInteger i#_s2Dyv of sat_s2Dyy {
                      __DEFAULT -> GHC.Show.$w$cshowsPrec4 0# sat_s2Dyy GHC.Types.[];
                    };
              };
        };

GHC.Word.$fShowWord64_$cshow [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word64 -> GHC.Base.String
[GblId, Arity=1, Str=<S(S),1*U(U)>m2, Unf=OtherCon []] =
    [] \r [w_s2Dyz]
        case w_s2Dyz of {
          GHC.Word.W64# ww1_s2DyB [Occ=Once] ->
              case GHC.Word.$w$cshow ww1_s2DyB of {
                (#,#) ww3_s2DyD [Occ=Once] ww4_s2DyE [Occ=Once] ->
                    : [ww3_s2DyD ww4_s2DyE];
              };
        };

GHC.Word.$fShowWord64_$cshowsPrec
  :: GHC.Types.Int -> GHC.Word.Word64 -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,U(U)><L,1*U(U)>, Unf=OtherCon []] =
    [] \r [p_s2DyF x_s2DyG]
        let {
          w1_s2DyH [Occ=OnceL] :: GHC.Integer.Type.Integer
          [LclId] =
              [x_s2DyG] \u []
                  case x_s2DyG of {
                    GHC.Word.W64# x#_s2DyJ ->
                        case word2Int# [x#_s2DyJ] of i#_s2DyK [Dmd=<S,U>] {
                          __DEFAULT ->
                              case >=# [i#_s2DyK 0#] of {
                                __DEFAULT -> GHC.Integer.Type.wordToInteger x#_s2DyJ;
                                1# -> GHC.Integer.Type.smallInteger i#_s2DyK;
                              };
                        };
                  }; } in
        let {
          sat_s2DyS [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
          [LclId] =
              [p_s2DyF w1_s2DyH] \r [w2_s2DyM]
                  case p_s2DyF of {
                    GHC.Types.I# ww1_s2DyO [Occ=Once] ->
                        case GHC.Show.$w$cshowsPrec4 ww1_s2DyO w1_s2DyH w2_s2DyM of {
                          (#,#) ww3_s2DyQ [Occ=Once] ww4_s2DyR [Occ=Once] ->
                              : [ww3_s2DyQ ww4_s2DyR];
                        };
                  };
        } in  sat_s2DyS;

GHC.Word.$fShowWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Word.$fShowWord64_$cshowsPrec
                                    GHC.Word.$fShowWord64_$cshow
                                    GHC.Word.$fShowWord64_$cshowList];

GHC.Word.$fEnumWord5 :: GHC.Word.Word64 -> GHC.Types.Int
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [x_s2DyT]
        GHC.Enum.fromEnumError GHC.Word.$fShowWord64 lvl_r2uFF x_s2DyT;

sat_s2DyU :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_s2DyV :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s2DyU GHC.Types.[]];

GHC.Word.$fRealWord1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s2DyV;

GHC.Word.$w$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s2DyW]
        case word2Int# [ww_s2DyW] of i#_s2DyX [Dmd=<S,U>] {
          __DEFAULT ->
              case >=# [i#_s2DyX 0#] of {
                __DEFAULT ->
                    case GHC.Integer.Type.wordToInteger ww_s2DyW of sat_s2DyZ {
                      __DEFAULT ->
                          case
                              GHC.Integer.Type.timesInteger sat_s2DyZ GHC.Word.$fRealWord1
                          of
                          sat_s2Dz0
                          { __DEFAULT -> GHC.Real.$w$sreduce sat_s2Dz0 GHC.Word.$fRealWord1;
                          };
                    };
                1# ->
                    case GHC.Integer.Type.smallInteger i#_s2DyX of sat_s2Dz1 {
                      __DEFAULT ->
                          case
                              GHC.Integer.Type.timesInteger sat_s2Dz1 GHC.Word.$fRealWord1
                          of
                          sat_s2Dz2
                          { __DEFAULT -> GHC.Real.$w$sreduce sat_s2Dz2 GHC.Word.$fRealWord1;
                          };
                    };
              };
        };

GHC.Word.$fRealWord64_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word64 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2Dz3]
        case w_s2Dz3 of {
          GHC.Word.W64# ww1_s2Dz5 [Occ=Once] ->
              case GHC.Word.$w$ctoRational ww1_s2Dz5 of {
                (#,#) ww3_s2Dz7 [Occ=Once] ww4_s2Dz8 [Occ=Once] ->
                    GHC.Real.:% [ww3_s2Dz7 ww4_s2Dz8];
              };
        };

GHC.Word.$tcWord9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word8"#;

GHC.Word.$fEnumWord10 :: GHC.Word.Word8
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord9 of sat_s2Dz9 {
          __DEFAULT -> GHC.Enum.predError sat_s2Dz9;
        };

GHC.Word.$fEnumWord11 :: GHC.Word.Word8
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord9 of sat_s2Dza {
          __DEFAULT -> GHC.Enum.succError sat_s2Dza;
        };

GHC.Word.neWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2Dzb ds1_s2Dzc]
        case ds_s2Dzb of {
          GHC.Word.W8# x_s2Dze [Occ=Once] ->
              case ds1_s2Dzc of {
                GHC.Word.W8# y_s2Dzg [Occ=Once] ->
                    case neWord# [x_s2Dze y_s2Dzg] of sat_s2Dzh {
                      __DEFAULT -> tagToEnum# [sat_s2Dzh];
                    };
              };
        };

lvl2_r2uFH :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Word.$tcWord9;

GHC.Word.$fBitsWord8_$cminBound :: GHC.Word.Word8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W8#! [0##];

GHC.Word.$fEnumWord8_$cpred :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2Dzi]
        case x_s2Dzi of {
          GHC.Word.W8# x1_s2Dzk [Occ=Once!] ->
              case x1_s2Dzk of wild1_s2Dzl {
                __DEFAULT ->
                    case minusWord# [wild1_s2Dzl 1##] of sat_s2Dzm {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2Dzm] of sat_s2Dzn {
                            __DEFAULT -> GHC.Word.W8# [sat_s2Dzn];
                          };
                    };
                0## -> GHC.Word.$fEnumWord10;
              };
        };

GHC.Word.$fBoundedWord8_$cmaxBound :: GHC.Word.Word8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W8#! [255##];

GHC.Word.$fBoundedWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Word.$fBitsWord8_$cminBound
                                       GHC.Word.$fBoundedWord8_$cmaxBound];

GHC.Word.$fEnumWord8_$csucc :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2Dzo]
        case x_s2Dzo of {
          GHC.Word.W8# x1_s2Dzq [Occ=Once!] ->
              case x1_s2Dzq of wild1_s2Dzr {
                __DEFAULT ->
                    case plusWord# [wild1_s2Dzr 1##] of sat_s2Dzs {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2Dzs] of sat_s2Dzt {
                            __DEFAULT -> GHC.Word.W8# [sat_s2Dzt];
                          };
                    };
                255## -> GHC.Word.$fEnumWord11;
              };
        };

GHC.Word.$fShowWord8_$cshowsPrec
  :: GHC.Types.Int -> GHC.Word.Word8 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s2Dzu x_s2Dzv eta_s2Dzw]
        case x_s2Dzv of {
          GHC.Word.W8# x#_s2Dzy [Occ=Once] ->
              case p_s2Dzu of {
                GHC.Types.I# ww1_s2DzA [Occ=Once] ->
                    case word2Int# [x#_s2Dzy] of sat_s2DzB {
                      __DEFAULT ->
                          case GHC.Show.$wshowSignedInt ww1_s2DzA sat_s2DzB eta_s2Dzw of {
                            (#,#) ww5_s2DzD [Occ=Once] ww6_s2DzE [Occ=Once] ->
                                : [ww5_s2DzD ww6_s2DzE];
                          };
                    };
              };
        };

GHC.Word.$fShowWord8_$cshow :: GHC.Word.Word8 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s2DzF]
        case x_s2DzF of {
          GHC.Word.W8# x#_s2DzH [Occ=Once] ->
              case word2Int# [x#_s2DzH] of sat_s2DzI {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2DzI GHC.Types.[] of {
                      (#,#) ww5_s2DzK [Occ=Once] ww6_s2DzL [Occ=Once] ->
                          : [ww5_s2DzK ww6_s2DzL];
                    };
              };
        };

GHC.Word.$fShowWord4
  :: GHC.Word.Word8 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s2DzM eta_s2DzN]
        case x_s2DzM of {
          GHC.Word.W8# x#_s2DzP [Occ=Once] ->
              case word2Int# [x#_s2DzP] of sat_s2DzQ {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2DzQ eta_s2DzN of {
                      (#,#) ww5_s2DzS [Occ=Once] ww6_s2DzT [Occ=Once] ->
                          : [ww5_s2DzS ww6_s2DzT];
                    };
              };
        };

GHC.Word.$fShowWord8_$cshowList
  :: [GHC.Word.Word8] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s2DzU s_s2DzV]
        GHC.Show.showList__ GHC.Word.$fShowWord4 ls_s2DzU s_s2DzV;

GHC.Word.$fShowWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Word.$fShowWord8_$cshowsPrec
                                    GHC.Word.$fShowWord8_$cshow
                                    GHC.Word.$fShowWord8_$cshowList];

GHC.Word.$wlvl3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Word.Word8
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s2DzW]
        GHC.Enum.$wtoEnumError
            GHC.Word.$fShowWord8
            lvl2_r2uFH
            ww_s2DzW
            GHC.Word.$fBitsWord8_$cminBound
            GHC.Word.$fBoundedWord8_$cmaxBound;

GHC.Word.$w$ctoEnum2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s2DzX]
        case >=# [ww_s2DzX 0#] of {
          __DEFAULT -> GHC.Word.$wlvl3 ww_s2DzX;
          1# ->
              case <=# [ww_s2DzX 255#] of {
                __DEFAULT -> GHC.Word.$wlvl3 ww_s2DzX;
                1# -> int2Word# [ww_s2DzX];
              };
        };

GHC.Word.$fEnumWord8_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Word.Word8
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2DA2]
        case w_s2DA2 of {
          GHC.Types.I# ww1_s2DA4 [Occ=Once] ->
              case GHC.Word.$w$ctoEnum2 ww1_s2DA4 of ww2_s2DA5 {
                __DEFAULT -> GHC.Word.W8# [ww2_s2DA5];
              };
        };

GHC.Word.$w$cenumFromThenTo2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word8]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2DA6 ww1_s2DA7 ww2_s2DA8]
        case word2Int# [ww_s2DA6] of x1_s2DA9 [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2DA7] of x2_s2DAa [Dmd=<S,U>] {
                __DEFAULT ->
                    case >=# [x2_s2DAa x1_s2DA9] of {
                      __DEFAULT ->
                          case word2Int# [ww2_s2DA8] of y_s2DAc [Dmd=<S,U>] {
                            __DEFAULT ->
                                case ># [y_s2DAc x2_s2DAa] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2DAx [Occ=Once] :: [GHC.Word.Word8]
                                        [LclId] =
                                            [x1_s2DA9 x2_s2DAa y_s2DAc] \u []
                                                case
                                                    -# [x2_s2DAa x1_s2DA9]
                                                of
                                                delta_s2DAi [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2DAc delta_s2DAi]
                                                      of
                                                      y'_s2DAj [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_dn_s2DAk [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int# -> [GHC.Word.Word8]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2DAi
                                                                            y'_s2DAj
                                                                            go_dn_s2DAk] \r [x_s2DAl]
                                                                      case
                                                                          <# [x_s2DAl y'_s2DAj]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2DAs [Occ=Once]
                                                                                :: [GHC.Word.Word8]
                                                                              [LclId] =
                                                                                  [delta_s2DAi
                                                                                   go_dn_s2DAk
                                                                                   x_s2DAl] \u []
                                                                                      case
                                                                                          +# [x_s2DAl
                                                                                              delta_s2DAi]
                                                                                      of
                                                                                      sat_s2DAr
                                                                                      { __DEFAULT ->
                                                                                            go_dn_s2DAk
                                                                                                sat_s2DAr;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2DAq [Occ=Once]
                                                                                :: GHC.Word.Word8
                                                                              [LclId] =
                                                                                  [x_s2DAl] \u []
                                                                                      case
                                                                                          >=# [x_s2DAl
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl3
                                                                                                x_s2DAl;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DAl
                                                                                                     255#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl3
                                                                                                      x_s2DAl;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DAl]
                                                                                                  of
                                                                                                  sat_s2DAp
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W8# [sat_s2DAp];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DAq
                                                                                 sat_s2DAs];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2DAw [Occ=Once]
                                                                                :: GHC.Word.Word8
                                                                              [LclId] =
                                                                                  [x_s2DAl] \u []
                                                                                      case
                                                                                          >=# [x_s2DAl
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl3
                                                                                                x_s2DAl;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DAl
                                                                                                     255#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl3
                                                                                                      x_s2DAl;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DAl]
                                                                                                  of
                                                                                                  sat_s2DAv
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W8# [sat_s2DAv];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DAw
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_dn_s2DAk x2_s2DAa;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2DAh [Occ=Once] :: GHC.Word.Word8
                                        [LclId] =
                                            [x1_s2DA9] \u []
                                                case >=# [x1_s2DA9 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl3 x1_s2DA9;
                                                  1# ->
                                                      case <=# [x1_s2DA9 255#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl3 x1_s2DA9;
                                                        1# ->
                                                            case int2Word# [x1_s2DA9] of sat_s2DAg {
                                                              __DEFAULT -> GHC.Word.W8# [sat_s2DAg];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2DAh sat_s2DAx];
                                  1# ->
                                      case ># [y_s2DAc x1_s2DA9] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2DAC [Occ=Once] :: GHC.Word.Word8
                                              [LclId] =
                                                  [x1_s2DA9] \u []
                                                      case >=# [x1_s2DA9 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl3 x1_s2DA9;
                                                        1# ->
                                                            case <=# [x1_s2DA9 255#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl3 x1_s2DA9;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2DA9]
                                                                  of
                                                                  sat_s2DAB
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W8# [sat_s2DAB];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2DAC GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                      1# ->
                          case word2Int# [ww2_s2DA8] of y_s2DAD [Dmd=<S,U>] {
                            __DEFAULT ->
                                case <# [y_s2DAD x2_s2DAa] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2DAY [Occ=Once] :: [GHC.Word.Word8]
                                        [LclId] =
                                            [x1_s2DA9 x2_s2DAa y_s2DAD] \u []
                                                case
                                                    -# [x2_s2DAa x1_s2DA9]
                                                of
                                                delta_s2DAJ [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2DAD delta_s2DAJ]
                                                      of
                                                      y'_s2DAK [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_up_s2DAL [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int# -> [GHC.Word.Word8]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2DAJ
                                                                            y'_s2DAK
                                                                            go_up_s2DAL] \r [x_s2DAM]
                                                                      case
                                                                          ># [x_s2DAM y'_s2DAK]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2DAT [Occ=Once]
                                                                                :: [GHC.Word.Word8]
                                                                              [LclId] =
                                                                                  [delta_s2DAJ
                                                                                   go_up_s2DAL
                                                                                   x_s2DAM] \u []
                                                                                      case
                                                                                          +# [x_s2DAM
                                                                                              delta_s2DAJ]
                                                                                      of
                                                                                      sat_s2DAS
                                                                                      { __DEFAULT ->
                                                                                            go_up_s2DAL
                                                                                                sat_s2DAS;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2DAR [Occ=Once]
                                                                                :: GHC.Word.Word8
                                                                              [LclId] =
                                                                                  [x_s2DAM] \u []
                                                                                      case
                                                                                          >=# [x_s2DAM
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl3
                                                                                                x_s2DAM;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DAM
                                                                                                     255#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl3
                                                                                                      x_s2DAM;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DAM]
                                                                                                  of
                                                                                                  sat_s2DAQ
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W8# [sat_s2DAQ];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DAR
                                                                                 sat_s2DAT];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2DAX [Occ=Once]
                                                                                :: GHC.Word.Word8
                                                                              [LclId] =
                                                                                  [x_s2DAM] \u []
                                                                                      case
                                                                                          >=# [x_s2DAM
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl3
                                                                                                x_s2DAM;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DAM
                                                                                                     255#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl3
                                                                                                      x_s2DAM;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DAM]
                                                                                                  of
                                                                                                  sat_s2DAW
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W8# [sat_s2DAW];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DAX
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_up_s2DAL x2_s2DAa;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2DAI [Occ=Once] :: GHC.Word.Word8
                                        [LclId] =
                                            [x1_s2DA9] \u []
                                                case >=# [x1_s2DA9 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl3 x1_s2DA9;
                                                  1# ->
                                                      case <=# [x1_s2DA9 255#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl3 x1_s2DA9;
                                                        1# ->
                                                            case int2Word# [x1_s2DA9] of sat_s2DAH {
                                                              __DEFAULT -> GHC.Word.W8# [sat_s2DAH];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2DAI sat_s2DAY];
                                  1# ->
                                      case <# [y_s2DAD x1_s2DA9] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2DB3 [Occ=Once] :: GHC.Word.Word8
                                              [LclId] =
                                                  [x1_s2DA9] \u []
                                                      case >=# [x1_s2DA9 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl3 x1_s2DA9;
                                                        1# ->
                                                            case <=# [x1_s2DA9 255#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl3 x1_s2DA9;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2DA9]
                                                                  of
                                                                  sat_s2DB2
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W8# [sat_s2DB2];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2DB3 GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fEnumWord8_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word8
     -> GHC.Word.Word8 -> GHC.Word.Word8 -> [GHC.Word.Word8]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s2DB4 w1_s2DB5 w2_s2DB6]
        case w_s2DB4 of {
          GHC.Word.W8# ww1_s2DB8 [Occ=Once] ->
              case w1_s2DB5 of {
                GHC.Word.W8# ww3_s2DBa [Occ=Once] ->
                    case w2_s2DB6 of {
                      GHC.Word.W8# ww5_s2DBc [Occ=Once] ->
                          GHC.Word.$w$cenumFromThenTo2 ww1_s2DB8 ww3_s2DBa ww5_s2DBc;
                    };
              };
        };

GHC.Word.$w$cenumFromTo2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word8]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2DBd ww1_s2DBe]
        case word2Int# [ww_s2DBd] of x0_s2DBf [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2DBe] of y_s2DBg [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x0_s2DBf y_s2DBg] of {
                      __DEFAULT ->
                          let {
                            go_s2DBi [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Word.Word8]
                            [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                                sat-only [y_s2DBg go_s2DBi] \r [x_s2DBj]
                                    let {
                                      sat_s2DBq [Occ=Once] :: [GHC.Word.Word8]
                                      [LclId] =
                                          [y_s2DBg go_s2DBi x_s2DBj] \u []
                                              case ==# [x_s2DBj y_s2DBg] of {
                                                __DEFAULT ->
                                                    case +# [x_s2DBj 1#] of sat_s2DBp {
                                                      __DEFAULT -> go_s2DBi sat_s2DBp;
                                                    };
                                                1# -> [] [];
                                              }; } in
                                    let {
                                      sat_s2DBn [Occ=Once] :: GHC.Word.Word8
                                      [LclId] =
                                          [x_s2DBj] \u []
                                              case >=# [x_s2DBj 0#] of {
                                                __DEFAULT -> GHC.Word.$wlvl3 x_s2DBj;
                                                1# ->
                                                    case <=# [x_s2DBj 255#] of {
                                                      __DEFAULT -> GHC.Word.$wlvl3 x_s2DBj;
                                                      1# ->
                                                          case int2Word# [x_s2DBj] of sat_s2DBm {
                                                            __DEFAULT -> GHC.Word.W8# [sat_s2DBm];
                                                          };
                                                    };
                                              };
                                    } in  : [sat_s2DBn sat_s2DBq];
                          } in  go_s2DBi x0_s2DBf;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord8_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> [GHC.Word.Word8]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s2DBr w1_s2DBs]
        case w_s2DBr of {
          GHC.Word.W8# ww1_s2DBu [Occ=Once] ->
              case w1_s2DBs of {
                GHC.Word.W8# ww3_s2DBw [Occ=Once] ->
                    GHC.Word.$w$cenumFromTo2 ww1_s2DBu ww3_s2DBw;
              };
        };

GHC.Word.$wgo2 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Word.Word8, [GHC.Word.Word8] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s2DBx]
        let {
          sat_s2DBH [Occ=Once] :: [GHC.Word.Word8]
          [LclId] =
              [w_s2DBx] \u []
                  case w_s2DBx of wild_s2DBC {
                    __DEFAULT ->
                        case +# [wild_s2DBC 1#] of sat_s2DBD {
                          __DEFAULT ->
                              case GHC.Word.$wgo2 sat_s2DBD of {
                                (#,#) ww1_s2DBF [Occ=Once] ww2_s2DBG [Occ=Once] ->
                                    : [ww1_s2DBF ww2_s2DBG];
                              };
                        };
                    255# -> [] [];
                  }; } in
        let {
          sat_s2DBB [Occ=Once] :: GHC.Word.Word8
          [LclId] =
              [w_s2DBx] \u []
                  case >=# [w_s2DBx 0#] of {
                    __DEFAULT -> GHC.Word.$wlvl3 w_s2DBx;
                    1# ->
                        case <=# [w_s2DBx 255#] of {
                          __DEFAULT -> GHC.Word.$wlvl3 w_s2DBx;
                          1# ->
                              case int2Word# [w_s2DBx] of sat_s2DBA {
                                __DEFAULT -> GHC.Word.W8# [sat_s2DBA];
                              };
                        };
                  };
        } in  (#,#) [sat_s2DBB sat_s2DBH];

GHC.Word.$fEnumWord8_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Word.Word8]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s2DBI]
        case GHC.Word.$wgo2 w_s2DBI of {
          (#,#) ww1_s2DBK [Occ=Once] ww2_s2DBL [Occ=Once] ->
              : [ww1_s2DBK ww2_s2DBL];
        };

GHC.Word.$fEnumWord8_$cenumFrom
  :: GHC.Word.Word8 -> [GHC.Word.Word8]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s2DBM]
        case n_s2DBM of {
          GHC.Word.W8# x#_s2DBO [Occ=Once] ->
              case word2Int# [x#_s2DBO] of x_s2DBP [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x_s2DBP 255#] of {
                      __DEFAULT -> GHC.Word.$fEnumWord8_go x_s2DBP;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Word.$fEnumWord8_$csucc
                                    GHC.Word.$fEnumWord8_$cpred
                                    GHC.Word.$fEnumWord8_$ctoEnum
                                    GHC.Word.$fEnumWord8_$cfromEnum
                                    GHC.Word.$fEnumWord8_$cenumFrom
                                    GHC.Word.$fEnumWord8_$cenumFromThen
                                    GHC.Word.$fEnumWord8_$cenumFromTo
                                    GHC.Word.$fEnumWord8_$cenumFromThenTo];
GHC.Word.$fEnumWord8_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> [GHC.Word.Word8]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Word.$fEnumWord8 GHC.Word.$fBoundedWord8 eta_B2 eta_B1;

GHC.Word.$tcWord2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word16"#;

GHC.Word.$fEnumWord1 :: GHC.Word.Word16
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord2 of sat_s2DBR {
          __DEFAULT -> GHC.Enum.predError sat_s2DBR;
        };

GHC.Word.$fEnumWord2 :: GHC.Word.Word16
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord2 of sat_s2DBS {
          __DEFAULT -> GHC.Enum.succError sat_s2DBS;
        };

GHC.Word.neWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DBT ds1_s2DBU]
        case ds_s2DBT of {
          GHC.Word.W16# x_s2DBW [Occ=Once] ->
              case ds1_s2DBU of {
                GHC.Word.W16# y_s2DBY [Occ=Once] ->
                    case neWord# [x_s2DBW y_s2DBY] of sat_s2DBZ {
                      __DEFAULT -> tagToEnum# [sat_s2DBZ];
                    };
              };
        };

lvl4_r2uFJ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Word.$tcWord2;

GHC.Word.$fBitsWord16_$cminBound :: GHC.Word.Word16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W16#! [0##];

GHC.Word.$fEnumWord16_$cpred :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2DC0]
        case x_s2DC0 of {
          GHC.Word.W16# x1_s2DC2 [Occ=Once!] ->
              case x1_s2DC2 of wild1_s2DC3 {
                __DEFAULT ->
                    case minusWord# [wild1_s2DC3 1##] of sat_s2DC4 {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2DC4] of sat_s2DC5 {
                            __DEFAULT -> GHC.Word.W16# [sat_s2DC5];
                          };
                    };
                0## -> GHC.Word.$fEnumWord1;
              };
        };

GHC.Word.$fBoundedWord16_$cmaxBound :: GHC.Word.Word16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W16#! [65535##];

GHC.Word.$fBoundedWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Word.$fBitsWord16_$cminBound
                                       GHC.Word.$fBoundedWord16_$cmaxBound];

GHC.Word.$fEnumWord16_$csucc :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2DC6]
        case x_s2DC6 of {
          GHC.Word.W16# x1_s2DC8 [Occ=Once!] ->
              case x1_s2DC8 of wild1_s2DC9 {
                __DEFAULT ->
                    case plusWord# [wild1_s2DC9 1##] of sat_s2DCa {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2DCa] of sat_s2DCb {
                            __DEFAULT -> GHC.Word.W16# [sat_s2DCb];
                          };
                    };
                65535## -> GHC.Word.$fEnumWord2;
              };
        };

GHC.Word.$fShowWord16_$cshowsPrec
  :: GHC.Types.Int -> GHC.Word.Word16 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s2DCc x_s2DCd eta_s2DCe]
        case x_s2DCd of {
          GHC.Word.W16# x#_s2DCg [Occ=Once] ->
              case p_s2DCc of {
                GHC.Types.I# ww1_s2DCi [Occ=Once] ->
                    case word2Int# [x#_s2DCg] of sat_s2DCj {
                      __DEFAULT ->
                          case GHC.Show.$wshowSignedInt ww1_s2DCi sat_s2DCj eta_s2DCe of {
                            (#,#) ww5_s2DCl [Occ=Once] ww6_s2DCm [Occ=Once] ->
                                : [ww5_s2DCl ww6_s2DCm];
                          };
                    };
              };
        };

GHC.Word.$fShowWord16_$cshow :: GHC.Word.Word16 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s2DCn]
        case x_s2DCn of {
          GHC.Word.W16# x#_s2DCp [Occ=Once] ->
              case word2Int# [x#_s2DCp] of sat_s2DCq {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2DCq GHC.Types.[] of {
                      (#,#) ww5_s2DCs [Occ=Once] ww6_s2DCt [Occ=Once] ->
                          : [ww5_s2DCs ww6_s2DCt];
                    };
              };
        };

GHC.Word.$fShowWord1
  :: GHC.Word.Word16 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s2DCu eta_s2DCv]
        case x_s2DCu of {
          GHC.Word.W16# x#_s2DCx [Occ=Once] ->
              case word2Int# [x#_s2DCx] of sat_s2DCy {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2DCy eta_s2DCv of {
                      (#,#) ww5_s2DCA [Occ=Once] ww6_s2DCB [Occ=Once] ->
                          : [ww5_s2DCA ww6_s2DCB];
                    };
              };
        };

GHC.Word.$fShowWord16_$cshowList
  :: [GHC.Word.Word16] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s2DCC s_s2DCD]
        GHC.Show.showList__ GHC.Word.$fShowWord1 ls_s2DCC s_s2DCD;

GHC.Word.$fShowWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Word.$fShowWord16_$cshowsPrec
                                    GHC.Word.$fShowWord16_$cshow
                                    GHC.Word.$fShowWord16_$cshowList];

GHC.Word.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Word.Word16
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s2DCE]
        GHC.Enum.$wtoEnumError
            GHC.Word.$fShowWord16
            lvl4_r2uFJ
            ww_s2DCE
            GHC.Word.$fBitsWord16_$cminBound
            GHC.Word.$fBoundedWord16_$cmaxBound;

GHC.Word.$w$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s2DCF]
        case >=# [ww_s2DCF 0#] of {
          __DEFAULT -> GHC.Word.$wlvl ww_s2DCF;
          1# ->
              case <=# [ww_s2DCF 65535#] of {
                __DEFAULT -> GHC.Word.$wlvl ww_s2DCF;
                1# -> int2Word# [ww_s2DCF];
              };
        };

GHC.Word.$fEnumWord16_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Word.Word16
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2DCK]
        case w_s2DCK of {
          GHC.Types.I# ww1_s2DCM [Occ=Once] ->
              case GHC.Word.$w$ctoEnum ww1_s2DCM of ww2_s2DCN {
                __DEFAULT -> GHC.Word.W16# [ww2_s2DCN];
              };
        };

GHC.Word.$w$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word16]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2DCO ww1_s2DCP ww2_s2DCQ]
        case word2Int# [ww_s2DCO] of x1_s2DCR [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2DCP] of x2_s2DCS [Dmd=<S,U>] {
                __DEFAULT ->
                    case >=# [x2_s2DCS x1_s2DCR] of {
                      __DEFAULT ->
                          case word2Int# [ww2_s2DCQ] of y_s2DCU [Dmd=<S,U>] {
                            __DEFAULT ->
                                case ># [y_s2DCU x2_s2DCS] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2DDf [Occ=Once] :: [GHC.Word.Word16]
                                        [LclId] =
                                            [x1_s2DCR x2_s2DCS y_s2DCU] \u []
                                                case
                                                    -# [x2_s2DCS x1_s2DCR]
                                                of
                                                delta_s2DD0 [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2DCU delta_s2DD0]
                                                      of
                                                      y'_s2DD1 [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_dn_s2DD2 [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int#
                                                                   -> [GHC.Word.Word16]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2DD0
                                                                            y'_s2DD1
                                                                            go_dn_s2DD2] \r [x_s2DD3]
                                                                      case
                                                                          <# [x_s2DD3 y'_s2DD1]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2DDa [Occ=Once]
                                                                                :: [GHC.Word.Word16]
                                                                              [LclId] =
                                                                                  [delta_s2DD0
                                                                                   go_dn_s2DD2
                                                                                   x_s2DD3] \u []
                                                                                      case
                                                                                          +# [x_s2DD3
                                                                                              delta_s2DD0]
                                                                                      of
                                                                                      sat_s2DD9
                                                                                      { __DEFAULT ->
                                                                                            go_dn_s2DD2
                                                                                                sat_s2DD9;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2DD8 [Occ=Once]
                                                                                :: GHC.Word.Word16
                                                                              [LclId] =
                                                                                  [x_s2DD3] \u []
                                                                                      case
                                                                                          >=# [x_s2DD3
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl
                                                                                                x_s2DD3;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DD3
                                                                                                     65535#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl
                                                                                                      x_s2DD3;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DD3]
                                                                                                  of
                                                                                                  sat_s2DD7
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W16# [sat_s2DD7];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DD8
                                                                                 sat_s2DDa];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2DDe [Occ=Once]
                                                                                :: GHC.Word.Word16
                                                                              [LclId] =
                                                                                  [x_s2DD3] \u []
                                                                                      case
                                                                                          >=# [x_s2DD3
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl
                                                                                                x_s2DD3;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DD3
                                                                                                     65535#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl
                                                                                                      x_s2DD3;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DD3]
                                                                                                  of
                                                                                                  sat_s2DDd
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W16# [sat_s2DDd];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DDe
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_dn_s2DD2 x2_s2DCS;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2DCZ [Occ=Once] :: GHC.Word.Word16
                                        [LclId] =
                                            [x1_s2DCR] \u []
                                                case >=# [x1_s2DCR 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl x1_s2DCR;
                                                  1# ->
                                                      case <=# [x1_s2DCR 65535#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl x1_s2DCR;
                                                        1# ->
                                                            case int2Word# [x1_s2DCR] of sat_s2DCY {
                                                              __DEFAULT ->
                                                                  GHC.Word.W16# [sat_s2DCY];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2DCZ sat_s2DDf];
                                  1# ->
                                      case ># [y_s2DCU x1_s2DCR] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2DDk [Occ=Once] :: GHC.Word.Word16
                                              [LclId] =
                                                  [x1_s2DCR] \u []
                                                      case >=# [x1_s2DCR 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl x1_s2DCR;
                                                        1# ->
                                                            case <=# [x1_s2DCR 65535#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl x1_s2DCR;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2DCR]
                                                                  of
                                                                  sat_s2DDj
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W16# [sat_s2DDj];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2DDk GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                      1# ->
                          case word2Int# [ww2_s2DCQ] of y_s2DDl [Dmd=<S,U>] {
                            __DEFAULT ->
                                case <# [y_s2DDl x2_s2DCS] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2DDG [Occ=Once] :: [GHC.Word.Word16]
                                        [LclId] =
                                            [x1_s2DCR x2_s2DCS y_s2DDl] \u []
                                                case
                                                    -# [x2_s2DCS x1_s2DCR]
                                                of
                                                delta_s2DDr [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2DDl delta_s2DDr]
                                                      of
                                                      y'_s2DDs [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_up_s2DDt [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int#
                                                                   -> [GHC.Word.Word16]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2DDr
                                                                            y'_s2DDs
                                                                            go_up_s2DDt] \r [x_s2DDu]
                                                                      case
                                                                          ># [x_s2DDu y'_s2DDs]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2DDB [Occ=Once]
                                                                                :: [GHC.Word.Word16]
                                                                              [LclId] =
                                                                                  [delta_s2DDr
                                                                                   go_up_s2DDt
                                                                                   x_s2DDu] \u []
                                                                                      case
                                                                                          +# [x_s2DDu
                                                                                              delta_s2DDr]
                                                                                      of
                                                                                      sat_s2DDA
                                                                                      { __DEFAULT ->
                                                                                            go_up_s2DDt
                                                                                                sat_s2DDA;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2DDz [Occ=Once]
                                                                                :: GHC.Word.Word16
                                                                              [LclId] =
                                                                                  [x_s2DDu] \u []
                                                                                      case
                                                                                          >=# [x_s2DDu
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl
                                                                                                x_s2DDu;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DDu
                                                                                                     65535#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl
                                                                                                      x_s2DDu;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DDu]
                                                                                                  of
                                                                                                  sat_s2DDy
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W16# [sat_s2DDy];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DDz
                                                                                 sat_s2DDB];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2DDF [Occ=Once]
                                                                                :: GHC.Word.Word16
                                                                              [LclId] =
                                                                                  [x_s2DDu] \u []
                                                                                      case
                                                                                          >=# [x_s2DDu
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl
                                                                                                x_s2DDu;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DDu
                                                                                                     65535#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl
                                                                                                      x_s2DDu;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DDu]
                                                                                                  of
                                                                                                  sat_s2DDE
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W16# [sat_s2DDE];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DDF
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_up_s2DDt x2_s2DCS;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2DDq [Occ=Once] :: GHC.Word.Word16
                                        [LclId] =
                                            [x1_s2DCR] \u []
                                                case >=# [x1_s2DCR 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl x1_s2DCR;
                                                  1# ->
                                                      case <=# [x1_s2DCR 65535#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl x1_s2DCR;
                                                        1# ->
                                                            case int2Word# [x1_s2DCR] of sat_s2DDp {
                                                              __DEFAULT ->
                                                                  GHC.Word.W16# [sat_s2DDp];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2DDq sat_s2DDG];
                                  1# ->
                                      case <# [y_s2DDl x1_s2DCR] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2DDL [Occ=Once] :: GHC.Word.Word16
                                              [LclId] =
                                                  [x1_s2DCR] \u []
                                                      case >=# [x1_s2DCR 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl x1_s2DCR;
                                                        1# ->
                                                            case <=# [x1_s2DCR 65535#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl x1_s2DCR;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2DCR]
                                                                  of
                                                                  sat_s2DDK
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W16# [sat_s2DDK];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2DDL GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fEnumWord16_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word16
     -> GHC.Word.Word16 -> GHC.Word.Word16 -> [GHC.Word.Word16]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s2DDM w1_s2DDN w2_s2DDO]
        case w_s2DDM of {
          GHC.Word.W16# ww1_s2DDQ [Occ=Once] ->
              case w1_s2DDN of {
                GHC.Word.W16# ww3_s2DDS [Occ=Once] ->
                    case w2_s2DDO of {
                      GHC.Word.W16# ww5_s2DDU [Occ=Once] ->
                          GHC.Word.$w$cenumFromThenTo ww1_s2DDQ ww3_s2DDS ww5_s2DDU;
                    };
              };
        };

GHC.Word.$w$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word16]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2DDV ww1_s2DDW]
        case word2Int# [ww_s2DDV] of x0_s2DDX [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2DDW] of y_s2DDY [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x0_s2DDX y_s2DDY] of {
                      __DEFAULT ->
                          let {
                            go_s2DE0 [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Word.Word16]
                            [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                                sat-only [y_s2DDY go_s2DE0] \r [x_s2DE1]
                                    let {
                                      sat_s2DE8 [Occ=Once] :: [GHC.Word.Word16]
                                      [LclId] =
                                          [y_s2DDY go_s2DE0 x_s2DE1] \u []
                                              case ==# [x_s2DE1 y_s2DDY] of {
                                                __DEFAULT ->
                                                    case +# [x_s2DE1 1#] of sat_s2DE7 {
                                                      __DEFAULT -> go_s2DE0 sat_s2DE7;
                                                    };
                                                1# -> [] [];
                                              }; } in
                                    let {
                                      sat_s2DE5 [Occ=Once] :: GHC.Word.Word16
                                      [LclId] =
                                          [x_s2DE1] \u []
                                              case >=# [x_s2DE1 0#] of {
                                                __DEFAULT -> GHC.Word.$wlvl x_s2DE1;
                                                1# ->
                                                    case <=# [x_s2DE1 65535#] of {
                                                      __DEFAULT -> GHC.Word.$wlvl x_s2DE1;
                                                      1# ->
                                                          case int2Word# [x_s2DE1] of sat_s2DE4 {
                                                            __DEFAULT -> GHC.Word.W16# [sat_s2DE4];
                                                          };
                                                    };
                                              };
                                    } in  : [sat_s2DE5 sat_s2DE8];
                          } in  go_s2DE0 x0_s2DDX;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord16_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> [GHC.Word.Word16]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s2DE9 w1_s2DEa]
        case w_s2DE9 of {
          GHC.Word.W16# ww1_s2DEc [Occ=Once] ->
              case w1_s2DEa of {
                GHC.Word.W16# ww3_s2DEe [Occ=Once] ->
                    GHC.Word.$w$cenumFromTo ww1_s2DEc ww3_s2DEe;
              };
        };

GHC.Word.$wgo [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Word.Word16, [GHC.Word.Word16] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s2DEf]
        let {
          sat_s2DEp [Occ=Once] :: [GHC.Word.Word16]
          [LclId] =
              [w_s2DEf] \u []
                  case w_s2DEf of wild_s2DEk {
                    __DEFAULT ->
                        case +# [wild_s2DEk 1#] of sat_s2DEl {
                          __DEFAULT ->
                              case GHC.Word.$wgo sat_s2DEl of {
                                (#,#) ww1_s2DEn [Occ=Once] ww2_s2DEo [Occ=Once] ->
                                    : [ww1_s2DEn ww2_s2DEo];
                              };
                        };
                    65535# -> [] [];
                  }; } in
        let {
          sat_s2DEj [Occ=Once] :: GHC.Word.Word16
          [LclId] =
              [w_s2DEf] \u []
                  case >=# [w_s2DEf 0#] of {
                    __DEFAULT -> GHC.Word.$wlvl w_s2DEf;
                    1# ->
                        case <=# [w_s2DEf 65535#] of {
                          __DEFAULT -> GHC.Word.$wlvl w_s2DEf;
                          1# ->
                              case int2Word# [w_s2DEf] of sat_s2DEi {
                                __DEFAULT -> GHC.Word.W16# [sat_s2DEi];
                              };
                        };
                  };
        } in  (#,#) [sat_s2DEj sat_s2DEp];

GHC.Word.$fEnumWord16_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Word.Word16]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s2DEq]
        case GHC.Word.$wgo w_s2DEq of {
          (#,#) ww1_s2DEs [Occ=Once] ww2_s2DEt [Occ=Once] ->
              : [ww1_s2DEs ww2_s2DEt];
        };

GHC.Word.$fEnumWord16_$cenumFrom
  :: GHC.Word.Word16 -> [GHC.Word.Word16]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s2DEu]
        case n_s2DEu of {
          GHC.Word.W16# x#_s2DEw [Occ=Once] ->
              case word2Int# [x#_s2DEw] of x_s2DEx [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x_s2DEx 65535#] of {
                      __DEFAULT -> GHC.Word.$fEnumWord16_go x_s2DEx;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Word.$fEnumWord16_$csucc
                                    GHC.Word.$fEnumWord16_$cpred
                                    GHC.Word.$fEnumWord16_$ctoEnum
                                    GHC.Word.$fEnumWord16_$cfromEnum
                                    GHC.Word.$fEnumWord16_$cenumFrom
                                    GHC.Word.$fEnumWord16_$cenumFromThen
                                    GHC.Word.$fEnumWord16_$cenumFromTo
                                    GHC.Word.$fEnumWord16_$cenumFromThenTo];
GHC.Word.$fEnumWord16_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> [GHC.Word.Word16]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Word.$fEnumWord16 GHC.Word.$fBoundedWord16 eta_B2 eta_B1;

GHC.Word.$tcWord4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word32"#;

GHC.Word.$fEnumWord3 :: GHC.Word.Word32
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord4 of sat_s2DEz {
          __DEFAULT -> GHC.Enum.predError sat_s2DEz;
        };

GHC.Word.$fEnumWord4 :: GHC.Word.Word32
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord4 of sat_s2DEA {
          __DEFAULT -> GHC.Enum.succError sat_s2DEA;
        };

GHC.Word.neWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DEB ds1_s2DEC]
        case ds_s2DEB of {
          GHC.Word.W32# x_s2DEE [Occ=Once] ->
              case ds1_s2DEC of {
                GHC.Word.W32# y_s2DEG [Occ=Once] ->
                    case neWord# [x_s2DEE y_s2DEG] of sat_s2DEH {
                      __DEFAULT -> tagToEnum# [sat_s2DEH];
                    };
              };
        };

lvl6_r2uFL :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Word.$tcWord4;

GHC.Word.$fBitsWord32_$cminBound :: GHC.Word.Word32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W32#! [0##];

GHC.Word.$fEnumWord32_$cpred :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2DEI]
        case x_s2DEI of {
          GHC.Word.W32# x1_s2DEK [Occ=Once!] ->
              case x1_s2DEK of wild1_s2DEL {
                __DEFAULT ->
                    case minusWord# [wild1_s2DEL 1##] of sat_s2DEM {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2DEM] of sat_s2DEN {
                            __DEFAULT -> GHC.Word.W32# [sat_s2DEN];
                          };
                    };
                0## -> GHC.Word.$fEnumWord3;
              };
        };

GHC.Word.$fBoundedWord32_$cmaxBound :: GHC.Word.Word32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W32#! [4294967295##];

GHC.Word.$fBoundedWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Word.$fBitsWord32_$cminBound
                                       GHC.Word.$fBoundedWord32_$cmaxBound];

GHC.Word.$fEnumWord32_$csucc :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2DEO]
        case x_s2DEO of {
          GHC.Word.W32# x1_s2DEQ [Occ=Once!] ->
              case x1_s2DEQ of wild1_s2DER {
                __DEFAULT ->
                    case plusWord# [wild1_s2DER 1##] of sat_s2DES {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2DES] of sat_s2DET {
                            __DEFAULT -> GHC.Word.W32# [sat_s2DET];
                          };
                    };
                4294967295## -> GHC.Word.$fEnumWord4;
              };
        };

GHC.Word.$fShowWord32_$cshowsPrec
  :: GHC.Types.Int -> GHC.Word.Word32 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s2DEU x_s2DEV eta_s2DEW]
        case x_s2DEV of {
          GHC.Word.W32# x#_s2DEY [Occ=Once] ->
              case p_s2DEU of {
                GHC.Types.I# ww1_s2DF0 [Occ=Once] ->
                    case word2Int# [x#_s2DEY] of sat_s2DF1 {
                      __DEFAULT ->
                          case GHC.Show.$wshowSignedInt ww1_s2DF0 sat_s2DF1 eta_s2DEW of {
                            (#,#) ww5_s2DF3 [Occ=Once] ww6_s2DF4 [Occ=Once] ->
                                : [ww5_s2DF3 ww6_s2DF4];
                          };
                    };
              };
        };

GHC.Word.$fShowWord32_$cshow :: GHC.Word.Word32 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s2DF5]
        case x_s2DF5 of {
          GHC.Word.W32# x#_s2DF7 [Occ=Once] ->
              case word2Int# [x#_s2DF7] of sat_s2DF8 {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2DF8 GHC.Types.[] of {
                      (#,#) ww5_s2DFa [Occ=Once] ww6_s2DFb [Occ=Once] ->
                          : [ww5_s2DFa ww6_s2DFb];
                    };
              };
        };

GHC.Word.$fShowWord2
  :: GHC.Word.Word32 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s2DFc eta_s2DFd]
        case x_s2DFc of {
          GHC.Word.W32# x#_s2DFf [Occ=Once] ->
              case word2Int# [x#_s2DFf] of sat_s2DFg {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2DFg eta_s2DFd of {
                      (#,#) ww5_s2DFi [Occ=Once] ww6_s2DFj [Occ=Once] ->
                          : [ww5_s2DFi ww6_s2DFj];
                    };
              };
        };

GHC.Word.$fShowWord32_$cshowList
  :: [GHC.Word.Word32] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s2DFk s_s2DFl]
        GHC.Show.showList__ GHC.Word.$fShowWord2 ls_s2DFk s_s2DFl;

GHC.Word.$fShowWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Word.$fShowWord32_$cshowsPrec
                                    GHC.Word.$fShowWord32_$cshow
                                    GHC.Word.$fShowWord32_$cshowList];

GHC.Word.$wlvl1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Word.Word32
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s2DFm]
        GHC.Enum.$wtoEnumError
            GHC.Word.$fShowWord32
            lvl6_r2uFL
            ww_s2DFm
            GHC.Word.$fBitsWord32_$cminBound
            GHC.Word.$fBoundedWord32_$cmaxBound;

GHC.Word.$w$ctoEnum1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s2DFn]
        case >=# [ww_s2DFn 0#] of {
          __DEFAULT -> GHC.Word.$wlvl1 ww_s2DFn;
          1# ->
              case <=# [ww_s2DFn 4294967295#] of {
                __DEFAULT -> GHC.Word.$wlvl1 ww_s2DFn;
                1# -> int2Word# [ww_s2DFn];
              };
        };

GHC.Word.$fEnumWord32_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Word.Word32
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2DFs]
        case w_s2DFs of {
          GHC.Types.I# ww1_s2DFu [Occ=Once] ->
              case GHC.Word.$w$ctoEnum1 ww1_s2DFu of ww2_s2DFv {
                __DEFAULT -> GHC.Word.W32# [ww2_s2DFv];
              };
        };

GHC.Word.$w$cenumFromThenTo1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word32]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2DFw ww1_s2DFx ww2_s2DFy]
        case word2Int# [ww_s2DFw] of x1_s2DFz [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2DFx] of x2_s2DFA [Dmd=<S,U>] {
                __DEFAULT ->
                    case >=# [x2_s2DFA x1_s2DFz] of {
                      __DEFAULT ->
                          case word2Int# [ww2_s2DFy] of y_s2DFC [Dmd=<S,U>] {
                            __DEFAULT ->
                                case ># [y_s2DFC x2_s2DFA] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2DFX [Occ=Once] :: [GHC.Word.Word32]
                                        [LclId] =
                                            [x1_s2DFz x2_s2DFA y_s2DFC] \u []
                                                case
                                                    -# [x2_s2DFA x1_s2DFz]
                                                of
                                                delta_s2DFI [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2DFC delta_s2DFI]
                                                      of
                                                      y'_s2DFJ [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_dn_s2DFK [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int#
                                                                   -> [GHC.Word.Word32]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2DFI
                                                                            y'_s2DFJ
                                                                            go_dn_s2DFK] \r [x_s2DFL]
                                                                      case
                                                                          <# [x_s2DFL y'_s2DFJ]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2DFS [Occ=Once]
                                                                                :: [GHC.Word.Word32]
                                                                              [LclId] =
                                                                                  [delta_s2DFI
                                                                                   go_dn_s2DFK
                                                                                   x_s2DFL] \u []
                                                                                      case
                                                                                          +# [x_s2DFL
                                                                                              delta_s2DFI]
                                                                                      of
                                                                                      sat_s2DFR
                                                                                      { __DEFAULT ->
                                                                                            go_dn_s2DFK
                                                                                                sat_s2DFR;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2DFQ [Occ=Once]
                                                                                :: GHC.Word.Word32
                                                                              [LclId] =
                                                                                  [x_s2DFL] \u []
                                                                                      case
                                                                                          >=# [x_s2DFL
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl1
                                                                                                x_s2DFL;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DFL
                                                                                                     4294967295#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl1
                                                                                                      x_s2DFL;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DFL]
                                                                                                  of
                                                                                                  sat_s2DFP
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W32# [sat_s2DFP];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DFQ
                                                                                 sat_s2DFS];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2DFW [Occ=Once]
                                                                                :: GHC.Word.Word32
                                                                              [LclId] =
                                                                                  [x_s2DFL] \u []
                                                                                      case
                                                                                          >=# [x_s2DFL
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl1
                                                                                                x_s2DFL;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DFL
                                                                                                     4294967295#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl1
                                                                                                      x_s2DFL;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DFL]
                                                                                                  of
                                                                                                  sat_s2DFV
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W32# [sat_s2DFV];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DFW
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_dn_s2DFK x2_s2DFA;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2DFH [Occ=Once] :: GHC.Word.Word32
                                        [LclId] =
                                            [x1_s2DFz] \u []
                                                case >=# [x1_s2DFz 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl1 x1_s2DFz;
                                                  1# ->
                                                      case <=# [x1_s2DFz 4294967295#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl1 x1_s2DFz;
                                                        1# ->
                                                            case int2Word# [x1_s2DFz] of sat_s2DFG {
                                                              __DEFAULT ->
                                                                  GHC.Word.W32# [sat_s2DFG];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2DFH sat_s2DFX];
                                  1# ->
                                      case ># [y_s2DFC x1_s2DFz] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2DG2 [Occ=Once] :: GHC.Word.Word32
                                              [LclId] =
                                                  [x1_s2DFz] \u []
                                                      case >=# [x1_s2DFz 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl1 x1_s2DFz;
                                                        1# ->
                                                            case <=# [x1_s2DFz 4294967295#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl1 x1_s2DFz;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2DFz]
                                                                  of
                                                                  sat_s2DG1
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W32# [sat_s2DG1];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2DG2 GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                      1# ->
                          case word2Int# [ww2_s2DFy] of y_s2DG3 [Dmd=<S,U>] {
                            __DEFAULT ->
                                case <# [y_s2DG3 x2_s2DFA] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2DGo [Occ=Once] :: [GHC.Word.Word32]
                                        [LclId] =
                                            [x1_s2DFz x2_s2DFA y_s2DG3] \u []
                                                case
                                                    -# [x2_s2DFA x1_s2DFz]
                                                of
                                                delta_s2DG9 [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2DG3 delta_s2DG9]
                                                      of
                                                      y'_s2DGa [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_up_s2DGb [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int#
                                                                   -> [GHC.Word.Word32]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2DG9
                                                                            y'_s2DGa
                                                                            go_up_s2DGb] \r [x_s2DGc]
                                                                      case
                                                                          ># [x_s2DGc y'_s2DGa]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2DGj [Occ=Once]
                                                                                :: [GHC.Word.Word32]
                                                                              [LclId] =
                                                                                  [delta_s2DG9
                                                                                   go_up_s2DGb
                                                                                   x_s2DGc] \u []
                                                                                      case
                                                                                          +# [x_s2DGc
                                                                                              delta_s2DG9]
                                                                                      of
                                                                                      sat_s2DGi
                                                                                      { __DEFAULT ->
                                                                                            go_up_s2DGb
                                                                                                sat_s2DGi;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2DGh [Occ=Once]
                                                                                :: GHC.Word.Word32
                                                                              [LclId] =
                                                                                  [x_s2DGc] \u []
                                                                                      case
                                                                                          >=# [x_s2DGc
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl1
                                                                                                x_s2DGc;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DGc
                                                                                                     4294967295#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl1
                                                                                                      x_s2DGc;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DGc]
                                                                                                  of
                                                                                                  sat_s2DGg
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W32# [sat_s2DGg];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DGh
                                                                                 sat_s2DGj];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2DGn [Occ=Once]
                                                                                :: GHC.Word.Word32
                                                                              [LclId] =
                                                                                  [x_s2DGc] \u []
                                                                                      case
                                                                                          >=# [x_s2DGc
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl1
                                                                                                x_s2DGc;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DGc
                                                                                                     4294967295#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl1
                                                                                                      x_s2DGc;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DGc]
                                                                                                  of
                                                                                                  sat_s2DGm
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W32# [sat_s2DGm];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DGn
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_up_s2DGb x2_s2DFA;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2DG8 [Occ=Once] :: GHC.Word.Word32
                                        [LclId] =
                                            [x1_s2DFz] \u []
                                                case >=# [x1_s2DFz 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl1 x1_s2DFz;
                                                  1# ->
                                                      case <=# [x1_s2DFz 4294967295#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl1 x1_s2DFz;
                                                        1# ->
                                                            case int2Word# [x1_s2DFz] of sat_s2DG7 {
                                                              __DEFAULT ->
                                                                  GHC.Word.W32# [sat_s2DG7];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2DG8 sat_s2DGo];
                                  1# ->
                                      case <# [y_s2DG3 x1_s2DFz] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2DGt [Occ=Once] :: GHC.Word.Word32
                                              [LclId] =
                                                  [x1_s2DFz] \u []
                                                      case >=# [x1_s2DFz 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl1 x1_s2DFz;
                                                        1# ->
                                                            case <=# [x1_s2DFz 4294967295#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl1 x1_s2DFz;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2DFz]
                                                                  of
                                                                  sat_s2DGs
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W32# [sat_s2DGs];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2DGt GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fEnumWord32_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word32
     -> GHC.Word.Word32 -> GHC.Word.Word32 -> [GHC.Word.Word32]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s2DGu w1_s2DGv w2_s2DGw]
        case w_s2DGu of {
          GHC.Word.W32# ww1_s2DGy [Occ=Once] ->
              case w1_s2DGv of {
                GHC.Word.W32# ww3_s2DGA [Occ=Once] ->
                    case w2_s2DGw of {
                      GHC.Word.W32# ww5_s2DGC [Occ=Once] ->
                          GHC.Word.$w$cenumFromThenTo1 ww1_s2DGy ww3_s2DGA ww5_s2DGC;
                    };
              };
        };

GHC.Word.$w$cenumFromTo1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word32]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2DGD ww1_s2DGE]
        case word2Int# [ww_s2DGD] of x0_s2DGF [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2DGE] of y_s2DGG [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x0_s2DGF y_s2DGG] of {
                      __DEFAULT ->
                          let {
                            go_s2DGI [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Word.Word32]
                            [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                                sat-only [y_s2DGG go_s2DGI] \r [x_s2DGJ]
                                    let {
                                      sat_s2DGQ [Occ=Once] :: [GHC.Word.Word32]
                                      [LclId] =
                                          [y_s2DGG go_s2DGI x_s2DGJ] \u []
                                              case ==# [x_s2DGJ y_s2DGG] of {
                                                __DEFAULT ->
                                                    case +# [x_s2DGJ 1#] of sat_s2DGP {
                                                      __DEFAULT -> go_s2DGI sat_s2DGP;
                                                    };
                                                1# -> [] [];
                                              }; } in
                                    let {
                                      sat_s2DGN [Occ=Once] :: GHC.Word.Word32
                                      [LclId] =
                                          [x_s2DGJ] \u []
                                              case >=# [x_s2DGJ 0#] of {
                                                __DEFAULT -> GHC.Word.$wlvl1 x_s2DGJ;
                                                1# ->
                                                    case <=# [x_s2DGJ 4294967295#] of {
                                                      __DEFAULT -> GHC.Word.$wlvl1 x_s2DGJ;
                                                      1# ->
                                                          case int2Word# [x_s2DGJ] of sat_s2DGM {
                                                            __DEFAULT -> GHC.Word.W32# [sat_s2DGM];
                                                          };
                                                    };
                                              };
                                    } in  : [sat_s2DGN sat_s2DGQ];
                          } in  go_s2DGI x0_s2DGF;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord32_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> [GHC.Word.Word32]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s2DGR w1_s2DGS]
        case w_s2DGR of {
          GHC.Word.W32# ww1_s2DGU [Occ=Once] ->
              case w1_s2DGS of {
                GHC.Word.W32# ww3_s2DGW [Occ=Once] ->
                    GHC.Word.$w$cenumFromTo1 ww1_s2DGU ww3_s2DGW;
              };
        };

GHC.Word.$wgo1 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Word.Word32, [GHC.Word.Word32] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s2DGX]
        let {
          sat_s2DH7 [Occ=Once] :: [GHC.Word.Word32]
          [LclId] =
              [w_s2DGX] \u []
                  case w_s2DGX of wild_s2DH2 {
                    __DEFAULT ->
                        case +# [wild_s2DH2 1#] of sat_s2DH3 {
                          __DEFAULT ->
                              case GHC.Word.$wgo1 sat_s2DH3 of {
                                (#,#) ww1_s2DH5 [Occ=Once] ww2_s2DH6 [Occ=Once] ->
                                    : [ww1_s2DH5 ww2_s2DH6];
                              };
                        };
                    4294967295# -> [] [];
                  }; } in
        let {
          sat_s2DH1 [Occ=Once] :: GHC.Word.Word32
          [LclId] =
              [w_s2DGX] \u []
                  case >=# [w_s2DGX 0#] of {
                    __DEFAULT -> GHC.Word.$wlvl1 w_s2DGX;
                    1# ->
                        case <=# [w_s2DGX 4294967295#] of {
                          __DEFAULT -> GHC.Word.$wlvl1 w_s2DGX;
                          1# ->
                              case int2Word# [w_s2DGX] of sat_s2DH0 {
                                __DEFAULT -> GHC.Word.W32# [sat_s2DH0];
                              };
                        };
                  };
        } in  (#,#) [sat_s2DH1 sat_s2DH7];

GHC.Word.$fEnumWord32_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Word.Word32]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s2DH8]
        case GHC.Word.$wgo1 w_s2DH8 of {
          (#,#) ww1_s2DHa [Occ=Once] ww2_s2DHb [Occ=Once] ->
              : [ww1_s2DHa ww2_s2DHb];
        };

GHC.Word.$fEnumWord32_$cenumFrom
  :: GHC.Word.Word32 -> [GHC.Word.Word32]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s2DHc]
        case n_s2DHc of {
          GHC.Word.W32# x#_s2DHe [Occ=Once] ->
              case word2Int# [x#_s2DHe] of x_s2DHf [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x_s2DHf 4294967295#] of {
                      __DEFAULT -> GHC.Word.$fEnumWord32_go x_s2DHf;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Word.$fEnumWord32_$csucc
                                    GHC.Word.$fEnumWord32_$cpred
                                    GHC.Word.$fEnumWord32_$ctoEnum
                                    GHC.Word.$fEnumWord32_$cfromEnum
                                    GHC.Word.$fEnumWord32_$cenumFrom
                                    GHC.Word.$fEnumWord32_$cenumFromThen
                                    GHC.Word.$fEnumWord32_$cenumFromTo
                                    GHC.Word.$fEnumWord32_$cenumFromThenTo];
GHC.Word.$fEnumWord32_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> [GHC.Word.Word32]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Word.$fEnumWord32 GHC.Word.$fBoundedWord32 eta_B2 eta_B1;

GHC.Word.$fBitsWord7 :: GHC.Word.Word64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W64#! [0##];

GHC.Word.$fNumWord3 :: GHC.Word.Word64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W64#! [1##];

GHC.Word.eqWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DHh ds1_s2DHi]
        case ds_s2DHh of {
          GHC.Word.W64# x_s2DHk [Occ=Once] ->
              case ds1_s2DHi of {
                GHC.Word.W64# y_s2DHm [Occ=Once] ->
                    case eqWord# [x_s2DHk y_s2DHm] of sat_s2DHn {
                      __DEFAULT -> tagToEnum# [sat_s2DHn];
                    };
              };
        };

GHC.Word.$fNumWord64_$csignum :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DHo]
        case ds_s2DHo of {
          GHC.Word.W64# x_s2DHq [Occ=Once!] ->
              case x_s2DHq of {
                __DEFAULT -> GHC.Word.$fNumWord3;
                0## -> GHC.Word.$fBitsWord7;
              };
        };

GHC.Word.$fNumWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Word.$fNumWord64_$c+
                                  GHC.Word.$fNumWord64_$c-
                                  GHC.Word.$fNumWord64_$c*
                                  GHC.Word.$fNumWord64_$cnegate
                                  GHC.Word.$fNumWord64_$cabs
                                  GHC.Word.$fNumWord64_$csignum
                                  GHC.Word.$fNumWord64_$cfromInteger];

GHC.Word.$fEnumWord7 :: GHC.Word.Word64
[GblId, Str=x] =
    [] \u [] GHC.Enum.predError lvl_r2uFF;

GHC.Word.$fEnumWord9 :: GHC.Word.Word64
[GblId, Str=x] =
    [] \u [] GHC.Enum.succError lvl_r2uFF;

GHC.Word.neWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DHs ds1_s2DHt]
        case ds_s2DHs of {
          GHC.Word.W64# x_s2DHv [Occ=Once] ->
              case ds1_s2DHt of {
                GHC.Word.W64# y_s2DHx [Occ=Once] ->
                    case neWord# [x_s2DHv y_s2DHx] of sat_s2DHy {
                      __DEFAULT -> tagToEnum# [sat_s2DHy];
                    };
              };
        };

GHC.Word.$fIntegralWord64_$cdivMod
  :: GHC.Word.Word64
     -> GHC.Word.Word64 -> (GHC.Word.Word64, GHC.Word.Word64)
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s2DHz y_s2DHA]
        case ds_s2DHz of {
          GHC.Word.W64# x#_s2DHC ->
              case y_s2DHA of {
                GHC.Word.W64# y#_s2DHE [Occ=Once!] ->
                    case y#_s2DHE of wild2_s2DHF {
                      __DEFAULT ->
                          let {
                            sat_s2DHJ [Occ=Once] :: GHC.Word.Word64
                            [LclId] =
                                [x#_s2DHC wild2_s2DHF] \u []
                                    case remWord# [x#_s2DHC wild2_s2DHF] of wild3_s2DHI {
                                      __DEFAULT -> GHC.Word.W64# [wild3_s2DHI];
                                    }; } in
                          let {
                            sat_s2DHH [Occ=Once] :: GHC.Word.Word64
                            [LclId] =
                                [x#_s2DHC wild2_s2DHF] \u []
                                    case quotWord# [x#_s2DHC wild2_s2DHF] of wild3_s2DHG {
                                      __DEFAULT -> GHC.Word.W64# [wild3_s2DHG];
                                    };
                          } in  (,) [sat_s2DHH sat_s2DHJ];
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord64_$cquotRem
  :: GHC.Word.Word64
     -> GHC.Word.Word64 -> (GHC.Word.Word64, GHC.Word.Word64)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DHK y_s2DHL]
        case ds_s2DHK of {
          GHC.Word.W64# x#_s2DHN [Occ=Once] ->
              case y_s2DHL of {
                GHC.Word.W64# y#_s2DHP [Occ=Once!] ->
                    case y#_s2DHP of wild2_s2DHQ {
                      __DEFAULT ->
                          case quotRemWord# [x#_s2DHN wild2_s2DHQ] of {
                            (#,#) ipv_s2DHS [Occ=Once] ipv1_s2DHT [Occ=Once] ->
                                let {
                                  sat_s2DHV [Occ=Once] :: GHC.Word.Word64
                                  [LclId] =
                                      CCCS GHC.Word.W64#! [ipv1_s2DHT]; } in
                                let {
                                  sat_s2DHU [Occ=Once] :: GHC.Word.Word64
                                  [LclId] =
                                      CCCS GHC.Word.W64#! [ipv_s2DHS];
                                } in  (,) [sat_s2DHU sat_s2DHV];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord64_$cmod
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DHW y_s2DHX]
        case ds_s2DHW of {
          GHC.Word.W64# x#_s2DHZ [Occ=Once] ->
              case y_s2DHX of {
                GHC.Word.W64# y#_s2DI1 [Occ=Once!] ->
                    case y#_s2DI1 of wild2_s2DI2 {
                      __DEFAULT ->
                          case remWord# [x#_s2DHZ wild2_s2DI2] of wild3_s2DI3 {
                            __DEFAULT -> GHC.Word.W64# [wild3_s2DI3];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord64_$cdiv
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DI4 y_s2DI5]
        case ds_s2DI4 of {
          GHC.Word.W64# x#_s2DI7 [Occ=Once] ->
              case y_s2DI5 of {
                GHC.Word.W64# y#_s2DI9 [Occ=Once!] ->
                    case y#_s2DI9 of wild2_s2DIa {
                      __DEFAULT ->
                          case quotWord# [x#_s2DI7 wild2_s2DIa] of wild3_s2DIb {
                            __DEFAULT -> GHC.Word.W64# [wild3_s2DIb];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fEqWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Word.eqWord64
                                     GHC.Word.neWord64];

GHC.Word.$fEnumWord64_$cpred :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2DIc]
        case x_s2DIc of {
          GHC.Word.W64# x1_s2DIe [Occ=Once!] ->
              case x1_s2DIe of wild1_s2DIf {
                __DEFAULT ->
                    case minusWord# [wild1_s2DIf 1##] of sat_s2DIg {
                      __DEFAULT -> GHC.Word.W64# [sat_s2DIg];
                    };
                0## -> GHC.Word.$fEnumWord7;
              };
        };

GHC.Word.$fBoundedWord64_$cmaxBound :: GHC.Word.Word64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W64#! [18446744073709551615##];

GHC.Word.$fBoundedWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Word.$fBitsWord7
                                       GHC.Word.$fBoundedWord64_$cmaxBound];

GHC.Word.$fEnumWord64_$csucc :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2DIh]
        case x_s2DIh of {
          GHC.Word.W64# x1_s2DIj [Occ=Once!] ->
              case x1_s2DIj of wild1_s2DIk {
                __DEFAULT ->
                    case plusWord# [wild1_s2DIk 1##] of sat_s2DIl {
                      __DEFAULT -> GHC.Word.W64# [sat_s2DIl];
                    };
                18446744073709551615## -> GHC.Word.$fEnumWord9;
              };
        };

GHC.Word.$wlvl2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Word.Word64
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s2DIm]
        GHC.Enum.$wtoEnumError
            GHC.Word.$fShowWord64
            lvl_r2uFF
            ww_s2DIm
            GHC.Word.$fBitsWord7
            GHC.Word.$fBoundedWord64_$cmaxBound;

GHC.Word.$fEnumWord6 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Word.Word64
[GblId, Arity=1, Str=<B,1*U(U)>x, Unf=OtherCon []] =
    [] \r [w_s2DIn]
        case w_s2DIn of {
          GHC.Types.I# ww1_s2DIp [Occ=Once] -> GHC.Word.$wlvl2 ww1_s2DIp;
        };

GHC.Word.$fEnumWord64_$ctoEnum :: GHC.Types.Int -> GHC.Word.Word64
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [i_s2DIq]
        case i_s2DIq of {
          GHC.Types.I# i#_s2DIs ->
              case >=# [i#_s2DIs 0#] of {
                __DEFAULT -> GHC.Word.$wlvl2 i#_s2DIs;
                1# ->
                    case int2Word# [i#_s2DIs] of sat_s2DIu {
                      __DEFAULT -> GHC.Word.W64# [sat_s2DIu];
                    };
              };
        };

GHC.Word.gtWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DIv ds1_s2DIw]
        case ds_s2DIv of {
          GHC.Word.W64# x_s2DIy [Occ=Once] ->
              case ds1_s2DIw of {
                GHC.Word.W64# y_s2DIA [Occ=Once] ->
                    case gtWord# [x_s2DIy y_s2DIA] of sat_s2DIB {
                      __DEFAULT -> tagToEnum# [sat_s2DIB];
                    };
              };
        };

GHC.Word.geWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DIC ds1_s2DID]
        case ds_s2DIC of {
          GHC.Word.W64# x_s2DIF [Occ=Once] ->
              case ds1_s2DID of {
                GHC.Word.W64# y_s2DIH [Occ=Once] ->
                    case geWord# [x_s2DIF y_s2DIH] of sat_s2DII {
                      __DEFAULT -> tagToEnum# [sat_s2DII];
                    };
              };
        };

GHC.Word.ltWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DIJ ds1_s2DIK]
        case ds_s2DIJ of {
          GHC.Word.W64# x_s2DIM [Occ=Once] ->
              case ds1_s2DIK of {
                GHC.Word.W64# y_s2DIO [Occ=Once] ->
                    case ltWord# [x_s2DIM y_s2DIO] of sat_s2DIP {
                      __DEFAULT -> tagToEnum# [sat_s2DIP];
                    };
              };
        };

GHC.Word.leWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DIQ ds1_s2DIR]
        case ds_s2DIQ of {
          GHC.Word.W64# x_s2DIT [Occ=Once] ->
              case ds1_s2DIR of {
                GHC.Word.W64# y_s2DIV [Occ=Once] ->
                    case leWord# [x_s2DIT y_s2DIV] of sat_s2DIW {
                      __DEFAULT -> tagToEnum# [sat_s2DIW];
                    };
              };
        };

GHC.Word.$fOrdWord64_$cmin
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2DIX y_s2DIY]
        case x_s2DIX of wild_s2DIZ {
          GHC.Word.W64# x1_s2DJ0 [Occ=Once] ->
              case y_s2DIY of wild1_s2DJ1 {
                GHC.Word.W64# y1_s2DJ2 [Occ=Once] ->
                    case leWord# [x1_s2DJ0 y1_s2DJ2] of {
                      __DEFAULT -> wild1_s2DJ1;
                      1# -> wild_s2DIZ;
                    };
              };
        };

GHC.Word.$fOrdWord64_$cmax
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2DJ4 y_s2DJ5]
        case x_s2DJ4 of wild_s2DJ6 {
          GHC.Word.W64# x1_s2DJ7 [Occ=Once] ->
              case y_s2DJ5 of wild1_s2DJ8 {
                GHC.Word.W64# y1_s2DJ9 [Occ=Once] ->
                    case leWord# [x1_s2DJ7 y1_s2DJ9] of {
                      __DEFAULT -> wild_s2DJ6;
                      1# -> wild1_s2DJ8;
                    };
              };
        };

GHC.Word.$fOrdWord64_$ccompare
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2DJb y_s2DJc]
        case x_s2DJb of {
          GHC.Word.W64# x1_s2DJe ->
              case y_s2DJc of {
                GHC.Word.W64# y1_s2DJg ->
                    case eqWord# [x1_s2DJe y1_s2DJg] of {
                      __DEFAULT ->
                          case leWord# [x1_s2DJe y1_s2DJg] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Word.$fOrdWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Word.$fEqWord64
                                      GHC.Word.$fOrdWord64_$ccompare
                                      GHC.Word.ltWord64
                                      GHC.Word.leWord64
                                      GHC.Word.gtWord64
                                      GHC.Word.geWord64
                                      GHC.Word.$fOrdWord64_$cmax
                                      GHC.Word.$fOrdWord64_$cmin];

GHC.Word.$fRealWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Word.$fNumWord64
                                    GHC.Word.$fOrdWord64
                                    GHC.Word.$fRealWord64_$ctoRational];

GHC.Word.$fEnumWord64_$cfromEnum
  :: GHC.Word.Word64 -> GHC.Types.Int
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_s2DJj]
        case x_s2DJj of wild_s2DJk {
          GHC.Word.W64# x#_s2DJl ->
              case leWord# [x#_s2DJl 9223372036854775807##] of {
                __DEFAULT -> GHC.Word.$fEnumWord5 wild_s2DJk;
                1# ->
                    case word2Int# [x#_s2DJl] of sat_s2DJn {
                      __DEFAULT -> GHC.Types.I# [sat_s2DJn];
                    };
              };
        };

GHC.Word.$fEnumWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Word.$fEnumWord64_$csucc
                                    GHC.Word.$fEnumWord64_$cpred
                                    GHC.Word.$fEnumWord64_$ctoEnum
                                    GHC.Word.$fEnumWord64_$cfromEnum
                                    GHC.Word.$fEnumWord64_$cenumFrom
                                    GHC.Word.$fEnumWord64_$cenumFromThen
                                    GHC.Word.$fEnumWord64_$cenumFromTo
                                    GHC.Word.$fEnumWord64_$cenumFromThenTo];
GHC.Word.$fIntegralWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Word.$fRealWord64
                                        GHC.Word.$fEnumWord64
                                        GHC.Word.$fIntegralWord64_$cdiv
                                        GHC.Word.$fIntegralWord64_$cmod
                                        GHC.Word.$fIntegralWord64_$cdiv
                                        GHC.Word.$fIntegralWord64_$cmod
                                        GHC.Word.$fIntegralWord64_$cquotRem
                                        GHC.Word.$fIntegralWord64_$cdivMod
                                        GHC.Word.$fIntegralWord64_$ctoInteger];
GHC.Word.$fEnumWord64_$cenumFromThenTo [Occ=LoopBreaker]
  :: GHC.Word.Word64
     -> GHC.Word.Word64 -> GHC.Word.Word64 -> [GHC.Word.Word64]
[GblId, Arity=3, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Real.integralEnumFromThenTo
            GHC.Word.$fIntegralWord64 eta_B3 eta_B2 eta_B1;
GHC.Word.$fEnumWord64_$cenumFromTo [Occ=LoopBreaker]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> [GHC.Word.Word64]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Real.integralEnumFromTo
            GHC.Word.$fIntegralWord64 eta_B2 eta_B1;
GHC.Word.$fEnumWord64_$cenumFrom [Occ=LoopBreaker]
  :: GHC.Word.Word64 -> [GHC.Word.Word64]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Real.integralEnumFrom
            GHC.Word.$fIntegralWord64 GHC.Word.$fBoundedWord64 eta_B1;
GHC.Word.$fEnumWord64_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> [GHC.Word.Word64]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Real.integralEnumFromThen
            GHC.Word.$fIntegralWord64 GHC.Word.$fBoundedWord64 eta_B2 eta_B1;

GHC.Word.$fNumWord8_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Word.Word8
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s2DJo]
        case GHC.Integer.Type.integerToWord i_s2DJo of wild_s2DJp {
          __DEFAULT ->
              case narrow8Word# [wild_s2DJp] of sat_s2DJq {
                __DEFAULT -> GHC.Word.W8# [sat_s2DJq];
              };
        };

GHC.Word.$fNumWord8_$cabs :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_s2DJr] x_s2DJr;

GHC.Word.$fNumWord8_$cnegate :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DJs]
        case ds_s2DJs of {
          GHC.Word.W8# x#_s2DJu [Occ=Once] ->
              case word2Int# [x#_s2DJu] of sat_s2DJv {
                __DEFAULT ->
                    case negateInt# [sat_s2DJv] of sat_s2DJw {
                      __DEFAULT ->
                          case int2Word# [sat_s2DJw] of sat_s2DJx {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2DJx] of sat_s2DJy {
                                  __DEFAULT -> GHC.Word.W8# [sat_s2DJy];
                                };
                          };
                    };
              };
        };

GHC.Word.$fNumWord8_$c*
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DJz ds1_s2DJA]
        case ds_s2DJz of {
          GHC.Word.W8# x#_s2DJC [Occ=Once] ->
              case ds1_s2DJA of {
                GHC.Word.W8# y#_s2DJE [Occ=Once] ->
                    case timesWord# [x#_s2DJC y#_s2DJE] of sat_s2DJF {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2DJF] of sat_s2DJG {
                            __DEFAULT -> GHC.Word.W8# [sat_s2DJG];
                          };
                    };
              };
        };

GHC.Word.$fNumWord8_$c-
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DJH ds1_s2DJI]
        case ds_s2DJH of {
          GHC.Word.W8# x#_s2DJK [Occ=Once] ->
              case ds1_s2DJI of {
                GHC.Word.W8# y#_s2DJM [Occ=Once] ->
                    case minusWord# [x#_s2DJK y#_s2DJM] of sat_s2DJN {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2DJN] of sat_s2DJO {
                            __DEFAULT -> GHC.Word.W8# [sat_s2DJO];
                          };
                    };
              };
        };

GHC.Word.$fNumWord8_$c+
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DJP ds1_s2DJQ]
        case ds_s2DJP of {
          GHC.Word.W8# x#_s2DJS [Occ=Once] ->
              case ds1_s2DJQ of {
                GHC.Word.W8# y#_s2DJU [Occ=Once] ->
                    case plusWord# [x#_s2DJS y#_s2DJU] of sat_s2DJV {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2DJV] of sat_s2DJW {
                            __DEFAULT -> GHC.Word.W8# [sat_s2DJW];
                          };
                    };
              };
        };

GHC.Word.$ctoInteger :: GHC.Word.Word8 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DJX]
        case ds_s2DJX of {
          GHC.Word.W8# x#_s2DJZ [Occ=Once] ->
              case word2Int# [x#_s2DJZ] of sat_s2DK0 {
                __DEFAULT -> GHC.Integer.Type.smallInteger sat_s2DK0;
              };
        };

GHC.Word.$fBitsWord8_$cpopCount :: GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DK1]
        case ds_s2DK1 of {
          GHC.Word.W8# x#_s2DK3 [Occ=Once] ->
              case popCnt8# [x#_s2DK3] of sat_s2DK4 {
                __DEFAULT ->
                    case word2Int# [sat_s2DK4] of sat_s2DK5 {
                      __DEFAULT -> GHC.Types.I# [sat_s2DK5];
                    };
              };
        };

GHC.Word.$fBitsWord8_$cunsafeShiftR
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DK6 ds1_s2DK7]
        case ds_s2DK6 of {
          GHC.Word.W8# x#_s2DK9 [Occ=Once] ->
              case ds1_s2DK7 of {
                GHC.Types.I# i#_s2DKb [Occ=Once] ->
                    case uncheckedShiftRL# [x#_s2DK9 i#_s2DKb] of sat_s2DKc {
                      __DEFAULT -> GHC.Word.W8# [sat_s2DKc];
                    };
              };
        };

GHC.Word.$fBitsWord8_$cshiftR
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DKd ds1_s2DKe]
        case ds_s2DKd of {
          GHC.Word.W8# x#_s2DKg [Occ=Once] ->
              case ds1_s2DKe of {
                GHC.Types.I# i#_s2DKi ->
                    case >=# [i#_s2DKi 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftRL# [x#_s2DKg i#_s2DKi] of sat_s2DKk {
                            __DEFAULT -> GHC.Word.W8# [sat_s2DKk];
                          };
                      1# -> GHC.Word.$fBitsWord8_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord8_$cunsafeShiftL
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DKl ds1_s2DKm]
        case ds_s2DKl of {
          GHC.Word.W8# x#_s2DKo [Occ=Once] ->
              case ds1_s2DKm of {
                GHC.Types.I# i#_s2DKq [Occ=Once] ->
                    case uncheckedShiftL# [x#_s2DKo i#_s2DKq] of sat_s2DKr {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2DKr] of sat_s2DKs {
                            __DEFAULT -> GHC.Word.W8# [sat_s2DKs];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord8_$cshiftL
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DKt ds1_s2DKu]
        case ds_s2DKt of {
          GHC.Word.W8# x#_s2DKw [Occ=Once] ->
              case ds1_s2DKu of {
                GHC.Types.I# i#_s2DKy ->
                    case >=# [i#_s2DKy 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [x#_s2DKw i#_s2DKy] of sat_s2DKA {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2DKA] of sat_s2DKB {
                                  __DEFAULT -> GHC.Word.W8# [sat_s2DKB];
                                };
                          };
                      1# -> GHC.Word.$fBitsWord8_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord8_$cisSigned :: GHC.Word.Word8 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s2DKC] GHC.Types.False [];

GHC.Word.$fBitsWord8_$crotate
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DKD ds1_s2DKE]
        case ds_s2DKD of wild_s2DKF {
          GHC.Word.W8# x#_s2DKG ->
              case ds1_s2DKE of {
                GHC.Types.I# i#_s2DKI [Occ=Once] ->
                    case int2Word# [i#_s2DKI] of sat_s2DKJ {
                      __DEFAULT ->
                          case and# [sat_s2DKJ 7##] of sat_s2DKK {
                            __DEFAULT ->
                                case word2Int# [sat_s2DKK] of wild2_s2DKL {
                                  __DEFAULT ->
                                      case -# [8# wild2_s2DKL] of sat_s2DKN {
                                        __DEFAULT ->
                                            case
                                                uncheckedShiftRL# [x#_s2DKG sat_s2DKN]
                                            of
                                            sat_s2DKO
                                            { __DEFAULT ->
                                                  case
                                                      uncheckedShiftL# [x#_s2DKG wild2_s2DKL]
                                                  of
                                                  sat_s2DKM
                                                  { __DEFAULT ->
                                                        case
                                                            or# [sat_s2DKM sat_s2DKO]
                                                        of
                                                        sat_s2DKP
                                                        { __DEFAULT ->
                                                              case
                                                                  narrow8Word# [sat_s2DKP]
                                                              of
                                                              sat_s2DKQ
                                                              { __DEFAULT ->
                                                                    GHC.Word.W8# [sat_s2DKQ];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s2DKF;
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord8_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DKR ds1_s2DKS]
        case ds_s2DKR of {
          GHC.Word.W8# x#_s2DKU [Occ=Once*] ->
              case ds1_s2DKS of {
                GHC.Types.I# i#_s2DKW ->
                    case >=# [i#_s2DKW 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s2DKW] of b_s2DKY [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s2DKY 64#] of {
                                  __DEFAULT ->
                                      case uncheckedShiftRL# [x#_s2DKU b_s2DKY] of sat_s2DL0 {
                                        __DEFAULT -> GHC.Word.W8# [sat_s2DL0];
                                      };
                                  1# -> GHC.Word.$fBitsWord8_$cminBound;
                                };
                          };
                      1# ->
                          case >=# [i#_s2DKW 64#] of {
                            __DEFAULT ->
                                case uncheckedShiftL# [x#_s2DKU i#_s2DKW] of sat_s2DL2 {
                                  __DEFAULT ->
                                      case narrow8Word# [sat_s2DL2] of sat_s2DL3 {
                                        __DEFAULT -> GHC.Word.W8# [sat_s2DL3];
                                      };
                                };
                            1# -> GHC.Word.$fBitsWord8_$cminBound;
                          };
                    };
              };
        };

GHC.Word.$fBitsWord8_$cxor
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DL4 ds1_s2DL5]
        case ds_s2DL4 of {
          GHC.Word.W8# x#_s2DL7 [Occ=Once] ->
              case ds1_s2DL5 of {
                GHC.Word.W8# y#_s2DL9 [Occ=Once] ->
                    case xor# [x#_s2DL7 y#_s2DL9] of sat_s2DLa {
                      __DEFAULT -> GHC.Word.W8# [sat_s2DLa];
                    };
              };
        };

GHC.Word.$fBitsWord8_$c.|.
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DLb ds1_s2DLc]
        case ds_s2DLb of {
          GHC.Word.W8# x#_s2DLe [Occ=Once] ->
              case ds1_s2DLc of {
                GHC.Word.W8# y#_s2DLg [Occ=Once] ->
                    case or# [x#_s2DLe y#_s2DLg] of sat_s2DLh {
                      __DEFAULT -> GHC.Word.W8# [sat_s2DLh];
                    };
              };
        };

GHC.Word.$fBitsWord8_$c.&.
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DLi ds1_s2DLj]
        case ds_s2DLi of {
          GHC.Word.W8# x#_s2DLl [Occ=Once] ->
              case ds1_s2DLj of {
                GHC.Word.W8# y#_s2DLn [Occ=Once] ->
                    case and# [x#_s2DLl y#_s2DLn] of sat_s2DLo {
                      __DEFAULT -> GHC.Word.W8# [sat_s2DLo];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord8_$ccountTrailingZeros
  :: GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DLp]
        case ds_s2DLp of {
          GHC.Word.W8# x#_s2DLr [Occ=Once] ->
              case ctz8# [x#_s2DLr] of sat_s2DLs {
                __DEFAULT ->
                    case word2Int# [sat_s2DLs] of sat_s2DLt {
                      __DEFAULT -> GHC.Types.I# [sat_s2DLt];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord8_$ccountLeadingZeros
  :: GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DLu]
        case ds_s2DLu of {
          GHC.Word.W8# x#_s2DLw [Occ=Once] ->
              case clz8# [x#_s2DLw] of sat_s2DLx {
                __DEFAULT ->
                    case word2Int# [sat_s2DLx] of sat_s2DLy {
                      __DEFAULT -> GHC.Types.I# [sat_s2DLy];
                    };
              };
        };

GHC.Word.$fBitsWord9 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

GHC.Word.$fBitsWord8_$cfiniteBitSize
  :: GHC.Word.Word8 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s2DLz] GHC.Word.$fBitsWord9;

GHC.Word.$fNumWord16_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Word.Word16
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s2DLA]
        case GHC.Integer.Type.integerToWord i_s2DLA of wild_s2DLB {
          __DEFAULT ->
              case narrow16Word# [wild_s2DLB] of sat_s2DLC {
                __DEFAULT -> GHC.Word.W16# [sat_s2DLC];
              };
        };

GHC.Word.$fNumWord16_$cabs :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_s2DLD] x_s2DLD;

GHC.Word.$fNumWord16_$cnegate :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DLE]
        case ds_s2DLE of {
          GHC.Word.W16# x#_s2DLG [Occ=Once] ->
              case word2Int# [x#_s2DLG] of sat_s2DLH {
                __DEFAULT ->
                    case negateInt# [sat_s2DLH] of sat_s2DLI {
                      __DEFAULT ->
                          case int2Word# [sat_s2DLI] of sat_s2DLJ {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2DLJ] of sat_s2DLK {
                                  __DEFAULT -> GHC.Word.W16# [sat_s2DLK];
                                };
                          };
                    };
              };
        };

GHC.Word.$fNumWord16_$c*
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DLL ds1_s2DLM]
        case ds_s2DLL of {
          GHC.Word.W16# x#_s2DLO [Occ=Once] ->
              case ds1_s2DLM of {
                GHC.Word.W16# y#_s2DLQ [Occ=Once] ->
                    case timesWord# [x#_s2DLO y#_s2DLQ] of sat_s2DLR {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2DLR] of sat_s2DLS {
                            __DEFAULT -> GHC.Word.W16# [sat_s2DLS];
                          };
                    };
              };
        };

GHC.Word.$fNumWord16_$c-
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DLT ds1_s2DLU]
        case ds_s2DLT of {
          GHC.Word.W16# x#_s2DLW [Occ=Once] ->
              case ds1_s2DLU of {
                GHC.Word.W16# y#_s2DLY [Occ=Once] ->
                    case minusWord# [x#_s2DLW y#_s2DLY] of sat_s2DLZ {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2DLZ] of sat_s2DM0 {
                            __DEFAULT -> GHC.Word.W16# [sat_s2DM0];
                          };
                    };
              };
        };

GHC.Word.$fNumWord16_$c+
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DM1 ds1_s2DM2]
        case ds_s2DM1 of {
          GHC.Word.W16# x#_s2DM4 [Occ=Once] ->
              case ds1_s2DM2 of {
                GHC.Word.W16# y#_s2DM6 [Occ=Once] ->
                    case plusWord# [x#_s2DM4 y#_s2DM6] of sat_s2DM7 {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2DM7] of sat_s2DM8 {
                            __DEFAULT -> GHC.Word.W16# [sat_s2DM8];
                          };
                    };
              };
        };

GHC.Word.$ctoInteger1
  :: GHC.Word.Word16 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DM9]
        case ds_s2DM9 of {
          GHC.Word.W16# x#_s2DMb [Occ=Once] ->
              case word2Int# [x#_s2DMb] of sat_s2DMc {
                __DEFAULT -> GHC.Integer.Type.smallInteger sat_s2DMc;
              };
        };

GHC.Word.$fBitsWord16_$cpopCount
  :: GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DMd]
        case ds_s2DMd of {
          GHC.Word.W16# x#_s2DMf [Occ=Once] ->
              case popCnt16# [x#_s2DMf] of sat_s2DMg {
                __DEFAULT ->
                    case word2Int# [sat_s2DMg] of sat_s2DMh {
                      __DEFAULT -> GHC.Types.I# [sat_s2DMh];
                    };
              };
        };

GHC.Word.$fBitsWord16_$cunsafeShiftR
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DMi ds1_s2DMj]
        case ds_s2DMi of {
          GHC.Word.W16# x#_s2DMl [Occ=Once] ->
              case ds1_s2DMj of {
                GHC.Types.I# i#_s2DMn [Occ=Once] ->
                    case uncheckedShiftRL# [x#_s2DMl i#_s2DMn] of sat_s2DMo {
                      __DEFAULT -> GHC.Word.W16# [sat_s2DMo];
                    };
              };
        };

GHC.Word.$fBitsWord16_$cshiftR
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DMp ds1_s2DMq]
        case ds_s2DMp of {
          GHC.Word.W16# x#_s2DMs [Occ=Once] ->
              case ds1_s2DMq of {
                GHC.Types.I# i#_s2DMu ->
                    case >=# [i#_s2DMu 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftRL# [x#_s2DMs i#_s2DMu] of sat_s2DMw {
                            __DEFAULT -> GHC.Word.W16# [sat_s2DMw];
                          };
                      1# -> GHC.Word.$fBitsWord16_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord16_$cunsafeShiftL
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DMx ds1_s2DMy]
        case ds_s2DMx of {
          GHC.Word.W16# x#_s2DMA [Occ=Once] ->
              case ds1_s2DMy of {
                GHC.Types.I# i#_s2DMC [Occ=Once] ->
                    case uncheckedShiftL# [x#_s2DMA i#_s2DMC] of sat_s2DMD {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2DMD] of sat_s2DME {
                            __DEFAULT -> GHC.Word.W16# [sat_s2DME];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord16_$cshiftL
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DMF ds1_s2DMG]
        case ds_s2DMF of {
          GHC.Word.W16# x#_s2DMI [Occ=Once] ->
              case ds1_s2DMG of {
                GHC.Types.I# i#_s2DMK ->
                    case >=# [i#_s2DMK 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [x#_s2DMI i#_s2DMK] of sat_s2DMM {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2DMM] of sat_s2DMN {
                                  __DEFAULT -> GHC.Word.W16# [sat_s2DMN];
                                };
                          };
                      1# -> GHC.Word.$fBitsWord16_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord16_$cisSigned
  :: GHC.Word.Word16 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s2DMO] GHC.Types.False [];

GHC.Word.$fBitsWord16_$crotate
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DMP ds1_s2DMQ]
        case ds_s2DMP of wild_s2DMR {
          GHC.Word.W16# x#_s2DMS ->
              case ds1_s2DMQ of {
                GHC.Types.I# i#_s2DMU [Occ=Once] ->
                    case int2Word# [i#_s2DMU] of sat_s2DMV {
                      __DEFAULT ->
                          case and# [sat_s2DMV 15##] of sat_s2DMW {
                            __DEFAULT ->
                                case word2Int# [sat_s2DMW] of wild2_s2DMX {
                                  __DEFAULT ->
                                      case -# [16# wild2_s2DMX] of sat_s2DMZ {
                                        __DEFAULT ->
                                            case
                                                uncheckedShiftRL# [x#_s2DMS sat_s2DMZ]
                                            of
                                            sat_s2DN0
                                            { __DEFAULT ->
                                                  case
                                                      uncheckedShiftL# [x#_s2DMS wild2_s2DMX]
                                                  of
                                                  sat_s2DMY
                                                  { __DEFAULT ->
                                                        case
                                                            or# [sat_s2DMY sat_s2DN0]
                                                        of
                                                        sat_s2DN1
                                                        { __DEFAULT ->
                                                              case
                                                                  narrow16Word# [sat_s2DN1]
                                                              of
                                                              sat_s2DN2
                                                              { __DEFAULT ->
                                                                    GHC.Word.W16# [sat_s2DN2];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s2DMR;
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord16_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DN3 ds1_s2DN4]
        case ds_s2DN3 of {
          GHC.Word.W16# x#_s2DN6 [Occ=Once*] ->
              case ds1_s2DN4 of {
                GHC.Types.I# i#_s2DN8 ->
                    case >=# [i#_s2DN8 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s2DN8] of b_s2DNa [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s2DNa 64#] of {
                                  __DEFAULT ->
                                      case uncheckedShiftRL# [x#_s2DN6 b_s2DNa] of sat_s2DNc {
                                        __DEFAULT -> GHC.Word.W16# [sat_s2DNc];
                                      };
                                  1# -> GHC.Word.$fBitsWord16_$cminBound;
                                };
                          };
                      1# ->
                          case >=# [i#_s2DN8 64#] of {
                            __DEFAULT ->
                                case uncheckedShiftL# [x#_s2DN6 i#_s2DN8] of sat_s2DNe {
                                  __DEFAULT ->
                                      case narrow16Word# [sat_s2DNe] of sat_s2DNf {
                                        __DEFAULT -> GHC.Word.W16# [sat_s2DNf];
                                      };
                                };
                            1# -> GHC.Word.$fBitsWord16_$cminBound;
                          };
                    };
              };
        };

GHC.Word.$fBitsWord16_$cxor
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DNg ds1_s2DNh]
        case ds_s2DNg of {
          GHC.Word.W16# x#_s2DNj [Occ=Once] ->
              case ds1_s2DNh of {
                GHC.Word.W16# y#_s2DNl [Occ=Once] ->
                    case xor# [x#_s2DNj y#_s2DNl] of sat_s2DNm {
                      __DEFAULT -> GHC.Word.W16# [sat_s2DNm];
                    };
              };
        };

GHC.Word.$fBitsWord16_$c.|.
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DNn ds1_s2DNo]
        case ds_s2DNn of {
          GHC.Word.W16# x#_s2DNq [Occ=Once] ->
              case ds1_s2DNo of {
                GHC.Word.W16# y#_s2DNs [Occ=Once] ->
                    case or# [x#_s2DNq y#_s2DNs] of sat_s2DNt {
                      __DEFAULT -> GHC.Word.W16# [sat_s2DNt];
                    };
              };
        };

GHC.Word.$fBitsWord16_$c.&.
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DNu ds1_s2DNv]
        case ds_s2DNu of {
          GHC.Word.W16# x#_s2DNx [Occ=Once] ->
              case ds1_s2DNv of {
                GHC.Word.W16# y#_s2DNz [Occ=Once] ->
                    case and# [x#_s2DNx y#_s2DNz] of sat_s2DNA {
                      __DEFAULT -> GHC.Word.W16# [sat_s2DNA];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord16_$ccountTrailingZeros
  :: GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DNB]
        case ds_s2DNB of {
          GHC.Word.W16# x#_s2DND [Occ=Once] ->
              case ctz16# [x#_s2DND] of sat_s2DNE {
                __DEFAULT ->
                    case word2Int# [sat_s2DNE] of sat_s2DNF {
                      __DEFAULT -> GHC.Types.I# [sat_s2DNF];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord16_$ccountLeadingZeros
  :: GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DNG]
        case ds_s2DNG of {
          GHC.Word.W16# x#_s2DNI [Occ=Once] ->
              case clz16# [x#_s2DNI] of sat_s2DNJ {
                __DEFAULT ->
                    case word2Int# [sat_s2DNJ] of sat_s2DNK {
                      __DEFAULT -> GHC.Types.I# [sat_s2DNK];
                    };
              };
        };

GHC.Word.$fBitsWord1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

GHC.Word.$fBitsWord16_$cfiniteBitSize
  :: GHC.Word.Word16 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s2DNL] GHC.Word.$fBitsWord1;

GHC.Word.$fNumWord32_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Word.Word32
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s2DNM]
        case GHC.Integer.Type.integerToWord i_s2DNM of wild_s2DNN {
          __DEFAULT ->
              case narrow32Word# [wild_s2DNN] of sat_s2DNO {
                __DEFAULT -> GHC.Word.W32# [sat_s2DNO];
              };
        };

GHC.Word.$fNumWord32_$cabs :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_s2DNP] x_s2DNP;

GHC.Word.$fNumWord32_$cnegate :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DNQ]
        case ds_s2DNQ of {
          GHC.Word.W32# x#_s2DNS [Occ=Once] ->
              case word2Int# [x#_s2DNS] of sat_s2DNT {
                __DEFAULT ->
                    case negateInt# [sat_s2DNT] of sat_s2DNU {
                      __DEFAULT ->
                          case int2Word# [sat_s2DNU] of sat_s2DNV {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2DNV] of sat_s2DNW {
                                  __DEFAULT -> GHC.Word.W32# [sat_s2DNW];
                                };
                          };
                    };
              };
        };

GHC.Word.$fNumWord32_$c*
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DNX ds1_s2DNY]
        case ds_s2DNX of {
          GHC.Word.W32# x#_s2DO0 [Occ=Once] ->
              case ds1_s2DNY of {
                GHC.Word.W32# y#_s2DO2 [Occ=Once] ->
                    case timesWord# [x#_s2DO0 y#_s2DO2] of sat_s2DO3 {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2DO3] of sat_s2DO4 {
                            __DEFAULT -> GHC.Word.W32# [sat_s2DO4];
                          };
                    };
              };
        };

GHC.Word.$fNumWord32_$c-
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DO5 ds1_s2DO6]
        case ds_s2DO5 of {
          GHC.Word.W32# x#_s2DO8 [Occ=Once] ->
              case ds1_s2DO6 of {
                GHC.Word.W32# y#_s2DOa [Occ=Once] ->
                    case minusWord# [x#_s2DO8 y#_s2DOa] of sat_s2DOb {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2DOb] of sat_s2DOc {
                            __DEFAULT -> GHC.Word.W32# [sat_s2DOc];
                          };
                    };
              };
        };

GHC.Word.$fNumWord32_$c+
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DOd ds1_s2DOe]
        case ds_s2DOd of {
          GHC.Word.W32# x#_s2DOg [Occ=Once] ->
              case ds1_s2DOe of {
                GHC.Word.W32# y#_s2DOi [Occ=Once] ->
                    case plusWord# [x#_s2DOg y#_s2DOi] of sat_s2DOj {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2DOj] of sat_s2DOk {
                            __DEFAULT -> GHC.Word.W32# [sat_s2DOk];
                          };
                    };
              };
        };

GHC.Word.$ctoInteger2
  :: GHC.Word.Word32 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DOl]
        case ds_s2DOl of {
          GHC.Word.W32# x#_s2DOn [Occ=Once] ->
              case word2Int# [x#_s2DOn] of sat_s2DOo {
                __DEFAULT -> GHC.Integer.Type.smallInteger sat_s2DOo;
              };
        };

GHC.Word.$fBitsWord32_$cpopCount
  :: GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DOp]
        case ds_s2DOp of {
          GHC.Word.W32# x#_s2DOr [Occ=Once] ->
              case popCnt32# [x#_s2DOr] of sat_s2DOs {
                __DEFAULT ->
                    case word2Int# [sat_s2DOs] of sat_s2DOt {
                      __DEFAULT -> GHC.Types.I# [sat_s2DOt];
                    };
              };
        };

GHC.Word.$fBitsWord32_$cunsafeShiftR
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DOu ds1_s2DOv]
        case ds_s2DOu of {
          GHC.Word.W32# x#_s2DOx [Occ=Once] ->
              case ds1_s2DOv of {
                GHC.Types.I# i#_s2DOz [Occ=Once] ->
                    case uncheckedShiftRL# [x#_s2DOx i#_s2DOz] of sat_s2DOA {
                      __DEFAULT -> GHC.Word.W32# [sat_s2DOA];
                    };
              };
        };

GHC.Word.$fBitsWord32_$cshiftR
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DOB ds1_s2DOC]
        case ds_s2DOB of {
          GHC.Word.W32# x#_s2DOE [Occ=Once] ->
              case ds1_s2DOC of {
                GHC.Types.I# i#_s2DOG ->
                    case >=# [i#_s2DOG 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftRL# [x#_s2DOE i#_s2DOG] of sat_s2DOI {
                            __DEFAULT -> GHC.Word.W32# [sat_s2DOI];
                          };
                      1# -> GHC.Word.$fBitsWord32_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord32_$cunsafeShiftL
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DOJ ds1_s2DOK]
        case ds_s2DOJ of {
          GHC.Word.W32# x#_s2DOM [Occ=Once] ->
              case ds1_s2DOK of {
                GHC.Types.I# i#_s2DOO [Occ=Once] ->
                    case uncheckedShiftL# [x#_s2DOM i#_s2DOO] of sat_s2DOP {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2DOP] of sat_s2DOQ {
                            __DEFAULT -> GHC.Word.W32# [sat_s2DOQ];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord32_$cshiftL
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DOR ds1_s2DOS]
        case ds_s2DOR of {
          GHC.Word.W32# x#_s2DOU [Occ=Once] ->
              case ds1_s2DOS of {
                GHC.Types.I# i#_s2DOW ->
                    case >=# [i#_s2DOW 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [x#_s2DOU i#_s2DOW] of sat_s2DOY {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2DOY] of sat_s2DOZ {
                                  __DEFAULT -> GHC.Word.W32# [sat_s2DOZ];
                                };
                          };
                      1# -> GHC.Word.$fBitsWord32_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord32_$cisSigned
  :: GHC.Word.Word32 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s2DP0] GHC.Types.False [];

GHC.Word.$fBitsWord32_$crotate
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DP1 ds1_s2DP2]
        case ds_s2DP1 of wild_s2DP3 {
          GHC.Word.W32# x#_s2DP4 ->
              case ds1_s2DP2 of {
                GHC.Types.I# i#_s2DP6 [Occ=Once] ->
                    case int2Word# [i#_s2DP6] of sat_s2DP7 {
                      __DEFAULT ->
                          case and# [sat_s2DP7 31##] of sat_s2DP8 {
                            __DEFAULT ->
                                case word2Int# [sat_s2DP8] of wild2_s2DP9 {
                                  __DEFAULT ->
                                      case -# [32# wild2_s2DP9] of sat_s2DPb {
                                        __DEFAULT ->
                                            case
                                                uncheckedShiftRL# [x#_s2DP4 sat_s2DPb]
                                            of
                                            sat_s2DPc
                                            { __DEFAULT ->
                                                  case
                                                      uncheckedShiftL# [x#_s2DP4 wild2_s2DP9]
                                                  of
                                                  sat_s2DPa
                                                  { __DEFAULT ->
                                                        case
                                                            or# [sat_s2DPa sat_s2DPc]
                                                        of
                                                        sat_s2DPd
                                                        { __DEFAULT ->
                                                              case
                                                                  narrow32Word# [sat_s2DPd]
                                                              of
                                                              sat_s2DPe
                                                              { __DEFAULT ->
                                                                    GHC.Word.W32# [sat_s2DPe];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s2DP3;
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord32_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DPf ds1_s2DPg]
        case ds_s2DPf of {
          GHC.Word.W32# x#_s2DPi [Occ=Once*] ->
              case ds1_s2DPg of {
                GHC.Types.I# i#_s2DPk ->
                    case >=# [i#_s2DPk 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s2DPk] of b_s2DPm [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s2DPm 64#] of {
                                  __DEFAULT ->
                                      case uncheckedShiftRL# [x#_s2DPi b_s2DPm] of sat_s2DPo {
                                        __DEFAULT -> GHC.Word.W32# [sat_s2DPo];
                                      };
                                  1# -> GHC.Word.$fBitsWord32_$cminBound;
                                };
                          };
                      1# ->
                          case >=# [i#_s2DPk 64#] of {
                            __DEFAULT ->
                                case uncheckedShiftL# [x#_s2DPi i#_s2DPk] of sat_s2DPq {
                                  __DEFAULT ->
                                      case narrow32Word# [sat_s2DPq] of sat_s2DPr {
                                        __DEFAULT -> GHC.Word.W32# [sat_s2DPr];
                                      };
                                };
                            1# -> GHC.Word.$fBitsWord32_$cminBound;
                          };
                    };
              };
        };

GHC.Word.$fBitsWord32_$cxor
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DPs ds1_s2DPt]
        case ds_s2DPs of {
          GHC.Word.W32# x#_s2DPv [Occ=Once] ->
              case ds1_s2DPt of {
                GHC.Word.W32# y#_s2DPx [Occ=Once] ->
                    case xor# [x#_s2DPv y#_s2DPx] of sat_s2DPy {
                      __DEFAULT -> GHC.Word.W32# [sat_s2DPy];
                    };
              };
        };

GHC.Word.$fBitsWord32_$c.|.
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DPz ds1_s2DPA]
        case ds_s2DPz of {
          GHC.Word.W32# x#_s2DPC [Occ=Once] ->
              case ds1_s2DPA of {
                GHC.Word.W32# y#_s2DPE [Occ=Once] ->
                    case or# [x#_s2DPC y#_s2DPE] of sat_s2DPF {
                      __DEFAULT -> GHC.Word.W32# [sat_s2DPF];
                    };
              };
        };

GHC.Word.$fBitsWord32_$c.&.
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DPG ds1_s2DPH]
        case ds_s2DPG of {
          GHC.Word.W32# x#_s2DPJ [Occ=Once] ->
              case ds1_s2DPH of {
                GHC.Word.W32# y#_s2DPL [Occ=Once] ->
                    case and# [x#_s2DPJ y#_s2DPL] of sat_s2DPM {
                      __DEFAULT -> GHC.Word.W32# [sat_s2DPM];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros
  :: GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DPN]
        case ds_s2DPN of {
          GHC.Word.W32# x#_s2DPP [Occ=Once] ->
              case ctz32# [x#_s2DPP] of sat_s2DPQ {
                __DEFAULT ->
                    case word2Int# [sat_s2DPQ] of sat_s2DPR {
                      __DEFAULT -> GHC.Types.I# [sat_s2DPR];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros
  :: GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DPS]
        case ds_s2DPS of {
          GHC.Word.W32# x#_s2DPU [Occ=Once] ->
              case clz32# [x#_s2DPU] of sat_s2DPV {
                __DEFAULT ->
                    case word2Int# [sat_s2DPV] of sat_s2DPW {
                      __DEFAULT -> GHC.Types.I# [sat_s2DPW];
                    };
              };
        };

GHC.Word.$fBitsWord3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [32#];

GHC.Word.$fBitsWord32_$cfiniteBitSize
  :: GHC.Word.Word32 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s2DPX] GHC.Word.$fBitsWord3;

GHC.Word.$fBitsWord64_$cpopCount
  :: GHC.Word.Word64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DPY]
        case ds_s2DPY of {
          GHC.Word.W64# x#_s2DQ0 [Occ=Once] ->
              case popCnt64# [x#_s2DQ0] of sat_s2DQ1 {
                __DEFAULT ->
                    case word2Int# [sat_s2DQ1] of sat_s2DQ2 {
                      __DEFAULT -> GHC.Types.I# [sat_s2DQ2];
                    };
              };
        };

GHC.Word.$fBitsWord64_$cunsafeShiftR
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DQ3 ds1_s2DQ4]
        case ds_s2DQ3 of {
          GHC.Word.W64# x#_s2DQ6 [Occ=Once] ->
              case ds1_s2DQ4 of {
                GHC.Types.I# i#_s2DQ8 [Occ=Once] ->
                    case uncheckedShiftRL# [x#_s2DQ6 i#_s2DQ8] of sat_s2DQ9 {
                      __DEFAULT -> GHC.Word.W64# [sat_s2DQ9];
                    };
              };
        };

GHC.Word.$fBitsWord64_$cshiftR
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DQa ds1_s2DQb]
        case ds_s2DQa of {
          GHC.Word.W64# x#_s2DQd [Occ=Once] ->
              case ds1_s2DQb of {
                GHC.Types.I# i#_s2DQf ->
                    case >=# [i#_s2DQf 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftRL# [x#_s2DQd i#_s2DQf] of sat_s2DQh {
                            __DEFAULT -> GHC.Word.W64# [sat_s2DQh];
                          };
                      1# -> GHC.Word.$fBitsWord7;
                    };
              };
        };

GHC.Word.$fBitsWord64_$cunsafeShiftL
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DQi ds1_s2DQj]
        case ds_s2DQi of {
          GHC.Word.W64# x#_s2DQl [Occ=Once] ->
              case ds1_s2DQj of {
                GHC.Types.I# i#_s2DQn [Occ=Once] ->
                    case uncheckedShiftL# [x#_s2DQl i#_s2DQn] of sat_s2DQo {
                      __DEFAULT -> GHC.Word.W64# [sat_s2DQo];
                    };
              };
        };

GHC.Word.$fBitsWord64_$cshiftL
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DQp ds1_s2DQq]
        case ds_s2DQp of {
          GHC.Word.W64# x#_s2DQs [Occ=Once] ->
              case ds1_s2DQq of {
                GHC.Types.I# i#_s2DQu ->
                    case >=# [i#_s2DQu 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [x#_s2DQs i#_s2DQu] of sat_s2DQw {
                            __DEFAULT -> GHC.Word.W64# [sat_s2DQw];
                          };
                      1# -> GHC.Word.$fBitsWord7;
                    };
              };
        };

GHC.Word.$fBitsWord64_$cisSigned
  :: GHC.Word.Word64 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s2DQx] GHC.Types.False [];

GHC.Word.$fBitsWord64_$crotate
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DQy ds1_s2DQz]
        case ds_s2DQy of wild_s2DQA {
          GHC.Word.W64# x#_s2DQB ->
              case ds1_s2DQz of {
                GHC.Types.I# i#_s2DQD [Occ=Once] ->
                    case int2Word# [i#_s2DQD] of sat_s2DQE {
                      __DEFAULT ->
                          case and# [sat_s2DQE 63##] of sat_s2DQF {
                            __DEFAULT ->
                                case word2Int# [sat_s2DQF] of wild2_s2DQG {
                                  __DEFAULT ->
                                      case -# [64# wild2_s2DQG] of sat_s2DQI {
                                        __DEFAULT ->
                                            case
                                                uncheckedShiftRL# [x#_s2DQB sat_s2DQI]
                                            of
                                            sat_s2DQJ
                                            { __DEFAULT ->
                                                  case
                                                      uncheckedShiftL# [x#_s2DQB wild2_s2DQG]
                                                  of
                                                  sat_s2DQH
                                                  { __DEFAULT ->
                                                        case
                                                            or# [sat_s2DQH sat_s2DQJ]
                                                        of
                                                        sat_s2DQK
                                                        { __DEFAULT -> GHC.Word.W64# [sat_s2DQK];
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s2DQA;
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord64_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DQL ds1_s2DQM]
        case ds_s2DQL of {
          GHC.Word.W64# x#_s2DQO [Occ=Once*] ->
              case ds1_s2DQM of {
                GHC.Types.I# i#_s2DQQ ->
                    case >=# [i#_s2DQQ 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s2DQQ] of b_s2DQS [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s2DQS 64#] of {
                                  __DEFAULT ->
                                      case uncheckedShiftRL# [x#_s2DQO b_s2DQS] of sat_s2DQU {
                                        __DEFAULT -> GHC.Word.W64# [sat_s2DQU];
                                      };
                                  1# -> GHC.Word.$fBitsWord7;
                                };
                          };
                      1# ->
                          case >=# [i#_s2DQQ 64#] of {
                            __DEFAULT ->
                                case uncheckedShiftL# [x#_s2DQO i#_s2DQQ] of sat_s2DQW {
                                  __DEFAULT -> GHC.Word.W64# [sat_s2DQW];
                                };
                            1# -> GHC.Word.$fBitsWord7;
                          };
                    };
              };
        };

GHC.Word.$fBitsWord64_$cxor
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DQX ds1_s2DQY]
        case ds_s2DQX of {
          GHC.Word.W64# x#_s2DR0 [Occ=Once] ->
              case ds1_s2DQY of {
                GHC.Word.W64# y#_s2DR2 [Occ=Once] ->
                    case xor# [x#_s2DR0 y#_s2DR2] of sat_s2DR3 {
                      __DEFAULT -> GHC.Word.W64# [sat_s2DR3];
                    };
              };
        };

GHC.Word.$fBitsWord64_$c.|.
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DR4 ds1_s2DR5]
        case ds_s2DR4 of {
          GHC.Word.W64# x#_s2DR7 [Occ=Once] ->
              case ds1_s2DR5 of {
                GHC.Word.W64# y#_s2DR9 [Occ=Once] ->
                    case or# [x#_s2DR7 y#_s2DR9] of sat_s2DRa {
                      __DEFAULT -> GHC.Word.W64# [sat_s2DRa];
                    };
              };
        };

GHC.Word.$fBitsWord64_$c.&.
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DRb ds1_s2DRc]
        case ds_s2DRb of {
          GHC.Word.W64# x#_s2DRe [Occ=Once] ->
              case ds1_s2DRc of {
                GHC.Word.W64# y#_s2DRg [Occ=Once] ->
                    case and# [x#_s2DRe y#_s2DRg] of sat_s2DRh {
                      __DEFAULT -> GHC.Word.W64# [sat_s2DRh];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
  :: GHC.Word.Word64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DRi]
        case ds_s2DRi of {
          GHC.Word.W64# x#_s2DRk [Occ=Once] ->
              case ctz64# [x#_s2DRk] of sat_s2DRl {
                __DEFAULT ->
                    case word2Int# [sat_s2DRl] of sat_s2DRm {
                      __DEFAULT -> GHC.Types.I# [sat_s2DRm];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
  :: GHC.Word.Word64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DRn]
        case ds_s2DRn of {
          GHC.Word.W64# x#_s2DRp [Occ=Once] ->
              case clz64# [x#_s2DRp] of sat_s2DRq {
                __DEFAULT ->
                    case word2Int# [sat_s2DRq] of sat_s2DRr {
                      __DEFAULT -> GHC.Types.I# [sat_s2DRr];
                    };
              };
        };

GHC.Word.$fBitsWord5 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [64#];

GHC.Word.$fBitsWord64_$cfiniteBitSize
  :: GHC.Word.Word64 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s2DRs] GHC.Word.$fBitsWord5;

GHC.Word.eqWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DRt ds1_s2DRu]
        case ds_s2DRt of {
          GHC.Word.W8# x_s2DRw [Occ=Once] ->
              case ds1_s2DRu of {
                GHC.Word.W8# y_s2DRy [Occ=Once] ->
                    case eqWord# [x_s2DRw y_s2DRy] of sat_s2DRz {
                      __DEFAULT -> tagToEnum# [sat_s2DRz];
                    };
              };
        };

GHC.Word.$fEqWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Word.eqWord8
                                     GHC.Word.neWord8];

GHC.Word.$fNumWord4 :: GHC.Word.Word8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W8#! [1##];

GHC.Word.$fNumWord8_$csignum :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DRA]
        case ds_s2DRA of {
          GHC.Word.W8# x_s2DRC [Occ=Once!] ->
              case x_s2DRC of {
                __DEFAULT -> GHC.Word.$fNumWord4;
                0## -> GHC.Word.$fBitsWord8_$cminBound;
              };
        };

GHC.Word.$fNumWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Word.$fNumWord8_$c+
                                  GHC.Word.$fNumWord8_$c-
                                  GHC.Word.$fNumWord8_$c*
                                  GHC.Word.$fNumWord8_$cnegate
                                  GHC.Word.$fNumWord8_$cabs
                                  GHC.Word.$fNumWord8_$csignum
                                  GHC.Word.$fNumWord8_$cfromInteger];

GHC.Word.$fBitsWord8_$ccomplement
  :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DRE]
        case ds_s2DRE of {
          GHC.Word.W8# x#_s2DRG [Occ=Once] ->
              case xor# [x#_s2DRG 255##] of sat_s2DRH {
                __DEFAULT -> GHC.Word.W8# [sat_s2DRH];
              };
        };

GHC.Word.$fBitsWord10 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Word.$fBitsWord9];

GHC.Word.$fBitsWord8_$cbitSizeMaybe
  :: GHC.Word.Word8 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s2DRI] GHC.Word.$fBitsWord10;

GHC.Word.$fBitsWord8_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s2DRJ]
        case i_s2DRJ of {
          GHC.Types.I# i#_s2DRL ->
              case >=# [i#_s2DRL 64#] of {
                __DEFAULT ->
                    case uncheckedShiftL# [1## i#_s2DRL] of sat_s2DRN {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2DRN] of sat_s2DRO {
                            __DEFAULT -> GHC.Word.W8# [sat_s2DRO];
                          };
                    };
                1# -> GHC.Word.$fBitsWord8_$cminBound;
              };
        };

GHC.Word.$fBitsWord8_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2DRP i_s2DRQ]
        case x_s2DRP of {
          GHC.Word.W8# x#_s2DRS [Occ=Once] ->
              case i_s2DRQ of {
                GHC.Types.I# i#_s2DRU ->
                    case >=# [i#_s2DRU 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2DRU] of sat_s2DRW {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2DRW] of sat_s2DRX {
                                  __DEFAULT ->
                                      case and# [x#_s2DRS sat_s2DRX] of {
                                        __DEFAULT -> GHC.Types.True [];
                                        0## -> GHC.Types.False [];
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Word.$fBitsWord8_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2DRZ eta1_s2DS0]
        case eta_s2DRZ of wild_s2DS1 {
          GHC.Word.W8# x#_s2DS2 ->
              case eta1_s2DS0 of {
                GHC.Types.I# x1_s2DS4 [Occ=Once] ->
                    case negateInt# [x1_s2DS4] of sat_s2DS5 {
                      __DEFAULT ->
                          case int2Word# [sat_s2DS5] of sat_s2DS6 {
                            __DEFAULT ->
                                case and# [sat_s2DS6 7##] of sat_s2DS7 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2DS7] of wild2_s2DS8 {
                                        __DEFAULT ->
                                            case -# [8# wild2_s2DS8] of sat_s2DSa {
                                              __DEFAULT ->
                                                  case
                                                      uncheckedShiftRL# [x#_s2DS2 sat_s2DSa]
                                                  of
                                                  sat_s2DSb
                                                  { __DEFAULT ->
                                                        case
                                                            uncheckedShiftL# [x#_s2DS2 wild2_s2DS8]
                                                        of
                                                        sat_s2DS9
                                                        { __DEFAULT ->
                                                              case
                                                                  or# [sat_s2DS9 sat_s2DSb]
                                                              of
                                                              sat_s2DSc
                                                              { __DEFAULT ->
                                                                    case
                                                                        narrow8Word# [sat_s2DSc]
                                                                    of
                                                                    sat_s2DSd
                                                                    { __DEFAULT ->
                                                                          GHC.Word.W8# [sat_s2DSd];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s2DS1;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord8_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Word.$fBitsWord8_$crotate eta_B2 eta_B1;

GHC.Word.$fBitsWord8_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2DSe eta1_s2DSf]
        case eta_s2DSe of wild_s2DSg {
          GHC.Word.W8# x#_s2DSh [Occ=Once] ->
              case eta1_s2DSf of {
                GHC.Types.I# i#_s2DSj ->
                    case >=# [i#_s2DSj 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2DSj] of sat_s2DSl {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2DSl] of sat_s2DSm {
                                  __DEFAULT ->
                                      case xor# [x#_s2DSh sat_s2DSm] of sat_s2DSn {
                                        __DEFAULT -> GHC.Word.W8# [sat_s2DSn];
                                      };
                                };
                          };
                      1# -> wild_s2DSg;
                    };
              };
        };

GHC.Word.$fBitsWord8_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2DSo eta1_s2DSp]
        case eta_s2DSo of {
          GHC.Word.W8# x#_s2DSr [Occ=Once*] ->
              case eta1_s2DSp of {
                GHC.Types.I# i#_s2DSt ->
                    case >=# [i#_s2DSt 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2DSt] of sat_s2DSv {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2DSv] of sat_s2DSw {
                                  __DEFAULT ->
                                      case xor# [sat_s2DSw 255##] of sat_s2DSx {
                                        __DEFAULT ->
                                            case and# [x#_s2DSr sat_s2DSx] of sat_s2DSy {
                                              __DEFAULT -> GHC.Word.W8# [sat_s2DSy];
                                            };
                                      };
                                };
                          };
                      1# ->
                          case and# [x#_s2DSr 255##] of sat_s2DSz {
                            __DEFAULT -> GHC.Word.W8# [sat_s2DSz];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord8_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2DSA eta1_s2DSB]
        case eta_s2DSA of wild_s2DSC {
          GHC.Word.W8# x#_s2DSD [Occ=Once] ->
              case eta1_s2DSB of {
                GHC.Types.I# i#_s2DSF ->
                    case >=# [i#_s2DSF 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2DSF] of sat_s2DSH {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2DSH] of sat_s2DSI {
                                  __DEFAULT ->
                                      case or# [x#_s2DSD sat_s2DSI] of sat_s2DSJ {
                                        __DEFAULT -> GHC.Word.W8# [sat_s2DSJ];
                                      };
                                };
                          };
                      1# -> wild_s2DSC;
                    };
              };
        };

GHC.Word.$fBitsWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Word.$fEqWord8
                                     GHC.Word.$fBitsWord8_$c.&.
                                     GHC.Word.$fBitsWord8_$c.|.
                                     GHC.Word.$fBitsWord8_$cxor
                                     GHC.Word.$fBitsWord8_$ccomplement
                                     GHC.Word.$fBitsWord8_$cshift
                                     GHC.Word.$fBitsWord8_$crotate
                                     GHC.Word.$fBitsWord8_$cminBound
                                     GHC.Word.$fBitsWord8_$cbit
                                     GHC.Word.$fBitsWord8_$csetBit
                                     GHC.Word.$fBitsWord8_$cclearBit
                                     GHC.Word.$fBitsWord8_$ccomplementBit
                                     GHC.Word.$fBitsWord8_$ctestBit
                                     GHC.Word.$fBitsWord8_$cbitSizeMaybe
                                     GHC.Word.$fBitsWord8_$cfiniteBitSize
                                     GHC.Word.$fBitsWord8_$cisSigned
                                     GHC.Word.$fBitsWord8_$cshiftL
                                     GHC.Word.$fBitsWord8_$cunsafeShiftL
                                     GHC.Word.$fBitsWord8_$cshiftR
                                     GHC.Word.$fBitsWord8_$cunsafeShiftR
                                     GHC.Word.$fBitsWord8_$crotateL
                                     GHC.Word.$fBitsWord8_$crotateR
                                     GHC.Word.$fBitsWord8_$cpopCount];

GHC.Word.$fFiniteBitsWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Word.$fBitsWord8
                                           GHC.Word.$fBitsWord8_$cfiniteBitSize
                                           GHC.Word.$fFiniteBitsWord8_$ccountLeadingZeros
                                           GHC.Word.$fFiniteBitsWord8_$ccountTrailingZeros];

GHC.Word.$fIntegralWord8_$cquot
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DSK y_s2DSL]
        case ds_s2DSK of {
          GHC.Word.W8# x#_s2DSN [Occ=Once] ->
              case y_s2DSL of {
                GHC.Word.W8# y#_s2DSP [Occ=Once!] ->
                    case y#_s2DSP of wild2_s2DSQ {
                      __DEFAULT ->
                          case quotWord# [x#_s2DSN wild2_s2DSQ] of wild3_s2DSR {
                            __DEFAULT -> GHC.Word.W8# [wild3_s2DSR];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord8_$crem
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DSS y_s2DST]
        case ds_s2DSS of {
          GHC.Word.W8# x#_s2DSV [Occ=Once] ->
              case y_s2DST of {
                GHC.Word.W8# y#_s2DSX [Occ=Once!] ->
                    case y#_s2DSX of wild2_s2DSY {
                      __DEFAULT ->
                          case remWord# [x#_s2DSV wild2_s2DSY] of wild3_s2DSZ {
                            __DEFAULT -> GHC.Word.W8# [wild3_s2DSZ];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord8_$cquotRem
  :: GHC.Word.Word8
     -> GHC.Word.Word8 -> (GHC.Word.Word8, GHC.Word.Word8)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DT0 y_s2DT1]
        case ds_s2DT0 of {
          GHC.Word.W8# x#_s2DT3 [Occ=Once] ->
              case y_s2DT1 of {
                GHC.Word.W8# y#_s2DT5 [Occ=Once!] ->
                    case y#_s2DT5 of wild2_s2DT6 {
                      __DEFAULT ->
                          case quotRemWord# [x#_s2DT3 wild2_s2DT6] of {
                            (#,#) ipv_s2DT8 [Occ=Once] ipv1_s2DT9 [Occ=Once] ->
                                let {
                                  sat_s2DTb [Occ=Once] :: GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.Word.W8#! [ipv1_s2DT9]; } in
                                let {
                                  sat_s2DTa [Occ=Once] :: GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.Word.W8#! [ipv_s2DT8];
                                } in  (,) [sat_s2DTa sat_s2DTb];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord8_$cdivMod
  :: GHC.Word.Word8
     -> GHC.Word.Word8 -> (GHC.Word.Word8, GHC.Word.Word8)
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s2DTc y_s2DTd]
        case ds_s2DTc of {
          GHC.Word.W8# x#_s2DTf ->
              case y_s2DTd of {
                GHC.Word.W8# y#_s2DTh [Occ=Once!] ->
                    case y#_s2DTh of wild2_s2DTi {
                      __DEFAULT ->
                          let {
                            sat_s2DTm [Occ=Once] :: GHC.Word.Word8
                            [LclId] =
                                [x#_s2DTf wild2_s2DTi] \u []
                                    case remWord# [x#_s2DTf wild2_s2DTi] of wild3_s2DTl {
                                      __DEFAULT -> GHC.Word.W8# [wild3_s2DTl];
                                    }; } in
                          let {
                            sat_s2DTk [Occ=Once] :: GHC.Word.Word8
                            [LclId] =
                                [x#_s2DTf wild2_s2DTi] \u []
                                    case quotWord# [x#_s2DTf wild2_s2DTi] of wild3_s2DTj {
                                      __DEFAULT -> GHC.Word.W8# [wild3_s2DTj];
                                    };
                          } in  (,) [sat_s2DTk sat_s2DTm];
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.gtWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DTn ds1_s2DTo]
        case ds_s2DTn of {
          GHC.Word.W8# x_s2DTq [Occ=Once] ->
              case ds1_s2DTo of {
                GHC.Word.W8# y_s2DTs [Occ=Once] ->
                    case gtWord# [x_s2DTq y_s2DTs] of sat_s2DTt {
                      __DEFAULT -> tagToEnum# [sat_s2DTt];
                    };
              };
        };

GHC.Word.geWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DTu ds1_s2DTv]
        case ds_s2DTu of {
          GHC.Word.W8# x_s2DTx [Occ=Once] ->
              case ds1_s2DTv of {
                GHC.Word.W8# y_s2DTz [Occ=Once] ->
                    case geWord# [x_s2DTx y_s2DTz] of sat_s2DTA {
                      __DEFAULT -> tagToEnum# [sat_s2DTA];
                    };
              };
        };

GHC.Word.ltWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DTB ds1_s2DTC]
        case ds_s2DTB of {
          GHC.Word.W8# x_s2DTE [Occ=Once] ->
              case ds1_s2DTC of {
                GHC.Word.W8# y_s2DTG [Occ=Once] ->
                    case ltWord# [x_s2DTE y_s2DTG] of sat_s2DTH {
                      __DEFAULT -> tagToEnum# [sat_s2DTH];
                    };
              };
        };

GHC.Word.leWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DTI ds1_s2DTJ]
        case ds_s2DTI of {
          GHC.Word.W8# x_s2DTL [Occ=Once] ->
              case ds1_s2DTJ of {
                GHC.Word.W8# y_s2DTN [Occ=Once] ->
                    case leWord# [x_s2DTL y_s2DTN] of sat_s2DTO {
                      __DEFAULT -> tagToEnum# [sat_s2DTO];
                    };
              };
        };

GHC.Word.$fOrdWord8_$ccompare
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2DTP y_s2DTQ]
        case x_s2DTP of {
          GHC.Word.W8# x1_s2DTS ->
              case y_s2DTQ of {
                GHC.Word.W8# y1_s2DTU ->
                    case eqWord# [x1_s2DTS y1_s2DTU] of {
                      __DEFAULT ->
                          case leWord# [x1_s2DTS y1_s2DTU] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Word.$fOrdWord8_$cmax
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2DTX y_s2DTY]
        case x_s2DTX of wild_s2DTZ {
          GHC.Word.W8# x1_s2DU0 [Occ=Once] ->
              case y_s2DTY of wild1_s2DU1 {
                GHC.Word.W8# y1_s2DU2 [Occ=Once] ->
                    case leWord# [x1_s2DU0 y1_s2DU2] of {
                      __DEFAULT -> wild_s2DTZ;
                      1# -> wild1_s2DU1;
                    };
              };
        };

GHC.Word.$fOrdWord8_$cmin
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2DU4 y_s2DU5]
        case x_s2DU4 of wild_s2DU6 {
          GHC.Word.W8# x1_s2DU7 [Occ=Once] ->
              case y_s2DU5 of wild1_s2DU8 {
                GHC.Word.W8# y1_s2DU9 [Occ=Once] ->
                    case leWord# [x1_s2DU7 y1_s2DU9] of {
                      __DEFAULT -> wild1_s2DU8;
                      1# -> wild_s2DU6;
                    };
              };
        };

GHC.Word.$fOrdWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Word.$fEqWord8
                                      GHC.Word.$fOrdWord8_$ccompare
                                      GHC.Word.ltWord8
                                      GHC.Word.leWord8
                                      GHC.Word.gtWord8
                                      GHC.Word.geWord8
                                      GHC.Word.$fOrdWord8_$cmax
                                      GHC.Word.$fOrdWord8_$cmin];

GHC.Word.$fIxWord8_$cinRange
  :: (GHC.Word.Word8, GHC.Word.Word8)
     -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DUb i_s2DUc]
        case ds_s2DUb of {
          (,) m_s2DUe [Occ=Once!] n_s2DUf [Occ=Once!] ->
              case m_s2DUe of {
                GHC.Word.W8# x_s2DUh [Occ=Once] ->
                    case i_s2DUc of {
                      GHC.Word.W8# y_s2DUj ->
                          case leWord# [x_s2DUh y_s2DUj] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s2DUf of {
                                  GHC.Word.W8# y1_s2DUm [Occ=Once] ->
                                      case leWord# [y_s2DUj y1_s2DUm] of sat_s2DUn {
                                        __DEFAULT -> tagToEnum# [sat_s2DUn];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord8_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word8 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2DUo]
        case w_s2DUo of {
          GHC.Word.W8# ww1_s2DUq [Occ=Once] ->
              case word2Int# [ww1_s2DUq] of sat_s2DUr {
                __DEFAULT ->
                    case GHC.Integer.Type.smallInteger sat_s2DUr of sat_s2DUs {
                      __DEFAULT ->
                          case
                              GHC.Integer.Type.timesInteger sat_s2DUs GHC.Word.$fRealWord1
                          of
                          sat_s2DUt
                          { __DEFAULT ->
                                case GHC.Real.$w$sreduce sat_s2DUt GHC.Word.$fRealWord1 of {
                                  (#,#) ww3_s2DUv [Occ=Once] ww4_s2DUw [Occ=Once] ->
                                      GHC.Real.:% [ww3_s2DUv ww4_s2DUw];
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Word.$fNumWord8
                                    GHC.Word.$fOrdWord8
                                    GHC.Word.$fRealWord8_$ctoRational];

GHC.Word.$fIntegralWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Word.$fRealWord8
                                        GHC.Word.$fEnumWord8
                                        GHC.Word.$fIntegralWord8_$cquot
                                        GHC.Word.$fIntegralWord8_$crem
                                        GHC.Word.$fIntegralWord8_$cquot
                                        GHC.Word.$fIntegralWord8_$crem
                                        GHC.Word.$fIntegralWord8_$cquotRem
                                        GHC.Word.$fIntegralWord8_$cdivMod
                                        GHC.Word.$ctoInteger];

GHC.Word.$fIxWord8_$cunsafeIndex
  :: (GHC.Word.Word8, GHC.Word.Word8)
     -> GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DUx i_s2DUy]
        case ds_s2DUx of {
          (,) m_s2DUA [Occ=Once!] _ [Occ=Dead] ->
              case i_s2DUy of {
                GHC.Word.W8# x#_s2DUD [Occ=Once] ->
                    case m_s2DUA of {
                      GHC.Word.W8# y#_s2DUF [Occ=Once] ->
                          case minusWord# [x#_s2DUD y#_s2DUF] of sat_s2DUG {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2DUG] of sat_s2DUH {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2DUH] of sat_s2DUI {
                                        __DEFAULT -> GHC.Types.I# [sat_s2DUI];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord8_$crange
  :: (GHC.Word.Word8, GHC.Word.Word8) -> [GHC.Word.Word8]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s2DUJ]
        case ds_s2DUJ of {
          (,) m_s2DUL [Occ=Once] n_s2DUM [Occ=Once] ->
              GHC.Word.$fEnumWord8_$cenumFromTo m_s2DUL n_s2DUM;
        };

GHC.Word.$fIxWord1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Word.$fIxWord8_$crangeSize
  :: (GHC.Word.Word8, GHC.Word.Word8) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2DUN]
        case b_s2DUN of {
          (,) _l_s2DUP [Occ=Once!] h_s2DUQ [Occ=Once!] ->
              case _l_s2DUP of {
                GHC.Word.W8# x_s2DUS ->
                    case h_s2DUQ of {
                      GHC.Word.W8# y_s2DUU ->
                          case leWord# [x_s2DUS y_s2DUU] of {
                            __DEFAULT -> GHC.Word.$fIxWord1;
                            1# ->
                                case minusWord# [y_s2DUU x_s2DUS] of sat_s2DUW {
                                  __DEFAULT ->
                                      case narrow8Word# [sat_s2DUW] of sat_s2DUX {
                                        __DEFAULT ->
                                            case word2Int# [sat_s2DUX] of sat_s2DUY {
                                              __DEFAULT ->
                                                  case +# [sat_s2DUY 1#] of sat_s2DUZ {
                                                    __DEFAULT -> GHC.Types.I# [sat_s2DUZ];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord8_$cunsafeRangeSize
  :: (GHC.Word.Word8, GHC.Word.Word8) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2DV0]
        case b_s2DV0 of {
          (,) _l_s2DV2 [Occ=Once!] h_s2DV3 [Occ=Once!] ->
              case h_s2DV3 of {
                GHC.Word.W8# x#_s2DV5 [Occ=Once] ->
                    case _l_s2DV2 of {
                      GHC.Word.W8# y#_s2DV7 [Occ=Once] ->
                          case minusWord# [x#_s2DV5 y#_s2DV7] of sat_s2DV8 {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2DV8] of sat_s2DV9 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2DV9] of sat_s2DVa {
                                        __DEFAULT ->
                                            case +# [sat_s2DVa 1#] of sat_s2DVb {
                                              __DEFAULT -> GHC.Types.I# [sat_s2DVb];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord8_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Word.Word8, GHC.Word.Word8)
     -> GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2DVc eta1_s2DVd]
        case eta_s2DVc of {
          (,) m_s2DVf [Occ=Once!] n_s2DVg [Occ=Once!] ->
              case m_s2DVf of {
                GHC.Word.W8# x_s2DVi ->
                    case eta1_s2DVd of {
                      GHC.Word.W8# y_s2DVk ->
                          case leWord# [x_s2DVi y_s2DVk] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s2DVg of {
                                  GHC.Word.W8# y1_s2DVn [Occ=Once] ->
                                      case leWord# [y_s2DVk y1_s2DVn] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case minusWord# [y_s2DVk x_s2DVi] of sat_s2DVp {
                                              __DEFAULT ->
                                                  case narrow8Word# [sat_s2DVp] of sat_s2DVq {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s2DVq] of sat_s2DVr {
                                                          __DEFAULT -> GHC.Types.I# [sat_s2DVr];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Word.$fOrdWord8
                                 GHC.Word.$fIxWord8_$crange
                                 GHC.Word.$fIxWord8_$cindex
                                 GHC.Word.$fIxWord8_$cunsafeIndex
                                 GHC.Word.$fIxWord8_$cinRange
                                 GHC.Word.$fIxWord8_$crangeSize
                                 GHC.Word.$fIxWord8_$cunsafeRangeSize];

GHC.Word.eqWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DVs ds1_s2DVt]
        case ds_s2DVs of {
          GHC.Word.W16# x_s2DVv [Occ=Once] ->
              case ds1_s2DVt of {
                GHC.Word.W16# y_s2DVx [Occ=Once] ->
                    case eqWord# [x_s2DVv y_s2DVx] of sat_s2DVy {
                      __DEFAULT -> tagToEnum# [sat_s2DVy];
                    };
              };
        };

GHC.Word.$fEqWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Word.eqWord16
                                     GHC.Word.neWord16];

GHC.Word.$fNumWord1 :: GHC.Word.Word16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W16#! [1##];

GHC.Word.$fNumWord16_$csignum :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DVz]
        case ds_s2DVz of {
          GHC.Word.W16# x_s2DVB [Occ=Once!] ->
              case x_s2DVB of {
                __DEFAULT -> GHC.Word.$fNumWord1;
                0## -> GHC.Word.$fBitsWord16_$cminBound;
              };
        };

GHC.Word.$fNumWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Word.$fNumWord16_$c+
                                  GHC.Word.$fNumWord16_$c-
                                  GHC.Word.$fNumWord16_$c*
                                  GHC.Word.$fNumWord16_$cnegate
                                  GHC.Word.$fNumWord16_$cabs
                                  GHC.Word.$fNumWord16_$csignum
                                  GHC.Word.$fNumWord16_$cfromInteger];

GHC.Word.$fBitsWord16_$ccomplement
  :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DVD]
        case ds_s2DVD of {
          GHC.Word.W16# x#_s2DVF [Occ=Once] ->
              case xor# [x#_s2DVF 65535##] of sat_s2DVG {
                __DEFAULT -> GHC.Word.W16# [sat_s2DVG];
              };
        };

GHC.Word.$fBitsWord2 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Word.$fBitsWord1];

GHC.Word.$fBitsWord16_$cbitSizeMaybe
  :: GHC.Word.Word16 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s2DVH] GHC.Word.$fBitsWord2;

GHC.Word.$fBitsWord16_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s2DVI]
        case i_s2DVI of {
          GHC.Types.I# i#_s2DVK ->
              case >=# [i#_s2DVK 64#] of {
                __DEFAULT ->
                    case uncheckedShiftL# [1## i#_s2DVK] of sat_s2DVM {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2DVM] of sat_s2DVN {
                            __DEFAULT -> GHC.Word.W16# [sat_s2DVN];
                          };
                    };
                1# -> GHC.Word.$fBitsWord16_$cminBound;
              };
        };

GHC.Word.$fBitsWord16_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2DVO i_s2DVP]
        case x_s2DVO of {
          GHC.Word.W16# x#_s2DVR [Occ=Once] ->
              case i_s2DVP of {
                GHC.Types.I# i#_s2DVT ->
                    case >=# [i#_s2DVT 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2DVT] of sat_s2DVV {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2DVV] of sat_s2DVW {
                                  __DEFAULT ->
                                      case and# [x#_s2DVR sat_s2DVW] of {
                                        __DEFAULT -> GHC.Types.True [];
                                        0## -> GHC.Types.False [];
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Word.$fBitsWord16_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2DVY eta1_s2DVZ]
        case eta_s2DVY of wild_s2DW0 {
          GHC.Word.W16# x#_s2DW1 ->
              case eta1_s2DVZ of {
                GHC.Types.I# x1_s2DW3 [Occ=Once] ->
                    case negateInt# [x1_s2DW3] of sat_s2DW4 {
                      __DEFAULT ->
                          case int2Word# [sat_s2DW4] of sat_s2DW5 {
                            __DEFAULT ->
                                case and# [sat_s2DW5 15##] of sat_s2DW6 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2DW6] of wild2_s2DW7 {
                                        __DEFAULT ->
                                            case -# [16# wild2_s2DW7] of sat_s2DW9 {
                                              __DEFAULT ->
                                                  case
                                                      uncheckedShiftRL# [x#_s2DW1 sat_s2DW9]
                                                  of
                                                  sat_s2DWa
                                                  { __DEFAULT ->
                                                        case
                                                            uncheckedShiftL# [x#_s2DW1 wild2_s2DW7]
                                                        of
                                                        sat_s2DW8
                                                        { __DEFAULT ->
                                                              case
                                                                  or# [sat_s2DW8 sat_s2DWa]
                                                              of
                                                              sat_s2DWb
                                                              { __DEFAULT ->
                                                                    case
                                                                        narrow16Word# [sat_s2DWb]
                                                                    of
                                                                    sat_s2DWc
                                                                    { __DEFAULT ->
                                                                          GHC.Word.W16# [sat_s2DWc];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s2DW0;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord16_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Word.$fBitsWord16_$crotate eta_B2 eta_B1;

GHC.Word.$fBitsWord16_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2DWd eta1_s2DWe]
        case eta_s2DWd of wild_s2DWf {
          GHC.Word.W16# x#_s2DWg [Occ=Once] ->
              case eta1_s2DWe of {
                GHC.Types.I# i#_s2DWi ->
                    case >=# [i#_s2DWi 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2DWi] of sat_s2DWk {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2DWk] of sat_s2DWl {
                                  __DEFAULT ->
                                      case xor# [x#_s2DWg sat_s2DWl] of sat_s2DWm {
                                        __DEFAULT -> GHC.Word.W16# [sat_s2DWm];
                                      };
                                };
                          };
                      1# -> wild_s2DWf;
                    };
              };
        };

GHC.Word.$fBitsWord16_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2DWn eta1_s2DWo]
        case eta_s2DWn of {
          GHC.Word.W16# x#_s2DWq [Occ=Once*] ->
              case eta1_s2DWo of {
                GHC.Types.I# i#_s2DWs ->
                    case >=# [i#_s2DWs 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2DWs] of sat_s2DWu {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2DWu] of sat_s2DWv {
                                  __DEFAULT ->
                                      case xor# [sat_s2DWv 65535##] of sat_s2DWw {
                                        __DEFAULT ->
                                            case and# [x#_s2DWq sat_s2DWw] of sat_s2DWx {
                                              __DEFAULT -> GHC.Word.W16# [sat_s2DWx];
                                            };
                                      };
                                };
                          };
                      1# ->
                          case and# [x#_s2DWq 65535##] of sat_s2DWy {
                            __DEFAULT -> GHC.Word.W16# [sat_s2DWy];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord16_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2DWz eta1_s2DWA]
        case eta_s2DWz of wild_s2DWB {
          GHC.Word.W16# x#_s2DWC [Occ=Once] ->
              case eta1_s2DWA of {
                GHC.Types.I# i#_s2DWE ->
                    case >=# [i#_s2DWE 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2DWE] of sat_s2DWG {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2DWG] of sat_s2DWH {
                                  __DEFAULT ->
                                      case or# [x#_s2DWC sat_s2DWH] of sat_s2DWI {
                                        __DEFAULT -> GHC.Word.W16# [sat_s2DWI];
                                      };
                                };
                          };
                      1# -> wild_s2DWB;
                    };
              };
        };

GHC.Word.$fBitsWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Word.$fEqWord16
                                     GHC.Word.$fBitsWord16_$c.&.
                                     GHC.Word.$fBitsWord16_$c.|.
                                     GHC.Word.$fBitsWord16_$cxor
                                     GHC.Word.$fBitsWord16_$ccomplement
                                     GHC.Word.$fBitsWord16_$cshift
                                     GHC.Word.$fBitsWord16_$crotate
                                     GHC.Word.$fBitsWord16_$cminBound
                                     GHC.Word.$fBitsWord16_$cbit
                                     GHC.Word.$fBitsWord16_$csetBit
                                     GHC.Word.$fBitsWord16_$cclearBit
                                     GHC.Word.$fBitsWord16_$ccomplementBit
                                     GHC.Word.$fBitsWord16_$ctestBit
                                     GHC.Word.$fBitsWord16_$cbitSizeMaybe
                                     GHC.Word.$fBitsWord16_$cfiniteBitSize
                                     GHC.Word.$fBitsWord16_$cisSigned
                                     GHC.Word.$fBitsWord16_$cshiftL
                                     GHC.Word.$fBitsWord16_$cunsafeShiftL
                                     GHC.Word.$fBitsWord16_$cshiftR
                                     GHC.Word.$fBitsWord16_$cunsafeShiftR
                                     GHC.Word.$fBitsWord16_$crotateL
                                     GHC.Word.$fBitsWord16_$crotateR
                                     GHC.Word.$fBitsWord16_$cpopCount];

GHC.Word.$fFiniteBitsWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Word.$fBitsWord16
                                           GHC.Word.$fBitsWord16_$cfiniteBitSize
                                           GHC.Word.$fFiniteBitsWord16_$ccountLeadingZeros
                                           GHC.Word.$fFiniteBitsWord16_$ccountTrailingZeros];

GHC.Word.$fIntegralWord16_$cquot
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DWJ y_s2DWK]
        case ds_s2DWJ of {
          GHC.Word.W16# x#_s2DWM [Occ=Once] ->
              case y_s2DWK of {
                GHC.Word.W16# y#_s2DWO [Occ=Once!] ->
                    case y#_s2DWO of wild2_s2DWP {
                      __DEFAULT ->
                          case quotWord# [x#_s2DWM wild2_s2DWP] of wild3_s2DWQ {
                            __DEFAULT -> GHC.Word.W16# [wild3_s2DWQ];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord16_$crem
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DWR y_s2DWS]
        case ds_s2DWR of {
          GHC.Word.W16# x#_s2DWU [Occ=Once] ->
              case y_s2DWS of {
                GHC.Word.W16# y#_s2DWW [Occ=Once!] ->
                    case y#_s2DWW of wild2_s2DWX {
                      __DEFAULT ->
                          case remWord# [x#_s2DWU wild2_s2DWX] of wild3_s2DWY {
                            __DEFAULT -> GHC.Word.W16# [wild3_s2DWY];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord16_$cquotRem
  :: GHC.Word.Word16
     -> GHC.Word.Word16 -> (GHC.Word.Word16, GHC.Word.Word16)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DWZ y_s2DX0]
        case ds_s2DWZ of {
          GHC.Word.W16# x#_s2DX2 [Occ=Once] ->
              case y_s2DX0 of {
                GHC.Word.W16# y#_s2DX4 [Occ=Once!] ->
                    case y#_s2DX4 of wild2_s2DX5 {
                      __DEFAULT ->
                          case quotRemWord# [x#_s2DX2 wild2_s2DX5] of {
                            (#,#) ipv_s2DX7 [Occ=Once] ipv1_s2DX8 [Occ=Once] ->
                                let {
                                  sat_s2DXa [Occ=Once] :: GHC.Word.Word16
                                  [LclId] =
                                      CCCS GHC.Word.W16#! [ipv1_s2DX8]; } in
                                let {
                                  sat_s2DX9 [Occ=Once] :: GHC.Word.Word16
                                  [LclId] =
                                      CCCS GHC.Word.W16#! [ipv_s2DX7];
                                } in  (,) [sat_s2DX9 sat_s2DXa];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord16_$cdivMod
  :: GHC.Word.Word16
     -> GHC.Word.Word16 -> (GHC.Word.Word16, GHC.Word.Word16)
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s2DXb y_s2DXc]
        case ds_s2DXb of {
          GHC.Word.W16# x#_s2DXe ->
              case y_s2DXc of {
                GHC.Word.W16# y#_s2DXg [Occ=Once!] ->
                    case y#_s2DXg of wild2_s2DXh {
                      __DEFAULT ->
                          let {
                            sat_s2DXl [Occ=Once] :: GHC.Word.Word16
                            [LclId] =
                                [x#_s2DXe wild2_s2DXh] \u []
                                    case remWord# [x#_s2DXe wild2_s2DXh] of wild3_s2DXk {
                                      __DEFAULT -> GHC.Word.W16# [wild3_s2DXk];
                                    }; } in
                          let {
                            sat_s2DXj [Occ=Once] :: GHC.Word.Word16
                            [LclId] =
                                [x#_s2DXe wild2_s2DXh] \u []
                                    case quotWord# [x#_s2DXe wild2_s2DXh] of wild3_s2DXi {
                                      __DEFAULT -> GHC.Word.W16# [wild3_s2DXi];
                                    };
                          } in  (,) [sat_s2DXj sat_s2DXl];
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.gtWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DXm ds1_s2DXn]
        case ds_s2DXm of {
          GHC.Word.W16# x_s2DXp [Occ=Once] ->
              case ds1_s2DXn of {
                GHC.Word.W16# y_s2DXr [Occ=Once] ->
                    case gtWord# [x_s2DXp y_s2DXr] of sat_s2DXs {
                      __DEFAULT -> tagToEnum# [sat_s2DXs];
                    };
              };
        };

GHC.Word.geWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DXt ds1_s2DXu]
        case ds_s2DXt of {
          GHC.Word.W16# x_s2DXw [Occ=Once] ->
              case ds1_s2DXu of {
                GHC.Word.W16# y_s2DXy [Occ=Once] ->
                    case geWord# [x_s2DXw y_s2DXy] of sat_s2DXz {
                      __DEFAULT -> tagToEnum# [sat_s2DXz];
                    };
              };
        };

GHC.Word.ltWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DXA ds1_s2DXB]
        case ds_s2DXA of {
          GHC.Word.W16# x_s2DXD [Occ=Once] ->
              case ds1_s2DXB of {
                GHC.Word.W16# y_s2DXF [Occ=Once] ->
                    case ltWord# [x_s2DXD y_s2DXF] of sat_s2DXG {
                      __DEFAULT -> tagToEnum# [sat_s2DXG];
                    };
              };
        };

GHC.Word.leWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DXH ds1_s2DXI]
        case ds_s2DXH of {
          GHC.Word.W16# x_s2DXK [Occ=Once] ->
              case ds1_s2DXI of {
                GHC.Word.W16# y_s2DXM [Occ=Once] ->
                    case leWord# [x_s2DXK y_s2DXM] of sat_s2DXN {
                      __DEFAULT -> tagToEnum# [sat_s2DXN];
                    };
              };
        };

GHC.Word.$fOrdWord16_$ccompare
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2DXO y_s2DXP]
        case x_s2DXO of {
          GHC.Word.W16# x1_s2DXR ->
              case y_s2DXP of {
                GHC.Word.W16# y1_s2DXT ->
                    case eqWord# [x1_s2DXR y1_s2DXT] of {
                      __DEFAULT ->
                          case leWord# [x1_s2DXR y1_s2DXT] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Word.$fOrdWord16_$cmax
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2DXW y_s2DXX]
        case x_s2DXW of wild_s2DXY {
          GHC.Word.W16# x1_s2DXZ [Occ=Once] ->
              case y_s2DXX of wild1_s2DY0 {
                GHC.Word.W16# y1_s2DY1 [Occ=Once] ->
                    case leWord# [x1_s2DXZ y1_s2DY1] of {
                      __DEFAULT -> wild_s2DXY;
                      1# -> wild1_s2DY0;
                    };
              };
        };

GHC.Word.$fOrdWord16_$cmin
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2DY3 y_s2DY4]
        case x_s2DY3 of wild_s2DY5 {
          GHC.Word.W16# x1_s2DY6 [Occ=Once] ->
              case y_s2DY4 of wild1_s2DY7 {
                GHC.Word.W16# y1_s2DY8 [Occ=Once] ->
                    case leWord# [x1_s2DY6 y1_s2DY8] of {
                      __DEFAULT -> wild1_s2DY7;
                      1# -> wild_s2DY5;
                    };
              };
        };

GHC.Word.$fOrdWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Word.$fEqWord16
                                      GHC.Word.$fOrdWord16_$ccompare
                                      GHC.Word.ltWord16
                                      GHC.Word.leWord16
                                      GHC.Word.gtWord16
                                      GHC.Word.geWord16
                                      GHC.Word.$fOrdWord16_$cmax
                                      GHC.Word.$fOrdWord16_$cmin];

GHC.Word.$fIxWord16_$cinRange
  :: (GHC.Word.Word16, GHC.Word.Word16)
     -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DYa i_s2DYb]
        case ds_s2DYa of {
          (,) m_s2DYd [Occ=Once!] n_s2DYe [Occ=Once!] ->
              case m_s2DYd of {
                GHC.Word.W16# x_s2DYg [Occ=Once] ->
                    case i_s2DYb of {
                      GHC.Word.W16# y_s2DYi ->
                          case leWord# [x_s2DYg y_s2DYi] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s2DYe of {
                                  GHC.Word.W16# y1_s2DYl [Occ=Once] ->
                                      case leWord# [y_s2DYi y1_s2DYl] of sat_s2DYm {
                                        __DEFAULT -> tagToEnum# [sat_s2DYm];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord16_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word16 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2DYn]
        case w_s2DYn of {
          GHC.Word.W16# ww1_s2DYp [Occ=Once] ->
              case word2Int# [ww1_s2DYp] of sat_s2DYq {
                __DEFAULT ->
                    case GHC.Integer.Type.smallInteger sat_s2DYq of sat_s2DYr {
                      __DEFAULT ->
                          case
                              GHC.Integer.Type.timesInteger sat_s2DYr GHC.Word.$fRealWord1
                          of
                          sat_s2DYs
                          { __DEFAULT ->
                                case GHC.Real.$w$sreduce sat_s2DYs GHC.Word.$fRealWord1 of {
                                  (#,#) ww3_s2DYu [Occ=Once] ww4_s2DYv [Occ=Once] ->
                                      GHC.Real.:% [ww3_s2DYu ww4_s2DYv];
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Word.$fNumWord16
                                    GHC.Word.$fOrdWord16
                                    GHC.Word.$fRealWord16_$ctoRational];

GHC.Word.$fIntegralWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Word.$fRealWord16
                                        GHC.Word.$fEnumWord16
                                        GHC.Word.$fIntegralWord16_$cquot
                                        GHC.Word.$fIntegralWord16_$crem
                                        GHC.Word.$fIntegralWord16_$cquot
                                        GHC.Word.$fIntegralWord16_$crem
                                        GHC.Word.$fIntegralWord16_$cquotRem
                                        GHC.Word.$fIntegralWord16_$cdivMod
                                        GHC.Word.$ctoInteger1];

GHC.Word.$fIxWord16_$cunsafeIndex
  :: (GHC.Word.Word16, GHC.Word.Word16)
     -> GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DYw i_s2DYx]
        case ds_s2DYw of {
          (,) m_s2DYz [Occ=Once!] _ [Occ=Dead] ->
              case i_s2DYx of {
                GHC.Word.W16# x#_s2DYC [Occ=Once] ->
                    case m_s2DYz of {
                      GHC.Word.W16# y#_s2DYE [Occ=Once] ->
                          case minusWord# [x#_s2DYC y#_s2DYE] of sat_s2DYF {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2DYF] of sat_s2DYG {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2DYG] of sat_s2DYH {
                                        __DEFAULT -> GHC.Types.I# [sat_s2DYH];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord16_$crange
  :: (GHC.Word.Word16, GHC.Word.Word16) -> [GHC.Word.Word16]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s2DYI]
        case ds_s2DYI of {
          (,) m_s2DYK [Occ=Once] n_s2DYL [Occ=Once] ->
              GHC.Word.$fEnumWord16_$cenumFromTo m_s2DYK n_s2DYL;
        };

GHC.Word.$fIxWord16_$crangeSize
  :: (GHC.Word.Word16, GHC.Word.Word16) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2DYM]
        case b_s2DYM of {
          (,) _l_s2DYO [Occ=Once!] h_s2DYP [Occ=Once!] ->
              case _l_s2DYO of {
                GHC.Word.W16# x_s2DYR ->
                    case h_s2DYP of {
                      GHC.Word.W16# y_s2DYT ->
                          case leWord# [x_s2DYR y_s2DYT] of {
                            __DEFAULT -> GHC.Word.$fIxWord1;
                            1# ->
                                case minusWord# [y_s2DYT x_s2DYR] of sat_s2DYV {
                                  __DEFAULT ->
                                      case narrow16Word# [sat_s2DYV] of sat_s2DYW {
                                        __DEFAULT ->
                                            case word2Int# [sat_s2DYW] of sat_s2DYX {
                                              __DEFAULT ->
                                                  case +# [sat_s2DYX 1#] of sat_s2DYY {
                                                    __DEFAULT -> GHC.Types.I# [sat_s2DYY];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord16_$cunsafeRangeSize
  :: (GHC.Word.Word16, GHC.Word.Word16) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2DYZ]
        case b_s2DYZ of {
          (,) _l_s2DZ1 [Occ=Once!] h_s2DZ2 [Occ=Once!] ->
              case h_s2DZ2 of {
                GHC.Word.W16# x#_s2DZ4 [Occ=Once] ->
                    case _l_s2DZ1 of {
                      GHC.Word.W16# y#_s2DZ6 [Occ=Once] ->
                          case minusWord# [x#_s2DZ4 y#_s2DZ6] of sat_s2DZ7 {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2DZ7] of sat_s2DZ8 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2DZ8] of sat_s2DZ9 {
                                        __DEFAULT ->
                                            case +# [sat_s2DZ9 1#] of sat_s2DZa {
                                              __DEFAULT -> GHC.Types.I# [sat_s2DZa];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord16_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Word.Word16, GHC.Word.Word16)
     -> GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2DZb eta1_s2DZc]
        case eta_s2DZb of {
          (,) m_s2DZe [Occ=Once!] n_s2DZf [Occ=Once!] ->
              case m_s2DZe of {
                GHC.Word.W16# x_s2DZh ->
                    case eta1_s2DZc of {
                      GHC.Word.W16# y_s2DZj ->
                          case leWord# [x_s2DZh y_s2DZj] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s2DZf of {
                                  GHC.Word.W16# y1_s2DZm [Occ=Once] ->
                                      case leWord# [y_s2DZj y1_s2DZm] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case minusWord# [y_s2DZj x_s2DZh] of sat_s2DZo {
                                              __DEFAULT ->
                                                  case narrow16Word# [sat_s2DZo] of sat_s2DZp {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s2DZp] of sat_s2DZq {
                                                          __DEFAULT -> GHC.Types.I# [sat_s2DZq];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Word.$fOrdWord16
                                 GHC.Word.$fIxWord16_$crange
                                 GHC.Word.$fIxWord16_$cindex
                                 GHC.Word.$fIxWord16_$cunsafeIndex
                                 GHC.Word.$fIxWord16_$cinRange
                                 GHC.Word.$fIxWord16_$crangeSize
                                 GHC.Word.$fIxWord16_$cunsafeRangeSize];

GHC.Word.byteSwap16 :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DZr]
        case ds_s2DZr of {
          GHC.Word.W16# w#_s2DZt [Occ=Once] ->
              case byteSwap16# [w#_s2DZt] of sat_s2DZu {
                __DEFAULT ->
                    case narrow16Word# [sat_s2DZu] of sat_s2DZv {
                      __DEFAULT -> GHC.Word.W16# [sat_s2DZv];
                    };
              };
        };

GHC.Word.eqWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DZw ds1_s2DZx]
        case ds_s2DZw of {
          GHC.Word.W32# x_s2DZz [Occ=Once] ->
              case ds1_s2DZx of {
                GHC.Word.W32# y_s2DZB [Occ=Once] ->
                    case eqWord# [x_s2DZz y_s2DZB] of sat_s2DZC {
                      __DEFAULT -> tagToEnum# [sat_s2DZC];
                    };
              };
        };

GHC.Word.$fEqWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Word.eqWord32
                                     GHC.Word.neWord32];

GHC.Word.$fNumWord2 :: GHC.Word.Word32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W32#! [1##];

GHC.Word.$fNumWord32_$csignum :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DZD]
        case ds_s2DZD of {
          GHC.Word.W32# x_s2DZF [Occ=Once!] ->
              case x_s2DZF of {
                __DEFAULT -> GHC.Word.$fNumWord2;
                0## -> GHC.Word.$fBitsWord32_$cminBound;
              };
        };

GHC.Word.$fNumWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Word.$fNumWord32_$c+
                                  GHC.Word.$fNumWord32_$c-
                                  GHC.Word.$fNumWord32_$c*
                                  GHC.Word.$fNumWord32_$cnegate
                                  GHC.Word.$fNumWord32_$cabs
                                  GHC.Word.$fNumWord32_$csignum
                                  GHC.Word.$fNumWord32_$cfromInteger];

GHC.Word.$fBitsWord32_$ccomplement
  :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DZH]
        case ds_s2DZH of {
          GHC.Word.W32# x#_s2DZJ [Occ=Once] ->
              case xor# [x#_s2DZJ 4294967295##] of sat_s2DZK {
                __DEFAULT -> GHC.Word.W32# [sat_s2DZK];
              };
        };

GHC.Word.$fBitsWord4 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Word.$fBitsWord3];

GHC.Word.$fBitsWord32_$cbitSizeMaybe
  :: GHC.Word.Word32 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s2DZL] GHC.Word.$fBitsWord4;

GHC.Word.$fBitsWord32_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s2DZM]
        case i_s2DZM of {
          GHC.Types.I# i#_s2DZO ->
              case >=# [i#_s2DZO 64#] of {
                __DEFAULT ->
                    case uncheckedShiftL# [1## i#_s2DZO] of sat_s2DZQ {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2DZQ] of sat_s2DZR {
                            __DEFAULT -> GHC.Word.W32# [sat_s2DZR];
                          };
                    };
                1# -> GHC.Word.$fBitsWord32_$cminBound;
              };
        };

GHC.Word.$fBitsWord32_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2DZS i_s2DZT]
        case x_s2DZS of {
          GHC.Word.W32# x#_s2DZV [Occ=Once] ->
              case i_s2DZT of {
                GHC.Types.I# i#_s2DZX ->
                    case >=# [i#_s2DZX 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2DZX] of sat_s2DZZ {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2DZZ] of sat_s2E00 {
                                  __DEFAULT ->
                                      case and# [x#_s2DZV sat_s2E00] of {
                                        __DEFAULT -> GHC.Types.True [];
                                        0## -> GHC.Types.False [];
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Word.$fBitsWord32_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2E02 eta1_s2E03]
        case eta_s2E02 of wild_s2E04 {
          GHC.Word.W32# x#_s2E05 ->
              case eta1_s2E03 of {
                GHC.Types.I# x1_s2E07 [Occ=Once] ->
                    case negateInt# [x1_s2E07] of sat_s2E08 {
                      __DEFAULT ->
                          case int2Word# [sat_s2E08] of sat_s2E09 {
                            __DEFAULT ->
                                case and# [sat_s2E09 31##] of sat_s2E0a {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2E0a] of wild2_s2E0b {
                                        __DEFAULT ->
                                            case -# [32# wild2_s2E0b] of sat_s2E0d {
                                              __DEFAULT ->
                                                  case
                                                      uncheckedShiftRL# [x#_s2E05 sat_s2E0d]
                                                  of
                                                  sat_s2E0e
                                                  { __DEFAULT ->
                                                        case
                                                            uncheckedShiftL# [x#_s2E05 wild2_s2E0b]
                                                        of
                                                        sat_s2E0c
                                                        { __DEFAULT ->
                                                              case
                                                                  or# [sat_s2E0c sat_s2E0e]
                                                              of
                                                              sat_s2E0f
                                                              { __DEFAULT ->
                                                                    case
                                                                        narrow32Word# [sat_s2E0f]
                                                                    of
                                                                    sat_s2E0g
                                                                    { __DEFAULT ->
                                                                          GHC.Word.W32# [sat_s2E0g];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s2E04;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord32_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2E0h eta1_s2E0i]
        case eta_s2E0h of wild_s2E0j {
          GHC.Word.W32# x#_s2E0k [Occ=Once] ->
              case eta1_s2E0i of {
                GHC.Types.I# i#_s2E0m ->
                    case >=# [i#_s2E0m 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2E0m] of sat_s2E0o {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2E0o] of sat_s2E0p {
                                  __DEFAULT ->
                                      case xor# [x#_s2E0k sat_s2E0p] of sat_s2E0q {
                                        __DEFAULT -> GHC.Word.W32# [sat_s2E0q];
                                      };
                                };
                          };
                      1# -> wild_s2E0j;
                    };
              };
        };

GHC.Word.$fBitsWord32_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2E0r eta1_s2E0s]
        case eta_s2E0r of {
          GHC.Word.W32# x#_s2E0u [Occ=Once*] ->
              case eta1_s2E0s of {
                GHC.Types.I# i#_s2E0w ->
                    case >=# [i#_s2E0w 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2E0w] of sat_s2E0y {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2E0y] of sat_s2E0z {
                                  __DEFAULT ->
                                      case xor# [sat_s2E0z 4294967295##] of sat_s2E0A {
                                        __DEFAULT ->
                                            case and# [x#_s2E0u sat_s2E0A] of sat_s2E0B {
                                              __DEFAULT -> GHC.Word.W32# [sat_s2E0B];
                                            };
                                      };
                                };
                          };
                      1# ->
                          case and# [x#_s2E0u 4294967295##] of sat_s2E0C {
                            __DEFAULT -> GHC.Word.W32# [sat_s2E0C];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord32_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2E0D eta1_s2E0E]
        case eta_s2E0D of wild_s2E0F {
          GHC.Word.W32# x#_s2E0G [Occ=Once] ->
              case eta1_s2E0E of {
                GHC.Types.I# i#_s2E0I ->
                    case >=# [i#_s2E0I 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2E0I] of sat_s2E0K {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2E0K] of sat_s2E0L {
                                  __DEFAULT ->
                                      case or# [x#_s2E0G sat_s2E0L] of sat_s2E0M {
                                        __DEFAULT -> GHC.Word.W32# [sat_s2E0M];
                                      };
                                };
                          };
                      1# -> wild_s2E0F;
                    };
              };
        };

GHC.Word.$fBitsWord32_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Word.$fBitsWord32_$crotate eta_B2 eta_B1;

GHC.Word.$fBitsWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Word.$fEqWord32
                                     GHC.Word.$fBitsWord32_$c.&.
                                     GHC.Word.$fBitsWord32_$c.|.
                                     GHC.Word.$fBitsWord32_$cxor
                                     GHC.Word.$fBitsWord32_$ccomplement
                                     GHC.Word.$fBitsWord32_$cshift
                                     GHC.Word.$fBitsWord32_$crotate
                                     GHC.Word.$fBitsWord32_$cminBound
                                     GHC.Word.$fBitsWord32_$cbit
                                     GHC.Word.$fBitsWord32_$csetBit
                                     GHC.Word.$fBitsWord32_$cclearBit
                                     GHC.Word.$fBitsWord32_$ccomplementBit
                                     GHC.Word.$fBitsWord32_$ctestBit
                                     GHC.Word.$fBitsWord32_$cbitSizeMaybe
                                     GHC.Word.$fBitsWord32_$cfiniteBitSize
                                     GHC.Word.$fBitsWord32_$cisSigned
                                     GHC.Word.$fBitsWord32_$cshiftL
                                     GHC.Word.$fBitsWord32_$cunsafeShiftL
                                     GHC.Word.$fBitsWord32_$cshiftR
                                     GHC.Word.$fBitsWord32_$cunsafeShiftR
                                     GHC.Word.$fBitsWord32_$crotateL
                                     GHC.Word.$fBitsWord32_$crotateR
                                     GHC.Word.$fBitsWord32_$cpopCount];

GHC.Word.$fFiniteBitsWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Word.$fBitsWord32
                                           GHC.Word.$fBitsWord32_$cfiniteBitSize
                                           GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros
                                           GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros];

GHC.Word.$fIntegralWord32_$cquot
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2E0N y_s2E0O]
        case ds_s2E0N of {
          GHC.Word.W32# x#_s2E0Q [Occ=Once] ->
              case y_s2E0O of {
                GHC.Word.W32# y#_s2E0S [Occ=Once!] ->
                    case y#_s2E0S of wild2_s2E0T {
                      __DEFAULT ->
                          case quotWord# [x#_s2E0Q wild2_s2E0T] of wild3_s2E0U {
                            __DEFAULT -> GHC.Word.W32# [wild3_s2E0U];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord32_$crem
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2E0V y_s2E0W]
        case ds_s2E0V of {
          GHC.Word.W32# x#_s2E0Y [Occ=Once] ->
              case y_s2E0W of {
                GHC.Word.W32# y#_s2E10 [Occ=Once!] ->
                    case y#_s2E10 of wild2_s2E11 {
                      __DEFAULT ->
                          case remWord# [x#_s2E0Y wild2_s2E11] of wild3_s2E12 {
                            __DEFAULT -> GHC.Word.W32# [wild3_s2E12];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord32_$cquotRem
  :: GHC.Word.Word32
     -> GHC.Word.Word32 -> (GHC.Word.Word32, GHC.Word.Word32)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2E13 y_s2E14]
        case ds_s2E13 of {
          GHC.Word.W32# x#_s2E16 [Occ=Once] ->
              case y_s2E14 of {
                GHC.Word.W32# y#_s2E18 [Occ=Once!] ->
                    case y#_s2E18 of wild2_s2E19 {
                      __DEFAULT ->
                          case quotRemWord# [x#_s2E16 wild2_s2E19] of {
                            (#,#) ipv_s2E1b [Occ=Once] ipv1_s2E1c [Occ=Once] ->
                                let {
                                  sat_s2E1e [Occ=Once] :: GHC.Word.Word32
                                  [LclId] =
                                      CCCS GHC.Word.W32#! [ipv1_s2E1c]; } in
                                let {
                                  sat_s2E1d [Occ=Once] :: GHC.Word.Word32
                                  [LclId] =
                                      CCCS GHC.Word.W32#! [ipv_s2E1b];
                                } in  (,) [sat_s2E1d sat_s2E1e];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord32_$cdivMod
  :: GHC.Word.Word32
     -> GHC.Word.Word32 -> (GHC.Word.Word32, GHC.Word.Word32)
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s2E1f y_s2E1g]
        case ds_s2E1f of {
          GHC.Word.W32# x#_s2E1i ->
              case y_s2E1g of {
                GHC.Word.W32# y#_s2E1k [Occ=Once!] ->
                    case y#_s2E1k of wild2_s2E1l {
                      __DEFAULT ->
                          let {
                            sat_s2E1p [Occ=Once] :: GHC.Word.Word32
                            [LclId] =
                                [x#_s2E1i wild2_s2E1l] \u []
                                    case remWord# [x#_s2E1i wild2_s2E1l] of wild3_s2E1o {
                                      __DEFAULT -> GHC.Word.W32# [wild3_s2E1o];
                                    }; } in
                          let {
                            sat_s2E1n [Occ=Once] :: GHC.Word.Word32
                            [LclId] =
                                [x#_s2E1i wild2_s2E1l] \u []
                                    case quotWord# [x#_s2E1i wild2_s2E1l] of wild3_s2E1m {
                                      __DEFAULT -> GHC.Word.W32# [wild3_s2E1m];
                                    };
                          } in  (,) [sat_s2E1n sat_s2E1p];
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.gtWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2E1q ds1_s2E1r]
        case ds_s2E1q of {
          GHC.Word.W32# x_s2E1t [Occ=Once] ->
              case ds1_s2E1r of {
                GHC.Word.W32# y_s2E1v [Occ=Once] ->
                    case gtWord# [x_s2E1t y_s2E1v] of sat_s2E1w {
                      __DEFAULT -> tagToEnum# [sat_s2E1w];
                    };
              };
        };

GHC.Word.geWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2E1x ds1_s2E1y]
        case ds_s2E1x of {
          GHC.Word.W32# x_s2E1A [Occ=Once] ->
              case ds1_s2E1y of {
                GHC.Word.W32# y_s2E1C [Occ=Once] ->
                    case geWord# [x_s2E1A y_s2E1C] of sat_s2E1D {
                      __DEFAULT -> tagToEnum# [sat_s2E1D];
                    };
              };
        };

GHC.Word.ltWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2E1E ds1_s2E1F]
        case ds_s2E1E of {
          GHC.Word.W32# x_s2E1H [Occ=Once] ->
              case ds1_s2E1F of {
                GHC.Word.W32# y_s2E1J [Occ=Once] ->
                    case ltWord# [x_s2E1H y_s2E1J] of sat_s2E1K {
                      __DEFAULT -> tagToEnum# [sat_s2E1K];
                    };
              };
        };

GHC.Word.leWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2E1L ds1_s2E1M]
        case ds_s2E1L of {
          GHC.Word.W32# x_s2E1O [Occ=Once] ->
              case ds1_s2E1M of {
                GHC.Word.W32# y_s2E1Q [Occ=Once] ->
                    case leWord# [x_s2E1O y_s2E1Q] of sat_s2E1R {
                      __DEFAULT -> tagToEnum# [sat_s2E1R];
                    };
              };
        };

GHC.Word.$fOrdWord32_$ccompare
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2E1S y_s2E1T]
        case x_s2E1S of {
          GHC.Word.W32# x1_s2E1V ->
              case y_s2E1T of {
                GHC.Word.W32# y1_s2E1X ->
                    case eqWord# [x1_s2E1V y1_s2E1X] of {
                      __DEFAULT ->
                          case leWord# [x1_s2E1V y1_s2E1X] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Word.$fOrdWord32_$cmax
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2E20 y_s2E21]
        case x_s2E20 of wild_s2E22 {
          GHC.Word.W32# x1_s2E23 [Occ=Once] ->
              case y_s2E21 of wild1_s2E24 {
                GHC.Word.W32# y1_s2E25 [Occ=Once] ->
                    case leWord# [x1_s2E23 y1_s2E25] of {
                      __DEFAULT -> wild_s2E22;
                      1# -> wild1_s2E24;
                    };
              };
        };

GHC.Word.$fOrdWord32_$cmin
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2E27 y_s2E28]
        case x_s2E27 of wild_s2E29 {
          GHC.Word.W32# x1_s2E2a [Occ=Once] ->
              case y_s2E28 of wild1_s2E2b {
                GHC.Word.W32# y1_s2E2c [Occ=Once] ->
                    case leWord# [x1_s2E2a y1_s2E2c] of {
                      __DEFAULT -> wild1_s2E2b;
                      1# -> wild_s2E29;
                    };
              };
        };

GHC.Word.$fOrdWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Word.$fEqWord32
                                      GHC.Word.$fOrdWord32_$ccompare
                                      GHC.Word.ltWord32
                                      GHC.Word.leWord32
                                      GHC.Word.gtWord32
                                      GHC.Word.geWord32
                                      GHC.Word.$fOrdWord32_$cmax
                                      GHC.Word.$fOrdWord32_$cmin];

GHC.Word.$fIxWord32_$cinRange
  :: (GHC.Word.Word32, GHC.Word.Word32)
     -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2E2e i_s2E2f]
        case ds_s2E2e of {
          (,) m_s2E2h [Occ=Once!] n_s2E2i [Occ=Once!] ->
              case m_s2E2h of {
                GHC.Word.W32# x_s2E2k [Occ=Once] ->
                    case i_s2E2f of {
                      GHC.Word.W32# y_s2E2m ->
                          case leWord# [x_s2E2k y_s2E2m] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s2E2i of {
                                  GHC.Word.W32# y1_s2E2p [Occ=Once] ->
                                      case leWord# [y_s2E2m y1_s2E2p] of sat_s2E2q {
                                        __DEFAULT -> tagToEnum# [sat_s2E2q];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord32_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word32 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2E2r]
        case w_s2E2r of {
          GHC.Word.W32# ww1_s2E2t [Occ=Once] ->
              case word2Int# [ww1_s2E2t] of sat_s2E2u {
                __DEFAULT ->
                    case GHC.Integer.Type.smallInteger sat_s2E2u of sat_s2E2v {
                      __DEFAULT ->
                          case
                              GHC.Integer.Type.timesInteger sat_s2E2v GHC.Word.$fRealWord1
                          of
                          sat_s2E2w
                          { __DEFAULT ->
                                case GHC.Real.$w$sreduce sat_s2E2w GHC.Word.$fRealWord1 of {
                                  (#,#) ww3_s2E2y [Occ=Once] ww4_s2E2z [Occ=Once] ->
                                      GHC.Real.:% [ww3_s2E2y ww4_s2E2z];
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Word.$fNumWord32
                                    GHC.Word.$fOrdWord32
                                    GHC.Word.$fRealWord32_$ctoRational];

GHC.Word.$fIntegralWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Word.$fRealWord32
                                        GHC.Word.$fEnumWord32
                                        GHC.Word.$fIntegralWord32_$cquot
                                        GHC.Word.$fIntegralWord32_$crem
                                        GHC.Word.$fIntegralWord32_$cquot
                                        GHC.Word.$fIntegralWord32_$crem
                                        GHC.Word.$fIntegralWord32_$cquotRem
                                        GHC.Word.$fIntegralWord32_$cdivMod
                                        GHC.Word.$ctoInteger2];

GHC.Word.$fIxWord32_$cunsafeIndex
  :: (GHC.Word.Word32, GHC.Word.Word32)
     -> GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2E2A i_s2E2B]
        case ds_s2E2A of {
          (,) m_s2E2D [Occ=Once!] _ [Occ=Dead] ->
              case i_s2E2B of {
                GHC.Word.W32# x#_s2E2G [Occ=Once] ->
                    case m_s2E2D of {
                      GHC.Word.W32# y#_s2E2I [Occ=Once] ->
                          case minusWord# [x#_s2E2G y#_s2E2I] of sat_s2E2J {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2E2J] of sat_s2E2K {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2E2K] of sat_s2E2L {
                                        __DEFAULT -> GHC.Types.I# [sat_s2E2L];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord32_$crange
  :: (GHC.Word.Word32, GHC.Word.Word32) -> [GHC.Word.Word32]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s2E2M]
        case ds_s2E2M of {
          (,) m_s2E2O [Occ=Once] n_s2E2P [Occ=Once] ->
              GHC.Word.$fEnumWord32_$cenumFromTo m_s2E2O n_s2E2P;
        };

GHC.Word.$fIxWord32_$crangeSize
  :: (GHC.Word.Word32, GHC.Word.Word32) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2E2Q]
        case b_s2E2Q of {
          (,) _l_s2E2S [Occ=Once!] h_s2E2T [Occ=Once!] ->
              case _l_s2E2S of {
                GHC.Word.W32# x_s2E2V ->
                    case h_s2E2T of {
                      GHC.Word.W32# y_s2E2X ->
                          case leWord# [x_s2E2V y_s2E2X] of {
                            __DEFAULT -> GHC.Word.$fIxWord1;
                            1# ->
                                case minusWord# [y_s2E2X x_s2E2V] of sat_s2E2Z {
                                  __DEFAULT ->
                                      case narrow32Word# [sat_s2E2Z] of sat_s2E30 {
                                        __DEFAULT ->
                                            case word2Int# [sat_s2E30] of sat_s2E31 {
                                              __DEFAULT ->
                                                  case +# [sat_s2E31 1#] of sat_s2E32 {
                                                    __DEFAULT -> GHC.Types.I# [sat_s2E32];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord32_$cunsafeRangeSize
  :: (GHC.Word.Word32, GHC.Word.Word32) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2E33]
        case b_s2E33 of {
          (,) _l_s2E35 [Occ=Once!] h_s2E36 [Occ=Once!] ->
              case h_s2E36 of {
                GHC.Word.W32# x#_s2E38 [Occ=Once] ->
                    case _l_s2E35 of {
                      GHC.Word.W32# y#_s2E3a [Occ=Once] ->
                          case minusWord# [x#_s2E38 y#_s2E3a] of sat_s2E3b {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2E3b] of sat_s2E3c {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2E3c] of sat_s2E3d {
                                        __DEFAULT ->
                                            case +# [sat_s2E3d 1#] of sat_s2E3e {
                                              __DEFAULT -> GHC.Types.I# [sat_s2E3e];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord32_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Word.Word32, GHC.Word.Word32)
     -> GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2E3f eta1_s2E3g]
        case eta_s2E3f of {
          (,) m_s2E3i [Occ=Once!] n_s2E3j [Occ=Once!] ->
              case m_s2E3i of {
                GHC.Word.W32# x_s2E3l ->
                    case eta1_s2E3g of {
                      GHC.Word.W32# y_s2E3n ->
                          case leWord# [x_s2E3l y_s2E3n] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s2E3j of {
                                  GHC.Word.W32# y1_s2E3q [Occ=Once] ->
                                      case leWord# [y_s2E3n y1_s2E3q] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case minusWord# [y_s2E3n x_s2E3l] of sat_s2E3s {
                                              __DEFAULT ->
                                                  case narrow32Word# [sat_s2E3s] of sat_s2E3t {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s2E3t] of sat_s2E3u {
                                                          __DEFAULT -> GHC.Types.I# [sat_s2E3u];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Word.$fOrdWord32
                                 GHC.Word.$fIxWord32_$crange
                                 GHC.Word.$fIxWord32_$cindex
                                 GHC.Word.$fIxWord32_$cunsafeIndex
                                 GHC.Word.$fIxWord32_$cinRange
                                 GHC.Word.$fIxWord32_$crangeSize
                                 GHC.Word.$fIxWord32_$cunsafeRangeSize];

GHC.Word.byteSwap32 :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2E3v]
        case ds_s2E3v of {
          GHC.Word.W32# w#_s2E3x [Occ=Once] ->
              case byteSwap32# [w#_s2E3x] of sat_s2E3y {
                __DEFAULT ->
                    case narrow32Word# [sat_s2E3y] of sat_s2E3z {
                      __DEFAULT -> GHC.Word.W32# [sat_s2E3z];
                    };
              };
        };

GHC.Word.$fBitsWord64_$ccomplement
  :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2E3A]
        case ds_s2E3A of {
          GHC.Word.W64# x#_s2E3C [Occ=Once] ->
              case xor# [x#_s2E3C 18446744073709551615##] of sat_s2E3D {
                __DEFAULT -> GHC.Word.W64# [sat_s2E3D];
              };
        };

GHC.Word.$fBitsWord6 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Word.$fBitsWord5];

GHC.Word.$fBitsWord64_$cbitSizeMaybe
  :: GHC.Word.Word64 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s2E3E] GHC.Word.$fBitsWord6;

GHC.Word.$fBitsWord64_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s2E3F]
        case i_s2E3F of {
          GHC.Types.I# i#_s2E3H ->
              case >=# [i#_s2E3H 64#] of {
                __DEFAULT ->
                    case uncheckedShiftL# [1## i#_s2E3H] of sat_s2E3J {
                      __DEFAULT -> GHC.Word.W64# [sat_s2E3J];
                    };
                1# -> GHC.Word.$fBitsWord7;
              };
        };

GHC.Word.$fBitsWord64_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2E3K i_s2E3L]
        case x_s2E3K of {
          GHC.Word.W64# x#_s2E3N [Occ=Once] ->
              case i_s2E3L of {
                GHC.Types.I# i#_s2E3P ->
                    case >=# [i#_s2E3P 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2E3P] of sat_s2E3R {
                            __DEFAULT ->
                                case and# [x#_s2E3N sat_s2E3R] of {
                                  __DEFAULT -> GHC.Types.True [];
                                  0## -> GHC.Types.False [];
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Word.$fBitsWord64_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2E3T eta1_s2E3U]
        case eta_s2E3T of wild_s2E3V {
          GHC.Word.W64# x#_s2E3W ->
              case eta1_s2E3U of {
                GHC.Types.I# x1_s2E3Y [Occ=Once] ->
                    case negateInt# [x1_s2E3Y] of sat_s2E3Z {
                      __DEFAULT ->
                          case int2Word# [sat_s2E3Z] of sat_s2E40 {
                            __DEFAULT ->
                                case and# [sat_s2E40 63##] of sat_s2E41 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2E41] of wild2_s2E42 {
                                        __DEFAULT ->
                                            case -# [64# wild2_s2E42] of sat_s2E44 {
                                              __DEFAULT ->
                                                  case
                                                      uncheckedShiftRL# [x#_s2E3W sat_s2E44]
                                                  of
                                                  sat_s2E45
                                                  { __DEFAULT ->
                                                        case
                                                            uncheckedShiftL# [x#_s2E3W wild2_s2E42]
                                                        of
                                                        sat_s2E43
                                                        { __DEFAULT ->
                                                              case
                                                                  or# [sat_s2E43 sat_s2E45]
                                                              of
                                                              sat_s2E46
                                                              { __DEFAULT ->
                                                                    GHC.Word.W64# [sat_s2E46];
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s2E3V;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord64_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2E47 eta1_s2E48]
        case eta_s2E47 of wild_s2E49 {
          GHC.Word.W64# x#_s2E4a [Occ=Once] ->
              case eta1_s2E48 of {
                GHC.Types.I# i#_s2E4c ->
                    case >=# [i#_s2E4c 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2E4c] of sat_s2E4e {
                            __DEFAULT ->
                                case xor# [x#_s2E4a sat_s2E4e] of sat_s2E4f {
                                  __DEFAULT -> GHC.Word.W64# [sat_s2E4f];
                                };
                          };
                      1# -> wild_s2E49;
                    };
              };
        };

GHC.Word.$fBitsWord64_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2E4g eta1_s2E4h]
        case eta_s2E4g of {
          GHC.Word.W64# x#_s2E4j [Occ=Once*] ->
              case eta1_s2E4h of {
                GHC.Types.I# i#_s2E4l ->
                    case >=# [i#_s2E4l 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2E4l] of sat_s2E4n {
                            __DEFAULT ->
                                case xor# [sat_s2E4n 18446744073709551615##] of sat_s2E4o {
                                  __DEFAULT ->
                                      case and# [x#_s2E4j sat_s2E4o] of sat_s2E4p {
                                        __DEFAULT -> GHC.Word.W64# [sat_s2E4p];
                                      };
                                };
                          };
                      1# ->
                          case and# [x#_s2E4j 18446744073709551615##] of sat_s2E4q {
                            __DEFAULT -> GHC.Word.W64# [sat_s2E4q];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord64_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2E4r eta1_s2E4s]
        case eta_s2E4r of wild_s2E4t {
          GHC.Word.W64# x#_s2E4u [Occ=Once] ->
              case eta1_s2E4s of {
                GHC.Types.I# i#_s2E4w ->
                    case >=# [i#_s2E4w 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2E4w] of sat_s2E4y {
                            __DEFAULT ->
                                case or# [x#_s2E4u sat_s2E4y] of sat_s2E4z {
                                  __DEFAULT -> GHC.Word.W64# [sat_s2E4z];
                                };
                          };
                      1# -> wild_s2E4t;
                    };
              };
        };

GHC.Word.$fBitsWord64_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Word.$fBitsWord64_$crotate eta_B2 eta_B1;

GHC.Word.$fBitsWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Word.$fEqWord64
                                     GHC.Word.$fBitsWord64_$c.&.
                                     GHC.Word.$fBitsWord64_$c.|.
                                     GHC.Word.$fBitsWord64_$cxor
                                     GHC.Word.$fBitsWord64_$ccomplement
                                     GHC.Word.$fBitsWord64_$cshift
                                     GHC.Word.$fBitsWord64_$crotate
                                     GHC.Word.$fBitsWord7
                                     GHC.Word.$fBitsWord64_$cbit
                                     GHC.Word.$fBitsWord64_$csetBit
                                     GHC.Word.$fBitsWord64_$cclearBit
                                     GHC.Word.$fBitsWord64_$ccomplementBit
                                     GHC.Word.$fBitsWord64_$ctestBit
                                     GHC.Word.$fBitsWord64_$cbitSizeMaybe
                                     GHC.Word.$fBitsWord64_$cfiniteBitSize
                                     GHC.Word.$fBitsWord64_$cisSigned
                                     GHC.Word.$fBitsWord64_$cshiftL
                                     GHC.Word.$fBitsWord64_$cunsafeShiftL
                                     GHC.Word.$fBitsWord64_$cshiftR
                                     GHC.Word.$fBitsWord64_$cunsafeShiftR
                                     GHC.Word.$fBitsWord64_$crotateL
                                     GHC.Word.$fBitsWord64_$crotateR
                                     GHC.Word.$fBitsWord64_$cpopCount];

GHC.Word.$fFiniteBitsWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Word.$fBitsWord64
                                           GHC.Word.$fBitsWord64_$cfiniteBitSize
                                           GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                                           GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros];

GHC.Word.$fIxWord64_$cinRange
  :: (GHC.Word.Word64, GHC.Word.Word64)
     -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2E4A i_s2E4B]
        case ds_s2E4A of {
          (,) m_s2E4D [Occ=Once!] n_s2E4E [Occ=Once!] ->
              case m_s2E4D of {
                GHC.Word.W64# x_s2E4G [Occ=Once] ->
                    case i_s2E4B of {
                      GHC.Word.W64# y_s2E4I ->
                          case leWord# [x_s2E4G y_s2E4I] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s2E4E of {
                                  GHC.Word.W64# y1_s2E4L [Occ=Once] ->
                                      case leWord# [y_s2E4I y1_s2E4L] of sat_s2E4M {
                                        __DEFAULT -> tagToEnum# [sat_s2E4M];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord64_$crange
  :: (GHC.Word.Word64, GHC.Word.Word64) -> [GHC.Word.Word64]
[GblId, Arity=1, Str=<S,1*U(U,U)>, Unf=OtherCon []] =
    [] \r [ds_s2E4N]
        case ds_s2E4N of {
          (,) m_s2E4P [Occ=Once] n_s2E4Q [Occ=Once] ->
              GHC.Word.$fEnumWord64_$cenumFromTo m_s2E4P n_s2E4Q;
        };

GHC.Word.$fIxWord64_$cunsafeIndex
  :: (GHC.Word.Word64, GHC.Word.Word64)
     -> GHC.Word.Word64 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2E4R i_s2E4S]
        case ds_s2E4R of {
          (,) m_s2E4U [Occ=Once!] _ [Occ=Dead] ->
              case i_s2E4S of {
                GHC.Word.W64# x#_s2E4X [Occ=Once] ->
                    case m_s2E4U of {
                      GHC.Word.W64# y#_s2E4Z [Occ=Once] ->
                          case minusWord# [x#_s2E4X y#_s2E4Z] of sat_s2E50 {
                            __DEFAULT ->
                                case word2Int# [sat_s2E50] of sat_s2E51 {
                                  __DEFAULT -> GHC.Types.I# [sat_s2E51];
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord64_$crangeSize
  :: (GHC.Word.Word64, GHC.Word.Word64) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2E52]
        case b_s2E52 of {
          (,) _l_s2E54 [Occ=Once!] h_s2E55 [Occ=Once!] ->
              case _l_s2E54 of {
                GHC.Word.W64# x_s2E57 ->
                    case h_s2E55 of {
                      GHC.Word.W64# y_s2E59 ->
                          case leWord# [x_s2E57 y_s2E59] of {
                            __DEFAULT -> GHC.Word.$fIxWord1;
                            1# ->
                                case minusWord# [y_s2E59 x_s2E57] of sat_s2E5b {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2E5b] of sat_s2E5c {
                                        __DEFAULT ->
                                            case +# [sat_s2E5c 1#] of sat_s2E5d {
                                              __DEFAULT -> GHC.Types.I# [sat_s2E5d];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord64_$cunsafeRangeSize
  :: (GHC.Word.Word64, GHC.Word.Word64) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2E5e]
        case b_s2E5e of {
          (,) _l_s2E5g [Occ=Once!] h_s2E5h [Occ=Once!] ->
              case h_s2E5h of {
                GHC.Word.W64# x#_s2E5j [Occ=Once] ->
                    case _l_s2E5g of {
                      GHC.Word.W64# y#_s2E5l [Occ=Once] ->
                          case minusWord# [x#_s2E5j y#_s2E5l] of sat_s2E5m {
                            __DEFAULT ->
                                case word2Int# [sat_s2E5m] of sat_s2E5n {
                                  __DEFAULT ->
                                      case +# [sat_s2E5n 1#] of sat_s2E5o {
                                        __DEFAULT -> GHC.Types.I# [sat_s2E5o];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord64_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Word.Word64, GHC.Word.Word64)
     -> GHC.Word.Word64 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2E5p eta1_s2E5q]
        case eta_s2E5p of {
          (,) m_s2E5s [Occ=Once!] n_s2E5t [Occ=Once!] ->
              case m_s2E5s of {
                GHC.Word.W64# x_s2E5v ->
                    case eta1_s2E5q of {
                      GHC.Word.W64# y_s2E5x ->
                          case leWord# [x_s2E5v y_s2E5x] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s2E5t of {
                                  GHC.Word.W64# y1_s2E5A [Occ=Once] ->
                                      case leWord# [y_s2E5x y1_s2E5A] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case minusWord# [y_s2E5x x_s2E5v] of sat_s2E5C {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s2E5C] of sat_s2E5D {
                                                    __DEFAULT -> GHC.Types.I# [sat_s2E5D];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Word.$fOrdWord64
                                 GHC.Word.$fIxWord64_$crange
                                 GHC.Word.$fIxWord64_$cindex
                                 GHC.Word.$fIxWord64_$cunsafeIndex
                                 GHC.Word.$fIxWord64_$cinRange
                                 GHC.Word.$fIxWord64_$crangeSize
                                 GHC.Word.$fIxWord64_$cunsafeRangeSize];

GHC.Word.uncheckedShiftL64#
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedShiftL# [eta_B2 eta_B1];

GHC.Word.uncheckedShiftRL64#
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedShiftRL# [eta_B2 eta_B1];

GHC.Word.byteSwap64 :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2E5E]
        case ds_s2E5E of {
          GHC.Word.W64# w#_s2E5G [Occ=Once] ->
              case byteSwap# [w#_s2E5G] of sat_s2E5H {
                __DEFAULT -> GHC.Word.W64# [sat_s2E5H];
              };
        };

GHC.Word.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Word.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$trModule4];

GHC.Word.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Word"#;

GHC.Word.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$trModule2];

GHC.Word.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Word.$trModule3
                                     GHC.Word.$trModule1];

$krep_r2uFN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWord#
                                              GHC.Types.[]];

GHC.Word.$tcWord7 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tcWord9];

GHC.Word.$tcWord8 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2052113150978616866##
                                    10393726928463219846##
                                    GHC.Word.$trModule
                                    GHC.Word.$tcWord7
                                    0#
                                    GHC.Types.krep$*];

$krep1_r2uFO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord8
                                              GHC.Types.[]];

GHC.Word.$tc'W8#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r2uFN $krep1_r2uFO];

GHC.Word.$tc'W8#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'W8#"#;

GHC.Word.$tc'W8#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tc'W8#3];

GHC.Word.$tc'W8# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12964227823649101302##
                                    11115249754126507208##
                                    GHC.Word.$trModule
                                    GHC.Word.$tc'W8#2
                                    0#
                                    GHC.Word.$tc'W8#1];

GHC.Word.$tcWord1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tcWord2];

GHC.Word.$tcWord16 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1884349046328127494##
                                    12602100146125136909##
                                    GHC.Word.$trModule
                                    GHC.Word.$tcWord1
                                    0#
                                    GHC.Types.krep$*];

$krep2_r2uFP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord16
                                              GHC.Types.[]];

GHC.Word.$tc'W16#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r2uFN $krep2_r2uFP];

GHC.Word.$tc'W16#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'W16#"#;

GHC.Word.$tc'W16#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tc'W16#3];

GHC.Word.$tc'W16# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13828125037659739325##
                                    16689402625363715300##
                                    GHC.Word.$trModule
                                    GHC.Word.$tc'W16#2
                                    0#
                                    GHC.Word.$tc'W16#1];

GHC.Word.$tcWord3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tcWord4];

GHC.Word.$tcWord32 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3293767376230595825##
                                    2424786049275339072##
                                    GHC.Word.$trModule
                                    GHC.Word.$tcWord3
                                    0#
                                    GHC.Types.krep$*];

$krep3_r2uFQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord32
                                              GHC.Types.[]];

GHC.Word.$tc'W32#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r2uFN $krep3_r2uFQ];

GHC.Word.$tc'W32#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'W32#"#;

GHC.Word.$tc'W32#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tc'W32#3];

GHC.Word.$tc'W32# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15609358257729636621##
                                    4567728021977807739##
                                    GHC.Word.$trModule
                                    GHC.Word.$tc'W32#2
                                    0#
                                    GHC.Word.$tc'W32#1];

GHC.Word.$tcWord5 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tcWord6];

GHC.Word.$tcWord64 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3342358330123258062##
                                    10610880953247303810##
                                    GHC.Word.$trModule
                                    GHC.Word.$tcWord5
                                    0#
                                    GHC.Types.krep$*];

$krep4_r2uFR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord64
                                              GHC.Types.[]];

GHC.Word.$tc'W64#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r2uFN $krep4_r2uFR];

GHC.Word.$tc'W64#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'W64#"#;

GHC.Word.$tc'W64#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tc'W64#3];

GHC.Word.$tc'W64# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3390197976568817661##
                                    1176743391454549598##
                                    GHC.Word.$trModule
                                    GHC.Word.$tc'W64#2
                                    0#
                                    GHC.Word.$tc'W64#1];

GHC.Word.W8# :: GHC.Prim.Word# -> GHC.Word.Word8
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Word.W8# [eta_B1];

GHC.Word.W16# :: GHC.Prim.Word# -> GHC.Word.Word16
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Word.W16# [eta_B1];

GHC.Word.W32# :: GHC.Prim.Word# -> GHC.Word.Word32
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Word.W32# [eta_B1];

GHC.Word.W64# :: GHC.Prim.Word# -> GHC.Word.Word64
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Word.W64# [eta_B1];


==================== STG syntax: ====================
2018-03-16 15:57:22.508770792 UTC

GHC.Word.$fEnumWord8_$cfromEnum :: GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2Dxw]
        case ds_s2Dxw of {
          GHC.Word.W8# x#_s2Dxy [Occ=Once] ->
              case word2Int# [x#_s2Dxy] of sat_s2Dxz {
                __DEFAULT -> GHC.Types.I# [sat_s2Dxz];
              };
        };

GHC.Word.$fEnumWord16_$cfromEnum
  :: GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DxA]
        case ds_s2DxA of {
          GHC.Word.W16# x#_s2DxC [Occ=Once] ->
              case word2Int# [x#_s2DxC] of sat_s2DxD {
                __DEFAULT -> GHC.Types.I# [sat_s2DxD];
              };
        };

GHC.Word.$fEnumWord32_$cfromEnum
  :: GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DxE]
        case ds_s2DxE of {
          GHC.Word.W32# x#_s2DxG [Occ=Once] ->
              case word2Int# [x#_s2DxG] of sat_s2DxH {
                __DEFAULT -> GHC.Types.I# [sat_s2DxH];
              };
        };

GHC.Word.$fNumWord64_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Word.Word64
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s2DxI]
        case GHC.Integer.Type.integerToWord i_s2DxI of wild_s2DxJ {
          __DEFAULT -> GHC.Word.W64# [wild_s2DxJ];
        };

GHC.Word.$fNumWord64_$cabs :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_s2DxK] x_s2DxK;

GHC.Word.$fNumWord64_$cnegate :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DxL]
        case ds_s2DxL of {
          GHC.Word.W64# x#_s2DxN [Occ=Once] ->
              case word2Int# [x#_s2DxN] of sat_s2DxO {
                __DEFAULT ->
                    case negateInt# [sat_s2DxO] of sat_s2DxP {
                      __DEFAULT ->
                          case int2Word# [sat_s2DxP] of sat_s2DxQ {
                            __DEFAULT -> GHC.Word.W64# [sat_s2DxQ];
                          };
                    };
              };
        };

GHC.Word.$fNumWord64_$c*
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DxR ds1_s2DxS]
        case ds_s2DxR of {
          GHC.Word.W64# x#_s2DxU [Occ=Once] ->
              case ds1_s2DxS of {
                GHC.Word.W64# y#_s2DxW [Occ=Once] ->
                    case timesWord# [x#_s2DxU y#_s2DxW] of sat_s2DxX {
                      __DEFAULT -> GHC.Word.W64# [sat_s2DxX];
                    };
              };
        };

GHC.Word.$fNumWord64_$c-
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DxY ds1_s2DxZ]
        case ds_s2DxY of {
          GHC.Word.W64# x#_s2Dy1 [Occ=Once] ->
              case ds1_s2DxZ of {
                GHC.Word.W64# y#_s2Dy3 [Occ=Once] ->
                    case minusWord# [x#_s2Dy1 y#_s2Dy3] of sat_s2Dy4 {
                      __DEFAULT -> GHC.Word.W64# [sat_s2Dy4];
                    };
              };
        };

GHC.Word.$fNumWord64_$c+
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2Dy5 ds1_s2Dy6]
        case ds_s2Dy5 of {
          GHC.Word.W64# x#_s2Dy8 [Occ=Once] ->
              case ds1_s2Dy6 of {
                GHC.Word.W64# y#_s2Dya [Occ=Once] ->
                    case plusWord# [x#_s2Dy8 y#_s2Dya] of sat_s2Dyb {
                      __DEFAULT -> GHC.Word.W64# [sat_s2Dyb];
                    };
              };
        };

GHC.Word.$tcWord6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word64"#;

lvl_r2uFF :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Word.$tcWord6;

GHC.Word.$fIntegralWord64_$ctoInteger
  :: GHC.Word.Word64 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2Dyc]
        case ds_s2Dyc of {
          GHC.Word.W64# x#_s2Dye ->
              case word2Int# [x#_s2Dye] of i#_s2Dyf [Dmd=<S,U>] {
                __DEFAULT ->
                    case >=# [i#_s2Dyf 0#] of {
                      __DEFAULT -> GHC.Integer.Type.wordToInteger x#_s2Dye;
                      1# -> GHC.Integer.Type.smallInteger i#_s2Dyf;
                    };
              };
        };

GHC.Word.$fShowWord3 :: GHC.Word.Word64 -> GHC.Show.ShowS
[GblId, Arity=1, Str=<L,1*U(U)>, Unf=OtherCon []] =
    [] \r [x_s2Dyh]
        let {
          w1_s2Dyi [Occ=OnceL] :: GHC.Integer.Type.Integer
          [LclId] =
              [x_s2Dyh] \u []
                  case x_s2Dyh of {
                    GHC.Word.W64# x#_s2Dyk ->
                        case word2Int# [x#_s2Dyk] of i#_s2Dyl [Dmd=<S,U>] {
                          __DEFAULT ->
                              case >=# [i#_s2Dyl 0#] of {
                                __DEFAULT -> GHC.Integer.Type.wordToInteger x#_s2Dyk;
                                1# -> GHC.Integer.Type.smallInteger i#_s2Dyl;
                              };
                        };
                  }; } in
        let {
          sat_s2Dyr [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
          [LclId] =
              [w1_s2Dyi] \r [w2_s2Dyn]
                  case GHC.Show.$w$cshowsPrec4 0# w1_s2Dyi w2_s2Dyn of {
                    (#,#) ww3_s2Dyp [Occ=Once] ww4_s2Dyq [Occ=Once] ->
                        : [ww3_s2Dyp ww4_s2Dyq];
                  };
        } in  sat_s2Dyr;

GHC.Word.$fShowWord64_$cshowList
  :: [GHC.Word.Word64] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s2Dys s_s2Dyt]
        GHC.Show.showList__ GHC.Word.$fShowWord3 ls_s2Dys s_s2Dyt;

GHC.Word.$w$cshow [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s2Dyu]
        case word2Int# [ww_s2Dyu] of i#_s2Dyv [Dmd=<S,U>] {
          __DEFAULT ->
              case >=# [i#_s2Dyv 0#] of {
                __DEFAULT ->
                    case GHC.Integer.Type.wordToInteger ww_s2Dyu of sat_s2Dyx {
                      __DEFAULT -> GHC.Show.$w$cshowsPrec4 0# sat_s2Dyx GHC.Types.[];
                    };
                1# ->
                    case GHC.Integer.Type.smallInteger i#_s2Dyv of sat_s2Dyy {
                      __DEFAULT -> GHC.Show.$w$cshowsPrec4 0# sat_s2Dyy GHC.Types.[];
                    };
              };
        };

GHC.Word.$fShowWord64_$cshow [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word64 -> GHC.Base.String
[GblId, Arity=1, Str=<S(S),1*U(U)>m2, Unf=OtherCon []] =
    [] \r [w_s2Dyz]
        case w_s2Dyz of {
          GHC.Word.W64# ww1_s2DyB [Occ=Once] ->
              case GHC.Word.$w$cshow ww1_s2DyB of {
                (#,#) ww3_s2DyD [Occ=Once] ww4_s2DyE [Occ=Once] ->
                    : [ww3_s2DyD ww4_s2DyE];
              };
        };

GHC.Word.$fShowWord64_$cshowsPrec
  :: GHC.Types.Int -> GHC.Word.Word64 -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,U(U)><L,1*U(U)>, Unf=OtherCon []] =
    [] \r [p_s2DyF x_s2DyG]
        let {
          w1_s2DyH [Occ=OnceL] :: GHC.Integer.Type.Integer
          [LclId] =
              [x_s2DyG] \u []
                  case x_s2DyG of {
                    GHC.Word.W64# x#_s2DyJ ->
                        case word2Int# [x#_s2DyJ] of i#_s2DyK [Dmd=<S,U>] {
                          __DEFAULT ->
                              case >=# [i#_s2DyK 0#] of {
                                __DEFAULT -> GHC.Integer.Type.wordToInteger x#_s2DyJ;
                                1# -> GHC.Integer.Type.smallInteger i#_s2DyK;
                              };
                        };
                  }; } in
        let {
          sat_s2DyS [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
          [LclId] =
              [p_s2DyF w1_s2DyH] \r [w2_s2DyM]
                  case p_s2DyF of {
                    GHC.Types.I# ww1_s2DyO [Occ=Once] ->
                        case GHC.Show.$w$cshowsPrec4 ww1_s2DyO w1_s2DyH w2_s2DyM of {
                          (#,#) ww3_s2DyQ [Occ=Once] ww4_s2DyR [Occ=Once] ->
                              : [ww3_s2DyQ ww4_s2DyR];
                        };
                  };
        } in  sat_s2DyS;

GHC.Word.$fShowWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Word.$fShowWord64_$cshowsPrec
                                    GHC.Word.$fShowWord64_$cshow
                                    GHC.Word.$fShowWord64_$cshowList];

GHC.Word.$fEnumWord5 :: GHC.Word.Word64 -> GHC.Types.Int
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [x_s2DyT]
        GHC.Enum.fromEnumError GHC.Word.$fShowWord64 lvl_r2uFF x_s2DyT;

sat_s2DyU :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

sat_s2DyV :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_s2DyU GHC.Types.[]];

GHC.Word.$fRealWord1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_s2DyV;

GHC.Word.$w$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s2DyW]
        case word2Int# [ww_s2DyW] of i#_s2DyX [Dmd=<S,U>] {
          __DEFAULT ->
              case >=# [i#_s2DyX 0#] of {
                __DEFAULT ->
                    case GHC.Integer.Type.wordToInteger ww_s2DyW of sat_s2DyZ {
                      __DEFAULT ->
                          case
                              GHC.Integer.Type.timesInteger sat_s2DyZ GHC.Word.$fRealWord1
                          of
                          sat_s2Dz0
                          { __DEFAULT -> GHC.Real.$w$sreduce sat_s2Dz0 GHC.Word.$fRealWord1;
                          };
                    };
                1# ->
                    case GHC.Integer.Type.smallInteger i#_s2DyX of sat_s2Dz1 {
                      __DEFAULT ->
                          case
                              GHC.Integer.Type.timesInteger sat_s2Dz1 GHC.Word.$fRealWord1
                          of
                          sat_s2Dz2
                          { __DEFAULT -> GHC.Real.$w$sreduce sat_s2Dz2 GHC.Word.$fRealWord1;
                          };
                    };
              };
        };

GHC.Word.$fRealWord64_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word64 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2Dz3]
        case w_s2Dz3 of {
          GHC.Word.W64# ww1_s2Dz5 [Occ=Once] ->
              case GHC.Word.$w$ctoRational ww1_s2Dz5 of {
                (#,#) ww3_s2Dz7 [Occ=Once] ww4_s2Dz8 [Occ=Once] ->
                    GHC.Real.:% [ww3_s2Dz7 ww4_s2Dz8];
              };
        };

GHC.Word.$tcWord9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word8"#;

GHC.Word.$fEnumWord10 :: GHC.Word.Word8
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord9 of sat_s2Dz9 {
          __DEFAULT -> GHC.Enum.predError sat_s2Dz9;
        };

GHC.Word.$fEnumWord11 :: GHC.Word.Word8
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord9 of sat_s2Dza {
          __DEFAULT -> GHC.Enum.succError sat_s2Dza;
        };

GHC.Word.neWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2Dzb ds1_s2Dzc]
        case ds_s2Dzb of {
          GHC.Word.W8# x_s2Dze [Occ=Once] ->
              case ds1_s2Dzc of {
                GHC.Word.W8# y_s2Dzg [Occ=Once] ->
                    case neWord# [x_s2Dze y_s2Dzg] of sat_s2Dzh {
                      __DEFAULT -> tagToEnum# [sat_s2Dzh];
                    };
              };
        };

lvl2_r2uFH :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Word.$tcWord9;

GHC.Word.$fBitsWord8_$cminBound :: GHC.Word.Word8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W8#! [0##];

GHC.Word.$fEnumWord8_$cpred :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2Dzi]
        case x_s2Dzi of {
          GHC.Word.W8# x1_s2Dzk [Occ=Once!] ->
              case x1_s2Dzk of wild1_s2Dzl {
                __DEFAULT ->
                    case minusWord# [wild1_s2Dzl 1##] of sat_s2Dzm {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2Dzm] of sat_s2Dzn {
                            __DEFAULT -> GHC.Word.W8# [sat_s2Dzn];
                          };
                    };
                0## -> GHC.Word.$fEnumWord10;
              };
        };

GHC.Word.$fBoundedWord8_$cmaxBound :: GHC.Word.Word8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W8#! [255##];

GHC.Word.$fBoundedWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Word.$fBitsWord8_$cminBound
                                       GHC.Word.$fBoundedWord8_$cmaxBound];

GHC.Word.$fEnumWord8_$csucc :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2Dzo]
        case x_s2Dzo of {
          GHC.Word.W8# x1_s2Dzq [Occ=Once!] ->
              case x1_s2Dzq of wild1_s2Dzr {
                __DEFAULT ->
                    case plusWord# [wild1_s2Dzr 1##] of sat_s2Dzs {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2Dzs] of sat_s2Dzt {
                            __DEFAULT -> GHC.Word.W8# [sat_s2Dzt];
                          };
                    };
                255## -> GHC.Word.$fEnumWord11;
              };
        };

GHC.Word.$fShowWord8_$cshowsPrec
  :: GHC.Types.Int -> GHC.Word.Word8 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s2Dzu x_s2Dzv eta_s2Dzw]
        case x_s2Dzv of {
          GHC.Word.W8# x#_s2Dzy [Occ=Once] ->
              case p_s2Dzu of {
                GHC.Types.I# ww1_s2DzA [Occ=Once] ->
                    case word2Int# [x#_s2Dzy] of sat_s2DzB {
                      __DEFAULT ->
                          case GHC.Show.$wshowSignedInt ww1_s2DzA sat_s2DzB eta_s2Dzw of {
                            (#,#) ww5_s2DzD [Occ=Once] ww6_s2DzE [Occ=Once] ->
                                : [ww5_s2DzD ww6_s2DzE];
                          };
                    };
              };
        };

GHC.Word.$fShowWord8_$cshow :: GHC.Word.Word8 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s2DzF]
        case x_s2DzF of {
          GHC.Word.W8# x#_s2DzH [Occ=Once] ->
              case word2Int# [x#_s2DzH] of sat_s2DzI {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2DzI GHC.Types.[] of {
                      (#,#) ww5_s2DzK [Occ=Once] ww6_s2DzL [Occ=Once] ->
                          : [ww5_s2DzK ww6_s2DzL];
                    };
              };
        };

GHC.Word.$fShowWord4
  :: GHC.Word.Word8 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s2DzM eta_s2DzN]
        case x_s2DzM of {
          GHC.Word.W8# x#_s2DzP [Occ=Once] ->
              case word2Int# [x#_s2DzP] of sat_s2DzQ {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2DzQ eta_s2DzN of {
                      (#,#) ww5_s2DzS [Occ=Once] ww6_s2DzT [Occ=Once] ->
                          : [ww5_s2DzS ww6_s2DzT];
                    };
              };
        };

GHC.Word.$fShowWord8_$cshowList
  :: [GHC.Word.Word8] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s2DzU s_s2DzV]
        GHC.Show.showList__ GHC.Word.$fShowWord4 ls_s2DzU s_s2DzV;

GHC.Word.$fShowWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Word.$fShowWord8_$cshowsPrec
                                    GHC.Word.$fShowWord8_$cshow
                                    GHC.Word.$fShowWord8_$cshowList];

GHC.Word.$wlvl3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Word.Word8
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s2DzW]
        GHC.Enum.$wtoEnumError
            GHC.Word.$fShowWord8
            lvl2_r2uFH
            ww_s2DzW
            GHC.Word.$fBitsWord8_$cminBound
            GHC.Word.$fBoundedWord8_$cmaxBound;

GHC.Word.$w$ctoEnum2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s2DzX]
        case >=# [ww_s2DzX 0#] of {
          __DEFAULT -> GHC.Word.$wlvl3 ww_s2DzX;
          1# ->
              case <=# [ww_s2DzX 255#] of {
                __DEFAULT -> GHC.Word.$wlvl3 ww_s2DzX;
                1# -> int2Word# [ww_s2DzX];
              };
        };

GHC.Word.$fEnumWord8_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Word.Word8
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2DA2]
        case w_s2DA2 of {
          GHC.Types.I# ww1_s2DA4 [Occ=Once] ->
              case GHC.Word.$w$ctoEnum2 ww1_s2DA4 of ww2_s2DA5 {
                __DEFAULT -> GHC.Word.W8# [ww2_s2DA5];
              };
        };

GHC.Word.$w$cenumFromThenTo2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word8]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2DA6 ww1_s2DA7 ww2_s2DA8]
        case word2Int# [ww_s2DA6] of x1_s2DA9 [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2DA7] of x2_s2DAa [Dmd=<S,U>] {
                __DEFAULT ->
                    case >=# [x2_s2DAa x1_s2DA9] of {
                      __DEFAULT ->
                          case word2Int# [ww2_s2DA8] of y_s2DAc [Dmd=<S,U>] {
                            __DEFAULT ->
                                case ># [y_s2DAc x2_s2DAa] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2DAx [Occ=Once] :: [GHC.Word.Word8]
                                        [LclId] =
                                            [x1_s2DA9 x2_s2DAa y_s2DAc] \u []
                                                case
                                                    -# [x2_s2DAa x1_s2DA9]
                                                of
                                                delta_s2DAi [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2DAc delta_s2DAi]
                                                      of
                                                      y'_s2DAj [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_dn_s2DAk [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int# -> [GHC.Word.Word8]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2DAi
                                                                            y'_s2DAj
                                                                            go_dn_s2DAk] \r [x_s2DAl]
                                                                      case
                                                                          <# [x_s2DAl y'_s2DAj]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2DAs [Occ=Once]
                                                                                :: [GHC.Word.Word8]
                                                                              [LclId] =
                                                                                  [delta_s2DAi
                                                                                   go_dn_s2DAk
                                                                                   x_s2DAl] \u []
                                                                                      case
                                                                                          +# [x_s2DAl
                                                                                              delta_s2DAi]
                                                                                      of
                                                                                      sat_s2DAr
                                                                                      { __DEFAULT ->
                                                                                            go_dn_s2DAk
                                                                                                sat_s2DAr;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2DAq [Occ=Once]
                                                                                :: GHC.Word.Word8
                                                                              [LclId] =
                                                                                  [x_s2DAl] \u []
                                                                                      case
                                                                                          >=# [x_s2DAl
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl3
                                                                                                x_s2DAl;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DAl
                                                                                                     255#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl3
                                                                                                      x_s2DAl;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DAl]
                                                                                                  of
                                                                                                  sat_s2DAp
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W8# [sat_s2DAp];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DAq
                                                                                 sat_s2DAs];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2DAw [Occ=Once]
                                                                                :: GHC.Word.Word8
                                                                              [LclId] =
                                                                                  [x_s2DAl] \u []
                                                                                      case
                                                                                          >=# [x_s2DAl
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl3
                                                                                                x_s2DAl;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DAl
                                                                                                     255#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl3
                                                                                                      x_s2DAl;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DAl]
                                                                                                  of
                                                                                                  sat_s2DAv
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W8# [sat_s2DAv];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DAw
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_dn_s2DAk x2_s2DAa;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2DAh [Occ=Once] :: GHC.Word.Word8
                                        [LclId] =
                                            [x1_s2DA9] \u []
                                                case >=# [x1_s2DA9 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl3 x1_s2DA9;
                                                  1# ->
                                                      case <=# [x1_s2DA9 255#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl3 x1_s2DA9;
                                                        1# ->
                                                            case int2Word# [x1_s2DA9] of sat_s2DAg {
                                                              __DEFAULT -> GHC.Word.W8# [sat_s2DAg];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2DAh sat_s2DAx];
                                  1# ->
                                      case ># [y_s2DAc x1_s2DA9] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2DAC [Occ=Once] :: GHC.Word.Word8
                                              [LclId] =
                                                  [x1_s2DA9] \u []
                                                      case >=# [x1_s2DA9 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl3 x1_s2DA9;
                                                        1# ->
                                                            case <=# [x1_s2DA9 255#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl3 x1_s2DA9;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2DA9]
                                                                  of
                                                                  sat_s2DAB
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W8# [sat_s2DAB];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2DAC GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                      1# ->
                          case word2Int# [ww2_s2DA8] of y_s2DAD [Dmd=<S,U>] {
                            __DEFAULT ->
                                case <# [y_s2DAD x2_s2DAa] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2DAY [Occ=Once] :: [GHC.Word.Word8]
                                        [LclId] =
                                            [x1_s2DA9 x2_s2DAa y_s2DAD] \u []
                                                case
                                                    -# [x2_s2DAa x1_s2DA9]
                                                of
                                                delta_s2DAJ [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2DAD delta_s2DAJ]
                                                      of
                                                      y'_s2DAK [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_up_s2DAL [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int# -> [GHC.Word.Word8]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2DAJ
                                                                            y'_s2DAK
                                                                            go_up_s2DAL] \r [x_s2DAM]
                                                                      case
                                                                          ># [x_s2DAM y'_s2DAK]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2DAT [Occ=Once]
                                                                                :: [GHC.Word.Word8]
                                                                              [LclId] =
                                                                                  [delta_s2DAJ
                                                                                   go_up_s2DAL
                                                                                   x_s2DAM] \u []
                                                                                      case
                                                                                          +# [x_s2DAM
                                                                                              delta_s2DAJ]
                                                                                      of
                                                                                      sat_s2DAS
                                                                                      { __DEFAULT ->
                                                                                            go_up_s2DAL
                                                                                                sat_s2DAS;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2DAR [Occ=Once]
                                                                                :: GHC.Word.Word8
                                                                              [LclId] =
                                                                                  [x_s2DAM] \u []
                                                                                      case
                                                                                          >=# [x_s2DAM
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl3
                                                                                                x_s2DAM;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DAM
                                                                                                     255#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl3
                                                                                                      x_s2DAM;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DAM]
                                                                                                  of
                                                                                                  sat_s2DAQ
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W8# [sat_s2DAQ];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DAR
                                                                                 sat_s2DAT];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2DAX [Occ=Once]
                                                                                :: GHC.Word.Word8
                                                                              [LclId] =
                                                                                  [x_s2DAM] \u []
                                                                                      case
                                                                                          >=# [x_s2DAM
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl3
                                                                                                x_s2DAM;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DAM
                                                                                                     255#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl3
                                                                                                      x_s2DAM;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DAM]
                                                                                                  of
                                                                                                  sat_s2DAW
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W8# [sat_s2DAW];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DAX
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_up_s2DAL x2_s2DAa;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2DAI [Occ=Once] :: GHC.Word.Word8
                                        [LclId] =
                                            [x1_s2DA9] \u []
                                                case >=# [x1_s2DA9 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl3 x1_s2DA9;
                                                  1# ->
                                                      case <=# [x1_s2DA9 255#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl3 x1_s2DA9;
                                                        1# ->
                                                            case int2Word# [x1_s2DA9] of sat_s2DAH {
                                                              __DEFAULT -> GHC.Word.W8# [sat_s2DAH];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2DAI sat_s2DAY];
                                  1# ->
                                      case <# [y_s2DAD x1_s2DA9] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2DB3 [Occ=Once] :: GHC.Word.Word8
                                              [LclId] =
                                                  [x1_s2DA9] \u []
                                                      case >=# [x1_s2DA9 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl3 x1_s2DA9;
                                                        1# ->
                                                            case <=# [x1_s2DA9 255#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl3 x1_s2DA9;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2DA9]
                                                                  of
                                                                  sat_s2DB2
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W8# [sat_s2DB2];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2DB3 GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fEnumWord8_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word8
     -> GHC.Word.Word8 -> GHC.Word.Word8 -> [GHC.Word.Word8]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s2DB4 w1_s2DB5 w2_s2DB6]
        case w_s2DB4 of {
          GHC.Word.W8# ww1_s2DB8 [Occ=Once] ->
              case w1_s2DB5 of {
                GHC.Word.W8# ww3_s2DBa [Occ=Once] ->
                    case w2_s2DB6 of {
                      GHC.Word.W8# ww5_s2DBc [Occ=Once] ->
                          GHC.Word.$w$cenumFromThenTo2 ww1_s2DB8 ww3_s2DBa ww5_s2DBc;
                    };
              };
        };

GHC.Word.$w$cenumFromTo2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word8]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2DBd ww1_s2DBe]
        case word2Int# [ww_s2DBd] of x0_s2DBf [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2DBe] of y_s2DBg [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x0_s2DBf y_s2DBg] of {
                      __DEFAULT ->
                          let {
                            go_s2DBi [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Word.Word8]
                            [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                                sat-only [y_s2DBg go_s2DBi] \r [x_s2DBj]
                                    let {
                                      sat_s2DBq [Occ=Once] :: [GHC.Word.Word8]
                                      [LclId] =
                                          [y_s2DBg go_s2DBi x_s2DBj] \u []
                                              case ==# [x_s2DBj y_s2DBg] of {
                                                __DEFAULT ->
                                                    case +# [x_s2DBj 1#] of sat_s2DBp {
                                                      __DEFAULT -> go_s2DBi sat_s2DBp;
                                                    };
                                                1# -> [] [];
                                              }; } in
                                    let {
                                      sat_s2DBn [Occ=Once] :: GHC.Word.Word8
                                      [LclId] =
                                          [x_s2DBj] \u []
                                              case >=# [x_s2DBj 0#] of {
                                                __DEFAULT -> GHC.Word.$wlvl3 x_s2DBj;
                                                1# ->
                                                    case <=# [x_s2DBj 255#] of {
                                                      __DEFAULT -> GHC.Word.$wlvl3 x_s2DBj;
                                                      1# ->
                                                          case int2Word# [x_s2DBj] of sat_s2DBm {
                                                            __DEFAULT -> GHC.Word.W8# [sat_s2DBm];
                                                          };
                                                    };
                                              };
                                    } in  : [sat_s2DBn sat_s2DBq];
                          } in  go_s2DBi x0_s2DBf;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord8_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> [GHC.Word.Word8]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s2DBr w1_s2DBs]
        case w_s2DBr of {
          GHC.Word.W8# ww1_s2DBu [Occ=Once] ->
              case w1_s2DBs of {
                GHC.Word.W8# ww3_s2DBw [Occ=Once] ->
                    GHC.Word.$w$cenumFromTo2 ww1_s2DBu ww3_s2DBw;
              };
        };

GHC.Word.$wgo2 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Word.Word8, [GHC.Word.Word8] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s2DBx]
        let {
          sat_s2DBH [Occ=Once] :: [GHC.Word.Word8]
          [LclId] =
              [w_s2DBx] \u []
                  case w_s2DBx of wild_s2DBC {
                    __DEFAULT ->
                        case +# [wild_s2DBC 1#] of sat_s2DBD {
                          __DEFAULT ->
                              case GHC.Word.$wgo2 sat_s2DBD of {
                                (#,#) ww1_s2DBF [Occ=Once] ww2_s2DBG [Occ=Once] ->
                                    : [ww1_s2DBF ww2_s2DBG];
                              };
                        };
                    255# -> [] [];
                  }; } in
        let {
          sat_s2DBB [Occ=Once] :: GHC.Word.Word8
          [LclId] =
              [w_s2DBx] \u []
                  case >=# [w_s2DBx 0#] of {
                    __DEFAULT -> GHC.Word.$wlvl3 w_s2DBx;
                    1# ->
                        case <=# [w_s2DBx 255#] of {
                          __DEFAULT -> GHC.Word.$wlvl3 w_s2DBx;
                          1# ->
                              case int2Word# [w_s2DBx] of sat_s2DBA {
                                __DEFAULT -> GHC.Word.W8# [sat_s2DBA];
                              };
                        };
                  };
        } in  (#,#) [sat_s2DBB sat_s2DBH];

GHC.Word.$fEnumWord8_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Word.Word8]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s2DBI]
        case GHC.Word.$wgo2 w_s2DBI of {
          (#,#) ww1_s2DBK [Occ=Once] ww2_s2DBL [Occ=Once] ->
              : [ww1_s2DBK ww2_s2DBL];
        };

GHC.Word.$fEnumWord8_$cenumFrom
  :: GHC.Word.Word8 -> [GHC.Word.Word8]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s2DBM]
        case n_s2DBM of {
          GHC.Word.W8# x#_s2DBO [Occ=Once] ->
              case word2Int# [x#_s2DBO] of x_s2DBP [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x_s2DBP 255#] of {
                      __DEFAULT -> GHC.Word.$fEnumWord8_go x_s2DBP;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Word.$fEnumWord8_$csucc
                                    GHC.Word.$fEnumWord8_$cpred
                                    GHC.Word.$fEnumWord8_$ctoEnum
                                    GHC.Word.$fEnumWord8_$cfromEnum
                                    GHC.Word.$fEnumWord8_$cenumFrom
                                    GHC.Word.$fEnumWord8_$cenumFromThen
                                    GHC.Word.$fEnumWord8_$cenumFromTo
                                    GHC.Word.$fEnumWord8_$cenumFromThenTo];
GHC.Word.$fEnumWord8_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> [GHC.Word.Word8]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Word.$fEnumWord8 GHC.Word.$fBoundedWord8 eta_B2 eta_B1;

GHC.Word.$tcWord2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word16"#;

GHC.Word.$fEnumWord1 :: GHC.Word.Word16
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord2 of sat_s2DBR {
          __DEFAULT -> GHC.Enum.predError sat_s2DBR;
        };

GHC.Word.$fEnumWord2 :: GHC.Word.Word16
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord2 of sat_s2DBS {
          __DEFAULT -> GHC.Enum.succError sat_s2DBS;
        };

GHC.Word.neWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DBT ds1_s2DBU]
        case ds_s2DBT of {
          GHC.Word.W16# x_s2DBW [Occ=Once] ->
              case ds1_s2DBU of {
                GHC.Word.W16# y_s2DBY [Occ=Once] ->
                    case neWord# [x_s2DBW y_s2DBY] of sat_s2DBZ {
                      __DEFAULT -> tagToEnum# [sat_s2DBZ];
                    };
              };
        };

lvl4_r2uFJ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Word.$tcWord2;

GHC.Word.$fBitsWord16_$cminBound :: GHC.Word.Word16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W16#! [0##];

GHC.Word.$fEnumWord16_$cpred :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2DC0]
        case x_s2DC0 of {
          GHC.Word.W16# x1_s2DC2 [Occ=Once!] ->
              case x1_s2DC2 of wild1_s2DC3 {
                __DEFAULT ->
                    case minusWord# [wild1_s2DC3 1##] of sat_s2DC4 {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2DC4] of sat_s2DC5 {
                            __DEFAULT -> GHC.Word.W16# [sat_s2DC5];
                          };
                    };
                0## -> GHC.Word.$fEnumWord1;
              };
        };

GHC.Word.$fBoundedWord16_$cmaxBound :: GHC.Word.Word16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W16#! [65535##];

GHC.Word.$fBoundedWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Word.$fBitsWord16_$cminBound
                                       GHC.Word.$fBoundedWord16_$cmaxBound];

GHC.Word.$fEnumWord16_$csucc :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2DC6]
        case x_s2DC6 of {
          GHC.Word.W16# x1_s2DC8 [Occ=Once!] ->
              case x1_s2DC8 of wild1_s2DC9 {
                __DEFAULT ->
                    case plusWord# [wild1_s2DC9 1##] of sat_s2DCa {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2DCa] of sat_s2DCb {
                            __DEFAULT -> GHC.Word.W16# [sat_s2DCb];
                          };
                    };
                65535## -> GHC.Word.$fEnumWord2;
              };
        };

GHC.Word.$fShowWord16_$cshowsPrec
  :: GHC.Types.Int -> GHC.Word.Word16 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s2DCc x_s2DCd eta_s2DCe]
        case x_s2DCd of {
          GHC.Word.W16# x#_s2DCg [Occ=Once] ->
              case p_s2DCc of {
                GHC.Types.I# ww1_s2DCi [Occ=Once] ->
                    case word2Int# [x#_s2DCg] of sat_s2DCj {
                      __DEFAULT ->
                          case GHC.Show.$wshowSignedInt ww1_s2DCi sat_s2DCj eta_s2DCe of {
                            (#,#) ww5_s2DCl [Occ=Once] ww6_s2DCm [Occ=Once] ->
                                : [ww5_s2DCl ww6_s2DCm];
                          };
                    };
              };
        };

GHC.Word.$fShowWord16_$cshow :: GHC.Word.Word16 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s2DCn]
        case x_s2DCn of {
          GHC.Word.W16# x#_s2DCp [Occ=Once] ->
              case word2Int# [x#_s2DCp] of sat_s2DCq {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2DCq GHC.Types.[] of {
                      (#,#) ww5_s2DCs [Occ=Once] ww6_s2DCt [Occ=Once] ->
                          : [ww5_s2DCs ww6_s2DCt];
                    };
              };
        };

GHC.Word.$fShowWord1
  :: GHC.Word.Word16 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s2DCu eta_s2DCv]
        case x_s2DCu of {
          GHC.Word.W16# x#_s2DCx [Occ=Once] ->
              case word2Int# [x#_s2DCx] of sat_s2DCy {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2DCy eta_s2DCv of {
                      (#,#) ww5_s2DCA [Occ=Once] ww6_s2DCB [Occ=Once] ->
                          : [ww5_s2DCA ww6_s2DCB];
                    };
              };
        };

GHC.Word.$fShowWord16_$cshowList
  :: [GHC.Word.Word16] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s2DCC s_s2DCD]
        GHC.Show.showList__ GHC.Word.$fShowWord1 ls_s2DCC s_s2DCD;

GHC.Word.$fShowWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Word.$fShowWord16_$cshowsPrec
                                    GHC.Word.$fShowWord16_$cshow
                                    GHC.Word.$fShowWord16_$cshowList];

GHC.Word.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Word.Word16
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s2DCE]
        GHC.Enum.$wtoEnumError
            GHC.Word.$fShowWord16
            lvl4_r2uFJ
            ww_s2DCE
            GHC.Word.$fBitsWord16_$cminBound
            GHC.Word.$fBoundedWord16_$cmaxBound;

GHC.Word.$w$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s2DCF]
        case >=# [ww_s2DCF 0#] of {
          __DEFAULT -> GHC.Word.$wlvl ww_s2DCF;
          1# ->
              case <=# [ww_s2DCF 65535#] of {
                __DEFAULT -> GHC.Word.$wlvl ww_s2DCF;
                1# -> int2Word# [ww_s2DCF];
              };
        };

GHC.Word.$fEnumWord16_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Word.Word16
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2DCK]
        case w_s2DCK of {
          GHC.Types.I# ww1_s2DCM [Occ=Once] ->
              case GHC.Word.$w$ctoEnum ww1_s2DCM of ww2_s2DCN {
                __DEFAULT -> GHC.Word.W16# [ww2_s2DCN];
              };
        };

GHC.Word.$w$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word16]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2DCO ww1_s2DCP ww2_s2DCQ]
        case word2Int# [ww_s2DCO] of x1_s2DCR [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2DCP] of x2_s2DCS [Dmd=<S,U>] {
                __DEFAULT ->
                    case >=# [x2_s2DCS x1_s2DCR] of {
                      __DEFAULT ->
                          case word2Int# [ww2_s2DCQ] of y_s2DCU [Dmd=<S,U>] {
                            __DEFAULT ->
                                case ># [y_s2DCU x2_s2DCS] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2DDf [Occ=Once] :: [GHC.Word.Word16]
                                        [LclId] =
                                            [x1_s2DCR x2_s2DCS y_s2DCU] \u []
                                                case
                                                    -# [x2_s2DCS x1_s2DCR]
                                                of
                                                delta_s2DD0 [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2DCU delta_s2DD0]
                                                      of
                                                      y'_s2DD1 [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_dn_s2DD2 [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int#
                                                                   -> [GHC.Word.Word16]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2DD0
                                                                            y'_s2DD1
                                                                            go_dn_s2DD2] \r [x_s2DD3]
                                                                      case
                                                                          <# [x_s2DD3 y'_s2DD1]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2DDa [Occ=Once]
                                                                                :: [GHC.Word.Word16]
                                                                              [LclId] =
                                                                                  [delta_s2DD0
                                                                                   go_dn_s2DD2
                                                                                   x_s2DD3] \u []
                                                                                      case
                                                                                          +# [x_s2DD3
                                                                                              delta_s2DD0]
                                                                                      of
                                                                                      sat_s2DD9
                                                                                      { __DEFAULT ->
                                                                                            go_dn_s2DD2
                                                                                                sat_s2DD9;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2DD8 [Occ=Once]
                                                                                :: GHC.Word.Word16
                                                                              [LclId] =
                                                                                  [x_s2DD3] \u []
                                                                                      case
                                                                                          >=# [x_s2DD3
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl
                                                                                                x_s2DD3;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DD3
                                                                                                     65535#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl
                                                                                                      x_s2DD3;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DD3]
                                                                                                  of
                                                                                                  sat_s2DD7
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W16# [sat_s2DD7];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DD8
                                                                                 sat_s2DDa];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2DDe [Occ=Once]
                                                                                :: GHC.Word.Word16
                                                                              [LclId] =
                                                                                  [x_s2DD3] \u []
                                                                                      case
                                                                                          >=# [x_s2DD3
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl
                                                                                                x_s2DD3;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DD3
                                                                                                     65535#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl
                                                                                                      x_s2DD3;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DD3]
                                                                                                  of
                                                                                                  sat_s2DDd
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W16# [sat_s2DDd];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DDe
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_dn_s2DD2 x2_s2DCS;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2DCZ [Occ=Once] :: GHC.Word.Word16
                                        [LclId] =
                                            [x1_s2DCR] \u []
                                                case >=# [x1_s2DCR 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl x1_s2DCR;
                                                  1# ->
                                                      case <=# [x1_s2DCR 65535#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl x1_s2DCR;
                                                        1# ->
                                                            case int2Word# [x1_s2DCR] of sat_s2DCY {
                                                              __DEFAULT ->
                                                                  GHC.Word.W16# [sat_s2DCY];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2DCZ sat_s2DDf];
                                  1# ->
                                      case ># [y_s2DCU x1_s2DCR] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2DDk [Occ=Once] :: GHC.Word.Word16
                                              [LclId] =
                                                  [x1_s2DCR] \u []
                                                      case >=# [x1_s2DCR 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl x1_s2DCR;
                                                        1# ->
                                                            case <=# [x1_s2DCR 65535#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl x1_s2DCR;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2DCR]
                                                                  of
                                                                  sat_s2DDj
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W16# [sat_s2DDj];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2DDk GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                      1# ->
                          case word2Int# [ww2_s2DCQ] of y_s2DDl [Dmd=<S,U>] {
                            __DEFAULT ->
                                case <# [y_s2DDl x2_s2DCS] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2DDG [Occ=Once] :: [GHC.Word.Word16]
                                        [LclId] =
                                            [x1_s2DCR x2_s2DCS y_s2DDl] \u []
                                                case
                                                    -# [x2_s2DCS x1_s2DCR]
                                                of
                                                delta_s2DDr [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2DDl delta_s2DDr]
                                                      of
                                                      y'_s2DDs [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_up_s2DDt [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int#
                                                                   -> [GHC.Word.Word16]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2DDr
                                                                            y'_s2DDs
                                                                            go_up_s2DDt] \r [x_s2DDu]
                                                                      case
                                                                          ># [x_s2DDu y'_s2DDs]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2DDB [Occ=Once]
                                                                                :: [GHC.Word.Word16]
                                                                              [LclId] =
                                                                                  [delta_s2DDr
                                                                                   go_up_s2DDt
                                                                                   x_s2DDu] \u []
                                                                                      case
                                                                                          +# [x_s2DDu
                                                                                              delta_s2DDr]
                                                                                      of
                                                                                      sat_s2DDA
                                                                                      { __DEFAULT ->
                                                                                            go_up_s2DDt
                                                                                                sat_s2DDA;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2DDz [Occ=Once]
                                                                                :: GHC.Word.Word16
                                                                              [LclId] =
                                                                                  [x_s2DDu] \u []
                                                                                      case
                                                                                          >=# [x_s2DDu
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl
                                                                                                x_s2DDu;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DDu
                                                                                                     65535#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl
                                                                                                      x_s2DDu;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DDu]
                                                                                                  of
                                                                                                  sat_s2DDy
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W16# [sat_s2DDy];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DDz
                                                                                 sat_s2DDB];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2DDF [Occ=Once]
                                                                                :: GHC.Word.Word16
                                                                              [LclId] =
                                                                                  [x_s2DDu] \u []
                                                                                      case
                                                                                          >=# [x_s2DDu
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl
                                                                                                x_s2DDu;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DDu
                                                                                                     65535#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl
                                                                                                      x_s2DDu;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DDu]
                                                                                                  of
                                                                                                  sat_s2DDE
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W16# [sat_s2DDE];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DDF
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_up_s2DDt x2_s2DCS;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2DDq [Occ=Once] :: GHC.Word.Word16
                                        [LclId] =
                                            [x1_s2DCR] \u []
                                                case >=# [x1_s2DCR 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl x1_s2DCR;
                                                  1# ->
                                                      case <=# [x1_s2DCR 65535#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl x1_s2DCR;
                                                        1# ->
                                                            case int2Word# [x1_s2DCR] of sat_s2DDp {
                                                              __DEFAULT ->
                                                                  GHC.Word.W16# [sat_s2DDp];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2DDq sat_s2DDG];
                                  1# ->
                                      case <# [y_s2DDl x1_s2DCR] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2DDL [Occ=Once] :: GHC.Word.Word16
                                              [LclId] =
                                                  [x1_s2DCR] \u []
                                                      case >=# [x1_s2DCR 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl x1_s2DCR;
                                                        1# ->
                                                            case <=# [x1_s2DCR 65535#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl x1_s2DCR;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2DCR]
                                                                  of
                                                                  sat_s2DDK
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W16# [sat_s2DDK];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2DDL GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fEnumWord16_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word16
     -> GHC.Word.Word16 -> GHC.Word.Word16 -> [GHC.Word.Word16]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s2DDM w1_s2DDN w2_s2DDO]
        case w_s2DDM of {
          GHC.Word.W16# ww1_s2DDQ [Occ=Once] ->
              case w1_s2DDN of {
                GHC.Word.W16# ww3_s2DDS [Occ=Once] ->
                    case w2_s2DDO of {
                      GHC.Word.W16# ww5_s2DDU [Occ=Once] ->
                          GHC.Word.$w$cenumFromThenTo ww1_s2DDQ ww3_s2DDS ww5_s2DDU;
                    };
              };
        };

GHC.Word.$w$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word16]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2DDV ww1_s2DDW]
        case word2Int# [ww_s2DDV] of x0_s2DDX [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2DDW] of y_s2DDY [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x0_s2DDX y_s2DDY] of {
                      __DEFAULT ->
                          let {
                            go_s2DE0 [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Word.Word16]
                            [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                                sat-only [y_s2DDY go_s2DE0] \r [x_s2DE1]
                                    let {
                                      sat_s2DE8 [Occ=Once] :: [GHC.Word.Word16]
                                      [LclId] =
                                          [y_s2DDY go_s2DE0 x_s2DE1] \u []
                                              case ==# [x_s2DE1 y_s2DDY] of {
                                                __DEFAULT ->
                                                    case +# [x_s2DE1 1#] of sat_s2DE7 {
                                                      __DEFAULT -> go_s2DE0 sat_s2DE7;
                                                    };
                                                1# -> [] [];
                                              }; } in
                                    let {
                                      sat_s2DE5 [Occ=Once] :: GHC.Word.Word16
                                      [LclId] =
                                          [x_s2DE1] \u []
                                              case >=# [x_s2DE1 0#] of {
                                                __DEFAULT -> GHC.Word.$wlvl x_s2DE1;
                                                1# ->
                                                    case <=# [x_s2DE1 65535#] of {
                                                      __DEFAULT -> GHC.Word.$wlvl x_s2DE1;
                                                      1# ->
                                                          case int2Word# [x_s2DE1] of sat_s2DE4 {
                                                            __DEFAULT -> GHC.Word.W16# [sat_s2DE4];
                                                          };
                                                    };
                                              };
                                    } in  : [sat_s2DE5 sat_s2DE8];
                          } in  go_s2DE0 x0_s2DDX;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord16_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> [GHC.Word.Word16]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s2DE9 w1_s2DEa]
        case w_s2DE9 of {
          GHC.Word.W16# ww1_s2DEc [Occ=Once] ->
              case w1_s2DEa of {
                GHC.Word.W16# ww3_s2DEe [Occ=Once] ->
                    GHC.Word.$w$cenumFromTo ww1_s2DEc ww3_s2DEe;
              };
        };

GHC.Word.$wgo [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Word.Word16, [GHC.Word.Word16] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s2DEf]
        let {
          sat_s2DEp [Occ=Once] :: [GHC.Word.Word16]
          [LclId] =
              [w_s2DEf] \u []
                  case w_s2DEf of wild_s2DEk {
                    __DEFAULT ->
                        case +# [wild_s2DEk 1#] of sat_s2DEl {
                          __DEFAULT ->
                              case GHC.Word.$wgo sat_s2DEl of {
                                (#,#) ww1_s2DEn [Occ=Once] ww2_s2DEo [Occ=Once] ->
                                    : [ww1_s2DEn ww2_s2DEo];
                              };
                        };
                    65535# -> [] [];
                  }; } in
        let {
          sat_s2DEj [Occ=Once] :: GHC.Word.Word16
          [LclId] =
              [w_s2DEf] \u []
                  case >=# [w_s2DEf 0#] of {
                    __DEFAULT -> GHC.Word.$wlvl w_s2DEf;
                    1# ->
                        case <=# [w_s2DEf 65535#] of {
                          __DEFAULT -> GHC.Word.$wlvl w_s2DEf;
                          1# ->
                              case int2Word# [w_s2DEf] of sat_s2DEi {
                                __DEFAULT -> GHC.Word.W16# [sat_s2DEi];
                              };
                        };
                  };
        } in  (#,#) [sat_s2DEj sat_s2DEp];

GHC.Word.$fEnumWord16_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Word.Word16]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s2DEq]
        case GHC.Word.$wgo w_s2DEq of {
          (#,#) ww1_s2DEs [Occ=Once] ww2_s2DEt [Occ=Once] ->
              : [ww1_s2DEs ww2_s2DEt];
        };

GHC.Word.$fEnumWord16_$cenumFrom
  :: GHC.Word.Word16 -> [GHC.Word.Word16]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s2DEu]
        case n_s2DEu of {
          GHC.Word.W16# x#_s2DEw [Occ=Once] ->
              case word2Int# [x#_s2DEw] of x_s2DEx [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x_s2DEx 65535#] of {
                      __DEFAULT -> GHC.Word.$fEnumWord16_go x_s2DEx;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Word.$fEnumWord16_$csucc
                                    GHC.Word.$fEnumWord16_$cpred
                                    GHC.Word.$fEnumWord16_$ctoEnum
                                    GHC.Word.$fEnumWord16_$cfromEnum
                                    GHC.Word.$fEnumWord16_$cenumFrom
                                    GHC.Word.$fEnumWord16_$cenumFromThen
                                    GHC.Word.$fEnumWord16_$cenumFromTo
                                    GHC.Word.$fEnumWord16_$cenumFromThenTo];
GHC.Word.$fEnumWord16_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> [GHC.Word.Word16]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Word.$fEnumWord16 GHC.Word.$fBoundedWord16 eta_B2 eta_B1;

GHC.Word.$tcWord4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word32"#;

GHC.Word.$fEnumWord3 :: GHC.Word.Word32
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord4 of sat_s2DEz {
          __DEFAULT -> GHC.Enum.predError sat_s2DEz;
        };

GHC.Word.$fEnumWord4 :: GHC.Word.Word32
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# GHC.Word.$tcWord4 of sat_s2DEA {
          __DEFAULT -> GHC.Enum.succError sat_s2DEA;
        };

GHC.Word.neWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DEB ds1_s2DEC]
        case ds_s2DEB of {
          GHC.Word.W32# x_s2DEE [Occ=Once] ->
              case ds1_s2DEC of {
                GHC.Word.W32# y_s2DEG [Occ=Once] ->
                    case neWord# [x_s2DEE y_s2DEG] of sat_s2DEH {
                      __DEFAULT -> tagToEnum# [sat_s2DEH];
                    };
              };
        };

lvl6_r2uFL :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Word.$tcWord4;

GHC.Word.$fBitsWord32_$cminBound :: GHC.Word.Word32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W32#! [0##];

GHC.Word.$fEnumWord32_$cpred :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2DEI]
        case x_s2DEI of {
          GHC.Word.W32# x1_s2DEK [Occ=Once!] ->
              case x1_s2DEK of wild1_s2DEL {
                __DEFAULT ->
                    case minusWord# [wild1_s2DEL 1##] of sat_s2DEM {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2DEM] of sat_s2DEN {
                            __DEFAULT -> GHC.Word.W32# [sat_s2DEN];
                          };
                    };
                0## -> GHC.Word.$fEnumWord3;
              };
        };

GHC.Word.$fBoundedWord32_$cmaxBound :: GHC.Word.Word32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W32#! [4294967295##];

GHC.Word.$fBoundedWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Word.$fBitsWord32_$cminBound
                                       GHC.Word.$fBoundedWord32_$cmaxBound];

GHC.Word.$fEnumWord32_$csucc :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2DEO]
        case x_s2DEO of {
          GHC.Word.W32# x1_s2DEQ [Occ=Once!] ->
              case x1_s2DEQ of wild1_s2DER {
                __DEFAULT ->
                    case plusWord# [wild1_s2DER 1##] of sat_s2DES {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2DES] of sat_s2DET {
                            __DEFAULT -> GHC.Word.W32# [sat_s2DET];
                          };
                    };
                4294967295## -> GHC.Word.$fEnumWord4;
              };
        };

GHC.Word.$fShowWord32_$cshowsPrec
  :: GHC.Types.Int -> GHC.Word.Word32 -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [p_s2DEU x_s2DEV eta_s2DEW]
        case x_s2DEV of {
          GHC.Word.W32# x#_s2DEY [Occ=Once] ->
              case p_s2DEU of {
                GHC.Types.I# ww1_s2DF0 [Occ=Once] ->
                    case word2Int# [x#_s2DEY] of sat_s2DF1 {
                      __DEFAULT ->
                          case GHC.Show.$wshowSignedInt ww1_s2DF0 sat_s2DF1 eta_s2DEW of {
                            (#,#) ww5_s2DF3 [Occ=Once] ww6_s2DF4 [Occ=Once] ->
                                : [ww5_s2DF3 ww6_s2DF4];
                          };
                    };
              };
        };

GHC.Word.$fShowWord32_$cshow :: GHC.Word.Word32 -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_s2DF5]
        case x_s2DF5 of {
          GHC.Word.W32# x#_s2DF7 [Occ=Once] ->
              case word2Int# [x#_s2DF7] of sat_s2DF8 {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2DF8 GHC.Types.[] of {
                      (#,#) ww5_s2DFa [Occ=Once] ww6_s2DFb [Occ=Once] ->
                          : [ww5_s2DFa ww6_s2DFb];
                    };
              };
        };

GHC.Word.$fShowWord2
  :: GHC.Word.Word32 -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [x_s2DFc eta_s2DFd]
        case x_s2DFc of {
          GHC.Word.W32# x#_s2DFf [Occ=Once] ->
              case word2Int# [x#_s2DFf] of sat_s2DFg {
                __DEFAULT ->
                    case GHC.Show.$wshowSignedInt 0# sat_s2DFg eta_s2DFd of {
                      (#,#) ww5_s2DFi [Occ=Once] ww6_s2DFj [Occ=Once] ->
                          : [ww5_s2DFi ww6_s2DFj];
                    };
              };
        };

GHC.Word.$fShowWord32_$cshowList
  :: [GHC.Word.Word32] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_s2DFk s_s2DFl]
        GHC.Show.showList__ GHC.Word.$fShowWord2 ls_s2DFk s_s2DFl;

GHC.Word.$fShowWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Word.$fShowWord32_$cshowsPrec
                                    GHC.Word.$fShowWord32_$cshow
                                    GHC.Word.$fShowWord32_$cshowList];

GHC.Word.$wlvl1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Word.Word32
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s2DFm]
        GHC.Enum.$wtoEnumError
            GHC.Word.$fShowWord32
            lvl6_r2uFL
            ww_s2DFm
            GHC.Word.$fBitsWord32_$cminBound
            GHC.Word.$fBoundedWord32_$cmaxBound;

GHC.Word.$w$ctoEnum1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s2DFn]
        case >=# [ww_s2DFn 0#] of {
          __DEFAULT -> GHC.Word.$wlvl1 ww_s2DFn;
          1# ->
              case <=# [ww_s2DFn 4294967295#] of {
                __DEFAULT -> GHC.Word.$wlvl1 ww_s2DFn;
                1# -> int2Word# [ww_s2DFn];
              };
        };

GHC.Word.$fEnumWord32_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Word.Word32
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2DFs]
        case w_s2DFs of {
          GHC.Types.I# ww1_s2DFu [Occ=Once] ->
              case GHC.Word.$w$ctoEnum1 ww1_s2DFu of ww2_s2DFv {
                __DEFAULT -> GHC.Word.W32# [ww2_s2DFv];
              };
        };

GHC.Word.$w$cenumFromThenTo1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word32]
[GblId, Arity=3, Str=<S,U><S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2DFw ww1_s2DFx ww2_s2DFy]
        case word2Int# [ww_s2DFw] of x1_s2DFz [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2DFx] of x2_s2DFA [Dmd=<S,U>] {
                __DEFAULT ->
                    case >=# [x2_s2DFA x1_s2DFz] of {
                      __DEFAULT ->
                          case word2Int# [ww2_s2DFy] of y_s2DFC [Dmd=<S,U>] {
                            __DEFAULT ->
                                case ># [y_s2DFC x2_s2DFA] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2DFX [Occ=Once] :: [GHC.Word.Word32]
                                        [LclId] =
                                            [x1_s2DFz x2_s2DFA y_s2DFC] \u []
                                                case
                                                    -# [x2_s2DFA x1_s2DFz]
                                                of
                                                delta_s2DFI [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2DFC delta_s2DFI]
                                                      of
                                                      y'_s2DFJ [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_dn_s2DFK [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int#
                                                                   -> [GHC.Word.Word32]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2DFI
                                                                            y'_s2DFJ
                                                                            go_dn_s2DFK] \r [x_s2DFL]
                                                                      case
                                                                          <# [x_s2DFL y'_s2DFJ]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2DFS [Occ=Once]
                                                                                :: [GHC.Word.Word32]
                                                                              [LclId] =
                                                                                  [delta_s2DFI
                                                                                   go_dn_s2DFK
                                                                                   x_s2DFL] \u []
                                                                                      case
                                                                                          +# [x_s2DFL
                                                                                              delta_s2DFI]
                                                                                      of
                                                                                      sat_s2DFR
                                                                                      { __DEFAULT ->
                                                                                            go_dn_s2DFK
                                                                                                sat_s2DFR;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2DFQ [Occ=Once]
                                                                                :: GHC.Word.Word32
                                                                              [LclId] =
                                                                                  [x_s2DFL] \u []
                                                                                      case
                                                                                          >=# [x_s2DFL
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl1
                                                                                                x_s2DFL;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DFL
                                                                                                     4294967295#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl1
                                                                                                      x_s2DFL;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DFL]
                                                                                                  of
                                                                                                  sat_s2DFP
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W32# [sat_s2DFP];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DFQ
                                                                                 sat_s2DFS];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2DFW [Occ=Once]
                                                                                :: GHC.Word.Word32
                                                                              [LclId] =
                                                                                  [x_s2DFL] \u []
                                                                                      case
                                                                                          >=# [x_s2DFL
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl1
                                                                                                x_s2DFL;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DFL
                                                                                                     4294967295#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl1
                                                                                                      x_s2DFL;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DFL]
                                                                                                  of
                                                                                                  sat_s2DFV
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W32# [sat_s2DFV];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DFW
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_dn_s2DFK x2_s2DFA;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2DFH [Occ=Once] :: GHC.Word.Word32
                                        [LclId] =
                                            [x1_s2DFz] \u []
                                                case >=# [x1_s2DFz 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl1 x1_s2DFz;
                                                  1# ->
                                                      case <=# [x1_s2DFz 4294967295#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl1 x1_s2DFz;
                                                        1# ->
                                                            case int2Word# [x1_s2DFz] of sat_s2DFG {
                                                              __DEFAULT ->
                                                                  GHC.Word.W32# [sat_s2DFG];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2DFH sat_s2DFX];
                                  1# ->
                                      case ># [y_s2DFC x1_s2DFz] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2DG2 [Occ=Once] :: GHC.Word.Word32
                                              [LclId] =
                                                  [x1_s2DFz] \u []
                                                      case >=# [x1_s2DFz 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl1 x1_s2DFz;
                                                        1# ->
                                                            case <=# [x1_s2DFz 4294967295#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl1 x1_s2DFz;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2DFz]
                                                                  of
                                                                  sat_s2DG1
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W32# [sat_s2DG1];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2DG2 GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                      1# ->
                          case word2Int# [ww2_s2DFy] of y_s2DG3 [Dmd=<S,U>] {
                            __DEFAULT ->
                                case <# [y_s2DG3 x2_s2DFA] of {
                                  __DEFAULT ->
                                      let {
                                        sat_s2DGo [Occ=Once] :: [GHC.Word.Word32]
                                        [LclId] =
                                            [x1_s2DFz x2_s2DFA y_s2DG3] \u []
                                                case
                                                    -# [x2_s2DFA x1_s2DFz]
                                                of
                                                delta_s2DG9 [Dmd=<S,U>]
                                                { __DEFAULT ->
                                                      case
                                                          -# [y_s2DG3 delta_s2DG9]
                                                      of
                                                      y'_s2DGa [Dmd=<S,U>]
                                                      { __DEFAULT ->
                                                            let {
                                                              go_up_s2DGb [Occ=LoopBreaker]
                                                                :: GHC.Prim.Int#
                                                                   -> [GHC.Word.Word32]
                                                              [LclId,
                                                               Arity=1,
                                                               Str=<S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [delta_s2DG9
                                                                            y'_s2DGa
                                                                            go_up_s2DGb] \r [x_s2DGc]
                                                                      case
                                                                          ># [x_s2DGc y'_s2DGa]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s2DGj [Occ=Once]
                                                                                :: [GHC.Word.Word32]
                                                                              [LclId] =
                                                                                  [delta_s2DG9
                                                                                   go_up_s2DGb
                                                                                   x_s2DGc] \u []
                                                                                      case
                                                                                          +# [x_s2DGc
                                                                                              delta_s2DG9]
                                                                                      of
                                                                                      sat_s2DGi
                                                                                      { __DEFAULT ->
                                                                                            go_up_s2DGb
                                                                                                sat_s2DGi;
                                                                                      }; } in
                                                                            let {
                                                                              sat_s2DGh [Occ=Once]
                                                                                :: GHC.Word.Word32
                                                                              [LclId] =
                                                                                  [x_s2DGc] \u []
                                                                                      case
                                                                                          >=# [x_s2DGc
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl1
                                                                                                x_s2DGc;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DGc
                                                                                                     4294967295#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl1
                                                                                                      x_s2DGc;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DGc]
                                                                                                  of
                                                                                                  sat_s2DGg
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W32# [sat_s2DGg];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DGh
                                                                                 sat_s2DGj];
                                                                        1# ->
                                                                            let {
                                                                              sat_s2DGn [Occ=Once]
                                                                                :: GHC.Word.Word32
                                                                              [LclId] =
                                                                                  [x_s2DGc] \u []
                                                                                      case
                                                                                          >=# [x_s2DGc
                                                                                               0#]
                                                                                      of
                                                                                      { __DEFAULT ->
                                                                                            GHC.Word.$wlvl1
                                                                                                x_s2DGc;
                                                                                        1# ->
                                                                                            case
                                                                                                <=# [x_s2DGc
                                                                                                     4294967295#]
                                                                                            of
                                                                                            { __DEFAULT ->
                                                                                                  GHC.Word.$wlvl1
                                                                                                      x_s2DGc;
                                                                                              1# ->
                                                                                                  case
                                                                                                      int2Word# [x_s2DGc]
                                                                                                  of
                                                                                                  sat_s2DGm
                                                                                                  { __DEFAULT ->
                                                                                                        GHC.Word.W32# [sat_s2DGm];
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                            } in 
                                                                              : [sat_s2DGn
                                                                                 GHC.Types.[]];
                                                                      };
                                                            } in  go_up_s2DGb x2_s2DFA;
                                                      };
                                                }; } in
                                      let {
                                        sat_s2DG8 [Occ=Once] :: GHC.Word.Word32
                                        [LclId] =
                                            [x1_s2DFz] \u []
                                                case >=# [x1_s2DFz 0#] of {
                                                  __DEFAULT -> GHC.Word.$wlvl1 x1_s2DFz;
                                                  1# ->
                                                      case <=# [x1_s2DFz 4294967295#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl1 x1_s2DFz;
                                                        1# ->
                                                            case int2Word# [x1_s2DFz] of sat_s2DG7 {
                                                              __DEFAULT ->
                                                                  GHC.Word.W32# [sat_s2DG7];
                                                            };
                                                      };
                                                };
                                      } in  : [sat_s2DG8 sat_s2DGo];
                                  1# ->
                                      case <# [y_s2DG3 x1_s2DFz] of {
                                        __DEFAULT ->
                                            let {
                                              sat_s2DGt [Occ=Once] :: GHC.Word.Word32
                                              [LclId] =
                                                  [x1_s2DFz] \u []
                                                      case >=# [x1_s2DFz 0#] of {
                                                        __DEFAULT -> GHC.Word.$wlvl1 x1_s2DFz;
                                                        1# ->
                                                            case <=# [x1_s2DFz 4294967295#] of {
                                                              __DEFAULT -> GHC.Word.$wlvl1 x1_s2DFz;
                                                              1# ->
                                                                  case
                                                                      int2Word# [x1_s2DFz]
                                                                  of
                                                                  sat_s2DGs
                                                                  { __DEFAULT ->
                                                                        GHC.Word.W32# [sat_s2DGs];
                                                                  };
                                                            };
                                                      };
                                            } in  : [sat_s2DGt GHC.Types.[]];
                                        1# -> [] [];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fEnumWord32_$cenumFromThenTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word32
     -> GHC.Word.Word32 -> GHC.Word.Word32 -> [GHC.Word.Word32]
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [w_s2DGu w1_s2DGv w2_s2DGw]
        case w_s2DGu of {
          GHC.Word.W32# ww1_s2DGy [Occ=Once] ->
              case w1_s2DGv of {
                GHC.Word.W32# ww3_s2DGA [Occ=Once] ->
                    case w2_s2DGw of {
                      GHC.Word.W32# ww5_s2DGC [Occ=Once] ->
                          GHC.Word.$w$cenumFromThenTo1 ww1_s2DGy ww3_s2DGA ww5_s2DGC;
                    };
              };
        };

GHC.Word.$w$cenumFromTo1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> [GHC.Word.Word32]
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s2DGD ww1_s2DGE]
        case word2Int# [ww_s2DGD] of x0_s2DGF [Dmd=<S,U>] {
          __DEFAULT ->
              case word2Int# [ww1_s2DGE] of y_s2DGG [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x0_s2DGF y_s2DGG] of {
                      __DEFAULT ->
                          let {
                            go_s2DGI [Occ=LoopBreaker] :: GHC.Prim.Int# -> [GHC.Word.Word32]
                            [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                                sat-only [y_s2DGG go_s2DGI] \r [x_s2DGJ]
                                    let {
                                      sat_s2DGQ [Occ=Once] :: [GHC.Word.Word32]
                                      [LclId] =
                                          [y_s2DGG go_s2DGI x_s2DGJ] \u []
                                              case ==# [x_s2DGJ y_s2DGG] of {
                                                __DEFAULT ->
                                                    case +# [x_s2DGJ 1#] of sat_s2DGP {
                                                      __DEFAULT -> go_s2DGI sat_s2DGP;
                                                    };
                                                1# -> [] [];
                                              }; } in
                                    let {
                                      sat_s2DGN [Occ=Once] :: GHC.Word.Word32
                                      [LclId] =
                                          [x_s2DGJ] \u []
                                              case >=# [x_s2DGJ 0#] of {
                                                __DEFAULT -> GHC.Word.$wlvl1 x_s2DGJ;
                                                1# ->
                                                    case <=# [x_s2DGJ 4294967295#] of {
                                                      __DEFAULT -> GHC.Word.$wlvl1 x_s2DGJ;
                                                      1# ->
                                                          case int2Word# [x_s2DGJ] of sat_s2DGM {
                                                            __DEFAULT -> GHC.Word.W32# [sat_s2DGM];
                                                          };
                                                    };
                                              };
                                    } in  : [sat_s2DGN sat_s2DGQ];
                          } in  go_s2DGI x0_s2DGF;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord32_$cenumFromTo [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> [GHC.Word.Word32]
[GblId, Arity=2, Str=<S(S),1*U(U)><S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s2DGR w1_s2DGS]
        case w_s2DGR of {
          GHC.Word.W32# ww1_s2DGU [Occ=Once] ->
              case w1_s2DGS of {
                GHC.Word.W32# ww3_s2DGW [Occ=Once] ->
                    GHC.Word.$w$cenumFromTo1 ww1_s2DGU ww3_s2DGW;
              };
        };

GHC.Word.$wgo1 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> (# GHC.Word.Word32, [GHC.Word.Word32] #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [w_s2DGX]
        let {
          sat_s2DH7 [Occ=Once] :: [GHC.Word.Word32]
          [LclId] =
              [w_s2DGX] \u []
                  case w_s2DGX of wild_s2DH2 {
                    __DEFAULT ->
                        case +# [wild_s2DH2 1#] of sat_s2DH3 {
                          __DEFAULT ->
                              case GHC.Word.$wgo1 sat_s2DH3 of {
                                (#,#) ww1_s2DH5 [Occ=Once] ww2_s2DH6 [Occ=Once] ->
                                    : [ww1_s2DH5 ww2_s2DH6];
                              };
                        };
                    4294967295# -> [] [];
                  }; } in
        let {
          sat_s2DH1 [Occ=Once] :: GHC.Word.Word32
          [LclId] =
              [w_s2DGX] \u []
                  case >=# [w_s2DGX 0#] of {
                    __DEFAULT -> GHC.Word.$wlvl1 w_s2DGX;
                    1# ->
                        case <=# [w_s2DGX 4294967295#] of {
                          __DEFAULT -> GHC.Word.$wlvl1 w_s2DGX;
                          1# ->
                              case int2Word# [w_s2DGX] of sat_s2DH0 {
                                __DEFAULT -> GHC.Word.W32# [sat_s2DH0];
                              };
                        };
                  };
        } in  (#,#) [sat_s2DH1 sat_s2DH7];

GHC.Word.$fEnumWord32_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> [GHC.Word.Word32]
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [w_s2DH8]
        case GHC.Word.$wgo1 w_s2DH8 of {
          (#,#) ww1_s2DHa [Occ=Once] ww2_s2DHb [Occ=Once] ->
              : [ww1_s2DHa ww2_s2DHb];
        };

GHC.Word.$fEnumWord32_$cenumFrom
  :: GHC.Word.Word32 -> [GHC.Word.Word32]
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [n_s2DHc]
        case n_s2DHc of {
          GHC.Word.W32# x#_s2DHe [Occ=Once] ->
              case word2Int# [x#_s2DHe] of x_s2DHf [Dmd=<S,U>] {
                __DEFAULT ->
                    case ># [x_s2DHf 4294967295#] of {
                      __DEFAULT -> GHC.Word.$fEnumWord32_go x_s2DHf;
                      1# -> [] [];
                    };
              };
        };

GHC.Word.$fEnumWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Word.$fEnumWord32_$csucc
                                    GHC.Word.$fEnumWord32_$cpred
                                    GHC.Word.$fEnumWord32_$ctoEnum
                                    GHC.Word.$fEnumWord32_$cfromEnum
                                    GHC.Word.$fEnumWord32_$cenumFrom
                                    GHC.Word.$fEnumWord32_$cenumFromThen
                                    GHC.Word.$fEnumWord32_$cenumFromTo
                                    GHC.Word.$fEnumWord32_$cenumFromThenTo];
GHC.Word.$fEnumWord32_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> [GHC.Word.Word32]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Enum.boundedEnumFromThen
            GHC.Word.$fEnumWord32 GHC.Word.$fBoundedWord32 eta_B2 eta_B1;

GHC.Word.$fBitsWord7 :: GHC.Word.Word64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W64#! [0##];

GHC.Word.$fNumWord3 :: GHC.Word.Word64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W64#! [1##];

GHC.Word.eqWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DHh ds1_s2DHi]
        case ds_s2DHh of {
          GHC.Word.W64# x_s2DHk [Occ=Once] ->
              case ds1_s2DHi of {
                GHC.Word.W64# y_s2DHm [Occ=Once] ->
                    case eqWord# [x_s2DHk y_s2DHm] of sat_s2DHn {
                      __DEFAULT -> tagToEnum# [sat_s2DHn];
                    };
              };
        };

GHC.Word.$fNumWord64_$csignum :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DHo]
        case ds_s2DHo of {
          GHC.Word.W64# x_s2DHq [Occ=Once!] ->
              case x_s2DHq of {
                __DEFAULT -> GHC.Word.$fNumWord3;
                0## -> GHC.Word.$fBitsWord7;
              };
        };

GHC.Word.$fNumWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Word.$fNumWord64_$c+
                                  GHC.Word.$fNumWord64_$c-
                                  GHC.Word.$fNumWord64_$c*
                                  GHC.Word.$fNumWord64_$cnegate
                                  GHC.Word.$fNumWord64_$cabs
                                  GHC.Word.$fNumWord64_$csignum
                                  GHC.Word.$fNumWord64_$cfromInteger];

GHC.Word.$fEnumWord7 :: GHC.Word.Word64
[GblId, Str=x] =
    [] \u [] GHC.Enum.predError lvl_r2uFF;

GHC.Word.$fEnumWord9 :: GHC.Word.Word64
[GblId, Str=x] =
    [] \u [] GHC.Enum.succError lvl_r2uFF;

GHC.Word.neWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DHs ds1_s2DHt]
        case ds_s2DHs of {
          GHC.Word.W64# x_s2DHv [Occ=Once] ->
              case ds1_s2DHt of {
                GHC.Word.W64# y_s2DHx [Occ=Once] ->
                    case neWord# [x_s2DHv y_s2DHx] of sat_s2DHy {
                      __DEFAULT -> tagToEnum# [sat_s2DHy];
                    };
              };
        };

GHC.Word.$fIntegralWord64_$cdivMod
  :: GHC.Word.Word64
     -> GHC.Word.Word64 -> (GHC.Word.Word64, GHC.Word.Word64)
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s2DHz y_s2DHA]
        case ds_s2DHz of {
          GHC.Word.W64# x#_s2DHC ->
              case y_s2DHA of {
                GHC.Word.W64# y#_s2DHE [Occ=Once!] ->
                    case y#_s2DHE of wild2_s2DHF {
                      __DEFAULT ->
                          let {
                            sat_s2DHJ [Occ=Once] :: GHC.Word.Word64
                            [LclId] =
                                [x#_s2DHC wild2_s2DHF] \u []
                                    case remWord# [x#_s2DHC wild2_s2DHF] of wild3_s2DHI {
                                      __DEFAULT -> GHC.Word.W64# [wild3_s2DHI];
                                    }; } in
                          let {
                            sat_s2DHH [Occ=Once] :: GHC.Word.Word64
                            [LclId] =
                                [x#_s2DHC wild2_s2DHF] \u []
                                    case quotWord# [x#_s2DHC wild2_s2DHF] of wild3_s2DHG {
                                      __DEFAULT -> GHC.Word.W64# [wild3_s2DHG];
                                    };
                          } in  (,) [sat_s2DHH sat_s2DHJ];
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord64_$cquotRem
  :: GHC.Word.Word64
     -> GHC.Word.Word64 -> (GHC.Word.Word64, GHC.Word.Word64)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DHK y_s2DHL]
        case ds_s2DHK of {
          GHC.Word.W64# x#_s2DHN [Occ=Once] ->
              case y_s2DHL of {
                GHC.Word.W64# y#_s2DHP [Occ=Once!] ->
                    case y#_s2DHP of wild2_s2DHQ {
                      __DEFAULT ->
                          case quotRemWord# [x#_s2DHN wild2_s2DHQ] of {
                            (#,#) ipv_s2DHS [Occ=Once] ipv1_s2DHT [Occ=Once] ->
                                let {
                                  sat_s2DHV [Occ=Once] :: GHC.Word.Word64
                                  [LclId] =
                                      CCCS GHC.Word.W64#! [ipv1_s2DHT]; } in
                                let {
                                  sat_s2DHU [Occ=Once] :: GHC.Word.Word64
                                  [LclId] =
                                      CCCS GHC.Word.W64#! [ipv_s2DHS];
                                } in  (,) [sat_s2DHU sat_s2DHV];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord64_$cmod
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DHW y_s2DHX]
        case ds_s2DHW of {
          GHC.Word.W64# x#_s2DHZ [Occ=Once] ->
              case y_s2DHX of {
                GHC.Word.W64# y#_s2DI1 [Occ=Once!] ->
                    case y#_s2DI1 of wild2_s2DI2 {
                      __DEFAULT ->
                          case remWord# [x#_s2DHZ wild2_s2DI2] of wild3_s2DI3 {
                            __DEFAULT -> GHC.Word.W64# [wild3_s2DI3];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord64_$cdiv
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DI4 y_s2DI5]
        case ds_s2DI4 of {
          GHC.Word.W64# x#_s2DI7 [Occ=Once] ->
              case y_s2DI5 of {
                GHC.Word.W64# y#_s2DI9 [Occ=Once!] ->
                    case y#_s2DI9 of wild2_s2DIa {
                      __DEFAULT ->
                          case quotWord# [x#_s2DI7 wild2_s2DIa] of wild3_s2DIb {
                            __DEFAULT -> GHC.Word.W64# [wild3_s2DIb];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fEqWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Word.eqWord64
                                     GHC.Word.neWord64];

GHC.Word.$fEnumWord64_$cpred :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2DIc]
        case x_s2DIc of {
          GHC.Word.W64# x1_s2DIe [Occ=Once!] ->
              case x1_s2DIe of wild1_s2DIf {
                __DEFAULT ->
                    case minusWord# [wild1_s2DIf 1##] of sat_s2DIg {
                      __DEFAULT -> GHC.Word.W64# [sat_s2DIg];
                    };
                0## -> GHC.Word.$fEnumWord7;
              };
        };

GHC.Word.$fBoundedWord64_$cmaxBound :: GHC.Word.Word64
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W64#! [18446744073709551615##];

GHC.Word.$fBoundedWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Bounded GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Bounded! [GHC.Word.$fBitsWord7
                                       GHC.Word.$fBoundedWord64_$cmaxBound];

GHC.Word.$fEnumWord64_$csucc :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId, Arity=1, Str=<S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [x_s2DIh]
        case x_s2DIh of {
          GHC.Word.W64# x1_s2DIj [Occ=Once!] ->
              case x1_s2DIj of wild1_s2DIk {
                __DEFAULT ->
                    case plusWord# [wild1_s2DIk 1##] of sat_s2DIl {
                      __DEFAULT -> GHC.Word.W64# [sat_s2DIl];
                    };
                18446744073709551615## -> GHC.Word.$fEnumWord9;
              };
        };

GHC.Word.$wlvl2 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Word.Word64
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s2DIm]
        GHC.Enum.$wtoEnumError
            GHC.Word.$fShowWord64
            lvl_r2uFF
            ww_s2DIm
            GHC.Word.$fBitsWord7
            GHC.Word.$fBoundedWord64_$cmaxBound;

GHC.Word.$fEnumWord6 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Word.Word64
[GblId, Arity=1, Str=<B,1*U(U)>x, Unf=OtherCon []] =
    [] \r [w_s2DIn]
        case w_s2DIn of {
          GHC.Types.I# ww1_s2DIp [Occ=Once] -> GHC.Word.$wlvl2 ww1_s2DIp;
        };

GHC.Word.$fEnumWord64_$ctoEnum :: GHC.Types.Int -> GHC.Word.Word64
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [i_s2DIq]
        case i_s2DIq of {
          GHC.Types.I# i#_s2DIs ->
              case >=# [i#_s2DIs 0#] of {
                __DEFAULT -> GHC.Word.$wlvl2 i#_s2DIs;
                1# ->
                    case int2Word# [i#_s2DIs] of sat_s2DIu {
                      __DEFAULT -> GHC.Word.W64# [sat_s2DIu];
                    };
              };
        };

GHC.Word.gtWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DIv ds1_s2DIw]
        case ds_s2DIv of {
          GHC.Word.W64# x_s2DIy [Occ=Once] ->
              case ds1_s2DIw of {
                GHC.Word.W64# y_s2DIA [Occ=Once] ->
                    case gtWord# [x_s2DIy y_s2DIA] of sat_s2DIB {
                      __DEFAULT -> tagToEnum# [sat_s2DIB];
                    };
              };
        };

GHC.Word.geWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DIC ds1_s2DID]
        case ds_s2DIC of {
          GHC.Word.W64# x_s2DIF [Occ=Once] ->
              case ds1_s2DID of {
                GHC.Word.W64# y_s2DIH [Occ=Once] ->
                    case geWord# [x_s2DIF y_s2DIH] of sat_s2DII {
                      __DEFAULT -> tagToEnum# [sat_s2DII];
                    };
              };
        };

GHC.Word.ltWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DIJ ds1_s2DIK]
        case ds_s2DIJ of {
          GHC.Word.W64# x_s2DIM [Occ=Once] ->
              case ds1_s2DIK of {
                GHC.Word.W64# y_s2DIO [Occ=Once] ->
                    case ltWord# [x_s2DIM y_s2DIO] of sat_s2DIP {
                      __DEFAULT -> tagToEnum# [sat_s2DIP];
                    };
              };
        };

GHC.Word.leWord64 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DIQ ds1_s2DIR]
        case ds_s2DIQ of {
          GHC.Word.W64# x_s2DIT [Occ=Once] ->
              case ds1_s2DIR of {
                GHC.Word.W64# y_s2DIV [Occ=Once] ->
                    case leWord# [x_s2DIT y_s2DIV] of sat_s2DIW {
                      __DEFAULT -> tagToEnum# [sat_s2DIW];
                    };
              };
        };

GHC.Word.$fOrdWord64_$cmin
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2DIX y_s2DIY]
        case x_s2DIX of wild_s2DIZ {
          GHC.Word.W64# x1_s2DJ0 [Occ=Once] ->
              case y_s2DIY of wild1_s2DJ1 {
                GHC.Word.W64# y1_s2DJ2 [Occ=Once] ->
                    case leWord# [x1_s2DJ0 y1_s2DJ2] of {
                      __DEFAULT -> wild1_s2DJ1;
                      1# -> wild_s2DIZ;
                    };
              };
        };

GHC.Word.$fOrdWord64_$cmax
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2DJ4 y_s2DJ5]
        case x_s2DJ4 of wild_s2DJ6 {
          GHC.Word.W64# x1_s2DJ7 [Occ=Once] ->
              case y_s2DJ5 of wild1_s2DJ8 {
                GHC.Word.W64# y1_s2DJ9 [Occ=Once] ->
                    case leWord# [x1_s2DJ7 y1_s2DJ9] of {
                      __DEFAULT -> wild_s2DJ6;
                      1# -> wild1_s2DJ8;
                    };
              };
        };

GHC.Word.$fOrdWord64_$ccompare
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2DJb y_s2DJc]
        case x_s2DJb of {
          GHC.Word.W64# x1_s2DJe ->
              case y_s2DJc of {
                GHC.Word.W64# y1_s2DJg ->
                    case eqWord# [x1_s2DJe y1_s2DJg] of {
                      __DEFAULT ->
                          case leWord# [x1_s2DJe y1_s2DJg] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Word.$fOrdWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Word.$fEqWord64
                                      GHC.Word.$fOrdWord64_$ccompare
                                      GHC.Word.ltWord64
                                      GHC.Word.leWord64
                                      GHC.Word.gtWord64
                                      GHC.Word.geWord64
                                      GHC.Word.$fOrdWord64_$cmax
                                      GHC.Word.$fOrdWord64_$cmin];

GHC.Word.$fRealWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Word.$fNumWord64
                                    GHC.Word.$fOrdWord64
                                    GHC.Word.$fRealWord64_$ctoRational];

GHC.Word.$fEnumWord64_$cfromEnum
  :: GHC.Word.Word64 -> GHC.Types.Int
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_s2DJj]
        case x_s2DJj of wild_s2DJk {
          GHC.Word.W64# x#_s2DJl ->
              case leWord# [x#_s2DJl 9223372036854775807##] of {
                __DEFAULT -> GHC.Word.$fEnumWord5 wild_s2DJk;
                1# ->
                    case word2Int# [x#_s2DJl] of sat_s2DJn {
                      __DEFAULT -> GHC.Types.I# [sat_s2DJn];
                    };
              };
        };

GHC.Word.$fEnumWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.Word.$fEnumWord64_$csucc
                                    GHC.Word.$fEnumWord64_$cpred
                                    GHC.Word.$fEnumWord64_$ctoEnum
                                    GHC.Word.$fEnumWord64_$cfromEnum
                                    GHC.Word.$fEnumWord64_$cenumFrom
                                    GHC.Word.$fEnumWord64_$cenumFromThen
                                    GHC.Word.$fEnumWord64_$cenumFromTo
                                    GHC.Word.$fEnumWord64_$cenumFromThenTo];
GHC.Word.$fIntegralWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Word.$fRealWord64
                                        GHC.Word.$fEnumWord64
                                        GHC.Word.$fIntegralWord64_$cdiv
                                        GHC.Word.$fIntegralWord64_$cmod
                                        GHC.Word.$fIntegralWord64_$cdiv
                                        GHC.Word.$fIntegralWord64_$cmod
                                        GHC.Word.$fIntegralWord64_$cquotRem
                                        GHC.Word.$fIntegralWord64_$cdivMod
                                        GHC.Word.$fIntegralWord64_$ctoInteger];
GHC.Word.$fEnumWord64_$cenumFromThenTo [Occ=LoopBreaker]
  :: GHC.Word.Word64
     -> GHC.Word.Word64 -> GHC.Word.Word64 -> [GHC.Word.Word64]
[GblId, Arity=3, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Real.integralEnumFromThenTo
            GHC.Word.$fIntegralWord64 eta_B3 eta_B2 eta_B1;
GHC.Word.$fEnumWord64_$cenumFromTo [Occ=LoopBreaker]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> [GHC.Word.Word64]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Real.integralEnumFromTo
            GHC.Word.$fIntegralWord64 eta_B2 eta_B1;
GHC.Word.$fEnumWord64_$cenumFrom [Occ=LoopBreaker]
  :: GHC.Word.Word64 -> [GHC.Word.Word64]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Real.integralEnumFrom
            GHC.Word.$fIntegralWord64 GHC.Word.$fBoundedWord64 eta_B1;
GHC.Word.$fEnumWord64_$cenumFromThen [Occ=LoopBreaker]
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> [GHC.Word.Word64]
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Real.integralEnumFromThen
            GHC.Word.$fIntegralWord64 GHC.Word.$fBoundedWord64 eta_B2 eta_B1;

GHC.Word.$fNumWord8_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Word.Word8
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s2DJo]
        case GHC.Integer.Type.integerToWord i_s2DJo of wild_s2DJp {
          __DEFAULT ->
              case narrow8Word# [wild_s2DJp] of sat_s2DJq {
                __DEFAULT -> GHC.Word.W8# [sat_s2DJq];
              };
        };

GHC.Word.$fNumWord8_$cabs :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_s2DJr] x_s2DJr;

GHC.Word.$fNumWord8_$cnegate :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DJs]
        case ds_s2DJs of {
          GHC.Word.W8# x#_s2DJu [Occ=Once] ->
              case word2Int# [x#_s2DJu] of sat_s2DJv {
                __DEFAULT ->
                    case negateInt# [sat_s2DJv] of sat_s2DJw {
                      __DEFAULT ->
                          case int2Word# [sat_s2DJw] of sat_s2DJx {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2DJx] of sat_s2DJy {
                                  __DEFAULT -> GHC.Word.W8# [sat_s2DJy];
                                };
                          };
                    };
              };
        };

GHC.Word.$fNumWord8_$c*
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DJz ds1_s2DJA]
        case ds_s2DJz of {
          GHC.Word.W8# x#_s2DJC [Occ=Once] ->
              case ds1_s2DJA of {
                GHC.Word.W8# y#_s2DJE [Occ=Once] ->
                    case timesWord# [x#_s2DJC y#_s2DJE] of sat_s2DJF {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2DJF] of sat_s2DJG {
                            __DEFAULT -> GHC.Word.W8# [sat_s2DJG];
                          };
                    };
              };
        };

GHC.Word.$fNumWord8_$c-
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DJH ds1_s2DJI]
        case ds_s2DJH of {
          GHC.Word.W8# x#_s2DJK [Occ=Once] ->
              case ds1_s2DJI of {
                GHC.Word.W8# y#_s2DJM [Occ=Once] ->
                    case minusWord# [x#_s2DJK y#_s2DJM] of sat_s2DJN {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2DJN] of sat_s2DJO {
                            __DEFAULT -> GHC.Word.W8# [sat_s2DJO];
                          };
                    };
              };
        };

GHC.Word.$fNumWord8_$c+
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DJP ds1_s2DJQ]
        case ds_s2DJP of {
          GHC.Word.W8# x#_s2DJS [Occ=Once] ->
              case ds1_s2DJQ of {
                GHC.Word.W8# y#_s2DJU [Occ=Once] ->
                    case plusWord# [x#_s2DJS y#_s2DJU] of sat_s2DJV {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2DJV] of sat_s2DJW {
                            __DEFAULT -> GHC.Word.W8# [sat_s2DJW];
                          };
                    };
              };
        };

GHC.Word.$ctoInteger :: GHC.Word.Word8 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DJX]
        case ds_s2DJX of {
          GHC.Word.W8# x#_s2DJZ [Occ=Once] ->
              case word2Int# [x#_s2DJZ] of sat_s2DK0 {
                __DEFAULT -> GHC.Integer.Type.smallInteger sat_s2DK0;
              };
        };

GHC.Word.$fBitsWord8_$cpopCount :: GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DK1]
        case ds_s2DK1 of {
          GHC.Word.W8# x#_s2DK3 [Occ=Once] ->
              case popCnt8# [x#_s2DK3] of sat_s2DK4 {
                __DEFAULT ->
                    case word2Int# [sat_s2DK4] of sat_s2DK5 {
                      __DEFAULT -> GHC.Types.I# [sat_s2DK5];
                    };
              };
        };

GHC.Word.$fBitsWord8_$cunsafeShiftR
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DK6 ds1_s2DK7]
        case ds_s2DK6 of {
          GHC.Word.W8# x#_s2DK9 [Occ=Once] ->
              case ds1_s2DK7 of {
                GHC.Types.I# i#_s2DKb [Occ=Once] ->
                    case uncheckedShiftRL# [x#_s2DK9 i#_s2DKb] of sat_s2DKc {
                      __DEFAULT -> GHC.Word.W8# [sat_s2DKc];
                    };
              };
        };

GHC.Word.$fBitsWord8_$cshiftR
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DKd ds1_s2DKe]
        case ds_s2DKd of {
          GHC.Word.W8# x#_s2DKg [Occ=Once] ->
              case ds1_s2DKe of {
                GHC.Types.I# i#_s2DKi ->
                    case >=# [i#_s2DKi 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftRL# [x#_s2DKg i#_s2DKi] of sat_s2DKk {
                            __DEFAULT -> GHC.Word.W8# [sat_s2DKk];
                          };
                      1# -> GHC.Word.$fBitsWord8_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord8_$cunsafeShiftL
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DKl ds1_s2DKm]
        case ds_s2DKl of {
          GHC.Word.W8# x#_s2DKo [Occ=Once] ->
              case ds1_s2DKm of {
                GHC.Types.I# i#_s2DKq [Occ=Once] ->
                    case uncheckedShiftL# [x#_s2DKo i#_s2DKq] of sat_s2DKr {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2DKr] of sat_s2DKs {
                            __DEFAULT -> GHC.Word.W8# [sat_s2DKs];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord8_$cshiftL
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DKt ds1_s2DKu]
        case ds_s2DKt of {
          GHC.Word.W8# x#_s2DKw [Occ=Once] ->
              case ds1_s2DKu of {
                GHC.Types.I# i#_s2DKy ->
                    case >=# [i#_s2DKy 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [x#_s2DKw i#_s2DKy] of sat_s2DKA {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2DKA] of sat_s2DKB {
                                  __DEFAULT -> GHC.Word.W8# [sat_s2DKB];
                                };
                          };
                      1# -> GHC.Word.$fBitsWord8_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord8_$cisSigned :: GHC.Word.Word8 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s2DKC] GHC.Types.False [];

GHC.Word.$fBitsWord8_$crotate
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DKD ds1_s2DKE]
        case ds_s2DKD of wild_s2DKF {
          GHC.Word.W8# x#_s2DKG ->
              case ds1_s2DKE of {
                GHC.Types.I# i#_s2DKI [Occ=Once] ->
                    case int2Word# [i#_s2DKI] of sat_s2DKJ {
                      __DEFAULT ->
                          case and# [sat_s2DKJ 7##] of sat_s2DKK {
                            __DEFAULT ->
                                case word2Int# [sat_s2DKK] of wild2_s2DKL {
                                  __DEFAULT ->
                                      case -# [8# wild2_s2DKL] of sat_s2DKN {
                                        __DEFAULT ->
                                            case
                                                uncheckedShiftRL# [x#_s2DKG sat_s2DKN]
                                            of
                                            sat_s2DKO
                                            { __DEFAULT ->
                                                  case
                                                      uncheckedShiftL# [x#_s2DKG wild2_s2DKL]
                                                  of
                                                  sat_s2DKM
                                                  { __DEFAULT ->
                                                        case
                                                            or# [sat_s2DKM sat_s2DKO]
                                                        of
                                                        sat_s2DKP
                                                        { __DEFAULT ->
                                                              case
                                                                  narrow8Word# [sat_s2DKP]
                                                              of
                                                              sat_s2DKQ
                                                              { __DEFAULT ->
                                                                    GHC.Word.W8# [sat_s2DKQ];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s2DKF;
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord8_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DKR ds1_s2DKS]
        case ds_s2DKR of {
          GHC.Word.W8# x#_s2DKU [Occ=Once*] ->
              case ds1_s2DKS of {
                GHC.Types.I# i#_s2DKW ->
                    case >=# [i#_s2DKW 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s2DKW] of b_s2DKY [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s2DKY 64#] of {
                                  __DEFAULT ->
                                      case uncheckedShiftRL# [x#_s2DKU b_s2DKY] of sat_s2DL0 {
                                        __DEFAULT -> GHC.Word.W8# [sat_s2DL0];
                                      };
                                  1# -> GHC.Word.$fBitsWord8_$cminBound;
                                };
                          };
                      1# ->
                          case >=# [i#_s2DKW 64#] of {
                            __DEFAULT ->
                                case uncheckedShiftL# [x#_s2DKU i#_s2DKW] of sat_s2DL2 {
                                  __DEFAULT ->
                                      case narrow8Word# [sat_s2DL2] of sat_s2DL3 {
                                        __DEFAULT -> GHC.Word.W8# [sat_s2DL3];
                                      };
                                };
                            1# -> GHC.Word.$fBitsWord8_$cminBound;
                          };
                    };
              };
        };

GHC.Word.$fBitsWord8_$cxor
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DL4 ds1_s2DL5]
        case ds_s2DL4 of {
          GHC.Word.W8# x#_s2DL7 [Occ=Once] ->
              case ds1_s2DL5 of {
                GHC.Word.W8# y#_s2DL9 [Occ=Once] ->
                    case xor# [x#_s2DL7 y#_s2DL9] of sat_s2DLa {
                      __DEFAULT -> GHC.Word.W8# [sat_s2DLa];
                    };
              };
        };

GHC.Word.$fBitsWord8_$c.|.
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DLb ds1_s2DLc]
        case ds_s2DLb of {
          GHC.Word.W8# x#_s2DLe [Occ=Once] ->
              case ds1_s2DLc of {
                GHC.Word.W8# y#_s2DLg [Occ=Once] ->
                    case or# [x#_s2DLe y#_s2DLg] of sat_s2DLh {
                      __DEFAULT -> GHC.Word.W8# [sat_s2DLh];
                    };
              };
        };

GHC.Word.$fBitsWord8_$c.&.
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DLi ds1_s2DLj]
        case ds_s2DLi of {
          GHC.Word.W8# x#_s2DLl [Occ=Once] ->
              case ds1_s2DLj of {
                GHC.Word.W8# y#_s2DLn [Occ=Once] ->
                    case and# [x#_s2DLl y#_s2DLn] of sat_s2DLo {
                      __DEFAULT -> GHC.Word.W8# [sat_s2DLo];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord8_$ccountTrailingZeros
  :: GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DLp]
        case ds_s2DLp of {
          GHC.Word.W8# x#_s2DLr [Occ=Once] ->
              case ctz8# [x#_s2DLr] of sat_s2DLs {
                __DEFAULT ->
                    case word2Int# [sat_s2DLs] of sat_s2DLt {
                      __DEFAULT -> GHC.Types.I# [sat_s2DLt];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord8_$ccountLeadingZeros
  :: GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DLu]
        case ds_s2DLu of {
          GHC.Word.W8# x#_s2DLw [Occ=Once] ->
              case clz8# [x#_s2DLw] of sat_s2DLx {
                __DEFAULT ->
                    case word2Int# [sat_s2DLx] of sat_s2DLy {
                      __DEFAULT -> GHC.Types.I# [sat_s2DLy];
                    };
              };
        };

GHC.Word.$fBitsWord9 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [8#];

GHC.Word.$fBitsWord8_$cfiniteBitSize
  :: GHC.Word.Word8 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s2DLz] GHC.Word.$fBitsWord9;

GHC.Word.$fNumWord16_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Word.Word16
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s2DLA]
        case GHC.Integer.Type.integerToWord i_s2DLA of wild_s2DLB {
          __DEFAULT ->
              case narrow16Word# [wild_s2DLB] of sat_s2DLC {
                __DEFAULT -> GHC.Word.W16# [sat_s2DLC];
              };
        };

GHC.Word.$fNumWord16_$cabs :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_s2DLD] x_s2DLD;

GHC.Word.$fNumWord16_$cnegate :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DLE]
        case ds_s2DLE of {
          GHC.Word.W16# x#_s2DLG [Occ=Once] ->
              case word2Int# [x#_s2DLG] of sat_s2DLH {
                __DEFAULT ->
                    case negateInt# [sat_s2DLH] of sat_s2DLI {
                      __DEFAULT ->
                          case int2Word# [sat_s2DLI] of sat_s2DLJ {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2DLJ] of sat_s2DLK {
                                  __DEFAULT -> GHC.Word.W16# [sat_s2DLK];
                                };
                          };
                    };
              };
        };

GHC.Word.$fNumWord16_$c*
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DLL ds1_s2DLM]
        case ds_s2DLL of {
          GHC.Word.W16# x#_s2DLO [Occ=Once] ->
              case ds1_s2DLM of {
                GHC.Word.W16# y#_s2DLQ [Occ=Once] ->
                    case timesWord# [x#_s2DLO y#_s2DLQ] of sat_s2DLR {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2DLR] of sat_s2DLS {
                            __DEFAULT -> GHC.Word.W16# [sat_s2DLS];
                          };
                    };
              };
        };

GHC.Word.$fNumWord16_$c-
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DLT ds1_s2DLU]
        case ds_s2DLT of {
          GHC.Word.W16# x#_s2DLW [Occ=Once] ->
              case ds1_s2DLU of {
                GHC.Word.W16# y#_s2DLY [Occ=Once] ->
                    case minusWord# [x#_s2DLW y#_s2DLY] of sat_s2DLZ {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2DLZ] of sat_s2DM0 {
                            __DEFAULT -> GHC.Word.W16# [sat_s2DM0];
                          };
                    };
              };
        };

GHC.Word.$fNumWord16_$c+
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DM1 ds1_s2DM2]
        case ds_s2DM1 of {
          GHC.Word.W16# x#_s2DM4 [Occ=Once] ->
              case ds1_s2DM2 of {
                GHC.Word.W16# y#_s2DM6 [Occ=Once] ->
                    case plusWord# [x#_s2DM4 y#_s2DM6] of sat_s2DM7 {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2DM7] of sat_s2DM8 {
                            __DEFAULT -> GHC.Word.W16# [sat_s2DM8];
                          };
                    };
              };
        };

GHC.Word.$ctoInteger1
  :: GHC.Word.Word16 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DM9]
        case ds_s2DM9 of {
          GHC.Word.W16# x#_s2DMb [Occ=Once] ->
              case word2Int# [x#_s2DMb] of sat_s2DMc {
                __DEFAULT -> GHC.Integer.Type.smallInteger sat_s2DMc;
              };
        };

GHC.Word.$fBitsWord16_$cpopCount
  :: GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DMd]
        case ds_s2DMd of {
          GHC.Word.W16# x#_s2DMf [Occ=Once] ->
              case popCnt16# [x#_s2DMf] of sat_s2DMg {
                __DEFAULT ->
                    case word2Int# [sat_s2DMg] of sat_s2DMh {
                      __DEFAULT -> GHC.Types.I# [sat_s2DMh];
                    };
              };
        };

GHC.Word.$fBitsWord16_$cunsafeShiftR
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DMi ds1_s2DMj]
        case ds_s2DMi of {
          GHC.Word.W16# x#_s2DMl [Occ=Once] ->
              case ds1_s2DMj of {
                GHC.Types.I# i#_s2DMn [Occ=Once] ->
                    case uncheckedShiftRL# [x#_s2DMl i#_s2DMn] of sat_s2DMo {
                      __DEFAULT -> GHC.Word.W16# [sat_s2DMo];
                    };
              };
        };

GHC.Word.$fBitsWord16_$cshiftR
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DMp ds1_s2DMq]
        case ds_s2DMp of {
          GHC.Word.W16# x#_s2DMs [Occ=Once] ->
              case ds1_s2DMq of {
                GHC.Types.I# i#_s2DMu ->
                    case >=# [i#_s2DMu 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftRL# [x#_s2DMs i#_s2DMu] of sat_s2DMw {
                            __DEFAULT -> GHC.Word.W16# [sat_s2DMw];
                          };
                      1# -> GHC.Word.$fBitsWord16_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord16_$cunsafeShiftL
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DMx ds1_s2DMy]
        case ds_s2DMx of {
          GHC.Word.W16# x#_s2DMA [Occ=Once] ->
              case ds1_s2DMy of {
                GHC.Types.I# i#_s2DMC [Occ=Once] ->
                    case uncheckedShiftL# [x#_s2DMA i#_s2DMC] of sat_s2DMD {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2DMD] of sat_s2DME {
                            __DEFAULT -> GHC.Word.W16# [sat_s2DME];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord16_$cshiftL
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DMF ds1_s2DMG]
        case ds_s2DMF of {
          GHC.Word.W16# x#_s2DMI [Occ=Once] ->
              case ds1_s2DMG of {
                GHC.Types.I# i#_s2DMK ->
                    case >=# [i#_s2DMK 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [x#_s2DMI i#_s2DMK] of sat_s2DMM {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2DMM] of sat_s2DMN {
                                  __DEFAULT -> GHC.Word.W16# [sat_s2DMN];
                                };
                          };
                      1# -> GHC.Word.$fBitsWord16_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord16_$cisSigned
  :: GHC.Word.Word16 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s2DMO] GHC.Types.False [];

GHC.Word.$fBitsWord16_$crotate
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DMP ds1_s2DMQ]
        case ds_s2DMP of wild_s2DMR {
          GHC.Word.W16# x#_s2DMS ->
              case ds1_s2DMQ of {
                GHC.Types.I# i#_s2DMU [Occ=Once] ->
                    case int2Word# [i#_s2DMU] of sat_s2DMV {
                      __DEFAULT ->
                          case and# [sat_s2DMV 15##] of sat_s2DMW {
                            __DEFAULT ->
                                case word2Int# [sat_s2DMW] of wild2_s2DMX {
                                  __DEFAULT ->
                                      case -# [16# wild2_s2DMX] of sat_s2DMZ {
                                        __DEFAULT ->
                                            case
                                                uncheckedShiftRL# [x#_s2DMS sat_s2DMZ]
                                            of
                                            sat_s2DN0
                                            { __DEFAULT ->
                                                  case
                                                      uncheckedShiftL# [x#_s2DMS wild2_s2DMX]
                                                  of
                                                  sat_s2DMY
                                                  { __DEFAULT ->
                                                        case
                                                            or# [sat_s2DMY sat_s2DN0]
                                                        of
                                                        sat_s2DN1
                                                        { __DEFAULT ->
                                                              case
                                                                  narrow16Word# [sat_s2DN1]
                                                              of
                                                              sat_s2DN2
                                                              { __DEFAULT ->
                                                                    GHC.Word.W16# [sat_s2DN2];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s2DMR;
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord16_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DN3 ds1_s2DN4]
        case ds_s2DN3 of {
          GHC.Word.W16# x#_s2DN6 [Occ=Once*] ->
              case ds1_s2DN4 of {
                GHC.Types.I# i#_s2DN8 ->
                    case >=# [i#_s2DN8 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s2DN8] of b_s2DNa [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s2DNa 64#] of {
                                  __DEFAULT ->
                                      case uncheckedShiftRL# [x#_s2DN6 b_s2DNa] of sat_s2DNc {
                                        __DEFAULT -> GHC.Word.W16# [sat_s2DNc];
                                      };
                                  1# -> GHC.Word.$fBitsWord16_$cminBound;
                                };
                          };
                      1# ->
                          case >=# [i#_s2DN8 64#] of {
                            __DEFAULT ->
                                case uncheckedShiftL# [x#_s2DN6 i#_s2DN8] of sat_s2DNe {
                                  __DEFAULT ->
                                      case narrow16Word# [sat_s2DNe] of sat_s2DNf {
                                        __DEFAULT -> GHC.Word.W16# [sat_s2DNf];
                                      };
                                };
                            1# -> GHC.Word.$fBitsWord16_$cminBound;
                          };
                    };
              };
        };

GHC.Word.$fBitsWord16_$cxor
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DNg ds1_s2DNh]
        case ds_s2DNg of {
          GHC.Word.W16# x#_s2DNj [Occ=Once] ->
              case ds1_s2DNh of {
                GHC.Word.W16# y#_s2DNl [Occ=Once] ->
                    case xor# [x#_s2DNj y#_s2DNl] of sat_s2DNm {
                      __DEFAULT -> GHC.Word.W16# [sat_s2DNm];
                    };
              };
        };

GHC.Word.$fBitsWord16_$c.|.
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DNn ds1_s2DNo]
        case ds_s2DNn of {
          GHC.Word.W16# x#_s2DNq [Occ=Once] ->
              case ds1_s2DNo of {
                GHC.Word.W16# y#_s2DNs [Occ=Once] ->
                    case or# [x#_s2DNq y#_s2DNs] of sat_s2DNt {
                      __DEFAULT -> GHC.Word.W16# [sat_s2DNt];
                    };
              };
        };

GHC.Word.$fBitsWord16_$c.&.
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DNu ds1_s2DNv]
        case ds_s2DNu of {
          GHC.Word.W16# x#_s2DNx [Occ=Once] ->
              case ds1_s2DNv of {
                GHC.Word.W16# y#_s2DNz [Occ=Once] ->
                    case and# [x#_s2DNx y#_s2DNz] of sat_s2DNA {
                      __DEFAULT -> GHC.Word.W16# [sat_s2DNA];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord16_$ccountTrailingZeros
  :: GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DNB]
        case ds_s2DNB of {
          GHC.Word.W16# x#_s2DND [Occ=Once] ->
              case ctz16# [x#_s2DND] of sat_s2DNE {
                __DEFAULT ->
                    case word2Int# [sat_s2DNE] of sat_s2DNF {
                      __DEFAULT -> GHC.Types.I# [sat_s2DNF];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord16_$ccountLeadingZeros
  :: GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DNG]
        case ds_s2DNG of {
          GHC.Word.W16# x#_s2DNI [Occ=Once] ->
              case clz16# [x#_s2DNI] of sat_s2DNJ {
                __DEFAULT ->
                    case word2Int# [sat_s2DNJ] of sat_s2DNK {
                      __DEFAULT -> GHC.Types.I# [sat_s2DNK];
                    };
              };
        };

GHC.Word.$fBitsWord1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

GHC.Word.$fBitsWord16_$cfiniteBitSize
  :: GHC.Word.Word16 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s2DNL] GHC.Word.$fBitsWord1;

GHC.Word.$fNumWord32_$cfromInteger
  :: GHC.Integer.Type.Integer -> GHC.Word.Word32
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [i_s2DNM]
        case GHC.Integer.Type.integerToWord i_s2DNM of wild_s2DNN {
          __DEFAULT ->
              case narrow32Word# [wild_s2DNN] of sat_s2DNO {
                __DEFAULT -> GHC.Word.W32# [sat_s2DNO];
              };
        };

GHC.Word.$fNumWord32_$cabs :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U(U)>m, Unf=OtherCon []] =
    [] \r [x_s2DNP] x_s2DNP;

GHC.Word.$fNumWord32_$cnegate :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DNQ]
        case ds_s2DNQ of {
          GHC.Word.W32# x#_s2DNS [Occ=Once] ->
              case word2Int# [x#_s2DNS] of sat_s2DNT {
                __DEFAULT ->
                    case negateInt# [sat_s2DNT] of sat_s2DNU {
                      __DEFAULT ->
                          case int2Word# [sat_s2DNU] of sat_s2DNV {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2DNV] of sat_s2DNW {
                                  __DEFAULT -> GHC.Word.W32# [sat_s2DNW];
                                };
                          };
                    };
              };
        };

GHC.Word.$fNumWord32_$c*
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DNX ds1_s2DNY]
        case ds_s2DNX of {
          GHC.Word.W32# x#_s2DO0 [Occ=Once] ->
              case ds1_s2DNY of {
                GHC.Word.W32# y#_s2DO2 [Occ=Once] ->
                    case timesWord# [x#_s2DO0 y#_s2DO2] of sat_s2DO3 {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2DO3] of sat_s2DO4 {
                            __DEFAULT -> GHC.Word.W32# [sat_s2DO4];
                          };
                    };
              };
        };

GHC.Word.$fNumWord32_$c-
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DO5 ds1_s2DO6]
        case ds_s2DO5 of {
          GHC.Word.W32# x#_s2DO8 [Occ=Once] ->
              case ds1_s2DO6 of {
                GHC.Word.W32# y#_s2DOa [Occ=Once] ->
                    case minusWord# [x#_s2DO8 y#_s2DOa] of sat_s2DOb {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2DOb] of sat_s2DOc {
                            __DEFAULT -> GHC.Word.W32# [sat_s2DOc];
                          };
                    };
              };
        };

GHC.Word.$fNumWord32_$c+
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DOd ds1_s2DOe]
        case ds_s2DOd of {
          GHC.Word.W32# x#_s2DOg [Occ=Once] ->
              case ds1_s2DOe of {
                GHC.Word.W32# y#_s2DOi [Occ=Once] ->
                    case plusWord# [x#_s2DOg y#_s2DOi] of sat_s2DOj {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2DOj] of sat_s2DOk {
                            __DEFAULT -> GHC.Word.W32# [sat_s2DOk];
                          };
                    };
              };
        };

GHC.Word.$ctoInteger2
  :: GHC.Word.Word32 -> GHC.Integer.Type.Integer
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DOl]
        case ds_s2DOl of {
          GHC.Word.W32# x#_s2DOn [Occ=Once] ->
              case word2Int# [x#_s2DOn] of sat_s2DOo {
                __DEFAULT -> GHC.Integer.Type.smallInteger sat_s2DOo;
              };
        };

GHC.Word.$fBitsWord32_$cpopCount
  :: GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DOp]
        case ds_s2DOp of {
          GHC.Word.W32# x#_s2DOr [Occ=Once] ->
              case popCnt32# [x#_s2DOr] of sat_s2DOs {
                __DEFAULT ->
                    case word2Int# [sat_s2DOs] of sat_s2DOt {
                      __DEFAULT -> GHC.Types.I# [sat_s2DOt];
                    };
              };
        };

GHC.Word.$fBitsWord32_$cunsafeShiftR
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DOu ds1_s2DOv]
        case ds_s2DOu of {
          GHC.Word.W32# x#_s2DOx [Occ=Once] ->
              case ds1_s2DOv of {
                GHC.Types.I# i#_s2DOz [Occ=Once] ->
                    case uncheckedShiftRL# [x#_s2DOx i#_s2DOz] of sat_s2DOA {
                      __DEFAULT -> GHC.Word.W32# [sat_s2DOA];
                    };
              };
        };

GHC.Word.$fBitsWord32_$cshiftR
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DOB ds1_s2DOC]
        case ds_s2DOB of {
          GHC.Word.W32# x#_s2DOE [Occ=Once] ->
              case ds1_s2DOC of {
                GHC.Types.I# i#_s2DOG ->
                    case >=# [i#_s2DOG 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftRL# [x#_s2DOE i#_s2DOG] of sat_s2DOI {
                            __DEFAULT -> GHC.Word.W32# [sat_s2DOI];
                          };
                      1# -> GHC.Word.$fBitsWord32_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord32_$cunsafeShiftL
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DOJ ds1_s2DOK]
        case ds_s2DOJ of {
          GHC.Word.W32# x#_s2DOM [Occ=Once] ->
              case ds1_s2DOK of {
                GHC.Types.I# i#_s2DOO [Occ=Once] ->
                    case uncheckedShiftL# [x#_s2DOM i#_s2DOO] of sat_s2DOP {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2DOP] of sat_s2DOQ {
                            __DEFAULT -> GHC.Word.W32# [sat_s2DOQ];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord32_$cshiftL
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DOR ds1_s2DOS]
        case ds_s2DOR of {
          GHC.Word.W32# x#_s2DOU [Occ=Once] ->
              case ds1_s2DOS of {
                GHC.Types.I# i#_s2DOW ->
                    case >=# [i#_s2DOW 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [x#_s2DOU i#_s2DOW] of sat_s2DOY {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2DOY] of sat_s2DOZ {
                                  __DEFAULT -> GHC.Word.W32# [sat_s2DOZ];
                                };
                          };
                      1# -> GHC.Word.$fBitsWord32_$cminBound;
                    };
              };
        };

GHC.Word.$fBitsWord32_$cisSigned
  :: GHC.Word.Word32 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s2DP0] GHC.Types.False [];

GHC.Word.$fBitsWord32_$crotate
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DP1 ds1_s2DP2]
        case ds_s2DP1 of wild_s2DP3 {
          GHC.Word.W32# x#_s2DP4 ->
              case ds1_s2DP2 of {
                GHC.Types.I# i#_s2DP6 [Occ=Once] ->
                    case int2Word# [i#_s2DP6] of sat_s2DP7 {
                      __DEFAULT ->
                          case and# [sat_s2DP7 31##] of sat_s2DP8 {
                            __DEFAULT ->
                                case word2Int# [sat_s2DP8] of wild2_s2DP9 {
                                  __DEFAULT ->
                                      case -# [32# wild2_s2DP9] of sat_s2DPb {
                                        __DEFAULT ->
                                            case
                                                uncheckedShiftRL# [x#_s2DP4 sat_s2DPb]
                                            of
                                            sat_s2DPc
                                            { __DEFAULT ->
                                                  case
                                                      uncheckedShiftL# [x#_s2DP4 wild2_s2DP9]
                                                  of
                                                  sat_s2DPa
                                                  { __DEFAULT ->
                                                        case
                                                            or# [sat_s2DPa sat_s2DPc]
                                                        of
                                                        sat_s2DPd
                                                        { __DEFAULT ->
                                                              case
                                                                  narrow32Word# [sat_s2DPd]
                                                              of
                                                              sat_s2DPe
                                                              { __DEFAULT ->
                                                                    GHC.Word.W32# [sat_s2DPe];
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s2DP3;
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord32_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DPf ds1_s2DPg]
        case ds_s2DPf of {
          GHC.Word.W32# x#_s2DPi [Occ=Once*] ->
              case ds1_s2DPg of {
                GHC.Types.I# i#_s2DPk ->
                    case >=# [i#_s2DPk 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s2DPk] of b_s2DPm [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s2DPm 64#] of {
                                  __DEFAULT ->
                                      case uncheckedShiftRL# [x#_s2DPi b_s2DPm] of sat_s2DPo {
                                        __DEFAULT -> GHC.Word.W32# [sat_s2DPo];
                                      };
                                  1# -> GHC.Word.$fBitsWord32_$cminBound;
                                };
                          };
                      1# ->
                          case >=# [i#_s2DPk 64#] of {
                            __DEFAULT ->
                                case uncheckedShiftL# [x#_s2DPi i#_s2DPk] of sat_s2DPq {
                                  __DEFAULT ->
                                      case narrow32Word# [sat_s2DPq] of sat_s2DPr {
                                        __DEFAULT -> GHC.Word.W32# [sat_s2DPr];
                                      };
                                };
                            1# -> GHC.Word.$fBitsWord32_$cminBound;
                          };
                    };
              };
        };

GHC.Word.$fBitsWord32_$cxor
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DPs ds1_s2DPt]
        case ds_s2DPs of {
          GHC.Word.W32# x#_s2DPv [Occ=Once] ->
              case ds1_s2DPt of {
                GHC.Word.W32# y#_s2DPx [Occ=Once] ->
                    case xor# [x#_s2DPv y#_s2DPx] of sat_s2DPy {
                      __DEFAULT -> GHC.Word.W32# [sat_s2DPy];
                    };
              };
        };

GHC.Word.$fBitsWord32_$c.|.
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DPz ds1_s2DPA]
        case ds_s2DPz of {
          GHC.Word.W32# x#_s2DPC [Occ=Once] ->
              case ds1_s2DPA of {
                GHC.Word.W32# y#_s2DPE [Occ=Once] ->
                    case or# [x#_s2DPC y#_s2DPE] of sat_s2DPF {
                      __DEFAULT -> GHC.Word.W32# [sat_s2DPF];
                    };
              };
        };

GHC.Word.$fBitsWord32_$c.&.
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DPG ds1_s2DPH]
        case ds_s2DPG of {
          GHC.Word.W32# x#_s2DPJ [Occ=Once] ->
              case ds1_s2DPH of {
                GHC.Word.W32# y#_s2DPL [Occ=Once] ->
                    case and# [x#_s2DPJ y#_s2DPL] of sat_s2DPM {
                      __DEFAULT -> GHC.Word.W32# [sat_s2DPM];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros
  :: GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DPN]
        case ds_s2DPN of {
          GHC.Word.W32# x#_s2DPP [Occ=Once] ->
              case ctz32# [x#_s2DPP] of sat_s2DPQ {
                __DEFAULT ->
                    case word2Int# [sat_s2DPQ] of sat_s2DPR {
                      __DEFAULT -> GHC.Types.I# [sat_s2DPR];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros
  :: GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DPS]
        case ds_s2DPS of {
          GHC.Word.W32# x#_s2DPU [Occ=Once] ->
              case clz32# [x#_s2DPU] of sat_s2DPV {
                __DEFAULT ->
                    case word2Int# [sat_s2DPV] of sat_s2DPW {
                      __DEFAULT -> GHC.Types.I# [sat_s2DPW];
                    };
              };
        };

GHC.Word.$fBitsWord3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [32#];

GHC.Word.$fBitsWord32_$cfiniteBitSize
  :: GHC.Word.Word32 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s2DPX] GHC.Word.$fBitsWord3;

GHC.Word.$fBitsWord64_$cpopCount
  :: GHC.Word.Word64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DPY]
        case ds_s2DPY of {
          GHC.Word.W64# x#_s2DQ0 [Occ=Once] ->
              case popCnt64# [x#_s2DQ0] of sat_s2DQ1 {
                __DEFAULT ->
                    case word2Int# [sat_s2DQ1] of sat_s2DQ2 {
                      __DEFAULT -> GHC.Types.I# [sat_s2DQ2];
                    };
              };
        };

GHC.Word.$fBitsWord64_$cunsafeShiftR
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DQ3 ds1_s2DQ4]
        case ds_s2DQ3 of {
          GHC.Word.W64# x#_s2DQ6 [Occ=Once] ->
              case ds1_s2DQ4 of {
                GHC.Types.I# i#_s2DQ8 [Occ=Once] ->
                    case uncheckedShiftRL# [x#_s2DQ6 i#_s2DQ8] of sat_s2DQ9 {
                      __DEFAULT -> GHC.Word.W64# [sat_s2DQ9];
                    };
              };
        };

GHC.Word.$fBitsWord64_$cshiftR
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DQa ds1_s2DQb]
        case ds_s2DQa of {
          GHC.Word.W64# x#_s2DQd [Occ=Once] ->
              case ds1_s2DQb of {
                GHC.Types.I# i#_s2DQf ->
                    case >=# [i#_s2DQf 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftRL# [x#_s2DQd i#_s2DQf] of sat_s2DQh {
                            __DEFAULT -> GHC.Word.W64# [sat_s2DQh];
                          };
                      1# -> GHC.Word.$fBitsWord7;
                    };
              };
        };

GHC.Word.$fBitsWord64_$cunsafeShiftL
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DQi ds1_s2DQj]
        case ds_s2DQi of {
          GHC.Word.W64# x#_s2DQl [Occ=Once] ->
              case ds1_s2DQj of {
                GHC.Types.I# i#_s2DQn [Occ=Once] ->
                    case uncheckedShiftL# [x#_s2DQl i#_s2DQn] of sat_s2DQo {
                      __DEFAULT -> GHC.Word.W64# [sat_s2DQo];
                    };
              };
        };

GHC.Word.$fBitsWord64_$cshiftL
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DQp ds1_s2DQq]
        case ds_s2DQp of {
          GHC.Word.W64# x#_s2DQs [Occ=Once] ->
              case ds1_s2DQq of {
                GHC.Types.I# i#_s2DQu ->
                    case >=# [i#_s2DQu 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [x#_s2DQs i#_s2DQu] of sat_s2DQw {
                            __DEFAULT -> GHC.Word.W64# [sat_s2DQw];
                          };
                      1# -> GHC.Word.$fBitsWord7;
                    };
              };
        };

GHC.Word.$fBitsWord64_$cisSigned
  :: GHC.Word.Word64 -> GHC.Types.Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s2DQx] GHC.Types.False [];

GHC.Word.$fBitsWord64_$crotate
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DQy ds1_s2DQz]
        case ds_s2DQy of wild_s2DQA {
          GHC.Word.W64# x#_s2DQB ->
              case ds1_s2DQz of {
                GHC.Types.I# i#_s2DQD [Occ=Once] ->
                    case int2Word# [i#_s2DQD] of sat_s2DQE {
                      __DEFAULT ->
                          case and# [sat_s2DQE 63##] of sat_s2DQF {
                            __DEFAULT ->
                                case word2Int# [sat_s2DQF] of wild2_s2DQG {
                                  __DEFAULT ->
                                      case -# [64# wild2_s2DQG] of sat_s2DQI {
                                        __DEFAULT ->
                                            case
                                                uncheckedShiftRL# [x#_s2DQB sat_s2DQI]
                                            of
                                            sat_s2DQJ
                                            { __DEFAULT ->
                                                  case
                                                      uncheckedShiftL# [x#_s2DQB wild2_s2DQG]
                                                  of
                                                  sat_s2DQH
                                                  { __DEFAULT ->
                                                        case
                                                            or# [sat_s2DQH sat_s2DQJ]
                                                        of
                                                        sat_s2DQK
                                                        { __DEFAULT -> GHC.Word.W64# [sat_s2DQK];
                                                        };
                                                  };
                                            };
                                      };
                                  0# -> wild_s2DQA;
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord64_$cshift [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DQL ds1_s2DQM]
        case ds_s2DQL of {
          GHC.Word.W64# x#_s2DQO [Occ=Once*] ->
              case ds1_s2DQM of {
                GHC.Types.I# i#_s2DQQ ->
                    case >=# [i#_s2DQQ 0#] of {
                      __DEFAULT ->
                          case negateInt# [i#_s2DQQ] of b_s2DQS [Dmd=<S,U>] {
                            __DEFAULT ->
                                case >=# [b_s2DQS 64#] of {
                                  __DEFAULT ->
                                      case uncheckedShiftRL# [x#_s2DQO b_s2DQS] of sat_s2DQU {
                                        __DEFAULT -> GHC.Word.W64# [sat_s2DQU];
                                      };
                                  1# -> GHC.Word.$fBitsWord7;
                                };
                          };
                      1# ->
                          case >=# [i#_s2DQQ 64#] of {
                            __DEFAULT ->
                                case uncheckedShiftL# [x#_s2DQO i#_s2DQQ] of sat_s2DQW {
                                  __DEFAULT -> GHC.Word.W64# [sat_s2DQW];
                                };
                            1# -> GHC.Word.$fBitsWord7;
                          };
                    };
              };
        };

GHC.Word.$fBitsWord64_$cxor
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DQX ds1_s2DQY]
        case ds_s2DQX of {
          GHC.Word.W64# x#_s2DR0 [Occ=Once] ->
              case ds1_s2DQY of {
                GHC.Word.W64# y#_s2DR2 [Occ=Once] ->
                    case xor# [x#_s2DR0 y#_s2DR2] of sat_s2DR3 {
                      __DEFAULT -> GHC.Word.W64# [sat_s2DR3];
                    };
              };
        };

GHC.Word.$fBitsWord64_$c.|.
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DR4 ds1_s2DR5]
        case ds_s2DR4 of {
          GHC.Word.W64# x#_s2DR7 [Occ=Once] ->
              case ds1_s2DR5 of {
                GHC.Word.W64# y#_s2DR9 [Occ=Once] ->
                    case or# [x#_s2DR7 y#_s2DR9] of sat_s2DRa {
                      __DEFAULT -> GHC.Word.W64# [sat_s2DRa];
                    };
              };
        };

GHC.Word.$fBitsWord64_$c.&.
  :: GHC.Word.Word64 -> GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DRb ds1_s2DRc]
        case ds_s2DRb of {
          GHC.Word.W64# x#_s2DRe [Occ=Once] ->
              case ds1_s2DRc of {
                GHC.Word.W64# y#_s2DRg [Occ=Once] ->
                    case and# [x#_s2DRe y#_s2DRg] of sat_s2DRh {
                      __DEFAULT -> GHC.Word.W64# [sat_s2DRh];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros
  :: GHC.Word.Word64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DRi]
        case ds_s2DRi of {
          GHC.Word.W64# x#_s2DRk [Occ=Once] ->
              case ctz64# [x#_s2DRk] of sat_s2DRl {
                __DEFAULT ->
                    case word2Int# [sat_s2DRl] of sat_s2DRm {
                      __DEFAULT -> GHC.Types.I# [sat_s2DRm];
                    };
              };
        };

GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
  :: GHC.Word.Word64 -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DRn]
        case ds_s2DRn of {
          GHC.Word.W64# x#_s2DRp [Occ=Once] ->
              case clz64# [x#_s2DRp] of sat_s2DRq {
                __DEFAULT ->
                    case word2Int# [sat_s2DRq] of sat_s2DRr {
                      __DEFAULT -> GHC.Types.I# [sat_s2DRr];
                    };
              };
        };

GHC.Word.$fBitsWord5 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [64#];

GHC.Word.$fBitsWord64_$cfiniteBitSize
  :: GHC.Word.Word64 -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m, Unf=OtherCon []] =
    [] \r [ds_s2DRs] GHC.Word.$fBitsWord5;

GHC.Word.eqWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DRt ds1_s2DRu]
        case ds_s2DRt of {
          GHC.Word.W8# x_s2DRw [Occ=Once] ->
              case ds1_s2DRu of {
                GHC.Word.W8# y_s2DRy [Occ=Once] ->
                    case eqWord# [x_s2DRw y_s2DRy] of sat_s2DRz {
                      __DEFAULT -> tagToEnum# [sat_s2DRz];
                    };
              };
        };

GHC.Word.$fEqWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Word.eqWord8
                                     GHC.Word.neWord8];

GHC.Word.$fNumWord4 :: GHC.Word.Word8
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W8#! [1##];

GHC.Word.$fNumWord8_$csignum :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DRA]
        case ds_s2DRA of {
          GHC.Word.W8# x_s2DRC [Occ=Once!] ->
              case x_s2DRC of {
                __DEFAULT -> GHC.Word.$fNumWord4;
                0## -> GHC.Word.$fBitsWord8_$cminBound;
              };
        };

GHC.Word.$fNumWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Word.$fNumWord8_$c+
                                  GHC.Word.$fNumWord8_$c-
                                  GHC.Word.$fNumWord8_$c*
                                  GHC.Word.$fNumWord8_$cnegate
                                  GHC.Word.$fNumWord8_$cabs
                                  GHC.Word.$fNumWord8_$csignum
                                  GHC.Word.$fNumWord8_$cfromInteger];

GHC.Word.$fBitsWord8_$ccomplement
  :: GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DRE]
        case ds_s2DRE of {
          GHC.Word.W8# x#_s2DRG [Occ=Once] ->
              case xor# [x#_s2DRG 255##] of sat_s2DRH {
                __DEFAULT -> GHC.Word.W8# [sat_s2DRH];
              };
        };

GHC.Word.$fBitsWord10 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Word.$fBitsWord9];

GHC.Word.$fBitsWord8_$cbitSizeMaybe
  :: GHC.Word.Word8 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s2DRI] GHC.Word.$fBitsWord10;

GHC.Word.$fBitsWord8_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s2DRJ]
        case i_s2DRJ of {
          GHC.Types.I# i#_s2DRL ->
              case >=# [i#_s2DRL 64#] of {
                __DEFAULT ->
                    case uncheckedShiftL# [1## i#_s2DRL] of sat_s2DRN {
                      __DEFAULT ->
                          case narrow8Word# [sat_s2DRN] of sat_s2DRO {
                            __DEFAULT -> GHC.Word.W8# [sat_s2DRO];
                          };
                    };
                1# -> GHC.Word.$fBitsWord8_$cminBound;
              };
        };

GHC.Word.$fBitsWord8_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2DRP i_s2DRQ]
        case x_s2DRP of {
          GHC.Word.W8# x#_s2DRS [Occ=Once] ->
              case i_s2DRQ of {
                GHC.Types.I# i#_s2DRU ->
                    case >=# [i#_s2DRU 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2DRU] of sat_s2DRW {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2DRW] of sat_s2DRX {
                                  __DEFAULT ->
                                      case and# [x#_s2DRS sat_s2DRX] of {
                                        __DEFAULT -> GHC.Types.True [];
                                        0## -> GHC.Types.False [];
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Word.$fBitsWord8_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2DRZ eta1_s2DS0]
        case eta_s2DRZ of wild_s2DS1 {
          GHC.Word.W8# x#_s2DS2 ->
              case eta1_s2DS0 of {
                GHC.Types.I# x1_s2DS4 [Occ=Once] ->
                    case negateInt# [x1_s2DS4] of sat_s2DS5 {
                      __DEFAULT ->
                          case int2Word# [sat_s2DS5] of sat_s2DS6 {
                            __DEFAULT ->
                                case and# [sat_s2DS6 7##] of sat_s2DS7 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2DS7] of wild2_s2DS8 {
                                        __DEFAULT ->
                                            case -# [8# wild2_s2DS8] of sat_s2DSa {
                                              __DEFAULT ->
                                                  case
                                                      uncheckedShiftRL# [x#_s2DS2 sat_s2DSa]
                                                  of
                                                  sat_s2DSb
                                                  { __DEFAULT ->
                                                        case
                                                            uncheckedShiftL# [x#_s2DS2 wild2_s2DS8]
                                                        of
                                                        sat_s2DS9
                                                        { __DEFAULT ->
                                                              case
                                                                  or# [sat_s2DS9 sat_s2DSb]
                                                              of
                                                              sat_s2DSc
                                                              { __DEFAULT ->
                                                                    case
                                                                        narrow8Word# [sat_s2DSc]
                                                                    of
                                                                    sat_s2DSd
                                                                    { __DEFAULT ->
                                                                          GHC.Word.W8# [sat_s2DSd];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s2DS1;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord8_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Word.$fBitsWord8_$crotate eta_B2 eta_B1;

GHC.Word.$fBitsWord8_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2DSe eta1_s2DSf]
        case eta_s2DSe of wild_s2DSg {
          GHC.Word.W8# x#_s2DSh [Occ=Once] ->
              case eta1_s2DSf of {
                GHC.Types.I# i#_s2DSj ->
                    case >=# [i#_s2DSj 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2DSj] of sat_s2DSl {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2DSl] of sat_s2DSm {
                                  __DEFAULT ->
                                      case xor# [x#_s2DSh sat_s2DSm] of sat_s2DSn {
                                        __DEFAULT -> GHC.Word.W8# [sat_s2DSn];
                                      };
                                };
                          };
                      1# -> wild_s2DSg;
                    };
              };
        };

GHC.Word.$fBitsWord8_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2DSo eta1_s2DSp]
        case eta_s2DSo of {
          GHC.Word.W8# x#_s2DSr [Occ=Once*] ->
              case eta1_s2DSp of {
                GHC.Types.I# i#_s2DSt ->
                    case >=# [i#_s2DSt 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2DSt] of sat_s2DSv {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2DSv] of sat_s2DSw {
                                  __DEFAULT ->
                                      case xor# [sat_s2DSw 255##] of sat_s2DSx {
                                        __DEFAULT ->
                                            case and# [x#_s2DSr sat_s2DSx] of sat_s2DSy {
                                              __DEFAULT -> GHC.Word.W8# [sat_s2DSy];
                                            };
                                      };
                                };
                          };
                      1# ->
                          case and# [x#_s2DSr 255##] of sat_s2DSz {
                            __DEFAULT -> GHC.Word.W8# [sat_s2DSz];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord8_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Types.Int -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2DSA eta1_s2DSB]
        case eta_s2DSA of wild_s2DSC {
          GHC.Word.W8# x#_s2DSD [Occ=Once] ->
              case eta1_s2DSB of {
                GHC.Types.I# i#_s2DSF ->
                    case >=# [i#_s2DSF 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2DSF] of sat_s2DSH {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2DSH] of sat_s2DSI {
                                  __DEFAULT ->
                                      case or# [x#_s2DSD sat_s2DSI] of sat_s2DSJ {
                                        __DEFAULT -> GHC.Word.W8# [sat_s2DSJ];
                                      };
                                };
                          };
                      1# -> wild_s2DSC;
                    };
              };
        };

GHC.Word.$fBitsWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Word.$fEqWord8
                                     GHC.Word.$fBitsWord8_$c.&.
                                     GHC.Word.$fBitsWord8_$c.|.
                                     GHC.Word.$fBitsWord8_$cxor
                                     GHC.Word.$fBitsWord8_$ccomplement
                                     GHC.Word.$fBitsWord8_$cshift
                                     GHC.Word.$fBitsWord8_$crotate
                                     GHC.Word.$fBitsWord8_$cminBound
                                     GHC.Word.$fBitsWord8_$cbit
                                     GHC.Word.$fBitsWord8_$csetBit
                                     GHC.Word.$fBitsWord8_$cclearBit
                                     GHC.Word.$fBitsWord8_$ccomplementBit
                                     GHC.Word.$fBitsWord8_$ctestBit
                                     GHC.Word.$fBitsWord8_$cbitSizeMaybe
                                     GHC.Word.$fBitsWord8_$cfiniteBitSize
                                     GHC.Word.$fBitsWord8_$cisSigned
                                     GHC.Word.$fBitsWord8_$cshiftL
                                     GHC.Word.$fBitsWord8_$cunsafeShiftL
                                     GHC.Word.$fBitsWord8_$cshiftR
                                     GHC.Word.$fBitsWord8_$cunsafeShiftR
                                     GHC.Word.$fBitsWord8_$crotateL
                                     GHC.Word.$fBitsWord8_$crotateR
                                     GHC.Word.$fBitsWord8_$cpopCount];

GHC.Word.$fFiniteBitsWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Word.$fBitsWord8
                                           GHC.Word.$fBitsWord8_$cfiniteBitSize
                                           GHC.Word.$fFiniteBitsWord8_$ccountLeadingZeros
                                           GHC.Word.$fFiniteBitsWord8_$ccountTrailingZeros];

GHC.Word.$fIntegralWord8_$cquot
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DSK y_s2DSL]
        case ds_s2DSK of {
          GHC.Word.W8# x#_s2DSN [Occ=Once] ->
              case y_s2DSL of {
                GHC.Word.W8# y#_s2DSP [Occ=Once!] ->
                    case y#_s2DSP of wild2_s2DSQ {
                      __DEFAULT ->
                          case quotWord# [x#_s2DSN wild2_s2DSQ] of wild3_s2DSR {
                            __DEFAULT -> GHC.Word.W8# [wild3_s2DSR];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord8_$crem
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DSS y_s2DST]
        case ds_s2DSS of {
          GHC.Word.W8# x#_s2DSV [Occ=Once] ->
              case y_s2DST of {
                GHC.Word.W8# y#_s2DSX [Occ=Once!] ->
                    case y#_s2DSX of wild2_s2DSY {
                      __DEFAULT ->
                          case remWord# [x#_s2DSV wild2_s2DSY] of wild3_s2DSZ {
                            __DEFAULT -> GHC.Word.W8# [wild3_s2DSZ];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord8_$cquotRem
  :: GHC.Word.Word8
     -> GHC.Word.Word8 -> (GHC.Word.Word8, GHC.Word.Word8)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DT0 y_s2DT1]
        case ds_s2DT0 of {
          GHC.Word.W8# x#_s2DT3 [Occ=Once] ->
              case y_s2DT1 of {
                GHC.Word.W8# y#_s2DT5 [Occ=Once!] ->
                    case y#_s2DT5 of wild2_s2DT6 {
                      __DEFAULT ->
                          case quotRemWord# [x#_s2DT3 wild2_s2DT6] of {
                            (#,#) ipv_s2DT8 [Occ=Once] ipv1_s2DT9 [Occ=Once] ->
                                let {
                                  sat_s2DTb [Occ=Once] :: GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.Word.W8#! [ipv1_s2DT9]; } in
                                let {
                                  sat_s2DTa [Occ=Once] :: GHC.Word.Word8
                                  [LclId] =
                                      CCCS GHC.Word.W8#! [ipv_s2DT8];
                                } in  (,) [sat_s2DTa sat_s2DTb];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord8_$cdivMod
  :: GHC.Word.Word8
     -> GHC.Word.Word8 -> (GHC.Word.Word8, GHC.Word.Word8)
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s2DTc y_s2DTd]
        case ds_s2DTc of {
          GHC.Word.W8# x#_s2DTf ->
              case y_s2DTd of {
                GHC.Word.W8# y#_s2DTh [Occ=Once!] ->
                    case y#_s2DTh of wild2_s2DTi {
                      __DEFAULT ->
                          let {
                            sat_s2DTm [Occ=Once] :: GHC.Word.Word8
                            [LclId] =
                                [x#_s2DTf wild2_s2DTi] \u []
                                    case remWord# [x#_s2DTf wild2_s2DTi] of wild3_s2DTl {
                                      __DEFAULT -> GHC.Word.W8# [wild3_s2DTl];
                                    }; } in
                          let {
                            sat_s2DTk [Occ=Once] :: GHC.Word.Word8
                            [LclId] =
                                [x#_s2DTf wild2_s2DTi] \u []
                                    case quotWord# [x#_s2DTf wild2_s2DTi] of wild3_s2DTj {
                                      __DEFAULT -> GHC.Word.W8# [wild3_s2DTj];
                                    };
                          } in  (,) [sat_s2DTk sat_s2DTm];
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.gtWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DTn ds1_s2DTo]
        case ds_s2DTn of {
          GHC.Word.W8# x_s2DTq [Occ=Once] ->
              case ds1_s2DTo of {
                GHC.Word.W8# y_s2DTs [Occ=Once] ->
                    case gtWord# [x_s2DTq y_s2DTs] of sat_s2DTt {
                      __DEFAULT -> tagToEnum# [sat_s2DTt];
                    };
              };
        };

GHC.Word.geWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DTu ds1_s2DTv]
        case ds_s2DTu of {
          GHC.Word.W8# x_s2DTx [Occ=Once] ->
              case ds1_s2DTv of {
                GHC.Word.W8# y_s2DTz [Occ=Once] ->
                    case geWord# [x_s2DTx y_s2DTz] of sat_s2DTA {
                      __DEFAULT -> tagToEnum# [sat_s2DTA];
                    };
              };
        };

GHC.Word.ltWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DTB ds1_s2DTC]
        case ds_s2DTB of {
          GHC.Word.W8# x_s2DTE [Occ=Once] ->
              case ds1_s2DTC of {
                GHC.Word.W8# y_s2DTG [Occ=Once] ->
                    case ltWord# [x_s2DTE y_s2DTG] of sat_s2DTH {
                      __DEFAULT -> tagToEnum# [sat_s2DTH];
                    };
              };
        };

GHC.Word.leWord8 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DTI ds1_s2DTJ]
        case ds_s2DTI of {
          GHC.Word.W8# x_s2DTL [Occ=Once] ->
              case ds1_s2DTJ of {
                GHC.Word.W8# y_s2DTN [Occ=Once] ->
                    case leWord# [x_s2DTL y_s2DTN] of sat_s2DTO {
                      __DEFAULT -> tagToEnum# [sat_s2DTO];
                    };
              };
        };

GHC.Word.$fOrdWord8_$ccompare
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2DTP y_s2DTQ]
        case x_s2DTP of {
          GHC.Word.W8# x1_s2DTS ->
              case y_s2DTQ of {
                GHC.Word.W8# y1_s2DTU ->
                    case eqWord# [x1_s2DTS y1_s2DTU] of {
                      __DEFAULT ->
                          case leWord# [x1_s2DTS y1_s2DTU] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Word.$fOrdWord8_$cmax
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2DTX y_s2DTY]
        case x_s2DTX of wild_s2DTZ {
          GHC.Word.W8# x1_s2DU0 [Occ=Once] ->
              case y_s2DTY of wild1_s2DU1 {
                GHC.Word.W8# y1_s2DU2 [Occ=Once] ->
                    case leWord# [x1_s2DU0 y1_s2DU2] of {
                      __DEFAULT -> wild_s2DTZ;
                      1# -> wild1_s2DU1;
                    };
              };
        };

GHC.Word.$fOrdWord8_$cmin
  :: GHC.Word.Word8 -> GHC.Word.Word8 -> GHC.Word.Word8
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2DU4 y_s2DU5]
        case x_s2DU4 of wild_s2DU6 {
          GHC.Word.W8# x1_s2DU7 [Occ=Once] ->
              case y_s2DU5 of wild1_s2DU8 {
                GHC.Word.W8# y1_s2DU9 [Occ=Once] ->
                    case leWord# [x1_s2DU7 y1_s2DU9] of {
                      __DEFAULT -> wild1_s2DU8;
                      1# -> wild_s2DU6;
                    };
              };
        };

GHC.Word.$fOrdWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Word.Word8
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Word.$fEqWord8
                                      GHC.Word.$fOrdWord8_$ccompare
                                      GHC.Word.ltWord8
                                      GHC.Word.leWord8
                                      GHC.Word.gtWord8
                                      GHC.Word.geWord8
                                      GHC.Word.$fOrdWord8_$cmax
                                      GHC.Word.$fOrdWord8_$cmin];

GHC.Word.$fIxWord8_$cinRange
  :: (GHC.Word.Word8, GHC.Word.Word8)
     -> GHC.Word.Word8 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DUb i_s2DUc]
        case ds_s2DUb of {
          (,) m_s2DUe [Occ=Once!] n_s2DUf [Occ=Once!] ->
              case m_s2DUe of {
                GHC.Word.W8# x_s2DUh [Occ=Once] ->
                    case i_s2DUc of {
                      GHC.Word.W8# y_s2DUj ->
                          case leWord# [x_s2DUh y_s2DUj] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s2DUf of {
                                  GHC.Word.W8# y1_s2DUm [Occ=Once] ->
                                      case leWord# [y_s2DUj y1_s2DUm] of sat_s2DUn {
                                        __DEFAULT -> tagToEnum# [sat_s2DUn];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord8_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word8 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2DUo]
        case w_s2DUo of {
          GHC.Word.W8# ww1_s2DUq [Occ=Once] ->
              case word2Int# [ww1_s2DUq] of sat_s2DUr {
                __DEFAULT ->
                    case GHC.Integer.Type.smallInteger sat_s2DUr of sat_s2DUs {
                      __DEFAULT ->
                          case
                              GHC.Integer.Type.timesInteger sat_s2DUs GHC.Word.$fRealWord1
                          of
                          sat_s2DUt
                          { __DEFAULT ->
                                case GHC.Real.$w$sreduce sat_s2DUt GHC.Word.$fRealWord1 of {
                                  (#,#) ww3_s2DUv [Occ=Once] ww4_s2DUw [Occ=Once] ->
                                      GHC.Real.:% [ww3_s2DUv ww4_s2DUw];
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Word.$fNumWord8
                                    GHC.Word.$fOrdWord8
                                    GHC.Word.$fRealWord8_$ctoRational];

GHC.Word.$fIntegralWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Word.$fRealWord8
                                        GHC.Word.$fEnumWord8
                                        GHC.Word.$fIntegralWord8_$cquot
                                        GHC.Word.$fIntegralWord8_$crem
                                        GHC.Word.$fIntegralWord8_$cquot
                                        GHC.Word.$fIntegralWord8_$crem
                                        GHC.Word.$fIntegralWord8_$cquotRem
                                        GHC.Word.$fIntegralWord8_$cdivMod
                                        GHC.Word.$ctoInteger];

GHC.Word.$fIxWord8_$cunsafeIndex
  :: (GHC.Word.Word8, GHC.Word.Word8)
     -> GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DUx i_s2DUy]
        case ds_s2DUx of {
          (,) m_s2DUA [Occ=Once!] _ [Occ=Dead] ->
              case i_s2DUy of {
                GHC.Word.W8# x#_s2DUD [Occ=Once] ->
                    case m_s2DUA of {
                      GHC.Word.W8# y#_s2DUF [Occ=Once] ->
                          case minusWord# [x#_s2DUD y#_s2DUF] of sat_s2DUG {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2DUG] of sat_s2DUH {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2DUH] of sat_s2DUI {
                                        __DEFAULT -> GHC.Types.I# [sat_s2DUI];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord8_$crange
  :: (GHC.Word.Word8, GHC.Word.Word8) -> [GHC.Word.Word8]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s2DUJ]
        case ds_s2DUJ of {
          (,) m_s2DUL [Occ=Once] n_s2DUM [Occ=Once] ->
              GHC.Word.$fEnumWord8_$cenumFromTo m_s2DUL n_s2DUM;
        };

GHC.Word.$fIxWord1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

GHC.Word.$fIxWord8_$crangeSize
  :: (GHC.Word.Word8, GHC.Word.Word8) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2DUN]
        case b_s2DUN of {
          (,) _l_s2DUP [Occ=Once!] h_s2DUQ [Occ=Once!] ->
              case _l_s2DUP of {
                GHC.Word.W8# x_s2DUS ->
                    case h_s2DUQ of {
                      GHC.Word.W8# y_s2DUU ->
                          case leWord# [x_s2DUS y_s2DUU] of {
                            __DEFAULT -> GHC.Word.$fIxWord1;
                            1# ->
                                case minusWord# [y_s2DUU x_s2DUS] of sat_s2DUW {
                                  __DEFAULT ->
                                      case narrow8Word# [sat_s2DUW] of sat_s2DUX {
                                        __DEFAULT ->
                                            case word2Int# [sat_s2DUX] of sat_s2DUY {
                                              __DEFAULT ->
                                                  case +# [sat_s2DUY 1#] of sat_s2DUZ {
                                                    __DEFAULT -> GHC.Types.I# [sat_s2DUZ];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord8_$cunsafeRangeSize
  :: (GHC.Word.Word8, GHC.Word.Word8) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2DV0]
        case b_s2DV0 of {
          (,) _l_s2DV2 [Occ=Once!] h_s2DV3 [Occ=Once!] ->
              case h_s2DV3 of {
                GHC.Word.W8# x#_s2DV5 [Occ=Once] ->
                    case _l_s2DV2 of {
                      GHC.Word.W8# y#_s2DV7 [Occ=Once] ->
                          case minusWord# [x#_s2DV5 y#_s2DV7] of sat_s2DV8 {
                            __DEFAULT ->
                                case narrow8Word# [sat_s2DV8] of sat_s2DV9 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2DV9] of sat_s2DVa {
                                        __DEFAULT ->
                                            case +# [sat_s2DVa 1#] of sat_s2DVb {
                                              __DEFAULT -> GHC.Types.I# [sat_s2DVb];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord8_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Word.Word8, GHC.Word.Word8)
     -> GHC.Word.Word8 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2DVc eta1_s2DVd]
        case eta_s2DVc of {
          (,) m_s2DVf [Occ=Once!] n_s2DVg [Occ=Once!] ->
              case m_s2DVf of {
                GHC.Word.W8# x_s2DVi ->
                    case eta1_s2DVd of {
                      GHC.Word.W8# y_s2DVk ->
                          case leWord# [x_s2DVi y_s2DVk] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s2DVg of {
                                  GHC.Word.W8# y1_s2DVn [Occ=Once] ->
                                      case leWord# [y_s2DVk y1_s2DVn] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case minusWord# [y_s2DVk x_s2DVi] of sat_s2DVp {
                                              __DEFAULT ->
                                                  case narrow8Word# [sat_s2DVp] of sat_s2DVq {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s2DVq] of sat_s2DVr {
                                                          __DEFAULT -> GHC.Types.I# [sat_s2DVr];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord8 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Word.Word8
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Word.$fOrdWord8
                                 GHC.Word.$fIxWord8_$crange
                                 GHC.Word.$fIxWord8_$cindex
                                 GHC.Word.$fIxWord8_$cunsafeIndex
                                 GHC.Word.$fIxWord8_$cinRange
                                 GHC.Word.$fIxWord8_$crangeSize
                                 GHC.Word.$fIxWord8_$cunsafeRangeSize];

GHC.Word.eqWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DVs ds1_s2DVt]
        case ds_s2DVs of {
          GHC.Word.W16# x_s2DVv [Occ=Once] ->
              case ds1_s2DVt of {
                GHC.Word.W16# y_s2DVx [Occ=Once] ->
                    case eqWord# [x_s2DVv y_s2DVx] of sat_s2DVy {
                      __DEFAULT -> tagToEnum# [sat_s2DVy];
                    };
              };
        };

GHC.Word.$fEqWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Word.eqWord16
                                     GHC.Word.neWord16];

GHC.Word.$fNumWord1 :: GHC.Word.Word16
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W16#! [1##];

GHC.Word.$fNumWord16_$csignum :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DVz]
        case ds_s2DVz of {
          GHC.Word.W16# x_s2DVB [Occ=Once!] ->
              case x_s2DVB of {
                __DEFAULT -> GHC.Word.$fNumWord1;
                0## -> GHC.Word.$fBitsWord16_$cminBound;
              };
        };

GHC.Word.$fNumWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Word.$fNumWord16_$c+
                                  GHC.Word.$fNumWord16_$c-
                                  GHC.Word.$fNumWord16_$c*
                                  GHC.Word.$fNumWord16_$cnegate
                                  GHC.Word.$fNumWord16_$cabs
                                  GHC.Word.$fNumWord16_$csignum
                                  GHC.Word.$fNumWord16_$cfromInteger];

GHC.Word.$fBitsWord16_$ccomplement
  :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DVD]
        case ds_s2DVD of {
          GHC.Word.W16# x#_s2DVF [Occ=Once] ->
              case xor# [x#_s2DVF 65535##] of sat_s2DVG {
                __DEFAULT -> GHC.Word.W16# [sat_s2DVG];
              };
        };

GHC.Word.$fBitsWord2 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Word.$fBitsWord1];

GHC.Word.$fBitsWord16_$cbitSizeMaybe
  :: GHC.Word.Word16 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s2DVH] GHC.Word.$fBitsWord2;

GHC.Word.$fBitsWord16_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s2DVI]
        case i_s2DVI of {
          GHC.Types.I# i#_s2DVK ->
              case >=# [i#_s2DVK 64#] of {
                __DEFAULT ->
                    case uncheckedShiftL# [1## i#_s2DVK] of sat_s2DVM {
                      __DEFAULT ->
                          case narrow16Word# [sat_s2DVM] of sat_s2DVN {
                            __DEFAULT -> GHC.Word.W16# [sat_s2DVN];
                          };
                    };
                1# -> GHC.Word.$fBitsWord16_$cminBound;
              };
        };

GHC.Word.$fBitsWord16_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2DVO i_s2DVP]
        case x_s2DVO of {
          GHC.Word.W16# x#_s2DVR [Occ=Once] ->
              case i_s2DVP of {
                GHC.Types.I# i#_s2DVT ->
                    case >=# [i#_s2DVT 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2DVT] of sat_s2DVV {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2DVV] of sat_s2DVW {
                                  __DEFAULT ->
                                      case and# [x#_s2DVR sat_s2DVW] of {
                                        __DEFAULT -> GHC.Types.True [];
                                        0## -> GHC.Types.False [];
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Word.$fBitsWord16_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2DVY eta1_s2DVZ]
        case eta_s2DVY of wild_s2DW0 {
          GHC.Word.W16# x#_s2DW1 ->
              case eta1_s2DVZ of {
                GHC.Types.I# x1_s2DW3 [Occ=Once] ->
                    case negateInt# [x1_s2DW3] of sat_s2DW4 {
                      __DEFAULT ->
                          case int2Word# [sat_s2DW4] of sat_s2DW5 {
                            __DEFAULT ->
                                case and# [sat_s2DW5 15##] of sat_s2DW6 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2DW6] of wild2_s2DW7 {
                                        __DEFAULT ->
                                            case -# [16# wild2_s2DW7] of sat_s2DW9 {
                                              __DEFAULT ->
                                                  case
                                                      uncheckedShiftRL# [x#_s2DW1 sat_s2DW9]
                                                  of
                                                  sat_s2DWa
                                                  { __DEFAULT ->
                                                        case
                                                            uncheckedShiftL# [x#_s2DW1 wild2_s2DW7]
                                                        of
                                                        sat_s2DW8
                                                        { __DEFAULT ->
                                                              case
                                                                  or# [sat_s2DW8 sat_s2DWa]
                                                              of
                                                              sat_s2DWb
                                                              { __DEFAULT ->
                                                                    case
                                                                        narrow16Word# [sat_s2DWb]
                                                                    of
                                                                    sat_s2DWc
                                                                    { __DEFAULT ->
                                                                          GHC.Word.W16# [sat_s2DWc];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s2DW0;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord16_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Word.$fBitsWord16_$crotate eta_B2 eta_B1;

GHC.Word.$fBitsWord16_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2DWd eta1_s2DWe]
        case eta_s2DWd of wild_s2DWf {
          GHC.Word.W16# x#_s2DWg [Occ=Once] ->
              case eta1_s2DWe of {
                GHC.Types.I# i#_s2DWi ->
                    case >=# [i#_s2DWi 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2DWi] of sat_s2DWk {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2DWk] of sat_s2DWl {
                                  __DEFAULT ->
                                      case xor# [x#_s2DWg sat_s2DWl] of sat_s2DWm {
                                        __DEFAULT -> GHC.Word.W16# [sat_s2DWm];
                                      };
                                };
                          };
                      1# -> wild_s2DWf;
                    };
              };
        };

GHC.Word.$fBitsWord16_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2DWn eta1_s2DWo]
        case eta_s2DWn of {
          GHC.Word.W16# x#_s2DWq [Occ=Once*] ->
              case eta1_s2DWo of {
                GHC.Types.I# i#_s2DWs ->
                    case >=# [i#_s2DWs 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2DWs] of sat_s2DWu {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2DWu] of sat_s2DWv {
                                  __DEFAULT ->
                                      case xor# [sat_s2DWv 65535##] of sat_s2DWw {
                                        __DEFAULT ->
                                            case and# [x#_s2DWq sat_s2DWw] of sat_s2DWx {
                                              __DEFAULT -> GHC.Word.W16# [sat_s2DWx];
                                            };
                                      };
                                };
                          };
                      1# ->
                          case and# [x#_s2DWq 65535##] of sat_s2DWy {
                            __DEFAULT -> GHC.Word.W16# [sat_s2DWy];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord16_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Types.Int -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2DWz eta1_s2DWA]
        case eta_s2DWz of wild_s2DWB {
          GHC.Word.W16# x#_s2DWC [Occ=Once] ->
              case eta1_s2DWA of {
                GHC.Types.I# i#_s2DWE ->
                    case >=# [i#_s2DWE 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2DWE] of sat_s2DWG {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2DWG] of sat_s2DWH {
                                  __DEFAULT ->
                                      case or# [x#_s2DWC sat_s2DWH] of sat_s2DWI {
                                        __DEFAULT -> GHC.Word.W16# [sat_s2DWI];
                                      };
                                };
                          };
                      1# -> wild_s2DWB;
                    };
              };
        };

GHC.Word.$fBitsWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Word.$fEqWord16
                                     GHC.Word.$fBitsWord16_$c.&.
                                     GHC.Word.$fBitsWord16_$c.|.
                                     GHC.Word.$fBitsWord16_$cxor
                                     GHC.Word.$fBitsWord16_$ccomplement
                                     GHC.Word.$fBitsWord16_$cshift
                                     GHC.Word.$fBitsWord16_$crotate
                                     GHC.Word.$fBitsWord16_$cminBound
                                     GHC.Word.$fBitsWord16_$cbit
                                     GHC.Word.$fBitsWord16_$csetBit
                                     GHC.Word.$fBitsWord16_$cclearBit
                                     GHC.Word.$fBitsWord16_$ccomplementBit
                                     GHC.Word.$fBitsWord16_$ctestBit
                                     GHC.Word.$fBitsWord16_$cbitSizeMaybe
                                     GHC.Word.$fBitsWord16_$cfiniteBitSize
                                     GHC.Word.$fBitsWord16_$cisSigned
                                     GHC.Word.$fBitsWord16_$cshiftL
                                     GHC.Word.$fBitsWord16_$cunsafeShiftL
                                     GHC.Word.$fBitsWord16_$cshiftR
                                     GHC.Word.$fBitsWord16_$cunsafeShiftR
                                     GHC.Word.$fBitsWord16_$crotateL
                                     GHC.Word.$fBitsWord16_$crotateR
                                     GHC.Word.$fBitsWord16_$cpopCount];

GHC.Word.$fFiniteBitsWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Word.$fBitsWord16
                                           GHC.Word.$fBitsWord16_$cfiniteBitSize
                                           GHC.Word.$fFiniteBitsWord16_$ccountLeadingZeros
                                           GHC.Word.$fFiniteBitsWord16_$ccountTrailingZeros];

GHC.Word.$fIntegralWord16_$cquot
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DWJ y_s2DWK]
        case ds_s2DWJ of {
          GHC.Word.W16# x#_s2DWM [Occ=Once] ->
              case y_s2DWK of {
                GHC.Word.W16# y#_s2DWO [Occ=Once!] ->
                    case y#_s2DWO of wild2_s2DWP {
                      __DEFAULT ->
                          case quotWord# [x#_s2DWM wild2_s2DWP] of wild3_s2DWQ {
                            __DEFAULT -> GHC.Word.W16# [wild3_s2DWQ];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord16_$crem
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DWR y_s2DWS]
        case ds_s2DWR of {
          GHC.Word.W16# x#_s2DWU [Occ=Once] ->
              case y_s2DWS of {
                GHC.Word.W16# y#_s2DWW [Occ=Once!] ->
                    case y#_s2DWW of wild2_s2DWX {
                      __DEFAULT ->
                          case remWord# [x#_s2DWU wild2_s2DWX] of wild3_s2DWY {
                            __DEFAULT -> GHC.Word.W16# [wild3_s2DWY];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord16_$cquotRem
  :: GHC.Word.Word16
     -> GHC.Word.Word16 -> (GHC.Word.Word16, GHC.Word.Word16)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DWZ y_s2DX0]
        case ds_s2DWZ of {
          GHC.Word.W16# x#_s2DX2 [Occ=Once] ->
              case y_s2DX0 of {
                GHC.Word.W16# y#_s2DX4 [Occ=Once!] ->
                    case y#_s2DX4 of wild2_s2DX5 {
                      __DEFAULT ->
                          case quotRemWord# [x#_s2DX2 wild2_s2DX5] of {
                            (#,#) ipv_s2DX7 [Occ=Once] ipv1_s2DX8 [Occ=Once] ->
                                let {
                                  sat_s2DXa [Occ=Once] :: GHC.Word.Word16
                                  [LclId] =
                                      CCCS GHC.Word.W16#! [ipv1_s2DX8]; } in
                                let {
                                  sat_s2DX9 [Occ=Once] :: GHC.Word.Word16
                                  [LclId] =
                                      CCCS GHC.Word.W16#! [ipv_s2DX7];
                                } in  (,) [sat_s2DX9 sat_s2DXa];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord16_$cdivMod
  :: GHC.Word.Word16
     -> GHC.Word.Word16 -> (GHC.Word.Word16, GHC.Word.Word16)
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s2DXb y_s2DXc]
        case ds_s2DXb of {
          GHC.Word.W16# x#_s2DXe ->
              case y_s2DXc of {
                GHC.Word.W16# y#_s2DXg [Occ=Once!] ->
                    case y#_s2DXg of wild2_s2DXh {
                      __DEFAULT ->
                          let {
                            sat_s2DXl [Occ=Once] :: GHC.Word.Word16
                            [LclId] =
                                [x#_s2DXe wild2_s2DXh] \u []
                                    case remWord# [x#_s2DXe wild2_s2DXh] of wild3_s2DXk {
                                      __DEFAULT -> GHC.Word.W16# [wild3_s2DXk];
                                    }; } in
                          let {
                            sat_s2DXj [Occ=Once] :: GHC.Word.Word16
                            [LclId] =
                                [x#_s2DXe wild2_s2DXh] \u []
                                    case quotWord# [x#_s2DXe wild2_s2DXh] of wild3_s2DXi {
                                      __DEFAULT -> GHC.Word.W16# [wild3_s2DXi];
                                    };
                          } in  (,) [sat_s2DXj sat_s2DXl];
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.gtWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DXm ds1_s2DXn]
        case ds_s2DXm of {
          GHC.Word.W16# x_s2DXp [Occ=Once] ->
              case ds1_s2DXn of {
                GHC.Word.W16# y_s2DXr [Occ=Once] ->
                    case gtWord# [x_s2DXp y_s2DXr] of sat_s2DXs {
                      __DEFAULT -> tagToEnum# [sat_s2DXs];
                    };
              };
        };

GHC.Word.geWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DXt ds1_s2DXu]
        case ds_s2DXt of {
          GHC.Word.W16# x_s2DXw [Occ=Once] ->
              case ds1_s2DXu of {
                GHC.Word.W16# y_s2DXy [Occ=Once] ->
                    case geWord# [x_s2DXw y_s2DXy] of sat_s2DXz {
                      __DEFAULT -> tagToEnum# [sat_s2DXz];
                    };
              };
        };

GHC.Word.ltWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DXA ds1_s2DXB]
        case ds_s2DXA of {
          GHC.Word.W16# x_s2DXD [Occ=Once] ->
              case ds1_s2DXB of {
                GHC.Word.W16# y_s2DXF [Occ=Once] ->
                    case ltWord# [x_s2DXD y_s2DXF] of sat_s2DXG {
                      __DEFAULT -> tagToEnum# [sat_s2DXG];
                    };
              };
        };

GHC.Word.leWord16 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DXH ds1_s2DXI]
        case ds_s2DXH of {
          GHC.Word.W16# x_s2DXK [Occ=Once] ->
              case ds1_s2DXI of {
                GHC.Word.W16# y_s2DXM [Occ=Once] ->
                    case leWord# [x_s2DXK y_s2DXM] of sat_s2DXN {
                      __DEFAULT -> tagToEnum# [sat_s2DXN];
                    };
              };
        };

GHC.Word.$fOrdWord16_$ccompare
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2DXO y_s2DXP]
        case x_s2DXO of {
          GHC.Word.W16# x1_s2DXR ->
              case y_s2DXP of {
                GHC.Word.W16# y1_s2DXT ->
                    case eqWord# [x1_s2DXR y1_s2DXT] of {
                      __DEFAULT ->
                          case leWord# [x1_s2DXR y1_s2DXT] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Word.$fOrdWord16_$cmax
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2DXW y_s2DXX]
        case x_s2DXW of wild_s2DXY {
          GHC.Word.W16# x1_s2DXZ [Occ=Once] ->
              case y_s2DXX of wild1_s2DY0 {
                GHC.Word.W16# y1_s2DY1 [Occ=Once] ->
                    case leWord# [x1_s2DXZ y1_s2DY1] of {
                      __DEFAULT -> wild_s2DXY;
                      1# -> wild1_s2DY0;
                    };
              };
        };

GHC.Word.$fOrdWord16_$cmin
  :: GHC.Word.Word16 -> GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2DY3 y_s2DY4]
        case x_s2DY3 of wild_s2DY5 {
          GHC.Word.W16# x1_s2DY6 [Occ=Once] ->
              case y_s2DY4 of wild1_s2DY7 {
                GHC.Word.W16# y1_s2DY8 [Occ=Once] ->
                    case leWord# [x1_s2DY6 y1_s2DY8] of {
                      __DEFAULT -> wild1_s2DY7;
                      1# -> wild_s2DY5;
                    };
              };
        };

GHC.Word.$fOrdWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Word.Word16
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Word.$fEqWord16
                                      GHC.Word.$fOrdWord16_$ccompare
                                      GHC.Word.ltWord16
                                      GHC.Word.leWord16
                                      GHC.Word.gtWord16
                                      GHC.Word.geWord16
                                      GHC.Word.$fOrdWord16_$cmax
                                      GHC.Word.$fOrdWord16_$cmin];

GHC.Word.$fIxWord16_$cinRange
  :: (GHC.Word.Word16, GHC.Word.Word16)
     -> GHC.Word.Word16 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DYa i_s2DYb]
        case ds_s2DYa of {
          (,) m_s2DYd [Occ=Once!] n_s2DYe [Occ=Once!] ->
              case m_s2DYd of {
                GHC.Word.W16# x_s2DYg [Occ=Once] ->
                    case i_s2DYb of {
                      GHC.Word.W16# y_s2DYi ->
                          case leWord# [x_s2DYg y_s2DYi] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s2DYe of {
                                  GHC.Word.W16# y1_s2DYl [Occ=Once] ->
                                      case leWord# [y_s2DYi y1_s2DYl] of sat_s2DYm {
                                        __DEFAULT -> tagToEnum# [sat_s2DYm];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord16_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word16 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2DYn]
        case w_s2DYn of {
          GHC.Word.W16# ww1_s2DYp [Occ=Once] ->
              case word2Int# [ww1_s2DYp] of sat_s2DYq {
                __DEFAULT ->
                    case GHC.Integer.Type.smallInteger sat_s2DYq of sat_s2DYr {
                      __DEFAULT ->
                          case
                              GHC.Integer.Type.timesInteger sat_s2DYr GHC.Word.$fRealWord1
                          of
                          sat_s2DYs
                          { __DEFAULT ->
                                case GHC.Real.$w$sreduce sat_s2DYs GHC.Word.$fRealWord1 of {
                                  (#,#) ww3_s2DYu [Occ=Once] ww4_s2DYv [Occ=Once] ->
                                      GHC.Real.:% [ww3_s2DYu ww4_s2DYv];
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Word.$fNumWord16
                                    GHC.Word.$fOrdWord16
                                    GHC.Word.$fRealWord16_$ctoRational];

GHC.Word.$fIntegralWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Word.$fRealWord16
                                        GHC.Word.$fEnumWord16
                                        GHC.Word.$fIntegralWord16_$cquot
                                        GHC.Word.$fIntegralWord16_$crem
                                        GHC.Word.$fIntegralWord16_$cquot
                                        GHC.Word.$fIntegralWord16_$crem
                                        GHC.Word.$fIntegralWord16_$cquotRem
                                        GHC.Word.$fIntegralWord16_$cdivMod
                                        GHC.Word.$ctoInteger1];

GHC.Word.$fIxWord16_$cunsafeIndex
  :: (GHC.Word.Word16, GHC.Word.Word16)
     -> GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DYw i_s2DYx]
        case ds_s2DYw of {
          (,) m_s2DYz [Occ=Once!] _ [Occ=Dead] ->
              case i_s2DYx of {
                GHC.Word.W16# x#_s2DYC [Occ=Once] ->
                    case m_s2DYz of {
                      GHC.Word.W16# y#_s2DYE [Occ=Once] ->
                          case minusWord# [x#_s2DYC y#_s2DYE] of sat_s2DYF {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2DYF] of sat_s2DYG {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2DYG] of sat_s2DYH {
                                        __DEFAULT -> GHC.Types.I# [sat_s2DYH];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord16_$crange
  :: (GHC.Word.Word16, GHC.Word.Word16) -> [GHC.Word.Word16]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s2DYI]
        case ds_s2DYI of {
          (,) m_s2DYK [Occ=Once] n_s2DYL [Occ=Once] ->
              GHC.Word.$fEnumWord16_$cenumFromTo m_s2DYK n_s2DYL;
        };

GHC.Word.$fIxWord16_$crangeSize
  :: (GHC.Word.Word16, GHC.Word.Word16) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2DYM]
        case b_s2DYM of {
          (,) _l_s2DYO [Occ=Once!] h_s2DYP [Occ=Once!] ->
              case _l_s2DYO of {
                GHC.Word.W16# x_s2DYR ->
                    case h_s2DYP of {
                      GHC.Word.W16# y_s2DYT ->
                          case leWord# [x_s2DYR y_s2DYT] of {
                            __DEFAULT -> GHC.Word.$fIxWord1;
                            1# ->
                                case minusWord# [y_s2DYT x_s2DYR] of sat_s2DYV {
                                  __DEFAULT ->
                                      case narrow16Word# [sat_s2DYV] of sat_s2DYW {
                                        __DEFAULT ->
                                            case word2Int# [sat_s2DYW] of sat_s2DYX {
                                              __DEFAULT ->
                                                  case +# [sat_s2DYX 1#] of sat_s2DYY {
                                                    __DEFAULT -> GHC.Types.I# [sat_s2DYY];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord16_$cunsafeRangeSize
  :: (GHC.Word.Word16, GHC.Word.Word16) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2DYZ]
        case b_s2DYZ of {
          (,) _l_s2DZ1 [Occ=Once!] h_s2DZ2 [Occ=Once!] ->
              case h_s2DZ2 of {
                GHC.Word.W16# x#_s2DZ4 [Occ=Once] ->
                    case _l_s2DZ1 of {
                      GHC.Word.W16# y#_s2DZ6 [Occ=Once] ->
                          case minusWord# [x#_s2DZ4 y#_s2DZ6] of sat_s2DZ7 {
                            __DEFAULT ->
                                case narrow16Word# [sat_s2DZ7] of sat_s2DZ8 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2DZ8] of sat_s2DZ9 {
                                        __DEFAULT ->
                                            case +# [sat_s2DZ9 1#] of sat_s2DZa {
                                              __DEFAULT -> GHC.Types.I# [sat_s2DZa];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord16_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Word.Word16, GHC.Word.Word16)
     -> GHC.Word.Word16 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2DZb eta1_s2DZc]
        case eta_s2DZb of {
          (,) m_s2DZe [Occ=Once!] n_s2DZf [Occ=Once!] ->
              case m_s2DZe of {
                GHC.Word.W16# x_s2DZh ->
                    case eta1_s2DZc of {
                      GHC.Word.W16# y_s2DZj ->
                          case leWord# [x_s2DZh y_s2DZj] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s2DZf of {
                                  GHC.Word.W16# y1_s2DZm [Occ=Once] ->
                                      case leWord# [y_s2DZj y1_s2DZm] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case minusWord# [y_s2DZj x_s2DZh] of sat_s2DZo {
                                              __DEFAULT ->
                                                  case narrow16Word# [sat_s2DZo] of sat_s2DZp {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s2DZp] of sat_s2DZq {
                                                          __DEFAULT -> GHC.Types.I# [sat_s2DZq];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord16 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Word.Word16
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Word.$fOrdWord16
                                 GHC.Word.$fIxWord16_$crange
                                 GHC.Word.$fIxWord16_$cindex
                                 GHC.Word.$fIxWord16_$cunsafeIndex
                                 GHC.Word.$fIxWord16_$cinRange
                                 GHC.Word.$fIxWord16_$crangeSize
                                 GHC.Word.$fIxWord16_$cunsafeRangeSize];

GHC.Word.byteSwap16 :: GHC.Word.Word16 -> GHC.Word.Word16
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DZr]
        case ds_s2DZr of {
          GHC.Word.W16# w#_s2DZt [Occ=Once] ->
              case byteSwap16# [w#_s2DZt] of sat_s2DZu {
                __DEFAULT ->
                    case narrow16Word# [sat_s2DZu] of sat_s2DZv {
                      __DEFAULT -> GHC.Word.W16# [sat_s2DZv];
                    };
              };
        };

GHC.Word.eqWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2DZw ds1_s2DZx]
        case ds_s2DZw of {
          GHC.Word.W32# x_s2DZz [Occ=Once] ->
              case ds1_s2DZx of {
                GHC.Word.W32# y_s2DZB [Occ=Once] ->
                    case eqWord# [x_s2DZz y_s2DZB] of sat_s2DZC {
                      __DEFAULT -> tagToEnum# [sat_s2DZC];
                    };
              };
        };

GHC.Word.$fEqWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Word.eqWord32
                                     GHC.Word.neWord32];

GHC.Word.$fNumWord2 :: GHC.Word.Word32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Word.W32#! [1##];

GHC.Word.$fNumWord32_$csignum :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DZD]
        case ds_s2DZD of {
          GHC.Word.W32# x_s2DZF [Occ=Once!] ->
              case x_s2DZF of {
                __DEFAULT -> GHC.Word.$fNumWord2;
                0## -> GHC.Word.$fBitsWord32_$cminBound;
              };
        };

GHC.Word.$fNumWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Num.Num GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Num.C:Num! [GHC.Word.$fNumWord32_$c+
                                  GHC.Word.$fNumWord32_$c-
                                  GHC.Word.$fNumWord32_$c*
                                  GHC.Word.$fNumWord32_$cnegate
                                  GHC.Word.$fNumWord32_$cabs
                                  GHC.Word.$fNumWord32_$csignum
                                  GHC.Word.$fNumWord32_$cfromInteger];

GHC.Word.$fBitsWord32_$ccomplement
  :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2DZH]
        case ds_s2DZH of {
          GHC.Word.W32# x#_s2DZJ [Occ=Once] ->
              case xor# [x#_s2DZJ 4294967295##] of sat_s2DZK {
                __DEFAULT -> GHC.Word.W32# [sat_s2DZK];
              };
        };

GHC.Word.$fBitsWord4 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Word.$fBitsWord3];

GHC.Word.$fBitsWord32_$cbitSizeMaybe
  :: GHC.Word.Word32 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s2DZL] GHC.Word.$fBitsWord4;

GHC.Word.$fBitsWord32_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s2DZM]
        case i_s2DZM of {
          GHC.Types.I# i#_s2DZO ->
              case >=# [i#_s2DZO 64#] of {
                __DEFAULT ->
                    case uncheckedShiftL# [1## i#_s2DZO] of sat_s2DZQ {
                      __DEFAULT ->
                          case narrow32Word# [sat_s2DZQ] of sat_s2DZR {
                            __DEFAULT -> GHC.Word.W32# [sat_s2DZR];
                          };
                    };
                1# -> GHC.Word.$fBitsWord32_$cminBound;
              };
        };

GHC.Word.$fBitsWord32_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2DZS i_s2DZT]
        case x_s2DZS of {
          GHC.Word.W32# x#_s2DZV [Occ=Once] ->
              case i_s2DZT of {
                GHC.Types.I# i#_s2DZX ->
                    case >=# [i#_s2DZX 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2DZX] of sat_s2DZZ {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2DZZ] of sat_s2E00 {
                                  __DEFAULT ->
                                      case and# [x#_s2DZV sat_s2E00] of {
                                        __DEFAULT -> GHC.Types.True [];
                                        0## -> GHC.Types.False [];
                                      };
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Word.$fBitsWord32_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2E02 eta1_s2E03]
        case eta_s2E02 of wild_s2E04 {
          GHC.Word.W32# x#_s2E05 ->
              case eta1_s2E03 of {
                GHC.Types.I# x1_s2E07 [Occ=Once] ->
                    case negateInt# [x1_s2E07] of sat_s2E08 {
                      __DEFAULT ->
                          case int2Word# [sat_s2E08] of sat_s2E09 {
                            __DEFAULT ->
                                case and# [sat_s2E09 31##] of sat_s2E0a {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2E0a] of wild2_s2E0b {
                                        __DEFAULT ->
                                            case -# [32# wild2_s2E0b] of sat_s2E0d {
                                              __DEFAULT ->
                                                  case
                                                      uncheckedShiftRL# [x#_s2E05 sat_s2E0d]
                                                  of
                                                  sat_s2E0e
                                                  { __DEFAULT ->
                                                        case
                                                            uncheckedShiftL# [x#_s2E05 wild2_s2E0b]
                                                        of
                                                        sat_s2E0c
                                                        { __DEFAULT ->
                                                              case
                                                                  or# [sat_s2E0c sat_s2E0e]
                                                              of
                                                              sat_s2E0f
                                                              { __DEFAULT ->
                                                                    case
                                                                        narrow32Word# [sat_s2E0f]
                                                                    of
                                                                    sat_s2E0g
                                                                    { __DEFAULT ->
                                                                          GHC.Word.W32# [sat_s2E0g];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s2E04;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord32_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2E0h eta1_s2E0i]
        case eta_s2E0h of wild_s2E0j {
          GHC.Word.W32# x#_s2E0k [Occ=Once] ->
              case eta1_s2E0i of {
                GHC.Types.I# i#_s2E0m ->
                    case >=# [i#_s2E0m 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2E0m] of sat_s2E0o {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2E0o] of sat_s2E0p {
                                  __DEFAULT ->
                                      case xor# [x#_s2E0k sat_s2E0p] of sat_s2E0q {
                                        __DEFAULT -> GHC.Word.W32# [sat_s2E0q];
                                      };
                                };
                          };
                      1# -> wild_s2E0j;
                    };
              };
        };

GHC.Word.$fBitsWord32_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2E0r eta1_s2E0s]
        case eta_s2E0r of {
          GHC.Word.W32# x#_s2E0u [Occ=Once*] ->
              case eta1_s2E0s of {
                GHC.Types.I# i#_s2E0w ->
                    case >=# [i#_s2E0w 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2E0w] of sat_s2E0y {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2E0y] of sat_s2E0z {
                                  __DEFAULT ->
                                      case xor# [sat_s2E0z 4294967295##] of sat_s2E0A {
                                        __DEFAULT ->
                                            case and# [x#_s2E0u sat_s2E0A] of sat_s2E0B {
                                              __DEFAULT -> GHC.Word.W32# [sat_s2E0B];
                                            };
                                      };
                                };
                          };
                      1# ->
                          case and# [x#_s2E0u 4294967295##] of sat_s2E0C {
                            __DEFAULT -> GHC.Word.W32# [sat_s2E0C];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord32_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2E0D eta1_s2E0E]
        case eta_s2E0D of wild_s2E0F {
          GHC.Word.W32# x#_s2E0G [Occ=Once] ->
              case eta1_s2E0E of {
                GHC.Types.I# i#_s2E0I ->
                    case >=# [i#_s2E0I 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2E0I] of sat_s2E0K {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2E0K] of sat_s2E0L {
                                  __DEFAULT ->
                                      case or# [x#_s2E0G sat_s2E0L] of sat_s2E0M {
                                        __DEFAULT -> GHC.Word.W32# [sat_s2E0M];
                                      };
                                };
                          };
                      1# -> wild_s2E0F;
                    };
              };
        };

GHC.Word.$fBitsWord32_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Types.Int -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Word.$fBitsWord32_$crotate eta_B2 eta_B1;

GHC.Word.$fBitsWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Word.$fEqWord32
                                     GHC.Word.$fBitsWord32_$c.&.
                                     GHC.Word.$fBitsWord32_$c.|.
                                     GHC.Word.$fBitsWord32_$cxor
                                     GHC.Word.$fBitsWord32_$ccomplement
                                     GHC.Word.$fBitsWord32_$cshift
                                     GHC.Word.$fBitsWord32_$crotate
                                     GHC.Word.$fBitsWord32_$cminBound
                                     GHC.Word.$fBitsWord32_$cbit
                                     GHC.Word.$fBitsWord32_$csetBit
                                     GHC.Word.$fBitsWord32_$cclearBit
                                     GHC.Word.$fBitsWord32_$ccomplementBit
                                     GHC.Word.$fBitsWord32_$ctestBit
                                     GHC.Word.$fBitsWord32_$cbitSizeMaybe
                                     GHC.Word.$fBitsWord32_$cfiniteBitSize
                                     GHC.Word.$fBitsWord32_$cisSigned
                                     GHC.Word.$fBitsWord32_$cshiftL
                                     GHC.Word.$fBitsWord32_$cunsafeShiftL
                                     GHC.Word.$fBitsWord32_$cshiftR
                                     GHC.Word.$fBitsWord32_$cunsafeShiftR
                                     GHC.Word.$fBitsWord32_$crotateL
                                     GHC.Word.$fBitsWord32_$crotateR
                                     GHC.Word.$fBitsWord32_$cpopCount];

GHC.Word.$fFiniteBitsWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Word.$fBitsWord32
                                           GHC.Word.$fBitsWord32_$cfiniteBitSize
                                           GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros
                                           GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros];

GHC.Word.$fIntegralWord32_$cquot
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2E0N y_s2E0O]
        case ds_s2E0N of {
          GHC.Word.W32# x#_s2E0Q [Occ=Once] ->
              case y_s2E0O of {
                GHC.Word.W32# y#_s2E0S [Occ=Once!] ->
                    case y#_s2E0S of wild2_s2E0T {
                      __DEFAULT ->
                          case quotWord# [x#_s2E0Q wild2_s2E0T] of wild3_s2E0U {
                            __DEFAULT -> GHC.Word.W32# [wild3_s2E0U];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord32_$crem
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2E0V y_s2E0W]
        case ds_s2E0V of {
          GHC.Word.W32# x#_s2E0Y [Occ=Once] ->
              case y_s2E0W of {
                GHC.Word.W32# y#_s2E10 [Occ=Once!] ->
                    case y#_s2E10 of wild2_s2E11 {
                      __DEFAULT ->
                          case remWord# [x#_s2E0Y wild2_s2E11] of wild3_s2E12 {
                            __DEFAULT -> GHC.Word.W32# [wild3_s2E12];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord32_$cquotRem
  :: GHC.Word.Word32
     -> GHC.Word.Word32 -> (GHC.Word.Word32, GHC.Word.Word32)
[GblId,
 Arity=2,
 Str=<S(S),1*U(U)><S(S),1*U(1*U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2E13 y_s2E14]
        case ds_s2E13 of {
          GHC.Word.W32# x#_s2E16 [Occ=Once] ->
              case y_s2E14 of {
                GHC.Word.W32# y#_s2E18 [Occ=Once!] ->
                    case y#_s2E18 of wild2_s2E19 {
                      __DEFAULT ->
                          case quotRemWord# [x#_s2E16 wild2_s2E19] of {
                            (#,#) ipv_s2E1b [Occ=Once] ipv1_s2E1c [Occ=Once] ->
                                let {
                                  sat_s2E1e [Occ=Once] :: GHC.Word.Word32
                                  [LclId] =
                                      CCCS GHC.Word.W32#! [ipv1_s2E1c]; } in
                                let {
                                  sat_s2E1d [Occ=Once] :: GHC.Word.Word32
                                  [LclId] =
                                      CCCS GHC.Word.W32#! [ipv_s2E1b];
                                } in  (,) [sat_s2E1d sat_s2E1e];
                          };
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.$fIntegralWord32_$cdivMod
  :: GHC.Word.Word32
     -> GHC.Word.Word32 -> (GHC.Word.Word32, GHC.Word.Word32)
[GblId, Arity=2, Str=<S,1*U(U)><S(S),1*U(1*U)>m, Unf=OtherCon []] =
    [] \r [ds_s2E1f y_s2E1g]
        case ds_s2E1f of {
          GHC.Word.W32# x#_s2E1i ->
              case y_s2E1g of {
                GHC.Word.W32# y#_s2E1k [Occ=Once!] ->
                    case y#_s2E1k of wild2_s2E1l {
                      __DEFAULT ->
                          let {
                            sat_s2E1p [Occ=Once] :: GHC.Word.Word32
                            [LclId] =
                                [x#_s2E1i wild2_s2E1l] \u []
                                    case remWord# [x#_s2E1i wild2_s2E1l] of wild3_s2E1o {
                                      __DEFAULT -> GHC.Word.W32# [wild3_s2E1o];
                                    }; } in
                          let {
                            sat_s2E1n [Occ=Once] :: GHC.Word.Word32
                            [LclId] =
                                [x#_s2E1i wild2_s2E1l] \u []
                                    case quotWord# [x#_s2E1i wild2_s2E1l] of wild3_s2E1m {
                                      __DEFAULT -> GHC.Word.W32# [wild3_s2E1m];
                                    };
                          } in  (,) [sat_s2E1n sat_s2E1p];
                      0## -> GHC.Real.divZeroError;
                    };
              };
        };

GHC.Word.gtWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2E1q ds1_s2E1r]
        case ds_s2E1q of {
          GHC.Word.W32# x_s2E1t [Occ=Once] ->
              case ds1_s2E1r of {
                GHC.Word.W32# y_s2E1v [Occ=Once] ->
                    case gtWord# [x_s2E1t y_s2E1v] of sat_s2E1w {
                      __DEFAULT -> tagToEnum# [sat_s2E1w];
                    };
              };
        };

GHC.Word.geWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2E1x ds1_s2E1y]
        case ds_s2E1x of {
          GHC.Word.W32# x_s2E1A [Occ=Once] ->
              case ds1_s2E1y of {
                GHC.Word.W32# y_s2E1C [Occ=Once] ->
                    case geWord# [x_s2E1A y_s2E1C] of sat_s2E1D {
                      __DEFAULT -> tagToEnum# [sat_s2E1D];
                    };
              };
        };

GHC.Word.ltWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2E1E ds1_s2E1F]
        case ds_s2E1E of {
          GHC.Word.W32# x_s2E1H [Occ=Once] ->
              case ds1_s2E1F of {
                GHC.Word.W32# y_s2E1J [Occ=Once] ->
                    case ltWord# [x_s2E1H y_s2E1J] of sat_s2E1K {
                      __DEFAULT -> tagToEnum# [sat_s2E1K];
                    };
              };
        };

GHC.Word.leWord32 [InlPrag=INLINE[1] (sat-args=2)]
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2E1L ds1_s2E1M]
        case ds_s2E1L of {
          GHC.Word.W32# x_s2E1O [Occ=Once] ->
              case ds1_s2E1M of {
                GHC.Word.W32# y_s2E1Q [Occ=Once] ->
                    case leWord# [x_s2E1O y_s2E1Q] of sat_s2E1R {
                      __DEFAULT -> tagToEnum# [sat_s2E1R];
                    };
              };
        };

GHC.Word.$fOrdWord32_$ccompare
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2E1S y_s2E1T]
        case x_s2E1S of {
          GHC.Word.W32# x1_s2E1V ->
              case y_s2E1T of {
                GHC.Word.W32# y1_s2E1X ->
                    case eqWord# [x1_s2E1V y1_s2E1X] of {
                      __DEFAULT ->
                          case leWord# [x1_s2E1V y1_s2E1X] of {
                            __DEFAULT -> GHC.Types.GT [];
                            1# -> GHC.Types.LT [];
                          };
                      1# -> GHC.Types.EQ [];
                    };
              };
        };

GHC.Word.$fOrdWord32_$cmax
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2E20 y_s2E21]
        case x_s2E20 of wild_s2E22 {
          GHC.Word.W32# x1_s2E23 [Occ=Once] ->
              case y_s2E21 of wild1_s2E24 {
                GHC.Word.W32# y1_s2E25 [Occ=Once] ->
                    case leWord# [x1_s2E23 y1_s2E25] of {
                      __DEFAULT -> wild_s2E22;
                      1# -> wild1_s2E24;
                    };
              };
        };

GHC.Word.$fOrdWord32_$cmin
  :: GHC.Word.Word32 -> GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [x_s2E27 y_s2E28]
        case x_s2E27 of wild_s2E29 {
          GHC.Word.W32# x1_s2E2a [Occ=Once] ->
              case y_s2E28 of wild1_s2E2b {
                GHC.Word.W32# y1_s2E2c [Occ=Once] ->
                    case leWord# [x1_s2E2a y1_s2E2c] of {
                      __DEFAULT -> wild1_s2E2b;
                      1# -> wild_s2E29;
                    };
              };
        };

GHC.Word.$fOrdWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Word.Word32
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Word.$fEqWord32
                                      GHC.Word.$fOrdWord32_$ccompare
                                      GHC.Word.ltWord32
                                      GHC.Word.leWord32
                                      GHC.Word.gtWord32
                                      GHC.Word.geWord32
                                      GHC.Word.$fOrdWord32_$cmax
                                      GHC.Word.$fOrdWord32_$cmin];

GHC.Word.$fIxWord32_$cinRange
  :: (GHC.Word.Word32, GHC.Word.Word32)
     -> GHC.Word.Word32 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2E2e i_s2E2f]
        case ds_s2E2e of {
          (,) m_s2E2h [Occ=Once!] n_s2E2i [Occ=Once!] ->
              case m_s2E2h of {
                GHC.Word.W32# x_s2E2k [Occ=Once] ->
                    case i_s2E2f of {
                      GHC.Word.W32# y_s2E2m ->
                          case leWord# [x_s2E2k y_s2E2m] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s2E2i of {
                                  GHC.Word.W32# y1_s2E2p [Occ=Once] ->
                                      case leWord# [y_s2E2m y1_s2E2p] of sat_s2E2q {
                                        __DEFAULT -> tagToEnum# [sat_s2E2q];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord32_$ctoRational [InlPrag=NOUSERINLINE[0]]
  :: GHC.Word.Word32 -> GHC.Real.Rational
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_s2E2r]
        case w_s2E2r of {
          GHC.Word.W32# ww1_s2E2t [Occ=Once] ->
              case word2Int# [ww1_s2E2t] of sat_s2E2u {
                __DEFAULT ->
                    case GHC.Integer.Type.smallInteger sat_s2E2u of sat_s2E2v {
                      __DEFAULT ->
                          case
                              GHC.Integer.Type.timesInteger sat_s2E2v GHC.Word.$fRealWord1
                          of
                          sat_s2E2w
                          { __DEFAULT ->
                                case GHC.Real.$w$sreduce sat_s2E2w GHC.Word.$fRealWord1 of {
                                  (#,#) ww3_s2E2y [Occ=Once] ww4_s2E2z [Occ=Once] ->
                                      GHC.Real.:% [ww3_s2E2y ww4_s2E2z];
                                };
                          };
                    };
              };
        };

GHC.Word.$fRealWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Real GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Real! [GHC.Word.$fNumWord32
                                    GHC.Word.$fOrdWord32
                                    GHC.Word.$fRealWord32_$ctoRational];

GHC.Word.$fIntegralWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Real.Integral GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Real.C:Integral! [GHC.Word.$fRealWord32
                                        GHC.Word.$fEnumWord32
                                        GHC.Word.$fIntegralWord32_$cquot
                                        GHC.Word.$fIntegralWord32_$crem
                                        GHC.Word.$fIntegralWord32_$cquot
                                        GHC.Word.$fIntegralWord32_$crem
                                        GHC.Word.$fIntegralWord32_$cquotRem
                                        GHC.Word.$fIntegralWord32_$cdivMod
                                        GHC.Word.$ctoInteger2];

GHC.Word.$fIxWord32_$cunsafeIndex
  :: (GHC.Word.Word32, GHC.Word.Word32)
     -> GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2E2A i_s2E2B]
        case ds_s2E2A of {
          (,) m_s2E2D [Occ=Once!] _ [Occ=Dead] ->
              case i_s2E2B of {
                GHC.Word.W32# x#_s2E2G [Occ=Once] ->
                    case m_s2E2D of {
                      GHC.Word.W32# y#_s2E2I [Occ=Once] ->
                          case minusWord# [x#_s2E2G y#_s2E2I] of sat_s2E2J {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2E2J] of sat_s2E2K {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2E2K] of sat_s2E2L {
                                        __DEFAULT -> GHC.Types.I# [sat_s2E2L];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord32_$crange
  :: (GHC.Word.Word32, GHC.Word.Word32) -> [GHC.Word.Word32]
[GblId,
 Arity=1,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [ds_s2E2M]
        case ds_s2E2M of {
          (,) m_s2E2O [Occ=Once] n_s2E2P [Occ=Once] ->
              GHC.Word.$fEnumWord32_$cenumFromTo m_s2E2O n_s2E2P;
        };

GHC.Word.$fIxWord32_$crangeSize
  :: (GHC.Word.Word32, GHC.Word.Word32) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2E2Q]
        case b_s2E2Q of {
          (,) _l_s2E2S [Occ=Once!] h_s2E2T [Occ=Once!] ->
              case _l_s2E2S of {
                GHC.Word.W32# x_s2E2V ->
                    case h_s2E2T of {
                      GHC.Word.W32# y_s2E2X ->
                          case leWord# [x_s2E2V y_s2E2X] of {
                            __DEFAULT -> GHC.Word.$fIxWord1;
                            1# ->
                                case minusWord# [y_s2E2X x_s2E2V] of sat_s2E2Z {
                                  __DEFAULT ->
                                      case narrow32Word# [sat_s2E2Z] of sat_s2E30 {
                                        __DEFAULT ->
                                            case word2Int# [sat_s2E30] of sat_s2E31 {
                                              __DEFAULT ->
                                                  case +# [sat_s2E31 1#] of sat_s2E32 {
                                                    __DEFAULT -> GHC.Types.I# [sat_s2E32];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord32_$cunsafeRangeSize
  :: (GHC.Word.Word32, GHC.Word.Word32) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2E33]
        case b_s2E33 of {
          (,) _l_s2E35 [Occ=Once!] h_s2E36 [Occ=Once!] ->
              case h_s2E36 of {
                GHC.Word.W32# x#_s2E38 [Occ=Once] ->
                    case _l_s2E35 of {
                      GHC.Word.W32# y#_s2E3a [Occ=Once] ->
                          case minusWord# [x#_s2E38 y#_s2E3a] of sat_s2E3b {
                            __DEFAULT ->
                                case narrow32Word# [sat_s2E3b] of sat_s2E3c {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2E3c] of sat_s2E3d {
                                        __DEFAULT ->
                                            case +# [sat_s2E3d 1#] of sat_s2E3e {
                                              __DEFAULT -> GHC.Types.I# [sat_s2E3e];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord32_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Word.Word32, GHC.Word.Word32)
     -> GHC.Word.Word32 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2E3f eta1_s2E3g]
        case eta_s2E3f of {
          (,) m_s2E3i [Occ=Once!] n_s2E3j [Occ=Once!] ->
              case m_s2E3i of {
                GHC.Word.W32# x_s2E3l ->
                    case eta1_s2E3g of {
                      GHC.Word.W32# y_s2E3n ->
                          case leWord# [x_s2E3l y_s2E3n] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s2E3j of {
                                  GHC.Word.W32# y1_s2E3q [Occ=Once] ->
                                      case leWord# [y_s2E3n y1_s2E3q] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case minusWord# [y_s2E3n x_s2E3l] of sat_s2E3s {
                                              __DEFAULT ->
                                                  case narrow32Word# [sat_s2E3s] of sat_s2E3t {
                                                    __DEFAULT ->
                                                        case word2Int# [sat_s2E3t] of sat_s2E3u {
                                                          __DEFAULT -> GHC.Types.I# [sat_s2E3u];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord32 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Word.Word32
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Word.$fOrdWord32
                                 GHC.Word.$fIxWord32_$crange
                                 GHC.Word.$fIxWord32_$cindex
                                 GHC.Word.$fIxWord32_$cunsafeIndex
                                 GHC.Word.$fIxWord32_$cinRange
                                 GHC.Word.$fIxWord32_$crangeSize
                                 GHC.Word.$fIxWord32_$cunsafeRangeSize];

GHC.Word.byteSwap32 :: GHC.Word.Word32 -> GHC.Word.Word32
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2E3v]
        case ds_s2E3v of {
          GHC.Word.W32# w#_s2E3x [Occ=Once] ->
              case byteSwap32# [w#_s2E3x] of sat_s2E3y {
                __DEFAULT ->
                    case narrow32Word# [sat_s2E3y] of sat_s2E3z {
                      __DEFAULT -> GHC.Word.W32# [sat_s2E3z];
                    };
              };
        };

GHC.Word.$fBitsWord64_$ccomplement
  :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2E3A]
        case ds_s2E3A of {
          GHC.Word.W64# x#_s2E3C [Occ=Once] ->
              case xor# [x#_s2E3C 18446744073709551615##] of sat_s2E3D {
                __DEFAULT -> GHC.Word.W64# [sat_s2E3D];
              };
        };

GHC.Word.$fBitsWord6 :: GHC.Base.Maybe GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Base.Just! [GHC.Word.$fBitsWord5];

GHC.Word.$fBitsWord64_$cbitSizeMaybe
  :: GHC.Word.Word64 -> GHC.Base.Maybe GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>m2, Unf=OtherCon []] =
    [] \r [i_s2E3E] GHC.Word.$fBitsWord6;

GHC.Word.$fBitsWord64_$cbit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [i_s2E3F]
        case i_s2E3F of {
          GHC.Types.I# i#_s2E3H ->
              case >=# [i#_s2E3H 64#] of {
                __DEFAULT ->
                    case uncheckedShiftL# [1## i#_s2E3H] of sat_s2E3J {
                      __DEFAULT -> GHC.Word.W64# [sat_s2E3J];
                    };
                1# -> GHC.Word.$fBitsWord7;
              };
        };

GHC.Word.$fBitsWord64_$ctestBit [InlPrag=INLINE (sat-args=0)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [x_s2E3K i_s2E3L]
        case x_s2E3K of {
          GHC.Word.W64# x#_s2E3N [Occ=Once] ->
              case i_s2E3L of {
                GHC.Types.I# i#_s2E3P ->
                    case >=# [i#_s2E3P 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2E3P] of sat_s2E3R {
                            __DEFAULT ->
                                case and# [x#_s2E3N sat_s2E3R] of {
                                  __DEFAULT -> GHC.Types.True [];
                                  0## -> GHC.Types.False [];
                                };
                          };
                      1# -> GHC.Types.False [];
                    };
              };
        };

GHC.Word.$fBitsWord64_$crotateR [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2E3T eta1_s2E3U]
        case eta_s2E3T of wild_s2E3V {
          GHC.Word.W64# x#_s2E3W ->
              case eta1_s2E3U of {
                GHC.Types.I# x1_s2E3Y [Occ=Once] ->
                    case negateInt# [x1_s2E3Y] of sat_s2E3Z {
                      __DEFAULT ->
                          case int2Word# [sat_s2E3Z] of sat_s2E40 {
                            __DEFAULT ->
                                case and# [sat_s2E40 63##] of sat_s2E41 {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2E41] of wild2_s2E42 {
                                        __DEFAULT ->
                                            case -# [64# wild2_s2E42] of sat_s2E44 {
                                              __DEFAULT ->
                                                  case
                                                      uncheckedShiftRL# [x#_s2E3W sat_s2E44]
                                                  of
                                                  sat_s2E45
                                                  { __DEFAULT ->
                                                        case
                                                            uncheckedShiftL# [x#_s2E3W wild2_s2E42]
                                                        of
                                                        sat_s2E43
                                                        { __DEFAULT ->
                                                              case
                                                                  or# [sat_s2E43 sat_s2E45]
                                                              of
                                                              sat_s2E46
                                                              { __DEFAULT ->
                                                                    GHC.Word.W64# [sat_s2E46];
                                                              };
                                                        };
                                                  };
                                            };
                                        0# -> wild_s2E3V;
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fBitsWord64_$ccomplementBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2E47 eta1_s2E48]
        case eta_s2E47 of wild_s2E49 {
          GHC.Word.W64# x#_s2E4a [Occ=Once] ->
              case eta1_s2E48 of {
                GHC.Types.I# i#_s2E4c ->
                    case >=# [i#_s2E4c 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2E4c] of sat_s2E4e {
                            __DEFAULT ->
                                case xor# [x#_s2E4a sat_s2E4e] of sat_s2E4f {
                                  __DEFAULT -> GHC.Word.W64# [sat_s2E4f];
                                };
                          };
                      1# -> wild_s2E49;
                    };
              };
        };

GHC.Word.$fBitsWord64_$cclearBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2E4g eta1_s2E4h]
        case eta_s2E4g of {
          GHC.Word.W64# x#_s2E4j [Occ=Once*] ->
              case eta1_s2E4h of {
                GHC.Types.I# i#_s2E4l ->
                    case >=# [i#_s2E4l 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2E4l] of sat_s2E4n {
                            __DEFAULT ->
                                case xor# [sat_s2E4n 18446744073709551615##] of sat_s2E4o {
                                  __DEFAULT ->
                                      case and# [x#_s2E4j sat_s2E4o] of sat_s2E4p {
                                        __DEFAULT -> GHC.Word.W64# [sat_s2E4p];
                                      };
                                };
                          };
                      1# ->
                          case and# [x#_s2E4j 18446744073709551615##] of sat_s2E4q {
                            __DEFAULT -> GHC.Word.W64# [sat_s2E4q];
                          };
                    };
              };
        };

GHC.Word.$fBitsWord64_$csetBit [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2E4r eta1_s2E4s]
        case eta_s2E4r of wild_s2E4t {
          GHC.Word.W64# x#_s2E4u [Occ=Once] ->
              case eta1_s2E4s of {
                GHC.Types.I# i#_s2E4w ->
                    case >=# [i#_s2E4w 64#] of {
                      __DEFAULT ->
                          case uncheckedShiftL# [1## i#_s2E4w] of sat_s2E4y {
                            __DEFAULT ->
                                case or# [x#_s2E4u sat_s2E4y] of sat_s2E4z {
                                  __DEFAULT -> GHC.Word.W64# [sat_s2E4z];
                                };
                          };
                      1# -> wild_s2E4t;
                    };
              };
        };

GHC.Word.$fBitsWord64_$crotateL [InlPrag=INLINE (sat-args=2)]
  :: GHC.Word.Word64 -> GHC.Types.Int -> GHC.Word.Word64
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U(U)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Word.$fBitsWord64_$crotate eta_B2 eta_B1;

GHC.Word.$fBitsWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.Bits GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs] =
    CCS_DONT_CARE Data.Bits.C:Bits! [GHC.Word.$fEqWord64
                                     GHC.Word.$fBitsWord64_$c.&.
                                     GHC.Word.$fBitsWord64_$c.|.
                                     GHC.Word.$fBitsWord64_$cxor
                                     GHC.Word.$fBitsWord64_$ccomplement
                                     GHC.Word.$fBitsWord64_$cshift
                                     GHC.Word.$fBitsWord64_$crotate
                                     GHC.Word.$fBitsWord7
                                     GHC.Word.$fBitsWord64_$cbit
                                     GHC.Word.$fBitsWord64_$csetBit
                                     GHC.Word.$fBitsWord64_$cclearBit
                                     GHC.Word.$fBitsWord64_$ccomplementBit
                                     GHC.Word.$fBitsWord64_$ctestBit
                                     GHC.Word.$fBitsWord64_$cbitSizeMaybe
                                     GHC.Word.$fBitsWord64_$cfiniteBitSize
                                     GHC.Word.$fBitsWord64_$cisSigned
                                     GHC.Word.$fBitsWord64_$cshiftL
                                     GHC.Word.$fBitsWord64_$cunsafeShiftL
                                     GHC.Word.$fBitsWord64_$cshiftR
                                     GHC.Word.$fBitsWord64_$cunsafeShiftR
                                     GHC.Word.$fBitsWord64_$crotateL
                                     GHC.Word.$fBitsWord64_$crotateR
                                     GHC.Word.$fBitsWord64_$cpopCount];

GHC.Word.$fFiniteBitsWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: Data.Bits.FiniteBits GHC.Word.Word64
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE Data.Bits.C:FiniteBits! [GHC.Word.$fBitsWord64
                                           GHC.Word.$fBitsWord64_$cfiniteBitSize
                                           GHC.Word.$fFiniteBitsWord64_$ccountLeadingZeros
                                           GHC.Word.$fFiniteBitsWord64_$ccountTrailingZeros];

GHC.Word.$fIxWord64_$cinRange
  :: (GHC.Word.Word64, GHC.Word.Word64)
     -> GHC.Word.Word64 -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s2E4A i_s2E4B]
        case ds_s2E4A of {
          (,) m_s2E4D [Occ=Once!] n_s2E4E [Occ=Once!] ->
              case m_s2E4D of {
                GHC.Word.W64# x_s2E4G [Occ=Once] ->
                    case i_s2E4B of {
                      GHC.Word.W64# y_s2E4I ->
                          case leWord# [x_s2E4G y_s2E4I] of {
                            __DEFAULT -> GHC.Types.False [];
                            1# ->
                                case n_s2E4E of {
                                  GHC.Word.W64# y1_s2E4L [Occ=Once] ->
                                      case leWord# [y_s2E4I y1_s2E4L] of sat_s2E4M {
                                        __DEFAULT -> tagToEnum# [sat_s2E4M];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord64_$crange
  :: (GHC.Word.Word64, GHC.Word.Word64) -> [GHC.Word.Word64]
[GblId, Arity=1, Str=<S,1*U(U,U)>, Unf=OtherCon []] =
    [] \r [ds_s2E4N]
        case ds_s2E4N of {
          (,) m_s2E4P [Occ=Once] n_s2E4Q [Occ=Once] ->
              GHC.Word.$fEnumWord64_$cenumFromTo m_s2E4P n_s2E4Q;
        };

GHC.Word.$fIxWord64_$cunsafeIndex
  :: (GHC.Word.Word64, GHC.Word.Word64)
     -> GHC.Word.Word64 -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S(S)L),1*U(1*U(U),A)><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2E4R i_s2E4S]
        case ds_s2E4R of {
          (,) m_s2E4U [Occ=Once!] _ [Occ=Dead] ->
              case i_s2E4S of {
                GHC.Word.W64# x#_s2E4X [Occ=Once] ->
                    case m_s2E4U of {
                      GHC.Word.W64# y#_s2E4Z [Occ=Once] ->
                          case minusWord# [x#_s2E4X y#_s2E4Z] of sat_s2E50 {
                            __DEFAULT ->
                                case word2Int# [sat_s2E50] of sat_s2E51 {
                                  __DEFAULT -> GHC.Types.I# [sat_s2E51];
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord64_$crangeSize
  :: (GHC.Word.Word64, GHC.Word.Word64) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2E52]
        case b_s2E52 of {
          (,) _l_s2E54 [Occ=Once!] h_s2E55 [Occ=Once!] ->
              case _l_s2E54 of {
                GHC.Word.W64# x_s2E57 ->
                    case h_s2E55 of {
                      GHC.Word.W64# y_s2E59 ->
                          case leWord# [x_s2E57 y_s2E59] of {
                            __DEFAULT -> GHC.Word.$fIxWord1;
                            1# ->
                                case minusWord# [y_s2E59 x_s2E57] of sat_s2E5b {
                                  __DEFAULT ->
                                      case word2Int# [sat_s2E5b] of sat_s2E5c {
                                        __DEFAULT ->
                                            case +# [sat_s2E5c 1#] of sat_s2E5d {
                                              __DEFAULT -> GHC.Types.I# [sat_s2E5d];
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord64_$cunsafeRangeSize
  :: (GHC.Word.Word64, GHC.Word.Word64) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
 Unf=OtherCon []] =
    [] \r [b_s2E5e]
        case b_s2E5e of {
          (,) _l_s2E5g [Occ=Once!] h_s2E5h [Occ=Once!] ->
              case h_s2E5h of {
                GHC.Word.W64# x#_s2E5j [Occ=Once] ->
                    case _l_s2E5g of {
                      GHC.Word.W64# y#_s2E5l [Occ=Once] ->
                          case minusWord# [x#_s2E5j y#_s2E5l] of sat_s2E5m {
                            __DEFAULT ->
                                case word2Int# [sat_s2E5m] of sat_s2E5n {
                                  __DEFAULT ->
                                      case +# [sat_s2E5n 1#] of sat_s2E5o {
                                        __DEFAULT -> GHC.Types.I# [sat_s2E5o];
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord64_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.Word.Word64, GHC.Word.Word64)
     -> GHC.Word.Word64 -> GHC.Types.Int
[GblId,
 Arity=2,
 Str=<S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [eta_s2E5p eta1_s2E5q]
        case eta_s2E5p of {
          (,) m_s2E5s [Occ=Once!] n_s2E5t [Occ=Once!] ->
              case m_s2E5s of {
                GHC.Word.W64# x_s2E5v ->
                    case eta1_s2E5q of {
                      GHC.Word.W64# y_s2E5x ->
                          case leWord# [x_s2E5v y_s2E5x] of {
                            __DEFAULT -> GHC.Arr.hopelessIndexError;
                            1# ->
                                case n_s2E5t of {
                                  GHC.Word.W64# y1_s2E5A [Occ=Once] ->
                                      case leWord# [y_s2E5x y1_s2E5A] of {
                                        __DEFAULT -> GHC.Arr.hopelessIndexError;
                                        1# ->
                                            case minusWord# [y_s2E5x x_s2E5v] of sat_s2E5C {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s2E5C] of sat_s2E5D {
                                                    __DEFAULT -> GHC.Types.I# [sat_s2E5D];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Word.$fIxWord64 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.Word.Word64
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.Word.$fOrdWord64
                                 GHC.Word.$fIxWord64_$crange
                                 GHC.Word.$fIxWord64_$cindex
                                 GHC.Word.$fIxWord64_$cunsafeIndex
                                 GHC.Word.$fIxWord64_$cinRange
                                 GHC.Word.$fIxWord64_$crangeSize
                                 GHC.Word.$fIxWord64_$cunsafeRangeSize];

GHC.Word.uncheckedShiftL64#
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedShiftL# [eta_B2 eta_B1];

GHC.Word.uncheckedShiftRL64#
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedShiftRL# [eta_B2 eta_B1];

GHC.Word.byteSwap64 :: GHC.Word.Word64 -> GHC.Word.Word64
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s2E5E]
        case ds_s2E5E of {
          GHC.Word.W64# w#_s2E5G [Occ=Once] ->
              case byteSwap# [w#_s2E5G] of sat_s2E5H {
                __DEFAULT -> GHC.Word.W64# [sat_s2E5H];
              };
        };

GHC.Word.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Word.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$trModule4];

GHC.Word.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Word"#;

GHC.Word.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$trModule2];

GHC.Word.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Word.$trModule3
                                     GHC.Word.$trModule1];

$krep_r2uFN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWord#
                                              GHC.Types.[]];

GHC.Word.$tcWord7 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tcWord9];

GHC.Word.$tcWord8 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2052113150978616866##
                                    10393726928463219846##
                                    GHC.Word.$trModule
                                    GHC.Word.$tcWord7
                                    0#
                                    GHC.Types.krep$*];

$krep1_r2uFO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord8
                                              GHC.Types.[]];

GHC.Word.$tc'W8#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r2uFN $krep1_r2uFO];

GHC.Word.$tc'W8#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'W8#"#;

GHC.Word.$tc'W8#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tc'W8#3];

GHC.Word.$tc'W8# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12964227823649101302##
                                    11115249754126507208##
                                    GHC.Word.$trModule
                                    GHC.Word.$tc'W8#2
                                    0#
                                    GHC.Word.$tc'W8#1];

GHC.Word.$tcWord1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tcWord2];

GHC.Word.$tcWord16 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1884349046328127494##
                                    12602100146125136909##
                                    GHC.Word.$trModule
                                    GHC.Word.$tcWord1
                                    0#
                                    GHC.Types.krep$*];

$krep2_r2uFP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord16
                                              GHC.Types.[]];

GHC.Word.$tc'W16#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r2uFN $krep2_r2uFP];

GHC.Word.$tc'W16#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'W16#"#;

GHC.Word.$tc'W16#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tc'W16#3];

GHC.Word.$tc'W16# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13828125037659739325##
                                    16689402625363715300##
                                    GHC.Word.$trModule
                                    GHC.Word.$tc'W16#2
                                    0#
                                    GHC.Word.$tc'W16#1];

GHC.Word.$tcWord3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tcWord4];

GHC.Word.$tcWord32 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3293767376230595825##
                                    2424786049275339072##
                                    GHC.Word.$trModule
                                    GHC.Word.$tcWord3
                                    0#
                                    GHC.Types.krep$*];

$krep3_r2uFQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord32
                                              GHC.Types.[]];

GHC.Word.$tc'W32#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r2uFN $krep3_r2uFQ];

GHC.Word.$tc'W32#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'W32#"#;

GHC.Word.$tc'W32#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tc'W32#3];

GHC.Word.$tc'W32# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15609358257729636621##
                                    4567728021977807739##
                                    GHC.Word.$trModule
                                    GHC.Word.$tc'W32#2
                                    0#
                                    GHC.Word.$tc'W32#1];

GHC.Word.$tcWord5 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tcWord6];

GHC.Word.$tcWord64 :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3342358330123258062##
                                    10610880953247303810##
                                    GHC.Word.$trModule
                                    GHC.Word.$tcWord5
                                    0#
                                    GHC.Types.krep$*];

$krep4_r2uFR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord64
                                              GHC.Types.[]];

GHC.Word.$tc'W64#1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r2uFN $krep4_r2uFR];

GHC.Word.$tc'W64#3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'W64#"#;

GHC.Word.$tc'W64#2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Word.$tc'W64#3];

GHC.Word.$tc'W64# :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3390197976568817661##
                                    1176743391454549598##
                                    GHC.Word.$trModule
                                    GHC.Word.$tc'W64#2
                                    0#
                                    GHC.Word.$tc'W64#1];

GHC.Word.W8# :: GHC.Prim.Word# -> GHC.Word.Word8
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Word.W8# [eta_B1];

GHC.Word.W16# :: GHC.Prim.Word# -> GHC.Word.Word16
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Word.W16# [eta_B1];

GHC.Word.W32# :: GHC.Prim.Word# -> GHC.Word.Word32
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Word.W32# [eta_B1];

GHC.Word.W64# :: GHC.Prim.Word# -> GHC.Word.Word64
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Word.W64# [eta_B1];

