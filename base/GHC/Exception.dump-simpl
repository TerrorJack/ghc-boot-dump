
==================== Tidy Core ====================
2018-03-16 16:02:42.010996793 UTC

Result size of Tidy Core
  = {terms: 1,662, types: 1,220, coercions: 49, joins: 0/2}

-- RHS size: {terms: 6, types: 19, coercions: 0, joins: 0/0}
GHC.Exception.$p1Exception :: forall e. Exception e => Typeable e
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLL),U(U,A,A,A,A)>,
 RULES: Built in rule for GHC.Exception.$p1Exception: "Class op $p1Exception"]
GHC.Exception.$p1Exception
  = \ (@ e_a7rUM) (v_B1 :: Exception e_a7rUM) ->
      case v_B1 of v_B1
      { GHC.Exception.C:Exception v_B2 v_B3 v_B4 v_B5 v_B6 ->
      v_B2
      }

-- RHS size: {terms: 6, types: 19, coercions: 0, joins: 0/0}
GHC.Exception.$p2Exception :: forall e. Exception e => Show e
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLL),U(A,U,A,A,A)>,
 RULES: Built in rule for GHC.Exception.$p2Exception: "Class op $p2Exception"]
GHC.Exception.$p2Exception
  = \ (@ e_a7rUM) (v_B1 :: Exception e_a7rUM) ->
      case v_B1 of v_B1
      { GHC.Exception.C:Exception v_B2 v_B3 v_B4 v_B5 v_B6 ->
      v_B3
      }

-- RHS size: {terms: 6, types: 19, coercions: 0, joins: 0/0}
toException :: forall e. Exception e => e -> SomeException
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLL),U(A,A,U,A,A)>,
 RULES: Built in rule for toException: "Class op toException"]
toException
  = \ (@ e_a7rUM) (v_B1 :: Exception e_a7rUM) ->
      case v_B1 of v_B1
      { GHC.Exception.C:Exception v_B2 v_B3 v_B4 v_B5 v_B6 ->
      v_B4
      }

-- RHS size: {terms: 6, types: 19, coercions: 0, joins: 0/0}
fromException :: forall e. Exception e => SomeException -> Maybe e
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSL),U(A,A,A,U,A)>,
 RULES: Built in rule for fromException: "Class op fromException"]
fromException
  = \ (@ e_a7rUM) (v_B1 :: Exception e_a7rUM) ->
      case v_B1 of v_B1
      { GHC.Exception.C:Exception v_B2 v_B3 v_B4 v_B5 v_B6 ->
      v_B5
      }

-- RHS size: {terms: 6, types: 19, coercions: 0, joins: 0/0}
displayException :: forall e. Exception e => e -> String
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLS),U(A,A,A,A,U)>,
 RULES: Built in rule for displayException: "Class op displayException"]
displayException
  = \ (@ e_a7rUM) (v_B1 :: Exception e_a7rUM) ->
      case v_B1 of v_B1
      { GHC.Exception.C:Exception v_B2 v_B3 v_B4 v_B5 v_B6 ->
      v_B6
      }

-- RHS size: {terms: 10, types: 10, coercions: 0, joins: 0/0}
GHC.Exception.$fShowSomeException_$cshowsPrec
  :: Int -> SomeException -> ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (p_a7rUU [Occ=Once] :: Int)
                 (ds_d7sno [Occ=Once!] :: SomeException) ->
                 case ds_d7sno of
                 { SomeException @ e_a7siT $dException_a7siU [Occ=Once]
                                 e1_a7rUV [Occ=Once] ->
                 showsPrec
                   @ e_a7siT
                   (GHC.Exception.$p2Exception @ e_a7siT $dException_a7siU)
                   p_a7rUU
                   e1_a7rUV
                 }}]
GHC.Exception.$fShowSomeException_$cshowsPrec
  = \ (p_a7rUU :: Int) (ds_d7sno :: SomeException) ->
      case ds_d7sno of
      { SomeException @ e_a7siT $dException_a7siU e1_a7rUV ->
      showsPrec
        @ e_a7siT
        (GHC.Exception.$p2Exception @ e_a7siT $dException_a7siU)
        p_a7rUU
        e1_a7rUV
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionArithException1 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Exception.$fExceptionArithException1 = GHC.Types.I# 0#

-- RHS size: {terms: 10, types: 10, coercions: 0, joins: 0/0}
GHC.Exception.$fShowSomeException_$cshow :: SomeException -> String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7smN [Occ=Once!] :: SomeException) ->
                 case x_i7smN of
                 { SomeException @ e_a7siT $dException_a7siU [Occ=Once]
                                 e1_a7rUV [Occ=Once] ->
                 showsPrec
                   @ e_a7siT
                   (GHC.Exception.$p2Exception @ e_a7siT $dException_a7siU)
                   GHC.Exception.$fExceptionArithException1
                   e1_a7rUV
                   (GHC.Types.[] @ Char)
                 }}]
GHC.Exception.$fShowSomeException_$cshow
  = \ (x_i7smN :: SomeException) ->
      case x_i7smN of
      { SomeException @ e_a7siT $dException_a7siU e1_a7rUV ->
      showsPrec
        @ e_a7siT
        (GHC.Exception.$p2Exception @ e_a7siT $dException_a7siU)
        GHC.Exception.$fExceptionArithException1
        e1_a7rUV
        (GHC.Types.[] @ Char)
      }

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
GHC.Exception.$fShowSomeException1 :: SomeException -> ShowS
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d7sno [Occ=Once!] :: SomeException) ->
                 case ds_d7sno of
                 { SomeException @ e_a7siT $dException_a7siU [Occ=Once]
                                 e1_a7rUV [Occ=Once] ->
                 showsPrec
                   @ e_a7siT
                   (GHC.Exception.$p2Exception @ e_a7siT $dException_a7siU)
                   GHC.Exception.$fExceptionArithException1
                   e1_a7rUV
                 }}]
GHC.Exception.$fShowSomeException1
  = \ (ds_d7sno :: SomeException) ->
      case ds_d7sno of
      { SomeException @ e_a7siT $dException_a7siU e1_a7rUV ->
      showsPrec
        @ e_a7siT
        (GHC.Exception.$p2Exception @ e_a7siT $dException_a7siU)
        GHC.Exception.$fExceptionArithException1
        e1_a7rUV
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Exception.$fShowSomeException_$cshowList
  :: [SomeException] -> ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7smQ [Occ=Once] :: [SomeException])
                 (s_i7smR [Occ=Once] :: String) ->
                 showList__
                   @ SomeException
                   GHC.Exception.$fShowSomeException1
                   ls_i7smQ
                   s_i7smR}]
GHC.Exception.$fShowSomeException_$cshowList
  = \ (ls_i7smQ :: [SomeException]) (s_i7smR :: String) ->
      showList__
        @ SomeException GHC.Exception.$fShowSomeException1 ls_i7smQ s_i7smR

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Exception.$fShowSomeException [InlPrag=NOUSERINLINE CONLIKE]
  :: Show SomeException
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: SomeException
                       GHC.Exception.$fShowSomeException_$cshowsPrec
                       GHC.Exception.$fShowSomeException_$cshow
                       GHC.Exception.$fShowSomeException_$cshowList]
GHC.Exception.$fShowSomeException
  = GHC.Show.C:Show
      @ SomeException
      GHC.Exception.$fShowSomeException_$cshowsPrec
      GHC.Exception.$fShowSomeException_$cshow
      GHC.Exception.$fShowSomeException_$cshowList

-- RHS size: {terms: 7, types: 8, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionSomeException_$cdisplayException
  :: SomeException -> String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d7sne [Occ=Once!] :: SomeException) ->
                 case ds_d7sne of
                 { SomeException @ e_a7siI $dException_a7siJ [Occ=Once]
                                 e1_a7rUT [Occ=Once] ->
                 displayException @ e_a7siI $dException_a7siJ e1_a7rUT
                 }}]
GHC.Exception.$fExceptionSomeException_$cdisplayException
  = \ (ds_d7sne :: SomeException) ->
      case ds_d7sne of
      { SomeException @ e_a7siI $dException_a7siJ e1_a7rUT ->
      displayException @ e_a7siI $dException_a7siJ e1_a7rUT
      }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionSomeException_$ctoException
  :: SomeException -> SomeException
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (se_a7rUS [Occ=Once] :: SomeException) -> se_a7rUS}]
GHC.Exception.$fExceptionSomeException_$ctoException
  = \ (se_a7rUS :: SomeException) -> se_a7rUS

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionErrorCall1 :: Char
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Exception.$fExceptionErrorCall1 = GHC.Types.C# '\n'#

-- RHS size: {terms: 17, types: 12, coercions: 0, joins: 0/0}
GHC.Exception.$w$cshowsPrec1 [InlPrag=NOUSERINLINE[0]]
  :: String -> String -> String -> String
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 60 0] 120 0}]
GHC.Exception.$w$cshowsPrec1
  = \ (ww_s7sTx :: String)
      (ww1_s7sTy :: String)
      (w_s7sTu :: String) ->
      case ww1_s7sTy of wild_Xc {
        [] -> ++ @ Char ww_s7sTx w_s7sTu;
        : ipv_s7soZ ipv1_s7sp9 ->
          ++
            @ Char
            ww_s7sTx
            (GHC.Types.:
               @ Char
               GHC.Exception.$fExceptionErrorCall1
               (++ @ Char wild_Xc w_s7sTu))
      }

-- RHS size: {terms: 10, types: 6, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionErrorCall_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> ErrorCall -> ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><S(SS),1*U(1*U,1*U)><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (w1_s7sTt [Occ=Once!] :: ErrorCall)
                 (w2_s7sTu [Occ=Once] :: String) ->
                 case w1_s7sTt of
                 { ErrorCallWithLocation ww1_s7sTx [Occ=Once]
                                         ww2_s7sTy [Occ=Once] ->
                 GHC.Exception.$w$cshowsPrec1 ww1_s7sTx ww2_s7sTy w2_s7sTu
                 }}]
GHC.Exception.$fExceptionErrorCall_$cshowsPrec
  = \ _ [Occ=Dead] (w1_s7sTt :: ErrorCall) (w2_s7sTu :: String) ->
      case w1_s7sTt of { ErrorCallWithLocation ww1_s7sTx ww2_s7sTy ->
      GHC.Exception.$w$cshowsPrec1 ww1_s7sTx ww2_s7sTy w2_s7sTu
      }

-- RHS size: {terms: 8, types: 5, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionErrorCall_$cshow :: ErrorCall -> String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7smN [Occ=Once] :: ErrorCall) ->
                 GHC.Exception.$fExceptionErrorCall_$cshowsPrec
                   GHC.Exception.$fExceptionArithException1
                   x_i7smN
                   (GHC.Types.[] @ Char)}]
GHC.Exception.$fExceptionErrorCall_$cshow
  = \ (x_i7smN :: ErrorCall) ->
      case x_i7smN of { ErrorCallWithLocation ww1_s7sTx ww2_s7sTy ->
      GHC.Exception.$w$cshowsPrec1
        ww1_s7sTx ww2_s7sTy (GHC.Types.[] @ Char)
      }

-- RHS size: {terms: 9, types: 5, coercions: 0, joins: 0/0}
GHC.Exception.$fShowErrorCall1 :: ErrorCall -> ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 50 0}]
GHC.Exception.$fShowErrorCall1
  = \ (w_s7sTt :: ErrorCall) (w1_s7sTu :: String) ->
      case w_s7sTt of { ErrorCallWithLocation ww1_s7sTx ww2_s7sTy ->
      GHC.Exception.$w$cshowsPrec1 ww1_s7sTx ww2_s7sTy w1_s7sTu
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Exception.$fShowErrorCall_$cshowList :: [ErrorCall] -> ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7smQ [Occ=Once] :: [ErrorCall])
                 (s_i7smR [Occ=Once] :: String) ->
                 showList__
                   @ ErrorCall GHC.Exception.$fShowErrorCall1 ls_i7smQ s_i7smR}]
GHC.Exception.$fShowErrorCall_$cshowList
  = \ (ls_i7smQ :: [ErrorCall]) (s_i7smR :: String) ->
      showList__
        @ ErrorCall GHC.Exception.$fShowErrorCall1 ls_i7smQ s_i7smR

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Exception.$fShowErrorCall [InlPrag=NOUSERINLINE CONLIKE]
  :: Show ErrorCall
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: ErrorCall
                       GHC.Exception.$fExceptionErrorCall_$cshowsPrec
                       GHC.Exception.$fExceptionErrorCall_$cshow
                       GHC.Exception.$fShowErrorCall_$cshowList]
GHC.Exception.$fShowErrorCall
  = GHC.Show.C:Show
      @ ErrorCall
      GHC.Exception.$fExceptionErrorCall_$cshowsPrec
      GHC.Exception.$fExceptionErrorCall_$cshow
      GHC.Exception.$fShowErrorCall_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionArithException13 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.Exception.$fExceptionArithException13 = "arithmetic overflow"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionArithException12 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Exception.$fExceptionArithException12
  = unpackCString# GHC.Exception.$fExceptionArithException13

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionArithException11 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.Exception.$fExceptionArithException11 = "arithmetic underflow"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionArithException10 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Exception.$fExceptionArithException10
  = unpackCString# GHC.Exception.$fExceptionArithException11

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionArithException9 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.Exception.$fExceptionArithException9 = "loss of precision"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionArithException8 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Exception.$fExceptionArithException8
  = unpackCString# GHC.Exception.$fExceptionArithException9

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionArithException7 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Exception.$fExceptionArithException7 = "divide by zero"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionArithException6 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Exception.$fExceptionArithException6
  = unpackCString# GHC.Exception.$fExceptionArithException7

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionArithException5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Exception.$fExceptionArithException5 = "denormal"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionArithException4 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Exception.$fExceptionArithException4
  = unpackCString# GHC.Exception.$fExceptionArithException5

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionArithException3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 80 0}]
GHC.Exception.$fExceptionArithException3
  = "Ratio has zero denominator"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionArithException2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Exception.$fExceptionArithException2
  = unpackCString# GHC.Exception.$fExceptionArithException3

-- RHS size: {terms: 28, types: 9, coercions: 0, joins: 0/0}
GHC.Exception.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: ArithException -> String -> String
[GblId,
 Arity=2,
 Str=<S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [220 0] 240 0}]
GHC.Exception.$w$cshowsPrec
  = \ (w_s7sTC :: ArithException) (w1_s7sTD :: String) ->
      case w_s7sTC of {
        Overflow ->
          ++ @ Char GHC.Exception.$fExceptionArithException12 w1_s7sTD;
        Underflow ->
          ++ @ Char GHC.Exception.$fExceptionArithException10 w1_s7sTD;
        LossOfPrecision ->
          ++ @ Char GHC.Exception.$fExceptionArithException8 w1_s7sTD;
        DivideByZero ->
          ++ @ Char GHC.Exception.$fExceptionArithException6 w1_s7sTD;
        Denormal ->
          ++ @ Char GHC.Exception.$fExceptionArithException4 w1_s7sTD;
        RatioZeroDenominator ->
          ++ @ Char GHC.Exception.$fExceptionArithException2 w1_s7sTD
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionArithException_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> ArithException -> ShowS
[GblId,
 Arity=3,
 Str=<L,A><S,1*U><L,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead]
                 (w1_s7sTC [Occ=Once] :: ArithException)
                 (w2_s7sTD [Occ=Once] :: String) ->
                 GHC.Exception.$w$cshowsPrec w1_s7sTC w2_s7sTD}]
GHC.Exception.$fExceptionArithException_$cshowsPrec
  = \ _ [Occ=Dead]
      (w1_s7sTC :: ArithException)
      (w2_s7sTD :: String) ->
      GHC.Exception.$w$cshowsPrec w1_s7sTC w2_s7sTD

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionArithException_$cshow
  :: ArithException -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7smN [Occ=Once] :: ArithException) ->
                 GHC.Exception.$fExceptionArithException_$cshowsPrec
                   GHC.Exception.$fExceptionArithException1
                   x_i7smN
                   (GHC.Types.[] @ Char)}]
GHC.Exception.$fExceptionArithException_$cshow
  = \ (x_i7smN :: ArithException) ->
      GHC.Exception.$w$cshowsPrec x_i7smN (GHC.Types.[] @ Char)

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Exception.$fShowArithException_$cshowList
  :: [ArithException] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7smQ [Occ=Once] :: [ArithException])
                 (s_i7smR [Occ=Once] :: String) ->
                 showList__
                   @ ArithException GHC.Exception.$w$cshowsPrec ls_i7smQ s_i7smR}]
GHC.Exception.$fShowArithException_$cshowList
  = \ (ls_i7smQ :: [ArithException]) (s_i7smR :: String) ->
      showList__
        @ ArithException GHC.Exception.$w$cshowsPrec ls_i7smQ s_i7smR

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Exception.$fShowArithException [InlPrag=NOUSERINLINE CONLIKE]
  :: Show ArithException
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: ArithException
                       GHC.Exception.$fExceptionArithException_$cshowsPrec
                       GHC.Exception.$fExceptionArithException_$cshow
                       GHC.Exception.$fShowArithException_$cshowList]
GHC.Exception.$fShowArithException
  = GHC.Show.C:Show
      @ ArithException
      GHC.Exception.$fExceptionArithException_$cshowsPrec
      GHC.Exception.$fExceptionArithException_$cshow
      GHC.Exception.$fShowArithException_$cshowList

-- RHS size: {terms: 46, types: 9, coercions: 0, joins: 0/0}
GHC.Exception.$fEqArithException_$c==
  :: ArithException -> ArithException -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [170 180] 180 120}]
GHC.Exception.$fEqArithException_$c==
  = \ (ds_d7sms :: ArithException) (ds1_d7smt :: ArithException) ->
      case ds_d7sms of {
        Overflow ->
          case ds1_d7smt of {
            __DEFAULT -> GHC.Types.False;
            Overflow -> GHC.Types.True
          };
        Underflow ->
          case ds1_d7smt of {
            __DEFAULT -> GHC.Types.False;
            Underflow -> GHC.Types.True
          };
        LossOfPrecision ->
          case ds1_d7smt of {
            __DEFAULT -> GHC.Types.False;
            LossOfPrecision -> GHC.Types.True
          };
        DivideByZero ->
          case ds1_d7smt of {
            __DEFAULT -> GHC.Types.False;
            DivideByZero -> GHC.Types.True
          };
        Denormal ->
          case ds1_d7smt of {
            __DEFAULT -> GHC.Types.False;
            Denormal -> GHC.Types.True
          };
        RatioZeroDenominator ->
          case ds1_d7smt of {
            __DEFAULT -> GHC.Types.False;
            RatioZeroDenominator -> GHC.Types.True
          }
      }

-- RHS size: {terms: 46, types: 9, coercions: 0, joins: 0/0}
GHC.Exception.$fEqArithException_$c/= [InlPrag=INLINE (sat-args=2)]
  :: ArithException -> ArithException -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (x_a22b [Occ=Once!] :: ArithException)
                 (y_a22c [Occ=Once*!] :: ArithException) ->
                 case x_a22b of {
                   Overflow ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       Overflow -> GHC.Types.False
                     };
                   Underflow ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       Underflow -> GHC.Types.False
                     };
                   LossOfPrecision ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       LossOfPrecision -> GHC.Types.False
                     };
                   DivideByZero ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       DivideByZero -> GHC.Types.False
                     };
                   Denormal ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       Denormal -> GHC.Types.False
                     };
                   RatioZeroDenominator ->
                     case y_a22c of {
                       __DEFAULT -> GHC.Types.True;
                       RatioZeroDenominator -> GHC.Types.False
                     }
                 }}]
GHC.Exception.$fEqArithException_$c/=
  = \ (eta_B2 :: ArithException) (eta1_B1 :: ArithException) ->
      case eta_B2 of {
        Overflow ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            Overflow -> GHC.Types.False
          };
        Underflow ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            Underflow -> GHC.Types.False
          };
        LossOfPrecision ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            LossOfPrecision -> GHC.Types.False
          };
        DivideByZero ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            DivideByZero -> GHC.Types.False
          };
        Denormal ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            Denormal -> GHC.Types.False
          };
        RatioZeroDenominator ->
          case eta1_B1 of {
            __DEFAULT -> GHC.Types.True;
            RatioZeroDenominator -> GHC.Types.False
          }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Exception.$fEqArithException [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq ArithException
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: ArithException
                        GHC.Exception.$fEqArithException_$c==
                        GHC.Exception.$fEqArithException_$c/=]
GHC.Exception.$fEqArithException
  = GHC.Classes.C:Eq
      @ ArithException
      GHC.Exception.$fEqArithException_$c==
      GHC.Exception.$fEqArithException_$c/=

-- RHS size: {terms: 16, types: 5, coercions: 0, joins: 0/0}
GHC.Exception.$w$c< [InlPrag=NOUSERINLINE[0]]
  :: String -> String -> String -> String -> Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0 0] 90 20}]
GHC.Exception.$w$c<
  = \ (ww_s7sTL :: String)
      (ww1_s7sTM :: String)
      (ww2_s7sTQ :: String)
      (ww3_s7sTR :: String) ->
      case GHC.Classes.$fOrd[]_$s$ccompare1 ww_s7sTL ww2_s7sTQ of {
        LT -> GHC.Types.True;
        EQ -> GHC.Classes.$fOrd[]_$s$c<1 ww1_s7sTM ww3_s7sTR;
        GT -> GHC.Types.False
      }

-- RHS size: {terms: 13, types: 8, coercions: 0, joins: 0/0}
GHC.Exception.$fOrdErrorCall_$c< [InlPrag=NOUSERINLINE[0]]
  :: ErrorCall -> ErrorCall -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s7sTH [Occ=Once!] :: ErrorCall)
                 (w1_s7sTI [Occ=Once!] :: ErrorCall) ->
                 case w_s7sTH of
                 { ErrorCallWithLocation ww1_s7sTL [Occ=Once]
                                         ww2_s7sTM [Occ=Once] ->
                 case w1_s7sTI of
                 { ErrorCallWithLocation ww4_s7sTQ [Occ=Once]
                                         ww5_s7sTR [Occ=Once] ->
                 GHC.Exception.$w$c< ww1_s7sTL ww2_s7sTM ww4_s7sTQ ww5_s7sTR
                 }
                 }}]
GHC.Exception.$fOrdErrorCall_$c<
  = \ (w_s7sTH :: ErrorCall) (w1_s7sTI :: ErrorCall) ->
      case w_s7sTH of { ErrorCallWithLocation ww1_s7sTL ww2_s7sTM ->
      case w1_s7sTI of { ErrorCallWithLocation ww4_s7sTQ ww5_s7sTR ->
      GHC.Exception.$w$c< ww1_s7sTL ww2_s7sTM ww4_s7sTQ ww5_s7sTR
      }
      }

-- RHS size: {terms: 16, types: 5, coercions: 0, joins: 0/0}
GHC.Exception.$w$ccompare [InlPrag=NOUSERINLINE[0]]
  :: String -> String -> String -> String -> Ordering
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0 0] 90 20}]
GHC.Exception.$w$ccompare
  = \ (ww_s7sTY :: String)
      (ww1_s7sTZ :: String)
      (ww2_s7sU3 :: String)
      (ww3_s7sU4 :: String) ->
      case GHC.Classes.$fOrd[]_$s$ccompare1 ww_s7sTY ww2_s7sU3 of {
        LT -> GHC.Types.LT;
        EQ -> GHC.Classes.$fOrd[]_$s$ccompare1 ww1_s7sTZ ww3_s7sU4;
        GT -> GHC.Types.GT
      }

-- RHS size: {terms: 13, types: 8, coercions: 0, joins: 0/0}
GHC.Exception.$fOrdErrorCall_$ccompare [InlPrag=NOUSERINLINE[0]]
  :: ErrorCall -> ErrorCall -> Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s7sTU [Occ=Once!] :: ErrorCall)
                 (w1_s7sTV [Occ=Once!] :: ErrorCall) ->
                 case w_s7sTU of
                 { ErrorCallWithLocation ww1_s7sTY [Occ=Once]
                                         ww2_s7sTZ [Occ=Once] ->
                 case w1_s7sTV of
                 { ErrorCallWithLocation ww4_s7sU3 [Occ=Once]
                                         ww5_s7sU4 [Occ=Once] ->
                 GHC.Exception.$w$ccompare ww1_s7sTY ww2_s7sTZ ww4_s7sU3 ww5_s7sU4
                 }
                 }}]
GHC.Exception.$fOrdErrorCall_$ccompare
  = \ (w_s7sTU :: ErrorCall) (w1_s7sTV :: ErrorCall) ->
      case w_s7sTU of { ErrorCallWithLocation ww1_s7sTY ww2_s7sTZ ->
      case w1_s7sTV of { ErrorCallWithLocation ww4_s7sU3 ww5_s7sU4 ->
      GHC.Exception.$w$ccompare ww1_s7sTY ww2_s7sTZ ww4_s7sU3 ww5_s7sU4
      }
      }

-- RHS size: {terms: 14, types: 5, coercions: 0, joins: 0/0}
GHC.Exception.$w$c== [InlPrag=NOUSERINLINE[0]]
  :: String -> String -> String -> String -> Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0 0] 80 10}]
GHC.Exception.$w$c==
  = \ (ww_s7sUb :: String)
      (ww1_s7sUc :: String)
      (ww2_s7sUg :: String)
      (ww3_s7sUh :: String) ->
      case eqString ww_s7sUb ww2_s7sUg of {
        False -> GHC.Types.False;
        True -> eqString ww1_s7sUc ww3_s7sUh
      }

-- RHS size: {terms: 13, types: 8, coercions: 0, joins: 0/0}
GHC.Exception.$fEqErrorCall_$c== [InlPrag=NOUSERINLINE[0]]
  :: ErrorCall -> ErrorCall -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s7sU7 [Occ=Once!] :: ErrorCall)
                 (w1_s7sU8 [Occ=Once!] :: ErrorCall) ->
                 case w_s7sU7 of
                 { ErrorCallWithLocation ww1_s7sUb [Occ=Once]
                                         ww2_s7sUc [Occ=Once] ->
                 case w1_s7sU8 of
                 { ErrorCallWithLocation ww4_s7sUg [Occ=Once]
                                         ww5_s7sUh [Occ=Once] ->
                 GHC.Exception.$w$c== ww1_s7sUb ww2_s7sUc ww4_s7sUg ww5_s7sUh
                 }
                 }}]
GHC.Exception.$fEqErrorCall_$c==
  = \ (w_s7sU7 :: ErrorCall) (w1_s7sU8 :: ErrorCall) ->
      case w_s7sU7 of { ErrorCallWithLocation ww1_s7sUb ww2_s7sUc ->
      case w1_s7sU8 of { ErrorCallWithLocation ww4_s7sUg ww5_s7sUh ->
      GHC.Exception.$w$c== ww1_s7sUb ww2_s7sUc ww4_s7sUg ww5_s7sUh
      }
      }

-- RHS size: {terms: 23, types: 10, coercions: 0, joins: 0/0}
GHC.Exception.$fEqErrorCall_$c/= [InlPrag=INLINE (sat-args=2)]
  :: ErrorCall -> ErrorCall -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (x_a22b [Occ=Once!] :: ErrorCall)
                 (y_a22c [Occ=Once!] :: ErrorCall) ->
                 case x_a22b of
                 { ErrorCallWithLocation a1_a7s9x [Occ=Once] a2_a7s9y [Occ=Once] ->
                 case y_a22c of
                 { ErrorCallWithLocation b1_a7s9z [Occ=Once] b2_a7s9A [Occ=Once] ->
                 case eqString a1_a7s9x b1_a7s9z of {
                   False -> GHC.Types.True;
                   True ->
                     case eqString a2_a7s9y b2_a7s9A of {
                       False -> GHC.Types.True;
                       True -> GHC.Types.False
                     }
                 }
                 }
                 }}]
GHC.Exception.$fEqErrorCall_$c/=
  = \ (eta_B2 :: ErrorCall) (eta1_B1 :: ErrorCall) ->
      case eta_B2 of { ErrorCallWithLocation a1_a7s9x a2_a7s9y ->
      case eta1_B1 of { ErrorCallWithLocation b1_a7s9z b2_a7s9A ->
      case eqString a1_a7s9x b1_a7s9z of {
        False -> GHC.Types.True;
        True ->
          case eqString a2_a7s9y b2_a7s9A of {
            False -> GHC.Types.True;
            True -> GHC.Types.False
          }
      }
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Exception.$fEqErrorCall [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq ErrorCall
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: ErrorCall
                        GHC.Exception.$fEqErrorCall_$c==
                        GHC.Exception.$fEqErrorCall_$c/=]
GHC.Exception.$fEqErrorCall
  = GHC.Classes.C:Eq
      @ ErrorCall
      GHC.Exception.$fEqErrorCall_$c==
      GHC.Exception.$fEqErrorCall_$c/=

-- RHS size: {terms: 21, types: 6, coercions: 0, joins: 0/0}
GHC.Exception.$w$c<= [InlPrag=NOUSERINLINE[0]]
  :: String -> String -> String -> String -> Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0 0] 110 40}]
GHC.Exception.$w$c<=
  = \ (ww_s7sUo :: String)
      (ww1_s7sUp :: String)
      (ww2_s7sUt :: String)
      (ww3_s7sUu :: String) ->
      case GHC.Classes.$fOrd[]_$s$ccompare1 ww2_s7sUt ww_s7sUo of {
        LT -> GHC.Types.False;
        EQ ->
          case GHC.Classes.$fOrd[]_$s$ccompare1 ww3_s7sUu ww1_s7sUp of {
            __DEFAULT -> GHC.Types.True;
            LT -> GHC.Types.False
          };
        GT -> GHC.Types.True
      }

-- RHS size: {terms: 13, types: 8, coercions: 0, joins: 0/0}
GHC.Exception.$fOrdErrorCall_$c<= [InlPrag=NOUSERINLINE[0]]
  :: ErrorCall -> ErrorCall -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s7sUk [Occ=Once!] :: ErrorCall)
                 (w1_s7sUl [Occ=Once!] :: ErrorCall) ->
                 case w_s7sUk of
                 { ErrorCallWithLocation ww1_s7sUo [Occ=Once]
                                         ww2_s7sUp [Occ=Once] ->
                 case w1_s7sUl of
                 { ErrorCallWithLocation ww4_s7sUt [Occ=Once]
                                         ww5_s7sUu [Occ=Once] ->
                 GHC.Exception.$w$c<= ww1_s7sUo ww2_s7sUp ww4_s7sUt ww5_s7sUu
                 }
                 }}]
GHC.Exception.$fOrdErrorCall_$c<=
  = \ (w_s7sUk :: ErrorCall) (w1_s7sUl :: ErrorCall) ->
      case w_s7sUk of { ErrorCallWithLocation ww1_s7sUo ww2_s7sUp ->
      case w1_s7sUl of { ErrorCallWithLocation ww4_s7sUt ww5_s7sUu ->
      GHC.Exception.$w$c<= ww1_s7sUo ww2_s7sUp ww4_s7sUt ww5_s7sUu
      }
      }

-- RHS size: {terms: 25, types: 10, coercions: 0, joins: 0/0}
GHC.Exception.$fOrdErrorCall_$cmax [InlPrag=NOUSERINLINE[0]]
  :: ErrorCall -> ErrorCall -> ErrorCall
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s7sUx [Occ=Once!] :: ErrorCall)
                 (w1_s7sUy [Occ=Once!] :: ErrorCall) ->
                 case w_s7sUx of { ErrorCallWithLocation ww1_s7sUB ww2_s7sUC ->
                 case w1_s7sUy of { ErrorCallWithLocation ww4_s7sUG ww5_s7sUH ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww4_s7sUG ww1_s7sUB of {
                   LT -> GHC.Exception.ErrorCallWithLocation ww1_s7sUB ww2_s7sUC;
                   EQ ->
                     case GHC.Classes.$fOrd[]_$s$ccompare1 ww5_s7sUH ww2_s7sUC of {
                       __DEFAULT ->
                         GHC.Exception.ErrorCallWithLocation ww4_s7sUG ww5_s7sUH;
                       LT -> GHC.Exception.ErrorCallWithLocation ww1_s7sUB ww2_s7sUC
                     };
                   GT -> GHC.Exception.ErrorCallWithLocation ww4_s7sUG ww5_s7sUH
                 }
                 }
                 }}]
GHC.Exception.$fOrdErrorCall_$cmax
  = \ (w_s7sUx :: ErrorCall) (w1_s7sUy :: ErrorCall) ->
      case w_s7sUx of ww_s7sUA
      { ErrorCallWithLocation ww1_s7sUB ww2_s7sUC ->
      case w1_s7sUy of ww3_s7sUF
      { ErrorCallWithLocation ww4_s7sUG ww5_s7sUH ->
      case GHC.Classes.$fOrd[]_$s$ccompare1 ww4_s7sUG ww1_s7sUB of {
        LT -> ww_s7sUA;
        EQ ->
          case GHC.Classes.$fOrd[]_$s$ccompare1 ww5_s7sUH ww2_s7sUC of {
            __DEFAULT -> ww3_s7sUF;
            LT -> ww_s7sUA
          };
        GT -> ww3_s7sUF
      }
      }
      }

-- RHS size: {terms: 21, types: 6, coercions: 0, joins: 0/0}
GHC.Exception.$w$c>= [InlPrag=NOUSERINLINE[0]]
  :: String -> String -> String -> String -> Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U><S,1*U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0 0] 110 40}]
GHC.Exception.$w$c>=
  = \ (ww_s7sUR :: String)
      (ww1_s7sUS :: String)
      (ww2_s7sUW :: String)
      (ww3_s7sUX :: String) ->
      case GHC.Classes.$fOrd[]_$s$ccompare1 ww_s7sUR ww2_s7sUW of {
        LT -> GHC.Types.False;
        EQ ->
          case GHC.Classes.$fOrd[]_$s$ccompare1 ww1_s7sUS ww3_s7sUX of {
            __DEFAULT -> GHC.Types.True;
            LT -> GHC.Types.False
          };
        GT -> GHC.Types.True
      }

-- RHS size: {terms: 13, types: 8, coercions: 0, joins: 0/0}
GHC.Exception.$fOrdErrorCall_$c>= [InlPrag=NOUSERINLINE[0]]
  :: ErrorCall -> ErrorCall -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s7sUN [Occ=Once!] :: ErrorCall)
                 (w1_s7sUO [Occ=Once!] :: ErrorCall) ->
                 case w_s7sUN of
                 { ErrorCallWithLocation ww1_s7sUR [Occ=Once]
                                         ww2_s7sUS [Occ=Once] ->
                 case w1_s7sUO of
                 { ErrorCallWithLocation ww4_s7sUW [Occ=Once]
                                         ww5_s7sUX [Occ=Once] ->
                 GHC.Exception.$w$c>= ww1_s7sUR ww2_s7sUS ww4_s7sUW ww5_s7sUX
                 }
                 }}]
GHC.Exception.$fOrdErrorCall_$c>=
  = \ (w_s7sUN :: ErrorCall) (w1_s7sUO :: ErrorCall) ->
      case w_s7sUN of { ErrorCallWithLocation ww1_s7sUR ww2_s7sUS ->
      case w1_s7sUO of { ErrorCallWithLocation ww4_s7sUW ww5_s7sUX ->
      GHC.Exception.$w$c>= ww1_s7sUR ww2_s7sUS ww4_s7sUW ww5_s7sUX
      }
      }

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
GHC.Exception.$fOrdErrorCall_$c> :: ErrorCall -> ErrorCall -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (a_a7s9P [Occ=Once] :: ErrorCall)
                 (b_a7s9Q [Occ=Once] :: ErrorCall) ->
                 GHC.Exception.$fOrdErrorCall_$c< b_a7s9Q a_a7s9P}]
GHC.Exception.$fOrdErrorCall_$c>
  = \ (a_a7s9P :: ErrorCall) (b_a7s9Q :: ErrorCall) ->
      GHC.Exception.$fOrdErrorCall_$c< b_a7s9Q a_a7s9P

-- RHS size: {terms: 25, types: 10, coercions: 0, joins: 0/0}
GHC.Exception.$fOrdErrorCall_$cmin [InlPrag=NOUSERINLINE[0]]
  :: ErrorCall -> ErrorCall -> ErrorCall
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s7sV0 [Occ=Once!] :: ErrorCall)
                 (w1_s7sV1 [Occ=Once!] :: ErrorCall) ->
                 case w_s7sV0 of { ErrorCallWithLocation ww1_s7sV4 ww2_s7sV5 ->
                 case w1_s7sV1 of { ErrorCallWithLocation ww4_s7sV9 ww5_s7sVa ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww4_s7sV9 ww1_s7sV4 of {
                   LT -> GHC.Exception.ErrorCallWithLocation ww4_s7sV9 ww5_s7sVa;
                   EQ ->
                     case GHC.Classes.$fOrd[]_$s$ccompare1 ww5_s7sVa ww2_s7sV5 of {
                       __DEFAULT ->
                         GHC.Exception.ErrorCallWithLocation ww1_s7sV4 ww2_s7sV5;
                       LT -> GHC.Exception.ErrorCallWithLocation ww4_s7sV9 ww5_s7sVa
                     };
                   GT -> GHC.Exception.ErrorCallWithLocation ww1_s7sV4 ww2_s7sV5
                 }
                 }
                 }}]
GHC.Exception.$fOrdErrorCall_$cmin
  = \ (w_s7sV0 :: ErrorCall) (w1_s7sV1 :: ErrorCall) ->
      case w_s7sV0 of ww_s7sV3
      { ErrorCallWithLocation ww1_s7sV4 ww2_s7sV5 ->
      case w1_s7sV1 of ww3_s7sV8
      { ErrorCallWithLocation ww4_s7sV9 ww5_s7sVa ->
      case GHC.Classes.$fOrd[]_$s$ccompare1 ww4_s7sV9 ww1_s7sV4 of {
        LT -> ww3_s7sV8;
        EQ ->
          case GHC.Classes.$fOrd[]_$s$ccompare1 ww5_s7sVa ww2_s7sV5 of {
            __DEFAULT -> ww_s7sV3;
            LT -> ww3_s7sV8
          };
        GT -> ww_s7sV3
      }
      }
      }

-- RHS size: {terms: 9, types: 1, coercions: 0, joins: 0/0}
GHC.Exception.$fOrdErrorCall [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord ErrorCall
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: ErrorCall
                         GHC.Exception.$fEqErrorCall
                         GHC.Exception.$fOrdErrorCall_$ccompare
                         GHC.Exception.$fOrdErrorCall_$c<
                         GHC.Exception.$fOrdErrorCall_$c<=
                         GHC.Exception.$fOrdErrorCall_$c>
                         GHC.Exception.$fOrdErrorCall_$c>=
                         GHC.Exception.$fOrdErrorCall_$cmax
                         GHC.Exception.$fOrdErrorCall_$cmin]
GHC.Exception.$fOrdErrorCall
  = GHC.Classes.C:Ord
      @ ErrorCall
      GHC.Exception.$fEqErrorCall
      GHC.Exception.$fOrdErrorCall_$ccompare
      GHC.Exception.$fOrdErrorCall_$c<
      GHC.Exception.$fOrdErrorCall_$c<=
      GHC.Exception.$fOrdErrorCall_$c>
      GHC.Exception.$fOrdErrorCall_$c>=
      GHC.Exception.$fOrdErrorCall_$cmax
      GHC.Exception.$fOrdErrorCall_$cmin

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
GHC.Exception.$dmdisplayException
  :: forall e. Exception e => e -> String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LS(LSL)LLL),1*U(A,1*U(A,1*U,A),A,A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ e_a7rUM)
                 ($dException_a7se4 [Occ=Once] :: Exception e_a7rUM) ->
                 show
                   @ e_a7rUM
                   (GHC.Exception.$p2Exception @ e_a7rUM $dException_a7se4)}]
GHC.Exception.$dmdisplayException
  = \ (@ e_a7rUM) ($dException_a7se4 :: Exception e_a7rUM) ->
      show
        @ e_a7rUM (GHC.Exception.$p2Exception @ e_a7rUM $dException_a7se4)

-- RHS size: {terms: 17, types: 22, coercions: 13, joins: 0/0}
GHC.Exception.$dmfromException
  :: forall e. Exception e => SomeException -> Maybe e
[GblId,
 Arity=2,
 Str=<S(SLLLL),1*U(1*U,A,A,A,A)><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ e_a7rUM)
                 ($dException_a7se4 [Occ=OnceL] :: Exception e_a7rUM) ->
                 let {
                   $dTypeable_a7sjg [Occ=OnceL] :: Typeable e_a7rUM
                   [LclId]
                   $dTypeable_a7sjg
                     = GHC.Exception.$p1Exception @ e_a7rUM $dException_a7se4 } in
                 \ (ds_d7slP [Occ=Once!] :: SomeException) ->
                   case ds_d7slP of
                   { SomeException @ e1_a7sec $dException1_a7sed [Occ=Once]
                                   e2_a7rUN [Occ=Once] ->
                   case Data.Typeable.Internal.sameTypeRep
                          @ *
                          @ *
                          @ e1_a7sec
                          @ e_a7rUM
                          ((GHC.Exception.$p1Exception @ e1_a7sec $dException1_a7sed)
                           `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <e1_a7sec>_N
                                   :: (Typeable e1_a7sec :: Constraint)
                                      ~R# (Data.Typeable.Internal.TypeRep e1_a7sec :: *)))
                          ($dTypeable_a7sjg
                           `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <e_a7rUM>_N
                                   :: (Typeable e_a7rUM :: Constraint)
                                      ~R# (Data.Typeable.Internal.TypeRep e_a7rUM :: *)))
                   of {
                     False -> GHC.Base.Nothing @ e_a7rUM;
                     True ->
                       (GHC.Base.Just @ e1_a7sec e2_a7rUN)
                       `cast` ((Maybe (UnsafeCo representational e1_a7sec e_a7rUM))_R
                               :: (Maybe e1_a7sec :: *) ~R# (Maybe e_a7rUM :: *))
                   }
                   }}]
GHC.Exception.$dmfromException
  = \ (@ e_a7rUM)
      ($dException_a7se4 :: Exception e_a7rUM)
      (eta_B1 :: SomeException) ->
      case eta_B1 of
      { SomeException @ e1_a7sec $dException1_a7sed e2_a7rUN ->
      case Data.Typeable.Internal.sameTypeRep
             @ *
             @ *
             @ e1_a7sec
             @ e_a7rUM
             ((GHC.Exception.$p1Exception @ e1_a7sec $dException1_a7sed)
              `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <e1_a7sec>_N
                      :: (Typeable e1_a7sec :: Constraint)
                         ~R# (Data.Typeable.Internal.TypeRep e1_a7sec :: *)))
             ((GHC.Exception.$p1Exception @ e_a7rUM $dException_a7se4)
              `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <e_a7rUM>_N
                      :: (Typeable e_a7rUM :: Constraint)
                         ~R# (Data.Typeable.Internal.TypeRep e_a7rUM :: *)))
      of {
        False -> GHC.Base.Nothing @ e_a7rUM;
        True ->
          (GHC.Base.Just @ e1_a7sec e2_a7rUN)
          `cast` ((Maybe (UnsafeCo representational e1_a7sec e_a7rUM))_R
                  :: (Maybe e1_a7sec :: *) ~R# (Maybe e_a7rUM :: *))
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$dmtoException
  :: forall e. Exception e => e -> SomeException
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Exception.SomeException}]
GHC.Exception.$dmtoException = GHC.Exception.SomeException

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
GHC.Exception.$bErrorCall :: String -> ErrorCall
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (err_a7rV0 [Occ=Once] :: String) ->
                 GHC.Exception.ErrorCallWithLocation
                   err_a7rV0 (GHC.Types.[] @ Char)}]
GHC.Exception.$bErrorCall
  = \ (err_a7rV0 :: String) ->
      GHC.Exception.ErrorCallWithLocation err_a7rV0 (GHC.Types.[] @ Char)

-- RHS size: {terms: 8, types: 11, coercions: 0, joins: 0/0}
throw :: forall e a. Exception e => e -> a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<B,1*U(A,A,1*C1(U),A,A)><B,U>x,
 Unf=OtherCon []]
throw
  = \ (@ e_a7sdN)
      (@ a_a7sdO)
      ($dException_a7sdQ :: Exception e_a7sdN)
      (e1_a7rUY :: e_a7sdN) ->
      raise#
        @ SomeException
        @ 'LiftedRep
        @ a_a7sdO
        (toException @ e_a7sdN $dException_a7sdQ e1_a7rUY)

-- RHS size: {terms: 10, types: 11, coercions: 0, joins: 0/0}
GHC.Exception.$mErrorCall
  :: forall (r :: TYPE rep).
     ErrorCall -> (String -> r) -> (Void# -> r) -> r
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U(U,A)><C(S),1*C1(U)><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (rep_a7sdD :: RuntimeRep))
                 (@ (r_a7sdE :: TYPE rep_a7sdD))
                 (scrut_a7sdG [Occ=Once!] :: ErrorCall)
                 (cont_a7sdH [Occ=Once!] :: String -> r_a7sdE)
                 _ [Occ=Dead] ->
                 case scrut_a7sdG of
                 { ErrorCallWithLocation err_a7rUZ [Occ=Once] _ [Occ=Dead] ->
                 cont_a7sdH err_a7rUZ
                 }}]
GHC.Exception.$mErrorCall
  = \ (@ (rep_a7sdD :: RuntimeRep))
      (@ (r_a7sdE :: TYPE rep_a7sdD))
      (scrut_a7sdG :: ErrorCall)
      (cont_a7sdH :: String -> r_a7sdE)
      _ [Occ=Dead] ->
      case scrut_a7sdG of { ErrorCallWithLocation err_a7rUZ ds_d7slG ->
      cont_a7sdH err_a7rUZ
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.errorCallWithCallStackException12 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
GHC.Exception.errorCallWithCallStackException12
  = "CallStack (from -prof):"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.errorCallWithCallStackException11 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Exception.errorCallWithCallStackException11
  = unpackCString# GHC.Exception.errorCallWithCallStackException12

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.errorCallWithCallStackException5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Exception.errorCallWithCallStackException5 = "  "#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.errorCallWithCallStackException10 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Exception.errorCallWithCallStackException10
  = unpackCString# GHC.Exception.errorCallWithCallStackException5

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.Exception.errorCallWithCallStackException9 :: [Char] -> [Char]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.Exception.errorCallWithCallStackException9
  = ++ @ Char GHC.Exception.errorCallWithCallStackException10

-- RHS size: {terms: 13, types: 16, coercions: 0, joins: 0/0}
showCCSStack :: [String] -> [String]
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30] 90 40}]
showCCSStack
  = \ (ds_d7slc :: [String]) ->
      case ds_d7slc of wild_X2e {
        [] -> GHC.Types.[] @ String;
        : ipv_s7stF ipv1_s7stG ->
          GHC.Types.:
            @ [Char]
            GHC.Exception.errorCallWithCallStackException11
            (map
               @ [Char]
               @ [Char]
               GHC.Exception.errorCallWithCallStackException9
               (GHC.List.reverse1 @ String wild_X2e (GHC.Types.[] @ String)))
      }

-- RHS size: {terms: 74, types: 9, coercions: 0, joins: 0/0}
GHC.Exception.$fOrdArithException_$ccompare
  :: ArithException -> ArithException -> Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [270 320] 320 260}]
GHC.Exception.$fOrdArithException_$ccompare
  = \ (a_a7s9T :: ArithException) (b_a7s9U :: ArithException) ->
      case a_a7s9T of {
        Overflow ->
          case b_a7s9U of {
            Overflow -> GHC.Types.EQ;
            Underflow -> GHC.Types.LT;
            LossOfPrecision -> GHC.Types.LT;
            DivideByZero -> GHC.Types.LT;
            Denormal -> GHC.Types.LT;
            RatioZeroDenominator -> GHC.Types.LT
          };
        Underflow ->
          case b_a7s9U of {
            Overflow -> GHC.Types.GT;
            Underflow -> GHC.Types.EQ;
            LossOfPrecision -> GHC.Types.LT;
            DivideByZero -> GHC.Types.LT;
            Denormal -> GHC.Types.LT;
            RatioZeroDenominator -> GHC.Types.LT
          };
        LossOfPrecision ->
          case b_a7s9U of {
            __DEFAULT -> GHC.Types.GT;
            LossOfPrecision -> GHC.Types.EQ;
            DivideByZero -> GHC.Types.LT;
            Denormal -> GHC.Types.LT;
            RatioZeroDenominator -> GHC.Types.LT
          };
        DivideByZero ->
          case b_a7s9U of {
            __DEFAULT -> GHC.Types.GT;
            DivideByZero -> GHC.Types.EQ;
            Denormal -> GHC.Types.LT;
            RatioZeroDenominator -> GHC.Types.LT
          };
        Denormal ->
          case b_a7s9U of {
            __DEFAULT -> GHC.Types.GT;
            Denormal -> GHC.Types.EQ;
            RatioZeroDenominator -> GHC.Types.LT
          };
        RatioZeroDenominator ->
          case b_a7s9U of {
            __DEFAULT -> GHC.Types.GT;
            RatioZeroDenominator -> GHC.Types.EQ
          }
      }

-- RHS size: {terms: 64, types: 9, coercions: 0, joins: 0/0}
GHC.Exception.$fOrdArithException_$c<
  :: ArithException -> ArithException -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [220 270] 270 210}]
GHC.Exception.$fOrdArithException_$c<
  = \ (a_a7s9X :: ArithException) (b_a7s9Y :: ArithException) ->
      case a_a7s9X of {
        Overflow ->
          case b_a7s9Y of {
            Overflow -> GHC.Types.False;
            Underflow -> GHC.Types.True;
            LossOfPrecision -> GHC.Types.True;
            DivideByZero -> GHC.Types.True;
            Denormal -> GHC.Types.True;
            RatioZeroDenominator -> GHC.Types.True
          };
        Underflow ->
          case b_a7s9Y of {
            __DEFAULT -> GHC.Types.False;
            LossOfPrecision -> GHC.Types.True;
            DivideByZero -> GHC.Types.True;
            Denormal -> GHC.Types.True;
            RatioZeroDenominator -> GHC.Types.True
          };
        LossOfPrecision ->
          case b_a7s9Y of {
            __DEFAULT -> GHC.Types.False;
            DivideByZero -> GHC.Types.True;
            Denormal -> GHC.Types.True;
            RatioZeroDenominator -> GHC.Types.True
          };
        DivideByZero ->
          case b_a7s9Y of {
            __DEFAULT -> GHC.Types.False;
            Denormal -> GHC.Types.True;
            RatioZeroDenominator -> GHC.Types.True
          };
        Denormal ->
          case b_a7s9Y of {
            __DEFAULT -> GHC.Types.False;
            RatioZeroDenominator -> GHC.Types.True
          };
        RatioZeroDenominator ->
          case b_a7s9Y of { __DEFAULT -> GHC.Types.False }
      }

-- RHS size: {terms: 64, types: 9, coercions: 0, joins: 0/0}
GHC.Exception.$fOrdArithException_$c<=
  :: ArithException -> ArithException -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [270 220] 270 210}]
GHC.Exception.$fOrdArithException_$c<=
  = \ (a_a7sa1 :: ArithException) (b_a7sa2 :: ArithException) ->
      case b_a7sa2 of {
        Overflow ->
          case a_a7sa1 of {
            Overflow -> GHC.Types.True;
            Underflow -> GHC.Types.False;
            LossOfPrecision -> GHC.Types.False;
            DivideByZero -> GHC.Types.False;
            Denormal -> GHC.Types.False;
            RatioZeroDenominator -> GHC.Types.False
          };
        Underflow ->
          case a_a7sa1 of {
            __DEFAULT -> GHC.Types.True;
            LossOfPrecision -> GHC.Types.False;
            DivideByZero -> GHC.Types.False;
            Denormal -> GHC.Types.False;
            RatioZeroDenominator -> GHC.Types.False
          };
        LossOfPrecision ->
          case a_a7sa1 of {
            __DEFAULT -> GHC.Types.True;
            DivideByZero -> GHC.Types.False;
            Denormal -> GHC.Types.False;
            RatioZeroDenominator -> GHC.Types.False
          };
        DivideByZero ->
          case a_a7sa1 of {
            __DEFAULT -> GHC.Types.True;
            Denormal -> GHC.Types.False;
            RatioZeroDenominator -> GHC.Types.False
          };
        Denormal ->
          case a_a7sa1 of {
            __DEFAULT -> GHC.Types.True;
            RatioZeroDenominator -> GHC.Types.False
          };
        RatioZeroDenominator ->
          case a_a7sa1 of { __DEFAULT -> GHC.Types.True }
      }

-- RHS size: {terms: 51, types: 8, coercions: 0, joins: 0/0}
GHC.Exception.$fOrdArithException_$cmax
  :: ArithException -> ArithException -> ArithException
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [200 170] 210 150}]
GHC.Exception.$fOrdArithException_$cmax
  = \ (x_a55d :: ArithException) (y_a55e :: ArithException) ->
      case y_a55e of {
        Overflow -> x_a55d;
        Underflow ->
          case x_a55d of {
            __DEFAULT -> GHC.Exception.Underflow;
            LossOfPrecision -> GHC.Exception.LossOfPrecision;
            DivideByZero -> GHC.Exception.DivideByZero;
            Denormal -> GHC.Exception.Denormal;
            RatioZeroDenominator -> GHC.Exception.RatioZeroDenominator
          };
        LossOfPrecision ->
          case x_a55d of {
            __DEFAULT -> GHC.Exception.LossOfPrecision;
            DivideByZero -> GHC.Exception.DivideByZero;
            Denormal -> GHC.Exception.Denormal;
            RatioZeroDenominator -> GHC.Exception.RatioZeroDenominator
          };
        DivideByZero ->
          case x_a55d of {
            __DEFAULT -> GHC.Exception.DivideByZero;
            Denormal -> GHC.Exception.Denormal;
            RatioZeroDenominator -> GHC.Exception.RatioZeroDenominator
          };
        Denormal ->
          case x_a55d of {
            __DEFAULT -> GHC.Exception.Denormal;
            RatioZeroDenominator -> GHC.Exception.RatioZeroDenominator
          };
        RatioZeroDenominator ->
          case x_a55d of { __DEFAULT -> GHC.Exception.RatioZeroDenominator }
      }

-- RHS size: {terms: 64, types: 9, coercions: 0, joins: 0/0}
GHC.Exception.$fOrdArithException_$c>=
  :: ArithException -> ArithException -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [220 270] 270 210}]
GHC.Exception.$fOrdArithException_$c>=
  = \ (a_a7sa5 :: ArithException) (b_a7sa6 :: ArithException) ->
      case a_a7sa5 of {
        Overflow ->
          case b_a7sa6 of {
            Overflow -> GHC.Types.True;
            Underflow -> GHC.Types.False;
            LossOfPrecision -> GHC.Types.False;
            DivideByZero -> GHC.Types.False;
            Denormal -> GHC.Types.False;
            RatioZeroDenominator -> GHC.Types.False
          };
        Underflow ->
          case b_a7sa6 of {
            __DEFAULT -> GHC.Types.True;
            LossOfPrecision -> GHC.Types.False;
            DivideByZero -> GHC.Types.False;
            Denormal -> GHC.Types.False;
            RatioZeroDenominator -> GHC.Types.False
          };
        LossOfPrecision ->
          case b_a7sa6 of {
            __DEFAULT -> GHC.Types.True;
            DivideByZero -> GHC.Types.False;
            Denormal -> GHC.Types.False;
            RatioZeroDenominator -> GHC.Types.False
          };
        DivideByZero ->
          case b_a7sa6 of {
            __DEFAULT -> GHC.Types.True;
            Denormal -> GHC.Types.False;
            RatioZeroDenominator -> GHC.Types.False
          };
        Denormal ->
          case b_a7sa6 of {
            __DEFAULT -> GHC.Types.True;
            RatioZeroDenominator -> GHC.Types.False
          };
        RatioZeroDenominator ->
          case b_a7sa6 of { __DEFAULT -> GHC.Types.True }
      }

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
GHC.Exception.$fOrdArithException_$c>
  :: ArithException -> ArithException -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (a_a7sa3 [Occ=Once] :: ArithException)
                 (b_a7sa4 [Occ=Once] :: ArithException) ->
                 GHC.Exception.$fOrdArithException_$c< b_a7sa4 a_a7sa3}]
GHC.Exception.$fOrdArithException_$c>
  = \ (a_a7sa3 :: ArithException) (b_a7sa4 :: ArithException) ->
      GHC.Exception.$fOrdArithException_$c< b_a7sa4 a_a7sa3

-- RHS size: {terms: 51, types: 8, coercions: 0, joins: 0/0}
GHC.Exception.$fOrdArithException_$cmin
  :: ArithException -> ArithException -> ArithException
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [200 170] 210 110}]
GHC.Exception.$fOrdArithException_$cmin
  = \ (x_a55m :: ArithException) (y_a55n :: ArithException) ->
      case y_a55n of {
        Overflow -> case x_a55m of { __DEFAULT -> GHC.Exception.Overflow };
        Underflow ->
          case x_a55m of wild1_X68 {
            __DEFAULT -> wild1_X68;
            LossOfPrecision -> GHC.Exception.Underflow;
            DivideByZero -> GHC.Exception.Underflow;
            Denormal -> GHC.Exception.Underflow;
            RatioZeroDenominator -> GHC.Exception.Underflow
          };
        LossOfPrecision ->
          case x_a55m of wild1_X68 {
            __DEFAULT -> wild1_X68;
            DivideByZero -> GHC.Exception.LossOfPrecision;
            Denormal -> GHC.Exception.LossOfPrecision;
            RatioZeroDenominator -> GHC.Exception.LossOfPrecision
          };
        DivideByZero ->
          case x_a55m of wild1_X68 {
            __DEFAULT -> wild1_X68;
            Denormal -> GHC.Exception.DivideByZero;
            RatioZeroDenominator -> GHC.Exception.DivideByZero
          };
        Denormal ->
          case x_a55m of wild1_X68 {
            __DEFAULT -> wild1_X68;
            RatioZeroDenominator -> GHC.Exception.Denormal
          };
        RatioZeroDenominator -> x_a55m
      }

-- RHS size: {terms: 9, types: 1, coercions: 0, joins: 0/0}
GHC.Exception.$fOrdArithException [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord ArithException
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: ArithException
                         GHC.Exception.$fEqArithException
                         GHC.Exception.$fOrdArithException_$ccompare
                         GHC.Exception.$fOrdArithException_$c<
                         GHC.Exception.$fOrdArithException_$c<=
                         GHC.Exception.$fOrdArithException_$c>
                         GHC.Exception.$fOrdArithException_$c>=
                         GHC.Exception.$fOrdArithException_$cmax
                         GHC.Exception.$fOrdArithException_$cmin]
GHC.Exception.$fOrdArithException
  = GHC.Classes.C:Ord
      @ ArithException
      GHC.Exception.$fEqArithException
      GHC.Exception.$fOrdArithException_$ccompare
      GHC.Exception.$fOrdArithException_$c<
      GHC.Exception.$fOrdArithException_$c<=
      GHC.Exception.$fOrdArithException_$c>
      GHC.Exception.$fOrdArithException_$c>=
      GHC.Exception.$fOrdArithException_$cmax
      GHC.Exception.$fOrdArithException_$cmin

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Exception.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Exception.$trModule3
  = GHC.Types.TrNameS GHC.Exception.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Exception.$trModule2 = "GHC.Exception"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Exception.$trModule1
  = GHC.Types.TrNameS GHC.Exception.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Exception.$trModule
  = GHC.Types.Module
      GHC.Exception.$trModule3 GHC.Exception.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r7t8y :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_r7t8y
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcConstraint (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r7t8z :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep1_r7t8z
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcChar (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep2_r7t8A :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep2_r7t8A
  = GHC.Types.: @ KindRep $krep1_r7t8z (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep3_r7t8B :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep3_r7t8B
  = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep2_r7t8A

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tcException1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Exception.$tcException1
  = GHC.Types.KindRepFun GHC.Types.krep$* $krep_r7t8y

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep4_r7t8C :: KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep4_r7t8C = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep5_r7t8D :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep5_r7t8D = GHC.Types.KindRepFun $krep4_r7t8C $krep3_r7t8B

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep6_r7t8E :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep6_r7t8E
  = GHC.Types.: @ KindRep $krep4_r7t8C (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7_r7t8F :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep7_r7t8F
  = GHC.Types.KindRepTyConApp GHC.Base.$tcMaybe $krep6_r7t8E

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep8_r7t8G :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep8_r7t8G = GHC.Types.: @ KindRep GHC.Types.krep$* $krep6_r7t8E

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep9_r7t8H :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep9_r7t8H
  = GHC.Types.KindRepTyConApp
      Data.Typeable.Internal.$tcTypeable $krep8_r7t8G

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep10_r7t8I :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep10_r7t8I
  = GHC.Types.KindRepTyConApp GHC.Show.$tcShow $krep6_r7t8E

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionSomeException3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Exception.$fExceptionSomeException3 = "SomeException"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionSomeException2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Exception.$fExceptionSomeException2
  = GHC.Types.TrNameS GHC.Exception.$fExceptionSomeException3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tcSomeException :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Exception.$tcSomeException
  = GHC.Types.TyCon
      13267649630904555636##
      2959581124447004473##
      GHC.Exception.$trModule
      GHC.Exception.$fExceptionSomeException2
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep11_r7t8J :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep11_r7t8J
  = GHC.Types.KindRepTyConApp
      GHC.Exception.$tcSomeException (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep12_r7t8K :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep12_r7t8K = GHC.Types.KindRepFun $krep4_r7t8C $krep11_r7t8J

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep13_r7t8L :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep13_r7t8L = GHC.Types.KindRepFun $krep11_r7t8J $krep7_r7t8F

-- RHS size: {terms: 16, types: 33, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionSomeException1
  :: Data.Typeable.Internal.TypeRep SomeException
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 100 60}]
GHC.Exception.$fExceptionSomeException1
  = case Data.Typeable.Internal.$wmkTrCon
           @ *
           @ SomeException
           13267649630904555636##
           2959581124447004473##
           GHC.Exception.$trModule
           GHC.Exception.$fExceptionSomeException2
           0#
           GHC.Types.krep$*
           (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep)
    of
    { (# ww8_i7soj, ww9_i7sok, ww10_i7sol, ww11_i7som, ww12_i7son #) ->
    Data.Typeable.Internal.TrTyCon
      @ *
      @ SomeException
      ww8_i7soj
      ww9_i7sok
      ww10_i7sol
      ww11_i7som
      ww12_i7son
    }

-- RHS size: {terms: 6, types: 2, coercions: 5, joins: 0/0}
GHC.Exception.$fExceptionSomeException [InlPrag=NOUSERINLINE CONLIKE]
  :: Exception SomeException
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Exception.C:Exception TYPE: SomeException
                                 GHC.Exception.$fExceptionSomeException1
                                 `cast` (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <SomeException>_N
                                         :: (Data.Typeable.Internal.TypeRep SomeException :: *)
                                            ~R# (Typeable SomeException :: Constraint))
                                 GHC.Exception.$fShowSomeException
                                 GHC.Exception.$fExceptionSomeException_$ctoException
                                 GHC.Base.Just @ SomeException
                                 GHC.Exception.$fExceptionSomeException_$cdisplayException]
GHC.Exception.$fExceptionSomeException
  = GHC.Exception.C:Exception
      @ SomeException
      (GHC.Exception.$fExceptionSomeException1
       `cast` (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <SomeException>_N
               :: (Data.Typeable.Internal.TypeRep SomeException :: *)
                  ~R# (Typeable SomeException :: Constraint)))
      GHC.Exception.$fShowSomeException
      GHC.Exception.$fExceptionSomeException_$ctoException
      (GHC.Base.Just @ SomeException)
      GHC.Exception.$fExceptionSomeException_$cdisplayException

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tcException3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Exception.$tcException3 = "Exception"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tcException2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Exception.$tcException2
  = GHC.Types.TrNameS GHC.Exception.$tcException3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tcException :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Exception.$tcException
  = GHC.Types.TyCon
      5005890060182917952##
      3990091377913498827##
      GHC.Exception.$trModule
      GHC.Exception.$tcException2
      0#
      GHC.Exception.$tcException1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep14_r7t8M :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep14_r7t8M
  = GHC.Types.KindRepTyConApp GHC.Exception.$tcException $krep6_r7t8E

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep15_r7t8N :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep15_r7t8N = GHC.Types.KindRepFun $krep5_r7t8D $krep14_r7t8M

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep16_r7t8O :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep16_r7t8O = GHC.Types.KindRepFun $krep13_r7t8L $krep15_r7t8N

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep17_r7t8P :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep17_r7t8P = GHC.Types.KindRepFun $krep12_r7t8K $krep16_r7t8O

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep18_r7t8Q :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep18_r7t8Q = GHC.Types.KindRepFun $krep10_r7t8I $krep17_r7t8P

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'C:Exception1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Exception.$tc'C:Exception1
  = GHC.Types.KindRepFun $krep9_r7t8H $krep18_r7t8Q

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'C:Exception3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Exception.$tc'C:Exception3 = "'C:Exception"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'C:Exception2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Exception.$tc'C:Exception2
  = GHC.Types.TrNameS GHC.Exception.$tc'C:Exception3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'C:Exception :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Exception.$tc'C:Exception
  = GHC.Types.TyCon
      10820889188949131006##
      4069342579395079435##
      GHC.Exception.$trModule
      GHC.Exception.$tc'C:Exception2
      1#
      GHC.Exception.$tc'C:Exception1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'SomeException1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Exception.$tc'SomeException1
  = GHC.Types.KindRepFun $krep14_r7t8M $krep12_r7t8K

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'SomeException3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Exception.$tc'SomeException3 = "'SomeException"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'SomeException2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Exception.$tc'SomeException2
  = GHC.Types.TrNameS GHC.Exception.$tc'SomeException3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'SomeException :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Exception.$tc'SomeException
  = GHC.Types.TyCon
      16790271558916100413##
      1524061796422226345##
      GHC.Exception.$trModule
      GHC.Exception.$tc'SomeException2
      1#
      GHC.Exception.$tc'SomeException1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionErrorCall4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Exception.$fExceptionErrorCall4 = "ErrorCall"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionErrorCall3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Exception.$fExceptionErrorCall3
  = GHC.Types.TrNameS GHC.Exception.$fExceptionErrorCall4

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tcErrorCall :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Exception.$tcErrorCall
  = GHC.Types.TyCon
      4106747399780464988##
      1398564497631027702##
      GHC.Exception.$trModule
      GHC.Exception.$fExceptionErrorCall3
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep19_r7t8R :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep19_r7t8R
  = GHC.Types.KindRepTyConApp
      GHC.Exception.$tcErrorCall (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep20_r7t8S :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep20_r7t8S = GHC.Types.KindRepFun $krep3_r7t8B $krep19_r7t8R

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'ErrorCallWithLocation1 [InlPrag=NOUSERINLINE[~]]
  :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Exception.$tc'ErrorCallWithLocation1
  = GHC.Types.KindRepFun $krep3_r7t8B $krep20_r7t8S

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'ErrorCallWithLocation3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
GHC.Exception.$tc'ErrorCallWithLocation3
  = "'ErrorCallWithLocation"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'ErrorCallWithLocation2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Exception.$tc'ErrorCallWithLocation2
  = GHC.Types.TrNameS GHC.Exception.$tc'ErrorCallWithLocation3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'ErrorCallWithLocation :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Exception.$tc'ErrorCallWithLocation
  = GHC.Types.TyCon
      14789594717732302892##
      17317233711857548947##
      GHC.Exception.$trModule
      GHC.Exception.$tc'ErrorCallWithLocation2
      0#
      GHC.Exception.$tc'ErrorCallWithLocation1

-- RHS size: {terms: 16, types: 33, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionErrorCall2
  :: Data.Typeable.Internal.TypeRep ErrorCall
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 100 60}]
GHC.Exception.$fExceptionErrorCall2
  = case Data.Typeable.Internal.$wmkTrCon
           @ *
           @ ErrorCall
           4106747399780464988##
           1398564497631027702##
           GHC.Exception.$trModule
           GHC.Exception.$fExceptionErrorCall3
           0#
           GHC.Types.krep$*
           (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep)
    of
    { (# ww8_i7soj, ww9_i7sok, ww10_i7sol, ww11_i7som, ww12_i7son #) ->
    Data.Typeable.Internal.TrTyCon
      @ *
      @ ErrorCall
      ww8_i7soj
      ww9_i7sok
      ww10_i7sol
      ww11_i7som
      ww12_i7son
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionArithException16 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Exception.$fExceptionArithException16 = "ArithException"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionArithException15 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Exception.$fExceptionArithException15
  = GHC.Types.TrNameS GHC.Exception.$fExceptionArithException16

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tcArithException :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Exception.$tcArithException
  = GHC.Types.TyCon
      11275459110071720610##
      9614411694476093403##
      GHC.Exception.$trModule
      GHC.Exception.$fExceptionArithException15
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.Exception.$tc'Denormal1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
GHC.Exception.$tc'Denormal1
  = GHC.Types.KindRepTyConApp
      GHC.Exception.$tcArithException (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'Overflow2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Exception.$tc'Overflow2 = "'Overflow"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'Overflow1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Exception.$tc'Overflow1
  = GHC.Types.TrNameS GHC.Exception.$tc'Overflow2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'Overflow :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Exception.$tc'Overflow
  = GHC.Types.TyCon
      868785644779029835##
      15802889491790460831##
      GHC.Exception.$trModule
      GHC.Exception.$tc'Overflow1
      0#
      GHC.Exception.$tc'Denormal1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'Underflow2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Exception.$tc'Underflow2 = "'Underflow"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'Underflow1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Exception.$tc'Underflow1
  = GHC.Types.TrNameS GHC.Exception.$tc'Underflow2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'Underflow :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Exception.$tc'Underflow
  = GHC.Types.TyCon
      12747416996077452468##
      11539058234473019035##
      GHC.Exception.$trModule
      GHC.Exception.$tc'Underflow1
      0#
      GHC.Exception.$tc'Denormal1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'LossOfPrecision2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Exception.$tc'LossOfPrecision2 = "'LossOfPrecision"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'LossOfPrecision1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Exception.$tc'LossOfPrecision1
  = GHC.Types.TrNameS GHC.Exception.$tc'LossOfPrecision2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'LossOfPrecision :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Exception.$tc'LossOfPrecision
  = GHC.Types.TyCon
      6720322370825216637##
      1452601476582167815##
      GHC.Exception.$trModule
      GHC.Exception.$tc'LossOfPrecision1
      0#
      GHC.Exception.$tc'Denormal1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'DivideByZero2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Exception.$tc'DivideByZero2 = "'DivideByZero"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'DivideByZero1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Exception.$tc'DivideByZero1
  = GHC.Types.TrNameS GHC.Exception.$tc'DivideByZero2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'DivideByZero :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Exception.$tc'DivideByZero
  = GHC.Types.TyCon
      17029085746322105003##
      1338659094893400307##
      GHC.Exception.$trModule
      GHC.Exception.$tc'DivideByZero1
      0#
      GHC.Exception.$tc'Denormal1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'Denormal3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Exception.$tc'Denormal3 = "'Denormal"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'Denormal2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Exception.$tc'Denormal2
  = GHC.Types.TrNameS GHC.Exception.$tc'Denormal3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'Denormal :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Exception.$tc'Denormal
  = GHC.Types.TyCon
      3563997708427691429##
      10171683790716248215##
      GHC.Exception.$trModule
      GHC.Exception.$tc'Denormal2
      0#
      GHC.Exception.$tc'Denormal1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'RatioZeroDenominator2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 70 0}]
GHC.Exception.$tc'RatioZeroDenominator2 = "'RatioZeroDenominator"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'RatioZeroDenominator1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Exception.$tc'RatioZeroDenominator1
  = GHC.Types.TrNameS GHC.Exception.$tc'RatioZeroDenominator2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.$tc'RatioZeroDenominator :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Exception.$tc'RatioZeroDenominator
  = GHC.Types.TyCon
      12115498985276514171##
      17178069790958498690##
      GHC.Exception.$trModule
      GHC.Exception.$tc'RatioZeroDenominator1
      0#
      GHC.Exception.$tc'Denormal1

-- RHS size: {terms: 16, types: 33, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionArithException14
  :: Data.Typeable.Internal.TypeRep ArithException
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 100 60}]
GHC.Exception.$fExceptionArithException14
  = case Data.Typeable.Internal.$wmkTrCon
           @ *
           @ ArithException
           11275459110071720610##
           9614411694476093403##
           GHC.Exception.$trModule
           GHC.Exception.$fExceptionArithException15
           0#
           GHC.Types.krep$*
           (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep)
    of
    { (# ww8_i7soj, ww9_i7sok, ww10_i7sol, ww11_i7som, ww12_i7son #) ->
    Data.Typeable.Internal.TrTyCon
      @ *
      @ ArithException
      ww8_i7soj
      ww9_i7sok
      ww10_i7sol
      ww11_i7som
      ww12_i7son
    }

-- RHS size: {terms: 14, types: 17, coercions: 9, joins: 0/0}
GHC.Exception.$fExceptionErrorCall_$cfromException
  :: SomeException -> Maybe ErrorCall
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 90 30}]
GHC.Exception.$fExceptionErrorCall_$cfromException
  = \ (ds_d7slP :: SomeException) ->
      case ds_d7slP of
      { SomeException @ e_a7sec $dException_a7sed e1_a7rUN ->
      case Data.Typeable.Internal.sameTypeRep
             @ *
             @ *
             @ e_a7sec
             @ ErrorCall
             ((GHC.Exception.$p1Exception @ e_a7sec $dException_a7sed)
              `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <e_a7sec>_N
                      :: (Typeable e_a7sec :: Constraint)
                         ~R# (Data.Typeable.Internal.TypeRep e_a7sec :: *)))
             GHC.Exception.$fExceptionErrorCall2
      of {
        False -> GHC.Base.Nothing @ ErrorCall;
        True ->
          (GHC.Base.Just @ e_a7sec e1_a7rUN)
          `cast` ((Maybe (UnsafeCo representational e_a7sec ErrorCall))_R
                  :: (Maybe e_a7sec :: *) ~R# (Maybe ErrorCall :: *))
      }
      }

Rec {
-- RHS size: {terms: 6, types: 1, coercions: 5, joins: 0/0}
GHC.Exception.$fExceptionErrorCall [InlPrag=NOUSERINLINE CONLIKE]
  :: Exception ErrorCall
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Exception.C:Exception TYPE: ErrorCall
                                 GHC.Exception.$fExceptionErrorCall2
                                 `cast` (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <ErrorCall>_N
                                         :: (Data.Typeable.Internal.TypeRep ErrorCall :: *)
                                            ~R# (Typeable ErrorCall :: Constraint))
                                 GHC.Exception.$fShowErrorCall
                                 GHC.Exception.$fExceptionErrorCall_$ctoException
                                 GHC.Exception.$fExceptionErrorCall_$cfromException
                                 GHC.Exception.$fExceptionErrorCall_$cshow]
GHC.Exception.$fExceptionErrorCall
  = GHC.Exception.C:Exception
      @ ErrorCall
      (GHC.Exception.$fExceptionErrorCall2
       `cast` (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <ErrorCall>_N
               :: (Data.Typeable.Internal.TypeRep ErrorCall :: *)
                  ~R# (Typeable ErrorCall :: Constraint)))
      GHC.Exception.$fShowErrorCall
      GHC.Exception.$fExceptionErrorCall_$ctoException
      GHC.Exception.$fExceptionErrorCall_$cfromException
      GHC.Exception.$fExceptionErrorCall_$cshow

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionErrorCall_$ctoException [Occ=LoopBreaker]
  :: ErrorCall -> SomeException
[GblId, Arity=1, Unf=OtherCon []]
GHC.Exception.$fExceptionErrorCall_$ctoException
  = GHC.Exception.SomeException
      @ ErrorCall GHC.Exception.$fExceptionErrorCall
end Rec }

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
errorCallException :: String -> SomeException
[GblId,
 Arity=1,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (s_a7rV1 [Occ=Once] :: String) ->
                 GHC.Exception.$fExceptionErrorCall_$ctoException
                   (GHC.Exception.ErrorCallWithLocation
                      s_a7rV1 (GHC.Types.[] @ Char))}]
errorCallException
  = \ (s_a7rV1 :: String) ->
      GHC.Exception.$fExceptionErrorCall_$ctoException
        (GHC.Exception.ErrorCallWithLocation s_a7rV1 (GHC.Types.[] @ Char))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.errorCallWithCallStackException3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Exception.errorCallWithCallStackException3 = ":"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.errorCallWithCallStackException2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Exception.errorCallWithCallStackException2 = " in "#

-- RHS size: {terms: 44, types: 38, coercions: 0, joins: 0/0}
GHC.Exception.$wprettySrcLoc [InlPrag=NOUSERINLINE[0]]
  :: [Char] -> [Char] -> [Char] -> Int -> Int -> String
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,1*U><L,U><S,1*U><L,1*U(U)><L,1*U(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 0 20 20] 380 0}]
GHC.Exception.$wprettySrcLoc
  = \ (ww_s7sVB :: [Char])
      (ww1_s7sVC :: [Char])
      (ww2_s7sVD :: [Char])
      (ww3_s7sVE :: Int)
      (ww4_s7sVF :: Int) ->
      ++
        @ Char
        ww2_s7sVD
        (unpackAppendCString#
           GHC.Exception.errorCallWithCallStackException3
           (case ww3_s7sVE of { I# ww6_i7svk ->
            case GHC.Show.$wshowSignedInt 0# ww6_i7svk (GHC.Types.[] @ Char) of
            { (# ww8_i7svo, ww9_i7svp #) ->
            ++
              @ Char
              (GHC.Types.: @ Char ww8_i7svo ww9_i7svp)
              (unpackAppendCString#
                 GHC.Exception.errorCallWithCallStackException3
                 (case ww4_s7sVF of { I# ww11_X7sB3 ->
                  case GHC.Show.$wshowSignedInt 0# ww11_X7sB3 (GHC.Types.[] @ Char)
                  of
                  { (# ww13_X7sBc, ww14_X7sBe #) ->
                  ++
                    @ Char
                    (GHC.Types.: @ Char ww13_X7sBc ww14_X7sBe)
                    (unpackAppendCString#
                       GHC.Exception.errorCallWithCallStackException2
                       (++
                          @ Char
                          ww_s7sVB
                          (unpackAppendCString#
                             GHC.Exception.errorCallWithCallStackException3 ww1_s7sVC)))
                  }
                  }))
            }
            }))

-- RHS size: {terms: 10, types: 12, coercions: 0, joins: 0/0}
prettySrcLoc [InlPrag=NOUSERINLINE[0]] :: SrcLoc -> String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLLL),1*U(1*U,U,1*U,1*U(U),1*U(U),A,A)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s7sVy [Occ=Once!] :: SrcLoc) ->
                 case w_s7sVy of
                 { SrcLoc ww1_s7sVB [Occ=Once] ww2_s7sVC [Occ=Once]
                          ww3_s7sVD [Occ=Once] ww4_s7sVE [Occ=Once] ww5_s7sVF [Occ=Once]
                          _ [Occ=Dead] _ [Occ=Dead] ->
                 GHC.Exception.$wprettySrcLoc
                   ww1_s7sVB ww2_s7sVC ww3_s7sVD ww4_s7sVE ww5_s7sVF
                 }}]
prettySrcLoc
  = \ (w_s7sVy :: SrcLoc) ->
      case w_s7sVy of
      { SrcLoc ww1_s7sVB ww2_s7sVC ww3_s7sVD ww4_s7sVE ww5_s7sVF
               ww6_s7sVG ww7_s7sVH ->
      GHC.Exception.$wprettySrcLoc
        ww1_s7sVB ww2_s7sVC ww3_s7sVD ww4_s7sVE ww5_s7sVF
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.errorCallWithCallStackException7 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 90 0}]
GHC.Exception.errorCallWithCallStackException7
  = "CallStack (from HasCallStack):"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.errorCallWithCallStackException6 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Exception.errorCallWithCallStackException6
  = unpackCString# GHC.Exception.errorCallWithCallStackException7

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.errorCallWithCallStackException4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Exception.errorCallWithCallStackException4 = ", called at "#

-- RHS size: {terms: 19, types: 23, coercions: 0, joins: 0/0}
GHC.Exception.errorCallWithCallStackException1
  :: ([Char], SrcLoc) -> [Char]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,1*U(1*U,1*U(1*U,U,1*U,1*U(U),1*U(U),A,A))>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 170 0}]
GHC.Exception.errorCallWithCallStackException1
  = \ (x_i7skM :: ([Char], SrcLoc)) ->
      unpackAppendCString#
        GHC.Exception.errorCallWithCallStackException5
        (case x_i7skM of { (f_a7rVi, loc_a7rVj) ->
         ++
           @ Char
           f_a7rVi
           (unpackAppendCString#
              GHC.Exception.errorCallWithCallStackException4
              (case loc_a7rVj of
               { SrcLoc ww1_s7sVB ww2_s7sVC ww3_s7sVD ww4_s7sVE ww5_s7sVF
                        ww6_s7sVG ww7_s7sVH ->
               GHC.Exception.$wprettySrcLoc
                 ww1_s7sVB ww2_s7sVC ww3_s7sVD ww4_s7sVE ww5_s7sVF
               }))
         })

-- RHS size: {terms: 12, types: 24, coercions: 0, joins: 0/0}
prettyCallStackLines :: CallStack -> [String]
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (cs_a7rVg [Occ=Once] :: CallStack) ->
                 case getCallStack cs_a7rVg of wild_X3M {
                   [] -> GHC.Types.[] @ String;
                   : _ [Occ=Dead] _ [Occ=Dead] ->
                     GHC.Types.:
                       @ [Char]
                       GHC.Exception.errorCallWithCallStackException6
                       (build
                          @ [Char]
                          (\ (@ b1_i7stR)
                             (c_i7stS [Occ=Once, OS=OneShot] :: [Char] -> b1_i7stR -> b1_i7stR)
                             (n_i7stT [Occ=Once, OS=OneShot] :: b1_i7stR) ->
                             foldr
                               @ ([Char], SrcLoc)
                               @ b1_i7stR
                               (mapFB
                                  @ [Char]
                                  @ b1_i7stR
                                  @ ([Char], SrcLoc)
                                  c_i7stS
                                  GHC.Exception.errorCallWithCallStackException1)
                               n_i7stT
                               wild_X3M))
                 }}]
prettyCallStackLines
  = \ (cs_a7rVg :: CallStack) ->
      case getCallStack cs_a7rVg of wild_X3M {
        [] -> GHC.Types.[] @ String;
        : ipv_s7svs ipv1_s7svt ->
          GHC.Types.:
            @ [Char]
            GHC.Exception.errorCallWithCallStackException6
            (map
               @ ([Char], SrcLoc)
               @ [Char]
               GHC.Exception.errorCallWithCallStackException1
               wild_X3M)
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.errorCallWithCallStackException8 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Exception.errorCallWithCallStackException8 = "\n"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Exception.errorCallWithCallStackException_xs :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Exception.errorCallWithCallStackException_xs
  = unpackCString# GHC.Exception.errorCallWithCallStackException8

-- RHS size: {terms: 15, types: 27, coercions: 0, joins: 0/0}
prettyCallStack :: CallStack -> String
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 130 10}]
prettyCallStack
  = \ (x_i7skM :: CallStack) ->
      case getCallStack x_i7skM of wild_X3M {
        [] -> GHC.Types.[] @ Char;
        : ipv_s7svs ipv1_s7svt ->
          Data.OldList.intercalate1
            @ Char
            (GHC.Types.:
               @ [Char]
               GHC.Exception.errorCallWithCallStackException6
               (Data.OldList.prependToAll
                  @ [Char]
                  GHC.Exception.errorCallWithCallStackException_xs
                  (map
                     @ ([Char], SrcLoc)
                     @ [Char]
                     GHC.Exception.errorCallWithCallStackException1
                     wild_X3M)))
      }

-- RHS size: {terms: 64, types: 133, coercions: 3, joins: 0/2}
errorCallWithCallStackException
  :: String -> CallStack -> SomeException
[GblId,
 Arity=2,
 Str=<L,U><L,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 470 0}]
errorCallWithCallStackException
  = \ (s_a7rV2 :: String) (stk_a7rV3 :: CallStack) ->
      case runRW#
             @ ('TupleRep '['TupleRep '[], 'LiftedRep])
             @ (# State# RealWorld, SomeException #)
             (\ (s1_i7svW [OS=OneShot] :: State# RealWorld) ->
                case (currentCallStack
                      `cast` (GHC.Types.N:IO[0] <[String]>_R
                              :: (IO [String] :: *)
                                 ~R# (State# RealWorld -> (# State# RealWorld, [String] #) :: *)))
                       s1_i7svW
                of
                { (# ipv_i7svZ, ipv1_i7sw0 #) ->
                (# ipv_i7svZ,
                   GHC.Exception.$fExceptionErrorCall_$ctoException
                     (GHC.Exception.ErrorCallWithLocation
                        s_a7rV2
                        (let {
                           n_i7sp8 :: [[Char]]
                           [LclId]
                           n_i7sp8
                             = case ipv1_i7sw0 of wild_X2e {
                                 [] -> GHC.Types.[] @ String;
                                 : ipv2_s7stF ipv3_s7stG ->
                                   GHC.Types.:
                                     @ [Char]
                                     GHC.Exception.errorCallWithCallStackException11
                                     (map
                                        @ [Char]
                                        @ [Char]
                                        GHC.Exception.errorCallWithCallStackException9
                                        (GHC.List.reverse1
                                           @ String wild_X2e (GHC.Types.[] @ String)))
                               } } in
                         case getCallStack stk_a7rV3 of wild_X3M {
                           [] ->
                             case n_i7sp8 of {
                               [] -> GHC.Types.[] @ Char;
                               : x_i7sl7 xs1_i7sl8 ->
                                 Data.OldList.intercalate1
                                   @ Char
                                   (GHC.Types.:
                                      @ [Char]
                                      x_i7sl7
                                      (Data.OldList.prependToAll
                                         @ [Char]
                                         GHC.Exception.errorCallWithCallStackException_xs
                                         xs1_i7sl8))
                             };
                           : ipv2_s7svs ipv3_s7svt ->
                             Data.OldList.intercalate1
                               @ Char
                               (GHC.Types.:
                                  @ [Char]
                                  GHC.Exception.errorCallWithCallStackException6
                                  (letrec {
                                     go_i7ska [Occ=LoopBreaker] :: [([Char], SrcLoc)] -> [[Char]]
                                     [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
                                     go_i7ska
                                       = \ (ds_i7skb :: [([Char], SrcLoc)]) ->
                                           case ds_i7skb of {
                                             [] -> n_i7sp8;
                                             : y_i7skg ys_i7skh ->
                                               GHC.Types.:
                                                 @ [Char]
                                                 (GHC.Exception.errorCallWithCallStackException1
                                                    y_i7skg)
                                                 (go_i7ska ys_i7skh)
                                           }; } in
                                   Data.OldList.prependToAll
                                     @ [Char]
                                     GHC.Exception.errorCallWithCallStackException_xs
                                     (go_i7ska wild_X3M)))
                         })) #)
                })
      of
      { (# ipv_i7slw, ipv1_i7slx #) ->
      ipv1_i7slx
      }

-- RHS size: {terms: 14, types: 17, coercions: 9, joins: 0/0}
GHC.Exception.$fExceptionArithException_$cfromException
  :: SomeException -> Maybe ArithException
[GblId,
 Arity=1,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 90 30}]
GHC.Exception.$fExceptionArithException_$cfromException
  = \ (ds_d7slP :: SomeException) ->
      case ds_d7slP of
      { SomeException @ e_a7sec $dException_a7sed e1_a7rUN ->
      case Data.Typeable.Internal.sameTypeRep
             @ *
             @ *
             @ e_a7sec
             @ ArithException
             ((GHC.Exception.$p1Exception @ e_a7sec $dException_a7sed)
              `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <e_a7sec>_N
                      :: (Typeable e_a7sec :: Constraint)
                         ~R# (Data.Typeable.Internal.TypeRep e_a7sec :: *)))
             GHC.Exception.$fExceptionArithException14
      of {
        False -> GHC.Base.Nothing @ ArithException;
        True ->
          (GHC.Base.Just @ e_a7sec e1_a7rUN)
          `cast` ((Maybe
                     (UnsafeCo representational e_a7sec ArithException))_R
                  :: (Maybe e_a7sec :: *) ~R# (Maybe ArithException :: *))
      }
      }

Rec {
-- RHS size: {terms: 6, types: 1, coercions: 5, joins: 0/0}
GHC.Exception.$fExceptionArithException [InlPrag=NOUSERINLINE CONLIKE]
  :: Exception ArithException
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Exception.C:Exception TYPE: ArithException
                                 GHC.Exception.$fExceptionArithException14
                                 `cast` (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <ArithException>_N
                                         :: (Data.Typeable.Internal.TypeRep ArithException :: *)
                                            ~R# (Typeable ArithException :: Constraint))
                                 GHC.Exception.$fShowArithException
                                 GHC.Exception.$fExceptionArithException_$ctoException
                                 GHC.Exception.$fExceptionArithException_$cfromException
                                 GHC.Exception.$fExceptionArithException_$cshow]
GHC.Exception.$fExceptionArithException
  = GHC.Exception.C:Exception
      @ ArithException
      (GHC.Exception.$fExceptionArithException14
       `cast` (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <ArithException>_N
               :: (Data.Typeable.Internal.TypeRep ArithException :: *)
                  ~R# (Typeable ArithException :: Constraint)))
      GHC.Exception.$fShowArithException
      GHC.Exception.$fExceptionArithException_$ctoException
      GHC.Exception.$fExceptionArithException_$cfromException
      GHC.Exception.$fExceptionArithException_$cshow

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.Exception.$fExceptionArithException_$ctoException [Occ=LoopBreaker]
  :: ArithException -> SomeException
[GblId, Arity=1, Unf=OtherCon []]
GHC.Exception.$fExceptionArithException_$ctoException
  = GHC.Exception.SomeException
      @ ArithException GHC.Exception.$fExceptionArithException
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
underflowException :: SomeException
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
underflowException
  = GHC.Exception.$fExceptionArithException_$ctoException
      GHC.Exception.Underflow

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
ratioZeroDenomException :: SomeException
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
ratioZeroDenomException
  = GHC.Exception.$fExceptionArithException_$ctoException
      GHC.Exception.RatioZeroDenominator

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
overflowException :: SomeException
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
overflowException
  = GHC.Exception.$fExceptionArithException_$ctoException
      GHC.Exception.Overflow

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
divZeroException :: SomeException
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
divZeroException
  = GHC.Exception.$fExceptionArithException_$ctoException
      GHC.Exception.DivideByZero


