
==================== Raw Cmm ====================
2018-03-16 16:02:47.411848676 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:02:47.412931288 UTC

[section ""cstring" . GHC.IO.$fShowMaskingState6_bytes" {
     GHC.IO.$fShowMaskingState6_bytes:
         I8[] [85,110,109,97,115,107,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.415319027 UTC

[section ""data" . GHC.IO.$fShowMaskingState5_closure" {
     GHC.IO.$fShowMaskingState5_closure:
         const GHC.IO.$fShowMaskingState5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.$fShowMaskingState5_entry() //  [R1]
         { []
         }
     {offset
       c7EAa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7EAb; else goto c7EAc;
       c7EAb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7EAc: // global
           (_c7EA7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7EA7::I64 == 0) goto c7EA9; else goto c7EA8;
       c7EA9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7EA8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7EA7::I64;
           R2 = GHC.IO.$fShowMaskingState6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.$fShowMaskingState5_info" {
     GHC.IO.$fShowMaskingState5_info:
         const GHC.IO.$fShowMaskingState5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.418923276 UTC

[section ""cstring" . GHC.IO.$fShowMaskingState4_bytes" {
     GHC.IO.$fShowMaskingState4_bytes:
         I8[] [77,97,115,107,101,100,73,110,116,101,114,114,117,112,116,105,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.42107783 UTC

[section ""data" . GHC.IO.$fShowMaskingState3_closure" {
     GHC.IO.$fShowMaskingState3_closure:
         const GHC.IO.$fShowMaskingState3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.$fShowMaskingState3_entry() //  [R1]
         { []
         }
     {offset
       c7EAr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7EAs; else goto c7EAt;
       c7EAs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7EAt: // global
           (_c7EAo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7EAo::I64 == 0) goto c7EAq; else goto c7EAp;
       c7EAq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7EAp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7EAo::I64;
           R2 = GHC.IO.$fShowMaskingState4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.$fShowMaskingState3_info" {
     GHC.IO.$fShowMaskingState3_info:
         const GHC.IO.$fShowMaskingState3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.424609394 UTC

[section ""cstring" . GHC.IO.$fShowMaskingState2_bytes" {
     GHC.IO.$fShowMaskingState2_bytes:
         I8[] [77,97,115,107,101,100,85,110,105,110,116,101,114,114,117,112,116,105,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.426773806 UTC

[section ""data" . GHC.IO.$fShowMaskingState1_closure" {
     GHC.IO.$fShowMaskingState1_closure:
         const GHC.IO.$fShowMaskingState1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.$fShowMaskingState1_entry() //  [R1]
         { []
         }
     {offset
       c7EAI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7EAJ; else goto c7EAK;
       c7EAJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7EAK: // global
           (_c7EAF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7EAF::I64 == 0) goto c7EAH; else goto c7EAG;
       c7EAH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7EAG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7EAF::I64;
           R2 = GHC.IO.$fShowMaskingState2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.$fShowMaskingState1_info" {
     GHC.IO.$fShowMaskingState1_info:
         const GHC.IO.$fShowMaskingState1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.43200757 UTC

[section ""data" . GHC.IO.$w$cshowsPrec_closure" {
     GHC.IO.$w$cshowsPrec_closure:
         const GHC.IO.$w$cshowsPrec_info;
         const 0;
 },
 GHC.IO.$w$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c7EB4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7EB5; else goto c7EB6;
       c7EB5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7EB6: // global
           I64[Sp - 16] = block_c7EAW_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7EBh; else goto c7EAX;
       u7EBh: // global
           call _c7EAW(R1) args: 0, res: 0, upd: 0;
       c7EAX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.$w$cshowsPrec_info" {
     GHC.IO.$w$cshowsPrec_info:
         const GHC.IO.$w$cshowsPrec_entry;
         const 0;
         const 64424509454;
         const 8589934607;
         const S7E2C_srt;
 },
 _c7EAW() //  [R1]
         { []
         }
     {offset
       c7EAW: // global
           _s7DXR::P64 = P64[Sp + 8];
           _c7EB3::P64 = R1 & 7;
           if (_c7EB3::P64 < 3) goto u7EBg; else goto c7EB2;
       u7EBg: // global
           if (_c7EB3::P64 < 2) goto c7EB0; else goto c7EB1;
       c7EB0: // global
           R3 = _s7DXR::P64;
           R2 = GHC.IO.$fShowMaskingState5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7EB1: // global
           R3 = _s7DXR::P64;
           R2 = GHC.IO.$fShowMaskingState3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7EB2: // global
           R3 = _s7DXR::P64;
           R2 = GHC.IO.$fShowMaskingState1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EAW_info" {
     block_c7EAW_info:
         const _c7EAW;
         const 1;
         const 30064771102;
         const S7E2C_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.437636906 UTC

[section ""data" . GHC.IO.$fShowMaskingState_$cshowsPrec_closure" {
     GHC.IO.$fShowMaskingState_$cshowsPrec_closure:
         const GHC.IO.$fShowMaskingState_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.$fShowMaskingState_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       c7EBw: // global
           _s7DXU::P64 = R3;
           R3 = R4;
           R2 = _s7DXU::P64;
           call GHC.IO.$w$cshowsPrec_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.$fShowMaskingState_$cshowsPrec_info" {
     GHC.IO.$fShowMaskingState_$cshowsPrec_info:
         const GHC.IO.$fShowMaskingState_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S7E2C_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.442401084 UTC

[section ""data" . GHC.IO.$fShowMaskingState_$cshow_closure" {
     GHC.IO.$fShowMaskingState_$cshow_closure:
         const GHC.IO.$fShowMaskingState_$cshow_info;
         const 0;
 },
 GHC.IO.$fShowMaskingState_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c7EBP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7EBQ; else goto c7EBR;
       c7EBQ: // global
           R2 = R2;
           R1 = GHC.IO.$fShowMaskingState_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7EBR: // global
           I64[Sp - 8] = block_c7EBH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7EC2; else goto c7EBI;
       u7EC2: // global
           call _c7EBH(R1) args: 0, res: 0, upd: 0;
       c7EBI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.$fShowMaskingState_$cshow_info" {
     GHC.IO.$fShowMaskingState_$cshow_info:
         const GHC.IO.$fShowMaskingState_$cshow_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const S7E2C_srt+8;
 },
 _c7EBH() //  [R1]
         { []
         }
     {offset
       c7EBH: // global
           _c7EBO::P64 = R1 & 7;
           if (_c7EBO::P64 < 3) goto u7EC1; else goto c7EBN;
       u7EC1: // global
           if (_c7EBO::P64 < 2) goto c7EBL; else goto c7EBM;
       c7EBL: // global
           R1 = GHC.IO.$fShowMaskingState5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7EBM: // global
           R1 = GHC.IO.$fShowMaskingState3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7EBN: // global
           R1 = GHC.IO.$fShowMaskingState1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EBH_info" {
     block_c7EBH_info:
         const _c7EBH;
         const 0;
         const 30064771102;
         const S7E2C_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.447704512 UTC

[section ""data" . GHC.IO.$fShowMaskingState_$cshowList_closure" {
     GHC.IO.$fShowMaskingState_$cshowList_closure:
         const GHC.IO.$fShowMaskingState_$cshowList_info;
         const 0;
 },
 GHC.IO.$fShowMaskingState_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c7ECk: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.$fShowMaskingState_$cshowList_info" {
     GHC.IO.$fShowMaskingState_$cshowList_info:
         const GHC.IO.$fShowMaskingState_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S7E2C_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.450871133 UTC

[section ""data" . GHC.IO.$fShowMaskingState_closure" {
     GHC.IO.$fShowMaskingState_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.$fShowMaskingState_$cshowsPrec_closure+3;
         const GHC.IO.$fShowMaskingState_$cshow_closure+1;
         const GHC.IO.$fShowMaskingState_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.454688246 UTC

[section ""data" . GHC.IO.$fEqMaskingState_$c==_closure" {
     GHC.IO.$fEqMaskingState_$c==_closure:
         const GHC.IO.$fEqMaskingState_$c==_info;
 },
 GHC.IO.$fEqMaskingState_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c7ECE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7ECF; else goto c7ECG;
       c7ECF: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.$fEqMaskingState_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ECG: // global
           I64[Sp - 16] = block_c7ECw_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7EDD; else goto c7ECx;
       u7EDD: // global
           call _c7ECw(R1) args: 0, res: 0, upd: 0;
       c7ECx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.$fEqMaskingState_$c==_info" {
     GHC.IO.$fEqMaskingState_$c==_info:
         const GHC.IO.$fEqMaskingState_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7ECw() //  [R1]
         { []
         }
     {offset
       c7ECw: // global
           _s7DY1::P64 = P64[Sp + 8];
           _c7ECD::P64 = R1 & 7;
           if (_c7ECD::P64 < 3) goto u7EDt; else goto c7ECC;
       u7EDt: // global
           if (_c7ECD::P64 < 2) goto c7ECA; else goto c7ECB;
       c7ECA: // global
           I64[Sp + 8] = block_c7ECJ_info;
           R1 = _s7DY1::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7EDA; else goto c7ECL;
       u7EDA: // global
           call _c7ECJ(R1) args: 0, res: 0, upd: 0;
       c7ECL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7ECB: // global
           I64[Sp + 8] = block_c7ECY_info;
           R1 = _s7DY1::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7EDB; else goto c7ED0;
       u7EDB: // global
           call _c7ECY(R1) args: 0, res: 0, upd: 0;
       c7ED0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7ECC: // global
           I64[Sp + 8] = block_c7EDd_info;
           R1 = _s7DY1::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7EDC; else goto c7EDf;
       u7EDC: // global
           call _c7EDd(R1) args: 0, res: 0, upd: 0;
       c7EDf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ECw_info" {
     block_c7ECw_info:
         const _c7ECw;
         const 1;
         const 30;
 },
 _c7ECJ() //  [R1]
         { []
         }
     {offset
       c7ECJ: // global
           if (R1 & 7 == 1) goto u7EDu; else goto u7EDv;
       u7EDu: // global
           Sp = Sp + 8;
           call _c7EDp() args: 0, res: 0, upd: 0;
       u7EDv: // global
           Sp = Sp + 8;
           call _c7EDl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7ECJ_info" {
     block_c7ECJ_info:
         const _c7ECJ;
         const 0;
         const 30;
 },
 _c7ECY() //  [R1]
         { []
         }
     {offset
       c7ECY: // global
           if (R1 & 7 == 2) goto u7EDw; else goto u7EDx;
       u7EDw: // global
           Sp = Sp + 8;
           call _c7EDp() args: 0, res: 0, upd: 0;
       u7EDx: // global
           Sp = Sp + 8;
           call _c7EDl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7ECY_info" {
     block_c7ECY_info:
         const _c7ECY;
         const 0;
         const 30;
 },
 _c7EDd() //  [R1]
         { []
         }
     {offset
       c7EDd: // global
           if (R1 & 7 == 3) goto u7EDy; else goto u7EDz;
       u7EDy: // global
           Sp = Sp + 8;
           call _c7EDp() args: 0, res: 0, upd: 0;
       u7EDz: // global
           Sp = Sp + 8;
           call _c7EDl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7EDd_info" {
     block_c7EDd_info:
         const _c7EDd;
         const 0;
         const 30;
 },
 _c7EDp() //  []
         { []
         }
     {offset
       c7EDp: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7EDl() //  []
         { []
         }
     {offset
       c7EDl: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.467821278 UTC

[section ""data" . GHC.IO.$fEqMaskingState_$c/=_closure" {
     GHC.IO.$fEqMaskingState_$c/=_closure:
         const GHC.IO.$fEqMaskingState_$c/=_info;
 },
 GHC.IO.$fEqMaskingState_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c7EEu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7EEv; else goto c7EEw;
       c7EEv: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.$fEqMaskingState_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7EEw: // global
           I64[Sp - 16] = block_c7EEm_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7EFt; else goto c7EEn;
       u7EFt: // global
           call _c7EEm(R1) args: 0, res: 0, upd: 0;
       c7EEn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.$fEqMaskingState_$c/=_info" {
     GHC.IO.$fEqMaskingState_$c/=_info:
         const GHC.IO.$fEqMaskingState_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7EEm() //  [R1]
         { []
         }
     {offset
       c7EEm: // global
           _s7DY7::P64 = P64[Sp + 8];
           _c7EEt::P64 = R1 & 7;
           if (_c7EEt::P64 < 3) goto u7EFj; else goto c7EEs;
       u7EFj: // global
           if (_c7EEt::P64 < 2) goto c7EEq; else goto c7EEr;
       c7EEq: // global
           I64[Sp + 8] = block_c7EEz_info;
           R1 = _s7DY7::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7EFq; else goto c7EEB;
       u7EFq: // global
           call _c7EEz(R1) args: 0, res: 0, upd: 0;
       c7EEB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7EEr: // global
           I64[Sp + 8] = block_c7EEO_info;
           R1 = _s7DY7::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7EFr; else goto c7EEQ;
       u7EFr: // global
           call _c7EEO(R1) args: 0, res: 0, upd: 0;
       c7EEQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7EEs: // global
           I64[Sp + 8] = block_c7EF3_info;
           R1 = _s7DY7::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7EFs; else goto c7EF5;
       u7EFs: // global
           call _c7EF3(R1) args: 0, res: 0, upd: 0;
       c7EF5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EEm_info" {
     block_c7EEm_info:
         const _c7EEm;
         const 1;
         const 30;
 },
 _c7EEz() //  [R1]
         { []
         }
     {offset
       c7EEz: // global
           if (R1 & 7 == 1) goto u7EFk; else goto u7EFl;
       u7EFk: // global
           Sp = Sp + 8;
           call _c7EFf() args: 0, res: 0, upd: 0;
       u7EFl: // global
           Sp = Sp + 8;
           call _c7EFb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7EEz_info" {
     block_c7EEz_info:
         const _c7EEz;
         const 0;
         const 30;
 },
 _c7EEO() //  [R1]
         { []
         }
     {offset
       c7EEO: // global
           if (R1 & 7 == 2) goto u7EFm; else goto u7EFn;
       u7EFm: // global
           Sp = Sp + 8;
           call _c7EFf() args: 0, res: 0, upd: 0;
       u7EFn: // global
           Sp = Sp + 8;
           call _c7EFb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7EEO_info" {
     block_c7EEO_info:
         const _c7EEO;
         const 0;
         const 30;
 },
 _c7EF3() //  [R1]
         { []
         }
     {offset
       c7EF3: // global
           if (R1 & 7 == 3) goto u7EFo; else goto u7EFp;
       u7EFo: // global
           Sp = Sp + 8;
           call _c7EFf() args: 0, res: 0, upd: 0;
       u7EFp: // global
           Sp = Sp + 8;
           call _c7EFb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7EF3_info" {
     block_c7EF3_info:
         const _c7EF3;
         const 0;
         const 30;
 },
 _c7EFf() //  []
         { []
         }
     {offset
       c7EFf: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7EFb() //  []
         { []
         }
     {offset
       c7EFb: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.479243741 UTC

[section ""data" . GHC.IO.$fEqMaskingState_closure" {
     GHC.IO.$fEqMaskingState_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.$fEqMaskingState_$c==_closure+2;
         const GHC.IO.$fEqMaskingState_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.482154916 UTC

[section ""data" . GHC.IO.liftIO_closure" {
     GHC.IO.liftIO_closure:
         const GHC.IO.liftIO_info;
 },
 GHC.IO.liftIO_entry() //  [R2]
         { []
         }
     {offset
       c7EGg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7EGh; else goto c7EGi;
       c7EGh: // global
           R2 = R2;
           R1 = GHC.IO.liftIO_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7EGi: // global
           I64[Sp - 8] = block_c7EGd_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.liftIO_info" {
     GHC.IO.liftIO_info:
         const GHC.IO.liftIO_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7EGd() //  [R1]
         { []
         }
     {offset
       c7EGd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7EGl; else goto c7EGk;
       c7EGl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7EGk: // global
           I64[Hp - 8] = GHC.ST.STret_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EGd_info" {
     block_c7EGd_info:
         const _c7EGd;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.488140716 UTC

[section ""data" . GHC.IO.failIO1_closure" {
     GHC.IO.failIO1_closure:
         const GHC.IO.failIO1_info;
         const 0;
 },
 sat_s7DYj_entry() //  [R1]
         { []
         }
     {offset
       c7EGH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7EGI; else goto c7EGJ;
       c7EGI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7EGJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           R1 = GHC.IO.Exception.userError_closure;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7DYj_info" {
     sat_s7DYj_info:
         const sat_s7DYj_entry;
         const 1;
         const 4294967312;
         const S7E2C_srt+40;
 },
 sat_s7DYk_entry() //  [R1]
         { []
         }
     {offset
       c7EGK: // global
           _s7DYk::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c7EGL; else goto c7EGM;
       c7EGM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7EGO; else goto c7EGN;
       c7EGO: // global
           HpAlloc = 24;
           goto c7EGL;
       c7EGL: // global
           R1 = _s7DYk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7EGN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7DYk::P64;
           _s7DYh::P64 = P64[_s7DYk::P64 + 16];
           I64[Hp - 16] = sat_s7DYj_info;
           P64[Hp] = _s7DYh::P64;
           R2 = GHC.IO.Exception.$fxExceptionIOException_closure;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Exception.toException_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7DYk_info" {
     sat_s7DYk_info:
         const sat_s7DYk_entry;
         const 1;
         const 12884901904;
         const S7E2C_srt+40;
 },
 GHC.IO.failIO1_entry() //  [R2]
         { []
         }
     {offset
       c7EGP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7EGT; else goto c7EGS;
       c7EGT: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.failIO1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7EGS: // global
           I64[Hp - 16] = sat_s7DYk_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.failIO1_info" {
     GHC.IO.failIO1_info:
         const GHC.IO.failIO1_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const S7E2C_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.494943055 UTC

[section ""data" . GHC.IO.failIO_closure" {
     GHC.IO.failIO_closure:
         const GHC.IO.failIO_info;
         const 0;
 },
 GHC.IO.failIO_entry() //  [R2]
         { []
         }
     {offset
       c7EHb: // global
           R2 = R2;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.failIO_info" {
     GHC.IO.failIO_info:
         const GHC.IO.failIO_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S7E2C_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.498050447 UTC

[section ""data" . GHC.IO.stToIO1_closure" {
     GHC.IO.stToIO1_closure:
         const GHC.IO.stToIO1_info;
 },
 GHC.IO.stToIO1_entry() //  [R2]
         { []
         }
     {offset
       c7EHm: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.stToIO1_info" {
     GHC.IO.stToIO1_info:
         const GHC.IO.stToIO1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.501116532 UTC

[section ""data" . GHC.IO.stToIO_closure" {
     GHC.IO.stToIO_closure:
         const GHC.IO.stToIO_info;
 },
 GHC.IO.stToIO_entry() //  [R2]
         { []
         }
     {offset
       c7EHx: // global
           R2 = R2;
           call GHC.IO.stToIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.stToIO_info" {
     GHC.IO.stToIO_info:
         const GHC.IO.stToIO_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.504520858 UTC

[section ""data" . GHC.IO.ioToST1_closure" {
     GHC.IO.ioToST1_closure:
         const GHC.IO.ioToST1_info;
 },
 GHC.IO.ioToST1_entry() //  [R2]
         { []
         }
     {offset
       c7EHI: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.ioToST1_info" {
     GHC.IO.ioToST1_info:
         const GHC.IO.ioToST1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.508083946 UTC

[section ""data" . GHC.IO.ioToST_closure" {
     GHC.IO.ioToST_closure:
         const GHC.IO.ioToST_info;
 },
 GHC.IO.ioToST_entry() //  [R2]
         { []
         }
     {offset
       c7EHT: // global
           R2 = R2;
           call GHC.IO.ioToST1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.ioToST_info" {
     GHC.IO.ioToST_info:
         const GHC.IO.ioToST_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.511240456 UTC

[section ""data" . GHC.IO.unsafeIOToST1_closure" {
     GHC.IO.unsafeIOToST1_closure:
         const GHC.IO.unsafeIOToST1_info;
 },
 GHC.IO.unsafeIOToST1_entry() //  [R2]
         { []
         }
     {offset
       c7EI4: // global
           R1 = R2;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.unsafeIOToST1_info" {
     GHC.IO.unsafeIOToST1_info:
         const GHC.IO.unsafeIOToST1_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.514852398 UTC

[section ""data" . GHC.IO.unsafeIOToST_closure" {
     GHC.IO.unsafeIOToST_closure:
         const GHC.IO.unsafeIOToST_info;
 },
 GHC.IO.unsafeIOToST_entry() //  [R2]
         { []
         }
     {offset
       c7EIf: // global
           R2 = R2;
           call GHC.IO.unsafeIOToST1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.unsafeIOToST_info" {
     GHC.IO.unsafeIOToST_info:
         const GHC.IO.unsafeIOToST_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.518028035 UTC

[section ""data" . GHC.IO.unsafeSTToIO1_closure" {
     GHC.IO.unsafeSTToIO1_closure:
         const GHC.IO.unsafeSTToIO1_info;
 },
 GHC.IO.unsafeSTToIO1_entry() //  [R2]
         { []
         }
     {offset
       c7EIq: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.unsafeSTToIO1_info" {
     GHC.IO.unsafeSTToIO1_info:
         const GHC.IO.unsafeSTToIO1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.521324751 UTC

[section ""data" . GHC.IO.unsafeSTToIO_closure" {
     GHC.IO.unsafeSTToIO_closure:
         const GHC.IO.unsafeSTToIO_info;
 },
 GHC.IO.unsafeSTToIO_entry() //  [R2]
         { []
         }
     {offset
       c7EIB: // global
           R2 = R2;
           call GHC.IO.unsafeSTToIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.unsafeSTToIO_info" {
     GHC.IO.unsafeSTToIO_info:
         const GHC.IO.unsafeSTToIO_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.526014111 UTC

[section ""data" . GHC.IO.catch1_closure" {
     GHC.IO.catch1_closure:
         const GHC.IO.catch1_info;
 },
 sat_s7DYw_entry() //  [R1]
         { []
         }
     {offset
       c7EJ0: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7DYw_info" {
     sat_s7DYw_info:
         const sat_s7DYw_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s7DYy_entry() //  [R1, R2]
         { []
         }
     {offset
       c7EJ7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7EJ8; else goto c7EJ9;
       c7EJ8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7EJ9: // global
           I64[Sp - 24] = block_c7EIR_info;
           _s7DYu::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = _s7DYu::P64;
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = _s7DYu::P64;
           Sp = Sp - 40;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7DYy_info" {
     sat_s7DYy_info:
         const sat_s7DYy_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c7EIR() //  [R1]
         { []
         }
     {offset
       c7EIR: // global
           if (R1 & 7 == 1) goto c7EJ4; else goto c7EJ5;
       c7EJ4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7EJc; else goto c7EJb;
       c7EJc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7EJb: // global
           I64[Hp - 8] = sat_s7DYw_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7EJ5: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EIR_info" {
     block_c7EIR_info:
         const _c7EIR;
         const 2;
         const 30;
 },
 GHC.IO.catch1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7EJg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7EJk; else goto c7EJj;
       c7EJk: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.catch1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7EJj: // global
           I64[Hp - 16] = sat_s7DYy_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R2 = Hp - 15;
           R1 = R3;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.catch1_info" {
     GHC.IO.catch1_info:
         const GHC.IO.catch1_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.534623951 UTC

[section ""data" . GHC.IO.catch_closure" {
     GHC.IO.catch_closure:
         const GHC.IO.catch_info;
 },
 GHC.IO.catch_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7EJI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.catch1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.catch_info" {
     GHC.IO.catch_info:
         const GHC.IO.catch_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.539668178 UTC

[section ""data" . GHC.IO.catchException1_closure" {
     GHC.IO.catchException1_closure:
         const GHC.IO.catchException1_info;
 },
 sat_s7DYG_entry() //  [R1]
         { []
         }
     {offset
       c7EK9: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7DYG_info" {
     sat_s7DYG_info:
         const sat_s7DYG_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s7DYI_entry() //  [R1, R2]
         { []
         }
     {offset
       c7EKg: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7EKh; else goto c7EKi;
       c7EKh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7EKi: // global
           I64[Sp - 24] = block_c7EK0_info;
           _s7DYE::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = _s7DYE::P64;
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = _s7DYE::P64;
           Sp = Sp - 40;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7DYI_info" {
     sat_s7DYI_info:
         const sat_s7DYI_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c7EK0() //  [R1]
         { []
         }
     {offset
       c7EK0: // global
           if (R1 & 7 == 1) goto c7EKd; else goto c7EKe;
       c7EKd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7EKl; else goto c7EKk;
       c7EKl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7EKk: // global
           I64[Hp - 8] = sat_s7DYG_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7EKe: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EK0_info" {
     block_c7EK0_info:
         const _c7EK0;
         const 2;
         const 30;
 },
 GHC.IO.catchException1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7EKp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7EKq; else goto c7EKr;
       c7EKq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.catchException1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7EKr: // global
           I64[Sp - 24] = block_c7EJT_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.catchException1_info" {
     GHC.IO.catchException1_info:
         const GHC.IO.catchException1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c7EJT() //  [R1]
         { []
         }
     {offset
       c7EJT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7EKu; else goto c7EKt;
       c7EKu: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7EKt: // global
           I64[Hp - 16] = sat_s7DYI_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R2 = Hp - 15;
           R1 = R1;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EJT_info" {
     block_c7EJT_info:
         const _c7EJT;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.55050462 UTC

[section ""data" . GHC.IO.catchException_closure" {
     GHC.IO.catchException_closure:
         const GHC.IO.catchException_info;
 },
 GHC.IO.catchException_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7EKY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.catchException1_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.catchException_info" {
     GHC.IO.catchException_info:
         const GHC.IO.catchException_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.555399452 UTC

[section ""data" . GHC.IO.mplusIO1_closure" {
     GHC.IO.mplusIO1_closure:
         const GHC.IO.mplusIO1_info;
         const 0;
 },
 sat_s7DYP_entry() //  [R1]
         { []
         }
     {offset
       c7ELp: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7DYP_info" {
     sat_s7DYP_info:
         const sat_s7DYP_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s7DYR_entry() //  [R1, R2]
         { []
         }
     {offset
       c7ELw: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7ELx; else goto c7ELy;
       c7ELx: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7ELy: // global
           I64[Sp - 24] = block_c7ELg_info;
           _s7DYN::P64 = R2;
           R2 = GHC.IO.Exception.$fxExceptionIOException_closure;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = _s7DYN::P64;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp - 8] = _s7DYN::P64;
           Sp = Sp - 40;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7DYR_info" {
     sat_s7DYR_info:
         const sat_s7DYR_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S7E2C_srt+48;
 },
 _c7ELg() //  [R1]
         { []
         }
     {offset
       c7ELg: // global
           if (R1 & 7 == 1) goto c7ELt; else goto c7ELu;
       c7ELt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7ELB; else goto c7ELA;
       c7ELB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ELA: // global
           I64[Hp - 8] = sat_s7DYP_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7ELu: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ELg_info" {
     block_c7ELg_info:
         const _c7ELg;
         const 2;
         const 30;
 },
 GHC.IO.mplusIO1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7ELF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7ELG; else goto c7ELH;
       c7ELG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.mplusIO1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ELH: // global
           I64[Sp - 16] = block_c7EL9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.mplusIO1_info" {
     GHC.IO.mplusIO1_info:
         const GHC.IO.mplusIO1_entry;
         const 0;
         const 21474836494;
         const 12884901903;
         const S7E2C_srt+48;
 },
 _c7EL9() //  [R1]
         { []
         }
     {offset
       c7EL9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7ELK; else goto c7ELJ;
       c7ELK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ELJ: // global
           I64[Hp - 8] = sat_s7DYR_info;
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 7;
           R1 = R1;
           Sp = Sp + 16;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EL9_info" {
     block_c7EL9_info:
         const _c7EL9;
         const 1;
         const 4294967326;
         const S7E2C_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.565617215 UTC

[section ""data" . GHC.IO.mplusIO_closure" {
     GHC.IO.mplusIO_closure:
         const GHC.IO.mplusIO_info;
         const 0;
 },
 GHC.IO.mplusIO_entry() //  [R2, R3]
         { []
         }
     {offset
       c7EMd: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.mplusIO1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.mplusIO_info" {
     GHC.IO.mplusIO_info:
         const GHC.IO.mplusIO_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S7E2C_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.570103523 UTC

[section ""data" . GHC.IO.catchAny1_closure" {
     GHC.IO.catchAny1_closure:
         const GHC.IO.catchAny1_info;
 },
 sat_s7DZ0_entry() //  [R1, R2]
         { []
         }
     {offset
       c7EMy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7EMz; else goto c7EMA;
       c7EMz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7EMA: // global
           I64[Sp - 16] = block_c7EMv_info;
           _s7DYT::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s7DYT::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7EME; else goto c7EMw;
       u7EME: // global
           call _c7EMv(R1) args: 0, res: 0, upd: 0;
       c7EMw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7DZ0_info" {
     sat_s7DZ0_info:
         const sat_s7DZ0_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c7EMv() //  [R1]
         { []
         }
     {offset
       c7EMv: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EMv_info" {
     block_c7EMv_info:
         const _c7EMv;
         const 1;
         const 30;
 },
 GHC.IO.catchAny1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7EMF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7EMG; else goto c7EMH;
       c7EMG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.catchAny1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7EMH: // global
           I64[Sp - 16] = block_c7EMo_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.catchAny1_info" {
     GHC.IO.catchAny1_info:
         const GHC.IO.catchAny1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7EMo() //  [R1]
         { []
         }
     {offset
       c7EMo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7EMK; else goto c7EMJ;
       c7EMK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7EMJ: // global
           I64[Hp - 8] = sat_s7DZ0_info;
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 7;
           R1 = R1;
           Sp = Sp + 16;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EMo_info" {
     block_c7EMo_info:
         const _c7EMo;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.579354554 UTC

[section ""data" . GHC.IO.catchAny_closure" {
     GHC.IO.catchAny_closure:
         const GHC.IO.catchAny_info;
 },
 GHC.IO.catchAny_entry() //  [R2, R3]
         { []
         }
     {offset
       c7EN6: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.catchAny1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.catchAny_info" {
     GHC.IO.catchAny_info:
         const GHC.IO.catchAny_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.583245812 UTC

[section ""data" . GHC.IO.throwIO1_closure" {
     GHC.IO.throwIO1_closure:
         const GHC.IO.throwIO1_info;
 },
 sat_s7DZ4_entry() //  [R1]
         { []
         }
     {offset
       c7ENl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7ENm; else goto c7ENn;
       c7ENm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7ENn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Exception.toException_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7DZ4_info" {
     sat_s7DZ4_info:
         const sat_s7DZ4_entry;
         const 2;
         const 18;
 },
 GHC.IO.throwIO1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7ENo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7ENs; else goto c7ENr;
       c7ENs: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.throwIO1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ENr: // global
           I64[Hp - 24] = sat_s7DZ4_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 24;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.throwIO1_info" {
     GHC.IO.throwIO1_info:
         const GHC.IO.throwIO1_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.58826213 UTC

[section ""data" . GHC.IO.throwIO_closure" {
     GHC.IO.throwIO_closure:
         const GHC.IO.throwIO_info;
 },
 GHC.IO.throwIO_entry() //  [R2, R3]
         { []
         }
     {offset
       c7ENG: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.throwIO1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.throwIO_info" {
     GHC.IO.throwIO_info:
         const GHC.IO.throwIO_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.592537523 UTC

[section ""data" . GHC.IO.onException1_closure" {
     GHC.IO.onException1_closure:
         const GHC.IO.onException1_info;
 },
 sat_s7DZe_entry() //  [R1, R2]
         { []
         }
     {offset
       c7EO0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7EO1; else goto c7EO2;
       c7EO1: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7EO2: // global
           I64[Sp - 16] = block_c7ENY_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7DZe_info" {
     sat_s7DZe_info:
         const sat_s7DZe_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _c7ENY() //  []
         { []
         }
     {offset
       c7ENY: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ENY_info" {
     block_c7ENY_info:
         const _c7ENY;
         const 1;
         const 30;
 },
 GHC.IO.onException1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7EO4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7EO5; else goto c7EO6;
       c7EO5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.onException1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7EO6: // global
           I64[Sp - 16] = block_c7ENR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.onException1_info" {
     GHC.IO.onException1_info:
         const GHC.IO.onException1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7ENR() //  [R1]
         { []
         }
     {offset
       c7ENR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7EO9; else goto c7EO8;
       c7EO9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7EO8: // global
           I64[Hp - 8] = sat_s7DZe_info;
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 6;
           R1 = R1;
           Sp = Sp + 16;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ENR_info" {
     block_c7ENR_info:
         const _c7ENR;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.600633649 UTC

[section ""data" . GHC.IO.onException_closure" {
     GHC.IO.onException_closure:
         const GHC.IO.onException_info;
 },
 GHC.IO.onException_entry() //  [R2, R3]
         { []
         }
     {offset
       c7EOu: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.onException1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.onException_info" {
     GHC.IO.onException_info:
         const GHC.IO.onException_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.603776143 UTC

[section ""data" . GHC.IO.unsafeUnmask_closure" {
     GHC.IO.unsafeUnmask_closure:
         const GHC.IO.unsafeUnmask_info;
 },
 GHC.IO.unsafeUnmask_entry() //  [R2]
         { []
         }
     {offset
       c7EOF: // global
           R1 = R2;
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.unsafeUnmask_info" {
     GHC.IO.unsafeUnmask_info:
         const GHC.IO.unsafeUnmask_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.608067833 UTC

[section ""data" . GHC.IO.getMaskingState1_closure" {
     GHC.IO.getMaskingState1_closure:
         const GHC.IO.getMaskingState1_info;
 },
 sat_s7DZk_entry() //  [R1]
         { []
         }
     {offset
       c7EP1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7EP2; else goto c7EP3;
       c7EP2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7EP3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s7DZj::I64 = I64[R1 + 16];
           if (_s7DZj::I64 != 0) goto u7EP4; else goto c7EOZ;
       u7EP4: // global
           if (_s7DZj::I64 != 1) goto c7EOY; else goto c7EP0;
       c7EOY: // global
           R1 = GHC.IO.MaskedInterruptible_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7EP0: // global
           R1 = GHC.IO.MaskedUninterruptible_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7EOZ: // global
           R1 = GHC.IO.Unmasked_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7DZk_info" {
     sat_s7DZk_info:
         const sat_s7DZk_entry;
         const 4294967296;
         const 17;
 },
 GHC.IO.getMaskingState1_entry() //  []
         { []
         }
     {offset
       c7EP5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7EP6; else goto c7EP7;
       c7EP6: // global
           R1 = GHC.IO.getMaskingState1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c7EP7: // global
           I64[Sp - 8] = block_c7EOQ_info;
           Sp = Sp - 8;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.getMaskingState1_info" {
     GHC.IO.getMaskingState1_info:
         const GHC.IO.getMaskingState1_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _c7EOQ() //  [R1]
         { []
         }
     {offset
       c7EOQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7EPa; else goto c7EP9;
       c7EPa: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c7EP9: // global
           I64[Hp - 16] = sat_s7DZk_info;
           I64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EOQ_info" {
     block_c7EOQ_info:
         const _c7EOQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.615579808 UTC

[section ""data" . GHC.IO.getMaskingState_closure" {
     GHC.IO.getMaskingState_closure:
         const GHC.IO.getMaskingState_info;
 },
 GHC.IO.getMaskingState_entry() //  []
         { []
         }
     {offset
       c7EPv: // global
           call GHC.IO.getMaskingState1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.getMaskingState_info" {
     GHC.IO.getMaskingState_info:
         const GHC.IO.getMaskingState_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.619355406 UTC

[section ""data" . GHC.IO.interruptible1_closure" {
     GHC.IO.interruptible1_closure:
         const GHC.IO.interruptible1_info;
 },
 GHC.IO.interruptible1_entry() //  [R2]
         { []
         }
     {offset
       c7EPN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7EPO; else goto c7EPP;
       c7EPO: // global
           R2 = R2;
           R1 = GHC.IO.interruptible1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7EPP: // global
           I64[Sp - 16] = block_c7EPG_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.interruptible1_info" {
     GHC.IO.interruptible1_info:
         const GHC.IO.interruptible1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7EPG() //  [R1]
         { []
         }
     {offset
       c7EPG: // global
           _s7DZl::P64 = P64[Sp + 8];
           if (R1 == 0) goto c7EPM; else goto u7EPR;
       u7EPR: // global
           if (R1 == 1) goto c7EPM; else goto c7EPK;
       c7EPM: // global
           R1 = _s7DZl::P64;
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
       c7EPK: // global
           R1 = _s7DZl::P64;
           Sp = Sp + 16;
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EPG_info" {
     block_c7EPG_info:
         const _c7EPG;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.624391906 UTC

[section ""data" . GHC.IO.interruptible_closure" {
     GHC.IO.interruptible_closure:
         const GHC.IO.interruptible_info;
 },
 GHC.IO.interruptible_entry() //  [R2]
         { []
         }
     {offset
       c7EQ4: // global
           R2 = R2;
           call GHC.IO.interruptible1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.interruptible_info" {
     GHC.IO.interruptible_info:
         const GHC.IO.interruptible_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.629474828 UTC

[section ""data" . GHC.IO.mask1_closure" {
     GHC.IO.mask1_closure:
         const GHC.IO.mask1_info;
 },
 sat_s7DZx_entry() //  [R2]
         { []
         }
     {offset
       c7EQo: // global
           R1 = R2;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7DZx_info" {
     sat_s7DZx_info:
         const sat_s7DZx_entry;
         const 4294967296;
         const 10;
         const 8589934597;
 },
 sat_s7DZy_entry() //  [R2]
         { []
         }
     {offset
       c7EQx: // global
           R1 = R2;
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7DZy_info" {
     sat_s7DZy_info:
         const sat_s7DZy_entry;
         const 4294967296;
         const 10;
         const 8589934597;
 },
 sat_s7DZA_entry() //  [R2]
         { []
         }
     {offset
       c7EQG: // global
           R1 = R2;
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7DZA_info" {
     sat_s7DZA_info:
         const sat_s7DZA_entry;
         const 4294967296;
         const 10;
         const 8589934597;
 },
 GHC.IO.mask1_entry() //  [R2]
         { []
         }
     {offset
       c7EQN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7EQO; else goto c7EQP;
       c7EQO: // global
           R2 = R2;
           R1 = GHC.IO.mask1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7EQP: // global
           I64[Sp - 16] = block_c7EQf_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.mask1_info" {
     GHC.IO.mask1_info:
         const GHC.IO.mask1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7EQf() //  [R1]
         { []
         }
     {offset
       c7EQf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7EQS; else goto c7EQR;
       c7EQS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c7EQR: // global
           _s7DZr::P64 = P64[Sp + 8];
           if (R1 == 0) goto c7EQL; else goto u7EQW;
       c7EQL: // global
           I64[Hp - 8] = sat_s7DZy_info;
           I64[Sp + 8] = block_c7EQT_info;
           R2 = Hp - 6;
           R1 = _s7DZr::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       u7EQW: // global
           if (R1 == 1) goto c7EQM; else goto c7EQK;
       c7EQM: // global
           I64[Hp - 8] = sat_s7DZA_info;
           R2 = Hp - 6;
           R1 = _s7DZr::P64;
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
       c7EQK: // global
           I64[Hp - 8] = sat_s7DZx_info;
           R2 = Hp - 6;
           R1 = _s7DZr::P64;
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EQf_info" {
     block_c7EQf_info:
         const _c7EQf;
         const 1;
         const 30;
 },
 _c7EQT() //  [R1]
         { []
         }
     {offset
       c7EQT: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EQT_info" {
     block_c7EQT_info:
         const _c7EQT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.640233878 UTC

[section ""data" . GHC.IO.mask_closure" {
     GHC.IO.mask_closure:
         const GHC.IO.mask_info;
 },
 GHC.IO.mask_entry() //  [R2]
         { []
         }
     {offset
       c7ERl: // global
           R2 = R2;
           call GHC.IO.mask1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.mask_info" {
     GHC.IO.mask_info:
         const GHC.IO.mask_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.644454528 UTC

[section ""data" . GHC.IO.mask_1_closure" {
     GHC.IO.mask_1_closure:
         const GHC.IO.mask_1_info;
 },
 GHC.IO.mask_1_entry() //  [R2]
         { []
         }
     {offset
       c7ERC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7ERD; else goto c7ERE;
       c7ERD: // global
           R2 = R2;
           R1 = GHC.IO.mask_1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7ERE: // global
           I64[Sp - 16] = block_c7ERw_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.mask_1_info" {
     GHC.IO.mask_1_info:
         const GHC.IO.mask_1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7ERw() //  [R1]
         { []
         }
     {offset
       c7ERw: // global
           _s7DZB::P64 = P64[Sp + 8];
           if (R1 == 0) goto c7ERB; else goto c7ERA;
       c7ERB: // global
           R1 = _s7DZB::P64;
           Sp = Sp + 16;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       c7ERA: // global
           R1 = _s7DZB::P64;
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ERw_info" {
     block_c7ERw_info:
         const _c7ERw;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.649954856 UTC

[section ""data" . GHC.IO.mask__closure" {
     GHC.IO.mask__closure:
         const GHC.IO.mask__info;
 },
 GHC.IO.mask__entry() //  [R2]
         { []
         }
     {offset
       c7ERS: // global
           R2 = R2;
           call GHC.IO.mask_1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.mask__info" {
     GHC.IO.mask__info:
         const GHC.IO.mask__entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.658881407 UTC

[section ""data" . GHC.IO.bracket1_closure" {
     GHC.IO.bracket1_closure:
         const GHC.IO.bracket1_info;
 },
 sat_s7DZZ_entry() //  [R1, R2]
         { []
         }
     {offset
       c7ESg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7ESh; else goto c7ESi;
       c7ESh: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7ESi: // global
           I64[Sp - 16] = block_c7ESe_info;
           _s7DZU::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s7DZU::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7DZZ_info" {
     sat_s7DZZ_info:
         const sat_s7DZZ_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c7ESe() //  []
         { []
         }
     {offset
       c7ESe: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ESe_info" {
     block_c7ESe_info:
         const _c7ESe;
         const 1;
         const 30;
 },
 sat_s7DZT_entry() //  [R1]
         { []
         }
     {offset
       c7ESq: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7DZT_info" {
     sat_s7DZT_info:
         const sat_s7DZT_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s7E0h_entry() //  [R1, R2]
         { []
         }
     {offset
       c7ESI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7ESJ; else goto c7ESK;
       c7ESJ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7ESK: // global
           I64[Sp - 16] = block_c7ESG_info;
           _s7E0c::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s7E0c::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7E0h_info" {
     sat_s7E0h_info:
         const sat_s7E0h_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c7ESG() //  []
         { []
         }
     {offset
       c7ESG: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ESG_info" {
     block_c7ESG_info:
         const _c7ESG;
         const 1;
         const 30;
 },
 sat_s7E0b_entry() //  [R1]
         { []
         }
     {offset
       c7ESS: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7E0b_info" {
     sat_s7E0b_info:
         const sat_s7E0b_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s7E0o_entry() //  [R1]
         { []
         }
     {offset
       c7ESZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7ET0; else goto c7ET1;
       c7ET0: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c7ET1: // global
           I64[Sp - 24] = block_c7ESz_info;
           _s7DZI::P64 = P64[R1 + 15];
           _s7DZJ::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s7DZI::P64;
           P64[Sp - 8] = _s7DZJ::P64;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7E0o_info" {
     sat_s7E0o_info:
         const sat_s7E0o_entry;
         const 3;
         const 8;
         const 4294967299;
 },
 _c7ESz() //  [R1]
         { []
         }
     {offset
       c7ESz: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c7ET4; else goto c7ET3;
       c7ET4: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ET3: // global
           I64[Hp - 64] = sat_s7E0h_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s7E0b_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c7ESV_info;
           R2 = Hp - 62;
           _s7E09::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s7E09::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ESz_info" {
     block_c7ESz_info:
         const _c7ESz;
         const 2;
         const 30;
 },
 _c7ESV() //  [R1]
         { []
         }
     {offset
       c7ESV: // global
           _s7DZI::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7ESX_info;
           R2 = P64[Sp + 16];
           _s7E0k::P64 = R1;
           R1 = _s7DZI::P64;
           P64[Sp + 16] = _s7E0k::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ESV_info" {
     block_c7ESV_info:
         const _c7ESV;
         const 2;
         const 30;
 },
 _c7ESX() //  []
         { []
         }
     {offset
       c7ESX: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ESX_info" {
     block_c7ESX_info:
         const _c7ESX;
         const 1;
         const 30;
 },
 sat_s7E0z_entry() //  [R1, R2]
         { []
         }
     {offset
       c7ETh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7ETi; else goto c7ETj;
       c7ETi: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7ETj: // global
           I64[Sp - 16] = block_c7ETf_info;
           _s7E0u::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s7E0u::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7E0z_info" {
     sat_s7E0z_info:
         const sat_s7E0z_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c7ETf() //  []
         { []
         }
     {offset
       c7ETf: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ETf_info" {
     block_c7ETf_info:
         const _c7ETf;
         const 1;
         const 30;
 },
 sat_s7E0t_entry() //  [R1]
         { []
         }
     {offset
       c7ETr: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7E0t_info" {
     sat_s7E0t_info:
         const sat_s7E0t_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.IO.bracket1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7ETy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7ETz; else goto c7ETA;
       c7ETz: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.bracket1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7ETA: // global
           I64[Sp - 32] = block_c7ES3_info;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.bracket1_info" {
     GHC.IO.bracket1_info:
         const GHC.IO.bracket1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c7ES3() //  [R1]
         { []
         }
     {offset
       c7ES3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7ETD; else goto c7ETC;
       c7ETD: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c7ETC: // global
           _s7DZH::P64 = P64[Sp + 8];
           if (R1 == 0) goto c7ETw; else goto u7ETW;
       c7ETw: // global
           I64[Hp - 24] = sat_s7E0o_info;
           P64[Hp - 16] = _s7DZH::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u7ETW: // global
           if (R1 == 1) goto c7ETx; else goto c7ETv;
       c7ETx: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c7ET8_info;
           R1 = _s7DZH::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c7ETv: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c7ES7_info;
           R1 = _s7DZH::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ES3_info" {
     block_c7ES3_info:
         const _c7ES3;
         const 3;
         const 30;
 },
 _c7ET8() //  [R1]
         { []
         }
     {offset
       c7ET8: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c7ETS; else goto c7ETR;
       c7ETS: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ETR: // global
           I64[Hp - 64] = sat_s7E0z_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s7E0t_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c7ETN_info;
           R2 = Hp - 62;
           _s7E0r::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s7E0r::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ET8_info" {
     block_c7ET8_info:
         const _c7ET8;
         const 2;
         const 30;
 },
 _c7ETN() //  [R1]
         { []
         }
     {offset
       c7ETN: // global
           _s7DZI::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7ETP_info;
           R2 = P64[Sp + 16];
           _s7E0C::P64 = R1;
           R1 = _s7DZI::P64;
           P64[Sp + 16] = _s7E0C::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ETN_info" {
     block_c7ETN_info:
         const _c7ETN;
         const 2;
         const 30;
 },
 _c7ETP() //  []
         { []
         }
     {offset
       c7ETP: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ETP_info" {
     block_c7ETP_info:
         const _c7ETP;
         const 1;
         const 30;
 },
 _c7ES7() //  [R1]
         { []
         }
     {offset
       c7ES7: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c7ETJ; else goto c7ETI;
       c7ETJ: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7ETI: // global
           I64[Hp - 64] = sat_s7DZZ_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s7DZT_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c7ETE_info;
           R2 = Hp - 62;
           _s7DZR::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s7DZR::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ES7_info" {
     block_c7ES7_info:
         const _c7ES7;
         const 2;
         const 30;
 },
 _c7ETE() //  [R1]
         { []
         }
     {offset
       c7ETE: // global
           _s7DZI::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7ETG_info;
           R2 = P64[Sp + 16];
           _s7E02::P64 = R1;
           R1 = _s7DZI::P64;
           P64[Sp + 16] = _s7E02::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ETE_info" {
     block_c7ETE_info:
         const _c7ETE;
         const 2;
         const 30;
 },
 _c7ETG() //  []
         { []
         }
     {offset
       c7ETG: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7ETG_info" {
     block_c7ETG_info:
         const _c7ETG;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.692856812 UTC

[section ""data" . GHC.IO.bracket_closure" {
     GHC.IO.bracket_closure:
         const GHC.IO.bracket_info;
 },
 GHC.IO.bracket_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7EVm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.bracket1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.bracket_info" {
     GHC.IO.bracket_info:
         const GHC.IO.bracket_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.700513285 UTC

[section ""data" . GHC.IO.finally1_closure" {
     GHC.IO.finally1_closure:
         const GHC.IO.finally1_info;
 },
 sat_s7E0T_entry() //  [R1, R2]
         { []
         }
     {offset
       c7EVI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7EVJ; else goto c7EVK;
       c7EVJ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7EVK: // global
           I64[Sp - 16] = block_c7EVG_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7E0T_info" {
     sat_s7E0T_info:
         const sat_s7E0T_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _c7EVG() //  []
         { []
         }
     {offset
       c7EVG: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EVG_info" {
     block_c7EVG_info:
         const _c7EVG;
         const 1;
         const 30;
 },
 sat_s7E0N_entry() //  [R1]
         { []
         }
     {offset
       c7EVR: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7E0N_info" {
     sat_s7E0N_info:
         const sat_s7E0N_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s7E17_entry() //  [R1, R2]
         { []
         }
     {offset
       c7EW7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7EW8; else goto c7EW9;
       c7EW8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7EW9: // global
           I64[Sp - 16] = block_c7EW5_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7E17_info" {
     sat_s7E17_info:
         const sat_s7E17_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _c7EW5() //  []
         { []
         }
     {offset
       c7EW5: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EW5_info" {
     block_c7EW5_info:
         const _c7EW5;
         const 1;
         const 30;
 },
 sat_s7E11_entry() //  [R1]
         { []
         }
     {offset
       c7EWg: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7E11_info" {
     sat_s7E11_info:
         const sat_s7E11_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s7E1e_entry() //  [R1]
         { []
         }
     {offset
       c7EWn: // global
           _s7E1e::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7EWo; else goto c7EWp;
       c7EWp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7EWr; else goto c7EWq;
       c7EWr: // global
           HpAlloc = 32;
           goto c7EWo;
       c7EWo: // global
           R1 = _s7E1e::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c7EWq: // global
           _s7E0G::P64 = P64[_s7E1e::P64 + 7];
           _s7E0H::P64 = P64[_s7E1e::P64 + 15];
           I64[Hp - 24] = sat_s7E17_info;
           P64[Hp - 16] = _s7E0H::P64;
           I64[Hp - 8] = sat_s7E11_info;
           P64[Hp] = _s7E0G::P64;
           I64[Sp - 16] = block_c7EWj_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           P64[Sp - 8] = _s7E0H::P64;
           Sp = Sp - 16;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7E1e_info" {
     sat_s7E1e_info:
         const sat_s7E1e_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _c7EWj() //  [R1]
         { []
         }
     {offset
       c7EWj: // global
           I64[Sp] = block_c7EWl_info;
           _s7E1a::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7E1a::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EWj_info" {
     block_c7EWj_info:
         const _c7EWj;
         const 1;
         const 30;
 },
 _c7EWl() //  []
         { []
         }
     {offset
       c7EWl: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EWl_info" {
     block_c7EWl_info:
         const _c7EWl;
         const 1;
         const 30;
 },
 sat_s7E1l_entry() //  [R1, R2]
         { []
         }
     {offset
       c7EWC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7EWD; else goto c7EWE;
       c7EWD: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7EWE: // global
           I64[Sp - 16] = block_c7EWA_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7E1l_info" {
     sat_s7E1l_info:
         const sat_s7E1l_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _c7EWA() //  []
         { []
         }
     {offset
       c7EWA: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EWA_info" {
     block_c7EWA_info:
         const _c7EWA;
         const 1;
         const 30;
 },
 sat_s7E1f_entry() //  [R1]
         { []
         }
     {offset
       c7EWL: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7E1f_info" {
     sat_s7E1f_info:
         const sat_s7E1f_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.IO.finally1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7EWS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7EWT; else goto c7EWU;
       c7EWT: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.finally1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7EWU: // global
           I64[Sp - 24] = block_c7EVx_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.finally1_info" {
     GHC.IO.finally1_info:
         const GHC.IO.finally1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7EVx() //  [R1]
         { []
         }
     {offset
       c7EVx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7EWX; else goto c7EWW;
       c7EWX: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c7EWW: // global
           _s7E0G::P64 = P64[Sp + 8];
           _s7E0H::P64 = P64[Sp + 16];
           if (R1 == 0) goto c7EWQ; else goto u7EXa;
       c7EWQ: // global
           I64[Hp - 24] = sat_s7E1e_info;
           P64[Hp - 16] = _s7E0G::P64;
           P64[Hp - 8] = _s7E0H::P64;
           _c7EVV::P64 = Hp - 23;
           Hp = Hp - 8;
           R1 = _c7EVV::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u7EXa: // global
           if (R1 == 1) goto c7EWR; else goto c7EWP;
       c7EWR: // global
           I64[Hp - 24] = sat_s7E1l_info;
           P64[Hp - 16] = _s7E0H::P64;
           I64[Hp - 8] = sat_s7E1f_info;
           P64[Hp] = _s7E0G::P64;
           I64[Sp + 8] = block_c7EX4_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
       c7EWP: // global
           I64[Hp - 24] = sat_s7E0T_info;
           P64[Hp - 16] = _s7E0H::P64;
           I64[Hp - 8] = sat_s7E0N_info;
           P64[Hp] = _s7E0G::P64;
           I64[Sp + 8] = block_c7EWY_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EVx_info" {
     block_c7EVx_info:
         const _c7EVx;
         const 2;
         const 30;
 },
 _c7EX4() //  [R1]
         { []
         }
     {offset
       c7EX4: // global
           I64[Sp] = block_c7EX6_info;
           _s7E1o::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7E1o::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EX4_info" {
     block_c7EX4_info:
         const _c7EX4;
         const 1;
         const 30;
 },
 _c7EX6() //  []
         { []
         }
     {offset
       c7EX6: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EX6_info" {
     block_c7EX6_info:
         const _c7EX6;
         const 1;
         const 30;
 },
 _c7EWY() //  [R1]
         { []
         }
     {offset
       c7EWY: // global
           I64[Sp] = block_c7EX0_info;
           _s7E0W::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7E0W::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EWY_info" {
     block_c7EWY_info:
         const _c7EWY;
         const 1;
         const 30;
 },
 _c7EX0() //  []
         { []
         }
     {offset
       c7EX0: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EX0_info" {
     block_c7EX0_info:
         const _c7EX0;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.729488602 UTC

[section ""data" . GHC.IO.finally_closure" {
     GHC.IO.finally_closure:
         const GHC.IO.finally_info;
 },
 GHC.IO.finally_entry() //  [R2, R3]
         { []
         }
     {offset
       c7EYg: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.finally1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.finally_info" {
     GHC.IO.finally_info:
         const GHC.IO.finally_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.73436931 UTC

[section ""data" . GHC.IO.uninterruptibleMask1_closure" {
     GHC.IO.uninterruptibleMask1_closure:
         const GHC.IO.uninterruptibleMask1_info;
 },
 sat_s7E1y_entry() //  [R2]
         { []
         }
     {offset
       c7EYA: // global
           R1 = R2;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7E1y_info" {
     sat_s7E1y_info:
         const sat_s7E1y_entry;
         const 4294967296;
         const 10;
         const 8589934597;
 },
 sat_s7E1A_entry() //  [R2]
         { []
         }
     {offset
       c7EYJ: // global
           R1 = R2;
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7E1A_info" {
     sat_s7E1A_info:
         const sat_s7E1A_entry;
         const 4294967296;
         const 10;
         const 8589934597;
 },
 sat_s7E1C_entry() //  [R2]
         { []
         }
     {offset
       c7EYS: // global
           R1 = R2;
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7E1C_info" {
     sat_s7E1C_info:
         const sat_s7E1C_entry;
         const 4294967296;
         const 10;
         const 8589934597;
 },
 GHC.IO.uninterruptibleMask1_entry() //  [R2]
         { []
         }
     {offset
       c7EYZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7EZ0; else goto c7EZ1;
       c7EZ0: // global
           R2 = R2;
           R1 = GHC.IO.uninterruptibleMask1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7EZ1: // global
           I64[Sp - 16] = block_c7EYr_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.uninterruptibleMask1_info" {
     GHC.IO.uninterruptibleMask1_info:
         const GHC.IO.uninterruptibleMask1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7EYr() //  [R1]
         { []
         }
     {offset
       c7EYr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7EZ4; else goto c7EZ3;
       c7EZ4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c7EZ3: // global
           _s7E1s::P64 = P64[Sp + 8];
           if (R1 == 0) goto c7EYX; else goto u7EZb;
       c7EYX: // global
           I64[Hp - 8] = sat_s7E1A_info;
           I64[Sp + 8] = block_c7EZ8_info;
           R2 = Hp - 6;
           R1 = _s7E1s::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       u7EZb: // global
           if (R1 == 1) goto c7EYY; else goto c7EYW;
       c7EYY: // global
           I64[Hp - 8] = sat_s7E1C_info;
           R2 = Hp - 6;
           R1 = _s7E1s::P64;
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
       c7EYW: // global
           I64[Hp - 8] = sat_s7E1y_info;
           I64[Sp + 8] = block_c7EZ5_info;
           R2 = Hp - 6;
           R1 = _s7E1s::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EYr_info" {
     block_c7EYr_info:
         const _c7EYr;
         const 1;
         const 30;
 },
 _c7EZ8() //  [R1]
         { []
         }
     {offset
       c7EZ8: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EZ8_info" {
     block_c7EZ8_info:
         const _c7EZ8;
         const 0;
         const 30;
 },
 _c7EZ5() //  [R1]
         { []
         }
     {offset
       c7EZ5: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EZ5_info" {
     block_c7EZ5_info:
         const _c7EZ5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.746778476 UTC

[section ""data" . GHC.IO.uninterruptibleMask_closure" {
     GHC.IO.uninterruptibleMask_closure:
         const GHC.IO.uninterruptibleMask_info;
 },
 GHC.IO.uninterruptibleMask_entry() //  [R2]
         { []
         }
     {offset
       c7EZD: // global
           R2 = R2;
           call GHC.IO.uninterruptibleMask1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.uninterruptibleMask_info" {
     GHC.IO.uninterruptibleMask_info:
         const GHC.IO.uninterruptibleMask_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.75100903 UTC

[section ""data" . GHC.IO.uninterruptibleMask_1_closure" {
     GHC.IO.uninterruptibleMask_1_closure:
         const GHC.IO.uninterruptibleMask_1_info;
 },
 GHC.IO.uninterruptibleMask_1_entry() //  [R2]
         { []
         }
     {offset
       c7EZU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7EZV; else goto c7EZW;
       c7EZV: // global
           R2 = R2;
           R1 = GHC.IO.uninterruptibleMask_1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7EZW: // global
           I64[Sp - 16] = block_c7EZO_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.uninterruptibleMask_1_info" {
     GHC.IO.uninterruptibleMask_1_info:
         const GHC.IO.uninterruptibleMask_1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7EZO() //  [R1]
         { []
         }
     {offset
       c7EZO: // global
           _s7E1D::P64 = P64[Sp + 8];
           if (R1 == 1) goto c7EZT; else goto c7EZS;
       c7EZT: // global
           R1 = _s7E1D::P64;
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
       c7EZS: // global
           R1 = _s7E1D::P64;
           Sp = Sp + 16;
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7EZO_info" {
     block_c7EZO_info:
         const _c7EZO;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.75588472 UTC

[section ""data" . GHC.IO.uninterruptibleMask__closure" {
     GHC.IO.uninterruptibleMask__closure:
         const GHC.IO.uninterruptibleMask__info;
 },
 GHC.IO.uninterruptibleMask__entry() //  [R2]
         { []
         }
     {offset
       c7F0a: // global
           R2 = R2;
           call GHC.IO.uninterruptibleMask_1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.uninterruptibleMask__info" {
     GHC.IO.uninterruptibleMask__info:
         const GHC.IO.uninterruptibleMask__entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.759060193 UTC

[section ""data" . GHC.IO.evaluate1_closure" {
     GHC.IO.evaluate1_closure:
         const GHC.IO.evaluate1_info;
 },
 GHC.IO.evaluate1_entry() //  [R2]
         { []
         }
     {offset
       c7F0l: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.evaluate1_info" {
     GHC.IO.evaluate1_info:
         const GHC.IO.evaluate1_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.762272545 UTC

[section ""data" . GHC.IO.evaluate_closure" {
     GHC.IO.evaluate_closure:
         const GHC.IO.evaluate_info;
 },
 GHC.IO.evaluate_entry() //  [R2]
         { []
         }
     {offset
       c7F0w: // global
           R2 = R2;
           call GHC.IO.evaluate1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.evaluate_info" {
     GHC.IO.evaluate_info:
         const GHC.IO.evaluate_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.76515965 UTC

[section ""cstring" . GHC.IO.$trModule4_bytes" {
     GHC.IO.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.766841087 UTC

[section ""data" . GHC.IO.$trModule3_closure" {
     GHC.IO.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.76848811 UTC

[section ""cstring" . GHC.IO.$trModule2_bytes" {
     GHC.IO.$trModule2_bytes:
         I8[] [71,72,67,46,73,79]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.770160151 UTC

[section ""data" . GHC.IO.$trModule1_closure" {
     GHC.IO.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.77183078 UTC

[section ""data" . GHC.IO.$trModule_closure" {
     GHC.IO.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.$trModule3_closure+1;
         const GHC.IO.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.773961295 UTC

[section ""cstring" . GHC.IO.$tcMaskingState2_bytes" {
     GHC.IO.$tcMaskingState2_bytes:
         I8[] [77,97,115,107,105,110,103,83,116,97,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.776067256 UTC

[section ""data" . GHC.IO.$tcMaskingState1_closure" {
     GHC.IO.$tcMaskingState1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.$tcMaskingState2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.77783668 UTC

[section ""data" . GHC.IO.$tcMaskingState_closure" {
     GHC.IO.$tcMaskingState_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.$trModule_closure+1;
         const GHC.IO.$tcMaskingState1_closure+1;
         const GHC.Types.krep$*_closure;
         const 1377527551354837803;
         const 7593236071496752895;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.779576728 UTC

[section ""data" . GHC.IO.$tc'MaskedInterruptible1_closure" {
     GHC.IO.$tc'MaskedInterruptible1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.$tcMaskingState_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.781272255 UTC

[section ""cstring" . GHC.IO.$tc'Unmasked2_bytes" {
     GHC.IO.$tc'Unmasked2_bytes:
         I8[] [39,85,110,109,97,115,107,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.782904545 UTC

[section ""data" . GHC.IO.$tc'Unmasked1_closure" {
     GHC.IO.$tc'Unmasked1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.$tc'Unmasked2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.784639875 UTC

[section ""data" . GHC.IO.$tc'Unmasked_closure" {
     GHC.IO.$tc'Unmasked_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.$trModule_closure+1;
         const GHC.IO.$tc'Unmasked1_closure+1;
         const GHC.IO.$tc'MaskedInterruptible1_closure+1;
         const 16923189221218057084;
         const 12178290748160137861;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.786398969 UTC

[section ""cstring" . GHC.IO.$tc'MaskedInterruptible3_bytes" {
     GHC.IO.$tc'MaskedInterruptible3_bytes:
         I8[] [39,77,97,115,107,101,100,73,110,116,101,114,114,117,112,116,105,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.788092479 UTC

[section ""data" . GHC.IO.$tc'MaskedInterruptible2_closure" {
     GHC.IO.$tc'MaskedInterruptible2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.$tc'MaskedInterruptible3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.789880555 UTC

[section ""data" . GHC.IO.$tc'MaskedInterruptible_closure" {
     GHC.IO.$tc'MaskedInterruptible_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.$trModule_closure+1;
         const GHC.IO.$tc'MaskedInterruptible2_closure+1;
         const GHC.IO.$tc'MaskedInterruptible1_closure+1;
         const 8247192854047081576;
         const 3389631131447074398;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.791625837 UTC

[section ""cstring" . GHC.IO.$tc'MaskedUninterruptible2_bytes" {
     GHC.IO.$tc'MaskedUninterruptible2_bytes:
         I8[] [39,77,97,115,107,101,100,85,110,105,110,116,101,114,114,117,112,116,105,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.793215614 UTC

[section ""data" . GHC.IO.$tc'MaskedUninterruptible1_closure" {
     GHC.IO.$tc'MaskedUninterruptible1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.$tc'MaskedUninterruptible2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.794921064 UTC

[section ""data" . GHC.IO.$tc'MaskedUninterruptible_closure" {
     GHC.IO.$tc'MaskedUninterruptible_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.$trModule_closure+1;
         const GHC.IO.$tc'MaskedUninterruptible1_closure+1;
         const GHC.IO.$tc'MaskedInterruptible1_closure+1;
         const 10964471758180118067;
         const 9988357998868476725;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.796644859 UTC

[section ""data" . GHC.IO.Unmasked_closure" {
     GHC.IO.Unmasked_closure:
         const GHC.IO.Unmasked_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.798993768 UTC

[section ""data" . GHC.IO.MaskedInterruptible_closure" {
     GHC.IO.MaskedInterruptible_closure:
         const GHC.IO.MaskedInterruptible_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.800566151 UTC

[section ""data" . GHC.IO.MaskedUninterruptible_closure" {
     GHC.IO.MaskedUninterruptible_closure:
         const GHC.IO.MaskedUninterruptible_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.802739014 UTC

[section ""relreadonly" . GHC.IO.MaskingState_closure_tbl" {
     GHC.IO.MaskingState_closure_tbl:
         const GHC.IO.Unmasked_closure+1;
         const GHC.IO.MaskedInterruptible_closure+2;
         const GHC.IO.MaskedUninterruptible_closure+3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.804620977 UTC

[section ""cstring" . i7EzY_str" {
     i7EzY_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,85,110,109,97,115,107,101,100]
 },
 GHC.IO.Unmasked_con_entry() //  [R1]
         { []
         }
     {offset
       c7F0Z: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Unmasked_con_info" {
     GHC.IO.Unmasked_con_info:
         const GHC.IO.Unmasked_con_entry;
         const 4294967296;
         const 3;
         const i7EzY_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.807849704 UTC

[section ""cstring" . i7EA0_str" {
     i7EA0_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,77,97,115,107,101,100,73,110,116,101,114,114,117,112,116,105,98,108,101]
 },
 GHC.IO.MaskedInterruptible_con_entry() //  [R1]
         { []
         }
     {offset
       c7F15: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.MaskedInterruptible_con_info" {
     GHC.IO.MaskedInterruptible_con_info:
         const GHC.IO.MaskedInterruptible_con_entry;
         const 4294967296;
         const 4294967299;
         const i7EA0_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.810943963 UTC

[section ""cstring" . i7EA2_str" {
     i7EA2_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,77,97,115,107,101,100,85,110,105,110,116,101,114,114,117,112,116,105,98,108,101]
 },
 GHC.IO.MaskedUninterruptible_con_entry() //  [R1]
         { []
         }
     {offset
       c7F1b: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.MaskedUninterruptible_con_info" {
     GHC.IO.MaskedUninterruptible_con_info:
         const GHC.IO.MaskedUninterruptible_con_entry;
         const 4294967296;
         const 8589934595;
         const i7EA2_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:47.813893001 UTC

[section ""relreadonly" . S7E2C_srt" {
     S7E2C_srt:
         const GHC.IO.$w$cshowsPrec_closure;
         const GHC.IO.$fShowMaskingState1_closure;
         const GHC.IO.$fShowMaskingState3_closure;
         const GHC.IO.$fShowMaskingState5_closure;
         const GHC.IO.$fShowMaskingState_$cshow_closure;
         const GHC.IO.Exception.userError_closure;
         const GHC.IO.Exception.$fxExceptionIOException_closure;
         const GHC.IO.failIO1_closure;
         const GHC.IO.mplusIO1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.68151156 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:02:48.682631238 UTC

[section ""cstring" . GHC.IO.$fShowMaskingState6_bytes" {
     GHC.IO.$fShowMaskingState6_bytes:
         I8[] [85,110,109,97,115,107,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.685318743 UTC

[section ""data" . GHC.IO.$fShowMaskingState5_closure" {
     GHC.IO.$fShowMaskingState5_closure:
         const GHC.IO.$fShowMaskingState5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.$fShowMaskingState5_entry() //  [R1]
         { []
         }
     {offset
       c7F5k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7F5l; else goto c7F5m;
       c7F5l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7F5m: // global
           (_c7F5h::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7F5h::I64 == 0) goto c7F5j; else goto c7F5i;
       c7F5j: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7F5i: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7F5h::I64;
           R2 = GHC.IO.$fShowMaskingState6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.$fShowMaskingState5_info" {
     GHC.IO.$fShowMaskingState5_info:
         const GHC.IO.$fShowMaskingState5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.689423886 UTC

[section ""cstring" . GHC.IO.$fShowMaskingState4_bytes" {
     GHC.IO.$fShowMaskingState4_bytes:
         I8[] [77,97,115,107,101,100,73,110,116,101,114,114,117,112,116,105,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.691954005 UTC

[section ""data" . GHC.IO.$fShowMaskingState3_closure" {
     GHC.IO.$fShowMaskingState3_closure:
         const GHC.IO.$fShowMaskingState3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.$fShowMaskingState3_entry() //  [R1]
         { []
         }
     {offset
       c7F5C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7F5D; else goto c7F5E;
       c7F5D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7F5E: // global
           (_c7F5z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7F5z::I64 == 0) goto c7F5B; else goto c7F5A;
       c7F5B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7F5A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7F5z::I64;
           R2 = GHC.IO.$fShowMaskingState4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.$fShowMaskingState3_info" {
     GHC.IO.$fShowMaskingState3_info:
         const GHC.IO.$fShowMaskingState3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.697461565 UTC

[section ""cstring" . GHC.IO.$fShowMaskingState2_bytes" {
     GHC.IO.$fShowMaskingState2_bytes:
         I8[] [77,97,115,107,101,100,85,110,105,110,116,101,114,114,117,112,116,105,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.699771668 UTC

[section ""data" . GHC.IO.$fShowMaskingState1_closure" {
     GHC.IO.$fShowMaskingState1_closure:
         const GHC.IO.$fShowMaskingState1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.$fShowMaskingState1_entry() //  [R1]
         { []
         }
     {offset
       c7F5U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7F5V; else goto c7F5W;
       c7F5V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7F5W: // global
           (_c7F5R::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c7F5R::I64 == 0) goto c7F5T; else goto c7F5S;
       c7F5T: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c7F5S: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c7F5R::I64;
           R2 = GHC.IO.$fShowMaskingState2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.$fShowMaskingState1_info" {
     GHC.IO.$fShowMaskingState1_info:
         const GHC.IO.$fShowMaskingState1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.704451487 UTC

[section ""data" . GHC.IO.$w$cshowsPrec_closure" {
     GHC.IO.$w$cshowsPrec_closure:
         const GHC.IO.$w$cshowsPrec_info;
         const 0;
 },
 GHC.IO.$w$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c7F6h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7F6i; else goto c7F6j;
       c7F6i: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7F6j: // global
           I64[Sp - 16] = block_c7F69_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7F6u; else goto c7F6a;
       u7F6u: // global
           call _c7F69(R1) args: 0, res: 0, upd: 0;
       c7F6a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.$w$cshowsPrec_info" {
     GHC.IO.$w$cshowsPrec_info:
         const GHC.IO.$w$cshowsPrec_entry;
         const 0;
         const 64424509454;
         const 8589934607;
         const S7F6v_srt;
 },
 _c7F69() //  [R1]
         { []
         }
     {offset
       c7F69: // global
           _s7F1j::P64 = P64[Sp + 8];
           _c7F6g::P64 = R1 & 7;
           if (_c7F6g::P64 < 3) goto u7F6t; else goto c7F6f;
       u7F6t: // global
           if (_c7F6g::P64 < 2) goto c7F6d; else goto c7F6e;
       c7F6d: // global
           R3 = _s7F1j::P64;
           R2 = GHC.IO.$fShowMaskingState5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7F6e: // global
           R3 = _s7F1j::P64;
           R2 = GHC.IO.$fShowMaskingState3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c7F6f: // global
           R3 = _s7F1j::P64;
           R2 = GHC.IO.$fShowMaskingState1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7F69_info" {
     block_c7F69_info:
         const _c7F69;
         const 1;
         const 30064771102;
         const S7F6v_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.709952989 UTC

[section ""data" . GHC.IO.$fShowMaskingState_$cshowsPrec_closure" {
     GHC.IO.$fShowMaskingState_$cshowsPrec_closure:
         const GHC.IO.$fShowMaskingState_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.$fShowMaskingState_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       c7F6L: // global
           _s7F1m::P64 = R3;
           R3 = R4;
           R2 = _s7F1m::P64;
           call GHC.IO.$w$cshowsPrec_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.$fShowMaskingState_$cshowsPrec_info" {
     GHC.IO.$fShowMaskingState_$cshowsPrec_info:
         const GHC.IO.$fShowMaskingState_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S7F6v_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.713930496 UTC

[section ""data" . GHC.IO.$fShowMaskingState_$cshow_closure" {
     GHC.IO.$fShowMaskingState_$cshow_closure:
         const GHC.IO.$fShowMaskingState_$cshow_info;
         const 0;
 },
 GHC.IO.$fShowMaskingState_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c7F74: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7F75; else goto c7F76;
       c7F75: // global
           R2 = R2;
           R1 = GHC.IO.$fShowMaskingState_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7F76: // global
           I64[Sp - 8] = block_c7F6W_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u7F7h; else goto c7F6X;
       u7F7h: // global
           call _c7F6W(R1) args: 0, res: 0, upd: 0;
       c7F6X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.$fShowMaskingState_$cshow_info" {
     GHC.IO.$fShowMaskingState_$cshow_info:
         const GHC.IO.$fShowMaskingState_$cshow_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const S7F6v_srt+8;
 },
 _c7F6W() //  [R1]
         { []
         }
     {offset
       c7F6W: // global
           _c7F73::P64 = R1 & 7;
           if (_c7F73::P64 < 3) goto u7F7g; else goto c7F72;
       u7F7g: // global
           if (_c7F73::P64 < 2) goto c7F70; else goto c7F71;
       c7F70: // global
           R1 = GHC.IO.$fShowMaskingState5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7F71: // global
           R1 = GHC.IO.$fShowMaskingState3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c7F72: // global
           R1 = GHC.IO.$fShowMaskingState1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7F6W_info" {
     block_c7F6W_info:
         const _c7F6W;
         const 0;
         const 30064771102;
         const S7F6v_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.719413204 UTC

[section ""data" . GHC.IO.$fShowMaskingState_$cshowList_closure" {
     GHC.IO.$fShowMaskingState_$cshowList_closure:
         const GHC.IO.$fShowMaskingState_$cshowList_info;
         const 0;
 },
 GHC.IO.$fShowMaskingState_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c7F7A: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.$fShowMaskingState_$cshowList_info" {
     GHC.IO.$fShowMaskingState_$cshowList_info:
         const GHC.IO.$fShowMaskingState_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S7F6v_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.72260667 UTC

[section ""data" . GHC.IO.$fShowMaskingState_closure" {
     GHC.IO.$fShowMaskingState_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.$fShowMaskingState_$cshowsPrec_closure+3;
         const GHC.IO.$fShowMaskingState_$cshow_closure+1;
         const GHC.IO.$fShowMaskingState_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.726510529 UTC

[section ""data" . GHC.IO.$fEqMaskingState_$c==_closure" {
     GHC.IO.$fEqMaskingState_$c==_closure:
         const GHC.IO.$fEqMaskingState_$c==_info;
 },
 GHC.IO.$fEqMaskingState_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c7F7U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7F7V; else goto c7F7W;
       c7F7V: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.$fEqMaskingState_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7F7W: // global
           I64[Sp - 16] = block_c7F7M_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7F8T; else goto c7F7N;
       u7F8T: // global
           call _c7F7M(R1) args: 0, res: 0, upd: 0;
       c7F7N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.$fEqMaskingState_$c==_info" {
     GHC.IO.$fEqMaskingState_$c==_info:
         const GHC.IO.$fEqMaskingState_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7F7M() //  [R1]
         { []
         }
     {offset
       c7F7M: // global
           _s7F1t::P64 = P64[Sp + 8];
           _c7F7T::P64 = R1 & 7;
           if (_c7F7T::P64 < 3) goto u7F8J; else goto c7F7S;
       u7F8J: // global
           if (_c7F7T::P64 < 2) goto c7F7Q; else goto c7F7R;
       c7F7Q: // global
           I64[Sp + 8] = block_c7F7Z_info;
           R1 = _s7F1t::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7F8Q; else goto c7F81;
       u7F8Q: // global
           call _c7F7Z(R1) args: 0, res: 0, upd: 0;
       c7F81: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7F7R: // global
           I64[Sp + 8] = block_c7F8e_info;
           R1 = _s7F1t::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7F8R; else goto c7F8g;
       u7F8R: // global
           call _c7F8e(R1) args: 0, res: 0, upd: 0;
       c7F8g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7F7S: // global
           I64[Sp + 8] = block_c7F8t_info;
           R1 = _s7F1t::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7F8S; else goto c7F8v;
       u7F8S: // global
           call _c7F8t(R1) args: 0, res: 0, upd: 0;
       c7F8v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7F7M_info" {
     block_c7F7M_info:
         const _c7F7M;
         const 1;
         const 30;
 },
 _c7F7Z() //  [R1]
         { []
         }
     {offset
       c7F7Z: // global
           if (R1 & 7 == 1) goto u7F8K; else goto u7F8L;
       u7F8K: // global
           Sp = Sp + 8;
           call _c7F8F() args: 0, res: 0, upd: 0;
       u7F8L: // global
           Sp = Sp + 8;
           call _c7F8B() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7F7Z_info" {
     block_c7F7Z_info:
         const _c7F7Z;
         const 0;
         const 30;
 },
 _c7F8e() //  [R1]
         { []
         }
     {offset
       c7F8e: // global
           if (R1 & 7 == 2) goto u7F8M; else goto u7F8N;
       u7F8M: // global
           Sp = Sp + 8;
           call _c7F8F() args: 0, res: 0, upd: 0;
       u7F8N: // global
           Sp = Sp + 8;
           call _c7F8B() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7F8e_info" {
     block_c7F8e_info:
         const _c7F8e;
         const 0;
         const 30;
 },
 _c7F8t() //  [R1]
         { []
         }
     {offset
       c7F8t: // global
           if (R1 & 7 == 3) goto u7F8O; else goto u7F8P;
       u7F8O: // global
           Sp = Sp + 8;
           call _c7F8F() args: 0, res: 0, upd: 0;
       u7F8P: // global
           Sp = Sp + 8;
           call _c7F8B() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7F8t_info" {
     block_c7F8t_info:
         const _c7F8t;
         const 0;
         const 30;
 },
 _c7F8F() //  []
         { []
         }
     {offset
       c7F8F: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7F8B() //  []
         { []
         }
     {offset
       c7F8B: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.74086719 UTC

[section ""data" . GHC.IO.$fEqMaskingState_$c/=_closure" {
     GHC.IO.$fEqMaskingState_$c/=_closure:
         const GHC.IO.$fEqMaskingState_$c/=_info;
 },
 GHC.IO.$fEqMaskingState_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c7F9Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7F9R; else goto c7F9S;
       c7F9R: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.$fEqMaskingState_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7F9S: // global
           I64[Sp - 16] = block_c7F9I_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7FaP; else goto c7F9J;
       u7FaP: // global
           call _c7F9I(R1) args: 0, res: 0, upd: 0;
       c7F9J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.$fEqMaskingState_$c/=_info" {
     GHC.IO.$fEqMaskingState_$c/=_info:
         const GHC.IO.$fEqMaskingState_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c7F9I() //  [R1]
         { []
         }
     {offset
       c7F9I: // global
           _s7F1z::P64 = P64[Sp + 8];
           _c7F9P::P64 = R1 & 7;
           if (_c7F9P::P64 < 3) goto u7FaF; else goto c7F9O;
       u7FaF: // global
           if (_c7F9P::P64 < 2) goto c7F9M; else goto c7F9N;
       c7F9M: // global
           I64[Sp + 8] = block_c7F9V_info;
           R1 = _s7F1z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7FaM; else goto c7F9X;
       u7FaM: // global
           call _c7F9V(R1) args: 0, res: 0, upd: 0;
       c7F9X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7F9N: // global
           I64[Sp + 8] = block_c7Faa_info;
           R1 = _s7F1z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7FaN; else goto c7Fac;
       u7FaN: // global
           call _c7Faa(R1) args: 0, res: 0, upd: 0;
       c7Fac: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c7F9O: // global
           I64[Sp + 8] = block_c7Fap_info;
           R1 = _s7F1z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u7FaO; else goto c7Far;
       u7FaO: // global
           call _c7Fap(R1) args: 0, res: 0, upd: 0;
       c7Far: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7F9I_info" {
     block_c7F9I_info:
         const _c7F9I;
         const 1;
         const 30;
 },
 _c7F9V() //  [R1]
         { []
         }
     {offset
       c7F9V: // global
           if (R1 & 7 == 1) goto u7FaG; else goto u7FaH;
       u7FaG: // global
           Sp = Sp + 8;
           call _c7FaB() args: 0, res: 0, upd: 0;
       u7FaH: // global
           Sp = Sp + 8;
           call _c7Fax() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7F9V_info" {
     block_c7F9V_info:
         const _c7F9V;
         const 0;
         const 30;
 },
 _c7Faa() //  [R1]
         { []
         }
     {offset
       c7Faa: // global
           if (R1 & 7 == 2) goto u7FaI; else goto u7FaJ;
       u7FaI: // global
           Sp = Sp + 8;
           call _c7FaB() args: 0, res: 0, upd: 0;
       u7FaJ: // global
           Sp = Sp + 8;
           call _c7Fax() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Faa_info" {
     block_c7Faa_info:
         const _c7Faa;
         const 0;
         const 30;
 },
 _c7Fap() //  [R1]
         { []
         }
     {offset
       c7Fap: // global
           if (R1 & 7 == 3) goto u7FaK; else goto u7FaL;
       u7FaK: // global
           Sp = Sp + 8;
           call _c7FaB() args: 0, res: 0, upd: 0;
       u7FaL: // global
           Sp = Sp + 8;
           call _c7Fax() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c7Fap_info" {
     block_c7Fap_info:
         const _c7Fap;
         const 0;
         const 30;
 },
 _c7FaB() //  []
         { []
         }
     {offset
       c7FaB: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c7Fax() //  []
         { []
         }
     {offset
       c7Fax: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.751621051 UTC

[section ""data" . GHC.IO.$fEqMaskingState_closure" {
     GHC.IO.$fEqMaskingState_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.$fEqMaskingState_$c==_closure+2;
         const GHC.IO.$fEqMaskingState_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.754601663 UTC

[section ""data" . GHC.IO.liftIO_closure" {
     GHC.IO.liftIO_closure:
         const GHC.IO.liftIO_info;
 },
 GHC.IO.liftIO_entry() //  [R2]
         { []
         }
     {offset
       c7FbI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7FbJ; else goto c7FbK;
       c7FbJ: // global
           R2 = R2;
           R1 = GHC.IO.liftIO_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7FbK: // global
           I64[Sp - 8] = block_c7FbF_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.liftIO_info" {
     GHC.IO.liftIO_info:
         const GHC.IO.liftIO_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7FbF() //  [R1]
         { []
         }
     {offset
       c7FbF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7FbN; else goto c7FbM;
       c7FbN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7FbM: // global
           I64[Hp - 8] = GHC.ST.STret_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7FbF_info" {
     block_c7FbF_info:
         const _c7FbF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.76060049 UTC

[section ""data" . GHC.IO.failIO1_closure" {
     GHC.IO.failIO1_closure:
         const GHC.IO.failIO1_info;
         const 0;
 },
 sat_s7F1L_entry() //  [R1]
         { []
         }
     {offset
       c7Fcb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Fcc; else goto c7Fcd;
       c7Fcc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Fcd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           R1 = GHC.IO.Exception.userError_closure;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7F1L_info" {
     sat_s7F1L_info:
         const sat_s7F1L_entry;
         const 1;
         const 4294967312;
         const S7F6v_srt+40;
 },
 sat_s7F1M_entry() //  [R1]
         { []
         }
     {offset
       c7Fce: // global
           _s7F1M::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c7Fcf; else goto c7Fcg;
       c7Fcg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Fci; else goto c7Fch;
       c7Fci: // global
           HpAlloc = 24;
           goto c7Fcf;
       c7Fcf: // global
           R1 = _s7F1M::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Fch: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s7F1M::P64;
           _s7F1J::P64 = P64[_s7F1M::P64 + 16];
           I64[Hp - 16] = sat_s7F1L_info;
           P64[Hp] = _s7F1J::P64;
           R2 = GHC.IO.Exception.$fxExceptionIOException_closure;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 16;
           Sp = Sp - 32;
           call GHC.Exception.toException_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7F1M_info" {
     sat_s7F1M_info:
         const sat_s7F1M_entry;
         const 1;
         const 12884901904;
         const S7F6v_srt+40;
 },
 GHC.IO.failIO1_entry() //  [R2]
         { []
         }
     {offset
       c7Fcj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Fcn; else goto c7Fcm;
       c7Fcn: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.failIO1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Fcm: // global
           I64[Hp - 16] = sat_s7F1M_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.failIO1_info" {
     GHC.IO.failIO1_info:
         const GHC.IO.failIO1_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const S7F6v_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.768181142 UTC

[section ""data" . GHC.IO.failIO_closure" {
     GHC.IO.failIO_closure:
         const GHC.IO.failIO_info;
         const 0;
 },
 GHC.IO.failIO_entry() //  [R2]
         { []
         }
     {offset
       c7FcK: // global
           R2 = R2;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.failIO_info" {
     GHC.IO.failIO_info:
         const GHC.IO.failIO_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S7F6v_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.771956617 UTC

[section ""data" . GHC.IO.stToIO1_closure" {
     GHC.IO.stToIO1_closure:
         const GHC.IO.stToIO1_info;
 },
 GHC.IO.stToIO1_entry() //  [R2]
         { []
         }
     {offset
       c7FcV: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.stToIO1_info" {
     GHC.IO.stToIO1_info:
         const GHC.IO.stToIO1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.775211651 UTC

[section ""data" . GHC.IO.stToIO_closure" {
     GHC.IO.stToIO_closure:
         const GHC.IO.stToIO_info;
 },
 GHC.IO.stToIO_entry() //  [R2]
         { []
         }
     {offset
       c7Fd6: // global
           R2 = R2;
           call GHC.IO.stToIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.stToIO_info" {
     GHC.IO.stToIO_info:
         const GHC.IO.stToIO_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.778377882 UTC

[section ""data" . GHC.IO.ioToST1_closure" {
     GHC.IO.ioToST1_closure:
         const GHC.IO.ioToST1_info;
 },
 GHC.IO.ioToST1_entry() //  [R2]
         { []
         }
     {offset
       c7Fdh: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.ioToST1_info" {
     GHC.IO.ioToST1_info:
         const GHC.IO.ioToST1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.781694985 UTC

[section ""data" . GHC.IO.ioToST_closure" {
     GHC.IO.ioToST_closure:
         const GHC.IO.ioToST_info;
 },
 GHC.IO.ioToST_entry() //  [R2]
         { []
         }
     {offset
       c7Fds: // global
           R2 = R2;
           call GHC.IO.ioToST1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.ioToST_info" {
     GHC.IO.ioToST_info:
         const GHC.IO.ioToST_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.784932853 UTC

[section ""data" . GHC.IO.unsafeIOToST1_closure" {
     GHC.IO.unsafeIOToST1_closure:
         const GHC.IO.unsafeIOToST1_info;
 },
 GHC.IO.unsafeIOToST1_entry() //  [R2]
         { []
         }
     {offset
       c7FdD: // global
           R1 = R2;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.unsafeIOToST1_info" {
     GHC.IO.unsafeIOToST1_info:
         const GHC.IO.unsafeIOToST1_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.788224217 UTC

[section ""data" . GHC.IO.unsafeIOToST_closure" {
     GHC.IO.unsafeIOToST_closure:
         const GHC.IO.unsafeIOToST_info;
 },
 GHC.IO.unsafeIOToST_entry() //  [R2]
         { []
         }
     {offset
       c7FdO: // global
           R2 = R2;
           call GHC.IO.unsafeIOToST1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.unsafeIOToST_info" {
     GHC.IO.unsafeIOToST_info:
         const GHC.IO.unsafeIOToST_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.791510585 UTC

[section ""data" . GHC.IO.unsafeSTToIO1_closure" {
     GHC.IO.unsafeSTToIO1_closure:
         const GHC.IO.unsafeSTToIO1_info;
 },
 GHC.IO.unsafeSTToIO1_entry() //  [R2]
         { []
         }
     {offset
       c7FdZ: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.unsafeSTToIO1_info" {
     GHC.IO.unsafeSTToIO1_info:
         const GHC.IO.unsafeSTToIO1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.795213821 UTC

[section ""data" . GHC.IO.unsafeSTToIO_closure" {
     GHC.IO.unsafeSTToIO_closure:
         const GHC.IO.unsafeSTToIO_info;
 },
 GHC.IO.unsafeSTToIO_entry() //  [R2]
         { []
         }
     {offset
       c7Fea: // global
           R2 = R2;
           call GHC.IO.unsafeSTToIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.unsafeSTToIO_info" {
     GHC.IO.unsafeSTToIO_info:
         const GHC.IO.unsafeSTToIO_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.800495693 UTC

[section ""data" . GHC.IO.catch1_closure" {
     GHC.IO.catch1_closure:
         const GHC.IO.catch1_info;
 },
 sat_s7F1Y_entry() //  [R1]
         { []
         }
     {offset
       c7Fez: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F1Y_info" {
     sat_s7F1Y_info:
         const sat_s7F1Y_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s7F20_entry() //  [R1, R2]
         { []
         }
     {offset
       c7FeG: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7FeH; else goto c7FeI;
       c7FeH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7FeI: // global
           I64[Sp - 24] = block_c7Feq_info;
           _s7F1W::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = _s7F1W::P64;
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = _s7F1W::P64;
           Sp = Sp - 40;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F20_info" {
     sat_s7F20_info:
         const sat_s7F20_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c7Feq() //  [R1]
         { []
         }
     {offset
       c7Feq: // global
           if (R1 & 7 == 1) goto c7FeD; else goto c7FeE;
       c7FeD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7FeL; else goto c7FeK;
       c7FeL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7FeK: // global
           I64[Hp - 8] = sat_s7F1Y_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7FeE: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Feq_info" {
     block_c7Feq_info:
         const _c7Feq;
         const 2;
         const 30;
 },
 GHC.IO.catch1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7FeP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7FeT; else goto c7FeS;
       c7FeT: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.catch1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7FeS: // global
           I64[Hp - 16] = sat_s7F20_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R2 = Hp - 15;
           R1 = R3;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.catch1_info" {
     GHC.IO.catch1_info:
         const GHC.IO.catch1_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.808991502 UTC

[section ""data" . GHC.IO.catch_closure" {
     GHC.IO.catch_closure:
         const GHC.IO.catch_info;
 },
 GHC.IO.catch_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7Ffl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.catch1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.catch_info" {
     GHC.IO.catch_info:
         const GHC.IO.catch_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.814770804 UTC

[section ""data" . GHC.IO.catchException1_closure" {
     GHC.IO.catchException1_closure:
         const GHC.IO.catchException1_info;
 },
 sat_s7F28_entry() //  [R1]
         { []
         }
     {offset
       c7FfM: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F28_info" {
     sat_s7F28_info:
         const sat_s7F28_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s7F2a_entry() //  [R1, R2]
         { []
         }
     {offset
       c7FfT: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7FfU; else goto c7FfV;
       c7FfU: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7FfV: // global
           I64[Sp - 24] = block_c7FfD_info;
           _s7F26::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = _s7F26::P64;
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = _s7F26::P64;
           Sp = Sp - 40;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F2a_info" {
     sat_s7F2a_info:
         const sat_s7F2a_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c7FfD() //  [R1]
         { []
         }
     {offset
       c7FfD: // global
           if (R1 & 7 == 1) goto c7FfQ; else goto c7FfR;
       c7FfQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7FfY; else goto c7FfX;
       c7FfY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7FfX: // global
           I64[Hp - 8] = sat_s7F28_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7FfR: // global
           R2 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7FfD_info" {
     block_c7FfD_info:
         const _c7FfD;
         const 2;
         const 30;
 },
 GHC.IO.catchException1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7Fg2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Fg3; else goto c7Fg4;
       c7Fg3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.catchException1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Fg4: // global
           I64[Sp - 24] = block_c7Ffw_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.catchException1_info" {
     GHC.IO.catchException1_info:
         const GHC.IO.catchException1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c7Ffw() //  [R1]
         { []
         }
     {offset
       c7Ffw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Fg7; else goto c7Fg6;
       c7Fg7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Fg6: // global
           I64[Hp - 16] = sat_s7F2a_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R2 = Hp - 15;
           R1 = R1;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ffw_info" {
     block_c7Ffw_info:
         const _c7Ffw;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.825419669 UTC

[section ""data" . GHC.IO.catchException_closure" {
     GHC.IO.catchException_closure:
         const GHC.IO.catchException_info;
 },
 GHC.IO.catchException_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7FgG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.catchException1_entry(R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.catchException_info" {
     GHC.IO.catchException_info:
         const GHC.IO.catchException_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.830662324 UTC

[section ""data" . GHC.IO.mplusIO1_closure" {
     GHC.IO.mplusIO1_closure:
         const GHC.IO.mplusIO1_info;
         const 0;
 },
 sat_s7F2h_entry() //  [R1]
         { []
         }
     {offset
       c7Fh7: // global
           R1 = P64[R1 + 7];
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F2h_info" {
     sat_s7F2h_info:
         const sat_s7F2h_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s7F2j_entry() //  [R1, R2]
         { []
         }
     {offset
       c7Fhe: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c7Fhf; else goto c7Fhg;
       c7Fhf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Fhg: // global
           I64[Sp - 24] = block_c7FgY_info;
           _s7F2f::P64 = R2;
           R2 = GHC.IO.Exception.$fxExceptionIOException_closure;
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = _s7F2f::P64;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp - 8] = _s7F2f::P64;
           Sp = Sp - 40;
           call GHC.Exception.fromException_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F2j_info" {
     sat_s7F2j_info:
         const sat_s7F2j_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S7F6v_srt+48;
 },
 _c7FgY() //  [R1]
         { []
         }
     {offset
       c7FgY: // global
           if (R1 & 7 == 1) goto c7Fhb; else goto c7Fhc;
       c7Fhb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Fhj; else goto c7Fhi;
       c7Fhj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Fhi: // global
           I64[Hp - 8] = sat_s7F2h_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c7Fhc: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7FgY_info" {
     block_c7FgY_info:
         const _c7FgY;
         const 2;
         const 30;
 },
 GHC.IO.mplusIO1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Fhn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Fho; else goto c7Fhp;
       c7Fho: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.mplusIO1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Fhp: // global
           I64[Sp - 16] = block_c7FgR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.mplusIO1_info" {
     GHC.IO.mplusIO1_info:
         const GHC.IO.mplusIO1_entry;
         const 0;
         const 21474836494;
         const 12884901903;
         const S7F6v_srt+48;
 },
 _c7FgR() //  [R1]
         { []
         }
     {offset
       c7FgR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Fhs; else goto c7Fhr;
       c7Fhs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Fhr: // global
           I64[Hp - 8] = sat_s7F2j_info;
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 7;
           R1 = R1;
           Sp = Sp + 16;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7FgR_info" {
     block_c7FgR_info:
         const _c7FgR;
         const 1;
         const 4294967326;
         const S7F6v_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.841110278 UTC

[section ""data" . GHC.IO.mplusIO_closure" {
     GHC.IO.mplusIO_closure:
         const GHC.IO.mplusIO_info;
         const 0;
 },
 GHC.IO.mplusIO_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Fi0: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.mplusIO1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.mplusIO_info" {
     GHC.IO.mplusIO_info:
         const GHC.IO.mplusIO_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S7F6v_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.845749653 UTC

[section ""data" . GHC.IO.catchAny1_closure" {
     GHC.IO.catchAny1_closure:
         const GHC.IO.catchAny1_info;
 },
 sat_s7F2s_entry() //  [R1, R2]
         { []
         }
     {offset
       c7Fil: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Fim; else goto c7Fin;
       c7Fim: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Fin: // global
           I64[Sp - 16] = block_c7Fii_info;
           _s7F2l::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 8] = _s7F2l::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u7Fir; else goto c7Fij;
       u7Fir: // global
           call _c7Fii(R1) args: 0, res: 0, upd: 0;
       c7Fij: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F2s_info" {
     sat_s7F2s_info:
         const sat_s7F2s_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c7Fii() //  [R1]
         { []
         }
     {offset
       c7Fii: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Fii_info" {
     block_c7Fii_info:
         const _c7Fii;
         const 1;
         const 30;
 },
 GHC.IO.catchAny1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Fis: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Fit; else goto c7Fiu;
       c7Fit: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.catchAny1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Fiu: // global
           I64[Sp - 16] = block_c7Fib_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.catchAny1_info" {
     GHC.IO.catchAny1_info:
         const GHC.IO.catchAny1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7Fib() //  [R1]
         { []
         }
     {offset
       c7Fib: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Fix; else goto c7Fiw;
       c7Fix: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Fiw: // global
           I64[Hp - 8] = sat_s7F2s_info;
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 7;
           R1 = R1;
           Sp = Sp + 16;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Fib_info" {
     block_c7Fib_info:
         const _c7Fib;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.854531904 UTC

[section ""data" . GHC.IO.catchAny_closure" {
     GHC.IO.catchAny_closure:
         const GHC.IO.catchAny_info;
 },
 GHC.IO.catchAny_entry() //  [R2, R3]
         { []
         }
     {offset
       c7FiW: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.catchAny1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.catchAny_info" {
     GHC.IO.catchAny_info:
         const GHC.IO.catchAny_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.858417182 UTC

[section ""data" . GHC.IO.throwIO1_closure" {
     GHC.IO.throwIO1_closure:
         const GHC.IO.throwIO1_info;
 },
 sat_s7F2w_entry() //  [R1]
         { []
         }
     {offset
       c7Fjb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7Fjc; else goto c7Fjd;
       c7Fjc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7Fjd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Exception.toException_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7F2w_info" {
     sat_s7F2w_info:
         const sat_s7F2w_entry;
         const 2;
         const 18;
 },
 GHC.IO.throwIO1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Fje: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Fji; else goto c7Fjh;
       c7Fji: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.throwIO1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Fjh: // global
           I64[Hp - 24] = sat_s7F2w_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 24;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.throwIO1_info" {
     GHC.IO.throwIO1_info:
         const GHC.IO.throwIO1_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.863702256 UTC

[section ""data" . GHC.IO.throwIO_closure" {
     GHC.IO.throwIO_closure:
         const GHC.IO.throwIO_info;
 },
 GHC.IO.throwIO_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Fjz: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.throwIO1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.throwIO_info" {
     GHC.IO.throwIO_info:
         const GHC.IO.throwIO_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.86808809 UTC

[section ""data" . GHC.IO.onException1_closure" {
     GHC.IO.onException1_closure:
         const GHC.IO.onException1_info;
 },
 sat_s7F2G_entry() //  [R1, R2]
         { []
         }
     {offset
       c7FjT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7FjU; else goto c7FjV;
       c7FjU: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7FjV: // global
           I64[Sp - 16] = block_c7FjR_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F2G_info" {
     sat_s7F2G_info:
         const sat_s7F2G_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _c7FjR() //  []
         { []
         }
     {offset
       c7FjR: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7FjR_info" {
     block_c7FjR_info:
         const _c7FjR;
         const 1;
         const 30;
 },
 GHC.IO.onException1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7FjX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7FjY; else goto c7FjZ;
       c7FjY: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.onException1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7FjZ: // global
           I64[Sp - 16] = block_c7FjK_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.onException1_info" {
     GHC.IO.onException1_info:
         const GHC.IO.onException1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7FjK() //  [R1]
         { []
         }
     {offset
       c7FjK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7Fk2; else goto c7Fk1;
       c7Fk2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Fk1: // global
           I64[Hp - 8] = sat_s7F2G_info;
           P64[Hp] = P64[Sp + 8];
           R2 = Hp - 6;
           R1 = R1;
           Sp = Sp + 16;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7FjK_info" {
     block_c7FjK_info:
         const _c7FjK;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.877368371 UTC

[section ""data" . GHC.IO.onException_closure" {
     GHC.IO.onException_closure:
         const GHC.IO.onException_info;
 },
 GHC.IO.onException_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Fkq: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.onException1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.onException_info" {
     GHC.IO.onException_info:
         const GHC.IO.onException_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.880621963 UTC

[section ""data" . GHC.IO.unsafeUnmask_closure" {
     GHC.IO.unsafeUnmask_closure:
         const GHC.IO.unsafeUnmask_info;
 },
 GHC.IO.unsafeUnmask_entry() //  [R2]
         { []
         }
     {offset
       c7FkB: // global
           R1 = R2;
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.unsafeUnmask_info" {
     GHC.IO.unsafeUnmask_info:
         const GHC.IO.unsafeUnmask_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.884924372 UTC

[section ""data" . GHC.IO.getMaskingState1_closure" {
     GHC.IO.getMaskingState1_closure:
         const GHC.IO.getMaskingState1_info;
 },
 sat_s7F2M_entry() //  [R1]
         { []
         }
     {offset
       c7FkX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7FkY; else goto c7FkZ;
       c7FkY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c7FkZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s7F2L::I64 = I64[R1 + 16];
           if (_s7F2L::I64 != 0) goto u7Fl0; else goto c7FkV;
       u7Fl0: // global
           if (_s7F2L::I64 != 1) goto c7FkU; else goto c7FkW;
       c7FkU: // global
           R1 = GHC.IO.MaskedInterruptible_closure+2;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7FkW: // global
           R1 = GHC.IO.MaskedUninterruptible_closure+3;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c7FkV: // global
           R1 = GHC.IO.Unmasked_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s7F2M_info" {
     sat_s7F2M_info:
         const sat_s7F2M_entry;
         const 4294967296;
         const 17;
 },
 GHC.IO.getMaskingState1_entry() //  []
         { []
         }
     {offset
       c7Fl1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c7Fl2; else goto c7Fl3;
       c7Fl2: // global
           R1 = GHC.IO.getMaskingState1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c7Fl3: // global
           I64[Sp - 8] = block_c7FkM_info;
           Sp = Sp - 8;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.getMaskingState1_info" {
     GHC.IO.getMaskingState1_info:
         const GHC.IO.getMaskingState1_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _c7FkM() //  [R1]
         { []
         }
     {offset
       c7FkM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c7Fl6; else goto c7Fl5;
       c7Fl6: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c7Fl5: // global
           I64[Hp - 16] = sat_s7F2M_info;
           I64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7FkM_info" {
     block_c7FkM_info:
         const _c7FkM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.892197247 UTC

[section ""data" . GHC.IO.getMaskingState_closure" {
     GHC.IO.getMaskingState_closure:
         const GHC.IO.getMaskingState_info;
 },
 GHC.IO.getMaskingState_entry() //  []
         { []
         }
     {offset
       c7Flu: // global
           call GHC.IO.getMaskingState1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.getMaskingState_info" {
     GHC.IO.getMaskingState_info:
         const GHC.IO.getMaskingState_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.895977201 UTC

[section ""data" . GHC.IO.interruptible1_closure" {
     GHC.IO.interruptible1_closure:
         const GHC.IO.interruptible1_info;
 },
 GHC.IO.interruptible1_entry() //  [R2]
         { []
         }
     {offset
       c7FlM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7FlN; else goto c7FlO;
       c7FlN: // global
           R2 = R2;
           R1 = GHC.IO.interruptible1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7FlO: // global
           I64[Sp - 16] = block_c7FlF_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.interruptible1_info" {
     GHC.IO.interruptible1_info:
         const GHC.IO.interruptible1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7FlF() //  [R1]
         { []
         }
     {offset
       c7FlF: // global
           _s7F2N::P64 = P64[Sp + 8];
           if (R1 == 0) goto c7FlL; else goto u7FlQ;
       u7FlQ: // global
           if (R1 == 1) goto c7FlL; else goto c7FlJ;
       c7FlL: // global
           R1 = _s7F2N::P64;
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
       c7FlJ: // global
           R1 = _s7F2N::P64;
           Sp = Sp + 16;
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7FlF_info" {
     block_c7FlF_info:
         const _c7FlF;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.901056971 UTC

[section ""data" . GHC.IO.interruptible_closure" {
     GHC.IO.interruptible_closure:
         const GHC.IO.interruptible_info;
 },
 GHC.IO.interruptible_entry() //  [R2]
         { []
         }
     {offset
       c7Fm4: // global
           R2 = R2;
           call GHC.IO.interruptible1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.interruptible_info" {
     GHC.IO.interruptible_info:
         const GHC.IO.interruptible_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.906296004 UTC

[section ""data" . GHC.IO.mask1_closure" {
     GHC.IO.mask1_closure:
         const GHC.IO.mask1_info;
 },
 sat_s7F2Z_entry() //  [R2]
         { []
         }
     {offset
       c7Fmo: // global
           R1 = R2;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F2Z_info" {
     sat_s7F2Z_info:
         const sat_s7F2Z_entry;
         const 4294967296;
         const 10;
         const 8589934597;
 },
 sat_s7F30_entry() //  [R2]
         { []
         }
     {offset
       c7Fmx: // global
           R1 = R2;
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F30_info" {
     sat_s7F30_info:
         const sat_s7F30_entry;
         const 4294967296;
         const 10;
         const 8589934597;
 },
 sat_s7F32_entry() //  [R2]
         { []
         }
     {offset
       c7FmG: // global
           R1 = R2;
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F32_info" {
     sat_s7F32_info:
         const sat_s7F32_entry;
         const 4294967296;
         const 10;
         const 8589934597;
 },
 GHC.IO.mask1_entry() //  [R2]
         { []
         }
     {offset
       c7FmN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7FmO; else goto c7FmP;
       c7FmO: // global
           R2 = R2;
           R1 = GHC.IO.mask1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7FmP: // global
           I64[Sp - 16] = block_c7Fmf_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.mask1_info" {
     GHC.IO.mask1_info:
         const GHC.IO.mask1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7Fmf() //  [R1]
         { []
         }
     {offset
       c7Fmf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7FmS; else goto c7FmR;
       c7FmS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c7FmR: // global
           _s7F2T::P64 = P64[Sp + 8];
           if (R1 == 0) goto c7FmL; else goto u7FmW;
       c7FmL: // global
           I64[Hp - 8] = sat_s7F30_info;
           I64[Sp + 8] = block_c7FmT_info;
           R2 = Hp - 6;
           R1 = _s7F2T::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       u7FmW: // global
           if (R1 == 1) goto c7FmM; else goto c7FmK;
       c7FmM: // global
           I64[Hp - 8] = sat_s7F32_info;
           R2 = Hp - 6;
           R1 = _s7F2T::P64;
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
       c7FmK: // global
           I64[Hp - 8] = sat_s7F2Z_info;
           R2 = Hp - 6;
           R1 = _s7F2T::P64;
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Fmf_info" {
     block_c7Fmf_info:
         const _c7Fmf;
         const 1;
         const 30;
 },
 _c7FmT() //  [R1]
         { []
         }
     {offset
       c7FmT: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7FmT_info" {
     block_c7FmT_info:
         const _c7FmT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.916969548 UTC

[section ""data" . GHC.IO.mask_closure" {
     GHC.IO.mask_closure:
         const GHC.IO.mask_info;
 },
 GHC.IO.mask_entry() //  [R2]
         { []
         }
     {offset
       c7Fnq: // global
           R2 = R2;
           call GHC.IO.mask1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.mask_info" {
     GHC.IO.mask_info:
         const GHC.IO.mask_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.921081039 UTC

[section ""data" . GHC.IO.mask_1_closure" {
     GHC.IO.mask_1_closure:
         const GHC.IO.mask_1_info;
 },
 GHC.IO.mask_1_entry() //  [R2]
         { []
         }
     {offset
       c7FnH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7FnI; else goto c7FnJ;
       c7FnI: // global
           R2 = R2;
           R1 = GHC.IO.mask_1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7FnJ: // global
           I64[Sp - 16] = block_c7FnB_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.mask_1_info" {
     GHC.IO.mask_1_info:
         const GHC.IO.mask_1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7FnB() //  [R1]
         { []
         }
     {offset
       c7FnB: // global
           _s7F33::P64 = P64[Sp + 8];
           if (R1 == 0) goto c7FnG; else goto c7FnF;
       c7FnG: // global
           R1 = _s7F33::P64;
           Sp = Sp + 16;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       c7FnF: // global
           R1 = _s7F33::P64;
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7FnB_info" {
     block_c7FnB_info:
         const _c7FnB;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.926091865 UTC

[section ""data" . GHC.IO.mask__closure" {
     GHC.IO.mask__closure:
         const GHC.IO.mask__info;
 },
 GHC.IO.mask__entry() //  [R2]
         { []
         }
     {offset
       c7FnY: // global
           R2 = R2;
           call GHC.IO.mask_1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.mask__info" {
     GHC.IO.mask__info:
         const GHC.IO.mask__entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.936056426 UTC

[section ""data" . GHC.IO.bracket1_closure" {
     GHC.IO.bracket1_closure:
         const GHC.IO.bracket1_info;
 },
 sat_s7F3r_entry() //  [R1, R2]
         { []
         }
     {offset
       c7Fom: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Fon; else goto c7Foo;
       c7Fon: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Foo: // global
           I64[Sp - 16] = block_c7Fok_info;
           _s7F3m::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s7F3m::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F3r_info" {
     sat_s7F3r_info:
         const sat_s7F3r_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c7Fok() //  []
         { []
         }
     {offset
       c7Fok: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Fok_info" {
     block_c7Fok_info:
         const _c7Fok;
         const 1;
         const 30;
 },
 sat_s7F3l_entry() //  [R1]
         { []
         }
     {offset
       c7Fow: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F3l_info" {
     sat_s7F3l_info:
         const sat_s7F3l_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s7F3J_entry() //  [R1, R2]
         { []
         }
     {offset
       c7FoO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7FoP; else goto c7FoQ;
       c7FoP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7FoQ: // global
           I64[Sp - 16] = block_c7FoM_info;
           _s7F3E::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s7F3E::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F3J_info" {
     sat_s7F3J_info:
         const sat_s7F3J_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c7FoM() //  []
         { []
         }
     {offset
       c7FoM: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7FoM_info" {
     block_c7FoM_info:
         const _c7FoM;
         const 1;
         const 30;
 },
 sat_s7F3D_entry() //  [R1]
         { []
         }
     {offset
       c7FoY: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F3D_info" {
     sat_s7F3D_info:
         const sat_s7F3D_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s7F3Q_entry() //  [R1]
         { []
         }
     {offset
       c7Fp5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Fp6; else goto c7Fp7;
       c7Fp6: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c7Fp7: // global
           I64[Sp - 24] = block_c7FoF_info;
           _s7F3a::P64 = P64[R1 + 15];
           _s7F3b::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s7F3a::P64;
           P64[Sp - 8] = _s7F3b::P64;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F3Q_info" {
     sat_s7F3Q_info:
         const sat_s7F3Q_entry;
         const 3;
         const 8;
         const 4294967299;
 },
 _c7FoF() //  [R1]
         { []
         }
     {offset
       c7FoF: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c7Fpa; else goto c7Fp9;
       c7Fpa: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7Fp9: // global
           I64[Hp - 64] = sat_s7F3J_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s7F3D_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c7Fp1_info;
           R2 = Hp - 62;
           _s7F3B::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s7F3B::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7FoF_info" {
     block_c7FoF_info:
         const _c7FoF;
         const 2;
         const 30;
 },
 _c7Fp1() //  [R1]
         { []
         }
     {offset
       c7Fp1: // global
           _s7F3a::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7Fp3_info;
           R2 = P64[Sp + 16];
           _s7F3M::P64 = R1;
           R1 = _s7F3a::P64;
           P64[Sp + 16] = _s7F3M::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Fp1_info" {
     block_c7Fp1_info:
         const _c7Fp1;
         const 2;
         const 30;
 },
 _c7Fp3() //  []
         { []
         }
     {offset
       c7Fp3: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Fp3_info" {
     block_c7Fp3_info:
         const _c7Fp3;
         const 1;
         const 30;
 },
 sat_s7F41_entry() //  [R1, R2]
         { []
         }
     {offset
       c7Fpn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Fpo; else goto c7Fpp;
       c7Fpo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Fpp: // global
           I64[Sp - 16] = block_c7Fpl_info;
           _s7F3W::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _s7F3W::P64;
           Sp = Sp - 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F41_info" {
     sat_s7F41_info:
         const sat_s7F41_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c7Fpl() //  []
         { []
         }
     {offset
       c7Fpl: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Fpl_info" {
     block_c7Fpl_info:
         const _c7Fpl;
         const 1;
         const 30;
 },
 sat_s7F3V_entry() //  [R1]
         { []
         }
     {offset
       c7Fpx: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F3V_info" {
     sat_s7F3V_info:
         const sat_s7F3V_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.IO.bracket1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7FpE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c7FpF; else goto c7FpG;
       c7FpF: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.bracket1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c7FpG: // global
           I64[Sp - 32] = block_c7Fo9_info;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.bracket1_info" {
     GHC.IO.bracket1_info:
         const GHC.IO.bracket1_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c7Fo9() //  [R1]
         { []
         }
     {offset
       c7Fo9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7FpJ; else goto c7FpI;
       c7FpJ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c7FpI: // global
           _s7F39::P64 = P64[Sp + 8];
           if (R1 == 0) goto c7FpC; else goto u7Fq2;
       c7FpC: // global
           I64[Hp - 24] = sat_s7F3Q_info;
           P64[Hp - 16] = _s7F39::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u7Fq2: // global
           if (R1 == 1) goto c7FpD; else goto c7FpB;
       c7FpD: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c7Fpe_info;
           R1 = _s7F39::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       c7FpB: // global
           Hp = Hp - 32;
           I64[Sp + 8] = block_c7Fod_info;
           R1 = _s7F39::P64;
           Sp = Sp + 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Fo9_info" {
     block_c7Fo9_info:
         const _c7Fo9;
         const 3;
         const 30;
 },
 _c7Fpe() //  [R1]
         { []
         }
     {offset
       c7Fpe: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c7FpY; else goto c7FpX;
       c7FpY: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7FpX: // global
           I64[Hp - 64] = sat_s7F41_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s7F3V_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c7FpT_info;
           R2 = Hp - 62;
           _s7F3T::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s7F3T::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Fpe_info" {
     block_c7Fpe_info:
         const _c7Fpe;
         const 2;
         const 30;
 },
 _c7FpT() //  [R1]
         { []
         }
     {offset
       c7FpT: // global
           _s7F3a::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7FpV_info;
           R2 = P64[Sp + 16];
           _s7F44::P64 = R1;
           R1 = _s7F3a::P64;
           P64[Sp + 16] = _s7F44::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7FpT_info" {
     block_c7FpT_info:
         const _c7FpT;
         const 2;
         const 30;
 },
 _c7FpV() //  []
         { []
         }
     {offset
       c7FpV: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7FpV_info" {
     block_c7FpV_info:
         const _c7FpV;
         const 1;
         const 30;
 },
 _c7Fod() //  [R1]
         { []
         }
     {offset
       c7Fod: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c7FpP; else goto c7FpO;
       c7FpP: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c7FpO: // global
           I64[Hp - 64] = sat_s7F3r_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_s7F3l_info;
           P64[Hp] = Hp - 40;
           I64[Sp] = block_c7FpK_info;
           R2 = Hp - 62;
           _s7F3j::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _s7F3j::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Fod_info" {
     block_c7Fod_info:
         const _c7Fod;
         const 2;
         const 30;
 },
 _c7FpK() //  [R1]
         { []
         }
     {offset
       c7FpK: // global
           _s7F3a::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c7FpM_info;
           R2 = P64[Sp + 16];
           _s7F3u::P64 = R1;
           R1 = _s7F3a::P64;
           P64[Sp + 16] = _s7F3u::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7FpK_info" {
     block_c7FpK_info:
         const _c7FpK;
         const 2;
         const 30;
 },
 _c7FpM() //  []
         { []
         }
     {offset
       c7FpM: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7FpM_info" {
     block_c7FpM_info:
         const _c7FpM;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.970747884 UTC

[section ""data" . GHC.IO.bracket_closure" {
     GHC.IO.bracket_closure:
         const GHC.IO.bracket_info;
 },
 GHC.IO.bracket_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c7FrP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.bracket1_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.bracket_info" {
     GHC.IO.bracket_info:
         const GHC.IO.bracket_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:48.979217734 UTC

[section ""data" . GHC.IO.finally1_closure" {
     GHC.IO.finally1_closure:
         const GHC.IO.finally1_info;
 },
 sat_s7F4l_entry() //  [R1, R2]
         { []
         }
     {offset
       c7Fsb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Fsc; else goto c7Fsd;
       c7Fsc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Fsd: // global
           I64[Sp - 16] = block_c7Fs9_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F4l_info" {
     sat_s7F4l_info:
         const sat_s7F4l_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _c7Fs9() //  []
         { []
         }
     {offset
       c7Fs9: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Fs9_info" {
     block_c7Fs9_info:
         const _c7Fs9;
         const 1;
         const 30;
 },
 sat_s7F4f_entry() //  [R1]
         { []
         }
     {offset
       c7Fsk: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F4f_info" {
     sat_s7F4f_info:
         const sat_s7F4f_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s7F4z_entry() //  [R1, R2]
         { []
         }
     {offset
       c7FsA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7FsB; else goto c7FsC;
       c7FsB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7FsC: // global
           I64[Sp - 16] = block_c7Fsy_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F4z_info" {
     sat_s7F4z_info:
         const sat_s7F4z_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _c7Fsy() //  []
         { []
         }
     {offset
       c7Fsy: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Fsy_info" {
     block_c7Fsy_info:
         const _c7Fsy;
         const 1;
         const 30;
 },
 sat_s7F4t_entry() //  [R1]
         { []
         }
     {offset
       c7FsJ: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F4t_info" {
     sat_s7F4t_info:
         const sat_s7F4t_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s7F4G_entry() //  [R1]
         { []
         }
     {offset
       c7FsQ: // global
           _s7F4G::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c7FsR; else goto c7FsS;
       c7FsS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7FsU; else goto c7FsT;
       c7FsU: // global
           HpAlloc = 32;
           goto c7FsR;
       c7FsR: // global
           R1 = _s7F4G::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c7FsT: // global
           _s7F48::P64 = P64[_s7F4G::P64 + 7];
           _s7F49::P64 = P64[_s7F4G::P64 + 15];
           I64[Hp - 24] = sat_s7F4z_info;
           P64[Hp - 16] = _s7F49::P64;
           I64[Hp - 8] = sat_s7F4t_info;
           P64[Hp] = _s7F48::P64;
           I64[Sp - 16] = block_c7FsM_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           P64[Sp - 8] = _s7F49::P64;
           Sp = Sp - 16;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F4G_info" {
     sat_s7F4G_info:
         const sat_s7F4G_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _c7FsM() //  [R1]
         { []
         }
     {offset
       c7FsM: // global
           I64[Sp] = block_c7FsO_info;
           _s7F4C::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7F4C::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7FsM_info" {
     block_c7FsM_info:
         const _c7FsM;
         const 1;
         const 30;
 },
 _c7FsO() //  []
         { []
         }
     {offset
       c7FsO: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7FsO_info" {
     block_c7FsO_info:
         const _c7FsO;
         const 1;
         const 30;
 },
 sat_s7F4N_entry() //  [R1, R2]
         { []
         }
     {offset
       c7Ft5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7Ft6; else goto c7Ft7;
       c7Ft6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7Ft7: // global
           I64[Sp - 16] = block_c7Ft3_info;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F4N_info" {
     sat_s7F4N_info:
         const sat_s7F4N_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _c7Ft3() //  []
         { []
         }
     {offset
       c7Ft3: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ft3_info" {
     block_c7Ft3_info:
         const _c7Ft3;
         const 1;
         const 30;
 },
 sat_s7F4H_entry() //  [R1]
         { []
         }
     {offset
       c7Fte: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F4H_info" {
     sat_s7F4H_info:
         const sat_s7F4H_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.IO.finally1_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Ftl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c7Ftm; else goto c7Ftn;
       c7Ftm: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.finally1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c7Ftn: // global
           I64[Sp - 24] = block_c7Fs0_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.finally1_info" {
     GHC.IO.finally1_info:
         const GHC.IO.finally1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c7Fs0() //  [R1]
         { []
         }
     {offset
       c7Fs0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c7Ftq; else goto c7Ftp;
       c7Ftq: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c7Ftp: // global
           _s7F48::P64 = P64[Sp + 8];
           _s7F49::P64 = P64[Sp + 16];
           if (R1 == 0) goto c7Ftj; else goto u7FtD;
       c7Ftj: // global
           I64[Hp - 24] = sat_s7F4G_info;
           P64[Hp - 16] = _s7F48::P64;
           P64[Hp - 8] = _s7F49::P64;
           _c7Fso::P64 = Hp - 23;
           Hp = Hp - 8;
           R1 = _c7Fso::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       u7FtD: // global
           if (R1 == 1) goto c7Ftk; else goto c7Fti;
       c7Ftk: // global
           I64[Hp - 24] = sat_s7F4N_info;
           P64[Hp - 16] = _s7F49::P64;
           I64[Hp - 8] = sat_s7F4H_info;
           P64[Hp] = _s7F48::P64;
           I64[Sp + 8] = block_c7Ftx_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
       c7Fti: // global
           I64[Hp - 24] = sat_s7F4l_info;
           P64[Hp - 16] = _s7F49::P64;
           I64[Hp - 8] = sat_s7F4f_info;
           P64[Hp] = _s7F48::P64;
           I64[Sp + 8] = block_c7Ftr_info;
           R2 = Hp - 22;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Fs0_info" {
     block_c7Fs0_info:
         const _c7Fs0;
         const 2;
         const 30;
 },
 _c7Ftx() //  [R1]
         { []
         }
     {offset
       c7Ftx: // global
           I64[Sp] = block_c7Ftz_info;
           _s7F4Q::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7F4Q::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ftx_info" {
     block_c7Ftx_info:
         const _c7Ftx;
         const 1;
         const 30;
 },
 _c7Ftz() //  []
         { []
         }
     {offset
       c7Ftz: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ftz_info" {
     block_c7Ftz_info:
         const _c7Ftz;
         const 1;
         const 30;
 },
 _c7Ftr() //  [R1]
         { []
         }
     {offset
       c7Ftr: // global
           I64[Sp] = block_c7Ftt_info;
           _s7F4o::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s7F4o::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ftr_info" {
     block_c7Ftr_info:
         const _c7Ftr;
         const 1;
         const 30;
 },
 _c7Ftt() //  []
         { []
         }
     {offset
       c7Ftt: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Ftt_info" {
     block_c7Ftt_info:
         const _c7Ftt;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.007069427 UTC

[section ""data" . GHC.IO.finally_closure" {
     GHC.IO.finally_closure:
         const GHC.IO.finally_info;
 },
 GHC.IO.finally_entry() //  [R2, R3]
         { []
         }
     {offset
       c7Fv0: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.finally1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.finally_info" {
     GHC.IO.finally_info:
         const GHC.IO.finally_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.012487628 UTC

[section ""data" . GHC.IO.uninterruptibleMask1_closure" {
     GHC.IO.uninterruptibleMask1_closure:
         const GHC.IO.uninterruptibleMask1_info;
 },
 sat_s7F50_entry() //  [R2]
         { []
         }
     {offset
       c7Fvk: // global
           R1 = R2;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F50_info" {
     sat_s7F50_info:
         const sat_s7F50_entry;
         const 4294967296;
         const 10;
         const 8589934597;
 },
 sat_s7F52_entry() //  [R2]
         { []
         }
     {offset
       c7Fvt: // global
           R1 = R2;
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F52_info" {
     sat_s7F52_info:
         const sat_s7F52_entry;
         const 4294967296;
         const 10;
         const 8589934597;
 },
 sat_s7F54_entry() //  [R2]
         { []
         }
     {offset
       c7FvC: // global
           R1 = R2;
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s7F54_info" {
     sat_s7F54_info:
         const sat_s7F54_entry;
         const 4294967296;
         const 10;
         const 8589934597;
 },
 GHC.IO.uninterruptibleMask1_entry() //  [R2]
         { []
         }
     {offset
       c7FvJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7FvK; else goto c7FvL;
       c7FvK: // global
           R2 = R2;
           R1 = GHC.IO.uninterruptibleMask1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7FvL: // global
           I64[Sp - 16] = block_c7Fvb_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.uninterruptibleMask1_info" {
     GHC.IO.uninterruptibleMask1_info:
         const GHC.IO.uninterruptibleMask1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7Fvb() //  [R1]
         { []
         }
     {offset
       c7Fvb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c7FvO; else goto c7FvN;
       c7FvO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c7FvN: // global
           _s7F4U::P64 = P64[Sp + 8];
           if (R1 == 0) goto c7FvH; else goto u7FvV;
       c7FvH: // global
           I64[Hp - 8] = sat_s7F52_info;
           I64[Sp + 8] = block_c7FvS_info;
           R2 = Hp - 6;
           R1 = _s7F4U::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
       u7FvV: // global
           if (R1 == 1) goto c7FvI; else goto c7FvG;
       c7FvI: // global
           I64[Hp - 8] = sat_s7F54_info;
           R2 = Hp - 6;
           R1 = _s7F4U::P64;
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
       c7FvG: // global
           I64[Hp - 8] = sat_s7F50_info;
           I64[Sp + 8] = block_c7FvP_info;
           R2 = Hp - 6;
           R1 = _s7F4U::P64;
           Sp = Sp + 8;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c7Fvb_info" {
     block_c7Fvb_info:
         const _c7Fvb;
         const 1;
         const 30;
 },
 _c7FvS() //  [R1]
         { []
         }
     {offset
       c7FvS: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7FvS_info" {
     block_c7FvS_info:
         const _c7FvS;
         const 0;
         const 30;
 },
 _c7FvP() //  [R1]
         { []
         }
     {offset
       c7FvP: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7FvP_info" {
     block_c7FvP_info:
         const _c7FvP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.024688226 UTC

[section ""data" . GHC.IO.uninterruptibleMask_closure" {
     GHC.IO.uninterruptibleMask_closure:
         const GHC.IO.uninterruptibleMask_info;
 },
 GHC.IO.uninterruptibleMask_entry() //  [R2]
         { []
         }
     {offset
       c7Fwt: // global
           R2 = R2;
           call GHC.IO.uninterruptibleMask1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.uninterruptibleMask_info" {
     GHC.IO.uninterruptibleMask_info:
         const GHC.IO.uninterruptibleMask_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.028284944 UTC

[section ""data" . GHC.IO.uninterruptibleMask_1_closure" {
     GHC.IO.uninterruptibleMask_1_closure:
         const GHC.IO.uninterruptibleMask_1_info;
 },
 GHC.IO.uninterruptibleMask_1_entry() //  [R2]
         { []
         }
     {offset
       c7FwK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c7FwL; else goto c7FwM;
       c7FwL: // global
           R2 = R2;
           R1 = GHC.IO.uninterruptibleMask_1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c7FwM: // global
           I64[Sp - 16] = block_c7FwE_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.uninterruptibleMask_1_info" {
     GHC.IO.uninterruptibleMask_1_info:
         const GHC.IO.uninterruptibleMask_1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c7FwE() //  [R1]
         { []
         }
     {offset
       c7FwE: // global
           _s7F55::P64 = P64[Sp + 8];
           if (R1 == 1) goto c7FwJ; else goto c7FwI;
       c7FwJ: // global
           R1 = _s7F55::P64;
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
       c7FwI: // global
           R1 = _s7F55::P64;
           Sp = Sp + 16;
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c7FwE_info" {
     block_c7FwE_info:
         const _c7FwE;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.03314607 UTC

[section ""data" . GHC.IO.uninterruptibleMask__closure" {
     GHC.IO.uninterruptibleMask__closure:
         const GHC.IO.uninterruptibleMask__info;
 },
 GHC.IO.uninterruptibleMask__entry() //  [R2]
         { []
         }
     {offset
       c7Fx1: // global
           R2 = R2;
           call GHC.IO.uninterruptibleMask_1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.uninterruptibleMask__info" {
     GHC.IO.uninterruptibleMask__info:
         const GHC.IO.uninterruptibleMask__entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.036300579 UTC

[section ""data" . GHC.IO.evaluate1_closure" {
     GHC.IO.evaluate1_closure:
         const GHC.IO.evaluate1_info;
 },
 GHC.IO.evaluate1_entry() //  [R2]
         { []
         }
     {offset
       c7Fxc: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.evaluate1_info" {
     GHC.IO.evaluate1_info:
         const GHC.IO.evaluate1_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.039489067 UTC

[section ""data" . GHC.IO.evaluate_closure" {
     GHC.IO.evaluate_closure:
         const GHC.IO.evaluate_info;
 },
 GHC.IO.evaluate_entry() //  [R2]
         { []
         }
     {offset
       c7Fxn: // global
           R2 = R2;
           call GHC.IO.evaluate1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.evaluate_info" {
     GHC.IO.evaluate_info:
         const GHC.IO.evaluate_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.04291254 UTC

[section ""cstring" . GHC.IO.$trModule4_bytes" {
     GHC.IO.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.044494577 UTC

[section ""data" . GHC.IO.$trModule3_closure" {
     GHC.IO.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.046142742 UTC

[section ""cstring" . GHC.IO.$trModule2_bytes" {
     GHC.IO.$trModule2_bytes:
         I8[] [71,72,67,46,73,79]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.047726581 UTC

[section ""data" . GHC.IO.$trModule1_closure" {
     GHC.IO.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.04930124 UTC

[section ""data" . GHC.IO.$trModule_closure" {
     GHC.IO.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.$trModule3_closure+1;
         const GHC.IO.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.050940133 UTC

[section ""cstring" . GHC.IO.$tcMaskingState2_bytes" {
     GHC.IO.$tcMaskingState2_bytes:
         I8[] [77,97,115,107,105,110,103,83,116,97,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.052585871 UTC

[section ""data" . GHC.IO.$tcMaskingState1_closure" {
     GHC.IO.$tcMaskingState1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.$tcMaskingState2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.054340155 UTC

[section ""data" . GHC.IO.$tcMaskingState_closure" {
     GHC.IO.$tcMaskingState_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.$trModule_closure+1;
         const GHC.IO.$tcMaskingState1_closure+1;
         const GHC.Types.krep$*_closure;
         const 1377527551354837803;
         const 7593236071496752895;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.055977538 UTC

[section ""data" . GHC.IO.$tc'MaskedInterruptible1_closure" {
     GHC.IO.$tc'MaskedInterruptible1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.$tcMaskingState_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.057651313 UTC

[section ""cstring" . GHC.IO.$tc'Unmasked2_bytes" {
     GHC.IO.$tc'Unmasked2_bytes:
         I8[] [39,85,110,109,97,115,107,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.059258214 UTC

[section ""data" . GHC.IO.$tc'Unmasked1_closure" {
     GHC.IO.$tc'Unmasked1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.$tc'Unmasked2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.060966762 UTC

[section ""data" . GHC.IO.$tc'Unmasked_closure" {
     GHC.IO.$tc'Unmasked_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.$trModule_closure+1;
         const GHC.IO.$tc'Unmasked1_closure+1;
         const GHC.IO.$tc'MaskedInterruptible1_closure+1;
         const 16923189221218057084;
         const 12178290748160137861;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.062681832 UTC

[section ""cstring" . GHC.IO.$tc'MaskedInterruptible3_bytes" {
     GHC.IO.$tc'MaskedInterruptible3_bytes:
         I8[] [39,77,97,115,107,101,100,73,110,116,101,114,114,117,112,116,105,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.064327408 UTC

[section ""data" . GHC.IO.$tc'MaskedInterruptible2_closure" {
     GHC.IO.$tc'MaskedInterruptible2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.$tc'MaskedInterruptible3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.066477621 UTC

[section ""data" . GHC.IO.$tc'MaskedInterruptible_closure" {
     GHC.IO.$tc'MaskedInterruptible_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.$trModule_closure+1;
         const GHC.IO.$tc'MaskedInterruptible2_closure+1;
         const GHC.IO.$tc'MaskedInterruptible1_closure+1;
         const 8247192854047081576;
         const 3389631131447074398;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.068114479 UTC

[section ""cstring" . GHC.IO.$tc'MaskedUninterruptible2_bytes" {
     GHC.IO.$tc'MaskedUninterruptible2_bytes:
         I8[] [39,77,97,115,107,101,100,85,110,105,110,116,101,114,114,117,112,116,105,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.069754482 UTC

[section ""data" . GHC.IO.$tc'MaskedUninterruptible1_closure" {
     GHC.IO.$tc'MaskedUninterruptible1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.$tc'MaskedUninterruptible2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.071416227 UTC

[section ""data" . GHC.IO.$tc'MaskedUninterruptible_closure" {
     GHC.IO.$tc'MaskedUninterruptible_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.$trModule_closure+1;
         const GHC.IO.$tc'MaskedUninterruptible1_closure+1;
         const GHC.IO.$tc'MaskedInterruptible1_closure+1;
         const 10964471758180118067;
         const 9988357998868476725;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.073123908 UTC

[section ""data" . GHC.IO.Unmasked_closure" {
     GHC.IO.Unmasked_closure:
         const GHC.IO.Unmasked_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.07587011 UTC

[section ""data" . GHC.IO.MaskedInterruptible_closure" {
     GHC.IO.MaskedInterruptible_closure:
         const GHC.IO.MaskedInterruptible_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.077650107 UTC

[section ""data" . GHC.IO.MaskedUninterruptible_closure" {
     GHC.IO.MaskedUninterruptible_closure:
         const GHC.IO.MaskedUninterruptible_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.079421094 UTC

[section ""relreadonly" . GHC.IO.MaskingState_closure_tbl" {
     GHC.IO.MaskingState_closure_tbl:
         const GHC.IO.Unmasked_closure+1;
         const GHC.IO.MaskedInterruptible_closure+2;
         const GHC.IO.MaskedUninterruptible_closure+3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.081586683 UTC

[section ""cstring" . i7FxR_str" {
     i7FxR_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,85,110,109,97,115,107,101,100]
 },
 GHC.IO.Unmasked_con_entry() //  [R1]
         { []
         }
     {offset
       c7FxQ: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Unmasked_con_info" {
     GHC.IO.Unmasked_con_info:
         const GHC.IO.Unmasked_con_entry;
         const 4294967296;
         const 3;
         const i7FxR_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.084935398 UTC

[section ""cstring" . i7FxY_str" {
     i7FxY_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,77,97,115,107,101,100,73,110,116,101,114,114,117,112,116,105,98,108,101]
 },
 GHC.IO.MaskedInterruptible_con_entry() //  [R1]
         { []
         }
     {offset
       c7FxX: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.MaskedInterruptible_con_info" {
     GHC.IO.MaskedInterruptible_con_info:
         const GHC.IO.MaskedInterruptible_con_entry;
         const 4294967296;
         const 4294967299;
         const i7FxY_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.08834223 UTC

[section ""cstring" . i7Fy5_str" {
     i7Fy5_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,77,97,115,107,101,100,85,110,105,110,116,101,114,114,117,112,116,105,98,108,101]
 },
 GHC.IO.MaskedUninterruptible_con_entry() //  [R1]
         { []
         }
     {offset
       c7Fy4: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.MaskedUninterruptible_con_info" {
     GHC.IO.MaskedUninterruptible_con_info:
         const GHC.IO.MaskedUninterruptible_con_entry;
         const 4294967296;
         const 8589934595;
         const i7Fy5_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:02:49.091482564 UTC

[section ""relreadonly" . S7F6v_srt" {
     S7F6v_srt:
         const GHC.IO.$w$cshowsPrec_closure;
         const GHC.IO.$fShowMaskingState1_closure;
         const GHC.IO.$fShowMaskingState3_closure;
         const GHC.IO.$fShowMaskingState5_closure;
         const GHC.IO.$fShowMaskingState_$cshow_closure;
         const GHC.IO.Exception.userError_closure;
         const GHC.IO.Exception.$fxExceptionIOException_closure;
         const GHC.IO.failIO1_closure;
         const GHC.IO.mplusIO1_closure;
 }]

