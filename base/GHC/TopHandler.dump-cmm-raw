
==================== Raw Cmm ====================
2018-03-16 16:09:05.561972878 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:09:05.563160022 UTC

[section ""cstring" . GHC.TopHandler.$trModule4_bytes" {
     GHC.TopHandler.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.581796519 UTC

[section ""data" . GHC.TopHandler.$trModule3_closure" {
     GHC.TopHandler.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TopHandler.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.584937926 UTC

[section ""cstring" . GHC.TopHandler.$trModule2_bytes" {
     GHC.TopHandler.$trModule2_bytes:
         I8[] [71,72,67,46,84,111,112,72,97,110,100,108,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.588236339 UTC

[section ""data" . GHC.TopHandler.$trModule1_closure" {
     GHC.TopHandler.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TopHandler.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.591114549 UTC

[section ""data" . GHC.TopHandler.$trModule_closure" {
     GHC.TopHandler.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.TopHandler.$trModule3_closure+1;
         const GHC.TopHandler.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.598329755 UTC

[section ""data" . GHC.TopHandler.runMainIO2_closure" {
     GHC.TopHandler.runMainIO2_closure:
         const GHC.TopHandler.runMainIO2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.TopHandler.runMainIO2_entry() //  [R1]
         { []
         }
     {offset
       cdR1F: // global
           if ((Sp + -104) < SpLim) (likely: False) goto cdR1G; else goto cdR1H;
       cdR1G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdR1H: // global
           (_cdR1s::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdR1s::I64 == 0) goto cdR1u; else goto cdR1t;
       cdR1u: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdR1t: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdR1s::I64;
           I64[Sp - 24] = block_cdR1v_info;
           R6 = 0;
           R5 = GHC.Types.$tcIO1_closure;
           R4 = GHC.Types.$trModule_closure;
           R3 = 14006894820825784566;
           R2 = 11571292540224541508;
           P64[Sp - 40] = GHC.Types.krep$*Arr*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runMainIO2_info" {
     GHC.TopHandler.runMainIO2_info:
         const GHC.TopHandler.runMainIO2_entry;
         const 0;
         const 12884901909;
         const SdQrO_srt;
 },
 _cdR1v() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cdR1v: // global
           I64[Sp - 40] = block_cdR1z_info;
           R6 = 0;
           _sdQmd::P64 = R5;
           R5 = GHC.Tuple.$tc()1_closure;
           _sdQmc::P64 = R4;
           R4 = GHC.Tuple.$trModule_closure;
           _sdQmb::P64 = R3;
           R3 = 14290630168515401665;
           _sdQma::I64 = R2;
           R2 = 2684808367141291271;
           P64[Sp - 56] = GHC.Types.krep$*_closure;
           P64[Sp - 48] = GHC.Types.[]_closure+1;
           I64[Sp - 32] = _sdQma::I64;
           P64[Sp - 24] = _sdQmb::P64;
           P64[Sp - 16] = _sdQmc::P64;
           P64[Sp - 8] = _sdQmd::P64;
           I64[Sp] = R1;
           Sp = Sp - 56;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdR1v_info" {
     block_cdR1v_info:
         const _cdR1v;
         const 0;
         const 12884901918;
         const SdQrO_srt;
 },
 _cdR1z() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cdR1z: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cdR1A() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdR1z_info" {
     block_cdR1z_info:
         const _cdR1z;
         const 1093;
         const 4294967326;
         const SdQrO_srt;
 },
 _cdR1A() //  []
         { []
         }
     {offset
       cdR1A: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdR1L; else goto cdR1K;
       cdR1L: // global
           HpAlloc = 96;
           I64[Sp] = block_cdR1A_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cdR1K: // global
           I64[Hp - 88] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 56];
           P64[Hp - 24] = P64[Sp + 64];
           P64[Hp - 16] = P64[Sp + 72];
           I64[Hp - 8] = I64[Sp + 80];
           I64[Hp] = I64[Sp + 48];
           R3 = Hp - 86;
           R2 = Hp - 38;
           Sp = Sp + 88;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdR1A_info" {
     block_cdR1A_info:
         const _cdR1A;
         const 35914;
         const 4294967326;
         const SdQrO_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.615734558 UTC

[section ""cstring" . unreachable_rdQlR_bytes" {
     unreachable_rdQlR_bytes:
         I8[] [73,102,32,121,111,117,32,99,97,110,32,114,101,97,100,32,116,104,105,115,44,32,115,104,117,116,100,111,119,110,72,97,115,107,101,108,108,65,110,100,69,120,105,116,32,100,105,100,32,110,111,116,32,101,120,105,116,46]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.62177756 UTC

[section ""data" . unreachable1_rdQlS_closure" {
     unreachable1_rdQlS_closure:
         const unreachable1_rdQlS_info;
         const 0;
         const 0;
         const 0;
 },
 unreachable1_rdQlS_entry() //  [R1]
         { []
         }
     {offset
       cdR2l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdR2m; else goto cdR2n;
       cdR2m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdR2n: // global
           (_cdR2i::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdR2i::I64 == 0) goto cdR2k; else goto cdR2j;
       cdR2k: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdR2j: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdR2i::I64;
           R2 = unreachable_rdQlR_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . unreachable1_rdQlS_info" {
     unreachable1_rdQlS_info:
         const unreachable1_rdQlS_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.626631052 UTC

[section ""data" . GHC.TopHandler.flushStdHandles2_closure" {
     GHC.TopHandler.flushStdHandles2_closure:
         const GHC.TopHandler.flushStdHandles2_info;
         const 0;
 },
 GHC.TopHandler.flushStdHandles2_entry() //  []
         { []
         }
     {offset
       cdR2z: // global
           R4 = GHC.IO.Handle.Internals.flushWriteBuffer1_closure+2;
           R3 = GHC.IO.Handle.FD.stderr_closure;
           R2 = GHC.IO.Handle.hFlush2_closure;
           call GHC.IO.Handle.Internals.wantWritableHandle1_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.flushStdHandles2_info" {
     GHC.TopHandler.flushStdHandles2_info:
         const GHC.TopHandler.flushStdHandles2_entry;
         const 0;
         const 30064771086;
         const 4294967299;
         const SdQrO_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.630575076 UTC

[section ""data" . GHC.TopHandler.flushStdHandles3_closure" {
     GHC.TopHandler.flushStdHandles3_closure:
         const GHC.TopHandler.flushStdHandles3_info;
 },
 GHC.TopHandler.flushStdHandles3_entry() //  [R2]
         { []
         }
     {offset
       cdR2N: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdR2O; else goto cdR2P;
       cdR2O: // global
           R2 = R2;
           R1 = GHC.TopHandler.flushStdHandles3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdR2P: // global
           I64[Sp - 8] = block_cdR2K_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udR2T; else goto cdR2L;
       udR2T: // global
           call _cdR2K() args: 0, res: 0, upd: 0;
       cdR2L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.flushStdHandles3_info" {
     GHC.TopHandler.flushStdHandles3_info:
         const GHC.TopHandler.flushStdHandles3_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cdR2K() //  []
         { []
         }
     {offset
       cdR2K: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdR2K_info" {
     block_cdR2K_info:
         const _cdR2K;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.635820135 UTC

[section ""data" . GHC.TopHandler.flushStdHandles4_closure" {
     GHC.TopHandler.flushStdHandles4_closure:
         const GHC.TopHandler.flushStdHandles4_info;
         const 0;
 },
 GHC.TopHandler.flushStdHandles4_entry() //  []
         { []
         }
     {offset
       cdR38: // global
           R4 = GHC.IO.Handle.Internals.flushWriteBuffer1_closure+2;
           R3 = GHC.IO.Handle.FD.stdout_closure;
           R2 = GHC.IO.Handle.hFlush2_closure;
           call GHC.IO.Handle.Internals.wantWritableHandle1_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.flushStdHandles4_info" {
     GHC.TopHandler.flushStdHandles4_info:
         const GHC.TopHandler.flushStdHandles4_entry;
         const 0;
         const 55834574862;
         const 4294967299;
         const SdQrO_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.639620817 UTC

[section ""data" . GHC.TopHandler.flushStdHandles1_closure" {
     GHC.TopHandler.flushStdHandles1_closure:
         const GHC.TopHandler.flushStdHandles1_info;
         const 0;
 },
 GHC.TopHandler.flushStdHandles1_entry() //  []
         { []
         }
     {offset
       cdR3l: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdR3m; else goto cdR3n;
       cdR3m: // global
           R1 = GHC.TopHandler.flushStdHandles1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdR3n: // global
           I64[Sp - 8] = block_cdR3j_info;
           R2 = GHC.TopHandler.flushStdHandles3_closure+2;
           R1 = GHC.TopHandler.flushStdHandles4_closure+1;
           Sp = Sp - 8;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.flushStdHandles1_info" {
     GHC.TopHandler.flushStdHandles1_info:
         const GHC.TopHandler.flushStdHandles1_entry;
         const 0;
         const 30064771086;
         const 4294967299;
         const SdQrO_srt+48;
 },
 _cdR3j() //  []
         { []
         }
     {offset
       cdR3j: // global
           R2 = GHC.TopHandler.flushStdHandles3_closure+2;
           R1 = GHC.TopHandler.flushStdHandles2_closure+1;
           Sp = Sp + 8;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdR3j_info" {
     block_cdR3j_info:
         const _cdR3j;
         const 0;
         const 4294967326;
         const SdQrO_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.644886057 UTC

[section ""data" . GHC.TopHandler.flushStdHandles_closure" {
     GHC.TopHandler.flushStdHandles_closure:
         const GHC.TopHandler.flushStdHandles_info;
         const 0;
 },
 GHC.TopHandler.flushStdHandles_entry() //  []
         { []
         }
     {offset
       cdR3B: // global
           call GHC.TopHandler.flushStdHandles1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.flushStdHandles_info" {
     GHC.TopHandler.flushStdHandles_info:
         const GHC.TopHandler.flushStdHandles_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SdQrO_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.65376443 UTC

[section ""data" . $wexitHelper_rdQlT_closure" {
     $wexitHelper_rdQlT_closure:
         const $wexitHelper_rdQlT_info;
         const 0;
 },
 sat_sdQmF_entry() //  [R1]
         { []
         }
     {offset
       cdR44: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdR45; else goto cdR46;
       cdR45: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdR46: // global
           I64[Sp - 8] = block_cdR41_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udR4q; else goto cdR42;
       udR4q: // global
           call _cdR41(R1) args: 0, res: 0, upd: 0;
       cdR42: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdQmF_info" {
     sat_sdQmF_info:
         const sat_sdQmF_entry;
         const 1;
         const 12884901897;
         const 4294967299;
         const SdQrO_srt+72;
 },
 _cdR41() //  [R1]
         { []
         }
     {offset
       cdR41: // global
           I64[Sp] = block_cdR4d_info;
           _cdR4c::I64 = I64[R1 + 7];
           _udR4i::P64 = CurrentTSO;
           I64[I64[_udR4i::P64 + 24] + 16] = Sp;
           _udR4j::I64 = CurrentNursery;
           P64[_udR4j::I64 + 8] = Hp + 8;
           I64[_udR4i::P64 + 104] = I64[_udR4i::P64 + 104] - ((Hp + 8) - I64[_udR4j::I64]);
           (_udR4g::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           call "ccall" arg hints:  [‘signed’,
                                     ‘signed’]  result hints:  [] shutdownHaskellAndExit(255, _cdR4c::I64);
           (_udR4h::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_udR4g::I64);
           BaseReg = _udR4h::I64;
           _udR4k::P64 = CurrentTSO;
           _udR4l::P64 = I64[_udR4k::P64 + 24];
           Sp = I64[_udR4l::P64 + 16];
           SpLim = _udR4l::P64 + 192;
           HpAlloc = 0;
           _udR4m::I64 = CurrentNursery;
           _udR4n::I64 = I64[_udR4m::I64 + 8];
           Hp = _udR4n::I64 - 8;
           _udR4o::I64 = I64[_udR4m::I64];
           HpLim = _udR4o::I64 + ((%MO_SS_Conv_W32_W64(I32[_udR4m::I64 + 48]) << 12) - 1);
           I64[_udR4k::P64 + 104] = I64[_udR4k::P64 + 104] + (_udR4n::I64 - _udR4o::I64);
           call (I64[I64[Sp]])() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdR41_info" {
     block_cdR41_info:
         const _cdR41;
         const 0;
         const 12884901918;
         const SdQrO_srt+72;
 },
 _cdR4d() //  []
         { []
         }
     {offset
       cdR4d: // global
           R2 = unreachable1_rdQlS_closure;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdR4d_info" {
     block_cdR4d_info:
         const _cdR4d;
         const 0;
         const 12884901918;
         const SdQrO_srt+72;
 },
 sat_sdQmQ_entry() //  [R1]
         { []
         }
     {offset
       cdR4H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdR4I; else goto cdR4J;
       cdR4I: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdR4J: // global
           I64[Sp - 16] = block_cdR4E_info;
           _sdQmw::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp - 8] = _sdQmw::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udR59; else goto cdR4F;
       udR59: // global
           call _cdR4E(R1) args: 0, res: 0, upd: 0;
       cdR4F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdQmQ_info" {
     sat_sdQmQ_info:
         const sat_sdQmQ_entry;
         const 4294967297;
         const 12884901900;
         const 4294967299;
         const SdQrO_srt+72;
 },
 _cdR4E() //  [R1]
         { []
         }
     {offset
       cdR4E: // global
           _cdR4U::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(-I64[Sp + 8]));
           I64[Sp + 8] = block_cdR4W_info;
           Sp = Sp + 8;
           _cdR4V::I64 = I64[R1 + 7];
           _udR51::P64 = CurrentTSO;
           I64[I64[_udR51::P64 + 24] + 16] = Sp;
           _udR52::I64 = CurrentNursery;
           P64[_udR52::I64 + 8] = Hp + 8;
           I64[_udR51::P64 + 104] = I64[_udR51::P64 + 104] - ((Hp + 8) - I64[_udR52::I64]);
           (_udR4Z::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           call "ccall" arg hints:  [‘signed’,
                                     ‘signed’]  result hints:  [] shutdownHaskellAndSignal(_cdR4U::I64, _cdR4V::I64);
           (_udR50::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_udR4Z::I64);
           BaseReg = _udR50::I64;
           _udR53::P64 = CurrentTSO;
           _udR54::P64 = I64[_udR53::P64 + 24];
           Sp = I64[_udR54::P64 + 16];
           SpLim = _udR54::P64 + 192;
           HpAlloc = 0;
           _udR55::I64 = CurrentNursery;
           _udR56::I64 = I64[_udR55::I64 + 8];
           Hp = _udR56::I64 - 8;
           _udR57::I64 = I64[_udR55::I64];
           HpLim = _udR57::I64 + ((%MO_SS_Conv_W32_W64(I32[_udR55::I64 + 48]) << 12) - 1);
           I64[_udR53::P64 + 104] = I64[_udR53::P64 + 104] + (_udR56::I64 - _udR57::I64);
           call (I64[I64[Sp]])() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdR4E_info" {
     block_cdR4E_info:
         const _cdR4E;
         const 65;
         const 12884901918;
         const SdQrO_srt+72;
 },
 _cdR4W() //  []
         { []
         }
     {offset
       cdR4W: // global
           R2 = unreachable1_rdQlS_closure;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdR4W_info" {
     block_cdR4W_info:
         const _cdR4W;
         const 0;
         const 12884901918;
         const SdQrO_srt+72;
 },
 sat_sdQn0_entry() //  [R1]
         { []
         }
     {offset
       cdR5q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdR5r; else goto cdR5s;
       cdR5r: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdR5s: // global
           I64[Sp - 16] = block_cdR5n_info;
           _sdQmw::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp - 8] = _sdQmw::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udR5P; else goto cdR5o;
       udR5P: // global
           call _cdR5n(R1) args: 0, res: 0, upd: 0;
       cdR5o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdQn0_info" {
     sat_sdQn0_info:
         const sat_sdQn0_entry;
         const 4294967297;
         const 12884901900;
         const 4294967299;
         const SdQrO_srt+72;
 },
 _cdR5n() //  [R1]
         { []
         }
     {offset
       cdR5n: // global
           _cdR5A::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8]));
           I64[Sp + 8] = block_cdR5C_info;
           Sp = Sp + 8;
           _cdR5B::I64 = I64[R1 + 7];
           _udR5H::P64 = CurrentTSO;
           I64[I64[_udR5H::P64 + 24] + 16] = Sp;
           _udR5I::I64 = CurrentNursery;
           P64[_udR5I::I64 + 8] = Hp + 8;
           I64[_udR5H::P64 + 104] = I64[_udR5H::P64 + 104] - ((Hp + 8) - I64[_udR5I::I64]);
           (_udR5F::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           call "ccall" arg hints:  [‘signed’,
                                     ‘signed’]  result hints:  [] shutdownHaskellAndExit(_cdR5A::I64, _cdR5B::I64);
           (_udR5G::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_udR5F::I64);
           BaseReg = _udR5G::I64;
           _udR5J::P64 = CurrentTSO;
           _udR5K::P64 = I64[_udR5J::P64 + 24];
           Sp = I64[_udR5K::P64 + 16];
           SpLim = _udR5K::P64 + 192;
           HpAlloc = 0;
           _udR5L::I64 = CurrentNursery;
           _udR5M::I64 = I64[_udR5L::I64 + 8];
           Hp = _udR5M::I64 - 8;
           _udR5N::I64 = I64[_udR5L::I64];
           HpLim = _udR5N::I64 + ((%MO_SS_Conv_W32_W64(I32[_udR5L::I64 + 48]) << 12) - 1);
           I64[_udR5J::P64 + 104] = I64[_udR5J::P64 + 104] + (_udR5M::I64 - _udR5N::I64);
           call (I64[I64[Sp]])() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdR5n_info" {
     block_cdR5n_info:
         const _cdR5n;
         const 65;
         const 12884901918;
         const SdQrO_srt+72;
 },
 _cdR5C() //  []
         { []
         }
     {offset
       cdR5C: // global
           R2 = unreachable1_rdQlS_closure;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdR5C_info" {
     block_cdR5C_info:
         const _cdR5C;
         const 0;
         const 12884901918;
         const SdQrO_srt+72;
 },
 $wexitHelper_rdQlT_entry() //  [R2, R3]
         { []
         }
     {offset
       cdR5T: // global
           _sdQmw::I64 = R3;
           _sdQmv::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdR5U; else goto cdR5V;
       cdR5V: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdR5X; else goto cdR5W;
       cdR5X: // global
           HpAlloc = 24;
           goto cdR5U;
       cdR5U: // global
           R3 = _sdQmw::I64;
           R2 = _sdQmv::P64;
           R1 = $wexitHelper_rdQlT_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdR5W: // global
           if (%MO_S_Lt_W64(_sdQmw::I64, 0)) goto cdR6b; else goto cdR5S;
       cdR5S: // global
           if (%MO_S_Gt_W64(_sdQmw::I64, 255)) goto cdR6b; else goto cdR6c;
       cdR6b: // global
           Hp = Hp - 24;
           P64[Sp - 16] = _sdQmv::P64;
           I64[Sp - 8] = _sdQmw::I64;
           Sp = Sp - 24;
           call _cdR3P() args: 0, res: 0, upd: 0;
       cdR6c: // global
           I64[Hp - 16] = sat_sdQn0_info;
           P64[Hp - 8] = _sdQmv::P64;
           I64[Hp] = _sdQmw::I64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wexitHelper_rdQlT_info" {
     $wexitHelper_rdQlT_info:
         const $wexitHelper_rdQlT_entry;
         const 0;
         const 30064771086;
         const 8589934606;
         const SdQrO_srt+72;
 },
 _cdR3P() //  []
         { []
         }
     {offset
       cdR3P: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdR60; else goto cdR5Z;
       cdR60: // global
           HpAlloc = 24;
           I64[Sp] = block_cdR3P_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdR5Z: // global
           _sdQmw::I64 = I64[Sp + 16];
           if (%MO_S_Lt_W64(_sdQmw::I64, (-127))) goto cdR67; else goto cdR69;
       cdR69: // global
           if (%MO_S_Gt_W64(_sdQmw::I64, (-1))) goto cdR67; else goto cdR68;
       cdR67: // global
           Hp = Hp - 24;
           call _cdR3U() args: 0, res: 0, upd: 0;
       cdR68: // global
           I64[Hp - 16] = sat_sdQmQ_info;
           P64[Hp - 8] = P64[Sp + 8];
           I64[Hp] = _sdQmw::I64;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdR3P_info" {
     block_cdR3P_info:
         const _cdR3P;
         const 130;
         const 12884901918;
         const SdQrO_srt+72;
 },
 _cdR3U() //  []
         { []
         }
     {offset
       cdR3U: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdR63; else goto cdR62;
       cdR63: // global
           HpAlloc = 16;
           I64[Sp] = block_cdR3U_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdR62: // global
           I64[Hp - 8] = sat_sdQmF_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdR3U_info" {
     block_cdR3U_info:
         const _cdR3U;
         const 130;
         const 12884901918;
         const SdQrO_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.678645735 UTC

[section ""data" . safeExit1_rdQlU_closure" {
     safeExit1_rdQlU_closure:
         const GHC.Int.I32#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.681164331 UTC

[section ""data" . safeExit_rdPtY_closure" {
     safeExit_rdPtY_closure:
         const safeExit_rdPtY_info;
         const 0;
 },
 safeExit_rdPtY_entry() //  [R2]
         { []
         }
     {offset
       cdR7Y: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdR7Z; else goto cdR80;
       cdR7Z: // global
           R2 = R2;
           R1 = safeExit_rdPtY_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdR80: // global
           I64[Sp - 8] = block_cdR7V_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udR84; else goto cdR7W;
       udR84: // global
           call _cdR7V(R1) args: 0, res: 0, upd: 0;
       cdR7W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . safeExit_rdPtY_info" {
     safeExit_rdPtY_info:
         const safeExit_rdPtY_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SdQrO_srt+88;
 },
 _cdR7V() //  [R1]
         { []
         }
     {offset
       cdR7V: // global
           R3 = I64[R1 + 7];
           R2 = safeExit1_rdQlU_closure+1;
           Sp = Sp + 8;
           call $wexitHelper_rdQlT_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdR7V_info" {
     block_cdR7V_info:
         const _cdR7V;
         const 0;
         const 4294967326;
         const SdQrO_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.686638124 UTC

[section ""data" . exitInterrupted_rdPu2_closure" {
     exitInterrupted_rdPu2_closure:
         const exitInterrupted_rdPu2_info;
         const 0;
         const 0;
         const 0;
 },
 exitInterrupted_rdPu2_entry() //  [R1]
         { []
         }
     {offset
       cdR8k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdR8l; else goto cdR8m;
       cdR8l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdR8m: // global
           (_cdR8h::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdR8h::I64 == 0) goto cdR8j; else goto cdR8i;
       cdR8j: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdR8i: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdR8h::I64;
           R3 = (-2);
           R2 = safeExit1_rdQlU_closure+1;
           Sp = Sp - 16;
           call $wexitHelper_rdQlT_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . exitInterrupted_rdPu2_info" {
     exitInterrupted_rdPu2_info:
         const exitInterrupted_rdPu2_entry;
         const 0;
         const 4294967317;
         const SdQrO_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.690353892 UTC

[section ""data" . lvl_rdQlV_closure" {
     lvl_rdQlV_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.692028073 UTC

[section ""data" . lvl1_rdQlW_closure" {
     lvl1_rdQlW_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.693731963 UTC

[section ""cstring" . msgStr_rdQlX_bytes" {
     msgStr_rdQlX_bytes:
         I8[] [101,110,99,111,117,110,116,101,114,101,100,32,97,110,32,101,120,99,101,112,116,105,111,110,32,119,104,105,108,101,32,116,114,121,105,110,103,32,116,111,32,114,101,112,111,114,116,32,97,110,32,101,120,99,101,112,116,105,111,110,46,10,79,110,101,32,112,111,115,115,105,98,108,101,32,114,101,97,115,111,110,32,102,111,114,32,116,104,105,115,32,105,115,32,116,104,97,116,32,119,101,32,102,97,105,108,101,100,32,119,104,105,108,101,32,116,114,121,105,110,103,32,116,111,32,101,110,99,111,100,101,32,97,110,32,101,114,114,111,114,32,109,101,115,115,97,103,101,46,32,67,104,101,99,107,32,116,104,97,116,32,121,111,117,114,32,108,111,99,97,108,101,32,105,115,32,99,111,110,102,105,103,117,114,101,100,32,112,114,111,112,101,114,108,121,46]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.696249931 UTC

[section ""data" . msgStr1_rdQlY_closure" {
     msgStr1_rdQlY_closure:
         const msgStr1_rdQlY_info;
         const 0;
         const 0;
         const 0;
 },
 msgStr1_rdQlY_entry() //  [R1]
         { []
         }
     {offset
       cdR8D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdR8E; else goto cdR8F;
       cdR8E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdR8F: // global
           (_cdR8A::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdR8A::I64 == 0) goto cdR8C; else goto cdR8B;
       cdR8C: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdR8B: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdR8A::I64;
           R2 = msgStr_rdQlX_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . msgStr1_rdQlY_info" {
     msgStr1_rdQlY_info:
         const msgStr1_rdQlY_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.700368545 UTC

[section ""cstring" . str_rdQlZ_bytes" {
     str_rdQlZ_bytes:
         I8[] [37,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.702646426 UTC

[section ""data" . str1_rdQm0_closure" {
     str1_rdQm0_closure:
         const str1_rdQm0_info;
         const 0;
         const 0;
         const 0;
 },
 str1_rdQm0_entry() //  [R1]
         { []
         }
     {offset
       cdR8U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdR8V; else goto cdR8W;
       cdR8V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdR8W: // global
           (_cdR8R::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdR8R::I64 == 0) goto cdR8T; else goto cdR8S;
       cdR8T: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdR8S: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdR8R::I64;
           R2 = str_rdQlZ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . str1_rdQm0_info" {
     str1_rdQm0_info:
         const str1_rdQm0_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.707563524 UTC

[section ""data" . lvl2_rdQm1_closure" {
     lvl2_rdQm1_closure:
         const lvl2_rdQm1_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_rdQm1_entry() //  [R1]
         { []
         }
     {offset
       cdR9c: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdR9g; else goto cdR9h;
       cdR9g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdR9h: // global
           (_cdR97::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdR97::I64 == 0) goto cdR99; else goto cdR98;
       cdR99: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdR98: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdR97::I64;
           I64[Sp - 24] = block_cdR9a_info;
           R3 = 0;
           R2 = msgStr1_rdQlY_closure;
           Sp = Sp - 24;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_rdQm1_info" {
     lvl2_rdQm1_info:
         const lvl2_rdQm1_entry;
         const 0;
         const 4294967317;
         const SdQrO_srt+104;
 },
 _cdR9a() //  [R1]
         { []
         }
     {offset
       cdR9a: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdR9k; else goto cdR9j;
       cdR9k: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       cdR9j: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdR9a_info" {
     block_cdR9a_info:
         const _cdR9a;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.713671954 UTC

[section ""data" . lvl3_rdQm2_closure" {
     lvl3_rdQm2_closure:
         const lvl3_rdQm2_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rdQm2_entry() //  [R1]
         { []
         }
     {offset
       cdR9E: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdR9I; else goto cdR9J;
       cdR9I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdR9J: // global
           (_cdR9z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdR9z::I64 == 0) goto cdR9B; else goto cdR9A;
       cdR9B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdR9A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdR9z::I64;
           I64[Sp - 24] = block_cdR9C_info;
           R3 = 0;
           R2 = str1_rdQm0_closure;
           Sp = Sp - 24;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_rdQm2_info" {
     lvl3_rdQm2_info:
         const lvl3_rdQm2_entry;
         const 0;
         const 4294967317;
         const SdQrO_srt+112;
 },
 _cdR9C() //  [R1]
         { []
         }
     {offset
       cdR9C: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdR9M; else goto cdR9L;
       cdR9M: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       cdR9L: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdR9C_info" {
     block_cdR9C_info:
         const _cdR9C;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.718883026 UTC

[section ""data" . lvl4_rdQm3_closure" {
     lvl4_rdQm3_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.72054546 UTC

[section ""data" . lvl5_rdQm4_closure" {
     lvl5_rdQm4_closure:
         const GHC.Types.I#_con_info;
         const 251;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.743197148 UTC

[section ""data" . real_handler_rdQm5_closure" {
     real_handler_rdQm5_closure:
         const real_handler_rdQm5_info;
         const 0;
 },
 sat_sdQq4_entry() //  [R1, R2]
         { []
         }
     {offset
       cdRay: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cdRaC; else goto cdRaD;
       cdRaC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdRaD: // global
           I64[Sp - 16] = block_cdRav_info;
           _sdQn6::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _sdQn6::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udRcP; else goto cdRaw;
       udRcP: // global
           call _cdRav(R1) args: 0, res: 0, upd: 0;
       cdRaw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdQq4_info" {
     sat_sdQq4_info:
         const sat_sdQq4_entry;
         const 1;
         const 270582939657;
         const 8589934597;
         const SdQrO_srt+104;
 },
 _cdRav() //  [R1]
         { []
         }
     {offset
       cdRav: // global
           I64[Sp - 8] = block_cdRaB_info;
           R2 = P64[R1 + 7];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRav_info" {
     block_cdRav_info:
         const _cdRav;
         const 1;
         const 270582939678;
         const SdQrO_srt+104;
 },
 _cdRaB() //  [R1]
         { []
         }
     {offset
       cdRaB: // global
           I64[Sp] = block_cdRaI_info;
           R3 = GHC.IO.Exception.$fExceptionIOException4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRaB_info" {
     block_cdRaB_info:
         const _cdRaB;
         const 2;
         const 270582939678;
         const SdQrO_srt+104;
 },
 _cdRaI() //  [R1]
         { []
         }
     {offset
       cdRaI: // global
           if (R1 & 7 == 1) goto cdRaP; else goto cdRaU;
       cdRaP: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       cdRaU: // global
           I64[Sp + 8] = block_cdRaS_info;
           R1 = lvl3_rdQm2_closure;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udRcQ; else goto cdRaV;
       udRcQ: // global
           call _cdRaS(R1) args: 0, res: 0, upd: 0;
       cdRaV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRaI_info" {
     block_cdRaI_info:
         const _cdRaI;
         const 2;
         const 219043332126;
         const SdQrO_srt+104;
 },
 _cdRaS() //  [R1]
         { []
         }
     {offset
       cdRaS: // global
           I64[Sp] = block_cdRb3_info;
           R2 = 1;
           R1 = I64[R1 + 7] + 1;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRaS_info" {
     block_cdRaS_info:
         const _cdRaS;
         const 1;
         const 81604378654;
         const SdQrO_srt+104;
 },
 _cdRb3() //  [R1]
         { []
         }
     {offset
       cdRb3: // global
           P64[Sp - 24] = R1 + 16;
           P64[Sp - 16] = str1_rdQm0_closure;
           I64[Sp - 8] = 0;
           P64[Sp] = R1;
           Sp = Sp - 24;
           call _cdRc6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdRb3_info" {
     block_cdRb3_info:
         const _cdRb3;
         const 1;
         const 81604378654;
         const SdQrO_srt+104;
 },
 _cdRc6() //  []
         { []
         }
     {offset
       cdRc6: // global
           I64[Sp - 8] = block_cdRc9_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udRcW; else goto cdRcb;
       udRcW: // global
           call _cdRc9(R1) args: 0, res: 0, upd: 0;
       cdRcb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdRc9() //  [R1]
         { []
         }
     {offset
       cdRc9: // global
           if (R1 & 7 == 1) goto cdRch; else goto cdRcm;
       cdRch: // global
           I8[I64[Sp + 8] + I64[Sp + 24]] = 0 :: W8;
           I64[Sp] = block_cdRbe_info;
           R1 = lvl2_rdQm1_closure;
           if (R1 & 7 != 0) goto udRcX; else goto cdRbg;
       udRcX: // global
           call _cdRbe(R1) args: 0, res: 0, upd: 0;
       cdRbg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdRcm: // global
           I64[Sp] = block_cdRck_info;
           _sdQpX::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _sdQpX::P64;
           if (R1 & 7 != 0) goto udRcY; else goto cdRcn;
       udRcY: // global
           call _cdRck(R1) args: 0, res: 0, upd: 0;
       cdRcn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRc9_info" {
     block_cdRc9_info:
         const _cdRc9;
         const 453;
         const 73014444062;
         const SdQrO_srt+104;
 },
 _cdRbe() //  [R1]
         { []
         }
     {offset
       cdRbe: // global
           I64[Sp] = block_cdRbo_info;
           R2 = 1;
           R1 = I64[R1 + 7] + 1;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRbe_info" {
     block_cdRbe_info:
         const _cdRbe;
         const 453;
         const 4294967326;
         const SdQrO_srt+104;
 },
 _cdRbo() //  [R1]
         { []
         }
     {offset
       cdRbo: // global
           I64[Sp - 8] = 0;
           P64[Sp] = msgStr1_rdQlY_closure;
           P64[Sp + 16] = R1 + 16;
           P64[Sp + 24] = R1;
           Sp = Sp - 8;
           call _cdRbI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdRbo_info" {
     block_cdRbo_info:
         const _cdRbo;
         const 453;
         const 4294967326;
         const SdQrO_srt+104;
 },
 _cdRbI() //  []
         { []
         }
     {offset
       cdRbI: // global
           I64[Sp - 8] = block_cdRbL_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udRcT; else goto cdRbN;
       udRcT: // global
           call _cdRbL(R1) args: 0, res: 0, upd: 0;
       cdRbN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdRbL() //  [R1]
         { []
         }
     {offset
       cdRbL: // global
           if (R1 & 7 == 1) goto cdRbT; else goto cdRbY;
       cdRbT: // global
           _sdQn6::P64 = P64[Sp + 56];
           _sdQpd::I64 = I64[Sp + 24];
           _sdQpr::I64 = I64[Sp + 32];
           I8[_sdQpr::I64 + I64[Sp + 8]] = 0 :: W8;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] errorBelch2(_sdQpd::I64, _sdQpr::I64);
           I64[Sp + 32] = block_cdRbC_info;
           R2 = lvl_rdQlV_closure+1;
           R1 = _sdQn6::P64;
           Sp = Sp + 32;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
       cdRbY: // global
           I64[Sp] = block_cdRbW_info;
           _sdQpK::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _sdQpK::P64;
           if (R1 & 7 != 0) goto udRcU; else goto cdRbZ;
       udRcU: // global
           call _cdRbW(R1) args: 0, res: 0, upd: 0;
       cdRbZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRbL_info" {
     block_cdRbL_info:
         const _cdRbL;
         const 967;
         const 30;
 },
 _cdRbC() //  [R1]
         { []
         }
     {offset
       cdRbC: // global
           _sdQpc::P64 = P64[Sp + 16];
           call MO_Touch(P64[Sp + 8]);
           call MO_Touch(_sdQpc::P64);
           R1 = R1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRbC_info" {
     block_cdRbC_info:
         const _cdRbC;
         const 259;
         const 30;
 },
 _cdRbW() //  [R1]
         { []
         }
     {offset
       cdRbW: // global
           _sdQpG::I64 = I64[Sp + 8];
           _sdQpK::P64 = P64[Sp + 16];
           I8[I64[Sp + 32] + _sdQpG::I64] = %MO_SS_Conv_W64_W8(I64[R1 + 7]);
           P64[Sp + 16] = _sdQpK::P64;
           I64[Sp + 8] = _sdQpG::I64 + 1;
           Sp = Sp + 8;
           call _cdRbI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdRbW_info" {
     block_cdRbW_info:
         const _cdRbW;
         const 839;
         const 30;
 },
 _cdRck() //  [R1]
         { []
         }
     {offset
       cdRck: // global
           _sdQpT::I64 = I64[Sp + 24];
           _sdQpX::P64 = P64[Sp + 16];
           I8[I64[Sp + 8] + _sdQpT::I64] = %MO_SS_Conv_W64_W8(I64[R1 + 7]);
           P64[Sp + 16] = _sdQpX::P64;
           I64[Sp + 24] = _sdQpT::I64 + 1;
           Sp = Sp + 8;
           call _cdRc6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdRck_info" {
     block_cdRck_info:
         const _cdRck;
         const 325;
         const 73014444062;
         const SdQrO_srt+104;
 },
 sat_sdQnx_entry() //  [R1]
         { []
         }
     {offset
       cdRdk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdRdo; else goto cdRdp;
       cdRdo: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdRdp: // global
           I64[Sp - 24] = block_cdRdh_info;
           _sdQn6::P64 = P64[R1 + 7];
           _sdQnh::P64 = P64[R1 + 15];
           R1 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           P64[Sp - 16] = _sdQn6::P64;
           P64[Sp - 8] = _sdQnh::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udRdt; else goto cdRdi;
       udRdt: // global
           call _cdRdh(R1) args: 0, res: 0, upd: 0;
       cdRdi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdQnx_info" {
     sat_sdQnx_info:
         const sat_sdQnx_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SdQrO_srt+152;
 },
 _cdRdh() //  [R1]
         { []
         }
     {offset
       cdRdh: // global
           _sdQnt::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_cdRdn_info;
           R2 = P64[Sp + 16];
           R1 = _sdQnt::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRdh_info" {
     block_cdRdh_info:
         const _cdRdh;
         const 2;
         const 30;
 },
 _cdRdn() //  []
         { []
         }
     {offset
       cdRdn: // global
           R2 = lvl_rdQlV_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRdn_info" {
     block_cdRdn_info:
         const _cdRdn;
         const 130;
         const 30;
 },
 sat_sdQnP_entry() //  [R1]
         { []
         }
     {offset
       cdRdN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdRdR; else goto cdRdS;
       cdRdR: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdRdS: // global
           I64[Sp - 24] = block_cdRdK_info;
           _sdQn6::P64 = P64[R1 + 7];
           _sdQnh::P64 = P64[R1 + 15];
           R1 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           P64[Sp - 16] = _sdQn6::P64;
           P64[Sp - 8] = _sdQnh::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udRdW; else goto cdRdL;
       udRdW: // global
           call _cdRdK(R1) args: 0, res: 0, upd: 0;
       cdRdL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdQnP_info" {
     sat_sdQnP_info:
         const sat_sdQnP_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SdQrO_srt+152;
 },
 _cdRdK() //  [R1]
         { []
         }
     {offset
       cdRdK: // global
           _sdQnL::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_cdRdQ_info;
           R2 = P64[Sp + 16];
           R1 = _sdQnL::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRdK_info" {
     block_cdRdK_info:
         const _cdRdK;
         const 2;
         const 30;
 },
 _cdRdQ() //  []
         { []
         }
     {offset
       cdRdQ: // global
           R2 = lvl_rdQlV_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRdQ_info" {
     block_cdRdQ_info:
         const _cdRdQ;
         const 130;
         const 30;
 },
 sat_sdQo0_entry() //  [R1]
         { []
         }
     {offset
       cdRec: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdReg; else goto cdReh;
       cdReg: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdReh: // global
           I64[Sp - 24] = block_cdRe9_info;
           _sdQn6::P64 = P64[R1 + 7];
           _sdQnh::P64 = P64[R1 + 15];
           R1 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           P64[Sp - 16] = _sdQn6::P64;
           P64[Sp - 8] = _sdQnh::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udRel; else goto cdRea;
       udRel: // global
           call _cdRe9(R1) args: 0, res: 0, upd: 0;
       cdRea: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdQo0_info" {
     sat_sdQo0_info:
         const sat_sdQo0_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SdQrO_srt+152;
 },
 _cdRe9() //  [R1]
         { []
         }
     {offset
       cdRe9: // global
           _sdQnW::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_cdRef_info;
           R2 = P64[Sp + 16];
           R1 = _sdQnW::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRe9_info" {
     block_cdRe9_info:
         const _cdRe9;
         const 2;
         const 30;
 },
 _cdRef() //  []
         { []
         }
     {offset
       cdRef: // global
           R2 = lvl_rdQlV_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRef_info" {
     block_cdRef_info:
         const _cdRef;
         const 130;
         const 30;
 },
 sat_sdQoc_entry() //  [R1]
         { []
         }
     {offset
       cdReB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdReF; else goto cdReG;
       cdReF: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdReG: // global
           I64[Sp - 24] = block_cdRey_info;
           _sdQn6::P64 = P64[R1 + 7];
           _sdQnh::P64 = P64[R1 + 15];
           R1 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           P64[Sp - 16] = _sdQn6::P64;
           P64[Sp - 8] = _sdQnh::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udReK; else goto cdRez;
       udReK: // global
           call _cdRey(R1) args: 0, res: 0, upd: 0;
       cdRez: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdQoc_info" {
     sat_sdQoc_info:
         const sat_sdQoc_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SdQrO_srt+152;
 },
 _cdRey() //  [R1]
         { []
         }
     {offset
       cdRey: // global
           _sdQo8::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_cdReE_info;
           R2 = P64[Sp + 16];
           R1 = _sdQo8::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRey_info" {
     block_cdRey_info:
         const _cdRey;
         const 2;
         const 30;
 },
 _cdReE() //  []
         { []
         }
     {offset
       cdReE: // global
           R2 = lvl_rdQlV_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdReE_info" {
     block_cdReE_info:
         const _cdReE;
         const 130;
         const 30;
 },
 sat_sdQoq_entry() //  [R1]
         { []
         }
     {offset
       cdRf2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdRf6; else goto cdRf7;
       cdRf6: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdRf7: // global
           I64[Sp - 24] = block_cdReZ_info;
           _sdQn6::P64 = P64[R1 + 7];
           _sdQnh::P64 = P64[R1 + 15];
           R1 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           P64[Sp - 16] = _sdQn6::P64;
           P64[Sp - 8] = _sdQnh::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udRfb; else goto cdRf0;
       udRfb: // global
           call _cdReZ(R1) args: 0, res: 0, upd: 0;
       cdRf0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdQoq_info" {
     sat_sdQoq_info:
         const sat_sdQoq_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SdQrO_srt+152;
 },
 _cdReZ() //  [R1]
         { []
         }
     {offset
       cdReZ: // global
           _sdQom::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_cdRf5_info;
           R2 = P64[Sp + 16];
           R1 = _sdQom::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdReZ_info" {
     block_cdReZ_info:
         const _cdReZ;
         const 2;
         const 30;
 },
 _cdRf5() //  []
         { []
         }
     {offset
       cdRf5: // global
           R2 = lvl_rdQlV_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRf5_info" {
     block_cdRf5_info:
         const _cdRf5;
         const 130;
         const 30;
 },
 sat_sdQoB_entry() //  [R1]
         { []
         }
     {offset
       cdRfq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdRfu; else goto cdRfv;
       cdRfu: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdRfv: // global
           I64[Sp - 24] = block_cdRfn_info;
           _sdQn6::P64 = P64[R1 + 7];
           _sdQnh::P64 = P64[R1 + 15];
           R1 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           P64[Sp - 16] = _sdQn6::P64;
           P64[Sp - 8] = _sdQnh::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udRfz; else goto cdRfo;
       udRfz: // global
           call _cdRfn(R1) args: 0, res: 0, upd: 0;
       cdRfo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdQoB_info" {
     sat_sdQoB_info:
         const sat_sdQoB_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SdQrO_srt+152;
 },
 _cdRfn() //  [R1]
         { []
         }
     {offset
       cdRfn: // global
           _sdQox::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_cdRft_info;
           R2 = P64[Sp + 16];
           R1 = _sdQox::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRfn_info" {
     block_cdRfn_info:
         const _cdRfn;
         const 2;
         const 30;
 },
 _cdRft() //  []
         { []
         }
     {offset
       cdRft: // global
           R2 = lvl_rdQlV_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRft_info" {
     block_cdRft_info:
         const _cdRft;
         const 130;
         const 30;
 },
 sat_sdQoW_entry() //  [R1]
         { []
         }
     {offset
       cdRfA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdRfB; else goto cdRfC;
       cdRfB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdRfC: // global
           I64[Sp - 32] = block_cdRd4_info;
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 16];
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = P64[R1 + 40];
           Sp = Sp - 32;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdQoW_info" {
     sat_sdQoW_info:
         const sat_sdQoW_entry;
         const 4;
         const 83567178678287;
         const SdQrO_srt+40;
 },
 _cdRd4() //  [R1]
         { []
         }
     {offset
       cdRd4: // global
           I64[Sp] = block_cdRd8_info;
           R3 = GHC.IO.Exception.$fExceptionIOException4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRd4_info" {
     block_cdRd4_info:
         const _cdRd4;
         const 3;
         const 83567178678302;
         const SdQrO_srt+40;
 },
 _cdRd8() //  [R1]
         { []
         }
     {offset
       cdRd8: // global
           if (R1 & 7 == 1) goto cdRfF; else goto cdRfK;
       cdRfF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdRfI; else goto cdRfH;
       cdRfI: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdRfH: // global
           I64[Hp - 16] = sat_sdQnx_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdRfK: // global
           I64[Sp] = block_cdRdw_info;
           R1 = P64[Sp + 24];
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRd8_info" {
     block_cdRd8_info:
         const _cdRd8;
         const 3;
         const 70373039144990;
         const SdQrO_srt+40;
 },
 _cdRdw() //  [R1]
         { []
         }
     {offset
       cdRdw: // global
           I64[Sp - 8] = block_cdRdA_info;
           _sdQnz::P64 = P64[R1 + 7];
           _sdQnD::P64 = P64[R1 + 39];
           R1 = P64[R1 + 15];
           P64[Sp] = _sdQnD::P64;
           P64[Sp + 24] = _sdQnz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udRht; else goto cdRdB;
       udRht: // global
           call _cdRdA(R1) args: 0, res: 0, upd: 0;
       cdRdB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRdw_info" {
     block_cdRdw_info:
         const _cdRdw;
         const 259;
         const 70373039144990;
         const SdQrO_srt+40;
 },
 _cdRdA() //  [R1]
         { []
         }
     {offset
       cdRdA: // global
           if (I32[I64[R1 - 1] + 20] == 17 :: W32) goto cdRfS; else goto cdRfN;
       cdRfS: // global
           _sdQnD::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdRdZ_info;
           R1 = _sdQnD::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udRhu; else goto cdRe0;
       udRhu: // global
           call _cdRdZ(R1) args: 0, res: 0, upd: 0;
       cdRe0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdRfN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdRfQ; else goto cdRfP;
       cdRfQ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdRfP: // global
           I64[Hp - 16] = sat_sdQnP_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRdA_info" {
     block_cdRdA_info:
         const _cdRdA;
         const 4;
         const 70373039144990;
         const SdQrO_srt+40;
 },
 _cdRdZ() //  [R1]
         { []
         }
     {offset
       cdRdZ: // global
           if (R1 & 7 == 1) goto cdRfU; else goto cdRfZ;
       cdRfU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdRfX; else goto cdRfW;
       cdRfX: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdRfW: // global
           I64[Hp - 16] = sat_sdQo0_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdRfZ: // global
           I64[Sp] = block_cdReo_info;
           _sdQo1::P64 = P64[R1 + 6];
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _sdQo1::P64;
           if (R1 & 7 != 0) goto udRhv; else goto cdRep;
       udRhv: // global
           call _cdReo(R1) args: 0, res: 0, upd: 0;
       cdRep: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRdZ_info" {
     block_cdRdZ_info:
         const _cdRdZ;
         const 3;
         const 70373039144990;
         const SdQrO_srt+40;
 },
 _cdReo() //  [R1]
         { []
         }
     {offset
       cdReo: // global
           if (R1 & 7 == 1) goto cdRg1; else goto cdRg6;
       cdRg1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdRg4; else goto cdRg3;
       cdRg4: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdRg3: // global
           I64[Hp - 16] = sat_sdQoc_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdRg6: // global
           I64[Sp] = block_cdReN_info;
           _sdQod::P64 = P64[R1 + 6];
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _sdQod::P64;
           if (R1 & 7 != 0) goto udRhw; else goto cdReO;
       udRhw: // global
           call _cdReN(R1) args: 0, res: 0, upd: 0;
       cdReO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdReo_info" {
     block_cdReo_info:
         const _cdReo;
         const 3;
         const 70373039144990;
         const SdQrO_srt+40;
 },
 _cdReN() //  [R1]
         { []
         }
     {offset
       cdReN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdRg9; else goto cdRg8;
       cdRg9: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdRg8: // global
           if (I64[R1 + 7] == 32) goto cdRgg; else goto cdRgb;
       cdRgg: // global
           Hp = Hp - 24;
           I64[Sp] = block_cdRgc_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto udRhx; else goto cdRgh;
       udRhx: // global
           call _cdRgc(R1) args: 0, res: 0, upd: 0;
       cdRgh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdRgb: // global
           I64[Hp - 16] = sat_sdQoq_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdReN_info" {
     block_cdReN_info:
         const _cdReN;
         const 3;
         const 70373039144990;
         const SdQrO_srt+40;
 },
 _cdRgc() //  [R1]
         { []
         }
     {offset
       cdRgc: // global
           if (R1 & 7 == 1) goto cdRgo; else goto cdRgT;
       cdRgo: // global
           I64[Sp] = block_cdRgl_info;
           _sdQoE::P64 = P64[R1 + 15];
           R1 = GHC.IO.Handle.FD.stdout_closure;
           P64[Sp + 24] = _sdQoE::P64;
           if (R1 & 7 != 0) goto udRhy; else goto cdRgp;
       udRhy: // global
           call _cdRgl(R1) args: 0, res: 0, upd: 0;
       cdRgp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdRgT: // global
           I64[Sp] = block_cdRgR_info;
           _sdQoN::P64 = P64[R1 + 14];
           R1 = GHC.IO.Handle.FD.stdout_closure;
           P64[Sp + 24] = _sdQoN::P64;
           if (R1 & 7 != 0) goto udRhz; else goto cdRgU;
       udRhz: // global
           call _cdRgR(R1) args: 0, res: 0, upd: 0;
       cdRgU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRgc_info" {
     block_cdRgc_info:
         const _cdRgc;
         const 259;
         const 70373039144990;
         const SdQrO_srt+40;
 },
 _cdRgl() //  [R1]
         { []
         }
     {offset
       cdRgl: // global
           if (R1 & 7 != 1) goto udRhB; else goto cdRgK;
       cdRgK: // global
           if (P64[Sp + 24] != P64[R1 + 15]) goto udRhB; else goto udRhs;
       udRhB: // global
           call _cdRfg() args: 0, res: 0, upd: 0;
       udRhs: // global
           Sp = Sp + 8;
           call _cdRhf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdRgl_info" {
     block_cdRgl_info:
         const _cdRgl;
         const 3;
         const 4294967326;
         const SdQrO_srt+152;
 },
 _cdRgR() //  [R1]
         { []
         }
     {offset
       cdRgR: // global
           if (R1 & 7 == 1) goto udRhE; else goto cdRhj;
       cdRhj: // global
           if (P64[Sp + 24] != P64[R1 + 14]) goto udRhE; else goto udRhr;
       udRhE: // global
           call _cdRfg() args: 0, res: 0, upd: 0;
       udRhr: // global
           Sp = Sp + 8;
           call _cdRhf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdRgR_info" {
     block_cdRgR_info:
         const _cdRgR;
         const 3;
         const 4294967326;
         const SdQrO_srt+152;
 },
 _cdRhf() //  []
         { []
         }
     {offset
       cdRhf: // global
           R2 = lvl1_rdQlW_closure+1;
           R1 = P64[Sp];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cdRfg() //  []
         { []
         }
     {offset
       cdRfg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdRgf; else goto cdRge;
       cdRgf: // global
           HpAlloc = 24;
           I64[Sp] = block_cdRfg_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdRge: // global
           I64[Hp - 16] = sat_sdQoB_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRfg_info" {
     block_cdRfg_info:
         const _cdRfg;
         const 259;
         const 4294967326;
         const SdQrO_srt+152;
 },
 real_handler_rdQm5_entry() //  [R2, R3]
         { []
         }
     {offset
       cdRhM: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdRhN; else goto cdRhO;
       cdRhN: // global
           R3 = R3;
           R2 = R2;
           R1 = real_handler_rdQm5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdRhO: // global
           I64[Sp - 24] = block_cdRa4_info;
           _sdQn6::P64 = R2;
           R2 = GHC.TopHandler.flushStdHandles3_closure+2;
           R1 = GHC.TopHandler.flushStdHandles4_closure+1;
           P64[Sp - 16] = _sdQn6::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . real_handler_rdQm5_info" {
     real_handler_rdQm5_info:
         const real_handler_rdQm5_entry;
         const 0;
         const 2250756136632334;
         const 12884901903;
         const SdQrO_srt+40;
 },
 _cdRa4() //  []
         { []
         }
     {offset
       cdRa4: // global
           I64[Sp] = block_cdRa6_info;
           R2 = GHC.TopHandler.flushStdHandles3_closure+2;
           R1 = GHC.TopHandler.flushStdHandles2_closure+1;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRa4_info" {
     block_cdRa4_info:
         const _cdRa4;
         const 2;
         const 1124821870051358;
         const SdQrO_srt+40;
 },
 _cdRa6() //  []
         { []
         }
     {offset
       cdRa6: // global
           I64[Sp] = block_cdRhG_info;
           R2 = P64[Sp + 16];
           call GHC.IO.Exception.$fExceptionAsyncException_$cfromException_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRa6_info" {
     block_cdRa6_info:
         const _cdRa6;
         const 2;
         const 1124804690182174;
         const SdQrO_srt+40;
 },
 _cdRhG() //  [R1]
         { []
         }
     {offset
       cdRhG: // global
           if (R1 & 7 == 1) goto udRiM; else goto cdRhK;
       udRiM: // global
           Sp = Sp + 8;
           call _sdQnf() args: 0, res: 0, upd: 0;
       cdRhK: // global
           I64[Sp] = block_cdRij_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto udRiO; else goto cdRil;
       udRiO: // global
           call _cdRij(R1) args: 0, res: 0, upd: 0;
       cdRil: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRhG_info" {
     block_cdRhG_info:
         const _cdRhG;
         const 2;
         const 984067201826846;
         const SdQrO_srt+40;
 },
 _cdRij() //  [R1]
         { []
         }
     {offset
       cdRij: // global
           _cdRiE::P64 = R1 & 7;
           if (_cdRiE::P64 < 3) goto udRiK; else goto udRiL;
       udRiK: // global
           _sdQn6::P64 = P64[Sp + 8];
           if (_cdRiE::P64 < 2) goto cdRir; else goto cdRiv;
       cdRir: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] reportStackOverflow(CurrentTSO);
           R2 = lvl4_rdQm3_closure+1;
           R1 = _sdQn6::P64;
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
       cdRiv: // global
           call "ccall" arg hints:  []  result hints:  [] reportHeapOverflow();
           R2 = lvl5_rdQm4_closure+1;
           R1 = _sdQn6::P64;
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
       udRiL: // global
           if (_cdRiE::P64 < 4) goto udRiN; else goto cdRiD;
       udRiN: // global
           Sp = Sp + 8;
           call _sdQnf() args: 0, res: 0, upd: 0;
       cdRiD: // global
           R1 = exitInterrupted_rdPu2_closure;
           Sp = Sp + 24;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRij_info" {
     block_cdRij_info:
         const _cdRij;
         const 2;
         const 984067201826846;
         const SdQrO_srt+40;
 },
 _sdQnf() //  []
         { []
         }
     {offset
       sdQnf: // global
           I64[Sp - 8] = block_cdRad_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udRiR; else goto cdRae;
       udRiR: // global
           call _cdRad(R1) args: 0, res: 0, upd: 0;
       cdRae: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdRad() //  [R1]
         { []
         }
     {offset
       cdRad: // global
           I64[Sp - 16] = block_cdRai_info;
           _sdQni::P64 = P64[R1 + 7];
           R2 = _sdQni::P64;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = _sdQni::P64;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRad_info" {
     block_cdRad_info:
         const _cdRad;
         const 130;
         const 421117248405534;
         const SdQrO_srt+40;
 },
 _cdRai() //  [R1]
         { []
         }
     {offset
       cdRai: // global
           I64[Sp] = block_cdRam_info;
           R3 = GHC.IO.Exception.$fExceptionExitCode4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRai_info" {
     block_cdRai_info:
         const _cdRai;
         const 4;
         const 421117248405534;
         const SdQrO_srt+40;
 },
 _cdRam() //  [R1]
         { []
         }
     {offset
       cdRam: // global
           _sdQnj::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdRhV; else goto cdRi3;
       cdRhV: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdRhY; else goto cdRhX;
       cdRhY: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdRhX: // global
           I64[Hp - 56] = sat_sdQq4_info;
           _sdQn6::P64 = P64[Sp + 24];
           P64[Hp - 48] = _sdQn6::P64;
           I64[Hp - 40] = sat_sdQoW_info;
           P64[Hp - 24] = _sdQn6::P64;
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sdQnj::P64;
           R2 = Hp - 54;
           R1 = Hp - 40;
           Sp = Sp + 40;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
       cdRi3: // global
           I64[Sp + 16] = block_cdRi1_info;
           R1 = _sdQnj::P64;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRam_info" {
     block_cdRam_info:
         const _cdRam;
         const 4;
         const 139642271694878;
         const SdQrO_srt+40;
 },
 _cdRi1() //  [R1]
         { []
         }
     {offset
       cdRi1: // global
           _sdQn6::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdRi9; else goto cdRid;
       cdRi9: // global
           R2 = lvl1_rdQlW_closure+1;
           R1 = _sdQn6::P64;
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
       cdRid: // global
           R2 = P64[R1 + 6];
           R1 = _sdQn6::P64;
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRi1_info" {
     block_cdRi1_info:
         const _cdRi1;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.845995791 UTC

[section ""data" . GHC.TopHandler.runIO2_closure" {
     GHC.TopHandler.runIO2_closure:
         const GHC.TopHandler.runIO2_info;
         const 0;
 },
 GHC.TopHandler.runIO2_entry() //  [R2]
         { []
         }
     {offset
       cdRnh: // global
           R2 = R2;
           call GHC.TopHandler.runIO3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runIO2_info" {
     GHC.TopHandler.runIO2_info:
         const GHC.TopHandler.runIO2_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdQrO_srt+192;
 },
 section ""data" . GHC.TopHandler.runIO3_closure" {
     GHC.TopHandler.runIO3_closure:
         const GHC.TopHandler.runIO3_info;
         const 0;
 },
 sat_sdQqn_entry() //  [R1]
         { []
         }
     {offset
       cdRnt: // global
           R3 = P64[R1 + 7];
           R2 = safeExit_rdPtY_closure+1;
           call real_handler_rdQm5_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdQqn_info" {
     sat_sdQqn_info:
         const sat_sdQqn_entry;
         const 1;
         const 8800387989513;
         const 4294967299;
         const SdQrO_srt+96;
 },
 GHC.TopHandler.runIO3_entry() //  [R2]
         { []
         }
     {offset
       cdRnw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdRnA; else goto cdRnz;
       cdRnA: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.TopHandler.runIO3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdRnz: // global
           I64[Hp - 8] = sat_sdQqn_info;
           P64[Hp] = R2;
           R2 = GHC.TopHandler.runIO2_closure+2;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runIO3_info" {
     GHC.TopHandler.runIO3_info:
         const GHC.TopHandler.runIO3_entry;
         const 0;
         const 61576946122766;
         const 8589934597;
         const SdQrO_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.853489028 UTC

[section ""data" . GHC.TopHandler.topHandler_closure" {
     GHC.TopHandler.topHandler_closure:
         const GHC.TopHandler.topHandler_info;
         const 0;
 },
 GHC.TopHandler.topHandler_entry() //  [R2]
         { []
         }
     {offset
       cdRnQ: // global
           R2 = R2;
           call GHC.TopHandler.runIO3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.topHandler_info" {
     GHC.TopHandler.topHandler_info:
         const GHC.TopHandler.topHandler_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdQrO_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.858090209 UTC

[section ""data" . GHC.TopHandler.runNonIO1_closure" {
     GHC.TopHandler.runNonIO1_closure:
         const GHC.TopHandler.runNonIO1_info;
         const 0;
 },
 sat_sdQqs_entry() //  [R1]
         { []
         }
     {offset
       cdRoc: // global
           R1 = P64[R1 + 7];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdQqs_info" {
     sat_sdQqs_info:
         const sat_sdQqs_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sdQqt_entry() //  [R1]
         { []
         }
     {offset
       cdRof: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdRog; else goto cdRoh;
       cdRog: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdRoh: // global
           I64[Sp - 8] = block_cdRo5_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdQqt_info" {
     sat_sdQqt_info:
         const sat_sdQqt_entry;
         const 1;
         const 16;
 },
 _cdRo5() //  [R1]
         { []
         }
     {offset
       cdRo5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdRok; else goto cdRoj;
       cdRok: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdRoj: // global
           I64[Hp - 8] = sat_sdQqs_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRo5_info" {
     block_cdRo5_info:
         const _cdRo5;
         const 0;
         const 30;
 },
 GHC.TopHandler.runNonIO1_entry() //  [R2]
         { []
         }
     {offset
       cdRol: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdRop; else goto cdRoo;
       cdRop: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.TopHandler.runNonIO1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdRoo: // global
           I64[Hp - 16] = sat_sdQqt_info;
           P64[Hp] = R2;
           R2 = GHC.TopHandler.runIO2_closure+2;
           R1 = Hp - 16;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runNonIO1_info" {
     GHC.TopHandler.runNonIO1_info:
         const GHC.TopHandler.runNonIO1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SdQrO_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.866773876 UTC

[section ""data" . GHC.TopHandler.runNonIO_closure" {
     GHC.TopHandler.runNonIO_closure:
         const GHC.TopHandler.runNonIO_info;
         const 0;
 },
 GHC.TopHandler.runNonIO_entry() //  [R2]
         { []
         }
     {offset
       cdRoK: // global
           R2 = R2;
           call GHC.TopHandler.runNonIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runNonIO_info" {
     GHC.TopHandler.runNonIO_info:
         const GHC.TopHandler.runNonIO_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdQrO_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.871543421 UTC

[section ""data" . GHC.TopHandler.runIO1_closure" {
     GHC.TopHandler.runIO1_closure:
         const GHC.TopHandler.runIO1_info;
         const 0;
 },
 GHC.TopHandler.runIO1_entry() //  [R2]
         { []
         }
     {offset
       cdRoV: // global
           _sdQqu::P64 = R2;
           R2 = GHC.TopHandler.runIO2_closure+2;
           R1 = _sdQqu::P64;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runIO1_info" {
     GHC.TopHandler.runIO1_info:
         const GHC.TopHandler.runIO1_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdQrO_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.87533064 UTC

[section ""data" . GHC.TopHandler.runIO_closure" {
     GHC.TopHandler.runIO_closure:
         const GHC.TopHandler.runIO_info;
         const 0;
 },
 GHC.TopHandler.runIO_entry() //  [R2]
         { []
         }
     {offset
       cdRp6: // global
           R2 = R2;
           call GHC.TopHandler.runIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runIO_info" {
     GHC.TopHandler.runIO_info:
         const GHC.TopHandler.runIO_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdQrO_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.879852041 UTC

[section ""data" . fastExit1_rdQm6_closure" {
     fastExit1_rdQm6_closure:
         const GHC.Int.I32#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.883384845 UTC

[section ""data" . fastExit_rdPtZ_closure" {
     fastExit_rdPtZ_closure:
         const fastExit_rdPtZ_info;
         const 0;
 },
 fastExit_rdPtZ_entry() //  [R2]
         { []
         }
     {offset
       cdRpl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdRpm; else goto cdRpn;
       cdRpm: // global
           R2 = R2;
           R1 = fastExit_rdPtZ_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdRpn: // global
           I64[Sp - 8] = block_cdRpi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udRpr; else goto cdRpj;
       udRpr: // global
           call _cdRpi(R1) args: 0, res: 0, upd: 0;
       cdRpj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . fastExit_rdPtZ_info" {
     fastExit_rdPtZ_info:
         const fastExit_rdPtZ_entry;
         const 0;
         const 562954248388622;
         const 4294967301;
         const SdQrO_srt+88;
 },
 _cdRpi() //  [R1]
         { []
         }
     {offset
       cdRpi: // global
           R3 = I64[R1 + 7];
           R2 = fastExit1_rdQm6_closure+1;
           Sp = Sp + 8;
           call $wexitHelper_rdQlT_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRpi_info" {
     block_cdRpi_info:
         const _cdRpi;
         const 0;
         const 4294967326;
         const SdQrO_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.893105521 UTC

[section ""data" . GHC.TopHandler.runIOFastExit2_closure" {
     GHC.TopHandler.runIOFastExit2_closure:
         const GHC.TopHandler.runIOFastExit2_info;
         const 0;
 },
 GHC.TopHandler.runIOFastExit2_entry() //  [R2]
         { []
         }
     {offset
       cdRpF: // global
           R2 = R2;
           call GHC.TopHandler.runIOFastExit3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runIOFastExit2_info" {
     GHC.TopHandler.runIOFastExit2_info:
         const GHC.TopHandler.runIOFastExit2_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdQrO_srt+232;
 },
 section ""data" . GHC.TopHandler.runIOFastExit3_closure" {
     GHC.TopHandler.runIOFastExit3_closure:
         const GHC.TopHandler.runIOFastExit3_info;
         const 0;
 },
 sat_sdQqD_entry() //  [R1]
         { []
         }
     {offset
       cdRpR: // global
           R3 = P64[R1 + 7];
           R2 = fastExit_rdPtZ_closure+1;
           call real_handler_rdQm5_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdQqD_info" {
     sat_sdQqD_info:
         const sat_sdQqD_entry;
         const 1;
         const 141733920777;
         const 4294967299;
         const SdQrO_srt+184;
 },
 GHC.TopHandler.runIOFastExit3_entry() //  [R2]
         { []
         }
     {offset
       cdRpU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdRpY; else goto cdRpX;
       cdRpY: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.TopHandler.runIOFastExit3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdRpX: // global
           I64[Hp - 8] = sat_sdQqD_info;
           P64[Hp] = R2;
           R2 = GHC.TopHandler.runIOFastExit2_closure+2;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runIOFastExit3_info" {
     GHC.TopHandler.runIOFastExit3_info:
         const GHC.TopHandler.runIOFastExit3_entry;
         const 0;
         const 966367641614;
         const 8589934597;
         const SdQrO_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.904548918 UTC

[section ""data" . GHC.TopHandler.topHandlerFastExit_closure" {
     GHC.TopHandler.topHandlerFastExit_closure:
         const GHC.TopHandler.topHandlerFastExit_info;
         const 0;
 },
 GHC.TopHandler.topHandlerFastExit_entry() //  [R2]
         { []
         }
     {offset
       cdRqe: // global
           R2 = R2;
           call GHC.TopHandler.runIOFastExit3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.topHandlerFastExit_info" {
     GHC.TopHandler.topHandlerFastExit_info:
         const GHC.TopHandler.topHandlerFastExit_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdQrO_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.910028945 UTC

[section ""data" . GHC.TopHandler.runIOFastExit1_closure" {
     GHC.TopHandler.runIOFastExit1_closure:
         const GHC.TopHandler.runIOFastExit1_info;
         const 0;
 },
 GHC.TopHandler.runIOFastExit1_entry() //  [R2]
         { []
         }
     {offset
       cdRqp: // global
           _sdQqE::P64 = R2;
           R2 = GHC.TopHandler.runIOFastExit2_closure+2;
           R1 = _sdQqE::P64;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runIOFastExit1_info" {
     GHC.TopHandler.runIOFastExit1_info:
         const GHC.TopHandler.runIOFastExit1_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdQrO_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.916398575 UTC

[section ""data" . GHC.TopHandler.runIOFastExit_closure" {
     GHC.TopHandler.runIOFastExit_closure:
         const GHC.TopHandler.runIOFastExit_info;
         const 0;
 },
 GHC.TopHandler.runIOFastExit_entry() //  [R2]
         { []
         }
     {offset
       cdRqA: // global
           R2 = R2;
           call GHC.TopHandler.runIOFastExit1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runIOFastExit_info" {
     GHC.TopHandler.runIOFastExit_info:
         const GHC.TopHandler.runIOFastExit_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdQrO_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.922440583 UTC

[section ""data" . GHC.TopHandler.runMainIO3_closure" {
     GHC.TopHandler.runMainIO3_closure:
         const GHC.TopHandler.runMainIO3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.TopHandler.runMainIO3_entry() //  [R1]
         { []
         }
     {offset
       cdRqN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdRqO; else goto cdRqP;
       cdRqO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdRqP: // global
           (_cdRqK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdRqK::I64 == 0) goto cdRqM; else goto cdRqL;
       cdRqM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdRqL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdRqK::I64;
           R2 = GHC.IO.Exception.UserInterrupt_closure+4;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionAsyncException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runMainIO3_info" {
     GHC.TopHandler.runMainIO3_info:
         const GHC.TopHandler.runMainIO3_entry;
         const 0;
         const 4294967317;
         const SdQrO_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.927574067 UTC

[section ""data" . GHC.TopHandler.runMainIO4_closure" {
     GHC.TopHandler.runMainIO4_closure:
         const GHC.Int.I32#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.936561114 UTC

[section ""data" . GHC.TopHandler.runMainIO1_closure" {
     GHC.TopHandler.runMainIO1_closure:
         const GHC.TopHandler.runMainIO1_info;
         const 0;
 },
 sat_sdQrd_entry() //  [R1]
         { []
         }
     {offset
       cdRrp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdRrq; else goto cdRrr;
       cdRrq: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdRrr: // global
           I64[Sp - 8] = block_cdRrh_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_deRefWeak#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdQrd_info" {
     sat_sdQrd_info:
         const sat_sdQrd_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const SdQrO_srt+264;
 },
 _cdRrh() //  [R1, R2]
         { []
         }
     {offset
       cdRrh: // global
           if (R1 == 0) goto udRrD; else goto cdRrn;
       udRrD: // global
           call _cdRro() args: 0, res: 0, upd: 0;
       cdRrn: // global
           I64[Sp] = block_cdRru_info;
           R1 = R2;
           if (R1 & 7 != 0) goto udRrE; else goto cdRrv;
       udRrE: // global
           call _cdRru(R1) args: 0, res: 0, upd: 0;
       cdRrv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRrh_info" {
     block_cdRrh_info:
         const _cdRrh;
         const 0;
         const 4294967326;
         const SdQrO_srt+264;
 },
 _cdRru() //  [R1]
         { []
         }
     {offset
       cdRru: // global
           I64[Sp] = block_cdRro_info;
           R2 = GHC.TopHandler.runMainIO3_closure;
           R1 = P64[R1 + 7];
           call stg_killThread#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRru_info" {
     block_cdRru_info:
         const _cdRru;
         const 0;
         const 4294967326;
         const SdQrO_srt+264;
 },
 _cdRro() //  []
         { []
         }
     {offset
       cdRro: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRro_info" {
     block_cdRro_info:
         const _cdRro;
         const 0;
         const 30;
 },
 sat_sdQr3_entry() //  [R1, R2]
         { []
         }
     {offset
       cdRrT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdRrU; else goto cdRrV;
       cdRrU: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdRrV: // global
           I64[Sp - 8] = block_cdRrL_info;
           R1 = P64[R1 + 6];
           Sp = Sp - 8;
           call stg_deRefWeak#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdQr3_info" {
     sat_sdQr3_info:
         const sat_sdQr3_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SdQrO_srt+264;
 },
 _cdRrL() //  [R1, R2]
         { []
         }
     {offset
       cdRrL: // global
           if (R1 == 0) goto udRs7; else goto cdRrR;
       udRs7: // global
           call _cdRrS() args: 0, res: 0, upd: 0;
       cdRrR: // global
           I64[Sp] = block_cdRrY_info;
           R1 = R2;
           if (R1 & 7 != 0) goto udRs8; else goto cdRrZ;
       udRs8: // global
           call _cdRrY(R1) args: 0, res: 0, upd: 0;
       cdRrZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRrL_info" {
     block_cdRrL_info:
         const _cdRrL;
         const 0;
         const 4294967326;
         const SdQrO_srt+264;
 },
 _cdRrY() //  [R1]
         { []
         }
     {offset
       cdRrY: // global
           I64[Sp] = block_cdRrS_info;
           R2 = GHC.TopHandler.runMainIO3_closure;
           R1 = P64[R1 + 7];
           call stg_killThread#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRrY_info" {
     block_cdRrY_info:
         const _cdRrY;
         const 0;
         const 4294967326;
         const SdQrO_srt+264;
 },
 _cdRrS() //  []
         { []
         }
     {offset
       cdRrS: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRrS_info" {
     block_cdRrS_info:
         const _cdRrS;
         const 0;
         const 30;
 },
 sat_sdQro_entry() //  [R1]
         { []
         }
     {offset
       cdRsh: // global
           _sdQro::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdRsi; else goto cdRsj;
       cdRsj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdRsl; else goto cdRsk;
       cdRsl: // global
           HpAlloc = 16;
           goto cdRsi;
       cdRsi: // global
           R1 = _sdQro::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdRsk: // global
           _sdQqG::P64 = P64[_sdQro::P64 + 7];
           I64[Hp - 8] = GHC.Conc.Sync.ThreadId_con_info;
           _sdQqL::P64 = CurrentTSO;
           P64[Hp] = _sdQqL::P64;
           I64[Sp - 16] = block_cdRr8_info;
           R2 = Hp - 7;
           R1 = _sdQqL::P64;
           P64[Sp - 8] = _sdQqG::P64;
           Sp = Sp - 16;
           call stg_mkWeakNoFinalizer#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdQro_info" {
     sat_sdQro_info:
         const sat_sdQro_entry;
         const 1;
         const 30064771081;
         const 4294967299;
         const SdQrO_srt+264;
 },
 _cdRr8() //  [R1]
         { []
         }
     {offset
       cdRr8: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdRso; else goto cdRsn;
       cdRso: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdRsn: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] rts_setMainThread(R1);
           I64[Hp - 88] = sat_sdQrd_info;
           P64[Hp - 80] = R1;
           I64[Hp - 72] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 64] = GHC.TopHandler.runMainIO2_closure;
           P64[Hp - 56] = Hp - 87;
           I64[Hp - 48] = sat_sdQr3_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 46;
           P64[Hp - 16] = Hp - 71;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_cdRsb_info;
           R3 = Hp - 6;
           R2 = GHC.TopHandler.runMainIO4_closure+1;
           call GHC.Conc.Signal.setHandler1_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRr8_info" {
     block_cdRr8_info:
         const _cdRr8;
         const 1;
         const 30064771102;
         const SdQrO_srt+264;
 },
 _cdRsb() //  []
         { []
         }
     {offset
       cdRsb: // global
           _sdQqG::P64 = P64[Sp + 8];
           (_sdQrn::I64) = call "ccall" arg hints:  [‘signed’, ‘signed’,
                                                     PtrHint]  result hints:  [‘signed’] stg_sig_install(2, (-5), 0);
           R1 = _sdQqG::P64;
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRsb_info" {
     block_cdRsb_info:
         const _cdRsb;
         const 1;
         const 30;
 },
 GHC.TopHandler.runMainIO1_entry() //  [R2]
         { []
         }
     {offset
       cdRsq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdRsu; else goto cdRst;
       cdRsu: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.TopHandler.runMainIO1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdRst: // global
           I64[Hp - 8] = sat_sdQro_info;
           P64[Hp] = R2;
           R2 = GHC.TopHandler.runIO2_closure+2;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runMainIO1_info" {
     GHC.TopHandler.runMainIO1_info:
         const GHC.TopHandler.runMainIO1_entry;
         const 0;
         const 16496969383950;
         const 8589934597;
         const SdQrO_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.960700713 UTC

[section ""data" . GHC.TopHandler.runMainIO_closure" {
     GHC.TopHandler.runMainIO_closure:
         const GHC.TopHandler.runMainIO_info;
         const 0;
 },
 GHC.TopHandler.runMainIO_entry() //  [R2]
         { []
         }
     {offset
       cdRtl: // global
           R2 = R2;
           call GHC.TopHandler.runMainIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runMainIO_info" {
     GHC.TopHandler.runMainIO_info:
         const GHC.TopHandler.runMainIO_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdQrO_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:05.966383216 UTC

[section ""relreadonly" . SdQrO_srt" {
     SdQrO_srt:
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const GHC.IO.Handle.Internals.wantWritableHandle1_closure;
         const GHC.IO.Handle.FD.stderr_closure;
         const GHC.IO.Handle.hFlush2_closure;
         const GHC.IO.Handle.FD.stdout_closure;
         const GHC.TopHandler.flushStdHandles1_closure;
         const GHC.TopHandler.flushStdHandles2_closure;
         const GHC.TopHandler.flushStdHandles4_closure;
         const GHC.IO.failIO1_closure;
         const unreachable1_rdQlS_closure;
         const $wexitHelper_rdQlT_closure;
         const safeExit_rdPtY_closure;
         const msgStr1_rdQlY_closure;
         const str1_rdQm0_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const GHC.IO.Exception.$fExceptionIOException4_closure;
         const lvl2_rdQm1_closure;
         const lvl3_rdQm2_closure;
         const GHC.Conc.Sync.uncaughtExceptionHandler_closure;
         const GHC.IO.Exception.$fExceptionAsyncException_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionExitCode4_closure;
         const exitInterrupted_rdPu2_closure;
         const real_handler_rdQm5_closure;
         const GHC.TopHandler.runIO3_closure;
         const GHC.TopHandler.runIO2_closure;
         const GHC.TopHandler.runNonIO1_closure;
         const GHC.TopHandler.runIO1_closure;
         const fastExit_rdPtZ_closure;
         const GHC.TopHandler.runIOFastExit3_closure;
         const GHC.TopHandler.runIOFastExit2_closure;
         const GHC.TopHandler.runIOFastExit1_closure;
         const GHC.IO.Exception.$fExceptionAsyncException_$ctoException_closure;
         const GHC.TopHandler.runMainIO3_closure;
         const GHC.Conc.Signal.setHandler1_closure;
         const GHC.TopHandler.runMainIO2_closure;
         const GHC.TopHandler.runMainIO1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.075782735 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:09:07.076970086 UTC

[section ""cstring" . GHC.TopHandler.$trModule4_bytes" {
     GHC.TopHandler.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.078864574 UTC

[section ""data" . GHC.TopHandler.$trModule3_closure" {
     GHC.TopHandler.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TopHandler.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.08068873 UTC

[section ""cstring" . GHC.TopHandler.$trModule2_bytes" {
     GHC.TopHandler.$trModule2_bytes:
         I8[] [71,72,67,46,84,111,112,72,97,110,100,108,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.082595493 UTC

[section ""data" . GHC.TopHandler.$trModule1_closure" {
     GHC.TopHandler.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.TopHandler.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.084573611 UTC

[section ""data" . GHC.TopHandler.$trModule_closure" {
     GHC.TopHandler.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.TopHandler.$trModule3_closure+1;
         const GHC.TopHandler.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.089096082 UTC

[section ""data" . GHC.TopHandler.runMainIO2_closure" {
     GHC.TopHandler.runMainIO2_closure:
         const GHC.TopHandler.runMainIO2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.TopHandler.runMainIO2_entry() //  [R1]
         { []
         }
     {offset
       cdRz5: // global
           if ((Sp + -104) < SpLim) (likely: False) goto cdRz6; else goto cdRz7;
       cdRz6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdRz7: // global
           (_cdRyS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdRyS::I64 == 0) goto cdRyU; else goto cdRyT;
       cdRyU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdRyT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdRyS::I64;
           I64[Sp - 24] = block_cdRyV_info;
           R6 = 0;
           R5 = GHC.Types.$tcIO1_closure;
           R4 = GHC.Types.$trModule_closure;
           R3 = 14006894820825784566;
           R2 = 11571292540224541508;
           P64[Sp - 40] = GHC.Types.krep$*Arr*_closure;
           P64[Sp - 32] = GHC.Types.[]_closure+1;
           Sp = Sp - 40;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runMainIO2_info" {
     GHC.TopHandler.runMainIO2_info:
         const GHC.TopHandler.runMainIO2_entry;
         const 0;
         const 12884901909;
         const SdRze_srt;
 },
 _cdRyV() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cdRyV: // global
           I64[Sp - 40] = block_cdRyZ_info;
           R6 = 0;
           _sdRty::P64 = R5;
           R5 = GHC.Tuple.$tc()1_closure;
           _sdRtx::P64 = R4;
           R4 = GHC.Tuple.$trModule_closure;
           _sdRtw::P64 = R3;
           R3 = 14290630168515401665;
           _sdRtv::I64 = R2;
           R2 = 2684808367141291271;
           P64[Sp - 56] = GHC.Types.krep$*_closure;
           P64[Sp - 48] = GHC.Types.[]_closure+1;
           I64[Sp - 32] = _sdRtv::I64;
           P64[Sp - 24] = _sdRtw::P64;
           P64[Sp - 16] = _sdRtx::P64;
           P64[Sp - 8] = _sdRty::P64;
           I64[Sp] = R1;
           Sp = Sp - 56;
           call Data.Typeable.Internal.$wmkTrCon_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdRyV_info" {
     block_cdRyV_info:
         const _cdRyV;
         const 0;
         const 12884901918;
         const SdRze_srt;
 },
 _cdRyZ() //  [R1, R2, R3, R4, R5]
         { []
         }
     {offset
       cdRyZ: // global
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           I64[Sp] = R1;
           Sp = Sp - 40;
           call _cdRz0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdRyZ_info" {
     block_cdRyZ_info:
         const _cdRyZ;
         const 1093;
         const 4294967326;
         const SdRze_srt;
 },
 _cdRz0() //  []
         { []
         }
     {offset
       cdRz0: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdRzb; else goto cdRza;
       cdRzb: // global
           HpAlloc = 96;
           I64[Sp] = block_cdRz0_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 24;
       cdRza: // global
           I64[Hp - 88] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 80] = P64[Sp + 16];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           I64[Hp - 56] = I64[Sp + 40];
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = Data.Typeable.Internal.TrTyCon_con_info;
           P64[Hp - 32] = P64[Sp + 56];
           P64[Hp - 24] = P64[Sp + 64];
           P64[Hp - 16] = P64[Sp + 72];
           I64[Hp - 8] = I64[Sp + 80];
           I64[Hp] = I64[Sp + 48];
           R3 = Hp - 86;
           R2 = Hp - 38;
           Sp = Sp + 88;
           call Data.Typeable.Internal.mkTrApp_entry(R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdRz0_info" {
     block_cdRz0_info:
         const _cdRz0;
         const 35914;
         const 4294967326;
         const SdRze_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.102926313 UTC

[section ""cstring" . unreachable_rdQlR_bytes" {
     unreachable_rdQlR_bytes:
         I8[] [73,102,32,121,111,117,32,99,97,110,32,114,101,97,100,32,116,104,105,115,44,32,115,104,117,116,100,111,119,110,72,97,115,107,101,108,108,65,110,100,69,120,105,116,32,100,105,100,32,110,111,116,32,101,120,105,116,46]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.107345762 UTC

[section ""data" . unreachable1_rdQlS_closure" {
     unreachable1_rdQlS_closure:
         const unreachable1_rdQlS_info;
         const 0;
         const 0;
         const 0;
 },
 unreachable1_rdQlS_entry() //  [R1]
         { []
         }
     {offset
       cdRzY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdRzZ; else goto cdRA0;
       cdRzZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdRA0: // global
           (_cdRzV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdRzV::I64 == 0) goto cdRzX; else goto cdRzW;
       cdRzX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdRzW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdRzV::I64;
           R2 = unreachable_rdQlR_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . unreachable1_rdQlS_info" {
     unreachable1_rdQlS_info:
         const unreachable1_rdQlS_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.113392792 UTC

[section ""data" . GHC.TopHandler.flushStdHandles2_closure" {
     GHC.TopHandler.flushStdHandles2_closure:
         const GHC.TopHandler.flushStdHandles2_info;
         const 0;
 },
 GHC.TopHandler.flushStdHandles2_entry() //  []
         { []
         }
     {offset
       cdRAd: // global
           R4 = GHC.IO.Handle.Internals.flushWriteBuffer1_closure+2;
           R3 = GHC.IO.Handle.FD.stderr_closure;
           R2 = GHC.IO.Handle.hFlush2_closure;
           call GHC.IO.Handle.Internals.wantWritableHandle1_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.flushStdHandles2_info" {
     GHC.TopHandler.flushStdHandles2_info:
         const GHC.TopHandler.flushStdHandles2_entry;
         const 0;
         const 30064771086;
         const 4294967299;
         const SdRze_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.120677392 UTC

[section ""data" . GHC.TopHandler.flushStdHandles3_closure" {
     GHC.TopHandler.flushStdHandles3_closure:
         const GHC.TopHandler.flushStdHandles3_info;
 },
 GHC.TopHandler.flushStdHandles3_entry() //  [R2]
         { []
         }
     {offset
       cdRAs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdRAt; else goto cdRAu;
       cdRAt: // global
           R2 = R2;
           R1 = GHC.TopHandler.flushStdHandles3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdRAu: // global
           I64[Sp - 8] = block_cdRAp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udRAy; else goto cdRAq;
       udRAy: // global
           call _cdRAp() args: 0, res: 0, upd: 0;
       cdRAq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.flushStdHandles3_info" {
     GHC.TopHandler.flushStdHandles3_info:
         const GHC.TopHandler.flushStdHandles3_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cdRAp() //  []
         { []
         }
     {offset
       cdRAp: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRAp_info" {
     block_cdRAp_info:
         const _cdRAp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.129194939 UTC

[section ""data" . GHC.TopHandler.flushStdHandles4_closure" {
     GHC.TopHandler.flushStdHandles4_closure:
         const GHC.TopHandler.flushStdHandles4_info;
         const 0;
 },
 GHC.TopHandler.flushStdHandles4_entry() //  []
         { []
         }
     {offset
       cdRAP: // global
           R4 = GHC.IO.Handle.Internals.flushWriteBuffer1_closure+2;
           R3 = GHC.IO.Handle.FD.stdout_closure;
           R2 = GHC.IO.Handle.hFlush2_closure;
           call GHC.IO.Handle.Internals.wantWritableHandle1_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.flushStdHandles4_info" {
     GHC.TopHandler.flushStdHandles4_info:
         const GHC.TopHandler.flushStdHandles4_entry;
         const 0;
         const 55834574862;
         const 4294967299;
         const SdRze_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.133798815 UTC

[section ""data" . GHC.TopHandler.flushStdHandles1_closure" {
     GHC.TopHandler.flushStdHandles1_closure:
         const GHC.TopHandler.flushStdHandles1_info;
         const 0;
 },
 GHC.TopHandler.flushStdHandles1_entry() //  []
         { []
         }
     {offset
       cdRB3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdRB4; else goto cdRB5;
       cdRB4: // global
           R1 = GHC.TopHandler.flushStdHandles1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdRB5: // global
           I64[Sp - 8] = block_cdRB1_info;
           R2 = GHC.TopHandler.flushStdHandles3_closure+2;
           R1 = GHC.TopHandler.flushStdHandles4_closure+1;
           Sp = Sp - 8;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.flushStdHandles1_info" {
     GHC.TopHandler.flushStdHandles1_info:
         const GHC.TopHandler.flushStdHandles1_entry;
         const 0;
         const 30064771086;
         const 4294967299;
         const SdRze_srt+48;
 },
 _cdRB1() //  []
         { []
         }
     {offset
       cdRB1: // global
           R2 = GHC.TopHandler.flushStdHandles3_closure+2;
           R1 = GHC.TopHandler.flushStdHandles2_closure+1;
           Sp = Sp + 8;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRB1_info" {
     block_cdRB1_info:
         const _cdRB1;
         const 0;
         const 4294967326;
         const SdRze_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.139527057 UTC

[section ""data" . GHC.TopHandler.flushStdHandles_closure" {
     GHC.TopHandler.flushStdHandles_closure:
         const GHC.TopHandler.flushStdHandles_info;
         const 0;
 },
 GHC.TopHandler.flushStdHandles_entry() //  []
         { []
         }
     {offset
       cdRBk: // global
           call GHC.TopHandler.flushStdHandles1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.flushStdHandles_info" {
     GHC.TopHandler.flushStdHandles_info:
         const GHC.TopHandler.flushStdHandles_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SdRze_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.149739941 UTC

[section ""data" . $wexitHelper_rdQlT_closure" {
     $wexitHelper_rdQlT_closure:
         const $wexitHelper_rdQlT_info;
         const 0;
 },
 sat_sdRu0_entry() //  [R1]
         { []
         }
     {offset
       cdRBN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdRBO; else goto cdRBP;
       cdRBO: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdRBP: // global
           I64[Sp - 8] = block_cdRBK_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udRC9; else goto cdRBL;
       udRC9: // global
           call _cdRBK(R1) args: 0, res: 0, upd: 0;
       cdRBL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdRu0_info" {
     sat_sdRu0_info:
         const sat_sdRu0_entry;
         const 1;
         const 12884901897;
         const 4294967299;
         const SdRze_srt+72;
 },
 _cdRBK() //  [R1]
         { []
         }
     {offset
       cdRBK: // global
           I64[Sp] = block_cdRBW_info;
           _cdRBV::I64 = I64[R1 + 7];
           _udRC1::P64 = CurrentTSO;
           I64[I64[_udRC1::P64 + 24] + 16] = Sp;
           _udRC2::I64 = CurrentNursery;
           P64[_udRC2::I64 + 8] = Hp + 8;
           I64[_udRC1::P64 + 104] = I64[_udRC1::P64 + 104] - ((Hp + 8) - I64[_udRC2::I64]);
           (_udRBZ::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           call "ccall" arg hints:  [‘signed’,
                                     ‘signed’]  result hints:  [] shutdownHaskellAndExit(255, _cdRBV::I64);
           (_udRC0::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_udRBZ::I64);
           BaseReg = _udRC0::I64;
           _udRC3::P64 = CurrentTSO;
           _udRC4::P64 = I64[_udRC3::P64 + 24];
           Sp = I64[_udRC4::P64 + 16];
           SpLim = _udRC4::P64 + 192;
           HpAlloc = 0;
           _udRC5::I64 = CurrentNursery;
           _udRC6::I64 = I64[_udRC5::I64 + 8];
           Hp = _udRC6::I64 - 8;
           _udRC7::I64 = I64[_udRC5::I64];
           HpLim = _udRC7::I64 + ((%MO_SS_Conv_W32_W64(I32[_udRC5::I64 + 48]) << 12) - 1);
           I64[_udRC3::P64 + 104] = I64[_udRC3::P64 + 104] + (_udRC6::I64 - _udRC7::I64);
           call (I64[I64[Sp]])() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRBK_info" {
     block_cdRBK_info:
         const _cdRBK;
         const 0;
         const 12884901918;
         const SdRze_srt+72;
 },
 _cdRBW() //  []
         { []
         }
     {offset
       cdRBW: // global
           R2 = unreachable1_rdQlS_closure;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRBW_info" {
     block_cdRBW_info:
         const _cdRBW;
         const 0;
         const 12884901918;
         const SdRze_srt+72;
 },
 sat_sdRub_entry() //  [R1]
         { []
         }
     {offset
       cdRCq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdRCr; else goto cdRCs;
       cdRCr: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdRCs: // global
           I64[Sp - 16] = block_cdRCn_info;
           _sdRtR::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp - 8] = _sdRtR::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udRCS; else goto cdRCo;
       udRCS: // global
           call _cdRCn(R1) args: 0, res: 0, upd: 0;
       cdRCo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdRub_info" {
     sat_sdRub_info:
         const sat_sdRub_entry;
         const 4294967297;
         const 12884901900;
         const 4294967299;
         const SdRze_srt+72;
 },
 _cdRCn() //  [R1]
         { []
         }
     {offset
       cdRCn: // global
           _cdRCD::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(-I64[Sp + 8]));
           I64[Sp + 8] = block_cdRCF_info;
           Sp = Sp + 8;
           _cdRCE::I64 = I64[R1 + 7];
           _udRCK::P64 = CurrentTSO;
           I64[I64[_udRCK::P64 + 24] + 16] = Sp;
           _udRCL::I64 = CurrentNursery;
           P64[_udRCL::I64 + 8] = Hp + 8;
           I64[_udRCK::P64 + 104] = I64[_udRCK::P64 + 104] - ((Hp + 8) - I64[_udRCL::I64]);
           (_udRCI::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           call "ccall" arg hints:  [‘signed’,
                                     ‘signed’]  result hints:  [] shutdownHaskellAndSignal(_cdRCD::I64, _cdRCE::I64);
           (_udRCJ::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_udRCI::I64);
           BaseReg = _udRCJ::I64;
           _udRCM::P64 = CurrentTSO;
           _udRCN::P64 = I64[_udRCM::P64 + 24];
           Sp = I64[_udRCN::P64 + 16];
           SpLim = _udRCN::P64 + 192;
           HpAlloc = 0;
           _udRCO::I64 = CurrentNursery;
           _udRCP::I64 = I64[_udRCO::I64 + 8];
           Hp = _udRCP::I64 - 8;
           _udRCQ::I64 = I64[_udRCO::I64];
           HpLim = _udRCQ::I64 + ((%MO_SS_Conv_W32_W64(I32[_udRCO::I64 + 48]) << 12) - 1);
           I64[_udRCM::P64 + 104] = I64[_udRCM::P64 + 104] + (_udRCP::I64 - _udRCQ::I64);
           call (I64[I64[Sp]])() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRCn_info" {
     block_cdRCn_info:
         const _cdRCn;
         const 65;
         const 12884901918;
         const SdRze_srt+72;
 },
 _cdRCF() //  []
         { []
         }
     {offset
       cdRCF: // global
           R2 = unreachable1_rdQlS_closure;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRCF_info" {
     block_cdRCF_info:
         const _cdRCF;
         const 0;
         const 12884901918;
         const SdRze_srt+72;
 },
 sat_sdRul_entry() //  [R1]
         { []
         }
     {offset
       cdRD9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdRDa; else goto cdRDb;
       cdRDa: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdRDb: // global
           I64[Sp - 16] = block_cdRD6_info;
           _sdRtR::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp - 8] = _sdRtR::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udRDy; else goto cdRD7;
       udRDy: // global
           call _cdRD6(R1) args: 0, res: 0, upd: 0;
       cdRD7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdRul_info" {
     sat_sdRul_info:
         const sat_sdRul_entry;
         const 4294967297;
         const 12884901900;
         const 4294967299;
         const SdRze_srt+72;
 },
 _cdRD6() //  [R1]
         { []
         }
     {offset
       cdRD6: // global
           _cdRDj::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8]));
           I64[Sp + 8] = block_cdRDl_info;
           Sp = Sp + 8;
           _cdRDk::I64 = I64[R1 + 7];
           _udRDq::P64 = CurrentTSO;
           I64[I64[_udRDq::P64 + 24] + 16] = Sp;
           _udRDr::I64 = CurrentNursery;
           P64[_udRDr::I64 + 8] = Hp + 8;
           I64[_udRDq::P64 + 104] = I64[_udRDq::P64 + 104] - ((Hp + 8) - I64[_udRDr::I64]);
           (_udRDo::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           call "ccall" arg hints:  [‘signed’,
                                     ‘signed’]  result hints:  [] shutdownHaskellAndExit(_cdRDj::I64, _cdRDk::I64);
           (_udRDp::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_udRDo::I64);
           BaseReg = _udRDp::I64;
           _udRDs::P64 = CurrentTSO;
           _udRDt::P64 = I64[_udRDs::P64 + 24];
           Sp = I64[_udRDt::P64 + 16];
           SpLim = _udRDt::P64 + 192;
           HpAlloc = 0;
           _udRDu::I64 = CurrentNursery;
           _udRDv::I64 = I64[_udRDu::I64 + 8];
           Hp = _udRDv::I64 - 8;
           _udRDw::I64 = I64[_udRDu::I64];
           HpLim = _udRDw::I64 + ((%MO_SS_Conv_W32_W64(I32[_udRDu::I64 + 48]) << 12) - 1);
           I64[_udRDs::P64 + 104] = I64[_udRDs::P64 + 104] + (_udRDv::I64 - _udRDw::I64);
           call (I64[I64[Sp]])() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRD6_info" {
     block_cdRD6_info:
         const _cdRD6;
         const 65;
         const 12884901918;
         const SdRze_srt+72;
 },
 _cdRDl() //  []
         { []
         }
     {offset
       cdRDl: // global
           R2 = unreachable1_rdQlS_closure;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRDl_info" {
     block_cdRDl_info:
         const _cdRDl;
         const 0;
         const 12884901918;
         const SdRze_srt+72;
 },
 $wexitHelper_rdQlT_entry() //  [R2, R3]
         { []
         }
     {offset
       cdRDC: // global
           _sdRtR::I64 = R3;
           _sdRtQ::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cdRDD; else goto cdRDE;
       cdRDE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdRDG; else goto cdRDF;
       cdRDG: // global
           HpAlloc = 24;
           goto cdRDD;
       cdRDD: // global
           R3 = _sdRtR::I64;
           R2 = _sdRtQ::P64;
           R1 = $wexitHelper_rdQlT_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdRDF: // global
           if (%MO_S_Lt_W64(_sdRtR::I64, 0)) goto cdRDU; else goto cdRDB;
       cdRDB: // global
           if (%MO_S_Gt_W64(_sdRtR::I64, 255)) goto cdRDU; else goto cdRDV;
       cdRDU: // global
           Hp = Hp - 24;
           P64[Sp - 16] = _sdRtQ::P64;
           I64[Sp - 8] = _sdRtR::I64;
           Sp = Sp - 24;
           call _cdRBy() args: 0, res: 0, upd: 0;
       cdRDV: // global
           I64[Hp - 16] = sat_sdRul_info;
           P64[Hp - 8] = _sdRtQ::P64;
           I64[Hp] = _sdRtR::I64;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wexitHelper_rdQlT_info" {
     $wexitHelper_rdQlT_info:
         const $wexitHelper_rdQlT_entry;
         const 0;
         const 30064771086;
         const 8589934606;
         const SdRze_srt+72;
 },
 _cdRBy() //  []
         { []
         }
     {offset
       cdRBy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdRDJ; else goto cdRDI;
       cdRDJ: // global
           HpAlloc = 24;
           I64[Sp] = block_cdRBy_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdRDI: // global
           _sdRtR::I64 = I64[Sp + 16];
           if (%MO_S_Lt_W64(_sdRtR::I64, (-127))) goto cdRDQ; else goto cdRDS;
       cdRDS: // global
           if (%MO_S_Gt_W64(_sdRtR::I64, (-1))) goto cdRDQ; else goto cdRDR;
       cdRDQ: // global
           Hp = Hp - 24;
           call _cdRBD() args: 0, res: 0, upd: 0;
       cdRDR: // global
           I64[Hp - 16] = sat_sdRub_info;
           P64[Hp - 8] = P64[Sp + 8];
           I64[Hp] = _sdRtR::I64;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRBy_info" {
     block_cdRBy_info:
         const _cdRBy;
         const 130;
         const 12884901918;
         const SdRze_srt+72;
 },
 _cdRBD() //  []
         { []
         }
     {offset
       cdRBD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdRDM; else goto cdRDL;
       cdRDM: // global
           HpAlloc = 16;
           I64[Sp] = block_cdRBD_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdRDL: // global
           I64[Hp - 8] = sat_sdRu0_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRBD_info" {
     block_cdRBD_info:
         const _cdRBD;
         const 130;
         const 12884901918;
         const SdRze_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.188683882 UTC

[section ""data" . safeExit1_rdQlU_closure" {
     safeExit1_rdQlU_closure:
         const GHC.Int.I32#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.192895411 UTC

[section ""data" . safeExit_rdPtY_closure" {
     safeExit_rdPtY_closure:
         const safeExit_rdPtY_info;
         const 0;
 },
 safeExit_rdPtY_entry() //  [R2]
         { []
         }
     {offset
       cdRFS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdRFT; else goto cdRFU;
       cdRFT: // global
           R2 = R2;
           R1 = safeExit_rdPtY_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdRFU: // global
           I64[Sp - 8] = block_cdRFP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udRFY; else goto cdRFQ;
       udRFY: // global
           call _cdRFP(R1) args: 0, res: 0, upd: 0;
       cdRFQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . safeExit_rdPtY_info" {
     safeExit_rdPtY_info:
         const safeExit_rdPtY_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SdRze_srt+88;
 },
 _cdRFP() //  [R1]
         { []
         }
     {offset
       cdRFP: // global
           R3 = I64[R1 + 7];
           R2 = safeExit1_rdQlU_closure+1;
           Sp = Sp + 8;
           call $wexitHelper_rdQlT_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRFP_info" {
     block_cdRFP_info:
         const _cdRFP;
         const 0;
         const 4294967326;
         const SdRze_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.201632791 UTC

[section ""data" . exitInterrupted_rdPu2_closure" {
     exitInterrupted_rdPu2_closure:
         const exitInterrupted_rdPu2_info;
         const 0;
         const 0;
         const 0;
 },
 exitInterrupted_rdPu2_entry() //  [R1]
         { []
         }
     {offset
       cdRGf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdRGg; else goto cdRGh;
       cdRGg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdRGh: // global
           (_cdRGc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdRGc::I64 == 0) goto cdRGe; else goto cdRGd;
       cdRGe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdRGd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdRGc::I64;
           R3 = (-2);
           R2 = safeExit1_rdQlU_closure+1;
           Sp = Sp - 16;
           call $wexitHelper_rdQlT_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . exitInterrupted_rdPu2_info" {
     exitInterrupted_rdPu2_info:
         const exitInterrupted_rdPu2_entry;
         const 0;
         const 4294967317;
         const SdRze_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.207395239 UTC

[section ""data" . lvl_rdQlV_closure" {
     lvl_rdQlV_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.210122084 UTC

[section ""data" . lvl1_rdQlW_closure" {
     lvl1_rdQlW_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.212793033 UTC

[section ""cstring" . msgStr_rdQlX_bytes" {
     msgStr_rdQlX_bytes:
         I8[] [101,110,99,111,117,110,116,101,114,101,100,32,97,110,32,101,120,99,101,112,116,105,111,110,32,119,104,105,108,101,32,116,114,121,105,110,103,32,116,111,32,114,101,112,111,114,116,32,97,110,32,101,120,99,101,112,116,105,111,110,46,10,79,110,101,32,112,111,115,115,105,98,108,101,32,114,101,97,115,111,110,32,102,111,114,32,116,104,105,115,32,105,115,32,116,104,97,116,32,119,101,32,102,97,105,108,101,100,32,119,104,105,108,101,32,116,114,121,105,110,103,32,116,111,32,101,110,99,111,100,101,32,97,110,32,101,114,114,111,114,32,109,101,115,115,97,103,101,46,32,67,104,101,99,107,32,116,104,97,116,32,121,111,117,114,32,108,111,99,97,108,101,32,105,115,32,99,111,110,102,105,103,117,114,101,100,32,112,114,111,112,101,114,108,121,46]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.216812116 UTC

[section ""data" . msgStr1_rdQlY_closure" {
     msgStr1_rdQlY_closure:
         const msgStr1_rdQlY_info;
         const 0;
         const 0;
         const 0;
 },
 msgStr1_rdQlY_entry() //  [R1]
         { []
         }
     {offset
       cdRGz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdRGA; else goto cdRGB;
       cdRGA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdRGB: // global
           (_cdRGw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdRGw::I64 == 0) goto cdRGy; else goto cdRGx;
       cdRGy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdRGx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdRGw::I64;
           R2 = msgStr_rdQlX_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . msgStr1_rdQlY_info" {
     msgStr1_rdQlY_info:
         const msgStr1_rdQlY_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.222465179 UTC

[section ""cstring" . str_rdQlZ_bytes" {
     str_rdQlZ_bytes:
         I8[] [37,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.226040657 UTC

[section ""data" . str1_rdQm0_closure" {
     str1_rdQm0_closure:
         const str1_rdQm0_info;
         const 0;
         const 0;
         const 0;
 },
 str1_rdQm0_entry() //  [R1]
         { []
         }
     {offset
       cdRGR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdRGS; else goto cdRGT;
       cdRGS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdRGT: // global
           (_cdRGO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdRGO::I64 == 0) goto cdRGQ; else goto cdRGP;
       cdRGQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdRGP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdRGO::I64;
           R2 = str_rdQlZ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . str1_rdQm0_info" {
     str1_rdQm0_info:
         const str1_rdQm0_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.234207624 UTC

[section ""data" . lvl2_rdQm1_closure" {
     lvl2_rdQm1_closure:
         const lvl2_rdQm1_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_rdQm1_entry() //  [R1]
         { []
         }
     {offset
       cdRHa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdRHe; else goto cdRHf;
       cdRHe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdRHf: // global
           (_cdRH5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdRH5::I64 == 0) goto cdRH7; else goto cdRH6;
       cdRH7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdRH6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdRH5::I64;
           I64[Sp - 24] = block_cdRH8_info;
           R3 = 0;
           R2 = msgStr1_rdQlY_closure;
           Sp = Sp - 24;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_rdQm1_info" {
     lvl2_rdQm1_info:
         const lvl2_rdQm1_entry;
         const 0;
         const 4294967317;
         const SdRze_srt+104;
 },
 _cdRH8() //  [R1]
         { []
         }
     {offset
       cdRH8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdRHi; else goto cdRHh;
       cdRHi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       cdRHh: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdRH8_info" {
     block_cdRH8_info:
         const _cdRH8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.243776415 UTC

[section ""data" . lvl3_rdQm2_closure" {
     lvl3_rdQm2_closure:
         const lvl3_rdQm2_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rdQm2_entry() //  [R1]
         { []
         }
     {offset
       cdRHF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdRHJ; else goto cdRHK;
       cdRHJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdRHK: // global
           (_cdRHA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdRHA::I64 == 0) goto cdRHC; else goto cdRHB;
       cdRHC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdRHB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdRHA::I64;
           I64[Sp - 24] = block_cdRHD_info;
           R3 = 0;
           R2 = str1_rdQm0_closure;
           Sp = Sp - 24;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_rdQm2_info" {
     lvl3_rdQm2_info:
         const lvl3_rdQm2_entry;
         const 0;
         const 4294967317;
         const SdRze_srt+112;
 },
 _cdRHD() //  [R1]
         { []
         }
     {offset
       cdRHD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdRHN; else goto cdRHM;
       cdRHN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       cdRHM: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdRHD_info" {
     block_cdRHD_info:
         const _cdRHD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.250427806 UTC

[section ""data" . lvl4_rdQm3_closure" {
     lvl4_rdQm3_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.25308115 UTC

[section ""data" . lvl5_rdQm4_closure" {
     lvl5_rdQm4_closure:
         const GHC.Types.I#_con_info;
         const 251;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.281197544 UTC

[section ""data" . real_handler_rdQm5_closure" {
     real_handler_rdQm5_closure:
         const real_handler_rdQm5_info;
         const 0;
 },
 sat_sdRxp_entry() //  [R1, R2]
         { []
         }
     {offset
       cdRIC: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cdRIG; else goto cdRIH;
       cdRIG: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdRIH: // global
           I64[Sp - 16] = block_cdRIz_info;
           _sdRur::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _sdRur::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udRKT; else goto cdRIA;
       udRKT: // global
           call _cdRIz(R1) args: 0, res: 0, upd: 0;
       cdRIA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdRxp_info" {
     sat_sdRxp_info:
         const sat_sdRxp_entry;
         const 1;
         const 270582939657;
         const 8589934597;
         const SdRze_srt+104;
 },
 _cdRIz() //  [R1]
         { []
         }
     {offset
       cdRIz: // global
           I64[Sp - 8] = block_cdRIF_info;
           R2 = P64[R1 + 7];
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRIz_info" {
     block_cdRIz_info:
         const _cdRIz;
         const 1;
         const 270582939678;
         const SdRze_srt+104;
 },
 _cdRIF() //  [R1]
         { []
         }
     {offset
       cdRIF: // global
           I64[Sp] = block_cdRIM_info;
           R3 = GHC.IO.Exception.$fExceptionIOException4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRIF_info" {
     block_cdRIF_info:
         const _cdRIF;
         const 2;
         const 270582939678;
         const SdRze_srt+104;
 },
 _cdRIM() //  [R1]
         { []
         }
     {offset
       cdRIM: // global
           if (R1 & 7 == 1) goto cdRIT; else goto cdRIY;
       cdRIT: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       cdRIY: // global
           I64[Sp + 8] = block_cdRIW_info;
           R1 = lvl3_rdQm2_closure;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udRKU; else goto cdRIZ;
       udRKU: // global
           call _cdRIW(R1) args: 0, res: 0, upd: 0;
       cdRIZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRIM_info" {
     block_cdRIM_info:
         const _cdRIM;
         const 2;
         const 219043332126;
         const SdRze_srt+104;
 },
 _cdRIW() //  [R1]
         { []
         }
     {offset
       cdRIW: // global
           I64[Sp] = block_cdRJ7_info;
           R2 = 1;
           R1 = I64[R1 + 7] + 1;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRIW_info" {
     block_cdRIW_info:
         const _cdRIW;
         const 1;
         const 81604378654;
         const SdRze_srt+104;
 },
 _cdRJ7() //  [R1]
         { []
         }
     {offset
       cdRJ7: // global
           P64[Sp - 24] = R1 + 16;
           P64[Sp - 16] = str1_rdQm0_closure;
           I64[Sp - 8] = 0;
           P64[Sp] = R1;
           Sp = Sp - 24;
           call _cdRKa() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdRJ7_info" {
     block_cdRJ7_info:
         const _cdRJ7;
         const 1;
         const 81604378654;
         const SdRze_srt+104;
 },
 _cdRKa() //  []
         { []
         }
     {offset
       cdRKa: // global
           I64[Sp - 8] = block_cdRKd_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udRL0; else goto cdRKf;
       udRL0: // global
           call _cdRKd(R1) args: 0, res: 0, upd: 0;
       cdRKf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdRKd() //  [R1]
         { []
         }
     {offset
       cdRKd: // global
           if (R1 & 7 == 1) goto cdRKl; else goto cdRKq;
       cdRKl: // global
           I8[I64[Sp + 8] + I64[Sp + 24]] = 0 :: W8;
           I64[Sp] = block_cdRJi_info;
           R1 = lvl2_rdQm1_closure;
           if (R1 & 7 != 0) goto udRL1; else goto cdRJk;
       udRL1: // global
           call _cdRJi(R1) args: 0, res: 0, upd: 0;
       cdRJk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdRKq: // global
           I64[Sp] = block_cdRKo_info;
           _sdRxi::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _sdRxi::P64;
           if (R1 & 7 != 0) goto udRL2; else goto cdRKr;
       udRL2: // global
           call _cdRKo(R1) args: 0, res: 0, upd: 0;
       cdRKr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRKd_info" {
     block_cdRKd_info:
         const _cdRKd;
         const 453;
         const 73014444062;
         const SdRze_srt+104;
 },
 _cdRJi() //  [R1]
         { []
         }
     {offset
       cdRJi: // global
           I64[Sp] = block_cdRJs_info;
           R2 = 1;
           R1 = I64[R1 + 7] + 1;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRJi_info" {
     block_cdRJi_info:
         const _cdRJi;
         const 453;
         const 4294967326;
         const SdRze_srt+104;
 },
 _cdRJs() //  [R1]
         { []
         }
     {offset
       cdRJs: // global
           I64[Sp - 8] = 0;
           P64[Sp] = msgStr1_rdQlY_closure;
           P64[Sp + 16] = R1 + 16;
           P64[Sp + 24] = R1;
           Sp = Sp - 8;
           call _cdRJM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdRJs_info" {
     block_cdRJs_info:
         const _cdRJs;
         const 453;
         const 4294967326;
         const SdRze_srt+104;
 },
 _cdRJM() //  []
         { []
         }
     {offset
       cdRJM: // global
           I64[Sp - 8] = block_cdRJP_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udRKX; else goto cdRJR;
       udRKX: // global
           call _cdRJP(R1) args: 0, res: 0, upd: 0;
       cdRJR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdRJP() //  [R1]
         { []
         }
     {offset
       cdRJP: // global
           if (R1 & 7 == 1) goto cdRJX; else goto cdRK2;
       cdRJX: // global
           _sdRur::P64 = P64[Sp + 56];
           _sdRwy::I64 = I64[Sp + 24];
           _sdRwM::I64 = I64[Sp + 32];
           I8[_sdRwM::I64 + I64[Sp + 8]] = 0 :: W8;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] errorBelch2(_sdRwy::I64, _sdRwM::I64);
           I64[Sp + 32] = block_cdRJG_info;
           R2 = lvl_rdQlV_closure+1;
           R1 = _sdRur::P64;
           Sp = Sp + 32;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
       cdRK2: // global
           I64[Sp] = block_cdRK0_info;
           _sdRx5::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _sdRx5::P64;
           if (R1 & 7 != 0) goto udRKY; else goto cdRK3;
       udRKY: // global
           call _cdRK0(R1) args: 0, res: 0, upd: 0;
       cdRK3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRJP_info" {
     block_cdRJP_info:
         const _cdRJP;
         const 967;
         const 30;
 },
 _cdRJG() //  [R1]
         { []
         }
     {offset
       cdRJG: // global
           _sdRwx::P64 = P64[Sp + 16];
           call MO_Touch(P64[Sp + 8]);
           call MO_Touch(_sdRwx::P64);
           R1 = R1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRJG_info" {
     block_cdRJG_info:
         const _cdRJG;
         const 259;
         const 30;
 },
 _cdRK0() //  [R1]
         { []
         }
     {offset
       cdRK0: // global
           _sdRx1::I64 = I64[Sp + 8];
           _sdRx5::P64 = P64[Sp + 16];
           I8[I64[Sp + 32] + _sdRx1::I64] = %MO_SS_Conv_W64_W8(I64[R1 + 7]);
           P64[Sp + 16] = _sdRx5::P64;
           I64[Sp + 8] = _sdRx1::I64 + 1;
           Sp = Sp + 8;
           call _cdRJM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdRK0_info" {
     block_cdRK0_info:
         const _cdRK0;
         const 839;
         const 30;
 },
 _cdRKo() //  [R1]
         { []
         }
     {offset
       cdRKo: // global
           _sdRxe::I64 = I64[Sp + 24];
           _sdRxi::P64 = P64[Sp + 16];
           I8[I64[Sp + 8] + _sdRxe::I64] = %MO_SS_Conv_W64_W8(I64[R1 + 7]);
           P64[Sp + 16] = _sdRxi::P64;
           I64[Sp + 24] = _sdRxe::I64 + 1;
           Sp = Sp + 8;
           call _cdRKa() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdRKo_info" {
     block_cdRKo_info:
         const _cdRKo;
         const 325;
         const 73014444062;
         const SdRze_srt+104;
 },
 sat_sdRuS_entry() //  [R1]
         { []
         }
     {offset
       cdRLo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdRLs; else goto cdRLt;
       cdRLs: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdRLt: // global
           I64[Sp - 24] = block_cdRLl_info;
           _sdRur::P64 = P64[R1 + 7];
           _sdRuC::P64 = P64[R1 + 15];
           R1 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           P64[Sp - 16] = _sdRur::P64;
           P64[Sp - 8] = _sdRuC::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udRLx; else goto cdRLm;
       udRLx: // global
           call _cdRLl(R1) args: 0, res: 0, upd: 0;
       cdRLm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdRuS_info" {
     sat_sdRuS_info:
         const sat_sdRuS_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SdRze_srt+152;
 },
 _cdRLl() //  [R1]
         { []
         }
     {offset
       cdRLl: // global
           _sdRuO::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_cdRLr_info;
           R2 = P64[Sp + 16];
           R1 = _sdRuO::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRLl_info" {
     block_cdRLl_info:
         const _cdRLl;
         const 2;
         const 30;
 },
 _cdRLr() //  []
         { []
         }
     {offset
       cdRLr: // global
           R2 = lvl_rdQlV_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRLr_info" {
     block_cdRLr_info:
         const _cdRLr;
         const 130;
         const 30;
 },
 sat_sdRva_entry() //  [R1]
         { []
         }
     {offset
       cdRLR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdRLV; else goto cdRLW;
       cdRLV: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdRLW: // global
           I64[Sp - 24] = block_cdRLO_info;
           _sdRur::P64 = P64[R1 + 7];
           _sdRuC::P64 = P64[R1 + 15];
           R1 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           P64[Sp - 16] = _sdRur::P64;
           P64[Sp - 8] = _sdRuC::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udRM0; else goto cdRLP;
       udRM0: // global
           call _cdRLO(R1) args: 0, res: 0, upd: 0;
       cdRLP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdRva_info" {
     sat_sdRva_info:
         const sat_sdRva_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SdRze_srt+152;
 },
 _cdRLO() //  [R1]
         { []
         }
     {offset
       cdRLO: // global
           _sdRv6::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_cdRLU_info;
           R2 = P64[Sp + 16];
           R1 = _sdRv6::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRLO_info" {
     block_cdRLO_info:
         const _cdRLO;
         const 2;
         const 30;
 },
 _cdRLU() //  []
         { []
         }
     {offset
       cdRLU: // global
           R2 = lvl_rdQlV_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRLU_info" {
     block_cdRLU_info:
         const _cdRLU;
         const 130;
         const 30;
 },
 sat_sdRvl_entry() //  [R1]
         { []
         }
     {offset
       cdRMg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdRMk; else goto cdRMl;
       cdRMk: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdRMl: // global
           I64[Sp - 24] = block_cdRMd_info;
           _sdRur::P64 = P64[R1 + 7];
           _sdRuC::P64 = P64[R1 + 15];
           R1 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           P64[Sp - 16] = _sdRur::P64;
           P64[Sp - 8] = _sdRuC::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udRMp; else goto cdRMe;
       udRMp: // global
           call _cdRMd(R1) args: 0, res: 0, upd: 0;
       cdRMe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdRvl_info" {
     sat_sdRvl_info:
         const sat_sdRvl_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SdRze_srt+152;
 },
 _cdRMd() //  [R1]
         { []
         }
     {offset
       cdRMd: // global
           _sdRvh::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_cdRMj_info;
           R2 = P64[Sp + 16];
           R1 = _sdRvh::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRMd_info" {
     block_cdRMd_info:
         const _cdRMd;
         const 2;
         const 30;
 },
 _cdRMj() //  []
         { []
         }
     {offset
       cdRMj: // global
           R2 = lvl_rdQlV_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRMj_info" {
     block_cdRMj_info:
         const _cdRMj;
         const 130;
         const 30;
 },
 sat_sdRvx_entry() //  [R1]
         { []
         }
     {offset
       cdRMF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdRMJ; else goto cdRMK;
       cdRMJ: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdRMK: // global
           I64[Sp - 24] = block_cdRMC_info;
           _sdRur::P64 = P64[R1 + 7];
           _sdRuC::P64 = P64[R1 + 15];
           R1 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           P64[Sp - 16] = _sdRur::P64;
           P64[Sp - 8] = _sdRuC::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udRMO; else goto cdRMD;
       udRMO: // global
           call _cdRMC(R1) args: 0, res: 0, upd: 0;
       cdRMD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdRvx_info" {
     sat_sdRvx_info:
         const sat_sdRvx_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SdRze_srt+152;
 },
 _cdRMC() //  [R1]
         { []
         }
     {offset
       cdRMC: // global
           _sdRvt::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_cdRMI_info;
           R2 = P64[Sp + 16];
           R1 = _sdRvt::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRMC_info" {
     block_cdRMC_info:
         const _cdRMC;
         const 2;
         const 30;
 },
 _cdRMI() //  []
         { []
         }
     {offset
       cdRMI: // global
           R2 = lvl_rdQlV_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRMI_info" {
     block_cdRMI_info:
         const _cdRMI;
         const 130;
         const 30;
 },
 sat_sdRvL_entry() //  [R1]
         { []
         }
     {offset
       cdRN6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdRNa; else goto cdRNb;
       cdRNa: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdRNb: // global
           I64[Sp - 24] = block_cdRN3_info;
           _sdRur::P64 = P64[R1 + 7];
           _sdRuC::P64 = P64[R1 + 15];
           R1 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           P64[Sp - 16] = _sdRur::P64;
           P64[Sp - 8] = _sdRuC::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udRNf; else goto cdRN4;
       udRNf: // global
           call _cdRN3(R1) args: 0, res: 0, upd: 0;
       cdRN4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdRvL_info" {
     sat_sdRvL_info:
         const sat_sdRvL_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SdRze_srt+152;
 },
 _cdRN3() //  [R1]
         { []
         }
     {offset
       cdRN3: // global
           _sdRvH::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_cdRN9_info;
           R2 = P64[Sp + 16];
           R1 = _sdRvH::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRN3_info" {
     block_cdRN3_info:
         const _cdRN3;
         const 2;
         const 30;
 },
 _cdRN9() //  []
         { []
         }
     {offset
       cdRN9: // global
           R2 = lvl_rdQlV_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRN9_info" {
     block_cdRN9_info:
         const _cdRN9;
         const 130;
         const 30;
 },
 sat_sdRvW_entry() //  [R1]
         { []
         }
     {offset
       cdRNu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdRNy; else goto cdRNz;
       cdRNy: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdRNz: // global
           I64[Sp - 24] = block_cdRNr_info;
           _sdRur::P64 = P64[R1 + 7];
           _sdRuC::P64 = P64[R1 + 15];
           R1 = GHC.Conc.Sync.uncaughtExceptionHandler_closure;
           P64[Sp - 16] = _sdRur::P64;
           P64[Sp - 8] = _sdRuC::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udRND; else goto cdRNs;
       udRND: // global
           call _cdRNr(R1) args: 0, res: 0, upd: 0;
       cdRNs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdRvW_info" {
     sat_sdRvW_info:
         const sat_sdRvW_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SdRze_srt+152;
 },
 _cdRNr() //  [R1]
         { []
         }
     {offset
       cdRNr: // global
           _sdRvS::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_cdRNx_info;
           R2 = P64[Sp + 16];
           R1 = _sdRvS::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRNr_info" {
     block_cdRNr_info:
         const _cdRNr;
         const 2;
         const 30;
 },
 _cdRNx() //  []
         { []
         }
     {offset
       cdRNx: // global
           R2 = lvl_rdQlV_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRNx_info" {
     block_cdRNx_info:
         const _cdRNx;
         const 130;
         const 30;
 },
 sat_sdRwh_entry() //  [R1]
         { []
         }
     {offset
       cdRNE: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdRNF; else goto cdRNG;
       cdRNF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdRNG: // global
           I64[Sp - 32] = block_cdRL8_info;
           R2 = P64[R1 + 32];
           P64[Sp - 24] = P64[R1 + 16];
           P64[Sp - 16] = P64[R1 + 24];
           P64[Sp - 8] = P64[R1 + 40];
           Sp = Sp - 32;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdRwh_info" {
     sat_sdRwh_info:
         const sat_sdRwh_entry;
         const 4;
         const 83567178678287;
         const SdRze_srt+40;
 },
 _cdRL8() //  [R1]
         { []
         }
     {offset
       cdRL8: // global
           I64[Sp] = block_cdRLc_info;
           R3 = GHC.IO.Exception.$fExceptionIOException4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRL8_info" {
     block_cdRL8_info:
         const _cdRL8;
         const 3;
         const 83567178678302;
         const SdRze_srt+40;
 },
 _cdRLc() //  [R1]
         { []
         }
     {offset
       cdRLc: // global
           if (R1 & 7 == 1) goto cdRNJ; else goto cdRNO;
       cdRNJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdRNM; else goto cdRNL;
       cdRNM: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdRNL: // global
           I64[Hp - 16] = sat_sdRuS_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdRNO: // global
           I64[Sp] = block_cdRLA_info;
           R1 = P64[Sp + 24];
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRLc_info" {
     block_cdRLc_info:
         const _cdRLc;
         const 3;
         const 70373039144990;
         const SdRze_srt+40;
 },
 _cdRLA() //  [R1]
         { []
         }
     {offset
       cdRLA: // global
           I64[Sp - 8] = block_cdRLE_info;
           _sdRuU::P64 = P64[R1 + 7];
           _sdRuY::P64 = P64[R1 + 39];
           R1 = P64[R1 + 15];
           P64[Sp] = _sdRuY::P64;
           P64[Sp + 24] = _sdRuU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udRPx; else goto cdRLF;
       udRPx: // global
           call _cdRLE(R1) args: 0, res: 0, upd: 0;
       cdRLF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRLA_info" {
     block_cdRLA_info:
         const _cdRLA;
         const 259;
         const 70373039144990;
         const SdRze_srt+40;
 },
 _cdRLE() //  [R1]
         { []
         }
     {offset
       cdRLE: // global
           if (I32[I64[R1 - 1] + 20] == 17 :: W32) goto cdRNW; else goto cdRNR;
       cdRNW: // global
           _sdRuY::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdRM3_info;
           R1 = _sdRuY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udRPy; else goto cdRM4;
       udRPy: // global
           call _cdRM3(R1) args: 0, res: 0, upd: 0;
       cdRM4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdRNR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdRNU; else goto cdRNT;
       cdRNU: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdRNT: // global
           I64[Hp - 16] = sat_sdRva_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 15;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRLE_info" {
     block_cdRLE_info:
         const _cdRLE;
         const 4;
         const 70373039144990;
         const SdRze_srt+40;
 },
 _cdRM3() //  [R1]
         { []
         }
     {offset
       cdRM3: // global
           if (R1 & 7 == 1) goto cdRNY; else goto cdRO3;
       cdRNY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdRO1; else goto cdRO0;
       cdRO1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdRO0: // global
           I64[Hp - 16] = sat_sdRvl_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdRO3: // global
           I64[Sp] = block_cdRMs_info;
           _sdRvm::P64 = P64[R1 + 6];
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _sdRvm::P64;
           if (R1 & 7 != 0) goto udRPz; else goto cdRMt;
       udRPz: // global
           call _cdRMs(R1) args: 0, res: 0, upd: 0;
       cdRMt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRM3_info" {
     block_cdRM3_info:
         const _cdRM3;
         const 3;
         const 70373039144990;
         const SdRze_srt+40;
 },
 _cdRMs() //  [R1]
         { []
         }
     {offset
       cdRMs: // global
           if (R1 & 7 == 1) goto cdRO5; else goto cdROa;
       cdRO5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdRO8; else goto cdRO7;
       cdRO8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdRO7: // global
           I64[Hp - 16] = sat_sdRvx_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdROa: // global
           I64[Sp] = block_cdRMR_info;
           _sdRvy::P64 = P64[R1 + 6];
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _sdRvy::P64;
           if (R1 & 7 != 0) goto udRPA; else goto cdRMS;
       udRPA: // global
           call _cdRMR(R1) args: 0, res: 0, upd: 0;
       cdRMS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRMs_info" {
     block_cdRMs_info:
         const _cdRMs;
         const 3;
         const 70373039144990;
         const SdRze_srt+40;
 },
 _cdRMR() //  [R1]
         { []
         }
     {offset
       cdRMR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdROd; else goto cdROc;
       cdROd: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdROc: // global
           if (I64[R1 + 7] == 32) goto cdROk; else goto cdROf;
       cdROk: // global
           Hp = Hp - 24;
           I64[Sp] = block_cdROg_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto udRPB; else goto cdROl;
       udRPB: // global
           call _cdROg(R1) args: 0, res: 0, upd: 0;
       cdROl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdROf: // global
           I64[Hp - 16] = sat_sdRvL_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRMR_info" {
     block_cdRMR_info:
         const _cdRMR;
         const 3;
         const 70373039144990;
         const SdRze_srt+40;
 },
 _cdROg() //  [R1]
         { []
         }
     {offset
       cdROg: // global
           if (R1 & 7 == 1) goto cdROs; else goto cdROX;
       cdROs: // global
           I64[Sp] = block_cdROp_info;
           _sdRvZ::P64 = P64[R1 + 15];
           R1 = GHC.IO.Handle.FD.stdout_closure;
           P64[Sp + 24] = _sdRvZ::P64;
           if (R1 & 7 != 0) goto udRPC; else goto cdROt;
       udRPC: // global
           call _cdROp(R1) args: 0, res: 0, upd: 0;
       cdROt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cdROX: // global
           I64[Sp] = block_cdROV_info;
           _sdRw8::P64 = P64[R1 + 14];
           R1 = GHC.IO.Handle.FD.stdout_closure;
           P64[Sp + 24] = _sdRw8::P64;
           if (R1 & 7 != 0) goto udRPD; else goto cdROY;
       udRPD: // global
           call _cdROV(R1) args: 0, res: 0, upd: 0;
       cdROY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdROg_info" {
     block_cdROg_info:
         const _cdROg;
         const 259;
         const 70373039144990;
         const SdRze_srt+40;
 },
 _cdROp() //  [R1]
         { []
         }
     {offset
       cdROp: // global
           if (R1 & 7 != 1) goto udRPF; else goto cdROO;
       cdROO: // global
           if (P64[Sp + 24] != P64[R1 + 15]) goto udRPF; else goto udRPw;
       udRPF: // global
           call _cdRNk() args: 0, res: 0, upd: 0;
       udRPw: // global
           Sp = Sp + 8;
           call _cdRPj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdROp_info" {
     block_cdROp_info:
         const _cdROp;
         const 3;
         const 4294967326;
         const SdRze_srt+152;
 },
 _cdROV() //  [R1]
         { []
         }
     {offset
       cdROV: // global
           if (R1 & 7 == 1) goto udRPI; else goto cdRPn;
       cdRPn: // global
           if (P64[Sp + 24] != P64[R1 + 14]) goto udRPI; else goto udRPv;
       udRPI: // global
           call _cdRNk() args: 0, res: 0, upd: 0;
       udRPv: // global
           Sp = Sp + 8;
           call _cdRPj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdROV_info" {
     block_cdROV_info:
         const _cdROV;
         const 3;
         const 4294967326;
         const SdRze_srt+152;
 },
 _cdRPj() //  []
         { []
         }
     {offset
       cdRPj: // global
           R2 = lvl1_rdQlW_closure+1;
           R1 = P64[Sp];
           Sp = Sp + 24;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _cdRNk() //  []
         { []
         }
     {offset
       cdRNk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdROj; else goto cdROi;
       cdROj: // global
           HpAlloc = 24;
           I64[Sp] = block_cdRNk_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdROi: // global
           I64[Hp - 16] = sat_sdRvW_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRNk_info" {
     block_cdRNk_info:
         const _cdRNk;
         const 259;
         const 4294967326;
         const SdRze_srt+152;
 },
 real_handler_rdQm5_entry() //  [R2, R3]
         { []
         }
     {offset
       cdRPQ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdRPR; else goto cdRPS;
       cdRPR: // global
           R3 = R3;
           R2 = R2;
           R1 = real_handler_rdQm5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdRPS: // global
           I64[Sp - 24] = block_cdRI8_info;
           _sdRur::P64 = R2;
           R2 = GHC.TopHandler.flushStdHandles3_closure+2;
           R1 = GHC.TopHandler.flushStdHandles4_closure+1;
           P64[Sp - 16] = _sdRur::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . real_handler_rdQm5_info" {
     real_handler_rdQm5_info:
         const real_handler_rdQm5_entry;
         const 0;
         const 2250756136632334;
         const 12884901903;
         const SdRze_srt+40;
 },
 _cdRI8() //  []
         { []
         }
     {offset
       cdRI8: // global
           I64[Sp] = block_cdRIa_info;
           R2 = GHC.TopHandler.flushStdHandles3_closure+2;
           R1 = GHC.TopHandler.flushStdHandles2_closure+1;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRI8_info" {
     block_cdRI8_info:
         const _cdRI8;
         const 2;
         const 1124821870051358;
         const SdRze_srt+40;
 },
 _cdRIa() //  []
         { []
         }
     {offset
       cdRIa: // global
           I64[Sp] = block_cdRPK_info;
           R2 = P64[Sp + 16];
           call GHC.IO.Exception.$fExceptionAsyncException_$cfromException_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRIa_info" {
     block_cdRIa_info:
         const _cdRIa;
         const 2;
         const 1124804690182174;
         const SdRze_srt+40;
 },
 _cdRPK() //  [R1]
         { []
         }
     {offset
       cdRPK: // global
           if (R1 & 7 == 1) goto udRQQ; else goto cdRPO;
       udRQQ: // global
           Sp = Sp + 8;
           call _sdRuA() args: 0, res: 0, upd: 0;
       cdRPO: // global
           I64[Sp] = block_cdRQn_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto udRQS; else goto cdRQp;
       udRQS: // global
           call _cdRQn(R1) args: 0, res: 0, upd: 0;
       cdRQp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRPK_info" {
     block_cdRPK_info:
         const _cdRPK;
         const 2;
         const 984067201826846;
         const SdRze_srt+40;
 },
 _cdRQn() //  [R1]
         { []
         }
     {offset
       cdRQn: // global
           _cdRQI::P64 = R1 & 7;
           if (_cdRQI::P64 < 3) goto udRQO; else goto udRQP;
       udRQO: // global
           _sdRur::P64 = P64[Sp + 8];
           if (_cdRQI::P64 < 2) goto cdRQv; else goto cdRQz;
       cdRQv: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] reportStackOverflow(CurrentTSO);
           R2 = lvl4_rdQm3_closure+1;
           R1 = _sdRur::P64;
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
       cdRQz: // global
           call "ccall" arg hints:  []  result hints:  [] reportHeapOverflow();
           R2 = lvl5_rdQm4_closure+1;
           R1 = _sdRur::P64;
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
       udRQP: // global
           if (_cdRQI::P64 < 4) goto udRQR; else goto cdRQH;
       udRQR: // global
           Sp = Sp + 8;
           call _sdRuA() args: 0, res: 0, upd: 0;
       cdRQH: // global
           R1 = exitInterrupted_rdPu2_closure;
           Sp = Sp + 24;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRQn_info" {
     block_cdRQn_info:
         const _cdRQn;
         const 2;
         const 984067201826846;
         const SdRze_srt+40;
 },
 _sdRuA() //  []
         { []
         }
     {offset
       sdRuA: // global
           I64[Sp - 8] = block_cdRIh_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udRQV; else goto cdRIi;
       udRQV: // global
           call _cdRIh(R1) args: 0, res: 0, upd: 0;
       cdRIi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdRIh() //  [R1]
         { []
         }
     {offset
       cdRIh: // global
           I64[Sp - 16] = block_cdRIm_info;
           _sdRuD::P64 = P64[R1 + 7];
           R2 = _sdRuD::P64;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = _sdRuD::P64;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRIh_info" {
     block_cdRIh_info:
         const _cdRIh;
         const 130;
         const 421117248405534;
         const SdRze_srt+40;
 },
 _cdRIm() //  [R1]
         { []
         }
     {offset
       cdRIm: // global
           I64[Sp] = block_cdRIq_info;
           R3 = GHC.IO.Exception.$fExceptionExitCode4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRIm_info" {
     block_cdRIm_info:
         const _cdRIm;
         const 4;
         const 421117248405534;
         const SdRze_srt+40;
 },
 _cdRIq() //  [R1]
         { []
         }
     {offset
       cdRIq: // global
           _sdRuE::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdRPZ; else goto cdRQ7;
       cdRPZ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cdRQ2; else goto cdRQ1;
       cdRQ2: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdRQ1: // global
           I64[Hp - 56] = sat_sdRxp_info;
           _sdRur::P64 = P64[Sp + 24];
           P64[Hp - 48] = _sdRur::P64;
           I64[Hp - 40] = sat_sdRwh_info;
           P64[Hp - 24] = _sdRur::P64;
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _sdRuE::P64;
           R2 = Hp - 54;
           R1 = Hp - 40;
           Sp = Sp + 40;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
       cdRQ7: // global
           I64[Sp + 16] = block_cdRQ5_info;
           R1 = _sdRuE::P64;
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRIq_info" {
     block_cdRIq_info:
         const _cdRIq;
         const 4;
         const 139642271694878;
         const SdRze_srt+40;
 },
 _cdRQ5() //  [R1]
         { []
         }
     {offset
       cdRQ5: // global
           _sdRur::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdRQd; else goto cdRQh;
       cdRQd: // global
           R2 = lvl1_rdQlW_closure+1;
           R1 = _sdRur::P64;
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
       cdRQh: // global
           R2 = P64[R1 + 6];
           R1 = _sdRur::P64;
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRQ5_info" {
     block_cdRQ5_info:
         const _cdRQ5;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.380327335 UTC

[section ""data" . GHC.TopHandler.runIO2_closure" {
     GHC.TopHandler.runIO2_closure:
         const GHC.TopHandler.runIO2_info;
         const 0;
 },
 GHC.TopHandler.runIO2_entry() //  [R2]
         { []
         }
     {offset
       cdRWc: // global
           R2 = R2;
           call GHC.TopHandler.runIO3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runIO2_info" {
     GHC.TopHandler.runIO2_info:
         const GHC.TopHandler.runIO2_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdRze_srt+192;
 },
 section ""data" . GHC.TopHandler.runIO3_closure" {
     GHC.TopHandler.runIO3_closure:
         const GHC.TopHandler.runIO3_info;
         const 0;
 },
 sat_sdRxI_entry() //  [R1]
         { []
         }
     {offset
       cdRWo: // global
           R3 = P64[R1 + 7];
           R2 = safeExit_rdPtY_closure+1;
           call real_handler_rdQm5_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdRxI_info" {
     sat_sdRxI_info:
         const sat_sdRxI_entry;
         const 1;
         const 8800387989513;
         const 4294967299;
         const SdRze_srt+96;
 },
 GHC.TopHandler.runIO3_entry() //  [R2]
         { []
         }
     {offset
       cdRWr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdRWv; else goto cdRWu;
       cdRWv: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.TopHandler.runIO3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdRWu: // global
           I64[Hp - 8] = sat_sdRxI_info;
           P64[Hp] = R2;
           R2 = GHC.TopHandler.runIO2_closure+2;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runIO3_info" {
     GHC.TopHandler.runIO3_info:
         const GHC.TopHandler.runIO3_entry;
         const 0;
         const 61576946122766;
         const 8589934597;
         const SdRze_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.388544514 UTC

[section ""data" . GHC.TopHandler.topHandler_closure" {
     GHC.TopHandler.topHandler_closure:
         const GHC.TopHandler.topHandler_info;
         const 0;
 },
 GHC.TopHandler.topHandler_entry() //  [R2]
         { []
         }
     {offset
       cdRWM: // global
           R2 = R2;
           call GHC.TopHandler.runIO3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.topHandler_info" {
     GHC.TopHandler.topHandler_info:
         const GHC.TopHandler.topHandler_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdRze_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.393479783 UTC

[section ""data" . GHC.TopHandler.runNonIO1_closure" {
     GHC.TopHandler.runNonIO1_closure:
         const GHC.TopHandler.runNonIO1_info;
         const 0;
 },
 sat_sdRxN_entry() //  [R1]
         { []
         }
     {offset
       cdRX8: // global
           R1 = P64[R1 + 7];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdRxN_info" {
     sat_sdRxN_info:
         const sat_sdRxN_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sdRxO_entry() //  [R1]
         { []
         }
     {offset
       cdRXb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdRXc; else goto cdRXd;
       cdRXc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdRXd: // global
           I64[Sp - 8] = block_cdRX1_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdRxO_info" {
     sat_sdRxO_info:
         const sat_sdRxO_entry;
         const 1;
         const 16;
 },
 _cdRX1() //  [R1]
         { []
         }
     {offset
       cdRX1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdRXg; else goto cdRXf;
       cdRXg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdRXf: // global
           I64[Hp - 8] = sat_sdRxN_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRX1_info" {
     block_cdRX1_info:
         const _cdRX1;
         const 0;
         const 30;
 },
 GHC.TopHandler.runNonIO1_entry() //  [R2]
         { []
         }
     {offset
       cdRXh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdRXl; else goto cdRXk;
       cdRXl: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.TopHandler.runNonIO1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdRXk: // global
           I64[Hp - 16] = sat_sdRxO_info;
           P64[Hp] = R2;
           R2 = GHC.TopHandler.runIO2_closure+2;
           R1 = Hp - 16;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runNonIO1_info" {
     GHC.TopHandler.runNonIO1_info:
         const GHC.TopHandler.runNonIO1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SdRze_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.402683916 UTC

[section ""data" . GHC.TopHandler.runNonIO_closure" {
     GHC.TopHandler.runNonIO_closure:
         const GHC.TopHandler.runNonIO_info;
         const 0;
 },
 GHC.TopHandler.runNonIO_entry() //  [R2]
         { []
         }
     {offset
       cdRXJ: // global
           R2 = R2;
           call GHC.TopHandler.runNonIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runNonIO_info" {
     GHC.TopHandler.runNonIO_info:
         const GHC.TopHandler.runNonIO_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdRze_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.406492432 UTC

[section ""data" . GHC.TopHandler.runIO1_closure" {
     GHC.TopHandler.runIO1_closure:
         const GHC.TopHandler.runIO1_info;
         const 0;
 },
 GHC.TopHandler.runIO1_entry() //  [R2]
         { []
         }
     {offset
       cdRXU: // global
           _sdRxP::P64 = R2;
           R2 = GHC.TopHandler.runIO2_closure+2;
           R1 = _sdRxP::P64;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runIO1_info" {
     GHC.TopHandler.runIO1_info:
         const GHC.TopHandler.runIO1_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdRze_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.41035387 UTC

[section ""data" . GHC.TopHandler.runIO_closure" {
     GHC.TopHandler.runIO_closure:
         const GHC.TopHandler.runIO_info;
         const 0;
 },
 GHC.TopHandler.runIO_entry() //  [R2]
         { []
         }
     {offset
       cdRY5: // global
           R2 = R2;
           call GHC.TopHandler.runIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runIO_info" {
     GHC.TopHandler.runIO_info:
         const GHC.TopHandler.runIO_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdRze_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.414885393 UTC

[section ""data" . fastExit1_rdQm6_closure" {
     fastExit1_rdQm6_closure:
         const GHC.Int.I32#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.41778151 UTC

[section ""data" . fastExit_rdPtZ_closure" {
     fastExit_rdPtZ_closure:
         const fastExit_rdPtZ_info;
         const 0;
 },
 fastExit_rdPtZ_entry() //  [R2]
         { []
         }
     {offset
       cdRYk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdRYl; else goto cdRYm;
       cdRYl: // global
           R2 = R2;
           R1 = fastExit_rdPtZ_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdRYm: // global
           I64[Sp - 8] = block_cdRYh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udRYq; else goto cdRYi;
       udRYq: // global
           call _cdRYh(R1) args: 0, res: 0, upd: 0;
       cdRYi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . fastExit_rdPtZ_info" {
     fastExit_rdPtZ_info:
         const fastExit_rdPtZ_entry;
         const 0;
         const 562954248388622;
         const 4294967301;
         const SdRze_srt+88;
 },
 _cdRYh() //  [R1]
         { []
         }
     {offset
       cdRYh: // global
           R3 = I64[R1 + 7];
           R2 = fastExit1_rdQm6_closure+1;
           Sp = Sp + 8;
           call $wexitHelper_rdQlT_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdRYh_info" {
     block_cdRYh_info:
         const _cdRYh;
         const 0;
         const 4294967326;
         const SdRze_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.42443364 UTC

[section ""data" . GHC.TopHandler.runIOFastExit2_closure" {
     GHC.TopHandler.runIOFastExit2_closure:
         const GHC.TopHandler.runIOFastExit2_info;
         const 0;
 },
 GHC.TopHandler.runIOFastExit2_entry() //  [R2]
         { []
         }
     {offset
       cdRYF: // global
           R2 = R2;
           call GHC.TopHandler.runIOFastExit3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runIOFastExit2_info" {
     GHC.TopHandler.runIOFastExit2_info:
         const GHC.TopHandler.runIOFastExit2_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdRze_srt+232;
 },
 section ""data" . GHC.TopHandler.runIOFastExit3_closure" {
     GHC.TopHandler.runIOFastExit3_closure:
         const GHC.TopHandler.runIOFastExit3_info;
         const 0;
 },
 sat_sdRxY_entry() //  [R1]
         { []
         }
     {offset
       cdRYR: // global
           R3 = P64[R1 + 7];
           R2 = fastExit_rdPtZ_closure+1;
           call real_handler_rdQm5_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdRxY_info" {
     sat_sdRxY_info:
         const sat_sdRxY_entry;
         const 1;
         const 141733920777;
         const 4294967299;
         const SdRze_srt+184;
 },
 GHC.TopHandler.runIOFastExit3_entry() //  [R2]
         { []
         }
     {offset
       cdRYU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdRYY; else goto cdRYX;
       cdRYY: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.TopHandler.runIOFastExit3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdRYX: // global
           I64[Hp - 8] = sat_sdRxY_info;
           P64[Hp] = R2;
           R2 = GHC.TopHandler.runIOFastExit2_closure+2;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runIOFastExit3_info" {
     GHC.TopHandler.runIOFastExit3_info:
         const GHC.TopHandler.runIOFastExit3_entry;
         const 0;
         const 966367641614;
         const 8589934597;
         const SdRze_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.432389871 UTC

[section ""data" . GHC.TopHandler.topHandlerFastExit_closure" {
     GHC.TopHandler.topHandlerFastExit_closure:
         const GHC.TopHandler.topHandlerFastExit_info;
         const 0;
 },
 GHC.TopHandler.topHandlerFastExit_entry() //  [R2]
         { []
         }
     {offset
       cdRZf: // global
           R2 = R2;
           call GHC.TopHandler.runIOFastExit3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.topHandlerFastExit_info" {
     GHC.TopHandler.topHandlerFastExit_info:
         const GHC.TopHandler.topHandlerFastExit_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdRze_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.436049206 UTC

[section ""data" . GHC.TopHandler.runIOFastExit1_closure" {
     GHC.TopHandler.runIOFastExit1_closure:
         const GHC.TopHandler.runIOFastExit1_info;
         const 0;
 },
 GHC.TopHandler.runIOFastExit1_entry() //  [R2]
         { []
         }
     {offset
       cdRZq: // global
           _sdRxZ::P64 = R2;
           R2 = GHC.TopHandler.runIOFastExit2_closure+2;
           R1 = _sdRxZ::P64;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runIOFastExit1_info" {
     GHC.TopHandler.runIOFastExit1_info:
         const GHC.TopHandler.runIOFastExit1_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdRze_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.440569611 UTC

[section ""data" . GHC.TopHandler.runIOFastExit_closure" {
     GHC.TopHandler.runIOFastExit_closure:
         const GHC.TopHandler.runIOFastExit_info;
         const 0;
 },
 GHC.TopHandler.runIOFastExit_entry() //  [R2]
         { []
         }
     {offset
       cdRZB: // global
           R2 = R2;
           call GHC.TopHandler.runIOFastExit1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runIOFastExit_info" {
     GHC.TopHandler.runIOFastExit_info:
         const GHC.TopHandler.runIOFastExit_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdRze_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.444408309 UTC

[section ""data" . GHC.TopHandler.runMainIO3_closure" {
     GHC.TopHandler.runMainIO3_closure:
         const GHC.TopHandler.runMainIO3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.TopHandler.runMainIO3_entry() //  [R1]
         { []
         }
     {offset
       cdRZO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdRZP; else goto cdRZQ;
       cdRZP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdRZQ: // global
           (_cdRZL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cdRZL::I64 == 0) goto cdRZN; else goto cdRZM;
       cdRZN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cdRZM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cdRZL::I64;
           R2 = GHC.IO.Exception.UserInterrupt_closure+4;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionAsyncException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runMainIO3_info" {
     GHC.TopHandler.runMainIO3_info:
         const GHC.TopHandler.runMainIO3_entry;
         const 0;
         const 4294967317;
         const SdRze_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.448714127 UTC

[section ""data" . GHC.TopHandler.runMainIO4_closure" {
     GHC.TopHandler.runMainIO4_closure:
         const GHC.Int.I32#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.454565736 UTC

[section ""data" . GHC.TopHandler.runMainIO1_closure" {
     GHC.TopHandler.runMainIO1_closure:
         const GHC.TopHandler.runMainIO1_info;
         const 0;
 },
 sat_sdRyy_entry() //  [R1]
         { []
         }
     {offset
       cdS0s: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdS0t; else goto cdS0u;
       cdS0t: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdS0u: // global
           I64[Sp - 8] = block_cdS0k_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_deRefWeak#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdRyy_info" {
     sat_sdRyy_info:
         const sat_sdRyy_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const SdRze_srt+264;
 },
 _cdS0k() //  [R1, R2]
         { []
         }
     {offset
       cdS0k: // global
           if (R1 == 0) goto udS0G; else goto cdS0q;
       udS0G: // global
           call _cdS0r() args: 0, res: 0, upd: 0;
       cdS0q: // global
           I64[Sp] = block_cdS0x_info;
           R1 = R2;
           if (R1 & 7 != 0) goto udS0H; else goto cdS0y;
       udS0H: // global
           call _cdS0x(R1) args: 0, res: 0, upd: 0;
       cdS0y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdS0k_info" {
     block_cdS0k_info:
         const _cdS0k;
         const 0;
         const 4294967326;
         const SdRze_srt+264;
 },
 _cdS0x() //  [R1]
         { []
         }
     {offset
       cdS0x: // global
           I64[Sp] = block_cdS0r_info;
           R2 = GHC.TopHandler.runMainIO3_closure;
           R1 = P64[R1 + 7];
           call stg_killThread#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdS0x_info" {
     block_cdS0x_info:
         const _cdS0x;
         const 0;
         const 4294967326;
         const SdRze_srt+264;
 },
 _cdS0r() //  []
         { []
         }
     {offset
       cdS0r: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdS0r_info" {
     block_cdS0r_info:
         const _cdS0r;
         const 0;
         const 30;
 },
 sat_sdRyo_entry() //  [R1, R2]
         { []
         }
     {offset
       cdS0W: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdS0X; else goto cdS0Y;
       cdS0X: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdS0Y: // global
           I64[Sp - 8] = block_cdS0O_info;
           R1 = P64[R1 + 6];
           Sp = Sp - 8;
           call stg_deRefWeak#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdRyo_info" {
     sat_sdRyo_info:
         const sat_sdRyo_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SdRze_srt+264;
 },
 _cdS0O() //  [R1, R2]
         { []
         }
     {offset
       cdS0O: // global
           if (R1 == 0) goto udS1a; else goto cdS0U;
       udS1a: // global
           call _cdS0V() args: 0, res: 0, upd: 0;
       cdS0U: // global
           I64[Sp] = block_cdS11_info;
           R1 = R2;
           if (R1 & 7 != 0) goto udS1b; else goto cdS12;
       udS1b: // global
           call _cdS11(R1) args: 0, res: 0, upd: 0;
       cdS12: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdS0O_info" {
     block_cdS0O_info:
         const _cdS0O;
         const 0;
         const 4294967326;
         const SdRze_srt+264;
 },
 _cdS11() //  [R1]
         { []
         }
     {offset
       cdS11: // global
           I64[Sp] = block_cdS0V_info;
           R2 = GHC.TopHandler.runMainIO3_closure;
           R1 = P64[R1 + 7];
           call stg_killThread#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdS11_info" {
     block_cdS11_info:
         const _cdS11;
         const 0;
         const 4294967326;
         const SdRze_srt+264;
 },
 _cdS0V() //  []
         { []
         }
     {offset
       cdS0V: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdS0V_info" {
     block_cdS0V_info:
         const _cdS0V;
         const 0;
         const 30;
 },
 sat_sdRyJ_entry() //  [R1]
         { []
         }
     {offset
       cdS1k: // global
           _sdRyJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdS1l; else goto cdS1m;
       cdS1m: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdS1o; else goto cdS1n;
       cdS1o: // global
           HpAlloc = 16;
           goto cdS1l;
       cdS1l: // global
           R1 = _sdRyJ::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdS1n: // global
           _sdRy1::P64 = P64[_sdRyJ::P64 + 7];
           I64[Hp - 8] = GHC.Conc.Sync.ThreadId_con_info;
           _sdRy6::P64 = CurrentTSO;
           P64[Hp] = _sdRy6::P64;
           I64[Sp - 16] = block_cdS0b_info;
           R2 = Hp - 7;
           R1 = _sdRy6::P64;
           P64[Sp - 8] = _sdRy1::P64;
           Sp = Sp - 16;
           call stg_mkWeakNoFinalizer#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdRyJ_info" {
     sat_sdRyJ_info:
         const sat_sdRyJ_entry;
         const 1;
         const 30064771081;
         const 4294967299;
         const SdRze_srt+264;
 },
 _cdS0b() //  [R1]
         { []
         }
     {offset
       cdS0b: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdS1r; else goto cdS1q;
       cdS1r: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdS1q: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] rts_setMainThread(R1);
           I64[Hp - 88] = sat_sdRyy_info;
           P64[Hp - 80] = R1;
           I64[Hp - 72] = Data.Dynamic.Dynamic_con_info;
           P64[Hp - 64] = GHC.TopHandler.runMainIO2_closure;
           P64[Hp - 56] = Hp - 87;
           I64[Hp - 48] = sat_sdRyo_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 46;
           P64[Hp - 16] = Hp - 71;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_cdS1e_info;
           R3 = Hp - 6;
           R2 = GHC.TopHandler.runMainIO4_closure+1;
           call GHC.Conc.Signal.setHandler1_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdS0b_info" {
     block_cdS0b_info:
         const _cdS0b;
         const 1;
         const 30064771102;
         const SdRze_srt+264;
 },
 _cdS1e() //  []
         { []
         }
     {offset
       cdS1e: // global
           _sdRy1::P64 = P64[Sp + 8];
           (_sdRyI::I64) = call "ccall" arg hints:  [‘signed’, ‘signed’,
                                                     PtrHint]  result hints:  [‘signed’] stg_sig_install(2, (-5), 0);
           R1 = _sdRy1::P64;
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdS1e_info" {
     block_cdS1e_info:
         const _cdS1e;
         const 1;
         const 30;
 },
 GHC.TopHandler.runMainIO1_entry() //  [R2]
         { []
         }
     {offset
       cdS1t: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdS1x; else goto cdS1w;
       cdS1x: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.TopHandler.runMainIO1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdS1w: // global
           I64[Hp - 8] = sat_sdRyJ_info;
           P64[Hp] = R2;
           R2 = GHC.TopHandler.runIO2_closure+2;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runMainIO1_info" {
     GHC.TopHandler.runMainIO1_info:
         const GHC.TopHandler.runMainIO1_entry;
         const 0;
         const 16496969383950;
         const 8589934597;
         const SdRze_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.475745522 UTC

[section ""data" . GHC.TopHandler.runMainIO_closure" {
     GHC.TopHandler.runMainIO_closure:
         const GHC.TopHandler.runMainIO_info;
         const 0;
 },
 GHC.TopHandler.runMainIO_entry() //  [R2]
         { []
         }
     {offset
       cdS2G: // global
           R2 = R2;
           call GHC.TopHandler.runMainIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.TopHandler.runMainIO_info" {
     GHC.TopHandler.runMainIO_info:
         const GHC.TopHandler.runMainIO_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SdRze_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:09:07.478952047 UTC

[section ""relreadonly" . SdRze_srt" {
     SdRze_srt:
         const Data.Typeable.Internal.mkTrApp_closure;
         const Data.Typeable.Internal.$wmkTrCon_closure;
         const GHC.IO.Handle.Internals.wantWritableHandle1_closure;
         const GHC.IO.Handle.FD.stderr_closure;
         const GHC.IO.Handle.hFlush2_closure;
         const GHC.IO.Handle.FD.stdout_closure;
         const GHC.TopHandler.flushStdHandles1_closure;
         const GHC.TopHandler.flushStdHandles2_closure;
         const GHC.TopHandler.flushStdHandles4_closure;
         const GHC.IO.failIO1_closure;
         const unreachable1_rdQlS_closure;
         const $wexitHelper_rdQlT_closure;
         const safeExit_rdPtY_closure;
         const msgStr1_rdQlY_closure;
         const str1_rdQm0_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const GHC.IO.Exception.$fExceptionIOException4_closure;
         const lvl2_rdQm1_closure;
         const lvl3_rdQm2_closure;
         const GHC.Conc.Sync.uncaughtExceptionHandler_closure;
         const GHC.IO.Exception.$fExceptionAsyncException_$cfromException_closure;
         const GHC.IO.Exception.$fExceptionExitCode4_closure;
         const exitInterrupted_rdPu2_closure;
         const real_handler_rdQm5_closure;
         const GHC.TopHandler.runIO3_closure;
         const GHC.TopHandler.runIO2_closure;
         const GHC.TopHandler.runNonIO1_closure;
         const GHC.TopHandler.runIO1_closure;
         const fastExit_rdPtZ_closure;
         const GHC.TopHandler.runIOFastExit3_closure;
         const GHC.TopHandler.runIOFastExit2_closure;
         const GHC.TopHandler.runIOFastExit1_closure;
         const GHC.IO.Exception.$fExceptionAsyncException_$ctoException_closure;
         const GHC.TopHandler.runMainIO3_closure;
         const GHC.Conc.Signal.setHandler1_closure;
         const GHC.TopHandler.runMainIO2_closure;
         const GHC.TopHandler.runMainIO1_closure;
 }]

