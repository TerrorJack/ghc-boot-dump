
==================== Output Cmm ====================
2018-03-16 15:59:02.316473264 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:59:02.317639059 UTC

[section ""data" . GHC.Pack.unpackCString_closure" {
     GHC.Pack.unpackCString_closure:
         const GHC.Pack.unpackCString_info;
 },
 GHC.Pack.unpackCString_entry() //  [R2]
         { info_tbl: [(c49uS,
                       label: GHC.Pack.unpackCString_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49uS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c49uT; else goto c49uU;
       c49uT: // global
           R2 = R2;
           R1 = GHC.Pack.unpackCString_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c49uU: // global
           I64[Sp - 8] = block_c49uP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u49v3; else goto c49uQ;
       u49v3: // global
           call _c49uP(R1) args: 0, res: 0, upd: 0;
       c49uQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c49uP() //  [R1]
         { info_tbl: [(c49uP,
                       label: block_c49uP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49uP: // global
           _s49uc::I64 = I64[R1 + 7];
           if (_s49uc::I64 == 0) goto c49v2; else goto c49v1;
       c49v2: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c49v1: // global
           R2 = _s49uc::I64;
           Sp = Sp + 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.319437503 UTC

[section ""data" . GHC.Pack.$wfill_in_closure" {
     GHC.Pack.$wfill_in_closure:
         const GHC.Pack.$wfill_in_info;
 },
 GHC.Pack.$wfill_in_entry() //  [R2, R3, R4]
         { info_tbl: [(c49vf,
                       label: GHC.Pack.$wfill_in_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 21} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49vf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c49vg; else goto u49vv;
       c49vg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Pack.$wfill_in_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u49vv: // global
           P64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c49v5() args: 0, res: 0, upd: 0;
     }
 },
 _c49v5() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49v5: // global
           I64[Sp - 8] = block_c49v8_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u49vx; else goto c49v9;
       u49vx: // global
           call _c49v8(R1) args: 0, res: 0, upd: 0;
       c49v9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c49v8() //  [R1]
         { info_tbl: [(c49v8,
                       label: block_c49v8_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49v8: // global
           if (R1 & 7 == 1) goto c49vc; else goto c49vd;
       c49vc: // global
           I8[P64[Sp + 8] + (I64[Sp + 16] + 16)] = 0 :: W8;
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c49vd: // global
           I64[Sp] = block_c49vn_info;
           _s49ul::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _s49ul::P64;
           if (R1 & 7 != 0) goto u49vy; else goto c49vp;
       u49vy: // global
           call _c49vn(R1) args: 0, res: 0, upd: 0;
       c49vp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c49vn() //  [R1]
         { info_tbl: [(c49vn,
                       label: block_c49vn_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49vn: // global
           _s49ue::P64 = P64[Sp + 8];
           _s49uf::I64 = I64[Sp + 16];
           _s49ul::P64 = P64[Sp + 24];
           I8[(_s49ue::P64 + 16) + _s49uf::I64] = %MO_UU_Conv_W64_W8(I64[R1 + 7]);
           P64[Sp + 8] = _s49ue::P64;
           I64[Sp + 16] = _s49uf::I64 + 1;
           P64[Sp + 24] = _s49ul::P64;
           Sp = Sp + 8;
           call _c49v5() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.321541027 UTC

[section ""data" . GHC.Pack.packCString#1_closure" {
     GHC.Pack.packCString#1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.322702688 UTC

[section ""data" . GHC.Pack.packCString#_closure" {
     GHC.Pack.packCString#_closure:
         const GHC.Pack.packCString#_info;
 },
 GHC.Pack.packCString#_entry() //  [R2]
         { info_tbl: [(c49vH,
                       label: GHC.Pack.packCString#_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49vH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c49vX; else goto c49vY;
       c49vX: // global
           R2 = R2;
           R1 = GHC.Pack.packCString#_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c49vY: // global
           I64[Sp - 16] = block_c49vF_info;
           R3 = 0;
           _s49uq::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s49uq::P64;
           Sp = Sp - 16;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c49vF() //  [R1]
         { info_tbl: [(c49vF,
                       label: block_c49vF_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49vF: // global
           I64[Sp - 8] = block_c49vN_info;
           _s49ur::I64 = R1;
           R1 = R1 + 1;
           I64[Sp] = _s49ur::I64;
           Sp = Sp - 8;
           call stg_newByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c49vN() //  [R1]
         { info_tbl: [(c49vN,
                       label: block_c49vN_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49vN: // global
           I64[Sp] = block_c49vP_info;
           R4 = P64[Sp + 16];
           R3 = 0;
           R2 = R1;
           P64[Sp + 16] = R1;
           call GHC.Pack.$wfill_in_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c49vP() //  [R1]
         { info_tbl: [(c49vP,
                       label: block_c49vP_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49vP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c49w3; else goto c49w2;
       c49w3: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c49w2: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = I64[Sp + 8];
           I64[Hp - 24] = GHC.Pack.ByteArray_con_info;
           P64[Hp - 16] = GHC.Pack.packCString#1_closure+1;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c49vW_info;
           R1 = Hp - 23;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u49wa; else goto c49w5;
       u49wa: // global
           call _c49vW(R1) args: 0, res: 0, upd: 0;
       c49w5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c49vW() //  [R1]
         { info_tbl: [(c49vW,
                       label: block_c49vW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49vW: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.324346921 UTC

[section ""cstring" . GHC.Pack.$trModule4_bytes" {
     GHC.Pack.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.324950164 UTC

[section ""data" . GHC.Pack.$trModule3_closure" {
     GHC.Pack.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.325885404 UTC

[section ""cstring" . GHC.Pack.$trModule2_bytes" {
     GHC.Pack.$trModule2_bytes:
         I8[] [71,72,67,46,80,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.326415454 UTC

[section ""data" . GHC.Pack.$trModule1_closure" {
     GHC.Pack.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.326996057 UTC

[section ""data" . GHC.Pack.$trModule_closure" {
     GHC.Pack.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Pack.$trModule3_closure+1;
         const GHC.Pack.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.327513627 UTC

[section ""data" . $krep_r49tW_closure" {
     $krep_r49tW_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.328059217 UTC

[section ""data" . $krep1_r49tX_closure" {
     $krep1_r49tX_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.328655884 UTC

[section ""data" . $krep2_r49tY_closure" {
     $krep2_r49tY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcByteArray#_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.329511284 UTC

[section ""data" . $krep3_r49tZ_closure" {
     $krep3_r49tZ_closure:
         const :_con_info;
         const $krep1_r49tX_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.33006699 UTC

[section ""data" . $krep4_r49u0_closure" {
     $krep4_r49u0_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutableByteArray#_closure;
         const $krep3_r49tZ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.330599463 UTC

[section ""cstring" . GHC.Pack.$tcByteArray2_bytes" {
     GHC.Pack.$tcByteArray2_bytes:
         I8[] [66,121,116,101,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.331147502 UTC

[section ""data" . GHC.Pack.$tcByteArray1_closure" {
     GHC.Pack.$tcByteArray1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$tcByteArray2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.331689225 UTC

[section ""data" . GHC.Pack.$tcByteArray_closure" {
     GHC.Pack.$tcByteArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Pack.$trModule_closure+1;
         const GHC.Pack.$tcByteArray1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 6611072354126638117;
         const 11678736345727892353;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.332496021 UTC

[section ""data" . $krep5_r49u1_closure" {
     $krep5_r49u1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Pack.$tcByteArray_closure+1;
         const $krep3_r49tZ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.333160215 UTC

[section ""data" . $krep6_r49u2_closure" {
     $krep6_r49u2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r49tY_closure+1;
         const $krep5_r49u1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.333832437 UTC

[section ""data" . $krep7_r49u3_closure" {
     $krep7_r49u3_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r49tX_closure+2;
         const $krep6_r49u2_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.334360949 UTC

[section ""data" . GHC.Pack.$tc'ByteArray1_closure" {
     GHC.Pack.$tc'ByteArray1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r49tX_closure+2;
         const $krep7_r49u3_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.334951082 UTC

[section ""cstring" . GHC.Pack.$tc'ByteArray3_bytes" {
     GHC.Pack.$tc'ByteArray3_bytes:
         I8[] [39,66,121,116,101,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.335473069 UTC

[section ""data" . GHC.Pack.$tc'ByteArray2_closure" {
     GHC.Pack.$tc'ByteArray2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$tc'ByteArray3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.336292563 UTC

[section ""data" . GHC.Pack.$tc'ByteArray_closure" {
     GHC.Pack.$tc'ByteArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Pack.$trModule_closure+1;
         const GHC.Pack.$tc'ByteArray2_closure+1;
         const GHC.Pack.$tc'ByteArray1_closure+4;
         const 11073751302644004223;
         const 16492867229169068973;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.336895503 UTC

[section ""cstring" . GHC.Pack.$tcMutableByteArray2_bytes" {
     GHC.Pack.$tcMutableByteArray2_bytes:
         I8[] [77,117,116,97,98,108,101,66,121,116,101,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.337514515 UTC

[section ""data" . GHC.Pack.$tcMutableByteArray1_closure" {
     GHC.Pack.$tcMutableByteArray1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$tcMutableByteArray2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.338082054 UTC

[section ""data" . GHC.Pack.$tcMutableByteArray_closure" {
     GHC.Pack.$tcMutableByteArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Pack.$trModule_closure+1;
         const GHC.Pack.$tcMutableByteArray1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 10421317957223969791;
         const 16976841683708620350;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.338701555 UTC

[section ""data" . $krep8_r49u4_closure" {
     $krep8_r49u4_closure:
         const :_con_info;
         const $krep_r49tW_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.33922841 UTC

[section ""data" . $krep9_r49u5_closure" {
     $krep9_r49u5_closure:
         const :_con_info;
         const $krep1_r49tX_closure+2;
         const $krep8_r49u4_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.340041814 UTC

[section ""data" . $krep10_r49u6_closure" {
     $krep10_r49u6_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Pack.$tcMutableByteArray_closure+1;
         const $krep9_r49u5_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.340651813 UTC

[section ""data" . $krep11_r49u7_closure" {
     $krep11_r49u7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r49u0_closure+1;
         const $krep10_r49u6_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.341225673 UTC

[section ""data" . $krep12_r49u8_closure" {
     $krep12_r49u8_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r49tW_closure+2;
         const $krep11_r49u7_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.341976359 UTC

[section ""data" . GHC.Pack.$tc'MutableByteArray1_closure" {
     GHC.Pack.$tc'MutableByteArray1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r49tW_closure+2;
         const $krep12_r49u8_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.34257593 UTC

[section ""cstring" . GHC.Pack.$tc'MutableByteArray3_bytes" {
     GHC.Pack.$tc'MutableByteArray3_bytes:
         I8[] [39,77,117,116,97,98,108,101,66,121,116,101,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.343426362 UTC

[section ""data" . GHC.Pack.$tc'MutableByteArray2_closure" {
     GHC.Pack.$tc'MutableByteArray2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$tc'MutableByteArray3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.343991195 UTC

[section ""data" . GHC.Pack.$tc'MutableByteArray_closure" {
     GHC.Pack.$tc'MutableByteArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Pack.$trModule_closure+1;
         const GHC.Pack.$tc'MutableByteArray2_closure+1;
         const GHC.Pack.$tc'MutableByteArray1_closure+4;
         const 4727910943669758619;
         const 1938961805888617932;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.345020276 UTC

[section ""data" . GHC.Pack.MutableByteArray_closure" {
     GHC.Pack.MutableByteArray_closure:
         const GHC.Pack.MutableByteArray_info;
 },
 GHC.Pack.MutableByteArray_entry() //  [R2, R3, R4]
         { info_tbl: [(c49wg,
                       label: GHC.Pack.MutableByteArray_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49wg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c49wk; else goto c49wj;
       c49wk: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Pack.MutableByteArray_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c49wj: // global
           I64[Hp - 24] = GHC.Pack.MutableByteArray_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.346256623 UTC

[section ""data" . GHC.Pack.ByteArray_closure" {
     GHC.Pack.ByteArray_closure:
         const GHC.Pack.ByteArray_info;
 },
 GHC.Pack.ByteArray_entry() //  [R2, R3, R4]
         { info_tbl: [(c49wq,
                       label: GHC.Pack.ByteArray_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49wq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c49wu; else goto c49wt;
       c49wu: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Pack.ByteArray_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c49wt: // global
           I64[Hp - 24] = GHC.Pack.ByteArray_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.347485011 UTC

[GHC.Pack.MutableByteArray_con_entry() //  [R1]
         { info_tbl: [(c49wv,
                       label: GHC.Pack.MutableByteArray_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,80,97,99,107,46,77,117,116,97,98,108,101,66,121,116,101,65,114,114,97,121]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49wv: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.348253978 UTC

[GHC.Pack.ByteArray_con_entry() //  [R1]
         { info_tbl: [(c49ww,
                       label: GHC.Pack.ByteArray_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,80,97,99,107,46,66,121,116,101,65,114,114,97,121]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49ww: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.348916064 UTC

[section ""relreadonly" . S49wx_srt" { S49wx_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.349477081 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:59:02.35036038 UTC

[section ""data" . GHC.Pack.unpackCString_closure" {
     GHC.Pack.unpackCString_closure:
         const GHC.Pack.unpackCString_info;
 },
 GHC.Pack.unpackCString_entry() //  [R2]
         { info_tbl: [(c49wF,
                       label: GHC.Pack.unpackCString_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49wF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c49wG; else goto c49wH;
       c49wG: // global
           R2 = R2;
           R1 = GHC.Pack.unpackCString_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c49wH: // global
           I64[Sp - 8] = block_c49wC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u49wQ; else goto c49wD;
       u49wQ: // global
           call _c49wC(R1) args: 0, res: 0, upd: 0;
       c49wD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c49wC() //  [R1]
         { info_tbl: [(c49wC,
                       label: block_c49wC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49wC: // global
           _s49uc::I64 = I64[R1 + 7];
           if (_s49uc::I64 == 0) goto c49wP; else goto c49wO;
       c49wP: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c49wO: // global
           R2 = _s49uc::I64;
           Sp = Sp + 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.352226625 UTC

[section ""data" . GHC.Pack.$wfill_in_closure" {
     GHC.Pack.$wfill_in_closure:
         const GHC.Pack.$wfill_in_info;
 },
 GHC.Pack.$wfill_in_entry() //  [R2, R3, R4]
         { info_tbl: [(c49x2,
                       label: GHC.Pack.$wfill_in_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 21} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49x2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c49x3; else goto u49xi;
       c49x3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Pack.$wfill_in_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u49xi: // global
           P64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c49wS() args: 0, res: 0, upd: 0;
     }
 },
 _c49wS() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49wS: // global
           I64[Sp - 8] = block_c49wV_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u49xk; else goto c49wW;
       u49xk: // global
           call _c49wV(R1) args: 0, res: 0, upd: 0;
       c49wW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c49wV() //  [R1]
         { info_tbl: [(c49wV,
                       label: block_c49wV_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49wV: // global
           if (R1 & 7 == 1) goto c49wZ; else goto c49x0;
       c49wZ: // global
           I8[P64[Sp + 8] + (I64[Sp + 16] + 16)] = 0 :: W8;
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c49x0: // global
           I64[Sp] = block_c49xa_info;
           _s49ul::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _s49ul::P64;
           if (R1 & 7 != 0) goto u49xl; else goto c49xc;
       u49xl: // global
           call _c49xa(R1) args: 0, res: 0, upd: 0;
       c49xc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c49xa() //  [R1]
         { info_tbl: [(c49xa,
                       label: block_c49xa_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49xa: // global
           _s49ue::P64 = P64[Sp + 8];
           _s49uf::I64 = I64[Sp + 16];
           _s49ul::P64 = P64[Sp + 24];
           I8[(_s49ue::P64 + 16) + _s49uf::I64] = %MO_UU_Conv_W64_W8(I64[R1 + 7]);
           P64[Sp + 8] = _s49ue::P64;
           I64[Sp + 16] = _s49uf::I64 + 1;
           P64[Sp + 24] = _s49ul::P64;
           Sp = Sp + 8;
           call _c49wS() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.354284582 UTC

[section ""data" . GHC.Pack.packCString#1_closure" {
     GHC.Pack.packCString#1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.355423232 UTC

[section ""data" . GHC.Pack.packCString#_closure" {
     GHC.Pack.packCString#_closure:
         const GHC.Pack.packCString#_info;
 },
 GHC.Pack.packCString#_entry() //  [R2]
         { info_tbl: [(c49xu,
                       label: GHC.Pack.packCString#_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49xu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c49xK; else goto c49xL;
       c49xK: // global
           R2 = R2;
           R1 = GHC.Pack.packCString#_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c49xL: // global
           I64[Sp - 16] = block_c49xs_info;
           R3 = 0;
           _s49uq::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s49uq::P64;
           Sp = Sp - 16;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c49xs() //  [R1]
         { info_tbl: [(c49xs,
                       label: block_c49xs_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49xs: // global
           I64[Sp - 8] = block_c49xA_info;
           _s49ur::I64 = R1;
           R1 = R1 + 1;
           I64[Sp] = _s49ur::I64;
           Sp = Sp - 8;
           call stg_newByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c49xA() //  [R1]
         { info_tbl: [(c49xA,
                       label: block_c49xA_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49xA: // global
           I64[Sp] = block_c49xC_info;
           R4 = P64[Sp + 16];
           R3 = 0;
           R2 = R1;
           P64[Sp + 16] = R1;
           call GHC.Pack.$wfill_in_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c49xC() //  [R1]
         { info_tbl: [(c49xC,
                       label: block_c49xC_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49xC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c49xQ; else goto c49xP;
       c49xQ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c49xP: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = I64[Sp + 8];
           I64[Hp - 24] = GHC.Pack.ByteArray_con_info;
           P64[Hp - 16] = GHC.Pack.packCString#1_closure+1;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c49xJ_info;
           R1 = Hp - 23;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u49xX; else goto c49xS;
       u49xX: // global
           call _c49xJ(R1) args: 0, res: 0, upd: 0;
       c49xS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c49xJ() //  [R1]
         { info_tbl: [(c49xJ,
                       label: block_c49xJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49xJ: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.35745132 UTC

[section ""cstring" . GHC.Pack.$trModule4_bytes" {
     GHC.Pack.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.358045225 UTC

[section ""data" . GHC.Pack.$trModule3_closure" {
     GHC.Pack.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.358603896 UTC

[section ""cstring" . GHC.Pack.$trModule2_bytes" {
     GHC.Pack.$trModule2_bytes:
         I8[] [71,72,67,46,80,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.359157228 UTC

[section ""data" . GHC.Pack.$trModule1_closure" {
     GHC.Pack.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.359758961 UTC

[section ""data" . GHC.Pack.$trModule_closure" {
     GHC.Pack.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Pack.$trModule3_closure+1;
         const GHC.Pack.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.360659096 UTC

[section ""data" . $krep_r49tW_closure" {
     $krep_r49tW_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.361191575 UTC

[section ""data" . $krep1_r49tX_closure" {
     $krep1_r49tX_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.361781882 UTC

[section ""data" . $krep2_r49tY_closure" {
     $krep2_r49tY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcByteArray#_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.362367076 UTC

[section ""data" . $krep3_r49tZ_closure" {
     $krep3_r49tZ_closure:
         const :_con_info;
         const $krep1_r49tX_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.362935496 UTC

[section ""data" . $krep4_r49u0_closure" {
     $krep4_r49u0_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutableByteArray#_closure;
         const $krep3_r49tZ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.363446115 UTC

[section ""cstring" . GHC.Pack.$tcByteArray2_bytes" {
     GHC.Pack.$tcByteArray2_bytes:
         I8[] [66,121,116,101,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.364221812 UTC

[section ""data" . GHC.Pack.$tcByteArray1_closure" {
     GHC.Pack.$tcByteArray1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$tcByteArray2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.364782221 UTC

[section ""data" . GHC.Pack.$tcByteArray_closure" {
     GHC.Pack.$tcByteArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Pack.$trModule_closure+1;
         const GHC.Pack.$tcByteArray1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 6611072354126638117;
         const 11678736345727892353;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.365427009 UTC

[section ""data" . $krep5_r49u1_closure" {
     $krep5_r49u1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Pack.$tcByteArray_closure+1;
         const $krep3_r49tZ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.366015813 UTC

[section ""data" . $krep6_r49u2_closure" {
     $krep6_r49u2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r49tY_closure+1;
         const $krep5_r49u1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.366626412 UTC

[section ""data" . $krep7_r49u3_closure" {
     $krep7_r49u3_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r49tX_closure+2;
         const $krep6_r49u2_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.36740264 UTC

[section ""data" . GHC.Pack.$tc'ByteArray1_closure" {
     GHC.Pack.$tc'ByteArray1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r49tX_closure+2;
         const $krep7_r49u3_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.367955912 UTC

[section ""cstring" . GHC.Pack.$tc'ByteArray3_bytes" {
     GHC.Pack.$tc'ByteArray3_bytes:
         I8[] [39,66,121,116,101,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.368527035 UTC

[section ""data" . GHC.Pack.$tc'ByteArray2_closure" {
     GHC.Pack.$tc'ByteArray2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$tc'ByteArray3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.369061263 UTC

[section ""data" . GHC.Pack.$tc'ByteArray_closure" {
     GHC.Pack.$tc'ByteArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Pack.$trModule_closure+1;
         const GHC.Pack.$tc'ByteArray2_closure+1;
         const GHC.Pack.$tc'ByteArray1_closure+4;
         const 11073751302644004223;
         const 16492867229169068973;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.369688765 UTC

[section ""cstring" . GHC.Pack.$tcMutableByteArray2_bytes" {
     GHC.Pack.$tcMutableByteArray2_bytes:
         I8[] [77,117,116,97,98,108,101,66,121,116,101,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.370469257 UTC

[section ""data" . GHC.Pack.$tcMutableByteArray1_closure" {
     GHC.Pack.$tcMutableByteArray1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$tcMutableByteArray2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.371020497 UTC

[section ""data" . GHC.Pack.$tcMutableByteArray_closure" {
     GHC.Pack.$tcMutableByteArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Pack.$trModule_closure+1;
         const GHC.Pack.$tcMutableByteArray1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 10421317957223969791;
         const 16976841683708620350;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.371628436 UTC

[section ""data" . $krep8_r49u4_closure" {
     $krep8_r49u4_closure:
         const :_con_info;
         const $krep_r49tW_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.372188634 UTC

[section ""data" . $krep9_r49u5_closure" {
     $krep9_r49u5_closure:
         const :_con_info;
         const $krep1_r49tX_closure+2;
         const $krep8_r49u4_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.372749984 UTC

[section ""data" . $krep10_r49u6_closure" {
     $krep10_r49u6_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Pack.$tcMutableByteArray_closure+1;
         const $krep9_r49u5_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.373602064 UTC

[section ""data" . $krep11_r49u7_closure" {
     $krep11_r49u7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r49u0_closure+1;
         const $krep10_r49u6_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.374408952 UTC

[section ""data" . $krep12_r49u8_closure" {
     $krep12_r49u8_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r49tW_closure+2;
         const $krep11_r49u7_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.374960671 UTC

[section ""data" . GHC.Pack.$tc'MutableByteArray1_closure" {
     GHC.Pack.$tc'MutableByteArray1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r49tW_closure+2;
         const $krep12_r49u8_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.375505601 UTC

[section ""cstring" . GHC.Pack.$tc'MutableByteArray3_bytes" {
     GHC.Pack.$tc'MutableByteArray3_bytes:
         I8[] [39,77,117,116,97,98,108,101,66,121,116,101,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.376111367 UTC

[section ""data" . GHC.Pack.$tc'MutableByteArray2_closure" {
     GHC.Pack.$tc'MutableByteArray2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$tc'MutableByteArray3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.376708316 UTC

[section ""data" . GHC.Pack.$tc'MutableByteArray_closure" {
     GHC.Pack.$tc'MutableByteArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Pack.$trModule_closure+1;
         const GHC.Pack.$tc'MutableByteArray2_closure+1;
         const GHC.Pack.$tc'MutableByteArray1_closure+4;
         const 4727910943669758619;
         const 1938961805888617932;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.37778433 UTC

[section ""data" . GHC.Pack.MutableByteArray_closure" {
     GHC.Pack.MutableByteArray_closure:
         const GHC.Pack.MutableByteArray_info;
 },
 GHC.Pack.MutableByteArray_entry() //  [R2, R3, R4]
         { info_tbl: [(c49y3,
                       label: GHC.Pack.MutableByteArray_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49y3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c49y7; else goto c49y6;
       c49y7: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Pack.MutableByteArray_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c49y6: // global
           I64[Hp - 24] = GHC.Pack.MutableByteArray_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.379285999 UTC

[section ""data" . GHC.Pack.ByteArray_closure" {
     GHC.Pack.ByteArray_closure:
         const GHC.Pack.ByteArray_info;
 },
 GHC.Pack.ByteArray_entry() //  [R2, R3, R4]
         { info_tbl: [(c49yd,
                       label: GHC.Pack.ByteArray_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49yd: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c49yh; else goto c49yg;
       c49yh: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Pack.ByteArray_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c49yg: // global
           I64[Hp - 24] = GHC.Pack.ByteArray_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.38024126 UTC

[GHC.Pack.MutableByteArray_con_entry() //  [R1]
         { info_tbl: [(c49yi,
                       label: GHC.Pack.MutableByteArray_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,80,97,99,107,46,77,117,116,97,98,108,101,66,121,116,101,65,114,114,97,121]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49yi: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.381020162 UTC

[GHC.Pack.ByteArray_con_entry() //  [R1]
         { info_tbl: [(c49yk,
                       label: GHC.Pack.ByteArray_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,80,97,99,107,46,66,121,116,101,65,114,114,97,121]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49yk: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.38177257 UTC

[section ""relreadonly" . S49wx_srt" { S49wx_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.382951786 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:59:02.384534357 UTC

[section ""data" . GHC.Pack.unpackCString_closure" {
     GHC.Pack.unpackCString_closure:
         const GHC.Pack.unpackCString_info;
 },
 GHC.Pack.unpackCString_entry() //  [R2]
         { info_tbl: [(c49yt,
                       label: GHC.Pack.unpackCString_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49yt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c49yu; else goto c49yv;
       c49yu: // global
           R2 = R2;
           R1 = GHC.Pack.unpackCString_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c49yv: // global
           I64[Sp - 8] = block_c49yq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u49yE; else goto c49yr;
       u49yE: // global
           call _c49yq(R1) args: 0, res: 0, upd: 0;
       c49yr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c49yq() //  [R1]
         { info_tbl: [(c49yq,
                       label: block_c49yq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49yq: // global
           _s49uc::I64 = I64[R1 + 7];
           if (_s49uc::I64 == 0) goto c49yD; else goto c49yC;
       c49yD: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c49yC: // global
           R2 = _s49uc::I64;
           Sp = Sp + 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.392057477 UTC

[section ""data" . GHC.Pack.$wfill_in_closure" {
     GHC.Pack.$wfill_in_closure:
         const GHC.Pack.$wfill_in_info;
 },
 GHC.Pack.$wfill_in_entry() //  [R2, R3, R4]
         { info_tbl: [(c49z0,
                       label: GHC.Pack.$wfill_in_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 21} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49z0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c49z1; else goto u49zg;
       c49z1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Pack.$wfill_in_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u49zg: // global
           P64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c49yQ() args: 0, res: 0, upd: 0;
     }
 },
 _c49yQ() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49yQ: // global
           I64[Sp - 8] = block_c49yT_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u49zi; else goto c49yU;
       u49zi: // global
           call _c49yT(R1) args: 0, res: 0, upd: 0;
       c49yU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c49yT() //  [R1]
         { info_tbl: [(c49yT,
                       label: block_c49yT_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49yT: // global
           if (R1 & 7 == 1) goto c49yX; else goto c49yY;
       c49yX: // global
           I8[P64[Sp + 8] + (I64[Sp + 16] + 16)] = 0 :: W8;
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c49yY: // global
           I64[Sp] = block_c49z8_info;
           _s49ul::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _s49ul::P64;
           if (R1 & 7 != 0) goto u49zj; else goto c49za;
       u49zj: // global
           call _c49z8(R1) args: 0, res: 0, upd: 0;
       c49za: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c49z8() //  [R1]
         { info_tbl: [(c49z8,
                       label: block_c49z8_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49z8: // global
           _s49ue::P64 = P64[Sp + 8];
           _s49uf::I64 = I64[Sp + 16];
           _s49ul::P64 = P64[Sp + 24];
           I8[(_s49ue::P64 + 16) + _s49uf::I64] = %MO_UU_Conv_W64_W8(I64[R1 + 7]);
           P64[Sp + 8] = _s49ue::P64;
           I64[Sp + 16] = _s49uf::I64 + 1;
           P64[Sp + 24] = _s49ul::P64;
           Sp = Sp + 8;
           call _c49yQ() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.400666808 UTC

[section ""data" . GHC.Pack.packCString#1_closure" {
     GHC.Pack.packCString#1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.403202697 UTC

[section ""data" . GHC.Pack.packCString#_closure" {
     GHC.Pack.packCString#_closure:
         const GHC.Pack.packCString#_info;
 },
 GHC.Pack.packCString#_entry() //  [R2]
         { info_tbl: [(c49zR,
                       label: GHC.Pack.packCString#_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49zR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c49A7; else goto c49A8;
       c49A7: // global
           R2 = R2;
           R1 = GHC.Pack.packCString#_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c49A8: // global
           I64[Sp - 16] = block_c49zP_info;
           R3 = 0;
           _s49uq::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s49uq::P64;
           Sp = Sp - 16;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c49zP() //  [R1]
         { info_tbl: [(c49zP,
                       label: block_c49zP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49zP: // global
           I64[Sp - 8] = block_c49zX_info;
           _s49ur::I64 = R1;
           R1 = R1 + 1;
           I64[Sp] = _s49ur::I64;
           Sp = Sp - 8;
           call stg_newByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c49zX() //  [R1]
         { info_tbl: [(c49zX,
                       label: block_c49zX_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49zX: // global
           I64[Sp] = block_c49zZ_info;
           R4 = P64[Sp + 16];
           R3 = 0;
           R2 = R1;
           P64[Sp + 16] = R1;
           call GHC.Pack.$wfill_in_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c49zZ() //  [R1]
         { info_tbl: [(c49zZ,
                       label: block_c49zZ_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49zZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c49Ad; else goto c49Ac;
       c49Ad: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c49Ac: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = I64[Sp + 8];
           I64[Hp - 24] = GHC.Pack.ByteArray_con_info;
           P64[Hp - 16] = GHC.Pack.packCString#1_closure+1;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c49A6_info;
           R1 = Hp - 23;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u49Ak; else goto c49Af;
       u49Ak: // global
           call _c49A6(R1) args: 0, res: 0, upd: 0;
       c49Af: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c49A6() //  [R1]
         { info_tbl: [(c49A6,
                       label: block_c49A6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49A6: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.41348947 UTC

[section ""cstring" . GHC.Pack.$trModule4_bytes" {
     GHC.Pack.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.415056746 UTC

[section ""data" . GHC.Pack.$trModule3_closure" {
     GHC.Pack.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.416777492 UTC

[section ""cstring" . GHC.Pack.$trModule2_bytes" {
     GHC.Pack.$trModule2_bytes:
         I8[] [71,72,67,46,80,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.418397614 UTC

[section ""data" . GHC.Pack.$trModule1_closure" {
     GHC.Pack.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.420155946 UTC

[section ""data" . GHC.Pack.$trModule_closure" {
     GHC.Pack.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Pack.$trModule3_closure+1;
         const GHC.Pack.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.422152046 UTC

[section ""data" . $krep_r49tW_closure" {
     $krep_r49tW_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.424278018 UTC

[section ""data" . $krep1_r49tX_closure" {
     $krep1_r49tX_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.426115834 UTC

[section ""data" . $krep2_r49tY_closure" {
     $krep2_r49tY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcByteArray#_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.428139074 UTC

[section ""data" . $krep3_r49tZ_closure" {
     $krep3_r49tZ_closure:
         const :_con_info;
         const $krep1_r49tX_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.429994066 UTC

[section ""data" . $krep4_r49u0_closure" {
     $krep4_r49u0_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutableByteArray#_closure;
         const $krep3_r49tZ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.431922472 UTC

[section ""cstring" . GHC.Pack.$tcByteArray2_bytes" {
     GHC.Pack.$tcByteArray2_bytes:
         I8[] [66,121,116,101,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.433610092 UTC

[section ""data" . GHC.Pack.$tcByteArray1_closure" {
     GHC.Pack.$tcByteArray1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$tcByteArray2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.435193602 UTC

[section ""data" . GHC.Pack.$tcByteArray_closure" {
     GHC.Pack.$tcByteArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Pack.$trModule_closure+1;
         const GHC.Pack.$tcByteArray1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 6611072354126638117;
         const 11678736345727892353;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.437140227 UTC

[section ""data" . $krep5_r49u1_closure" {
     $krep5_r49u1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Pack.$tcByteArray_closure+1;
         const $krep3_r49tZ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.43882312 UTC

[section ""data" . $krep6_r49u2_closure" {
     $krep6_r49u2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r49tY_closure+1;
         const $krep5_r49u1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.440546399 UTC

[section ""data" . $krep7_r49u3_closure" {
     $krep7_r49u3_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r49tX_closure+2;
         const $krep6_r49u2_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.442177484 UTC

[section ""data" . GHC.Pack.$tc'ByteArray1_closure" {
     GHC.Pack.$tc'ByteArray1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r49tX_closure+2;
         const $krep7_r49u3_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.443918474 UTC

[section ""cstring" . GHC.Pack.$tc'ByteArray3_bytes" {
     GHC.Pack.$tc'ByteArray3_bytes:
         I8[] [39,66,121,116,101,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.445432669 UTC

[section ""data" . GHC.Pack.$tc'ByteArray2_closure" {
     GHC.Pack.$tc'ByteArray2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$tc'ByteArray3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.447182388 UTC

[section ""data" . GHC.Pack.$tc'ByteArray_closure" {
     GHC.Pack.$tc'ByteArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Pack.$trModule_closure+1;
         const GHC.Pack.$tc'ByteArray2_closure+1;
         const GHC.Pack.$tc'ByteArray1_closure+4;
         const 11073751302644004223;
         const 16492867229169068973;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.449032024 UTC

[section ""cstring" . GHC.Pack.$tcMutableByteArray2_bytes" {
     GHC.Pack.$tcMutableByteArray2_bytes:
         I8[] [77,117,116,97,98,108,101,66,121,116,101,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.450756782 UTC

[section ""data" . GHC.Pack.$tcMutableByteArray1_closure" {
     GHC.Pack.$tcMutableByteArray1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$tcMutableByteArray2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.452489723 UTC

[section ""data" . GHC.Pack.$tcMutableByteArray_closure" {
     GHC.Pack.$tcMutableByteArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Pack.$trModule_closure+1;
         const GHC.Pack.$tcMutableByteArray1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 10421317957223969791;
         const 16976841683708620350;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.454296169 UTC

[section ""data" . $krep8_r49u4_closure" {
     $krep8_r49u4_closure:
         const :_con_info;
         const $krep_r49tW_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.455969119 UTC

[section ""data" . $krep9_r49u5_closure" {
     $krep9_r49u5_closure:
         const :_con_info;
         const $krep1_r49tX_closure+2;
         const $krep8_r49u4_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.457632435 UTC

[section ""data" . $krep10_r49u6_closure" {
     $krep10_r49u6_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Pack.$tcMutableByteArray_closure+1;
         const $krep9_r49u5_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.459298415 UTC

[section ""data" . $krep11_r49u7_closure" {
     $krep11_r49u7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r49u0_closure+1;
         const $krep10_r49u6_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.460875911 UTC

[section ""data" . $krep12_r49u8_closure" {
     $krep12_r49u8_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r49tW_closure+2;
         const $krep11_r49u7_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.462972966 UTC

[section ""data" . GHC.Pack.$tc'MutableByteArray1_closure" {
     GHC.Pack.$tc'MutableByteArray1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r49tW_closure+2;
         const $krep12_r49u8_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.464768141 UTC

[section ""cstring" . GHC.Pack.$tc'MutableByteArray3_bytes" {
     GHC.Pack.$tc'MutableByteArray3_bytes:
         I8[] [39,77,117,116,97,98,108,101,66,121,116,101,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.466354869 UTC

[section ""data" . GHC.Pack.$tc'MutableByteArray2_closure" {
     GHC.Pack.$tc'MutableByteArray2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$tc'MutableByteArray3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.4681354 UTC

[section ""data" . GHC.Pack.$tc'MutableByteArray_closure" {
     GHC.Pack.$tc'MutableByteArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Pack.$trModule_closure+1;
         const GHC.Pack.$tc'MutableByteArray2_closure+1;
         const GHC.Pack.$tc'MutableByteArray1_closure+4;
         const 4727910943669758619;
         const 1938961805888617932;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.470150732 UTC

[section ""data" . GHC.Pack.MutableByteArray_closure" {
     GHC.Pack.MutableByteArray_closure:
         const GHC.Pack.MutableByteArray_info;
 },
 GHC.Pack.MutableByteArray_entry() //  [R2, R3, R4]
         { info_tbl: [(c49Bi,
                       label: GHC.Pack.MutableByteArray_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49Bi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c49Bm; else goto c49Bl;
       c49Bm: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Pack.MutableByteArray_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c49Bl: // global
           I64[Hp - 24] = GHC.Pack.MutableByteArray_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.474173872 UTC

[section ""data" . GHC.Pack.ByteArray_closure" {
     GHC.Pack.ByteArray_closure:
         const GHC.Pack.ByteArray_info;
 },
 GHC.Pack.ByteArray_entry() //  [R2, R3, R4]
         { info_tbl: [(c49Bx,
                       label: GHC.Pack.ByteArray_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49Bx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c49BB; else goto c49BA;
       c49BB: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Pack.ByteArray_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c49BA: // global
           I64[Hp - 24] = GHC.Pack.ByteArray_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.47787656 UTC

[GHC.Pack.MutableByteArray_con_entry() //  [R1]
         { info_tbl: [(c49BH,
                       label: GHC.Pack.MutableByteArray_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,80,97,99,107,46,77,117,116,97,98,108,101,66,121,116,101,65,114,114,97,121]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49BH: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.48097272 UTC

[GHC.Pack.ByteArray_con_entry() //  [R1]
         { info_tbl: [(c49BN,
                       label: GHC.Pack.ByteArray_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,80,97,99,107,46,66,121,116,101,65,114,114,97,121]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49BN: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.484022108 UTC

[section ""relreadonly" . S49wx_srt" { S49wx_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.722175745 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:59:02.723733013 UTC

[section ""data" . GHC.Pack.unpackCString_closure" {
     GHC.Pack.unpackCString_closure:
         const GHC.Pack.unpackCString_info;
 },
 GHC.Pack.unpackCString_entry() //  [R2]
         { info_tbl: [(c49CC,
                       label: GHC.Pack.unpackCString_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49CC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c49CD; else goto c49CE;
       c49CD: // global
           R2 = R2;
           R1 = GHC.Pack.unpackCString_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c49CE: // global
           I64[Sp - 8] = block_c49Cz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u49CN; else goto c49CA;
       u49CN: // global
           call _c49Cz(R1) args: 0, res: 0, upd: 0;
       c49CA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c49Cz() //  [R1]
         { info_tbl: [(c49Cz,
                       label: block_c49Cz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49Cz: // global
           _s49BW::I64 = I64[R1 + 7];
           if (_s49BW::I64 == 0) goto c49CM; else goto c49CL;
       c49CM: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c49CL: // global
           R2 = _s49BW::I64;
           Sp = Sp + 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.730837953 UTC

[section ""data" . GHC.Pack.$wfill_in_closure" {
     GHC.Pack.$wfill_in_closure:
         const GHC.Pack.$wfill_in_info;
 },
 GHC.Pack.$wfill_in_entry() //  [R2, R3, R4]
         { info_tbl: [(c49Db,
                       label: GHC.Pack.$wfill_in_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 21} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49Db: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c49Dc; else goto u49Dr;
       c49Dc: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Pack.$wfill_in_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       u49Dr: // global
           P64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _c49D1() args: 0, res: 0, upd: 0;
     }
 },
 _c49D1() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49D1: // global
           I64[Sp - 8] = block_c49D4_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u49Dt; else goto c49D5;
       u49Dt: // global
           call _c49D4(R1) args: 0, res: 0, upd: 0;
       c49D5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c49D4() //  [R1]
         { info_tbl: [(c49D4,
                       label: block_c49D4_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49D4: // global
           if (R1 & 7 == 1) goto c49D8; else goto c49D9;
       c49D8: // global
           I8[P64[Sp + 8] + (I64[Sp + 16] + 16)] = 0 :: W8;
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c49D9: // global
           I64[Sp] = block_c49Dj_info;
           _s49C5::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _s49C5::P64;
           if (R1 & 7 != 0) goto u49Du; else goto c49Dl;
       u49Du: // global
           call _c49Dj(R1) args: 0, res: 0, upd: 0;
       c49Dl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c49Dj() //  [R1]
         { info_tbl: [(c49Dj,
                       label: block_c49Dj_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49Dj: // global
           _s49BY::P64 = P64[Sp + 8];
           _s49BZ::I64 = I64[Sp + 16];
           _s49C5::P64 = P64[Sp + 24];
           I8[(_s49BY::P64 + 16) + _s49BZ::I64] = %MO_UU_Conv_W64_W8(I64[R1 + 7]);
           P64[Sp + 8] = _s49BY::P64;
           I64[Sp + 16] = _s49BZ::I64 + 1;
           P64[Sp + 24] = _s49C5::P64;
           Sp = Sp + 8;
           call _c49D1() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.739283366 UTC

[section ""data" . GHC.Pack.packCString#1_closure" {
     GHC.Pack.packCString#1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.74170539 UTC

[section ""data" . GHC.Pack.packCString#_closure" {
     GHC.Pack.packCString#_closure:
         const GHC.Pack.packCString#_info;
 },
 GHC.Pack.packCString#_entry() //  [R2]
         { info_tbl: [(c49E5,
                       label: GHC.Pack.packCString#_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49E5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c49El; else goto c49Em;
       c49El: // global
           R2 = R2;
           R1 = GHC.Pack.packCString#_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c49Em: // global
           I64[Sp - 16] = block_c49E3_info;
           R3 = 0;
           _s49Ca::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _s49Ca::P64;
           Sp = Sp - 16;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c49E3() //  [R1]
         { info_tbl: [(c49E3,
                       label: block_c49E3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49E3: // global
           I64[Sp - 8] = block_c49Eb_info;
           _s49Cb::I64 = R1;
           R1 = R1 + 1;
           I64[Sp] = _s49Cb::I64;
           Sp = Sp - 8;
           call stg_newByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c49Eb() //  [R1]
         { info_tbl: [(c49Eb,
                       label: block_c49Eb_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49Eb: // global
           I64[Sp] = block_c49Ed_info;
           R4 = P64[Sp + 16];
           R3 = 0;
           R2 = R1;
           P64[Sp + 16] = R1;
           call GHC.Pack.$wfill_in_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c49Ed() //  [R1]
         { info_tbl: [(c49Ed,
                       label: block_c49Ed_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49Ed: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c49Er; else goto c49Eq;
       c49Er: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c49Eq: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = I64[Sp + 8];
           I64[Hp - 24] = GHC.Pack.ByteArray_con_info;
           P64[Hp - 16] = GHC.Pack.packCString#1_closure+1;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_c49Ek_info;
           R1 = Hp - 23;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u49Ey; else goto c49Et;
       u49Ey: // global
           call _c49Ek(R1) args: 0, res: 0, upd: 0;
       c49Et: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c49Ek() //  [R1]
         { info_tbl: [(c49Ek,
                       label: block_c49Ek_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49Ek: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.753833715 UTC

[section ""cstring" . GHC.Pack.$trModule4_bytes" {
     GHC.Pack.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.755554577 UTC

[section ""data" . GHC.Pack.$trModule3_closure" {
     GHC.Pack.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.757442757 UTC

[section ""cstring" . GHC.Pack.$trModule2_bytes" {
     GHC.Pack.$trModule2_bytes:
         I8[] [71,72,67,46,80,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.75913804 UTC

[section ""data" . GHC.Pack.$trModule1_closure" {
     GHC.Pack.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.760963768 UTC

[section ""data" . GHC.Pack.$trModule_closure" {
     GHC.Pack.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Pack.$trModule3_closure+1;
         const GHC.Pack.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.763428074 UTC

[section ""data" . $krep_r49tW_closure" {
     $krep_r49tW_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.765613799 UTC

[section ""data" . $krep1_r49tX_closure" {
     $krep1_r49tX_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.767642901 UTC

[section ""data" . $krep2_r49tY_closure" {
     $krep2_r49tY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcByteArray#_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.769716983 UTC

[section ""data" . $krep3_r49tZ_closure" {
     $krep3_r49tZ_closure:
         const :_con_info;
         const $krep1_r49tX_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.771758613 UTC

[section ""data" . $krep4_r49u0_closure" {
     $krep4_r49u0_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutableByteArray#_closure;
         const $krep3_r49tZ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.774389196 UTC

[section ""cstring" . GHC.Pack.$tcByteArray2_bytes" {
     GHC.Pack.$tcByteArray2_bytes:
         I8[] [66,121,116,101,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.776289069 UTC

[section ""data" . GHC.Pack.$tcByteArray1_closure" {
     GHC.Pack.$tcByteArray1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$tcByteArray2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.778236847 UTC

[section ""data" . GHC.Pack.$tcByteArray_closure" {
     GHC.Pack.$tcByteArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Pack.$trModule_closure+1;
         const GHC.Pack.$tcByteArray1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 6611072354126638117;
         const 11678736345727892353;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.780250379 UTC

[section ""data" . $krep5_r49u1_closure" {
     $krep5_r49u1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Pack.$tcByteArray_closure+1;
         const $krep3_r49tZ_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.782233909 UTC

[section ""data" . $krep6_r49u2_closure" {
     $krep6_r49u2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r49tY_closure+1;
         const $krep5_r49u1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.784134001 UTC

[section ""data" . $krep7_r49u3_closure" {
     $krep7_r49u3_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r49tX_closure+2;
         const $krep6_r49u2_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.78651475 UTC

[section ""data" . GHC.Pack.$tc'ByteArray1_closure" {
     GHC.Pack.$tc'ByteArray1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r49tX_closure+2;
         const $krep7_r49u3_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.788147469 UTC

[section ""cstring" . GHC.Pack.$tc'ByteArray3_bytes" {
     GHC.Pack.$tc'ByteArray3_bytes:
         I8[] [39,66,121,116,101,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.789872336 UTC

[section ""data" . GHC.Pack.$tc'ByteArray2_closure" {
     GHC.Pack.$tc'ByteArray2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$tc'ByteArray3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.792006504 UTC

[section ""data" . GHC.Pack.$tc'ByteArray_closure" {
     GHC.Pack.$tc'ByteArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Pack.$trModule_closure+1;
         const GHC.Pack.$tc'ByteArray2_closure+1;
         const GHC.Pack.$tc'ByteArray1_closure+4;
         const 11073751302644004223;
         const 16492867229169068973;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.793800469 UTC

[section ""cstring" . GHC.Pack.$tcMutableByteArray2_bytes" {
     GHC.Pack.$tcMutableByteArray2_bytes:
         I8[] [77,117,116,97,98,108,101,66,121,116,101,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.79541095 UTC

[section ""data" . GHC.Pack.$tcMutableByteArray1_closure" {
     GHC.Pack.$tcMutableByteArray1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$tcMutableByteArray2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.797010658 UTC

[section ""data" . GHC.Pack.$tcMutableByteArray_closure" {
     GHC.Pack.$tcMutableByteArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Pack.$trModule_closure+1;
         const GHC.Pack.$tcMutableByteArray1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 10421317957223969791;
         const 16976841683708620350;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.79887039 UTC

[section ""data" . $krep8_r49u4_closure" {
     $krep8_r49u4_closure:
         const :_con_info;
         const $krep_r49tW_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.800490182 UTC

[section ""data" . $krep9_r49u5_closure" {
     $krep9_r49u5_closure:
         const :_con_info;
         const $krep1_r49tX_closure+2;
         const $krep8_r49u4_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.802196387 UTC

[section ""data" . $krep10_r49u6_closure" {
     $krep10_r49u6_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Pack.$tcMutableByteArray_closure+1;
         const $krep9_r49u5_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.803895755 UTC

[section ""data" . $krep11_r49u7_closure" {
     $krep11_r49u7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r49u0_closure+1;
         const $krep10_r49u6_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.805974164 UTC

[section ""data" . $krep12_r49u8_closure" {
     $krep12_r49u8_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r49tW_closure+2;
         const $krep11_r49u7_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.807619216 UTC

[section ""data" . GHC.Pack.$tc'MutableByteArray1_closure" {
     GHC.Pack.$tc'MutableByteArray1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r49tW_closure+2;
         const $krep12_r49u8_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.809220732 UTC

[section ""cstring" . GHC.Pack.$tc'MutableByteArray3_bytes" {
     GHC.Pack.$tc'MutableByteArray3_bytes:
         I8[] [39,77,117,116,97,98,108,101,66,121,116,101,65,114,114,97,121]
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.810885338 UTC

[section ""data" . GHC.Pack.$tc'MutableByteArray2_closure" {
     GHC.Pack.$tc'MutableByteArray2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Pack.$tc'MutableByteArray3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.812551209 UTC

[section ""data" . GHC.Pack.$tc'MutableByteArray_closure" {
     GHC.Pack.$tc'MutableByteArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Pack.$trModule_closure+1;
         const GHC.Pack.$tc'MutableByteArray2_closure+1;
         const GHC.Pack.$tc'MutableByteArray1_closure+4;
         const 4727910943669758619;
         const 1938961805888617932;
         const 2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.814724136 UTC

[section ""data" . GHC.Pack.MutableByteArray_closure" {
     GHC.Pack.MutableByteArray_closure:
         const GHC.Pack.MutableByteArray_info;
 },
 GHC.Pack.MutableByteArray_entry() //  [R2, R3, R4]
         { info_tbl: [(c49FD,
                       label: GHC.Pack.MutableByteArray_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49FD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c49FH; else goto c49FG;
       c49FH: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Pack.MutableByteArray_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c49FG: // global
           I64[Hp - 24] = GHC.Pack.MutableByteArray_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.819189107 UTC

[section ""data" . GHC.Pack.ByteArray_closure" {
     GHC.Pack.ByteArray_closure:
         const GHC.Pack.ByteArray_info;
 },
 GHC.Pack.ByteArray_entry() //  [R2, R3, R4]
         { info_tbl: [(c49FT,
                       label: GHC.Pack.ByteArray_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49FT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c49FX; else goto c49FW;
       c49FX: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Pack.ByteArray_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c49FW: // global
           I64[Hp - 24] = GHC.Pack.ByteArray_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.823741854 UTC

[GHC.Pack.MutableByteArray_con_entry() //  [R1]
         { info_tbl: [(c49G4,
                       label: GHC.Pack.MutableByteArray_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,80,97,99,107,46,77,117,116,97,98,108,101,66,121,116,101,65,114,114,97,121]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49G4: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.826913401 UTC

[GHC.Pack.ByteArray_con_entry() //  [R1]
         { info_tbl: [(c49Gb,
                       label: GHC.Pack.ByteArray_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,80,97,99,107,46,66,121,116,101,65,114,114,97,121]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c49Gb: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:59:02.829983105 UTC

[section ""relreadonly" . S49Gi_srt" { S49Gi_srt:
 }]

