
==================== Raw Cmm ====================
2018-03-16 15:56:30.808597045 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:56:30.82300259 UTC

[section ""data" . GHC.ST.$fFunctorST2_closure" {
     GHC.ST.$fFunctorST2_closure:
         const GHC.ST.$fFunctorST2_info;
 },
 GHC.ST.$fFunctorST2_entry() //  [R2, R3]
         { []
         }
     {offset
       c1JVO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JVP; else goto c1JVQ;
       c1JVP: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fFunctorST2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JVQ: // global
           I64[Sp - 16] = block_c1JVL_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fFunctorST2_info" {
     GHC.ST.$fFunctorST2_info:
         const GHC.ST.$fFunctorST2_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c1JVL() //  [R1]
         { []
         }
     {offset
       c1JVL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1JVT; else goto c1JVS;
       c1JVT: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JVS: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1JVL_info" {
     block_c1JVL_info:
         const _c1JVL;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.829183801 UTC

[section ""data" . GHC.ST.$fFunctorST1_closure" {
     GHC.ST.$fFunctorST1_closure:
         const GHC.ST.$fFunctorST1_info;
 },
 GHC.ST.$fFunctorST1_entry() //  [R2, R3]
         { []
         }
     {offset
       c1JWa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JWb; else goto c1JWc;
       c1JWb: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fFunctorST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JWc: // global
           I64[Sp - 16] = block_c1JW8_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fFunctorST1_info" {
     GHC.ST.$fFunctorST1_info:
         const GHC.ST.$fFunctorST1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c1JW8() //  []
         { []
         }
     {offset
       c1JW8: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1JW8_info" {
     block_c1JW8_info:
         const _c1JW8;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.833939687 UTC

[section ""data" . GHC.ST.$fFunctorST_closure" {
     GHC.ST.$fFunctorST_closure:
         const GHC.Base.C:Functor_con_info;
         const GHC.ST.$fFunctorST2_closure+3;
         const GHC.ST.$fFunctorST1_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.835985442 UTC

[section ""data" . $cpure_r1Jzx_closure" {
     $cpure_r1Jzx_closure:
         const $cpure_r1Jzx_info;
 },
 $cpure_r1Jzx_entry() //  [R2]
         { []
         }
     {offset
       c1JWs: // global
           R1 = R2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $cpure_r1Jzx_info" {
     $cpure_r1Jzx_info:
         const $cpure_r1Jzx_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.839435123 UTC

[section ""data" . GHC.ST.$fApplicativeST_$cpure_closure" {
     GHC.ST.$fApplicativeST_$cpure_closure:
         const GHC.ST.$fApplicativeST_$cpure_info;
 },
 GHC.ST.$fApplicativeST_$cpure_entry() //  [R2]
         { []
         }
     {offset
       c1JWE: // global
           R2 = R2;
           call $cpure_r1Jzx_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fApplicativeST_$cpure_info" {
     GHC.ST.$fApplicativeST_$cpure_info:
         const GHC.ST.$fApplicativeST_$cpure_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.844170837 UTC

[section ""data" . $c>>=_r1Jzy_closure" {
     $c>>=_r1Jzy_closure:
         const $c>>=_r1Jzy_info;
 },
 $c>>=_r1Jzy_entry() //  [R2, R3]
         { []
         }
     {offset
       c1JWR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JWS; else goto c1JWT;
       c1JWS: // global
           R3 = R3;
           R2 = R2;
           R1 = $c>>=_r1Jzy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JWT: // global
           I64[Sp - 16] = block_c1JWP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $c>>=_r1Jzy_info" {
     $c>>=_r1Jzy_info:
         const $c>>=_r1Jzy_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c1JWP() //  [R1]
         { []
         }
     {offset
       c1JWP: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1JWP_info" {
     block_c1JWP_info:
         const _c1JWP;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.849295204 UTC

[section ""data" . GHC.ST.$fMonadST_$c>>=_closure" {
     GHC.ST.$fMonadST_$c>>=_closure:
         const GHC.ST.$fMonadST_$c>>=_info;
 },
 GHC.ST.$fMonadST_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c1JX7: // global
           R3 = R3;
           R2 = R2;
           call $c>>=_r1Jzy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fMonadST_$c>>=_info" {
     GHC.ST.$fMonadST_$c>>=_info:
         const GHC.ST.$fMonadST_$c>>=_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.853484986 UTC

[section ""data" . GHC.ST.$fApplicativeST2_closure" {
     GHC.ST.$fApplicativeST2_closure:
         const GHC.ST.$fApplicativeST2_info;
 },
 GHC.ST.$fApplicativeST2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1JXn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1JXo; else goto c1JXp;
       c1JXo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fApplicativeST2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JXp: // global
           I64[Sp - 24] = block_c1JXi_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fApplicativeST2_info" {
     GHC.ST.$fApplicativeST2_info:
         const GHC.ST.$fApplicativeST2_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c1JXi() //  [R1]
         { []
         }
     {offset
       c1JXi: // global
           I64[Sp] = block_c1JXk_info;
           _s1JAo::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1JAo::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1JXi_info" {
     block_c1JXi_info:
         const _c1JXi;
         const 2;
         const 30;
 },
 _c1JXk() //  [R1]
         { []
         }
     {offset
       c1JXk: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1JXt; else goto c1JXs;
       c1JXt: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JXs: // global
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1JXk_info" {
     block_c1JXk_info:
         const _c1JXk;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.860900213 UTC

[section ""data" . GHC.ST.$fApplicativeST1_closure" {
     GHC.ST.$fApplicativeST1_closure:
         const GHC.ST.$fApplicativeST1_info;
 },
 GHC.ST.$fApplicativeST1_entry() //  [R2, R3]
         { []
         }
     {offset
       c1JXQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JXR; else goto c1JXS;
       c1JXR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fApplicativeST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JXS: // global
           I64[Sp - 16] = block_c1JXM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fApplicativeST1_info" {
     GHC.ST.$fApplicativeST1_info:
         const GHC.ST.$fApplicativeST1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c1JXM() //  [R1]
         { []
         }
     {offset
       c1JXM: // global
           I64[Sp] = block_c1JXO_info;
           _s1JAy::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1JAy::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1JXM_info" {
     block_c1JXM_info:
         const _c1JXM;
         const 1;
         const 30;
 },
 _c1JXO() //  []
         { []
         }
     {offset
       c1JXO: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1JXO_info" {
     block_c1JXO_info:
         const _c1JXO;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.869125163 UTC

[section ""data" . GHC.ST.$fApplicativeST3_closure" {
     GHC.ST.$fApplicativeST3_closure:
         const GHC.ST.$fApplicativeST3_info;
 },
 GHC.ST.$fApplicativeST3_entry() //  [R2, R3]
         { []
         }
     {offset
       c1JYg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JYh; else goto c1JYi;
       c1JYh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fApplicativeST3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JYi: // global
           I64[Sp - 16] = block_c1JYb_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fApplicativeST3_info" {
     GHC.ST.$fApplicativeST3_info:
         const GHC.ST.$fApplicativeST3_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c1JYb() //  [R1]
         { []
         }
     {offset
       c1JYb: // global
           I64[Sp] = block_c1JYd_info;
           _s1JAH::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1JAH::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1JYb_info" {
     block_c1JYb_info:
         const _c1JYb;
         const 1;
         const 30;
 },
 _c1JYd() //  [R1]
         { []
         }
     {offset
       c1JYd: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1JYm; else goto c1JYl;
       c1JYm: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JYl: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1JYd_info" {
     block_c1JYd_info:
         const _c1JYd;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.877002687 UTC

[section ""data" . $c*>_r1Jzz_closure" {
     $c*>_r1Jzz_closure:
         const $c*>_r1Jzz_info;
 },
 $c*>_r1Jzz_entry() //  [R2, R3]
         { []
         }
     {offset
       c1JYG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1JYH; else goto c1JYI;
       c1JYH: // global
           R3 = R3;
           R2 = R2;
           R1 = $c*>_r1Jzz_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JYI: // global
           I64[Sp - 16] = block_c1JYE_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $c*>_r1Jzz_info" {
     $c*>_r1Jzz_info:
         const $c*>_r1Jzz_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c1JYE() //  []
         { []
         }
     {offset
       c1JYE: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1JYE_info" {
     block_c1JYE_info:
         const _c1JYE;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.882238193 UTC

[section ""data" . GHC.ST.$fApplicativeST_$c*>_closure" {
     GHC.ST.$fApplicativeST_$c*>_closure:
         const GHC.ST.$fApplicativeST_$c*>_info;
 },
 GHC.ST.$fApplicativeST_$c*>_entry() //  [R2, R3]
         { []
         }
     {offset
       c1JYW: // global
           R3 = R3;
           R2 = R2;
           call $c*>_r1Jzz_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fApplicativeST_$c*>_info" {
     GHC.ST.$fApplicativeST_$c*>_info:
         const GHC.ST.$fApplicativeST_$c*>_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.885405335 UTC

[section ""data" . GHC.ST.$fApplicativeST_closure" {
     GHC.ST.$fApplicativeST_closure:
         const GHC.Base.C:Applicative_con_info;
         const GHC.ST.$fFunctorST_closure+1;
         const GHC.ST.$fApplicativeST_$cpure_closure+2;
         const GHC.ST.$fApplicativeST3_closure+3;
         const GHC.ST.$fApplicativeST2_closure+4;
         const GHC.ST.$fApplicativeST_$c*>_closure+3;
         const GHC.ST.$fApplicativeST1_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.887555604 UTC

[section ""data" . GHC.ST.$fMonadFailST1_closure" {
     GHC.ST.$fMonadFailST1_closure:
         const GHC.ST.$fMonadFailST1_info;
         const 0;
 },
 GHC.ST.$fMonadFailST1_entry() //  [R2]
         { []
         }
     {offset
       c1JZ8: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fMonadFailST1_info" {
     GHC.ST.$fMonadFailST1_info:
         const GHC.ST.$fMonadFailST1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S1JEM_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.890572066 UTC

[section ""data" . GHC.ST.$fMonadST_closure" {
     GHC.ST.$fMonadST_closure:
         const GHC.Base.C:Monad_con_info;
         const GHC.ST.$fApplicativeST_closure+1;
         const GHC.ST.$fMonadST_$c>>=_closure+3;
         const GHC.ST.$fApplicativeST_$c*>_closure+3;
         const GHC.ST.$fApplicativeST_$cpure_closure+2;
         const GHC.ST.$fMonadFailST1_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.892335947 UTC

[section ""data" . GHC.ST.$fMonadFailST_closure" {
     GHC.ST.$fMonadFailST_closure:
         const Control.Monad.Fail.C:MonadFail_con_info;
         const GHC.ST.$fMonadST_closure+1;
         const GHC.ST.$fMonadFailST1_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.896215834 UTC

[section ""data" . GHC.ST.$fSemigroupST2_closure" {
     GHC.ST.$fSemigroupST2_closure:
         const GHC.ST.$fSemigroupST2_info;
 },
 sat_s1JB3_entry() //  [R1]
         { []
         }
     {offset
       c1JZt: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1JZu; else goto c1JZv;
       c1JZu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1JZv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1JB3_info" {
     sat_s1JB3_info:
         const sat_s1JB3_entry;
         const 3;
         const 15;
 },
 GHC.ST.$fSemigroupST2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1JZw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1JZx; else goto c1JZy;
       c1JZx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1JZy: // global
           I64[Sp - 24] = block_c1JZl_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fSemigroupST2_info" {
     GHC.ST.$fSemigroupST2_info:
         const GHC.ST.$fSemigroupST2_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c1JZl() //  [R1]
         { []
         }
     {offset
       c1JZl: // global
           I64[Sp] = block_c1JZn_info;
           _s1JAZ::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1JAZ::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1JZl_info" {
     block_c1JZl_info:
         const _c1JZl;
         const 2;
         const 30;
 },
 _c1JZn() //  [R1]
         { []
         }
     {offset
       c1JZn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1JZC; else goto c1JZB;
       c1JZC: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1JZB: // global
           I64[Hp - 32] = sat_s1JB3_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1JZn_info" {
     block_c1JZn_info:
         const _c1JZn;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.907028885 UTC

[section ""data" . GHC.ST.$w$csconcat_closure" {
     GHC.ST.$w$csconcat_closure:
         const GHC.ST.$w$csconcat_info;
 },
 sat_s1JBl_entry() //  [R1]
         { []
         }
     {offset
       c1K0k: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1K0l; else goto c1K0m;
       c1K0l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K0m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1JBl_info" {
     sat_s1JBl_info:
         const sat_s1JBl_entry;
         const 3;
         const 15;
 },
 go_s1JB8_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1K0r: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1K0s; else goto c1K0t;
       c1K0s: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1K0t: // global
           I64[Sp - 32] = block_c1K06_info;
           _s1JB8::P64 = R1;
           _s1JB4::P64 = P64[R1 + 5];
           R1 = R3;
           P64[Sp - 24] = _s1JB4::P64;
           P64[Sp - 16] = _s1JB8::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1K0B; else goto c1K07;
       u1K0B: // global
           call _c1K06(R1) args: 0, res: 0, upd: 0;
       c1K07: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1JB8_info" {
     go_s1JB8_info:
         const go_s1JB8_entry;
         const 1;
         const 9;
         const 12884901903;
 },
 _c1K06() //  [R1]
         { []
         }
     {offset
       c1K06: // global
           _s1JB9::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c1K0o; else goto c1K0p;
       c1K0o: // global
           R1 = _s1JB9::P64;
           Sp = Sp + 32;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
       c1K0p: // global
           I64[Sp - 8] = block_c1K0c_info;
           _s1JBd::P64 = P64[R1 + 6];
           _s1JBe::P64 = P64[R1 + 14];
           R1 = _s1JB9::P64;
           P64[Sp] = _s1JBe::P64;
           P64[Sp + 24] = _s1JBd::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1K06_info" {
     block_c1K06_info:
         const _c1K06;
         const 3;
         const 30;
 },
 _c1K0c() //  [R1]
         { []
         }
     {offset
       c1K0c: // global
           _s1JBe::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1K0e_info;
           R3 = _s1JBe::P64;
           R2 = P64[Sp + 32];
           _s1JBh::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 32] = _s1JBh::P64;
           Sp = Sp + 8;
           call go_s1JB8_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1K0c_info" {
     block_c1K0c_info:
         const _c1K0c;
         const 4;
         const 30;
 },
 _c1K0e() //  [R1]
         { []
         }
     {offset
       c1K0e: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1K0A; else goto c1K0z;
       c1K0A: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1K0z: // global
           I64[Hp - 32] = sat_s1JBl_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1K0e_info" {
     block_c1K0e_info:
         const _c1K0e;
         const 131;
         const 30;
 },
 GHC.ST.$w$csconcat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1K0C: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1K0G; else goto c1K0F;
       c1K0G: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$w$csconcat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1K0F: // global
           I64[Hp - 8] = go_s1JB8_info;
           P64[Hp] = R2;
           _s1JB5::P64 = R3;
           R3 = R4;
           R2 = _s1JB5::P64;
           R1 = Hp - 5;
           call go_s1JB8_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$w$csconcat_info" {
     GHC.ST.$w$csconcat_info:
         const GHC.ST.$w$csconcat_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.920286495 UTC

[section ""data" . GHC.ST.$fSemigroupST1_closure" {
     GHC.ST.$fSemigroupST1_closure:
         const GHC.ST.$fSemigroupST1_info;
 },
 GHC.ST.$fSemigroupST1_entry() //  [R2, R3]
         { []
         }
     {offset
       c1K1h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1K1i; else goto c1K1j;
       c1K1i: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1K1j: // global
           I64[Sp - 16] = block_c1K1e_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1K1n; else goto c1K1f;
       u1K1n: // global
           call _c1K1e(R1) args: 0, res: 0, upd: 0;
       c1K1f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fSemigroupST1_info" {
     GHC.ST.$fSemigroupST1_info:
         const GHC.ST.$fSemigroupST1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c1K1e() //  [R1]
         { []
         }
     {offset
       c1K1e: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.ST.$w$csconcat_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1K1e_info" {
     block_c1K1e_info:
         const _c1K1e;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.927777318 UTC

[section ""data" . GHC.ST.$fSemigroupST_closure" {
     GHC.ST.$fSemigroupST_closure:
         const GHC.ST.$fSemigroupST_info;
         const 0;
 },
 sat_s1JBv_entry() //  [R1, R2]
         { []
         }
     {offset
       c1K1G: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.ST.$fSemigroupST_$cstimes_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1JBv_info" {
     sat_s1JBv_info:
         const sat_s1JBv_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1JEM_srt+8;
 },
 sat_s1JBu_entry() //  [R1, R2]
         { []
         }
     {offset
       c1K1O: // global
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.ST.$fSemigroupST1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1JBu_info" {
     sat_s1JBu_info:
         const sat_s1JBu_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 sat_s1JBt_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1K1W: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call GHC.ST.$fSemigroupST2_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1JBt_info" {
     sat_s1JBt_info:
         const sat_s1JBt_entry;
         const 1;
         const 9;
         const 12884901903;
 },
 GHC.ST.$fSemigroupST_entry() //  [R2]
         { []
         }
     {offset
       c1K20: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1K24; else goto c1K23;
       c1K24: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1K23: // global
           I64[Hp - 72] = sat_s1JBv_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1JBu_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s1JBt_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 37;
           P64[Hp - 8] = Hp - 54;
           P64[Hp] = Hp - 71;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fSemigroupST_info" {
     GHC.ST.$fSemigroupST_info:
         const GHC.ST.$fSemigroupST_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1JEM_srt+8;
 },
 section ""data" . GHC.ST.$fSemigroupST_$cstimes_closure" {
     GHC.ST.$fSemigroupST_$cstimes_closure:
         const GHC.ST.$fSemigroupST_$cstimes_info;
         const 0;
 },
 sat_s1JBy_entry() //  [R1]
         { []
         }
     {offset
       c1K2d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1K2e; else goto c1K2f;
       c1K2e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K2f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ST.$fSemigroupST_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1JBy_info" {
     sat_s1JBy_info:
         const sat_s1JBy_entry;
         const 1;
         const 4294967312;
         const S1JEM_srt+16;
 },
 GHC.ST.$fSemigroupST_$cstimes_entry() //  [R2, R3]
         { []
         }
     {offset
       c1K2g: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1K2k; else goto c1K2j;
       c1K2k: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST_$cstimes_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1K2j: // global
           I64[Hp - 16] = sat_s1JBy_info;
           P64[Hp] = R2;
           _s1JBx::P64 = R3;
           R3 = Hp - 16;
           R2 = _s1JBx::P64;
           R1 = Data.Semigroup.Internal.stimesDefault_closure;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fSemigroupST_$cstimes_info" {
     GHC.ST.$fSemigroupST_$cstimes_info:
         const GHC.ST.$fSemigroupST_$cstimes_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S1JEM_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.940658087 UTC

[section ""data" . GHC.ST.$fMonoidST_$cp1Monoid_closure" {
     GHC.ST.$fMonoidST_$cp1Monoid_closure:
         const GHC.ST.$fMonoidST_$cp1Monoid_info;
         const 0;
 },
 sat_s1JBA_entry() //  [R1]
         { []
         }
     {offset
       c1K2S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1K2T; else goto c1K2U;
       c1K2T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K2U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1JBA_info" {
     sat_s1JBA_info:
         const sat_s1JBA_entry;
         const 1;
         const 16;
 },
 GHC.ST.$fMonoidST_$cp1Monoid_entry() //  [R2]
         { []
         }
     {offset
       c1K2V: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1K2Z; else goto c1K2Y;
       c1K2Z: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.ST.$fMonoidST_$cp1Monoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1K2Y: // global
           I64[Hp - 16] = sat_s1JBA_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.ST.$fSemigroupST_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fMonoidST_$cp1Monoid_info" {
     GHC.ST.$fMonoidST_$cp1Monoid_info:
         const GHC.ST.$fMonoidST_$cp1Monoid_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S1JEM_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.948674072 UTC

[section ""data" . $cmappend_r1JzA_closure" {
     $cmappend_r1JzA_closure:
         const $cmappend_r1JzA_info;
 },
 sat_s1JBM_entry() //  [R1]
         { []
         }
     {offset
       c1K3m: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1K3n; else goto c1K3o;
       c1K3n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K3o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c1K3k_info;
           R2 = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.$p1Monoid_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1JBM_info" {
     sat_s1JBM_info:
         const sat_s1JBM_entry;
         const 3;
         const 15;
 },
 _c1K3k() //  [R1]
         { []
         }
     {offset
       c1K3k: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1K3k_info" {
     block_c1K3k_info:
         const _c1K3k;
         const 2;
         const 30;
 },
 $cmappend_r1JzA_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1K3s: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1K3t; else goto c1K3u;
       c1K3t: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $cmappend_r1JzA_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1K3u: // global
           I64[Sp - 24] = block_c1K3c_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $cmappend_r1JzA_info" {
     $cmappend_r1JzA_info:
         const $cmappend_r1JzA_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c1K3c() //  [R1]
         { []
         }
     {offset
       c1K3c: // global
           I64[Sp] = block_c1K3e_info;
           _s1JBH::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1JBH::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1K3c_info" {
     block_c1K3c_info:
         const _c1K3c;
         const 2;
         const 30;
 },
 _c1K3e() //  [R1]
         { []
         }
     {offset
       c1K3e: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1K3y; else goto c1K3x;
       c1K3y: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1K3x: // global
           I64[Hp - 32] = sat_s1JBM_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1K3e_info" {
     block_c1K3e_info:
         const _c1K3e;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.958492334 UTC

[section ""data" . GHC.ST.$fMonoidST_$cmappend_closure" {
     GHC.ST.$fMonoidST_$cmappend_closure:
         const GHC.ST.$fMonoidST_$cmappend_info;
 },
 GHC.ST.$fMonoidST_$cmappend_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1K40: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $cmappend_r1JzA_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fMonoidST_$cmappend_info" {
     GHC.ST.$fMonoidST_$cmappend_info:
         const GHC.ST.$fMonoidST_$cmappend_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.966060142 UTC

[section ""data" . GHC.ST.$fMonoidST1_closure" {
     GHC.ST.$fMonoidST1_closure:
         const GHC.ST.$fMonoidST1_info;
 },
 $dSemigroup_s1JBQ_entry() //  [R1]
         { []
         }
     {offset
       c1K4f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1K4g; else goto c1K4h;
       c1K4g: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K4h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dSemigroup_s1JBQ_info" {
     $dSemigroup_s1JBQ_info:
         const $dSemigroup_s1JBQ_entry;
         const 1;
         const 16;
 },
 lvl_s1JBR_entry() //  [R1]
         { []
         }
     {offset
       c1K4m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1K4n; else goto c1K4o;
       c1K4n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K4o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl_s1JBR_info" {
     lvl_s1JBR_info:
         const lvl_s1JBR_entry;
         const 1;
         const 16;
 },
 sat_s1JC4_entry() //  [R1]
         { []
         }
     {offset
       c1K4I: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1K4J; else goto c1K4K;
       c1K4J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K4K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1JC4_info" {
     sat_s1JC4_info:
         const sat_s1JC4_entry;
         const 3;
         const 15;
 },
 go_s1JBS_entry() //  [R1, R2]
         { []
         }
     {offset
       c1K4P: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1K4Q; else goto c1K4R;
       c1K4Q: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1K4R: // global
           I64[Sp - 32] = block_c1K4u_info;
           _s1JBS::P64 = R1;
           _s1JBQ::P64 = P64[R1 + 6];
           _s1JBR::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 24] = _s1JBQ::P64;
           P64[Sp - 16] = _s1JBR::P64;
           P64[Sp - 8] = _s1JBS::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1K4Z; else goto c1K4v;
       u1K4Z: // global
           call _c1K4u(R1) args: 0, res: 0, upd: 0;
       c1K4v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1JBS_info" {
     go_s1JBS_info:
         const go_s1JBS_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c1K4u() //  [R1]
         { []
         }
     {offset
       c1K4u: // global
           if (R1 & 7 == 1) goto c1K4M; else goto c1K4N;
       c1K4M: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1K4N: // global
           I64[Sp] = block_c1K4A_info;
           _s1JBX::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _s1JBX::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1K4u_info" {
     block_c1K4u_info:
         const _c1K4u;
         const 3;
         const 30;
 },
 _c1K4A() //  [R1]
         { []
         }
     {offset
       c1K4A: // global
           I64[Sp] = block_c1K4C_info;
           R2 = P64[Sp + 16];
           _s1JC0::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s1JC0::P64;
           call go_s1JBS_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1K4A_info" {
     block_c1K4A_info:
         const _c1K4A;
         const 3;
         const 30;
 },
 _c1K4C() //  [R1]
         { []
         }
     {offset
       c1K4C: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1K4Y; else goto c1K4X;
       c1K4Y: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1K4X: // global
           I64[Hp - 32] = sat_s1JC4_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1K4C_info" {
     block_c1K4C_info:
         const _c1K4C;
         const 131;
         const 30;
 },
 GHC.ST.$fMonoidST1_entry() //  [R2, R3]
         { []
         }
     {offset
       c1K50: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1K54; else goto c1K53;
       c1K54: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fMonoidST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1K53: // global
           I64[Hp - 64] = $dSemigroup_s1JBQ_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = lvl_s1JBR_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = go_s1JBS_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 40;
           R2 = R3;
           R1 = Hp - 14;
           call go_s1JBS_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fMonoidST1_info" {
     GHC.ST.$fMonoidST1_info:
         const GHC.ST.$fMonoidST1_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.984771193 UTC

[section ""data" . GHC.ST.$fMonoidST_closure" {
     GHC.ST.$fMonoidST_closure:
         const GHC.ST.$fMonoidST_info;
         const 0;
 },
 sat_s1JCb_entry() //  [R1, R2]
         { []
         }
     {offset
       c1K5S: // global
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.ST.$fMonoidST1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1JCb_info" {
     sat_s1JCb_info:
         const sat_s1JCb_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 sat_s1JCa_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1K60: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call GHC.ST.$fMonoidST_$cmappend_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1JCa_info" {
     sat_s1JCa_info:
         const sat_s1JCa_entry;
         const 1;
         const 9;
         const 12884901903;
 },
 sat_s1JC8_entry() //  [R1]
         { []
         }
     {offset
       c1K6c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1K6d; else goto c1K6e;
       c1K6d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K6e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1JC8_info" {
     sat_s1JC8_info:
         const sat_s1JC8_entry;
         const 1;
         const 16;
 },
 sat_s1JC9_entry() //  [R1]
         { []
         }
     {offset
       c1K6f: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1K6j; else goto c1K6i;
       c1K6j: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c1K6i: // global
           _s1JC5::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s1JC8_info;
           P64[Hp] = _s1JC5::P64;
           R1 = Hp - 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1JC9_info" {
     sat_s1JC9_info:
         const sat_s1JC9_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s1JC6_entry() //  [R1]
         { []
         }
     {offset
       c1K6o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1K6p; else goto c1K6q;
       c1K6p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K6q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ST.$fMonoidST_$cp1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1JC6_info" {
     sat_s1JC6_info:
         const sat_s1JC6_entry;
         const 1;
         const 4294967312;
         const S1JEM_srt+32;
 },
 GHC.ST.$fMonoidST_entry() //  [R2]
         { []
         }
     {offset
       c1K6s: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1K6w; else goto c1K6v;
       c1K6w: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = GHC.ST.$fMonoidST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1K6v: // global
           I64[Hp - 104] = sat_s1JCb_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s1JCa_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s1JC9_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1JC6_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 71;
           P64[Hp - 8] = Hp - 85;
           P64[Hp] = Hp - 102;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fMonoidST_info" {
     GHC.ST.$fMonoidST_info:
         const GHC.ST.$fMonoidST_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1JEM_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.996614261 UTC

[section ""cstring" . GHC.ST.$fShowST4_bytes" {
     GHC.ST.$fShowST4_bytes:
         I8[] [60,60,83,84,32,97,99,116,105,111,110,62,62]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:30.999082227 UTC

[section ""data" . GHC.ST.$fShowST3_closure" {
     GHC.ST.$fShowST3_closure:
         const GHC.ST.$fShowST3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ST.$fShowST3_entry() //  [R1]
         { []
         }
     {offset
       c1K75: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1K76; else goto c1K77;
       c1K76: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K77: // global
           (_c1K72::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1K72::I64 == 0) goto c1K74; else goto c1K73;
       c1K74: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1K73: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1K72::I64;
           R2 = GHC.ST.$fShowST4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.ST.$fShowST3_info" {
     GHC.ST.$fShowST3_info:
         const GHC.ST.$fShowST3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.003444921 UTC

[section ""data" . GHC.ST.$fShowST2_closure" {
     GHC.ST.$fShowST2_closure:
         const GHC.ST.$fShowST2_info;
         const 0;
 },
 GHC.ST.$fShowST2_entry() //  [R2]
         { []
         }
     {offset
       c1K7j: // global
           R3 = R2;
           R2 = GHC.ST.$fShowST3_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fShowST2_info" {
     GHC.ST.$fShowST2_info:
         const GHC.ST.$fShowST2_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S1JEM_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.006890107 UTC

[section ""data" . GHC.ST.$fShowST_$cshowsPrec_closure" {
     GHC.ST.$fShowST_$cshowsPrec_closure:
         const GHC.ST.$fShowST_$cshowsPrec_info;
         const 0;
 },
 GHC.ST.$fShowST_$cshowsPrec_entry() //  [R4]
         { []
         }
     {offset
       c1K7u: // global
           R2 = R4;
           call GHC.ST.$fShowST2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fShowST_$cshowsPrec_info" {
     GHC.ST.$fShowST_$cshowsPrec_info:
         const GHC.ST.$fShowST_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S1JEM_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.010291232 UTC

[section ""data" . GHC.ST.$fShowST_$cshow_closure" {
     GHC.ST.$fShowST_$cshow_closure:
         const GHC.ST.$fShowST_$cshow_info;
         const 0;
 },
 GHC.ST.$fShowST_$cshow_entry() //  []
         { []
         }
     {offset
       c1K7F: // global
           R1 = GHC.ST.$fShowST3_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fShowST_$cshow_info" {
     GHC.ST.$fShowST_$cshow_info:
         const GHC.ST.$fShowST_$cshow_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S1JEM_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.013711915 UTC

[section ""data" . GHC.ST.$fShowST1_closure" {
     GHC.ST.$fShowST1_closure:
         const GHC.ST.$fShowST1_info;
         const 0;
 },
 GHC.ST.$fShowST1_entry() //  [R3]
         { []
         }
     {offset
       c1K7R: // global
           R2 = R3;
           call GHC.ST.$fShowST2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fShowST1_info" {
     GHC.ST.$fShowST1_info:
         const GHC.ST.$fShowST1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S1JEM_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.01764536 UTC

[section ""data" . GHC.ST.$fShowST_$cshowList_closure" {
     GHC.ST.$fShowST_$cshowList_closure:
         const GHC.ST.$fShowST_$cshowList_info;
         const 0;
 },
 GHC.ST.$fShowST_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c1K82: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.ST.$fShowST1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fShowST_$cshowList_info" {
     GHC.ST.$fShowST_$cshowList_info:
         const GHC.ST.$fShowST_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S1JEM_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.020699888 UTC

[section ""data" . GHC.ST.$fShowST_closure" {
     GHC.ST.$fShowST_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.ST.$fShowST_$cshowsPrec_closure+3;
         const GHC.ST.$fShowST_$cshow_closure+1;
         const GHC.ST.$fShowST_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.023364926 UTC

[section ""data" . GHC.ST.liftST_closure" {
     GHC.ST.liftST_closure:
         const GHC.ST.liftST_info;
 },
 GHC.ST.liftST_entry() //  [R2]
         { []
         }
     {offset
       c1K8h: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1K8i; else goto c1K8j;
       c1K8i: // global
           R2 = R2;
           R1 = GHC.ST.liftST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1K8j: // global
           I64[Sp - 8] = block_c1K8e_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.liftST_info" {
     GHC.ST.liftST_info:
         const GHC.ST.liftST_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c1K8e() //  [R1]
         { []
         }
     {offset
       c1K8e: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1K8m; else goto c1K8l;
       c1K8m: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1K8l: // global
           I64[Hp - 8] = GHC.ST.STret_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1K8e_info" {
     block_c1K8e_info:
         const _c1K8e;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.030446665 UTC

[section ""data" . GHC.ST.fixST1_closure" {
     GHC.ST.fixST1_closure:
         const GHC.ST.fixST1_info;
 },
 ans_s1JCn_entry() //  [R1]
         { []
         }
     {offset
       c1K8I: // global
           _s1JCn::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c1K8J; else goto c1K8K;
       c1K8K: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1K8M; else goto c1K8L;
       c1K8M: // global
           HpAlloc = 24;
           goto c1K8J;
       c1K8J: // global
           R1 = _s1JCn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K8L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1JCn::P64;
           _s1JCl::P64 = P64[_s1JCn::P64 + 16];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s1JCn::P64;
           I64[Sp - 24] = block_c1K8F_info;
           R2 = Hp - 16;
           R1 = _s1JCl::P64;
           Sp = Sp - 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ans_s1JCn_info" {
     ans_s1JCn_info:
         const ans_s1JCn_entry;
         const 1;
         const 16;
 },
 _c1K8F() //  [R1]
         { []
         }
     {offset
       c1K8F: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1K8P; else goto c1K8O;
       c1K8P: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1K8O: // global
           I64[Hp - 8] = GHC.ST.STret_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1K8F_info" {
     block_c1K8F_info:
         const _c1K8F;
         const 0;
         const 30;
 },
 GHC.ST.fixST1_entry() //  [R2]
         { []
         }
     {offset
       c1K8T: // global
           _s1JCl::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c1K8U; else goto c1K8V;
       c1K8V: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1K8X; else goto c1K8W;
       c1K8X: // global
           HpAlloc = 24;
           goto c1K8U;
       c1K8U: // global
           R2 = _s1JCl::P64;
           R1 = GHC.ST.fixST1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1K8W: // global
           I64[Hp - 16] = ans_s1JCn_info;
           P64[Hp] = _s1JCl::P64;
           I64[Sp - 8] = block_c1K8Q_info;
           R1 = Hp - 16;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1K91; else goto c1K8R;
       u1K91: // global
           call _c1K8Q(R1) args: 0, res: 0, upd: 0;
       c1K8R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.fixST1_info" {
     GHC.ST.fixST1_info:
         const GHC.ST.fixST1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c1K8Q() //  [R1]
         { []
         }
     {offset
       c1K8Q: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1K8Q_info" {
     block_c1K8Q_info:
         const _c1K8Q;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.039089066 UTC

[section ""data" . GHC.ST.fixST_closure" {
     GHC.ST.fixST_closure:
         const GHC.ST.fixST_info;
 },
 GHC.ST.fixST_entry() //  [R2]
         { []
         }
     {offset
       c1K9o: // global
           R2 = R2;
           call GHC.ST.fixST1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.fixST_info" {
     GHC.ST.fixST_info:
         const GHC.ST.fixST_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.043236459 UTC

[section ""data" . GHC.ST.unsafeDupableInterleaveST1_closure" {
     GHC.ST.unsafeDupableInterleaveST1_closure:
         const GHC.ST.unsafeDupableInterleaveST1_info;
 },
 sat_s1JCD_entry() //  [R1]
         { []
         }
     {offset
       c1K9F: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1K9G; else goto c1K9H;
       c1K9G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1K9H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1K9D_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1JCD_info" {
     sat_s1JCD_info:
         const sat_s1JCD_entry;
         const 1;
         const 16;
 },
 _c1K9D() //  [R1]
         { []
         }
     {offset
       c1K9D: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1K9D_info" {
     block_c1K9D_info:
         const _c1K9D;
         const 0;
         const 30;
 },
 GHC.ST.unsafeDupableInterleaveST1_entry() //  [R2]
         { []
         }
     {offset
       c1K9J: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1K9N; else goto c1K9M;
       c1K9N: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.ST.unsafeDupableInterleaveST1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1K9M: // global
           I64[Hp - 16] = sat_s1JCD_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.unsafeDupableInterleaveST1_info" {
     GHC.ST.unsafeDupableInterleaveST1_info:
         const GHC.ST.unsafeDupableInterleaveST1_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.050136111 UTC

[section ""data" . GHC.ST.unsafeDupableInterleaveST_closure" {
     GHC.ST.unsafeDupableInterleaveST_closure:
         const GHC.ST.unsafeDupableInterleaveST_info;
 },
 GHC.ST.unsafeDupableInterleaveST_entry() //  [R2]
         { []
         }
     {offset
       c1Ka4: // global
           R2 = R2;
           call GHC.ST.unsafeDupableInterleaveST1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.unsafeDupableInterleaveST_info" {
     GHC.ST.unsafeDupableInterleaveST_info:
         const GHC.ST.unsafeDupableInterleaveST_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.055137997 UTC

[section ""data" . unsafeInterleaveST1_r1JzB_closure" {
     unsafeInterleaveST1_r1JzB_closure:
         const unsafeInterleaveST1_r1JzB_info;
 },
 sat_s1JCI_entry() //  [R1]
         { []
         }
     {offset
       c1Kam: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Kan; else goto c1Kao;
       c1Kan: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c1Kao: // global
           I64[Sp - 16] = block_c1Kak_info;
           P64[Sp - 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1JCI_info" {
     sat_s1JCI_info:
         const sat_s1JCI_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _c1Kak() //  []
         { []
         }
     {offset
       c1Kak: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Kak_info" {
     block_c1Kak_info:
         const _c1Kak;
         const 1;
         const 30;
 },
 unsafeInterleaveST1_r1JzB_entry() //  [R2]
         { []
         }
     {offset
       c1Kaq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Kau; else goto c1Kat;
       c1Kau: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = unsafeInterleaveST1_r1JzB_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Kat: // global
           I64[Hp - 8] = sat_s1JCI_info;
           P64[Hp] = R2;
           R2 = Hp - 7;
           call GHC.ST.unsafeDupableInterleaveST_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . unsafeInterleaveST1_r1JzB_info" {
     unsafeInterleaveST1_r1JzB_info:
         const unsafeInterleaveST1_r1JzB_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.061829457 UTC

[section ""data" . GHC.ST.unsafeInterleaveST_closure" {
     GHC.ST.unsafeInterleaveST_closure:
         const GHC.ST.unsafeInterleaveST_info;
 },
 GHC.ST.unsafeInterleaveST_entry() //  [R2]
         { []
         }
     {offset
       c1KaL: // global
           R2 = R2;
           call unsafeInterleaveST1_r1JzB_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.unsafeInterleaveST_info" {
     GHC.ST.unsafeInterleaveST_info:
         const GHC.ST.unsafeInterleaveST_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.065610633 UTC

[section ""data" . GHC.ST.runST_closure" {
     GHC.ST.runST_closure:
         const GHC.ST.runST_info;
 },
 GHC.ST.runST_entry() //  [R2]
         { []
         }
     {offset
       c1KaY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1KaZ; else goto c1Kb0;
       c1KaZ: // global
           R2 = R2;
           R1 = GHC.ST.runST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Kb0: // global
           I64[Sp - 8] = block_c1KaW_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.runST_info" {
     GHC.ST.runST_info:
         const GHC.ST.runST_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1KaW() //  [R1]
         { []
         }
     {offset
       c1KaW: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1KaW_info" {
     block_c1KaW_info:
         const _c1KaW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.070363161 UTC

[section ""cstring" . GHC.ST.$trModule4_bytes" {
     GHC.ST.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.071989237 UTC

[section ""data" . GHC.ST.$trModule3_closure" {
     GHC.ST.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.073838768 UTC

[section ""cstring" . GHC.ST.$trModule2_bytes" {
     GHC.ST.$trModule2_bytes:
         I8[] [71,72,67,46,83,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.075450588 UTC

[section ""data" . GHC.ST.$trModule1_closure" {
     GHC.ST.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.077148594 UTC

[section ""data" . GHC.ST.$trModule_closure" {
     GHC.ST.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ST.$trModule3_closure+1;
         const GHC.ST.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.078996193 UTC

[section ""data" . $krep_r1JzC_closure" {
     $krep_r1JzC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'LiftedRep_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.080844298 UTC

[section ""data" . $krep1_r1JzD_closure" {
     $krep1_r1JzD_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRuntimeRep_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.083446357 UTC

[section ""data" . $krep2_r1JzE_closure" {
     $krep2_r1JzE_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.08546495 UTC

[section ""data" . $krep3_r1JzF_closure" {
     $krep3_r1JzF_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.087153081 UTC

[section ""data" . $krep4_r1JzG_closure" {
     $krep4_r1JzG_closure:
         const :_con_info;
         const $krep3_r1JzF_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.088751512 UTC

[section ""data" . $krep5_r1JzH_closure" {
     $krep5_r1JzH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcState#_closure;
         const $krep4_r1JzG_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.090578294 UTC

[section ""data" . $krep6_r1JzI_closure" {
     $krep6_r1JzI_closure:
         const :_con_info;
         const $krep1_r1JzD_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.092208761 UTC

[section ""data" . $krep7_r1JzJ_closure" {
     $krep7_r1JzJ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'[]_closure;
         const $krep6_r1JzI_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.094676193 UTC

[section ""data" . $krep8_r1JzK_closure" {
     $krep8_r1JzK_closure:
         const :_con_info;
         const $krep7_r1JzJ_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.096354213 UTC

[section ""data" . $krep9_r1JzL_closure" {
     $krep9_r1JzL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'TupleRep_closure;
         const $krep8_r1JzK_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.098306632 UTC

[section ""data" . $krep10_r1JzM_closure" {
     $krep10_r1JzM_closure:
         const :_con_info;
         const $krep2_r1JzE_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.099940913 UTC

[section ""data" . $krep11_r1JzN_closure" {
     $krep11_r1JzN_closure:
         const :_con_info;
         const $krep5_r1JzH_closure+1;
         const $krep10_r1JzM_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.102948146 UTC

[section ""data" . $krep12_r1JzO_closure" {
     $krep12_r1JzO_closure:
         const :_con_info;
         const $krep_r1JzC_closure+1;
         const $krep11_r1JzN_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.104645155 UTC

[section ""data" . $krep13_r1JzP_closure" {
     $krep13_r1JzP_closure:
         const :_con_info;
         const $krep9_r1JzL_closure+1;
         const $krep12_r1JzO_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.106525521 UTC

[section ""data" . $krep14_r1JzQ_closure" {
     $krep14_r1JzQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc(#,#)_closure;
         const $krep13_r1JzP_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.108242973 UTC

[section ""data" . $krep15_r1JzR_closure" {
     $krep15_r1JzR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r1JzH_closure+1;
         const $krep14_r1JzQ_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.11056283 UTC

[section ""cstring" . GHC.ST.$tcST2_bytes" {
     GHC.ST.$tcST2_bytes:
         I8[] [83,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.112167736 UTC

[section ""data" . GHC.ST.$tcST1_closure" {
     GHC.ST.$tcST1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tcST2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.113846766 UTC

[section ""data" . GHC.ST.$tcST_closure" {
     GHC.ST.$tcST_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tcST1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 6436416558974291297;
         const 634350057185658725;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.115684438 UTC

[section ""data" . $krep16_r1JzS_closure" {
     $krep16_r1JzS_closure:
         const :_con_info;
         const $krep3_r1JzF_closure+2;
         const $krep10_r1JzM_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.117456768 UTC

[section ""data" . $krep17_r1JzT_closure" {
     $krep17_r1JzT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ST.$tcST_closure+1;
         const $krep16_r1JzS_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.119143201 UTC

[section ""data" . GHC.ST.$tc'ST1_closure" {
     GHC.ST.$tc'ST1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep15_r1JzR_closure+4;
         const $krep17_r1JzT_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.120783661 UTC

[section ""cstring" . GHC.ST.$tc'ST3_bytes" {
     GHC.ST.$tc'ST3_bytes:
         I8[] [39,83,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.122536792 UTC

[section ""data" . GHC.ST.$tc'ST2_closure" {
     GHC.ST.$tc'ST2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tc'ST3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.124197732 UTC

[section ""data" . GHC.ST.$tc'ST_closure" {
     GHC.ST.$tc'ST_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tc'ST2_closure+1;
         const GHC.ST.$tc'ST1_closure+4;
         const 13769291328326942007;
         const 10130644975726413154;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.12615273 UTC

[section ""cstring" . GHC.ST.$tcSTret2_bytes" {
     GHC.ST.$tcSTret2_bytes:
         I8[] [83,84,114,101,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.127768106 UTC

[section ""data" . GHC.ST.$tcSTret1_closure" {
     GHC.ST.$tcSTret1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tcSTret2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.129693874 UTC

[section ""data" . GHC.ST.$tcSTret_closure" {
     GHC.ST.$tcSTret_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tcSTret1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 18266429679521839845;
         const 6736124203785980802;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.131453688 UTC

[section ""data" . $krep18_r1JzU_closure" {
     $krep18_r1JzU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ST.$tcSTret_closure+1;
         const $krep16_r1JzS_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.133164248 UTC

[section ""data" . $krep19_r1JzV_closure" {
     $krep19_r1JzV_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r1JzE_closure+2;
         const $krep18_r1JzU_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.135364442 UTC

[section ""data" . GHC.ST.$tc'STret1_closure" {
     GHC.ST.$tc'STret1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r1JzH_closure+1;
         const $krep19_r1JzV_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.137194075 UTC

[section ""cstring" . GHC.ST.$tc'STret3_bytes" {
     GHC.ST.$tc'STret3_bytes:
         I8[] [39,83,84,114,101,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.138872196 UTC

[section ""data" . GHC.ST.$tc'STret2_closure" {
     GHC.ST.$tc'STret2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tc'STret3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.140566288 UTC

[section ""data" . GHC.ST.$tc'STret_closure" {
     GHC.ST.$tc'STret_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tc'STret2_closure+1;
         const GHC.ST.$tc'STret1_closure+4;
         const 12272761794237483025;
         const 16570602352537544279;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.14303146 UTC

[section ""data" . GHC.ST.STret_closure" {
     GHC.ST.STret_closure:
         const GHC.ST.STret_info;
 },
 GHC.ST.STret_entry() //  [R2]
         { []
         }
     {offset
       c1KbS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1KbW; else goto c1KbV;
       c1KbW: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ST.STret_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KbV: // global
           I64[Hp - 8] = GHC.ST.STret_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.STret_info" {
     GHC.ST.STret_info:
         const GHC.ST.STret_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.146649686 UTC

[section ""cstring" . i1JVG_str" {
     i1JVG_str:
         I8[] [98,97,115,101,58,71,72,67,46,83,84,46,83,84,114,101,116]
 },
 GHC.ST.STret_con_entry() //  [R1]
         { []
         }
     {offset
       c1Kc2: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.STret_con_info" {
     GHC.ST.STret_con_info:
         const GHC.ST.STret_con_entry;
         const 1;
         const 2;
         const i1JVG_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.149928727 UTC

[section ""relreadonly" . S1JEM_srt" {
     S1JEM_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.ST.$fSemigroupST_$cstimes_closure;
         const GHC.ST.$fSemigroupST_closure;
         const Data.Semigroup.Internal.stimesDefault_closure;
         const GHC.ST.$fMonoidST_$cp1Monoid_closure;
         const GHC.ST.$fMonoidST_closure;
         const GHC.ST.$fShowST3_closure;
         const GHC.ST.$fShowST2_closure;
         const GHC.ST.$fShowST1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.704979491 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:56:31.707325249 UTC

[section ""data" . GHC.ST.$fFunctorST2_closure" {
     GHC.ST.$fFunctorST2_closure:
         const GHC.ST.$fFunctorST2_info;
 },
 GHC.ST.$fFunctorST2_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Kf6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Kf7; else goto c1Kf8;
       c1Kf7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fFunctorST2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Kf8: // global
           I64[Sp - 16] = block_c1Kf3_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fFunctorST2_info" {
     GHC.ST.$fFunctorST2_info:
         const GHC.ST.$fFunctorST2_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c1Kf3() //  [R1]
         { []
         }
     {offset
       c1Kf3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1Kfb; else goto c1Kfa;
       c1Kfb: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Kfa: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Kf3_info" {
     block_c1Kf3_info:
         const _c1Kf3;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.71344674 UTC

[section ""data" . GHC.ST.$fFunctorST1_closure" {
     GHC.ST.$fFunctorST1_closure:
         const GHC.ST.$fFunctorST1_info;
 },
 GHC.ST.$fFunctorST1_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Kfu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Kfv; else goto c1Kfw;
       c1Kfv: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fFunctorST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Kfw: // global
           I64[Sp - 16] = block_c1Kfs_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fFunctorST1_info" {
     GHC.ST.$fFunctorST1_info:
         const GHC.ST.$fFunctorST1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c1Kfs() //  []
         { []
         }
     {offset
       c1Kfs: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Kfs_info" {
     block_c1Kfs_info:
         const _c1Kfs;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.71883081 UTC

[section ""data" . GHC.ST.$fFunctorST_closure" {
     GHC.ST.$fFunctorST_closure:
         const GHC.Base.C:Functor_con_info;
         const GHC.ST.$fFunctorST2_closure+3;
         const GHC.ST.$fFunctorST1_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.72106028 UTC

[section ""data" . $cpure_r1Jzx_closure" {
     $cpure_r1Jzx_closure:
         const $cpure_r1Jzx_info;
 },
 $cpure_r1Jzx_entry() //  [R2]
         { []
         }
     {offset
       c1KfN: // global
           R1 = R2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $cpure_r1Jzx_info" {
     $cpure_r1Jzx_info:
         const $cpure_r1Jzx_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.72482394 UTC

[section ""data" . GHC.ST.$fApplicativeST_$cpure_closure" {
     GHC.ST.$fApplicativeST_$cpure_closure:
         const GHC.ST.$fApplicativeST_$cpure_info;
 },
 GHC.ST.$fApplicativeST_$cpure_entry() //  [R2]
         { []
         }
     {offset
       c1KfZ: // global
           R2 = R2;
           call $cpure_r1Jzx_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fApplicativeST_$cpure_info" {
     GHC.ST.$fApplicativeST_$cpure_info:
         const GHC.ST.$fApplicativeST_$cpure_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.729203115 UTC

[section ""data" . $c>>=_r1Jzy_closure" {
     $c>>=_r1Jzy_closure:
         const $c>>=_r1Jzy_info;
 },
 $c>>=_r1Jzy_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Kgc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Kgd; else goto c1Kge;
       c1Kgd: // global
           R3 = R3;
           R2 = R2;
           R1 = $c>>=_r1Jzy_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Kge: // global
           I64[Sp - 16] = block_c1Kga_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $c>>=_r1Jzy_info" {
     $c>>=_r1Jzy_info:
         const $c>>=_r1Jzy_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c1Kga() //  [R1]
         { []
         }
     {offset
       c1Kga: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Kga_info" {
     block_c1Kga_info:
         const _c1Kga;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.73490832 UTC

[section ""data" . GHC.ST.$fMonadST_$c>>=_closure" {
     GHC.ST.$fMonadST_$c>>=_closure:
         const GHC.ST.$fMonadST_$c>>=_info;
 },
 GHC.ST.$fMonadST_$c>>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Kgt: // global
           R3 = R3;
           R2 = R2;
           call $c>>=_r1Jzy_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fMonadST_$c>>=_info" {
     GHC.ST.$fMonadST_$c>>=_info:
         const GHC.ST.$fMonadST_$c>>=_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.7396641 UTC

[section ""data" . GHC.ST.$fApplicativeST2_closure" {
     GHC.ST.$fApplicativeST2_closure:
         const GHC.ST.$fApplicativeST2_info;
 },
 GHC.ST.$fApplicativeST2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1KgJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1KgK; else goto c1KgL;
       c1KgK: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fApplicativeST2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1KgL: // global
           I64[Sp - 24] = block_c1KgE_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fApplicativeST2_info" {
     GHC.ST.$fApplicativeST2_info:
         const GHC.ST.$fApplicativeST2_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c1KgE() //  [R1]
         { []
         }
     {offset
       c1KgE: // global
           I64[Sp] = block_c1KgG_info;
           _s1KcA::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1KcA::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1KgE_info" {
     block_c1KgE_info:
         const _c1KgE;
         const 2;
         const 30;
 },
 _c1KgG() //  [R1]
         { []
         }
     {offset
       c1KgG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1KgP; else goto c1KgO;
       c1KgP: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1KgO: // global
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1KgG_info" {
     block_c1KgG_info:
         const _c1KgG;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.747697138 UTC

[section ""data" . GHC.ST.$fApplicativeST1_closure" {
     GHC.ST.$fApplicativeST1_closure:
         const GHC.ST.$fApplicativeST1_info;
 },
 GHC.ST.$fApplicativeST1_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Khf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Khg; else goto c1Khh;
       c1Khg: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fApplicativeST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Khh: // global
           I64[Sp - 16] = block_c1Khb_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fApplicativeST1_info" {
     GHC.ST.$fApplicativeST1_info:
         const GHC.ST.$fApplicativeST1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c1Khb() //  [R1]
         { []
         }
     {offset
       c1Khb: // global
           I64[Sp] = block_c1Khd_info;
           _s1KcK::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1KcK::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Khb_info" {
     block_c1Khb_info:
         const _c1Khb;
         const 1;
         const 30;
 },
 _c1Khd() //  []
         { []
         }
     {offset
       c1Khd: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Khd_info" {
     block_c1Khd_info:
         const _c1Khd;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.755708771 UTC

[section ""data" . GHC.ST.$fApplicativeST3_closure" {
     GHC.ST.$fApplicativeST3_closure:
         const GHC.ST.$fApplicativeST3_info;
 },
 GHC.ST.$fApplicativeST3_entry() //  [R2, R3]
         { []
         }
     {offset
       c1KhH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1KhI; else goto c1KhJ;
       c1KhI: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fApplicativeST3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1KhJ: // global
           I64[Sp - 16] = block_c1KhC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fApplicativeST3_info" {
     GHC.ST.$fApplicativeST3_info:
         const GHC.ST.$fApplicativeST3_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c1KhC() //  [R1]
         { []
         }
     {offset
       c1KhC: // global
           I64[Sp] = block_c1KhE_info;
           _s1KcT::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1KcT::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1KhC_info" {
     block_c1KhC_info:
         const _c1KhC;
         const 1;
         const 30;
 },
 _c1KhE() //  [R1]
         { []
         }
     {offset
       c1KhE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c1KhN; else goto c1KhM;
       c1KhN: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1KhM: // global
           I64[Hp - 24] = stg_ap_2_upd_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1KhE_info" {
     block_c1KhE_info:
         const _c1KhE;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.763596837 UTC

[section ""data" . $c*>_r1Jzz_closure" {
     $c*>_r1Jzz_closure:
         const $c*>_r1Jzz_info;
 },
 $c*>_r1Jzz_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Kia: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Kib; else goto c1Kic;
       c1Kib: // global
           R3 = R3;
           R2 = R2;
           R1 = $c*>_r1Jzz_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Kic: // global
           I64[Sp - 16] = block_c1Ki8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $c*>_r1Jzz_info" {
     $c*>_r1Jzz_info:
         const $c*>_r1Jzz_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c1Ki8() //  []
         { []
         }
     {offset
       c1Ki8: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Ki8_info" {
     block_c1Ki8_info:
         const _c1Ki8;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.768813947 UTC

[section ""data" . GHC.ST.$fApplicativeST_$c*>_closure" {
     GHC.ST.$fApplicativeST_$c*>_closure:
         const GHC.ST.$fApplicativeST_$c*>_info;
 },
 GHC.ST.$fApplicativeST_$c*>_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Kir: // global
           R3 = R3;
           R2 = R2;
           call $c*>_r1Jzz_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fApplicativeST_$c*>_info" {
     GHC.ST.$fApplicativeST_$c*>_info:
         const GHC.ST.$fApplicativeST_$c*>_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.7722617 UTC

[section ""data" . GHC.ST.$fApplicativeST_closure" {
     GHC.ST.$fApplicativeST_closure:
         const GHC.Base.C:Applicative_con_info;
         const GHC.ST.$fFunctorST_closure+1;
         const GHC.ST.$fApplicativeST_$cpure_closure+2;
         const GHC.ST.$fApplicativeST3_closure+3;
         const GHC.ST.$fApplicativeST2_closure+4;
         const GHC.ST.$fApplicativeST_$c*>_closure+3;
         const GHC.ST.$fApplicativeST1_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.774586067 UTC

[section ""data" . GHC.ST.$fMonadFailST1_closure" {
     GHC.ST.$fMonadFailST1_closure:
         const GHC.ST.$fMonadFailST1_info;
         const 0;
 },
 GHC.ST.$fMonadFailST1_entry() //  [R2]
         { []
         }
     {offset
       c1KiD: // global
           R2 = R2;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fMonadFailST1_info" {
     GHC.ST.$fMonadFailST1_info:
         const GHC.ST.$fMonadFailST1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S1KiG_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.780308049 UTC

[section ""data" . GHC.ST.$fMonadST_closure" {
     GHC.ST.$fMonadST_closure:
         const GHC.Base.C:Monad_con_info;
         const GHC.ST.$fApplicativeST_closure+1;
         const GHC.ST.$fMonadST_$c>>=_closure+3;
         const GHC.ST.$fApplicativeST_$c*>_closure+3;
         const GHC.ST.$fApplicativeST_$cpure_closure+2;
         const GHC.ST.$fMonadFailST1_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.782461389 UTC

[section ""data" . GHC.ST.$fMonadFailST_closure" {
     GHC.ST.$fMonadFailST_closure:
         const Control.Monad.Fail.C:MonadFail_con_info;
         const GHC.ST.$fMonadST_closure+1;
         const GHC.ST.$fMonadFailST1_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.786427132 UTC

[section ""data" . GHC.ST.$fSemigroupST2_closure" {
     GHC.ST.$fSemigroupST2_closure:
         const GHC.ST.$fSemigroupST2_info;
 },
 sat_s1Kdf_entry() //  [R1]
         { []
         }
     {offset
       c1KiZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1Kj0; else goto c1Kj1;
       c1Kj0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Kj1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Kdf_info" {
     sat_s1Kdf_info:
         const sat_s1Kdf_entry;
         const 3;
         const 15;
 },
 GHC.ST.$fSemigroupST2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1Kj2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1Kj3; else goto c1Kj4;
       c1Kj3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Kj4: // global
           I64[Sp - 24] = block_c1KiR_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fSemigroupST2_info" {
     GHC.ST.$fSemigroupST2_info:
         const GHC.ST.$fSemigroupST2_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c1KiR() //  [R1]
         { []
         }
     {offset
       c1KiR: // global
           I64[Sp] = block_c1KiT_info;
           _s1Kdb::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1Kdb::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1KiR_info" {
     block_c1KiR_info:
         const _c1KiR;
         const 2;
         const 30;
 },
 _c1KiT() //  [R1]
         { []
         }
     {offset
       c1KiT: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1Kj8; else goto c1Kj7;
       c1Kj8: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Kj7: // global
           I64[Hp - 32] = sat_s1Kdf_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1KiT_info" {
     block_c1KiT_info:
         const _c1KiT;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.800151212 UTC

[section ""data" . GHC.ST.$w$csconcat_closure" {
     GHC.ST.$w$csconcat_closure:
         const GHC.ST.$w$csconcat_info;
 },
 sat_s1Kdx_entry() //  [R1]
         { []
         }
     {offset
       c1KjV: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1KjW; else goto c1KjX;
       c1KjW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1KjX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Kdx_info" {
     sat_s1Kdx_info:
         const sat_s1Kdx_entry;
         const 3;
         const 15;
 },
 go_s1Kdk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1Kk2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1Kk3; else goto c1Kk4;
       c1Kk3: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Kk4: // global
           I64[Sp - 32] = block_c1KjH_info;
           _s1Kdk::P64 = R1;
           _s1Kdg::P64 = P64[R1 + 5];
           R1 = R3;
           P64[Sp - 24] = _s1Kdg::P64;
           P64[Sp - 16] = _s1Kdk::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1Kkc; else goto c1KjI;
       u1Kkc: // global
           call _c1KjH(R1) args: 0, res: 0, upd: 0;
       c1KjI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1Kdk_info" {
     go_s1Kdk_info:
         const go_s1Kdk_entry;
         const 1;
         const 9;
         const 12884901903;
 },
 _c1KjH() //  [R1]
         { []
         }
     {offset
       c1KjH: // global
           _s1Kdl::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c1KjZ; else goto c1Kk0;
       c1KjZ: // global
           R1 = _s1Kdl::P64;
           Sp = Sp + 32;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
       c1Kk0: // global
           I64[Sp - 8] = block_c1KjN_info;
           _s1Kdp::P64 = P64[R1 + 6];
           _s1Kdq::P64 = P64[R1 + 14];
           R1 = _s1Kdl::P64;
           P64[Sp] = _s1Kdq::P64;
           P64[Sp + 24] = _s1Kdp::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1KjH_info" {
     block_c1KjH_info:
         const _c1KjH;
         const 3;
         const 30;
 },
 _c1KjN() //  [R1]
         { []
         }
     {offset
       c1KjN: // global
           _s1Kdq::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c1KjP_info;
           R3 = _s1Kdq::P64;
           R2 = P64[Sp + 32];
           _s1Kdt::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 32] = _s1Kdt::P64;
           Sp = Sp + 8;
           call go_s1Kdk_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1KjN_info" {
     block_c1KjN_info:
         const _c1KjN;
         const 4;
         const 30;
 },
 _c1KjP() //  [R1]
         { []
         }
     {offset
       c1KjP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1Kkb; else goto c1Kka;
       c1Kkb: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Kka: // global
           I64[Hp - 32] = sat_s1Kdx_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1KjP_info" {
     block_c1KjP_info:
         const _c1KjP;
         const 131;
         const 30;
 },
 GHC.ST.$w$csconcat_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1Kkd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Kkh; else goto c1Kkg;
       c1Kkh: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$w$csconcat_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Kkg: // global
           I64[Hp - 8] = go_s1Kdk_info;
           P64[Hp] = R2;
           _s1Kdh::P64 = R3;
           R3 = R4;
           R2 = _s1Kdh::P64;
           R1 = Hp - 5;
           call go_s1Kdk_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$w$csconcat_info" {
     GHC.ST.$w$csconcat_info:
         const GHC.ST.$w$csconcat_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.814953869 UTC

[section ""data" . GHC.ST.$fSemigroupST1_closure" {
     GHC.ST.$fSemigroupST1_closure:
         const GHC.ST.$fSemigroupST1_info;
 },
 GHC.ST.$fSemigroupST1_entry() //  [R2, R3]
         { []
         }
     {offset
       c1KkZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Kl0; else goto c1Kl1;
       c1Kl0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Kl1: // global
           I64[Sp - 16] = block_c1KkW_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u1Kl5; else goto c1KkX;
       u1Kl5: // global
           call _c1KkW(R1) args: 0, res: 0, upd: 0;
       c1KkX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fSemigroupST1_info" {
     GHC.ST.$fSemigroupST1_info:
         const GHC.ST.$fSemigroupST1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c1KkW() //  [R1]
         { []
         }
     {offset
       c1KkW: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.ST.$w$csconcat_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1KkW_info" {
     block_c1KkW_info:
         const _c1KkW;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.823094137 UTC

[section ""data" . GHC.ST.$fSemigroupST_closure" {
     GHC.ST.$fSemigroupST_closure:
         const GHC.ST.$fSemigroupST_info;
         const 0;
 },
 sat_s1KdH_entry() //  [R1, R2]
         { []
         }
     {offset
       c1Klp: // global
           R3 = R2;
           R2 = P64[R1 + 7];
           call GHC.ST.$fSemigroupST_$cstimes_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1KdH_info" {
     sat_s1KdH_info:
         const sat_s1KdH_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1KiG_srt+8;
 },
 sat_s1KdG_entry() //  [R1, R2]
         { []
         }
     {offset
       c1Klx: // global
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.ST.$fSemigroupST1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1KdG_info" {
     sat_s1KdG_info:
         const sat_s1KdG_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 sat_s1KdF_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1KlF: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call GHC.ST.$fSemigroupST2_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1KdF_info" {
     sat_s1KdF_info:
         const sat_s1KdF_entry;
         const 1;
         const 9;
         const 12884901903;
 },
 GHC.ST.$fSemigroupST_entry() //  [R2]
         { []
         }
     {offset
       c1KlJ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c1KlN; else goto c1KlM;
       c1KlN: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KlM: // global
           I64[Hp - 72] = sat_s1KdH_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1KdG_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s1KdF_info;
           P64[Hp - 32] = R2;
           I64[Hp - 24] = GHC.Base.C:Semigroup_con_info;
           P64[Hp - 16] = Hp - 37;
           P64[Hp - 8] = Hp - 54;
           P64[Hp] = Hp - 71;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fSemigroupST_info" {
     GHC.ST.$fSemigroupST_info:
         const GHC.ST.$fSemigroupST_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1KiG_srt+8;
 },
 section ""data" . GHC.ST.$fSemigroupST_$cstimes_closure" {
     GHC.ST.$fSemigroupST_$cstimes_closure:
         const GHC.ST.$fSemigroupST_$cstimes_info;
         const 0;
 },
 sat_s1KdK_entry() //  [R1]
         { []
         }
     {offset
       c1KlW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1KlX; else goto c1KlY;
       c1KlX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1KlY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ST.$fSemigroupST_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1KdK_info" {
     sat_s1KdK_info:
         const sat_s1KdK_entry;
         const 1;
         const 4294967312;
         const S1KiG_srt+16;
 },
 GHC.ST.$fSemigroupST_$cstimes_entry() //  [R2, R3]
         { []
         }
     {offset
       c1KlZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1Km3; else goto c1Km2;
       c1Km3: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fSemigroupST_$cstimes_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Km2: // global
           I64[Hp - 16] = sat_s1KdK_info;
           P64[Hp] = R2;
           _s1KdJ::P64 = R3;
           R3 = Hp - 16;
           R2 = _s1KdJ::P64;
           R1 = Data.Semigroup.Internal.stimesDefault_closure;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fSemigroupST_$cstimes_info" {
     GHC.ST.$fSemigroupST_$cstimes_info:
         const GHC.ST.$fSemigroupST_$cstimes_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S1KiG_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.837426685 UTC

[section ""data" . GHC.ST.$fMonoidST_$cp1Monoid_closure" {
     GHC.ST.$fMonoidST_$cp1Monoid_closure:
         const GHC.ST.$fMonoidST_$cp1Monoid_info;
         const 0;
 },
 sat_s1KdM_entry() //  [R1]
         { []
         }
     {offset
       c1KmH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1KmI; else goto c1KmJ;
       c1KmI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1KmJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1KdM_info" {
     sat_s1KdM_info:
         const sat_s1KdM_entry;
         const 1;
         const 16;
 },
 GHC.ST.$fMonoidST_$cp1Monoid_entry() //  [R2]
         { []
         }
     {offset
       c1KmK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1KmO; else goto c1KmN;
       c1KmO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.ST.$fMonoidST_$cp1Monoid_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KmN: // global
           I64[Hp - 16] = sat_s1KdM_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           call GHC.ST.$fSemigroupST_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fMonoidST_$cp1Monoid_info" {
     GHC.ST.$fMonoidST_$cp1Monoid_info:
         const GHC.ST.$fMonoidST_$cp1Monoid_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S1KiG_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.844926361 UTC

[section ""data" . $cmappend_r1JzA_closure" {
     $cmappend_r1JzA_closure:
         const $cmappend_r1JzA_info;
 },
 sat_s1KdY_entry() //  [R1]
         { []
         }
     {offset
       c1Knd: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1Kne; else goto c1Knf;
       c1Kne: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Knf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c1Knb_info;
           R2 = P64[R1 + 16];
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.$p1Monoid_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1KdY_info" {
     sat_s1KdY_info:
         const sat_s1KdY_entry;
         const 3;
         const 15;
 },
 _c1Knb() //  [R1]
         { []
         }
     {offset
       c1Knb: // global
           R2 = R1;
           I64[Sp] = stg_ap_pp_info;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1Knb_info" {
     block_c1Knb_info:
         const _c1Knb;
         const 2;
         const 30;
 },
 $cmappend_r1JzA_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1Knj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1Knk; else goto c1Knl;
       c1Knk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $cmappend_r1JzA_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Knl: // global
           I64[Sp - 24] = block_c1Kn3_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $cmappend_r1JzA_info" {
     $cmappend_r1JzA_info:
         const $cmappend_r1JzA_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c1Kn3() //  [R1]
         { []
         }
     {offset
       c1Kn3: // global
           I64[Sp] = block_c1Kn5_info;
           _s1KdT::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1KdT::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Kn3_info" {
     block_c1Kn3_info:
         const _c1Kn3;
         const 2;
         const 30;
 },
 _c1Kn5() //  [R1]
         { []
         }
     {offset
       c1Kn5: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1Knp; else goto c1Kno;
       c1Knp: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1Kno: // global
           I64[Hp - 32] = sat_s1KdY_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Kn5_info" {
     block_c1Kn5_info:
         const _c1Kn5;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.856366783 UTC

[section ""data" . GHC.ST.$fMonoidST_$cmappend_closure" {
     GHC.ST.$fMonoidST_$cmappend_closure:
         const GHC.ST.$fMonoidST_$cmappend_info;
 },
 GHC.ST.$fMonoidST_$cmappend_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c1KnX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $cmappend_r1JzA_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fMonoidST_$cmappend_info" {
     GHC.ST.$fMonoidST_$cmappend_info:
         const GHC.ST.$fMonoidST_$cmappend_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.863278777 UTC

[section ""data" . GHC.ST.$fMonoidST1_closure" {
     GHC.ST.$fMonoidST1_closure:
         const GHC.ST.$fMonoidST1_info;
 },
 $dSemigroup_s1Ke2_entry() //  [R1]
         { []
         }
     {offset
       c1Koc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Kod; else goto c1Koe;
       c1Kod: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Koe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.$p1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . $dSemigroup_s1Ke2_info" {
     $dSemigroup_s1Ke2_info:
         const $dSemigroup_s1Ke2_entry;
         const 1;
         const 16;
 },
 lvl_s1Ke3_entry() //  [R1]
         { []
         }
     {offset
       c1Koj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Kok; else goto c1Kol;
       c1Kok: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Kol: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl_s1Ke3_info" {
     lvl_s1Ke3_info:
         const lvl_s1Ke3_entry;
         const 1;
         const 16;
 },
 sat_s1Keg_entry() //  [R1]
         { []
         }
     {offset
       c1KoF: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c1KoG; else goto c1KoH;
       c1KoG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1KoH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[R1 + 24];
           P64[Sp - 24] = P64[R1 + 32];
           Sp = Sp - 40;
           call GHC.Base.<>_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Keg_info" {
     sat_s1Keg_info:
         const sat_s1Keg_entry;
         const 3;
         const 15;
 },
 go_s1Ke4_entry() //  [R1, R2]
         { []
         }
     {offset
       c1KoM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c1KoN; else goto c1KoO;
       c1KoN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KoO: // global
           I64[Sp - 32] = block_c1Kor_info;
           _s1Ke4::P64 = R1;
           _s1Ke2::P64 = P64[R1 + 6];
           _s1Ke3::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 24] = _s1Ke2::P64;
           P64[Sp - 16] = _s1Ke3::P64;
           P64[Sp - 8] = _s1Ke4::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u1KoW; else goto c1Kos;
       u1KoW: // global
           call _c1Kor(R1) args: 0, res: 0, upd: 0;
       c1Kos: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1Ke4_info" {
     go_s1Ke4_info:
         const go_s1Ke4_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _c1Kor() //  [R1]
         { []
         }
     {offset
       c1Kor: // global
           if (R1 & 7 == 1) goto c1KoJ; else goto c1KoK;
       c1KoJ: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c1KoK: // global
           I64[Sp] = block_c1Kox_info;
           _s1Ke9::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 16] = _s1Ke9::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Kor_info" {
     block_c1Kor_info:
         const _c1Kor;
         const 3;
         const 30;
 },
 _c1Kox() //  [R1]
         { []
         }
     {offset
       c1Kox: // global
           I64[Sp] = block_c1Koz_info;
           R2 = P64[Sp + 16];
           _s1Kec::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s1Kec::P64;
           call go_s1Ke4_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Kox_info" {
     block_c1Kox_info:
         const _c1Kox;
         const 3;
         const 30;
 },
 _c1Koz() //  [R1]
         { []
         }
     {offset
       c1Koz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c1KoV; else goto c1KoU;
       c1KoV: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1KoU: // global
           I64[Hp - 32] = sat_s1Keg_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = R1;
           R1 = Hp - 32;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Koz_info" {
     block_c1Koz_info:
         const _c1Koz;
         const 131;
         const 30;
 },
 GHC.ST.$fMonoidST1_entry() //  [R2, R3]
         { []
         }
     {offset
       c1KoX: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c1Kp1; else goto c1Kp0;
       c1Kp1: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ST.$fMonoidST1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c1Kp0: // global
           I64[Hp - 64] = $dSemigroup_s1Ke2_info;
           P64[Hp - 48] = R2;
           I64[Hp - 40] = lvl_s1Ke3_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = go_s1Ke4_info;
           P64[Hp - 8] = Hp - 64;
           P64[Hp] = Hp - 40;
           R2 = R3;
           R1 = Hp - 14;
           call go_s1Ke4_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fMonoidST1_info" {
     GHC.ST.$fMonoidST1_info:
         const GHC.ST.$fMonoidST1_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.882286323 UTC

[section ""data" . GHC.ST.$fMonoidST_closure" {
     GHC.ST.$fMonoidST_closure:
         const GHC.ST.$fMonoidST_info;
         const 0;
 },
 sat_s1Ken_entry() //  [R1, R2]
         { []
         }
     {offset
       c1Kq0: // global
           R3 = R2;
           R2 = P64[R1 + 6];
           call GHC.ST.$fMonoidST1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Ken_info" {
     sat_s1Ken_info:
         const sat_s1Ken_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 sat_s1Kem_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c1Kq8: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call GHC.ST.$fMonoidST_$cmappend_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Kem_info" {
     sat_s1Kem_info:
         const sat_s1Kem_entry;
         const 1;
         const 9;
         const 12884901903;
 },
 sat_s1Kek_entry() //  [R1]
         { []
         }
     {offset
       c1Kqk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Kql; else goto c1Kqm;
       c1Kql: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Kqm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.mempty_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Kek_info" {
     sat_s1Kek_info:
         const sat_s1Kek_entry;
         const 1;
         const 16;
 },
 sat_s1Kel_entry() //  [R1]
         { []
         }
     {offset
       c1Kqn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1Kqr; else goto c1Kqq;
       c1Kqr: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c1Kqq: // global
           _s1Keh::P64 = P64[R1 + 7];
           I64[Hp - 16] = sat_s1Kek_info;
           P64[Hp] = _s1Keh::P64;
           R1 = Hp - 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Kel_info" {
     sat_s1Kel_info:
         const sat_s1Kel_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_s1Kei_entry() //  [R1]
         { []
         }
     {offset
       c1Kqw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Kqx; else goto c1Kqy;
       c1Kqx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Kqy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ST.$fMonoidST_$cp1Monoid_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Kei_info" {
     sat_s1Kei_info:
         const sat_s1Kei_entry;
         const 1;
         const 4294967312;
         const S1KiG_srt+32;
 },
 GHC.ST.$fMonoidST_entry() //  [R2]
         { []
         }
     {offset
       c1KqA: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c1KqE; else goto c1KqD;
       c1KqE: // global
           HpAlloc = 112;
           R2 = R2;
           R1 = GHC.ST.$fMonoidST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KqD: // global
           I64[Hp - 104] = sat_s1Ken_info;
           P64[Hp - 96] = R2;
           I64[Hp - 88] = sat_s1Kem_info;
           P64[Hp - 80] = R2;
           I64[Hp - 72] = sat_s1Kel_info;
           P64[Hp - 64] = R2;
           I64[Hp - 56] = sat_s1Kei_info;
           P64[Hp - 40] = R2;
           I64[Hp - 32] = GHC.Base.C:Monoid_con_info;
           P64[Hp - 24] = Hp - 56;
           P64[Hp - 16] = Hp - 71;
           P64[Hp - 8] = Hp - 85;
           P64[Hp] = Hp - 102;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fMonoidST_info" {
     GHC.ST.$fMonoidST_info:
         const GHC.ST.$fMonoidST_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1KiG_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.894321608 UTC

[section ""cstring" . GHC.ST.$fShowST4_bytes" {
     GHC.ST.$fShowST4_bytes:
         I8[] [60,60,83,84,32,97,99,116,105,111,110,62,62]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.896678263 UTC

[section ""data" . GHC.ST.$fShowST3_closure" {
     GHC.ST.$fShowST3_closure:
         const GHC.ST.$fShowST3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.ST.$fShowST3_entry() //  [R1]
         { []
         }
     {offset
       c1Krl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1Krm; else goto c1Krn;
       c1Krm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Krn: // global
           (_c1Kri::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c1Kri::I64 == 0) goto c1Krk; else goto c1Krj;
       c1Krk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c1Krj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c1Kri::I64;
           R2 = GHC.ST.$fShowST4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.ST.$fShowST3_info" {
     GHC.ST.$fShowST3_info:
         const GHC.ST.$fShowST3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.900752612 UTC

[section ""data" . GHC.ST.$fShowST2_closure" {
     GHC.ST.$fShowST2_closure:
         const GHC.ST.$fShowST2_info;
         const 0;
 },
 GHC.ST.$fShowST2_entry() //  [R2]
         { []
         }
     {offset
       c1KrA: // global
           R3 = R2;
           R2 = GHC.ST.$fShowST3_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fShowST2_info" {
     GHC.ST.$fShowST2_info:
         const GHC.ST.$fShowST2_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S1KiG_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.904916551 UTC

[section ""data" . GHC.ST.$fShowST_$cshowsPrec_closure" {
     GHC.ST.$fShowST_$cshowsPrec_closure:
         const GHC.ST.$fShowST_$cshowsPrec_info;
         const 0;
 },
 GHC.ST.$fShowST_$cshowsPrec_entry() //  [R4]
         { []
         }
     {offset
       c1KrL: // global
           R2 = R4;
           call GHC.ST.$fShowST2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fShowST_$cshowsPrec_info" {
     GHC.ST.$fShowST_$cshowsPrec_info:
         const GHC.ST.$fShowST_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S1KiG_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.908368352 UTC

[section ""data" . GHC.ST.$fShowST_$cshow_closure" {
     GHC.ST.$fShowST_$cshow_closure:
         const GHC.ST.$fShowST_$cshow_info;
         const 0;
 },
 GHC.ST.$fShowST_$cshow_entry() //  []
         { []
         }
     {offset
       c1KrW: // global
           R1 = GHC.ST.$fShowST3_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fShowST_$cshow_info" {
     GHC.ST.$fShowST_$cshow_info:
         const GHC.ST.$fShowST_$cshow_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S1KiG_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.911704793 UTC

[section ""data" . GHC.ST.$fShowST1_closure" {
     GHC.ST.$fShowST1_closure:
         const GHC.ST.$fShowST1_info;
         const 0;
 },
 GHC.ST.$fShowST1_entry() //  [R3]
         { []
         }
     {offset
       c1Ks8: // global
           R2 = R3;
           call GHC.ST.$fShowST2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fShowST1_info" {
     GHC.ST.$fShowST1_info:
         const GHC.ST.$fShowST1_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S1KiG_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.915886282 UTC

[section ""data" . GHC.ST.$fShowST_$cshowList_closure" {
     GHC.ST.$fShowST_$cshowList_closure:
         const GHC.ST.$fShowST_$cshowList_info;
         const 0;
 },
 GHC.ST.$fShowST_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c1Ksj: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.ST.$fShowST1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.$fShowST_$cshowList_info" {
     GHC.ST.$fShowST_$cshowList_info:
         const GHC.ST.$fShowST_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S1KiG_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.919175665 UTC

[section ""data" . GHC.ST.$fShowST_closure" {
     GHC.ST.$fShowST_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.ST.$fShowST_$cshowsPrec_closure+3;
         const GHC.ST.$fShowST_$cshow_closure+1;
         const GHC.ST.$fShowST_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.921871133 UTC

[section ""data" . GHC.ST.liftST_closure" {
     GHC.ST.liftST_closure:
         const GHC.ST.liftST_info;
 },
 GHC.ST.liftST_entry() //  [R2]
         { []
         }
     {offset
       c1Ksy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Ksz; else goto c1KsA;
       c1Ksz: // global
           R2 = R2;
           R1 = GHC.ST.liftST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KsA: // global
           I64[Sp - 8] = block_c1Ksv_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.liftST_info" {
     GHC.ST.liftST_info:
         const GHC.ST.liftST_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c1Ksv() //  [R1]
         { []
         }
     {offset
       c1Ksv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1KsD; else goto c1KsC;
       c1KsD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c1KsC: // global
           I64[Hp - 8] = GHC.ST.STret_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Ksv_info" {
     block_c1Ksv_info:
         const _c1Ksv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.929383396 UTC

[section ""data" . GHC.ST.fixST1_closure" {
     GHC.ST.fixST1_closure:
         const GHC.ST.fixST1_info;
 },
 ans_s1Kez_entry() //  [R1]
         { []
         }
     {offset
       c1Kt1: // global
           _s1Kez::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto c1Kt2; else goto c1Kt3;
       c1Kt3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1Kt5; else goto c1Kt4;
       c1Kt5: // global
           HpAlloc = 24;
           goto c1Kt2;
       c1Kt2: // global
           R1 = _s1Kez::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Kt4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1Kez::P64;
           _s1Kex::P64 = P64[_s1Kez::P64 + 16];
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _s1Kez::P64;
           I64[Sp - 24] = block_c1KsY_info;
           R2 = Hp - 16;
           R1 = _s1Kex::P64;
           Sp = Sp - 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ans_s1Kez_info" {
     ans_s1Kez_info:
         const ans_s1Kez_entry;
         const 1;
         const 16;
 },
 _c1KsY() //  [R1]
         { []
         }
     {offset
       c1KsY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Kt8; else goto c1Kt7;
       c1Kt8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c1Kt7: // global
           I64[Hp - 8] = GHC.ST.STret_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1KsY_info" {
     block_c1KsY_info:
         const _c1KsY;
         const 0;
         const 30;
 },
 GHC.ST.fixST1_entry() //  [R2]
         { []
         }
     {offset
       c1Ktc: // global
           _s1Kex::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c1Ktd; else goto c1Kte;
       c1Kte: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1Ktg; else goto c1Ktf;
       c1Ktg: // global
           HpAlloc = 24;
           goto c1Ktd;
       c1Ktd: // global
           R2 = _s1Kex::P64;
           R1 = GHC.ST.fixST1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Ktf: // global
           I64[Hp - 16] = ans_s1Kez_info;
           P64[Hp] = _s1Kex::P64;
           I64[Sp - 8] = block_c1Kt9_info;
           R1 = Hp - 16;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u1Ktk; else goto c1Kta;
       u1Ktk: // global
           call _c1Kt9(R1) args: 0, res: 0, upd: 0;
       c1Kta: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.fixST1_info" {
     GHC.ST.fixST1_info:
         const GHC.ST.fixST1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c1Kt9() //  [R1]
         { []
         }
     {offset
       c1Kt9: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Kt9_info" {
     block_c1Kt9_info:
         const _c1Kt9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.939248593 UTC

[section ""data" . GHC.ST.fixST_closure" {
     GHC.ST.fixST_closure:
         const GHC.ST.fixST_info;
 },
 GHC.ST.fixST_entry() //  [R2]
         { []
         }
     {offset
       c1KtN: // global
           R2 = R2;
           call GHC.ST.fixST1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.fixST_info" {
     GHC.ST.fixST_info:
         const GHC.ST.fixST_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.943509694 UTC

[section ""data" . GHC.ST.unsafeDupableInterleaveST1_closure" {
     GHC.ST.unsafeDupableInterleaveST1_closure:
         const GHC.ST.unsafeDupableInterleaveST1_info;
 },
 sat_s1KeP_entry() //  [R1]
         { []
         }
     {offset
       c1Ku4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c1Ku5; else goto c1Ku6;
       c1Ku5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c1Ku6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c1Ku2_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1KeP_info" {
     sat_s1KeP_info:
         const sat_s1KeP_entry;
         const 1;
         const 16;
 },
 _c1Ku2() //  [R1]
         { []
         }
     {offset
       c1Ku2: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c1Ku2_info" {
     block_c1Ku2_info:
         const _c1Ku2;
         const 0;
         const 30;
 },
 GHC.ST.unsafeDupableInterleaveST1_entry() //  [R2]
         { []
         }
     {offset
       c1Ku8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c1Kuc; else goto c1Kub;
       c1Kuc: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.ST.unsafeDupableInterleaveST1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Kub: // global
           I64[Hp - 16] = sat_s1KeP_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.unsafeDupableInterleaveST1_info" {
     GHC.ST.unsafeDupableInterleaveST1_info:
         const GHC.ST.unsafeDupableInterleaveST1_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.951025183 UTC

[section ""data" . GHC.ST.unsafeDupableInterleaveST_closure" {
     GHC.ST.unsafeDupableInterleaveST_closure:
         const GHC.ST.unsafeDupableInterleaveST_info;
 },
 GHC.ST.unsafeDupableInterleaveST_entry() //  [R2]
         { []
         }
     {offset
       c1Kuw: // global
           R2 = R2;
           call GHC.ST.unsafeDupableInterleaveST1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.unsafeDupableInterleaveST_info" {
     GHC.ST.unsafeDupableInterleaveST_info:
         const GHC.ST.unsafeDupableInterleaveST_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.955099229 UTC

[section ""data" . unsafeInterleaveST1_r1JzB_closure" {
     unsafeInterleaveST1_r1JzB_closure:
         const unsafeInterleaveST1_r1JzB_info;
 },
 sat_s1KeU_entry() //  [R1]
         { []
         }
     {offset
       c1KuO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c1KuP; else goto c1KuQ;
       c1KuP: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c1KuQ: // global
           I64[Sp - 16] = block_c1KuM_info;
           P64[Sp - 8] = P64[R1 + 7];
           Sp = Sp - 16;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1KeU_info" {
     sat_s1KeU_info:
         const sat_s1KeU_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _c1KuM() //  []
         { []
         }
     {offset
       c1KuM: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1KuM_info" {
     block_c1KuM_info:
         const _c1KuM;
         const 1;
         const 30;
 },
 unsafeInterleaveST1_r1JzB_entry() //  [R2]
         { []
         }
     {offset
       c1KuS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1KuW; else goto c1KuV;
       c1KuW: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = unsafeInterleaveST1_r1JzB_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1KuV: // global
           I64[Hp - 8] = sat_s1KeU_info;
           P64[Hp] = R2;
           R2 = Hp - 7;
           call GHC.ST.unsafeDupableInterleaveST_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . unsafeInterleaveST1_r1JzB_info" {
     unsafeInterleaveST1_r1JzB_info:
         const unsafeInterleaveST1_r1JzB_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.962470288 UTC

[section ""data" . GHC.ST.unsafeInterleaveST_closure" {
     GHC.ST.unsafeInterleaveST_closure:
         const GHC.ST.unsafeInterleaveST_info;
 },
 GHC.ST.unsafeInterleaveST_entry() //  [R2]
         { []
         }
     {offset
       c1Kvf: // global
           R2 = R2;
           call unsafeInterleaveST1_r1JzB_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.unsafeInterleaveST_info" {
     GHC.ST.unsafeInterleaveST_info:
         const GHC.ST.unsafeInterleaveST_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.966093312 UTC

[section ""data" . GHC.ST.runST_closure" {
     GHC.ST.runST_closure:
         const GHC.ST.runST_info;
 },
 GHC.ST.runST_entry() //  [R2]
         { []
         }
     {offset
       c1Kvs: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c1Kvt; else goto c1Kvu;
       c1Kvt: // global
           R2 = R2;
           R1 = GHC.ST.runST_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Kvu: // global
           I64[Sp - 8] = block_c1Kvq_info;
           R1 = R2;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.runST_info" {
     GHC.ST.runST_info:
         const GHC.ST.runST_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c1Kvq() //  [R1]
         { []
         }
     {offset
       c1Kvq: // global
           R1 = R1;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c1Kvq_info" {
     block_c1Kvq_info:
         const _c1Kvq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.970963913 UTC

[section ""cstring" . GHC.ST.$trModule4_bytes" {
     GHC.ST.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.972671561 UTC

[section ""data" . GHC.ST.$trModule3_closure" {
     GHC.ST.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.974751327 UTC

[section ""cstring" . GHC.ST.$trModule2_bytes" {
     GHC.ST.$trModule2_bytes:
         I8[] [71,72,67,46,83,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.976402551 UTC

[section ""data" . GHC.ST.$trModule1_closure" {
     GHC.ST.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.978391084 UTC

[section ""data" . GHC.ST.$trModule_closure" {
     GHC.ST.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ST.$trModule3_closure+1;
         const GHC.ST.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.980145385 UTC

[section ""data" . $krep_r1JzC_closure" {
     $krep_r1JzC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'LiftedRep_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.981910736 UTC

[section ""data" . $krep1_r1JzD_closure" {
     $krep1_r1JzD_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRuntimeRep_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.983996082 UTC

[section ""data" . $krep2_r1JzE_closure" {
     $krep2_r1JzE_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.985710708 UTC

[section ""data" . $krep3_r1JzF_closure" {
     $krep3_r1JzF_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.987416441 UTC

[section ""data" . $krep4_r1JzG_closure" {
     $krep4_r1JzG_closure:
         const :_con_info;
         const $krep3_r1JzF_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.989098278 UTC

[section ""data" . $krep5_r1JzH_closure" {
     $krep5_r1JzH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcState#_closure;
         const $krep4_r1JzG_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.991148217 UTC

[section ""data" . $krep6_r1JzI_closure" {
     $krep6_r1JzI_closure:
         const :_con_info;
         const $krep1_r1JzD_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.992806346 UTC

[section ""data" . $krep7_r1JzJ_closure" {
     $krep7_r1JzJ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'[]_closure;
         const $krep6_r1JzI_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.994984844 UTC

[section ""data" . $krep8_r1JzK_closure" {
     $krep8_r1JzK_closure:
         const :_con_info;
         const $krep7_r1JzJ_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.996694157 UTC

[section ""data" . $krep9_r1JzL_closure" {
     $krep9_r1JzL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc'TupleRep_closure;
         const $krep8_r1JzK_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:31.998636838 UTC

[section ""data" . $krep10_r1JzM_closure" {
     $krep10_r1JzM_closure:
         const :_con_info;
         const $krep2_r1JzE_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.000329136 UTC

[section ""data" . $krep11_r1JzN_closure" {
     $krep11_r1JzN_closure:
         const :_con_info;
         const $krep5_r1JzH_closure+1;
         const $krep10_r1JzM_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.002014025 UTC

[section ""data" . $krep12_r1JzO_closure" {
     $krep12_r1JzO_closure:
         const :_con_info;
         const $krep_r1JzC_closure+1;
         const $krep11_r1JzN_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.00365547 UTC

[section ""data" . $krep13_r1JzP_closure" {
     $krep13_r1JzP_closure:
         const :_con_info;
         const $krep9_r1JzL_closure+1;
         const $krep12_r1JzO_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.00574091 UTC

[section ""data" . $krep14_r1JzQ_closure" {
     $krep14_r1JzQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc(#,#)_closure;
         const $krep13_r1JzP_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.007430119 UTC

[section ""data" . $krep15_r1JzR_closure" {
     $krep15_r1JzR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r1JzH_closure+1;
         const $krep14_r1JzQ_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.009057408 UTC

[section ""cstring" . GHC.ST.$tcST2_bytes" {
     GHC.ST.$tcST2_bytes:
         I8[] [83,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.011015492 UTC

[section ""data" . GHC.ST.$tcST1_closure" {
     GHC.ST.$tcST1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tcST2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.012775118 UTC

[section ""data" . GHC.ST.$tcST_closure" {
     GHC.ST.$tcST_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tcST1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 6436416558974291297;
         const 634350057185658725;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.014755035 UTC

[section ""data" . $krep16_r1JzS_closure" {
     $krep16_r1JzS_closure:
         const :_con_info;
         const $krep3_r1JzF_closure+2;
         const $krep10_r1JzM_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.016849232 UTC

[section ""data" . $krep17_r1JzT_closure" {
     $krep17_r1JzT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ST.$tcST_closure+1;
         const $krep16_r1JzS_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.018602342 UTC

[section ""data" . GHC.ST.$tc'ST1_closure" {
     GHC.ST.$tc'ST1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep15_r1JzR_closure+4;
         const $krep17_r1JzT_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.020289997 UTC

[section ""cstring" . GHC.ST.$tc'ST3_bytes" {
     GHC.ST.$tc'ST3_bytes:
         I8[] [39,83,84]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.022075832 UTC

[section ""data" . GHC.ST.$tc'ST2_closure" {
     GHC.ST.$tc'ST2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tc'ST3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.023830238 UTC

[section ""data" . GHC.ST.$tc'ST_closure" {
     GHC.ST.$tc'ST_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tc'ST2_closure+1;
         const GHC.ST.$tc'ST1_closure+4;
         const 13769291328326942007;
         const 10130644975726413154;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.026086194 UTC

[section ""cstring" . GHC.ST.$tcSTret2_bytes" {
     GHC.ST.$tcSTret2_bytes:
         I8[] [83,84,114,101,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.028161467 UTC

[section ""data" . GHC.ST.$tcSTret1_closure" {
     GHC.ST.$tcSTret1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tcSTret2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.029993326 UTC

[section ""data" . GHC.ST.$tcSTret_closure" {
     GHC.ST.$tcSTret_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tcSTret1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 18266429679521839845;
         const 6736124203785980802;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.031758419 UTC

[section ""data" . $krep18_r1JzU_closure" {
     $krep18_r1JzU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ST.$tcSTret_closure+1;
         const $krep16_r1JzS_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.033643015 UTC

[section ""data" . $krep19_r1JzV_closure" {
     $krep19_r1JzV_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r1JzE_closure+2;
         const $krep18_r1JzU_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.035279638 UTC

[section ""data" . GHC.ST.$tc'STret1_closure" {
     GHC.ST.$tc'STret1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r1JzH_closure+1;
         const $krep19_r1JzV_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.036990234 UTC

[section ""cstring" . GHC.ST.$tc'STret3_bytes" {
     GHC.ST.$tc'STret3_bytes:
         I8[] [39,83,84,114,101,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.03935128 UTC

[section ""data" . GHC.ST.$tc'STret2_closure" {
     GHC.ST.$tc'STret2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ST.$tc'STret3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.041065526 UTC

[section ""data" . GHC.ST.$tc'STret_closure" {
     GHC.ST.$tc'STret_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ST.$trModule_closure+1;
         const GHC.ST.$tc'STret2_closure+1;
         const GHC.ST.$tc'STret1_closure+4;
         const 12272761794237483025;
         const 16570602352537544279;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.043592172 UTC

[section ""data" . GHC.ST.STret_closure" {
     GHC.ST.STret_closure:
         const GHC.ST.STret_info;
 },
 GHC.ST.STret_entry() //  [R2]
         { []
         }
     {offset
       c1Kwn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c1Kwr; else goto c1Kwq;
       c1Kwr: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.ST.STret_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c1Kwq: // global
           I64[Hp - 8] = GHC.ST.STret_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.STret_info" {
     GHC.ST.STret_info:
         const GHC.ST.STret_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.047812863 UTC

[section ""cstring" . i1Kwz_str" {
     i1Kwz_str:
         I8[] [98,97,115,101,58,71,72,67,46,83,84,46,83,84,114,101,116]
 },
 GHC.ST.STret_con_entry() //  [R1]
         { []
         }
     {offset
       c1Kwy: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ST.STret_con_info" {
     GHC.ST.STret_con_info:
         const GHC.ST.STret_con_entry;
         const 1;
         const 2;
         const i1Kwz_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:32.051597469 UTC

[section ""relreadonly" . S1KiG_srt" {
     S1KiG_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.ST.$fSemigroupST_$cstimes_closure;
         const GHC.ST.$fSemigroupST_closure;
         const Data.Semigroup.Internal.stimesDefault_closure;
         const GHC.ST.$fMonoidST_$cp1Monoid_closure;
         const GHC.ST.$fMonoidST_closure;
         const GHC.ST.$fShowST3_closure;
         const GHC.ST.$fShowST2_closure;
         const GHC.ST.$fShowST1_closure;
 }]

