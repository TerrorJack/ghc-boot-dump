
==================== Pre unarise: ====================
2018-03-16 15:55:13.485583923 UTC

GHC.Show.showsPrec
  :: forall a.
     GHC.Show.Show a =>
     GHC.Types.Int -> a -> GHC.Show.ShowS
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SLL),U(U,A,A)>] =
    [] \r [v_sC1t]
        case v_sC1t of {
          GHC.Show.C:Show v_sC1v [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
              v_sC1v;
        };

GHC.Show.show :: forall a. GHC.Show.Show a => a -> GHC.Base.String
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LSL),U(A,U,A)>] =
    [] \r [v_sC1y]
        case v_sC1y of {
          GHC.Show.C:Show _ [Occ=Dead] v_sC1B [Occ=Once] _ [Occ=Dead] ->
              v_sC1B;
        };

GHC.Show.showList
  :: forall a. GHC.Show.Show a => [a] -> GHC.Show.ShowS
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LLS),U(A,A,U)>] =
    [] \r [v_sC1D]
        case v_sC1D of {
          GHC.Show.C:Show _ [Occ=Dead] _ [Occ=Dead] v_sC1H [Occ=Once] ->
              v_sC1H;
        };

GHC.Show.showCommaSpace2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ", "#;

GHC.Show.showCommaSpace1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.showCommaSpace2;

GHC.Show.showLitChar13 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\\'#];

GHC.Show.asciiTab98 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NUL"#;

GHC.Show.asciiTab97 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab98;

GHC.Show.asciiTab96 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SOH"#;

GHC.Show.asciiTab95 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab96;

GHC.Show.asciiTab94 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "STX"#;

GHC.Show.asciiTab93 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab94;

GHC.Show.asciiTab92 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ETX"#;

GHC.Show.asciiTab91 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab92;

GHC.Show.asciiTab90 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EOT"#;

GHC.Show.asciiTab89 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab90;

GHC.Show.asciiTab88 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ENQ"#;

GHC.Show.asciiTab87 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab88;

GHC.Show.asciiTab86 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ACK"#;

GHC.Show.asciiTab85 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab86;

GHC.Show.asciiTab84 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BEL"#;

GHC.Show.asciiTab83 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab84;

GHC.Show.asciiTab82 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BS"#;

GHC.Show.asciiTab81 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab82;

GHC.Show.asciiTab80 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "HT"#;

GHC.Show.asciiTab79 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab80;

GHC.Show.asciiTab78 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LF"#;

GHC.Show.asciiTab77 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab78;

GHC.Show.asciiTab76 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "VT"#;

GHC.Show.asciiTab75 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab76;

GHC.Show.asciiTab74 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FF"#;

GHC.Show.asciiTab73 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab74;

GHC.Show.asciiTab72 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CR"#;

GHC.Show.asciiTab71 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab72;

GHC.Show.asciiTab70 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SO"#;

GHC.Show.asciiTab69 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab70;

GHC.Show.asciiTab68 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SI"#;

GHC.Show.asciiTab67 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab68;

GHC.Show.asciiTab66 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DLE"#;

GHC.Show.asciiTab65 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab66;

GHC.Show.asciiTab64 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC1"#;

GHC.Show.asciiTab63 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab64;

GHC.Show.asciiTab62 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC2"#;

GHC.Show.asciiTab61 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab62;

GHC.Show.asciiTab60 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC3"#;

GHC.Show.asciiTab59 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab60;

GHC.Show.asciiTab58 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC4"#;

GHC.Show.asciiTab57 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab58;

GHC.Show.asciiTab56 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NAK"#;

GHC.Show.asciiTab55 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab56;

GHC.Show.asciiTab54 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SYN"#;

GHC.Show.asciiTab53 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab54;

GHC.Show.asciiTab52 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ETB"#;

GHC.Show.asciiTab51 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab52;

GHC.Show.asciiTab50 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CAN"#;

GHC.Show.asciiTab49 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab50;

GHC.Show.asciiTab48 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EM"#;

GHC.Show.asciiTab47 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab48;

GHC.Show.asciiTab46 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SUB"#;

GHC.Show.asciiTab45 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab46;

GHC.Show.asciiTab44 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ESC"#;

GHC.Show.asciiTab43 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab44;

GHC.Show.asciiTab42 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FS"#;

GHC.Show.asciiTab41 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab42;

GHC.Show.asciiTab40 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GS"#;

GHC.Show.asciiTab39 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab40;

GHC.Show.asciiTab38 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RS"#;

GHC.Show.asciiTab37 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab38;

GHC.Show.asciiTab36 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "US"#;

GHC.Show.asciiTab35 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab36;

GHC.Show.asciiTab34 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SP"#;

GHC.Show.asciiTab33 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab34;

GHC.Show.asciiTab32 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab33 GHC.Types.[]];

GHC.Show.asciiTab31 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab35 GHC.Show.asciiTab32];

GHC.Show.asciiTab30 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab37 GHC.Show.asciiTab31];

GHC.Show.asciiTab29 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab39 GHC.Show.asciiTab30];

GHC.Show.asciiTab28 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab41 GHC.Show.asciiTab29];

GHC.Show.asciiTab27 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab43 GHC.Show.asciiTab28];

GHC.Show.asciiTab26 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab45 GHC.Show.asciiTab27];

GHC.Show.asciiTab25 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab47 GHC.Show.asciiTab26];

GHC.Show.asciiTab24 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab49 GHC.Show.asciiTab25];

GHC.Show.asciiTab23 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab51 GHC.Show.asciiTab24];

GHC.Show.asciiTab22 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab53 GHC.Show.asciiTab23];

GHC.Show.asciiTab21 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab55 GHC.Show.asciiTab22];

GHC.Show.asciiTab20 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab57 GHC.Show.asciiTab21];

GHC.Show.asciiTab19 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab59 GHC.Show.asciiTab20];

GHC.Show.asciiTab18 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab61 GHC.Show.asciiTab19];

GHC.Show.asciiTab17 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab63 GHC.Show.asciiTab18];

GHC.Show.asciiTab16 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab65 GHC.Show.asciiTab17];

GHC.Show.asciiTab15 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab67 GHC.Show.asciiTab16];

GHC.Show.asciiTab14 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab69 GHC.Show.asciiTab15];

GHC.Show.asciiTab13 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab71 GHC.Show.asciiTab14];

GHC.Show.asciiTab12 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab73 GHC.Show.asciiTab13];

GHC.Show.asciiTab11 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab75 GHC.Show.asciiTab12];

GHC.Show.asciiTab10 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab77 GHC.Show.asciiTab11];

GHC.Show.asciiTab9 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab79 GHC.Show.asciiTab10];

GHC.Show.asciiTab8 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab81 GHC.Show.asciiTab9];

GHC.Show.asciiTab7 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab83 GHC.Show.asciiTab8];

GHC.Show.asciiTab6 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab85 GHC.Show.asciiTab7];

GHC.Show.asciiTab5 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab87 GHC.Show.asciiTab6];

GHC.Show.asciiTab4 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab89 GHC.Show.asciiTab5];

GHC.Show.asciiTab3 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab91 GHC.Show.asciiTab4];

GHC.Show.asciiTab2 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab93 GHC.Show.asciiTab3];

GHC.Show.asciiTab1 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab95 GHC.Show.asciiTab2];

GHC.Show.asciiTab :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab97 GHC.Show.asciiTab1];

GHC.Show.$fShow(,)2 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [')'#];

GHC.Show.$fShow(,)4 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['('#];

GHC.Show.showLitChar1 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['-'#];

GHC.Show.$witos' [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int#
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [w_sC1I w1_sC1J]
        case <# [w_sC1I 10#] of {
          __DEFAULT ->
              case quotRemInt# [w_sC1I 10#] of {
                (#,#) ipv_sC1M [Occ=Once] ipv1_sC1N [Occ=Once] ->
                    case +# [48# ipv1_sC1N] of sat_sC1O {
                      __DEFAULT ->
                          case chr# [sat_sC1O] of sat_sC1P {
                            __DEFAULT ->
                                let {
                                  sat_sC1Q [Occ=Once] :: GHC.Types.Char
                                  [LclId] =
                                      CCCS GHC.Types.C#! [sat_sC1P]; } in
                                let {
                                  sat_sC1R [Occ=Once] :: GHC.Base.String
                                  [LclId] =
                                      CCCS :! [sat_sC1Q w1_sC1J];
                                } in  GHC.Show.$witos' ipv_sC1M sat_sC1R;
                          };
                    };
              };
          1# ->
              case +# [48# w_sC1I] of sat_sC1S {
                __DEFAULT ->
                    case chr# [sat_sC1S] of sat_sC1T {
                      __DEFAULT ->
                          let {
                            sat_sC1U [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                CCCS GHC.Types.C#! [sat_sC1T];
                          } in  (#,#) [sat_sC1U w1_sC1J];
                    };
              };
        };

GHC.Show.$witos [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [w_sC1V w1_sC1W]
        case <# [w_sC1V 0#] of {
          __DEFAULT -> GHC.Show.$witos' w_sC1V w1_sC1W;
          1# ->
              case w_sC1V of wild_sC1Y {
                __DEFAULT ->
                    let {
                      sat_sC23 [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [w1_sC1W wild_sC1Y] \u []
                              case negateInt# [wild_sC1Y] of sat_sC1Z {
                                __DEFAULT ->
                                    case GHC.Show.$witos' sat_sC1Z w1_sC1W of {
                                      (#,#) ww1_sC21 [Occ=Once] ww2_sC22 [Occ=Once] ->
                                          : [ww1_sC21 ww2_sC22];
                                    };
                              };
                    } in  (#,#) [GHC.Show.showLitChar1 sat_sC23];
                -9223372036854775808# ->
                    let {
                      sat_sC2g [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [w1_sC1W] \u []
                              case quotRemInt# [-9223372036854775808# 10#] of {
                                (#,#) ipv_sC25 [Occ=Once] ipv1_sC26 [Occ=Once] ->
                                    let {
                                      sat_sC2c [Occ=Once] :: GHC.Base.String
                                      [LclId] =
                                          [w1_sC1W ipv1_sC26] \u []
                                              case negateInt# [ipv1_sC26] of sat_sC28 {
                                                __DEFAULT ->
                                                    case GHC.Show.$witos' sat_sC28 w1_sC1W of {
                                                      (#,#) ww1_sC2a [Occ=Once]
                                                            ww2_sC2b [Occ=Once] ->
                                                          : [ww1_sC2a ww2_sC2b];
                                                    };
                                              };
                                    } in 
                                      case negateInt# [ipv_sC25] of sat_sC27 {
                                        __DEFAULT ->
                                            case GHC.Show.$witos' sat_sC27 sat_sC2c of {
                                              (#,#) ww1_sC2e [Occ=Once] ww2_sC2f [Occ=Once] ->
                                                  : [ww1_sC2e ww2_sC2f];
                                            };
                                      };
                              };
                    } in  (#,#) [GHC.Show.showLitChar1 sat_sC2g];
              };
        };

GHC.Show.$wshowSignedInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sC2h ww1_sC2i w_sC2j]
        case <# [ww1_sC2i 0#] of {
          __DEFAULT -> GHC.Show.$witos ww1_sC2i w_sC2j;
          1# ->
              case ># [ww_sC2h 6#] of {
                __DEFAULT -> GHC.Show.$witos ww1_sC2i w_sC2j;
                1# ->
                    let {
                      sat_sC2q [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [ww1_sC2i w_sC2j] \u []
                              let {
                                sat_sC2m [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    CCCS :! [GHC.Show.$fShow(,)2 w_sC2j];
                              } in 
                                case GHC.Show.$witos ww1_sC2i sat_sC2m of {
                                  (#,#) ww3_sC2o [Occ=Once] ww4_sC2p [Occ=Once] ->
                                      : [ww3_sC2o ww4_sC2p];
                                };
                    } in  (#,#) [GHC.Show.$fShow(,)4 sat_sC2q];
              };
        };

GHC.Show.showSignedInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Int -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sC2r w1_sC2s w2_sC2t]
        case w_sC2r of {
          GHC.Types.I# ww1_sC2v [Occ=Once] ->
              case w1_sC2s of {
                GHC.Types.I# ww3_sC2x [Occ=Once] ->
                    case GHC.Show.$wshowSignedInt ww1_sC2v ww3_sC2x w2_sC2t of {
                      (#,#) ww5_sC2z [Occ=Once] ww6_sC2A [Occ=Once] ->
                          : [ww5_sC2z ww6_sC2A];
                    };
              };
        };

GHC.Show.showLitChar12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\a"#;

GHC.Show.showLitChar11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\b"#;

GHC.Show.showLitChar10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\t"#;

GHC.Show.showLitChar9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\n"#;

GHC.Show.showLitChar8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\v"#;

GHC.Show.showLitChar7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\f"#;

GHC.Show.showLitChar6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\r"#;

GHC.Show.showLitChar5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\SO"#;

GHC.Show.showLitChar4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\&"#;

GHC.Show.showLitChar3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\\\"#;

GHC.Show.showLitChar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\DEL"#;

GHC.Show.$wshowLitChar [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Char# -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [ww_sC2B w_sC2C]
        case gtChar# [ww_sC2B '\DEL'#] of {
          __DEFAULT ->
              case ww_sC2B of ds_sC2E {
                __DEFAULT ->
                    case geChar# [ds_sC2E ' '#] of {
                      __DEFAULT ->
                          case ds_sC2E of ds1_sC2G {
                            __DEFAULT ->
                                let {
                                  sat_sC2I [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [ds1_sC2G] \u []
                                          case ord# [ds1_sC2G] of sat_sC2H {
                                            __DEFAULT -> GHC.List.$w!! GHC.Show.asciiTab sat_sC2H;
                                          }; } in
                                let {
                                  sat_sC2J [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      CCCS :! [GHC.Show.showLitChar13 sat_sC2I];
                                } in  GHC.Base.++ sat_sC2J w_sC2C;
                            '\a'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar12 w_sC2C;
                            '\b'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar11 w_sC2C;
                            '\t'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar10 w_sC2C;
                            '\n'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar9 w_sC2C;
                            '\v'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar8 w_sC2C;
                            '\f'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar7 w_sC2C;
                            '\r'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar6 w_sC2C;
                            '\SO'# ->
                                let {
                                  sat_sC2Q [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [w_sC2C] \u []
                                          case w_sC2C of wild_sC2K {
                                            [] -> [] [];
                                            : c_sC2L [Occ=Once!] _ [Occ=Dead] ->
                                                case c_sC2L of {
                                                  GHC.Types.C# x_sC2O [Occ=Once!] ->
                                                      case x_sC2O of {
                                                        __DEFAULT -> wild_sC2K;
                                                        'H'# ->
                                                            GHC.CString.unpackAppendCString#
                                                                GHC.Show.showLitChar4 wild_sC2K;
                                                      };
                                                };
                                          };
                                } in 
                                  GHC.CString.unpackAppendCString# GHC.Show.showLitChar5 sat_sC2Q;
                          };
                      1# ->
                          let {
                            sat_sC2R [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                CCCS GHC.Types.C#! [ds_sC2E];
                          } in  : [sat_sC2R w_sC2C];
                    };
                '\\'# ->
                    GHC.CString.unpackAppendCString# GHC.Show.showLitChar3 w_sC2C;
                '\DEL'# ->
                    GHC.CString.unpackAppendCString# GHC.Show.showLitChar2 w_sC2C;
              };
          1# ->
              let {
                sat_sC34 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ww_sC2B w_sC2C] \u []
                        let {
                          sat_sC30 [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              [w_sC2C] \u []
                                  case w_sC2C of wild_sC2T {
                                    [] -> [] [];
                                    : c_sC2U [Occ=Once!] _ [Occ=Dead] ->
                                        case c_sC2U of {
                                          GHC.Types.C# c1_sC2X ->
                                              case geChar# [c1_sC2X '0'#] of {
                                                __DEFAULT -> wild_sC2T;
                                                1# ->
                                                    case leChar# [c1_sC2X '9'#] of {
                                                      __DEFAULT -> wild_sC2T;
                                                      1# ->
                                                          GHC.CString.unpackAppendCString#
                                                              GHC.Show.showLitChar4 wild_sC2T;
                                                    };
                                              };
                                        };
                                  };
                        } in 
                          case ord# [ww_sC2B] of sat_sC2S {
                            __DEFAULT ->
                                case GHC.Show.$witos sat_sC2S sat_sC30 of {
                                  (#,#) ww2_sC32 [Occ=Once] ww3_sC33 [Occ=Once] ->
                                      : [ww2_sC32 ww3_sC33];
                                };
                          };
              } in  : [GHC.Show.showLitChar13 sat_sC34];
        };

GHC.Show.showLitChar [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Char -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S(S),1*U(U)><L,U>, Unf=OtherCon []] =
    [] \r [w_sC35 w1_sC36]
        case w_sC35 of {
          GHC.Types.C# ww1_sC38 [Occ=Once] ->
              GHC.Show.$wshowLitChar ww1_sC38 w1_sC36;
        };

GHC.Show.$dmshowsPrec
  :: forall a.
     GHC.Show.Show a =>
     GHC.Types.Int -> a -> GHC.Show.ShowS
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LC(S)L),1*U(A,1*C1(U),A)><L,A><L,U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sC39 ds_sC3a x_sC3b s_sC3c]
        case GHC.Show.show $dShow_sC39 x_sC3b of sat_sC3d {
          __DEFAULT -> GHC.Base.++ sat_sC3d s_sC3c;
        };

GHC.Show.showList__3 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['['#];

GHC.Show.showList__2 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [']'#];

GHC.Show.showList__1 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [','#];

GHC.Show.showList__4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "[]"#;

GHC.Show.showList__
  :: forall a. (a -> GHC.Show.ShowS) -> [a] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_sC3e ds1_sC3f s_sC3g]
        case ds1_sC3f of {
          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s_sC3g;
          : x_sC3i [Occ=Once] xs_sC3j [Occ=Once] ->
              let {
                sat_sC3t [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ds_sC3e s_sC3g x_sC3i xs_sC3j] \u []
                        let {
                          sat_sC3s [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              [ds_sC3e s_sC3g xs_sC3j] \u []
                                  let {
                                    lvl45_sC3k [Occ=OnceL] :: [GHC.Types.Char]
                                    [LclId, Unf=OtherCon []] =
                                        CCCS :! [GHC.Show.showList__2 s_sC3g]; } in
                                  let {
                                    showl_sC3l [Occ=LoopBreaker] :: [a_azqi] -> GHC.Base.String
                                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                        sat-only [ds_sC3e lvl45_sC3k showl_sC3l] \r [ds2_sC3m]
                                            case ds2_sC3m of {
                                              [] -> lvl45_sC3k;
                                              : y_sC3o [Occ=Once] ys_sC3p [Occ=Once] ->
                                                  let {
                                                    sat_sC3r [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        [ds_sC3e showl_sC3l y_sC3o ys_sC3p] \u []
                                                            let {
                                                              sat_sC3q [Occ=Once] :: GHC.Base.String
                                                              [LclId] =
                                                                  [showl_sC3l ys_sC3p] \u []
                                                                      showl_sC3l ys_sC3p;
                                                            } in  ds_sC3e y_sC3o sat_sC3q;
                                                  } in  : [GHC.Show.showList__1 sat_sC3r];
                                            };
                                  } in  showl_sC3l xs_sC3j;
                        } in  ds_sC3e x_sC3i sat_sC3s;
              } in  : [GHC.Show.showList__3 sat_sC3t];
        };

lvl_rC0c :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\\""#;

GHC.Show.showLitString [Occ=LoopBreaker]
  :: GHC.Base.String -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sC3u s_sC3v]
        case ds_sC3u of {
          [] -> s_sC3v;
          : ds1_sC3x [Occ=Once!] cs_sC3y [Occ=Once*] ->
              case ds1_sC3x of {
                GHC.Types.C# ds2_sC3A [Occ=Once!] ->
                    case ds2_sC3A of ds3_sC3B {
                      __DEFAULT ->
                          let {
                            sat_sC3C [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [s_sC3v cs_sC3y] \u [] GHC.Show.showLitString cs_sC3y s_sC3v;
                          } in  GHC.Show.$wshowLitChar ds3_sC3B sat_sC3C;
                      '"'# ->
                          let {
                            sat_sC3D [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [s_sC3v cs_sC3y] \u [] GHC.Show.showLitString cs_sC3y s_sC3v;
                          } in  GHC.CString.unpackAppendCString# lvl_rC0c sat_sC3D;
                    };
              };
        };

GHC.Show.$fShow(,)3 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['"'#];

GHC.Show.$fShow(,)_$cshowList1
  :: [GHC.Types.Char] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,1*U><L,U>m2, Unf=OtherCon []] =
    [] \r [cs_sC3E eta_sC3F]
        let {
          sat_sC3H [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [cs_sC3E eta_sC3F] \u []
                  let {
                    sat_sC3G [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [GHC.Show.$fShow(,)3 eta_sC3F];
                  } in  GHC.Show.showLitString cs_sC3E sat_sC3G;
        } in  : [GHC.Show.$fShow(,)3 sat_sC3H];

$s$fShow[]_rC0d
  :: GHC.Types.Int
     -> [GHC.Types.Char] -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=3, Str=<L,A><L,1*U><L,U>m2, Unf=OtherCon []] =
    [] \r [ds_sC3I eta_sC3J eta1_sC3K]
        GHC.Show.$fShow(,)_$cshowList1 eta_sC3J eta1_sC3K;

GHC.Show.$fShow[]_$s$cshowList1
  :: [[GHC.Types.Char]] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sC3L s_sC3M]
        GHC.Show.showList__ GHC.Show.$fShow(,)_$cshowList1 ls_sC3L s_sC3M;

GHC.Show.$fShow[]1 :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShow(,)3 GHC.Types.[]];

GHC.Show.$fShow[]_$s$cshow1 :: [GHC.Types.Char] -> GHC.Base.String
[GblId, Arity=1, Str=<L,1*U>m2, Unf=OtherCon []] =
    [] \r [x_sC3N]
        let {
          sat_sC3O [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [x_sC3N] \u [] GHC.Show.showLitString x_sC3N GHC.Show.$fShow[]1;
        } in  : [GHC.Show.$fShow(,)3 sat_sC3O];

GHC.Show.$fShow[]_$s$fShow[]1 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show [GHC.Types.Char]
[GblId, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [$s$fShow[]_rC0d
                                    GHC.Show.$fShow[]_$s$cshow1
                                    GHC.Show.$fShow[]_$s$cshowList1];

GHC.Show.$fShow(,)1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl1_rC0e :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SrcLoc {"#;

lvl2_rC0f :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocPackage = "#;

lvl3_rC0g :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocModule = "#;

lvl4_rC0h :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocFile = "#;

lvl5_rC0i :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocStartLine = "#;

lvl6_rC0j :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocStartCol = "#;

lvl7_rC0k :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocEndLine = "#;

lvl8_rC0l :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocEndCol = "#;

lvl9_rC0m :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "}"#;

GHC.Show.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> [GHC.Types.Char]
     -> [GHC.Types.Char]
     -> [GHC.Types.Char]
     -> GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Base.String
     -> GHC.Base.String
[GblId,
 Arity=9,
 Str=<S,U><L,1*U><L,1*U><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sC3P
           ww1_sC3Q
           ww2_sC3R
           ww3_sC3S
           ww4_sC3T
           ww5_sC3U
           ww6_sC3V
           ww7_sC3W
           w_sC3X]
        let {
          p_sC3Y [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [ww1_sC3Q
                        ww2_sC3R
                        ww3_sC3S
                        ww4_sC3T
                        ww5_sC3U
                        ww6_sC3V
                        ww7_sC3W] \r [x_sC3Z]
                  let {
                    sat_sC4K [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [ww1_sC3Q
                         ww2_sC3R
                         ww3_sC3S
                         ww4_sC3T
                         ww5_sC3U
                         ww6_sC3V
                         ww7_sC3W
                         x_sC3Z] \u []
                            let {
                              sat_sC4I [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [ww1_sC3Q
                                   ww2_sC3R
                                   ww3_sC3S
                                   ww4_sC3T
                                   ww5_sC3U
                                   ww6_sC3V
                                   ww7_sC3W
                                   x_sC3Z] \u []
                                      let {
                                        sat_sC4G [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww2_sC3R
                                             ww3_sC3S
                                             ww4_sC3T
                                             ww5_sC3U
                                             ww6_sC3V
                                             ww7_sC3W
                                             x_sC3Z] \u []
                                                let {
                                                  sat_sC4F [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [ww2_sC3R
                                                       ww3_sC3S
                                                       ww4_sC3T
                                                       ww5_sC3U
                                                       ww6_sC3V
                                                       ww7_sC3W
                                                       x_sC3Z] \s []
                                                          let {
                                                            sat_sC4D [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [ww2_sC3R
                                                                 ww3_sC3S
                                                                 ww4_sC3T
                                                                 ww5_sC3U
                                                                 ww6_sC3V
                                                                 ww7_sC3W
                                                                 x_sC3Z] \u []
                                                                    let {
                                                                      sat_sC4B [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          [ww3_sC3S
                                                                           ww4_sC3T
                                                                           ww5_sC3U
                                                                           ww6_sC3V
                                                                           ww7_sC3W
                                                                           x_sC3Z] \u []
                                                                              let {
                                                                                sat_sC4A [Occ=Once,
                                                                                          Dmd=<L,1*U>]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    [ww3_sC3S
                                                                                     ww4_sC3T
                                                                                     ww5_sC3U
                                                                                     ww6_sC3V
                                                                                     ww7_sC3W
                                                                                     x_sC3Z] \s []
                                                                                        let {
                                                                                          sat_sC4y [Occ=Once]
                                                                                            :: [GHC.Types.Char]
                                                                                          [LclId] =
                                                                                              [ww3_sC3S
                                                                                               ww4_sC3T
                                                                                               ww5_sC3U
                                                                                               ww6_sC3V
                                                                                               ww7_sC3W
                                                                                               x_sC3Z] \u []
                                                                                                  let {
                                                                                                    sat_sC4w [Occ=Once]
                                                                                                      :: [GHC.Types.Char]
                                                                                                    [LclId] =
                                                                                                        [ww4_sC3T
                                                                                                         ww5_sC3U
                                                                                                         ww6_sC3V
                                                                                                         ww7_sC3W
                                                                                                         x_sC3Z] \u []
                                                                                                            let {
                                                                                                              sat_sC4v [Occ=Once,
                                                                                                                        Dmd=<L,1*U>]
                                                                                                                :: [GHC.Types.Char]
                                                                                                              [LclId] =
                                                                                                                  [ww4_sC3T
                                                                                                                   ww5_sC3U
                                                                                                                   ww6_sC3V
                                                                                                                   ww7_sC3W
                                                                                                                   x_sC3Z] \s []
                                                                                                                      let {
                                                                                                                        sat_sC4u [Occ=Once]
                                                                                                                          :: [GHC.Types.Char]
                                                                                                                        [LclId] =
                                                                                                                            [ww4_sC3T
                                                                                                                             ww5_sC3U
                                                                                                                             ww6_sC3V
                                                                                                                             ww7_sC3W
                                                                                                                             x_sC3Z] \u []
                                                                                                                                case
                                                                                                                                    ww4_sC3T
                                                                                                                                of
                                                                                                                                { GHC.Types.I# n_sC41 [Occ=Once] ->
                                                                                                                                      let {
                                                                                                                                        sat_sC4q [Occ=Once]
                                                                                                                                          :: GHC.Base.String
                                                                                                                                        [LclId] =
                                                                                                                                            [ww5_sC3U
                                                                                                                                             ww6_sC3V
                                                                                                                                             ww7_sC3W
                                                                                                                                             x_sC3Z] \u []
                                                                                                                                                let {
                                                                                                                                                  sat_sC4p [Occ=Once,
                                                                                                                                                            Dmd=<L,1*U>]
                                                                                                                                                    :: [GHC.Types.Char]
                                                                                                                                                  [LclId] =
                                                                                                                                                      [ww5_sC3U
                                                                                                                                                       ww6_sC3V
                                                                                                                                                       ww7_sC3W
                                                                                                                                                       x_sC3Z] \s []
                                                                                                                                                          let {
                                                                                                                                                            sat_sC4o [Occ=Once]
                                                                                                                                                              :: [GHC.Types.Char]
                                                                                                                                                            [LclId] =
                                                                                                                                                                [ww5_sC3U
                                                                                                                                                                 ww6_sC3V
                                                                                                                                                                 ww7_sC3W
                                                                                                                                                                 x_sC3Z] \u []
                                                                                                                                                                    case
                                                                                                                                                                        ww5_sC3U
                                                                                                                                                                    of
                                                                                                                                                                    { GHC.Types.I# n1_sC43 [Occ=Once] ->
                                                                                                                                                                          let {
                                                                                                                                                                            sat_sC4k [Occ=Once]
                                                                                                                                                                              :: GHC.Base.String
                                                                                                                                                                            [LclId] =
                                                                                                                                                                                [ww6_sC3V
                                                                                                                                                                                 ww7_sC3W
                                                                                                                                                                                 x_sC3Z] \u []
                                                                                                                                                                                    let {
                                                                                                                                                                                      sat_sC4j [Occ=Once,
                                                                                                                                                                                                Dmd=<L,1*U>]
                                                                                                                                                                                        :: [GHC.Types.Char]
                                                                                                                                                                                      [LclId] =
                                                                                                                                                                                          [ww6_sC3V
                                                                                                                                                                                           ww7_sC3W
                                                                                                                                                                                           x_sC3Z] \s []
                                                                                                                                                                                              let {
                                                                                                                                                                                                sat_sC4i [Occ=Once]
                                                                                                                                                                                                  :: [GHC.Types.Char]
                                                                                                                                                                                                [LclId] =
                                                                                                                                                                                                    [ww6_sC3V
                                                                                                                                                                                                     ww7_sC3W
                                                                                                                                                                                                     x_sC3Z] \u []
                                                                                                                                                                                                        case
                                                                                                                                                                                                            ww6_sC3V
                                                                                                                                                                                                        of
                                                                                                                                                                                                        { GHC.Types.I# n2_sC45 [Occ=Once] ->
                                                                                                                                                                                                              let {
                                                                                                                                                                                                                sat_sC4e [Occ=Once]
                                                                                                                                                                                                                  :: GHC.Base.String
                                                                                                                                                                                                                [LclId] =
                                                                                                                                                                                                                    [ww7_sC3W
                                                                                                                                                                                                                     x_sC3Z] \u []
                                                                                                                                                                                                                        let {
                                                                                                                                                                                                                          sat_sC4d [Occ=Once,
                                                                                                                                                                                                                                    Dmd=<L,1*U>]
                                                                                                                                                                                                                            :: [GHC.Types.Char]
                                                                                                                                                                                                                          [LclId] =
                                                                                                                                                                                                                              [ww7_sC3W
                                                                                                                                                                                                                               x_sC3Z] \s []
                                                                                                                                                                                                                                  let {
                                                                                                                                                                                                                                    sat_sC4c [Occ=Once]
                                                                                                                                                                                                                                      :: [GHC.Types.Char]
                                                                                                                                                                                                                                    [LclId] =
                                                                                                                                                                                                                                        [ww7_sC3W
                                                                                                                                                                                                                                         x_sC3Z] \u []
                                                                                                                                                                                                                                            case
                                                                                                                                                                                                                                                ww7_sC3W
                                                                                                                                                                                                                                            of
                                                                                                                                                                                                                                            { GHC.Types.I# n3_sC47 [Occ=Once] ->
                                                                                                                                                                                                                                                  let {
                                                                                                                                                                                                                                                    sat_sC48 [Occ=Once]
                                                                                                                                                                                                                                                      :: GHC.Base.String
                                                                                                                                                                                                                                                    [LclId] =
                                                                                                                                                                                                                                                        [x_sC3Z] \u []
                                                                                                                                                                                                                                                            GHC.CString.unpackAppendCString#
                                                                                                                                                                                                                                                                lvl9_rC0m
                                                                                                                                                                                                                                                                x_sC3Z;
                                                                                                                                                                                                                                                  } in 
                                                                                                                                                                                                                                                    case
                                                                                                                                                                                                                                                        GHC.Show.$witos
                                                                                                                                                                                                                                                            n3_sC47
                                                                                                                                                                                                                                                            sat_sC48
                                                                                                                                                                                                                                                    of
                                                                                                                                                                                                                                                    { (#,#) ww9_sC4a [Occ=Once]
                                                                                                                                                                                                                                                            ww10_sC4b [Occ=Once] ->
                                                                                                                                                                                                                                                          : [ww9_sC4a
                                                                                                                                                                                                                                                             ww10_sC4b];
                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                            };
                                                                                                                                                                                                                                  } in 
                                                                                                                                                                                                                                    GHC.CString.unpackAppendCString#
                                                                                                                                                                                                                                        lvl8_rC0l
                                                                                                                                                                                                                                        sat_sC4c;
                                                                                                                                                                                                                        } in 
                                                                                                                                                                                                                          GHC.Base.++
                                                                                                                                                                                                                              GHC.Show.showCommaSpace1
                                                                                                                                                                                                                              sat_sC4d;
                                                                                                                                                                                                              } in 
                                                                                                                                                                                                                case
                                                                                                                                                                                                                    GHC.Show.$witos
                                                                                                                                                                                                                        n2_sC45
                                                                                                                                                                                                                        sat_sC4e
                                                                                                                                                                                                                of
                                                                                                                                                                                                                { (#,#) ww9_sC4g [Occ=Once]
                                                                                                                                                                                                                        ww10_sC4h [Occ=Once] ->
                                                                                                                                                                                                                      : [ww9_sC4g
                                                                                                                                                                                                                         ww10_sC4h];
                                                                                                                                                                                                                };
                                                                                                                                                                                                        };
                                                                                                                                                                                              } in 
                                                                                                                                                                                                GHC.CString.unpackAppendCString#
                                                                                                                                                                                                    lvl7_rC0k
                                                                                                                                                                                                    sat_sC4i;
                                                                                                                                                                                    } in 
                                                                                                                                                                                      GHC.Base.++
                                                                                                                                                                                          GHC.Show.showCommaSpace1
                                                                                                                                                                                          sat_sC4j;
                                                                                                                                                                          } in 
                                                                                                                                                                            case
                                                                                                                                                                                GHC.Show.$witos
                                                                                                                                                                                    n1_sC43
                                                                                                                                                                                    sat_sC4k
                                                                                                                                                                            of
                                                                                                                                                                            { (#,#) ww9_sC4m [Occ=Once]
                                                                                                                                                                                    ww10_sC4n [Occ=Once] ->
                                                                                                                                                                                  : [ww9_sC4m
                                                                                                                                                                                     ww10_sC4n];
                                                                                                                                                                            };
                                                                                                                                                                    };
                                                                                                                                                          } in 
                                                                                                                                                            GHC.CString.unpackAppendCString#
                                                                                                                                                                lvl6_rC0j
                                                                                                                                                                sat_sC4o;
                                                                                                                                                } in 
                                                                                                                                                  GHC.Base.++
                                                                                                                                                      GHC.Show.showCommaSpace1
                                                                                                                                                      sat_sC4p;
                                                                                                                                      } in 
                                                                                                                                        case
                                                                                                                                            GHC.Show.$witos
                                                                                                                                                n_sC41
                                                                                                                                                sat_sC4q
                                                                                                                                        of
                                                                                                                                        { (#,#) ww9_sC4s [Occ=Once]
                                                                                                                                                ww10_sC4t [Occ=Once] ->
                                                                                                                                              : [ww9_sC4s
                                                                                                                                                 ww10_sC4t];
                                                                                                                                        };
                                                                                                                                };
                                                                                                                      } in 
                                                                                                                        GHC.CString.unpackAppendCString#
                                                                                                                            lvl5_rC0i
                                                                                                                            sat_sC4u;
                                                                                                            } in 
                                                                                                              GHC.Base.++
                                                                                                                  GHC.Show.showCommaSpace1
                                                                                                                  sat_sC4v; } in
                                                                                                  let {
                                                                                                    sat_sC4x [Occ=Once]
                                                                                                      :: GHC.Base.String
                                                                                                    [LclId] =
                                                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                                                 sat_sC4w];
                                                                                                  } in 
                                                                                                    GHC.Show.showLitString
                                                                                                        ww3_sC3S
                                                                                                        sat_sC4x; } in
                                                                                        let {
                                                                                          sat_sC4z [Occ=Once]
                                                                                            :: [GHC.Types.Char]
                                                                                          [LclId] =
                                                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                                                       sat_sC4y];
                                                                                        } in 
                                                                                          GHC.CString.unpackAppendCString#
                                                                                              lvl4_rC0h
                                                                                              sat_sC4z;
                                                                              } in 
                                                                                GHC.Base.++
                                                                                    GHC.Show.showCommaSpace1
                                                                                    sat_sC4A; } in
                                                                    let {
                                                                      sat_sC4C [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   sat_sC4B];
                                                                    } in 
                                                                      GHC.Show.showLitString
                                                                          ww2_sC3R sat_sC4C; } in
                                                          let {
                                                            sat_sC4E [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)3
                                                                         sat_sC4D];
                                                          } in 
                                                            GHC.CString.unpackAppendCString#
                                                                lvl3_rC0g sat_sC4E;
                                                } in 
                                                  GHC.Base.++
                                                      GHC.Show.showCommaSpace1 sat_sC4F; } in
                                      let {
                                        sat_sC4H [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [GHC.Show.$fShow(,)3 sat_sC4G];
                                      } in  GHC.Show.showLitString ww1_sC3Q sat_sC4H; } in
                            let {
                              sat_sC4J [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  CCCS :! [GHC.Show.$fShow(,)3 sat_sC4I];
                            } in  GHC.CString.unpackAppendCString# lvl2_rC0f sat_sC4J;
                  } in  GHC.CString.unpackAppendCString# lvl1_rC0e sat_sC4K;
        } in 
          case >=# [ww_sC3P 11#] of {
            __DEFAULT -> p_sC3Y w_sC3X;
            1# ->
                let {
                  sat_sC4N [Occ=Once] :: [GHC.Types.Char]
                  [LclId] =
                      [w_sC3X p_sC3Y] \u []
                          let {
                            sat_sC4M [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                CCCS :! [GHC.Show.$fShow(,)2 w_sC3X];
                          } in  p_sC3Y sat_sC4M;
                } in  : [GHC.Show.$fShow(,)4 sat_sC4N];
          };

GHC.Show.$fShowSrcLoc_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Stack.Types.SrcLoc -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U(U),1*U(U),1*U(U),1*U(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sC4O w1_sC4P w2_sC4Q]
        case w_sC4O of {
          GHC.Types.I# ww1_sC4S [Occ=Once] ->
              case w1_sC4P of {
                GHC.Stack.Types.SrcLoc ww3_sC4U [Occ=Once]
                                       ww4_sC4V [Occ=Once]
                                       ww5_sC4W [Occ=Once]
                                       ww6_sC4X [Occ=Once]
                                       ww7_sC4Y [Occ=Once]
                                       ww8_sC4Z [Occ=Once]
                                       ww9_sC50 [Occ=Once] ->
                    GHC.Show.$w$cshowsPrec
                        ww1_sC4S
                        ww3_sC4U
                        ww4_sC4V
                        ww5_sC4W
                        ww6_sC4X
                        ww7_sC4Y
                        ww8_sC4Z
                        ww9_sC50
                        w2_sC4Q;
              };
        };

GHC.Show.$fShowSrcLoc1 :: GHC.Stack.Types.SrcLoc -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U(1*U,1*U,1*U,1*U(U),1*U(U),1*U(U),1*U(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sC51 w1_sC52]
        case w_sC51 of {
          GHC.Stack.Types.SrcLoc ww1_sC54 [Occ=Once]
                                 ww2_sC55 [Occ=Once]
                                 ww3_sC56 [Occ=Once]
                                 ww4_sC57 [Occ=Once]
                                 ww5_sC58 [Occ=Once]
                                 ww6_sC59 [Occ=Once]
                                 ww7_sC5a [Occ=Once] ->
              GHC.Show.$w$cshowsPrec
                  0#
                  ww1_sC54
                  ww2_sC55
                  ww3_sC56
                  ww4_sC57
                  ww5_sC58
                  ww6_sC59
                  ww7_sC5a
                  w1_sC52;
        };

GHC.Show.$fShowSrcLoc_$cshowList
  :: [GHC.Stack.Types.SrcLoc] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sC5b s_sC5c]
        GHC.Show.showList__ GHC.Show.$fShowSrcLoc1 ls_sC5b s_sC5c;

GHC.Show.$fShowSrcLoc_$cshow
  :: GHC.Stack.Types.SrcLoc -> GHC.Base.String
[GblId,
 Arity=1,
 Str=<S,1*U(1*U,1*U,1*U,1*U(U),1*U(U),1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [x_sC5d]
        case x_sC5d of {
          GHC.Stack.Types.SrcLoc ww1_sC5f [Occ=Once]
                                 ww2_sC5g [Occ=Once]
                                 ww3_sC5h [Occ=Once]
                                 ww4_sC5i [Occ=Once]
                                 ww5_sC5j [Occ=Once]
                                 ww6_sC5k [Occ=Once]
                                 ww7_sC5l [Occ=Once] ->
              GHC.Show.$w$cshowsPrec
                  0#
                  ww1_sC5f
                  ww2_sC5g
                  ww3_sC5h
                  ww4_sC5i
                  ww5_sC5j
                  ww6_sC5k
                  ww7_sC5l
                  GHC.Types.[];
        };

GHC.Show.$fShowSrcLoc [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Stack.Types.SrcLoc
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowSrcLoc_$cshowsPrec
                                    GHC.Show.$fShowSrcLoc_$cshow
                                    GHC.Show.$fShowSrcLoc_$cshowList];

GHC.Show.appPrec :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [10#];

GHC.Show.appPrec1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

GHC.Show.$wshowWord [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Word#
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [w_sC5m w1_sC5n]
        case ltWord# [w_sC5m 10##] of {
          __DEFAULT ->
              case remWord# [w_sC5m 10##] of sat_sC5q {
                __DEFAULT ->
                    case word2Int# [sat_sC5q] of sat_sC5r {
                      __DEFAULT ->
                          case +# [48# sat_sC5r] of sat_sC5s {
                            __DEFAULT ->
                                case chr# [sat_sC5s] of sat_sC5t {
                                  __DEFAULT ->
                                      let {
                                        sat_sC5u [Occ=Once] :: GHC.Types.Char
                                        [LclId] =
                                            CCCS GHC.Types.C#! [sat_sC5t]; } in
                                      let {
                                        sat_sC5v [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [sat_sC5u w1_sC5n];
                                      } in 
                                        case quotWord# [w_sC5m 10##] of sat_sC5p {
                                          __DEFAULT -> GHC.Show.$wshowWord sat_sC5p sat_sC5v;
                                        };
                                };
                          };
                    };
              };
          1# ->
              case word2Int# [w_sC5m] of sat_sC5w {
                __DEFAULT ->
                    case +# [48# sat_sC5w] of sat_sC5x {
                      __DEFAULT ->
                          case chr# [sat_sC5x] of sat_sC5y {
                            __DEFAULT ->
                                let {
                                  sat_sC5z [Occ=Once] :: GHC.Types.Char
                                  [LclId] =
                                      CCCS GHC.Types.C#! [sat_sC5y];
                                } in  (#,#) [sat_sC5z w1_sC5n];
                          };
                    };
              };
        };

GHC.Show.showWord [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sC5A w1_sC5B]
        case GHC.Show.$wshowWord w_sC5A w1_sC5B of {
          (#,#) ww1_sC5D [Occ=Once] ww2_sC5E [Occ=Once] ->
              : [ww1_sC5D ww2_sC5E];
        };

GHC.Show.$fShowWord_$cshowsPrec
  :: GHC.Types.Int -> GHC.Types.Word -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [ds_sC5F ds1_sC5G eta_sC5H]
        case ds1_sC5G of {
          GHC.Types.W# w_sC5J [Occ=Once] ->
              GHC.Show.showWord w_sC5J eta_sC5H;
        };

GHC.Show.shows :: forall a. GHC.Show.Show a => a -> GHC.Show.ShowS
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(C(S)LL),1*U(1*C1(U),A,A)>,
 Unf=OtherCon []] =
    [] \r [$dShow_sC5K]
        GHC.Show.showsPrec $dShow_sC5K GHC.Show.$fShow(,)1;

GHC.Show.$dmshow
  :: forall a. GHC.Show.Show a => a -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(C(C(C(S)))LL),1*U(1*C1(C1(C1(U))),A,A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sC5L x_sC5M]
        GHC.Show.showsPrec
            $dShow_sC5L GHC.Show.$fShow(,)1 x_sC5M GHC.Types.[];

GHC.Show.$dmshowList
  :: forall a. GHC.Show.Show a => [a] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(C1(U))),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sC5N ls_sC5O s_sC5P]
        let {
          sat_sC5Q [Occ=Once, Dmd=<L,C(C1(U))>] :: a_az3k -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sC5N] \u []
                  GHC.Show.showsPrec $dShow_sC5N GHC.Show.$fShow(,)1;
        } in  GHC.Show.showList__ sat_sC5Q ls_sC5O s_sC5P;

GHC.Show.$fShowWord1
  :: GHC.Types.Word -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [ds_sC5R eta_sC5S]
        case ds_sC5R of {
          GHC.Types.W# w_sC5U [Occ=Once] ->
              GHC.Show.showWord w_sC5U eta_sC5S;
        };

GHC.Show.$fShowWord_$cshowList
  :: [GHC.Types.Word] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sC5V s_sC5W]
        GHC.Show.showList__ GHC.Show.$fShowWord1 ls_sC5V s_sC5W;

GHC.Show.$fShowWord_$cshow :: GHC.Types.Word -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_sC5X]
        case x_sC5X of {
          GHC.Types.W# w_sC5Z [Occ=Once] ->
              case GHC.Show.$wshowWord w_sC5Z GHC.Types.[] of {
                (#,#) ww1_sC61 [Occ=Once] ww2_sC62 [Occ=Once] ->
                    : [ww1_sC61 ww2_sC62];
              };
        };

GHC.Show.$fShowWord [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Word
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowWord_$cshowsPrec
                                    GHC.Show.$fShowWord_$cshow
                                    GHC.Show.$fShowWord_$cshowList];

GHC.Show.showChar :: GHC.Types.Char -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] : [eta_B2 eta_B1];

GHC.Show.showParen
  :: GHC.Types.Bool -> GHC.Show.ShowS -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [b_sC63 p_sC64]
        case b_sC63 of {
          GHC.Types.False -> p_sC64;
          GHC.Types.True ->
              let {
                sat_sC69 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                [LclId] =
                    [p_sC64] \r [x_sC66]
                        let {
                          sat_sC68 [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [p_sC64 x_sC66] \u []
                                  let {
                                    sat_sC67 [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        CCCS :! [GHC.Show.$fShow(,)2 x_sC66];
                                  } in  p_sC64 sat_sC67;
                        } in  : [GHC.Show.$fShow(,)4 sat_sC68];
              } in  sat_sC69;
        };

lvl10_rC0n :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "foldr1"#;

lvl11_rC0o :: GHC.Base.String -> GHC.Base.String
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl10_rC0n of sat_sC6a {
          __DEFAULT -> GHC.List.errorEmptyList sat_sC6a;
        };

go2_rC0p
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    sat-only [] \r [ds_sC6b eta_sC6c]
        case ds_sC6b of {
          [] -> lvl11_rC0o;
          : x_sC6f [Occ=Once*!] ds1_sC6g [Occ=Once!] ->
              case ds1_sC6g of wild1_sC6h {
                [] -> x_sC6f eta_sC6c;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sC6k [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sC6c wild1_sC6h] \u [] go2_rC0p wild1_sC6h eta_sC6c; } in
                    let {
                      sat_sC6l [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sC6k];
                    } in  x_sC6f sat_sC6l;
              };
        };

GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n,
      GHC.Show.Show o) =>
     GHC.Types.Int
     -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) -> GHC.Show.ShowS
[GblId,
 Arity=18,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sC6m
           $dShow1_sC6n
           $dShow2_sC6o
           $dShow3_sC6p
           $dShow4_sC6q
           $dShow5_sC6r
           $dShow6_sC6s
           $dShow7_sC6t
           $dShow8_sC6u
           $dShow9_sC6v
           $dShow10_sC6w
           $dShow11_sC6x
           $dShow12_sC6y
           $dShow13_sC6z
           $dShow14_sC6A
           ds_sC6B
           ds1_sC6C
           s_sC6D]
        case ds1_sC6C of {
          (,,,,,,,,,,,,,,) a1_sC6F [Occ=Once]
                           b1_sC6G [Occ=Once]
                           c1_sC6H [Occ=Once]
                           d1_sC6I [Occ=Once]
                           e1_sC6J [Occ=Once]
                           f13_sC6K [Occ=Once]
                           g1_sC6L [Occ=Once]
                           h1_sC6M [Occ=Once]
                           i1_sC6N [Occ=Once]
                           j1_sC6O [Occ=Once]
                           k1_sC6P [Occ=Once]
                           l1_sC6Q [Occ=Once]
                           m1_sC6R [Occ=Once]
                           n1_sC6S [Occ=Once]
                           o1_sC6T [Occ=Once] ->
              let {
                sat_sC7p [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sC6m
                     $dShow1_sC6n
                     $dShow2_sC6o
                     $dShow3_sC6p
                     $dShow4_sC6q
                     $dShow5_sC6r
                     $dShow6_sC6s
                     $dShow7_sC6t
                     $dShow8_sC6u
                     $dShow9_sC6v
                     $dShow10_sC6w
                     $dShow11_sC6x
                     $dShow12_sC6y
                     $dShow13_sC6z
                     $dShow14_sC6A
                     s_sC6D
                     a1_sC6F
                     b1_sC6G
                     c1_sC6H
                     d1_sC6I
                     e1_sC6J
                     f13_sC6K
                     g1_sC6L
                     h1_sC6M
                     i1_sC6N
                     j1_sC6O
                     k1_sC6P
                     l1_sC6Q
                     m1_sC6R
                     n1_sC6S
                     o1_sC6T] \u []
                        let {
                          sat_sC7o [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sC6D]; } in
                        let {
                          sat_sC78 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow14_sC6A o1_sC6T] \u []
                                  GHC.Show.showsPrec $dShow14_sC6A GHC.Show.$fShow(,)1 o1_sC6T; } in
                        let {
                          sat_sC79 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC78 GHC.Types.[]]; } in
                        let {
                          sat_sC77 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow13_sC6z n1_sC6S] \u []
                                  GHC.Show.showsPrec $dShow13_sC6z GHC.Show.$fShow(,)1 n1_sC6S; } in
                        let {
                          sat_sC7a [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC77 sat_sC79]; } in
                        let {
                          sat_sC76 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow12_sC6y m1_sC6R] \u []
                                  GHC.Show.showsPrec $dShow12_sC6y GHC.Show.$fShow(,)1 m1_sC6R; } in
                        let {
                          sat_sC7b [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC76 sat_sC7a]; } in
                        let {
                          sat_sC75 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow11_sC6x l1_sC6Q] \u []
                                  GHC.Show.showsPrec $dShow11_sC6x GHC.Show.$fShow(,)1 l1_sC6Q; } in
                        let {
                          sat_sC7c [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC75 sat_sC7b]; } in
                        let {
                          sat_sC74 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow10_sC6w k1_sC6P] \u []
                                  GHC.Show.showsPrec $dShow10_sC6w GHC.Show.$fShow(,)1 k1_sC6P; } in
                        let {
                          sat_sC7d [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC74 sat_sC7c]; } in
                        let {
                          sat_sC73 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sC6v j1_sC6O] \u []
                                  GHC.Show.showsPrec $dShow9_sC6v GHC.Show.$fShow(,)1 j1_sC6O; } in
                        let {
                          sat_sC7e [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC73 sat_sC7d]; } in
                        let {
                          sat_sC72 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sC6u i1_sC6N] \u []
                                  GHC.Show.showsPrec $dShow8_sC6u GHC.Show.$fShow(,)1 i1_sC6N; } in
                        let {
                          sat_sC7f [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC72 sat_sC7e]; } in
                        let {
                          sat_sC71 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sC6t h1_sC6M] \u []
                                  GHC.Show.showsPrec $dShow7_sC6t GHC.Show.$fShow(,)1 h1_sC6M; } in
                        let {
                          sat_sC7g [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC71 sat_sC7f]; } in
                        let {
                          sat_sC70 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sC6s g1_sC6L] \u []
                                  GHC.Show.showsPrec $dShow6_sC6s GHC.Show.$fShow(,)1 g1_sC6L; } in
                        let {
                          sat_sC7h [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC70 sat_sC7g]; } in
                        let {
                          sat_sC6Z [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sC6r f13_sC6K] \u []
                                  GHC.Show.showsPrec $dShow5_sC6r GHC.Show.$fShow(,)1 f13_sC6K; } in
                        let {
                          sat_sC7i [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC6Z sat_sC7h]; } in
                        let {
                          sat_sC6Y [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sC6q e1_sC6J] \u []
                                  GHC.Show.showsPrec $dShow4_sC6q GHC.Show.$fShow(,)1 e1_sC6J; } in
                        let {
                          sat_sC7j [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC6Y sat_sC7i]; } in
                        let {
                          sat_sC6X [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sC6p d1_sC6I] \u []
                                  GHC.Show.showsPrec $dShow3_sC6p GHC.Show.$fShow(,)1 d1_sC6I; } in
                        let {
                          sat_sC7k [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC6X sat_sC7j]; } in
                        let {
                          sat_sC6W [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sC6o c1_sC6H] \u []
                                  GHC.Show.showsPrec $dShow2_sC6o GHC.Show.$fShow(,)1 c1_sC6H; } in
                        let {
                          sat_sC7l [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC6W sat_sC7k]; } in
                        let {
                          sat_sC6V [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sC6n b1_sC6G] \u []
                                  GHC.Show.showsPrec $dShow1_sC6n GHC.Show.$fShow(,)1 b1_sC6G; } in
                        let {
                          sat_sC7m [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC6V sat_sC7l]; } in
                        let {
                          sat_sC6U [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sC6m a1_sC6F] \u []
                                  GHC.Show.showsPrec $dShow_sC6m GHC.Show.$fShow(,)1 a1_sC6F; } in
                        let {
                          sat_sC7n [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sC6U sat_sC7m];
                        } in  go2_rC0p sat_sC7n sat_sC7o;
              } in  : [GHC.Show.$fShow(,)4 sat_sC7p];
        };

GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n,
      GHC.Show.Show o) =>
     (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) -> GHC.Base.String
[GblId,
 Arity=16,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sC7q
           $dShow1_sC7r
           $dShow2_sC7s
           $dShow3_sC7t
           $dShow4_sC7u
           $dShow5_sC7v
           $dShow6_sC7w
           $dShow7_sC7x
           $dShow8_sC7y
           $dShow9_sC7z
           $dShow10_sC7A
           $dShow11_sC7B
           $dShow12_sC7C
           $dShow13_sC7D
           $dShow14_sC7E
           x_sC7F]
        GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
            $dShow_sC7q
            $dShow1_sC7r
            $dShow2_sC7s
            $dShow3_sC7t
            $dShow4_sC7u
            $dShow5_sC7v
            $dShow6_sC7w
            $dShow7_sC7x
            $dShow8_sC7y
            $dShow9_sC7z
            $dShow10_sC7A
            $dShow11_sC7B
            $dShow12_sC7C
            $dShow13_sC7D
            $dShow14_sC7E
            GHC.Show.$fShow(,)1
            x_sC7F
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n,
      GHC.Show.Show o) =>
     [(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)] -> GHC.Show.ShowS
[GblId,
 Arity=17,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sC7G
           $dShow1_sC7H
           $dShow2_sC7I
           $dShow3_sC7J
           $dShow4_sC7K
           $dShow5_sC7L
           $dShow6_sC7M
           $dShow7_sC7N
           $dShow8_sC7O
           $dShow9_sC7P
           $dShow10_sC7Q
           $dShow11_sC7R
           $dShow12_sC7S
           $dShow13_sC7T
           $dShow14_sC7U
           ls_sC7V
           s_sC7W]
        let {
          sat_sC7X [Occ=Once]
            :: (a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
                h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sC7G
               $dShow1_sC7H
               $dShow2_sC7I
               $dShow3_sC7J
               $dShow4_sC7K
               $dShow5_sC7L
               $dShow6_sC7M
               $dShow7_sC7N
               $dShow8_sC7O
               $dShow9_sC7P
               $dShow10_sC7Q
               $dShow11_sC7R
               $dShow12_sC7S
               $dShow13_sC7T
               $dShow14_sC7U] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sC7G
                      $dShow1_sC7H
                      $dShow2_sC7I
                      $dShow3_sC7J
                      $dShow4_sC7K
                      $dShow5_sC7L
                      $dShow6_sC7M
                      $dShow7_sC7N
                      $dShow8_sC7O
                      $dShow9_sC7P
                      $dShow10_sC7Q
                      $dShow11_sC7R
                      $dShow12_sC7S
                      $dShow13_sC7T
                      $dShow14_sC7U
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sC7X ls_sC7V s_sC7W;

GHC.Show.$fShow(,,,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n,
      GHC.Show.Show o) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
[GblId[DFunId],
 Arity=15,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sC7Y
           $dShow1_sC7Z
           $dShow2_sC80
           $dShow3_sC81
           $dShow4_sC82
           $dShow5_sC83
           $dShow6_sC84
           $dShow7_sC85
           $dShow8_sC86
           $dShow9_sC87
           $dShow10_sC88
           $dShow11_sC89
           $dShow12_sC8a
           $dShow13_sC8b
           $dShow14_sC8c]
        let {
          sat_sC8f [Occ=Once]
            :: [(a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
                 h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sC7Y
               $dShow1_sC7Z
               $dShow2_sC80
               $dShow3_sC81
               $dShow4_sC82
               $dShow5_sC83
               $dShow6_sC84
               $dShow7_sC85
               $dShow8_sC86
               $dShow9_sC87
               $dShow10_sC88
               $dShow11_sC89
               $dShow12_sC8a
               $dShow13_sC8b
               $dShow14_sC8c] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList
                      $dShow_sC7Y
                      $dShow1_sC7Z
                      $dShow2_sC80
                      $dShow3_sC81
                      $dShow4_sC82
                      $dShow5_sC83
                      $dShow6_sC84
                      $dShow7_sC85
                      $dShow8_sC86
                      $dShow9_sC87
                      $dShow10_sC88
                      $dShow11_sC89
                      $dShow12_sC8a
                      $dShow13_sC8b
                      $dShow14_sC8c
                      eta_B2
                      eta_B1; } in
        let {
          sat_sC8e [Occ=Once]
            :: (a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
                h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sC7Y
               $dShow1_sC7Z
               $dShow2_sC80
               $dShow3_sC81
               $dShow4_sC82
               $dShow5_sC83
               $dShow6_sC84
               $dShow7_sC85
               $dShow8_sC86
               $dShow9_sC87
               $dShow10_sC88
               $dShow11_sC89
               $dShow12_sC8a
               $dShow13_sC8b
               $dShow14_sC8c] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow
                      $dShow_sC7Y
                      $dShow1_sC7Z
                      $dShow2_sC80
                      $dShow3_sC81
                      $dShow4_sC82
                      $dShow5_sC83
                      $dShow6_sC84
                      $dShow7_sC85
                      $dShow8_sC86
                      $dShow9_sC87
                      $dShow10_sC88
                      $dShow11_sC89
                      $dShow12_sC8a
                      $dShow13_sC8b
                      $dShow14_sC8c
                      eta_B1; } in
        let {
          sat_sC8d [Occ=Once]
            :: GHC.Types.Int
               -> (a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
                   h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sC7Y
               $dShow1_sC7Z
               $dShow2_sC80
               $dShow3_sC81
               $dShow4_sC82
               $dShow5_sC83
               $dShow6_sC84
               $dShow7_sC85
               $dShow8_sC86
               $dShow9_sC87
               $dShow10_sC88
               $dShow11_sC89
               $dShow12_sC8a
               $dShow13_sC8b
               $dShow14_sC8c] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sC7Y
                      $dShow1_sC7Z
                      $dShow2_sC80
                      $dShow3_sC81
                      $dShow4_sC82
                      $dShow5_sC83
                      $dShow6_sC84
                      $dShow7_sC85
                      $dShow8_sC86
                      $dShow9_sC87
                      $dShow10_sC88
                      $dShow11_sC89
                      $dShow12_sC8a
                      $dShow13_sC8b
                      $dShow14_sC8c
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sC8d sat_sC8e sat_sC8f];

GHC.Show.$fShow(,,,,,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sC8g eta_sC8h]
        case ds_sC8g of {
          [] -> lvl11_rC0o;
          : x_sC8k [Occ=Once*!] ds1_sC8l [Occ=Once!] ->
              case ds1_sC8l of wild1_sC8m {
                [] -> x_sC8k eta_sC8h;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sC8p [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sC8h wild1_sC8m] \u []
                              GHC.Show.$fShow(,,,,,,,,,,,,,)_go2 wild1_sC8m eta_sC8h; } in
                    let {
                      sat_sC8q [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sC8p];
                    } in  x_sC8k sat_sC8q;
              };
        };

GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k l m n.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n) =>
     GHC.Types.Int
     -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n) -> GHC.Show.ShowS
[GblId,
 Arity=17,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sC8r
           $dShow1_sC8s
           $dShow2_sC8t
           $dShow3_sC8u
           $dShow4_sC8v
           $dShow5_sC8w
           $dShow6_sC8x
           $dShow7_sC8y
           $dShow8_sC8z
           $dShow9_sC8A
           $dShow10_sC8B
           $dShow11_sC8C
           $dShow12_sC8D
           $dShow13_sC8E
           ds_sC8F
           ds1_sC8G
           s_sC8H]
        case ds1_sC8G of {
          (,,,,,,,,,,,,,) a1_sC8J [Occ=Once]
                          b1_sC8K [Occ=Once]
                          c1_sC8L [Occ=Once]
                          d1_sC8M [Occ=Once]
                          e1_sC8N [Occ=Once]
                          f13_sC8O [Occ=Once]
                          g1_sC8P [Occ=Once]
                          h1_sC8Q [Occ=Once]
                          i1_sC8R [Occ=Once]
                          j1_sC8S [Occ=Once]
                          k1_sC8T [Occ=Once]
                          l1_sC8U [Occ=Once]
                          m1_sC8V [Occ=Once]
                          n1_sC8W [Occ=Once] ->
              let {
                sat_sC9q [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sC8r
                     $dShow1_sC8s
                     $dShow2_sC8t
                     $dShow3_sC8u
                     $dShow4_sC8v
                     $dShow5_sC8w
                     $dShow6_sC8x
                     $dShow7_sC8y
                     $dShow8_sC8z
                     $dShow9_sC8A
                     $dShow10_sC8B
                     $dShow11_sC8C
                     $dShow12_sC8D
                     $dShow13_sC8E
                     s_sC8H
                     a1_sC8J
                     b1_sC8K
                     c1_sC8L
                     d1_sC8M
                     e1_sC8N
                     f13_sC8O
                     g1_sC8P
                     h1_sC8Q
                     i1_sC8R
                     j1_sC8S
                     k1_sC8T
                     l1_sC8U
                     m1_sC8V
                     n1_sC8W] \u []
                        let {
                          sat_sC9p [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sC8H]; } in
                        let {
                          sat_sC9a [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow13_sC8E n1_sC8W] \u []
                                  GHC.Show.showsPrec $dShow13_sC8E GHC.Show.$fShow(,)1 n1_sC8W; } in
                        let {
                          sat_sC9b [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC9a GHC.Types.[]]; } in
                        let {
                          sat_sC99 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow12_sC8D m1_sC8V] \u []
                                  GHC.Show.showsPrec $dShow12_sC8D GHC.Show.$fShow(,)1 m1_sC8V; } in
                        let {
                          sat_sC9c [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC99 sat_sC9b]; } in
                        let {
                          sat_sC98 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow11_sC8C l1_sC8U] \u []
                                  GHC.Show.showsPrec $dShow11_sC8C GHC.Show.$fShow(,)1 l1_sC8U; } in
                        let {
                          sat_sC9d [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC98 sat_sC9c]; } in
                        let {
                          sat_sC97 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow10_sC8B k1_sC8T] \u []
                                  GHC.Show.showsPrec $dShow10_sC8B GHC.Show.$fShow(,)1 k1_sC8T; } in
                        let {
                          sat_sC9e [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC97 sat_sC9d]; } in
                        let {
                          sat_sC96 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sC8A j1_sC8S] \u []
                                  GHC.Show.showsPrec $dShow9_sC8A GHC.Show.$fShow(,)1 j1_sC8S; } in
                        let {
                          sat_sC9f [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC96 sat_sC9e]; } in
                        let {
                          sat_sC95 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sC8z i1_sC8R] \u []
                                  GHC.Show.showsPrec $dShow8_sC8z GHC.Show.$fShow(,)1 i1_sC8R; } in
                        let {
                          sat_sC9g [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC95 sat_sC9f]; } in
                        let {
                          sat_sC94 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sC8y h1_sC8Q] \u []
                                  GHC.Show.showsPrec $dShow7_sC8y GHC.Show.$fShow(,)1 h1_sC8Q; } in
                        let {
                          sat_sC9h [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC94 sat_sC9g]; } in
                        let {
                          sat_sC93 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sC8x g1_sC8P] \u []
                                  GHC.Show.showsPrec $dShow6_sC8x GHC.Show.$fShow(,)1 g1_sC8P; } in
                        let {
                          sat_sC9i [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC93 sat_sC9h]; } in
                        let {
                          sat_sC92 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sC8w f13_sC8O] \u []
                                  GHC.Show.showsPrec $dShow5_sC8w GHC.Show.$fShow(,)1 f13_sC8O; } in
                        let {
                          sat_sC9j [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC92 sat_sC9i]; } in
                        let {
                          sat_sC91 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sC8v e1_sC8N] \u []
                                  GHC.Show.showsPrec $dShow4_sC8v GHC.Show.$fShow(,)1 e1_sC8N; } in
                        let {
                          sat_sC9k [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC91 sat_sC9j]; } in
                        let {
                          sat_sC90 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sC8u d1_sC8M] \u []
                                  GHC.Show.showsPrec $dShow3_sC8u GHC.Show.$fShow(,)1 d1_sC8M; } in
                        let {
                          sat_sC9l [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC90 sat_sC9k]; } in
                        let {
                          sat_sC8Z [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sC8t c1_sC8L] \u []
                                  GHC.Show.showsPrec $dShow2_sC8t GHC.Show.$fShow(,)1 c1_sC8L; } in
                        let {
                          sat_sC9m [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC8Z sat_sC9l]; } in
                        let {
                          sat_sC8Y [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sC8s b1_sC8K] \u []
                                  GHC.Show.showsPrec $dShow1_sC8s GHC.Show.$fShow(,)1 b1_sC8K; } in
                        let {
                          sat_sC9n [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC8Y sat_sC9m]; } in
                        let {
                          sat_sC8X [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sC8r a1_sC8J] \u []
                                  GHC.Show.showsPrec $dShow_sC8r GHC.Show.$fShow(,)1 a1_sC8J; } in
                        let {
                          sat_sC9o [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sC8X sat_sC9n];
                        } in  GHC.Show.$fShow(,,,,,,,,,,,,,)_go2 sat_sC9o sat_sC9p;
              } in  : [GHC.Show.$fShow(,)4 sat_sC9q];
        };

GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k l m n.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n) =>
     (a, b, c, d, e, f, g, h, i, j, k, l, m, n) -> GHC.Base.String
[GblId,
 Arity=15,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sC9r
           $dShow1_sC9s
           $dShow2_sC9t
           $dShow3_sC9u
           $dShow4_sC9v
           $dShow5_sC9w
           $dShow6_sC9x
           $dShow7_sC9y
           $dShow8_sC9z
           $dShow9_sC9A
           $dShow10_sC9B
           $dShow11_sC9C
           $dShow12_sC9D
           $dShow13_sC9E
           x_sC9F]
        GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
            $dShow_sC9r
            $dShow1_sC9s
            $dShow2_sC9t
            $dShow3_sC9u
            $dShow4_sC9v
            $dShow5_sC9w
            $dShow6_sC9x
            $dShow7_sC9y
            $dShow8_sC9z
            $dShow9_sC9A
            $dShow10_sC9B
            $dShow11_sC9C
            $dShow12_sC9D
            $dShow13_sC9E
            GHC.Show.$fShow(,)1
            x_sC9F
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k l m n.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n) =>
     [(a, b, c, d, e, f, g, h, i, j, k, l, m, n)] -> GHC.Show.ShowS
[GblId,
 Arity=16,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sC9G
           $dShow1_sC9H
           $dShow2_sC9I
           $dShow3_sC9J
           $dShow4_sC9K
           $dShow5_sC9L
           $dShow6_sC9M
           $dShow7_sC9N
           $dShow8_sC9O
           $dShow9_sC9P
           $dShow10_sC9Q
           $dShow11_sC9R
           $dShow12_sC9S
           $dShow13_sC9T
           ls_sC9U
           s_sC9V]
        let {
          sat_sC9W [Occ=Once]
            :: (a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
                h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sC9G
               $dShow1_sC9H
               $dShow2_sC9I
               $dShow3_sC9J
               $dShow4_sC9K
               $dShow5_sC9L
               $dShow6_sC9M
               $dShow7_sC9N
               $dShow8_sC9O
               $dShow9_sC9P
               $dShow10_sC9Q
               $dShow11_sC9R
               $dShow12_sC9S
               $dShow13_sC9T] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sC9G
                      $dShow1_sC9H
                      $dShow2_sC9I
                      $dShow3_sC9J
                      $dShow4_sC9K
                      $dShow5_sC9L
                      $dShow6_sC9M
                      $dShow7_sC9N
                      $dShow8_sC9O
                      $dShow9_sC9P
                      $dShow10_sC9Q
                      $dShow11_sC9R
                      $dShow12_sC9S
                      $dShow13_sC9T
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sC9W ls_sC9U s_sC9V;

GHC.Show.$fShow(,,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m n.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
[GblId[DFunId],
 Arity=14,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sC9X
           $dShow1_sC9Y
           $dShow2_sC9Z
           $dShow3_sCa0
           $dShow4_sCa1
           $dShow5_sCa2
           $dShow6_sCa3
           $dShow7_sCa4
           $dShow8_sCa5
           $dShow9_sCa6
           $dShow10_sCa7
           $dShow11_sCa8
           $dShow12_sCa9
           $dShow13_sCaa]
        let {
          sat_sCad [Occ=Once]
            :: [(a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
                 h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sC9X
               $dShow1_sC9Y
               $dShow2_sC9Z
               $dShow3_sCa0
               $dShow4_sCa1
               $dShow5_sCa2
               $dShow6_sCa3
               $dShow7_sCa4
               $dShow8_sCa5
               $dShow9_sCa6
               $dShow10_sCa7
               $dShow11_sCa8
               $dShow12_sCa9
               $dShow13_sCaa] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList
                      $dShow_sC9X
                      $dShow1_sC9Y
                      $dShow2_sC9Z
                      $dShow3_sCa0
                      $dShow4_sCa1
                      $dShow5_sCa2
                      $dShow6_sCa3
                      $dShow7_sCa4
                      $dShow8_sCa5
                      $dShow9_sCa6
                      $dShow10_sCa7
                      $dShow11_sCa8
                      $dShow12_sCa9
                      $dShow13_sCaa
                      eta_B2
                      eta_B1; } in
        let {
          sat_sCac [Occ=Once]
            :: (a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
                h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sC9X
               $dShow1_sC9Y
               $dShow2_sC9Z
               $dShow3_sCa0
               $dShow4_sCa1
               $dShow5_sCa2
               $dShow6_sCa3
               $dShow7_sCa4
               $dShow8_sCa5
               $dShow9_sCa6
               $dShow10_sCa7
               $dShow11_sCa8
               $dShow12_sCa9
               $dShow13_sCaa] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow
                      $dShow_sC9X
                      $dShow1_sC9Y
                      $dShow2_sC9Z
                      $dShow3_sCa0
                      $dShow4_sCa1
                      $dShow5_sCa2
                      $dShow6_sCa3
                      $dShow7_sCa4
                      $dShow8_sCa5
                      $dShow9_sCa6
                      $dShow10_sCa7
                      $dShow11_sCa8
                      $dShow12_sCa9
                      $dShow13_sCaa
                      eta_B1; } in
        let {
          sat_sCab [Occ=Once]
            :: GHC.Types.Int
               -> (a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
                   h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sC9X
               $dShow1_sC9Y
               $dShow2_sC9Z
               $dShow3_sCa0
               $dShow4_sCa1
               $dShow5_sCa2
               $dShow6_sCa3
               $dShow7_sCa4
               $dShow8_sCa5
               $dShow9_sCa6
               $dShow10_sCa7
               $dShow11_sCa8
               $dShow12_sCa9
               $dShow13_sCaa] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sC9X
                      $dShow1_sC9Y
                      $dShow2_sC9Z
                      $dShow3_sCa0
                      $dShow4_sCa1
                      $dShow5_sCa2
                      $dShow6_sCa3
                      $dShow7_sCa4
                      $dShow8_sCa5
                      $dShow9_sCa6
                      $dShow10_sCa7
                      $dShow11_sCa8
                      $dShow12_sCa9
                      $dShow13_sCaa
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sCab sat_sCac sat_sCad];

GHC.Show.$fShow(,,,,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCae eta_sCaf]
        case ds_sCae of {
          [] -> lvl11_rC0o;
          : x_sCai [Occ=Once*!] ds1_sCaj [Occ=Once!] ->
              case ds1_sCaj of wild1_sCak {
                [] -> x_sCai eta_sCaf;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCan [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCaf wild1_sCak] \u []
                              GHC.Show.$fShow(,,,,,,,,,,,,)_go2 wild1_sCak eta_sCaf; } in
                    let {
                      sat_sCao [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCan];
                    } in  x_sCai sat_sCao;
              };
        };

GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k l m.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m) =>
     GHC.Types.Int
     -> (a, b, c, d, e, f, g, h, i, j, k, l, m) -> GHC.Show.ShowS
[GblId,
 Arity=16,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCap
           $dShow1_sCaq
           $dShow2_sCar
           $dShow3_sCas
           $dShow4_sCat
           $dShow5_sCau
           $dShow6_sCav
           $dShow7_sCaw
           $dShow8_sCax
           $dShow9_sCay
           $dShow10_sCaz
           $dShow11_sCaA
           $dShow12_sCaB
           ds_sCaC
           ds1_sCaD
           s_sCaE]
        case ds1_sCaD of {
          (,,,,,,,,,,,,) a1_sCaG [Occ=Once]
                         b1_sCaH [Occ=Once]
                         c1_sCaI [Occ=Once]
                         d1_sCaJ [Occ=Once]
                         e1_sCaK [Occ=Once]
                         f13_sCaL [Occ=Once]
                         g1_sCaM [Occ=Once]
                         h1_sCaN [Occ=Once]
                         i1_sCaO [Occ=Once]
                         j1_sCaP [Occ=Once]
                         k1_sCaQ [Occ=Once]
                         l1_sCaR [Occ=Once]
                         m1_sCaS [Occ=Once] ->
              let {
                sat_sCbk [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sCap
                     $dShow1_sCaq
                     $dShow2_sCar
                     $dShow3_sCas
                     $dShow4_sCat
                     $dShow5_sCau
                     $dShow6_sCav
                     $dShow7_sCaw
                     $dShow8_sCax
                     $dShow9_sCay
                     $dShow10_sCaz
                     $dShow11_sCaA
                     $dShow12_sCaB
                     s_sCaE
                     a1_sCaG
                     b1_sCaH
                     c1_sCaI
                     d1_sCaJ
                     e1_sCaK
                     f13_sCaL
                     g1_sCaM
                     h1_sCaN
                     i1_sCaO
                     j1_sCaP
                     k1_sCaQ
                     l1_sCaR
                     m1_sCaS] \u []
                        let {
                          sat_sCbj [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sCaE]; } in
                        let {
                          sat_sCb5 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow12_sCaB m1_sCaS] \u []
                                  GHC.Show.showsPrec $dShow12_sCaB GHC.Show.$fShow(,)1 m1_sCaS; } in
                        let {
                          sat_sCb6 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCb5 GHC.Types.[]]; } in
                        let {
                          sat_sCb4 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow11_sCaA l1_sCaR] \u []
                                  GHC.Show.showsPrec $dShow11_sCaA GHC.Show.$fShow(,)1 l1_sCaR; } in
                        let {
                          sat_sCb7 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCb4 sat_sCb6]; } in
                        let {
                          sat_sCb3 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow10_sCaz k1_sCaQ] \u []
                                  GHC.Show.showsPrec $dShow10_sCaz GHC.Show.$fShow(,)1 k1_sCaQ; } in
                        let {
                          sat_sCb8 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCb3 sat_sCb7]; } in
                        let {
                          sat_sCb2 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sCay j1_sCaP] \u []
                                  GHC.Show.showsPrec $dShow9_sCay GHC.Show.$fShow(,)1 j1_sCaP; } in
                        let {
                          sat_sCb9 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCb2 sat_sCb8]; } in
                        let {
                          sat_sCb1 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sCax i1_sCaO] \u []
                                  GHC.Show.showsPrec $dShow8_sCax GHC.Show.$fShow(,)1 i1_sCaO; } in
                        let {
                          sat_sCba [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCb1 sat_sCb9]; } in
                        let {
                          sat_sCb0 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sCaw h1_sCaN] \u []
                                  GHC.Show.showsPrec $dShow7_sCaw GHC.Show.$fShow(,)1 h1_sCaN; } in
                        let {
                          sat_sCbb [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCb0 sat_sCba]; } in
                        let {
                          sat_sCaZ [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sCav g1_sCaM] \u []
                                  GHC.Show.showsPrec $dShow6_sCav GHC.Show.$fShow(,)1 g1_sCaM; } in
                        let {
                          sat_sCbc [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCaZ sat_sCbb]; } in
                        let {
                          sat_sCaY [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sCau f13_sCaL] \u []
                                  GHC.Show.showsPrec $dShow5_sCau GHC.Show.$fShow(,)1 f13_sCaL; } in
                        let {
                          sat_sCbd [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCaY sat_sCbc]; } in
                        let {
                          sat_sCaX [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sCat e1_sCaK] \u []
                                  GHC.Show.showsPrec $dShow4_sCat GHC.Show.$fShow(,)1 e1_sCaK; } in
                        let {
                          sat_sCbe [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCaX sat_sCbd]; } in
                        let {
                          sat_sCaW [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sCas d1_sCaJ] \u []
                                  GHC.Show.showsPrec $dShow3_sCas GHC.Show.$fShow(,)1 d1_sCaJ; } in
                        let {
                          sat_sCbf [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCaW sat_sCbe]; } in
                        let {
                          sat_sCaV [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sCar c1_sCaI] \u []
                                  GHC.Show.showsPrec $dShow2_sCar GHC.Show.$fShow(,)1 c1_sCaI; } in
                        let {
                          sat_sCbg [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCaV sat_sCbf]; } in
                        let {
                          sat_sCaU [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sCaq b1_sCaH] \u []
                                  GHC.Show.showsPrec $dShow1_sCaq GHC.Show.$fShow(,)1 b1_sCaH; } in
                        let {
                          sat_sCbh [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCaU sat_sCbg]; } in
                        let {
                          sat_sCaT [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sCap a1_sCaG] \u []
                                  GHC.Show.showsPrec $dShow_sCap GHC.Show.$fShow(,)1 a1_sCaG; } in
                        let {
                          sat_sCbi [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sCaT sat_sCbh];
                        } in  GHC.Show.$fShow(,,,,,,,,,,,,)_go2 sat_sCbi sat_sCbj;
              } in  : [GHC.Show.$fShow(,)4 sat_sCbk];
        };

GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k l m.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m) =>
     (a, b, c, d, e, f, g, h, i, j, k, l, m) -> GHC.Base.String
[GblId,
 Arity=14,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCbl
           $dShow1_sCbm
           $dShow2_sCbn
           $dShow3_sCbo
           $dShow4_sCbp
           $dShow5_sCbq
           $dShow6_sCbr
           $dShow7_sCbs
           $dShow8_sCbt
           $dShow9_sCbu
           $dShow10_sCbv
           $dShow11_sCbw
           $dShow12_sCbx
           x_sCby]
        GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
            $dShow_sCbl
            $dShow1_sCbm
            $dShow2_sCbn
            $dShow3_sCbo
            $dShow4_sCbp
            $dShow5_sCbq
            $dShow6_sCbr
            $dShow7_sCbs
            $dShow8_sCbt
            $dShow9_sCbu
            $dShow10_sCbv
            $dShow11_sCbw
            $dShow12_sCbx
            GHC.Show.$fShow(,)1
            x_sCby
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k l m.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m) =>
     [(a, b, c, d, e, f, g, h, i, j, k, l, m)] -> GHC.Show.ShowS
[GblId,
 Arity=15,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCbz
           $dShow1_sCbA
           $dShow2_sCbB
           $dShow3_sCbC
           $dShow4_sCbD
           $dShow5_sCbE
           $dShow6_sCbF
           $dShow7_sCbG
           $dShow8_sCbH
           $dShow9_sCbI
           $dShow10_sCbJ
           $dShow11_sCbK
           $dShow12_sCbL
           ls_sCbM
           s_sCbN]
        let {
          sat_sCbO [Occ=Once]
            :: (a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
                h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCbz
               $dShow1_sCbA
               $dShow2_sCbB
               $dShow3_sCbC
               $dShow4_sCbD
               $dShow5_sCbE
               $dShow6_sCbF
               $dShow7_sCbG
               $dShow8_sCbH
               $dShow9_sCbI
               $dShow10_sCbJ
               $dShow11_sCbK
               $dShow12_sCbL] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sCbz
                      $dShow1_sCbA
                      $dShow2_sCbB
                      $dShow3_sCbC
                      $dShow4_sCbD
                      $dShow5_sCbE
                      $dShow6_sCbF
                      $dShow7_sCbG
                      $dShow8_sCbH
                      $dShow9_sCbI
                      $dShow10_sCbJ
                      $dShow11_sCbK
                      $dShow12_sCbL
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sCbO ls_sCbM s_sCbN;

GHC.Show.$fShow(,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l, m)
[GblId[DFunId],
 Arity=13,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sCbP
           $dShow1_sCbQ
           $dShow2_sCbR
           $dShow3_sCbS
           $dShow4_sCbT
           $dShow5_sCbU
           $dShow6_sCbV
           $dShow7_sCbW
           $dShow8_sCbX
           $dShow9_sCbY
           $dShow10_sCbZ
           $dShow11_sCc0
           $dShow12_sCc1]
        let {
          sat_sCc4 [Occ=Once]
            :: [(a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
                 h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCbP
               $dShow1_sCbQ
               $dShow2_sCbR
               $dShow3_sCbS
               $dShow4_sCbT
               $dShow5_sCbU
               $dShow6_sCbV
               $dShow7_sCbW
               $dShow8_sCbX
               $dShow9_sCbY
               $dShow10_sCbZ
               $dShow11_sCc0
               $dShow12_sCc1] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList
                      $dShow_sCbP
                      $dShow1_sCbQ
                      $dShow2_sCbR
                      $dShow3_sCbS
                      $dShow4_sCbT
                      $dShow5_sCbU
                      $dShow6_sCbV
                      $dShow7_sCbW
                      $dShow8_sCbX
                      $dShow9_sCbY
                      $dShow10_sCbZ
                      $dShow11_sCc0
                      $dShow12_sCc1
                      eta_B2
                      eta_B1; } in
        let {
          sat_sCc3 [Occ=Once]
            :: (a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
                h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sCbP
               $dShow1_sCbQ
               $dShow2_sCbR
               $dShow3_sCbS
               $dShow4_sCbT
               $dShow5_sCbU
               $dShow6_sCbV
               $dShow7_sCbW
               $dShow8_sCbX
               $dShow9_sCbY
               $dShow10_sCbZ
               $dShow11_sCc0
               $dShow12_sCc1] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow
                      $dShow_sCbP
                      $dShow1_sCbQ
                      $dShow2_sCbR
                      $dShow3_sCbS
                      $dShow4_sCbT
                      $dShow5_sCbU
                      $dShow6_sCbV
                      $dShow7_sCbW
                      $dShow8_sCbX
                      $dShow9_sCbY
                      $dShow10_sCbZ
                      $dShow11_sCc0
                      $dShow12_sCc1
                      eta_B1; } in
        let {
          sat_sCc2 [Occ=Once]
            :: GHC.Types.Int
               -> (a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
                   h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCbP
               $dShow1_sCbQ
               $dShow2_sCbR
               $dShow3_sCbS
               $dShow4_sCbT
               $dShow5_sCbU
               $dShow6_sCbV
               $dShow7_sCbW
               $dShow8_sCbX
               $dShow9_sCbY
               $dShow10_sCbZ
               $dShow11_sCc0
               $dShow12_sCc1] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sCbP
                      $dShow1_sCbQ
                      $dShow2_sCbR
                      $dShow3_sCbS
                      $dShow4_sCbT
                      $dShow5_sCbU
                      $dShow6_sCbV
                      $dShow7_sCbW
                      $dShow8_sCbX
                      $dShow9_sCbY
                      $dShow10_sCbZ
                      $dShow11_sCc0
                      $dShow12_sCc1
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sCc2 sat_sCc3 sat_sCc4];

GHC.Show.$fShow(,,,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCc5 eta_sCc6]
        case ds_sCc5 of {
          [] -> lvl11_rC0o;
          : x_sCc9 [Occ=Once*!] ds1_sCca [Occ=Once!] ->
              case ds1_sCca of wild1_sCcb {
                [] -> x_sCc9 eta_sCc6;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCce [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCc6 wild1_sCcb] \u []
                              GHC.Show.$fShow(,,,,,,,,,,,)_go2 wild1_sCcb eta_sCc6; } in
                    let {
                      sat_sCcf [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCce];
                    } in  x_sCc9 sat_sCcf;
              };
        };

GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k l.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l) =>
     GHC.Types.Int
     -> (a, b, c, d, e, f, g, h, i, j, k, l) -> GHC.Show.ShowS
[GblId,
 Arity=15,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCcg
           $dShow1_sCch
           $dShow2_sCci
           $dShow3_sCcj
           $dShow4_sCck
           $dShow5_sCcl
           $dShow6_sCcm
           $dShow7_sCcn
           $dShow8_sCco
           $dShow9_sCcp
           $dShow10_sCcq
           $dShow11_sCcr
           ds_sCcs
           ds1_sCct
           s_sCcu]
        case ds1_sCct of {
          (,,,,,,,,,,,) a1_sCcw [Occ=Once]
                        b1_sCcx [Occ=Once]
                        c1_sCcy [Occ=Once]
                        d1_sCcz [Occ=Once]
                        e1_sCcA [Occ=Once]
                        f13_sCcB [Occ=Once]
                        g1_sCcC [Occ=Once]
                        h1_sCcD [Occ=Once]
                        i1_sCcE [Occ=Once]
                        j1_sCcF [Occ=Once]
                        k1_sCcG [Occ=Once]
                        l1_sCcH [Occ=Once] ->
              let {
                sat_sCd7 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sCcg
                     $dShow1_sCch
                     $dShow2_sCci
                     $dShow3_sCcj
                     $dShow4_sCck
                     $dShow5_sCcl
                     $dShow6_sCcm
                     $dShow7_sCcn
                     $dShow8_sCco
                     $dShow9_sCcp
                     $dShow10_sCcq
                     $dShow11_sCcr
                     s_sCcu
                     a1_sCcw
                     b1_sCcx
                     c1_sCcy
                     d1_sCcz
                     e1_sCcA
                     f13_sCcB
                     g1_sCcC
                     h1_sCcD
                     i1_sCcE
                     j1_sCcF
                     k1_sCcG
                     l1_sCcH] \u []
                        let {
                          sat_sCd6 [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sCcu]; } in
                        let {
                          sat_sCcT [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow11_sCcr l1_sCcH] \u []
                                  GHC.Show.showsPrec $dShow11_sCcr GHC.Show.$fShow(,)1 l1_sCcH; } in
                        let {
                          sat_sCcU [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCcT GHC.Types.[]]; } in
                        let {
                          sat_sCcS [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow10_sCcq k1_sCcG] \u []
                                  GHC.Show.showsPrec $dShow10_sCcq GHC.Show.$fShow(,)1 k1_sCcG; } in
                        let {
                          sat_sCcV [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCcS sat_sCcU]; } in
                        let {
                          sat_sCcR [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sCcp j1_sCcF] \u []
                                  GHC.Show.showsPrec $dShow9_sCcp GHC.Show.$fShow(,)1 j1_sCcF; } in
                        let {
                          sat_sCcW [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCcR sat_sCcV]; } in
                        let {
                          sat_sCcQ [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sCco i1_sCcE] \u []
                                  GHC.Show.showsPrec $dShow8_sCco GHC.Show.$fShow(,)1 i1_sCcE; } in
                        let {
                          sat_sCcX [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCcQ sat_sCcW]; } in
                        let {
                          sat_sCcP [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sCcn h1_sCcD] \u []
                                  GHC.Show.showsPrec $dShow7_sCcn GHC.Show.$fShow(,)1 h1_sCcD; } in
                        let {
                          sat_sCcY [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCcP sat_sCcX]; } in
                        let {
                          sat_sCcO [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sCcm g1_sCcC] \u []
                                  GHC.Show.showsPrec $dShow6_sCcm GHC.Show.$fShow(,)1 g1_sCcC; } in
                        let {
                          sat_sCcZ [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCcO sat_sCcY]; } in
                        let {
                          sat_sCcN [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sCcl f13_sCcB] \u []
                                  GHC.Show.showsPrec $dShow5_sCcl GHC.Show.$fShow(,)1 f13_sCcB; } in
                        let {
                          sat_sCd0 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCcN sat_sCcZ]; } in
                        let {
                          sat_sCcM [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sCck e1_sCcA] \u []
                                  GHC.Show.showsPrec $dShow4_sCck GHC.Show.$fShow(,)1 e1_sCcA; } in
                        let {
                          sat_sCd1 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCcM sat_sCd0]; } in
                        let {
                          sat_sCcL [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sCcj d1_sCcz] \u []
                                  GHC.Show.showsPrec $dShow3_sCcj GHC.Show.$fShow(,)1 d1_sCcz; } in
                        let {
                          sat_sCd2 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCcL sat_sCd1]; } in
                        let {
                          sat_sCcK [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sCci c1_sCcy] \u []
                                  GHC.Show.showsPrec $dShow2_sCci GHC.Show.$fShow(,)1 c1_sCcy; } in
                        let {
                          sat_sCd3 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCcK sat_sCd2]; } in
                        let {
                          sat_sCcJ [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sCch b1_sCcx] \u []
                                  GHC.Show.showsPrec $dShow1_sCch GHC.Show.$fShow(,)1 b1_sCcx; } in
                        let {
                          sat_sCd4 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCcJ sat_sCd3]; } in
                        let {
                          sat_sCcI [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sCcg a1_sCcw] \u []
                                  GHC.Show.showsPrec $dShow_sCcg GHC.Show.$fShow(,)1 a1_sCcw; } in
                        let {
                          sat_sCd5 [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sCcI sat_sCd4];
                        } in  GHC.Show.$fShow(,,,,,,,,,,,)_go2 sat_sCd5 sat_sCd6;
              } in  : [GHC.Show.$fShow(,)4 sat_sCd7];
        };

GHC.Show.$fShow(,,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k l.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l) =>
     (a, b, c, d, e, f, g, h, i, j, k, l) -> GHC.Base.String
[GblId,
 Arity=13,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCd8
           $dShow1_sCd9
           $dShow2_sCda
           $dShow3_sCdb
           $dShow4_sCdc
           $dShow5_sCdd
           $dShow6_sCde
           $dShow7_sCdf
           $dShow8_sCdg
           $dShow9_sCdh
           $dShow10_sCdi
           $dShow11_sCdj
           x_sCdk]
        GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
            $dShow_sCd8
            $dShow1_sCd9
            $dShow2_sCda
            $dShow3_sCdb
            $dShow4_sCdc
            $dShow5_sCdd
            $dShow6_sCde
            $dShow7_sCdf
            $dShow8_sCdg
            $dShow9_sCdh
            $dShow10_sCdi
            $dShow11_sCdj
            GHC.Show.$fShow(,)1
            x_sCdk
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k l.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l) =>
     [(a, b, c, d, e, f, g, h, i, j, k, l)] -> GHC.Show.ShowS
[GblId,
 Arity=14,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCdl
           $dShow1_sCdm
           $dShow2_sCdn
           $dShow3_sCdo
           $dShow4_sCdp
           $dShow5_sCdq
           $dShow6_sCdr
           $dShow7_sCds
           $dShow8_sCdt
           $dShow9_sCdu
           $dShow10_sCdv
           $dShow11_sCdw
           ls_sCdx
           s_sCdy]
        let {
          sat_sCdz [Occ=Once]
            :: (a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
                h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCdl
               $dShow1_sCdm
               $dShow2_sCdn
               $dShow3_sCdo
               $dShow4_sCdp
               $dShow5_sCdq
               $dShow6_sCdr
               $dShow7_sCds
               $dShow8_sCdt
               $dShow9_sCdu
               $dShow10_sCdv
               $dShow11_sCdw] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sCdl
                      $dShow1_sCdm
                      $dShow2_sCdn
                      $dShow3_sCdo
                      $dShow4_sCdp
                      $dShow5_sCdq
                      $dShow6_sCdr
                      $dShow7_sCds
                      $dShow8_sCdt
                      $dShow9_sCdu
                      $dShow10_sCdv
                      $dShow11_sCdw
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sCdz ls_sCdx s_sCdy;

GHC.Show.$fShow(,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l)
[GblId[DFunId],
 Arity=12,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sCdA
           $dShow1_sCdB
           $dShow2_sCdC
           $dShow3_sCdD
           $dShow4_sCdE
           $dShow5_sCdF
           $dShow6_sCdG
           $dShow7_sCdH
           $dShow8_sCdI
           $dShow9_sCdJ
           $dShow10_sCdK
           $dShow11_sCdL]
        let {
          sat_sCdO [Occ=Once]
            :: [(a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
                 h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCdA
               $dShow1_sCdB
               $dShow2_sCdC
               $dShow3_sCdD
               $dShow4_sCdE
               $dShow5_sCdF
               $dShow6_sCdG
               $dShow7_sCdH
               $dShow8_sCdI
               $dShow9_sCdJ
               $dShow10_sCdK
               $dShow11_sCdL] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList
                      $dShow_sCdA
                      $dShow1_sCdB
                      $dShow2_sCdC
                      $dShow3_sCdD
                      $dShow4_sCdE
                      $dShow5_sCdF
                      $dShow6_sCdG
                      $dShow7_sCdH
                      $dShow8_sCdI
                      $dShow9_sCdJ
                      $dShow10_sCdK
                      $dShow11_sCdL
                      eta_B2
                      eta_B1; } in
        let {
          sat_sCdN [Occ=Once]
            :: (a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
                h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sCdA
               $dShow1_sCdB
               $dShow2_sCdC
               $dShow3_sCdD
               $dShow4_sCdE
               $dShow5_sCdF
               $dShow6_sCdG
               $dShow7_sCdH
               $dShow8_sCdI
               $dShow9_sCdJ
               $dShow10_sCdK
               $dShow11_sCdL] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,)_$cshow
                      $dShow_sCdA
                      $dShow1_sCdB
                      $dShow2_sCdC
                      $dShow3_sCdD
                      $dShow4_sCdE
                      $dShow5_sCdF
                      $dShow6_sCdG
                      $dShow7_sCdH
                      $dShow8_sCdI
                      $dShow9_sCdJ
                      $dShow10_sCdK
                      $dShow11_sCdL
                      eta_B1; } in
        let {
          sat_sCdM [Occ=Once]
            :: GHC.Types.Int
               -> (a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
                   h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCdA
               $dShow1_sCdB
               $dShow2_sCdC
               $dShow3_sCdD
               $dShow4_sCdE
               $dShow5_sCdF
               $dShow6_sCdG
               $dShow7_sCdH
               $dShow8_sCdI
               $dShow9_sCdJ
               $dShow10_sCdK
               $dShow11_sCdL] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sCdA
                      $dShow1_sCdB
                      $dShow2_sCdC
                      $dShow3_sCdD
                      $dShow4_sCdE
                      $dShow5_sCdF
                      $dShow6_sCdG
                      $dShow7_sCdH
                      $dShow8_sCdI
                      $dShow9_sCdJ
                      $dShow10_sCdK
                      $dShow11_sCdL
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sCdM sat_sCdN sat_sCdO];

GHC.Show.$fShow(,,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCdP eta_sCdQ]
        case ds_sCdP of {
          [] -> lvl11_rC0o;
          : x_sCdT [Occ=Once*!] ds1_sCdU [Occ=Once!] ->
              case ds1_sCdU of wild1_sCdV {
                [] -> x_sCdT eta_sCdQ;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCdY [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCdQ wild1_sCdV] \u []
                              GHC.Show.$fShow(,,,,,,,,,,)_go2 wild1_sCdV eta_sCdQ; } in
                    let {
                      sat_sCdZ [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCdY];
                    } in  x_sCdT sat_sCdZ;
              };
        };

GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j,
      GHC.Show.Show k) =>
     GHC.Types.Int
     -> (a, b, c, d, e, f, g, h, i, j, k) -> GHC.Show.ShowS
[GblId,
 Arity=14,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCe0
           $dShow1_sCe1
           $dShow2_sCe2
           $dShow3_sCe3
           $dShow4_sCe4
           $dShow5_sCe5
           $dShow6_sCe6
           $dShow7_sCe7
           $dShow8_sCe8
           $dShow9_sCe9
           $dShow10_sCea
           ds_sCeb
           ds1_sCec
           s_sCed]
        case ds1_sCec of {
          (,,,,,,,,,,) a1_sCef [Occ=Once]
                       b1_sCeg [Occ=Once]
                       c1_sCeh [Occ=Once]
                       d1_sCei [Occ=Once]
                       e1_sCej [Occ=Once]
                       f13_sCek [Occ=Once]
                       g1_sCel [Occ=Once]
                       h1_sCem [Occ=Once]
                       i1_sCen [Occ=Once]
                       j1_sCeo [Occ=Once]
                       k1_sCep [Occ=Once] ->
              let {
                sat_sCeN [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sCe0
                     $dShow1_sCe1
                     $dShow2_sCe2
                     $dShow3_sCe3
                     $dShow4_sCe4
                     $dShow5_sCe5
                     $dShow6_sCe6
                     $dShow7_sCe7
                     $dShow8_sCe8
                     $dShow9_sCe9
                     $dShow10_sCea
                     s_sCed
                     a1_sCef
                     b1_sCeg
                     c1_sCeh
                     d1_sCei
                     e1_sCej
                     f13_sCek
                     g1_sCel
                     h1_sCem
                     i1_sCen
                     j1_sCeo
                     k1_sCep] \u []
                        let {
                          sat_sCeM [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sCed]; } in
                        let {
                          sat_sCeA [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow10_sCea k1_sCep] \u []
                                  GHC.Show.showsPrec $dShow10_sCea GHC.Show.$fShow(,)1 k1_sCep; } in
                        let {
                          sat_sCeB [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCeA GHC.Types.[]]; } in
                        let {
                          sat_sCez [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sCe9 j1_sCeo] \u []
                                  GHC.Show.showsPrec $dShow9_sCe9 GHC.Show.$fShow(,)1 j1_sCeo; } in
                        let {
                          sat_sCeC [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCez sat_sCeB]; } in
                        let {
                          sat_sCey [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sCe8 i1_sCen] \u []
                                  GHC.Show.showsPrec $dShow8_sCe8 GHC.Show.$fShow(,)1 i1_sCen; } in
                        let {
                          sat_sCeD [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCey sat_sCeC]; } in
                        let {
                          sat_sCex [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sCe7 h1_sCem] \u []
                                  GHC.Show.showsPrec $dShow7_sCe7 GHC.Show.$fShow(,)1 h1_sCem; } in
                        let {
                          sat_sCeE [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCex sat_sCeD]; } in
                        let {
                          sat_sCew [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sCe6 g1_sCel] \u []
                                  GHC.Show.showsPrec $dShow6_sCe6 GHC.Show.$fShow(,)1 g1_sCel; } in
                        let {
                          sat_sCeF [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCew sat_sCeE]; } in
                        let {
                          sat_sCev [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sCe5 f13_sCek] \u []
                                  GHC.Show.showsPrec $dShow5_sCe5 GHC.Show.$fShow(,)1 f13_sCek; } in
                        let {
                          sat_sCeG [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCev sat_sCeF]; } in
                        let {
                          sat_sCeu [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sCe4 e1_sCej] \u []
                                  GHC.Show.showsPrec $dShow4_sCe4 GHC.Show.$fShow(,)1 e1_sCej; } in
                        let {
                          sat_sCeH [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCeu sat_sCeG]; } in
                        let {
                          sat_sCet [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sCe3 d1_sCei] \u []
                                  GHC.Show.showsPrec $dShow3_sCe3 GHC.Show.$fShow(,)1 d1_sCei; } in
                        let {
                          sat_sCeI [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCet sat_sCeH]; } in
                        let {
                          sat_sCes [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sCe2 c1_sCeh] \u []
                                  GHC.Show.showsPrec $dShow2_sCe2 GHC.Show.$fShow(,)1 c1_sCeh; } in
                        let {
                          sat_sCeJ [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCes sat_sCeI]; } in
                        let {
                          sat_sCer [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sCe1 b1_sCeg] \u []
                                  GHC.Show.showsPrec $dShow1_sCe1 GHC.Show.$fShow(,)1 b1_sCeg; } in
                        let {
                          sat_sCeK [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCer sat_sCeJ]; } in
                        let {
                          sat_sCeq [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sCe0 a1_sCef] \u []
                                  GHC.Show.showsPrec $dShow_sCe0 GHC.Show.$fShow(,)1 a1_sCef; } in
                        let {
                          sat_sCeL [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sCeq sat_sCeK];
                        } in  GHC.Show.$fShow(,,,,,,,,,,)_go2 sat_sCeL sat_sCeM;
              } in  : [GHC.Show.$fShow(,)4 sat_sCeN];
        };

GHC.Show.$fShow(,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j,
      GHC.Show.Show k) =>
     (a, b, c, d, e, f, g, h, i, j, k) -> GHC.Base.String
[GblId,
 Arity=12,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCeO
           $dShow1_sCeP
           $dShow2_sCeQ
           $dShow3_sCeR
           $dShow4_sCeS
           $dShow5_sCeT
           $dShow6_sCeU
           $dShow7_sCeV
           $dShow8_sCeW
           $dShow9_sCeX
           $dShow10_sCeY
           x_sCeZ]
        GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
            $dShow_sCeO
            $dShow1_sCeP
            $dShow2_sCeQ
            $dShow3_sCeR
            $dShow4_sCeS
            $dShow5_sCeT
            $dShow6_sCeU
            $dShow7_sCeV
            $dShow8_sCeW
            $dShow9_sCeX
            $dShow10_sCeY
            GHC.Show.$fShow(,)1
            x_sCeZ
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j,
      GHC.Show.Show k) =>
     [(a, b, c, d, e, f, g, h, i, j, k)] -> GHC.Show.ShowS
[GblId,
 Arity=13,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCf0
           $dShow1_sCf1
           $dShow2_sCf2
           $dShow3_sCf3
           $dShow4_sCf4
           $dShow5_sCf5
           $dShow6_sCf6
           $dShow7_sCf7
           $dShow8_sCf8
           $dShow9_sCf9
           $dShow10_sCfa
           ls_sCfb
           s_sCfc]
        let {
          sat_sCfd [Occ=Once]
            :: (a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
                h_azCR, i_azCS, j_azCT, k_azCU)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCf0
               $dShow1_sCf1
               $dShow2_sCf2
               $dShow3_sCf3
               $dShow4_sCf4
               $dShow5_sCf5
               $dShow6_sCf6
               $dShow7_sCf7
               $dShow8_sCf8
               $dShow9_sCf9
               $dShow10_sCfa] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
                      $dShow_sCf0
                      $dShow1_sCf1
                      $dShow2_sCf2
                      $dShow3_sCf3
                      $dShow4_sCf4
                      $dShow5_sCf5
                      $dShow6_sCf6
                      $dShow7_sCf7
                      $dShow8_sCf8
                      $dShow9_sCf9
                      $dShow10_sCfa
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sCfd ls_sCfb s_sCfc;

GHC.Show.$fShow(,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j,
      GHC.Show.Show k) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k)
[GblId[DFunId],
 Arity=11,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sCfe
           $dShow1_sCff
           $dShow2_sCfg
           $dShow3_sCfh
           $dShow4_sCfi
           $dShow5_sCfj
           $dShow6_sCfk
           $dShow7_sCfl
           $dShow8_sCfm
           $dShow9_sCfn
           $dShow10_sCfo]
        let {
          sat_sCfr [Occ=Once]
            :: [(a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
                 h_azCR, i_azCS, j_azCT, k_azCU)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCfe
               $dShow1_sCff
               $dShow2_sCfg
               $dShow3_sCfh
               $dShow4_sCfi
               $dShow5_sCfj
               $dShow6_sCfk
               $dShow7_sCfl
               $dShow8_sCfm
               $dShow9_sCfn
               $dShow10_sCfo] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,)_$cshowList
                      $dShow_sCfe
                      $dShow1_sCff
                      $dShow2_sCfg
                      $dShow3_sCfh
                      $dShow4_sCfi
                      $dShow5_sCfj
                      $dShow6_sCfk
                      $dShow7_sCfl
                      $dShow8_sCfm
                      $dShow9_sCfn
                      $dShow10_sCfo
                      eta_B2
                      eta_B1; } in
        let {
          sat_sCfq [Occ=Once]
            :: (a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
                h_azCR, i_azCS, j_azCT, k_azCU)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sCfe
               $dShow1_sCff
               $dShow2_sCfg
               $dShow3_sCfh
               $dShow4_sCfi
               $dShow5_sCfj
               $dShow6_sCfk
               $dShow7_sCfl
               $dShow8_sCfm
               $dShow9_sCfn
               $dShow10_sCfo] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,)_$cshow
                      $dShow_sCfe
                      $dShow1_sCff
                      $dShow2_sCfg
                      $dShow3_sCfh
                      $dShow4_sCfi
                      $dShow5_sCfj
                      $dShow6_sCfk
                      $dShow7_sCfl
                      $dShow8_sCfm
                      $dShow9_sCfn
                      $dShow10_sCfo
                      eta_B1; } in
        let {
          sat_sCfp [Occ=Once]
            :: GHC.Types.Int
               -> (a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
                   h_azCR, i_azCS, j_azCT, k_azCU)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCfe
               $dShow1_sCff
               $dShow2_sCfg
               $dShow3_sCfh
               $dShow4_sCfi
               $dShow5_sCfj
               $dShow6_sCfk
               $dShow7_sCfl
               $dShow8_sCfm
               $dShow9_sCfn
               $dShow10_sCfo] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
                      $dShow_sCfe
                      $dShow1_sCff
                      $dShow2_sCfg
                      $dShow3_sCfh
                      $dShow4_sCfi
                      $dShow5_sCfj
                      $dShow6_sCfk
                      $dShow7_sCfl
                      $dShow8_sCfm
                      $dShow9_sCfn
                      $dShow10_sCfo
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sCfp sat_sCfq sat_sCfr];

GHC.Show.$fShow(,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCfs eta_sCft]
        case ds_sCfs of {
          [] -> lvl11_rC0o;
          : x_sCfw [Occ=Once*!] ds1_sCfx [Occ=Once!] ->
              case ds1_sCfx of wild1_sCfy {
                [] -> x_sCfw eta_sCft;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCfB [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCft wild1_sCfy] \u []
                              GHC.Show.$fShow(,,,,,,,,,)_go2 wild1_sCfy eta_sCft; } in
                    let {
                      sat_sCfC [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCfB];
                    } in  x_sCfw sat_sCfC;
              };
        };

GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j) =>
     GHC.Types.Int -> (a, b, c, d, e, f, g, h, i, j) -> GHC.Show.ShowS
[GblId,
 Arity=13,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCfD
           $dShow1_sCfE
           $dShow2_sCfF
           $dShow3_sCfG
           $dShow4_sCfH
           $dShow5_sCfI
           $dShow6_sCfJ
           $dShow7_sCfK
           $dShow8_sCfL
           $dShow9_sCfM
           ds_sCfN
           ds1_sCfO
           s_sCfP]
        case ds1_sCfO of {
          (,,,,,,,,,) a1_sCfR [Occ=Once]
                      b1_sCfS [Occ=Once]
                      c1_sCfT [Occ=Once]
                      d1_sCfU [Occ=Once]
                      e1_sCfV [Occ=Once]
                      f13_sCfW [Occ=Once]
                      g1_sCfX [Occ=Once]
                      h1_sCfY [Occ=Once]
                      i1_sCfZ [Occ=Once]
                      j1_sCg0 [Occ=Once] ->
              let {
                sat_sCgm [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sCfD
                     $dShow1_sCfE
                     $dShow2_sCfF
                     $dShow3_sCfG
                     $dShow4_sCfH
                     $dShow5_sCfI
                     $dShow6_sCfJ
                     $dShow7_sCfK
                     $dShow8_sCfL
                     $dShow9_sCfM
                     s_sCfP
                     a1_sCfR
                     b1_sCfS
                     c1_sCfT
                     d1_sCfU
                     e1_sCfV
                     f13_sCfW
                     g1_sCfX
                     h1_sCfY
                     i1_sCfZ
                     j1_sCg0] \u []
                        let {
                          sat_sCgl [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sCfP]; } in
                        let {
                          sat_sCga [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sCfM j1_sCg0] \u []
                                  GHC.Show.showsPrec $dShow9_sCfM GHC.Show.$fShow(,)1 j1_sCg0; } in
                        let {
                          sat_sCgb [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCga GHC.Types.[]]; } in
                        let {
                          sat_sCg9 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sCfL i1_sCfZ] \u []
                                  GHC.Show.showsPrec $dShow8_sCfL GHC.Show.$fShow(,)1 i1_sCfZ; } in
                        let {
                          sat_sCgc [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCg9 sat_sCgb]; } in
                        let {
                          sat_sCg8 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sCfK h1_sCfY] \u []
                                  GHC.Show.showsPrec $dShow7_sCfK GHC.Show.$fShow(,)1 h1_sCfY; } in
                        let {
                          sat_sCgd [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCg8 sat_sCgc]; } in
                        let {
                          sat_sCg7 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sCfJ g1_sCfX] \u []
                                  GHC.Show.showsPrec $dShow6_sCfJ GHC.Show.$fShow(,)1 g1_sCfX; } in
                        let {
                          sat_sCge [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCg7 sat_sCgd]; } in
                        let {
                          sat_sCg6 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sCfI f13_sCfW] \u []
                                  GHC.Show.showsPrec $dShow5_sCfI GHC.Show.$fShow(,)1 f13_sCfW; } in
                        let {
                          sat_sCgf [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCg6 sat_sCge]; } in
                        let {
                          sat_sCg5 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sCfH e1_sCfV] \u []
                                  GHC.Show.showsPrec $dShow4_sCfH GHC.Show.$fShow(,)1 e1_sCfV; } in
                        let {
                          sat_sCgg [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCg5 sat_sCgf]; } in
                        let {
                          sat_sCg4 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sCfG d1_sCfU] \u []
                                  GHC.Show.showsPrec $dShow3_sCfG GHC.Show.$fShow(,)1 d1_sCfU; } in
                        let {
                          sat_sCgh [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCg4 sat_sCgg]; } in
                        let {
                          sat_sCg3 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sCfF c1_sCfT] \u []
                                  GHC.Show.showsPrec $dShow2_sCfF GHC.Show.$fShow(,)1 c1_sCfT; } in
                        let {
                          sat_sCgi [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCg3 sat_sCgh]; } in
                        let {
                          sat_sCg2 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sCfE b1_sCfS] \u []
                                  GHC.Show.showsPrec $dShow1_sCfE GHC.Show.$fShow(,)1 b1_sCfS; } in
                        let {
                          sat_sCgj [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCg2 sat_sCgi]; } in
                        let {
                          sat_sCg1 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sCfD a1_sCfR] \u []
                                  GHC.Show.showsPrec $dShow_sCfD GHC.Show.$fShow(,)1 a1_sCfR; } in
                        let {
                          sat_sCgk [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sCg1 sat_sCgj];
                        } in  GHC.Show.$fShow(,,,,,,,,,)_go2 sat_sCgk sat_sCgl;
              } in  : [GHC.Show.$fShow(,)4 sat_sCgm];
        };

GHC.Show.$fShow(,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j) =>
     (a, b, c, d, e, f, g, h, i, j) -> GHC.Base.String
[GblId,
 Arity=11,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCgn
           $dShow1_sCgo
           $dShow2_sCgp
           $dShow3_sCgq
           $dShow4_sCgr
           $dShow5_sCgs
           $dShow6_sCgt
           $dShow7_sCgu
           $dShow8_sCgv
           $dShow9_sCgw
           x_sCgx]
        GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
            $dShow_sCgn
            $dShow1_sCgo
            $dShow2_sCgp
            $dShow3_sCgq
            $dShow4_sCgr
            $dShow5_sCgs
            $dShow6_sCgt
            $dShow7_sCgu
            $dShow8_sCgv
            $dShow9_sCgw
            GHC.Show.$fShow(,)1
            x_sCgx
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j) =>
     [(a, b, c, d, e, f, g, h, i, j)] -> GHC.Show.ShowS
[GblId,
 Arity=12,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCgy
           $dShow1_sCgz
           $dShow2_sCgA
           $dShow3_sCgB
           $dShow4_sCgC
           $dShow5_sCgD
           $dShow6_sCgE
           $dShow7_sCgF
           $dShow8_sCgG
           $dShow9_sCgH
           ls_sCgI
           s_sCgJ]
        let {
          sat_sCgK [Occ=Once]
            :: (a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
                h_azDP, i_azDQ, j_azDR)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCgy
               $dShow1_sCgz
               $dShow2_sCgA
               $dShow3_sCgB
               $dShow4_sCgC
               $dShow5_sCgD
               $dShow6_sCgE
               $dShow7_sCgF
               $dShow8_sCgG
               $dShow9_sCgH] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
                      $dShow_sCgy
                      $dShow1_sCgz
                      $dShow2_sCgA
                      $dShow3_sCgB
                      $dShow4_sCgC
                      $dShow5_sCgD
                      $dShow6_sCgE
                      $dShow7_sCgF
                      $dShow8_sCgG
                      $dShow9_sCgH
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sCgK ls_sCgI s_sCgJ;

GHC.Show.$fShow(,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j)
[GblId[DFunId],
 Arity=10,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sCgL
           $dShow1_sCgM
           $dShow2_sCgN
           $dShow3_sCgO
           $dShow4_sCgP
           $dShow5_sCgQ
           $dShow6_sCgR
           $dShow7_sCgS
           $dShow8_sCgT
           $dShow9_sCgU]
        let {
          sat_sCgX [Occ=Once]
            :: [(a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
                 h_azDP, i_azDQ, j_azDR)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCgL
               $dShow1_sCgM
               $dShow2_sCgN
               $dShow3_sCgO
               $dShow4_sCgP
               $dShow5_sCgQ
               $dShow6_sCgR
               $dShow7_sCgS
               $dShow8_sCgT
               $dShow9_sCgU] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,)_$cshowList
                      $dShow_sCgL
                      $dShow1_sCgM
                      $dShow2_sCgN
                      $dShow3_sCgO
                      $dShow4_sCgP
                      $dShow5_sCgQ
                      $dShow6_sCgR
                      $dShow7_sCgS
                      $dShow8_sCgT
                      $dShow9_sCgU
                      eta_B2
                      eta_B1; } in
        let {
          sat_sCgW [Occ=Once]
            :: (a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
                h_azDP, i_azDQ, j_azDR)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sCgL
               $dShow1_sCgM
               $dShow2_sCgN
               $dShow3_sCgO
               $dShow4_sCgP
               $dShow5_sCgQ
               $dShow6_sCgR
               $dShow7_sCgS
               $dShow8_sCgT
               $dShow9_sCgU] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,)_$cshow
                      $dShow_sCgL
                      $dShow1_sCgM
                      $dShow2_sCgN
                      $dShow3_sCgO
                      $dShow4_sCgP
                      $dShow5_sCgQ
                      $dShow6_sCgR
                      $dShow7_sCgS
                      $dShow8_sCgT
                      $dShow9_sCgU
                      eta_B1; } in
        let {
          sat_sCgV [Occ=Once]
            :: GHC.Types.Int
               -> (a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
                   h_azDP, i_azDQ, j_azDR)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCgL
               $dShow1_sCgM
               $dShow2_sCgN
               $dShow3_sCgO
               $dShow4_sCgP
               $dShow5_sCgQ
               $dShow6_sCgR
               $dShow7_sCgS
               $dShow8_sCgT
               $dShow9_sCgU] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
                      $dShow_sCgL
                      $dShow1_sCgM
                      $dShow2_sCgN
                      $dShow3_sCgO
                      $dShow4_sCgP
                      $dShow5_sCgQ
                      $dShow6_sCgR
                      $dShow7_sCgS
                      $dShow8_sCgT
                      $dShow9_sCgU
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sCgV sat_sCgW sat_sCgX];

GHC.Show.$fShow(,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCgY eta_sCgZ]
        case ds_sCgY of {
          [] -> lvl11_rC0o;
          : x_sCh2 [Occ=Once*!] ds1_sCh3 [Occ=Once!] ->
              case ds1_sCh3 of wild1_sCh4 {
                [] -> x_sCh2 eta_sCgZ;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCh7 [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCgZ wild1_sCh4] \u []
                              GHC.Show.$fShow(,,,,,,,,)_go2 wild1_sCh4 eta_sCgZ; } in
                    let {
                      sat_sCh8 [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCh7];
                    } in  x_sCh2 sat_sCh8;
              };
        };

GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i) =>
     GHC.Types.Int -> (a, b, c, d, e, f, g, h, i) -> GHC.Show.ShowS
[GblId,
 Arity=12,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCh9
           $dShow1_sCha
           $dShow2_sChb
           $dShow3_sChc
           $dShow4_sChd
           $dShow5_sChe
           $dShow6_sChf
           $dShow7_sChg
           $dShow8_sChh
           ds_sChi
           ds1_sChj
           s_sChk]
        case ds1_sChj of {
          (,,,,,,,,) a1_sChm [Occ=Once]
                     b1_sChn [Occ=Once]
                     c1_sCho [Occ=Once]
                     d1_sChp [Occ=Once]
                     e1_sChq [Occ=Once]
                     f13_sChr [Occ=Once]
                     g1_sChs [Occ=Once]
                     h1_sCht [Occ=Once]
                     i1_sChu [Occ=Once] ->
              let {
                sat_sChO [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sCh9
                     $dShow1_sCha
                     $dShow2_sChb
                     $dShow3_sChc
                     $dShow4_sChd
                     $dShow5_sChe
                     $dShow6_sChf
                     $dShow7_sChg
                     $dShow8_sChh
                     s_sChk
                     a1_sChm
                     b1_sChn
                     c1_sCho
                     d1_sChp
                     e1_sChq
                     f13_sChr
                     g1_sChs
                     h1_sCht
                     i1_sChu] \u []
                        let {
                          sat_sChN [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sChk]; } in
                        let {
                          sat_sChD [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sChh i1_sChu] \u []
                                  GHC.Show.showsPrec $dShow8_sChh GHC.Show.$fShow(,)1 i1_sChu; } in
                        let {
                          sat_sChE [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sChD GHC.Types.[]]; } in
                        let {
                          sat_sChC [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sChg h1_sCht] \u []
                                  GHC.Show.showsPrec $dShow7_sChg GHC.Show.$fShow(,)1 h1_sCht; } in
                        let {
                          sat_sChF [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sChC sat_sChE]; } in
                        let {
                          sat_sChB [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sChf g1_sChs] \u []
                                  GHC.Show.showsPrec $dShow6_sChf GHC.Show.$fShow(,)1 g1_sChs; } in
                        let {
                          sat_sChG [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sChB sat_sChF]; } in
                        let {
                          sat_sChA [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sChe f13_sChr] \u []
                                  GHC.Show.showsPrec $dShow5_sChe GHC.Show.$fShow(,)1 f13_sChr; } in
                        let {
                          sat_sChH [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sChA sat_sChG]; } in
                        let {
                          sat_sChz [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sChd e1_sChq] \u []
                                  GHC.Show.showsPrec $dShow4_sChd GHC.Show.$fShow(,)1 e1_sChq; } in
                        let {
                          sat_sChI [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sChz sat_sChH]; } in
                        let {
                          sat_sChy [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sChc d1_sChp] \u []
                                  GHC.Show.showsPrec $dShow3_sChc GHC.Show.$fShow(,)1 d1_sChp; } in
                        let {
                          sat_sChJ [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sChy sat_sChI]; } in
                        let {
                          sat_sChx [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sChb c1_sCho] \u []
                                  GHC.Show.showsPrec $dShow2_sChb GHC.Show.$fShow(,)1 c1_sCho; } in
                        let {
                          sat_sChK [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sChx sat_sChJ]; } in
                        let {
                          sat_sChw [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sCha b1_sChn] \u []
                                  GHC.Show.showsPrec $dShow1_sCha GHC.Show.$fShow(,)1 b1_sChn; } in
                        let {
                          sat_sChL [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sChw sat_sChK]; } in
                        let {
                          sat_sChv [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sCh9 a1_sChm] \u []
                                  GHC.Show.showsPrec $dShow_sCh9 GHC.Show.$fShow(,)1 a1_sChm; } in
                        let {
                          sat_sChM [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sChv sat_sChL];
                        } in  GHC.Show.$fShow(,,,,,,,,)_go2 sat_sChM sat_sChN;
              } in  : [GHC.Show.$fShow(,)4 sat_sChO];
        };

GHC.Show.$fShow(,,,,,,,,)_$cshow
  :: forall a b c d e f g h i.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i) =>
     (a, b, c, d, e, f, g, h, i) -> GHC.Base.String
[GblId,
 Arity=10,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sChP
           $dShow1_sChQ
           $dShow2_sChR
           $dShow3_sChS
           $dShow4_sChT
           $dShow5_sChU
           $dShow6_sChV
           $dShow7_sChW
           $dShow8_sChX
           x_sChY]
        GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
            $dShow_sChP
            $dShow1_sChQ
            $dShow2_sChR
            $dShow3_sChS
            $dShow4_sChT
            $dShow5_sChU
            $dShow6_sChV
            $dShow7_sChW
            $dShow8_sChX
            GHC.Show.$fShow(,)1
            x_sChY
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i) =>
     [(a, b, c, d, e, f, g, h, i)] -> GHC.Show.ShowS
[GblId,
 Arity=11,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sChZ
           $dShow1_sCi0
           $dShow2_sCi1
           $dShow3_sCi2
           $dShow4_sCi3
           $dShow5_sCi4
           $dShow6_sCi5
           $dShow7_sCi6
           $dShow8_sCi7
           ls_sCi8
           s_sCi9]
        let {
          sat_sCia [Occ=Once]
            :: (a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
                h_azEJ, i_azEK)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sChZ
               $dShow1_sCi0
               $dShow2_sCi1
               $dShow3_sCi2
               $dShow4_sCi3
               $dShow5_sCi4
               $dShow6_sCi5
               $dShow7_sCi6
               $dShow8_sCi7] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
                      $dShow_sChZ
                      $dShow1_sCi0
                      $dShow2_sCi1
                      $dShow3_sCi2
                      $dShow4_sCi3
                      $dShow5_sCi4
                      $dShow6_sCi5
                      $dShow7_sCi6
                      $dShow8_sCi7
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sCia ls_sCi8 s_sCi9;

GHC.Show.$fShow(,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i)
[GblId[DFunId],
 Arity=9,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sCib
           $dShow1_sCic
           $dShow2_sCid
           $dShow3_sCie
           $dShow4_sCif
           $dShow5_sCig
           $dShow6_sCih
           $dShow7_sCii
           $dShow8_sCij]
        let {
          sat_sCim [Occ=Once]
            :: [(a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
                 h_azEJ, i_azEK)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCib
               $dShow1_sCic
               $dShow2_sCid
               $dShow3_sCie
               $dShow4_sCif
               $dShow5_sCig
               $dShow6_sCih
               $dShow7_sCii
               $dShow8_sCij] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,)_$cshowList
                      $dShow_sCib
                      $dShow1_sCic
                      $dShow2_sCid
                      $dShow3_sCie
                      $dShow4_sCif
                      $dShow5_sCig
                      $dShow6_sCih
                      $dShow7_sCii
                      $dShow8_sCij
                      eta_B2
                      eta_B1; } in
        let {
          sat_sCil [Occ=Once]
            :: (a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
                h_azEJ, i_azEK)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sCib
               $dShow1_sCic
               $dShow2_sCid
               $dShow3_sCie
               $dShow4_sCif
               $dShow5_sCig
               $dShow6_sCih
               $dShow7_sCii
               $dShow8_sCij] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,)_$cshow
                      $dShow_sCib
                      $dShow1_sCic
                      $dShow2_sCid
                      $dShow3_sCie
                      $dShow4_sCif
                      $dShow5_sCig
                      $dShow6_sCih
                      $dShow7_sCii
                      $dShow8_sCij
                      eta_B1; } in
        let {
          sat_sCik [Occ=Once]
            :: GHC.Types.Int
               -> (a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
                   h_azEJ, i_azEK)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCib
               $dShow1_sCic
               $dShow2_sCid
               $dShow3_sCie
               $dShow4_sCif
               $dShow5_sCig
               $dShow6_sCih
               $dShow7_sCii
               $dShow8_sCij] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
                      $dShow_sCib
                      $dShow1_sCic
                      $dShow2_sCid
                      $dShow3_sCie
                      $dShow4_sCif
                      $dShow5_sCig
                      $dShow6_sCih
                      $dShow7_sCii
                      $dShow8_sCij
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sCik sat_sCil sat_sCim];

GHC.Show.$fShow(,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCin eta_sCio]
        case ds_sCin of {
          [] -> lvl11_rC0o;
          : x_sCir [Occ=Once*!] ds1_sCis [Occ=Once!] ->
              case ds1_sCis of wild1_sCit {
                [] -> x_sCir eta_sCio;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCiw [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCio wild1_sCit] \u []
                              GHC.Show.$fShow(,,,,,,,)_go2 wild1_sCit eta_sCio; } in
                    let {
                      sat_sCix [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCiw];
                    } in  x_sCir sat_sCix;
              };
        };

GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h) =>
     GHC.Types.Int -> (a, b, c, d, e, f, g, h) -> GHC.Show.ShowS
[GblId,
 Arity=11,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCiy
           $dShow1_sCiz
           $dShow2_sCiA
           $dShow3_sCiB
           $dShow4_sCiC
           $dShow5_sCiD
           $dShow6_sCiE
           $dShow7_sCiF
           ds_sCiG
           ds1_sCiH
           s_sCiI]
        case ds1_sCiH of {
          (,,,,,,,) a1_sCiK [Occ=Once]
                    b1_sCiL [Occ=Once]
                    c1_sCiM [Occ=Once]
                    d1_sCiN [Occ=Once]
                    e1_sCiO [Occ=Once]
                    f13_sCiP [Occ=Once]
                    g1_sCiQ [Occ=Once]
                    h1_sCiR [Occ=Once] ->
              let {
                sat_sCj9 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sCiy
                     $dShow1_sCiz
                     $dShow2_sCiA
                     $dShow3_sCiB
                     $dShow4_sCiC
                     $dShow5_sCiD
                     $dShow6_sCiE
                     $dShow7_sCiF
                     s_sCiI
                     a1_sCiK
                     b1_sCiL
                     c1_sCiM
                     d1_sCiN
                     e1_sCiO
                     f13_sCiP
                     g1_sCiQ
                     h1_sCiR] \u []
                        let {
                          sat_sCj8 [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sCiI]; } in
                        let {
                          sat_sCiZ [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sCiF h1_sCiR] \u []
                                  GHC.Show.showsPrec $dShow7_sCiF GHC.Show.$fShow(,)1 h1_sCiR; } in
                        let {
                          sat_sCj0 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCiZ GHC.Types.[]]; } in
                        let {
                          sat_sCiY [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sCiE g1_sCiQ] \u []
                                  GHC.Show.showsPrec $dShow6_sCiE GHC.Show.$fShow(,)1 g1_sCiQ; } in
                        let {
                          sat_sCj1 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCiY sat_sCj0]; } in
                        let {
                          sat_sCiX [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sCiD f13_sCiP] \u []
                                  GHC.Show.showsPrec $dShow5_sCiD GHC.Show.$fShow(,)1 f13_sCiP; } in
                        let {
                          sat_sCj2 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCiX sat_sCj1]; } in
                        let {
                          sat_sCiW [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sCiC e1_sCiO] \u []
                                  GHC.Show.showsPrec $dShow4_sCiC GHC.Show.$fShow(,)1 e1_sCiO; } in
                        let {
                          sat_sCj3 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCiW sat_sCj2]; } in
                        let {
                          sat_sCiV [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sCiB d1_sCiN] \u []
                                  GHC.Show.showsPrec $dShow3_sCiB GHC.Show.$fShow(,)1 d1_sCiN; } in
                        let {
                          sat_sCj4 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCiV sat_sCj3]; } in
                        let {
                          sat_sCiU [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sCiA c1_sCiM] \u []
                                  GHC.Show.showsPrec $dShow2_sCiA GHC.Show.$fShow(,)1 c1_sCiM; } in
                        let {
                          sat_sCj5 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCiU sat_sCj4]; } in
                        let {
                          sat_sCiT [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sCiz b1_sCiL] \u []
                                  GHC.Show.showsPrec $dShow1_sCiz GHC.Show.$fShow(,)1 b1_sCiL; } in
                        let {
                          sat_sCj6 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCiT sat_sCj5]; } in
                        let {
                          sat_sCiS [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sCiy a1_sCiK] \u []
                                  GHC.Show.showsPrec $dShow_sCiy GHC.Show.$fShow(,)1 a1_sCiK; } in
                        let {
                          sat_sCj7 [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sCiS sat_sCj6];
                        } in  GHC.Show.$fShow(,,,,,,,)_go2 sat_sCj7 sat_sCj8;
              } in  : [GHC.Show.$fShow(,)4 sat_sCj9];
        };

GHC.Show.$fShow(,,,,,,,)_$cshow
  :: forall a b c d e f g h.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h) =>
     (a, b, c, d, e, f, g, h) -> GHC.Base.String
[GblId,
 Arity=9,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCja
           $dShow1_sCjb
           $dShow2_sCjc
           $dShow3_sCjd
           $dShow4_sCje
           $dShow5_sCjf
           $dShow6_sCjg
           $dShow7_sCjh
           x_sCji]
        GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
            $dShow_sCja
            $dShow1_sCjb
            $dShow2_sCjc
            $dShow3_sCjd
            $dShow4_sCje
            $dShow5_sCjf
            $dShow6_sCjg
            $dShow7_sCjh
            GHC.Show.$fShow(,)1
            x_sCji
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,)_$cshowList
  :: forall a b c d e f g h.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h) =>
     [(a, b, c, d, e, f, g, h)] -> GHC.Show.ShowS
[GblId,
 Arity=10,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCjj
           $dShow1_sCjk
           $dShow2_sCjl
           $dShow3_sCjm
           $dShow4_sCjn
           $dShow5_sCjo
           $dShow6_sCjp
           $dShow7_sCjq
           ls_sCjr
           s_sCjs]
        let {
          sat_sCjt [Occ=Once]
            :: (a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
                h_azFz)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCjj
               $dShow1_sCjk
               $dShow2_sCjl
               $dShow3_sCjm
               $dShow4_sCjn
               $dShow5_sCjo
               $dShow6_sCjp
               $dShow7_sCjq] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
                      $dShow_sCjj
                      $dShow1_sCjk
                      $dShow2_sCjl
                      $dShow3_sCjm
                      $dShow4_sCjn
                      $dShow5_sCjo
                      $dShow6_sCjp
                      $dShow7_sCjq
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sCjt ls_sCjr s_sCjs;

GHC.Show.$fShow(,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h)
[GblId[DFunId],
 Arity=8,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sCju
           $dShow1_sCjv
           $dShow2_sCjw
           $dShow3_sCjx
           $dShow4_sCjy
           $dShow5_sCjz
           $dShow6_sCjA
           $dShow7_sCjB]
        let {
          sat_sCjE [Occ=Once]
            :: [(a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
                 h_azFz)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCju
               $dShow1_sCjv
               $dShow2_sCjw
               $dShow3_sCjx
               $dShow4_sCjy
               $dShow5_sCjz
               $dShow6_sCjA
               $dShow7_sCjB] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,)_$cshowList
                      $dShow_sCju
                      $dShow1_sCjv
                      $dShow2_sCjw
                      $dShow3_sCjx
                      $dShow4_sCjy
                      $dShow5_sCjz
                      $dShow6_sCjA
                      $dShow7_sCjB
                      eta_B2
                      eta_B1; } in
        let {
          sat_sCjD [Occ=Once]
            :: (a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
                h_azFz)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sCju
               $dShow1_sCjv
               $dShow2_sCjw
               $dShow3_sCjx
               $dShow4_sCjy
               $dShow5_sCjz
               $dShow6_sCjA
               $dShow7_sCjB] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,)_$cshow
                      $dShow_sCju
                      $dShow1_sCjv
                      $dShow2_sCjw
                      $dShow3_sCjx
                      $dShow4_sCjy
                      $dShow5_sCjz
                      $dShow6_sCjA
                      $dShow7_sCjB
                      eta_B1; } in
        let {
          sat_sCjC [Occ=Once]
            :: GHC.Types.Int
               -> (a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
                   h_azFz)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCju
               $dShow1_sCjv
               $dShow2_sCjw
               $dShow3_sCjx
               $dShow4_sCjy
               $dShow5_sCjz
               $dShow6_sCjA
               $dShow7_sCjB] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
                      $dShow_sCju
                      $dShow1_sCjv
                      $dShow2_sCjw
                      $dShow3_sCjx
                      $dShow4_sCjy
                      $dShow5_sCjz
                      $dShow6_sCjA
                      $dShow7_sCjB
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sCjC sat_sCjD sat_sCjE];

GHC.Show.$fShow(,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCjF eta_sCjG]
        case ds_sCjF of {
          [] -> lvl11_rC0o;
          : x_sCjJ [Occ=Once*!] ds1_sCjK [Occ=Once!] ->
              case ds1_sCjK of wild1_sCjL {
                [] -> x_sCjJ eta_sCjG;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCjO [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCjG wild1_sCjL] \u []
                              GHC.Show.$fShow(,,,,,,)_go2 wild1_sCjL eta_sCjG; } in
                    let {
                      sat_sCjP [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCjO];
                    } in  x_sCjJ sat_sCjP;
              };
        };

GHC.Show.$fShow(,,,,,,)_$cshowsPrec
  :: forall a b c d e f g.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f,
      GHC.Show.Show g) =>
     GHC.Types.Int -> (a, b, c, d, e, f, g) -> GHC.Show.ShowS
[GblId,
 Arity=10,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCjQ
           $dShow1_sCjR
           $dShow2_sCjS
           $dShow3_sCjT
           $dShow4_sCjU
           $dShow5_sCjV
           $dShow6_sCjW
           ds_sCjX
           ds1_sCjY
           s_sCjZ]
        case ds1_sCjY of {
          (,,,,,,) a1_sCk1 [Occ=Once]
                   b1_sCk2 [Occ=Once]
                   c1_sCk3 [Occ=Once]
                   d1_sCk4 [Occ=Once]
                   e1_sCk5 [Occ=Once]
                   f13_sCk6 [Occ=Once]
                   g1_sCk7 [Occ=Once] ->
              let {
                sat_sCkn [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sCjQ
                     $dShow1_sCjR
                     $dShow2_sCjS
                     $dShow3_sCjT
                     $dShow4_sCjU
                     $dShow5_sCjV
                     $dShow6_sCjW
                     s_sCjZ
                     a1_sCk1
                     b1_sCk2
                     c1_sCk3
                     d1_sCk4
                     e1_sCk5
                     f13_sCk6
                     g1_sCk7] \u []
                        let {
                          sat_sCkm [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sCjZ]; } in
                        let {
                          sat_sCke [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sCjW g1_sCk7] \u []
                                  GHC.Show.showsPrec $dShow6_sCjW GHC.Show.$fShow(,)1 g1_sCk7; } in
                        let {
                          sat_sCkf [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCke GHC.Types.[]]; } in
                        let {
                          sat_sCkd [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sCjV f13_sCk6] \u []
                                  GHC.Show.showsPrec $dShow5_sCjV GHC.Show.$fShow(,)1 f13_sCk6; } in
                        let {
                          sat_sCkg [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCkd sat_sCkf]; } in
                        let {
                          sat_sCkc [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sCjU e1_sCk5] \u []
                                  GHC.Show.showsPrec $dShow4_sCjU GHC.Show.$fShow(,)1 e1_sCk5; } in
                        let {
                          sat_sCkh [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCkc sat_sCkg]; } in
                        let {
                          sat_sCkb [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sCjT d1_sCk4] \u []
                                  GHC.Show.showsPrec $dShow3_sCjT GHC.Show.$fShow(,)1 d1_sCk4; } in
                        let {
                          sat_sCki [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCkb sat_sCkh]; } in
                        let {
                          sat_sCka [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sCjS c1_sCk3] \u []
                                  GHC.Show.showsPrec $dShow2_sCjS GHC.Show.$fShow(,)1 c1_sCk3; } in
                        let {
                          sat_sCkj [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCka sat_sCki]; } in
                        let {
                          sat_sCk9 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sCjR b1_sCk2] \u []
                                  GHC.Show.showsPrec $dShow1_sCjR GHC.Show.$fShow(,)1 b1_sCk2; } in
                        let {
                          sat_sCkk [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCk9 sat_sCkj]; } in
                        let {
                          sat_sCk8 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sCjQ a1_sCk1] \u []
                                  GHC.Show.showsPrec $dShow_sCjQ GHC.Show.$fShow(,)1 a1_sCk1; } in
                        let {
                          sat_sCkl [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sCk8 sat_sCkk];
                        } in  GHC.Show.$fShow(,,,,,,)_go2 sat_sCkl sat_sCkm;
              } in  : [GHC.Show.$fShow(,)4 sat_sCkn];
        };

GHC.Show.$fShow(,,,,,,)_$cshow
  :: forall a b c d e f g.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f,
      GHC.Show.Show g) =>
     (a, b, c, d, e, f, g) -> GHC.Base.String
[GblId,
 Arity=8,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCko
           $dShow1_sCkp
           $dShow2_sCkq
           $dShow3_sCkr
           $dShow4_sCks
           $dShow5_sCkt
           $dShow6_sCku
           x_sCkv]
        GHC.Show.$fShow(,,,,,,)_$cshowsPrec
            $dShow_sCko
            $dShow1_sCkp
            $dShow2_sCkq
            $dShow3_sCkr
            $dShow4_sCks
            $dShow5_sCkt
            $dShow6_sCku
            GHC.Show.$fShow(,)1
            x_sCkv
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,)_$cshowList
  :: forall a b c d e f g.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f,
      GHC.Show.Show g) =>
     [(a, b, c, d, e, f, g)] -> GHC.Show.ShowS
[GblId,
 Arity=9,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCkw
           $dShow1_sCkx
           $dShow2_sCky
           $dShow3_sCkz
           $dShow4_sCkA
           $dShow5_sCkB
           $dShow6_sCkC
           ls_sCkD
           s_sCkE]
        let {
          sat_sCkF [Occ=Once]
            :: (a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCkw
               $dShow1_sCkx
               $dShow2_sCky
               $dShow3_sCkz
               $dShow4_sCkA
               $dShow5_sCkB
               $dShow6_sCkC] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,)_$cshowsPrec
                      $dShow_sCkw
                      $dShow1_sCkx
                      $dShow2_sCky
                      $dShow3_sCkz
                      $dShow4_sCkA
                      $dShow5_sCkB
                      $dShow6_sCkC
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sCkF ls_sCkD s_sCkE;

GHC.Show.$fShow(,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f,
      GHC.Show.Show g) =>
     GHC.Show.Show (a, b, c, d, e, f, g)
[GblId[DFunId],
 Arity=7,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sCkG
           $dShow1_sCkH
           $dShow2_sCkI
           $dShow3_sCkJ
           $dShow4_sCkK
           $dShow5_sCkL
           $dShow6_sCkM]
        let {
          sat_sCkP [Occ=Once]
            :: [(a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCkG
               $dShow1_sCkH
               $dShow2_sCkI
               $dShow3_sCkJ
               $dShow4_sCkK
               $dShow5_sCkL
               $dShow6_sCkM] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,)_$cshowList
                      $dShow_sCkG
                      $dShow1_sCkH
                      $dShow2_sCkI
                      $dShow3_sCkJ
                      $dShow4_sCkK
                      $dShow5_sCkL
                      $dShow6_sCkM
                      eta_B2
                      eta_B1; } in
        let {
          sat_sCkO [Occ=Once]
            :: (a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sCkG
               $dShow1_sCkH
               $dShow2_sCkI
               $dShow3_sCkJ
               $dShow4_sCkK
               $dShow5_sCkL
               $dShow6_sCkM] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,)_$cshow
                      $dShow_sCkG
                      $dShow1_sCkH
                      $dShow2_sCkI
                      $dShow3_sCkJ
                      $dShow4_sCkK
                      $dShow5_sCkL
                      $dShow6_sCkM
                      eta_B1; } in
        let {
          sat_sCkN [Occ=Once]
            :: GHC.Types.Int
               -> (a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCkG
               $dShow1_sCkH
               $dShow2_sCkI
               $dShow3_sCkJ
               $dShow4_sCkK
               $dShow5_sCkL
               $dShow6_sCkM] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,)_$cshowsPrec
                      $dShow_sCkG
                      $dShow1_sCkH
                      $dShow2_sCkI
                      $dShow3_sCkJ
                      $dShow4_sCkK
                      $dShow5_sCkL
                      $dShow6_sCkM
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sCkN sat_sCkO sat_sCkP];

GHC.Show.$fShow(,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCkQ eta_sCkR]
        case ds_sCkQ of {
          [] -> lvl11_rC0o;
          : x_sCkU [Occ=Once*!] ds1_sCkV [Occ=Once!] ->
              case ds1_sCkV of wild1_sCkW {
                [] -> x_sCkU eta_sCkR;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCkZ [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCkR wild1_sCkW] \u []
                              GHC.Show.$fShow(,,,,,)_go2 wild1_sCkW eta_sCkR; } in
                    let {
                      sat_sCl0 [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCkZ];
                    } in  x_sCkU sat_sCl0;
              };
        };

GHC.Show.$fShow(,,,,,)_$cshowsPrec
  :: forall a b c d e f.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f) =>
     GHC.Types.Int -> (a, b, c, d, e, f) -> GHC.Show.ShowS
[GblId,
 Arity=9,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCl1
           $dShow1_sCl2
           $dShow2_sCl3
           $dShow3_sCl4
           $dShow4_sCl5
           $dShow5_sCl6
           ds_sCl7
           ds1_sCl8
           s_sCl9]
        case ds1_sCl8 of {
          (,,,,,) a1_sClb [Occ=Once]
                  b1_sClc [Occ=Once]
                  c1_sCld [Occ=Once]
                  d1_sCle [Occ=Once]
                  e1_sClf [Occ=Once]
                  f13_sClg [Occ=Once] ->
              let {
                sat_sClu [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sCl1
                     $dShow1_sCl2
                     $dShow2_sCl3
                     $dShow3_sCl4
                     $dShow4_sCl5
                     $dShow5_sCl6
                     s_sCl9
                     a1_sClb
                     b1_sClc
                     c1_sCld
                     d1_sCle
                     e1_sClf
                     f13_sClg] \u []
                        let {
                          sat_sClt [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sCl9]; } in
                        let {
                          sat_sClm [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sCl6 f13_sClg] \u []
                                  GHC.Show.showsPrec $dShow5_sCl6 GHC.Show.$fShow(,)1 f13_sClg; } in
                        let {
                          sat_sCln [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sClm GHC.Types.[]]; } in
                        let {
                          sat_sCll [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sCl5 e1_sClf] \u []
                                  GHC.Show.showsPrec $dShow4_sCl5 GHC.Show.$fShow(,)1 e1_sClf; } in
                        let {
                          sat_sClo [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCll sat_sCln]; } in
                        let {
                          sat_sClk [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sCl4 d1_sCle] \u []
                                  GHC.Show.showsPrec $dShow3_sCl4 GHC.Show.$fShow(,)1 d1_sCle; } in
                        let {
                          sat_sClp [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sClk sat_sClo]; } in
                        let {
                          sat_sClj [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sCl3 c1_sCld] \u []
                                  GHC.Show.showsPrec $dShow2_sCl3 GHC.Show.$fShow(,)1 c1_sCld; } in
                        let {
                          sat_sClq [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sClj sat_sClp]; } in
                        let {
                          sat_sCli [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sCl2 b1_sClc] \u []
                                  GHC.Show.showsPrec $dShow1_sCl2 GHC.Show.$fShow(,)1 b1_sClc; } in
                        let {
                          sat_sClr [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCli sat_sClq]; } in
                        let {
                          sat_sClh [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sCl1 a1_sClb] \u []
                                  GHC.Show.showsPrec $dShow_sCl1 GHC.Show.$fShow(,)1 a1_sClb; } in
                        let {
                          sat_sCls [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sClh sat_sClr];
                        } in  GHC.Show.$fShow(,,,,,)_go2 sat_sCls sat_sClt;
              } in  : [GHC.Show.$fShow(,)4 sat_sClu];
        };

GHC.Show.$fShow(,,,,,)_$cshow
  :: forall a b c d e f.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f) =>
     (a, b, c, d, e, f) -> GHC.Base.String
[GblId,
 Arity=7,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sClv
           $dShow1_sClw
           $dShow2_sClx
           $dShow3_sCly
           $dShow4_sClz
           $dShow5_sClA
           x_sClB]
        GHC.Show.$fShow(,,,,,)_$cshowsPrec
            $dShow_sClv
            $dShow1_sClw
            $dShow2_sClx
            $dShow3_sCly
            $dShow4_sClz
            $dShow5_sClA
            GHC.Show.$fShow(,)1
            x_sClB
            GHC.Types.[];

GHC.Show.$fShow(,,,,,)_$cshowList
  :: forall a b c d e f.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f) =>
     [(a, b, c, d, e, f)] -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sClC
           $dShow1_sClD
           $dShow2_sClE
           $dShow3_sClF
           $dShow4_sClG
           $dShow5_sClH
           ls_sClI
           s_sClJ]
        let {
          sat_sClK [Occ=Once]
            :: (a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sClC
               $dShow1_sClD
               $dShow2_sClE
               $dShow3_sClF
               $dShow4_sClG
               $dShow5_sClH] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,)_$cshowsPrec
                      $dShow_sClC
                      $dShow1_sClD
                      $dShow2_sClE
                      $dShow3_sClF
                      $dShow4_sClG
                      $dShow5_sClH
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sClK ls_sClI s_sClJ;

GHC.Show.$fShow(,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f) =>
     GHC.Show.Show (a, b, c, d, e, f)
[GblId[DFunId],
 Arity=6,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sClL
           $dShow1_sClM
           $dShow2_sClN
           $dShow3_sClO
           $dShow4_sClP
           $dShow5_sClQ]
        let {
          sat_sClT [Occ=Once]
            :: [(a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sClL
               $dShow1_sClM
               $dShow2_sClN
               $dShow3_sClO
               $dShow4_sClP
               $dShow5_sClQ] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,)_$cshowList
                      $dShow_sClL
                      $dShow1_sClM
                      $dShow2_sClN
                      $dShow3_sClO
                      $dShow4_sClP
                      $dShow5_sClQ
                      eta_B2
                      eta_B1; } in
        let {
          sat_sClS [Occ=Once]
            :: (a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sClL
               $dShow1_sClM
               $dShow2_sClN
               $dShow3_sClO
               $dShow4_sClP
               $dShow5_sClQ] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,)_$cshow
                      $dShow_sClL
                      $dShow1_sClM
                      $dShow2_sClN
                      $dShow3_sClO
                      $dShow4_sClP
                      $dShow5_sClQ
                      eta_B1; } in
        let {
          sat_sClR [Occ=Once]
            :: GHC.Types.Int
               -> (a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sClL
               $dShow1_sClM
               $dShow2_sClN
               $dShow3_sClO
               $dShow4_sClP
               $dShow5_sClQ] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,)_$cshowsPrec
                      $dShow_sClL
                      $dShow1_sClM
                      $dShow2_sClN
                      $dShow3_sClO
                      $dShow4_sClP
                      $dShow5_sClQ
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sClR sat_sClS sat_sClT];

GHC.Show.$fShow(,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sClU eta_sClV]
        case ds_sClU of {
          [] -> lvl11_rC0o;
          : x_sClY [Occ=Once*!] ds1_sClZ [Occ=Once!] ->
              case ds1_sClZ of wild1_sCm0 {
                [] -> x_sClY eta_sClV;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCm3 [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sClV wild1_sCm0] \u []
                              GHC.Show.$fShow(,,,,)_go2 wild1_sCm0 eta_sClV; } in
                    let {
                      sat_sCm4 [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCm3];
                    } in  x_sClY sat_sCm4;
              };
        };

GHC.Show.$fShow(,,,,)_$cshowsPrec
  :: forall a b c d e.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e) =>
     GHC.Types.Int -> (a, b, c, d, e) -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCm5
           $dShow1_sCm6
           $dShow2_sCm7
           $dShow3_sCm8
           $dShow4_sCm9
           ds_sCma
           ds1_sCmb
           s_sCmc]
        case ds1_sCmb of {
          (,,,,) a1_sCme [Occ=Once]
                 b1_sCmf [Occ=Once]
                 c1_sCmg [Occ=Once]
                 d1_sCmh [Occ=Once]
                 e1_sCmi [Occ=Once] ->
              let {
                sat_sCmu [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sCm5
                     $dShow1_sCm6
                     $dShow2_sCm7
                     $dShow3_sCm8
                     $dShow4_sCm9
                     s_sCmc
                     a1_sCme
                     b1_sCmf
                     c1_sCmg
                     d1_sCmh
                     e1_sCmi] \u []
                        let {
                          sat_sCmt [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sCmc]; } in
                        let {
                          sat_sCmn [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sCm9 e1_sCmi] \u []
                                  GHC.Show.showsPrec $dShow4_sCm9 GHC.Show.$fShow(,)1 e1_sCmi; } in
                        let {
                          sat_sCmo [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCmn GHC.Types.[]]; } in
                        let {
                          sat_sCmm [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sCm8 d1_sCmh] \u []
                                  GHC.Show.showsPrec $dShow3_sCm8 GHC.Show.$fShow(,)1 d1_sCmh; } in
                        let {
                          sat_sCmp [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCmm sat_sCmo]; } in
                        let {
                          sat_sCml [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sCm7 c1_sCmg] \u []
                                  GHC.Show.showsPrec $dShow2_sCm7 GHC.Show.$fShow(,)1 c1_sCmg; } in
                        let {
                          sat_sCmq [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCml sat_sCmp]; } in
                        let {
                          sat_sCmk [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sCm6 b1_sCmf] \u []
                                  GHC.Show.showsPrec $dShow1_sCm6 GHC.Show.$fShow(,)1 b1_sCmf; } in
                        let {
                          sat_sCmr [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCmk sat_sCmq]; } in
                        let {
                          sat_sCmj [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sCm5 a1_sCme] \u []
                                  GHC.Show.showsPrec $dShow_sCm5 GHC.Show.$fShow(,)1 a1_sCme; } in
                        let {
                          sat_sCms [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sCmj sat_sCmr];
                        } in  GHC.Show.$fShow(,,,,)_go2 sat_sCms sat_sCmt;
              } in  : [GHC.Show.$fShow(,)4 sat_sCmu];
        };

GHC.Show.$fShow(,,,,)_$cshow
  :: forall a b c d e.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e) =>
     (a, b, c, d, e) -> GHC.Base.String
[GblId,
 Arity=6,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCmv
           $dShow1_sCmw
           $dShow2_sCmx
           $dShow3_sCmy
           $dShow4_sCmz
           x_sCmA]
        GHC.Show.$fShow(,,,,)_$cshowsPrec
            $dShow_sCmv
            $dShow1_sCmw
            $dShow2_sCmx
            $dShow3_sCmy
            $dShow4_sCmz
            GHC.Show.$fShow(,)1
            x_sCmA
            GHC.Types.[];

GHC.Show.$fShow(,,,,)_$cshowList
  :: forall a b c d e.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e) =>
     [(a, b, c, d, e)] -> GHC.Show.ShowS
[GblId,
 Arity=7,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCmB
           $dShow1_sCmC
           $dShow2_sCmD
           $dShow3_sCmE
           $dShow4_sCmF
           ls_sCmG
           s_sCmH]
        let {
          sat_sCmI [Occ=Once]
            :: (a_azHA, b_azHB, c_azHC, d_azHD, e_azHE) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCmB
               $dShow1_sCmC
               $dShow2_sCmD
               $dShow3_sCmE
               $dShow4_sCmF] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,)_$cshowsPrec
                      $dShow_sCmB
                      $dShow1_sCmC
                      $dShow2_sCmD
                      $dShow3_sCmE
                      $dShow4_sCmF
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sCmI ls_sCmG s_sCmH;

GHC.Show.$fShow(,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e) =>
     GHC.Show.Show (a, b, c, d, e)
[GblId[DFunId],
 Arity=5,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sCmJ
           $dShow1_sCmK
           $dShow2_sCmL
           $dShow3_sCmM
           $dShow4_sCmN]
        let {
          sat_sCmQ [Occ=Once]
            :: [(a_azHA, b_azHB, c_azHC, d_azHD, e_azHE)] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCmJ
               $dShow1_sCmK
               $dShow2_sCmL
               $dShow3_sCmM
               $dShow4_sCmN] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,)_$cshowList
                      $dShow_sCmJ
                      $dShow1_sCmK
                      $dShow2_sCmL
                      $dShow3_sCmM
                      $dShow4_sCmN
                      eta_B2
                      eta_B1; } in
        let {
          sat_sCmP [Occ=Once]
            :: (a_azHA, b_azHB, c_azHC, d_azHD, e_azHE) -> GHC.Base.String
          [LclId] =
              [$dShow_sCmJ
               $dShow1_sCmK
               $dShow2_sCmL
               $dShow3_sCmM
               $dShow4_sCmN] \r [eta_B1]
                  GHC.Show.$fShow(,,,,)_$cshow
                      $dShow_sCmJ
                      $dShow1_sCmK
                      $dShow2_sCmL
                      $dShow3_sCmM
                      $dShow4_sCmN
                      eta_B1; } in
        let {
          sat_sCmO [Occ=Once]
            :: GHC.Types.Int
               -> (a_azHA, b_azHB, c_azHC, d_azHD, e_azHE) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCmJ
               $dShow1_sCmK
               $dShow2_sCmL
               $dShow3_sCmM
               $dShow4_sCmN] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,)_$cshowsPrec
                      $dShow_sCmJ
                      $dShow1_sCmK
                      $dShow2_sCmL
                      $dShow3_sCmM
                      $dShow4_sCmN
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sCmO sat_sCmP sat_sCmQ];

GHC.Show.$fShow(,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCmR eta_sCmS]
        case ds_sCmR of {
          [] -> lvl11_rC0o;
          : x_sCmV [Occ=Once*!] ds1_sCmW [Occ=Once!] ->
              case ds1_sCmW of wild1_sCmX {
                [] -> x_sCmV eta_sCmS;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCn0 [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCmS wild1_sCmX] \u []
                              GHC.Show.$fShow(,,,)_go2 wild1_sCmX eta_sCmS; } in
                    let {
                      sat_sCn1 [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCn0];
                    } in  x_sCmV sat_sCn1;
              };
        };

GHC.Show.$w$cshowsPrec2 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d) =>
     a
     -> b
     -> c
     -> d
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId,
 Arity=9,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sCn2
           w1_sCn3
           w2_sCn4
           w3_sCn5
           ww_sCn6
           ww1_sCn7
           ww2_sCn8
           ww3_sCn9
           w4_sCna]
        let {
          sat_sCnk [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [w_sCn2
               w1_sCn3
               w2_sCn4
               w3_sCn5
               ww_sCn6
               ww1_sCn7
               ww2_sCn8
               ww3_sCn9
               w4_sCna] \u []
                  let {
                    sat_sCnj [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [GHC.Show.$fShow(,)2 w4_sCna]; } in
                  let {
                    sat_sCne [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w3_sCn5 ww3_sCn9] \u []
                            GHC.Show.showsPrec w3_sCn5 GHC.Show.$fShow(,)1 ww3_sCn9; } in
                  let {
                    sat_sCnf [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sCne GHC.Types.[]]; } in
                  let {
                    sat_sCnd [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w2_sCn4 ww2_sCn8] \u []
                            GHC.Show.showsPrec w2_sCn4 GHC.Show.$fShow(,)1 ww2_sCn8; } in
                  let {
                    sat_sCng [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sCnd sat_sCnf]; } in
                  let {
                    sat_sCnc [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w1_sCn3 ww1_sCn7] \u []
                            GHC.Show.showsPrec w1_sCn3 GHC.Show.$fShow(,)1 ww1_sCn7; } in
                  let {
                    sat_sCnh [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sCnc sat_sCng]; } in
                  let {
                    sat_sCnb [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w_sCn2 ww_sCn6] \u []
                            GHC.Show.showsPrec w_sCn2 GHC.Show.$fShow(,)1 ww_sCn6; } in
                  let {
                    sat_sCni [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                    [LclId] =
                        CCCS :! [sat_sCnb sat_sCnh];
                  } in  GHC.Show.$fShow(,,,)_go2 sat_sCni sat_sCnj;
        } in  (#,#) [GHC.Show.$fShow(,)4 sat_sCnk];

GHC.Show.$fShow(,,,)_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d) =>
     GHC.Types.Int -> (a, b, c, d) -> GHC.Show.ShowS
[GblId,
 Arity=7,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sCnl w1_sCnm w2_sCnn w3_sCno w4_sCnp w5_sCnq w6_sCnr]
        case w5_sCnq of {
          (,,,) ww1_sCnt [Occ=Once]
                ww2_sCnu [Occ=Once]
                ww3_sCnv [Occ=Once]
                ww4_sCnw [Occ=Once] ->
              case
                  GHC.Show.$w$cshowsPrec2
                      w_sCnl
                      w1_sCnm
                      w2_sCnn
                      w3_sCno
                      ww1_sCnt
                      ww2_sCnu
                      ww3_sCnv
                      ww4_sCnw
                      w6_sCnr
              of
              { (#,#) ww6_sCny [Occ=Once] ww7_sCnz [Occ=Once] ->
                    : [ww6_sCny ww7_sCnz];
              };
        };

GHC.Show.$fShow(,,,)_$cshow
  :: forall a b c d.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d) =>
     (a, b, c, d) -> GHC.Base.String
[GblId,
 Arity=5,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCnA $dShow1_sCnB $dShow2_sCnC $dShow3_sCnD x_sCnE]
        case x_sCnE of {
          (,,,) ww1_sCnG [Occ=Once]
                ww2_sCnH [Occ=Once]
                ww3_sCnI [Occ=Once]
                ww4_sCnJ [Occ=Once] ->
              case
                  GHC.Show.$w$cshowsPrec2
                      $dShow_sCnA
                      $dShow1_sCnB
                      $dShow2_sCnC
                      $dShow3_sCnD
                      ww1_sCnG
                      ww2_sCnH
                      ww3_sCnI
                      ww4_sCnJ
                      GHC.Types.[]
              of
              { (#,#) ww6_sCnL [Occ=Once] ww7_sCnM [Occ=Once] ->
                    : [ww6_sCnL ww7_sCnM];
              };
        };

GHC.Show.$fShow(,,,)_$cshowList
  :: forall a b c d.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d) =>
     [(a, b, c, d)] -> GHC.Show.ShowS
[GblId,
 Arity=6,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCnN
           $dShow1_sCnO
           $dShow2_sCnP
           $dShow3_sCnQ
           ls_sCnR
           s_sCnS]
        let {
          sat_sCo3 [Occ=Once]
            :: (a_azIa, b_azIb, c_azIc, d_azId) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCnN $dShow1_sCnO $dShow2_sCnP $dShow3_sCnQ] \r [w_sCnT
                                                                       w1_sCnU]
                  case w_sCnT of {
                    (,,,) ww1_sCnW [Occ=Once]
                          ww2_sCnX [Occ=Once]
                          ww3_sCnY [Occ=Once]
                          ww4_sCnZ [Occ=Once] ->
                        case
                            GHC.Show.$w$cshowsPrec2
                                $dShow_sCnN
                                $dShow1_sCnO
                                $dShow2_sCnP
                                $dShow3_sCnQ
                                ww1_sCnW
                                ww2_sCnX
                                ww3_sCnY
                                ww4_sCnZ
                                w1_sCnU
                        of
                        { (#,#) ww6_sCo1 [Occ=Once] ww7_sCo2 [Occ=Once] ->
                              : [ww6_sCo1 ww7_sCo2];
                        };
                  };
        } in  GHC.Show.showList__ sat_sCo3 ls_sCnR s_sCnS;

GHC.Show.$fShow(,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d) =>
     GHC.Show.Show (a, b, c, d)
[GblId[DFunId],
 Arity=4,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sCo4 $dShow1_sCo5 $dShow2_sCo6 $dShow3_sCo7]
        let {
          sat_sCoa [Occ=Once]
            :: [(a_azIa, b_azIb, c_azIc, d_azId)] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCo4 $dShow1_sCo5 $dShow2_sCo6 $dShow3_sCo7] \r [eta_B2
                                                                       eta_B1]
                  GHC.Show.$fShow(,,,)_$cshowList
                      $dShow_sCo4
                      $dShow1_sCo5
                      $dShow2_sCo6
                      $dShow3_sCo7
                      eta_B2
                      eta_B1; } in
        let {
          sat_sCo9 [Occ=Once]
            :: (a_azIa, b_azIb, c_azIc, d_azId) -> GHC.Base.String
          [LclId] =
              [$dShow_sCo4 $dShow1_sCo5 $dShow2_sCo6 $dShow3_sCo7] \r [eta_B1]
                  GHC.Show.$fShow(,,,)_$cshow
                      $dShow_sCo4 $dShow1_sCo5 $dShow2_sCo6 $dShow3_sCo7 eta_B1; } in
        let {
          sat_sCo8 [Occ=Once]
            :: GHC.Types.Int
               -> (a_azIa, b_azIb, c_azIc, d_azId) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCo4 $dShow1_sCo5 $dShow2_sCo6 $dShow3_sCo7] \r [eta_B3
                                                                       eta_B2
                                                                       eta_B1]
                  GHC.Show.$fShow(,,,)_$cshowsPrec
                      $dShow_sCo4
                      $dShow1_sCo5
                      $dShow2_sCo6
                      $dShow3_sCo7
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sCo8 sat_sCo9 sat_sCoa];

GHC.Show.$fShow(,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCob eta_sCoc]
        case ds_sCob of {
          [] -> lvl11_rC0o;
          : x_sCof [Occ=Once*!] ds1_sCog [Occ=Once!] ->
              case ds1_sCog of wild1_sCoh {
                [] -> x_sCof eta_sCoc;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCok [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCoc wild1_sCoh] \u []
                              GHC.Show.$fShow(,,)_go2 wild1_sCoh eta_sCoc; } in
                    let {
                      sat_sCol [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCok];
                    } in  x_sCof sat_sCol;
              };
        };

GHC.Show.$w$cshowsPrec1 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c) =>
     a
     -> b
     -> c
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId,
 Arity=7,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sCom w1_sCon w2_sCoo ww_sCop ww1_sCoq ww2_sCor w3_sCos]
        let {
          sat_sCoA [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [w_sCom w1_sCon w2_sCoo ww_sCop ww1_sCoq ww2_sCor w3_sCos] \u []
                  let {
                    sat_sCoz [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [GHC.Show.$fShow(,)2 w3_sCos]; } in
                  let {
                    sat_sCov [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w2_sCoo ww2_sCor] \u []
                            GHC.Show.showsPrec w2_sCoo GHC.Show.$fShow(,)1 ww2_sCor; } in
                  let {
                    sat_sCow [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sCov GHC.Types.[]]; } in
                  let {
                    sat_sCou [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w1_sCon ww1_sCoq] \u []
                            GHC.Show.showsPrec w1_sCon GHC.Show.$fShow(,)1 ww1_sCoq; } in
                  let {
                    sat_sCox [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sCou sat_sCow]; } in
                  let {
                    sat_sCot [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w_sCom ww_sCop] \u []
                            GHC.Show.showsPrec w_sCom GHC.Show.$fShow(,)1 ww_sCop; } in
                  let {
                    sat_sCoy [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                    [LclId] =
                        CCCS :! [sat_sCot sat_sCox];
                  } in  GHC.Show.$fShow(,,)_go2 sat_sCoy sat_sCoz;
        } in  (#,#) [GHC.Show.$fShow(,)4 sat_sCoA];

GHC.Show.$fShow(,,)_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a b c.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c) =>
     GHC.Types.Int -> (a, b, c) -> GHC.Show.ShowS
[GblId,
 Arity=6,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sCoB w1_sCoC w2_sCoD w3_sCoE w4_sCoF w5_sCoG]
        case w4_sCoF of {
          (,,) ww1_sCoI [Occ=Once] ww2_sCoJ [Occ=Once] ww3_sCoK [Occ=Once] ->
              case
                  GHC.Show.$w$cshowsPrec1
                      w_sCoB w1_sCoC w2_sCoD ww1_sCoI ww2_sCoJ ww3_sCoK w5_sCoG
              of
              { (#,#) ww5_sCoM [Occ=Once] ww6_sCoN [Occ=Once] ->
                    : [ww5_sCoM ww6_sCoN];
              };
        };

GHC.Show.$fShow(,,)_$cshow
  :: forall a b c.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c) =>
     (a, b, c) -> GHC.Base.String
[GblId,
 Arity=4,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCoO $dShow1_sCoP $dShow2_sCoQ x_sCoR]
        case x_sCoR of {
          (,,) ww1_sCoT [Occ=Once] ww2_sCoU [Occ=Once] ww3_sCoV [Occ=Once] ->
              case
                  GHC.Show.$w$cshowsPrec1
                      $dShow_sCoO
                      $dShow1_sCoP
                      $dShow2_sCoQ
                      ww1_sCoT
                      ww2_sCoU
                      ww3_sCoV
                      GHC.Types.[]
              of
              { (#,#) ww5_sCoX [Occ=Once] ww6_sCoY [Occ=Once] ->
                    : [ww5_sCoX ww6_sCoY];
              };
        };

GHC.Show.$fShow(,,)_$cshowList
  :: forall a b c.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c) =>
     [(a, b, c)] -> GHC.Show.ShowS
[GblId,
 Arity=5,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCoZ $dShow1_sCp0 $dShow2_sCp1 ls_sCp2 s_sCp3]
        let {
          sat_sCpd [Occ=Once] :: (a_azIG, b_azIH, c_azII) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCoZ $dShow1_sCp0 $dShow2_sCp1] \r [w_sCp4 w1_sCp5]
                  case w_sCp4 of {
                    (,,) ww1_sCp7 [Occ=Once] ww2_sCp8 [Occ=Once] ww3_sCp9 [Occ=Once] ->
                        case
                            GHC.Show.$w$cshowsPrec1
                                $dShow_sCoZ
                                $dShow1_sCp0
                                $dShow2_sCp1
                                ww1_sCp7
                                ww2_sCp8
                                ww3_sCp9
                                w1_sCp5
                        of
                        { (#,#) ww5_sCpb [Occ=Once] ww6_sCpc [Occ=Once] ->
                              : [ww5_sCpb ww6_sCpc];
                        };
                  };
        } in  GHC.Show.showList__ sat_sCpd ls_sCp2 s_sCp3;

GHC.Show.$fShow(,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c) =>
     GHC.Show.Show (a, b, c)
[GblId[DFunId],
 Arity=3,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sCpe $dShow1_sCpf $dShow2_sCpg]
        let {
          sat_sCpj [Occ=Once] :: [(a_azIG, b_azIH, c_azII)] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCpe $dShow1_sCpf $dShow2_sCpg] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,)_$cshowList
                      $dShow_sCpe $dShow1_sCpf $dShow2_sCpg eta_B2 eta_B1; } in
        let {
          sat_sCpi [Occ=Once] :: (a_azIG, b_azIH, c_azII) -> GHC.Base.String
          [LclId] =
              [$dShow_sCpe $dShow1_sCpf $dShow2_sCpg] \r [eta_B1]
                  GHC.Show.$fShow(,,)_$cshow
                      $dShow_sCpe $dShow1_sCpf $dShow2_sCpg eta_B1; } in
        let {
          sat_sCph [Occ=Once]
            :: GHC.Types.Int -> (a_azIG, b_azIH, c_azII) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCpe $dShow1_sCpf $dShow2_sCpg] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,)_$cshowsPrec
                      $dShow_sCpe $dShow1_sCpf $dShow2_sCpg eta_B3 eta_B2 eta_B1;
        } in  GHC.Show.C:Show [sat_sCph sat_sCpi sat_sCpj];

GHC.Show.$fShow(,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCpk eta_sCpl]
        case ds_sCpk of {
          [] -> lvl11_rC0o;
          : x_sCpo [Occ=Once*!] ds1_sCpp [Occ=Once!] ->
              case ds1_sCpp of wild1_sCpq {
                [] -> x_sCpo eta_sCpl;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCpt [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCpl wild1_sCpq] \u []
                              GHC.Show.$fShow(,)_go2 wild1_sCpq eta_sCpl; } in
                    let {
                      sat_sCpu [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCpt];
                    } in  x_sCpo sat_sCpu;
              };
        };

GHC.Show.$w$s$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: [GHC.Types.Char]
     -> GHC.Stack.Types.SrcLoc
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId,
 Arity=3,
 Str=<L,U><L,U(U,U,U,U(U),U(U),U(U),U(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sCpv ww1_sCpw w_sCpx]
        let {
          sat_sCpM [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_sCpv ww1_sCpw w_sCpx] \u []
                  let {
                    sat_sCpL [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [GHC.Show.$fShow(,)2 w_sCpx]; } in
                  let {
                    sat_sCpI [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [ww1_sCpw] \r [w1_sCpz]
                            case ww1_sCpw of {
                              GHC.Stack.Types.SrcLoc ww3_sCpB [Occ=Once]
                                                     ww4_sCpC [Occ=Once]
                                                     ww5_sCpD [Occ=Once]
                                                     ww6_sCpE [Occ=Once]
                                                     ww7_sCpF [Occ=Once]
                                                     ww8_sCpG [Occ=Once]
                                                     ww9_sCpH [Occ=Once] ->
                                  GHC.Show.$w$cshowsPrec
                                      0#
                                      ww3_sCpB
                                      ww4_sCpC
                                      ww5_sCpD
                                      ww6_sCpE
                                      ww7_sCpF
                                      ww8_sCpG
                                      ww9_sCpH
                                      w1_sCpz;
                            }; } in
                  let {
                    sat_sCpJ [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sCpI GHC.Types.[]]; } in
                  let {
                    sat_sCpy [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [ww_sCpv] \r [eta_B1]
                            GHC.Show.$fShow(,)_$cshowList1 ww_sCpv eta_B1; } in
                  let {
                    sat_sCpK [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                    [LclId] =
                        CCCS :! [sat_sCpy sat_sCpJ];
                  } in  GHC.Show.$fShow(,)_go2 sat_sCpK sat_sCpL;
        } in  (#,#) [GHC.Show.$fShow(,)4 sat_sCpM];

GHC.Show.$fShow(,)_go1 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCpN eta_sCpO]
        case ds_sCpN of {
          [] -> lvl11_rC0o;
          : x_sCpR [Occ=Once*!] ds1_sCpS [Occ=Once!] ->
              case ds1_sCpS of wild1_sCpT {
                [] -> x_sCpR eta_sCpO;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCpW [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCpO wild1_sCpT] \u []
                              GHC.Show.$fShow(,)_go1 wild1_sCpT eta_sCpO; } in
                    let {
                      sat_sCpX [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCpW];
                    } in  x_sCpR sat_sCpX;
              };
        };

GHC.Show.$fShow(,)_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a b.
     (GHC.Show.Show a, GHC.Show.Show b) =>
     GHC.Types.Int -> (a, b) -> GHC.Show.ShowS
[GblId,
 Arity=5,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sCpY w1_sCpZ w2_sCq0 w3_sCq1 w4_sCq2]
        case w3_sCq1 of {
          (,) ww1_sCq4 [Occ=Once] ww2_sCq5 [Occ=Once] ->
              let {
                sat_sCqb [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sCpY w1_sCpZ w4_sCq2 ww1_sCq4 ww2_sCq5] \u []
                        let {
                          sat_sCqa [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 w4_sCq2]; } in
                        let {
                          sat_sCq7 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [w1_sCpZ ww2_sCq5] \u []
                                  GHC.Show.showsPrec w1_sCpZ GHC.Show.$fShow(,)1 ww2_sCq5; } in
                        let {
                          sat_sCq8 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCq7 GHC.Types.[]]; } in
                        let {
                          sat_sCq6 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [w_sCpY ww1_sCq4] \u []
                                  GHC.Show.showsPrec w_sCpY GHC.Show.$fShow(,)1 ww1_sCq4; } in
                        let {
                          sat_sCq9 [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sCq6 sat_sCq8];
                        } in  GHC.Show.$fShow(,)_go1 sat_sCq9 sat_sCqa;
              } in  : [GHC.Show.$fShow(,)4 sat_sCqb];
        };

GHC.Show.$fShow(,)_$cshow
  :: forall a b.
     (GHC.Show.Show a, GHC.Show.Show b) =>
     (a, b) -> GHC.Base.String
[GblId,
 Arity=3,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCqc $dShow1_sCqd x_sCqe]
        case x_sCqe of {
          (,) ww1_sCqg [Occ=Once] ww2_sCqh [Occ=Once] ->
              let {
                sat_sCqn [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sCqc $dShow1_sCqd ww1_sCqg ww2_sCqh] \u []
                        let {
                          sat_sCqm [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 GHC.Types.[]]; } in
                        let {
                          sat_sCqj [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sCqd ww2_sCqh] \u []
                                  GHC.Show.showsPrec $dShow1_sCqd GHC.Show.$fShow(,)1 ww2_sCqh; } in
                        let {
                          sat_sCqk [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCqj GHC.Types.[]]; } in
                        let {
                          sat_sCqi [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sCqc ww1_sCqg] \u []
                                  GHC.Show.showsPrec $dShow_sCqc GHC.Show.$fShow(,)1 ww1_sCqg; } in
                        let {
                          sat_sCql [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sCqi sat_sCqk];
                        } in  GHC.Show.$fShow(,)_go1 sat_sCql sat_sCqm;
              } in  : [GHC.Show.$fShow(,)4 sat_sCqn];
        };

GHC.Show.$fShow(,)_$cshowList
  :: forall a b.
     (GHC.Show.Show a, GHC.Show.Show b) =>
     [(a, b)] -> GHC.Show.ShowS
[GblId,
 Arity=4,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCqo $dShow1_sCqp ls_sCqq s_sCqr]
        let {
          sat_sCqD [Occ=Once] :: (a_azJ8, b_azJ9) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCqo $dShow1_sCqp] \r [w_sCqs w1_sCqt]
                  case w_sCqs of {
                    (,) ww1_sCqv [Occ=Once] ww2_sCqw [Occ=Once] ->
                        let {
                          sat_sCqC [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [$dShow_sCqo $dShow1_sCqp w1_sCqt ww1_sCqv ww2_sCqw] \u []
                                  let {
                                    sat_sCqB [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        CCCS :! [GHC.Show.$fShow(,)2 w1_sCqt]; } in
                                  let {
                                    sat_sCqy [Occ=Once] :: GHC.Show.ShowS
                                    [LclId] =
                                        [$dShow1_sCqp ww2_sCqw] \u []
                                            GHC.Show.showsPrec
                                                $dShow1_sCqp GHC.Show.$fShow(,)1 ww2_sCqw; } in
                                  let {
                                    sat_sCqz [Occ=Once] :: [GHC.Show.ShowS]
                                    [LclId] =
                                        CCCS :! [sat_sCqy GHC.Types.[]]; } in
                                  let {
                                    sat_sCqx [Occ=Once] :: GHC.Show.ShowS
                                    [LclId] =
                                        [$dShow_sCqo ww1_sCqv] \u []
                                            GHC.Show.showsPrec
                                                $dShow_sCqo GHC.Show.$fShow(,)1 ww1_sCqv; } in
                                  let {
                                    sat_sCqA [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                                    [LclId] =
                                        CCCS :! [sat_sCqx sat_sCqz];
                                  } in  GHC.Show.$fShow(,)_go1 sat_sCqA sat_sCqB;
                        } in  : [GHC.Show.$fShow(,)4 sat_sCqC];
                  };
        } in  GHC.Show.showList__ sat_sCqD ls_sCqq s_sCqr;

GHC.Show.$fShow(,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b.
     (GHC.Show.Show a, GHC.Show.Show b) =>
     GHC.Show.Show (a, b)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sCqE $dShow1_sCqF]
        let {
          sat_sCqI [Occ=Once] :: [(a_azJ8, b_azJ9)] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCqE $dShow1_sCqF] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,)_$cshowList
                      $dShow_sCqE $dShow1_sCqF eta_B2 eta_B1; } in
        let {
          sat_sCqH [Occ=Once] :: (a_azJ8, b_azJ9) -> GHC.Base.String
          [LclId] =
              [$dShow_sCqE $dShow1_sCqF] \r [eta_B1]
                  GHC.Show.$fShow(,)_$cshow $dShow_sCqE $dShow1_sCqF eta_B1; } in
        let {
          sat_sCqG [Occ=Once]
            :: GHC.Types.Int -> (a_azJ8, b_azJ9) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCqE $dShow1_sCqF] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,)_$cshowsPrec
                      $dShow_sCqE $dShow1_sCqF eta_B3 eta_B2 eta_B1;
        } in  GHC.Show.C:Show [sat_sCqG sat_sCqH sat_sCqI];

GHC.Show.showString :: GHC.Base.String -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Base.++ eta_B2 eta_B1;

GHC.Show.showCommaSpace :: GHC.Show.ShowS
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.++ GHC.Show.showCommaSpace1 eta_B1;

GHC.Show.$fShowTypeLitSort5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TypeLitSymbol"#;

GHC.Show.$fShowTypeLitSort4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowTypeLitSort5;

GHC.Show.$fShowTypeLitSort3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TypeLitNat"#;

GHC.Show.$fShowTypeLitSort2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowTypeLitSort3;

GHC.Show.$fShowTypeLitSort_$cshowsPrec
  :: GHC.Types.Int -> GHC.Types.TypeLitSort -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sCqJ ds1_sCqK eta_sCqL]
        case ds1_sCqK of {
          GHC.Types.TypeLitSymbol ->
              GHC.Base.++ GHC.Show.$fShowTypeLitSort4 eta_sCqL;
          GHC.Types.TypeLitNat ->
              GHC.Base.++ GHC.Show.$fShowTypeLitSort2 eta_sCqL;
        };

GHC.Show.$fShowTypeLitSort_$cshow
  :: GHC.Types.TypeLitSort -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sCqN]
        case x_sCqN of {
          GHC.Types.TypeLitSymbol -> GHC.Show.$fShowTypeLitSort4;
          GHC.Types.TypeLitNat -> GHC.Show.$fShowTypeLitSort2;
        };

GHC.Show.$fShowTypeLitSort1
  :: GHC.Types.TypeLitSort -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sCqP eta_sCqQ]
        case ds_sCqP of {
          GHC.Types.TypeLitSymbol ->
              GHC.Base.++ GHC.Show.$fShowTypeLitSort4 eta_sCqQ;
          GHC.Types.TypeLitNat ->
              GHC.Base.++ GHC.Show.$fShowTypeLitSort2 eta_sCqQ;
        };

GHC.Show.$fShowTypeLitSort_$cshowList
  :: [GHC.Types.TypeLitSort] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sCqS s_sCqT]
        GHC.Show.showList__ GHC.Show.$fShowTypeLitSort1 ls_sCqS s_sCqT;

GHC.Show.$fShowTypeLitSort [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.TypeLitSort
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowTypeLitSort_$cshowsPrec
                                    GHC.Show.$fShowTypeLitSort_$cshow
                                    GHC.Show.$fShowTypeLitSort_$cshowList];

GHC.Show.$fShowVecElem20 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int8ElemRep"#;

GHC.Show.$fShowVecElem19 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem20;

GHC.Show.$fShowVecElem18 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int16ElemRep"#;

GHC.Show.$fShowVecElem17 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem18;

GHC.Show.$fShowVecElem16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int32ElemRep"#;

GHC.Show.$fShowVecElem15 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem16;

GHC.Show.$fShowVecElem14 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int64ElemRep"#;

GHC.Show.$fShowVecElem13 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem14;

GHC.Show.$fShowVecElem12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word8ElemRep"#;

GHC.Show.$fShowVecElem11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem12;

GHC.Show.$fShowVecElem10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word16ElemRep"#;

GHC.Show.$fShowVecElem9 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem10;

GHC.Show.$fShowVecElem8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word32ElemRep"#;

GHC.Show.$fShowVecElem7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem8;

GHC.Show.$fShowVecElem6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word64ElemRep"#;

GHC.Show.$fShowVecElem5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem6;

GHC.Show.$fShowVecElem4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FloatElemRep"#;

GHC.Show.$fShowVecElem3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem4;

GHC.Show.$fShowVecElem2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DoubleElemRep"#;

GHC.Show.$fShowVecElem1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem2;

GHC.Show.$w$cshowsPrec10 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.VecElem -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sCqU w1_sCqV]
        case w_sCqU of {
          GHC.Types.Int8ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem19 w1_sCqV;
          GHC.Types.Int16ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem17 w1_sCqV;
          GHC.Types.Int32ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem15 w1_sCqV;
          GHC.Types.Int64ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem13 w1_sCqV;
          GHC.Types.Word8ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem11 w1_sCqV;
          GHC.Types.Word16ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem9 w1_sCqV;
          GHC.Types.Word32ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem7 w1_sCqV;
          GHC.Types.Word64ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem5 w1_sCqV;
          GHC.Types.FloatElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem3 w1_sCqV;
          GHC.Types.DoubleElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem1 w1_sCqV;
        };

GHC.Show.$fShowVecElem_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.VecElem -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sCqX w1_sCqY w2_sCqZ]
        GHC.Show.$w$cshowsPrec10 w1_sCqY w2_sCqZ;

GHC.Show.$fShowVecElem_$cshow
  :: GHC.Types.VecElem -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sCr0]
        case x_sCr0 of {
          GHC.Types.Int8ElemRep -> GHC.Show.$fShowVecElem19;
          GHC.Types.Int16ElemRep -> GHC.Show.$fShowVecElem17;
          GHC.Types.Int32ElemRep -> GHC.Show.$fShowVecElem15;
          GHC.Types.Int64ElemRep -> GHC.Show.$fShowVecElem13;
          GHC.Types.Word8ElemRep -> GHC.Show.$fShowVecElem11;
          GHC.Types.Word16ElemRep -> GHC.Show.$fShowVecElem9;
          GHC.Types.Word32ElemRep -> GHC.Show.$fShowVecElem7;
          GHC.Types.Word64ElemRep -> GHC.Show.$fShowVecElem5;
          GHC.Types.FloatElemRep -> GHC.Show.$fShowVecElem3;
          GHC.Types.DoubleElemRep -> GHC.Show.$fShowVecElem1;
        };

GHC.Show.$fShowVecElem_$cshowList
  :: [GHC.Types.VecElem] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sCr2 s_sCr3]
        GHC.Show.showList__ GHC.Show.$w$cshowsPrec10 ls_sCr2 s_sCr3;

GHC.Show.$fShowVecElem [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.VecElem
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowVecElem_$cshowsPrec
                                    GHC.Show.$fShowVecElem_$cshow
                                    GHC.Show.$fShowVecElem_$cshowList];

GHC.Show.$fShowVecCount12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec2"#;

GHC.Show.$fShowVecCount11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount12;

GHC.Show.$fShowVecCount10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec4"#;

GHC.Show.$fShowVecCount9 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount10;

GHC.Show.$fShowVecCount8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec8"#;

GHC.Show.$fShowVecCount7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount8;

GHC.Show.$fShowVecCount6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec16"#;

GHC.Show.$fShowVecCount5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount6;

GHC.Show.$fShowVecCount4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec32"#;

GHC.Show.$fShowVecCount3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount4;

GHC.Show.$fShowVecCount2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec64"#;

GHC.Show.$fShowVecCount1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount2;

GHC.Show.$w$cshowsPrec9 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.VecCount -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sCr4 w1_sCr5]
        case w_sCr4 of {
          GHC.Types.Vec2 -> GHC.Base.++ GHC.Show.$fShowVecCount11 w1_sCr5;
          GHC.Types.Vec4 -> GHC.Base.++ GHC.Show.$fShowVecCount9 w1_sCr5;
          GHC.Types.Vec8 -> GHC.Base.++ GHC.Show.$fShowVecCount7 w1_sCr5;
          GHC.Types.Vec16 -> GHC.Base.++ GHC.Show.$fShowVecCount5 w1_sCr5;
          GHC.Types.Vec32 -> GHC.Base.++ GHC.Show.$fShowVecCount3 w1_sCr5;
          GHC.Types.Vec64 -> GHC.Base.++ GHC.Show.$fShowVecCount1 w1_sCr5;
        };

GHC.Show.$fShowVecCount_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.VecCount -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sCr7 w1_sCr8 w2_sCr9]
        GHC.Show.$w$cshowsPrec9 w1_sCr8 w2_sCr9;

GHC.Show.$fShowVecCount_$cshow
  :: GHC.Types.VecCount -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sCra]
        case x_sCra of {
          GHC.Types.Vec2 -> GHC.Show.$fShowVecCount11;
          GHC.Types.Vec4 -> GHC.Show.$fShowVecCount9;
          GHC.Types.Vec8 -> GHC.Show.$fShowVecCount7;
          GHC.Types.Vec16 -> GHC.Show.$fShowVecCount5;
          GHC.Types.Vec32 -> GHC.Show.$fShowVecCount3;
          GHC.Types.Vec64 -> GHC.Show.$fShowVecCount1;
        };

GHC.Show.$fShowVecCount_$cshowList
  :: [GHC.Types.VecCount] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sCrc s_sCrd]
        GHC.Show.showList__ GHC.Show.$w$cshowsPrec9 ls_sCrc s_sCrd;

GHC.Show.$fShowVecCount [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.VecCount
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowVecCount_$cshowsPrec
                                    GHC.Show.$fShowVecCount_$cshow
                                    GHC.Show.$fShowVecCount_$cshowList];

GHC.Show.$fShowOrdering6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LT"#;

GHC.Show.$fShowOrdering5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowOrdering6;

GHC.Show.$fShowOrdering4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EQ"#;

GHC.Show.$fShowOrdering3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowOrdering4;

GHC.Show.$fShowOrdering2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GT"#;

GHC.Show.$fShowOrdering1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowOrdering2;

GHC.Show.$w$cshowsPrec8 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Ordering -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sCre w1_sCrf]
        case w_sCre of {
          GHC.Types.LT -> GHC.Base.++ GHC.Show.$fShowOrdering5 w1_sCrf;
          GHC.Types.EQ -> GHC.Base.++ GHC.Show.$fShowOrdering3 w1_sCrf;
          GHC.Types.GT -> GHC.Base.++ GHC.Show.$fShowOrdering1 w1_sCrf;
        };

GHC.Show.$fShowOrdering_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Ordering -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sCrh w1_sCri w2_sCrj]
        GHC.Show.$w$cshowsPrec8 w1_sCri w2_sCrj;

GHC.Show.$fShowOrdering_$cshow
  :: GHC.Types.Ordering -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sCrk]
        case x_sCrk of {
          GHC.Types.LT -> GHC.Show.$fShowOrdering5;
          GHC.Types.EQ -> GHC.Show.$fShowOrdering3;
          GHC.Types.GT -> GHC.Show.$fShowOrdering1;
        };

GHC.Show.$fShowOrdering_$cshowList
  :: [GHC.Types.Ordering] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sCrm s_sCrn]
        GHC.Show.showList__ GHC.Show.$w$cshowsPrec8 ls_sCrm s_sCrn;

GHC.Show.$fShowOrdering [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Ordering
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowOrdering_$cshowsPrec
                                    GHC.Show.$fShowOrdering_$cshow
                                    GHC.Show.$fShowOrdering_$cshowList];

GHC.Show.$fShowBool5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "False"#;

GHC.Show.$fShowBool4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowBool5;

GHC.Show.$fShowBool3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "True"#;

GHC.Show.$fShowBool2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowBool3;

GHC.Show.$fShowBool_$cshowsPrec
  :: GHC.Types.Int -> GHC.Types.Bool -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sCro ds1_sCrp eta_sCrq]
        case ds1_sCrp of {
          GHC.Types.False -> GHC.Base.++ GHC.Show.$fShowBool4 eta_sCrq;
          GHC.Types.True -> GHC.Base.++ GHC.Show.$fShowBool2 eta_sCrq;
        };

GHC.Show.$fShowBool_$cshow :: GHC.Types.Bool -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sCrs]
        case x_sCrs of {
          GHC.Types.False -> GHC.Show.$fShowBool4;
          GHC.Types.True -> GHC.Show.$fShowBool2;
        };

GHC.Show.$fShowBool1 :: GHC.Types.Bool -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sCru eta_sCrv]
        case ds_sCru of {
          GHC.Types.False -> GHC.Base.++ GHC.Show.$fShowBool4 eta_sCrv;
          GHC.Types.True -> GHC.Base.++ GHC.Show.$fShowBool2 eta_sCrv;
        };

GHC.Show.$fShowBool_$cshowList
  :: [GHC.Types.Bool] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sCrx s_sCry]
        GHC.Show.showList__ GHC.Show.$fShowBool1 ls_sCrx s_sCry;

GHC.Show.$fShowBool [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Bool
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowBool_$cshowsPrec
                                    GHC.Show.$fShowBool_$cshow
                                    GHC.Show.$fShowBool_$cshowList];

GHC.Show.$fShow()3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "()"#;

GHC.Show.$fShow()2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShow()3;

GHC.Show.$fShow()_$cshowsPrec
  :: GHC.Types.Int -> () -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*H><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sCrz ds1_sCrA eta_sCrB]
        case ds1_sCrA of {
          () -> GHC.Base.++ GHC.Show.$fShow()2 eta_sCrB;
        };

GHC.Show.$fShow()_$cshow :: () -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [x_sCrD] case x_sCrD of { () -> GHC.Show.$fShow()2; };

GHC.Show.$fShow()1 :: () -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*H><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sCrF eta_sCrG]
        case ds_sCrF of { () -> GHC.Base.++ GHC.Show.$fShow()2 eta_sCrG; };

GHC.Show.$fShow()_$cshowList :: [()] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sCrI s_sCrJ]
        GHC.Show.showList__ GHC.Show.$fShow()1 ls_sCrI s_sCrJ;

GHC.Show.$fShow() [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show ()
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShow()_$cshowsPrec
                                    GHC.Show.$fShow()_$cshow
                                    GHC.Show.$fShow()_$cshowList];

GHC.Show.$fShowTrName_$cshowsPrec
  :: GHC.Types.Int -> GHC.Types.TrName -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_sCrK ds1_sCrL]
        case ds1_sCrL of {
          GHC.Types.TrNameS s_sCrN [Occ=Once] ->
              let {
                sat_sCrO [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [s_sCrN] \u [] GHC.CString.unpackCString# s_sCrN;
              } in  GHC.Base.++ sat_sCrO;
          GHC.Types.TrNameD s_sCrP [Occ=Once] -> GHC.Base.++ s_sCrP;
        };

GHC.Show.$fShowTrName_$cshow :: GHC.Types.TrName -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sCrQ]
        case x_sCrQ of {
          GHC.Types.TrNameS s_sCrS [Occ=Once] ->
              GHC.CString.unpackCString# s_sCrS;
          GHC.Types.TrNameD s_sCrT [Occ=Once] -> s_sCrT;
        };

GHC.Show.$fShowTrName1 :: GHC.Types.TrName -> GHC.Show.ShowS
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sCrU]
        case ds_sCrU of {
          GHC.Types.TrNameS s_sCrW [Occ=Once] ->
              let {
                sat_sCrX [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [s_sCrW] \u [] GHC.CString.unpackCString# s_sCrW;
              } in  GHC.Base.++ sat_sCrX;
          GHC.Types.TrNameD s_sCrY [Occ=Once] -> GHC.Base.++ s_sCrY;
        };

GHC.Show.$fShowTrName_$cshowList
  :: [GHC.Types.TrName] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sCrZ s_sCs0]
        GHC.Show.showList__ GHC.Show.$fShowTrName1 ls_sCrZ s_sCs0;

GHC.Show.$fShowTrName [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.TrName
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowTrName_$cshowsPrec
                                    GHC.Show.$fShowTrName_$cshow
                                    GHC.Show.$fShowTrName_$cshowList];

GHC.Show.$fShowModule2 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [':'#];

GHC.Show.$w$cshowsPrec6 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.TrName -> GHC.Types.TrName -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_sCs1 ww1_sCs2]
        let {
          f12_sCs3 [Occ=OnceL!, Dmd=<L,C(U)>]
            :: GHC.Base.String -> GHC.Base.String
          [LclId] =
              [ww_sCs1] \u []
                  case ww_sCs1 of {
                    GHC.Types.TrNameS s_sCs5 [Occ=Once] ->
                        let {
                          sat_sCs6 [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [s_sCs5] \u [] GHC.CString.unpackCString# s_sCs5;
                        } in  GHC.Base.++ sat_sCs6;
                    GHC.Types.TrNameD s_sCs7 [Occ=Once] -> GHC.Base.++ s_sCs7;
                  }; } in
        let {
          g_sCs8 [Occ=OnceL!, Dmd=<L,C(U)>]
            :: GHC.Base.String -> [GHC.Types.Char]
          [LclId] =
              [ww1_sCs2] \u []
                  case ww1_sCs2 of {
                    GHC.Types.TrNameS s_sCsa [Occ=Once] ->
                        let {
                          sat_sCsb [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [s_sCsa] \u [] GHC.CString.unpackCString# s_sCsa;
                        } in  GHC.Base.++ sat_sCsb;
                    GHC.Types.TrNameD s_sCsc [Occ=Once] -> GHC.Base.++ s_sCsc;
                  }; } in
        let {
          sat_sCsg [Occ=OnceT[0]] :: GHC.Base.String -> GHC.Base.String
          [LclId] =
              [f12_sCs3 g_sCs8] \r [x_sCsd]
                  let {
                    sat_sCse [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [g_sCs8 x_sCsd] \u [] g_sCs8 x_sCsd; } in
                  let {
                    sat_sCsf [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [GHC.Show.$fShowModule2 sat_sCse];
                  } in  f12_sCs3 sat_sCsf;
        } in  sat_sCsg;

GHC.Show.$fShowModule_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Module -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_sCsh w1_sCsi]
        case w1_sCsi of {
          GHC.Types.Module ww1_sCsk [Occ=Once] ww2_sCsl [Occ=Once] ->
              GHC.Show.$w$cshowsPrec6 ww1_sCsk ww2_sCsl;
        };

GHC.Show.$fShowModule_$cshow :: GHC.Types.Module -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [x_sCsm]
        case x_sCsm of {
          GHC.Types.Module ww1_sCso [Occ=Once] ww2_sCsp [Occ=Once] ->
              GHC.Show.$w$cshowsPrec6 ww1_sCso ww2_sCsp GHC.Types.[];
        };

GHC.Show.$fShowModule1 :: GHC.Types.Module -> GHC.Show.ShowS
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_sCsq]
        case w_sCsq of {
          GHC.Types.Module ww1_sCss [Occ=Once] ww2_sCst [Occ=Once] ->
              GHC.Show.$w$cshowsPrec6 ww1_sCss ww2_sCst;
        };

GHC.Show.$fShowModule_$cshowList
  :: [GHC.Types.Module] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sCsu s_sCsv]
        GHC.Show.showList__ GHC.Show.$fShowModule1 ls_sCsu s_sCsv;

GHC.Show.$fShowModule [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Module
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowModule_$cshowsPrec
                                    GHC.Show.$fShowModule_$cshow
                                    GHC.Show.$fShowModule_$cshowList];

GHC.Show.$fShowTyCon_$cshowsPrec
  :: GHC.Types.Int -> GHC.Types.TyCon -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [p_sCsw ds_sCsx]
        case ds_sCsx of {
          GHC.Types.TyCon _ [Occ=Dead]
                          _ [Occ=Dead]
                          _ [Occ=Dead]
                          tc_name_sCsC [Occ=Once]
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
              GHC.Show.$fShowTrName_$cshowsPrec p_sCsw tc_name_sCsC;
        };

GHC.Show.$fShowTyCon_$cshow :: GHC.Types.TyCon -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [x_sCsF]
        case x_sCsF of {
          GHC.Types.TyCon _ [Occ=Dead]
                          _ [Occ=Dead]
                          _ [Occ=Dead]
                          tc_name_sCsK [Occ=Once!]
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
              case tc_name_sCsK of {
                GHC.Types.TrNameS s_sCsO [Occ=Once] ->
                    GHC.CString.unpackCString# s_sCsO;
                GHC.Types.TrNameD s_sCsP [Occ=Once] -> s_sCsP;
              };
        };

GHC.Show.$fShowTyCon1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.TyCon -> GHC.Show.ShowS
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [w_sCsQ]
        case w_sCsQ of {
          GHC.Types.TyCon _ [Occ=Dead]
                          _ [Occ=Dead]
                          _ [Occ=Dead]
                          ww4_sCsV [Occ=Once]
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
              GHC.Show.$fShowTrName1 ww4_sCsV;
        };

GHC.Show.$fShowTyCon_$cshowList
  :: [GHC.Types.TyCon] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sCsY s_sCsZ]
        GHC.Show.showList__ GHC.Show.$fShowTyCon1 ls_sCsY s_sCsZ;

GHC.Show.$fShowTyCon [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.TyCon
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowTyCon_$cshowsPrec
                                    GHC.Show.$fShowTyCon_$cshow
                                    GHC.Show.$fShowTyCon_$cshowList];

GHC.Show.showSpace1 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [' '#];

GHC.Show.showSpace :: GHC.Show.ShowS
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [xs_sCt0] : [GHC.Show.showSpace1 xs_sCt0];

GHC.Show.protectEsc
  :: (GHC.Types.Char -> GHC.Types.Bool)
     -> GHC.Show.ShowS -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><C(S),1*C1(U)><L,1*U>,
 Unf=OtherCon []] =
    [] \r [p_sCt1 f12_sCt2 x_sCt3]
        let {
          sat_sCt8 [Occ=Once] :: GHC.Base.String
          [LclId] =
              [p_sCt1 x_sCt3] \u []
                  case x_sCt3 of wild_sCt4 {
                    [] -> [] [];
                    : c_sCt5 [Occ=Once] _ [Occ=Dead] ->
                        case p_sCt1 c_sCt5 of {
                          GHC.Types.False -> wild_sCt4;
                          GHC.Types.True ->
                              GHC.CString.unpackAppendCString# GHC.Show.showLitChar4 wild_sCt4;
                        };
                  };
        } in  f12_sCt2 sat_sCt8;

GHC.Show.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Show.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Show.$trModule4];

GHC.Show.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Show"#;

GHC.Show.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Show.$trModule2];

GHC.Show.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Show.$trModule3
                                     GHC.Show.$trModule1];

$krep_rC0q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep1_rC0r :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_rC0s :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep3_rC0t :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rC0q GHC.Types.[]];

$krep4_rC0u :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep3_rC0t];

$krep5_rC0v :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rC0u $krep4_rC0u];

GHC.Show.$tcShow1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$* $krep2_rC0s];

$krep6_rC0w :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep7_rC0x :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_rC0w $krep5_rC0v];

$krep8_rC0y :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_rC0r $krep7_rC0x];

$krep9_rC0z :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_rC0w $krep4_rC0u];

$krep10_rC0A :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep6_rC0w GHC.Types.[]];

$krep11_rC0B :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep10_rC0A];

$krep12_rC0C :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_rC0B $krep5_rC0v];

GHC.Show.$tcShow3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Show"#;

GHC.Show.$tcShow2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Show.$tcShow3];

GHC.Show.$tcShow :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [10437143935872046625##
                                    8934823934159178042##
                                    GHC.Show.$trModule
                                    GHC.Show.$tcShow2
                                    0#
                                    GHC.Show.$tcShow1];

$krep13_rC0D :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Show.$tcShow
                                              $krep10_rC0A];

$krep14_rC0E :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep12_rC0C $krep13_rC0D];

$krep15_rC0F :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_rC0z $krep14_rC0E];

GHC.Show.$tc'C:Show1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rC0y $krep15_rC0F];

GHC.Show.$tc'C:Show3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:Show"#;

GHC.Show.$tc'C:Show2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Show.$tc'C:Show3];

GHC.Show.$tc'C:Show :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4474575220627516169##
                                    12023205831716615459##
                                    GHC.Show.$trModule
                                    GHC.Show.$tc'C:Show2
                                    1#
                                    GHC.Show.$tc'C:Show1];

GHC.Show.$fShowInt_$cshow :: GHC.Types.Int -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_sCt9]
        case x_sCt9 of {
          GHC.Types.I# ww1_sCtb [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# ww1_sCtb GHC.Types.[] of {
                (#,#) ww3_sCtd [Occ=Once] ww4_sCte [Occ=Once] ->
                    : [ww3_sCtd ww4_sCte];
              };
        };

GHC.Show.$fShowInt1 :: GHC.Types.Int -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sCtf w1_sCtg]
        case w_sCtf of {
          GHC.Types.I# ww1_sCti [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# ww1_sCti w1_sCtg of {
                (#,#) ww3_sCtk [Occ=Once] ww4_sCtl [Occ=Once] ->
                    : [ww3_sCtk ww4_sCtl];
              };
        };

GHC.Show.$fShowInt_$cshowList :: [GHC.Types.Int] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sCtm s_sCtn]
        GHC.Show.showList__ GHC.Show.$fShowInt1 ls_sCtm s_sCtn;

GHC.Show.$fShowInt [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Int
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.showSignedInt
                                    GHC.Show.$fShowInt_$cshow
                                    GHC.Show.$fShowInt_$cshowList];

lvl12_rC0G :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_sCto]
        case ds_sCto of {
          GHC.Types.C# x_sCtq [Occ=Once!] ->
              case x_sCtq of {
                __DEFAULT -> GHC.Types.False [];
                '\n'# -> GHC.Types.True [];
              };
        };

lvl13_rC0H :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\n\\"#;

lvl14_rC0I :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl13_rC0H;

lvl15_rC0J :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\n\""#;

lvl16_rC0K :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl15_rC0J;

lvl17_rC0L :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\""#;

lvl18_rC0M :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl17_rC0L;

GHC.Show.$wgo [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Types.Char
     -> [GHC.Types.Char] -> (# [GHC.Types.Char], [[GHC.Types.Char]] #)
[GblId, Arity=2, Str=<L,U><S,1*U>, Unf=OtherCon []] =
    [] \r [w_sCts w1_sCtt]
        case GHC.List.$wbreak lvl12_rC0G w1_sCtt of {
          (#,#) ww1_sCtv [Occ=Once*] ww2_sCtw [Occ=Once!] ->
              case ww2_sCtw of {
                [] ->
                    let {
                      sat_sCty [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [ww1_sCtv] \u [] GHC.Show.showLitString ww1_sCtv lvl18_rC0M; } in
                    let {
                      sat_sCtz [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          CCCS :! [w_sCts sat_sCty];
                    } in  (#,#) [sat_sCtz GHC.Types.[]];
                : ds_sCtA [Occ=Once!] s'_sCtB [Occ=Once!] ->
                    case s'_sCtB of wild1_sCtC {
                      [] ->
                          case ds_sCtA of {
                            GHC.Types.C# ds1_sCtE [Occ=Once!] ->
                                case ds1_sCtE of {
                                  __DEFAULT ->
                                      let {
                                        sat_sCtG [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww1_sCtv] \u []
                                                GHC.Show.showLitString ww1_sCtv lvl18_rC0M; } in
                                      let {
                                        sat_sCtH [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            CCCS :! [w_sCts sat_sCtG];
                                      } in  (#,#) [sat_sCtH GHC.Types.[]];
                                  '\n'# ->
                                      let {
                                        sat_sCtI [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww1_sCtv] \u []
                                                GHC.Show.showLitString ww1_sCtv lvl16_rC0K; } in
                                      let {
                                        sat_sCtJ [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            CCCS :! [w_sCts sat_sCtI];
                                      } in  (#,#) [sat_sCtJ GHC.Types.[]];
                                };
                          };
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          let {
                            sat_sCtR [Occ=Once] :: [[GHC.Types.Char]]
                            [LclId] =
                                [wild1_sCtC] \u []
                                    case GHC.Show.$wgo GHC.Show.showLitChar13 wild1_sCtC of {
                                      (#,#) ww5_sCtP [Occ=Once] ww6_sCtQ [Occ=Once] ->
                                          : [ww5_sCtP ww6_sCtQ];
                                    }; } in
                          let {
                            sat_sCtM [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [ww1_sCtv] \u [] GHC.Show.showLitString ww1_sCtv lvl14_rC0I; } in
                          let {
                            sat_sCtN [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                CCCS :! [w_sCts sat_sCtM];
                          } in  (#,#) [sat_sCtN sat_sCtR];
                    };
              };
        };

GHC.Show.showMultiLineString_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Char -> [GHC.Types.Char] -> [[GHC.Types.Char]]
[GblId, Arity=2, Str=<L,U><S,1*U>m2, Unf=OtherCon []] =
    [] \r [w_sCtS w1_sCtT]
        case GHC.Show.$wgo w_sCtS w1_sCtT of {
          (#,#) ww1_sCtV [Occ=Once] ww2_sCtW [Occ=Once] ->
              : [ww1_sCtV ww2_sCtW];
        };

GHC.Show.showMultiLineString
  :: GHC.Base.String -> [GHC.Base.String]
[GblId, Arity=1, Str=<S,1*U>m2, Unf=OtherCon []] =
    [] \r [str_sCtX]
        case GHC.Show.$wgo GHC.Show.$fShow(,)3 str_sCtX of {
          (#,#) ww1_sCtZ [Occ=Once] ww2_sCu0 [Occ=Once] ->
              : [ww1_sCtZ ww2_sCu0];
        };

GHC.Show.$fShowChar3 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\''#];

GHC.Show.$fShowChar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'\\''"#;

GHC.Show.$fShowChar1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowChar2;

GHC.Show.$w$cshowsPrec3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Char# -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ww_sCu1 w_sCu2]
        case ww_sCu1 of ds_sCu3 {
          __DEFAULT ->
              let {
                sat_sCu5 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sCu2 ds_sCu3] \u []
                        let {
                          sat_sCu4 [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShowChar3 w_sCu2];
                        } in  GHC.Show.$wshowLitChar ds_sCu3 sat_sCu4;
              } in  : [GHC.Show.$fShowChar3 sat_sCu5];
          '\''# -> GHC.Base.++ GHC.Show.$fShowChar1 w_sCu2;
        };

GHC.Show.$fShowChar_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Char -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S(S),1*U(1*U)><L,U>, Unf=OtherCon []] =
    [] \r [w_sCu6 w1_sCu7 w2_sCu8]
        case w1_sCu7 of {
          GHC.Types.C# ww1_sCua [Occ=Once] ->
              GHC.Show.$w$cshowsPrec3 ww1_sCua w2_sCu8;
        };

lvl19_rC0N :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShowChar3 GHC.Types.[]];

GHC.Show.$fShowChar_$cshow :: GHC.Types.Char -> GHC.Base.String
[GblId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
    [] \r [x_sCub]
        case x_sCub of {
          GHC.Types.C# ds_sCud [Occ=Once!] ->
              case ds_sCud of ds1_sCue {
                __DEFAULT ->
                    let {
                      sat_sCuf [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [ds1_sCue] \u [] GHC.Show.$wshowLitChar ds1_sCue lvl19_rC0N;
                    } in  : [GHC.Show.$fShowChar3 sat_sCuf];
                '\''# -> GHC.Show.$fShowChar1;
              };
        };

GHC.Show.$fShowChar [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Char
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowChar_$cshowsPrec
                                    GHC.Show.$fShowChar_$cshow
                                    GHC.Show.$fShow(,)_$cshowList1];

GHC.Show.$fShow[]_$s$cshowList
  :: [[GHC.Types.Int]] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sCug s_sCuh]
        GHC.Show.showList__ GHC.Show.$fShowInt_$cshowList ls_sCug s_sCuh;

GHC.Show.$fShow[]_$s$cshow :: [GHC.Types.Int] -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sCui]
        GHC.Show.showList__ GHC.Show.$fShowInt1 x_sCui GHC.Types.[];

$s$fShow[]1_rC0O
  :: GHC.Types.Int -> [GHC.Base.String] -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_sCuj eta_B2 eta_B1]
        GHC.Show.$fShow[]_$s$cshowList1 eta_B2 eta_B1;

GHC.Show.$fShow[]_$s$cshow2 :: [GHC.Base.String] -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sCuk]
        GHC.Show.showList__
            GHC.Show.$fShow(,)_$cshowList1 x_sCuk GHC.Types.[];

GHC.Show.$fShow[]_$cshow
  :: forall a. GHC.Show.Show a => [a] -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LLC(C(S))),1*U(A,A,1*C1(C1(U)))><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCul x_sCum]
        GHC.Show.showList $dShow_sCul x_sCum GHC.Types.[];

GHC.Show.$fShow[]_$s$cshowList2
  :: [[GHC.Base.String]] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sCun s_sCuo]
        GHC.Show.showList__ GHC.Show.$fShow[]_$s$cshowList1 ls_sCun s_sCuo;

GHC.Show.$fShow[]_$s$fShow[]2 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show [GHC.Base.String]
[GblId, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [$s$fShow[]1_rC0O
                                    GHC.Show.$fShow[]_$s$cshow2
                                    GHC.Show.$fShow[]_$s$cshowList2];

GHC.Show.$fShow[]_$cshowList
  :: forall a. GHC.Show.Show a => [[a]] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C(C1(U)))><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCup ls_sCuq s_sCur]
        let {
          sat_sCus [Occ=Once, Dmd=<L,C(C1(U))>] :: [a_azLN] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCup] \u [] GHC.Show.showList $dShow_sCup;
        } in  GHC.Show.showList__ sat_sCus ls_sCuq s_sCur;

$s$fShow[]2_rC0P
  :: GHC.Types.Int
     -> [GHC.Types.Int] -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_sCut eta_sCuu eta1_sCuv]
        GHC.Show.$fShowInt_$cshowList eta_sCuu eta1_sCuv;

GHC.Show.$fShow[]_$s$fShow[] [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show [GHC.Types.Int]
[GblId, Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [$s$fShow[]2_rC0P
                                    GHC.Show.$fShow[]_$s$cshow
                                    GHC.Show.$fShow[]_$s$cshowList];

GHC.Show.$fShow[] [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show a => GHC.Show.Show [a]
[GblId[DFunId], Arity=1, Caf=NoCafRefs, Str=<L,U(A,A,U)>m] =
    [] \r [$dShow_sCuw]
        let {
          lvl45_sCux [Occ=OnceL] :: [a_azLN] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCuw] \u [] GHC.Show.showList $dShow_sCuw; } in
        let {
          sat_sCuB [Occ=Once] :: [[a_azLN]] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCuw] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow[]_$cshowList $dShow_sCuw eta_B2 eta_B1; } in
        let {
          sat_sCuA [Occ=Once] :: [a_azLN] -> GHC.Base.String
          [LclId] =
              [$dShow_sCuw] \r [eta_B1]
                  GHC.Show.$fShow[]_$cshow $dShow_sCuw eta_B1; } in
        let {
          sat_sCuz [Occ=Once] :: GHC.Types.Int -> [a_azLN] -> GHC.Show.ShowS
          [LclId] =
              [lvl45_sCux] \r [ds_sCuy] lvl45_sCux;
        } in  GHC.Show.C:Show [sat_sCuz sat_sCuA sat_sCuB];

lvl20_rC0Q :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DoubleRep"#;

lvl21_rC0R :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl20_rC0Q;

lvl22_rC0S :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FloatRep"#;

lvl23_rC0T :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl22_rC0S;

lvl24_rC0U :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "AddrRep"#;

lvl25_rC0V :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl24_rC0U;

lvl26_rC0W :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word64Rep"#;

lvl27_rC0X :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl26_rC0W;

lvl28_rC0Y :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int64Rep"#;

lvl29_rC0Z :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl28_rC0Y;

lvl30_rC10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "WordRep"#;

lvl31_rC11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl30_rC10;

lvl32_rC12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IntRep"#;

lvl33_rC13 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl32_rC12;

lvl34_rC14 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UnliftedRep"#;

lvl35_rC15 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl34_rC14;

lvl36_rC16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LiftedRep"#;

lvl37_rC17 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl36_rC16;

lvl38_rC18 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SumRep "#;

lvl39_rC19 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TupleRep "#;

lvl40_rC1a :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "VecRep "#;

GHC.Show.$fShowRuntimeRep_$cshowsPrec [Occ=LoopBreaker]
  :: GHC.Types.Int -> GHC.Types.RuntimeRep -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,1*U(U)><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [a_sCuC ds_sCuD eta_sCuE]
        case ds_sCuD of {
          GHC.Types.VecRep b1_sCuG [Occ=Once] b2_sCuH [Occ=Once] ->
              case a_sCuC of {
                GHC.Types.I# x_sCuJ [Occ=Once] ->
                    let {
                      p_sCuK [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
                      [LclId, Arity=1, Str=<L,1*U>, Unf=OtherCon []] =
                          sat-only [b1_sCuG b2_sCuH] \r [x1_sCuL]
                              let {
                                sat_sCuO [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [b1_sCuG b2_sCuH x1_sCuL] \u []
                                        let {
                                          sat_sCuM [Occ=Once] :: [GHC.Types.Char]
                                          [LclId] =
                                              [b2_sCuH x1_sCuL] \u []
                                                  GHC.Show.$w$cshowsPrec10 b2_sCuH x1_sCuL; } in
                                        let {
                                          sat_sCuN [Occ=Once] :: GHC.Base.String
                                          [LclId] =
                                              CCCS :! [GHC.Show.showSpace1 sat_sCuM];
                                        } in  GHC.Show.$w$cshowsPrec9 b1_sCuG sat_sCuN;
                              } in  GHC.CString.unpackAppendCString# lvl40_rC1a sat_sCuO;
                    } in 
                      case >=# [x_sCuJ 11#] of {
                        __DEFAULT -> p_sCuK eta_sCuE;
                        1# ->
                            let {
                              sat_sCuR [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [eta_sCuE p_sCuK] \u []
                                      let {
                                        sat_sCuQ [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [GHC.Show.$fShow(,)2 eta_sCuE];
                                      } in  p_sCuK sat_sCuQ;
                            } in  : [GHC.Show.$fShow(,)4 sat_sCuR];
                      };
              };
          GHC.Types.TupleRep b1_sCuS [Occ=Once!] ->
              case a_sCuC of {
                GHC.Types.I# x_sCuU [Occ=Once] ->
                    let {
                      p_sCuV [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
                      [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                          sat-only [b1_sCuS] \r [x1_sCuW]
                              let {
                                sat_sCva [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [b1_sCuS x1_sCuW] \u []
                                        case b1_sCuS of {
                                          [] ->
                                              GHC.CString.unpackAppendCString#
                                                  GHC.Show.showList__4 x1_sCuW;
                                          : x2_sCuY [Occ=Once] xs_sCuZ [Occ=Once] ->
                                              let {
                                                sat_sCv9 [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [x1_sCuW x2_sCuY xs_sCuZ] \u []
                                                        let {
                                                          sat_sCv8 [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              [x1_sCuW xs_sCuZ] \u []
                                                                  let {
                                                                    lvl45_sCv0 [Occ=OnceL]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId, Unf=OtherCon []] =
                                                                        CCCS :! [GHC.Show.showList__2
                                                                                 x1_sCuW]; } in
                                                                  let {
                                                                    showl_sCv1 [Occ=LoopBreaker]
                                                                      :: [GHC.Types.RuntimeRep]
                                                                         -> GHC.Base.String
                                                                    [LclId,
                                                                     Arity=1,
                                                                     Str=<S,1*U>,
                                                                     Unf=OtherCon []] =
                                                                        sat-only [lvl45_sCv0
                                                                                  showl_sCv1] \r [ds1_sCv2]
                                                                            case ds1_sCv2 of {
                                                                              [] -> lvl45_sCv0;
                                                                              : y_sCv4 [Occ=Once]
                                                                                ys_sCv5 [Occ=Once] ->
                                                                                  let {
                                                                                    sat_sCv7 [Occ=Once]
                                                                                      :: [GHC.Types.Char]
                                                                                    [LclId] =
                                                                                        [showl_sCv1
                                                                                         y_sCv4
                                                                                         ys_sCv5] \u []
                                                                                            let {
                                                                                              sat_sCv6 [Occ=Once]
                                                                                                :: GHC.Base.String
                                                                                              [LclId] =
                                                                                                  [showl_sCv1
                                                                                                   ys_sCv5] \u []
                                                                                                      showl_sCv1
                                                                                                          ys_sCv5;
                                                                                            } in 
                                                                                              GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                                                                                  GHC.Show.$fShow(,)1
                                                                                                  y_sCv4
                                                                                                  sat_sCv6;
                                                                                  } in 
                                                                                    : [GHC.Show.showList__1
                                                                                       sat_sCv7];
                                                                            };
                                                                  } in  showl_sCv1 xs_sCuZ;
                                                        } in 
                                                          GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                                              GHC.Show.$fShow(,)1 x2_sCuY sat_sCv8;
                                              } in  : [GHC.Show.showList__3 sat_sCv9];
                                        };
                              } in  GHC.CString.unpackAppendCString# lvl39_rC19 sat_sCva;
                    } in 
                      case >=# [x_sCuU 11#] of {
                        __DEFAULT -> p_sCuV eta_sCuE;
                        1# ->
                            let {
                              sat_sCvd [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [eta_sCuE p_sCuV] \u []
                                      let {
                                        sat_sCvc [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [GHC.Show.$fShow(,)2 eta_sCuE];
                                      } in  p_sCuV sat_sCvc;
                            } in  : [GHC.Show.$fShow(,)4 sat_sCvd];
                      };
              };
          GHC.Types.SumRep b1_sCve [Occ=Once!] ->
              case a_sCuC of {
                GHC.Types.I# x_sCvg [Occ=Once] ->
                    let {
                      p_sCvh [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
                      [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                          sat-only [b1_sCve] \r [x1_sCvi]
                              let {
                                sat_sCvw [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [b1_sCve x1_sCvi] \u []
                                        case b1_sCve of {
                                          [] ->
                                              GHC.CString.unpackAppendCString#
                                                  GHC.Show.showList__4 x1_sCvi;
                                          : x2_sCvk [Occ=Once] xs_sCvl [Occ=Once] ->
                                              let {
                                                sat_sCvv [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [x1_sCvi x2_sCvk xs_sCvl] \u []
                                                        let {
                                                          sat_sCvu [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              [x1_sCvi xs_sCvl] \u []
                                                                  let {
                                                                    lvl45_sCvm [Occ=OnceL]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId, Unf=OtherCon []] =
                                                                        CCCS :! [GHC.Show.showList__2
                                                                                 x1_sCvi]; } in
                                                                  let {
                                                                    showl_sCvn [Occ=LoopBreaker]
                                                                      :: [GHC.Types.RuntimeRep]
                                                                         -> GHC.Base.String
                                                                    [LclId,
                                                                     Arity=1,
                                                                     Str=<S,1*U>,
                                                                     Unf=OtherCon []] =
                                                                        sat-only [lvl45_sCvm
                                                                                  showl_sCvn] \r [ds1_sCvo]
                                                                            case ds1_sCvo of {
                                                                              [] -> lvl45_sCvm;
                                                                              : y_sCvq [Occ=Once]
                                                                                ys_sCvr [Occ=Once] ->
                                                                                  let {
                                                                                    sat_sCvt [Occ=Once]
                                                                                      :: [GHC.Types.Char]
                                                                                    [LclId] =
                                                                                        [showl_sCvn
                                                                                         y_sCvq
                                                                                         ys_sCvr] \u []
                                                                                            let {
                                                                                              sat_sCvs [Occ=Once]
                                                                                                :: GHC.Base.String
                                                                                              [LclId] =
                                                                                                  [showl_sCvn
                                                                                                   ys_sCvr] \u []
                                                                                                      showl_sCvn
                                                                                                          ys_sCvr;
                                                                                            } in 
                                                                                              GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                                                                                  GHC.Show.$fShow(,)1
                                                                                                  y_sCvq
                                                                                                  sat_sCvs;
                                                                                  } in 
                                                                                    : [GHC.Show.showList__1
                                                                                       sat_sCvt];
                                                                            };
                                                                  } in  showl_sCvn xs_sCvl;
                                                        } in 
                                                          GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                                              GHC.Show.$fShow(,)1 x2_sCvk sat_sCvu;
                                              } in  : [GHC.Show.showList__3 sat_sCvv];
                                        };
                              } in  GHC.CString.unpackAppendCString# lvl38_rC18 sat_sCvw;
                    } in 
                      case >=# [x_sCvg 11#] of {
                        __DEFAULT -> p_sCvh eta_sCuE;
                        1# ->
                            let {
                              sat_sCvz [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [eta_sCuE p_sCvh] \u []
                                      let {
                                        sat_sCvy [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [GHC.Show.$fShow(,)2 eta_sCuE];
                                      } in  p_sCvh sat_sCvy;
                            } in  : [GHC.Show.$fShow(,)4 sat_sCvz];
                      };
              };
          GHC.Types.LiftedRep -> GHC.Base.++ lvl37_rC17 eta_sCuE;
          GHC.Types.UnliftedRep -> GHC.Base.++ lvl35_rC15 eta_sCuE;
          GHC.Types.IntRep -> GHC.Base.++ lvl33_rC13 eta_sCuE;
          GHC.Types.WordRep -> GHC.Base.++ lvl31_rC11 eta_sCuE;
          GHC.Types.Int64Rep -> GHC.Base.++ lvl29_rC0Z eta_sCuE;
          GHC.Types.Word64Rep -> GHC.Base.++ lvl27_rC0X eta_sCuE;
          GHC.Types.AddrRep -> GHC.Base.++ lvl25_rC0V eta_sCuE;
          GHC.Types.FloatRep -> GHC.Base.++ lvl23_rC0T eta_sCuE;
          GHC.Types.DoubleRep -> GHC.Base.++ lvl21_rC0R eta_sCuE;
        };

GHC.Show.$fShowRuntimeRep1
  :: GHC.Types.RuntimeRep -> GHC.Show.ShowS
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Show.$fShowRuntimeRep_$cshowsPrec
            GHC.Show.$fShow(,)1 eta_B2 eta_B1;

GHC.Show.$fShowRuntimeRep_$cshowList
  :: [GHC.Types.RuntimeRep] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sCvA s_sCvB]
        GHC.Show.showList__ GHC.Show.$fShowRuntimeRep1 ls_sCvA s_sCvB;

GHC.Show.$fShowRuntimeRep_$cshow
  :: GHC.Types.RuntimeRep -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sCvC]
        GHC.Show.$fShowRuntimeRep_$cshowsPrec
            GHC.Show.$fShow(,)1 x_sCvC GHC.Types.[];

GHC.Show.$fShowRuntimeRep [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.RuntimeRep
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                    GHC.Show.$fShowRuntimeRep_$cshow
                                    GHC.Show.$fShowRuntimeRep_$cshowList];

GHC.Show.$fShowCallStack2
  :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc) -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U(U,U(U,U,U,U(U),U(U),U(U),U(U)))><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sCvD w1_sCvE]
        case w_sCvD of {
          (,) ww1_sCvG [Occ=Once] ww2_sCvH [Occ=Once] ->
              case GHC.Show.$w$s$cshowsPrec ww1_sCvG ww2_sCvH w1_sCvE of {
                (#,#) ww4_sCvJ [Occ=Once] ww5_sCvK [Occ=Once] ->
                    : [ww4_sCvJ ww5_sCvK];
              };
        };

GHC.Show.$fShowCallStack_$cshowsPrec
  :: GHC.Types.Int -> GHC.Stack.Types.CallStack -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,A><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sCvL eta_sCvM]
        let {
          ls_sCvN [Occ=Once] :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
          [LclId] =
              [eta_sCvM] \u [] GHC.Stack.Types.getCallStack eta_sCvM;
        } in  GHC.Show.showList__ GHC.Show.$fShowCallStack2 ls_sCvN;

GHC.Show.$fShowCallStack3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.showList__4;

lvl41_rC1b :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.showList__2 GHC.Types.[]];

GHC.Show.$fShowCallStack_showl [Occ=LoopBreaker]
  :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)] -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>m2, Unf=OtherCon []] =
    [] \r [ds_sCvP]
        case ds_sCvP of {
          [] -> lvl41_rC1b;
          : y_sCvR [Occ=Once!] ys_sCvS [Occ=Once] ->
              let {
                sat_sCw0 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [y_sCvR ys_sCvS] \u []
                        case y_sCvR of {
                          (,) ww1_sCvU [Occ=Once] ww2_sCvV [Occ=Once] ->
                              let {
                                sat_sCvW [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    [ys_sCvS] \u [] GHC.Show.$fShowCallStack_showl ys_sCvS;
                              } in 
                                case GHC.Show.$w$s$cshowsPrec ww1_sCvU ww2_sCvV sat_sCvW of {
                                  (#,#) ww4_sCvY [Occ=Once] ww5_sCvZ [Occ=Once] ->
                                      : [ww4_sCvY ww5_sCvZ];
                                };
                        };
              } in  : [GHC.Show.showList__1 sat_sCw0];
        };

GHC.Show.$fShowCallStack_$cshow
  :: GHC.Stack.Types.CallStack -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sCw1]
        case GHC.Stack.Types.getCallStack x_sCw1 of {
          [] -> GHC.Show.$fShowCallStack3;
          : x1_sCw3 [Occ=Once!] xs_sCw4 [Occ=Once] ->
              let {
                sat_sCwc [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [x1_sCw3 xs_sCw4] \u []
                        case x1_sCw3 of {
                          (,) ww1_sCw6 [Occ=Once] ww2_sCw7 [Occ=Once] ->
                              let {
                                sat_sCw8 [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    [xs_sCw4] \u [] GHC.Show.$fShowCallStack_showl xs_sCw4;
                              } in 
                                case GHC.Show.$w$s$cshowsPrec ww1_sCw6 ww2_sCw7 sat_sCw8 of {
                                  (#,#) ww4_sCwa [Occ=Once] ww5_sCwb [Occ=Once] ->
                                      : [ww4_sCwa ww5_sCwb];
                                };
                        };
              } in  : [GHC.Show.showList__3 sat_sCwc];
        };

GHC.Show.$fShowCallStack1
  :: GHC.Stack.Types.CallStack -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=1, Str=<L,1*U>, Unf=OtherCon []] =
    [] \r [x_sCwd]
        let {
          ls_sCwe [Occ=Once] :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
          [LclId] =
              [x_sCwd] \u [] GHC.Stack.Types.getCallStack x_sCwd;
        } in  GHC.Show.showList__ GHC.Show.$fShowCallStack2 ls_sCwe;

GHC.Show.$fShowCallStack_$cshowList
  :: [GHC.Stack.Types.CallStack] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sCwg s_sCwh]
        GHC.Show.showList__ GHC.Show.$fShowCallStack1 ls_sCwg s_sCwh;

GHC.Show.$fShowCallStack [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Stack.Types.CallStack
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowCallStack_$cshowsPrec
                                    GHC.Show.$fShowCallStack_$cshow
                                    GHC.Show.$fShowCallStack_$cshowList];

GHC.Show.$fShowNonEmpty2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [6#];

GHC.Show.$fShowNonEmpty1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " :| "#;

GHC.Show.$w$cshowsPrec7 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Show.Show a =>
     GHC.Prim.Int# -> a -> [a] -> GHC.Show.ShowS
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(C1(C(U))),A,1*C1(C(U)))><S,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sCwi ww_sCwj ww1_sCwk ww2_sCwl]
        let {
          f12_sCwm [Occ=OnceL*!, Dmd=<L,C(U)>]
            :: GHC.Base.String -> GHC.Base.String
          [LclId] =
              [w_sCwi ww1_sCwk] \u []
                  GHC.Show.showsPrec w_sCwi GHC.Show.$fShowNonEmpty2 ww1_sCwk; } in
        let {
          g_sCwn [Occ=OnceL*!, Dmd=<L,C(U)>]
            :: GHC.Base.String -> GHC.Base.String
          [LclId] =
              [w_sCwi ww2_sCwl] \u [] GHC.Show.showList w_sCwi ww2_sCwl;
        } in 
          case >=# [ww_sCwj 6#] of {
            __DEFAULT ->
                let {
                  sat_sCws [Occ=OnceT[0]] :: GHC.Base.String -> GHC.Base.String
                  [LclId] =
                      [f12_sCwm g_sCwn] \r [x_sCwp]
                          let {
                            sat_sCwr [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [g_sCwn x_sCwp] \u []
                                    let {
                                      sat_sCwq [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [g_sCwn x_sCwp] \u [] g_sCwn x_sCwp;
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          GHC.Show.$fShowNonEmpty1 sat_sCwq;
                          } in  f12_sCwm sat_sCwr;
                } in  sat_sCws;
            1# ->
                let {
                  sat_sCwy [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                  [LclId] =
                      [f12_sCwm g_sCwn] \r [x_sCwt]
                          let {
                            sat_sCwx [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [f12_sCwm g_sCwn x_sCwt] \u []
                                    let {
                                      sat_sCww [Occ=Once] :: GHC.Base.String
                                      [LclId] =
                                          [g_sCwn x_sCwt] \u []
                                              let {
                                                sat_sCwv [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [g_sCwn x_sCwt] \u []
                                                        let {
                                                          sat_sCwu [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2 x_sCwt];
                                                        } in  g_sCwn sat_sCwu;
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    GHC.Show.$fShowNonEmpty1 sat_sCwv;
                                    } in  f12_sCwm sat_sCww;
                          } in  : [GHC.Show.$fShow(,)4 sat_sCwx];
                } in  sat_sCwy;
          };

GHC.Show.$fShowNonEmpty_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Show.Show a =>
     GHC.Types.Int -> GHC.Base.NonEmpty a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(C(U))),A,C(C(U)))><S(S),1*U(U)><S,1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [w_sCwz w1_sCwA w2_sCwB]
        case w1_sCwA of {
          GHC.Types.I# ww1_sCwD [Occ=Once] ->
              case w2_sCwB of {
                GHC.Base.:| ww3_sCwF [Occ=Once] ww4_sCwG [Occ=Once] ->
                    GHC.Show.$w$cshowsPrec7 w_sCwz ww1_sCwD ww3_sCwF ww4_sCwG;
              };
        };

GHC.Show.$w$cshow [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Show.Show a => a -> [a] -> GHC.Base.String
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(C(C(C(S)))LL),U(1*C1(C1(C1(U))),A,1*C1(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sCwH ww_sCwI ww1_sCwJ]
        let {
          sat_sCwL [Occ=Once] :: GHC.Base.String
          [LclId] =
              [w_sCwH ww1_sCwJ] \u []
                  let {
                    sat_sCwK [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [w_sCwH ww1_sCwJ] \u []
                            GHC.Show.showList w_sCwH ww1_sCwJ GHC.Types.[];
                  } in 
                    GHC.CString.unpackAppendCString# GHC.Show.$fShowNonEmpty1 sat_sCwK;
        } in 
          GHC.Show.showsPrec
              w_sCwH GHC.Show.$fShowNonEmpty2 ww_sCwI sat_sCwL;

GHC.Show.$fShowNonEmpty_$cshow [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Show.Show a =>
     GHC.Base.NonEmpty a -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(C(C(C(S)))LL),U(C(C1(C1(U))),A,C(C1(U)))><S,1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [w_sCwM w1_sCwN]
        case w1_sCwN of {
          GHC.Base.:| ww1_sCwP [Occ=Once] ww2_sCwQ [Occ=Once] ->
              GHC.Show.$w$cshow w_sCwM ww1_sCwP ww2_sCwQ;
        };

GHC.Show.$fShowNonEmpty_$cshowList
  :: forall a.
     GHC.Show.Show a =>
     [GHC.Base.NonEmpty a] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(C(U))),A,C(C(U)))><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCwR ls_sCwS s_sCwT]
        let {
          sat_sCwY [Occ=Once] :: GHC.Base.NonEmpty a_aztY -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCwR] \r [w_sCwU]
                  case w_sCwU of {
                    GHC.Base.:| ww1_sCwW [Occ=Once] ww2_sCwX [Occ=Once] ->
                        GHC.Show.$w$cshowsPrec7 $dShow_sCwR 0# ww1_sCwW ww2_sCwX;
                  };
        } in  GHC.Show.showList__ sat_sCwY ls_sCwS s_sCwT;

GHC.Show.$fShowNonEmpty [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show a => GHC.Show.Show (GHC.Base.NonEmpty a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(C(U))),A,C(C(U)))>m] =
    [] \r [$dShow_sCwZ]
        let {
          sat_sCx2 [Occ=Once] :: [GHC.Base.NonEmpty a_aztY] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCwZ] \r [eta_B2 eta_B1]
                  GHC.Show.$fShowNonEmpty_$cshowList $dShow_sCwZ eta_B2 eta_B1; } in
        let {
          sat_sCx1 [Occ=Once] :: GHC.Base.NonEmpty a_aztY -> GHC.Base.String
          [LclId] =
              [$dShow_sCwZ] \r [eta_B1]
                  GHC.Show.$fShowNonEmpty_$cshow $dShow_sCwZ eta_B1; } in
        let {
          sat_sCx0 [Occ=Once]
            :: GHC.Types.Int -> GHC.Base.NonEmpty a_aztY -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCwZ] \r [eta_B2 eta_B1]
                  GHC.Show.$fShowNonEmpty_$cshowsPrec $dShow_sCwZ eta_B2 eta_B1;
        } in  GHC.Show.C:Show [sat_sCx0 sat_sCx1 sat_sCx2];

GHC.Show.$fShowMaybe5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Nothing"#;

GHC.Show.$fShowMaybe4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowMaybe5;

GHC.Show.$fShowMaybe3 :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.++ GHC.Show.$fShowMaybe4 eta_B1;

GHC.Show.$fShowMaybe2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Just "#;

GHC.Show.$fShowMaybe1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowMaybe2;

GHC.Show.$fShowMaybe_$cshowsPrec
  :: forall a.
     GHC.Show.Show a =>
     GHC.Types.Int -> GHC.Base.Maybe a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCx3 ds_sCx4 ds1_sCx5]
        case ds1_sCx5 of {
          GHC.Base.Nothing -> GHC.Show.$fShowMaybe3;
          GHC.Base.Just b1_sCx7 [Occ=Once] ->
              case ds_sCx4 of {
                GHC.Types.I# x_sCx9 [Occ=Once] ->
                    let {
                      g_sCxa [Occ=OnceL*!, Dmd=<L,C(U)>]
                        :: GHC.Base.String -> GHC.Base.String
                      [LclId] =
                          [$dShow_sCx3 b1_sCx7] \u []
                              GHC.Show.showsPrec $dShow_sCx3 GHC.Show.appPrec1 b1_sCx7;
                    } in 
                      case >=# [x_sCx9 11#] of {
                        __DEFAULT ->
                            let {
                              sat_sCxe [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_sCxa] \r [x1_sCxc]
                                      let {
                                        sat_sCxd [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_sCxa x1_sCxc] \s [] g_sCxa x1_sCxc;
                                      } in  GHC.Base.++ GHC.Show.$fShowMaybe1 sat_sCxd;
                            } in  sat_sCxe;
                        1# ->
                            let {
                              sat_sCxj [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_sCxa] \r [x1_sCxf]
                                      let {
                                        sat_sCxi [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_sCxa x1_sCxf] \u []
                                                let {
                                                  sat_sCxh [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [g_sCxa x1_sCxf] \s []
                                                          let {
                                                            sat_sCxg [Occ=Once] :: GHC.Base.String
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)2
                                                                         x1_sCxf];
                                                          } in  g_sCxa sat_sCxg;
                                                } in  GHC.Base.++ GHC.Show.$fShowMaybe1 sat_sCxh;
                                      } in  : [GHC.Show.$fShow(,)4 sat_sCxi];
                            } in  sat_sCxj;
                      };
              };
        };

GHC.Show.$fShowMaybe_$cshow
  :: forall a. GHC.Show.Show a => GHC.Base.Maybe a -> GHC.Base.String
[GblId,
 Arity=2,
 Str=<L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCxk x_sCxl]
        case x_sCxl of {
          GHC.Base.Nothing -> GHC.Show.$fShowMaybe4;
          GHC.Base.Just b1_sCxn [Occ=Once] ->
              let {
                sat_sCxo [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sCxk b1_sCxn] \s []
                        GHC.Show.showsPrec
                            $dShow_sCxk GHC.Show.appPrec1 b1_sCxn GHC.Types.[];
              } in  GHC.Base.++ GHC.Show.$fShowMaybe1 sat_sCxo;
        };

GHC.Show.$fShowMaybe_$cshowList
  :: forall a.
     GHC.Show.Show a =>
     [GHC.Base.Maybe a] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCxp ls_sCxq s_sCxr]
        let {
          sat_sCxs [Occ=Once] :: GHC.Base.Maybe a_azus -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCxp] \r [eta_B1]
                  GHC.Show.$fShowMaybe_$cshowsPrec
                      $dShow_sCxp GHC.Show.$fShow(,)1 eta_B1;
        } in  GHC.Show.showList__ sat_sCxs ls_sCxq s_sCxr;

GHC.Show.$fShowMaybe [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show a => GHC.Show.Show (GHC.Base.Maybe a)
[GblId[DFunId], Arity=1, Str=<L,U(C(C1(C(U))),A,A)>m] =
    [] \r [$dShow_sCxt]
        let {
          sat_sCxw [Occ=Once] :: [GHC.Base.Maybe a_azus] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCxt] \r [eta_B2 eta_B1]
                  GHC.Show.$fShowMaybe_$cshowList $dShow_sCxt eta_B2 eta_B1; } in
        let {
          sat_sCxv [Occ=Once] :: GHC.Base.Maybe a_azus -> GHC.Base.String
          [LclId] =
              [$dShow_sCxt] \r [eta_B1]
                  GHC.Show.$fShowMaybe_$cshow $dShow_sCxt eta_B1; } in
        let {
          sat_sCxu [Occ=Once]
            :: GHC.Types.Int -> GHC.Base.Maybe a_azus -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCxt] \r [eta_B2 eta_B1]
                  GHC.Show.$fShowMaybe_$cshowsPrec $dShow_sCxt eta_B2 eta_B1;
        } in  GHC.Show.C:Show [sat_sCxu sat_sCxv sat_sCxw];

f_rC1c :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepTypeLitD "#;

f1_rC1d :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f_rC1c;

f2_rC1e :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepTypeLitS "#;

f3_rC1f :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f2_rC1e;

f4_rC1g :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepTYPE "#;

f5_rC1h :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f4_rC1g;

f6_rC1i :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepFun "#;

f7_rC1j :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f6_rC1i;

f8_rC1k :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepApp "#;

f9_rC1l :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f8_rC1k;

f10_rC1m :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepVar "#;

f11_rC1n :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f10_rC1m;

lvl42_rC1o :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " "#;

lvl43_rC1p :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepTyConApp "#;

GHC.Show.$w$cshowsPrec5 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> GHC.Types.KindRep -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_sCxx w_sCxy]
        case w_sCxy of {
          GHC.Types.KindRepTyConApp p_sCxA [Occ=Once!] q_sCxB [Occ=OnceL!] ->
              let {
                f12_sCxC [Occ=OnceL!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [p_sCxA] \u []
                        case p_sCxA of {
                          GHC.Types.TyCon _ [Occ=Dead]
                                          _ [Occ=Dead]
                                          _ [Occ=Dead]
                                          tc_name_sCxH [Occ=Once!]
                                          _ [Occ=Dead]
                                          _ [Occ=Dead] ->
                              case tc_name_sCxH of {
                                GHC.Types.TrNameS s_sCxL [Occ=Once] ->
                                    let {
                                      sat_sCxM [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [s_sCxL] \u [] GHC.CString.unpackCString# s_sCxL;
                                    } in  GHC.Base.++ sat_sCxM;
                                GHC.Types.TrNameD s_sCxN [Occ=Once] -> GHC.Base.++ s_sCxN;
                              };
                        }; } in
              let {
                p1_sCxO [Occ=OnceL*] :: GHC.Show.ShowS
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    [q_sCxB f12_sCxC] \r [x_sCxP]
                        let {
                          sat_sCy5 [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [q_sCxB f12_sCxC x_sCxP] \u []
                                  let {
                                    sat_sCy4 [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        [q_sCxB x_sCxP] \u []
                                            let {
                                              sat_sCy3 [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  [q_sCxB x_sCxP] \u []
                                                      case q_sCxB of {
                                                        [] ->
                                                            GHC.CString.unpackAppendCString#
                                                                GHC.Show.showList__4 x_sCxP;
                                                        : x1_sCxR [Occ=Once] xs_sCxS [Occ=Once] ->
                                                            let {
                                                              sat_sCy2 [Occ=Once]
                                                                :: [GHC.Types.Char]
                                                              [LclId] =
                                                                  [x_sCxP x1_sCxR xs_sCxS] \u []
                                                                      let {
                                                                        sat_sCy1 [Occ=Once]
                                                                          :: GHC.Base.String
                                                                        [LclId] =
                                                                            [x_sCxP xs_sCxS] \u []
                                                                                let {
                                                                                  lvl45_sCxT [Occ=OnceL]
                                                                                    :: [GHC.Types.Char]
                                                                                  [LclId,
                                                                                   Unf=OtherCon []] =
                                                                                      CCCS :! [GHC.Show.showList__2
                                                                                               x_sCxP]; } in
                                                                                let {
                                                                                  showl_sCxU [Occ=LoopBreaker]
                                                                                    :: [GHC.Types.KindRep]
                                                                                       -> GHC.Base.String
                                                                                  [LclId,
                                                                                   Arity=1,
                                                                                   Str=<S,1*U>,
                                                                                   Unf=OtherCon []] =
                                                                                      sat-only [lvl45_sCxT
                                                                                                showl_sCxU] \r [ds_sCxV]
                                                                                          case
                                                                                              ds_sCxV
                                                                                          of
                                                                                          { [] ->
                                                                                                lvl45_sCxT;
                                                                                            : y_sCxX [Occ=Once]
                                                                                              ys_sCxY [Occ=Once] ->
                                                                                                let {
                                                                                                  sat_sCy0 [Occ=Once]
                                                                                                    :: [GHC.Types.Char]
                                                                                                  [LclId] =
                                                                                                      [showl_sCxU
                                                                                                       y_sCxX
                                                                                                       ys_sCxY] \u []
                                                                                                          let {
                                                                                                            sat_sCxZ [Occ=Once]
                                                                                                              :: GHC.Base.String
                                                                                                            [LclId] =
                                                                                                                [showl_sCxU
                                                                                                                 ys_sCxY] \u []
                                                                                                                    showl_sCxU
                                                                                                                        ys_sCxY;
                                                                                                          } in 
                                                                                                            GHC.Show.$w$cshowsPrec5
                                                                                                                0#
                                                                                                                y_sCxX
                                                                                                                sat_sCxZ;
                                                                                                } in 
                                                                                                  : [GHC.Show.showList__1
                                                                                                     sat_sCy0];
                                                                                          };
                                                                                } in 
                                                                                  showl_sCxU
                                                                                      xs_sCxS;
                                                                      } in 
                                                                        GHC.Show.$w$cshowsPrec5
                                                                            0# x1_sCxR sat_sCy1;
                                                            } in  : [GHC.Show.showList__3 sat_sCy2];
                                                      };
                                            } in 
                                              GHC.CString.unpackAppendCString# lvl42_rC1o sat_sCy3;
                                  } in  f12_sCxC sat_sCy4;
                        } in  GHC.CString.unpackAppendCString# lvl43_rC1p sat_sCy5;
              } in 
                case ># [ww_sCxx 10#] of {
                  __DEFAULT -> p1_sCxO;
                  1# ->
                      let {
                        sat_sCya [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [p1_sCxO] \r [x_sCy7]
                                let {
                                  sat_sCy9 [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [p1_sCxO x_sCy7] \u []
                                          let {
                                            sat_sCy8 [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                CCCS :! [GHC.Show.$fShow(,)2 x_sCy7];
                                          } in  p1_sCxO sat_sCy8;
                                } in  : [GHC.Show.$fShow(,)4 sat_sCy9];
                      } in  sat_sCya;
                };
          GHC.Types.KindRepVar dt_sCyb ->
              case ># [ww_sCxx 10#] of {
                __DEFAULT ->
                    let {
                      sat_sCyo [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [dt_sCyb] \r [x_sCyd]
                              let {
                                sat_sCyn [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                [LclId] =
                                    [dt_sCyb x_sCyd] \s []
                                        case <# [dt_sCyb 0#] of {
                                          __DEFAULT ->
                                              case GHC.Show.$witos dt_sCyb x_sCyd of {
                                                (#,#) ww2_sCyg [Occ=Once] ww3_sCyh [Occ=Once] ->
                                                    : [ww2_sCyg ww3_sCyh];
                                              };
                                          1# ->
                                              let {
                                                sat_sCym [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [dt_sCyb x_sCyd] \u []
                                                        let {
                                                          sat_sCyi [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2 x_sCyd];
                                                        } in 
                                                          case GHC.Show.$witos dt_sCyb sat_sCyi of {
                                                            (#,#) ww2_sCyk [Occ=Once]
                                                                  ww3_sCyl [Occ=Once] ->
                                                                : [ww2_sCyk ww3_sCyl];
                                                          };
                                              } in  : [GHC.Show.$fShow(,)4 sat_sCym];
                                        };
                              } in  GHC.Base.++ f11_rC1n sat_sCyn;
                    } in  sat_sCyo;
                1# ->
                    let {
                      sat_sCyD [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [dt_sCyb] \r [x_sCyp]
                              let {
                                sat_sCyC [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [dt_sCyb x_sCyp] \u []
                                        let {
                                          sat_sCyB [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                          [LclId] =
                                              [dt_sCyb x_sCyp] \s []
                                                  case <# [dt_sCyb 0#] of {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_sCyr [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2 x_sCyp];
                                                        } in 
                                                          case GHC.Show.$witos dt_sCyb sat_sCyr of {
                                                            (#,#) ww2_sCyt [Occ=Once]
                                                                  ww3_sCyu [Occ=Once] ->
                                                                : [ww2_sCyt ww3_sCyu];
                                                          };
                                                    1# ->
                                                        let {
                                                          sat_sCyA [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [dt_sCyb x_sCyp] \u []
                                                                  let {
                                                                    sat_sCyv [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)2
                                                                                 x_sCyp]; } in
                                                                  let {
                                                                    sat_sCyw [Occ=Once]
                                                                      :: GHC.Base.String
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)2
                                                                                 sat_sCyv];
                                                                  } in 
                                                                    case
                                                                        GHC.Show.$witos
                                                                            dt_sCyb sat_sCyw
                                                                    of
                                                                    { (#,#) ww2_sCyy [Occ=Once]
                                                                            ww3_sCyz [Occ=Once] ->
                                                                          : [ww2_sCyy ww3_sCyz];
                                                                    };
                                                        } in  : [GHC.Show.$fShow(,)4 sat_sCyA];
                                                  };
                                        } in  GHC.Base.++ f11_rC1n sat_sCyB;
                              } in  : [GHC.Show.$fShow(,)4 sat_sCyC];
                    } in  sat_sCyD;
              };
          GHC.Types.KindRepApp p_sCyE [Occ=Once] q_sCyF [Occ=Once] ->
              let {
                f12_sCyG [Occ=OnceL*!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [p_sCyE] \u [] GHC.Show.$w$cshowsPrec5 11# p_sCyE; } in
              let {
                g_sCyH [Occ=OnceL*!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [q_sCyF] \u [] GHC.Show.$w$cshowsPrec5 11# q_sCyF;
              } in 
                case ># [ww_sCxx 10#] of {
                  __DEFAULT ->
                      let {
                        sat_sCyN [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [f12_sCyG g_sCyH] \r [x_sCyJ]
                                let {
                                  sat_sCyM [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [f12_sCyG g_sCyH x_sCyJ] \s []
                                          let {
                                            sat_sCyL [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                [g_sCyH x_sCyJ] \u []
                                                    let {
                                                      sat_sCyK [Occ=Once] :: [GHC.Types.Char]
                                                      [LclId] =
                                                          [g_sCyH x_sCyJ] \u [] g_sCyH x_sCyJ;
                                                    } in 
                                                      GHC.CString.unpackAppendCString#
                                                          lvl42_rC1o sat_sCyK;
                                          } in  f12_sCyG sat_sCyL;
                                } in  GHC.Base.++ f9_rC1l sat_sCyM;
                      } in  sat_sCyN;
                  1# ->
                      let {
                        sat_sCyU [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [f12_sCyG g_sCyH] \r [x_sCyO]
                                let {
                                  sat_sCyT [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [f12_sCyG g_sCyH x_sCyO] \u []
                                          let {
                                            sat_sCyS [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                            [LclId] =
                                                [f12_sCyG g_sCyH x_sCyO] \s []
                                                    let {
                                                      sat_sCyR [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [g_sCyH x_sCyO] \u []
                                                              let {
                                                                sat_sCyQ [Occ=Once]
                                                                  :: [GHC.Types.Char]
                                                                [LclId] =
                                                                    [g_sCyH x_sCyO] \u []
                                                                        let {
                                                                          sat_sCyP [Occ=Once]
                                                                            :: GHC.Base.String
                                                                          [LclId] =
                                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                                       x_sCyO];
                                                                        } in  g_sCyH sat_sCyP;
                                                              } in 
                                                                GHC.CString.unpackAppendCString#
                                                                    lvl42_rC1o sat_sCyQ;
                                                    } in  f12_sCyG sat_sCyR;
                                          } in  GHC.Base.++ f9_rC1l sat_sCyS;
                                } in  : [GHC.Show.$fShow(,)4 sat_sCyT];
                      } in  sat_sCyU;
                };
          GHC.Types.KindRepFun p_sCyV [Occ=Once] q_sCyW [Occ=Once] ->
              let {
                f12_sCyX [Occ=OnceL*!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [p_sCyV] \u [] GHC.Show.$w$cshowsPrec5 11# p_sCyV; } in
              let {
                g_sCyY [Occ=OnceL*!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [q_sCyW] \u [] GHC.Show.$w$cshowsPrec5 11# q_sCyW;
              } in 
                case ># [ww_sCxx 10#] of {
                  __DEFAULT ->
                      let {
                        sat_sCz4 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [f12_sCyX g_sCyY] \r [x_sCz0]
                                let {
                                  sat_sCz3 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [f12_sCyX g_sCyY x_sCz0] \s []
                                          let {
                                            sat_sCz2 [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                [g_sCyY x_sCz0] \u []
                                                    let {
                                                      sat_sCz1 [Occ=Once] :: [GHC.Types.Char]
                                                      [LclId] =
                                                          [g_sCyY x_sCz0] \u [] g_sCyY x_sCz0;
                                                    } in 
                                                      GHC.CString.unpackAppendCString#
                                                          lvl42_rC1o sat_sCz1;
                                          } in  f12_sCyX sat_sCz2;
                                } in  GHC.Base.++ f7_rC1j sat_sCz3;
                      } in  sat_sCz4;
                  1# ->
                      let {
                        sat_sCzb [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [f12_sCyX g_sCyY] \r [x_sCz5]
                                let {
                                  sat_sCza [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [f12_sCyX g_sCyY x_sCz5] \u []
                                          let {
                                            sat_sCz9 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                            [LclId] =
                                                [f12_sCyX g_sCyY x_sCz5] \s []
                                                    let {
                                                      sat_sCz8 [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [g_sCyY x_sCz5] \u []
                                                              let {
                                                                sat_sCz7 [Occ=Once]
                                                                  :: [GHC.Types.Char]
                                                                [LclId] =
                                                                    [g_sCyY x_sCz5] \u []
                                                                        let {
                                                                          sat_sCz6 [Occ=Once]
                                                                            :: GHC.Base.String
                                                                          [LclId] =
                                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                                       x_sCz5];
                                                                        } in  g_sCyY sat_sCz6;
                                                              } in 
                                                                GHC.CString.unpackAppendCString#
                                                                    lvl42_rC1o sat_sCz7;
                                                    } in  f12_sCyX sat_sCz8;
                                          } in  GHC.Base.++ f7_rC1j sat_sCz9;
                                } in  : [GHC.Show.$fShow(,)4 sat_sCza];
                      } in  sat_sCzb;
                };
          GHC.Types.KindRepTYPE rep_sCzc [Occ=OnceL*] ->
              case ># [ww_sCxx 10#] of {
                __DEFAULT ->
                    let {
                      sat_sCzg [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [rep_sCzc] \r [x_sCze]
                              let {
                                sat_sCzf [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                [LclId] =
                                    [rep_sCzc x_sCze] \s []
                                        GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                            GHC.Show.appPrec1 rep_sCzc x_sCze;
                              } in  GHC.Base.++ f5_rC1h sat_sCzf;
                    } in  sat_sCzg;
                1# ->
                    let {
                      sat_sCzl [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [rep_sCzc] \r [x_sCzh]
                              let {
                                sat_sCzk [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [rep_sCzc x_sCzh] \u []
                                        let {
                                          sat_sCzj [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                          [LclId] =
                                              [rep_sCzc x_sCzh] \s []
                                                  let {
                                                    sat_sCzi [Occ=Once] :: GHC.Base.String
                                                    [LclId] =
                                                        CCCS :! [GHC.Show.$fShow(,)2 x_sCzh];
                                                  } in 
                                                    GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                                        GHC.Show.appPrec1 rep_sCzc sat_sCzi;
                                        } in  GHC.Base.++ f5_rC1h sat_sCzj;
                              } in  : [GHC.Show.$fShow(,)4 sat_sCzk];
                    } in  sat_sCzl;
              };
          GHC.Types.KindRepTypeLitS p_sCzm [Occ=OnceL*!]
                                    q_sCzn [Occ=OnceL] ->
              let {
                cs_sCzo [Occ=OnceL*] :: [GHC.Types.Char]
                [LclId] =
                    [q_sCzn] \u [] GHC.CString.unpackCString# q_sCzn;
              } in 
                case ># [ww_sCxx 10#] of {
                  __DEFAULT ->
                      let {
                        sat_sCzB [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [p_sCzm cs_sCzo] \r [x_sCzq]
                                let {
                                  sat_sCzA [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [p_sCzm cs_sCzo x_sCzq] \s []
                                          case p_sCzm of {
                                            GHC.Types.TypeLitSymbol ->
                                                let {
                                                  sat_sCzv [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [cs_sCzo x_sCzq] \s []
                                                          let {
                                                            sat_sCzt [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [cs_sCzo x_sCzq] \u []
                                                                    let {
                                                                      sat_sCzs [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   x_sCzq];
                                                                    } in 
                                                                      GHC.Show.showLitString
                                                                          cs_sCzo sat_sCzs; } in
                                                          let {
                                                            sat_sCzu [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)3
                                                                         sat_sCzt];
                                                          } in 
                                                            GHC.CString.unpackAppendCString#
                                                                lvl42_rC1o sat_sCzu;
                                                } in 
                                                  GHC.Base.++ GHC.Show.$fShowTypeLitSort4 sat_sCzv;
                                            GHC.Types.TypeLitNat ->
                                                let {
                                                  sat_sCzz [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [cs_sCzo x_sCzq] \s []
                                                          let {
                                                            sat_sCzx [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [cs_sCzo x_sCzq] \u []
                                                                    let {
                                                                      sat_sCzw [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   x_sCzq];
                                                                    } in 
                                                                      GHC.Show.showLitString
                                                                          cs_sCzo sat_sCzw; } in
                                                          let {
                                                            sat_sCzy [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)3
                                                                         sat_sCzx];
                                                          } in 
                                                            GHC.CString.unpackAppendCString#
                                                                lvl42_rC1o sat_sCzy;
                                                } in 
                                                  GHC.Base.++ GHC.Show.$fShowTypeLitSort2 sat_sCzz;
                                          };
                                } in  GHC.Base.++ f3_rC1f sat_sCzA;
                      } in  sat_sCzB;
                  1# ->
                      let {
                        sat_sCzQ [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [p_sCzm cs_sCzo] \r [x_sCzC]
                                let {
                                  sat_sCzP [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [p_sCzm cs_sCzo x_sCzC] \u []
                                          let {
                                            sat_sCzO [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                            [LclId] =
                                                [p_sCzm cs_sCzo x_sCzC] \s []
                                                    case p_sCzm of {
                                                      GHC.Types.TypeLitSymbol ->
                                                          let {
                                                            sat_sCzI [Occ=Once, Dmd=<L,1*U>]
                                                              :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [cs_sCzo x_sCzC] \s []
                                                                    let {
                                                                      sat_sCzG [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          [cs_sCzo x_sCzC] \u []
                                                                              let {
                                                                                sat_sCzE [Occ=Once]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    CCCS :! [GHC.Show.$fShow(,)2
                                                                                             x_sCzC]; } in
                                                                              let {
                                                                                sat_sCzF [Occ=Once]
                                                                                  :: GHC.Base.String
                                                                                [LclId] =
                                                                                    CCCS :! [GHC.Show.$fShow(,)3
                                                                                             sat_sCzE];
                                                                              } in 
                                                                                GHC.Show.showLitString
                                                                                    cs_sCzo
                                                                                    sat_sCzF; } in
                                                                    let {
                                                                      sat_sCzH [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   sat_sCzG];
                                                                    } in 
                                                                      GHC.CString.unpackAppendCString#
                                                                          lvl42_rC1o sat_sCzH;
                                                          } in 
                                                            GHC.Base.++
                                                                GHC.Show.$fShowTypeLitSort4
                                                                sat_sCzI;
                                                      GHC.Types.TypeLitNat ->
                                                          let {
                                                            sat_sCzN [Occ=Once, Dmd=<L,1*U>]
                                                              :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [cs_sCzo x_sCzC] \s []
                                                                    let {
                                                                      sat_sCzL [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          [cs_sCzo x_sCzC] \u []
                                                                              let {
                                                                                sat_sCzJ [Occ=Once]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    CCCS :! [GHC.Show.$fShow(,)2
                                                                                             x_sCzC]; } in
                                                                              let {
                                                                                sat_sCzK [Occ=Once]
                                                                                  :: GHC.Base.String
                                                                                [LclId] =
                                                                                    CCCS :! [GHC.Show.$fShow(,)3
                                                                                             sat_sCzJ];
                                                                              } in 
                                                                                GHC.Show.showLitString
                                                                                    cs_sCzo
                                                                                    sat_sCzK; } in
                                                                    let {
                                                                      sat_sCzM [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   sat_sCzL];
                                                                    } in 
                                                                      GHC.CString.unpackAppendCString#
                                                                          lvl42_rC1o sat_sCzM;
                                                          } in 
                                                            GHC.Base.++
                                                                GHC.Show.$fShowTypeLitSort2
                                                                sat_sCzN;
                                                    };
                                          } in  GHC.Base.++ f3_rC1f sat_sCzO;
                                } in  : [GHC.Show.$fShow(,)4 sat_sCzP];
                      } in  sat_sCzQ;
                };
          GHC.Types.KindRepTypeLitD p_sCzR [Occ=OnceL*!]
                                    q_sCzS [Occ=OnceL*] ->
              case ># [ww_sCxx 10#] of {
                __DEFAULT ->
                    let {
                      sat_sCA5 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [p_sCzR q_sCzS] \r [x_sCzU]
                              let {
                                sat_sCA4 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                [LclId] =
                                    [p_sCzR q_sCzS x_sCzU] \s []
                                        case p_sCzR of {
                                          GHC.Types.TypeLitSymbol ->
                                              let {
                                                sat_sCzZ [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [q_sCzS x_sCzU] \s []
                                                        let {
                                                          sat_sCzX [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [q_sCzS x_sCzU] \u []
                                                                  let {
                                                                    sat_sCzW [Occ=Once]
                                                                      :: GHC.Base.String
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                 x_sCzU];
                                                                  } in 
                                                                    GHC.Show.showLitString
                                                                        q_sCzS sat_sCzW; } in
                                                        let {
                                                          sat_sCzY [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_sCzX];
                                                        } in 
                                                          GHC.CString.unpackAppendCString#
                                                              lvl42_rC1o sat_sCzY;
                                              } in 
                                                GHC.Base.++ GHC.Show.$fShowTypeLitSort4 sat_sCzZ;
                                          GHC.Types.TypeLitNat ->
                                              let {
                                                sat_sCA3 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [q_sCzS x_sCzU] \s []
                                                        let {
                                                          sat_sCA1 [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [q_sCzS x_sCzU] \u []
                                                                  let {
                                                                    sat_sCA0 [Occ=Once]
                                                                      :: GHC.Base.String
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                 x_sCzU];
                                                                  } in 
                                                                    GHC.Show.showLitString
                                                                        q_sCzS sat_sCA0; } in
                                                        let {
                                                          sat_sCA2 [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_sCA1];
                                                        } in 
                                                          GHC.CString.unpackAppendCString#
                                                              lvl42_rC1o sat_sCA2;
                                              } in 
                                                GHC.Base.++ GHC.Show.$fShowTypeLitSort2 sat_sCA3;
                                        };
                              } in  GHC.Base.++ f1_rC1d sat_sCA4;
                    } in  sat_sCA5;
                1# ->
                    let {
                      sat_sCAk [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [p_sCzR q_sCzS] \r [x_sCA6]
                              let {
                                sat_sCAj [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [p_sCzR q_sCzS x_sCA6] \u []
                                        let {
                                          sat_sCAi [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                          [LclId] =
                                              [p_sCzR q_sCzS x_sCA6] \s []
                                                  case p_sCzR of {
                                                    GHC.Types.TypeLitSymbol ->
                                                        let {
                                                          sat_sCAc [Occ=Once, Dmd=<L,1*U>]
                                                            :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [q_sCzS x_sCA6] \s []
                                                                  let {
                                                                    sat_sCAa [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        [q_sCzS x_sCA6] \u []
                                                                            let {
                                                                              sat_sCA8 [Occ=Once]
                                                                                :: [GHC.Types.Char]
                                                                              [LclId] =
                                                                                  CCCS :! [GHC.Show.$fShow(,)2
                                                                                           x_sCA6]; } in
                                                                            let {
                                                                              sat_sCA9 [Occ=Once]
                                                                                :: GHC.Base.String
                                                                              [LclId] =
                                                                                  CCCS :! [GHC.Show.$fShow(,)3
                                                                                           sat_sCA8];
                                                                            } in 
                                                                              GHC.Show.showLitString
                                                                                  q_sCzS
                                                                                  sat_sCA9; } in
                                                                  let {
                                                                    sat_sCAb [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                 sat_sCAa];
                                                                  } in 
                                                                    GHC.CString.unpackAppendCString#
                                                                        lvl42_rC1o sat_sCAb;
                                                        } in 
                                                          GHC.Base.++
                                                              GHC.Show.$fShowTypeLitSort4 sat_sCAc;
                                                    GHC.Types.TypeLitNat ->
                                                        let {
                                                          sat_sCAh [Occ=Once, Dmd=<L,1*U>]
                                                            :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [q_sCzS x_sCA6] \s []
                                                                  let {
                                                                    sat_sCAf [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        [q_sCzS x_sCA6] \u []
                                                                            let {
                                                                              sat_sCAd [Occ=Once]
                                                                                :: [GHC.Types.Char]
                                                                              [LclId] =
                                                                                  CCCS :! [GHC.Show.$fShow(,)2
                                                                                           x_sCA6]; } in
                                                                            let {
                                                                              sat_sCAe [Occ=Once]
                                                                                :: GHC.Base.String
                                                                              [LclId] =
                                                                                  CCCS :! [GHC.Show.$fShow(,)3
                                                                                           sat_sCAd];
                                                                            } in 
                                                                              GHC.Show.showLitString
                                                                                  q_sCzS
                                                                                  sat_sCAe; } in
                                                                  let {
                                                                    sat_sCAg [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                 sat_sCAf];
                                                                  } in 
                                                                    GHC.CString.unpackAppendCString#
                                                                        lvl42_rC1o sat_sCAg;
                                                        } in 
                                                          GHC.Base.++
                                                              GHC.Show.$fShowTypeLitSort2 sat_sCAh;
                                                  };
                                        } in  GHC.Base.++ f1_rC1d sat_sCAi;
                              } in  : [GHC.Show.$fShow(,)4 sat_sCAj];
                    } in  sat_sCAk;
              };
        };

GHC.Show.$fShowKindRep_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.KindRep -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S(S),1*U(U)><S,1*U>, Unf=OtherCon []] =
    [] \r [w_sCAl w1_sCAm]
        case w_sCAl of {
          GHC.Types.I# ww1_sCAo [Occ=Once] ->
              GHC.Show.$w$cshowsPrec5 ww1_sCAo w1_sCAm;
        };

GHC.Show.$fShowKindRep1 :: GHC.Types.KindRep -> GHC.Show.ShowS
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_sCAp] GHC.Show.$w$cshowsPrec5 0# w_sCAp;

GHC.Show.$fShowKindRep_$cshowList
  :: [GHC.Types.KindRep] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sCAq s_sCAr]
        GHC.Show.showList__ GHC.Show.$fShowKindRep1 ls_sCAq s_sCAr;

GHC.Show.$fShowKindRep_$cshow
  :: GHC.Types.KindRep -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sCAs] GHC.Show.$w$cshowsPrec5 0# x_sCAs GHC.Types.[];

GHC.Show.$fShowKindRep [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.KindRep
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowKindRep_$cshowsPrec
                                    GHC.Show.$fShowKindRep_$cshow
                                    GHC.Show.$fShowKindRep_$cshowList];

lvl44_rC1q :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Char.intToDigit: not a digit "#;

GHC.Show.intToDigit1 :: GHC.Prim.Int# -> GHC.Types.Char
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [i_sCAt]
        let {
          sat_sCAx [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [i_sCAt] \u []
                  case GHC.Show.$witos i_sCAt GHC.Types.[] of {
                    (#,#) ww1_sCAv [Occ=Once] ww2_sCAw [Occ=Once] ->
                        : [ww1_sCAv ww2_sCAw];
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl44_rC1q sat_sCAx
          of
          sat_sCAy
          { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sCAy;
          };

GHC.Show.$wintToDigit [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_sCAz]
        let-no-escape {
          $j_sCAA [Occ=Once*T[0], Dmd=<L,1*U>] :: GHC.Prim.Char#
          [LclId[JoinId(0)], Unf=OtherCon []] =
              [ww_sCAz] \r []
                  case >=# [ww_sCAz 10#] of {
                    __DEFAULT -> GHC.Show.intToDigit1 ww_sCAz;
                    1# ->
                        case <=# [ww_sCAz 15#] of {
                          __DEFAULT -> GHC.Show.intToDigit1 ww_sCAz;
                          1# ->
                              case +# [97# ww_sCAz] of sat_sCAF {
                                __DEFAULT ->
                                    case -# [sat_sCAF 10#] of sat_sCAG {
                                      __DEFAULT -> chr# [sat_sCAG];
                                    };
                              };
                        };
                  };
        } in 
          case >=# [ww_sCAz 0#] of {
            __DEFAULT -> $j_sCAA;
            1# ->
                case <=# [ww_sCAz 9#] of {
                  __DEFAULT -> $j_sCAA;
                  1# ->
                      case +# [48# ww_sCAz] of sat_sCAJ {
                        __DEFAULT -> chr# [sat_sCAJ];
                      };
                };
          };

GHC.Show.intToDigit [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Char
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_sCAK]
        case w_sCAK of {
          GHC.Types.I# ww1_sCAM [Occ=Once] ->
              case GHC.Show.$wintToDigit ww1_sCAM of ww2_sCAN {
                __DEFAULT -> GHC.Types.C# [ww2_sCAN];
              };
        };

GHC.Show.$wjblock' [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sCAO ww1_sCAP w_sCAQ]
        case ww_sCAO of wild_sCAR {
          __DEFAULT ->
              case quotRemInt# [ww1_sCAP 10#] of {
                (#,#) ipv_sCAT [Occ=Once] ipv1_sCAU [Occ=Once] ->
                    case +# [48# ipv1_sCAU] of sat_sCAW {
                      __DEFAULT ->
                          case chr# [sat_sCAW] of sat_sCAX {
                            __DEFAULT ->
                                let {
                                  sat_sCAY [Occ=Once] :: GHC.Types.Char
                                  [LclId] =
                                      CCCS GHC.Types.C#! [sat_sCAX]; } in
                                let {
                                  sat_sCAZ [Occ=Once] :: GHC.Base.String
                                  [LclId] =
                                      CCCS :! [sat_sCAY w_sCAQ];
                                } in 
                                  case -# [wild_sCAR 1#] of sat_sCAV {
                                    __DEFAULT -> GHC.Show.$wjblock' sat_sCAV ipv_sCAT sat_sCAZ;
                                  };
                          };
                    };
              };
          1# ->
              case +# [48# ww1_sCAP] of sat_sCB0 {
                __DEFAULT ->
                    case chr# [sat_sCB0] of sat_sCB1 {
                      __DEFAULT ->
                          let {
                            sat_sCB2 [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                CCCS GHC.Types.C#! [sat_sCB1];
                          } in  (#,#) [sat_sCB2 w_sCAQ];
                    };
              };
        };

sat_sCB4 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [465661287#];

sat_sCB5 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sCB4 GHC.Types.[]];

sat_sCB3 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [660865024#];

sat_sCB6 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sCB3 sat_sCB5];

GHC.Show.$fShowInteger3 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sCB6;

GHC.Show.$fShowInteger_jprintb [Occ=LoopBreaker]
  :: [GHC.Integer.Type.Integer] -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sCB7 cs_sCB8]
        case ds_sCB7 of {
          [] -> cs_sCB8;
          : n_sCBa [Occ=Once] ns_sCBb [Occ=Once] ->
              case
                  GHC.Integer.Type.quotRemInteger n_sCBa GHC.Show.$fShowInteger3
              of
              { (#,#) ipv_sCBd [Occ=Once] ipv1_sCBe [Occ=Once] ->
                    case GHC.Integer.Type.integerToInt ipv_sCBd of wild1_sCBf {
                      __DEFAULT ->
                          let {
                            sat_sCBl [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [cs_sCB8 ns_sCBb ipv1_sCBe] \u []
                                    case GHC.Integer.Type.integerToInt ipv1_sCBe of wild2_sCBg {
                                      __DEFAULT ->
                                          let {
                                            sat_sCBh [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                [cs_sCB8 ns_sCBb] \u []
                                                    GHC.Show.$fShowInteger_jprintb ns_sCBb cs_sCB8;
                                          } in 
                                            case GHC.Show.$wjblock' 18# wild2_sCBg sat_sCBh of {
                                              (#,#) ww1_sCBj [Occ=Once] ww2_sCBk [Occ=Once] ->
                                                  : [ww1_sCBj ww2_sCBk];
                                            };
                                    };
                          } in 
                            case GHC.Show.$wjblock' 18# wild1_sCBf sat_sCBl of {
                              (#,#) ww1_sCBn [Occ=Once] ww2_sCBo [Occ=Once] ->
                                  : [ww1_sCBn ww2_sCBo];
                            };
                    };
              };
        };

jsplitb_rC1r
  :: GHC.Integer.Type.Integer
     -> [GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U>,
 Unf=OtherCon []] =
    sat-only [] \r [ds_sCBp ds1_sCBq]
        case ds1_sCBq of {
          [] -> [] [];
          : n_sCBs [Occ=Once] ns_sCBt [Occ=Once] ->
              case GHC.Integer.Type.quotRemInteger n_sCBs ds_sCBp of {
                (#,#) ipv_sCBv [Occ=Once] ipv1_sCBw [Occ=Once] ->
                    let {
                      sat_sCBx [Occ=Once] :: [GHC.Integer.Type.Integer]
                      [LclId] =
                          [ds_sCBp ns_sCBt] \u [] jsplitb_rC1r ds_sCBp ns_sCBt; } in
                    let {
                      sat_sCBy [Occ=Once] :: [GHC.Integer.Type.Integer]
                      [LclId] =
                          CCCS :! [ipv1_sCBw sat_sCBx];
                    } in  : [ipv_sCBv sat_sCBy];
              };
        };

GHC.Show.$fShowInteger1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

GHC.Show.$wjsplitf [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Integer.Type.Integer, [GHC.Integer.Type.Integer] #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [w_sCBz w1_sCBA]
        case GHC.Integer.Type.gtInteger# w_sCBz w1_sCBA of {
          __DEFAULT ->
              case GHC.Integer.Type.timesInteger w_sCBz w_sCBz of sat_sCBC {
                __DEFAULT ->
                    case GHC.Show.$wjsplitf sat_sCBC w1_sCBA of {
                      (#,#) ww1_sCBE [Occ=Once] ww2_sCBF [Occ=Once*] ->
                          case GHC.Integer.Type.quotRemInteger ww1_sCBE w_sCBz of {
                            (#,#) ipv_sCBH ipv1_sCBI [Occ=Once*] ->
                                case
                                    GHC.Integer.Type.gtInteger# ipv_sCBH GHC.Show.$fShowInteger1
                                of
                                { __DEFAULT ->
                                      let {
                                        sat_sCBK [Occ=Once] :: [GHC.Integer.Type.Integer]
                                        [LclId] =
                                            [w_sCBz ww2_sCBF] \u [] jsplitb_rC1r w_sCBz ww2_sCBF;
                                      } in  (#,#) [ipv1_sCBI sat_sCBK];
                                  1# ->
                                      let {
                                        sat_sCBL [Occ=Once] :: [GHC.Integer.Type.Integer]
                                        [LclId] =
                                            [w_sCBz ww2_sCBF] \u []
                                                jsplitb_rC1r w_sCBz ww2_sCBF; } in
                                      let {
                                        sat_sCBM [Occ=Once] :: [GHC.Integer.Type.Integer]
                                        [LclId] =
                                            CCCS :! [ipv1_sCBI sat_sCBL];
                                      } in  (#,#) [ipv_sCBH sat_sCBM];
                                };
                          };
                    };
              };
          1# -> (#,#) [w1_sCBA GHC.Types.[]];
        };

sat_sCBQ :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [100974195#];

sat_sCBR :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sCBQ GHC.Types.[]];

sat_sCBP :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1864637526#];

sat_sCBS :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sCBP sat_sCBR];

sat_sCBO :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1721187872#];

sat_sCBT :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sCBO sat_sCBS];

sat_sCBN :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_sCBU :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sCBN sat_sCBT];

GHC.Show.$fShowInteger2 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sCBU;

GHC.Show.$wintegerToString' [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [w_sCBV w1_sCBW]
        case
            GHC.Integer.Type.ltInteger# w_sCBV GHC.Show.$fShowInteger3
        of
        { __DEFAULT ->
              case GHC.Show.$wjsplitf GHC.Show.$fShowInteger2 w_sCBV of {
                (#,#) ww1_sCBZ [Occ=Once] ww2_sCC0 [Occ=Once*] ->
                    case
                        GHC.Integer.Type.quotRemInteger ww1_sCBZ GHC.Show.$fShowInteger3
                    of
                    { (#,#) ipv_sCC2 [Occ=Once] ipv1_sCC3 [Occ=Once*] ->
                          case GHC.Integer.Type.integerToInt ipv_sCC2 of wild1_sCC4 {
                            __DEFAULT ->
                                case ># [wild1_sCC4 0#] of {
                                  __DEFAULT ->
                                      case GHC.Integer.Type.integerToInt ipv1_sCC3 of wild2_sCC6 {
                                        __DEFAULT ->
                                            let {
                                              sat_sCC7 [Occ=Once] :: GHC.Base.String
                                              [LclId] =
                                                  [w1_sCBW ww2_sCC0] \u []
                                                      GHC.Show.$fShowInteger_jprintb
                                                          ww2_sCC0 w1_sCBW;
                                            } in  GHC.Show.$witos' wild2_sCC6 sat_sCC7;
                                      };
                                  1# ->
                                      let {
                                        sat_sCCd [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            [w1_sCBW ww2_sCC0 ipv1_sCC3] \u []
                                                case
                                                    GHC.Integer.Type.integerToInt ipv1_sCC3
                                                of
                                                wild2_sCC8
                                                { __DEFAULT ->
                                                      let {
                                                        sat_sCC9 [Occ=Once] :: GHC.Base.String
                                                        [LclId] =
                                                            [w1_sCBW ww2_sCC0] \u []
                                                                GHC.Show.$fShowInteger_jprintb
                                                                    ww2_sCC0 w1_sCBW;
                                                      } in 
                                                        case
                                                            GHC.Show.$wjblock'
                                                                18# wild2_sCC8 sat_sCC9
                                                        of
                                                        { (#,#) ww4_sCCb [Occ=Once]
                                                                ww5_sCCc [Occ=Once] ->
                                                              : [ww4_sCCb ww5_sCCc];
                                                        };
                                                };
                                      } in  GHC.Show.$witos' wild1_sCC4 sat_sCCd;
                                };
                          };
                    };
              };
          1# ->
              case GHC.Integer.Type.integerToInt w_sCBV of wild1_sCCe {
                __DEFAULT -> GHC.Show.$witos' wild1_sCCe w1_sCBW;
              };
        };

GHC.Show.$wintegerToString [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [w_sCCf w1_sCCg]
        case
            GHC.Integer.Type.ltInteger# w_sCCf GHC.Show.$fShowInteger1
        of
        { __DEFAULT -> GHC.Show.$wintegerToString' w_sCCf w1_sCCg;
          1# ->
              let {
                sat_sCCm [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sCCf w1_sCCg] \u []
                        case GHC.Integer.Type.negateInteger w_sCCf of sat_sCCi {
                          __DEFAULT ->
                              case GHC.Show.$wintegerToString' sat_sCCi w1_sCCg of {
                                (#,#) ww1_sCCk [Occ=Once] ww2_sCCl [Occ=Once] ->
                                    : [ww1_sCCk ww2_sCCl];
                              };
                        };
              } in  (#,#) [GHC.Show.showLitChar1 sat_sCCm];
        };

GHC.Show.$w$cshowsPrec4 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Integer.Type.Integer
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=3, Str=<S,U><S,U><L,U>, Unf=OtherCon []] =
    [] \r [ww_sCCn w_sCCo w1_sCCp]
        case ># [ww_sCCn 6#] of {
          __DEFAULT -> GHC.Show.$wintegerToString w_sCCo w1_sCCp;
          1# ->
              case
                  GHC.Integer.Type.ltInteger# w_sCCo GHC.Show.$fShowInteger1
              of
              { __DEFAULT -> GHC.Show.$wintegerToString w_sCCo w1_sCCp;
                1# ->
                    let {
                      sat_sCCw [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [w_sCCo w1_sCCp] \u []
                              let {
                                sat_sCCs [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    CCCS :! [GHC.Show.$fShow(,)2 w1_sCCp];
                              } in 
                                case GHC.Show.$wintegerToString w_sCCo sat_sCCs of {
                                  (#,#) ww2_sCCu [Occ=Once] ww3_sCCv [Occ=Once] ->
                                      : [ww2_sCCu ww3_sCCv];
                                };
                    } in  (#,#) [GHC.Show.$fShow(,)4 sat_sCCw];
              };
        };

GHC.Show.$fShowInteger_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Integer.Type.Integer -> GHC.Show.ShowS
[GblId, Arity=3, Str=<S(S),1*U(U)><S,U><L,U>m2, Unf=OtherCon []] =
    [] \r [w_sCCx w1_sCCy w2_sCCz]
        case w_sCCx of {
          GHC.Types.I# ww1_sCCB [Occ=Once] ->
              case GHC.Show.$w$cshowsPrec4 ww1_sCCB w1_sCCy w2_sCCz of {
                (#,#) ww3_sCCD [Occ=Once] ww4_sCCE [Occ=Once] ->
                    : [ww3_sCCD ww4_sCCE];
              };
        };

GHC.Show.$fShowInteger_$cshow
  :: GHC.Integer.Type.Integer -> GHC.Base.String
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [x_sCCF]
        case GHC.Show.$w$cshowsPrec4 0# x_sCCF GHC.Types.[] of {
          (#,#) ww1_sCCH [Occ=Once] ww2_sCCI [Occ=Once] ->
              : [ww1_sCCH ww2_sCCI];
        };

GHC.Show.$fShowInteger_$cshowList
  :: [GHC.Integer.Type.Integer] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCCJ s_sCCK]
        case ds_sCCJ of {
          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s_sCCK;
          : x_sCCM [Occ=Once] xs_sCCN [Occ=Once] ->
              let {
                sat_sCD3 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [s_sCCK x_sCCM xs_sCCN] \u []
                        let {
                          sat_sCCZ [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              [s_sCCK xs_sCCN] \u []
                                  let {
                                    lvl45_sCCO [Occ=OnceL] :: [GHC.Types.Char]
                                    [LclId, Unf=OtherCon []] =
                                        CCCS :! [GHC.Show.showList__2 s_sCCK]; } in
                                  let {
                                    showl_sCCP [Occ=LoopBreaker]
                                      :: [GHC.Integer.Type.Integer] -> GHC.Base.String
                                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                        sat-only [lvl45_sCCO showl_sCCP] \r [ds1_sCCQ]
                                            case ds1_sCCQ of {
                                              [] -> lvl45_sCCO;
                                              : y_sCCS [Occ=Once] ys_sCCT [Occ=Once] ->
                                                  let {
                                                    sat_sCCY [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        [showl_sCCP y_sCCS ys_sCCT] \u []
                                                            let {
                                                              sat_sCCU [Occ=Once] :: GHC.Base.String
                                                              [LclId] =
                                                                  [showl_sCCP ys_sCCT] \u []
                                                                      showl_sCCP ys_sCCT;
                                                            } in 
                                                              case
                                                                  GHC.Show.$w$cshowsPrec4
                                                                      0# y_sCCS sat_sCCU
                                                              of
                                                              { (#,#) ww1_sCCW [Occ=Once]
                                                                      ww2_sCCX [Occ=Once] ->
                                                                    : [ww1_sCCW ww2_sCCX];
                                                              };
                                                  } in  : [GHC.Show.showList__1 sat_sCCY];
                                            };
                                  } in  showl_sCCP xs_sCCN;
                        } in 
                          case GHC.Show.$w$cshowsPrec4 0# x_sCCM sat_sCCZ of {
                            (#,#) ww1_sCD1 [Occ=Once] ww2_sCD2 [Occ=Once] ->
                                : [ww1_sCD1 ww2_sCD2];
                          };
              } in  : [GHC.Show.showList__3 sat_sCD3];
        };

GHC.Show.$fShowInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Integer.Type.Integer
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShowInteger_$cshow
                                    GHC.Show.$fShowInteger_$cshowList];

GHC.Show.C:Show
  :: forall a.
     (GHC.Types.Int -> a -> GHC.Show.ShowS)
     -> (a -> GHC.Base.String)
     -> ([a] -> GHC.Show.ShowS)
     -> GHC.Show.Show a
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Show.C:Show [eta_B3 eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 15:55:13.824207156 UTC

GHC.Show.showsPrec
  :: forall a.
     GHC.Show.Show a =>
     GHC.Types.Int -> a -> GHC.Show.ShowS
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SLL),U(U,A,A)>] =
    [] \r [v_sC1t]
        case v_sC1t of {
          GHC.Show.C:Show v_sC1v [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
              v_sC1v;
        };

GHC.Show.show :: forall a. GHC.Show.Show a => a -> GHC.Base.String
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LSL),U(A,U,A)>] =
    [] \r [v_sC1y]
        case v_sC1y of {
          GHC.Show.C:Show _ [Occ=Dead] v_sC1B [Occ=Once] _ [Occ=Dead] ->
              v_sC1B;
        };

GHC.Show.showList
  :: forall a. GHC.Show.Show a => [a] -> GHC.Show.ShowS
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LLS),U(A,A,U)>] =
    [] \r [v_sC1D]
        case v_sC1D of {
          GHC.Show.C:Show _ [Occ=Dead] _ [Occ=Dead] v_sC1H [Occ=Once] ->
              v_sC1H;
        };

GHC.Show.showCommaSpace2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ", "#;

GHC.Show.showCommaSpace1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.showCommaSpace2;

GHC.Show.showLitChar13 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\\'#];

GHC.Show.asciiTab98 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NUL"#;

GHC.Show.asciiTab97 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab98;

GHC.Show.asciiTab96 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SOH"#;

GHC.Show.asciiTab95 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab96;

GHC.Show.asciiTab94 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "STX"#;

GHC.Show.asciiTab93 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab94;

GHC.Show.asciiTab92 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ETX"#;

GHC.Show.asciiTab91 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab92;

GHC.Show.asciiTab90 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EOT"#;

GHC.Show.asciiTab89 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab90;

GHC.Show.asciiTab88 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ENQ"#;

GHC.Show.asciiTab87 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab88;

GHC.Show.asciiTab86 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ACK"#;

GHC.Show.asciiTab85 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab86;

GHC.Show.asciiTab84 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BEL"#;

GHC.Show.asciiTab83 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab84;

GHC.Show.asciiTab82 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BS"#;

GHC.Show.asciiTab81 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab82;

GHC.Show.asciiTab80 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "HT"#;

GHC.Show.asciiTab79 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab80;

GHC.Show.asciiTab78 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LF"#;

GHC.Show.asciiTab77 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab78;

GHC.Show.asciiTab76 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "VT"#;

GHC.Show.asciiTab75 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab76;

GHC.Show.asciiTab74 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FF"#;

GHC.Show.asciiTab73 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab74;

GHC.Show.asciiTab72 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CR"#;

GHC.Show.asciiTab71 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab72;

GHC.Show.asciiTab70 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SO"#;

GHC.Show.asciiTab69 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab70;

GHC.Show.asciiTab68 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SI"#;

GHC.Show.asciiTab67 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab68;

GHC.Show.asciiTab66 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DLE"#;

GHC.Show.asciiTab65 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab66;

GHC.Show.asciiTab64 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC1"#;

GHC.Show.asciiTab63 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab64;

GHC.Show.asciiTab62 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC2"#;

GHC.Show.asciiTab61 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab62;

GHC.Show.asciiTab60 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC3"#;

GHC.Show.asciiTab59 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab60;

GHC.Show.asciiTab58 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC4"#;

GHC.Show.asciiTab57 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab58;

GHC.Show.asciiTab56 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NAK"#;

GHC.Show.asciiTab55 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab56;

GHC.Show.asciiTab54 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SYN"#;

GHC.Show.asciiTab53 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab54;

GHC.Show.asciiTab52 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ETB"#;

GHC.Show.asciiTab51 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab52;

GHC.Show.asciiTab50 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CAN"#;

GHC.Show.asciiTab49 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab50;

GHC.Show.asciiTab48 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EM"#;

GHC.Show.asciiTab47 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab48;

GHC.Show.asciiTab46 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SUB"#;

GHC.Show.asciiTab45 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab46;

GHC.Show.asciiTab44 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ESC"#;

GHC.Show.asciiTab43 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab44;

GHC.Show.asciiTab42 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FS"#;

GHC.Show.asciiTab41 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab42;

GHC.Show.asciiTab40 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GS"#;

GHC.Show.asciiTab39 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab40;

GHC.Show.asciiTab38 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RS"#;

GHC.Show.asciiTab37 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab38;

GHC.Show.asciiTab36 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "US"#;

GHC.Show.asciiTab35 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab36;

GHC.Show.asciiTab34 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SP"#;

GHC.Show.asciiTab33 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab34;

GHC.Show.asciiTab32 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab33 GHC.Types.[]];

GHC.Show.asciiTab31 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab35 GHC.Show.asciiTab32];

GHC.Show.asciiTab30 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab37 GHC.Show.asciiTab31];

GHC.Show.asciiTab29 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab39 GHC.Show.asciiTab30];

GHC.Show.asciiTab28 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab41 GHC.Show.asciiTab29];

GHC.Show.asciiTab27 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab43 GHC.Show.asciiTab28];

GHC.Show.asciiTab26 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab45 GHC.Show.asciiTab27];

GHC.Show.asciiTab25 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab47 GHC.Show.asciiTab26];

GHC.Show.asciiTab24 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab49 GHC.Show.asciiTab25];

GHC.Show.asciiTab23 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab51 GHC.Show.asciiTab24];

GHC.Show.asciiTab22 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab53 GHC.Show.asciiTab23];

GHC.Show.asciiTab21 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab55 GHC.Show.asciiTab22];

GHC.Show.asciiTab20 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab57 GHC.Show.asciiTab21];

GHC.Show.asciiTab19 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab59 GHC.Show.asciiTab20];

GHC.Show.asciiTab18 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab61 GHC.Show.asciiTab19];

GHC.Show.asciiTab17 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab63 GHC.Show.asciiTab18];

GHC.Show.asciiTab16 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab65 GHC.Show.asciiTab17];

GHC.Show.asciiTab15 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab67 GHC.Show.asciiTab16];

GHC.Show.asciiTab14 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab69 GHC.Show.asciiTab15];

GHC.Show.asciiTab13 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab71 GHC.Show.asciiTab14];

GHC.Show.asciiTab12 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab73 GHC.Show.asciiTab13];

GHC.Show.asciiTab11 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab75 GHC.Show.asciiTab12];

GHC.Show.asciiTab10 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab77 GHC.Show.asciiTab11];

GHC.Show.asciiTab9 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab79 GHC.Show.asciiTab10];

GHC.Show.asciiTab8 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab81 GHC.Show.asciiTab9];

GHC.Show.asciiTab7 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab83 GHC.Show.asciiTab8];

GHC.Show.asciiTab6 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab85 GHC.Show.asciiTab7];

GHC.Show.asciiTab5 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab87 GHC.Show.asciiTab6];

GHC.Show.asciiTab4 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab89 GHC.Show.asciiTab5];

GHC.Show.asciiTab3 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab91 GHC.Show.asciiTab4];

GHC.Show.asciiTab2 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab93 GHC.Show.asciiTab3];

GHC.Show.asciiTab1 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab95 GHC.Show.asciiTab2];

GHC.Show.asciiTab :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab97 GHC.Show.asciiTab1];

GHC.Show.$fShow(,)2 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [')'#];

GHC.Show.$fShow(,)4 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['('#];

GHC.Show.showLitChar1 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['-'#];

GHC.Show.$witos' [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int#
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [w_sC1I w1_sC1J]
        case <# [w_sC1I 10#] of {
          __DEFAULT ->
              case quotRemInt# [w_sC1I 10#] of {
                (#,#) ipv_sC1M [Occ=Once] ipv1_sC1N [Occ=Once] ->
                    case +# [48# ipv1_sC1N] of sat_sC1O {
                      __DEFAULT ->
                          case chr# [sat_sC1O] of sat_sC1P {
                            __DEFAULT ->
                                let {
                                  sat_sC1Q [Occ=Once] :: GHC.Types.Char
                                  [LclId] =
                                      CCCS GHC.Types.C#! [sat_sC1P]; } in
                                let {
                                  sat_sC1R [Occ=Once] :: GHC.Base.String
                                  [LclId] =
                                      CCCS :! [sat_sC1Q w1_sC1J];
                                } in  GHC.Show.$witos' ipv_sC1M sat_sC1R;
                          };
                    };
              };
          1# ->
              case +# [48# w_sC1I] of sat_sC1S {
                __DEFAULT ->
                    case chr# [sat_sC1S] of sat_sC1T {
                      __DEFAULT ->
                          let {
                            sat_sC1U [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                CCCS GHC.Types.C#! [sat_sC1T];
                          } in  (#,#) [sat_sC1U w1_sC1J];
                    };
              };
        };

GHC.Show.$witos [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [w_sC1V w1_sC1W]
        case <# [w_sC1V 0#] of {
          __DEFAULT -> GHC.Show.$witos' w_sC1V w1_sC1W;
          1# ->
              case w_sC1V of wild_sC1Y {
                __DEFAULT ->
                    let {
                      sat_sC23 [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [w1_sC1W wild_sC1Y] \u []
                              case negateInt# [wild_sC1Y] of sat_sC1Z {
                                __DEFAULT ->
                                    case GHC.Show.$witos' sat_sC1Z w1_sC1W of {
                                      (#,#) ww1_sC21 [Occ=Once] ww2_sC22 [Occ=Once] ->
                                          : [ww1_sC21 ww2_sC22];
                                    };
                              };
                    } in  (#,#) [GHC.Show.showLitChar1 sat_sC23];
                -9223372036854775808# ->
                    let {
                      sat_sC2g [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [w1_sC1W] \u []
                              case quotRemInt# [-9223372036854775808# 10#] of {
                                (#,#) ipv_sC25 [Occ=Once] ipv1_sC26 [Occ=Once] ->
                                    let {
                                      sat_sC2c [Occ=Once] :: GHC.Base.String
                                      [LclId] =
                                          [w1_sC1W ipv1_sC26] \u []
                                              case negateInt# [ipv1_sC26] of sat_sC28 {
                                                __DEFAULT ->
                                                    case GHC.Show.$witos' sat_sC28 w1_sC1W of {
                                                      (#,#) ww1_sC2a [Occ=Once]
                                                            ww2_sC2b [Occ=Once] ->
                                                          : [ww1_sC2a ww2_sC2b];
                                                    };
                                              };
                                    } in 
                                      case negateInt# [ipv_sC25] of sat_sC27 {
                                        __DEFAULT ->
                                            case GHC.Show.$witos' sat_sC27 sat_sC2c of {
                                              (#,#) ww1_sC2e [Occ=Once] ww2_sC2f [Occ=Once] ->
                                                  : [ww1_sC2e ww2_sC2f];
                                            };
                                      };
                              };
                    } in  (#,#) [GHC.Show.showLitChar1 sat_sC2g];
              };
        };

GHC.Show.$wshowSignedInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sC2h ww1_sC2i w_sC2j]
        case <# [ww1_sC2i 0#] of {
          __DEFAULT -> GHC.Show.$witos ww1_sC2i w_sC2j;
          1# ->
              case ># [ww_sC2h 6#] of {
                __DEFAULT -> GHC.Show.$witos ww1_sC2i w_sC2j;
                1# ->
                    let {
                      sat_sC2q [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [ww1_sC2i w_sC2j] \u []
                              let {
                                sat_sC2m [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    CCCS :! [GHC.Show.$fShow(,)2 w_sC2j];
                              } in 
                                case GHC.Show.$witos ww1_sC2i sat_sC2m of {
                                  (#,#) ww3_sC2o [Occ=Once] ww4_sC2p [Occ=Once] ->
                                      : [ww3_sC2o ww4_sC2p];
                                };
                    } in  (#,#) [GHC.Show.$fShow(,)4 sat_sC2q];
              };
        };

GHC.Show.showSignedInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Int -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sC2r w1_sC2s w2_sC2t]
        case w_sC2r of {
          GHC.Types.I# ww1_sC2v [Occ=Once] ->
              case w1_sC2s of {
                GHC.Types.I# ww3_sC2x [Occ=Once] ->
                    case GHC.Show.$wshowSignedInt ww1_sC2v ww3_sC2x w2_sC2t of {
                      (#,#) ww5_sC2z [Occ=Once] ww6_sC2A [Occ=Once] ->
                          : [ww5_sC2z ww6_sC2A];
                    };
              };
        };

GHC.Show.showLitChar12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\a"#;

GHC.Show.showLitChar11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\b"#;

GHC.Show.showLitChar10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\t"#;

GHC.Show.showLitChar9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\n"#;

GHC.Show.showLitChar8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\v"#;

GHC.Show.showLitChar7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\f"#;

GHC.Show.showLitChar6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\r"#;

GHC.Show.showLitChar5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\SO"#;

GHC.Show.showLitChar4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\&"#;

GHC.Show.showLitChar3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\\\"#;

GHC.Show.showLitChar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\DEL"#;

GHC.Show.$wshowLitChar [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Char# -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [ww_sC2B w_sC2C]
        case gtChar# [ww_sC2B '\DEL'#] of {
          __DEFAULT ->
              case ww_sC2B of ds_sC2E {
                __DEFAULT ->
                    case geChar# [ds_sC2E ' '#] of {
                      __DEFAULT ->
                          case ds_sC2E of ds1_sC2G {
                            __DEFAULT ->
                                let {
                                  sat_sC2I [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [ds1_sC2G] \u []
                                          case ord# [ds1_sC2G] of sat_sC2H {
                                            __DEFAULT -> GHC.List.$w!! GHC.Show.asciiTab sat_sC2H;
                                          }; } in
                                let {
                                  sat_sC2J [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      CCCS :! [GHC.Show.showLitChar13 sat_sC2I];
                                } in  GHC.Base.++ sat_sC2J w_sC2C;
                            '\a'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar12 w_sC2C;
                            '\b'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar11 w_sC2C;
                            '\t'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar10 w_sC2C;
                            '\n'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar9 w_sC2C;
                            '\v'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar8 w_sC2C;
                            '\f'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar7 w_sC2C;
                            '\r'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar6 w_sC2C;
                            '\SO'# ->
                                let {
                                  sat_sC2Q [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [w_sC2C] \u []
                                          case w_sC2C of wild_sC2K {
                                            [] -> [] [];
                                            : c_sC2L [Occ=Once!] _ [Occ=Dead] ->
                                                case c_sC2L of {
                                                  GHC.Types.C# x_sC2O [Occ=Once!] ->
                                                      case x_sC2O of {
                                                        __DEFAULT -> wild_sC2K;
                                                        'H'# ->
                                                            GHC.CString.unpackAppendCString#
                                                                GHC.Show.showLitChar4 wild_sC2K;
                                                      };
                                                };
                                          };
                                } in 
                                  GHC.CString.unpackAppendCString# GHC.Show.showLitChar5 sat_sC2Q;
                          };
                      1# ->
                          let {
                            sat_sC2R [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                CCCS GHC.Types.C#! [ds_sC2E];
                          } in  : [sat_sC2R w_sC2C];
                    };
                '\\'# ->
                    GHC.CString.unpackAppendCString# GHC.Show.showLitChar3 w_sC2C;
                '\DEL'# ->
                    GHC.CString.unpackAppendCString# GHC.Show.showLitChar2 w_sC2C;
              };
          1# ->
              let {
                sat_sC34 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ww_sC2B w_sC2C] \u []
                        let {
                          sat_sC30 [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              [w_sC2C] \u []
                                  case w_sC2C of wild_sC2T {
                                    [] -> [] [];
                                    : c_sC2U [Occ=Once!] _ [Occ=Dead] ->
                                        case c_sC2U of {
                                          GHC.Types.C# c1_sC2X ->
                                              case geChar# [c1_sC2X '0'#] of {
                                                __DEFAULT -> wild_sC2T;
                                                1# ->
                                                    case leChar# [c1_sC2X '9'#] of {
                                                      __DEFAULT -> wild_sC2T;
                                                      1# ->
                                                          GHC.CString.unpackAppendCString#
                                                              GHC.Show.showLitChar4 wild_sC2T;
                                                    };
                                              };
                                        };
                                  };
                        } in 
                          case ord# [ww_sC2B] of sat_sC2S {
                            __DEFAULT ->
                                case GHC.Show.$witos sat_sC2S sat_sC30 of {
                                  (#,#) ww2_sC32 [Occ=Once] ww3_sC33 [Occ=Once] ->
                                      : [ww2_sC32 ww3_sC33];
                                };
                          };
              } in  : [GHC.Show.showLitChar13 sat_sC34];
        };

GHC.Show.showLitChar [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Char -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S(S),1*U(U)><L,U>, Unf=OtherCon []] =
    [] \r [w_sC35 w1_sC36]
        case w_sC35 of {
          GHC.Types.C# ww1_sC38 [Occ=Once] ->
              GHC.Show.$wshowLitChar ww1_sC38 w1_sC36;
        };

GHC.Show.$dmshowsPrec
  :: forall a.
     GHC.Show.Show a =>
     GHC.Types.Int -> a -> GHC.Show.ShowS
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LC(S)L),1*U(A,1*C1(U),A)><L,A><L,U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sC39 ds_sC3a x_sC3b s_sC3c]
        case GHC.Show.show $dShow_sC39 x_sC3b of sat_sC3d {
          __DEFAULT -> GHC.Base.++ sat_sC3d s_sC3c;
        };

GHC.Show.showList__3 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['['#];

GHC.Show.showList__2 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [']'#];

GHC.Show.showList__1 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [','#];

GHC.Show.showList__4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "[]"#;

GHC.Show.showList__
  :: forall a. (a -> GHC.Show.ShowS) -> [a] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_sC3e ds1_sC3f s_sC3g]
        case ds1_sC3f of {
          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s_sC3g;
          : x_sC3i [Occ=Once] xs_sC3j [Occ=Once] ->
              let {
                sat_sC3t [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ds_sC3e s_sC3g x_sC3i xs_sC3j] \u []
                        let {
                          sat_sC3s [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              [ds_sC3e s_sC3g xs_sC3j] \u []
                                  let {
                                    lvl45_sC3k [Occ=OnceL] :: [GHC.Types.Char]
                                    [LclId, Unf=OtherCon []] =
                                        CCCS :! [GHC.Show.showList__2 s_sC3g]; } in
                                  let {
                                    showl_sC3l [Occ=LoopBreaker] :: [a_azqi] -> GHC.Base.String
                                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                        sat-only [ds_sC3e lvl45_sC3k showl_sC3l] \r [ds2_sC3m]
                                            case ds2_sC3m of {
                                              [] -> lvl45_sC3k;
                                              : y_sC3o [Occ=Once] ys_sC3p [Occ=Once] ->
                                                  let {
                                                    sat_sC3r [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        [ds_sC3e showl_sC3l y_sC3o ys_sC3p] \u []
                                                            let {
                                                              sat_sC3q [Occ=Once] :: GHC.Base.String
                                                              [LclId] =
                                                                  [showl_sC3l ys_sC3p] \u []
                                                                      showl_sC3l ys_sC3p;
                                                            } in  ds_sC3e y_sC3o sat_sC3q;
                                                  } in  : [GHC.Show.showList__1 sat_sC3r];
                                            };
                                  } in  showl_sC3l xs_sC3j;
                        } in  ds_sC3e x_sC3i sat_sC3s;
              } in  : [GHC.Show.showList__3 sat_sC3t];
        };

lvl_rC0c :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\\""#;

GHC.Show.showLitString [Occ=LoopBreaker]
  :: GHC.Base.String -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sC3u s_sC3v]
        case ds_sC3u of {
          [] -> s_sC3v;
          : ds1_sC3x [Occ=Once!] cs_sC3y [Occ=Once*] ->
              case ds1_sC3x of {
                GHC.Types.C# ds2_sC3A [Occ=Once!] ->
                    case ds2_sC3A of ds3_sC3B {
                      __DEFAULT ->
                          let {
                            sat_sC3C [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [s_sC3v cs_sC3y] \u [] GHC.Show.showLitString cs_sC3y s_sC3v;
                          } in  GHC.Show.$wshowLitChar ds3_sC3B sat_sC3C;
                      '"'# ->
                          let {
                            sat_sC3D [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [s_sC3v cs_sC3y] \u [] GHC.Show.showLitString cs_sC3y s_sC3v;
                          } in  GHC.CString.unpackAppendCString# lvl_rC0c sat_sC3D;
                    };
              };
        };

GHC.Show.$fShow(,)3 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['"'#];

GHC.Show.$fShow(,)_$cshowList1
  :: [GHC.Types.Char] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,1*U><L,U>m2, Unf=OtherCon []] =
    [] \r [cs_sC3E eta_sC3F]
        let {
          sat_sC3H [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [cs_sC3E eta_sC3F] \u []
                  let {
                    sat_sC3G [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [GHC.Show.$fShow(,)3 eta_sC3F];
                  } in  GHC.Show.showLitString cs_sC3E sat_sC3G;
        } in  : [GHC.Show.$fShow(,)3 sat_sC3H];

$s$fShow[]_rC0d
  :: GHC.Types.Int
     -> [GHC.Types.Char] -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=3, Str=<L,A><L,1*U><L,U>m2, Unf=OtherCon []] =
    [] \r [ds_sC3I eta_sC3J eta1_sC3K]
        GHC.Show.$fShow(,)_$cshowList1 eta_sC3J eta1_sC3K;

GHC.Show.$fShow[]_$s$cshowList1
  :: [[GHC.Types.Char]] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sC3L s_sC3M]
        GHC.Show.showList__ GHC.Show.$fShow(,)_$cshowList1 ls_sC3L s_sC3M;

GHC.Show.$fShow[]1 :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShow(,)3 GHC.Types.[]];

GHC.Show.$fShow[]_$s$cshow1 :: [GHC.Types.Char] -> GHC.Base.String
[GblId, Arity=1, Str=<L,1*U>m2, Unf=OtherCon []] =
    [] \r [x_sC3N]
        let {
          sat_sC3O [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [x_sC3N] \u [] GHC.Show.showLitString x_sC3N GHC.Show.$fShow[]1;
        } in  : [GHC.Show.$fShow(,)3 sat_sC3O];

GHC.Show.$fShow[]_$s$fShow[]1 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show [GHC.Types.Char]
[GblId, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [$s$fShow[]_rC0d
                                    GHC.Show.$fShow[]_$s$cshow1
                                    GHC.Show.$fShow[]_$s$cshowList1];

GHC.Show.$fShow(,)1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl1_rC0e :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SrcLoc {"#;

lvl2_rC0f :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocPackage = "#;

lvl3_rC0g :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocModule = "#;

lvl4_rC0h :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocFile = "#;

lvl5_rC0i :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocStartLine = "#;

lvl6_rC0j :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocStartCol = "#;

lvl7_rC0k :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocEndLine = "#;

lvl8_rC0l :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocEndCol = "#;

lvl9_rC0m :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "}"#;

GHC.Show.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> [GHC.Types.Char]
     -> [GHC.Types.Char]
     -> [GHC.Types.Char]
     -> GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Base.String
     -> GHC.Base.String
[GblId,
 Arity=9,
 Str=<S,U><L,1*U><L,1*U><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sC3P
           ww1_sC3Q
           ww2_sC3R
           ww3_sC3S
           ww4_sC3T
           ww5_sC3U
           ww6_sC3V
           ww7_sC3W
           w_sC3X]
        let {
          p_sC3Y [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [ww1_sC3Q
                        ww2_sC3R
                        ww3_sC3S
                        ww4_sC3T
                        ww5_sC3U
                        ww6_sC3V
                        ww7_sC3W] \r [x_sC3Z]
                  let {
                    sat_sC4K [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [ww1_sC3Q
                         ww2_sC3R
                         ww3_sC3S
                         ww4_sC3T
                         ww5_sC3U
                         ww6_sC3V
                         ww7_sC3W
                         x_sC3Z] \u []
                            let {
                              sat_sC4I [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [ww1_sC3Q
                                   ww2_sC3R
                                   ww3_sC3S
                                   ww4_sC3T
                                   ww5_sC3U
                                   ww6_sC3V
                                   ww7_sC3W
                                   x_sC3Z] \u []
                                      let {
                                        sat_sC4G [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww2_sC3R
                                             ww3_sC3S
                                             ww4_sC3T
                                             ww5_sC3U
                                             ww6_sC3V
                                             ww7_sC3W
                                             x_sC3Z] \u []
                                                let {
                                                  sat_sC4F [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [ww2_sC3R
                                                       ww3_sC3S
                                                       ww4_sC3T
                                                       ww5_sC3U
                                                       ww6_sC3V
                                                       ww7_sC3W
                                                       x_sC3Z] \s []
                                                          let {
                                                            sat_sC4D [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [ww2_sC3R
                                                                 ww3_sC3S
                                                                 ww4_sC3T
                                                                 ww5_sC3U
                                                                 ww6_sC3V
                                                                 ww7_sC3W
                                                                 x_sC3Z] \u []
                                                                    let {
                                                                      sat_sC4B [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          [ww3_sC3S
                                                                           ww4_sC3T
                                                                           ww5_sC3U
                                                                           ww6_sC3V
                                                                           ww7_sC3W
                                                                           x_sC3Z] \u []
                                                                              let {
                                                                                sat_sC4A [Occ=Once,
                                                                                          Dmd=<L,1*U>]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    [ww3_sC3S
                                                                                     ww4_sC3T
                                                                                     ww5_sC3U
                                                                                     ww6_sC3V
                                                                                     ww7_sC3W
                                                                                     x_sC3Z] \s []
                                                                                        let {
                                                                                          sat_sC4y [Occ=Once]
                                                                                            :: [GHC.Types.Char]
                                                                                          [LclId] =
                                                                                              [ww3_sC3S
                                                                                               ww4_sC3T
                                                                                               ww5_sC3U
                                                                                               ww6_sC3V
                                                                                               ww7_sC3W
                                                                                               x_sC3Z] \u []
                                                                                                  let {
                                                                                                    sat_sC4w [Occ=Once]
                                                                                                      :: [GHC.Types.Char]
                                                                                                    [LclId] =
                                                                                                        [ww4_sC3T
                                                                                                         ww5_sC3U
                                                                                                         ww6_sC3V
                                                                                                         ww7_sC3W
                                                                                                         x_sC3Z] \u []
                                                                                                            let {
                                                                                                              sat_sC4v [Occ=Once,
                                                                                                                        Dmd=<L,1*U>]
                                                                                                                :: [GHC.Types.Char]
                                                                                                              [LclId] =
                                                                                                                  [ww4_sC3T
                                                                                                                   ww5_sC3U
                                                                                                                   ww6_sC3V
                                                                                                                   ww7_sC3W
                                                                                                                   x_sC3Z] \s []
                                                                                                                      let {
                                                                                                                        sat_sC4u [Occ=Once]
                                                                                                                          :: [GHC.Types.Char]
                                                                                                                        [LclId] =
                                                                                                                            [ww4_sC3T
                                                                                                                             ww5_sC3U
                                                                                                                             ww6_sC3V
                                                                                                                             ww7_sC3W
                                                                                                                             x_sC3Z] \u []
                                                                                                                                case
                                                                                                                                    ww4_sC3T
                                                                                                                                of
                                                                                                                                { GHC.Types.I# n_sC41 [Occ=Once] ->
                                                                                                                                      let {
                                                                                                                                        sat_sC4q [Occ=Once]
                                                                                                                                          :: GHC.Base.String
                                                                                                                                        [LclId] =
                                                                                                                                            [ww5_sC3U
                                                                                                                                             ww6_sC3V
                                                                                                                                             ww7_sC3W
                                                                                                                                             x_sC3Z] \u []
                                                                                                                                                let {
                                                                                                                                                  sat_sC4p [Occ=Once,
                                                                                                                                                            Dmd=<L,1*U>]
                                                                                                                                                    :: [GHC.Types.Char]
                                                                                                                                                  [LclId] =
                                                                                                                                                      [ww5_sC3U
                                                                                                                                                       ww6_sC3V
                                                                                                                                                       ww7_sC3W
                                                                                                                                                       x_sC3Z] \s []
                                                                                                                                                          let {
                                                                                                                                                            sat_sC4o [Occ=Once]
                                                                                                                                                              :: [GHC.Types.Char]
                                                                                                                                                            [LclId] =
                                                                                                                                                                [ww5_sC3U
                                                                                                                                                                 ww6_sC3V
                                                                                                                                                                 ww7_sC3W
                                                                                                                                                                 x_sC3Z] \u []
                                                                                                                                                                    case
                                                                                                                                                                        ww5_sC3U
                                                                                                                                                                    of
                                                                                                                                                                    { GHC.Types.I# n1_sC43 [Occ=Once] ->
                                                                                                                                                                          let {
                                                                                                                                                                            sat_sC4k [Occ=Once]
                                                                                                                                                                              :: GHC.Base.String
                                                                                                                                                                            [LclId] =
                                                                                                                                                                                [ww6_sC3V
                                                                                                                                                                                 ww7_sC3W
                                                                                                                                                                                 x_sC3Z] \u []
                                                                                                                                                                                    let {
                                                                                                                                                                                      sat_sC4j [Occ=Once,
                                                                                                                                                                                                Dmd=<L,1*U>]
                                                                                                                                                                                        :: [GHC.Types.Char]
                                                                                                                                                                                      [LclId] =
                                                                                                                                                                                          [ww6_sC3V
                                                                                                                                                                                           ww7_sC3W
                                                                                                                                                                                           x_sC3Z] \s []
                                                                                                                                                                                              let {
                                                                                                                                                                                                sat_sC4i [Occ=Once]
                                                                                                                                                                                                  :: [GHC.Types.Char]
                                                                                                                                                                                                [LclId] =
                                                                                                                                                                                                    [ww6_sC3V
                                                                                                                                                                                                     ww7_sC3W
                                                                                                                                                                                                     x_sC3Z] \u []
                                                                                                                                                                                                        case
                                                                                                                                                                                                            ww6_sC3V
                                                                                                                                                                                                        of
                                                                                                                                                                                                        { GHC.Types.I# n2_sC45 [Occ=Once] ->
                                                                                                                                                                                                              let {
                                                                                                                                                                                                                sat_sC4e [Occ=Once]
                                                                                                                                                                                                                  :: GHC.Base.String
                                                                                                                                                                                                                [LclId] =
                                                                                                                                                                                                                    [ww7_sC3W
                                                                                                                                                                                                                     x_sC3Z] \u []
                                                                                                                                                                                                                        let {
                                                                                                                                                                                                                          sat_sC4d [Occ=Once,
                                                                                                                                                                                                                                    Dmd=<L,1*U>]
                                                                                                                                                                                                                            :: [GHC.Types.Char]
                                                                                                                                                                                                                          [LclId] =
                                                                                                                                                                                                                              [ww7_sC3W
                                                                                                                                                                                                                               x_sC3Z] \s []
                                                                                                                                                                                                                                  let {
                                                                                                                                                                                                                                    sat_sC4c [Occ=Once]
                                                                                                                                                                                                                                      :: [GHC.Types.Char]
                                                                                                                                                                                                                                    [LclId] =
                                                                                                                                                                                                                                        [ww7_sC3W
                                                                                                                                                                                                                                         x_sC3Z] \u []
                                                                                                                                                                                                                                            case
                                                                                                                                                                                                                                                ww7_sC3W
                                                                                                                                                                                                                                            of
                                                                                                                                                                                                                                            { GHC.Types.I# n3_sC47 [Occ=Once] ->
                                                                                                                                                                                                                                                  let {
                                                                                                                                                                                                                                                    sat_sC48 [Occ=Once]
                                                                                                                                                                                                                                                      :: GHC.Base.String
                                                                                                                                                                                                                                                    [LclId] =
                                                                                                                                                                                                                                                        [x_sC3Z] \u []
                                                                                                                                                                                                                                                            GHC.CString.unpackAppendCString#
                                                                                                                                                                                                                                                                lvl9_rC0m
                                                                                                                                                                                                                                                                x_sC3Z;
                                                                                                                                                                                                                                                  } in 
                                                                                                                                                                                                                                                    case
                                                                                                                                                                                                                                                        GHC.Show.$witos
                                                                                                                                                                                                                                                            n3_sC47
                                                                                                                                                                                                                                                            sat_sC48
                                                                                                                                                                                                                                                    of
                                                                                                                                                                                                                                                    { (#,#) ww9_sC4a [Occ=Once]
                                                                                                                                                                                                                                                            ww10_sC4b [Occ=Once] ->
                                                                                                                                                                                                                                                          : [ww9_sC4a
                                                                                                                                                                                                                                                             ww10_sC4b];
                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                            };
                                                                                                                                                                                                                                  } in 
                                                                                                                                                                                                                                    GHC.CString.unpackAppendCString#
                                                                                                                                                                                                                                        lvl8_rC0l
                                                                                                                                                                                                                                        sat_sC4c;
                                                                                                                                                                                                                        } in 
                                                                                                                                                                                                                          GHC.Base.++
                                                                                                                                                                                                                              GHC.Show.showCommaSpace1
                                                                                                                                                                                                                              sat_sC4d;
                                                                                                                                                                                                              } in 
                                                                                                                                                                                                                case
                                                                                                                                                                                                                    GHC.Show.$witos
                                                                                                                                                                                                                        n2_sC45
                                                                                                                                                                                                                        sat_sC4e
                                                                                                                                                                                                                of
                                                                                                                                                                                                                { (#,#) ww9_sC4g [Occ=Once]
                                                                                                                                                                                                                        ww10_sC4h [Occ=Once] ->
                                                                                                                                                                                                                      : [ww9_sC4g
                                                                                                                                                                                                                         ww10_sC4h];
                                                                                                                                                                                                                };
                                                                                                                                                                                                        };
                                                                                                                                                                                              } in 
                                                                                                                                                                                                GHC.CString.unpackAppendCString#
                                                                                                                                                                                                    lvl7_rC0k
                                                                                                                                                                                                    sat_sC4i;
                                                                                                                                                                                    } in 
                                                                                                                                                                                      GHC.Base.++
                                                                                                                                                                                          GHC.Show.showCommaSpace1
                                                                                                                                                                                          sat_sC4j;
                                                                                                                                                                          } in 
                                                                                                                                                                            case
                                                                                                                                                                                GHC.Show.$witos
                                                                                                                                                                                    n1_sC43
                                                                                                                                                                                    sat_sC4k
                                                                                                                                                                            of
                                                                                                                                                                            { (#,#) ww9_sC4m [Occ=Once]
                                                                                                                                                                                    ww10_sC4n [Occ=Once] ->
                                                                                                                                                                                  : [ww9_sC4m
                                                                                                                                                                                     ww10_sC4n];
                                                                                                                                                                            };
                                                                                                                                                                    };
                                                                                                                                                          } in 
                                                                                                                                                            GHC.CString.unpackAppendCString#
                                                                                                                                                                lvl6_rC0j
                                                                                                                                                                sat_sC4o;
                                                                                                                                                } in 
                                                                                                                                                  GHC.Base.++
                                                                                                                                                      GHC.Show.showCommaSpace1
                                                                                                                                                      sat_sC4p;
                                                                                                                                      } in 
                                                                                                                                        case
                                                                                                                                            GHC.Show.$witos
                                                                                                                                                n_sC41
                                                                                                                                                sat_sC4q
                                                                                                                                        of
                                                                                                                                        { (#,#) ww9_sC4s [Occ=Once]
                                                                                                                                                ww10_sC4t [Occ=Once] ->
                                                                                                                                              : [ww9_sC4s
                                                                                                                                                 ww10_sC4t];
                                                                                                                                        };
                                                                                                                                };
                                                                                                                      } in 
                                                                                                                        GHC.CString.unpackAppendCString#
                                                                                                                            lvl5_rC0i
                                                                                                                            sat_sC4u;
                                                                                                            } in 
                                                                                                              GHC.Base.++
                                                                                                                  GHC.Show.showCommaSpace1
                                                                                                                  sat_sC4v; } in
                                                                                                  let {
                                                                                                    sat_sC4x [Occ=Once]
                                                                                                      :: GHC.Base.String
                                                                                                    [LclId] =
                                                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                                                 sat_sC4w];
                                                                                                  } in 
                                                                                                    GHC.Show.showLitString
                                                                                                        ww3_sC3S
                                                                                                        sat_sC4x; } in
                                                                                        let {
                                                                                          sat_sC4z [Occ=Once]
                                                                                            :: [GHC.Types.Char]
                                                                                          [LclId] =
                                                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                                                       sat_sC4y];
                                                                                        } in 
                                                                                          GHC.CString.unpackAppendCString#
                                                                                              lvl4_rC0h
                                                                                              sat_sC4z;
                                                                              } in 
                                                                                GHC.Base.++
                                                                                    GHC.Show.showCommaSpace1
                                                                                    sat_sC4A; } in
                                                                    let {
                                                                      sat_sC4C [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   sat_sC4B];
                                                                    } in 
                                                                      GHC.Show.showLitString
                                                                          ww2_sC3R sat_sC4C; } in
                                                          let {
                                                            sat_sC4E [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)3
                                                                         sat_sC4D];
                                                          } in 
                                                            GHC.CString.unpackAppendCString#
                                                                lvl3_rC0g sat_sC4E;
                                                } in 
                                                  GHC.Base.++
                                                      GHC.Show.showCommaSpace1 sat_sC4F; } in
                                      let {
                                        sat_sC4H [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [GHC.Show.$fShow(,)3 sat_sC4G];
                                      } in  GHC.Show.showLitString ww1_sC3Q sat_sC4H; } in
                            let {
                              sat_sC4J [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  CCCS :! [GHC.Show.$fShow(,)3 sat_sC4I];
                            } in  GHC.CString.unpackAppendCString# lvl2_rC0f sat_sC4J;
                  } in  GHC.CString.unpackAppendCString# lvl1_rC0e sat_sC4K;
        } in 
          case >=# [ww_sC3P 11#] of {
            __DEFAULT -> p_sC3Y w_sC3X;
            1# ->
                let {
                  sat_sC4N [Occ=Once] :: [GHC.Types.Char]
                  [LclId] =
                      [w_sC3X p_sC3Y] \u []
                          let {
                            sat_sC4M [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                CCCS :! [GHC.Show.$fShow(,)2 w_sC3X];
                          } in  p_sC3Y sat_sC4M;
                } in  : [GHC.Show.$fShow(,)4 sat_sC4N];
          };

GHC.Show.$fShowSrcLoc_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Stack.Types.SrcLoc -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U(U),1*U(U),1*U(U),1*U(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sC4O w1_sC4P w2_sC4Q]
        case w_sC4O of {
          GHC.Types.I# ww1_sC4S [Occ=Once] ->
              case w1_sC4P of {
                GHC.Stack.Types.SrcLoc ww3_sC4U [Occ=Once]
                                       ww4_sC4V [Occ=Once]
                                       ww5_sC4W [Occ=Once]
                                       ww6_sC4X [Occ=Once]
                                       ww7_sC4Y [Occ=Once]
                                       ww8_sC4Z [Occ=Once]
                                       ww9_sC50 [Occ=Once] ->
                    GHC.Show.$w$cshowsPrec
                        ww1_sC4S
                        ww3_sC4U
                        ww4_sC4V
                        ww5_sC4W
                        ww6_sC4X
                        ww7_sC4Y
                        ww8_sC4Z
                        ww9_sC50
                        w2_sC4Q;
              };
        };

GHC.Show.$fShowSrcLoc1 :: GHC.Stack.Types.SrcLoc -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U(1*U,1*U,1*U,1*U(U),1*U(U),1*U(U),1*U(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sC51 w1_sC52]
        case w_sC51 of {
          GHC.Stack.Types.SrcLoc ww1_sC54 [Occ=Once]
                                 ww2_sC55 [Occ=Once]
                                 ww3_sC56 [Occ=Once]
                                 ww4_sC57 [Occ=Once]
                                 ww5_sC58 [Occ=Once]
                                 ww6_sC59 [Occ=Once]
                                 ww7_sC5a [Occ=Once] ->
              GHC.Show.$w$cshowsPrec
                  0#
                  ww1_sC54
                  ww2_sC55
                  ww3_sC56
                  ww4_sC57
                  ww5_sC58
                  ww6_sC59
                  ww7_sC5a
                  w1_sC52;
        };

GHC.Show.$fShowSrcLoc_$cshowList
  :: [GHC.Stack.Types.SrcLoc] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sC5b s_sC5c]
        GHC.Show.showList__ GHC.Show.$fShowSrcLoc1 ls_sC5b s_sC5c;

GHC.Show.$fShowSrcLoc_$cshow
  :: GHC.Stack.Types.SrcLoc -> GHC.Base.String
[GblId,
 Arity=1,
 Str=<S,1*U(1*U,1*U,1*U,1*U(U),1*U(U),1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [x_sC5d]
        case x_sC5d of {
          GHC.Stack.Types.SrcLoc ww1_sC5f [Occ=Once]
                                 ww2_sC5g [Occ=Once]
                                 ww3_sC5h [Occ=Once]
                                 ww4_sC5i [Occ=Once]
                                 ww5_sC5j [Occ=Once]
                                 ww6_sC5k [Occ=Once]
                                 ww7_sC5l [Occ=Once] ->
              GHC.Show.$w$cshowsPrec
                  0#
                  ww1_sC5f
                  ww2_sC5g
                  ww3_sC5h
                  ww4_sC5i
                  ww5_sC5j
                  ww6_sC5k
                  ww7_sC5l
                  GHC.Types.[];
        };

GHC.Show.$fShowSrcLoc [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Stack.Types.SrcLoc
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowSrcLoc_$cshowsPrec
                                    GHC.Show.$fShowSrcLoc_$cshow
                                    GHC.Show.$fShowSrcLoc_$cshowList];

GHC.Show.appPrec :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [10#];

GHC.Show.appPrec1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

GHC.Show.$wshowWord [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Word#
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [w_sC5m w1_sC5n]
        case ltWord# [w_sC5m 10##] of {
          __DEFAULT ->
              case remWord# [w_sC5m 10##] of sat_sC5q {
                __DEFAULT ->
                    case word2Int# [sat_sC5q] of sat_sC5r {
                      __DEFAULT ->
                          case +# [48# sat_sC5r] of sat_sC5s {
                            __DEFAULT ->
                                case chr# [sat_sC5s] of sat_sC5t {
                                  __DEFAULT ->
                                      let {
                                        sat_sC5u [Occ=Once] :: GHC.Types.Char
                                        [LclId] =
                                            CCCS GHC.Types.C#! [sat_sC5t]; } in
                                      let {
                                        sat_sC5v [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [sat_sC5u w1_sC5n];
                                      } in 
                                        case quotWord# [w_sC5m 10##] of sat_sC5p {
                                          __DEFAULT -> GHC.Show.$wshowWord sat_sC5p sat_sC5v;
                                        };
                                };
                          };
                    };
              };
          1# ->
              case word2Int# [w_sC5m] of sat_sC5w {
                __DEFAULT ->
                    case +# [48# sat_sC5w] of sat_sC5x {
                      __DEFAULT ->
                          case chr# [sat_sC5x] of sat_sC5y {
                            __DEFAULT ->
                                let {
                                  sat_sC5z [Occ=Once] :: GHC.Types.Char
                                  [LclId] =
                                      CCCS GHC.Types.C#! [sat_sC5y];
                                } in  (#,#) [sat_sC5z w1_sC5n];
                          };
                    };
              };
        };

GHC.Show.showWord [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sC5A w1_sC5B]
        case GHC.Show.$wshowWord w_sC5A w1_sC5B of {
          (#,#) ww1_sC5D [Occ=Once] ww2_sC5E [Occ=Once] ->
              : [ww1_sC5D ww2_sC5E];
        };

GHC.Show.$fShowWord_$cshowsPrec
  :: GHC.Types.Int -> GHC.Types.Word -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [ds_sC5F ds1_sC5G eta_sC5H]
        case ds1_sC5G of {
          GHC.Types.W# w_sC5J [Occ=Once] ->
              GHC.Show.showWord w_sC5J eta_sC5H;
        };

GHC.Show.shows :: forall a. GHC.Show.Show a => a -> GHC.Show.ShowS
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(C(S)LL),1*U(1*C1(U),A,A)>,
 Unf=OtherCon []] =
    [] \r [$dShow_sC5K]
        GHC.Show.showsPrec $dShow_sC5K GHC.Show.$fShow(,)1;

GHC.Show.$dmshow
  :: forall a. GHC.Show.Show a => a -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(C(C(C(S)))LL),1*U(1*C1(C1(C1(U))),A,A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sC5L x_sC5M]
        GHC.Show.showsPrec
            $dShow_sC5L GHC.Show.$fShow(,)1 x_sC5M GHC.Types.[];

GHC.Show.$dmshowList
  :: forall a. GHC.Show.Show a => [a] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(C1(U))),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sC5N ls_sC5O s_sC5P]
        let {
          sat_sC5Q [Occ=Once, Dmd=<L,C(C1(U))>] :: a_az3k -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sC5N] \u []
                  GHC.Show.showsPrec $dShow_sC5N GHC.Show.$fShow(,)1;
        } in  GHC.Show.showList__ sat_sC5Q ls_sC5O s_sC5P;

GHC.Show.$fShowWord1
  :: GHC.Types.Word -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [ds_sC5R eta_sC5S]
        case ds_sC5R of {
          GHC.Types.W# w_sC5U [Occ=Once] ->
              GHC.Show.showWord w_sC5U eta_sC5S;
        };

GHC.Show.$fShowWord_$cshowList
  :: [GHC.Types.Word] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sC5V s_sC5W]
        GHC.Show.showList__ GHC.Show.$fShowWord1 ls_sC5V s_sC5W;

GHC.Show.$fShowWord_$cshow :: GHC.Types.Word -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_sC5X]
        case x_sC5X of {
          GHC.Types.W# w_sC5Z [Occ=Once] ->
              case GHC.Show.$wshowWord w_sC5Z GHC.Types.[] of {
                (#,#) ww1_sC61 [Occ=Once] ww2_sC62 [Occ=Once] ->
                    : [ww1_sC61 ww2_sC62];
              };
        };

GHC.Show.$fShowWord [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Word
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowWord_$cshowsPrec
                                    GHC.Show.$fShowWord_$cshow
                                    GHC.Show.$fShowWord_$cshowList];

GHC.Show.showChar :: GHC.Types.Char -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] : [eta_B2 eta_B1];

GHC.Show.showParen
  :: GHC.Types.Bool -> GHC.Show.ShowS -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [b_sC63 p_sC64]
        case b_sC63 of {
          GHC.Types.False -> p_sC64;
          GHC.Types.True ->
              let {
                sat_sC69 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                [LclId] =
                    [p_sC64] \r [x_sC66]
                        let {
                          sat_sC68 [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [p_sC64 x_sC66] \u []
                                  let {
                                    sat_sC67 [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        CCCS :! [GHC.Show.$fShow(,)2 x_sC66];
                                  } in  p_sC64 sat_sC67;
                        } in  : [GHC.Show.$fShow(,)4 sat_sC68];
              } in  sat_sC69;
        };

lvl10_rC0n :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "foldr1"#;

lvl11_rC0o :: GHC.Base.String -> GHC.Base.String
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl10_rC0n of sat_sC6a {
          __DEFAULT -> GHC.List.errorEmptyList sat_sC6a;
        };

go2_rC0p
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    sat-only [] \r [ds_sC6b eta_sC6c]
        case ds_sC6b of {
          [] -> lvl11_rC0o;
          : x_sC6f [Occ=Once*!] ds1_sC6g [Occ=Once!] ->
              case ds1_sC6g of wild1_sC6h {
                [] -> x_sC6f eta_sC6c;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sC6k [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sC6c wild1_sC6h] \u [] go2_rC0p wild1_sC6h eta_sC6c; } in
                    let {
                      sat_sC6l [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sC6k];
                    } in  x_sC6f sat_sC6l;
              };
        };

GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n,
      GHC.Show.Show o) =>
     GHC.Types.Int
     -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) -> GHC.Show.ShowS
[GblId,
 Arity=18,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sC6m
           $dShow1_sC6n
           $dShow2_sC6o
           $dShow3_sC6p
           $dShow4_sC6q
           $dShow5_sC6r
           $dShow6_sC6s
           $dShow7_sC6t
           $dShow8_sC6u
           $dShow9_sC6v
           $dShow10_sC6w
           $dShow11_sC6x
           $dShow12_sC6y
           $dShow13_sC6z
           $dShow14_sC6A
           ds_sC6B
           ds1_sC6C
           s_sC6D]
        case ds1_sC6C of {
          (,,,,,,,,,,,,,,) a1_sC6F [Occ=Once]
                           b1_sC6G [Occ=Once]
                           c1_sC6H [Occ=Once]
                           d1_sC6I [Occ=Once]
                           e1_sC6J [Occ=Once]
                           f13_sC6K [Occ=Once]
                           g1_sC6L [Occ=Once]
                           h1_sC6M [Occ=Once]
                           i1_sC6N [Occ=Once]
                           j1_sC6O [Occ=Once]
                           k1_sC6P [Occ=Once]
                           l1_sC6Q [Occ=Once]
                           m1_sC6R [Occ=Once]
                           n1_sC6S [Occ=Once]
                           o1_sC6T [Occ=Once] ->
              let {
                sat_sC7p [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sC6m
                     $dShow1_sC6n
                     $dShow2_sC6o
                     $dShow3_sC6p
                     $dShow4_sC6q
                     $dShow5_sC6r
                     $dShow6_sC6s
                     $dShow7_sC6t
                     $dShow8_sC6u
                     $dShow9_sC6v
                     $dShow10_sC6w
                     $dShow11_sC6x
                     $dShow12_sC6y
                     $dShow13_sC6z
                     $dShow14_sC6A
                     s_sC6D
                     a1_sC6F
                     b1_sC6G
                     c1_sC6H
                     d1_sC6I
                     e1_sC6J
                     f13_sC6K
                     g1_sC6L
                     h1_sC6M
                     i1_sC6N
                     j1_sC6O
                     k1_sC6P
                     l1_sC6Q
                     m1_sC6R
                     n1_sC6S
                     o1_sC6T] \u []
                        let {
                          sat_sC7o [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sC6D]; } in
                        let {
                          sat_sC78 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow14_sC6A o1_sC6T] \u []
                                  GHC.Show.showsPrec $dShow14_sC6A GHC.Show.$fShow(,)1 o1_sC6T; } in
                        let {
                          sat_sC79 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC78 GHC.Types.[]]; } in
                        let {
                          sat_sC77 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow13_sC6z n1_sC6S] \u []
                                  GHC.Show.showsPrec $dShow13_sC6z GHC.Show.$fShow(,)1 n1_sC6S; } in
                        let {
                          sat_sC7a [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC77 sat_sC79]; } in
                        let {
                          sat_sC76 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow12_sC6y m1_sC6R] \u []
                                  GHC.Show.showsPrec $dShow12_sC6y GHC.Show.$fShow(,)1 m1_sC6R; } in
                        let {
                          sat_sC7b [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC76 sat_sC7a]; } in
                        let {
                          sat_sC75 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow11_sC6x l1_sC6Q] \u []
                                  GHC.Show.showsPrec $dShow11_sC6x GHC.Show.$fShow(,)1 l1_sC6Q; } in
                        let {
                          sat_sC7c [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC75 sat_sC7b]; } in
                        let {
                          sat_sC74 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow10_sC6w k1_sC6P] \u []
                                  GHC.Show.showsPrec $dShow10_sC6w GHC.Show.$fShow(,)1 k1_sC6P; } in
                        let {
                          sat_sC7d [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC74 sat_sC7c]; } in
                        let {
                          sat_sC73 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sC6v j1_sC6O] \u []
                                  GHC.Show.showsPrec $dShow9_sC6v GHC.Show.$fShow(,)1 j1_sC6O; } in
                        let {
                          sat_sC7e [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC73 sat_sC7d]; } in
                        let {
                          sat_sC72 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sC6u i1_sC6N] \u []
                                  GHC.Show.showsPrec $dShow8_sC6u GHC.Show.$fShow(,)1 i1_sC6N; } in
                        let {
                          sat_sC7f [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC72 sat_sC7e]; } in
                        let {
                          sat_sC71 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sC6t h1_sC6M] \u []
                                  GHC.Show.showsPrec $dShow7_sC6t GHC.Show.$fShow(,)1 h1_sC6M; } in
                        let {
                          sat_sC7g [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC71 sat_sC7f]; } in
                        let {
                          sat_sC70 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sC6s g1_sC6L] \u []
                                  GHC.Show.showsPrec $dShow6_sC6s GHC.Show.$fShow(,)1 g1_sC6L; } in
                        let {
                          sat_sC7h [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC70 sat_sC7g]; } in
                        let {
                          sat_sC6Z [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sC6r f13_sC6K] \u []
                                  GHC.Show.showsPrec $dShow5_sC6r GHC.Show.$fShow(,)1 f13_sC6K; } in
                        let {
                          sat_sC7i [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC6Z sat_sC7h]; } in
                        let {
                          sat_sC6Y [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sC6q e1_sC6J] \u []
                                  GHC.Show.showsPrec $dShow4_sC6q GHC.Show.$fShow(,)1 e1_sC6J; } in
                        let {
                          sat_sC7j [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC6Y sat_sC7i]; } in
                        let {
                          sat_sC6X [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sC6p d1_sC6I] \u []
                                  GHC.Show.showsPrec $dShow3_sC6p GHC.Show.$fShow(,)1 d1_sC6I; } in
                        let {
                          sat_sC7k [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC6X sat_sC7j]; } in
                        let {
                          sat_sC6W [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sC6o c1_sC6H] \u []
                                  GHC.Show.showsPrec $dShow2_sC6o GHC.Show.$fShow(,)1 c1_sC6H; } in
                        let {
                          sat_sC7l [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC6W sat_sC7k]; } in
                        let {
                          sat_sC6V [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sC6n b1_sC6G] \u []
                                  GHC.Show.showsPrec $dShow1_sC6n GHC.Show.$fShow(,)1 b1_sC6G; } in
                        let {
                          sat_sC7m [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC6V sat_sC7l]; } in
                        let {
                          sat_sC6U [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sC6m a1_sC6F] \u []
                                  GHC.Show.showsPrec $dShow_sC6m GHC.Show.$fShow(,)1 a1_sC6F; } in
                        let {
                          sat_sC7n [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sC6U sat_sC7m];
                        } in  go2_rC0p sat_sC7n sat_sC7o;
              } in  : [GHC.Show.$fShow(,)4 sat_sC7p];
        };

GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n,
      GHC.Show.Show o) =>
     (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) -> GHC.Base.String
[GblId,
 Arity=16,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sC7q
           $dShow1_sC7r
           $dShow2_sC7s
           $dShow3_sC7t
           $dShow4_sC7u
           $dShow5_sC7v
           $dShow6_sC7w
           $dShow7_sC7x
           $dShow8_sC7y
           $dShow9_sC7z
           $dShow10_sC7A
           $dShow11_sC7B
           $dShow12_sC7C
           $dShow13_sC7D
           $dShow14_sC7E
           x_sC7F]
        GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
            $dShow_sC7q
            $dShow1_sC7r
            $dShow2_sC7s
            $dShow3_sC7t
            $dShow4_sC7u
            $dShow5_sC7v
            $dShow6_sC7w
            $dShow7_sC7x
            $dShow8_sC7y
            $dShow9_sC7z
            $dShow10_sC7A
            $dShow11_sC7B
            $dShow12_sC7C
            $dShow13_sC7D
            $dShow14_sC7E
            GHC.Show.$fShow(,)1
            x_sC7F
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n,
      GHC.Show.Show o) =>
     [(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)] -> GHC.Show.ShowS
[GblId,
 Arity=17,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sC7G
           $dShow1_sC7H
           $dShow2_sC7I
           $dShow3_sC7J
           $dShow4_sC7K
           $dShow5_sC7L
           $dShow6_sC7M
           $dShow7_sC7N
           $dShow8_sC7O
           $dShow9_sC7P
           $dShow10_sC7Q
           $dShow11_sC7R
           $dShow12_sC7S
           $dShow13_sC7T
           $dShow14_sC7U
           ls_sC7V
           s_sC7W]
        let {
          sat_sC7X [Occ=Once]
            :: (a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
                h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sC7G
               $dShow1_sC7H
               $dShow2_sC7I
               $dShow3_sC7J
               $dShow4_sC7K
               $dShow5_sC7L
               $dShow6_sC7M
               $dShow7_sC7N
               $dShow8_sC7O
               $dShow9_sC7P
               $dShow10_sC7Q
               $dShow11_sC7R
               $dShow12_sC7S
               $dShow13_sC7T
               $dShow14_sC7U] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sC7G
                      $dShow1_sC7H
                      $dShow2_sC7I
                      $dShow3_sC7J
                      $dShow4_sC7K
                      $dShow5_sC7L
                      $dShow6_sC7M
                      $dShow7_sC7N
                      $dShow8_sC7O
                      $dShow9_sC7P
                      $dShow10_sC7Q
                      $dShow11_sC7R
                      $dShow12_sC7S
                      $dShow13_sC7T
                      $dShow14_sC7U
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sC7X ls_sC7V s_sC7W;

GHC.Show.$fShow(,,,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n,
      GHC.Show.Show o) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
[GblId[DFunId],
 Arity=15,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sC7Y
           $dShow1_sC7Z
           $dShow2_sC80
           $dShow3_sC81
           $dShow4_sC82
           $dShow5_sC83
           $dShow6_sC84
           $dShow7_sC85
           $dShow8_sC86
           $dShow9_sC87
           $dShow10_sC88
           $dShow11_sC89
           $dShow12_sC8a
           $dShow13_sC8b
           $dShow14_sC8c]
        let {
          sat_sC8f [Occ=Once]
            :: [(a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
                 h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sC7Y
               $dShow1_sC7Z
               $dShow2_sC80
               $dShow3_sC81
               $dShow4_sC82
               $dShow5_sC83
               $dShow6_sC84
               $dShow7_sC85
               $dShow8_sC86
               $dShow9_sC87
               $dShow10_sC88
               $dShow11_sC89
               $dShow12_sC8a
               $dShow13_sC8b
               $dShow14_sC8c] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList
                      $dShow_sC7Y
                      $dShow1_sC7Z
                      $dShow2_sC80
                      $dShow3_sC81
                      $dShow4_sC82
                      $dShow5_sC83
                      $dShow6_sC84
                      $dShow7_sC85
                      $dShow8_sC86
                      $dShow9_sC87
                      $dShow10_sC88
                      $dShow11_sC89
                      $dShow12_sC8a
                      $dShow13_sC8b
                      $dShow14_sC8c
                      eta_B2
                      eta_B1; } in
        let {
          sat_sC8e [Occ=Once]
            :: (a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
                h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sC7Y
               $dShow1_sC7Z
               $dShow2_sC80
               $dShow3_sC81
               $dShow4_sC82
               $dShow5_sC83
               $dShow6_sC84
               $dShow7_sC85
               $dShow8_sC86
               $dShow9_sC87
               $dShow10_sC88
               $dShow11_sC89
               $dShow12_sC8a
               $dShow13_sC8b
               $dShow14_sC8c] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow
                      $dShow_sC7Y
                      $dShow1_sC7Z
                      $dShow2_sC80
                      $dShow3_sC81
                      $dShow4_sC82
                      $dShow5_sC83
                      $dShow6_sC84
                      $dShow7_sC85
                      $dShow8_sC86
                      $dShow9_sC87
                      $dShow10_sC88
                      $dShow11_sC89
                      $dShow12_sC8a
                      $dShow13_sC8b
                      $dShow14_sC8c
                      eta_B1; } in
        let {
          sat_sC8d [Occ=Once]
            :: GHC.Types.Int
               -> (a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
                   h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sC7Y
               $dShow1_sC7Z
               $dShow2_sC80
               $dShow3_sC81
               $dShow4_sC82
               $dShow5_sC83
               $dShow6_sC84
               $dShow7_sC85
               $dShow8_sC86
               $dShow9_sC87
               $dShow10_sC88
               $dShow11_sC89
               $dShow12_sC8a
               $dShow13_sC8b
               $dShow14_sC8c] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sC7Y
                      $dShow1_sC7Z
                      $dShow2_sC80
                      $dShow3_sC81
                      $dShow4_sC82
                      $dShow5_sC83
                      $dShow6_sC84
                      $dShow7_sC85
                      $dShow8_sC86
                      $dShow9_sC87
                      $dShow10_sC88
                      $dShow11_sC89
                      $dShow12_sC8a
                      $dShow13_sC8b
                      $dShow14_sC8c
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sC8d sat_sC8e sat_sC8f];

GHC.Show.$fShow(,,,,,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sC8g eta_sC8h]
        case ds_sC8g of {
          [] -> lvl11_rC0o;
          : x_sC8k [Occ=Once*!] ds1_sC8l [Occ=Once!] ->
              case ds1_sC8l of wild1_sC8m {
                [] -> x_sC8k eta_sC8h;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sC8p [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sC8h wild1_sC8m] \u []
                              GHC.Show.$fShow(,,,,,,,,,,,,,)_go2 wild1_sC8m eta_sC8h; } in
                    let {
                      sat_sC8q [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sC8p];
                    } in  x_sC8k sat_sC8q;
              };
        };

GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k l m n.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n) =>
     GHC.Types.Int
     -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n) -> GHC.Show.ShowS
[GblId,
 Arity=17,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sC8r
           $dShow1_sC8s
           $dShow2_sC8t
           $dShow3_sC8u
           $dShow4_sC8v
           $dShow5_sC8w
           $dShow6_sC8x
           $dShow7_sC8y
           $dShow8_sC8z
           $dShow9_sC8A
           $dShow10_sC8B
           $dShow11_sC8C
           $dShow12_sC8D
           $dShow13_sC8E
           ds_sC8F
           ds1_sC8G
           s_sC8H]
        case ds1_sC8G of {
          (,,,,,,,,,,,,,) a1_sC8J [Occ=Once]
                          b1_sC8K [Occ=Once]
                          c1_sC8L [Occ=Once]
                          d1_sC8M [Occ=Once]
                          e1_sC8N [Occ=Once]
                          f13_sC8O [Occ=Once]
                          g1_sC8P [Occ=Once]
                          h1_sC8Q [Occ=Once]
                          i1_sC8R [Occ=Once]
                          j1_sC8S [Occ=Once]
                          k1_sC8T [Occ=Once]
                          l1_sC8U [Occ=Once]
                          m1_sC8V [Occ=Once]
                          n1_sC8W [Occ=Once] ->
              let {
                sat_sC9q [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sC8r
                     $dShow1_sC8s
                     $dShow2_sC8t
                     $dShow3_sC8u
                     $dShow4_sC8v
                     $dShow5_sC8w
                     $dShow6_sC8x
                     $dShow7_sC8y
                     $dShow8_sC8z
                     $dShow9_sC8A
                     $dShow10_sC8B
                     $dShow11_sC8C
                     $dShow12_sC8D
                     $dShow13_sC8E
                     s_sC8H
                     a1_sC8J
                     b1_sC8K
                     c1_sC8L
                     d1_sC8M
                     e1_sC8N
                     f13_sC8O
                     g1_sC8P
                     h1_sC8Q
                     i1_sC8R
                     j1_sC8S
                     k1_sC8T
                     l1_sC8U
                     m1_sC8V
                     n1_sC8W] \u []
                        let {
                          sat_sC9p [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sC8H]; } in
                        let {
                          sat_sC9a [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow13_sC8E n1_sC8W] \u []
                                  GHC.Show.showsPrec $dShow13_sC8E GHC.Show.$fShow(,)1 n1_sC8W; } in
                        let {
                          sat_sC9b [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC9a GHC.Types.[]]; } in
                        let {
                          sat_sC99 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow12_sC8D m1_sC8V] \u []
                                  GHC.Show.showsPrec $dShow12_sC8D GHC.Show.$fShow(,)1 m1_sC8V; } in
                        let {
                          sat_sC9c [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC99 sat_sC9b]; } in
                        let {
                          sat_sC98 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow11_sC8C l1_sC8U] \u []
                                  GHC.Show.showsPrec $dShow11_sC8C GHC.Show.$fShow(,)1 l1_sC8U; } in
                        let {
                          sat_sC9d [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC98 sat_sC9c]; } in
                        let {
                          sat_sC97 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow10_sC8B k1_sC8T] \u []
                                  GHC.Show.showsPrec $dShow10_sC8B GHC.Show.$fShow(,)1 k1_sC8T; } in
                        let {
                          sat_sC9e [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC97 sat_sC9d]; } in
                        let {
                          sat_sC96 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sC8A j1_sC8S] \u []
                                  GHC.Show.showsPrec $dShow9_sC8A GHC.Show.$fShow(,)1 j1_sC8S; } in
                        let {
                          sat_sC9f [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC96 sat_sC9e]; } in
                        let {
                          sat_sC95 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sC8z i1_sC8R] \u []
                                  GHC.Show.showsPrec $dShow8_sC8z GHC.Show.$fShow(,)1 i1_sC8R; } in
                        let {
                          sat_sC9g [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC95 sat_sC9f]; } in
                        let {
                          sat_sC94 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sC8y h1_sC8Q] \u []
                                  GHC.Show.showsPrec $dShow7_sC8y GHC.Show.$fShow(,)1 h1_sC8Q; } in
                        let {
                          sat_sC9h [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC94 sat_sC9g]; } in
                        let {
                          sat_sC93 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sC8x g1_sC8P] \u []
                                  GHC.Show.showsPrec $dShow6_sC8x GHC.Show.$fShow(,)1 g1_sC8P; } in
                        let {
                          sat_sC9i [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC93 sat_sC9h]; } in
                        let {
                          sat_sC92 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sC8w f13_sC8O] \u []
                                  GHC.Show.showsPrec $dShow5_sC8w GHC.Show.$fShow(,)1 f13_sC8O; } in
                        let {
                          sat_sC9j [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC92 sat_sC9i]; } in
                        let {
                          sat_sC91 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sC8v e1_sC8N] \u []
                                  GHC.Show.showsPrec $dShow4_sC8v GHC.Show.$fShow(,)1 e1_sC8N; } in
                        let {
                          sat_sC9k [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC91 sat_sC9j]; } in
                        let {
                          sat_sC90 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sC8u d1_sC8M] \u []
                                  GHC.Show.showsPrec $dShow3_sC8u GHC.Show.$fShow(,)1 d1_sC8M; } in
                        let {
                          sat_sC9l [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC90 sat_sC9k]; } in
                        let {
                          sat_sC8Z [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sC8t c1_sC8L] \u []
                                  GHC.Show.showsPrec $dShow2_sC8t GHC.Show.$fShow(,)1 c1_sC8L; } in
                        let {
                          sat_sC9m [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC8Z sat_sC9l]; } in
                        let {
                          sat_sC8Y [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sC8s b1_sC8K] \u []
                                  GHC.Show.showsPrec $dShow1_sC8s GHC.Show.$fShow(,)1 b1_sC8K; } in
                        let {
                          sat_sC9n [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sC8Y sat_sC9m]; } in
                        let {
                          sat_sC8X [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sC8r a1_sC8J] \u []
                                  GHC.Show.showsPrec $dShow_sC8r GHC.Show.$fShow(,)1 a1_sC8J; } in
                        let {
                          sat_sC9o [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sC8X sat_sC9n];
                        } in  GHC.Show.$fShow(,,,,,,,,,,,,,)_go2 sat_sC9o sat_sC9p;
              } in  : [GHC.Show.$fShow(,)4 sat_sC9q];
        };

GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k l m n.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n) =>
     (a, b, c, d, e, f, g, h, i, j, k, l, m, n) -> GHC.Base.String
[GblId,
 Arity=15,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sC9r
           $dShow1_sC9s
           $dShow2_sC9t
           $dShow3_sC9u
           $dShow4_sC9v
           $dShow5_sC9w
           $dShow6_sC9x
           $dShow7_sC9y
           $dShow8_sC9z
           $dShow9_sC9A
           $dShow10_sC9B
           $dShow11_sC9C
           $dShow12_sC9D
           $dShow13_sC9E
           x_sC9F]
        GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
            $dShow_sC9r
            $dShow1_sC9s
            $dShow2_sC9t
            $dShow3_sC9u
            $dShow4_sC9v
            $dShow5_sC9w
            $dShow6_sC9x
            $dShow7_sC9y
            $dShow8_sC9z
            $dShow9_sC9A
            $dShow10_sC9B
            $dShow11_sC9C
            $dShow12_sC9D
            $dShow13_sC9E
            GHC.Show.$fShow(,)1
            x_sC9F
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k l m n.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n) =>
     [(a, b, c, d, e, f, g, h, i, j, k, l, m, n)] -> GHC.Show.ShowS
[GblId,
 Arity=16,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sC9G
           $dShow1_sC9H
           $dShow2_sC9I
           $dShow3_sC9J
           $dShow4_sC9K
           $dShow5_sC9L
           $dShow6_sC9M
           $dShow7_sC9N
           $dShow8_sC9O
           $dShow9_sC9P
           $dShow10_sC9Q
           $dShow11_sC9R
           $dShow12_sC9S
           $dShow13_sC9T
           ls_sC9U
           s_sC9V]
        let {
          sat_sC9W [Occ=Once]
            :: (a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
                h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sC9G
               $dShow1_sC9H
               $dShow2_sC9I
               $dShow3_sC9J
               $dShow4_sC9K
               $dShow5_sC9L
               $dShow6_sC9M
               $dShow7_sC9N
               $dShow8_sC9O
               $dShow9_sC9P
               $dShow10_sC9Q
               $dShow11_sC9R
               $dShow12_sC9S
               $dShow13_sC9T] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sC9G
                      $dShow1_sC9H
                      $dShow2_sC9I
                      $dShow3_sC9J
                      $dShow4_sC9K
                      $dShow5_sC9L
                      $dShow6_sC9M
                      $dShow7_sC9N
                      $dShow8_sC9O
                      $dShow9_sC9P
                      $dShow10_sC9Q
                      $dShow11_sC9R
                      $dShow12_sC9S
                      $dShow13_sC9T
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sC9W ls_sC9U s_sC9V;

GHC.Show.$fShow(,,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m n.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
[GblId[DFunId],
 Arity=14,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sC9X
           $dShow1_sC9Y
           $dShow2_sC9Z
           $dShow3_sCa0
           $dShow4_sCa1
           $dShow5_sCa2
           $dShow6_sCa3
           $dShow7_sCa4
           $dShow8_sCa5
           $dShow9_sCa6
           $dShow10_sCa7
           $dShow11_sCa8
           $dShow12_sCa9
           $dShow13_sCaa]
        let {
          sat_sCad [Occ=Once]
            :: [(a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
                 h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sC9X
               $dShow1_sC9Y
               $dShow2_sC9Z
               $dShow3_sCa0
               $dShow4_sCa1
               $dShow5_sCa2
               $dShow6_sCa3
               $dShow7_sCa4
               $dShow8_sCa5
               $dShow9_sCa6
               $dShow10_sCa7
               $dShow11_sCa8
               $dShow12_sCa9
               $dShow13_sCaa] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList
                      $dShow_sC9X
                      $dShow1_sC9Y
                      $dShow2_sC9Z
                      $dShow3_sCa0
                      $dShow4_sCa1
                      $dShow5_sCa2
                      $dShow6_sCa3
                      $dShow7_sCa4
                      $dShow8_sCa5
                      $dShow9_sCa6
                      $dShow10_sCa7
                      $dShow11_sCa8
                      $dShow12_sCa9
                      $dShow13_sCaa
                      eta_B2
                      eta_B1; } in
        let {
          sat_sCac [Occ=Once]
            :: (a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
                h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sC9X
               $dShow1_sC9Y
               $dShow2_sC9Z
               $dShow3_sCa0
               $dShow4_sCa1
               $dShow5_sCa2
               $dShow6_sCa3
               $dShow7_sCa4
               $dShow8_sCa5
               $dShow9_sCa6
               $dShow10_sCa7
               $dShow11_sCa8
               $dShow12_sCa9
               $dShow13_sCaa] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow
                      $dShow_sC9X
                      $dShow1_sC9Y
                      $dShow2_sC9Z
                      $dShow3_sCa0
                      $dShow4_sCa1
                      $dShow5_sCa2
                      $dShow6_sCa3
                      $dShow7_sCa4
                      $dShow8_sCa5
                      $dShow9_sCa6
                      $dShow10_sCa7
                      $dShow11_sCa8
                      $dShow12_sCa9
                      $dShow13_sCaa
                      eta_B1; } in
        let {
          sat_sCab [Occ=Once]
            :: GHC.Types.Int
               -> (a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
                   h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sC9X
               $dShow1_sC9Y
               $dShow2_sC9Z
               $dShow3_sCa0
               $dShow4_sCa1
               $dShow5_sCa2
               $dShow6_sCa3
               $dShow7_sCa4
               $dShow8_sCa5
               $dShow9_sCa6
               $dShow10_sCa7
               $dShow11_sCa8
               $dShow12_sCa9
               $dShow13_sCaa] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sC9X
                      $dShow1_sC9Y
                      $dShow2_sC9Z
                      $dShow3_sCa0
                      $dShow4_sCa1
                      $dShow5_sCa2
                      $dShow6_sCa3
                      $dShow7_sCa4
                      $dShow8_sCa5
                      $dShow9_sCa6
                      $dShow10_sCa7
                      $dShow11_sCa8
                      $dShow12_sCa9
                      $dShow13_sCaa
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sCab sat_sCac sat_sCad];

GHC.Show.$fShow(,,,,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCae eta_sCaf]
        case ds_sCae of {
          [] -> lvl11_rC0o;
          : x_sCai [Occ=Once*!] ds1_sCaj [Occ=Once!] ->
              case ds1_sCaj of wild1_sCak {
                [] -> x_sCai eta_sCaf;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCan [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCaf wild1_sCak] \u []
                              GHC.Show.$fShow(,,,,,,,,,,,,)_go2 wild1_sCak eta_sCaf; } in
                    let {
                      sat_sCao [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCan];
                    } in  x_sCai sat_sCao;
              };
        };

GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k l m.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m) =>
     GHC.Types.Int
     -> (a, b, c, d, e, f, g, h, i, j, k, l, m) -> GHC.Show.ShowS
[GblId,
 Arity=16,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCap
           $dShow1_sCaq
           $dShow2_sCar
           $dShow3_sCas
           $dShow4_sCat
           $dShow5_sCau
           $dShow6_sCav
           $dShow7_sCaw
           $dShow8_sCax
           $dShow9_sCay
           $dShow10_sCaz
           $dShow11_sCaA
           $dShow12_sCaB
           ds_sCaC
           ds1_sCaD
           s_sCaE]
        case ds1_sCaD of {
          (,,,,,,,,,,,,) a1_sCaG [Occ=Once]
                         b1_sCaH [Occ=Once]
                         c1_sCaI [Occ=Once]
                         d1_sCaJ [Occ=Once]
                         e1_sCaK [Occ=Once]
                         f13_sCaL [Occ=Once]
                         g1_sCaM [Occ=Once]
                         h1_sCaN [Occ=Once]
                         i1_sCaO [Occ=Once]
                         j1_sCaP [Occ=Once]
                         k1_sCaQ [Occ=Once]
                         l1_sCaR [Occ=Once]
                         m1_sCaS [Occ=Once] ->
              let {
                sat_sCbk [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sCap
                     $dShow1_sCaq
                     $dShow2_sCar
                     $dShow3_sCas
                     $dShow4_sCat
                     $dShow5_sCau
                     $dShow6_sCav
                     $dShow7_sCaw
                     $dShow8_sCax
                     $dShow9_sCay
                     $dShow10_sCaz
                     $dShow11_sCaA
                     $dShow12_sCaB
                     s_sCaE
                     a1_sCaG
                     b1_sCaH
                     c1_sCaI
                     d1_sCaJ
                     e1_sCaK
                     f13_sCaL
                     g1_sCaM
                     h1_sCaN
                     i1_sCaO
                     j1_sCaP
                     k1_sCaQ
                     l1_sCaR
                     m1_sCaS] \u []
                        let {
                          sat_sCbj [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sCaE]; } in
                        let {
                          sat_sCb5 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow12_sCaB m1_sCaS] \u []
                                  GHC.Show.showsPrec $dShow12_sCaB GHC.Show.$fShow(,)1 m1_sCaS; } in
                        let {
                          sat_sCb6 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCb5 GHC.Types.[]]; } in
                        let {
                          sat_sCb4 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow11_sCaA l1_sCaR] \u []
                                  GHC.Show.showsPrec $dShow11_sCaA GHC.Show.$fShow(,)1 l1_sCaR; } in
                        let {
                          sat_sCb7 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCb4 sat_sCb6]; } in
                        let {
                          sat_sCb3 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow10_sCaz k1_sCaQ] \u []
                                  GHC.Show.showsPrec $dShow10_sCaz GHC.Show.$fShow(,)1 k1_sCaQ; } in
                        let {
                          sat_sCb8 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCb3 sat_sCb7]; } in
                        let {
                          sat_sCb2 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sCay j1_sCaP] \u []
                                  GHC.Show.showsPrec $dShow9_sCay GHC.Show.$fShow(,)1 j1_sCaP; } in
                        let {
                          sat_sCb9 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCb2 sat_sCb8]; } in
                        let {
                          sat_sCb1 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sCax i1_sCaO] \u []
                                  GHC.Show.showsPrec $dShow8_sCax GHC.Show.$fShow(,)1 i1_sCaO; } in
                        let {
                          sat_sCba [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCb1 sat_sCb9]; } in
                        let {
                          sat_sCb0 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sCaw h1_sCaN] \u []
                                  GHC.Show.showsPrec $dShow7_sCaw GHC.Show.$fShow(,)1 h1_sCaN; } in
                        let {
                          sat_sCbb [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCb0 sat_sCba]; } in
                        let {
                          sat_sCaZ [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sCav g1_sCaM] \u []
                                  GHC.Show.showsPrec $dShow6_sCav GHC.Show.$fShow(,)1 g1_sCaM; } in
                        let {
                          sat_sCbc [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCaZ sat_sCbb]; } in
                        let {
                          sat_sCaY [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sCau f13_sCaL] \u []
                                  GHC.Show.showsPrec $dShow5_sCau GHC.Show.$fShow(,)1 f13_sCaL; } in
                        let {
                          sat_sCbd [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCaY sat_sCbc]; } in
                        let {
                          sat_sCaX [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sCat e1_sCaK] \u []
                                  GHC.Show.showsPrec $dShow4_sCat GHC.Show.$fShow(,)1 e1_sCaK; } in
                        let {
                          sat_sCbe [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCaX sat_sCbd]; } in
                        let {
                          sat_sCaW [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sCas d1_sCaJ] \u []
                                  GHC.Show.showsPrec $dShow3_sCas GHC.Show.$fShow(,)1 d1_sCaJ; } in
                        let {
                          sat_sCbf [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCaW sat_sCbe]; } in
                        let {
                          sat_sCaV [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sCar c1_sCaI] \u []
                                  GHC.Show.showsPrec $dShow2_sCar GHC.Show.$fShow(,)1 c1_sCaI; } in
                        let {
                          sat_sCbg [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCaV sat_sCbf]; } in
                        let {
                          sat_sCaU [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sCaq b1_sCaH] \u []
                                  GHC.Show.showsPrec $dShow1_sCaq GHC.Show.$fShow(,)1 b1_sCaH; } in
                        let {
                          sat_sCbh [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCaU sat_sCbg]; } in
                        let {
                          sat_sCaT [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sCap a1_sCaG] \u []
                                  GHC.Show.showsPrec $dShow_sCap GHC.Show.$fShow(,)1 a1_sCaG; } in
                        let {
                          sat_sCbi [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sCaT sat_sCbh];
                        } in  GHC.Show.$fShow(,,,,,,,,,,,,)_go2 sat_sCbi sat_sCbj;
              } in  : [GHC.Show.$fShow(,)4 sat_sCbk];
        };

GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k l m.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m) =>
     (a, b, c, d, e, f, g, h, i, j, k, l, m) -> GHC.Base.String
[GblId,
 Arity=14,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCbl
           $dShow1_sCbm
           $dShow2_sCbn
           $dShow3_sCbo
           $dShow4_sCbp
           $dShow5_sCbq
           $dShow6_sCbr
           $dShow7_sCbs
           $dShow8_sCbt
           $dShow9_sCbu
           $dShow10_sCbv
           $dShow11_sCbw
           $dShow12_sCbx
           x_sCby]
        GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
            $dShow_sCbl
            $dShow1_sCbm
            $dShow2_sCbn
            $dShow3_sCbo
            $dShow4_sCbp
            $dShow5_sCbq
            $dShow6_sCbr
            $dShow7_sCbs
            $dShow8_sCbt
            $dShow9_sCbu
            $dShow10_sCbv
            $dShow11_sCbw
            $dShow12_sCbx
            GHC.Show.$fShow(,)1
            x_sCby
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k l m.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m) =>
     [(a, b, c, d, e, f, g, h, i, j, k, l, m)] -> GHC.Show.ShowS
[GblId,
 Arity=15,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCbz
           $dShow1_sCbA
           $dShow2_sCbB
           $dShow3_sCbC
           $dShow4_sCbD
           $dShow5_sCbE
           $dShow6_sCbF
           $dShow7_sCbG
           $dShow8_sCbH
           $dShow9_sCbI
           $dShow10_sCbJ
           $dShow11_sCbK
           $dShow12_sCbL
           ls_sCbM
           s_sCbN]
        let {
          sat_sCbO [Occ=Once]
            :: (a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
                h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCbz
               $dShow1_sCbA
               $dShow2_sCbB
               $dShow3_sCbC
               $dShow4_sCbD
               $dShow5_sCbE
               $dShow6_sCbF
               $dShow7_sCbG
               $dShow8_sCbH
               $dShow9_sCbI
               $dShow10_sCbJ
               $dShow11_sCbK
               $dShow12_sCbL] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sCbz
                      $dShow1_sCbA
                      $dShow2_sCbB
                      $dShow3_sCbC
                      $dShow4_sCbD
                      $dShow5_sCbE
                      $dShow6_sCbF
                      $dShow7_sCbG
                      $dShow8_sCbH
                      $dShow9_sCbI
                      $dShow10_sCbJ
                      $dShow11_sCbK
                      $dShow12_sCbL
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sCbO ls_sCbM s_sCbN;

GHC.Show.$fShow(,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l, m)
[GblId[DFunId],
 Arity=13,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sCbP
           $dShow1_sCbQ
           $dShow2_sCbR
           $dShow3_sCbS
           $dShow4_sCbT
           $dShow5_sCbU
           $dShow6_sCbV
           $dShow7_sCbW
           $dShow8_sCbX
           $dShow9_sCbY
           $dShow10_sCbZ
           $dShow11_sCc0
           $dShow12_sCc1]
        let {
          sat_sCc4 [Occ=Once]
            :: [(a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
                 h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCbP
               $dShow1_sCbQ
               $dShow2_sCbR
               $dShow3_sCbS
               $dShow4_sCbT
               $dShow5_sCbU
               $dShow6_sCbV
               $dShow7_sCbW
               $dShow8_sCbX
               $dShow9_sCbY
               $dShow10_sCbZ
               $dShow11_sCc0
               $dShow12_sCc1] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList
                      $dShow_sCbP
                      $dShow1_sCbQ
                      $dShow2_sCbR
                      $dShow3_sCbS
                      $dShow4_sCbT
                      $dShow5_sCbU
                      $dShow6_sCbV
                      $dShow7_sCbW
                      $dShow8_sCbX
                      $dShow9_sCbY
                      $dShow10_sCbZ
                      $dShow11_sCc0
                      $dShow12_sCc1
                      eta_B2
                      eta_B1; } in
        let {
          sat_sCc3 [Occ=Once]
            :: (a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
                h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sCbP
               $dShow1_sCbQ
               $dShow2_sCbR
               $dShow3_sCbS
               $dShow4_sCbT
               $dShow5_sCbU
               $dShow6_sCbV
               $dShow7_sCbW
               $dShow8_sCbX
               $dShow9_sCbY
               $dShow10_sCbZ
               $dShow11_sCc0
               $dShow12_sCc1] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow
                      $dShow_sCbP
                      $dShow1_sCbQ
                      $dShow2_sCbR
                      $dShow3_sCbS
                      $dShow4_sCbT
                      $dShow5_sCbU
                      $dShow6_sCbV
                      $dShow7_sCbW
                      $dShow8_sCbX
                      $dShow9_sCbY
                      $dShow10_sCbZ
                      $dShow11_sCc0
                      $dShow12_sCc1
                      eta_B1; } in
        let {
          sat_sCc2 [Occ=Once]
            :: GHC.Types.Int
               -> (a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
                   h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCbP
               $dShow1_sCbQ
               $dShow2_sCbR
               $dShow3_sCbS
               $dShow4_sCbT
               $dShow5_sCbU
               $dShow6_sCbV
               $dShow7_sCbW
               $dShow8_sCbX
               $dShow9_sCbY
               $dShow10_sCbZ
               $dShow11_sCc0
               $dShow12_sCc1] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sCbP
                      $dShow1_sCbQ
                      $dShow2_sCbR
                      $dShow3_sCbS
                      $dShow4_sCbT
                      $dShow5_sCbU
                      $dShow6_sCbV
                      $dShow7_sCbW
                      $dShow8_sCbX
                      $dShow9_sCbY
                      $dShow10_sCbZ
                      $dShow11_sCc0
                      $dShow12_sCc1
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sCc2 sat_sCc3 sat_sCc4];

GHC.Show.$fShow(,,,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCc5 eta_sCc6]
        case ds_sCc5 of {
          [] -> lvl11_rC0o;
          : x_sCc9 [Occ=Once*!] ds1_sCca [Occ=Once!] ->
              case ds1_sCca of wild1_sCcb {
                [] -> x_sCc9 eta_sCc6;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCce [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCc6 wild1_sCcb] \u []
                              GHC.Show.$fShow(,,,,,,,,,,,)_go2 wild1_sCcb eta_sCc6; } in
                    let {
                      sat_sCcf [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCce];
                    } in  x_sCc9 sat_sCcf;
              };
        };

GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k l.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l) =>
     GHC.Types.Int
     -> (a, b, c, d, e, f, g, h, i, j, k, l) -> GHC.Show.ShowS
[GblId,
 Arity=15,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCcg
           $dShow1_sCch
           $dShow2_sCci
           $dShow3_sCcj
           $dShow4_sCck
           $dShow5_sCcl
           $dShow6_sCcm
           $dShow7_sCcn
           $dShow8_sCco
           $dShow9_sCcp
           $dShow10_sCcq
           $dShow11_sCcr
           ds_sCcs
           ds1_sCct
           s_sCcu]
        case ds1_sCct of {
          (,,,,,,,,,,,) a1_sCcw [Occ=Once]
                        b1_sCcx [Occ=Once]
                        c1_sCcy [Occ=Once]
                        d1_sCcz [Occ=Once]
                        e1_sCcA [Occ=Once]
                        f13_sCcB [Occ=Once]
                        g1_sCcC [Occ=Once]
                        h1_sCcD [Occ=Once]
                        i1_sCcE [Occ=Once]
                        j1_sCcF [Occ=Once]
                        k1_sCcG [Occ=Once]
                        l1_sCcH [Occ=Once] ->
              let {
                sat_sCd7 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sCcg
                     $dShow1_sCch
                     $dShow2_sCci
                     $dShow3_sCcj
                     $dShow4_sCck
                     $dShow5_sCcl
                     $dShow6_sCcm
                     $dShow7_sCcn
                     $dShow8_sCco
                     $dShow9_sCcp
                     $dShow10_sCcq
                     $dShow11_sCcr
                     s_sCcu
                     a1_sCcw
                     b1_sCcx
                     c1_sCcy
                     d1_sCcz
                     e1_sCcA
                     f13_sCcB
                     g1_sCcC
                     h1_sCcD
                     i1_sCcE
                     j1_sCcF
                     k1_sCcG
                     l1_sCcH] \u []
                        let {
                          sat_sCd6 [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sCcu]; } in
                        let {
                          sat_sCcT [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow11_sCcr l1_sCcH] \u []
                                  GHC.Show.showsPrec $dShow11_sCcr GHC.Show.$fShow(,)1 l1_sCcH; } in
                        let {
                          sat_sCcU [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCcT GHC.Types.[]]; } in
                        let {
                          sat_sCcS [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow10_sCcq k1_sCcG] \u []
                                  GHC.Show.showsPrec $dShow10_sCcq GHC.Show.$fShow(,)1 k1_sCcG; } in
                        let {
                          sat_sCcV [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCcS sat_sCcU]; } in
                        let {
                          sat_sCcR [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sCcp j1_sCcF] \u []
                                  GHC.Show.showsPrec $dShow9_sCcp GHC.Show.$fShow(,)1 j1_sCcF; } in
                        let {
                          sat_sCcW [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCcR sat_sCcV]; } in
                        let {
                          sat_sCcQ [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sCco i1_sCcE] \u []
                                  GHC.Show.showsPrec $dShow8_sCco GHC.Show.$fShow(,)1 i1_sCcE; } in
                        let {
                          sat_sCcX [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCcQ sat_sCcW]; } in
                        let {
                          sat_sCcP [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sCcn h1_sCcD] \u []
                                  GHC.Show.showsPrec $dShow7_sCcn GHC.Show.$fShow(,)1 h1_sCcD; } in
                        let {
                          sat_sCcY [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCcP sat_sCcX]; } in
                        let {
                          sat_sCcO [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sCcm g1_sCcC] \u []
                                  GHC.Show.showsPrec $dShow6_sCcm GHC.Show.$fShow(,)1 g1_sCcC; } in
                        let {
                          sat_sCcZ [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCcO sat_sCcY]; } in
                        let {
                          sat_sCcN [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sCcl f13_sCcB] \u []
                                  GHC.Show.showsPrec $dShow5_sCcl GHC.Show.$fShow(,)1 f13_sCcB; } in
                        let {
                          sat_sCd0 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCcN sat_sCcZ]; } in
                        let {
                          sat_sCcM [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sCck e1_sCcA] \u []
                                  GHC.Show.showsPrec $dShow4_sCck GHC.Show.$fShow(,)1 e1_sCcA; } in
                        let {
                          sat_sCd1 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCcM sat_sCd0]; } in
                        let {
                          sat_sCcL [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sCcj d1_sCcz] \u []
                                  GHC.Show.showsPrec $dShow3_sCcj GHC.Show.$fShow(,)1 d1_sCcz; } in
                        let {
                          sat_sCd2 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCcL sat_sCd1]; } in
                        let {
                          sat_sCcK [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sCci c1_sCcy] \u []
                                  GHC.Show.showsPrec $dShow2_sCci GHC.Show.$fShow(,)1 c1_sCcy; } in
                        let {
                          sat_sCd3 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCcK sat_sCd2]; } in
                        let {
                          sat_sCcJ [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sCch b1_sCcx] \u []
                                  GHC.Show.showsPrec $dShow1_sCch GHC.Show.$fShow(,)1 b1_sCcx; } in
                        let {
                          sat_sCd4 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCcJ sat_sCd3]; } in
                        let {
                          sat_sCcI [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sCcg a1_sCcw] \u []
                                  GHC.Show.showsPrec $dShow_sCcg GHC.Show.$fShow(,)1 a1_sCcw; } in
                        let {
                          sat_sCd5 [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sCcI sat_sCd4];
                        } in  GHC.Show.$fShow(,,,,,,,,,,,)_go2 sat_sCd5 sat_sCd6;
              } in  : [GHC.Show.$fShow(,)4 sat_sCd7];
        };

GHC.Show.$fShow(,,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k l.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l) =>
     (a, b, c, d, e, f, g, h, i, j, k, l) -> GHC.Base.String
[GblId,
 Arity=13,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCd8
           $dShow1_sCd9
           $dShow2_sCda
           $dShow3_sCdb
           $dShow4_sCdc
           $dShow5_sCdd
           $dShow6_sCde
           $dShow7_sCdf
           $dShow8_sCdg
           $dShow9_sCdh
           $dShow10_sCdi
           $dShow11_sCdj
           x_sCdk]
        GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
            $dShow_sCd8
            $dShow1_sCd9
            $dShow2_sCda
            $dShow3_sCdb
            $dShow4_sCdc
            $dShow5_sCdd
            $dShow6_sCde
            $dShow7_sCdf
            $dShow8_sCdg
            $dShow9_sCdh
            $dShow10_sCdi
            $dShow11_sCdj
            GHC.Show.$fShow(,)1
            x_sCdk
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k l.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l) =>
     [(a, b, c, d, e, f, g, h, i, j, k, l)] -> GHC.Show.ShowS
[GblId,
 Arity=14,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCdl
           $dShow1_sCdm
           $dShow2_sCdn
           $dShow3_sCdo
           $dShow4_sCdp
           $dShow5_sCdq
           $dShow6_sCdr
           $dShow7_sCds
           $dShow8_sCdt
           $dShow9_sCdu
           $dShow10_sCdv
           $dShow11_sCdw
           ls_sCdx
           s_sCdy]
        let {
          sat_sCdz [Occ=Once]
            :: (a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
                h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCdl
               $dShow1_sCdm
               $dShow2_sCdn
               $dShow3_sCdo
               $dShow4_sCdp
               $dShow5_sCdq
               $dShow6_sCdr
               $dShow7_sCds
               $dShow8_sCdt
               $dShow9_sCdu
               $dShow10_sCdv
               $dShow11_sCdw] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sCdl
                      $dShow1_sCdm
                      $dShow2_sCdn
                      $dShow3_sCdo
                      $dShow4_sCdp
                      $dShow5_sCdq
                      $dShow6_sCdr
                      $dShow7_sCds
                      $dShow8_sCdt
                      $dShow9_sCdu
                      $dShow10_sCdv
                      $dShow11_sCdw
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sCdz ls_sCdx s_sCdy;

GHC.Show.$fShow(,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l)
[GblId[DFunId],
 Arity=12,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sCdA
           $dShow1_sCdB
           $dShow2_sCdC
           $dShow3_sCdD
           $dShow4_sCdE
           $dShow5_sCdF
           $dShow6_sCdG
           $dShow7_sCdH
           $dShow8_sCdI
           $dShow9_sCdJ
           $dShow10_sCdK
           $dShow11_sCdL]
        let {
          sat_sCdO [Occ=Once]
            :: [(a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
                 h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCdA
               $dShow1_sCdB
               $dShow2_sCdC
               $dShow3_sCdD
               $dShow4_sCdE
               $dShow5_sCdF
               $dShow6_sCdG
               $dShow7_sCdH
               $dShow8_sCdI
               $dShow9_sCdJ
               $dShow10_sCdK
               $dShow11_sCdL] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList
                      $dShow_sCdA
                      $dShow1_sCdB
                      $dShow2_sCdC
                      $dShow3_sCdD
                      $dShow4_sCdE
                      $dShow5_sCdF
                      $dShow6_sCdG
                      $dShow7_sCdH
                      $dShow8_sCdI
                      $dShow9_sCdJ
                      $dShow10_sCdK
                      $dShow11_sCdL
                      eta_B2
                      eta_B1; } in
        let {
          sat_sCdN [Occ=Once]
            :: (a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
                h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sCdA
               $dShow1_sCdB
               $dShow2_sCdC
               $dShow3_sCdD
               $dShow4_sCdE
               $dShow5_sCdF
               $dShow6_sCdG
               $dShow7_sCdH
               $dShow8_sCdI
               $dShow9_sCdJ
               $dShow10_sCdK
               $dShow11_sCdL] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,)_$cshow
                      $dShow_sCdA
                      $dShow1_sCdB
                      $dShow2_sCdC
                      $dShow3_sCdD
                      $dShow4_sCdE
                      $dShow5_sCdF
                      $dShow6_sCdG
                      $dShow7_sCdH
                      $dShow8_sCdI
                      $dShow9_sCdJ
                      $dShow10_sCdK
                      $dShow11_sCdL
                      eta_B1; } in
        let {
          sat_sCdM [Occ=Once]
            :: GHC.Types.Int
               -> (a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
                   h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCdA
               $dShow1_sCdB
               $dShow2_sCdC
               $dShow3_sCdD
               $dShow4_sCdE
               $dShow5_sCdF
               $dShow6_sCdG
               $dShow7_sCdH
               $dShow8_sCdI
               $dShow9_sCdJ
               $dShow10_sCdK
               $dShow11_sCdL] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sCdA
                      $dShow1_sCdB
                      $dShow2_sCdC
                      $dShow3_sCdD
                      $dShow4_sCdE
                      $dShow5_sCdF
                      $dShow6_sCdG
                      $dShow7_sCdH
                      $dShow8_sCdI
                      $dShow9_sCdJ
                      $dShow10_sCdK
                      $dShow11_sCdL
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sCdM sat_sCdN sat_sCdO];

GHC.Show.$fShow(,,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCdP eta_sCdQ]
        case ds_sCdP of {
          [] -> lvl11_rC0o;
          : x_sCdT [Occ=Once*!] ds1_sCdU [Occ=Once!] ->
              case ds1_sCdU of wild1_sCdV {
                [] -> x_sCdT eta_sCdQ;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCdY [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCdQ wild1_sCdV] \u []
                              GHC.Show.$fShow(,,,,,,,,,,)_go2 wild1_sCdV eta_sCdQ; } in
                    let {
                      sat_sCdZ [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCdY];
                    } in  x_sCdT sat_sCdZ;
              };
        };

GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j,
      GHC.Show.Show k) =>
     GHC.Types.Int
     -> (a, b, c, d, e, f, g, h, i, j, k) -> GHC.Show.ShowS
[GblId,
 Arity=14,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCe0
           $dShow1_sCe1
           $dShow2_sCe2
           $dShow3_sCe3
           $dShow4_sCe4
           $dShow5_sCe5
           $dShow6_sCe6
           $dShow7_sCe7
           $dShow8_sCe8
           $dShow9_sCe9
           $dShow10_sCea
           ds_sCeb
           ds1_sCec
           s_sCed]
        case ds1_sCec of {
          (,,,,,,,,,,) a1_sCef [Occ=Once]
                       b1_sCeg [Occ=Once]
                       c1_sCeh [Occ=Once]
                       d1_sCei [Occ=Once]
                       e1_sCej [Occ=Once]
                       f13_sCek [Occ=Once]
                       g1_sCel [Occ=Once]
                       h1_sCem [Occ=Once]
                       i1_sCen [Occ=Once]
                       j1_sCeo [Occ=Once]
                       k1_sCep [Occ=Once] ->
              let {
                sat_sCeN [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sCe0
                     $dShow1_sCe1
                     $dShow2_sCe2
                     $dShow3_sCe3
                     $dShow4_sCe4
                     $dShow5_sCe5
                     $dShow6_sCe6
                     $dShow7_sCe7
                     $dShow8_sCe8
                     $dShow9_sCe9
                     $dShow10_sCea
                     s_sCed
                     a1_sCef
                     b1_sCeg
                     c1_sCeh
                     d1_sCei
                     e1_sCej
                     f13_sCek
                     g1_sCel
                     h1_sCem
                     i1_sCen
                     j1_sCeo
                     k1_sCep] \u []
                        let {
                          sat_sCeM [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sCed]; } in
                        let {
                          sat_sCeA [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow10_sCea k1_sCep] \u []
                                  GHC.Show.showsPrec $dShow10_sCea GHC.Show.$fShow(,)1 k1_sCep; } in
                        let {
                          sat_sCeB [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCeA GHC.Types.[]]; } in
                        let {
                          sat_sCez [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sCe9 j1_sCeo] \u []
                                  GHC.Show.showsPrec $dShow9_sCe9 GHC.Show.$fShow(,)1 j1_sCeo; } in
                        let {
                          sat_sCeC [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCez sat_sCeB]; } in
                        let {
                          sat_sCey [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sCe8 i1_sCen] \u []
                                  GHC.Show.showsPrec $dShow8_sCe8 GHC.Show.$fShow(,)1 i1_sCen; } in
                        let {
                          sat_sCeD [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCey sat_sCeC]; } in
                        let {
                          sat_sCex [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sCe7 h1_sCem] \u []
                                  GHC.Show.showsPrec $dShow7_sCe7 GHC.Show.$fShow(,)1 h1_sCem; } in
                        let {
                          sat_sCeE [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCex sat_sCeD]; } in
                        let {
                          sat_sCew [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sCe6 g1_sCel] \u []
                                  GHC.Show.showsPrec $dShow6_sCe6 GHC.Show.$fShow(,)1 g1_sCel; } in
                        let {
                          sat_sCeF [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCew sat_sCeE]; } in
                        let {
                          sat_sCev [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sCe5 f13_sCek] \u []
                                  GHC.Show.showsPrec $dShow5_sCe5 GHC.Show.$fShow(,)1 f13_sCek; } in
                        let {
                          sat_sCeG [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCev sat_sCeF]; } in
                        let {
                          sat_sCeu [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sCe4 e1_sCej] \u []
                                  GHC.Show.showsPrec $dShow4_sCe4 GHC.Show.$fShow(,)1 e1_sCej; } in
                        let {
                          sat_sCeH [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCeu sat_sCeG]; } in
                        let {
                          sat_sCet [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sCe3 d1_sCei] \u []
                                  GHC.Show.showsPrec $dShow3_sCe3 GHC.Show.$fShow(,)1 d1_sCei; } in
                        let {
                          sat_sCeI [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCet sat_sCeH]; } in
                        let {
                          sat_sCes [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sCe2 c1_sCeh] \u []
                                  GHC.Show.showsPrec $dShow2_sCe2 GHC.Show.$fShow(,)1 c1_sCeh; } in
                        let {
                          sat_sCeJ [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCes sat_sCeI]; } in
                        let {
                          sat_sCer [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sCe1 b1_sCeg] \u []
                                  GHC.Show.showsPrec $dShow1_sCe1 GHC.Show.$fShow(,)1 b1_sCeg; } in
                        let {
                          sat_sCeK [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCer sat_sCeJ]; } in
                        let {
                          sat_sCeq [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sCe0 a1_sCef] \u []
                                  GHC.Show.showsPrec $dShow_sCe0 GHC.Show.$fShow(,)1 a1_sCef; } in
                        let {
                          sat_sCeL [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sCeq sat_sCeK];
                        } in  GHC.Show.$fShow(,,,,,,,,,,)_go2 sat_sCeL sat_sCeM;
              } in  : [GHC.Show.$fShow(,)4 sat_sCeN];
        };

GHC.Show.$fShow(,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j,
      GHC.Show.Show k) =>
     (a, b, c, d, e, f, g, h, i, j, k) -> GHC.Base.String
[GblId,
 Arity=12,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCeO
           $dShow1_sCeP
           $dShow2_sCeQ
           $dShow3_sCeR
           $dShow4_sCeS
           $dShow5_sCeT
           $dShow6_sCeU
           $dShow7_sCeV
           $dShow8_sCeW
           $dShow9_sCeX
           $dShow10_sCeY
           x_sCeZ]
        GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
            $dShow_sCeO
            $dShow1_sCeP
            $dShow2_sCeQ
            $dShow3_sCeR
            $dShow4_sCeS
            $dShow5_sCeT
            $dShow6_sCeU
            $dShow7_sCeV
            $dShow8_sCeW
            $dShow9_sCeX
            $dShow10_sCeY
            GHC.Show.$fShow(,)1
            x_sCeZ
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j,
      GHC.Show.Show k) =>
     [(a, b, c, d, e, f, g, h, i, j, k)] -> GHC.Show.ShowS
[GblId,
 Arity=13,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCf0
           $dShow1_sCf1
           $dShow2_sCf2
           $dShow3_sCf3
           $dShow4_sCf4
           $dShow5_sCf5
           $dShow6_sCf6
           $dShow7_sCf7
           $dShow8_sCf8
           $dShow9_sCf9
           $dShow10_sCfa
           ls_sCfb
           s_sCfc]
        let {
          sat_sCfd [Occ=Once]
            :: (a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
                h_azCR, i_azCS, j_azCT, k_azCU)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCf0
               $dShow1_sCf1
               $dShow2_sCf2
               $dShow3_sCf3
               $dShow4_sCf4
               $dShow5_sCf5
               $dShow6_sCf6
               $dShow7_sCf7
               $dShow8_sCf8
               $dShow9_sCf9
               $dShow10_sCfa] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
                      $dShow_sCf0
                      $dShow1_sCf1
                      $dShow2_sCf2
                      $dShow3_sCf3
                      $dShow4_sCf4
                      $dShow5_sCf5
                      $dShow6_sCf6
                      $dShow7_sCf7
                      $dShow8_sCf8
                      $dShow9_sCf9
                      $dShow10_sCfa
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sCfd ls_sCfb s_sCfc;

GHC.Show.$fShow(,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j,
      GHC.Show.Show k) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k)
[GblId[DFunId],
 Arity=11,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sCfe
           $dShow1_sCff
           $dShow2_sCfg
           $dShow3_sCfh
           $dShow4_sCfi
           $dShow5_sCfj
           $dShow6_sCfk
           $dShow7_sCfl
           $dShow8_sCfm
           $dShow9_sCfn
           $dShow10_sCfo]
        let {
          sat_sCfr [Occ=Once]
            :: [(a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
                 h_azCR, i_azCS, j_azCT, k_azCU)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCfe
               $dShow1_sCff
               $dShow2_sCfg
               $dShow3_sCfh
               $dShow4_sCfi
               $dShow5_sCfj
               $dShow6_sCfk
               $dShow7_sCfl
               $dShow8_sCfm
               $dShow9_sCfn
               $dShow10_sCfo] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,)_$cshowList
                      $dShow_sCfe
                      $dShow1_sCff
                      $dShow2_sCfg
                      $dShow3_sCfh
                      $dShow4_sCfi
                      $dShow5_sCfj
                      $dShow6_sCfk
                      $dShow7_sCfl
                      $dShow8_sCfm
                      $dShow9_sCfn
                      $dShow10_sCfo
                      eta_B2
                      eta_B1; } in
        let {
          sat_sCfq [Occ=Once]
            :: (a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
                h_azCR, i_azCS, j_azCT, k_azCU)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sCfe
               $dShow1_sCff
               $dShow2_sCfg
               $dShow3_sCfh
               $dShow4_sCfi
               $dShow5_sCfj
               $dShow6_sCfk
               $dShow7_sCfl
               $dShow8_sCfm
               $dShow9_sCfn
               $dShow10_sCfo] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,)_$cshow
                      $dShow_sCfe
                      $dShow1_sCff
                      $dShow2_sCfg
                      $dShow3_sCfh
                      $dShow4_sCfi
                      $dShow5_sCfj
                      $dShow6_sCfk
                      $dShow7_sCfl
                      $dShow8_sCfm
                      $dShow9_sCfn
                      $dShow10_sCfo
                      eta_B1; } in
        let {
          sat_sCfp [Occ=Once]
            :: GHC.Types.Int
               -> (a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
                   h_azCR, i_azCS, j_azCT, k_azCU)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCfe
               $dShow1_sCff
               $dShow2_sCfg
               $dShow3_sCfh
               $dShow4_sCfi
               $dShow5_sCfj
               $dShow6_sCfk
               $dShow7_sCfl
               $dShow8_sCfm
               $dShow9_sCfn
               $dShow10_sCfo] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
                      $dShow_sCfe
                      $dShow1_sCff
                      $dShow2_sCfg
                      $dShow3_sCfh
                      $dShow4_sCfi
                      $dShow5_sCfj
                      $dShow6_sCfk
                      $dShow7_sCfl
                      $dShow8_sCfm
                      $dShow9_sCfn
                      $dShow10_sCfo
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sCfp sat_sCfq sat_sCfr];

GHC.Show.$fShow(,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCfs eta_sCft]
        case ds_sCfs of {
          [] -> lvl11_rC0o;
          : x_sCfw [Occ=Once*!] ds1_sCfx [Occ=Once!] ->
              case ds1_sCfx of wild1_sCfy {
                [] -> x_sCfw eta_sCft;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCfB [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCft wild1_sCfy] \u []
                              GHC.Show.$fShow(,,,,,,,,,)_go2 wild1_sCfy eta_sCft; } in
                    let {
                      sat_sCfC [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCfB];
                    } in  x_sCfw sat_sCfC;
              };
        };

GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j) =>
     GHC.Types.Int -> (a, b, c, d, e, f, g, h, i, j) -> GHC.Show.ShowS
[GblId,
 Arity=13,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCfD
           $dShow1_sCfE
           $dShow2_sCfF
           $dShow3_sCfG
           $dShow4_sCfH
           $dShow5_sCfI
           $dShow6_sCfJ
           $dShow7_sCfK
           $dShow8_sCfL
           $dShow9_sCfM
           ds_sCfN
           ds1_sCfO
           s_sCfP]
        case ds1_sCfO of {
          (,,,,,,,,,) a1_sCfR [Occ=Once]
                      b1_sCfS [Occ=Once]
                      c1_sCfT [Occ=Once]
                      d1_sCfU [Occ=Once]
                      e1_sCfV [Occ=Once]
                      f13_sCfW [Occ=Once]
                      g1_sCfX [Occ=Once]
                      h1_sCfY [Occ=Once]
                      i1_sCfZ [Occ=Once]
                      j1_sCg0 [Occ=Once] ->
              let {
                sat_sCgm [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sCfD
                     $dShow1_sCfE
                     $dShow2_sCfF
                     $dShow3_sCfG
                     $dShow4_sCfH
                     $dShow5_sCfI
                     $dShow6_sCfJ
                     $dShow7_sCfK
                     $dShow8_sCfL
                     $dShow9_sCfM
                     s_sCfP
                     a1_sCfR
                     b1_sCfS
                     c1_sCfT
                     d1_sCfU
                     e1_sCfV
                     f13_sCfW
                     g1_sCfX
                     h1_sCfY
                     i1_sCfZ
                     j1_sCg0] \u []
                        let {
                          sat_sCgl [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sCfP]; } in
                        let {
                          sat_sCga [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sCfM j1_sCg0] \u []
                                  GHC.Show.showsPrec $dShow9_sCfM GHC.Show.$fShow(,)1 j1_sCg0; } in
                        let {
                          sat_sCgb [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCga GHC.Types.[]]; } in
                        let {
                          sat_sCg9 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sCfL i1_sCfZ] \u []
                                  GHC.Show.showsPrec $dShow8_sCfL GHC.Show.$fShow(,)1 i1_sCfZ; } in
                        let {
                          sat_sCgc [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCg9 sat_sCgb]; } in
                        let {
                          sat_sCg8 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sCfK h1_sCfY] \u []
                                  GHC.Show.showsPrec $dShow7_sCfK GHC.Show.$fShow(,)1 h1_sCfY; } in
                        let {
                          sat_sCgd [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCg8 sat_sCgc]; } in
                        let {
                          sat_sCg7 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sCfJ g1_sCfX] \u []
                                  GHC.Show.showsPrec $dShow6_sCfJ GHC.Show.$fShow(,)1 g1_sCfX; } in
                        let {
                          sat_sCge [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCg7 sat_sCgd]; } in
                        let {
                          sat_sCg6 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sCfI f13_sCfW] \u []
                                  GHC.Show.showsPrec $dShow5_sCfI GHC.Show.$fShow(,)1 f13_sCfW; } in
                        let {
                          sat_sCgf [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCg6 sat_sCge]; } in
                        let {
                          sat_sCg5 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sCfH e1_sCfV] \u []
                                  GHC.Show.showsPrec $dShow4_sCfH GHC.Show.$fShow(,)1 e1_sCfV; } in
                        let {
                          sat_sCgg [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCg5 sat_sCgf]; } in
                        let {
                          sat_sCg4 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sCfG d1_sCfU] \u []
                                  GHC.Show.showsPrec $dShow3_sCfG GHC.Show.$fShow(,)1 d1_sCfU; } in
                        let {
                          sat_sCgh [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCg4 sat_sCgg]; } in
                        let {
                          sat_sCg3 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sCfF c1_sCfT] \u []
                                  GHC.Show.showsPrec $dShow2_sCfF GHC.Show.$fShow(,)1 c1_sCfT; } in
                        let {
                          sat_sCgi [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCg3 sat_sCgh]; } in
                        let {
                          sat_sCg2 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sCfE b1_sCfS] \u []
                                  GHC.Show.showsPrec $dShow1_sCfE GHC.Show.$fShow(,)1 b1_sCfS; } in
                        let {
                          sat_sCgj [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCg2 sat_sCgi]; } in
                        let {
                          sat_sCg1 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sCfD a1_sCfR] \u []
                                  GHC.Show.showsPrec $dShow_sCfD GHC.Show.$fShow(,)1 a1_sCfR; } in
                        let {
                          sat_sCgk [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sCg1 sat_sCgj];
                        } in  GHC.Show.$fShow(,,,,,,,,,)_go2 sat_sCgk sat_sCgl;
              } in  : [GHC.Show.$fShow(,)4 sat_sCgm];
        };

GHC.Show.$fShow(,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j) =>
     (a, b, c, d, e, f, g, h, i, j) -> GHC.Base.String
[GblId,
 Arity=11,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCgn
           $dShow1_sCgo
           $dShow2_sCgp
           $dShow3_sCgq
           $dShow4_sCgr
           $dShow5_sCgs
           $dShow6_sCgt
           $dShow7_sCgu
           $dShow8_sCgv
           $dShow9_sCgw
           x_sCgx]
        GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
            $dShow_sCgn
            $dShow1_sCgo
            $dShow2_sCgp
            $dShow3_sCgq
            $dShow4_sCgr
            $dShow5_sCgs
            $dShow6_sCgt
            $dShow7_sCgu
            $dShow8_sCgv
            $dShow9_sCgw
            GHC.Show.$fShow(,)1
            x_sCgx
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j) =>
     [(a, b, c, d, e, f, g, h, i, j)] -> GHC.Show.ShowS
[GblId,
 Arity=12,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCgy
           $dShow1_sCgz
           $dShow2_sCgA
           $dShow3_sCgB
           $dShow4_sCgC
           $dShow5_sCgD
           $dShow6_sCgE
           $dShow7_sCgF
           $dShow8_sCgG
           $dShow9_sCgH
           ls_sCgI
           s_sCgJ]
        let {
          sat_sCgK [Occ=Once]
            :: (a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
                h_azDP, i_azDQ, j_azDR)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCgy
               $dShow1_sCgz
               $dShow2_sCgA
               $dShow3_sCgB
               $dShow4_sCgC
               $dShow5_sCgD
               $dShow6_sCgE
               $dShow7_sCgF
               $dShow8_sCgG
               $dShow9_sCgH] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
                      $dShow_sCgy
                      $dShow1_sCgz
                      $dShow2_sCgA
                      $dShow3_sCgB
                      $dShow4_sCgC
                      $dShow5_sCgD
                      $dShow6_sCgE
                      $dShow7_sCgF
                      $dShow8_sCgG
                      $dShow9_sCgH
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sCgK ls_sCgI s_sCgJ;

GHC.Show.$fShow(,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j)
[GblId[DFunId],
 Arity=10,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sCgL
           $dShow1_sCgM
           $dShow2_sCgN
           $dShow3_sCgO
           $dShow4_sCgP
           $dShow5_sCgQ
           $dShow6_sCgR
           $dShow7_sCgS
           $dShow8_sCgT
           $dShow9_sCgU]
        let {
          sat_sCgX [Occ=Once]
            :: [(a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
                 h_azDP, i_azDQ, j_azDR)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCgL
               $dShow1_sCgM
               $dShow2_sCgN
               $dShow3_sCgO
               $dShow4_sCgP
               $dShow5_sCgQ
               $dShow6_sCgR
               $dShow7_sCgS
               $dShow8_sCgT
               $dShow9_sCgU] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,)_$cshowList
                      $dShow_sCgL
                      $dShow1_sCgM
                      $dShow2_sCgN
                      $dShow3_sCgO
                      $dShow4_sCgP
                      $dShow5_sCgQ
                      $dShow6_sCgR
                      $dShow7_sCgS
                      $dShow8_sCgT
                      $dShow9_sCgU
                      eta_B2
                      eta_B1; } in
        let {
          sat_sCgW [Occ=Once]
            :: (a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
                h_azDP, i_azDQ, j_azDR)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sCgL
               $dShow1_sCgM
               $dShow2_sCgN
               $dShow3_sCgO
               $dShow4_sCgP
               $dShow5_sCgQ
               $dShow6_sCgR
               $dShow7_sCgS
               $dShow8_sCgT
               $dShow9_sCgU] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,)_$cshow
                      $dShow_sCgL
                      $dShow1_sCgM
                      $dShow2_sCgN
                      $dShow3_sCgO
                      $dShow4_sCgP
                      $dShow5_sCgQ
                      $dShow6_sCgR
                      $dShow7_sCgS
                      $dShow8_sCgT
                      $dShow9_sCgU
                      eta_B1; } in
        let {
          sat_sCgV [Occ=Once]
            :: GHC.Types.Int
               -> (a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
                   h_azDP, i_azDQ, j_azDR)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCgL
               $dShow1_sCgM
               $dShow2_sCgN
               $dShow3_sCgO
               $dShow4_sCgP
               $dShow5_sCgQ
               $dShow6_sCgR
               $dShow7_sCgS
               $dShow8_sCgT
               $dShow9_sCgU] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
                      $dShow_sCgL
                      $dShow1_sCgM
                      $dShow2_sCgN
                      $dShow3_sCgO
                      $dShow4_sCgP
                      $dShow5_sCgQ
                      $dShow6_sCgR
                      $dShow7_sCgS
                      $dShow8_sCgT
                      $dShow9_sCgU
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sCgV sat_sCgW sat_sCgX];

GHC.Show.$fShow(,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCgY eta_sCgZ]
        case ds_sCgY of {
          [] -> lvl11_rC0o;
          : x_sCh2 [Occ=Once*!] ds1_sCh3 [Occ=Once!] ->
              case ds1_sCh3 of wild1_sCh4 {
                [] -> x_sCh2 eta_sCgZ;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCh7 [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCgZ wild1_sCh4] \u []
                              GHC.Show.$fShow(,,,,,,,,)_go2 wild1_sCh4 eta_sCgZ; } in
                    let {
                      sat_sCh8 [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCh7];
                    } in  x_sCh2 sat_sCh8;
              };
        };

GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i) =>
     GHC.Types.Int -> (a, b, c, d, e, f, g, h, i) -> GHC.Show.ShowS
[GblId,
 Arity=12,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCh9
           $dShow1_sCha
           $dShow2_sChb
           $dShow3_sChc
           $dShow4_sChd
           $dShow5_sChe
           $dShow6_sChf
           $dShow7_sChg
           $dShow8_sChh
           ds_sChi
           ds1_sChj
           s_sChk]
        case ds1_sChj of {
          (,,,,,,,,) a1_sChm [Occ=Once]
                     b1_sChn [Occ=Once]
                     c1_sCho [Occ=Once]
                     d1_sChp [Occ=Once]
                     e1_sChq [Occ=Once]
                     f13_sChr [Occ=Once]
                     g1_sChs [Occ=Once]
                     h1_sCht [Occ=Once]
                     i1_sChu [Occ=Once] ->
              let {
                sat_sChO [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sCh9
                     $dShow1_sCha
                     $dShow2_sChb
                     $dShow3_sChc
                     $dShow4_sChd
                     $dShow5_sChe
                     $dShow6_sChf
                     $dShow7_sChg
                     $dShow8_sChh
                     s_sChk
                     a1_sChm
                     b1_sChn
                     c1_sCho
                     d1_sChp
                     e1_sChq
                     f13_sChr
                     g1_sChs
                     h1_sCht
                     i1_sChu] \u []
                        let {
                          sat_sChN [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sChk]; } in
                        let {
                          sat_sChD [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sChh i1_sChu] \u []
                                  GHC.Show.showsPrec $dShow8_sChh GHC.Show.$fShow(,)1 i1_sChu; } in
                        let {
                          sat_sChE [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sChD GHC.Types.[]]; } in
                        let {
                          sat_sChC [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sChg h1_sCht] \u []
                                  GHC.Show.showsPrec $dShow7_sChg GHC.Show.$fShow(,)1 h1_sCht; } in
                        let {
                          sat_sChF [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sChC sat_sChE]; } in
                        let {
                          sat_sChB [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sChf g1_sChs] \u []
                                  GHC.Show.showsPrec $dShow6_sChf GHC.Show.$fShow(,)1 g1_sChs; } in
                        let {
                          sat_sChG [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sChB sat_sChF]; } in
                        let {
                          sat_sChA [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sChe f13_sChr] \u []
                                  GHC.Show.showsPrec $dShow5_sChe GHC.Show.$fShow(,)1 f13_sChr; } in
                        let {
                          sat_sChH [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sChA sat_sChG]; } in
                        let {
                          sat_sChz [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sChd e1_sChq] \u []
                                  GHC.Show.showsPrec $dShow4_sChd GHC.Show.$fShow(,)1 e1_sChq; } in
                        let {
                          sat_sChI [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sChz sat_sChH]; } in
                        let {
                          sat_sChy [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sChc d1_sChp] \u []
                                  GHC.Show.showsPrec $dShow3_sChc GHC.Show.$fShow(,)1 d1_sChp; } in
                        let {
                          sat_sChJ [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sChy sat_sChI]; } in
                        let {
                          sat_sChx [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sChb c1_sCho] \u []
                                  GHC.Show.showsPrec $dShow2_sChb GHC.Show.$fShow(,)1 c1_sCho; } in
                        let {
                          sat_sChK [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sChx sat_sChJ]; } in
                        let {
                          sat_sChw [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sCha b1_sChn] \u []
                                  GHC.Show.showsPrec $dShow1_sCha GHC.Show.$fShow(,)1 b1_sChn; } in
                        let {
                          sat_sChL [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sChw sat_sChK]; } in
                        let {
                          sat_sChv [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sCh9 a1_sChm] \u []
                                  GHC.Show.showsPrec $dShow_sCh9 GHC.Show.$fShow(,)1 a1_sChm; } in
                        let {
                          sat_sChM [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sChv sat_sChL];
                        } in  GHC.Show.$fShow(,,,,,,,,)_go2 sat_sChM sat_sChN;
              } in  : [GHC.Show.$fShow(,)4 sat_sChO];
        };

GHC.Show.$fShow(,,,,,,,,)_$cshow
  :: forall a b c d e f g h i.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i) =>
     (a, b, c, d, e, f, g, h, i) -> GHC.Base.String
[GblId,
 Arity=10,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sChP
           $dShow1_sChQ
           $dShow2_sChR
           $dShow3_sChS
           $dShow4_sChT
           $dShow5_sChU
           $dShow6_sChV
           $dShow7_sChW
           $dShow8_sChX
           x_sChY]
        GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
            $dShow_sChP
            $dShow1_sChQ
            $dShow2_sChR
            $dShow3_sChS
            $dShow4_sChT
            $dShow5_sChU
            $dShow6_sChV
            $dShow7_sChW
            $dShow8_sChX
            GHC.Show.$fShow(,)1
            x_sChY
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i) =>
     [(a, b, c, d, e, f, g, h, i)] -> GHC.Show.ShowS
[GblId,
 Arity=11,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sChZ
           $dShow1_sCi0
           $dShow2_sCi1
           $dShow3_sCi2
           $dShow4_sCi3
           $dShow5_sCi4
           $dShow6_sCi5
           $dShow7_sCi6
           $dShow8_sCi7
           ls_sCi8
           s_sCi9]
        let {
          sat_sCia [Occ=Once]
            :: (a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
                h_azEJ, i_azEK)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sChZ
               $dShow1_sCi0
               $dShow2_sCi1
               $dShow3_sCi2
               $dShow4_sCi3
               $dShow5_sCi4
               $dShow6_sCi5
               $dShow7_sCi6
               $dShow8_sCi7] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
                      $dShow_sChZ
                      $dShow1_sCi0
                      $dShow2_sCi1
                      $dShow3_sCi2
                      $dShow4_sCi3
                      $dShow5_sCi4
                      $dShow6_sCi5
                      $dShow7_sCi6
                      $dShow8_sCi7
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sCia ls_sCi8 s_sCi9;

GHC.Show.$fShow(,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i)
[GblId[DFunId],
 Arity=9,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sCib
           $dShow1_sCic
           $dShow2_sCid
           $dShow3_sCie
           $dShow4_sCif
           $dShow5_sCig
           $dShow6_sCih
           $dShow7_sCii
           $dShow8_sCij]
        let {
          sat_sCim [Occ=Once]
            :: [(a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
                 h_azEJ, i_azEK)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCib
               $dShow1_sCic
               $dShow2_sCid
               $dShow3_sCie
               $dShow4_sCif
               $dShow5_sCig
               $dShow6_sCih
               $dShow7_sCii
               $dShow8_sCij] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,)_$cshowList
                      $dShow_sCib
                      $dShow1_sCic
                      $dShow2_sCid
                      $dShow3_sCie
                      $dShow4_sCif
                      $dShow5_sCig
                      $dShow6_sCih
                      $dShow7_sCii
                      $dShow8_sCij
                      eta_B2
                      eta_B1; } in
        let {
          sat_sCil [Occ=Once]
            :: (a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
                h_azEJ, i_azEK)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sCib
               $dShow1_sCic
               $dShow2_sCid
               $dShow3_sCie
               $dShow4_sCif
               $dShow5_sCig
               $dShow6_sCih
               $dShow7_sCii
               $dShow8_sCij] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,)_$cshow
                      $dShow_sCib
                      $dShow1_sCic
                      $dShow2_sCid
                      $dShow3_sCie
                      $dShow4_sCif
                      $dShow5_sCig
                      $dShow6_sCih
                      $dShow7_sCii
                      $dShow8_sCij
                      eta_B1; } in
        let {
          sat_sCik [Occ=Once]
            :: GHC.Types.Int
               -> (a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
                   h_azEJ, i_azEK)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCib
               $dShow1_sCic
               $dShow2_sCid
               $dShow3_sCie
               $dShow4_sCif
               $dShow5_sCig
               $dShow6_sCih
               $dShow7_sCii
               $dShow8_sCij] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
                      $dShow_sCib
                      $dShow1_sCic
                      $dShow2_sCid
                      $dShow3_sCie
                      $dShow4_sCif
                      $dShow5_sCig
                      $dShow6_sCih
                      $dShow7_sCii
                      $dShow8_sCij
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sCik sat_sCil sat_sCim];

GHC.Show.$fShow(,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCin eta_sCio]
        case ds_sCin of {
          [] -> lvl11_rC0o;
          : x_sCir [Occ=Once*!] ds1_sCis [Occ=Once!] ->
              case ds1_sCis of wild1_sCit {
                [] -> x_sCir eta_sCio;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCiw [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCio wild1_sCit] \u []
                              GHC.Show.$fShow(,,,,,,,)_go2 wild1_sCit eta_sCio; } in
                    let {
                      sat_sCix [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCiw];
                    } in  x_sCir sat_sCix;
              };
        };

GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h) =>
     GHC.Types.Int -> (a, b, c, d, e, f, g, h) -> GHC.Show.ShowS
[GblId,
 Arity=11,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCiy
           $dShow1_sCiz
           $dShow2_sCiA
           $dShow3_sCiB
           $dShow4_sCiC
           $dShow5_sCiD
           $dShow6_sCiE
           $dShow7_sCiF
           ds_sCiG
           ds1_sCiH
           s_sCiI]
        case ds1_sCiH of {
          (,,,,,,,) a1_sCiK [Occ=Once]
                    b1_sCiL [Occ=Once]
                    c1_sCiM [Occ=Once]
                    d1_sCiN [Occ=Once]
                    e1_sCiO [Occ=Once]
                    f13_sCiP [Occ=Once]
                    g1_sCiQ [Occ=Once]
                    h1_sCiR [Occ=Once] ->
              let {
                sat_sCj9 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sCiy
                     $dShow1_sCiz
                     $dShow2_sCiA
                     $dShow3_sCiB
                     $dShow4_sCiC
                     $dShow5_sCiD
                     $dShow6_sCiE
                     $dShow7_sCiF
                     s_sCiI
                     a1_sCiK
                     b1_sCiL
                     c1_sCiM
                     d1_sCiN
                     e1_sCiO
                     f13_sCiP
                     g1_sCiQ
                     h1_sCiR] \u []
                        let {
                          sat_sCj8 [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sCiI]; } in
                        let {
                          sat_sCiZ [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sCiF h1_sCiR] \u []
                                  GHC.Show.showsPrec $dShow7_sCiF GHC.Show.$fShow(,)1 h1_sCiR; } in
                        let {
                          sat_sCj0 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCiZ GHC.Types.[]]; } in
                        let {
                          sat_sCiY [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sCiE g1_sCiQ] \u []
                                  GHC.Show.showsPrec $dShow6_sCiE GHC.Show.$fShow(,)1 g1_sCiQ; } in
                        let {
                          sat_sCj1 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCiY sat_sCj0]; } in
                        let {
                          sat_sCiX [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sCiD f13_sCiP] \u []
                                  GHC.Show.showsPrec $dShow5_sCiD GHC.Show.$fShow(,)1 f13_sCiP; } in
                        let {
                          sat_sCj2 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCiX sat_sCj1]; } in
                        let {
                          sat_sCiW [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sCiC e1_sCiO] \u []
                                  GHC.Show.showsPrec $dShow4_sCiC GHC.Show.$fShow(,)1 e1_sCiO; } in
                        let {
                          sat_sCj3 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCiW sat_sCj2]; } in
                        let {
                          sat_sCiV [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sCiB d1_sCiN] \u []
                                  GHC.Show.showsPrec $dShow3_sCiB GHC.Show.$fShow(,)1 d1_sCiN; } in
                        let {
                          sat_sCj4 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCiV sat_sCj3]; } in
                        let {
                          sat_sCiU [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sCiA c1_sCiM] \u []
                                  GHC.Show.showsPrec $dShow2_sCiA GHC.Show.$fShow(,)1 c1_sCiM; } in
                        let {
                          sat_sCj5 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCiU sat_sCj4]; } in
                        let {
                          sat_sCiT [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sCiz b1_sCiL] \u []
                                  GHC.Show.showsPrec $dShow1_sCiz GHC.Show.$fShow(,)1 b1_sCiL; } in
                        let {
                          sat_sCj6 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCiT sat_sCj5]; } in
                        let {
                          sat_sCiS [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sCiy a1_sCiK] \u []
                                  GHC.Show.showsPrec $dShow_sCiy GHC.Show.$fShow(,)1 a1_sCiK; } in
                        let {
                          sat_sCj7 [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sCiS sat_sCj6];
                        } in  GHC.Show.$fShow(,,,,,,,)_go2 sat_sCj7 sat_sCj8;
              } in  : [GHC.Show.$fShow(,)4 sat_sCj9];
        };

GHC.Show.$fShow(,,,,,,,)_$cshow
  :: forall a b c d e f g h.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h) =>
     (a, b, c, d, e, f, g, h) -> GHC.Base.String
[GblId,
 Arity=9,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCja
           $dShow1_sCjb
           $dShow2_sCjc
           $dShow3_sCjd
           $dShow4_sCje
           $dShow5_sCjf
           $dShow6_sCjg
           $dShow7_sCjh
           x_sCji]
        GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
            $dShow_sCja
            $dShow1_sCjb
            $dShow2_sCjc
            $dShow3_sCjd
            $dShow4_sCje
            $dShow5_sCjf
            $dShow6_sCjg
            $dShow7_sCjh
            GHC.Show.$fShow(,)1
            x_sCji
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,)_$cshowList
  :: forall a b c d e f g h.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h) =>
     [(a, b, c, d, e, f, g, h)] -> GHC.Show.ShowS
[GblId,
 Arity=10,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCjj
           $dShow1_sCjk
           $dShow2_sCjl
           $dShow3_sCjm
           $dShow4_sCjn
           $dShow5_sCjo
           $dShow6_sCjp
           $dShow7_sCjq
           ls_sCjr
           s_sCjs]
        let {
          sat_sCjt [Occ=Once]
            :: (a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
                h_azFz)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCjj
               $dShow1_sCjk
               $dShow2_sCjl
               $dShow3_sCjm
               $dShow4_sCjn
               $dShow5_sCjo
               $dShow6_sCjp
               $dShow7_sCjq] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
                      $dShow_sCjj
                      $dShow1_sCjk
                      $dShow2_sCjl
                      $dShow3_sCjm
                      $dShow4_sCjn
                      $dShow5_sCjo
                      $dShow6_sCjp
                      $dShow7_sCjq
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sCjt ls_sCjr s_sCjs;

GHC.Show.$fShow(,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h)
[GblId[DFunId],
 Arity=8,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sCju
           $dShow1_sCjv
           $dShow2_sCjw
           $dShow3_sCjx
           $dShow4_sCjy
           $dShow5_sCjz
           $dShow6_sCjA
           $dShow7_sCjB]
        let {
          sat_sCjE [Occ=Once]
            :: [(a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
                 h_azFz)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCju
               $dShow1_sCjv
               $dShow2_sCjw
               $dShow3_sCjx
               $dShow4_sCjy
               $dShow5_sCjz
               $dShow6_sCjA
               $dShow7_sCjB] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,)_$cshowList
                      $dShow_sCju
                      $dShow1_sCjv
                      $dShow2_sCjw
                      $dShow3_sCjx
                      $dShow4_sCjy
                      $dShow5_sCjz
                      $dShow6_sCjA
                      $dShow7_sCjB
                      eta_B2
                      eta_B1; } in
        let {
          sat_sCjD [Occ=Once]
            :: (a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
                h_azFz)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sCju
               $dShow1_sCjv
               $dShow2_sCjw
               $dShow3_sCjx
               $dShow4_sCjy
               $dShow5_sCjz
               $dShow6_sCjA
               $dShow7_sCjB] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,)_$cshow
                      $dShow_sCju
                      $dShow1_sCjv
                      $dShow2_sCjw
                      $dShow3_sCjx
                      $dShow4_sCjy
                      $dShow5_sCjz
                      $dShow6_sCjA
                      $dShow7_sCjB
                      eta_B1; } in
        let {
          sat_sCjC [Occ=Once]
            :: GHC.Types.Int
               -> (a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
                   h_azFz)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCju
               $dShow1_sCjv
               $dShow2_sCjw
               $dShow3_sCjx
               $dShow4_sCjy
               $dShow5_sCjz
               $dShow6_sCjA
               $dShow7_sCjB] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
                      $dShow_sCju
                      $dShow1_sCjv
                      $dShow2_sCjw
                      $dShow3_sCjx
                      $dShow4_sCjy
                      $dShow5_sCjz
                      $dShow6_sCjA
                      $dShow7_sCjB
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sCjC sat_sCjD sat_sCjE];

GHC.Show.$fShow(,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCjF eta_sCjG]
        case ds_sCjF of {
          [] -> lvl11_rC0o;
          : x_sCjJ [Occ=Once*!] ds1_sCjK [Occ=Once!] ->
              case ds1_sCjK of wild1_sCjL {
                [] -> x_sCjJ eta_sCjG;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCjO [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCjG wild1_sCjL] \u []
                              GHC.Show.$fShow(,,,,,,)_go2 wild1_sCjL eta_sCjG; } in
                    let {
                      sat_sCjP [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCjO];
                    } in  x_sCjJ sat_sCjP;
              };
        };

GHC.Show.$fShow(,,,,,,)_$cshowsPrec
  :: forall a b c d e f g.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f,
      GHC.Show.Show g) =>
     GHC.Types.Int -> (a, b, c, d, e, f, g) -> GHC.Show.ShowS
[GblId,
 Arity=10,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCjQ
           $dShow1_sCjR
           $dShow2_sCjS
           $dShow3_sCjT
           $dShow4_sCjU
           $dShow5_sCjV
           $dShow6_sCjW
           ds_sCjX
           ds1_sCjY
           s_sCjZ]
        case ds1_sCjY of {
          (,,,,,,) a1_sCk1 [Occ=Once]
                   b1_sCk2 [Occ=Once]
                   c1_sCk3 [Occ=Once]
                   d1_sCk4 [Occ=Once]
                   e1_sCk5 [Occ=Once]
                   f13_sCk6 [Occ=Once]
                   g1_sCk7 [Occ=Once] ->
              let {
                sat_sCkn [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sCjQ
                     $dShow1_sCjR
                     $dShow2_sCjS
                     $dShow3_sCjT
                     $dShow4_sCjU
                     $dShow5_sCjV
                     $dShow6_sCjW
                     s_sCjZ
                     a1_sCk1
                     b1_sCk2
                     c1_sCk3
                     d1_sCk4
                     e1_sCk5
                     f13_sCk6
                     g1_sCk7] \u []
                        let {
                          sat_sCkm [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sCjZ]; } in
                        let {
                          sat_sCke [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sCjW g1_sCk7] \u []
                                  GHC.Show.showsPrec $dShow6_sCjW GHC.Show.$fShow(,)1 g1_sCk7; } in
                        let {
                          sat_sCkf [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCke GHC.Types.[]]; } in
                        let {
                          sat_sCkd [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sCjV f13_sCk6] \u []
                                  GHC.Show.showsPrec $dShow5_sCjV GHC.Show.$fShow(,)1 f13_sCk6; } in
                        let {
                          sat_sCkg [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCkd sat_sCkf]; } in
                        let {
                          sat_sCkc [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sCjU e1_sCk5] \u []
                                  GHC.Show.showsPrec $dShow4_sCjU GHC.Show.$fShow(,)1 e1_sCk5; } in
                        let {
                          sat_sCkh [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCkc sat_sCkg]; } in
                        let {
                          sat_sCkb [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sCjT d1_sCk4] \u []
                                  GHC.Show.showsPrec $dShow3_sCjT GHC.Show.$fShow(,)1 d1_sCk4; } in
                        let {
                          sat_sCki [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCkb sat_sCkh]; } in
                        let {
                          sat_sCka [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sCjS c1_sCk3] \u []
                                  GHC.Show.showsPrec $dShow2_sCjS GHC.Show.$fShow(,)1 c1_sCk3; } in
                        let {
                          sat_sCkj [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCka sat_sCki]; } in
                        let {
                          sat_sCk9 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sCjR b1_sCk2] \u []
                                  GHC.Show.showsPrec $dShow1_sCjR GHC.Show.$fShow(,)1 b1_sCk2; } in
                        let {
                          sat_sCkk [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCk9 sat_sCkj]; } in
                        let {
                          sat_sCk8 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sCjQ a1_sCk1] \u []
                                  GHC.Show.showsPrec $dShow_sCjQ GHC.Show.$fShow(,)1 a1_sCk1; } in
                        let {
                          sat_sCkl [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sCk8 sat_sCkk];
                        } in  GHC.Show.$fShow(,,,,,,)_go2 sat_sCkl sat_sCkm;
              } in  : [GHC.Show.$fShow(,)4 sat_sCkn];
        };

GHC.Show.$fShow(,,,,,,)_$cshow
  :: forall a b c d e f g.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f,
      GHC.Show.Show g) =>
     (a, b, c, d, e, f, g) -> GHC.Base.String
[GblId,
 Arity=8,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCko
           $dShow1_sCkp
           $dShow2_sCkq
           $dShow3_sCkr
           $dShow4_sCks
           $dShow5_sCkt
           $dShow6_sCku
           x_sCkv]
        GHC.Show.$fShow(,,,,,,)_$cshowsPrec
            $dShow_sCko
            $dShow1_sCkp
            $dShow2_sCkq
            $dShow3_sCkr
            $dShow4_sCks
            $dShow5_sCkt
            $dShow6_sCku
            GHC.Show.$fShow(,)1
            x_sCkv
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,)_$cshowList
  :: forall a b c d e f g.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f,
      GHC.Show.Show g) =>
     [(a, b, c, d, e, f, g)] -> GHC.Show.ShowS
[GblId,
 Arity=9,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCkw
           $dShow1_sCkx
           $dShow2_sCky
           $dShow3_sCkz
           $dShow4_sCkA
           $dShow5_sCkB
           $dShow6_sCkC
           ls_sCkD
           s_sCkE]
        let {
          sat_sCkF [Occ=Once]
            :: (a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCkw
               $dShow1_sCkx
               $dShow2_sCky
               $dShow3_sCkz
               $dShow4_sCkA
               $dShow5_sCkB
               $dShow6_sCkC] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,)_$cshowsPrec
                      $dShow_sCkw
                      $dShow1_sCkx
                      $dShow2_sCky
                      $dShow3_sCkz
                      $dShow4_sCkA
                      $dShow5_sCkB
                      $dShow6_sCkC
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sCkF ls_sCkD s_sCkE;

GHC.Show.$fShow(,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f,
      GHC.Show.Show g) =>
     GHC.Show.Show (a, b, c, d, e, f, g)
[GblId[DFunId],
 Arity=7,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sCkG
           $dShow1_sCkH
           $dShow2_sCkI
           $dShow3_sCkJ
           $dShow4_sCkK
           $dShow5_sCkL
           $dShow6_sCkM]
        let {
          sat_sCkP [Occ=Once]
            :: [(a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCkG
               $dShow1_sCkH
               $dShow2_sCkI
               $dShow3_sCkJ
               $dShow4_sCkK
               $dShow5_sCkL
               $dShow6_sCkM] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,)_$cshowList
                      $dShow_sCkG
                      $dShow1_sCkH
                      $dShow2_sCkI
                      $dShow3_sCkJ
                      $dShow4_sCkK
                      $dShow5_sCkL
                      $dShow6_sCkM
                      eta_B2
                      eta_B1; } in
        let {
          sat_sCkO [Occ=Once]
            :: (a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sCkG
               $dShow1_sCkH
               $dShow2_sCkI
               $dShow3_sCkJ
               $dShow4_sCkK
               $dShow5_sCkL
               $dShow6_sCkM] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,)_$cshow
                      $dShow_sCkG
                      $dShow1_sCkH
                      $dShow2_sCkI
                      $dShow3_sCkJ
                      $dShow4_sCkK
                      $dShow5_sCkL
                      $dShow6_sCkM
                      eta_B1; } in
        let {
          sat_sCkN [Occ=Once]
            :: GHC.Types.Int
               -> (a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCkG
               $dShow1_sCkH
               $dShow2_sCkI
               $dShow3_sCkJ
               $dShow4_sCkK
               $dShow5_sCkL
               $dShow6_sCkM] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,)_$cshowsPrec
                      $dShow_sCkG
                      $dShow1_sCkH
                      $dShow2_sCkI
                      $dShow3_sCkJ
                      $dShow4_sCkK
                      $dShow5_sCkL
                      $dShow6_sCkM
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sCkN sat_sCkO sat_sCkP];

GHC.Show.$fShow(,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCkQ eta_sCkR]
        case ds_sCkQ of {
          [] -> lvl11_rC0o;
          : x_sCkU [Occ=Once*!] ds1_sCkV [Occ=Once!] ->
              case ds1_sCkV of wild1_sCkW {
                [] -> x_sCkU eta_sCkR;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCkZ [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCkR wild1_sCkW] \u []
                              GHC.Show.$fShow(,,,,,)_go2 wild1_sCkW eta_sCkR; } in
                    let {
                      sat_sCl0 [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCkZ];
                    } in  x_sCkU sat_sCl0;
              };
        };

GHC.Show.$fShow(,,,,,)_$cshowsPrec
  :: forall a b c d e f.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f) =>
     GHC.Types.Int -> (a, b, c, d, e, f) -> GHC.Show.ShowS
[GblId,
 Arity=9,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCl1
           $dShow1_sCl2
           $dShow2_sCl3
           $dShow3_sCl4
           $dShow4_sCl5
           $dShow5_sCl6
           ds_sCl7
           ds1_sCl8
           s_sCl9]
        case ds1_sCl8 of {
          (,,,,,) a1_sClb [Occ=Once]
                  b1_sClc [Occ=Once]
                  c1_sCld [Occ=Once]
                  d1_sCle [Occ=Once]
                  e1_sClf [Occ=Once]
                  f13_sClg [Occ=Once] ->
              let {
                sat_sClu [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sCl1
                     $dShow1_sCl2
                     $dShow2_sCl3
                     $dShow3_sCl4
                     $dShow4_sCl5
                     $dShow5_sCl6
                     s_sCl9
                     a1_sClb
                     b1_sClc
                     c1_sCld
                     d1_sCle
                     e1_sClf
                     f13_sClg] \u []
                        let {
                          sat_sClt [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sCl9]; } in
                        let {
                          sat_sClm [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sCl6 f13_sClg] \u []
                                  GHC.Show.showsPrec $dShow5_sCl6 GHC.Show.$fShow(,)1 f13_sClg; } in
                        let {
                          sat_sCln [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sClm GHC.Types.[]]; } in
                        let {
                          sat_sCll [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sCl5 e1_sClf] \u []
                                  GHC.Show.showsPrec $dShow4_sCl5 GHC.Show.$fShow(,)1 e1_sClf; } in
                        let {
                          sat_sClo [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCll sat_sCln]; } in
                        let {
                          sat_sClk [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sCl4 d1_sCle] \u []
                                  GHC.Show.showsPrec $dShow3_sCl4 GHC.Show.$fShow(,)1 d1_sCle; } in
                        let {
                          sat_sClp [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sClk sat_sClo]; } in
                        let {
                          sat_sClj [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sCl3 c1_sCld] \u []
                                  GHC.Show.showsPrec $dShow2_sCl3 GHC.Show.$fShow(,)1 c1_sCld; } in
                        let {
                          sat_sClq [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sClj sat_sClp]; } in
                        let {
                          sat_sCli [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sCl2 b1_sClc] \u []
                                  GHC.Show.showsPrec $dShow1_sCl2 GHC.Show.$fShow(,)1 b1_sClc; } in
                        let {
                          sat_sClr [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCli sat_sClq]; } in
                        let {
                          sat_sClh [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sCl1 a1_sClb] \u []
                                  GHC.Show.showsPrec $dShow_sCl1 GHC.Show.$fShow(,)1 a1_sClb; } in
                        let {
                          sat_sCls [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sClh sat_sClr];
                        } in  GHC.Show.$fShow(,,,,,)_go2 sat_sCls sat_sClt;
              } in  : [GHC.Show.$fShow(,)4 sat_sClu];
        };

GHC.Show.$fShow(,,,,,)_$cshow
  :: forall a b c d e f.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f) =>
     (a, b, c, d, e, f) -> GHC.Base.String
[GblId,
 Arity=7,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sClv
           $dShow1_sClw
           $dShow2_sClx
           $dShow3_sCly
           $dShow4_sClz
           $dShow5_sClA
           x_sClB]
        GHC.Show.$fShow(,,,,,)_$cshowsPrec
            $dShow_sClv
            $dShow1_sClw
            $dShow2_sClx
            $dShow3_sCly
            $dShow4_sClz
            $dShow5_sClA
            GHC.Show.$fShow(,)1
            x_sClB
            GHC.Types.[];

GHC.Show.$fShow(,,,,,)_$cshowList
  :: forall a b c d e f.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f) =>
     [(a, b, c, d, e, f)] -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sClC
           $dShow1_sClD
           $dShow2_sClE
           $dShow3_sClF
           $dShow4_sClG
           $dShow5_sClH
           ls_sClI
           s_sClJ]
        let {
          sat_sClK [Occ=Once]
            :: (a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sClC
               $dShow1_sClD
               $dShow2_sClE
               $dShow3_sClF
               $dShow4_sClG
               $dShow5_sClH] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,)_$cshowsPrec
                      $dShow_sClC
                      $dShow1_sClD
                      $dShow2_sClE
                      $dShow3_sClF
                      $dShow4_sClG
                      $dShow5_sClH
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sClK ls_sClI s_sClJ;

GHC.Show.$fShow(,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f) =>
     GHC.Show.Show (a, b, c, d, e, f)
[GblId[DFunId],
 Arity=6,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sClL
           $dShow1_sClM
           $dShow2_sClN
           $dShow3_sClO
           $dShow4_sClP
           $dShow5_sClQ]
        let {
          sat_sClT [Occ=Once]
            :: [(a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sClL
               $dShow1_sClM
               $dShow2_sClN
               $dShow3_sClO
               $dShow4_sClP
               $dShow5_sClQ] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,)_$cshowList
                      $dShow_sClL
                      $dShow1_sClM
                      $dShow2_sClN
                      $dShow3_sClO
                      $dShow4_sClP
                      $dShow5_sClQ
                      eta_B2
                      eta_B1; } in
        let {
          sat_sClS [Occ=Once]
            :: (a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sClL
               $dShow1_sClM
               $dShow2_sClN
               $dShow3_sClO
               $dShow4_sClP
               $dShow5_sClQ] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,)_$cshow
                      $dShow_sClL
                      $dShow1_sClM
                      $dShow2_sClN
                      $dShow3_sClO
                      $dShow4_sClP
                      $dShow5_sClQ
                      eta_B1; } in
        let {
          sat_sClR [Occ=Once]
            :: GHC.Types.Int
               -> (a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sClL
               $dShow1_sClM
               $dShow2_sClN
               $dShow3_sClO
               $dShow4_sClP
               $dShow5_sClQ] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,)_$cshowsPrec
                      $dShow_sClL
                      $dShow1_sClM
                      $dShow2_sClN
                      $dShow3_sClO
                      $dShow4_sClP
                      $dShow5_sClQ
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sClR sat_sClS sat_sClT];

GHC.Show.$fShow(,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sClU eta_sClV]
        case ds_sClU of {
          [] -> lvl11_rC0o;
          : x_sClY [Occ=Once*!] ds1_sClZ [Occ=Once!] ->
              case ds1_sClZ of wild1_sCm0 {
                [] -> x_sClY eta_sClV;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCm3 [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sClV wild1_sCm0] \u []
                              GHC.Show.$fShow(,,,,)_go2 wild1_sCm0 eta_sClV; } in
                    let {
                      sat_sCm4 [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCm3];
                    } in  x_sClY sat_sCm4;
              };
        };

GHC.Show.$fShow(,,,,)_$cshowsPrec
  :: forall a b c d e.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e) =>
     GHC.Types.Int -> (a, b, c, d, e) -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCm5
           $dShow1_sCm6
           $dShow2_sCm7
           $dShow3_sCm8
           $dShow4_sCm9
           ds_sCma
           ds1_sCmb
           s_sCmc]
        case ds1_sCmb of {
          (,,,,) a1_sCme [Occ=Once]
                 b1_sCmf [Occ=Once]
                 c1_sCmg [Occ=Once]
                 d1_sCmh [Occ=Once]
                 e1_sCmi [Occ=Once] ->
              let {
                sat_sCmu [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sCm5
                     $dShow1_sCm6
                     $dShow2_sCm7
                     $dShow3_sCm8
                     $dShow4_sCm9
                     s_sCmc
                     a1_sCme
                     b1_sCmf
                     c1_sCmg
                     d1_sCmh
                     e1_sCmi] \u []
                        let {
                          sat_sCmt [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sCmc]; } in
                        let {
                          sat_sCmn [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sCm9 e1_sCmi] \u []
                                  GHC.Show.showsPrec $dShow4_sCm9 GHC.Show.$fShow(,)1 e1_sCmi; } in
                        let {
                          sat_sCmo [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCmn GHC.Types.[]]; } in
                        let {
                          sat_sCmm [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sCm8 d1_sCmh] \u []
                                  GHC.Show.showsPrec $dShow3_sCm8 GHC.Show.$fShow(,)1 d1_sCmh; } in
                        let {
                          sat_sCmp [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCmm sat_sCmo]; } in
                        let {
                          sat_sCml [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sCm7 c1_sCmg] \u []
                                  GHC.Show.showsPrec $dShow2_sCm7 GHC.Show.$fShow(,)1 c1_sCmg; } in
                        let {
                          sat_sCmq [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCml sat_sCmp]; } in
                        let {
                          sat_sCmk [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sCm6 b1_sCmf] \u []
                                  GHC.Show.showsPrec $dShow1_sCm6 GHC.Show.$fShow(,)1 b1_sCmf; } in
                        let {
                          sat_sCmr [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCmk sat_sCmq]; } in
                        let {
                          sat_sCmj [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sCm5 a1_sCme] \u []
                                  GHC.Show.showsPrec $dShow_sCm5 GHC.Show.$fShow(,)1 a1_sCme; } in
                        let {
                          sat_sCms [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sCmj sat_sCmr];
                        } in  GHC.Show.$fShow(,,,,)_go2 sat_sCms sat_sCmt;
              } in  : [GHC.Show.$fShow(,)4 sat_sCmu];
        };

GHC.Show.$fShow(,,,,)_$cshow
  :: forall a b c d e.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e) =>
     (a, b, c, d, e) -> GHC.Base.String
[GblId,
 Arity=6,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCmv
           $dShow1_sCmw
           $dShow2_sCmx
           $dShow3_sCmy
           $dShow4_sCmz
           x_sCmA]
        GHC.Show.$fShow(,,,,)_$cshowsPrec
            $dShow_sCmv
            $dShow1_sCmw
            $dShow2_sCmx
            $dShow3_sCmy
            $dShow4_sCmz
            GHC.Show.$fShow(,)1
            x_sCmA
            GHC.Types.[];

GHC.Show.$fShow(,,,,)_$cshowList
  :: forall a b c d e.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e) =>
     [(a, b, c, d, e)] -> GHC.Show.ShowS
[GblId,
 Arity=7,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCmB
           $dShow1_sCmC
           $dShow2_sCmD
           $dShow3_sCmE
           $dShow4_sCmF
           ls_sCmG
           s_sCmH]
        let {
          sat_sCmI [Occ=Once]
            :: (a_azHA, b_azHB, c_azHC, d_azHD, e_azHE) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCmB
               $dShow1_sCmC
               $dShow2_sCmD
               $dShow3_sCmE
               $dShow4_sCmF] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,)_$cshowsPrec
                      $dShow_sCmB
                      $dShow1_sCmC
                      $dShow2_sCmD
                      $dShow3_sCmE
                      $dShow4_sCmF
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sCmI ls_sCmG s_sCmH;

GHC.Show.$fShow(,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e) =>
     GHC.Show.Show (a, b, c, d, e)
[GblId[DFunId],
 Arity=5,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sCmJ
           $dShow1_sCmK
           $dShow2_sCmL
           $dShow3_sCmM
           $dShow4_sCmN]
        let {
          sat_sCmQ [Occ=Once]
            :: [(a_azHA, b_azHB, c_azHC, d_azHD, e_azHE)] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCmJ
               $dShow1_sCmK
               $dShow2_sCmL
               $dShow3_sCmM
               $dShow4_sCmN] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,)_$cshowList
                      $dShow_sCmJ
                      $dShow1_sCmK
                      $dShow2_sCmL
                      $dShow3_sCmM
                      $dShow4_sCmN
                      eta_B2
                      eta_B1; } in
        let {
          sat_sCmP [Occ=Once]
            :: (a_azHA, b_azHB, c_azHC, d_azHD, e_azHE) -> GHC.Base.String
          [LclId] =
              [$dShow_sCmJ
               $dShow1_sCmK
               $dShow2_sCmL
               $dShow3_sCmM
               $dShow4_sCmN] \r [eta_B1]
                  GHC.Show.$fShow(,,,,)_$cshow
                      $dShow_sCmJ
                      $dShow1_sCmK
                      $dShow2_sCmL
                      $dShow3_sCmM
                      $dShow4_sCmN
                      eta_B1; } in
        let {
          sat_sCmO [Occ=Once]
            :: GHC.Types.Int
               -> (a_azHA, b_azHB, c_azHC, d_azHD, e_azHE) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCmJ
               $dShow1_sCmK
               $dShow2_sCmL
               $dShow3_sCmM
               $dShow4_sCmN] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,)_$cshowsPrec
                      $dShow_sCmJ
                      $dShow1_sCmK
                      $dShow2_sCmL
                      $dShow3_sCmM
                      $dShow4_sCmN
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sCmO sat_sCmP sat_sCmQ];

GHC.Show.$fShow(,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCmR eta_sCmS]
        case ds_sCmR of {
          [] -> lvl11_rC0o;
          : x_sCmV [Occ=Once*!] ds1_sCmW [Occ=Once!] ->
              case ds1_sCmW of wild1_sCmX {
                [] -> x_sCmV eta_sCmS;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCn0 [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCmS wild1_sCmX] \u []
                              GHC.Show.$fShow(,,,)_go2 wild1_sCmX eta_sCmS; } in
                    let {
                      sat_sCn1 [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCn0];
                    } in  x_sCmV sat_sCn1;
              };
        };

GHC.Show.$w$cshowsPrec2 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d) =>
     a
     -> b
     -> c
     -> d
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId,
 Arity=9,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sCn2
           w1_sCn3
           w2_sCn4
           w3_sCn5
           ww_sCn6
           ww1_sCn7
           ww2_sCn8
           ww3_sCn9
           w4_sCna]
        let {
          sat_sCnk [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [w_sCn2
               w1_sCn3
               w2_sCn4
               w3_sCn5
               ww_sCn6
               ww1_sCn7
               ww2_sCn8
               ww3_sCn9
               w4_sCna] \u []
                  let {
                    sat_sCnj [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [GHC.Show.$fShow(,)2 w4_sCna]; } in
                  let {
                    sat_sCne [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w3_sCn5 ww3_sCn9] \u []
                            GHC.Show.showsPrec w3_sCn5 GHC.Show.$fShow(,)1 ww3_sCn9; } in
                  let {
                    sat_sCnf [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sCne GHC.Types.[]]; } in
                  let {
                    sat_sCnd [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w2_sCn4 ww2_sCn8] \u []
                            GHC.Show.showsPrec w2_sCn4 GHC.Show.$fShow(,)1 ww2_sCn8; } in
                  let {
                    sat_sCng [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sCnd sat_sCnf]; } in
                  let {
                    sat_sCnc [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w1_sCn3 ww1_sCn7] \u []
                            GHC.Show.showsPrec w1_sCn3 GHC.Show.$fShow(,)1 ww1_sCn7; } in
                  let {
                    sat_sCnh [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sCnc sat_sCng]; } in
                  let {
                    sat_sCnb [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w_sCn2 ww_sCn6] \u []
                            GHC.Show.showsPrec w_sCn2 GHC.Show.$fShow(,)1 ww_sCn6; } in
                  let {
                    sat_sCni [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                    [LclId] =
                        CCCS :! [sat_sCnb sat_sCnh];
                  } in  GHC.Show.$fShow(,,,)_go2 sat_sCni sat_sCnj;
        } in  (#,#) [GHC.Show.$fShow(,)4 sat_sCnk];

GHC.Show.$fShow(,,,)_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d) =>
     GHC.Types.Int -> (a, b, c, d) -> GHC.Show.ShowS
[GblId,
 Arity=7,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sCnl w1_sCnm w2_sCnn w3_sCno w4_sCnp w5_sCnq w6_sCnr]
        case w5_sCnq of {
          (,,,) ww1_sCnt [Occ=Once]
                ww2_sCnu [Occ=Once]
                ww3_sCnv [Occ=Once]
                ww4_sCnw [Occ=Once] ->
              case
                  GHC.Show.$w$cshowsPrec2
                      w_sCnl
                      w1_sCnm
                      w2_sCnn
                      w3_sCno
                      ww1_sCnt
                      ww2_sCnu
                      ww3_sCnv
                      ww4_sCnw
                      w6_sCnr
              of
              { (#,#) ww6_sCny [Occ=Once] ww7_sCnz [Occ=Once] ->
                    : [ww6_sCny ww7_sCnz];
              };
        };

GHC.Show.$fShow(,,,)_$cshow
  :: forall a b c d.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d) =>
     (a, b, c, d) -> GHC.Base.String
[GblId,
 Arity=5,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCnA $dShow1_sCnB $dShow2_sCnC $dShow3_sCnD x_sCnE]
        case x_sCnE of {
          (,,,) ww1_sCnG [Occ=Once]
                ww2_sCnH [Occ=Once]
                ww3_sCnI [Occ=Once]
                ww4_sCnJ [Occ=Once] ->
              case
                  GHC.Show.$w$cshowsPrec2
                      $dShow_sCnA
                      $dShow1_sCnB
                      $dShow2_sCnC
                      $dShow3_sCnD
                      ww1_sCnG
                      ww2_sCnH
                      ww3_sCnI
                      ww4_sCnJ
                      GHC.Types.[]
              of
              { (#,#) ww6_sCnL [Occ=Once] ww7_sCnM [Occ=Once] ->
                    : [ww6_sCnL ww7_sCnM];
              };
        };

GHC.Show.$fShow(,,,)_$cshowList
  :: forall a b c d.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d) =>
     [(a, b, c, d)] -> GHC.Show.ShowS
[GblId,
 Arity=6,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCnN
           $dShow1_sCnO
           $dShow2_sCnP
           $dShow3_sCnQ
           ls_sCnR
           s_sCnS]
        let {
          sat_sCo3 [Occ=Once]
            :: (a_azIa, b_azIb, c_azIc, d_azId) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCnN $dShow1_sCnO $dShow2_sCnP $dShow3_sCnQ] \r [w_sCnT
                                                                       w1_sCnU]
                  case w_sCnT of {
                    (,,,) ww1_sCnW [Occ=Once]
                          ww2_sCnX [Occ=Once]
                          ww3_sCnY [Occ=Once]
                          ww4_sCnZ [Occ=Once] ->
                        case
                            GHC.Show.$w$cshowsPrec2
                                $dShow_sCnN
                                $dShow1_sCnO
                                $dShow2_sCnP
                                $dShow3_sCnQ
                                ww1_sCnW
                                ww2_sCnX
                                ww3_sCnY
                                ww4_sCnZ
                                w1_sCnU
                        of
                        { (#,#) ww6_sCo1 [Occ=Once] ww7_sCo2 [Occ=Once] ->
                              : [ww6_sCo1 ww7_sCo2];
                        };
                  };
        } in  GHC.Show.showList__ sat_sCo3 ls_sCnR s_sCnS;

GHC.Show.$fShow(,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d) =>
     GHC.Show.Show (a, b, c, d)
[GblId[DFunId],
 Arity=4,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sCo4 $dShow1_sCo5 $dShow2_sCo6 $dShow3_sCo7]
        let {
          sat_sCoa [Occ=Once]
            :: [(a_azIa, b_azIb, c_azIc, d_azId)] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCo4 $dShow1_sCo5 $dShow2_sCo6 $dShow3_sCo7] \r [eta_B2
                                                                       eta_B1]
                  GHC.Show.$fShow(,,,)_$cshowList
                      $dShow_sCo4
                      $dShow1_sCo5
                      $dShow2_sCo6
                      $dShow3_sCo7
                      eta_B2
                      eta_B1; } in
        let {
          sat_sCo9 [Occ=Once]
            :: (a_azIa, b_azIb, c_azIc, d_azId) -> GHC.Base.String
          [LclId] =
              [$dShow_sCo4 $dShow1_sCo5 $dShow2_sCo6 $dShow3_sCo7] \r [eta_B1]
                  GHC.Show.$fShow(,,,)_$cshow
                      $dShow_sCo4 $dShow1_sCo5 $dShow2_sCo6 $dShow3_sCo7 eta_B1; } in
        let {
          sat_sCo8 [Occ=Once]
            :: GHC.Types.Int
               -> (a_azIa, b_azIb, c_azIc, d_azId) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCo4 $dShow1_sCo5 $dShow2_sCo6 $dShow3_sCo7] \r [eta_B3
                                                                       eta_B2
                                                                       eta_B1]
                  GHC.Show.$fShow(,,,)_$cshowsPrec
                      $dShow_sCo4
                      $dShow1_sCo5
                      $dShow2_sCo6
                      $dShow3_sCo7
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sCo8 sat_sCo9 sat_sCoa];

GHC.Show.$fShow(,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCob eta_sCoc]
        case ds_sCob of {
          [] -> lvl11_rC0o;
          : x_sCof [Occ=Once*!] ds1_sCog [Occ=Once!] ->
              case ds1_sCog of wild1_sCoh {
                [] -> x_sCof eta_sCoc;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCok [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCoc wild1_sCoh] \u []
                              GHC.Show.$fShow(,,)_go2 wild1_sCoh eta_sCoc; } in
                    let {
                      sat_sCol [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCok];
                    } in  x_sCof sat_sCol;
              };
        };

GHC.Show.$w$cshowsPrec1 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c) =>
     a
     -> b
     -> c
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId,
 Arity=7,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sCom w1_sCon w2_sCoo ww_sCop ww1_sCoq ww2_sCor w3_sCos]
        let {
          sat_sCoA [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [w_sCom w1_sCon w2_sCoo ww_sCop ww1_sCoq ww2_sCor w3_sCos] \u []
                  let {
                    sat_sCoz [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [GHC.Show.$fShow(,)2 w3_sCos]; } in
                  let {
                    sat_sCov [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w2_sCoo ww2_sCor] \u []
                            GHC.Show.showsPrec w2_sCoo GHC.Show.$fShow(,)1 ww2_sCor; } in
                  let {
                    sat_sCow [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sCov GHC.Types.[]]; } in
                  let {
                    sat_sCou [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w1_sCon ww1_sCoq] \u []
                            GHC.Show.showsPrec w1_sCon GHC.Show.$fShow(,)1 ww1_sCoq; } in
                  let {
                    sat_sCox [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sCou sat_sCow]; } in
                  let {
                    sat_sCot [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w_sCom ww_sCop] \u []
                            GHC.Show.showsPrec w_sCom GHC.Show.$fShow(,)1 ww_sCop; } in
                  let {
                    sat_sCoy [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                    [LclId] =
                        CCCS :! [sat_sCot sat_sCox];
                  } in  GHC.Show.$fShow(,,)_go2 sat_sCoy sat_sCoz;
        } in  (#,#) [GHC.Show.$fShow(,)4 sat_sCoA];

GHC.Show.$fShow(,,)_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a b c.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c) =>
     GHC.Types.Int -> (a, b, c) -> GHC.Show.ShowS
[GblId,
 Arity=6,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sCoB w1_sCoC w2_sCoD w3_sCoE w4_sCoF w5_sCoG]
        case w4_sCoF of {
          (,,) ww1_sCoI [Occ=Once] ww2_sCoJ [Occ=Once] ww3_sCoK [Occ=Once] ->
              case
                  GHC.Show.$w$cshowsPrec1
                      w_sCoB w1_sCoC w2_sCoD ww1_sCoI ww2_sCoJ ww3_sCoK w5_sCoG
              of
              { (#,#) ww5_sCoM [Occ=Once] ww6_sCoN [Occ=Once] ->
                    : [ww5_sCoM ww6_sCoN];
              };
        };

GHC.Show.$fShow(,,)_$cshow
  :: forall a b c.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c) =>
     (a, b, c) -> GHC.Base.String
[GblId,
 Arity=4,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCoO $dShow1_sCoP $dShow2_sCoQ x_sCoR]
        case x_sCoR of {
          (,,) ww1_sCoT [Occ=Once] ww2_sCoU [Occ=Once] ww3_sCoV [Occ=Once] ->
              case
                  GHC.Show.$w$cshowsPrec1
                      $dShow_sCoO
                      $dShow1_sCoP
                      $dShow2_sCoQ
                      ww1_sCoT
                      ww2_sCoU
                      ww3_sCoV
                      GHC.Types.[]
              of
              { (#,#) ww5_sCoX [Occ=Once] ww6_sCoY [Occ=Once] ->
                    : [ww5_sCoX ww6_sCoY];
              };
        };

GHC.Show.$fShow(,,)_$cshowList
  :: forall a b c.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c) =>
     [(a, b, c)] -> GHC.Show.ShowS
[GblId,
 Arity=5,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCoZ $dShow1_sCp0 $dShow2_sCp1 ls_sCp2 s_sCp3]
        let {
          sat_sCpd [Occ=Once] :: (a_azIG, b_azIH, c_azII) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCoZ $dShow1_sCp0 $dShow2_sCp1] \r [w_sCp4 w1_sCp5]
                  case w_sCp4 of {
                    (,,) ww1_sCp7 [Occ=Once] ww2_sCp8 [Occ=Once] ww3_sCp9 [Occ=Once] ->
                        case
                            GHC.Show.$w$cshowsPrec1
                                $dShow_sCoZ
                                $dShow1_sCp0
                                $dShow2_sCp1
                                ww1_sCp7
                                ww2_sCp8
                                ww3_sCp9
                                w1_sCp5
                        of
                        { (#,#) ww5_sCpb [Occ=Once] ww6_sCpc [Occ=Once] ->
                              : [ww5_sCpb ww6_sCpc];
                        };
                  };
        } in  GHC.Show.showList__ sat_sCpd ls_sCp2 s_sCp3;

GHC.Show.$fShow(,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c) =>
     GHC.Show.Show (a, b, c)
[GblId[DFunId],
 Arity=3,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sCpe $dShow1_sCpf $dShow2_sCpg]
        let {
          sat_sCpj [Occ=Once] :: [(a_azIG, b_azIH, c_azII)] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCpe $dShow1_sCpf $dShow2_sCpg] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,)_$cshowList
                      $dShow_sCpe $dShow1_sCpf $dShow2_sCpg eta_B2 eta_B1; } in
        let {
          sat_sCpi [Occ=Once] :: (a_azIG, b_azIH, c_azII) -> GHC.Base.String
          [LclId] =
              [$dShow_sCpe $dShow1_sCpf $dShow2_sCpg] \r [eta_B1]
                  GHC.Show.$fShow(,,)_$cshow
                      $dShow_sCpe $dShow1_sCpf $dShow2_sCpg eta_B1; } in
        let {
          sat_sCph [Occ=Once]
            :: GHC.Types.Int -> (a_azIG, b_azIH, c_azII) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCpe $dShow1_sCpf $dShow2_sCpg] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,)_$cshowsPrec
                      $dShow_sCpe $dShow1_sCpf $dShow2_sCpg eta_B3 eta_B2 eta_B1;
        } in  GHC.Show.C:Show [sat_sCph sat_sCpi sat_sCpj];

GHC.Show.$fShow(,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCpk eta_sCpl]
        case ds_sCpk of {
          [] -> lvl11_rC0o;
          : x_sCpo [Occ=Once*!] ds1_sCpp [Occ=Once!] ->
              case ds1_sCpp of wild1_sCpq {
                [] -> x_sCpo eta_sCpl;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCpt [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCpl wild1_sCpq] \u []
                              GHC.Show.$fShow(,)_go2 wild1_sCpq eta_sCpl; } in
                    let {
                      sat_sCpu [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCpt];
                    } in  x_sCpo sat_sCpu;
              };
        };

GHC.Show.$w$s$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: [GHC.Types.Char]
     -> GHC.Stack.Types.SrcLoc
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId,
 Arity=3,
 Str=<L,U><L,U(U,U,U,U(U),U(U),U(U),U(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sCpv ww1_sCpw w_sCpx]
        let {
          sat_sCpM [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_sCpv ww1_sCpw w_sCpx] \u []
                  let {
                    sat_sCpL [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [GHC.Show.$fShow(,)2 w_sCpx]; } in
                  let {
                    sat_sCpI [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [ww1_sCpw] \r [w1_sCpz]
                            case ww1_sCpw of {
                              GHC.Stack.Types.SrcLoc ww3_sCpB [Occ=Once]
                                                     ww4_sCpC [Occ=Once]
                                                     ww5_sCpD [Occ=Once]
                                                     ww6_sCpE [Occ=Once]
                                                     ww7_sCpF [Occ=Once]
                                                     ww8_sCpG [Occ=Once]
                                                     ww9_sCpH [Occ=Once] ->
                                  GHC.Show.$w$cshowsPrec
                                      0#
                                      ww3_sCpB
                                      ww4_sCpC
                                      ww5_sCpD
                                      ww6_sCpE
                                      ww7_sCpF
                                      ww8_sCpG
                                      ww9_sCpH
                                      w1_sCpz;
                            }; } in
                  let {
                    sat_sCpJ [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sCpI GHC.Types.[]]; } in
                  let {
                    sat_sCpy [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [ww_sCpv] \r [eta_B1]
                            GHC.Show.$fShow(,)_$cshowList1 ww_sCpv eta_B1; } in
                  let {
                    sat_sCpK [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                    [LclId] =
                        CCCS :! [sat_sCpy sat_sCpJ];
                  } in  GHC.Show.$fShow(,)_go2 sat_sCpK sat_sCpL;
        } in  (#,#) [GHC.Show.$fShow(,)4 sat_sCpM];

GHC.Show.$fShow(,)_go1 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCpN eta_sCpO]
        case ds_sCpN of {
          [] -> lvl11_rC0o;
          : x_sCpR [Occ=Once*!] ds1_sCpS [Occ=Once!] ->
              case ds1_sCpS of wild1_sCpT {
                [] -> x_sCpR eta_sCpO;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sCpW [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sCpO wild1_sCpT] \u []
                              GHC.Show.$fShow(,)_go1 wild1_sCpT eta_sCpO; } in
                    let {
                      sat_sCpX [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sCpW];
                    } in  x_sCpR sat_sCpX;
              };
        };

GHC.Show.$fShow(,)_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a b.
     (GHC.Show.Show a, GHC.Show.Show b) =>
     GHC.Types.Int -> (a, b) -> GHC.Show.ShowS
[GblId,
 Arity=5,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sCpY w1_sCpZ w2_sCq0 w3_sCq1 w4_sCq2]
        case w3_sCq1 of {
          (,) ww1_sCq4 [Occ=Once] ww2_sCq5 [Occ=Once] ->
              let {
                sat_sCqb [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sCpY w1_sCpZ w4_sCq2 ww1_sCq4 ww2_sCq5] \u []
                        let {
                          sat_sCqa [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 w4_sCq2]; } in
                        let {
                          sat_sCq7 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [w1_sCpZ ww2_sCq5] \u []
                                  GHC.Show.showsPrec w1_sCpZ GHC.Show.$fShow(,)1 ww2_sCq5; } in
                        let {
                          sat_sCq8 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCq7 GHC.Types.[]]; } in
                        let {
                          sat_sCq6 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [w_sCpY ww1_sCq4] \u []
                                  GHC.Show.showsPrec w_sCpY GHC.Show.$fShow(,)1 ww1_sCq4; } in
                        let {
                          sat_sCq9 [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sCq6 sat_sCq8];
                        } in  GHC.Show.$fShow(,)_go1 sat_sCq9 sat_sCqa;
              } in  : [GHC.Show.$fShow(,)4 sat_sCqb];
        };

GHC.Show.$fShow(,)_$cshow
  :: forall a b.
     (GHC.Show.Show a, GHC.Show.Show b) =>
     (a, b) -> GHC.Base.String
[GblId,
 Arity=3,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sCqc $dShow1_sCqd x_sCqe]
        case x_sCqe of {
          (,) ww1_sCqg [Occ=Once] ww2_sCqh [Occ=Once] ->
              let {
                sat_sCqn [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sCqc $dShow1_sCqd ww1_sCqg ww2_sCqh] \u []
                        let {
                          sat_sCqm [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 GHC.Types.[]]; } in
                        let {
                          sat_sCqj [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sCqd ww2_sCqh] \u []
                                  GHC.Show.showsPrec $dShow1_sCqd GHC.Show.$fShow(,)1 ww2_sCqh; } in
                        let {
                          sat_sCqk [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sCqj GHC.Types.[]]; } in
                        let {
                          sat_sCqi [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sCqc ww1_sCqg] \u []
                                  GHC.Show.showsPrec $dShow_sCqc GHC.Show.$fShow(,)1 ww1_sCqg; } in
                        let {
                          sat_sCql [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sCqi sat_sCqk];
                        } in  GHC.Show.$fShow(,)_go1 sat_sCql sat_sCqm;
              } in  : [GHC.Show.$fShow(,)4 sat_sCqn];
        };

GHC.Show.$fShow(,)_$cshowList
  :: forall a b.
     (GHC.Show.Show a, GHC.Show.Show b) =>
     [(a, b)] -> GHC.Show.ShowS
[GblId,
 Arity=4,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCqo $dShow1_sCqp ls_sCqq s_sCqr]
        let {
          sat_sCqD [Occ=Once] :: (a_azJ8, b_azJ9) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCqo $dShow1_sCqp] \r [w_sCqs w1_sCqt]
                  case w_sCqs of {
                    (,) ww1_sCqv [Occ=Once] ww2_sCqw [Occ=Once] ->
                        let {
                          sat_sCqC [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [$dShow_sCqo $dShow1_sCqp w1_sCqt ww1_sCqv ww2_sCqw] \u []
                                  let {
                                    sat_sCqB [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        CCCS :! [GHC.Show.$fShow(,)2 w1_sCqt]; } in
                                  let {
                                    sat_sCqy [Occ=Once] :: GHC.Show.ShowS
                                    [LclId] =
                                        [$dShow1_sCqp ww2_sCqw] \u []
                                            GHC.Show.showsPrec
                                                $dShow1_sCqp GHC.Show.$fShow(,)1 ww2_sCqw; } in
                                  let {
                                    sat_sCqz [Occ=Once] :: [GHC.Show.ShowS]
                                    [LclId] =
                                        CCCS :! [sat_sCqy GHC.Types.[]]; } in
                                  let {
                                    sat_sCqx [Occ=Once] :: GHC.Show.ShowS
                                    [LclId] =
                                        [$dShow_sCqo ww1_sCqv] \u []
                                            GHC.Show.showsPrec
                                                $dShow_sCqo GHC.Show.$fShow(,)1 ww1_sCqv; } in
                                  let {
                                    sat_sCqA [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                                    [LclId] =
                                        CCCS :! [sat_sCqx sat_sCqz];
                                  } in  GHC.Show.$fShow(,)_go1 sat_sCqA sat_sCqB;
                        } in  : [GHC.Show.$fShow(,)4 sat_sCqC];
                  };
        } in  GHC.Show.showList__ sat_sCqD ls_sCqq s_sCqr;

GHC.Show.$fShow(,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b.
     (GHC.Show.Show a, GHC.Show.Show b) =>
     GHC.Show.Show (a, b)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sCqE $dShow1_sCqF]
        let {
          sat_sCqI [Occ=Once] :: [(a_azJ8, b_azJ9)] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCqE $dShow1_sCqF] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,)_$cshowList
                      $dShow_sCqE $dShow1_sCqF eta_B2 eta_B1; } in
        let {
          sat_sCqH [Occ=Once] :: (a_azJ8, b_azJ9) -> GHC.Base.String
          [LclId] =
              [$dShow_sCqE $dShow1_sCqF] \r [eta_B1]
                  GHC.Show.$fShow(,)_$cshow $dShow_sCqE $dShow1_sCqF eta_B1; } in
        let {
          sat_sCqG [Occ=Once]
            :: GHC.Types.Int -> (a_azJ8, b_azJ9) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCqE $dShow1_sCqF] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,)_$cshowsPrec
                      $dShow_sCqE $dShow1_sCqF eta_B3 eta_B2 eta_B1;
        } in  GHC.Show.C:Show [sat_sCqG sat_sCqH sat_sCqI];

GHC.Show.showString :: GHC.Base.String -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Base.++ eta_B2 eta_B1;

GHC.Show.showCommaSpace :: GHC.Show.ShowS
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.++ GHC.Show.showCommaSpace1 eta_B1;

GHC.Show.$fShowTypeLitSort5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TypeLitSymbol"#;

GHC.Show.$fShowTypeLitSort4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowTypeLitSort5;

GHC.Show.$fShowTypeLitSort3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TypeLitNat"#;

GHC.Show.$fShowTypeLitSort2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowTypeLitSort3;

GHC.Show.$fShowTypeLitSort_$cshowsPrec
  :: GHC.Types.Int -> GHC.Types.TypeLitSort -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sCqJ ds1_sCqK eta_sCqL]
        case ds1_sCqK of {
          GHC.Types.TypeLitSymbol ->
              GHC.Base.++ GHC.Show.$fShowTypeLitSort4 eta_sCqL;
          GHC.Types.TypeLitNat ->
              GHC.Base.++ GHC.Show.$fShowTypeLitSort2 eta_sCqL;
        };

GHC.Show.$fShowTypeLitSort_$cshow
  :: GHC.Types.TypeLitSort -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sCqN]
        case x_sCqN of {
          GHC.Types.TypeLitSymbol -> GHC.Show.$fShowTypeLitSort4;
          GHC.Types.TypeLitNat -> GHC.Show.$fShowTypeLitSort2;
        };

GHC.Show.$fShowTypeLitSort1
  :: GHC.Types.TypeLitSort -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sCqP eta_sCqQ]
        case ds_sCqP of {
          GHC.Types.TypeLitSymbol ->
              GHC.Base.++ GHC.Show.$fShowTypeLitSort4 eta_sCqQ;
          GHC.Types.TypeLitNat ->
              GHC.Base.++ GHC.Show.$fShowTypeLitSort2 eta_sCqQ;
        };

GHC.Show.$fShowTypeLitSort_$cshowList
  :: [GHC.Types.TypeLitSort] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sCqS s_sCqT]
        GHC.Show.showList__ GHC.Show.$fShowTypeLitSort1 ls_sCqS s_sCqT;

GHC.Show.$fShowTypeLitSort [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.TypeLitSort
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowTypeLitSort_$cshowsPrec
                                    GHC.Show.$fShowTypeLitSort_$cshow
                                    GHC.Show.$fShowTypeLitSort_$cshowList];

GHC.Show.$fShowVecElem20 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int8ElemRep"#;

GHC.Show.$fShowVecElem19 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem20;

GHC.Show.$fShowVecElem18 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int16ElemRep"#;

GHC.Show.$fShowVecElem17 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem18;

GHC.Show.$fShowVecElem16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int32ElemRep"#;

GHC.Show.$fShowVecElem15 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem16;

GHC.Show.$fShowVecElem14 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int64ElemRep"#;

GHC.Show.$fShowVecElem13 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem14;

GHC.Show.$fShowVecElem12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word8ElemRep"#;

GHC.Show.$fShowVecElem11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem12;

GHC.Show.$fShowVecElem10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word16ElemRep"#;

GHC.Show.$fShowVecElem9 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem10;

GHC.Show.$fShowVecElem8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word32ElemRep"#;

GHC.Show.$fShowVecElem7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem8;

GHC.Show.$fShowVecElem6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word64ElemRep"#;

GHC.Show.$fShowVecElem5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem6;

GHC.Show.$fShowVecElem4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FloatElemRep"#;

GHC.Show.$fShowVecElem3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem4;

GHC.Show.$fShowVecElem2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DoubleElemRep"#;

GHC.Show.$fShowVecElem1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem2;

GHC.Show.$w$cshowsPrec10 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.VecElem -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sCqU w1_sCqV]
        case w_sCqU of {
          GHC.Types.Int8ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem19 w1_sCqV;
          GHC.Types.Int16ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem17 w1_sCqV;
          GHC.Types.Int32ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem15 w1_sCqV;
          GHC.Types.Int64ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem13 w1_sCqV;
          GHC.Types.Word8ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem11 w1_sCqV;
          GHC.Types.Word16ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem9 w1_sCqV;
          GHC.Types.Word32ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem7 w1_sCqV;
          GHC.Types.Word64ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem5 w1_sCqV;
          GHC.Types.FloatElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem3 w1_sCqV;
          GHC.Types.DoubleElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem1 w1_sCqV;
        };

GHC.Show.$fShowVecElem_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.VecElem -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sCqX w1_sCqY w2_sCqZ]
        GHC.Show.$w$cshowsPrec10 w1_sCqY w2_sCqZ;

GHC.Show.$fShowVecElem_$cshow
  :: GHC.Types.VecElem -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sCr0]
        case x_sCr0 of {
          GHC.Types.Int8ElemRep -> GHC.Show.$fShowVecElem19;
          GHC.Types.Int16ElemRep -> GHC.Show.$fShowVecElem17;
          GHC.Types.Int32ElemRep -> GHC.Show.$fShowVecElem15;
          GHC.Types.Int64ElemRep -> GHC.Show.$fShowVecElem13;
          GHC.Types.Word8ElemRep -> GHC.Show.$fShowVecElem11;
          GHC.Types.Word16ElemRep -> GHC.Show.$fShowVecElem9;
          GHC.Types.Word32ElemRep -> GHC.Show.$fShowVecElem7;
          GHC.Types.Word64ElemRep -> GHC.Show.$fShowVecElem5;
          GHC.Types.FloatElemRep -> GHC.Show.$fShowVecElem3;
          GHC.Types.DoubleElemRep -> GHC.Show.$fShowVecElem1;
        };

GHC.Show.$fShowVecElem_$cshowList
  :: [GHC.Types.VecElem] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sCr2 s_sCr3]
        GHC.Show.showList__ GHC.Show.$w$cshowsPrec10 ls_sCr2 s_sCr3;

GHC.Show.$fShowVecElem [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.VecElem
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowVecElem_$cshowsPrec
                                    GHC.Show.$fShowVecElem_$cshow
                                    GHC.Show.$fShowVecElem_$cshowList];

GHC.Show.$fShowVecCount12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec2"#;

GHC.Show.$fShowVecCount11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount12;

GHC.Show.$fShowVecCount10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec4"#;

GHC.Show.$fShowVecCount9 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount10;

GHC.Show.$fShowVecCount8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec8"#;

GHC.Show.$fShowVecCount7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount8;

GHC.Show.$fShowVecCount6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec16"#;

GHC.Show.$fShowVecCount5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount6;

GHC.Show.$fShowVecCount4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec32"#;

GHC.Show.$fShowVecCount3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount4;

GHC.Show.$fShowVecCount2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec64"#;

GHC.Show.$fShowVecCount1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount2;

GHC.Show.$w$cshowsPrec9 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.VecCount -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sCr4 w1_sCr5]
        case w_sCr4 of {
          GHC.Types.Vec2 -> GHC.Base.++ GHC.Show.$fShowVecCount11 w1_sCr5;
          GHC.Types.Vec4 -> GHC.Base.++ GHC.Show.$fShowVecCount9 w1_sCr5;
          GHC.Types.Vec8 -> GHC.Base.++ GHC.Show.$fShowVecCount7 w1_sCr5;
          GHC.Types.Vec16 -> GHC.Base.++ GHC.Show.$fShowVecCount5 w1_sCr5;
          GHC.Types.Vec32 -> GHC.Base.++ GHC.Show.$fShowVecCount3 w1_sCr5;
          GHC.Types.Vec64 -> GHC.Base.++ GHC.Show.$fShowVecCount1 w1_sCr5;
        };

GHC.Show.$fShowVecCount_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.VecCount -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sCr7 w1_sCr8 w2_sCr9]
        GHC.Show.$w$cshowsPrec9 w1_sCr8 w2_sCr9;

GHC.Show.$fShowVecCount_$cshow
  :: GHC.Types.VecCount -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sCra]
        case x_sCra of {
          GHC.Types.Vec2 -> GHC.Show.$fShowVecCount11;
          GHC.Types.Vec4 -> GHC.Show.$fShowVecCount9;
          GHC.Types.Vec8 -> GHC.Show.$fShowVecCount7;
          GHC.Types.Vec16 -> GHC.Show.$fShowVecCount5;
          GHC.Types.Vec32 -> GHC.Show.$fShowVecCount3;
          GHC.Types.Vec64 -> GHC.Show.$fShowVecCount1;
        };

GHC.Show.$fShowVecCount_$cshowList
  :: [GHC.Types.VecCount] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sCrc s_sCrd]
        GHC.Show.showList__ GHC.Show.$w$cshowsPrec9 ls_sCrc s_sCrd;

GHC.Show.$fShowVecCount [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.VecCount
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowVecCount_$cshowsPrec
                                    GHC.Show.$fShowVecCount_$cshow
                                    GHC.Show.$fShowVecCount_$cshowList];

GHC.Show.$fShowOrdering6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LT"#;

GHC.Show.$fShowOrdering5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowOrdering6;

GHC.Show.$fShowOrdering4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EQ"#;

GHC.Show.$fShowOrdering3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowOrdering4;

GHC.Show.$fShowOrdering2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GT"#;

GHC.Show.$fShowOrdering1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowOrdering2;

GHC.Show.$w$cshowsPrec8 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Ordering -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sCre w1_sCrf]
        case w_sCre of {
          GHC.Types.LT -> GHC.Base.++ GHC.Show.$fShowOrdering5 w1_sCrf;
          GHC.Types.EQ -> GHC.Base.++ GHC.Show.$fShowOrdering3 w1_sCrf;
          GHC.Types.GT -> GHC.Base.++ GHC.Show.$fShowOrdering1 w1_sCrf;
        };

GHC.Show.$fShowOrdering_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Ordering -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sCrh w1_sCri w2_sCrj]
        GHC.Show.$w$cshowsPrec8 w1_sCri w2_sCrj;

GHC.Show.$fShowOrdering_$cshow
  :: GHC.Types.Ordering -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sCrk]
        case x_sCrk of {
          GHC.Types.LT -> GHC.Show.$fShowOrdering5;
          GHC.Types.EQ -> GHC.Show.$fShowOrdering3;
          GHC.Types.GT -> GHC.Show.$fShowOrdering1;
        };

GHC.Show.$fShowOrdering_$cshowList
  :: [GHC.Types.Ordering] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sCrm s_sCrn]
        GHC.Show.showList__ GHC.Show.$w$cshowsPrec8 ls_sCrm s_sCrn;

GHC.Show.$fShowOrdering [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Ordering
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowOrdering_$cshowsPrec
                                    GHC.Show.$fShowOrdering_$cshow
                                    GHC.Show.$fShowOrdering_$cshowList];

GHC.Show.$fShowBool5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "False"#;

GHC.Show.$fShowBool4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowBool5;

GHC.Show.$fShowBool3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "True"#;

GHC.Show.$fShowBool2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowBool3;

GHC.Show.$fShowBool_$cshowsPrec
  :: GHC.Types.Int -> GHC.Types.Bool -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sCro ds1_sCrp eta_sCrq]
        case ds1_sCrp of {
          GHC.Types.False -> GHC.Base.++ GHC.Show.$fShowBool4 eta_sCrq;
          GHC.Types.True -> GHC.Base.++ GHC.Show.$fShowBool2 eta_sCrq;
        };

GHC.Show.$fShowBool_$cshow :: GHC.Types.Bool -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sCrs]
        case x_sCrs of {
          GHC.Types.False -> GHC.Show.$fShowBool4;
          GHC.Types.True -> GHC.Show.$fShowBool2;
        };

GHC.Show.$fShowBool1 :: GHC.Types.Bool -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sCru eta_sCrv]
        case ds_sCru of {
          GHC.Types.False -> GHC.Base.++ GHC.Show.$fShowBool4 eta_sCrv;
          GHC.Types.True -> GHC.Base.++ GHC.Show.$fShowBool2 eta_sCrv;
        };

GHC.Show.$fShowBool_$cshowList
  :: [GHC.Types.Bool] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sCrx s_sCry]
        GHC.Show.showList__ GHC.Show.$fShowBool1 ls_sCrx s_sCry;

GHC.Show.$fShowBool [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Bool
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowBool_$cshowsPrec
                                    GHC.Show.$fShowBool_$cshow
                                    GHC.Show.$fShowBool_$cshowList];

GHC.Show.$fShow()3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "()"#;

GHC.Show.$fShow()2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShow()3;

GHC.Show.$fShow()_$cshowsPrec
  :: GHC.Types.Int -> () -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*H><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sCrz ds1_sCrA eta_sCrB]
        case ds1_sCrA of {
          () -> GHC.Base.++ GHC.Show.$fShow()2 eta_sCrB;
        };

GHC.Show.$fShow()_$cshow :: () -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [x_sCrD] case x_sCrD of { () -> GHC.Show.$fShow()2; };

GHC.Show.$fShow()1 :: () -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*H><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sCrF eta_sCrG]
        case ds_sCrF of { () -> GHC.Base.++ GHC.Show.$fShow()2 eta_sCrG; };

GHC.Show.$fShow()_$cshowList :: [()] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sCrI s_sCrJ]
        GHC.Show.showList__ GHC.Show.$fShow()1 ls_sCrI s_sCrJ;

GHC.Show.$fShow() [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show ()
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShow()_$cshowsPrec
                                    GHC.Show.$fShow()_$cshow
                                    GHC.Show.$fShow()_$cshowList];

GHC.Show.$fShowTrName_$cshowsPrec
  :: GHC.Types.Int -> GHC.Types.TrName -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_sCrK ds1_sCrL]
        case ds1_sCrL of {
          GHC.Types.TrNameS s_sCrN [Occ=Once] ->
              let {
                sat_sCrO [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [s_sCrN] \u [] GHC.CString.unpackCString# s_sCrN;
              } in  GHC.Base.++ sat_sCrO;
          GHC.Types.TrNameD s_sCrP [Occ=Once] -> GHC.Base.++ s_sCrP;
        };

GHC.Show.$fShowTrName_$cshow :: GHC.Types.TrName -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sCrQ]
        case x_sCrQ of {
          GHC.Types.TrNameS s_sCrS [Occ=Once] ->
              GHC.CString.unpackCString# s_sCrS;
          GHC.Types.TrNameD s_sCrT [Occ=Once] -> s_sCrT;
        };

GHC.Show.$fShowTrName1 :: GHC.Types.TrName -> GHC.Show.ShowS
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sCrU]
        case ds_sCrU of {
          GHC.Types.TrNameS s_sCrW [Occ=Once] ->
              let {
                sat_sCrX [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [s_sCrW] \u [] GHC.CString.unpackCString# s_sCrW;
              } in  GHC.Base.++ sat_sCrX;
          GHC.Types.TrNameD s_sCrY [Occ=Once] -> GHC.Base.++ s_sCrY;
        };

GHC.Show.$fShowTrName_$cshowList
  :: [GHC.Types.TrName] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sCrZ s_sCs0]
        GHC.Show.showList__ GHC.Show.$fShowTrName1 ls_sCrZ s_sCs0;

GHC.Show.$fShowTrName [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.TrName
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowTrName_$cshowsPrec
                                    GHC.Show.$fShowTrName_$cshow
                                    GHC.Show.$fShowTrName_$cshowList];

GHC.Show.$fShowModule2 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [':'#];

GHC.Show.$w$cshowsPrec6 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.TrName -> GHC.Types.TrName -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_sCs1 ww1_sCs2]
        let {
          f12_sCs3 [Occ=OnceL!, Dmd=<L,C(U)>]
            :: GHC.Base.String -> GHC.Base.String
          [LclId] =
              [ww_sCs1] \u []
                  case ww_sCs1 of {
                    GHC.Types.TrNameS s_sCs5 [Occ=Once] ->
                        let {
                          sat_sCs6 [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [s_sCs5] \u [] GHC.CString.unpackCString# s_sCs5;
                        } in  GHC.Base.++ sat_sCs6;
                    GHC.Types.TrNameD s_sCs7 [Occ=Once] -> GHC.Base.++ s_sCs7;
                  }; } in
        let {
          g_sCs8 [Occ=OnceL!, Dmd=<L,C(U)>]
            :: GHC.Base.String -> [GHC.Types.Char]
          [LclId] =
              [ww1_sCs2] \u []
                  case ww1_sCs2 of {
                    GHC.Types.TrNameS s_sCsa [Occ=Once] ->
                        let {
                          sat_sCsb [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [s_sCsa] \u [] GHC.CString.unpackCString# s_sCsa;
                        } in  GHC.Base.++ sat_sCsb;
                    GHC.Types.TrNameD s_sCsc [Occ=Once] -> GHC.Base.++ s_sCsc;
                  }; } in
        let {
          sat_sCsg [Occ=OnceT[0]] :: GHC.Base.String -> GHC.Base.String
          [LclId] =
              [f12_sCs3 g_sCs8] \r [x_sCsd]
                  let {
                    sat_sCse [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [g_sCs8 x_sCsd] \u [] g_sCs8 x_sCsd; } in
                  let {
                    sat_sCsf [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [GHC.Show.$fShowModule2 sat_sCse];
                  } in  f12_sCs3 sat_sCsf;
        } in  sat_sCsg;

GHC.Show.$fShowModule_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Module -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_sCsh w1_sCsi]
        case w1_sCsi of {
          GHC.Types.Module ww1_sCsk [Occ=Once] ww2_sCsl [Occ=Once] ->
              GHC.Show.$w$cshowsPrec6 ww1_sCsk ww2_sCsl;
        };

GHC.Show.$fShowModule_$cshow :: GHC.Types.Module -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [x_sCsm]
        case x_sCsm of {
          GHC.Types.Module ww1_sCso [Occ=Once] ww2_sCsp [Occ=Once] ->
              GHC.Show.$w$cshowsPrec6 ww1_sCso ww2_sCsp GHC.Types.[];
        };

GHC.Show.$fShowModule1 :: GHC.Types.Module -> GHC.Show.ShowS
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_sCsq]
        case w_sCsq of {
          GHC.Types.Module ww1_sCss [Occ=Once] ww2_sCst [Occ=Once] ->
              GHC.Show.$w$cshowsPrec6 ww1_sCss ww2_sCst;
        };

GHC.Show.$fShowModule_$cshowList
  :: [GHC.Types.Module] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sCsu s_sCsv]
        GHC.Show.showList__ GHC.Show.$fShowModule1 ls_sCsu s_sCsv;

GHC.Show.$fShowModule [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Module
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowModule_$cshowsPrec
                                    GHC.Show.$fShowModule_$cshow
                                    GHC.Show.$fShowModule_$cshowList];

GHC.Show.$fShowTyCon_$cshowsPrec
  :: GHC.Types.Int -> GHC.Types.TyCon -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [p_sCsw ds_sCsx]
        case ds_sCsx of {
          GHC.Types.TyCon _ [Occ=Dead]
                          _ [Occ=Dead]
                          _ [Occ=Dead]
                          tc_name_sCsC [Occ=Once]
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
              GHC.Show.$fShowTrName_$cshowsPrec p_sCsw tc_name_sCsC;
        };

GHC.Show.$fShowTyCon_$cshow :: GHC.Types.TyCon -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [x_sCsF]
        case x_sCsF of {
          GHC.Types.TyCon _ [Occ=Dead]
                          _ [Occ=Dead]
                          _ [Occ=Dead]
                          tc_name_sCsK [Occ=Once!]
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
              case tc_name_sCsK of {
                GHC.Types.TrNameS s_sCsO [Occ=Once] ->
                    GHC.CString.unpackCString# s_sCsO;
                GHC.Types.TrNameD s_sCsP [Occ=Once] -> s_sCsP;
              };
        };

GHC.Show.$fShowTyCon1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.TyCon -> GHC.Show.ShowS
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [w_sCsQ]
        case w_sCsQ of {
          GHC.Types.TyCon _ [Occ=Dead]
                          _ [Occ=Dead]
                          _ [Occ=Dead]
                          ww4_sCsV [Occ=Once]
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
              GHC.Show.$fShowTrName1 ww4_sCsV;
        };

GHC.Show.$fShowTyCon_$cshowList
  :: [GHC.Types.TyCon] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sCsY s_sCsZ]
        GHC.Show.showList__ GHC.Show.$fShowTyCon1 ls_sCsY s_sCsZ;

GHC.Show.$fShowTyCon [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.TyCon
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowTyCon_$cshowsPrec
                                    GHC.Show.$fShowTyCon_$cshow
                                    GHC.Show.$fShowTyCon_$cshowList];

GHC.Show.showSpace1 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [' '#];

GHC.Show.showSpace :: GHC.Show.ShowS
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [xs_sCt0] : [GHC.Show.showSpace1 xs_sCt0];

GHC.Show.protectEsc
  :: (GHC.Types.Char -> GHC.Types.Bool)
     -> GHC.Show.ShowS -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><C(S),1*C1(U)><L,1*U>,
 Unf=OtherCon []] =
    [] \r [p_sCt1 f12_sCt2 x_sCt3]
        let {
          sat_sCt8 [Occ=Once] :: GHC.Base.String
          [LclId] =
              [p_sCt1 x_sCt3] \u []
                  case x_sCt3 of wild_sCt4 {
                    [] -> [] [];
                    : c_sCt5 [Occ=Once] _ [Occ=Dead] ->
                        case p_sCt1 c_sCt5 of {
                          GHC.Types.False -> wild_sCt4;
                          GHC.Types.True ->
                              GHC.CString.unpackAppendCString# GHC.Show.showLitChar4 wild_sCt4;
                        };
                  };
        } in  f12_sCt2 sat_sCt8;

GHC.Show.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Show.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Show.$trModule4];

GHC.Show.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Show"#;

GHC.Show.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Show.$trModule2];

GHC.Show.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Show.$trModule3
                                     GHC.Show.$trModule1];

$krep_rC0q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep1_rC0r :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_rC0s :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep3_rC0t :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rC0q GHC.Types.[]];

$krep4_rC0u :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep3_rC0t];

$krep5_rC0v :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rC0u $krep4_rC0u];

GHC.Show.$tcShow1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$* $krep2_rC0s];

$krep6_rC0w :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep7_rC0x :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_rC0w $krep5_rC0v];

$krep8_rC0y :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_rC0r $krep7_rC0x];

$krep9_rC0z :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_rC0w $krep4_rC0u];

$krep10_rC0A :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep6_rC0w GHC.Types.[]];

$krep11_rC0B :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep10_rC0A];

$krep12_rC0C :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_rC0B $krep5_rC0v];

GHC.Show.$tcShow3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Show"#;

GHC.Show.$tcShow2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Show.$tcShow3];

GHC.Show.$tcShow :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [10437143935872046625##
                                    8934823934159178042##
                                    GHC.Show.$trModule
                                    GHC.Show.$tcShow2
                                    0#
                                    GHC.Show.$tcShow1];

$krep13_rC0D :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Show.$tcShow
                                              $krep10_rC0A];

$krep14_rC0E :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep12_rC0C $krep13_rC0D];

$krep15_rC0F :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_rC0z $krep14_rC0E];

GHC.Show.$tc'C:Show1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rC0y $krep15_rC0F];

GHC.Show.$tc'C:Show3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:Show"#;

GHC.Show.$tc'C:Show2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Show.$tc'C:Show3];

GHC.Show.$tc'C:Show :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4474575220627516169##
                                    12023205831716615459##
                                    GHC.Show.$trModule
                                    GHC.Show.$tc'C:Show2
                                    1#
                                    GHC.Show.$tc'C:Show1];

GHC.Show.$fShowInt_$cshow :: GHC.Types.Int -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_sCt9]
        case x_sCt9 of {
          GHC.Types.I# ww1_sCtb [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# ww1_sCtb GHC.Types.[] of {
                (#,#) ww3_sCtd [Occ=Once] ww4_sCte [Occ=Once] ->
                    : [ww3_sCtd ww4_sCte];
              };
        };

GHC.Show.$fShowInt1 :: GHC.Types.Int -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sCtf w1_sCtg]
        case w_sCtf of {
          GHC.Types.I# ww1_sCti [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# ww1_sCti w1_sCtg of {
                (#,#) ww3_sCtk [Occ=Once] ww4_sCtl [Occ=Once] ->
                    : [ww3_sCtk ww4_sCtl];
              };
        };

GHC.Show.$fShowInt_$cshowList :: [GHC.Types.Int] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sCtm s_sCtn]
        GHC.Show.showList__ GHC.Show.$fShowInt1 ls_sCtm s_sCtn;

GHC.Show.$fShowInt [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Int
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.showSignedInt
                                    GHC.Show.$fShowInt_$cshow
                                    GHC.Show.$fShowInt_$cshowList];

lvl12_rC0G :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_sCto]
        case ds_sCto of {
          GHC.Types.C# x_sCtq [Occ=Once!] ->
              case x_sCtq of {
                __DEFAULT -> GHC.Types.False [];
                '\n'# -> GHC.Types.True [];
              };
        };

lvl13_rC0H :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\n\\"#;

lvl14_rC0I :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl13_rC0H;

lvl15_rC0J :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\n\""#;

lvl16_rC0K :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl15_rC0J;

lvl17_rC0L :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\""#;

lvl18_rC0M :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl17_rC0L;

GHC.Show.$wgo [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Types.Char
     -> [GHC.Types.Char] -> (# [GHC.Types.Char], [[GHC.Types.Char]] #)
[GblId, Arity=2, Str=<L,U><S,1*U>, Unf=OtherCon []] =
    [] \r [w_sCts w1_sCtt]
        case GHC.List.$wbreak lvl12_rC0G w1_sCtt of {
          (#,#) ww1_sCtv [Occ=Once*] ww2_sCtw [Occ=Once!] ->
              case ww2_sCtw of {
                [] ->
                    let {
                      sat_sCty [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [ww1_sCtv] \u [] GHC.Show.showLitString ww1_sCtv lvl18_rC0M; } in
                    let {
                      sat_sCtz [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          CCCS :! [w_sCts sat_sCty];
                    } in  (#,#) [sat_sCtz GHC.Types.[]];
                : ds_sCtA [Occ=Once!] s'_sCtB [Occ=Once!] ->
                    case s'_sCtB of wild1_sCtC {
                      [] ->
                          case ds_sCtA of {
                            GHC.Types.C# ds1_sCtE [Occ=Once!] ->
                                case ds1_sCtE of {
                                  __DEFAULT ->
                                      let {
                                        sat_sCtG [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww1_sCtv] \u []
                                                GHC.Show.showLitString ww1_sCtv lvl18_rC0M; } in
                                      let {
                                        sat_sCtH [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            CCCS :! [w_sCts sat_sCtG];
                                      } in  (#,#) [sat_sCtH GHC.Types.[]];
                                  '\n'# ->
                                      let {
                                        sat_sCtI [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww1_sCtv] \u []
                                                GHC.Show.showLitString ww1_sCtv lvl16_rC0K; } in
                                      let {
                                        sat_sCtJ [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            CCCS :! [w_sCts sat_sCtI];
                                      } in  (#,#) [sat_sCtJ GHC.Types.[]];
                                };
                          };
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          let {
                            sat_sCtR [Occ=Once] :: [[GHC.Types.Char]]
                            [LclId] =
                                [wild1_sCtC] \u []
                                    case GHC.Show.$wgo GHC.Show.showLitChar13 wild1_sCtC of {
                                      (#,#) ww5_sCtP [Occ=Once] ww6_sCtQ [Occ=Once] ->
                                          : [ww5_sCtP ww6_sCtQ];
                                    }; } in
                          let {
                            sat_sCtM [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [ww1_sCtv] \u [] GHC.Show.showLitString ww1_sCtv lvl14_rC0I; } in
                          let {
                            sat_sCtN [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                CCCS :! [w_sCts sat_sCtM];
                          } in  (#,#) [sat_sCtN sat_sCtR];
                    };
              };
        };

GHC.Show.showMultiLineString_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Char -> [GHC.Types.Char] -> [[GHC.Types.Char]]
[GblId, Arity=2, Str=<L,U><S,1*U>m2, Unf=OtherCon []] =
    [] \r [w_sCtS w1_sCtT]
        case GHC.Show.$wgo w_sCtS w1_sCtT of {
          (#,#) ww1_sCtV [Occ=Once] ww2_sCtW [Occ=Once] ->
              : [ww1_sCtV ww2_sCtW];
        };

GHC.Show.showMultiLineString
  :: GHC.Base.String -> [GHC.Base.String]
[GblId, Arity=1, Str=<S,1*U>m2, Unf=OtherCon []] =
    [] \r [str_sCtX]
        case GHC.Show.$wgo GHC.Show.$fShow(,)3 str_sCtX of {
          (#,#) ww1_sCtZ [Occ=Once] ww2_sCu0 [Occ=Once] ->
              : [ww1_sCtZ ww2_sCu0];
        };

GHC.Show.$fShowChar3 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\''#];

GHC.Show.$fShowChar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'\\''"#;

GHC.Show.$fShowChar1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowChar2;

GHC.Show.$w$cshowsPrec3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Char# -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ww_sCu1 w_sCu2]
        case ww_sCu1 of ds_sCu3 {
          __DEFAULT ->
              let {
                sat_sCu5 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sCu2 ds_sCu3] \u []
                        let {
                          sat_sCu4 [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShowChar3 w_sCu2];
                        } in  GHC.Show.$wshowLitChar ds_sCu3 sat_sCu4;
              } in  : [GHC.Show.$fShowChar3 sat_sCu5];
          '\''# -> GHC.Base.++ GHC.Show.$fShowChar1 w_sCu2;
        };

GHC.Show.$fShowChar_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Char -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S(S),1*U(1*U)><L,U>, Unf=OtherCon []] =
    [] \r [w_sCu6 w1_sCu7 w2_sCu8]
        case w1_sCu7 of {
          GHC.Types.C# ww1_sCua [Occ=Once] ->
              GHC.Show.$w$cshowsPrec3 ww1_sCua w2_sCu8;
        };

lvl19_rC0N :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShowChar3 GHC.Types.[]];

GHC.Show.$fShowChar_$cshow :: GHC.Types.Char -> GHC.Base.String
[GblId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
    [] \r [x_sCub]
        case x_sCub of {
          GHC.Types.C# ds_sCud [Occ=Once!] ->
              case ds_sCud of ds1_sCue {
                __DEFAULT ->
                    let {
                      sat_sCuf [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [ds1_sCue] \u [] GHC.Show.$wshowLitChar ds1_sCue lvl19_rC0N;
                    } in  : [GHC.Show.$fShowChar3 sat_sCuf];
                '\''# -> GHC.Show.$fShowChar1;
              };
        };

GHC.Show.$fShowChar [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Char
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowChar_$cshowsPrec
                                    GHC.Show.$fShowChar_$cshow
                                    GHC.Show.$fShow(,)_$cshowList1];

GHC.Show.$fShow[]_$s$cshowList
  :: [[GHC.Types.Int]] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sCug s_sCuh]
        GHC.Show.showList__ GHC.Show.$fShowInt_$cshowList ls_sCug s_sCuh;

GHC.Show.$fShow[]_$s$cshow :: [GHC.Types.Int] -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sCui]
        GHC.Show.showList__ GHC.Show.$fShowInt1 x_sCui GHC.Types.[];

$s$fShow[]1_rC0O
  :: GHC.Types.Int -> [GHC.Base.String] -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_sCuj eta_B2 eta_B1]
        GHC.Show.$fShow[]_$s$cshowList1 eta_B2 eta_B1;

GHC.Show.$fShow[]_$s$cshow2 :: [GHC.Base.String] -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sCuk]
        GHC.Show.showList__
            GHC.Show.$fShow(,)_$cshowList1 x_sCuk GHC.Types.[];

GHC.Show.$fShow[]_$cshow
  :: forall a. GHC.Show.Show a => [a] -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LLC(C(S))),1*U(A,A,1*C1(C1(U)))><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCul x_sCum]
        GHC.Show.showList $dShow_sCul x_sCum GHC.Types.[];

GHC.Show.$fShow[]_$s$cshowList2
  :: [[GHC.Base.String]] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sCun s_sCuo]
        GHC.Show.showList__ GHC.Show.$fShow[]_$s$cshowList1 ls_sCun s_sCuo;

GHC.Show.$fShow[]_$s$fShow[]2 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show [GHC.Base.String]
[GblId, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [$s$fShow[]1_rC0O
                                    GHC.Show.$fShow[]_$s$cshow2
                                    GHC.Show.$fShow[]_$s$cshowList2];

GHC.Show.$fShow[]_$cshowList
  :: forall a. GHC.Show.Show a => [[a]] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C(C1(U)))><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCup ls_sCuq s_sCur]
        let {
          sat_sCus [Occ=Once, Dmd=<L,C(C1(U))>] :: [a_azLN] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCup] \u [] GHC.Show.showList $dShow_sCup;
        } in  GHC.Show.showList__ sat_sCus ls_sCuq s_sCur;

$s$fShow[]2_rC0P
  :: GHC.Types.Int
     -> [GHC.Types.Int] -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_sCut eta_sCuu eta1_sCuv]
        GHC.Show.$fShowInt_$cshowList eta_sCuu eta1_sCuv;

GHC.Show.$fShow[]_$s$fShow[] [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show [GHC.Types.Int]
[GblId, Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [$s$fShow[]2_rC0P
                                    GHC.Show.$fShow[]_$s$cshow
                                    GHC.Show.$fShow[]_$s$cshowList];

GHC.Show.$fShow[] [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show a => GHC.Show.Show [a]
[GblId[DFunId], Arity=1, Caf=NoCafRefs, Str=<L,U(A,A,U)>m] =
    [] \r [$dShow_sCuw]
        let {
          lvl45_sCux [Occ=OnceL] :: [a_azLN] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCuw] \u [] GHC.Show.showList $dShow_sCuw; } in
        let {
          sat_sCuB [Occ=Once] :: [[a_azLN]] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCuw] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow[]_$cshowList $dShow_sCuw eta_B2 eta_B1; } in
        let {
          sat_sCuA [Occ=Once] :: [a_azLN] -> GHC.Base.String
          [LclId] =
              [$dShow_sCuw] \r [eta_B1]
                  GHC.Show.$fShow[]_$cshow $dShow_sCuw eta_B1; } in
        let {
          sat_sCuz [Occ=Once] :: GHC.Types.Int -> [a_azLN] -> GHC.Show.ShowS
          [LclId] =
              [lvl45_sCux] \r [ds_sCuy] lvl45_sCux;
        } in  GHC.Show.C:Show [sat_sCuz sat_sCuA sat_sCuB];

lvl20_rC0Q :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DoubleRep"#;

lvl21_rC0R :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl20_rC0Q;

lvl22_rC0S :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FloatRep"#;

lvl23_rC0T :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl22_rC0S;

lvl24_rC0U :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "AddrRep"#;

lvl25_rC0V :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl24_rC0U;

lvl26_rC0W :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word64Rep"#;

lvl27_rC0X :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl26_rC0W;

lvl28_rC0Y :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int64Rep"#;

lvl29_rC0Z :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl28_rC0Y;

lvl30_rC10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "WordRep"#;

lvl31_rC11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl30_rC10;

lvl32_rC12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IntRep"#;

lvl33_rC13 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl32_rC12;

lvl34_rC14 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UnliftedRep"#;

lvl35_rC15 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl34_rC14;

lvl36_rC16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LiftedRep"#;

lvl37_rC17 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl36_rC16;

lvl38_rC18 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SumRep "#;

lvl39_rC19 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TupleRep "#;

lvl40_rC1a :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "VecRep "#;

GHC.Show.$fShowRuntimeRep_$cshowsPrec [Occ=LoopBreaker]
  :: GHC.Types.Int -> GHC.Types.RuntimeRep -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,1*U(U)><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [a_sCuC ds_sCuD eta_sCuE]
        case ds_sCuD of {
          GHC.Types.VecRep b1_sCuG [Occ=Once] b2_sCuH [Occ=Once] ->
              case a_sCuC of {
                GHC.Types.I# x_sCuJ [Occ=Once] ->
                    let {
                      p_sCuK [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
                      [LclId, Arity=1, Str=<L,1*U>, Unf=OtherCon []] =
                          sat-only [b1_sCuG b2_sCuH] \r [x1_sCuL]
                              let {
                                sat_sCuO [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [b1_sCuG b2_sCuH x1_sCuL] \u []
                                        let {
                                          sat_sCuM [Occ=Once] :: [GHC.Types.Char]
                                          [LclId] =
                                              [b2_sCuH x1_sCuL] \u []
                                                  GHC.Show.$w$cshowsPrec10 b2_sCuH x1_sCuL; } in
                                        let {
                                          sat_sCuN [Occ=Once] :: GHC.Base.String
                                          [LclId] =
                                              CCCS :! [GHC.Show.showSpace1 sat_sCuM];
                                        } in  GHC.Show.$w$cshowsPrec9 b1_sCuG sat_sCuN;
                              } in  GHC.CString.unpackAppendCString# lvl40_rC1a sat_sCuO;
                    } in 
                      case >=# [x_sCuJ 11#] of {
                        __DEFAULT -> p_sCuK eta_sCuE;
                        1# ->
                            let {
                              sat_sCuR [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [eta_sCuE p_sCuK] \u []
                                      let {
                                        sat_sCuQ [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [GHC.Show.$fShow(,)2 eta_sCuE];
                                      } in  p_sCuK sat_sCuQ;
                            } in  : [GHC.Show.$fShow(,)4 sat_sCuR];
                      };
              };
          GHC.Types.TupleRep b1_sCuS [Occ=Once!] ->
              case a_sCuC of {
                GHC.Types.I# x_sCuU [Occ=Once] ->
                    let {
                      p_sCuV [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
                      [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                          sat-only [b1_sCuS] \r [x1_sCuW]
                              let {
                                sat_sCva [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [b1_sCuS x1_sCuW] \u []
                                        case b1_sCuS of {
                                          [] ->
                                              GHC.CString.unpackAppendCString#
                                                  GHC.Show.showList__4 x1_sCuW;
                                          : x2_sCuY [Occ=Once] xs_sCuZ [Occ=Once] ->
                                              let {
                                                sat_sCv9 [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [x1_sCuW x2_sCuY xs_sCuZ] \u []
                                                        let {
                                                          sat_sCv8 [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              [x1_sCuW xs_sCuZ] \u []
                                                                  let {
                                                                    lvl45_sCv0 [Occ=OnceL]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId, Unf=OtherCon []] =
                                                                        CCCS :! [GHC.Show.showList__2
                                                                                 x1_sCuW]; } in
                                                                  let {
                                                                    showl_sCv1 [Occ=LoopBreaker]
                                                                      :: [GHC.Types.RuntimeRep]
                                                                         -> GHC.Base.String
                                                                    [LclId,
                                                                     Arity=1,
                                                                     Str=<S,1*U>,
                                                                     Unf=OtherCon []] =
                                                                        sat-only [lvl45_sCv0
                                                                                  showl_sCv1] \r [ds1_sCv2]
                                                                            case ds1_sCv2 of {
                                                                              [] -> lvl45_sCv0;
                                                                              : y_sCv4 [Occ=Once]
                                                                                ys_sCv5 [Occ=Once] ->
                                                                                  let {
                                                                                    sat_sCv7 [Occ=Once]
                                                                                      :: [GHC.Types.Char]
                                                                                    [LclId] =
                                                                                        [showl_sCv1
                                                                                         y_sCv4
                                                                                         ys_sCv5] \u []
                                                                                            let {
                                                                                              sat_sCv6 [Occ=Once]
                                                                                                :: GHC.Base.String
                                                                                              [LclId] =
                                                                                                  [showl_sCv1
                                                                                                   ys_sCv5] \u []
                                                                                                      showl_sCv1
                                                                                                          ys_sCv5;
                                                                                            } in 
                                                                                              GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                                                                                  GHC.Show.$fShow(,)1
                                                                                                  y_sCv4
                                                                                                  sat_sCv6;
                                                                                  } in 
                                                                                    : [GHC.Show.showList__1
                                                                                       sat_sCv7];
                                                                            };
                                                                  } in  showl_sCv1 xs_sCuZ;
                                                        } in 
                                                          GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                                              GHC.Show.$fShow(,)1 x2_sCuY sat_sCv8;
                                              } in  : [GHC.Show.showList__3 sat_sCv9];
                                        };
                              } in  GHC.CString.unpackAppendCString# lvl39_rC19 sat_sCva;
                    } in 
                      case >=# [x_sCuU 11#] of {
                        __DEFAULT -> p_sCuV eta_sCuE;
                        1# ->
                            let {
                              sat_sCvd [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [eta_sCuE p_sCuV] \u []
                                      let {
                                        sat_sCvc [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [GHC.Show.$fShow(,)2 eta_sCuE];
                                      } in  p_sCuV sat_sCvc;
                            } in  : [GHC.Show.$fShow(,)4 sat_sCvd];
                      };
              };
          GHC.Types.SumRep b1_sCve [Occ=Once!] ->
              case a_sCuC of {
                GHC.Types.I# x_sCvg [Occ=Once] ->
                    let {
                      p_sCvh [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
                      [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                          sat-only [b1_sCve] \r [x1_sCvi]
                              let {
                                sat_sCvw [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [b1_sCve x1_sCvi] \u []
                                        case b1_sCve of {
                                          [] ->
                                              GHC.CString.unpackAppendCString#
                                                  GHC.Show.showList__4 x1_sCvi;
                                          : x2_sCvk [Occ=Once] xs_sCvl [Occ=Once] ->
                                              let {
                                                sat_sCvv [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [x1_sCvi x2_sCvk xs_sCvl] \u []
                                                        let {
                                                          sat_sCvu [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              [x1_sCvi xs_sCvl] \u []
                                                                  let {
                                                                    lvl45_sCvm [Occ=OnceL]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId, Unf=OtherCon []] =
                                                                        CCCS :! [GHC.Show.showList__2
                                                                                 x1_sCvi]; } in
                                                                  let {
                                                                    showl_sCvn [Occ=LoopBreaker]
                                                                      :: [GHC.Types.RuntimeRep]
                                                                         -> GHC.Base.String
                                                                    [LclId,
                                                                     Arity=1,
                                                                     Str=<S,1*U>,
                                                                     Unf=OtherCon []] =
                                                                        sat-only [lvl45_sCvm
                                                                                  showl_sCvn] \r [ds1_sCvo]
                                                                            case ds1_sCvo of {
                                                                              [] -> lvl45_sCvm;
                                                                              : y_sCvq [Occ=Once]
                                                                                ys_sCvr [Occ=Once] ->
                                                                                  let {
                                                                                    sat_sCvt [Occ=Once]
                                                                                      :: [GHC.Types.Char]
                                                                                    [LclId] =
                                                                                        [showl_sCvn
                                                                                         y_sCvq
                                                                                         ys_sCvr] \u []
                                                                                            let {
                                                                                              sat_sCvs [Occ=Once]
                                                                                                :: GHC.Base.String
                                                                                              [LclId] =
                                                                                                  [showl_sCvn
                                                                                                   ys_sCvr] \u []
                                                                                                      showl_sCvn
                                                                                                          ys_sCvr;
                                                                                            } in 
                                                                                              GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                                                                                  GHC.Show.$fShow(,)1
                                                                                                  y_sCvq
                                                                                                  sat_sCvs;
                                                                                  } in 
                                                                                    : [GHC.Show.showList__1
                                                                                       sat_sCvt];
                                                                            };
                                                                  } in  showl_sCvn xs_sCvl;
                                                        } in 
                                                          GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                                              GHC.Show.$fShow(,)1 x2_sCvk sat_sCvu;
                                              } in  : [GHC.Show.showList__3 sat_sCvv];
                                        };
                              } in  GHC.CString.unpackAppendCString# lvl38_rC18 sat_sCvw;
                    } in 
                      case >=# [x_sCvg 11#] of {
                        __DEFAULT -> p_sCvh eta_sCuE;
                        1# ->
                            let {
                              sat_sCvz [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [eta_sCuE p_sCvh] \u []
                                      let {
                                        sat_sCvy [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [GHC.Show.$fShow(,)2 eta_sCuE];
                                      } in  p_sCvh sat_sCvy;
                            } in  : [GHC.Show.$fShow(,)4 sat_sCvz];
                      };
              };
          GHC.Types.LiftedRep -> GHC.Base.++ lvl37_rC17 eta_sCuE;
          GHC.Types.UnliftedRep -> GHC.Base.++ lvl35_rC15 eta_sCuE;
          GHC.Types.IntRep -> GHC.Base.++ lvl33_rC13 eta_sCuE;
          GHC.Types.WordRep -> GHC.Base.++ lvl31_rC11 eta_sCuE;
          GHC.Types.Int64Rep -> GHC.Base.++ lvl29_rC0Z eta_sCuE;
          GHC.Types.Word64Rep -> GHC.Base.++ lvl27_rC0X eta_sCuE;
          GHC.Types.AddrRep -> GHC.Base.++ lvl25_rC0V eta_sCuE;
          GHC.Types.FloatRep -> GHC.Base.++ lvl23_rC0T eta_sCuE;
          GHC.Types.DoubleRep -> GHC.Base.++ lvl21_rC0R eta_sCuE;
        };

GHC.Show.$fShowRuntimeRep1
  :: GHC.Types.RuntimeRep -> GHC.Show.ShowS
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Show.$fShowRuntimeRep_$cshowsPrec
            GHC.Show.$fShow(,)1 eta_B2 eta_B1;

GHC.Show.$fShowRuntimeRep_$cshowList
  :: [GHC.Types.RuntimeRep] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sCvA s_sCvB]
        GHC.Show.showList__ GHC.Show.$fShowRuntimeRep1 ls_sCvA s_sCvB;

GHC.Show.$fShowRuntimeRep_$cshow
  :: GHC.Types.RuntimeRep -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sCvC]
        GHC.Show.$fShowRuntimeRep_$cshowsPrec
            GHC.Show.$fShow(,)1 x_sCvC GHC.Types.[];

GHC.Show.$fShowRuntimeRep [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.RuntimeRep
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                    GHC.Show.$fShowRuntimeRep_$cshow
                                    GHC.Show.$fShowRuntimeRep_$cshowList];

GHC.Show.$fShowCallStack2
  :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc) -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U(U,U(U,U,U,U(U),U(U),U(U),U(U)))><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sCvD w1_sCvE]
        case w_sCvD of {
          (,) ww1_sCvG [Occ=Once] ww2_sCvH [Occ=Once] ->
              case GHC.Show.$w$s$cshowsPrec ww1_sCvG ww2_sCvH w1_sCvE of {
                (#,#) ww4_sCvJ [Occ=Once] ww5_sCvK [Occ=Once] ->
                    : [ww4_sCvJ ww5_sCvK];
              };
        };

GHC.Show.$fShowCallStack_$cshowsPrec
  :: GHC.Types.Int -> GHC.Stack.Types.CallStack -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,A><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sCvL eta_sCvM]
        let {
          ls_sCvN [Occ=Once] :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
          [LclId] =
              [eta_sCvM] \u [] GHC.Stack.Types.getCallStack eta_sCvM;
        } in  GHC.Show.showList__ GHC.Show.$fShowCallStack2 ls_sCvN;

GHC.Show.$fShowCallStack3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.showList__4;

lvl41_rC1b :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.showList__2 GHC.Types.[]];

GHC.Show.$fShowCallStack_showl [Occ=LoopBreaker]
  :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)] -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>m2, Unf=OtherCon []] =
    [] \r [ds_sCvP]
        case ds_sCvP of {
          [] -> lvl41_rC1b;
          : y_sCvR [Occ=Once!] ys_sCvS [Occ=Once] ->
              let {
                sat_sCw0 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [y_sCvR ys_sCvS] \u []
                        case y_sCvR of {
                          (,) ww1_sCvU [Occ=Once] ww2_sCvV [Occ=Once] ->
                              let {
                                sat_sCvW [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    [ys_sCvS] \u [] GHC.Show.$fShowCallStack_showl ys_sCvS;
                              } in 
                                case GHC.Show.$w$s$cshowsPrec ww1_sCvU ww2_sCvV sat_sCvW of {
                                  (#,#) ww4_sCvY [Occ=Once] ww5_sCvZ [Occ=Once] ->
                                      : [ww4_sCvY ww5_sCvZ];
                                };
                        };
              } in  : [GHC.Show.showList__1 sat_sCw0];
        };

GHC.Show.$fShowCallStack_$cshow
  :: GHC.Stack.Types.CallStack -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sCw1]
        case GHC.Stack.Types.getCallStack x_sCw1 of {
          [] -> GHC.Show.$fShowCallStack3;
          : x1_sCw3 [Occ=Once!] xs_sCw4 [Occ=Once] ->
              let {
                sat_sCwc [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [x1_sCw3 xs_sCw4] \u []
                        case x1_sCw3 of {
                          (,) ww1_sCw6 [Occ=Once] ww2_sCw7 [Occ=Once] ->
                              let {
                                sat_sCw8 [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    [xs_sCw4] \u [] GHC.Show.$fShowCallStack_showl xs_sCw4;
                              } in 
                                case GHC.Show.$w$s$cshowsPrec ww1_sCw6 ww2_sCw7 sat_sCw8 of {
                                  (#,#) ww4_sCwa [Occ=Once] ww5_sCwb [Occ=Once] ->
                                      : [ww4_sCwa ww5_sCwb];
                                };
                        };
              } in  : [GHC.Show.showList__3 sat_sCwc];
        };

GHC.Show.$fShowCallStack1
  :: GHC.Stack.Types.CallStack -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=1, Str=<L,1*U>, Unf=OtherCon []] =
    [] \r [x_sCwd]
        let {
          ls_sCwe [Occ=Once] :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
          [LclId] =
              [x_sCwd] \u [] GHC.Stack.Types.getCallStack x_sCwd;
        } in  GHC.Show.showList__ GHC.Show.$fShowCallStack2 ls_sCwe;

GHC.Show.$fShowCallStack_$cshowList
  :: [GHC.Stack.Types.CallStack] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sCwg s_sCwh]
        GHC.Show.showList__ GHC.Show.$fShowCallStack1 ls_sCwg s_sCwh;

GHC.Show.$fShowCallStack [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Stack.Types.CallStack
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowCallStack_$cshowsPrec
                                    GHC.Show.$fShowCallStack_$cshow
                                    GHC.Show.$fShowCallStack_$cshowList];

GHC.Show.$fShowNonEmpty2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [6#];

GHC.Show.$fShowNonEmpty1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " :| "#;

GHC.Show.$w$cshowsPrec7 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Show.Show a =>
     GHC.Prim.Int# -> a -> [a] -> GHC.Show.ShowS
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(C1(C(U))),A,1*C1(C(U)))><S,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sCwi ww_sCwj ww1_sCwk ww2_sCwl]
        let {
          f12_sCwm [Occ=OnceL*!, Dmd=<L,C(U)>]
            :: GHC.Base.String -> GHC.Base.String
          [LclId] =
              [w_sCwi ww1_sCwk] \u []
                  GHC.Show.showsPrec w_sCwi GHC.Show.$fShowNonEmpty2 ww1_sCwk; } in
        let {
          g_sCwn [Occ=OnceL*!, Dmd=<L,C(U)>]
            :: GHC.Base.String -> GHC.Base.String
          [LclId] =
              [w_sCwi ww2_sCwl] \u [] GHC.Show.showList w_sCwi ww2_sCwl;
        } in 
          case >=# [ww_sCwj 6#] of {
            __DEFAULT ->
                let {
                  sat_sCws [Occ=OnceT[0]] :: GHC.Base.String -> GHC.Base.String
                  [LclId] =
                      [f12_sCwm g_sCwn] \r [x_sCwp]
                          let {
                            sat_sCwr [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [g_sCwn x_sCwp] \u []
                                    let {
                                      sat_sCwq [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [g_sCwn x_sCwp] \u [] g_sCwn x_sCwp;
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          GHC.Show.$fShowNonEmpty1 sat_sCwq;
                          } in  f12_sCwm sat_sCwr;
                } in  sat_sCws;
            1# ->
                let {
                  sat_sCwy [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                  [LclId] =
                      [f12_sCwm g_sCwn] \r [x_sCwt]
                          let {
                            sat_sCwx [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [f12_sCwm g_sCwn x_sCwt] \u []
                                    let {
                                      sat_sCww [Occ=Once] :: GHC.Base.String
                                      [LclId] =
                                          [g_sCwn x_sCwt] \u []
                                              let {
                                                sat_sCwv [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [g_sCwn x_sCwt] \u []
                                                        let {
                                                          sat_sCwu [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2 x_sCwt];
                                                        } in  g_sCwn sat_sCwu;
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    GHC.Show.$fShowNonEmpty1 sat_sCwv;
                                    } in  f12_sCwm sat_sCww;
                          } in  : [GHC.Show.$fShow(,)4 sat_sCwx];
                } in  sat_sCwy;
          };

GHC.Show.$fShowNonEmpty_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Show.Show a =>
     GHC.Types.Int -> GHC.Base.NonEmpty a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(C(U))),A,C(C(U)))><S(S),1*U(U)><S,1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [w_sCwz w1_sCwA w2_sCwB]
        case w1_sCwA of {
          GHC.Types.I# ww1_sCwD [Occ=Once] ->
              case w2_sCwB of {
                GHC.Base.:| ww3_sCwF [Occ=Once] ww4_sCwG [Occ=Once] ->
                    GHC.Show.$w$cshowsPrec7 w_sCwz ww1_sCwD ww3_sCwF ww4_sCwG;
              };
        };

GHC.Show.$w$cshow [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Show.Show a => a -> [a] -> GHC.Base.String
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(C(C(C(S)))LL),U(1*C1(C1(C1(U))),A,1*C1(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sCwH ww_sCwI ww1_sCwJ]
        let {
          sat_sCwL [Occ=Once] :: GHC.Base.String
          [LclId] =
              [w_sCwH ww1_sCwJ] \u []
                  let {
                    sat_sCwK [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [w_sCwH ww1_sCwJ] \u []
                            GHC.Show.showList w_sCwH ww1_sCwJ GHC.Types.[];
                  } in 
                    GHC.CString.unpackAppendCString# GHC.Show.$fShowNonEmpty1 sat_sCwK;
        } in 
          GHC.Show.showsPrec
              w_sCwH GHC.Show.$fShowNonEmpty2 ww_sCwI sat_sCwL;

GHC.Show.$fShowNonEmpty_$cshow [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Show.Show a =>
     GHC.Base.NonEmpty a -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(C(C(C(S)))LL),U(C(C1(C1(U))),A,C(C1(U)))><S,1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [w_sCwM w1_sCwN]
        case w1_sCwN of {
          GHC.Base.:| ww1_sCwP [Occ=Once] ww2_sCwQ [Occ=Once] ->
              GHC.Show.$w$cshow w_sCwM ww1_sCwP ww2_sCwQ;
        };

GHC.Show.$fShowNonEmpty_$cshowList
  :: forall a.
     GHC.Show.Show a =>
     [GHC.Base.NonEmpty a] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(C(U))),A,C(C(U)))><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCwR ls_sCwS s_sCwT]
        let {
          sat_sCwY [Occ=Once] :: GHC.Base.NonEmpty a_aztY -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCwR] \r [w_sCwU]
                  case w_sCwU of {
                    GHC.Base.:| ww1_sCwW [Occ=Once] ww2_sCwX [Occ=Once] ->
                        GHC.Show.$w$cshowsPrec7 $dShow_sCwR 0# ww1_sCwW ww2_sCwX;
                  };
        } in  GHC.Show.showList__ sat_sCwY ls_sCwS s_sCwT;

GHC.Show.$fShowNonEmpty [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show a => GHC.Show.Show (GHC.Base.NonEmpty a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(C(U))),A,C(C(U)))>m] =
    [] \r [$dShow_sCwZ]
        let {
          sat_sCx2 [Occ=Once] :: [GHC.Base.NonEmpty a_aztY] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCwZ] \r [eta_B2 eta_B1]
                  GHC.Show.$fShowNonEmpty_$cshowList $dShow_sCwZ eta_B2 eta_B1; } in
        let {
          sat_sCx1 [Occ=Once] :: GHC.Base.NonEmpty a_aztY -> GHC.Base.String
          [LclId] =
              [$dShow_sCwZ] \r [eta_B1]
                  GHC.Show.$fShowNonEmpty_$cshow $dShow_sCwZ eta_B1; } in
        let {
          sat_sCx0 [Occ=Once]
            :: GHC.Types.Int -> GHC.Base.NonEmpty a_aztY -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCwZ] \r [eta_B2 eta_B1]
                  GHC.Show.$fShowNonEmpty_$cshowsPrec $dShow_sCwZ eta_B2 eta_B1;
        } in  GHC.Show.C:Show [sat_sCx0 sat_sCx1 sat_sCx2];

GHC.Show.$fShowMaybe5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Nothing"#;

GHC.Show.$fShowMaybe4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowMaybe5;

GHC.Show.$fShowMaybe3 :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.++ GHC.Show.$fShowMaybe4 eta_B1;

GHC.Show.$fShowMaybe2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Just "#;

GHC.Show.$fShowMaybe1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowMaybe2;

GHC.Show.$fShowMaybe_$cshowsPrec
  :: forall a.
     GHC.Show.Show a =>
     GHC.Types.Int -> GHC.Base.Maybe a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCx3 ds_sCx4 ds1_sCx5]
        case ds1_sCx5 of {
          GHC.Base.Nothing -> GHC.Show.$fShowMaybe3;
          GHC.Base.Just b1_sCx7 [Occ=Once] ->
              case ds_sCx4 of {
                GHC.Types.I# x_sCx9 [Occ=Once] ->
                    let {
                      g_sCxa [Occ=OnceL*!, Dmd=<L,C(U)>]
                        :: GHC.Base.String -> GHC.Base.String
                      [LclId] =
                          [$dShow_sCx3 b1_sCx7] \u []
                              GHC.Show.showsPrec $dShow_sCx3 GHC.Show.appPrec1 b1_sCx7;
                    } in 
                      case >=# [x_sCx9 11#] of {
                        __DEFAULT ->
                            let {
                              sat_sCxe [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_sCxa] \r [x1_sCxc]
                                      let {
                                        sat_sCxd [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_sCxa x1_sCxc] \s [] g_sCxa x1_sCxc;
                                      } in  GHC.Base.++ GHC.Show.$fShowMaybe1 sat_sCxd;
                            } in  sat_sCxe;
                        1# ->
                            let {
                              sat_sCxj [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_sCxa] \r [x1_sCxf]
                                      let {
                                        sat_sCxi [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_sCxa x1_sCxf] \u []
                                                let {
                                                  sat_sCxh [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [g_sCxa x1_sCxf] \s []
                                                          let {
                                                            sat_sCxg [Occ=Once] :: GHC.Base.String
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)2
                                                                         x1_sCxf];
                                                          } in  g_sCxa sat_sCxg;
                                                } in  GHC.Base.++ GHC.Show.$fShowMaybe1 sat_sCxh;
                                      } in  : [GHC.Show.$fShow(,)4 sat_sCxi];
                            } in  sat_sCxj;
                      };
              };
        };

GHC.Show.$fShowMaybe_$cshow
  :: forall a. GHC.Show.Show a => GHC.Base.Maybe a -> GHC.Base.String
[GblId,
 Arity=2,
 Str=<L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCxk x_sCxl]
        case x_sCxl of {
          GHC.Base.Nothing -> GHC.Show.$fShowMaybe4;
          GHC.Base.Just b1_sCxn [Occ=Once] ->
              let {
                sat_sCxo [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sCxk b1_sCxn] \s []
                        GHC.Show.showsPrec
                            $dShow_sCxk GHC.Show.appPrec1 b1_sCxn GHC.Types.[];
              } in  GHC.Base.++ GHC.Show.$fShowMaybe1 sat_sCxo;
        };

GHC.Show.$fShowMaybe_$cshowList
  :: forall a.
     GHC.Show.Show a =>
     [GHC.Base.Maybe a] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sCxp ls_sCxq s_sCxr]
        let {
          sat_sCxs [Occ=Once] :: GHC.Base.Maybe a_azus -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCxp] \r [eta_B1]
                  GHC.Show.$fShowMaybe_$cshowsPrec
                      $dShow_sCxp GHC.Show.$fShow(,)1 eta_B1;
        } in  GHC.Show.showList__ sat_sCxs ls_sCxq s_sCxr;

GHC.Show.$fShowMaybe [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show a => GHC.Show.Show (GHC.Base.Maybe a)
[GblId[DFunId], Arity=1, Str=<L,U(C(C1(C(U))),A,A)>m] =
    [] \r [$dShow_sCxt]
        let {
          sat_sCxw [Occ=Once] :: [GHC.Base.Maybe a_azus] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCxt] \r [eta_B2 eta_B1]
                  GHC.Show.$fShowMaybe_$cshowList $dShow_sCxt eta_B2 eta_B1; } in
        let {
          sat_sCxv [Occ=Once] :: GHC.Base.Maybe a_azus -> GHC.Base.String
          [LclId] =
              [$dShow_sCxt] \r [eta_B1]
                  GHC.Show.$fShowMaybe_$cshow $dShow_sCxt eta_B1; } in
        let {
          sat_sCxu [Occ=Once]
            :: GHC.Types.Int -> GHC.Base.Maybe a_azus -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sCxt] \r [eta_B2 eta_B1]
                  GHC.Show.$fShowMaybe_$cshowsPrec $dShow_sCxt eta_B2 eta_B1;
        } in  GHC.Show.C:Show [sat_sCxu sat_sCxv sat_sCxw];

f_rC1c :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepTypeLitD "#;

f1_rC1d :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f_rC1c;

f2_rC1e :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepTypeLitS "#;

f3_rC1f :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f2_rC1e;

f4_rC1g :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepTYPE "#;

f5_rC1h :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f4_rC1g;

f6_rC1i :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepFun "#;

f7_rC1j :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f6_rC1i;

f8_rC1k :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepApp "#;

f9_rC1l :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f8_rC1k;

f10_rC1m :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepVar "#;

f11_rC1n :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f10_rC1m;

lvl42_rC1o :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " "#;

lvl43_rC1p :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepTyConApp "#;

GHC.Show.$w$cshowsPrec5 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> GHC.Types.KindRep -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_sCxx w_sCxy]
        case w_sCxy of {
          GHC.Types.KindRepTyConApp p_sCxA [Occ=Once!] q_sCxB [Occ=OnceL!] ->
              let {
                f12_sCxC [Occ=OnceL!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [p_sCxA] \u []
                        case p_sCxA of {
                          GHC.Types.TyCon _ [Occ=Dead]
                                          _ [Occ=Dead]
                                          _ [Occ=Dead]
                                          tc_name_sCxH [Occ=Once!]
                                          _ [Occ=Dead]
                                          _ [Occ=Dead] ->
                              case tc_name_sCxH of {
                                GHC.Types.TrNameS s_sCxL [Occ=Once] ->
                                    let {
                                      sat_sCxM [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [s_sCxL] \u [] GHC.CString.unpackCString# s_sCxL;
                                    } in  GHC.Base.++ sat_sCxM;
                                GHC.Types.TrNameD s_sCxN [Occ=Once] -> GHC.Base.++ s_sCxN;
                              };
                        }; } in
              let {
                p1_sCxO [Occ=OnceL*] :: GHC.Show.ShowS
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    [q_sCxB f12_sCxC] \r [x_sCxP]
                        let {
                          sat_sCy5 [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [q_sCxB f12_sCxC x_sCxP] \u []
                                  let {
                                    sat_sCy4 [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        [q_sCxB x_sCxP] \u []
                                            let {
                                              sat_sCy3 [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  [q_sCxB x_sCxP] \u []
                                                      case q_sCxB of {
                                                        [] ->
                                                            GHC.CString.unpackAppendCString#
                                                                GHC.Show.showList__4 x_sCxP;
                                                        : x1_sCxR [Occ=Once] xs_sCxS [Occ=Once] ->
                                                            let {
                                                              sat_sCy2 [Occ=Once]
                                                                :: [GHC.Types.Char]
                                                              [LclId] =
                                                                  [x_sCxP x1_sCxR xs_sCxS] \u []
                                                                      let {
                                                                        sat_sCy1 [Occ=Once]
                                                                          :: GHC.Base.String
                                                                        [LclId] =
                                                                            [x_sCxP xs_sCxS] \u []
                                                                                let {
                                                                                  lvl45_sCxT [Occ=OnceL]
                                                                                    :: [GHC.Types.Char]
                                                                                  [LclId,
                                                                                   Unf=OtherCon []] =
                                                                                      CCCS :! [GHC.Show.showList__2
                                                                                               x_sCxP]; } in
                                                                                let {
                                                                                  showl_sCxU [Occ=LoopBreaker]
                                                                                    :: [GHC.Types.KindRep]
                                                                                       -> GHC.Base.String
                                                                                  [LclId,
                                                                                   Arity=1,
                                                                                   Str=<S,1*U>,
                                                                                   Unf=OtherCon []] =
                                                                                      sat-only [lvl45_sCxT
                                                                                                showl_sCxU] \r [ds_sCxV]
                                                                                          case
                                                                                              ds_sCxV
                                                                                          of
                                                                                          { [] ->
                                                                                                lvl45_sCxT;
                                                                                            : y_sCxX [Occ=Once]
                                                                                              ys_sCxY [Occ=Once] ->
                                                                                                let {
                                                                                                  sat_sCy0 [Occ=Once]
                                                                                                    :: [GHC.Types.Char]
                                                                                                  [LclId] =
                                                                                                      [showl_sCxU
                                                                                                       y_sCxX
                                                                                                       ys_sCxY] \u []
                                                                                                          let {
                                                                                                            sat_sCxZ [Occ=Once]
                                                                                                              :: GHC.Base.String
                                                                                                            [LclId] =
                                                                                                                [showl_sCxU
                                                                                                                 ys_sCxY] \u []
                                                                                                                    showl_sCxU
                                                                                                                        ys_sCxY;
                                                                                                          } in 
                                                                                                            GHC.Show.$w$cshowsPrec5
                                                                                                                0#
                                                                                                                y_sCxX
                                                                                                                sat_sCxZ;
                                                                                                } in 
                                                                                                  : [GHC.Show.showList__1
                                                                                                     sat_sCy0];
                                                                                          };
                                                                                } in 
                                                                                  showl_sCxU
                                                                                      xs_sCxS;
                                                                      } in 
                                                                        GHC.Show.$w$cshowsPrec5
                                                                            0# x1_sCxR sat_sCy1;
                                                            } in  : [GHC.Show.showList__3 sat_sCy2];
                                                      };
                                            } in 
                                              GHC.CString.unpackAppendCString# lvl42_rC1o sat_sCy3;
                                  } in  f12_sCxC sat_sCy4;
                        } in  GHC.CString.unpackAppendCString# lvl43_rC1p sat_sCy5;
              } in 
                case ># [ww_sCxx 10#] of {
                  __DEFAULT -> p1_sCxO;
                  1# ->
                      let {
                        sat_sCya [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [p1_sCxO] \r [x_sCy7]
                                let {
                                  sat_sCy9 [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [p1_sCxO x_sCy7] \u []
                                          let {
                                            sat_sCy8 [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                CCCS :! [GHC.Show.$fShow(,)2 x_sCy7];
                                          } in  p1_sCxO sat_sCy8;
                                } in  : [GHC.Show.$fShow(,)4 sat_sCy9];
                      } in  sat_sCya;
                };
          GHC.Types.KindRepVar dt_sCyb ->
              case ># [ww_sCxx 10#] of {
                __DEFAULT ->
                    let {
                      sat_sCyo [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [dt_sCyb] \r [x_sCyd]
                              let {
                                sat_sCyn [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                [LclId] =
                                    [dt_sCyb x_sCyd] \s []
                                        case <# [dt_sCyb 0#] of {
                                          __DEFAULT ->
                                              case GHC.Show.$witos dt_sCyb x_sCyd of {
                                                (#,#) ww2_sCyg [Occ=Once] ww3_sCyh [Occ=Once] ->
                                                    : [ww2_sCyg ww3_sCyh];
                                              };
                                          1# ->
                                              let {
                                                sat_sCym [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [dt_sCyb x_sCyd] \u []
                                                        let {
                                                          sat_sCyi [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2 x_sCyd];
                                                        } in 
                                                          case GHC.Show.$witos dt_sCyb sat_sCyi of {
                                                            (#,#) ww2_sCyk [Occ=Once]
                                                                  ww3_sCyl [Occ=Once] ->
                                                                : [ww2_sCyk ww3_sCyl];
                                                          };
                                              } in  : [GHC.Show.$fShow(,)4 sat_sCym];
                                        };
                              } in  GHC.Base.++ f11_rC1n sat_sCyn;
                    } in  sat_sCyo;
                1# ->
                    let {
                      sat_sCyD [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [dt_sCyb] \r [x_sCyp]
                              let {
                                sat_sCyC [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [dt_sCyb x_sCyp] \u []
                                        let {
                                          sat_sCyB [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                          [LclId] =
                                              [dt_sCyb x_sCyp] \s []
                                                  case <# [dt_sCyb 0#] of {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_sCyr [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2 x_sCyp];
                                                        } in 
                                                          case GHC.Show.$witos dt_sCyb sat_sCyr of {
                                                            (#,#) ww2_sCyt [Occ=Once]
                                                                  ww3_sCyu [Occ=Once] ->
                                                                : [ww2_sCyt ww3_sCyu];
                                                          };
                                                    1# ->
                                                        let {
                                                          sat_sCyA [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [dt_sCyb x_sCyp] \u []
                                                                  let {
                                                                    sat_sCyv [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)2
                                                                                 x_sCyp]; } in
                                                                  let {
                                                                    sat_sCyw [Occ=Once]
                                                                      :: GHC.Base.String
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)2
                                                                                 sat_sCyv];
                                                                  } in 
                                                                    case
                                                                        GHC.Show.$witos
                                                                            dt_sCyb sat_sCyw
                                                                    of
                                                                    { (#,#) ww2_sCyy [Occ=Once]
                                                                            ww3_sCyz [Occ=Once] ->
                                                                          : [ww2_sCyy ww3_sCyz];
                                                                    };
                                                        } in  : [GHC.Show.$fShow(,)4 sat_sCyA];
                                                  };
                                        } in  GHC.Base.++ f11_rC1n sat_sCyB;
                              } in  : [GHC.Show.$fShow(,)4 sat_sCyC];
                    } in  sat_sCyD;
              };
          GHC.Types.KindRepApp p_sCyE [Occ=Once] q_sCyF [Occ=Once] ->
              let {
                f12_sCyG [Occ=OnceL*!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [p_sCyE] \u [] GHC.Show.$w$cshowsPrec5 11# p_sCyE; } in
              let {
                g_sCyH [Occ=OnceL*!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [q_sCyF] \u [] GHC.Show.$w$cshowsPrec5 11# q_sCyF;
              } in 
                case ># [ww_sCxx 10#] of {
                  __DEFAULT ->
                      let {
                        sat_sCyN [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [f12_sCyG g_sCyH] \r [x_sCyJ]
                                let {
                                  sat_sCyM [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [f12_sCyG g_sCyH x_sCyJ] \s []
                                          let {
                                            sat_sCyL [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                [g_sCyH x_sCyJ] \u []
                                                    let {
                                                      sat_sCyK [Occ=Once] :: [GHC.Types.Char]
                                                      [LclId] =
                                                          [g_sCyH x_sCyJ] \u [] g_sCyH x_sCyJ;
                                                    } in 
                                                      GHC.CString.unpackAppendCString#
                                                          lvl42_rC1o sat_sCyK;
                                          } in  f12_sCyG sat_sCyL;
                                } in  GHC.Base.++ f9_rC1l sat_sCyM;
                      } in  sat_sCyN;
                  1# ->
                      let {
                        sat_sCyU [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [f12_sCyG g_sCyH] \r [x_sCyO]
                                let {
                                  sat_sCyT [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [f12_sCyG g_sCyH x_sCyO] \u []
                                          let {
                                            sat_sCyS [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                            [LclId] =
                                                [f12_sCyG g_sCyH x_sCyO] \s []
                                                    let {
                                                      sat_sCyR [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [g_sCyH x_sCyO] \u []
                                                              let {
                                                                sat_sCyQ [Occ=Once]
                                                                  :: [GHC.Types.Char]
                                                                [LclId] =
                                                                    [g_sCyH x_sCyO] \u []
                                                                        let {
                                                                          sat_sCyP [Occ=Once]
                                                                            :: GHC.Base.String
                                                                          [LclId] =
                                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                                       x_sCyO];
                                                                        } in  g_sCyH sat_sCyP;
                                                              } in 
                                                                GHC.CString.unpackAppendCString#
                                                                    lvl42_rC1o sat_sCyQ;
                                                    } in  f12_sCyG sat_sCyR;
                                          } in  GHC.Base.++ f9_rC1l sat_sCyS;
                                } in  : [GHC.Show.$fShow(,)4 sat_sCyT];
                      } in  sat_sCyU;
                };
          GHC.Types.KindRepFun p_sCyV [Occ=Once] q_sCyW [Occ=Once] ->
              let {
                f12_sCyX [Occ=OnceL*!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [p_sCyV] \u [] GHC.Show.$w$cshowsPrec5 11# p_sCyV; } in
              let {
                g_sCyY [Occ=OnceL*!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [q_sCyW] \u [] GHC.Show.$w$cshowsPrec5 11# q_sCyW;
              } in 
                case ># [ww_sCxx 10#] of {
                  __DEFAULT ->
                      let {
                        sat_sCz4 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [f12_sCyX g_sCyY] \r [x_sCz0]
                                let {
                                  sat_sCz3 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [f12_sCyX g_sCyY x_sCz0] \s []
                                          let {
                                            sat_sCz2 [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                [g_sCyY x_sCz0] \u []
                                                    let {
                                                      sat_sCz1 [Occ=Once] :: [GHC.Types.Char]
                                                      [LclId] =
                                                          [g_sCyY x_sCz0] \u [] g_sCyY x_sCz0;
                                                    } in 
                                                      GHC.CString.unpackAppendCString#
                                                          lvl42_rC1o sat_sCz1;
                                          } in  f12_sCyX sat_sCz2;
                                } in  GHC.Base.++ f7_rC1j sat_sCz3;
                      } in  sat_sCz4;
                  1# ->
                      let {
                        sat_sCzb [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [f12_sCyX g_sCyY] \r [x_sCz5]
                                let {
                                  sat_sCza [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [f12_sCyX g_sCyY x_sCz5] \u []
                                          let {
                                            sat_sCz9 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                            [LclId] =
                                                [f12_sCyX g_sCyY x_sCz5] \s []
                                                    let {
                                                      sat_sCz8 [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [g_sCyY x_sCz5] \u []
                                                              let {
                                                                sat_sCz7 [Occ=Once]
                                                                  :: [GHC.Types.Char]
                                                                [LclId] =
                                                                    [g_sCyY x_sCz5] \u []
                                                                        let {
                                                                          sat_sCz6 [Occ=Once]
                                                                            :: GHC.Base.String
                                                                          [LclId] =
                                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                                       x_sCz5];
                                                                        } in  g_sCyY sat_sCz6;
                                                              } in 
                                                                GHC.CString.unpackAppendCString#
                                                                    lvl42_rC1o sat_sCz7;
                                                    } in  f12_sCyX sat_sCz8;
                                          } in  GHC.Base.++ f7_rC1j sat_sCz9;
                                } in  : [GHC.Show.$fShow(,)4 sat_sCza];
                      } in  sat_sCzb;
                };
          GHC.Types.KindRepTYPE rep_sCzc [Occ=OnceL*] ->
              case ># [ww_sCxx 10#] of {
                __DEFAULT ->
                    let {
                      sat_sCzg [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [rep_sCzc] \r [x_sCze]
                              let {
                                sat_sCzf [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                [LclId] =
                                    [rep_sCzc x_sCze] \s []
                                        GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                            GHC.Show.appPrec1 rep_sCzc x_sCze;
                              } in  GHC.Base.++ f5_rC1h sat_sCzf;
                    } in  sat_sCzg;
                1# ->
                    let {
                      sat_sCzl [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [rep_sCzc] \r [x_sCzh]
                              let {
                                sat_sCzk [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [rep_sCzc x_sCzh] \u []
                                        let {
                                          sat_sCzj [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                          [LclId] =
                                              [rep_sCzc x_sCzh] \s []
                                                  let {
                                                    sat_sCzi [Occ=Once] :: GHC.Base.String
                                                    [LclId] =
                                                        CCCS :! [GHC.Show.$fShow(,)2 x_sCzh];
                                                  } in 
                                                    GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                                        GHC.Show.appPrec1 rep_sCzc sat_sCzi;
                                        } in  GHC.Base.++ f5_rC1h sat_sCzj;
                              } in  : [GHC.Show.$fShow(,)4 sat_sCzk];
                    } in  sat_sCzl;
              };
          GHC.Types.KindRepTypeLitS p_sCzm [Occ=OnceL*!]
                                    q_sCzn [Occ=OnceL] ->
              let {
                cs_sCzo [Occ=OnceL*] :: [GHC.Types.Char]
                [LclId] =
                    [q_sCzn] \u [] GHC.CString.unpackCString# q_sCzn;
              } in 
                case ># [ww_sCxx 10#] of {
                  __DEFAULT ->
                      let {
                        sat_sCzB [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [p_sCzm cs_sCzo] \r [x_sCzq]
                                let {
                                  sat_sCzA [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [p_sCzm cs_sCzo x_sCzq] \s []
                                          case p_sCzm of {
                                            GHC.Types.TypeLitSymbol ->
                                                let {
                                                  sat_sCzv [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [cs_sCzo x_sCzq] \s []
                                                          let {
                                                            sat_sCzt [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [cs_sCzo x_sCzq] \u []
                                                                    let {
                                                                      sat_sCzs [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   x_sCzq];
                                                                    } in 
                                                                      GHC.Show.showLitString
                                                                          cs_sCzo sat_sCzs; } in
                                                          let {
                                                            sat_sCzu [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)3
                                                                         sat_sCzt];
                                                          } in 
                                                            GHC.CString.unpackAppendCString#
                                                                lvl42_rC1o sat_sCzu;
                                                } in 
                                                  GHC.Base.++ GHC.Show.$fShowTypeLitSort4 sat_sCzv;
                                            GHC.Types.TypeLitNat ->
                                                let {
                                                  sat_sCzz [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [cs_sCzo x_sCzq] \s []
                                                          let {
                                                            sat_sCzx [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [cs_sCzo x_sCzq] \u []
                                                                    let {
                                                                      sat_sCzw [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   x_sCzq];
                                                                    } in 
                                                                      GHC.Show.showLitString
                                                                          cs_sCzo sat_sCzw; } in
                                                          let {
                                                            sat_sCzy [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)3
                                                                         sat_sCzx];
                                                          } in 
                                                            GHC.CString.unpackAppendCString#
                                                                lvl42_rC1o sat_sCzy;
                                                } in 
                                                  GHC.Base.++ GHC.Show.$fShowTypeLitSort2 sat_sCzz;
                                          };
                                } in  GHC.Base.++ f3_rC1f sat_sCzA;
                      } in  sat_sCzB;
                  1# ->
                      let {
                        sat_sCzQ [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [p_sCzm cs_sCzo] \r [x_sCzC]
                                let {
                                  sat_sCzP [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [p_sCzm cs_sCzo x_sCzC] \u []
                                          let {
                                            sat_sCzO [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                            [LclId] =
                                                [p_sCzm cs_sCzo x_sCzC] \s []
                                                    case p_sCzm of {
                                                      GHC.Types.TypeLitSymbol ->
                                                          let {
                                                            sat_sCzI [Occ=Once, Dmd=<L,1*U>]
                                                              :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [cs_sCzo x_sCzC] \s []
                                                                    let {
                                                                      sat_sCzG [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          [cs_sCzo x_sCzC] \u []
                                                                              let {
                                                                                sat_sCzE [Occ=Once]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    CCCS :! [GHC.Show.$fShow(,)2
                                                                                             x_sCzC]; } in
                                                                              let {
                                                                                sat_sCzF [Occ=Once]
                                                                                  :: GHC.Base.String
                                                                                [LclId] =
                                                                                    CCCS :! [GHC.Show.$fShow(,)3
                                                                                             sat_sCzE];
                                                                              } in 
                                                                                GHC.Show.showLitString
                                                                                    cs_sCzo
                                                                                    sat_sCzF; } in
                                                                    let {
                                                                      sat_sCzH [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   sat_sCzG];
                                                                    } in 
                                                                      GHC.CString.unpackAppendCString#
                                                                          lvl42_rC1o sat_sCzH;
                                                          } in 
                                                            GHC.Base.++
                                                                GHC.Show.$fShowTypeLitSort4
                                                                sat_sCzI;
                                                      GHC.Types.TypeLitNat ->
                                                          let {
                                                            sat_sCzN [Occ=Once, Dmd=<L,1*U>]
                                                              :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [cs_sCzo x_sCzC] \s []
                                                                    let {
                                                                      sat_sCzL [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          [cs_sCzo x_sCzC] \u []
                                                                              let {
                                                                                sat_sCzJ [Occ=Once]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    CCCS :! [GHC.Show.$fShow(,)2
                                                                                             x_sCzC]; } in
                                                                              let {
                                                                                sat_sCzK [Occ=Once]
                                                                                  :: GHC.Base.String
                                                                                [LclId] =
                                                                                    CCCS :! [GHC.Show.$fShow(,)3
                                                                                             sat_sCzJ];
                                                                              } in 
                                                                                GHC.Show.showLitString
                                                                                    cs_sCzo
                                                                                    sat_sCzK; } in
                                                                    let {
                                                                      sat_sCzM [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   sat_sCzL];
                                                                    } in 
                                                                      GHC.CString.unpackAppendCString#
                                                                          lvl42_rC1o sat_sCzM;
                                                          } in 
                                                            GHC.Base.++
                                                                GHC.Show.$fShowTypeLitSort2
                                                                sat_sCzN;
                                                    };
                                          } in  GHC.Base.++ f3_rC1f sat_sCzO;
                                } in  : [GHC.Show.$fShow(,)4 sat_sCzP];
                      } in  sat_sCzQ;
                };
          GHC.Types.KindRepTypeLitD p_sCzR [Occ=OnceL*!]
                                    q_sCzS [Occ=OnceL*] ->
              case ># [ww_sCxx 10#] of {
                __DEFAULT ->
                    let {
                      sat_sCA5 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [p_sCzR q_sCzS] \r [x_sCzU]
                              let {
                                sat_sCA4 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                [LclId] =
                                    [p_sCzR q_sCzS x_sCzU] \s []
                                        case p_sCzR of {
                                          GHC.Types.TypeLitSymbol ->
                                              let {
                                                sat_sCzZ [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [q_sCzS x_sCzU] \s []
                                                        let {
                                                          sat_sCzX [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [q_sCzS x_sCzU] \u []
                                                                  let {
                                                                    sat_sCzW [Occ=Once]
                                                                      :: GHC.Base.String
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                 x_sCzU];
                                                                  } in 
                                                                    GHC.Show.showLitString
                                                                        q_sCzS sat_sCzW; } in
                                                        let {
                                                          sat_sCzY [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_sCzX];
                                                        } in 
                                                          GHC.CString.unpackAppendCString#
                                                              lvl42_rC1o sat_sCzY;
                                              } in 
                                                GHC.Base.++ GHC.Show.$fShowTypeLitSort4 sat_sCzZ;
                                          GHC.Types.TypeLitNat ->
                                              let {
                                                sat_sCA3 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [q_sCzS x_sCzU] \s []
                                                        let {
                                                          sat_sCA1 [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [q_sCzS x_sCzU] \u []
                                                                  let {
                                                                    sat_sCA0 [Occ=Once]
                                                                      :: GHC.Base.String
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                 x_sCzU];
                                                                  } in 
                                                                    GHC.Show.showLitString
                                                                        q_sCzS sat_sCA0; } in
                                                        let {
                                                          sat_sCA2 [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_sCA1];
                                                        } in 
                                                          GHC.CString.unpackAppendCString#
                                                              lvl42_rC1o sat_sCA2;
                                              } in 
                                                GHC.Base.++ GHC.Show.$fShowTypeLitSort2 sat_sCA3;
                                        };
                              } in  GHC.Base.++ f1_rC1d sat_sCA4;
                    } in  sat_sCA5;
                1# ->
                    let {
                      sat_sCAk [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [p_sCzR q_sCzS] \r [x_sCA6]
                              let {
                                sat_sCAj [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [p_sCzR q_sCzS x_sCA6] \u []
                                        let {
                                          sat_sCAi [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                          [LclId] =
                                              [p_sCzR q_sCzS x_sCA6] \s []
                                                  case p_sCzR of {
                                                    GHC.Types.TypeLitSymbol ->
                                                        let {
                                                          sat_sCAc [Occ=Once, Dmd=<L,1*U>]
                                                            :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [q_sCzS x_sCA6] \s []
                                                                  let {
                                                                    sat_sCAa [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        [q_sCzS x_sCA6] \u []
                                                                            let {
                                                                              sat_sCA8 [Occ=Once]
                                                                                :: [GHC.Types.Char]
                                                                              [LclId] =
                                                                                  CCCS :! [GHC.Show.$fShow(,)2
                                                                                           x_sCA6]; } in
                                                                            let {
                                                                              sat_sCA9 [Occ=Once]
                                                                                :: GHC.Base.String
                                                                              [LclId] =
                                                                                  CCCS :! [GHC.Show.$fShow(,)3
                                                                                           sat_sCA8];
                                                                            } in 
                                                                              GHC.Show.showLitString
                                                                                  q_sCzS
                                                                                  sat_sCA9; } in
                                                                  let {
                                                                    sat_sCAb [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                 sat_sCAa];
                                                                  } in 
                                                                    GHC.CString.unpackAppendCString#
                                                                        lvl42_rC1o sat_sCAb;
                                                        } in 
                                                          GHC.Base.++
                                                              GHC.Show.$fShowTypeLitSort4 sat_sCAc;
                                                    GHC.Types.TypeLitNat ->
                                                        let {
                                                          sat_sCAh [Occ=Once, Dmd=<L,1*U>]
                                                            :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [q_sCzS x_sCA6] \s []
                                                                  let {
                                                                    sat_sCAf [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        [q_sCzS x_sCA6] \u []
                                                                            let {
                                                                              sat_sCAd [Occ=Once]
                                                                                :: [GHC.Types.Char]
                                                                              [LclId] =
                                                                                  CCCS :! [GHC.Show.$fShow(,)2
                                                                                           x_sCA6]; } in
                                                                            let {
                                                                              sat_sCAe [Occ=Once]
                                                                                :: GHC.Base.String
                                                                              [LclId] =
                                                                                  CCCS :! [GHC.Show.$fShow(,)3
                                                                                           sat_sCAd];
                                                                            } in 
                                                                              GHC.Show.showLitString
                                                                                  q_sCzS
                                                                                  sat_sCAe; } in
                                                                  let {
                                                                    sat_sCAg [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                 sat_sCAf];
                                                                  } in 
                                                                    GHC.CString.unpackAppendCString#
                                                                        lvl42_rC1o sat_sCAg;
                                                        } in 
                                                          GHC.Base.++
                                                              GHC.Show.$fShowTypeLitSort2 sat_sCAh;
                                                  };
                                        } in  GHC.Base.++ f1_rC1d sat_sCAi;
                              } in  : [GHC.Show.$fShow(,)4 sat_sCAj];
                    } in  sat_sCAk;
              };
        };

GHC.Show.$fShowKindRep_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.KindRep -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S(S),1*U(U)><S,1*U>, Unf=OtherCon []] =
    [] \r [w_sCAl w1_sCAm]
        case w_sCAl of {
          GHC.Types.I# ww1_sCAo [Occ=Once] ->
              GHC.Show.$w$cshowsPrec5 ww1_sCAo w1_sCAm;
        };

GHC.Show.$fShowKindRep1 :: GHC.Types.KindRep -> GHC.Show.ShowS
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_sCAp] GHC.Show.$w$cshowsPrec5 0# w_sCAp;

GHC.Show.$fShowKindRep_$cshowList
  :: [GHC.Types.KindRep] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sCAq s_sCAr]
        GHC.Show.showList__ GHC.Show.$fShowKindRep1 ls_sCAq s_sCAr;

GHC.Show.$fShowKindRep_$cshow
  :: GHC.Types.KindRep -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sCAs] GHC.Show.$w$cshowsPrec5 0# x_sCAs GHC.Types.[];

GHC.Show.$fShowKindRep [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.KindRep
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowKindRep_$cshowsPrec
                                    GHC.Show.$fShowKindRep_$cshow
                                    GHC.Show.$fShowKindRep_$cshowList];

lvl44_rC1q :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Char.intToDigit: not a digit "#;

GHC.Show.intToDigit1 :: GHC.Prim.Int# -> GHC.Types.Char
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [i_sCAt]
        let {
          sat_sCAx [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [i_sCAt] \u []
                  case GHC.Show.$witos i_sCAt GHC.Types.[] of {
                    (#,#) ww1_sCAv [Occ=Once] ww2_sCAw [Occ=Once] ->
                        : [ww1_sCAv ww2_sCAw];
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl44_rC1q sat_sCAx
          of
          sat_sCAy
          { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sCAy;
          };

GHC.Show.$wintToDigit [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_sCAz]
        let-no-escape {
          $j_sCAA [Occ=Once*T[0], Dmd=<L,1*U>] :: GHC.Prim.Char#
          [LclId[JoinId(0)], Unf=OtherCon []] =
              [ww_sCAz] \r []
                  case >=# [ww_sCAz 10#] of {
                    __DEFAULT -> GHC.Show.intToDigit1 ww_sCAz;
                    1# ->
                        case <=# [ww_sCAz 15#] of {
                          __DEFAULT -> GHC.Show.intToDigit1 ww_sCAz;
                          1# ->
                              case +# [97# ww_sCAz] of sat_sCAF {
                                __DEFAULT ->
                                    case -# [sat_sCAF 10#] of sat_sCAG {
                                      __DEFAULT -> chr# [sat_sCAG];
                                    };
                              };
                        };
                  };
        } in 
          case >=# [ww_sCAz 0#] of {
            __DEFAULT -> $j_sCAA;
            1# ->
                case <=# [ww_sCAz 9#] of {
                  __DEFAULT -> $j_sCAA;
                  1# ->
                      case +# [48# ww_sCAz] of sat_sCAJ {
                        __DEFAULT -> chr# [sat_sCAJ];
                      };
                };
          };

GHC.Show.intToDigit [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Char
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_sCAK]
        case w_sCAK of {
          GHC.Types.I# ww1_sCAM [Occ=Once] ->
              case GHC.Show.$wintToDigit ww1_sCAM of ww2_sCAN {
                __DEFAULT -> GHC.Types.C# [ww2_sCAN];
              };
        };

GHC.Show.$wjblock' [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sCAO ww1_sCAP w_sCAQ]
        case ww_sCAO of wild_sCAR {
          __DEFAULT ->
              case quotRemInt# [ww1_sCAP 10#] of {
                (#,#) ipv_sCAT [Occ=Once] ipv1_sCAU [Occ=Once] ->
                    case +# [48# ipv1_sCAU] of sat_sCAW {
                      __DEFAULT ->
                          case chr# [sat_sCAW] of sat_sCAX {
                            __DEFAULT ->
                                let {
                                  sat_sCAY [Occ=Once] :: GHC.Types.Char
                                  [LclId] =
                                      CCCS GHC.Types.C#! [sat_sCAX]; } in
                                let {
                                  sat_sCAZ [Occ=Once] :: GHC.Base.String
                                  [LclId] =
                                      CCCS :! [sat_sCAY w_sCAQ];
                                } in 
                                  case -# [wild_sCAR 1#] of sat_sCAV {
                                    __DEFAULT -> GHC.Show.$wjblock' sat_sCAV ipv_sCAT sat_sCAZ;
                                  };
                          };
                    };
              };
          1# ->
              case +# [48# ww1_sCAP] of sat_sCB0 {
                __DEFAULT ->
                    case chr# [sat_sCB0] of sat_sCB1 {
                      __DEFAULT ->
                          let {
                            sat_sCB2 [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                CCCS GHC.Types.C#! [sat_sCB1];
                          } in  (#,#) [sat_sCB2 w_sCAQ];
                    };
              };
        };

sat_sCB4 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [465661287#];

sat_sCB5 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sCB4 GHC.Types.[]];

sat_sCB3 :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [660865024#];

sat_sCB6 :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sCB3 sat_sCB5];

GHC.Show.$fShowInteger3 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sCB6;

GHC.Show.$fShowInteger_jprintb [Occ=LoopBreaker]
  :: [GHC.Integer.Type.Integer] -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sCB7 cs_sCB8]
        case ds_sCB7 of {
          [] -> cs_sCB8;
          : n_sCBa [Occ=Once] ns_sCBb [Occ=Once] ->
              case
                  GHC.Integer.Type.quotRemInteger n_sCBa GHC.Show.$fShowInteger3
              of
              { (#,#) ipv_sCBd [Occ=Once] ipv1_sCBe [Occ=Once] ->
                    case GHC.Integer.Type.integerToInt ipv_sCBd of wild1_sCBf {
                      __DEFAULT ->
                          let {
                            sat_sCBl [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [cs_sCB8 ns_sCBb ipv1_sCBe] \u []
                                    case GHC.Integer.Type.integerToInt ipv1_sCBe of wild2_sCBg {
                                      __DEFAULT ->
                                          let {
                                            sat_sCBh [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                [cs_sCB8 ns_sCBb] \u []
                                                    GHC.Show.$fShowInteger_jprintb ns_sCBb cs_sCB8;
                                          } in 
                                            case GHC.Show.$wjblock' 18# wild2_sCBg sat_sCBh of {
                                              (#,#) ww1_sCBj [Occ=Once] ww2_sCBk [Occ=Once] ->
                                                  : [ww1_sCBj ww2_sCBk];
                                            };
                                    };
                          } in 
                            case GHC.Show.$wjblock' 18# wild1_sCBf sat_sCBl of {
                              (#,#) ww1_sCBn [Occ=Once] ww2_sCBo [Occ=Once] ->
                                  : [ww1_sCBn ww2_sCBo];
                            };
                    };
              };
        };

jsplitb_rC1r
  :: GHC.Integer.Type.Integer
     -> [GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U>,
 Unf=OtherCon []] =
    sat-only [] \r [ds_sCBp ds1_sCBq]
        case ds1_sCBq of {
          [] -> [] [];
          : n_sCBs [Occ=Once] ns_sCBt [Occ=Once] ->
              case GHC.Integer.Type.quotRemInteger n_sCBs ds_sCBp of {
                (#,#) ipv_sCBv [Occ=Once] ipv1_sCBw [Occ=Once] ->
                    let {
                      sat_sCBx [Occ=Once] :: [GHC.Integer.Type.Integer]
                      [LclId] =
                          [ds_sCBp ns_sCBt] \u [] jsplitb_rC1r ds_sCBp ns_sCBt; } in
                    let {
                      sat_sCBy [Occ=Once] :: [GHC.Integer.Type.Integer]
                      [LclId] =
                          CCCS :! [ipv1_sCBw sat_sCBx];
                    } in  : [ipv_sCBv sat_sCBy];
              };
        };

GHC.Show.$fShowInteger1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

GHC.Show.$wjsplitf [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Integer.Type.Integer, [GHC.Integer.Type.Integer] #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [w_sCBz w1_sCBA]
        case GHC.Integer.Type.gtInteger# w_sCBz w1_sCBA of {
          __DEFAULT ->
              case GHC.Integer.Type.timesInteger w_sCBz w_sCBz of sat_sCBC {
                __DEFAULT ->
                    case GHC.Show.$wjsplitf sat_sCBC w1_sCBA of {
                      (#,#) ww1_sCBE [Occ=Once] ww2_sCBF [Occ=Once*] ->
                          case GHC.Integer.Type.quotRemInteger ww1_sCBE w_sCBz of {
                            (#,#) ipv_sCBH ipv1_sCBI [Occ=Once*] ->
                                case
                                    GHC.Integer.Type.gtInteger# ipv_sCBH GHC.Show.$fShowInteger1
                                of
                                { __DEFAULT ->
                                      let {
                                        sat_sCBK [Occ=Once] :: [GHC.Integer.Type.Integer]
                                        [LclId] =
                                            [w_sCBz ww2_sCBF] \u [] jsplitb_rC1r w_sCBz ww2_sCBF;
                                      } in  (#,#) [ipv1_sCBI sat_sCBK];
                                  1# ->
                                      let {
                                        sat_sCBL [Occ=Once] :: [GHC.Integer.Type.Integer]
                                        [LclId] =
                                            [w_sCBz ww2_sCBF] \u []
                                                jsplitb_rC1r w_sCBz ww2_sCBF; } in
                                      let {
                                        sat_sCBM [Occ=Once] :: [GHC.Integer.Type.Integer]
                                        [LclId] =
                                            CCCS :! [ipv1_sCBI sat_sCBL];
                                      } in  (#,#) [ipv_sCBH sat_sCBM];
                                };
                          };
                    };
              };
          1# -> (#,#) [w1_sCBA GHC.Types.[]];
        };

sat_sCBQ :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [100974195#];

sat_sCBR :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sCBQ GHC.Types.[]];

sat_sCBP :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1864637526#];

sat_sCBS :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sCBP sat_sCBR];

sat_sCBO :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1721187872#];

sat_sCBT :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sCBO sat_sCBS];

sat_sCBN :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_sCBU :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sCBN sat_sCBT];

GHC.Show.$fShowInteger2 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sCBU;

GHC.Show.$wintegerToString' [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [w_sCBV w1_sCBW]
        case
            GHC.Integer.Type.ltInteger# w_sCBV GHC.Show.$fShowInteger3
        of
        { __DEFAULT ->
              case GHC.Show.$wjsplitf GHC.Show.$fShowInteger2 w_sCBV of {
                (#,#) ww1_sCBZ [Occ=Once] ww2_sCC0 [Occ=Once*] ->
                    case
                        GHC.Integer.Type.quotRemInteger ww1_sCBZ GHC.Show.$fShowInteger3
                    of
                    { (#,#) ipv_sCC2 [Occ=Once] ipv1_sCC3 [Occ=Once*] ->
                          case GHC.Integer.Type.integerToInt ipv_sCC2 of wild1_sCC4 {
                            __DEFAULT ->
                                case ># [wild1_sCC4 0#] of {
                                  __DEFAULT ->
                                      case GHC.Integer.Type.integerToInt ipv1_sCC3 of wild2_sCC6 {
                                        __DEFAULT ->
                                            let {
                                              sat_sCC7 [Occ=Once] :: GHC.Base.String
                                              [LclId] =
                                                  [w1_sCBW ww2_sCC0] \u []
                                                      GHC.Show.$fShowInteger_jprintb
                                                          ww2_sCC0 w1_sCBW;
                                            } in  GHC.Show.$witos' wild2_sCC6 sat_sCC7;
                                      };
                                  1# ->
                                      let {
                                        sat_sCCd [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            [w1_sCBW ww2_sCC0 ipv1_sCC3] \u []
                                                case
                                                    GHC.Integer.Type.integerToInt ipv1_sCC3
                                                of
                                                wild2_sCC8
                                                { __DEFAULT ->
                                                      let {
                                                        sat_sCC9 [Occ=Once] :: GHC.Base.String
                                                        [LclId] =
                                                            [w1_sCBW ww2_sCC0] \u []
                                                                GHC.Show.$fShowInteger_jprintb
                                                                    ww2_sCC0 w1_sCBW;
                                                      } in 
                                                        case
                                                            GHC.Show.$wjblock'
                                                                18# wild2_sCC8 sat_sCC9
                                                        of
                                                        { (#,#) ww4_sCCb [Occ=Once]
                                                                ww5_sCCc [Occ=Once] ->
                                                              : [ww4_sCCb ww5_sCCc];
                                                        };
                                                };
                                      } in  GHC.Show.$witos' wild1_sCC4 sat_sCCd;
                                };
                          };
                    };
              };
          1# ->
              case GHC.Integer.Type.integerToInt w_sCBV of wild1_sCCe {
                __DEFAULT -> GHC.Show.$witos' wild1_sCCe w1_sCBW;
              };
        };

GHC.Show.$wintegerToString [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [w_sCCf w1_sCCg]
        case
            GHC.Integer.Type.ltInteger# w_sCCf GHC.Show.$fShowInteger1
        of
        { __DEFAULT -> GHC.Show.$wintegerToString' w_sCCf w1_sCCg;
          1# ->
              let {
                sat_sCCm [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sCCf w1_sCCg] \u []
                        case GHC.Integer.Type.negateInteger w_sCCf of sat_sCCi {
                          __DEFAULT ->
                              case GHC.Show.$wintegerToString' sat_sCCi w1_sCCg of {
                                (#,#) ww1_sCCk [Occ=Once] ww2_sCCl [Occ=Once] ->
                                    : [ww1_sCCk ww2_sCCl];
                              };
                        };
              } in  (#,#) [GHC.Show.showLitChar1 sat_sCCm];
        };

GHC.Show.$w$cshowsPrec4 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Integer.Type.Integer
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=3, Str=<S,U><S,U><L,U>, Unf=OtherCon []] =
    [] \r [ww_sCCn w_sCCo w1_sCCp]
        case ># [ww_sCCn 6#] of {
          __DEFAULT -> GHC.Show.$wintegerToString w_sCCo w1_sCCp;
          1# ->
              case
                  GHC.Integer.Type.ltInteger# w_sCCo GHC.Show.$fShowInteger1
              of
              { __DEFAULT -> GHC.Show.$wintegerToString w_sCCo w1_sCCp;
                1# ->
                    let {
                      sat_sCCw [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [w_sCCo w1_sCCp] \u []
                              let {
                                sat_sCCs [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    CCCS :! [GHC.Show.$fShow(,)2 w1_sCCp];
                              } in 
                                case GHC.Show.$wintegerToString w_sCCo sat_sCCs of {
                                  (#,#) ww2_sCCu [Occ=Once] ww3_sCCv [Occ=Once] ->
                                      : [ww2_sCCu ww3_sCCv];
                                };
                    } in  (#,#) [GHC.Show.$fShow(,)4 sat_sCCw];
              };
        };

GHC.Show.$fShowInteger_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Integer.Type.Integer -> GHC.Show.ShowS
[GblId, Arity=3, Str=<S(S),1*U(U)><S,U><L,U>m2, Unf=OtherCon []] =
    [] \r [w_sCCx w1_sCCy w2_sCCz]
        case w_sCCx of {
          GHC.Types.I# ww1_sCCB [Occ=Once] ->
              case GHC.Show.$w$cshowsPrec4 ww1_sCCB w1_sCCy w2_sCCz of {
                (#,#) ww3_sCCD [Occ=Once] ww4_sCCE [Occ=Once] ->
                    : [ww3_sCCD ww4_sCCE];
              };
        };

GHC.Show.$fShowInteger_$cshow
  :: GHC.Integer.Type.Integer -> GHC.Base.String
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [x_sCCF]
        case GHC.Show.$w$cshowsPrec4 0# x_sCCF GHC.Types.[] of {
          (#,#) ww1_sCCH [Occ=Once] ww2_sCCI [Occ=Once] ->
              : [ww1_sCCH ww2_sCCI];
        };

GHC.Show.$fShowInteger_$cshowList
  :: [GHC.Integer.Type.Integer] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sCCJ s_sCCK]
        case ds_sCCJ of {
          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s_sCCK;
          : x_sCCM [Occ=Once] xs_sCCN [Occ=Once] ->
              let {
                sat_sCD3 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [s_sCCK x_sCCM xs_sCCN] \u []
                        let {
                          sat_sCCZ [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              [s_sCCK xs_sCCN] \u []
                                  let {
                                    lvl45_sCCO [Occ=OnceL] :: [GHC.Types.Char]
                                    [LclId, Unf=OtherCon []] =
                                        CCCS :! [GHC.Show.showList__2 s_sCCK]; } in
                                  let {
                                    showl_sCCP [Occ=LoopBreaker]
                                      :: [GHC.Integer.Type.Integer] -> GHC.Base.String
                                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                        sat-only [lvl45_sCCO showl_sCCP] \r [ds1_sCCQ]
                                            case ds1_sCCQ of {
                                              [] -> lvl45_sCCO;
                                              : y_sCCS [Occ=Once] ys_sCCT [Occ=Once] ->
                                                  let {
                                                    sat_sCCY [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        [showl_sCCP y_sCCS ys_sCCT] \u []
                                                            let {
                                                              sat_sCCU [Occ=Once] :: GHC.Base.String
                                                              [LclId] =
                                                                  [showl_sCCP ys_sCCT] \u []
                                                                      showl_sCCP ys_sCCT;
                                                            } in 
                                                              case
                                                                  GHC.Show.$w$cshowsPrec4
                                                                      0# y_sCCS sat_sCCU
                                                              of
                                                              { (#,#) ww1_sCCW [Occ=Once]
                                                                      ww2_sCCX [Occ=Once] ->
                                                                    : [ww1_sCCW ww2_sCCX];
                                                              };
                                                  } in  : [GHC.Show.showList__1 sat_sCCY];
                                            };
                                  } in  showl_sCCP xs_sCCN;
                        } in 
                          case GHC.Show.$w$cshowsPrec4 0# x_sCCM sat_sCCZ of {
                            (#,#) ww1_sCD1 [Occ=Once] ww2_sCD2 [Occ=Once] ->
                                : [ww1_sCD1 ww2_sCD2];
                          };
              } in  : [GHC.Show.showList__3 sat_sCD3];
        };

GHC.Show.$fShowInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Integer.Type.Integer
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShowInteger_$cshow
                                    GHC.Show.$fShowInteger_$cshowList];

GHC.Show.C:Show
  :: forall a.
     (GHC.Types.Int -> a -> GHC.Show.ShowS)
     -> (a -> GHC.Base.String)
     -> ([a] -> GHC.Show.ShowS)
     -> GHC.Show.Show a
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Show.C:Show [eta_B3 eta_B2 eta_B1];


==================== Pre unarise: ====================
2018-03-16 15:55:30.753671125 UTC

GHC.Show.showsPrec
  :: forall a.
     GHC.Show.Show a =>
     GHC.Types.Int -> a -> GHC.Show.ShowS
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SLL),U(U,A,A)>] =
    [] \r [v_sKQ2]
        case v_sKQ2 of {
          GHC.Show.C:Show v_sKQ4 [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
              v_sKQ4;
        };

GHC.Show.show :: forall a. GHC.Show.Show a => a -> GHC.Base.String
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LSL),U(A,U,A)>] =
    [] \r [v_sKQ7]
        case v_sKQ7 of {
          GHC.Show.C:Show _ [Occ=Dead] v_sKQa [Occ=Once] _ [Occ=Dead] ->
              v_sKQa;
        };

GHC.Show.showList
  :: forall a. GHC.Show.Show a => [a] -> GHC.Show.ShowS
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LLS),U(A,A,U)>] =
    [] \r [v_sKQc]
        case v_sKQc of {
          GHC.Show.C:Show _ [Occ=Dead] _ [Occ=Dead] v_sKQg [Occ=Once] ->
              v_sKQg;
        };

GHC.Show.showCommaSpace2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ", "#;

GHC.Show.showCommaSpace1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.showCommaSpace2;

GHC.Show.showLitChar13 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\\'#];

GHC.Show.asciiTab98 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NUL"#;

GHC.Show.asciiTab97 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab98;

GHC.Show.asciiTab96 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SOH"#;

GHC.Show.asciiTab95 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab96;

GHC.Show.asciiTab94 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "STX"#;

GHC.Show.asciiTab93 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab94;

GHC.Show.asciiTab92 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ETX"#;

GHC.Show.asciiTab91 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab92;

GHC.Show.asciiTab90 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EOT"#;

GHC.Show.asciiTab89 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab90;

GHC.Show.asciiTab88 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ENQ"#;

GHC.Show.asciiTab87 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab88;

GHC.Show.asciiTab86 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ACK"#;

GHC.Show.asciiTab85 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab86;

GHC.Show.asciiTab84 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BEL"#;

GHC.Show.asciiTab83 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab84;

GHC.Show.asciiTab82 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BS"#;

GHC.Show.asciiTab81 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab82;

GHC.Show.asciiTab80 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "HT"#;

GHC.Show.asciiTab79 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab80;

GHC.Show.asciiTab78 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LF"#;

GHC.Show.asciiTab77 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab78;

GHC.Show.asciiTab76 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "VT"#;

GHC.Show.asciiTab75 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab76;

GHC.Show.asciiTab74 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FF"#;

GHC.Show.asciiTab73 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab74;

GHC.Show.asciiTab72 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CR"#;

GHC.Show.asciiTab71 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab72;

GHC.Show.asciiTab70 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SO"#;

GHC.Show.asciiTab69 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab70;

GHC.Show.asciiTab68 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SI"#;

GHC.Show.asciiTab67 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab68;

GHC.Show.asciiTab66 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DLE"#;

GHC.Show.asciiTab65 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab66;

GHC.Show.asciiTab64 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC1"#;

GHC.Show.asciiTab63 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab64;

GHC.Show.asciiTab62 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC2"#;

GHC.Show.asciiTab61 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab62;

GHC.Show.asciiTab60 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC3"#;

GHC.Show.asciiTab59 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab60;

GHC.Show.asciiTab58 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC4"#;

GHC.Show.asciiTab57 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab58;

GHC.Show.asciiTab56 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NAK"#;

GHC.Show.asciiTab55 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab56;

GHC.Show.asciiTab54 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SYN"#;

GHC.Show.asciiTab53 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab54;

GHC.Show.asciiTab52 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ETB"#;

GHC.Show.asciiTab51 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab52;

GHC.Show.asciiTab50 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CAN"#;

GHC.Show.asciiTab49 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab50;

GHC.Show.asciiTab48 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EM"#;

GHC.Show.asciiTab47 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab48;

GHC.Show.asciiTab46 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SUB"#;

GHC.Show.asciiTab45 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab46;

GHC.Show.asciiTab44 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ESC"#;

GHC.Show.asciiTab43 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab44;

GHC.Show.asciiTab42 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FS"#;

GHC.Show.asciiTab41 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab42;

GHC.Show.asciiTab40 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GS"#;

GHC.Show.asciiTab39 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab40;

GHC.Show.asciiTab38 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RS"#;

GHC.Show.asciiTab37 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab38;

GHC.Show.asciiTab36 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "US"#;

GHC.Show.asciiTab35 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab36;

GHC.Show.asciiTab34 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SP"#;

GHC.Show.asciiTab33 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab34;

GHC.Show.asciiTab32 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab33 GHC.Types.[]];

GHC.Show.asciiTab31 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab35 GHC.Show.asciiTab32];

GHC.Show.asciiTab30 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab37 GHC.Show.asciiTab31];

GHC.Show.asciiTab29 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab39 GHC.Show.asciiTab30];

GHC.Show.asciiTab28 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab41 GHC.Show.asciiTab29];

GHC.Show.asciiTab27 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab43 GHC.Show.asciiTab28];

GHC.Show.asciiTab26 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab45 GHC.Show.asciiTab27];

GHC.Show.asciiTab25 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab47 GHC.Show.asciiTab26];

GHC.Show.asciiTab24 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab49 GHC.Show.asciiTab25];

GHC.Show.asciiTab23 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab51 GHC.Show.asciiTab24];

GHC.Show.asciiTab22 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab53 GHC.Show.asciiTab23];

GHC.Show.asciiTab21 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab55 GHC.Show.asciiTab22];

GHC.Show.asciiTab20 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab57 GHC.Show.asciiTab21];

GHC.Show.asciiTab19 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab59 GHC.Show.asciiTab20];

GHC.Show.asciiTab18 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab61 GHC.Show.asciiTab19];

GHC.Show.asciiTab17 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab63 GHC.Show.asciiTab18];

GHC.Show.asciiTab16 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab65 GHC.Show.asciiTab17];

GHC.Show.asciiTab15 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab67 GHC.Show.asciiTab16];

GHC.Show.asciiTab14 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab69 GHC.Show.asciiTab15];

GHC.Show.asciiTab13 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab71 GHC.Show.asciiTab14];

GHC.Show.asciiTab12 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab73 GHC.Show.asciiTab13];

GHC.Show.asciiTab11 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab75 GHC.Show.asciiTab12];

GHC.Show.asciiTab10 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab77 GHC.Show.asciiTab11];

GHC.Show.asciiTab9 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab79 GHC.Show.asciiTab10];

GHC.Show.asciiTab8 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab81 GHC.Show.asciiTab9];

GHC.Show.asciiTab7 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab83 GHC.Show.asciiTab8];

GHC.Show.asciiTab6 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab85 GHC.Show.asciiTab7];

GHC.Show.asciiTab5 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab87 GHC.Show.asciiTab6];

GHC.Show.asciiTab4 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab89 GHC.Show.asciiTab5];

GHC.Show.asciiTab3 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab91 GHC.Show.asciiTab4];

GHC.Show.asciiTab2 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab93 GHC.Show.asciiTab3];

GHC.Show.asciiTab1 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab95 GHC.Show.asciiTab2];

GHC.Show.asciiTab :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab97 GHC.Show.asciiTab1];

GHC.Show.$fShow(,)2 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [')'#];

GHC.Show.$fShow(,)4 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['('#];

GHC.Show.showLitChar1 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['-'#];

GHC.Show.$witos' [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int#
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [w_sKQh w1_sKQi]
        case <# [w_sKQh 10#] of {
          __DEFAULT ->
              case quotRemInt# [w_sKQh 10#] of {
                (#,#) ipv_sKQl [Occ=Once] ipv1_sKQm [Occ=Once] ->
                    case +# [48# ipv1_sKQm] of sat_sKQn {
                      __DEFAULT ->
                          case chr# [sat_sKQn] of sat_sKQo {
                            __DEFAULT ->
                                let {
                                  sat_sKQp [Occ=Once] :: GHC.Types.Char
                                  [LclId] =
                                      CCCS GHC.Types.C#! [sat_sKQo]; } in
                                let {
                                  sat_sKQq [Occ=Once] :: GHC.Base.String
                                  [LclId] =
                                      CCCS :! [sat_sKQp w1_sKQi];
                                } in  GHC.Show.$witos' ipv_sKQl sat_sKQq;
                          };
                    };
              };
          1# ->
              case +# [48# w_sKQh] of sat_sKQr {
                __DEFAULT ->
                    case chr# [sat_sKQr] of sat_sKQs {
                      __DEFAULT ->
                          let {
                            sat_sKQt [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                CCCS GHC.Types.C#! [sat_sKQs];
                          } in  (#,#) [sat_sKQt w1_sKQi];
                    };
              };
        };

GHC.Show.$witos [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [w_sKQu w1_sKQv]
        case <# [w_sKQu 0#] of {
          __DEFAULT -> GHC.Show.$witos' w_sKQu w1_sKQv;
          1# ->
              case w_sKQu of wild_sKQx {
                __DEFAULT ->
                    let {
                      sat_sKQC [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [w1_sKQv wild_sKQx] \u []
                              case negateInt# [wild_sKQx] of sat_sKQy {
                                __DEFAULT ->
                                    case GHC.Show.$witos' sat_sKQy w1_sKQv of {
                                      (#,#) ww1_sKQA [Occ=Once] ww2_sKQB [Occ=Once] ->
                                          : [ww1_sKQA ww2_sKQB];
                                    };
                              };
                    } in  (#,#) [GHC.Show.showLitChar1 sat_sKQC];
                -9223372036854775808# ->
                    let {
                      sat_sKQP [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [w1_sKQv] \u []
                              case quotRemInt# [-9223372036854775808# 10#] of {
                                (#,#) ipv_sKQE [Occ=Once] ipv1_sKQF [Occ=Once] ->
                                    let {
                                      sat_sKQL [Occ=Once] :: GHC.Base.String
                                      [LclId] =
                                          [w1_sKQv ipv1_sKQF] \u []
                                              case negateInt# [ipv1_sKQF] of sat_sKQH {
                                                __DEFAULT ->
                                                    case GHC.Show.$witos' sat_sKQH w1_sKQv of {
                                                      (#,#) ww1_sKQJ [Occ=Once]
                                                            ww2_sKQK [Occ=Once] ->
                                                          : [ww1_sKQJ ww2_sKQK];
                                                    };
                                              };
                                    } in 
                                      case negateInt# [ipv_sKQE] of sat_sKQG {
                                        __DEFAULT ->
                                            case GHC.Show.$witos' sat_sKQG sat_sKQL of {
                                              (#,#) ww1_sKQN [Occ=Once] ww2_sKQO [Occ=Once] ->
                                                  : [ww1_sKQN ww2_sKQO];
                                            };
                                      };
                              };
                    } in  (#,#) [GHC.Show.showLitChar1 sat_sKQP];
              };
        };

GHC.Show.$wshowSignedInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sKQQ ww1_sKQR w_sKQS]
        case <# [ww1_sKQR 0#] of {
          __DEFAULT -> GHC.Show.$witos ww1_sKQR w_sKQS;
          1# ->
              case ># [ww_sKQQ 6#] of {
                __DEFAULT -> GHC.Show.$witos ww1_sKQR w_sKQS;
                1# ->
                    let {
                      sat_sKQZ [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [ww1_sKQR w_sKQS] \u []
                              let {
                                sat_sKQV [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    CCCS :! [GHC.Show.$fShow(,)2 w_sKQS];
                              } in 
                                case GHC.Show.$witos ww1_sKQR sat_sKQV of {
                                  (#,#) ww3_sKQX [Occ=Once] ww4_sKQY [Occ=Once] ->
                                      : [ww3_sKQX ww4_sKQY];
                                };
                    } in  (#,#) [GHC.Show.$fShow(,)4 sat_sKQZ];
              };
        };

GHC.Show.showSignedInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Int -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sKR0 w1_sKR1 w2_sKR2]
        case w_sKR0 of {
          GHC.Types.I# ww1_sKR4 [Occ=Once] ->
              case w1_sKR1 of {
                GHC.Types.I# ww3_sKR6 [Occ=Once] ->
                    case GHC.Show.$wshowSignedInt ww1_sKR4 ww3_sKR6 w2_sKR2 of {
                      (#,#) ww5_sKR8 [Occ=Once] ww6_sKR9 [Occ=Once] ->
                          : [ww5_sKR8 ww6_sKR9];
                    };
              };
        };

GHC.Show.showLitChar12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\a"#;

GHC.Show.showLitChar11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\b"#;

GHC.Show.showLitChar10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\t"#;

GHC.Show.showLitChar9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\n"#;

GHC.Show.showLitChar8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\v"#;

GHC.Show.showLitChar7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\f"#;

GHC.Show.showLitChar6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\r"#;

GHC.Show.showLitChar5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\SO"#;

GHC.Show.showLitChar4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\&"#;

GHC.Show.showLitChar3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\\\"#;

GHC.Show.showLitChar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\DEL"#;

GHC.Show.$wshowLitChar [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Char# -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [ww_sKRa w_sKRb]
        case gtChar# [ww_sKRa '\DEL'#] of {
          __DEFAULT ->
              case ww_sKRa of ds_sKRd {
                __DEFAULT ->
                    case geChar# [ds_sKRd ' '#] of {
                      __DEFAULT ->
                          case ds_sKRd of ds1_sKRf {
                            __DEFAULT ->
                                let {
                                  sat_sKRh [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [ds1_sKRf] \u []
                                          case ord# [ds1_sKRf] of sat_sKRg {
                                            __DEFAULT -> GHC.List.$w!! GHC.Show.asciiTab sat_sKRg;
                                          }; } in
                                let {
                                  sat_sKRi [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      CCCS :! [GHC.Show.showLitChar13 sat_sKRh];
                                } in  GHC.Base.++ sat_sKRi w_sKRb;
                            '\a'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar12 w_sKRb;
                            '\b'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar11 w_sKRb;
                            '\t'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar10 w_sKRb;
                            '\n'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar9 w_sKRb;
                            '\v'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar8 w_sKRb;
                            '\f'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar7 w_sKRb;
                            '\r'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar6 w_sKRb;
                            '\SO'# ->
                                let {
                                  sat_sKRp [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [w_sKRb] \u []
                                          case w_sKRb of wild_sKRj {
                                            [] -> [] [];
                                            : c_sKRk [Occ=Once!] _ [Occ=Dead] ->
                                                case c_sKRk of {
                                                  GHC.Types.C# x_sKRn [Occ=Once!] ->
                                                      case x_sKRn of {
                                                        __DEFAULT -> wild_sKRj;
                                                        'H'# ->
                                                            GHC.CString.unpackAppendCString#
                                                                GHC.Show.showLitChar4 wild_sKRj;
                                                      };
                                                };
                                          };
                                } in 
                                  GHC.CString.unpackAppendCString# GHC.Show.showLitChar5 sat_sKRp;
                          };
                      1# ->
                          let {
                            sat_sKRq [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                CCCS GHC.Types.C#! [ds_sKRd];
                          } in  : [sat_sKRq w_sKRb];
                    };
                '\\'# ->
                    GHC.CString.unpackAppendCString# GHC.Show.showLitChar3 w_sKRb;
                '\DEL'# ->
                    GHC.CString.unpackAppendCString# GHC.Show.showLitChar2 w_sKRb;
              };
          1# ->
              let {
                sat_sKRD [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ww_sKRa w_sKRb] \u []
                        let {
                          sat_sKRz [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              [w_sKRb] \u []
                                  case w_sKRb of wild_sKRs {
                                    [] -> [] [];
                                    : c_sKRt [Occ=Once!] _ [Occ=Dead] ->
                                        case c_sKRt of {
                                          GHC.Types.C# c1_sKRw ->
                                              case geChar# [c1_sKRw '0'#] of {
                                                __DEFAULT -> wild_sKRs;
                                                1# ->
                                                    case leChar# [c1_sKRw '9'#] of {
                                                      __DEFAULT -> wild_sKRs;
                                                      1# ->
                                                          GHC.CString.unpackAppendCString#
                                                              GHC.Show.showLitChar4 wild_sKRs;
                                                    };
                                              };
                                        };
                                  };
                        } in 
                          case ord# [ww_sKRa] of sat_sKRr {
                            __DEFAULT ->
                                case GHC.Show.$witos sat_sKRr sat_sKRz of {
                                  (#,#) ww2_sKRB [Occ=Once] ww3_sKRC [Occ=Once] ->
                                      : [ww2_sKRB ww3_sKRC];
                                };
                          };
              } in  : [GHC.Show.showLitChar13 sat_sKRD];
        };

GHC.Show.showLitChar [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Char -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S(S),1*U(U)><L,U>, Unf=OtherCon []] =
    [] \r [w_sKRE w1_sKRF]
        case w_sKRE of {
          GHC.Types.C# ww1_sKRH [Occ=Once] ->
              GHC.Show.$wshowLitChar ww1_sKRH w1_sKRF;
        };

GHC.Show.$dmshowsPrec
  :: forall a.
     GHC.Show.Show a =>
     GHC.Types.Int -> a -> GHC.Show.ShowS
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LC(S)L),1*U(A,1*C1(U),A)><L,A><L,U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sKRI ds_sKRJ x_sKRK s_sKRL]
        case GHC.Show.show $dShow_sKRI x_sKRK of sat_sKRM {
          __DEFAULT -> GHC.Base.++ sat_sKRM s_sKRL;
        };

GHC.Show.showList__3 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['['#];

GHC.Show.showList__2 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [']'#];

GHC.Show.showList__1 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [','#];

GHC.Show.showList__4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "[]"#;

GHC.Show.showList__
  :: forall a. (a -> GHC.Show.ShowS) -> [a] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_sKRN ds1_sKRO s_sKRP]
        case ds1_sKRO of {
          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s_sKRP;
          : x_sKRR [Occ=Once] xs_sKRS [Occ=Once] ->
              let {
                sat_sKS2 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ds_sKRN s_sKRP x_sKRR xs_sKRS] \u []
                        let {
                          sat_sKS1 [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              [ds_sKRN s_sKRP xs_sKRS] \u []
                                  let {
                                    lvl45_sKRT [Occ=OnceL] :: [GHC.Types.Char]
                                    [LclId, Unf=OtherCon []] =
                                        CCCS :! [GHC.Show.showList__2 s_sKRP]; } in
                                  let {
                                    showl_sKRU [Occ=LoopBreaker] :: [a_azqi] -> GHC.Base.String
                                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                        sat-only [ds_sKRN lvl45_sKRT showl_sKRU] \r [ds2_sKRV]
                                            case ds2_sKRV of {
                                              [] -> lvl45_sKRT;
                                              : y_sKRX [Occ=Once] ys_sKRY [Occ=Once] ->
                                                  let {
                                                    sat_sKS0 [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        [ds_sKRN showl_sKRU y_sKRX ys_sKRY] \u []
                                                            let {
                                                              sat_sKRZ [Occ=Once] :: GHC.Base.String
                                                              [LclId] =
                                                                  [showl_sKRU ys_sKRY] \u []
                                                                      showl_sKRU ys_sKRY;
                                                            } in  ds_sKRN y_sKRX sat_sKRZ;
                                                  } in  : [GHC.Show.showList__1 sat_sKS0];
                                            };
                                  } in  showl_sKRU xs_sKRS;
                        } in  ds_sKRN x_sKRR sat_sKS1;
              } in  : [GHC.Show.showList__3 sat_sKS2];
        };

lvl_rC0c :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\\""#;

GHC.Show.showLitString [Occ=LoopBreaker]
  :: GHC.Base.String -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sKS3 s_sKS4]
        case ds_sKS3 of {
          [] -> s_sKS4;
          : ds1_sKS6 [Occ=Once!] cs_sKS7 [Occ=Once*] ->
              case ds1_sKS6 of {
                GHC.Types.C# ds2_sKS9 [Occ=Once!] ->
                    case ds2_sKS9 of ds3_sKSa {
                      __DEFAULT ->
                          let {
                            sat_sKSb [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [s_sKS4 cs_sKS7] \u [] GHC.Show.showLitString cs_sKS7 s_sKS4;
                          } in  GHC.Show.$wshowLitChar ds3_sKSa sat_sKSb;
                      '"'# ->
                          let {
                            sat_sKSc [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [s_sKS4 cs_sKS7] \u [] GHC.Show.showLitString cs_sKS7 s_sKS4;
                          } in  GHC.CString.unpackAppendCString# lvl_rC0c sat_sKSc;
                    };
              };
        };

GHC.Show.$fShow(,)3 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['"'#];

GHC.Show.$fShow(,)_$cshowList1
  :: [GHC.Types.Char] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,1*U><L,U>m2, Unf=OtherCon []] =
    [] \r [cs_sKSd eta_sKSe]
        let {
          sat_sKSg [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [cs_sKSd eta_sKSe] \u []
                  let {
                    sat_sKSf [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [GHC.Show.$fShow(,)3 eta_sKSe];
                  } in  GHC.Show.showLitString cs_sKSd sat_sKSf;
        } in  : [GHC.Show.$fShow(,)3 sat_sKSg];

$s$fShow[]_rC0d
  :: GHC.Types.Int
     -> [GHC.Types.Char] -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=3, Str=<L,A><L,1*U><L,U>m2, Unf=OtherCon []] =
    [] \r [ds_sKSh eta_sKSi eta1_sKSj]
        GHC.Show.$fShow(,)_$cshowList1 eta_sKSi eta1_sKSj;

GHC.Show.$fShow[]_$s$cshowList1
  :: [[GHC.Types.Char]] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sKSk s_sKSl]
        GHC.Show.showList__ GHC.Show.$fShow(,)_$cshowList1 ls_sKSk s_sKSl;

GHC.Show.$fShow[]1 :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShow(,)3 GHC.Types.[]];

GHC.Show.$fShow[]_$s$cshow1 :: [GHC.Types.Char] -> GHC.Base.String
[GblId, Arity=1, Str=<L,1*U>m2, Unf=OtherCon []] =
    [] \r [x_sKSm]
        let {
          sat_sKSn [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [x_sKSm] \u [] GHC.Show.showLitString x_sKSm GHC.Show.$fShow[]1;
        } in  : [GHC.Show.$fShow(,)3 sat_sKSn];

GHC.Show.$fShow[]_$s$fShow[]1 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show [GHC.Types.Char]
[GblId, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [$s$fShow[]_rC0d
                                    GHC.Show.$fShow[]_$s$cshow1
                                    GHC.Show.$fShow[]_$s$cshowList1];

GHC.Show.$fShow(,)1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl1_rC0e :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SrcLoc {"#;

lvl2_rC0f :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocPackage = "#;

lvl3_rC0g :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocModule = "#;

lvl4_rC0h :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocFile = "#;

lvl5_rC0i :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocStartLine = "#;

lvl6_rC0j :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocStartCol = "#;

lvl7_rC0k :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocEndLine = "#;

lvl8_rC0l :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocEndCol = "#;

lvl9_rC0m :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "}"#;

GHC.Show.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> [GHC.Types.Char]
     -> [GHC.Types.Char]
     -> [GHC.Types.Char]
     -> GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Base.String
     -> GHC.Base.String
[GblId,
 Arity=9,
 Str=<S,U><L,1*U><L,1*U><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sKSo
           ww1_sKSp
           ww2_sKSq
           ww3_sKSr
           ww4_sKSs
           ww5_sKSt
           ww6_sKSu
           ww7_sKSv
           w_sKSw]
        let {
          p_sKSx [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [ww1_sKSp
                        ww2_sKSq
                        ww3_sKSr
                        ww4_sKSs
                        ww5_sKSt
                        ww6_sKSu
                        ww7_sKSv] \r [x_sKSy]
                  let {
                    sat_sKTj [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [ww1_sKSp
                         ww2_sKSq
                         ww3_sKSr
                         ww4_sKSs
                         ww5_sKSt
                         ww6_sKSu
                         ww7_sKSv
                         x_sKSy] \u []
                            let {
                              sat_sKTh [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [ww1_sKSp
                                   ww2_sKSq
                                   ww3_sKSr
                                   ww4_sKSs
                                   ww5_sKSt
                                   ww6_sKSu
                                   ww7_sKSv
                                   x_sKSy] \u []
                                      let {
                                        sat_sKTf [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww2_sKSq
                                             ww3_sKSr
                                             ww4_sKSs
                                             ww5_sKSt
                                             ww6_sKSu
                                             ww7_sKSv
                                             x_sKSy] \u []
                                                let {
                                                  sat_sKTe [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [ww2_sKSq
                                                       ww3_sKSr
                                                       ww4_sKSs
                                                       ww5_sKSt
                                                       ww6_sKSu
                                                       ww7_sKSv
                                                       x_sKSy] \s []
                                                          let {
                                                            sat_sKTc [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [ww2_sKSq
                                                                 ww3_sKSr
                                                                 ww4_sKSs
                                                                 ww5_sKSt
                                                                 ww6_sKSu
                                                                 ww7_sKSv
                                                                 x_sKSy] \u []
                                                                    let {
                                                                      sat_sKTa [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          [ww3_sKSr
                                                                           ww4_sKSs
                                                                           ww5_sKSt
                                                                           ww6_sKSu
                                                                           ww7_sKSv
                                                                           x_sKSy] \u []
                                                                              let {
                                                                                sat_sKT9 [Occ=Once,
                                                                                          Dmd=<L,1*U>]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    [ww3_sKSr
                                                                                     ww4_sKSs
                                                                                     ww5_sKSt
                                                                                     ww6_sKSu
                                                                                     ww7_sKSv
                                                                                     x_sKSy] \s []
                                                                                        let {
                                                                                          sat_sKT7 [Occ=Once]
                                                                                            :: [GHC.Types.Char]
                                                                                          [LclId] =
                                                                                              [ww3_sKSr
                                                                                               ww4_sKSs
                                                                                               ww5_sKSt
                                                                                               ww6_sKSu
                                                                                               ww7_sKSv
                                                                                               x_sKSy] \u []
                                                                                                  let {
                                                                                                    sat_sKT5 [Occ=Once]
                                                                                                      :: [GHC.Types.Char]
                                                                                                    [LclId] =
                                                                                                        [ww4_sKSs
                                                                                                         ww5_sKSt
                                                                                                         ww6_sKSu
                                                                                                         ww7_sKSv
                                                                                                         x_sKSy] \u []
                                                                                                            let {
                                                                                                              sat_sKT4 [Occ=Once,
                                                                                                                        Dmd=<L,1*U>]
                                                                                                                :: [GHC.Types.Char]
                                                                                                              [LclId] =
                                                                                                                  [ww4_sKSs
                                                                                                                   ww5_sKSt
                                                                                                                   ww6_sKSu
                                                                                                                   ww7_sKSv
                                                                                                                   x_sKSy] \s []
                                                                                                                      let {
                                                                                                                        sat_sKT3 [Occ=Once]
                                                                                                                          :: [GHC.Types.Char]
                                                                                                                        [LclId] =
                                                                                                                            [ww4_sKSs
                                                                                                                             ww5_sKSt
                                                                                                                             ww6_sKSu
                                                                                                                             ww7_sKSv
                                                                                                                             x_sKSy] \u []
                                                                                                                                case
                                                                                                                                    ww4_sKSs
                                                                                                                                of
                                                                                                                                { GHC.Types.I# n_sKSA [Occ=Once] ->
                                                                                                                                      let {
                                                                                                                                        sat_sKSZ [Occ=Once]
                                                                                                                                          :: GHC.Base.String
                                                                                                                                        [LclId] =
                                                                                                                                            [ww5_sKSt
                                                                                                                                             ww6_sKSu
                                                                                                                                             ww7_sKSv
                                                                                                                                             x_sKSy] \u []
                                                                                                                                                let {
                                                                                                                                                  sat_sKSY [Occ=Once,
                                                                                                                                                            Dmd=<L,1*U>]
                                                                                                                                                    :: [GHC.Types.Char]
                                                                                                                                                  [LclId] =
                                                                                                                                                      [ww5_sKSt
                                                                                                                                                       ww6_sKSu
                                                                                                                                                       ww7_sKSv
                                                                                                                                                       x_sKSy] \s []
                                                                                                                                                          let {
                                                                                                                                                            sat_sKSX [Occ=Once]
                                                                                                                                                              :: [GHC.Types.Char]
                                                                                                                                                            [LclId] =
                                                                                                                                                                [ww5_sKSt
                                                                                                                                                                 ww6_sKSu
                                                                                                                                                                 ww7_sKSv
                                                                                                                                                                 x_sKSy] \u []
                                                                                                                                                                    case
                                                                                                                                                                        ww5_sKSt
                                                                                                                                                                    of
                                                                                                                                                                    { GHC.Types.I# n1_sKSC [Occ=Once] ->
                                                                                                                                                                          let {
                                                                                                                                                                            sat_sKST [Occ=Once]
                                                                                                                                                                              :: GHC.Base.String
                                                                                                                                                                            [LclId] =
                                                                                                                                                                                [ww6_sKSu
                                                                                                                                                                                 ww7_sKSv
                                                                                                                                                                                 x_sKSy] \u []
                                                                                                                                                                                    let {
                                                                                                                                                                                      sat_sKSS [Occ=Once,
                                                                                                                                                                                                Dmd=<L,1*U>]
                                                                                                                                                                                        :: [GHC.Types.Char]
                                                                                                                                                                                      [LclId] =
                                                                                                                                                                                          [ww6_sKSu
                                                                                                                                                                                           ww7_sKSv
                                                                                                                                                                                           x_sKSy] \s []
                                                                                                                                                                                              let {
                                                                                                                                                                                                sat_sKSR [Occ=Once]
                                                                                                                                                                                                  :: [GHC.Types.Char]
                                                                                                                                                                                                [LclId] =
                                                                                                                                                                                                    [ww6_sKSu
                                                                                                                                                                                                     ww7_sKSv
                                                                                                                                                                                                     x_sKSy] \u []
                                                                                                                                                                                                        case
                                                                                                                                                                                                            ww6_sKSu
                                                                                                                                                                                                        of
                                                                                                                                                                                                        { GHC.Types.I# n2_sKSE [Occ=Once] ->
                                                                                                                                                                                                              let {
                                                                                                                                                                                                                sat_sKSN [Occ=Once]
                                                                                                                                                                                                                  :: GHC.Base.String
                                                                                                                                                                                                                [LclId] =
                                                                                                                                                                                                                    [ww7_sKSv
                                                                                                                                                                                                                     x_sKSy] \u []
                                                                                                                                                                                                                        let {
                                                                                                                                                                                                                          sat_sKSM [Occ=Once,
                                                                                                                                                                                                                                    Dmd=<L,1*U>]
                                                                                                                                                                                                                            :: [GHC.Types.Char]
                                                                                                                                                                                                                          [LclId] =
                                                                                                                                                                                                                              [ww7_sKSv
                                                                                                                                                                                                                               x_sKSy] \s []
                                                                                                                                                                                                                                  let {
                                                                                                                                                                                                                                    sat_sKSL [Occ=Once]
                                                                                                                                                                                                                                      :: [GHC.Types.Char]
                                                                                                                                                                                                                                    [LclId] =
                                                                                                                                                                                                                                        [ww7_sKSv
                                                                                                                                                                                                                                         x_sKSy] \u []
                                                                                                                                                                                                                                            case
                                                                                                                                                                                                                                                ww7_sKSv
                                                                                                                                                                                                                                            of
                                                                                                                                                                                                                                            { GHC.Types.I# n3_sKSG [Occ=Once] ->
                                                                                                                                                                                                                                                  let {
                                                                                                                                                                                                                                                    sat_sKSH [Occ=Once]
                                                                                                                                                                                                                                                      :: GHC.Base.String
                                                                                                                                                                                                                                                    [LclId] =
                                                                                                                                                                                                                                                        [x_sKSy] \u []
                                                                                                                                                                                                                                                            GHC.CString.unpackAppendCString#
                                                                                                                                                                                                                                                                lvl9_rC0m
                                                                                                                                                                                                                                                                x_sKSy;
                                                                                                                                                                                                                                                  } in 
                                                                                                                                                                                                                                                    case
                                                                                                                                                                                                                                                        GHC.Show.$witos
                                                                                                                                                                                                                                                            n3_sKSG
                                                                                                                                                                                                                                                            sat_sKSH
                                                                                                                                                                                                                                                    of
                                                                                                                                                                                                                                                    { (#,#) ww9_sKSJ [Occ=Once]
                                                                                                                                                                                                                                                            ww10_sKSK [Occ=Once] ->
                                                                                                                                                                                                                                                          : [ww9_sKSJ
                                                                                                                                                                                                                                                             ww10_sKSK];
                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                            };
                                                                                                                                                                                                                                  } in 
                                                                                                                                                                                                                                    GHC.CString.unpackAppendCString#
                                                                                                                                                                                                                                        lvl8_rC0l
                                                                                                                                                                                                                                        sat_sKSL;
                                                                                                                                                                                                                        } in 
                                                                                                                                                                                                                          GHC.Base.++
                                                                                                                                                                                                                              GHC.Show.showCommaSpace1
                                                                                                                                                                                                                              sat_sKSM;
                                                                                                                                                                                                              } in 
                                                                                                                                                                                                                case
                                                                                                                                                                                                                    GHC.Show.$witos
                                                                                                                                                                                                                        n2_sKSE
                                                                                                                                                                                                                        sat_sKSN
                                                                                                                                                                                                                of
                                                                                                                                                                                                                { (#,#) ww9_sKSP [Occ=Once]
                                                                                                                                                                                                                        ww10_sKSQ [Occ=Once] ->
                                                                                                                                                                                                                      : [ww9_sKSP
                                                                                                                                                                                                                         ww10_sKSQ];
                                                                                                                                                                                                                };
                                                                                                                                                                                                        };
                                                                                                                                                                                              } in 
                                                                                                                                                                                                GHC.CString.unpackAppendCString#
                                                                                                                                                                                                    lvl7_rC0k
                                                                                                                                                                                                    sat_sKSR;
                                                                                                                                                                                    } in 
                                                                                                                                                                                      GHC.Base.++
                                                                                                                                                                                          GHC.Show.showCommaSpace1
                                                                                                                                                                                          sat_sKSS;
                                                                                                                                                                          } in 
                                                                                                                                                                            case
                                                                                                                                                                                GHC.Show.$witos
                                                                                                                                                                                    n1_sKSC
                                                                                                                                                                                    sat_sKST
                                                                                                                                                                            of
                                                                                                                                                                            { (#,#) ww9_sKSV [Occ=Once]
                                                                                                                                                                                    ww10_sKSW [Occ=Once] ->
                                                                                                                                                                                  : [ww9_sKSV
                                                                                                                                                                                     ww10_sKSW];
                                                                                                                                                                            };
                                                                                                                                                                    };
                                                                                                                                                          } in 
                                                                                                                                                            GHC.CString.unpackAppendCString#
                                                                                                                                                                lvl6_rC0j
                                                                                                                                                                sat_sKSX;
                                                                                                                                                } in 
                                                                                                                                                  GHC.Base.++
                                                                                                                                                      GHC.Show.showCommaSpace1
                                                                                                                                                      sat_sKSY;
                                                                                                                                      } in 
                                                                                                                                        case
                                                                                                                                            GHC.Show.$witos
                                                                                                                                                n_sKSA
                                                                                                                                                sat_sKSZ
                                                                                                                                        of
                                                                                                                                        { (#,#) ww9_sKT1 [Occ=Once]
                                                                                                                                                ww10_sKT2 [Occ=Once] ->
                                                                                                                                              : [ww9_sKT1
                                                                                                                                                 ww10_sKT2];
                                                                                                                                        };
                                                                                                                                };
                                                                                                                      } in 
                                                                                                                        GHC.CString.unpackAppendCString#
                                                                                                                            lvl5_rC0i
                                                                                                                            sat_sKT3;
                                                                                                            } in 
                                                                                                              GHC.Base.++
                                                                                                                  GHC.Show.showCommaSpace1
                                                                                                                  sat_sKT4; } in
                                                                                                  let {
                                                                                                    sat_sKT6 [Occ=Once]
                                                                                                      :: GHC.Base.String
                                                                                                    [LclId] =
                                                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                                                 sat_sKT5];
                                                                                                  } in 
                                                                                                    GHC.Show.showLitString
                                                                                                        ww3_sKSr
                                                                                                        sat_sKT6; } in
                                                                                        let {
                                                                                          sat_sKT8 [Occ=Once]
                                                                                            :: [GHC.Types.Char]
                                                                                          [LclId] =
                                                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                                                       sat_sKT7];
                                                                                        } in 
                                                                                          GHC.CString.unpackAppendCString#
                                                                                              lvl4_rC0h
                                                                                              sat_sKT8;
                                                                              } in 
                                                                                GHC.Base.++
                                                                                    GHC.Show.showCommaSpace1
                                                                                    sat_sKT9; } in
                                                                    let {
                                                                      sat_sKTb [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   sat_sKTa];
                                                                    } in 
                                                                      GHC.Show.showLitString
                                                                          ww2_sKSq sat_sKTb; } in
                                                          let {
                                                            sat_sKTd [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)3
                                                                         sat_sKTc];
                                                          } in 
                                                            GHC.CString.unpackAppendCString#
                                                                lvl3_rC0g sat_sKTd;
                                                } in 
                                                  GHC.Base.++
                                                      GHC.Show.showCommaSpace1 sat_sKTe; } in
                                      let {
                                        sat_sKTg [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [GHC.Show.$fShow(,)3 sat_sKTf];
                                      } in  GHC.Show.showLitString ww1_sKSp sat_sKTg; } in
                            let {
                              sat_sKTi [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  CCCS :! [GHC.Show.$fShow(,)3 sat_sKTh];
                            } in  GHC.CString.unpackAppendCString# lvl2_rC0f sat_sKTi;
                  } in  GHC.CString.unpackAppendCString# lvl1_rC0e sat_sKTj;
        } in 
          case >=# [ww_sKSo 11#] of {
            __DEFAULT -> p_sKSx w_sKSw;
            1# ->
                let {
                  sat_sKTm [Occ=Once] :: [GHC.Types.Char]
                  [LclId] =
                      [w_sKSw p_sKSx] \u []
                          let {
                            sat_sKTl [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                CCCS :! [GHC.Show.$fShow(,)2 w_sKSw];
                          } in  p_sKSx sat_sKTl;
                } in  : [GHC.Show.$fShow(,)4 sat_sKTm];
          };

GHC.Show.$fShowSrcLoc_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Stack.Types.SrcLoc -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U(U),1*U(U),1*U(U),1*U(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sKTn w1_sKTo w2_sKTp]
        case w_sKTn of {
          GHC.Types.I# ww1_sKTr [Occ=Once] ->
              case w1_sKTo of {
                GHC.Stack.Types.SrcLoc ww3_sKTt [Occ=Once]
                                       ww4_sKTu [Occ=Once]
                                       ww5_sKTv [Occ=Once]
                                       ww6_sKTw [Occ=Once]
                                       ww7_sKTx [Occ=Once]
                                       ww8_sKTy [Occ=Once]
                                       ww9_sKTz [Occ=Once] ->
                    GHC.Show.$w$cshowsPrec
                        ww1_sKTr
                        ww3_sKTt
                        ww4_sKTu
                        ww5_sKTv
                        ww6_sKTw
                        ww7_sKTx
                        ww8_sKTy
                        ww9_sKTz
                        w2_sKTp;
              };
        };

GHC.Show.$fShowSrcLoc1 :: GHC.Stack.Types.SrcLoc -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U(1*U,1*U,1*U,1*U(U),1*U(U),1*U(U),1*U(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sKTA w1_sKTB]
        case w_sKTA of {
          GHC.Stack.Types.SrcLoc ww1_sKTD [Occ=Once]
                                 ww2_sKTE [Occ=Once]
                                 ww3_sKTF [Occ=Once]
                                 ww4_sKTG [Occ=Once]
                                 ww5_sKTH [Occ=Once]
                                 ww6_sKTI [Occ=Once]
                                 ww7_sKTJ [Occ=Once] ->
              GHC.Show.$w$cshowsPrec
                  0#
                  ww1_sKTD
                  ww2_sKTE
                  ww3_sKTF
                  ww4_sKTG
                  ww5_sKTH
                  ww6_sKTI
                  ww7_sKTJ
                  w1_sKTB;
        };

GHC.Show.$fShowSrcLoc_$cshowList
  :: [GHC.Stack.Types.SrcLoc] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sKTK s_sKTL]
        GHC.Show.showList__ GHC.Show.$fShowSrcLoc1 ls_sKTK s_sKTL;

GHC.Show.$fShowSrcLoc_$cshow
  :: GHC.Stack.Types.SrcLoc -> GHC.Base.String
[GblId,
 Arity=1,
 Str=<S,1*U(1*U,1*U,1*U,1*U(U),1*U(U),1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [x_sKTM]
        case x_sKTM of {
          GHC.Stack.Types.SrcLoc ww1_sKTO [Occ=Once]
                                 ww2_sKTP [Occ=Once]
                                 ww3_sKTQ [Occ=Once]
                                 ww4_sKTR [Occ=Once]
                                 ww5_sKTS [Occ=Once]
                                 ww6_sKTT [Occ=Once]
                                 ww7_sKTU [Occ=Once] ->
              GHC.Show.$w$cshowsPrec
                  0#
                  ww1_sKTO
                  ww2_sKTP
                  ww3_sKTQ
                  ww4_sKTR
                  ww5_sKTS
                  ww6_sKTT
                  ww7_sKTU
                  GHC.Types.[];
        };

GHC.Show.$fShowSrcLoc [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Stack.Types.SrcLoc
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowSrcLoc_$cshowsPrec
                                    GHC.Show.$fShowSrcLoc_$cshow
                                    GHC.Show.$fShowSrcLoc_$cshowList];

GHC.Show.appPrec :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [10#];

GHC.Show.appPrec1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

GHC.Show.$wshowWord [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Word#
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [w_sKTV w1_sKTW]
        case ltWord# [w_sKTV 10##] of {
          __DEFAULT ->
              case remWord# [w_sKTV 10##] of sat_sKTZ {
                __DEFAULT ->
                    case word2Int# [sat_sKTZ] of sat_sKU0 {
                      __DEFAULT ->
                          case +# [48# sat_sKU0] of sat_sKU1 {
                            __DEFAULT ->
                                case chr# [sat_sKU1] of sat_sKU2 {
                                  __DEFAULT ->
                                      let {
                                        sat_sKU3 [Occ=Once] :: GHC.Types.Char
                                        [LclId] =
                                            CCCS GHC.Types.C#! [sat_sKU2]; } in
                                      let {
                                        sat_sKU4 [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [sat_sKU3 w1_sKTW];
                                      } in 
                                        case quotWord# [w_sKTV 10##] of sat_sKTY {
                                          __DEFAULT -> GHC.Show.$wshowWord sat_sKTY sat_sKU4;
                                        };
                                };
                          };
                    };
              };
          1# ->
              case word2Int# [w_sKTV] of sat_sKU5 {
                __DEFAULT ->
                    case +# [48# sat_sKU5] of sat_sKU6 {
                      __DEFAULT ->
                          case chr# [sat_sKU6] of sat_sKU7 {
                            __DEFAULT ->
                                let {
                                  sat_sKU8 [Occ=Once] :: GHC.Types.Char
                                  [LclId] =
                                      CCCS GHC.Types.C#! [sat_sKU7];
                                } in  (#,#) [sat_sKU8 w1_sKTW];
                          };
                    };
              };
        };

GHC.Show.showWord [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sKU9 w1_sKUa]
        case GHC.Show.$wshowWord w_sKU9 w1_sKUa of {
          (#,#) ww1_sKUc [Occ=Once] ww2_sKUd [Occ=Once] ->
              : [ww1_sKUc ww2_sKUd];
        };

GHC.Show.$fShowWord_$cshowsPrec
  :: GHC.Types.Int -> GHC.Types.Word -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [ds_sKUe ds1_sKUf eta_sKUg]
        case ds1_sKUf of {
          GHC.Types.W# w_sKUi [Occ=Once] ->
              GHC.Show.showWord w_sKUi eta_sKUg;
        };

GHC.Show.shows :: forall a. GHC.Show.Show a => a -> GHC.Show.ShowS
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(C(S)LL),1*U(1*C1(U),A,A)>,
 Unf=OtherCon []] =
    [] \r [$dShow_sKUj]
        GHC.Show.showsPrec $dShow_sKUj GHC.Show.$fShow(,)1;

GHC.Show.$dmshow
  :: forall a. GHC.Show.Show a => a -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(C(C(C(S)))LL),1*U(1*C1(C1(C1(U))),A,A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sKUk x_sKUl]
        GHC.Show.showsPrec
            $dShow_sKUk GHC.Show.$fShow(,)1 x_sKUl GHC.Types.[];

GHC.Show.$dmshowList
  :: forall a. GHC.Show.Show a => [a] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(C1(U))),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sKUm ls_sKUn s_sKUo]
        let {
          sat_sKUp [Occ=Once, Dmd=<L,C(C1(U))>] :: a_az3k -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sKUm] \u []
                  GHC.Show.showsPrec $dShow_sKUm GHC.Show.$fShow(,)1;
        } in  GHC.Show.showList__ sat_sKUp ls_sKUn s_sKUo;

GHC.Show.$fShowWord1
  :: GHC.Types.Word -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [ds_sKUq eta_sKUr]
        case ds_sKUq of {
          GHC.Types.W# w_sKUt [Occ=Once] ->
              GHC.Show.showWord w_sKUt eta_sKUr;
        };

GHC.Show.$fShowWord_$cshowList
  :: [GHC.Types.Word] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sKUu s_sKUv]
        GHC.Show.showList__ GHC.Show.$fShowWord1 ls_sKUu s_sKUv;

GHC.Show.$fShowWord_$cshow :: GHC.Types.Word -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_sKUw]
        case x_sKUw of {
          GHC.Types.W# w_sKUy [Occ=Once] ->
              case GHC.Show.$wshowWord w_sKUy GHC.Types.[] of {
                (#,#) ww1_sKUA [Occ=Once] ww2_sKUB [Occ=Once] ->
                    : [ww1_sKUA ww2_sKUB];
              };
        };

GHC.Show.$fShowWord [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Word
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowWord_$cshowsPrec
                                    GHC.Show.$fShowWord_$cshow
                                    GHC.Show.$fShowWord_$cshowList];

GHC.Show.showChar :: GHC.Types.Char -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] : [eta_B2 eta_B1];

GHC.Show.showParen
  :: GHC.Types.Bool -> GHC.Show.ShowS -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [b_sKUC p_sKUD]
        case b_sKUC of {
          GHC.Types.False -> p_sKUD;
          GHC.Types.True ->
              let {
                sat_sKUI [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                [LclId] =
                    [p_sKUD] \r [x_sKUF]
                        let {
                          sat_sKUH [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [p_sKUD x_sKUF] \u []
                                  let {
                                    sat_sKUG [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        CCCS :! [GHC.Show.$fShow(,)2 x_sKUF];
                                  } in  p_sKUD sat_sKUG;
                        } in  : [GHC.Show.$fShow(,)4 sat_sKUH];
              } in  sat_sKUI;
        };

lvl10_rC0n :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "foldr1"#;

lvl11_rC0o :: GHC.Base.String -> GHC.Base.String
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl10_rC0n of sat_sKUJ {
          __DEFAULT -> GHC.List.errorEmptyList sat_sKUJ;
        };

go2_rC0p
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    sat-only [] \r [ds_sKUK eta_sKUL]
        case ds_sKUK of {
          [] -> lvl11_rC0o;
          : x_sKUO [Occ=Once*!] ds1_sKUP [Occ=Once!] ->
              case ds1_sKUP of wild1_sKUQ {
                [] -> x_sKUO eta_sKUL;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sKUT [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sKUL wild1_sKUQ] \u [] go2_rC0p wild1_sKUQ eta_sKUL; } in
                    let {
                      sat_sKUU [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sKUT];
                    } in  x_sKUO sat_sKUU;
              };
        };

GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n,
      GHC.Show.Show o) =>
     GHC.Types.Int
     -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) -> GHC.Show.ShowS
[GblId,
 Arity=18,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sKUV
           $dShow1_sKUW
           $dShow2_sKUX
           $dShow3_sKUY
           $dShow4_sKUZ
           $dShow5_sKV0
           $dShow6_sKV1
           $dShow7_sKV2
           $dShow8_sKV3
           $dShow9_sKV4
           $dShow10_sKV5
           $dShow11_sKV6
           $dShow12_sKV7
           $dShow13_sKV8
           $dShow14_sKV9
           ds_sKVa
           ds1_sKVb
           s_sKVc]
        case ds1_sKVb of {
          (,,,,,,,,,,,,,,) a1_sKVe [Occ=Once]
                           b1_sKVf [Occ=Once]
                           c1_sKVg [Occ=Once]
                           d1_sKVh [Occ=Once]
                           e1_sKVi [Occ=Once]
                           f13_sKVj [Occ=Once]
                           g1_sKVk [Occ=Once]
                           h1_sKVl [Occ=Once]
                           i1_sKVm [Occ=Once]
                           j1_sKVn [Occ=Once]
                           k1_sKVo [Occ=Once]
                           l1_sKVp [Occ=Once]
                           m1_sKVq [Occ=Once]
                           n1_sKVr [Occ=Once]
                           o1_sKVs [Occ=Once] ->
              let {
                sat_sKVY [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sKUV
                     $dShow1_sKUW
                     $dShow2_sKUX
                     $dShow3_sKUY
                     $dShow4_sKUZ
                     $dShow5_sKV0
                     $dShow6_sKV1
                     $dShow7_sKV2
                     $dShow8_sKV3
                     $dShow9_sKV4
                     $dShow10_sKV5
                     $dShow11_sKV6
                     $dShow12_sKV7
                     $dShow13_sKV8
                     $dShow14_sKV9
                     s_sKVc
                     a1_sKVe
                     b1_sKVf
                     c1_sKVg
                     d1_sKVh
                     e1_sKVi
                     f13_sKVj
                     g1_sKVk
                     h1_sKVl
                     i1_sKVm
                     j1_sKVn
                     k1_sKVo
                     l1_sKVp
                     m1_sKVq
                     n1_sKVr
                     o1_sKVs] \u []
                        let {
                          sat_sKVX [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sKVc]; } in
                        let {
                          sat_sKVH [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow14_sKV9 o1_sKVs] \u []
                                  GHC.Show.showsPrec $dShow14_sKV9 GHC.Show.$fShow(,)1 o1_sKVs; } in
                        let {
                          sat_sKVI [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVH GHC.Types.[]]; } in
                        let {
                          sat_sKVG [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow13_sKV8 n1_sKVr] \u []
                                  GHC.Show.showsPrec $dShow13_sKV8 GHC.Show.$fShow(,)1 n1_sKVr; } in
                        let {
                          sat_sKVJ [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVG sat_sKVI]; } in
                        let {
                          sat_sKVF [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow12_sKV7 m1_sKVq] \u []
                                  GHC.Show.showsPrec $dShow12_sKV7 GHC.Show.$fShow(,)1 m1_sKVq; } in
                        let {
                          sat_sKVK [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVF sat_sKVJ]; } in
                        let {
                          sat_sKVE [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow11_sKV6 l1_sKVp] \u []
                                  GHC.Show.showsPrec $dShow11_sKV6 GHC.Show.$fShow(,)1 l1_sKVp; } in
                        let {
                          sat_sKVL [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVE sat_sKVK]; } in
                        let {
                          sat_sKVD [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow10_sKV5 k1_sKVo] \u []
                                  GHC.Show.showsPrec $dShow10_sKV5 GHC.Show.$fShow(,)1 k1_sKVo; } in
                        let {
                          sat_sKVM [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVD sat_sKVL]; } in
                        let {
                          sat_sKVC [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sKV4 j1_sKVn] \u []
                                  GHC.Show.showsPrec $dShow9_sKV4 GHC.Show.$fShow(,)1 j1_sKVn; } in
                        let {
                          sat_sKVN [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVC sat_sKVM]; } in
                        let {
                          sat_sKVB [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sKV3 i1_sKVm] \u []
                                  GHC.Show.showsPrec $dShow8_sKV3 GHC.Show.$fShow(,)1 i1_sKVm; } in
                        let {
                          sat_sKVO [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVB sat_sKVN]; } in
                        let {
                          sat_sKVA [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sKV2 h1_sKVl] \u []
                                  GHC.Show.showsPrec $dShow7_sKV2 GHC.Show.$fShow(,)1 h1_sKVl; } in
                        let {
                          sat_sKVP [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVA sat_sKVO]; } in
                        let {
                          sat_sKVz [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sKV1 g1_sKVk] \u []
                                  GHC.Show.showsPrec $dShow6_sKV1 GHC.Show.$fShow(,)1 g1_sKVk; } in
                        let {
                          sat_sKVQ [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVz sat_sKVP]; } in
                        let {
                          sat_sKVy [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sKV0 f13_sKVj] \u []
                                  GHC.Show.showsPrec $dShow5_sKV0 GHC.Show.$fShow(,)1 f13_sKVj; } in
                        let {
                          sat_sKVR [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVy sat_sKVQ]; } in
                        let {
                          sat_sKVx [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sKUZ e1_sKVi] \u []
                                  GHC.Show.showsPrec $dShow4_sKUZ GHC.Show.$fShow(,)1 e1_sKVi; } in
                        let {
                          sat_sKVS [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVx sat_sKVR]; } in
                        let {
                          sat_sKVw [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sKUY d1_sKVh] \u []
                                  GHC.Show.showsPrec $dShow3_sKUY GHC.Show.$fShow(,)1 d1_sKVh; } in
                        let {
                          sat_sKVT [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVw sat_sKVS]; } in
                        let {
                          sat_sKVv [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sKUX c1_sKVg] \u []
                                  GHC.Show.showsPrec $dShow2_sKUX GHC.Show.$fShow(,)1 c1_sKVg; } in
                        let {
                          sat_sKVU [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVv sat_sKVT]; } in
                        let {
                          sat_sKVu [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sKUW b1_sKVf] \u []
                                  GHC.Show.showsPrec $dShow1_sKUW GHC.Show.$fShow(,)1 b1_sKVf; } in
                        let {
                          sat_sKVV [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVu sat_sKVU]; } in
                        let {
                          sat_sKVt [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sKUV a1_sKVe] \u []
                                  GHC.Show.showsPrec $dShow_sKUV GHC.Show.$fShow(,)1 a1_sKVe; } in
                        let {
                          sat_sKVW [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sKVt sat_sKVV];
                        } in  go2_rC0p sat_sKVW sat_sKVX;
              } in  : [GHC.Show.$fShow(,)4 sat_sKVY];
        };

GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n,
      GHC.Show.Show o) =>
     (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) -> GHC.Base.String
[GblId,
 Arity=16,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sKVZ
           $dShow1_sKW0
           $dShow2_sKW1
           $dShow3_sKW2
           $dShow4_sKW3
           $dShow5_sKW4
           $dShow6_sKW5
           $dShow7_sKW6
           $dShow8_sKW7
           $dShow9_sKW8
           $dShow10_sKW9
           $dShow11_sKWa
           $dShow12_sKWb
           $dShow13_sKWc
           $dShow14_sKWd
           x_sKWe]
        GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
            $dShow_sKVZ
            $dShow1_sKW0
            $dShow2_sKW1
            $dShow3_sKW2
            $dShow4_sKW3
            $dShow5_sKW4
            $dShow6_sKW5
            $dShow7_sKW6
            $dShow8_sKW7
            $dShow9_sKW8
            $dShow10_sKW9
            $dShow11_sKWa
            $dShow12_sKWb
            $dShow13_sKWc
            $dShow14_sKWd
            GHC.Show.$fShow(,)1
            x_sKWe
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n,
      GHC.Show.Show o) =>
     [(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)] -> GHC.Show.ShowS
[GblId,
 Arity=17,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sKWf
           $dShow1_sKWg
           $dShow2_sKWh
           $dShow3_sKWi
           $dShow4_sKWj
           $dShow5_sKWk
           $dShow6_sKWl
           $dShow7_sKWm
           $dShow8_sKWn
           $dShow9_sKWo
           $dShow10_sKWp
           $dShow11_sKWq
           $dShow12_sKWr
           $dShow13_sKWs
           $dShow14_sKWt
           ls_sKWu
           s_sKWv]
        let {
          sat_sKWw [Occ=Once]
            :: (a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
                h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sKWf
               $dShow1_sKWg
               $dShow2_sKWh
               $dShow3_sKWi
               $dShow4_sKWj
               $dShow5_sKWk
               $dShow6_sKWl
               $dShow7_sKWm
               $dShow8_sKWn
               $dShow9_sKWo
               $dShow10_sKWp
               $dShow11_sKWq
               $dShow12_sKWr
               $dShow13_sKWs
               $dShow14_sKWt] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sKWf
                      $dShow1_sKWg
                      $dShow2_sKWh
                      $dShow3_sKWi
                      $dShow4_sKWj
                      $dShow5_sKWk
                      $dShow6_sKWl
                      $dShow7_sKWm
                      $dShow8_sKWn
                      $dShow9_sKWo
                      $dShow10_sKWp
                      $dShow11_sKWq
                      $dShow12_sKWr
                      $dShow13_sKWs
                      $dShow14_sKWt
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sKWw ls_sKWu s_sKWv;

GHC.Show.$fShow(,,,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n,
      GHC.Show.Show o) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
[GblId[DFunId],
 Arity=15,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sKWx
           $dShow1_sKWy
           $dShow2_sKWz
           $dShow3_sKWA
           $dShow4_sKWB
           $dShow5_sKWC
           $dShow6_sKWD
           $dShow7_sKWE
           $dShow8_sKWF
           $dShow9_sKWG
           $dShow10_sKWH
           $dShow11_sKWI
           $dShow12_sKWJ
           $dShow13_sKWK
           $dShow14_sKWL]
        let {
          sat_sKWO [Occ=Once]
            :: [(a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
                 h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sKWx
               $dShow1_sKWy
               $dShow2_sKWz
               $dShow3_sKWA
               $dShow4_sKWB
               $dShow5_sKWC
               $dShow6_sKWD
               $dShow7_sKWE
               $dShow8_sKWF
               $dShow9_sKWG
               $dShow10_sKWH
               $dShow11_sKWI
               $dShow12_sKWJ
               $dShow13_sKWK
               $dShow14_sKWL] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList
                      $dShow_sKWx
                      $dShow1_sKWy
                      $dShow2_sKWz
                      $dShow3_sKWA
                      $dShow4_sKWB
                      $dShow5_sKWC
                      $dShow6_sKWD
                      $dShow7_sKWE
                      $dShow8_sKWF
                      $dShow9_sKWG
                      $dShow10_sKWH
                      $dShow11_sKWI
                      $dShow12_sKWJ
                      $dShow13_sKWK
                      $dShow14_sKWL
                      eta_B2
                      eta_B1; } in
        let {
          sat_sKWN [Occ=Once]
            :: (a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
                h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sKWx
               $dShow1_sKWy
               $dShow2_sKWz
               $dShow3_sKWA
               $dShow4_sKWB
               $dShow5_sKWC
               $dShow6_sKWD
               $dShow7_sKWE
               $dShow8_sKWF
               $dShow9_sKWG
               $dShow10_sKWH
               $dShow11_sKWI
               $dShow12_sKWJ
               $dShow13_sKWK
               $dShow14_sKWL] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow
                      $dShow_sKWx
                      $dShow1_sKWy
                      $dShow2_sKWz
                      $dShow3_sKWA
                      $dShow4_sKWB
                      $dShow5_sKWC
                      $dShow6_sKWD
                      $dShow7_sKWE
                      $dShow8_sKWF
                      $dShow9_sKWG
                      $dShow10_sKWH
                      $dShow11_sKWI
                      $dShow12_sKWJ
                      $dShow13_sKWK
                      $dShow14_sKWL
                      eta_B1; } in
        let {
          sat_sKWM [Occ=Once]
            :: GHC.Types.Int
               -> (a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
                   h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sKWx
               $dShow1_sKWy
               $dShow2_sKWz
               $dShow3_sKWA
               $dShow4_sKWB
               $dShow5_sKWC
               $dShow6_sKWD
               $dShow7_sKWE
               $dShow8_sKWF
               $dShow9_sKWG
               $dShow10_sKWH
               $dShow11_sKWI
               $dShow12_sKWJ
               $dShow13_sKWK
               $dShow14_sKWL] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sKWx
                      $dShow1_sKWy
                      $dShow2_sKWz
                      $dShow3_sKWA
                      $dShow4_sKWB
                      $dShow5_sKWC
                      $dShow6_sKWD
                      $dShow7_sKWE
                      $dShow8_sKWF
                      $dShow9_sKWG
                      $dShow10_sKWH
                      $dShow11_sKWI
                      $dShow12_sKWJ
                      $dShow13_sKWK
                      $dShow14_sKWL
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sKWM sat_sKWN sat_sKWO];

GHC.Show.$fShow(,,,,,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sKWP eta_sKWQ]
        case ds_sKWP of {
          [] -> lvl11_rC0o;
          : x_sKWT [Occ=Once*!] ds1_sKWU [Occ=Once!] ->
              case ds1_sKWU of wild1_sKWV {
                [] -> x_sKWT eta_sKWQ;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sKWY [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sKWQ wild1_sKWV] \u []
                              GHC.Show.$fShow(,,,,,,,,,,,,,)_go2 wild1_sKWV eta_sKWQ; } in
                    let {
                      sat_sKWZ [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sKWY];
                    } in  x_sKWT sat_sKWZ;
              };
        };

GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k l m n.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n) =>
     GHC.Types.Int
     -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n) -> GHC.Show.ShowS
[GblId,
 Arity=17,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sKX0
           $dShow1_sKX1
           $dShow2_sKX2
           $dShow3_sKX3
           $dShow4_sKX4
           $dShow5_sKX5
           $dShow6_sKX6
           $dShow7_sKX7
           $dShow8_sKX8
           $dShow9_sKX9
           $dShow10_sKXa
           $dShow11_sKXb
           $dShow12_sKXc
           $dShow13_sKXd
           ds_sKXe
           ds1_sKXf
           s_sKXg]
        case ds1_sKXf of {
          (,,,,,,,,,,,,,) a1_sKXi [Occ=Once]
                          b1_sKXj [Occ=Once]
                          c1_sKXk [Occ=Once]
                          d1_sKXl [Occ=Once]
                          e1_sKXm [Occ=Once]
                          f13_sKXn [Occ=Once]
                          g1_sKXo [Occ=Once]
                          h1_sKXp [Occ=Once]
                          i1_sKXq [Occ=Once]
                          j1_sKXr [Occ=Once]
                          k1_sKXs [Occ=Once]
                          l1_sKXt [Occ=Once]
                          m1_sKXu [Occ=Once]
                          n1_sKXv [Occ=Once] ->
              let {
                sat_sKXZ [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sKX0
                     $dShow1_sKX1
                     $dShow2_sKX2
                     $dShow3_sKX3
                     $dShow4_sKX4
                     $dShow5_sKX5
                     $dShow6_sKX6
                     $dShow7_sKX7
                     $dShow8_sKX8
                     $dShow9_sKX9
                     $dShow10_sKXa
                     $dShow11_sKXb
                     $dShow12_sKXc
                     $dShow13_sKXd
                     s_sKXg
                     a1_sKXi
                     b1_sKXj
                     c1_sKXk
                     d1_sKXl
                     e1_sKXm
                     f13_sKXn
                     g1_sKXo
                     h1_sKXp
                     i1_sKXq
                     j1_sKXr
                     k1_sKXs
                     l1_sKXt
                     m1_sKXu
                     n1_sKXv] \u []
                        let {
                          sat_sKXY [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sKXg]; } in
                        let {
                          sat_sKXJ [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow13_sKXd n1_sKXv] \u []
                                  GHC.Show.showsPrec $dShow13_sKXd GHC.Show.$fShow(,)1 n1_sKXv; } in
                        let {
                          sat_sKXK [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXJ GHC.Types.[]]; } in
                        let {
                          sat_sKXI [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow12_sKXc m1_sKXu] \u []
                                  GHC.Show.showsPrec $dShow12_sKXc GHC.Show.$fShow(,)1 m1_sKXu; } in
                        let {
                          sat_sKXL [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXI sat_sKXK]; } in
                        let {
                          sat_sKXH [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow11_sKXb l1_sKXt] \u []
                                  GHC.Show.showsPrec $dShow11_sKXb GHC.Show.$fShow(,)1 l1_sKXt; } in
                        let {
                          sat_sKXM [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXH sat_sKXL]; } in
                        let {
                          sat_sKXG [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow10_sKXa k1_sKXs] \u []
                                  GHC.Show.showsPrec $dShow10_sKXa GHC.Show.$fShow(,)1 k1_sKXs; } in
                        let {
                          sat_sKXN [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXG sat_sKXM]; } in
                        let {
                          sat_sKXF [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sKX9 j1_sKXr] \u []
                                  GHC.Show.showsPrec $dShow9_sKX9 GHC.Show.$fShow(,)1 j1_sKXr; } in
                        let {
                          sat_sKXO [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXF sat_sKXN]; } in
                        let {
                          sat_sKXE [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sKX8 i1_sKXq] \u []
                                  GHC.Show.showsPrec $dShow8_sKX8 GHC.Show.$fShow(,)1 i1_sKXq; } in
                        let {
                          sat_sKXP [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXE sat_sKXO]; } in
                        let {
                          sat_sKXD [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sKX7 h1_sKXp] \u []
                                  GHC.Show.showsPrec $dShow7_sKX7 GHC.Show.$fShow(,)1 h1_sKXp; } in
                        let {
                          sat_sKXQ [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXD sat_sKXP]; } in
                        let {
                          sat_sKXC [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sKX6 g1_sKXo] \u []
                                  GHC.Show.showsPrec $dShow6_sKX6 GHC.Show.$fShow(,)1 g1_sKXo; } in
                        let {
                          sat_sKXR [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXC sat_sKXQ]; } in
                        let {
                          sat_sKXB [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sKX5 f13_sKXn] \u []
                                  GHC.Show.showsPrec $dShow5_sKX5 GHC.Show.$fShow(,)1 f13_sKXn; } in
                        let {
                          sat_sKXS [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXB sat_sKXR]; } in
                        let {
                          sat_sKXA [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sKX4 e1_sKXm] \u []
                                  GHC.Show.showsPrec $dShow4_sKX4 GHC.Show.$fShow(,)1 e1_sKXm; } in
                        let {
                          sat_sKXT [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXA sat_sKXS]; } in
                        let {
                          sat_sKXz [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sKX3 d1_sKXl] \u []
                                  GHC.Show.showsPrec $dShow3_sKX3 GHC.Show.$fShow(,)1 d1_sKXl; } in
                        let {
                          sat_sKXU [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXz sat_sKXT]; } in
                        let {
                          sat_sKXy [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sKX2 c1_sKXk] \u []
                                  GHC.Show.showsPrec $dShow2_sKX2 GHC.Show.$fShow(,)1 c1_sKXk; } in
                        let {
                          sat_sKXV [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXy sat_sKXU]; } in
                        let {
                          sat_sKXx [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sKX1 b1_sKXj] \u []
                                  GHC.Show.showsPrec $dShow1_sKX1 GHC.Show.$fShow(,)1 b1_sKXj; } in
                        let {
                          sat_sKXW [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXx sat_sKXV]; } in
                        let {
                          sat_sKXw [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sKX0 a1_sKXi] \u []
                                  GHC.Show.showsPrec $dShow_sKX0 GHC.Show.$fShow(,)1 a1_sKXi; } in
                        let {
                          sat_sKXX [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sKXw sat_sKXW];
                        } in  GHC.Show.$fShow(,,,,,,,,,,,,,)_go2 sat_sKXX sat_sKXY;
              } in  : [GHC.Show.$fShow(,)4 sat_sKXZ];
        };

GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k l m n.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n) =>
     (a, b, c, d, e, f, g, h, i, j, k, l, m, n) -> GHC.Base.String
[GblId,
 Arity=15,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sKY0
           $dShow1_sKY1
           $dShow2_sKY2
           $dShow3_sKY3
           $dShow4_sKY4
           $dShow5_sKY5
           $dShow6_sKY6
           $dShow7_sKY7
           $dShow8_sKY8
           $dShow9_sKY9
           $dShow10_sKYa
           $dShow11_sKYb
           $dShow12_sKYc
           $dShow13_sKYd
           x_sKYe]
        GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
            $dShow_sKY0
            $dShow1_sKY1
            $dShow2_sKY2
            $dShow3_sKY3
            $dShow4_sKY4
            $dShow5_sKY5
            $dShow6_sKY6
            $dShow7_sKY7
            $dShow8_sKY8
            $dShow9_sKY9
            $dShow10_sKYa
            $dShow11_sKYb
            $dShow12_sKYc
            $dShow13_sKYd
            GHC.Show.$fShow(,)1
            x_sKYe
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k l m n.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n) =>
     [(a, b, c, d, e, f, g, h, i, j, k, l, m, n)] -> GHC.Show.ShowS
[GblId,
 Arity=16,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sKYf
           $dShow1_sKYg
           $dShow2_sKYh
           $dShow3_sKYi
           $dShow4_sKYj
           $dShow5_sKYk
           $dShow6_sKYl
           $dShow7_sKYm
           $dShow8_sKYn
           $dShow9_sKYo
           $dShow10_sKYp
           $dShow11_sKYq
           $dShow12_sKYr
           $dShow13_sKYs
           ls_sKYt
           s_sKYu]
        let {
          sat_sKYv [Occ=Once]
            :: (a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
                h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sKYf
               $dShow1_sKYg
               $dShow2_sKYh
               $dShow3_sKYi
               $dShow4_sKYj
               $dShow5_sKYk
               $dShow6_sKYl
               $dShow7_sKYm
               $dShow8_sKYn
               $dShow9_sKYo
               $dShow10_sKYp
               $dShow11_sKYq
               $dShow12_sKYr
               $dShow13_sKYs] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sKYf
                      $dShow1_sKYg
                      $dShow2_sKYh
                      $dShow3_sKYi
                      $dShow4_sKYj
                      $dShow5_sKYk
                      $dShow6_sKYl
                      $dShow7_sKYm
                      $dShow8_sKYn
                      $dShow9_sKYo
                      $dShow10_sKYp
                      $dShow11_sKYq
                      $dShow12_sKYr
                      $dShow13_sKYs
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sKYv ls_sKYt s_sKYu;

GHC.Show.$fShow(,,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m n.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
[GblId[DFunId],
 Arity=14,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sKYw
           $dShow1_sKYx
           $dShow2_sKYy
           $dShow3_sKYz
           $dShow4_sKYA
           $dShow5_sKYB
           $dShow6_sKYC
           $dShow7_sKYD
           $dShow8_sKYE
           $dShow9_sKYF
           $dShow10_sKYG
           $dShow11_sKYH
           $dShow12_sKYI
           $dShow13_sKYJ]
        let {
          sat_sKYM [Occ=Once]
            :: [(a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
                 h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sKYw
               $dShow1_sKYx
               $dShow2_sKYy
               $dShow3_sKYz
               $dShow4_sKYA
               $dShow5_sKYB
               $dShow6_sKYC
               $dShow7_sKYD
               $dShow8_sKYE
               $dShow9_sKYF
               $dShow10_sKYG
               $dShow11_sKYH
               $dShow12_sKYI
               $dShow13_sKYJ] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList
                      $dShow_sKYw
                      $dShow1_sKYx
                      $dShow2_sKYy
                      $dShow3_sKYz
                      $dShow4_sKYA
                      $dShow5_sKYB
                      $dShow6_sKYC
                      $dShow7_sKYD
                      $dShow8_sKYE
                      $dShow9_sKYF
                      $dShow10_sKYG
                      $dShow11_sKYH
                      $dShow12_sKYI
                      $dShow13_sKYJ
                      eta_B2
                      eta_B1; } in
        let {
          sat_sKYL [Occ=Once]
            :: (a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
                h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sKYw
               $dShow1_sKYx
               $dShow2_sKYy
               $dShow3_sKYz
               $dShow4_sKYA
               $dShow5_sKYB
               $dShow6_sKYC
               $dShow7_sKYD
               $dShow8_sKYE
               $dShow9_sKYF
               $dShow10_sKYG
               $dShow11_sKYH
               $dShow12_sKYI
               $dShow13_sKYJ] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow
                      $dShow_sKYw
                      $dShow1_sKYx
                      $dShow2_sKYy
                      $dShow3_sKYz
                      $dShow4_sKYA
                      $dShow5_sKYB
                      $dShow6_sKYC
                      $dShow7_sKYD
                      $dShow8_sKYE
                      $dShow9_sKYF
                      $dShow10_sKYG
                      $dShow11_sKYH
                      $dShow12_sKYI
                      $dShow13_sKYJ
                      eta_B1; } in
        let {
          sat_sKYK [Occ=Once]
            :: GHC.Types.Int
               -> (a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
                   h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sKYw
               $dShow1_sKYx
               $dShow2_sKYy
               $dShow3_sKYz
               $dShow4_sKYA
               $dShow5_sKYB
               $dShow6_sKYC
               $dShow7_sKYD
               $dShow8_sKYE
               $dShow9_sKYF
               $dShow10_sKYG
               $dShow11_sKYH
               $dShow12_sKYI
               $dShow13_sKYJ] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sKYw
                      $dShow1_sKYx
                      $dShow2_sKYy
                      $dShow3_sKYz
                      $dShow4_sKYA
                      $dShow5_sKYB
                      $dShow6_sKYC
                      $dShow7_sKYD
                      $dShow8_sKYE
                      $dShow9_sKYF
                      $dShow10_sKYG
                      $dShow11_sKYH
                      $dShow12_sKYI
                      $dShow13_sKYJ
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sKYK sat_sKYL sat_sKYM];

GHC.Show.$fShow(,,,,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sKYN eta_sKYO]
        case ds_sKYN of {
          [] -> lvl11_rC0o;
          : x_sKYR [Occ=Once*!] ds1_sKYS [Occ=Once!] ->
              case ds1_sKYS of wild1_sKYT {
                [] -> x_sKYR eta_sKYO;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sKYW [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sKYO wild1_sKYT] \u []
                              GHC.Show.$fShow(,,,,,,,,,,,,)_go2 wild1_sKYT eta_sKYO; } in
                    let {
                      sat_sKYX [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sKYW];
                    } in  x_sKYR sat_sKYX;
              };
        };

GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k l m.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m) =>
     GHC.Types.Int
     -> (a, b, c, d, e, f, g, h, i, j, k, l, m) -> GHC.Show.ShowS
[GblId,
 Arity=16,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sKYY
           $dShow1_sKYZ
           $dShow2_sKZ0
           $dShow3_sKZ1
           $dShow4_sKZ2
           $dShow5_sKZ3
           $dShow6_sKZ4
           $dShow7_sKZ5
           $dShow8_sKZ6
           $dShow9_sKZ7
           $dShow10_sKZ8
           $dShow11_sKZ9
           $dShow12_sKZa
           ds_sKZb
           ds1_sKZc
           s_sKZd]
        case ds1_sKZc of {
          (,,,,,,,,,,,,) a1_sKZf [Occ=Once]
                         b1_sKZg [Occ=Once]
                         c1_sKZh [Occ=Once]
                         d1_sKZi [Occ=Once]
                         e1_sKZj [Occ=Once]
                         f13_sKZk [Occ=Once]
                         g1_sKZl [Occ=Once]
                         h1_sKZm [Occ=Once]
                         i1_sKZn [Occ=Once]
                         j1_sKZo [Occ=Once]
                         k1_sKZp [Occ=Once]
                         l1_sKZq [Occ=Once]
                         m1_sKZr [Occ=Once] ->
              let {
                sat_sKZT [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sKYY
                     $dShow1_sKYZ
                     $dShow2_sKZ0
                     $dShow3_sKZ1
                     $dShow4_sKZ2
                     $dShow5_sKZ3
                     $dShow6_sKZ4
                     $dShow7_sKZ5
                     $dShow8_sKZ6
                     $dShow9_sKZ7
                     $dShow10_sKZ8
                     $dShow11_sKZ9
                     $dShow12_sKZa
                     s_sKZd
                     a1_sKZf
                     b1_sKZg
                     c1_sKZh
                     d1_sKZi
                     e1_sKZj
                     f13_sKZk
                     g1_sKZl
                     h1_sKZm
                     i1_sKZn
                     j1_sKZo
                     k1_sKZp
                     l1_sKZq
                     m1_sKZr] \u []
                        let {
                          sat_sKZS [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sKZd]; } in
                        let {
                          sat_sKZE [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow12_sKZa m1_sKZr] \u []
                                  GHC.Show.showsPrec $dShow12_sKZa GHC.Show.$fShow(,)1 m1_sKZr; } in
                        let {
                          sat_sKZF [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZE GHC.Types.[]]; } in
                        let {
                          sat_sKZD [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow11_sKZ9 l1_sKZq] \u []
                                  GHC.Show.showsPrec $dShow11_sKZ9 GHC.Show.$fShow(,)1 l1_sKZq; } in
                        let {
                          sat_sKZG [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZD sat_sKZF]; } in
                        let {
                          sat_sKZC [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow10_sKZ8 k1_sKZp] \u []
                                  GHC.Show.showsPrec $dShow10_sKZ8 GHC.Show.$fShow(,)1 k1_sKZp; } in
                        let {
                          sat_sKZH [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZC sat_sKZG]; } in
                        let {
                          sat_sKZB [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sKZ7 j1_sKZo] \u []
                                  GHC.Show.showsPrec $dShow9_sKZ7 GHC.Show.$fShow(,)1 j1_sKZo; } in
                        let {
                          sat_sKZI [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZB sat_sKZH]; } in
                        let {
                          sat_sKZA [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sKZ6 i1_sKZn] \u []
                                  GHC.Show.showsPrec $dShow8_sKZ6 GHC.Show.$fShow(,)1 i1_sKZn; } in
                        let {
                          sat_sKZJ [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZA sat_sKZI]; } in
                        let {
                          sat_sKZz [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sKZ5 h1_sKZm] \u []
                                  GHC.Show.showsPrec $dShow7_sKZ5 GHC.Show.$fShow(,)1 h1_sKZm; } in
                        let {
                          sat_sKZK [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZz sat_sKZJ]; } in
                        let {
                          sat_sKZy [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sKZ4 g1_sKZl] \u []
                                  GHC.Show.showsPrec $dShow6_sKZ4 GHC.Show.$fShow(,)1 g1_sKZl; } in
                        let {
                          sat_sKZL [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZy sat_sKZK]; } in
                        let {
                          sat_sKZx [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sKZ3 f13_sKZk] \u []
                                  GHC.Show.showsPrec $dShow5_sKZ3 GHC.Show.$fShow(,)1 f13_sKZk; } in
                        let {
                          sat_sKZM [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZx sat_sKZL]; } in
                        let {
                          sat_sKZw [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sKZ2 e1_sKZj] \u []
                                  GHC.Show.showsPrec $dShow4_sKZ2 GHC.Show.$fShow(,)1 e1_sKZj; } in
                        let {
                          sat_sKZN [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZw sat_sKZM]; } in
                        let {
                          sat_sKZv [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sKZ1 d1_sKZi] \u []
                                  GHC.Show.showsPrec $dShow3_sKZ1 GHC.Show.$fShow(,)1 d1_sKZi; } in
                        let {
                          sat_sKZO [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZv sat_sKZN]; } in
                        let {
                          sat_sKZu [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sKZ0 c1_sKZh] \u []
                                  GHC.Show.showsPrec $dShow2_sKZ0 GHC.Show.$fShow(,)1 c1_sKZh; } in
                        let {
                          sat_sKZP [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZu sat_sKZO]; } in
                        let {
                          sat_sKZt [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sKYZ b1_sKZg] \u []
                                  GHC.Show.showsPrec $dShow1_sKYZ GHC.Show.$fShow(,)1 b1_sKZg; } in
                        let {
                          sat_sKZQ [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZt sat_sKZP]; } in
                        let {
                          sat_sKZs [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sKYY a1_sKZf] \u []
                                  GHC.Show.showsPrec $dShow_sKYY GHC.Show.$fShow(,)1 a1_sKZf; } in
                        let {
                          sat_sKZR [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sKZs sat_sKZQ];
                        } in  GHC.Show.$fShow(,,,,,,,,,,,,)_go2 sat_sKZR sat_sKZS;
              } in  : [GHC.Show.$fShow(,)4 sat_sKZT];
        };

GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k l m.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m) =>
     (a, b, c, d, e, f, g, h, i, j, k, l, m) -> GHC.Base.String
[GblId,
 Arity=14,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sKZU
           $dShow1_sKZV
           $dShow2_sKZW
           $dShow3_sKZX
           $dShow4_sKZY
           $dShow5_sKZZ
           $dShow6_sL00
           $dShow7_sL01
           $dShow8_sL02
           $dShow9_sL03
           $dShow10_sL04
           $dShow11_sL05
           $dShow12_sL06
           x_sL07]
        GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
            $dShow_sKZU
            $dShow1_sKZV
            $dShow2_sKZW
            $dShow3_sKZX
            $dShow4_sKZY
            $dShow5_sKZZ
            $dShow6_sL00
            $dShow7_sL01
            $dShow8_sL02
            $dShow9_sL03
            $dShow10_sL04
            $dShow11_sL05
            $dShow12_sL06
            GHC.Show.$fShow(,)1
            x_sL07
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k l m.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m) =>
     [(a, b, c, d, e, f, g, h, i, j, k, l, m)] -> GHC.Show.ShowS
[GblId,
 Arity=15,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sL08
           $dShow1_sL09
           $dShow2_sL0a
           $dShow3_sL0b
           $dShow4_sL0c
           $dShow5_sL0d
           $dShow6_sL0e
           $dShow7_sL0f
           $dShow8_sL0g
           $dShow9_sL0h
           $dShow10_sL0i
           $dShow11_sL0j
           $dShow12_sL0k
           ls_sL0l
           s_sL0m]
        let {
          sat_sL0n [Occ=Once]
            :: (a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
                h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL08
               $dShow1_sL09
               $dShow2_sL0a
               $dShow3_sL0b
               $dShow4_sL0c
               $dShow5_sL0d
               $dShow6_sL0e
               $dShow7_sL0f
               $dShow8_sL0g
               $dShow9_sL0h
               $dShow10_sL0i
               $dShow11_sL0j
               $dShow12_sL0k] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sL08
                      $dShow1_sL09
                      $dShow2_sL0a
                      $dShow3_sL0b
                      $dShow4_sL0c
                      $dShow5_sL0d
                      $dShow6_sL0e
                      $dShow7_sL0f
                      $dShow8_sL0g
                      $dShow9_sL0h
                      $dShow10_sL0i
                      $dShow11_sL0j
                      $dShow12_sL0k
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sL0n ls_sL0l s_sL0m;

GHC.Show.$fShow(,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l, m)
[GblId[DFunId],
 Arity=13,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sL0o
           $dShow1_sL0p
           $dShow2_sL0q
           $dShow3_sL0r
           $dShow4_sL0s
           $dShow5_sL0t
           $dShow6_sL0u
           $dShow7_sL0v
           $dShow8_sL0w
           $dShow9_sL0x
           $dShow10_sL0y
           $dShow11_sL0z
           $dShow12_sL0A]
        let {
          sat_sL0D [Occ=Once]
            :: [(a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
                 h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL0o
               $dShow1_sL0p
               $dShow2_sL0q
               $dShow3_sL0r
               $dShow4_sL0s
               $dShow5_sL0t
               $dShow6_sL0u
               $dShow7_sL0v
               $dShow8_sL0w
               $dShow9_sL0x
               $dShow10_sL0y
               $dShow11_sL0z
               $dShow12_sL0A] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList
                      $dShow_sL0o
                      $dShow1_sL0p
                      $dShow2_sL0q
                      $dShow3_sL0r
                      $dShow4_sL0s
                      $dShow5_sL0t
                      $dShow6_sL0u
                      $dShow7_sL0v
                      $dShow8_sL0w
                      $dShow9_sL0x
                      $dShow10_sL0y
                      $dShow11_sL0z
                      $dShow12_sL0A
                      eta_B2
                      eta_B1; } in
        let {
          sat_sL0C [Occ=Once]
            :: (a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
                h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sL0o
               $dShow1_sL0p
               $dShow2_sL0q
               $dShow3_sL0r
               $dShow4_sL0s
               $dShow5_sL0t
               $dShow6_sL0u
               $dShow7_sL0v
               $dShow8_sL0w
               $dShow9_sL0x
               $dShow10_sL0y
               $dShow11_sL0z
               $dShow12_sL0A] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow
                      $dShow_sL0o
                      $dShow1_sL0p
                      $dShow2_sL0q
                      $dShow3_sL0r
                      $dShow4_sL0s
                      $dShow5_sL0t
                      $dShow6_sL0u
                      $dShow7_sL0v
                      $dShow8_sL0w
                      $dShow9_sL0x
                      $dShow10_sL0y
                      $dShow11_sL0z
                      $dShow12_sL0A
                      eta_B1; } in
        let {
          sat_sL0B [Occ=Once]
            :: GHC.Types.Int
               -> (a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
                   h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL0o
               $dShow1_sL0p
               $dShow2_sL0q
               $dShow3_sL0r
               $dShow4_sL0s
               $dShow5_sL0t
               $dShow6_sL0u
               $dShow7_sL0v
               $dShow8_sL0w
               $dShow9_sL0x
               $dShow10_sL0y
               $dShow11_sL0z
               $dShow12_sL0A] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sL0o
                      $dShow1_sL0p
                      $dShow2_sL0q
                      $dShow3_sL0r
                      $dShow4_sL0s
                      $dShow5_sL0t
                      $dShow6_sL0u
                      $dShow7_sL0v
                      $dShow8_sL0w
                      $dShow9_sL0x
                      $dShow10_sL0y
                      $dShow11_sL0z
                      $dShow12_sL0A
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sL0B sat_sL0C sat_sL0D];

GHC.Show.$fShow(,,,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sL0E eta_sL0F]
        case ds_sL0E of {
          [] -> lvl11_rC0o;
          : x_sL0I [Occ=Once*!] ds1_sL0J [Occ=Once!] ->
              case ds1_sL0J of wild1_sL0K {
                [] -> x_sL0I eta_sL0F;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sL0N [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sL0F wild1_sL0K] \u []
                              GHC.Show.$fShow(,,,,,,,,,,,)_go2 wild1_sL0K eta_sL0F; } in
                    let {
                      sat_sL0O [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sL0N];
                    } in  x_sL0I sat_sL0O;
              };
        };

GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k l.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l) =>
     GHC.Types.Int
     -> (a, b, c, d, e, f, g, h, i, j, k, l) -> GHC.Show.ShowS
[GblId,
 Arity=15,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL0P
           $dShow1_sL0Q
           $dShow2_sL0R
           $dShow3_sL0S
           $dShow4_sL0T
           $dShow5_sL0U
           $dShow6_sL0V
           $dShow7_sL0W
           $dShow8_sL0X
           $dShow9_sL0Y
           $dShow10_sL0Z
           $dShow11_sL10
           ds_sL11
           ds1_sL12
           s_sL13]
        case ds1_sL12 of {
          (,,,,,,,,,,,) a1_sL15 [Occ=Once]
                        b1_sL16 [Occ=Once]
                        c1_sL17 [Occ=Once]
                        d1_sL18 [Occ=Once]
                        e1_sL19 [Occ=Once]
                        f13_sL1a [Occ=Once]
                        g1_sL1b [Occ=Once]
                        h1_sL1c [Occ=Once]
                        i1_sL1d [Occ=Once]
                        j1_sL1e [Occ=Once]
                        k1_sL1f [Occ=Once]
                        l1_sL1g [Occ=Once] ->
              let {
                sat_sL1G [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sL0P
                     $dShow1_sL0Q
                     $dShow2_sL0R
                     $dShow3_sL0S
                     $dShow4_sL0T
                     $dShow5_sL0U
                     $dShow6_sL0V
                     $dShow7_sL0W
                     $dShow8_sL0X
                     $dShow9_sL0Y
                     $dShow10_sL0Z
                     $dShow11_sL10
                     s_sL13
                     a1_sL15
                     b1_sL16
                     c1_sL17
                     d1_sL18
                     e1_sL19
                     f13_sL1a
                     g1_sL1b
                     h1_sL1c
                     i1_sL1d
                     j1_sL1e
                     k1_sL1f
                     l1_sL1g] \u []
                        let {
                          sat_sL1F [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sL13]; } in
                        let {
                          sat_sL1s [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow11_sL10 l1_sL1g] \u []
                                  GHC.Show.showsPrec $dShow11_sL10 GHC.Show.$fShow(,)1 l1_sL1g; } in
                        let {
                          sat_sL1t [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL1s GHC.Types.[]]; } in
                        let {
                          sat_sL1r [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow10_sL0Z k1_sL1f] \u []
                                  GHC.Show.showsPrec $dShow10_sL0Z GHC.Show.$fShow(,)1 k1_sL1f; } in
                        let {
                          sat_sL1u [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL1r sat_sL1t]; } in
                        let {
                          sat_sL1q [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sL0Y j1_sL1e] \u []
                                  GHC.Show.showsPrec $dShow9_sL0Y GHC.Show.$fShow(,)1 j1_sL1e; } in
                        let {
                          sat_sL1v [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL1q sat_sL1u]; } in
                        let {
                          sat_sL1p [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sL0X i1_sL1d] \u []
                                  GHC.Show.showsPrec $dShow8_sL0X GHC.Show.$fShow(,)1 i1_sL1d; } in
                        let {
                          sat_sL1w [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL1p sat_sL1v]; } in
                        let {
                          sat_sL1o [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sL0W h1_sL1c] \u []
                                  GHC.Show.showsPrec $dShow7_sL0W GHC.Show.$fShow(,)1 h1_sL1c; } in
                        let {
                          sat_sL1x [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL1o sat_sL1w]; } in
                        let {
                          sat_sL1n [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sL0V g1_sL1b] \u []
                                  GHC.Show.showsPrec $dShow6_sL0V GHC.Show.$fShow(,)1 g1_sL1b; } in
                        let {
                          sat_sL1y [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL1n sat_sL1x]; } in
                        let {
                          sat_sL1m [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sL0U f13_sL1a] \u []
                                  GHC.Show.showsPrec $dShow5_sL0U GHC.Show.$fShow(,)1 f13_sL1a; } in
                        let {
                          sat_sL1z [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL1m sat_sL1y]; } in
                        let {
                          sat_sL1l [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sL0T e1_sL19] \u []
                                  GHC.Show.showsPrec $dShow4_sL0T GHC.Show.$fShow(,)1 e1_sL19; } in
                        let {
                          sat_sL1A [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL1l sat_sL1z]; } in
                        let {
                          sat_sL1k [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sL0S d1_sL18] \u []
                                  GHC.Show.showsPrec $dShow3_sL0S GHC.Show.$fShow(,)1 d1_sL18; } in
                        let {
                          sat_sL1B [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL1k sat_sL1A]; } in
                        let {
                          sat_sL1j [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sL0R c1_sL17] \u []
                                  GHC.Show.showsPrec $dShow2_sL0R GHC.Show.$fShow(,)1 c1_sL17; } in
                        let {
                          sat_sL1C [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL1j sat_sL1B]; } in
                        let {
                          sat_sL1i [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sL0Q b1_sL16] \u []
                                  GHC.Show.showsPrec $dShow1_sL0Q GHC.Show.$fShow(,)1 b1_sL16; } in
                        let {
                          sat_sL1D [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL1i sat_sL1C]; } in
                        let {
                          sat_sL1h [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sL0P a1_sL15] \u []
                                  GHC.Show.showsPrec $dShow_sL0P GHC.Show.$fShow(,)1 a1_sL15; } in
                        let {
                          sat_sL1E [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sL1h sat_sL1D];
                        } in  GHC.Show.$fShow(,,,,,,,,,,,)_go2 sat_sL1E sat_sL1F;
              } in  : [GHC.Show.$fShow(,)4 sat_sL1G];
        };

GHC.Show.$fShow(,,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k l.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l) =>
     (a, b, c, d, e, f, g, h, i, j, k, l) -> GHC.Base.String
[GblId,
 Arity=13,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL1H
           $dShow1_sL1I
           $dShow2_sL1J
           $dShow3_sL1K
           $dShow4_sL1L
           $dShow5_sL1M
           $dShow6_sL1N
           $dShow7_sL1O
           $dShow8_sL1P
           $dShow9_sL1Q
           $dShow10_sL1R
           $dShow11_sL1S
           x_sL1T]
        GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
            $dShow_sL1H
            $dShow1_sL1I
            $dShow2_sL1J
            $dShow3_sL1K
            $dShow4_sL1L
            $dShow5_sL1M
            $dShow6_sL1N
            $dShow7_sL1O
            $dShow8_sL1P
            $dShow9_sL1Q
            $dShow10_sL1R
            $dShow11_sL1S
            GHC.Show.$fShow(,)1
            x_sL1T
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k l.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l) =>
     [(a, b, c, d, e, f, g, h, i, j, k, l)] -> GHC.Show.ShowS
[GblId,
 Arity=14,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sL1U
           $dShow1_sL1V
           $dShow2_sL1W
           $dShow3_sL1X
           $dShow4_sL1Y
           $dShow5_sL1Z
           $dShow6_sL20
           $dShow7_sL21
           $dShow8_sL22
           $dShow9_sL23
           $dShow10_sL24
           $dShow11_sL25
           ls_sL26
           s_sL27]
        let {
          sat_sL28 [Occ=Once]
            :: (a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
                h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL1U
               $dShow1_sL1V
               $dShow2_sL1W
               $dShow3_sL1X
               $dShow4_sL1Y
               $dShow5_sL1Z
               $dShow6_sL20
               $dShow7_sL21
               $dShow8_sL22
               $dShow9_sL23
               $dShow10_sL24
               $dShow11_sL25] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sL1U
                      $dShow1_sL1V
                      $dShow2_sL1W
                      $dShow3_sL1X
                      $dShow4_sL1Y
                      $dShow5_sL1Z
                      $dShow6_sL20
                      $dShow7_sL21
                      $dShow8_sL22
                      $dShow9_sL23
                      $dShow10_sL24
                      $dShow11_sL25
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sL28 ls_sL26 s_sL27;

GHC.Show.$fShow(,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l)
[GblId[DFunId],
 Arity=12,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sL29
           $dShow1_sL2a
           $dShow2_sL2b
           $dShow3_sL2c
           $dShow4_sL2d
           $dShow5_sL2e
           $dShow6_sL2f
           $dShow7_sL2g
           $dShow8_sL2h
           $dShow9_sL2i
           $dShow10_sL2j
           $dShow11_sL2k]
        let {
          sat_sL2n [Occ=Once]
            :: [(a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
                 h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL29
               $dShow1_sL2a
               $dShow2_sL2b
               $dShow3_sL2c
               $dShow4_sL2d
               $dShow5_sL2e
               $dShow6_sL2f
               $dShow7_sL2g
               $dShow8_sL2h
               $dShow9_sL2i
               $dShow10_sL2j
               $dShow11_sL2k] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList
                      $dShow_sL29
                      $dShow1_sL2a
                      $dShow2_sL2b
                      $dShow3_sL2c
                      $dShow4_sL2d
                      $dShow5_sL2e
                      $dShow6_sL2f
                      $dShow7_sL2g
                      $dShow8_sL2h
                      $dShow9_sL2i
                      $dShow10_sL2j
                      $dShow11_sL2k
                      eta_B2
                      eta_B1; } in
        let {
          sat_sL2m [Occ=Once]
            :: (a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
                h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sL29
               $dShow1_sL2a
               $dShow2_sL2b
               $dShow3_sL2c
               $dShow4_sL2d
               $dShow5_sL2e
               $dShow6_sL2f
               $dShow7_sL2g
               $dShow8_sL2h
               $dShow9_sL2i
               $dShow10_sL2j
               $dShow11_sL2k] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,)_$cshow
                      $dShow_sL29
                      $dShow1_sL2a
                      $dShow2_sL2b
                      $dShow3_sL2c
                      $dShow4_sL2d
                      $dShow5_sL2e
                      $dShow6_sL2f
                      $dShow7_sL2g
                      $dShow8_sL2h
                      $dShow9_sL2i
                      $dShow10_sL2j
                      $dShow11_sL2k
                      eta_B1; } in
        let {
          sat_sL2l [Occ=Once]
            :: GHC.Types.Int
               -> (a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
                   h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL29
               $dShow1_sL2a
               $dShow2_sL2b
               $dShow3_sL2c
               $dShow4_sL2d
               $dShow5_sL2e
               $dShow6_sL2f
               $dShow7_sL2g
               $dShow8_sL2h
               $dShow9_sL2i
               $dShow10_sL2j
               $dShow11_sL2k] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sL29
                      $dShow1_sL2a
                      $dShow2_sL2b
                      $dShow3_sL2c
                      $dShow4_sL2d
                      $dShow5_sL2e
                      $dShow6_sL2f
                      $dShow7_sL2g
                      $dShow8_sL2h
                      $dShow9_sL2i
                      $dShow10_sL2j
                      $dShow11_sL2k
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sL2l sat_sL2m sat_sL2n];

GHC.Show.$fShow(,,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sL2o eta_sL2p]
        case ds_sL2o of {
          [] -> lvl11_rC0o;
          : x_sL2s [Occ=Once*!] ds1_sL2t [Occ=Once!] ->
              case ds1_sL2t of wild1_sL2u {
                [] -> x_sL2s eta_sL2p;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sL2x [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sL2p wild1_sL2u] \u []
                              GHC.Show.$fShow(,,,,,,,,,,)_go2 wild1_sL2u eta_sL2p; } in
                    let {
                      sat_sL2y [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sL2x];
                    } in  x_sL2s sat_sL2y;
              };
        };

GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j,
      GHC.Show.Show k) =>
     GHC.Types.Int
     -> (a, b, c, d, e, f, g, h, i, j, k) -> GHC.Show.ShowS
[GblId,
 Arity=14,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL2z
           $dShow1_sL2A
           $dShow2_sL2B
           $dShow3_sL2C
           $dShow4_sL2D
           $dShow5_sL2E
           $dShow6_sL2F
           $dShow7_sL2G
           $dShow8_sL2H
           $dShow9_sL2I
           $dShow10_sL2J
           ds_sL2K
           ds1_sL2L
           s_sL2M]
        case ds1_sL2L of {
          (,,,,,,,,,,) a1_sL2O [Occ=Once]
                       b1_sL2P [Occ=Once]
                       c1_sL2Q [Occ=Once]
                       d1_sL2R [Occ=Once]
                       e1_sL2S [Occ=Once]
                       f13_sL2T [Occ=Once]
                       g1_sL2U [Occ=Once]
                       h1_sL2V [Occ=Once]
                       i1_sL2W [Occ=Once]
                       j1_sL2X [Occ=Once]
                       k1_sL2Y [Occ=Once] ->
              let {
                sat_sL3m [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sL2z
                     $dShow1_sL2A
                     $dShow2_sL2B
                     $dShow3_sL2C
                     $dShow4_sL2D
                     $dShow5_sL2E
                     $dShow6_sL2F
                     $dShow7_sL2G
                     $dShow8_sL2H
                     $dShow9_sL2I
                     $dShow10_sL2J
                     s_sL2M
                     a1_sL2O
                     b1_sL2P
                     c1_sL2Q
                     d1_sL2R
                     e1_sL2S
                     f13_sL2T
                     g1_sL2U
                     h1_sL2V
                     i1_sL2W
                     j1_sL2X
                     k1_sL2Y] \u []
                        let {
                          sat_sL3l [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sL2M]; } in
                        let {
                          sat_sL39 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow10_sL2J k1_sL2Y] \u []
                                  GHC.Show.showsPrec $dShow10_sL2J GHC.Show.$fShow(,)1 k1_sL2Y; } in
                        let {
                          sat_sL3a [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL39 GHC.Types.[]]; } in
                        let {
                          sat_sL38 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sL2I j1_sL2X] \u []
                                  GHC.Show.showsPrec $dShow9_sL2I GHC.Show.$fShow(,)1 j1_sL2X; } in
                        let {
                          sat_sL3b [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL38 sat_sL3a]; } in
                        let {
                          sat_sL37 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sL2H i1_sL2W] \u []
                                  GHC.Show.showsPrec $dShow8_sL2H GHC.Show.$fShow(,)1 i1_sL2W; } in
                        let {
                          sat_sL3c [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL37 sat_sL3b]; } in
                        let {
                          sat_sL36 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sL2G h1_sL2V] \u []
                                  GHC.Show.showsPrec $dShow7_sL2G GHC.Show.$fShow(,)1 h1_sL2V; } in
                        let {
                          sat_sL3d [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL36 sat_sL3c]; } in
                        let {
                          sat_sL35 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sL2F g1_sL2U] \u []
                                  GHC.Show.showsPrec $dShow6_sL2F GHC.Show.$fShow(,)1 g1_sL2U; } in
                        let {
                          sat_sL3e [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL35 sat_sL3d]; } in
                        let {
                          sat_sL34 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sL2E f13_sL2T] \u []
                                  GHC.Show.showsPrec $dShow5_sL2E GHC.Show.$fShow(,)1 f13_sL2T; } in
                        let {
                          sat_sL3f [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL34 sat_sL3e]; } in
                        let {
                          sat_sL33 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sL2D e1_sL2S] \u []
                                  GHC.Show.showsPrec $dShow4_sL2D GHC.Show.$fShow(,)1 e1_sL2S; } in
                        let {
                          sat_sL3g [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL33 sat_sL3f]; } in
                        let {
                          sat_sL32 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sL2C d1_sL2R] \u []
                                  GHC.Show.showsPrec $dShow3_sL2C GHC.Show.$fShow(,)1 d1_sL2R; } in
                        let {
                          sat_sL3h [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL32 sat_sL3g]; } in
                        let {
                          sat_sL31 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sL2B c1_sL2Q] \u []
                                  GHC.Show.showsPrec $dShow2_sL2B GHC.Show.$fShow(,)1 c1_sL2Q; } in
                        let {
                          sat_sL3i [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL31 sat_sL3h]; } in
                        let {
                          sat_sL30 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sL2A b1_sL2P] \u []
                                  GHC.Show.showsPrec $dShow1_sL2A GHC.Show.$fShow(,)1 b1_sL2P; } in
                        let {
                          sat_sL3j [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL30 sat_sL3i]; } in
                        let {
                          sat_sL2Z [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sL2z a1_sL2O] \u []
                                  GHC.Show.showsPrec $dShow_sL2z GHC.Show.$fShow(,)1 a1_sL2O; } in
                        let {
                          sat_sL3k [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sL2Z sat_sL3j];
                        } in  GHC.Show.$fShow(,,,,,,,,,,)_go2 sat_sL3k sat_sL3l;
              } in  : [GHC.Show.$fShow(,)4 sat_sL3m];
        };

GHC.Show.$fShow(,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j,
      GHC.Show.Show k) =>
     (a, b, c, d, e, f, g, h, i, j, k) -> GHC.Base.String
[GblId,
 Arity=12,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL3n
           $dShow1_sL3o
           $dShow2_sL3p
           $dShow3_sL3q
           $dShow4_sL3r
           $dShow5_sL3s
           $dShow6_sL3t
           $dShow7_sL3u
           $dShow8_sL3v
           $dShow9_sL3w
           $dShow10_sL3x
           x_sL3y]
        GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
            $dShow_sL3n
            $dShow1_sL3o
            $dShow2_sL3p
            $dShow3_sL3q
            $dShow4_sL3r
            $dShow5_sL3s
            $dShow6_sL3t
            $dShow7_sL3u
            $dShow8_sL3v
            $dShow9_sL3w
            $dShow10_sL3x
            GHC.Show.$fShow(,)1
            x_sL3y
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j,
      GHC.Show.Show k) =>
     [(a, b, c, d, e, f, g, h, i, j, k)] -> GHC.Show.ShowS
[GblId,
 Arity=13,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sL3z
           $dShow1_sL3A
           $dShow2_sL3B
           $dShow3_sL3C
           $dShow4_sL3D
           $dShow5_sL3E
           $dShow6_sL3F
           $dShow7_sL3G
           $dShow8_sL3H
           $dShow9_sL3I
           $dShow10_sL3J
           ls_sL3K
           s_sL3L]
        let {
          sat_sL3M [Occ=Once]
            :: (a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
                h_azCR, i_azCS, j_azCT, k_azCU)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL3z
               $dShow1_sL3A
               $dShow2_sL3B
               $dShow3_sL3C
               $dShow4_sL3D
               $dShow5_sL3E
               $dShow6_sL3F
               $dShow7_sL3G
               $dShow8_sL3H
               $dShow9_sL3I
               $dShow10_sL3J] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
                      $dShow_sL3z
                      $dShow1_sL3A
                      $dShow2_sL3B
                      $dShow3_sL3C
                      $dShow4_sL3D
                      $dShow5_sL3E
                      $dShow6_sL3F
                      $dShow7_sL3G
                      $dShow8_sL3H
                      $dShow9_sL3I
                      $dShow10_sL3J
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sL3M ls_sL3K s_sL3L;

GHC.Show.$fShow(,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j,
      GHC.Show.Show k) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k)
[GblId[DFunId],
 Arity=11,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sL3N
           $dShow1_sL3O
           $dShow2_sL3P
           $dShow3_sL3Q
           $dShow4_sL3R
           $dShow5_sL3S
           $dShow6_sL3T
           $dShow7_sL3U
           $dShow8_sL3V
           $dShow9_sL3W
           $dShow10_sL3X]
        let {
          sat_sL40 [Occ=Once]
            :: [(a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
                 h_azCR, i_azCS, j_azCT, k_azCU)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL3N
               $dShow1_sL3O
               $dShow2_sL3P
               $dShow3_sL3Q
               $dShow4_sL3R
               $dShow5_sL3S
               $dShow6_sL3T
               $dShow7_sL3U
               $dShow8_sL3V
               $dShow9_sL3W
               $dShow10_sL3X] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,)_$cshowList
                      $dShow_sL3N
                      $dShow1_sL3O
                      $dShow2_sL3P
                      $dShow3_sL3Q
                      $dShow4_sL3R
                      $dShow5_sL3S
                      $dShow6_sL3T
                      $dShow7_sL3U
                      $dShow8_sL3V
                      $dShow9_sL3W
                      $dShow10_sL3X
                      eta_B2
                      eta_B1; } in
        let {
          sat_sL3Z [Occ=Once]
            :: (a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
                h_azCR, i_azCS, j_azCT, k_azCU)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sL3N
               $dShow1_sL3O
               $dShow2_sL3P
               $dShow3_sL3Q
               $dShow4_sL3R
               $dShow5_sL3S
               $dShow6_sL3T
               $dShow7_sL3U
               $dShow8_sL3V
               $dShow9_sL3W
               $dShow10_sL3X] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,)_$cshow
                      $dShow_sL3N
                      $dShow1_sL3O
                      $dShow2_sL3P
                      $dShow3_sL3Q
                      $dShow4_sL3R
                      $dShow5_sL3S
                      $dShow6_sL3T
                      $dShow7_sL3U
                      $dShow8_sL3V
                      $dShow9_sL3W
                      $dShow10_sL3X
                      eta_B1; } in
        let {
          sat_sL3Y [Occ=Once]
            :: GHC.Types.Int
               -> (a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
                   h_azCR, i_azCS, j_azCT, k_azCU)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL3N
               $dShow1_sL3O
               $dShow2_sL3P
               $dShow3_sL3Q
               $dShow4_sL3R
               $dShow5_sL3S
               $dShow6_sL3T
               $dShow7_sL3U
               $dShow8_sL3V
               $dShow9_sL3W
               $dShow10_sL3X] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
                      $dShow_sL3N
                      $dShow1_sL3O
                      $dShow2_sL3P
                      $dShow3_sL3Q
                      $dShow4_sL3R
                      $dShow5_sL3S
                      $dShow6_sL3T
                      $dShow7_sL3U
                      $dShow8_sL3V
                      $dShow9_sL3W
                      $dShow10_sL3X
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sL3Y sat_sL3Z sat_sL40];

GHC.Show.$fShow(,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sL41 eta_sL42]
        case ds_sL41 of {
          [] -> lvl11_rC0o;
          : x_sL45 [Occ=Once*!] ds1_sL46 [Occ=Once!] ->
              case ds1_sL46 of wild1_sL47 {
                [] -> x_sL45 eta_sL42;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sL4a [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sL42 wild1_sL47] \u []
                              GHC.Show.$fShow(,,,,,,,,,)_go2 wild1_sL47 eta_sL42; } in
                    let {
                      sat_sL4b [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sL4a];
                    } in  x_sL45 sat_sL4b;
              };
        };

GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j) =>
     GHC.Types.Int -> (a, b, c, d, e, f, g, h, i, j) -> GHC.Show.ShowS
[GblId,
 Arity=13,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL4c
           $dShow1_sL4d
           $dShow2_sL4e
           $dShow3_sL4f
           $dShow4_sL4g
           $dShow5_sL4h
           $dShow6_sL4i
           $dShow7_sL4j
           $dShow8_sL4k
           $dShow9_sL4l
           ds_sL4m
           ds1_sL4n
           s_sL4o]
        case ds1_sL4n of {
          (,,,,,,,,,) a1_sL4q [Occ=Once]
                      b1_sL4r [Occ=Once]
                      c1_sL4s [Occ=Once]
                      d1_sL4t [Occ=Once]
                      e1_sL4u [Occ=Once]
                      f13_sL4v [Occ=Once]
                      g1_sL4w [Occ=Once]
                      h1_sL4x [Occ=Once]
                      i1_sL4y [Occ=Once]
                      j1_sL4z [Occ=Once] ->
              let {
                sat_sL4V [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sL4c
                     $dShow1_sL4d
                     $dShow2_sL4e
                     $dShow3_sL4f
                     $dShow4_sL4g
                     $dShow5_sL4h
                     $dShow6_sL4i
                     $dShow7_sL4j
                     $dShow8_sL4k
                     $dShow9_sL4l
                     s_sL4o
                     a1_sL4q
                     b1_sL4r
                     c1_sL4s
                     d1_sL4t
                     e1_sL4u
                     f13_sL4v
                     g1_sL4w
                     h1_sL4x
                     i1_sL4y
                     j1_sL4z] \u []
                        let {
                          sat_sL4U [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sL4o]; } in
                        let {
                          sat_sL4J [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sL4l j1_sL4z] \u []
                                  GHC.Show.showsPrec $dShow9_sL4l GHC.Show.$fShow(,)1 j1_sL4z; } in
                        let {
                          sat_sL4K [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL4J GHC.Types.[]]; } in
                        let {
                          sat_sL4I [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sL4k i1_sL4y] \u []
                                  GHC.Show.showsPrec $dShow8_sL4k GHC.Show.$fShow(,)1 i1_sL4y; } in
                        let {
                          sat_sL4L [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL4I sat_sL4K]; } in
                        let {
                          sat_sL4H [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sL4j h1_sL4x] \u []
                                  GHC.Show.showsPrec $dShow7_sL4j GHC.Show.$fShow(,)1 h1_sL4x; } in
                        let {
                          sat_sL4M [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL4H sat_sL4L]; } in
                        let {
                          sat_sL4G [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sL4i g1_sL4w] \u []
                                  GHC.Show.showsPrec $dShow6_sL4i GHC.Show.$fShow(,)1 g1_sL4w; } in
                        let {
                          sat_sL4N [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL4G sat_sL4M]; } in
                        let {
                          sat_sL4F [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sL4h f13_sL4v] \u []
                                  GHC.Show.showsPrec $dShow5_sL4h GHC.Show.$fShow(,)1 f13_sL4v; } in
                        let {
                          sat_sL4O [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL4F sat_sL4N]; } in
                        let {
                          sat_sL4E [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sL4g e1_sL4u] \u []
                                  GHC.Show.showsPrec $dShow4_sL4g GHC.Show.$fShow(,)1 e1_sL4u; } in
                        let {
                          sat_sL4P [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL4E sat_sL4O]; } in
                        let {
                          sat_sL4D [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sL4f d1_sL4t] \u []
                                  GHC.Show.showsPrec $dShow3_sL4f GHC.Show.$fShow(,)1 d1_sL4t; } in
                        let {
                          sat_sL4Q [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL4D sat_sL4P]; } in
                        let {
                          sat_sL4C [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sL4e c1_sL4s] \u []
                                  GHC.Show.showsPrec $dShow2_sL4e GHC.Show.$fShow(,)1 c1_sL4s; } in
                        let {
                          sat_sL4R [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL4C sat_sL4Q]; } in
                        let {
                          sat_sL4B [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sL4d b1_sL4r] \u []
                                  GHC.Show.showsPrec $dShow1_sL4d GHC.Show.$fShow(,)1 b1_sL4r; } in
                        let {
                          sat_sL4S [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL4B sat_sL4R]; } in
                        let {
                          sat_sL4A [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sL4c a1_sL4q] \u []
                                  GHC.Show.showsPrec $dShow_sL4c GHC.Show.$fShow(,)1 a1_sL4q; } in
                        let {
                          sat_sL4T [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sL4A sat_sL4S];
                        } in  GHC.Show.$fShow(,,,,,,,,,)_go2 sat_sL4T sat_sL4U;
              } in  : [GHC.Show.$fShow(,)4 sat_sL4V];
        };

GHC.Show.$fShow(,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j) =>
     (a, b, c, d, e, f, g, h, i, j) -> GHC.Base.String
[GblId,
 Arity=11,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL4W
           $dShow1_sL4X
           $dShow2_sL4Y
           $dShow3_sL4Z
           $dShow4_sL50
           $dShow5_sL51
           $dShow6_sL52
           $dShow7_sL53
           $dShow8_sL54
           $dShow9_sL55
           x_sL56]
        GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
            $dShow_sL4W
            $dShow1_sL4X
            $dShow2_sL4Y
            $dShow3_sL4Z
            $dShow4_sL50
            $dShow5_sL51
            $dShow6_sL52
            $dShow7_sL53
            $dShow8_sL54
            $dShow9_sL55
            GHC.Show.$fShow(,)1
            x_sL56
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j) =>
     [(a, b, c, d, e, f, g, h, i, j)] -> GHC.Show.ShowS
[GblId,
 Arity=12,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sL57
           $dShow1_sL58
           $dShow2_sL59
           $dShow3_sL5a
           $dShow4_sL5b
           $dShow5_sL5c
           $dShow6_sL5d
           $dShow7_sL5e
           $dShow8_sL5f
           $dShow9_sL5g
           ls_sL5h
           s_sL5i]
        let {
          sat_sL5j [Occ=Once]
            :: (a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
                h_azDP, i_azDQ, j_azDR)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL57
               $dShow1_sL58
               $dShow2_sL59
               $dShow3_sL5a
               $dShow4_sL5b
               $dShow5_sL5c
               $dShow6_sL5d
               $dShow7_sL5e
               $dShow8_sL5f
               $dShow9_sL5g] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
                      $dShow_sL57
                      $dShow1_sL58
                      $dShow2_sL59
                      $dShow3_sL5a
                      $dShow4_sL5b
                      $dShow5_sL5c
                      $dShow6_sL5d
                      $dShow7_sL5e
                      $dShow8_sL5f
                      $dShow9_sL5g
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sL5j ls_sL5h s_sL5i;

GHC.Show.$fShow(,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j)
[GblId[DFunId],
 Arity=10,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sL5k
           $dShow1_sL5l
           $dShow2_sL5m
           $dShow3_sL5n
           $dShow4_sL5o
           $dShow5_sL5p
           $dShow6_sL5q
           $dShow7_sL5r
           $dShow8_sL5s
           $dShow9_sL5t]
        let {
          sat_sL5w [Occ=Once]
            :: [(a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
                 h_azDP, i_azDQ, j_azDR)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL5k
               $dShow1_sL5l
               $dShow2_sL5m
               $dShow3_sL5n
               $dShow4_sL5o
               $dShow5_sL5p
               $dShow6_sL5q
               $dShow7_sL5r
               $dShow8_sL5s
               $dShow9_sL5t] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,)_$cshowList
                      $dShow_sL5k
                      $dShow1_sL5l
                      $dShow2_sL5m
                      $dShow3_sL5n
                      $dShow4_sL5o
                      $dShow5_sL5p
                      $dShow6_sL5q
                      $dShow7_sL5r
                      $dShow8_sL5s
                      $dShow9_sL5t
                      eta_B2
                      eta_B1; } in
        let {
          sat_sL5v [Occ=Once]
            :: (a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
                h_azDP, i_azDQ, j_azDR)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sL5k
               $dShow1_sL5l
               $dShow2_sL5m
               $dShow3_sL5n
               $dShow4_sL5o
               $dShow5_sL5p
               $dShow6_sL5q
               $dShow7_sL5r
               $dShow8_sL5s
               $dShow9_sL5t] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,)_$cshow
                      $dShow_sL5k
                      $dShow1_sL5l
                      $dShow2_sL5m
                      $dShow3_sL5n
                      $dShow4_sL5o
                      $dShow5_sL5p
                      $dShow6_sL5q
                      $dShow7_sL5r
                      $dShow8_sL5s
                      $dShow9_sL5t
                      eta_B1; } in
        let {
          sat_sL5u [Occ=Once]
            :: GHC.Types.Int
               -> (a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
                   h_azDP, i_azDQ, j_azDR)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL5k
               $dShow1_sL5l
               $dShow2_sL5m
               $dShow3_sL5n
               $dShow4_sL5o
               $dShow5_sL5p
               $dShow6_sL5q
               $dShow7_sL5r
               $dShow8_sL5s
               $dShow9_sL5t] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
                      $dShow_sL5k
                      $dShow1_sL5l
                      $dShow2_sL5m
                      $dShow3_sL5n
                      $dShow4_sL5o
                      $dShow5_sL5p
                      $dShow6_sL5q
                      $dShow7_sL5r
                      $dShow8_sL5s
                      $dShow9_sL5t
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sL5u sat_sL5v sat_sL5w];

GHC.Show.$fShow(,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sL5x eta_sL5y]
        case ds_sL5x of {
          [] -> lvl11_rC0o;
          : x_sL5B [Occ=Once*!] ds1_sL5C [Occ=Once!] ->
              case ds1_sL5C of wild1_sL5D {
                [] -> x_sL5B eta_sL5y;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sL5G [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sL5y wild1_sL5D] \u []
                              GHC.Show.$fShow(,,,,,,,,)_go2 wild1_sL5D eta_sL5y; } in
                    let {
                      sat_sL5H [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sL5G];
                    } in  x_sL5B sat_sL5H;
              };
        };

GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i) =>
     GHC.Types.Int -> (a, b, c, d, e, f, g, h, i) -> GHC.Show.ShowS
[GblId,
 Arity=12,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL5I
           $dShow1_sL5J
           $dShow2_sL5K
           $dShow3_sL5L
           $dShow4_sL5M
           $dShow5_sL5N
           $dShow6_sL5O
           $dShow7_sL5P
           $dShow8_sL5Q
           ds_sL5R
           ds1_sL5S
           s_sL5T]
        case ds1_sL5S of {
          (,,,,,,,,) a1_sL5V [Occ=Once]
                     b1_sL5W [Occ=Once]
                     c1_sL5X [Occ=Once]
                     d1_sL5Y [Occ=Once]
                     e1_sL5Z [Occ=Once]
                     f13_sL60 [Occ=Once]
                     g1_sL61 [Occ=Once]
                     h1_sL62 [Occ=Once]
                     i1_sL63 [Occ=Once] ->
              let {
                sat_sL6n [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sL5I
                     $dShow1_sL5J
                     $dShow2_sL5K
                     $dShow3_sL5L
                     $dShow4_sL5M
                     $dShow5_sL5N
                     $dShow6_sL5O
                     $dShow7_sL5P
                     $dShow8_sL5Q
                     s_sL5T
                     a1_sL5V
                     b1_sL5W
                     c1_sL5X
                     d1_sL5Y
                     e1_sL5Z
                     f13_sL60
                     g1_sL61
                     h1_sL62
                     i1_sL63] \u []
                        let {
                          sat_sL6m [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sL5T]; } in
                        let {
                          sat_sL6c [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sL5Q i1_sL63] \u []
                                  GHC.Show.showsPrec $dShow8_sL5Q GHC.Show.$fShow(,)1 i1_sL63; } in
                        let {
                          sat_sL6d [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL6c GHC.Types.[]]; } in
                        let {
                          sat_sL6b [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sL5P h1_sL62] \u []
                                  GHC.Show.showsPrec $dShow7_sL5P GHC.Show.$fShow(,)1 h1_sL62; } in
                        let {
                          sat_sL6e [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL6b sat_sL6d]; } in
                        let {
                          sat_sL6a [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sL5O g1_sL61] \u []
                                  GHC.Show.showsPrec $dShow6_sL5O GHC.Show.$fShow(,)1 g1_sL61; } in
                        let {
                          sat_sL6f [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL6a sat_sL6e]; } in
                        let {
                          sat_sL69 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sL5N f13_sL60] \u []
                                  GHC.Show.showsPrec $dShow5_sL5N GHC.Show.$fShow(,)1 f13_sL60; } in
                        let {
                          sat_sL6g [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL69 sat_sL6f]; } in
                        let {
                          sat_sL68 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sL5M e1_sL5Z] \u []
                                  GHC.Show.showsPrec $dShow4_sL5M GHC.Show.$fShow(,)1 e1_sL5Z; } in
                        let {
                          sat_sL6h [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL68 sat_sL6g]; } in
                        let {
                          sat_sL67 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sL5L d1_sL5Y] \u []
                                  GHC.Show.showsPrec $dShow3_sL5L GHC.Show.$fShow(,)1 d1_sL5Y; } in
                        let {
                          sat_sL6i [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL67 sat_sL6h]; } in
                        let {
                          sat_sL66 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sL5K c1_sL5X] \u []
                                  GHC.Show.showsPrec $dShow2_sL5K GHC.Show.$fShow(,)1 c1_sL5X; } in
                        let {
                          sat_sL6j [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL66 sat_sL6i]; } in
                        let {
                          sat_sL65 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sL5J b1_sL5W] \u []
                                  GHC.Show.showsPrec $dShow1_sL5J GHC.Show.$fShow(,)1 b1_sL5W; } in
                        let {
                          sat_sL6k [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL65 sat_sL6j]; } in
                        let {
                          sat_sL64 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sL5I a1_sL5V] \u []
                                  GHC.Show.showsPrec $dShow_sL5I GHC.Show.$fShow(,)1 a1_sL5V; } in
                        let {
                          sat_sL6l [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sL64 sat_sL6k];
                        } in  GHC.Show.$fShow(,,,,,,,,)_go2 sat_sL6l sat_sL6m;
              } in  : [GHC.Show.$fShow(,)4 sat_sL6n];
        };

GHC.Show.$fShow(,,,,,,,,)_$cshow
  :: forall a b c d e f g h i.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i) =>
     (a, b, c, d, e, f, g, h, i) -> GHC.Base.String
[GblId,
 Arity=10,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL6o
           $dShow1_sL6p
           $dShow2_sL6q
           $dShow3_sL6r
           $dShow4_sL6s
           $dShow5_sL6t
           $dShow6_sL6u
           $dShow7_sL6v
           $dShow8_sL6w
           x_sL6x]
        GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
            $dShow_sL6o
            $dShow1_sL6p
            $dShow2_sL6q
            $dShow3_sL6r
            $dShow4_sL6s
            $dShow5_sL6t
            $dShow6_sL6u
            $dShow7_sL6v
            $dShow8_sL6w
            GHC.Show.$fShow(,)1
            x_sL6x
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i) =>
     [(a, b, c, d, e, f, g, h, i)] -> GHC.Show.ShowS
[GblId,
 Arity=11,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sL6y
           $dShow1_sL6z
           $dShow2_sL6A
           $dShow3_sL6B
           $dShow4_sL6C
           $dShow5_sL6D
           $dShow6_sL6E
           $dShow7_sL6F
           $dShow8_sL6G
           ls_sL6H
           s_sL6I]
        let {
          sat_sL6J [Occ=Once]
            :: (a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
                h_azEJ, i_azEK)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL6y
               $dShow1_sL6z
               $dShow2_sL6A
               $dShow3_sL6B
               $dShow4_sL6C
               $dShow5_sL6D
               $dShow6_sL6E
               $dShow7_sL6F
               $dShow8_sL6G] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
                      $dShow_sL6y
                      $dShow1_sL6z
                      $dShow2_sL6A
                      $dShow3_sL6B
                      $dShow4_sL6C
                      $dShow5_sL6D
                      $dShow6_sL6E
                      $dShow7_sL6F
                      $dShow8_sL6G
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sL6J ls_sL6H s_sL6I;

GHC.Show.$fShow(,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i)
[GblId[DFunId],
 Arity=9,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sL6K
           $dShow1_sL6L
           $dShow2_sL6M
           $dShow3_sL6N
           $dShow4_sL6O
           $dShow5_sL6P
           $dShow6_sL6Q
           $dShow7_sL6R
           $dShow8_sL6S]
        let {
          sat_sL6V [Occ=Once]
            :: [(a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
                 h_azEJ, i_azEK)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL6K
               $dShow1_sL6L
               $dShow2_sL6M
               $dShow3_sL6N
               $dShow4_sL6O
               $dShow5_sL6P
               $dShow6_sL6Q
               $dShow7_sL6R
               $dShow8_sL6S] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,)_$cshowList
                      $dShow_sL6K
                      $dShow1_sL6L
                      $dShow2_sL6M
                      $dShow3_sL6N
                      $dShow4_sL6O
                      $dShow5_sL6P
                      $dShow6_sL6Q
                      $dShow7_sL6R
                      $dShow8_sL6S
                      eta_B2
                      eta_B1; } in
        let {
          sat_sL6U [Occ=Once]
            :: (a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
                h_azEJ, i_azEK)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sL6K
               $dShow1_sL6L
               $dShow2_sL6M
               $dShow3_sL6N
               $dShow4_sL6O
               $dShow5_sL6P
               $dShow6_sL6Q
               $dShow7_sL6R
               $dShow8_sL6S] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,)_$cshow
                      $dShow_sL6K
                      $dShow1_sL6L
                      $dShow2_sL6M
                      $dShow3_sL6N
                      $dShow4_sL6O
                      $dShow5_sL6P
                      $dShow6_sL6Q
                      $dShow7_sL6R
                      $dShow8_sL6S
                      eta_B1; } in
        let {
          sat_sL6T [Occ=Once]
            :: GHC.Types.Int
               -> (a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
                   h_azEJ, i_azEK)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL6K
               $dShow1_sL6L
               $dShow2_sL6M
               $dShow3_sL6N
               $dShow4_sL6O
               $dShow5_sL6P
               $dShow6_sL6Q
               $dShow7_sL6R
               $dShow8_sL6S] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
                      $dShow_sL6K
                      $dShow1_sL6L
                      $dShow2_sL6M
                      $dShow3_sL6N
                      $dShow4_sL6O
                      $dShow5_sL6P
                      $dShow6_sL6Q
                      $dShow7_sL6R
                      $dShow8_sL6S
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sL6T sat_sL6U sat_sL6V];

GHC.Show.$fShow(,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sL6W eta_sL6X]
        case ds_sL6W of {
          [] -> lvl11_rC0o;
          : x_sL70 [Occ=Once*!] ds1_sL71 [Occ=Once!] ->
              case ds1_sL71 of wild1_sL72 {
                [] -> x_sL70 eta_sL6X;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sL75 [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sL6X wild1_sL72] \u []
                              GHC.Show.$fShow(,,,,,,,)_go2 wild1_sL72 eta_sL6X; } in
                    let {
                      sat_sL76 [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sL75];
                    } in  x_sL70 sat_sL76;
              };
        };

GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h) =>
     GHC.Types.Int -> (a, b, c, d, e, f, g, h) -> GHC.Show.ShowS
[GblId,
 Arity=11,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL77
           $dShow1_sL78
           $dShow2_sL79
           $dShow3_sL7a
           $dShow4_sL7b
           $dShow5_sL7c
           $dShow6_sL7d
           $dShow7_sL7e
           ds_sL7f
           ds1_sL7g
           s_sL7h]
        case ds1_sL7g of {
          (,,,,,,,) a1_sL7j [Occ=Once]
                    b1_sL7k [Occ=Once]
                    c1_sL7l [Occ=Once]
                    d1_sL7m [Occ=Once]
                    e1_sL7n [Occ=Once]
                    f13_sL7o [Occ=Once]
                    g1_sL7p [Occ=Once]
                    h1_sL7q [Occ=Once] ->
              let {
                sat_sL7I [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sL77
                     $dShow1_sL78
                     $dShow2_sL79
                     $dShow3_sL7a
                     $dShow4_sL7b
                     $dShow5_sL7c
                     $dShow6_sL7d
                     $dShow7_sL7e
                     s_sL7h
                     a1_sL7j
                     b1_sL7k
                     c1_sL7l
                     d1_sL7m
                     e1_sL7n
                     f13_sL7o
                     g1_sL7p
                     h1_sL7q] \u []
                        let {
                          sat_sL7H [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sL7h]; } in
                        let {
                          sat_sL7y [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sL7e h1_sL7q] \u []
                                  GHC.Show.showsPrec $dShow7_sL7e GHC.Show.$fShow(,)1 h1_sL7q; } in
                        let {
                          sat_sL7z [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL7y GHC.Types.[]]; } in
                        let {
                          sat_sL7x [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sL7d g1_sL7p] \u []
                                  GHC.Show.showsPrec $dShow6_sL7d GHC.Show.$fShow(,)1 g1_sL7p; } in
                        let {
                          sat_sL7A [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL7x sat_sL7z]; } in
                        let {
                          sat_sL7w [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sL7c f13_sL7o] \u []
                                  GHC.Show.showsPrec $dShow5_sL7c GHC.Show.$fShow(,)1 f13_sL7o; } in
                        let {
                          sat_sL7B [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL7w sat_sL7A]; } in
                        let {
                          sat_sL7v [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sL7b e1_sL7n] \u []
                                  GHC.Show.showsPrec $dShow4_sL7b GHC.Show.$fShow(,)1 e1_sL7n; } in
                        let {
                          sat_sL7C [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL7v sat_sL7B]; } in
                        let {
                          sat_sL7u [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sL7a d1_sL7m] \u []
                                  GHC.Show.showsPrec $dShow3_sL7a GHC.Show.$fShow(,)1 d1_sL7m; } in
                        let {
                          sat_sL7D [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL7u sat_sL7C]; } in
                        let {
                          sat_sL7t [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sL79 c1_sL7l] \u []
                                  GHC.Show.showsPrec $dShow2_sL79 GHC.Show.$fShow(,)1 c1_sL7l; } in
                        let {
                          sat_sL7E [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL7t sat_sL7D]; } in
                        let {
                          sat_sL7s [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sL78 b1_sL7k] \u []
                                  GHC.Show.showsPrec $dShow1_sL78 GHC.Show.$fShow(,)1 b1_sL7k; } in
                        let {
                          sat_sL7F [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL7s sat_sL7E]; } in
                        let {
                          sat_sL7r [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sL77 a1_sL7j] \u []
                                  GHC.Show.showsPrec $dShow_sL77 GHC.Show.$fShow(,)1 a1_sL7j; } in
                        let {
                          sat_sL7G [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sL7r sat_sL7F];
                        } in  GHC.Show.$fShow(,,,,,,,)_go2 sat_sL7G sat_sL7H;
              } in  : [GHC.Show.$fShow(,)4 sat_sL7I];
        };

GHC.Show.$fShow(,,,,,,,)_$cshow
  :: forall a b c d e f g h.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h) =>
     (a, b, c, d, e, f, g, h) -> GHC.Base.String
[GblId,
 Arity=9,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL7J
           $dShow1_sL7K
           $dShow2_sL7L
           $dShow3_sL7M
           $dShow4_sL7N
           $dShow5_sL7O
           $dShow6_sL7P
           $dShow7_sL7Q
           x_sL7R]
        GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
            $dShow_sL7J
            $dShow1_sL7K
            $dShow2_sL7L
            $dShow3_sL7M
            $dShow4_sL7N
            $dShow5_sL7O
            $dShow6_sL7P
            $dShow7_sL7Q
            GHC.Show.$fShow(,)1
            x_sL7R
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,)_$cshowList
  :: forall a b c d e f g h.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h) =>
     [(a, b, c, d, e, f, g, h)] -> GHC.Show.ShowS
[GblId,
 Arity=10,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sL7S
           $dShow1_sL7T
           $dShow2_sL7U
           $dShow3_sL7V
           $dShow4_sL7W
           $dShow5_sL7X
           $dShow6_sL7Y
           $dShow7_sL7Z
           ls_sL80
           s_sL81]
        let {
          sat_sL82 [Occ=Once]
            :: (a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
                h_azFz)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL7S
               $dShow1_sL7T
               $dShow2_sL7U
               $dShow3_sL7V
               $dShow4_sL7W
               $dShow5_sL7X
               $dShow6_sL7Y
               $dShow7_sL7Z] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
                      $dShow_sL7S
                      $dShow1_sL7T
                      $dShow2_sL7U
                      $dShow3_sL7V
                      $dShow4_sL7W
                      $dShow5_sL7X
                      $dShow6_sL7Y
                      $dShow7_sL7Z
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sL82 ls_sL80 s_sL81;

GHC.Show.$fShow(,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h)
[GblId[DFunId],
 Arity=8,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sL83
           $dShow1_sL84
           $dShow2_sL85
           $dShow3_sL86
           $dShow4_sL87
           $dShow5_sL88
           $dShow6_sL89
           $dShow7_sL8a]
        let {
          sat_sL8d [Occ=Once]
            :: [(a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
                 h_azFz)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL83
               $dShow1_sL84
               $dShow2_sL85
               $dShow3_sL86
               $dShow4_sL87
               $dShow5_sL88
               $dShow6_sL89
               $dShow7_sL8a] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,)_$cshowList
                      $dShow_sL83
                      $dShow1_sL84
                      $dShow2_sL85
                      $dShow3_sL86
                      $dShow4_sL87
                      $dShow5_sL88
                      $dShow6_sL89
                      $dShow7_sL8a
                      eta_B2
                      eta_B1; } in
        let {
          sat_sL8c [Occ=Once]
            :: (a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
                h_azFz)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sL83
               $dShow1_sL84
               $dShow2_sL85
               $dShow3_sL86
               $dShow4_sL87
               $dShow5_sL88
               $dShow6_sL89
               $dShow7_sL8a] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,)_$cshow
                      $dShow_sL83
                      $dShow1_sL84
                      $dShow2_sL85
                      $dShow3_sL86
                      $dShow4_sL87
                      $dShow5_sL88
                      $dShow6_sL89
                      $dShow7_sL8a
                      eta_B1; } in
        let {
          sat_sL8b [Occ=Once]
            :: GHC.Types.Int
               -> (a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
                   h_azFz)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL83
               $dShow1_sL84
               $dShow2_sL85
               $dShow3_sL86
               $dShow4_sL87
               $dShow5_sL88
               $dShow6_sL89
               $dShow7_sL8a] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
                      $dShow_sL83
                      $dShow1_sL84
                      $dShow2_sL85
                      $dShow3_sL86
                      $dShow4_sL87
                      $dShow5_sL88
                      $dShow6_sL89
                      $dShow7_sL8a
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sL8b sat_sL8c sat_sL8d];

GHC.Show.$fShow(,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sL8e eta_sL8f]
        case ds_sL8e of {
          [] -> lvl11_rC0o;
          : x_sL8i [Occ=Once*!] ds1_sL8j [Occ=Once!] ->
              case ds1_sL8j of wild1_sL8k {
                [] -> x_sL8i eta_sL8f;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sL8n [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sL8f wild1_sL8k] \u []
                              GHC.Show.$fShow(,,,,,,)_go2 wild1_sL8k eta_sL8f; } in
                    let {
                      sat_sL8o [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sL8n];
                    } in  x_sL8i sat_sL8o;
              };
        };

GHC.Show.$fShow(,,,,,,)_$cshowsPrec
  :: forall a b c d e f g.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f,
      GHC.Show.Show g) =>
     GHC.Types.Int -> (a, b, c, d, e, f, g) -> GHC.Show.ShowS
[GblId,
 Arity=10,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL8p
           $dShow1_sL8q
           $dShow2_sL8r
           $dShow3_sL8s
           $dShow4_sL8t
           $dShow5_sL8u
           $dShow6_sL8v
           ds_sL8w
           ds1_sL8x
           s_sL8y]
        case ds1_sL8x of {
          (,,,,,,) a1_sL8A [Occ=Once]
                   b1_sL8B [Occ=Once]
                   c1_sL8C [Occ=Once]
                   d1_sL8D [Occ=Once]
                   e1_sL8E [Occ=Once]
                   f13_sL8F [Occ=Once]
                   g1_sL8G [Occ=Once] ->
              let {
                sat_sL8W [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sL8p
                     $dShow1_sL8q
                     $dShow2_sL8r
                     $dShow3_sL8s
                     $dShow4_sL8t
                     $dShow5_sL8u
                     $dShow6_sL8v
                     s_sL8y
                     a1_sL8A
                     b1_sL8B
                     c1_sL8C
                     d1_sL8D
                     e1_sL8E
                     f13_sL8F
                     g1_sL8G] \u []
                        let {
                          sat_sL8V [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sL8y]; } in
                        let {
                          sat_sL8N [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sL8v g1_sL8G] \u []
                                  GHC.Show.showsPrec $dShow6_sL8v GHC.Show.$fShow(,)1 g1_sL8G; } in
                        let {
                          sat_sL8O [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL8N GHC.Types.[]]; } in
                        let {
                          sat_sL8M [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sL8u f13_sL8F] \u []
                                  GHC.Show.showsPrec $dShow5_sL8u GHC.Show.$fShow(,)1 f13_sL8F; } in
                        let {
                          sat_sL8P [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL8M sat_sL8O]; } in
                        let {
                          sat_sL8L [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sL8t e1_sL8E] \u []
                                  GHC.Show.showsPrec $dShow4_sL8t GHC.Show.$fShow(,)1 e1_sL8E; } in
                        let {
                          sat_sL8Q [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL8L sat_sL8P]; } in
                        let {
                          sat_sL8K [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sL8s d1_sL8D] \u []
                                  GHC.Show.showsPrec $dShow3_sL8s GHC.Show.$fShow(,)1 d1_sL8D; } in
                        let {
                          sat_sL8R [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL8K sat_sL8Q]; } in
                        let {
                          sat_sL8J [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sL8r c1_sL8C] \u []
                                  GHC.Show.showsPrec $dShow2_sL8r GHC.Show.$fShow(,)1 c1_sL8C; } in
                        let {
                          sat_sL8S [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL8J sat_sL8R]; } in
                        let {
                          sat_sL8I [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sL8q b1_sL8B] \u []
                                  GHC.Show.showsPrec $dShow1_sL8q GHC.Show.$fShow(,)1 b1_sL8B; } in
                        let {
                          sat_sL8T [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL8I sat_sL8S]; } in
                        let {
                          sat_sL8H [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sL8p a1_sL8A] \u []
                                  GHC.Show.showsPrec $dShow_sL8p GHC.Show.$fShow(,)1 a1_sL8A; } in
                        let {
                          sat_sL8U [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sL8H sat_sL8T];
                        } in  GHC.Show.$fShow(,,,,,,)_go2 sat_sL8U sat_sL8V;
              } in  : [GHC.Show.$fShow(,)4 sat_sL8W];
        };

GHC.Show.$fShow(,,,,,,)_$cshow
  :: forall a b c d e f g.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f,
      GHC.Show.Show g) =>
     (a, b, c, d, e, f, g) -> GHC.Base.String
[GblId,
 Arity=8,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL8X
           $dShow1_sL8Y
           $dShow2_sL8Z
           $dShow3_sL90
           $dShow4_sL91
           $dShow5_sL92
           $dShow6_sL93
           x_sL94]
        GHC.Show.$fShow(,,,,,,)_$cshowsPrec
            $dShow_sL8X
            $dShow1_sL8Y
            $dShow2_sL8Z
            $dShow3_sL90
            $dShow4_sL91
            $dShow5_sL92
            $dShow6_sL93
            GHC.Show.$fShow(,)1
            x_sL94
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,)_$cshowList
  :: forall a b c d e f g.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f,
      GHC.Show.Show g) =>
     [(a, b, c, d, e, f, g)] -> GHC.Show.ShowS
[GblId,
 Arity=9,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sL95
           $dShow1_sL96
           $dShow2_sL97
           $dShow3_sL98
           $dShow4_sL99
           $dShow5_sL9a
           $dShow6_sL9b
           ls_sL9c
           s_sL9d]
        let {
          sat_sL9e [Occ=Once]
            :: (a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL95
               $dShow1_sL96
               $dShow2_sL97
               $dShow3_sL98
               $dShow4_sL99
               $dShow5_sL9a
               $dShow6_sL9b] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,)_$cshowsPrec
                      $dShow_sL95
                      $dShow1_sL96
                      $dShow2_sL97
                      $dShow3_sL98
                      $dShow4_sL99
                      $dShow5_sL9a
                      $dShow6_sL9b
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sL9e ls_sL9c s_sL9d;

GHC.Show.$fShow(,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f,
      GHC.Show.Show g) =>
     GHC.Show.Show (a, b, c, d, e, f, g)
[GblId[DFunId],
 Arity=7,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sL9f
           $dShow1_sL9g
           $dShow2_sL9h
           $dShow3_sL9i
           $dShow4_sL9j
           $dShow5_sL9k
           $dShow6_sL9l]
        let {
          sat_sL9o [Occ=Once]
            :: [(a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL9f
               $dShow1_sL9g
               $dShow2_sL9h
               $dShow3_sL9i
               $dShow4_sL9j
               $dShow5_sL9k
               $dShow6_sL9l] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,)_$cshowList
                      $dShow_sL9f
                      $dShow1_sL9g
                      $dShow2_sL9h
                      $dShow3_sL9i
                      $dShow4_sL9j
                      $dShow5_sL9k
                      $dShow6_sL9l
                      eta_B2
                      eta_B1; } in
        let {
          sat_sL9n [Occ=Once]
            :: (a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sL9f
               $dShow1_sL9g
               $dShow2_sL9h
               $dShow3_sL9i
               $dShow4_sL9j
               $dShow5_sL9k
               $dShow6_sL9l] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,)_$cshow
                      $dShow_sL9f
                      $dShow1_sL9g
                      $dShow2_sL9h
                      $dShow3_sL9i
                      $dShow4_sL9j
                      $dShow5_sL9k
                      $dShow6_sL9l
                      eta_B1; } in
        let {
          sat_sL9m [Occ=Once]
            :: GHC.Types.Int
               -> (a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL9f
               $dShow1_sL9g
               $dShow2_sL9h
               $dShow3_sL9i
               $dShow4_sL9j
               $dShow5_sL9k
               $dShow6_sL9l] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,)_$cshowsPrec
                      $dShow_sL9f
                      $dShow1_sL9g
                      $dShow2_sL9h
                      $dShow3_sL9i
                      $dShow4_sL9j
                      $dShow5_sL9k
                      $dShow6_sL9l
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sL9m sat_sL9n sat_sL9o];

GHC.Show.$fShow(,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sL9p eta_sL9q]
        case ds_sL9p of {
          [] -> lvl11_rC0o;
          : x_sL9t [Occ=Once*!] ds1_sL9u [Occ=Once!] ->
              case ds1_sL9u of wild1_sL9v {
                [] -> x_sL9t eta_sL9q;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sL9y [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sL9q wild1_sL9v] \u []
                              GHC.Show.$fShow(,,,,,)_go2 wild1_sL9v eta_sL9q; } in
                    let {
                      sat_sL9z [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sL9y];
                    } in  x_sL9t sat_sL9z;
              };
        };

GHC.Show.$fShow(,,,,,)_$cshowsPrec
  :: forall a b c d e f.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f) =>
     GHC.Types.Int -> (a, b, c, d, e, f) -> GHC.Show.ShowS
[GblId,
 Arity=9,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL9A
           $dShow1_sL9B
           $dShow2_sL9C
           $dShow3_sL9D
           $dShow4_sL9E
           $dShow5_sL9F
           ds_sL9G
           ds1_sL9H
           s_sL9I]
        case ds1_sL9H of {
          (,,,,,) a1_sL9K [Occ=Once]
                  b1_sL9L [Occ=Once]
                  c1_sL9M [Occ=Once]
                  d1_sL9N [Occ=Once]
                  e1_sL9O [Occ=Once]
                  f13_sL9P [Occ=Once] ->
              let {
                sat_sLa3 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sL9A
                     $dShow1_sL9B
                     $dShow2_sL9C
                     $dShow3_sL9D
                     $dShow4_sL9E
                     $dShow5_sL9F
                     s_sL9I
                     a1_sL9K
                     b1_sL9L
                     c1_sL9M
                     d1_sL9N
                     e1_sL9O
                     f13_sL9P] \u []
                        let {
                          sat_sLa2 [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sL9I]; } in
                        let {
                          sat_sL9V [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sL9F f13_sL9P] \u []
                                  GHC.Show.showsPrec $dShow5_sL9F GHC.Show.$fShow(,)1 f13_sL9P; } in
                        let {
                          sat_sL9W [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL9V GHC.Types.[]]; } in
                        let {
                          sat_sL9U [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sL9E e1_sL9O] \u []
                                  GHC.Show.showsPrec $dShow4_sL9E GHC.Show.$fShow(,)1 e1_sL9O; } in
                        let {
                          sat_sL9X [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL9U sat_sL9W]; } in
                        let {
                          sat_sL9T [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sL9D d1_sL9N] \u []
                                  GHC.Show.showsPrec $dShow3_sL9D GHC.Show.$fShow(,)1 d1_sL9N; } in
                        let {
                          sat_sL9Y [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL9T sat_sL9X]; } in
                        let {
                          sat_sL9S [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sL9C c1_sL9M] \u []
                                  GHC.Show.showsPrec $dShow2_sL9C GHC.Show.$fShow(,)1 c1_sL9M; } in
                        let {
                          sat_sL9Z [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL9S sat_sL9Y]; } in
                        let {
                          sat_sL9R [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sL9B b1_sL9L] \u []
                                  GHC.Show.showsPrec $dShow1_sL9B GHC.Show.$fShow(,)1 b1_sL9L; } in
                        let {
                          sat_sLa0 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL9R sat_sL9Z]; } in
                        let {
                          sat_sL9Q [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sL9A a1_sL9K] \u []
                                  GHC.Show.showsPrec $dShow_sL9A GHC.Show.$fShow(,)1 a1_sL9K; } in
                        let {
                          sat_sLa1 [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sL9Q sat_sLa0];
                        } in  GHC.Show.$fShow(,,,,,)_go2 sat_sLa1 sat_sLa2;
              } in  : [GHC.Show.$fShow(,)4 sat_sLa3];
        };

GHC.Show.$fShow(,,,,,)_$cshow
  :: forall a b c d e f.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f) =>
     (a, b, c, d, e, f) -> GHC.Base.String
[GblId,
 Arity=7,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sLa4
           $dShow1_sLa5
           $dShow2_sLa6
           $dShow3_sLa7
           $dShow4_sLa8
           $dShow5_sLa9
           x_sLaa]
        GHC.Show.$fShow(,,,,,)_$cshowsPrec
            $dShow_sLa4
            $dShow1_sLa5
            $dShow2_sLa6
            $dShow3_sLa7
            $dShow4_sLa8
            $dShow5_sLa9
            GHC.Show.$fShow(,)1
            x_sLaa
            GHC.Types.[];

GHC.Show.$fShow(,,,,,)_$cshowList
  :: forall a b c d e f.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f) =>
     [(a, b, c, d, e, f)] -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sLab
           $dShow1_sLac
           $dShow2_sLad
           $dShow3_sLae
           $dShow4_sLaf
           $dShow5_sLag
           ls_sLah
           s_sLai]
        let {
          sat_sLaj [Occ=Once]
            :: (a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLab
               $dShow1_sLac
               $dShow2_sLad
               $dShow3_sLae
               $dShow4_sLaf
               $dShow5_sLag] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,)_$cshowsPrec
                      $dShow_sLab
                      $dShow1_sLac
                      $dShow2_sLad
                      $dShow3_sLae
                      $dShow4_sLaf
                      $dShow5_sLag
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sLaj ls_sLah s_sLai;

GHC.Show.$fShow(,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f) =>
     GHC.Show.Show (a, b, c, d, e, f)
[GblId[DFunId],
 Arity=6,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sLak
           $dShow1_sLal
           $dShow2_sLam
           $dShow3_sLan
           $dShow4_sLao
           $dShow5_sLap]
        let {
          sat_sLas [Occ=Once]
            :: [(a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLak
               $dShow1_sLal
               $dShow2_sLam
               $dShow3_sLan
               $dShow4_sLao
               $dShow5_sLap] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,)_$cshowList
                      $dShow_sLak
                      $dShow1_sLal
                      $dShow2_sLam
                      $dShow3_sLan
                      $dShow4_sLao
                      $dShow5_sLap
                      eta_B2
                      eta_B1; } in
        let {
          sat_sLar [Occ=Once]
            :: (a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sLak
               $dShow1_sLal
               $dShow2_sLam
               $dShow3_sLan
               $dShow4_sLao
               $dShow5_sLap] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,)_$cshow
                      $dShow_sLak
                      $dShow1_sLal
                      $dShow2_sLam
                      $dShow3_sLan
                      $dShow4_sLao
                      $dShow5_sLap
                      eta_B1; } in
        let {
          sat_sLaq [Occ=Once]
            :: GHC.Types.Int
               -> (a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLak
               $dShow1_sLal
               $dShow2_sLam
               $dShow3_sLan
               $dShow4_sLao
               $dShow5_sLap] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,)_$cshowsPrec
                      $dShow_sLak
                      $dShow1_sLal
                      $dShow2_sLam
                      $dShow3_sLan
                      $dShow4_sLao
                      $dShow5_sLap
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sLaq sat_sLar sat_sLas];

GHC.Show.$fShow(,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sLat eta_sLau]
        case ds_sLat of {
          [] -> lvl11_rC0o;
          : x_sLax [Occ=Once*!] ds1_sLay [Occ=Once!] ->
              case ds1_sLay of wild1_sLaz {
                [] -> x_sLax eta_sLau;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sLaC [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sLau wild1_sLaz] \u []
                              GHC.Show.$fShow(,,,,)_go2 wild1_sLaz eta_sLau; } in
                    let {
                      sat_sLaD [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sLaC];
                    } in  x_sLax sat_sLaD;
              };
        };

GHC.Show.$fShow(,,,,)_$cshowsPrec
  :: forall a b c d e.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e) =>
     GHC.Types.Int -> (a, b, c, d, e) -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sLaE
           $dShow1_sLaF
           $dShow2_sLaG
           $dShow3_sLaH
           $dShow4_sLaI
           ds_sLaJ
           ds1_sLaK
           s_sLaL]
        case ds1_sLaK of {
          (,,,,) a1_sLaN [Occ=Once]
                 b1_sLaO [Occ=Once]
                 c1_sLaP [Occ=Once]
                 d1_sLaQ [Occ=Once]
                 e1_sLaR [Occ=Once] ->
              let {
                sat_sLb3 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sLaE
                     $dShow1_sLaF
                     $dShow2_sLaG
                     $dShow3_sLaH
                     $dShow4_sLaI
                     s_sLaL
                     a1_sLaN
                     b1_sLaO
                     c1_sLaP
                     d1_sLaQ
                     e1_sLaR] \u []
                        let {
                          sat_sLb2 [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sLaL]; } in
                        let {
                          sat_sLaW [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sLaI e1_sLaR] \u []
                                  GHC.Show.showsPrec $dShow4_sLaI GHC.Show.$fShow(,)1 e1_sLaR; } in
                        let {
                          sat_sLaX [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sLaW GHC.Types.[]]; } in
                        let {
                          sat_sLaV [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sLaH d1_sLaQ] \u []
                                  GHC.Show.showsPrec $dShow3_sLaH GHC.Show.$fShow(,)1 d1_sLaQ; } in
                        let {
                          sat_sLaY [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sLaV sat_sLaX]; } in
                        let {
                          sat_sLaU [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sLaG c1_sLaP] \u []
                                  GHC.Show.showsPrec $dShow2_sLaG GHC.Show.$fShow(,)1 c1_sLaP; } in
                        let {
                          sat_sLaZ [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sLaU sat_sLaY]; } in
                        let {
                          sat_sLaT [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sLaF b1_sLaO] \u []
                                  GHC.Show.showsPrec $dShow1_sLaF GHC.Show.$fShow(,)1 b1_sLaO; } in
                        let {
                          sat_sLb0 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sLaT sat_sLaZ]; } in
                        let {
                          sat_sLaS [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sLaE a1_sLaN] \u []
                                  GHC.Show.showsPrec $dShow_sLaE GHC.Show.$fShow(,)1 a1_sLaN; } in
                        let {
                          sat_sLb1 [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sLaS sat_sLb0];
                        } in  GHC.Show.$fShow(,,,,)_go2 sat_sLb1 sat_sLb2;
              } in  : [GHC.Show.$fShow(,)4 sat_sLb3];
        };

GHC.Show.$fShow(,,,,)_$cshow
  :: forall a b c d e.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e) =>
     (a, b, c, d, e) -> GHC.Base.String
[GblId,
 Arity=6,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sLb4
           $dShow1_sLb5
           $dShow2_sLb6
           $dShow3_sLb7
           $dShow4_sLb8
           x_sLb9]
        GHC.Show.$fShow(,,,,)_$cshowsPrec
            $dShow_sLb4
            $dShow1_sLb5
            $dShow2_sLb6
            $dShow3_sLb7
            $dShow4_sLb8
            GHC.Show.$fShow(,)1
            x_sLb9
            GHC.Types.[];

GHC.Show.$fShow(,,,,)_$cshowList
  :: forall a b c d e.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e) =>
     [(a, b, c, d, e)] -> GHC.Show.ShowS
[GblId,
 Arity=7,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sLba
           $dShow1_sLbb
           $dShow2_sLbc
           $dShow3_sLbd
           $dShow4_sLbe
           ls_sLbf
           s_sLbg]
        let {
          sat_sLbh [Occ=Once]
            :: (a_azHA, b_azHB, c_azHC, d_azHD, e_azHE) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLba
               $dShow1_sLbb
               $dShow2_sLbc
               $dShow3_sLbd
               $dShow4_sLbe] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,)_$cshowsPrec
                      $dShow_sLba
                      $dShow1_sLbb
                      $dShow2_sLbc
                      $dShow3_sLbd
                      $dShow4_sLbe
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sLbh ls_sLbf s_sLbg;

GHC.Show.$fShow(,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e) =>
     GHC.Show.Show (a, b, c, d, e)
[GblId[DFunId],
 Arity=5,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sLbi
           $dShow1_sLbj
           $dShow2_sLbk
           $dShow3_sLbl
           $dShow4_sLbm]
        let {
          sat_sLbp [Occ=Once]
            :: [(a_azHA, b_azHB, c_azHC, d_azHD, e_azHE)] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLbi
               $dShow1_sLbj
               $dShow2_sLbk
               $dShow3_sLbl
               $dShow4_sLbm] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,)_$cshowList
                      $dShow_sLbi
                      $dShow1_sLbj
                      $dShow2_sLbk
                      $dShow3_sLbl
                      $dShow4_sLbm
                      eta_B2
                      eta_B1; } in
        let {
          sat_sLbo [Occ=Once]
            :: (a_azHA, b_azHB, c_azHC, d_azHD, e_azHE) -> GHC.Base.String
          [LclId] =
              [$dShow_sLbi
               $dShow1_sLbj
               $dShow2_sLbk
               $dShow3_sLbl
               $dShow4_sLbm] \r [eta_B1]
                  GHC.Show.$fShow(,,,,)_$cshow
                      $dShow_sLbi
                      $dShow1_sLbj
                      $dShow2_sLbk
                      $dShow3_sLbl
                      $dShow4_sLbm
                      eta_B1; } in
        let {
          sat_sLbn [Occ=Once]
            :: GHC.Types.Int
               -> (a_azHA, b_azHB, c_azHC, d_azHD, e_azHE) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLbi
               $dShow1_sLbj
               $dShow2_sLbk
               $dShow3_sLbl
               $dShow4_sLbm] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,)_$cshowsPrec
                      $dShow_sLbi
                      $dShow1_sLbj
                      $dShow2_sLbk
                      $dShow3_sLbl
                      $dShow4_sLbm
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sLbn sat_sLbo sat_sLbp];

GHC.Show.$fShow(,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sLbq eta_sLbr]
        case ds_sLbq of {
          [] -> lvl11_rC0o;
          : x_sLbu [Occ=Once*!] ds1_sLbv [Occ=Once!] ->
              case ds1_sLbv of wild1_sLbw {
                [] -> x_sLbu eta_sLbr;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sLbz [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sLbr wild1_sLbw] \u []
                              GHC.Show.$fShow(,,,)_go2 wild1_sLbw eta_sLbr; } in
                    let {
                      sat_sLbA [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sLbz];
                    } in  x_sLbu sat_sLbA;
              };
        };

GHC.Show.$w$cshowsPrec2 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d) =>
     a
     -> b
     -> c
     -> d
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId,
 Arity=9,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sLbB
           w1_sLbC
           w2_sLbD
           w3_sLbE
           ww_sLbF
           ww1_sLbG
           ww2_sLbH
           ww3_sLbI
           w4_sLbJ]
        let {
          sat_sLbT [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [w_sLbB
               w1_sLbC
               w2_sLbD
               w3_sLbE
               ww_sLbF
               ww1_sLbG
               ww2_sLbH
               ww3_sLbI
               w4_sLbJ] \u []
                  let {
                    sat_sLbS [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [GHC.Show.$fShow(,)2 w4_sLbJ]; } in
                  let {
                    sat_sLbN [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w3_sLbE ww3_sLbI] \u []
                            GHC.Show.showsPrec w3_sLbE GHC.Show.$fShow(,)1 ww3_sLbI; } in
                  let {
                    sat_sLbO [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sLbN GHC.Types.[]]; } in
                  let {
                    sat_sLbM [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w2_sLbD ww2_sLbH] \u []
                            GHC.Show.showsPrec w2_sLbD GHC.Show.$fShow(,)1 ww2_sLbH; } in
                  let {
                    sat_sLbP [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sLbM sat_sLbO]; } in
                  let {
                    sat_sLbL [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w1_sLbC ww1_sLbG] \u []
                            GHC.Show.showsPrec w1_sLbC GHC.Show.$fShow(,)1 ww1_sLbG; } in
                  let {
                    sat_sLbQ [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sLbL sat_sLbP]; } in
                  let {
                    sat_sLbK [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w_sLbB ww_sLbF] \u []
                            GHC.Show.showsPrec w_sLbB GHC.Show.$fShow(,)1 ww_sLbF; } in
                  let {
                    sat_sLbR [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                    [LclId] =
                        CCCS :! [sat_sLbK sat_sLbQ];
                  } in  GHC.Show.$fShow(,,,)_go2 sat_sLbR sat_sLbS;
        } in  (#,#) [GHC.Show.$fShow(,)4 sat_sLbT];

GHC.Show.$fShow(,,,)_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d) =>
     GHC.Types.Int -> (a, b, c, d) -> GHC.Show.ShowS
[GblId,
 Arity=7,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sLbU w1_sLbV w2_sLbW w3_sLbX w4_sLbY w5_sLbZ w6_sLc0]
        case w5_sLbZ of {
          (,,,) ww1_sLc2 [Occ=Once]
                ww2_sLc3 [Occ=Once]
                ww3_sLc4 [Occ=Once]
                ww4_sLc5 [Occ=Once] ->
              case
                  GHC.Show.$w$cshowsPrec2
                      w_sLbU
                      w1_sLbV
                      w2_sLbW
                      w3_sLbX
                      ww1_sLc2
                      ww2_sLc3
                      ww3_sLc4
                      ww4_sLc5
                      w6_sLc0
              of
              { (#,#) ww6_sLc7 [Occ=Once] ww7_sLc8 [Occ=Once] ->
                    : [ww6_sLc7 ww7_sLc8];
              };
        };

GHC.Show.$fShow(,,,)_$cshow
  :: forall a b c d.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d) =>
     (a, b, c, d) -> GHC.Base.String
[GblId,
 Arity=5,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sLc9 $dShow1_sLca $dShow2_sLcb $dShow3_sLcc x_sLcd]
        case x_sLcd of {
          (,,,) ww1_sLcf [Occ=Once]
                ww2_sLcg [Occ=Once]
                ww3_sLch [Occ=Once]
                ww4_sLci [Occ=Once] ->
              case
                  GHC.Show.$w$cshowsPrec2
                      $dShow_sLc9
                      $dShow1_sLca
                      $dShow2_sLcb
                      $dShow3_sLcc
                      ww1_sLcf
                      ww2_sLcg
                      ww3_sLch
                      ww4_sLci
                      GHC.Types.[]
              of
              { (#,#) ww6_sLck [Occ=Once] ww7_sLcl [Occ=Once] ->
                    : [ww6_sLck ww7_sLcl];
              };
        };

GHC.Show.$fShow(,,,)_$cshowList
  :: forall a b c d.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d) =>
     [(a, b, c, d)] -> GHC.Show.ShowS
[GblId,
 Arity=6,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sLcm
           $dShow1_sLcn
           $dShow2_sLco
           $dShow3_sLcp
           ls_sLcq
           s_sLcr]
        let {
          sat_sLcC [Occ=Once]
            :: (a_azIa, b_azIb, c_azIc, d_azId) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLcm $dShow1_sLcn $dShow2_sLco $dShow3_sLcp] \r [w_sLcs
                                                                       w1_sLct]
                  case w_sLcs of {
                    (,,,) ww1_sLcv [Occ=Once]
                          ww2_sLcw [Occ=Once]
                          ww3_sLcx [Occ=Once]
                          ww4_sLcy [Occ=Once] ->
                        case
                            GHC.Show.$w$cshowsPrec2
                                $dShow_sLcm
                                $dShow1_sLcn
                                $dShow2_sLco
                                $dShow3_sLcp
                                ww1_sLcv
                                ww2_sLcw
                                ww3_sLcx
                                ww4_sLcy
                                w1_sLct
                        of
                        { (#,#) ww6_sLcA [Occ=Once] ww7_sLcB [Occ=Once] ->
                              : [ww6_sLcA ww7_sLcB];
                        };
                  };
        } in  GHC.Show.showList__ sat_sLcC ls_sLcq s_sLcr;

GHC.Show.$fShow(,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d) =>
     GHC.Show.Show (a, b, c, d)
[GblId[DFunId],
 Arity=4,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sLcD $dShow1_sLcE $dShow2_sLcF $dShow3_sLcG]
        let {
          sat_sLcJ [Occ=Once]
            :: [(a_azIa, b_azIb, c_azIc, d_azId)] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLcD $dShow1_sLcE $dShow2_sLcF $dShow3_sLcG] \r [eta_B2
                                                                       eta_B1]
                  GHC.Show.$fShow(,,,)_$cshowList
                      $dShow_sLcD
                      $dShow1_sLcE
                      $dShow2_sLcF
                      $dShow3_sLcG
                      eta_B2
                      eta_B1; } in
        let {
          sat_sLcI [Occ=Once]
            :: (a_azIa, b_azIb, c_azIc, d_azId) -> GHC.Base.String
          [LclId] =
              [$dShow_sLcD $dShow1_sLcE $dShow2_sLcF $dShow3_sLcG] \r [eta_B1]
                  GHC.Show.$fShow(,,,)_$cshow
                      $dShow_sLcD $dShow1_sLcE $dShow2_sLcF $dShow3_sLcG eta_B1; } in
        let {
          sat_sLcH [Occ=Once]
            :: GHC.Types.Int
               -> (a_azIa, b_azIb, c_azIc, d_azId) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLcD $dShow1_sLcE $dShow2_sLcF $dShow3_sLcG] \r [eta_B3
                                                                       eta_B2
                                                                       eta_B1]
                  GHC.Show.$fShow(,,,)_$cshowsPrec
                      $dShow_sLcD
                      $dShow1_sLcE
                      $dShow2_sLcF
                      $dShow3_sLcG
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sLcH sat_sLcI sat_sLcJ];

GHC.Show.$fShow(,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sLcK eta_sLcL]
        case ds_sLcK of {
          [] -> lvl11_rC0o;
          : x_sLcO [Occ=Once*!] ds1_sLcP [Occ=Once!] ->
              case ds1_sLcP of wild1_sLcQ {
                [] -> x_sLcO eta_sLcL;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sLcT [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sLcL wild1_sLcQ] \u []
                              GHC.Show.$fShow(,,)_go2 wild1_sLcQ eta_sLcL; } in
                    let {
                      sat_sLcU [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sLcT];
                    } in  x_sLcO sat_sLcU;
              };
        };

GHC.Show.$w$cshowsPrec1 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c) =>
     a
     -> b
     -> c
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId,
 Arity=7,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sLcV w1_sLcW w2_sLcX ww_sLcY ww1_sLcZ ww2_sLd0 w3_sLd1]
        let {
          sat_sLd9 [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [w_sLcV w1_sLcW w2_sLcX ww_sLcY ww1_sLcZ ww2_sLd0 w3_sLd1] \u []
                  let {
                    sat_sLd8 [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [GHC.Show.$fShow(,)2 w3_sLd1]; } in
                  let {
                    sat_sLd4 [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w2_sLcX ww2_sLd0] \u []
                            GHC.Show.showsPrec w2_sLcX GHC.Show.$fShow(,)1 ww2_sLd0; } in
                  let {
                    sat_sLd5 [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sLd4 GHC.Types.[]]; } in
                  let {
                    sat_sLd3 [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w1_sLcW ww1_sLcZ] \u []
                            GHC.Show.showsPrec w1_sLcW GHC.Show.$fShow(,)1 ww1_sLcZ; } in
                  let {
                    sat_sLd6 [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sLd3 sat_sLd5]; } in
                  let {
                    sat_sLd2 [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w_sLcV ww_sLcY] \u []
                            GHC.Show.showsPrec w_sLcV GHC.Show.$fShow(,)1 ww_sLcY; } in
                  let {
                    sat_sLd7 [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                    [LclId] =
                        CCCS :! [sat_sLd2 sat_sLd6];
                  } in  GHC.Show.$fShow(,,)_go2 sat_sLd7 sat_sLd8;
        } in  (#,#) [GHC.Show.$fShow(,)4 sat_sLd9];

GHC.Show.$fShow(,,)_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a b c.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c) =>
     GHC.Types.Int -> (a, b, c) -> GHC.Show.ShowS
[GblId,
 Arity=6,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sLda w1_sLdb w2_sLdc w3_sLdd w4_sLde w5_sLdf]
        case w4_sLde of {
          (,,) ww1_sLdh [Occ=Once] ww2_sLdi [Occ=Once] ww3_sLdj [Occ=Once] ->
              case
                  GHC.Show.$w$cshowsPrec1
                      w_sLda w1_sLdb w2_sLdc ww1_sLdh ww2_sLdi ww3_sLdj w5_sLdf
              of
              { (#,#) ww5_sLdl [Occ=Once] ww6_sLdm [Occ=Once] ->
                    : [ww5_sLdl ww6_sLdm];
              };
        };

GHC.Show.$fShow(,,)_$cshow
  :: forall a b c.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c) =>
     (a, b, c) -> GHC.Base.String
[GblId,
 Arity=4,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sLdn $dShow1_sLdo $dShow2_sLdp x_sLdq]
        case x_sLdq of {
          (,,) ww1_sLds [Occ=Once] ww2_sLdt [Occ=Once] ww3_sLdu [Occ=Once] ->
              case
                  GHC.Show.$w$cshowsPrec1
                      $dShow_sLdn
                      $dShow1_sLdo
                      $dShow2_sLdp
                      ww1_sLds
                      ww2_sLdt
                      ww3_sLdu
                      GHC.Types.[]
              of
              { (#,#) ww5_sLdw [Occ=Once] ww6_sLdx [Occ=Once] ->
                    : [ww5_sLdw ww6_sLdx];
              };
        };

GHC.Show.$fShow(,,)_$cshowList
  :: forall a b c.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c) =>
     [(a, b, c)] -> GHC.Show.ShowS
[GblId,
 Arity=5,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sLdy $dShow1_sLdz $dShow2_sLdA ls_sLdB s_sLdC]
        let {
          sat_sLdM [Occ=Once] :: (a_azIG, b_azIH, c_azII) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLdy $dShow1_sLdz $dShow2_sLdA] \r [w_sLdD w1_sLdE]
                  case w_sLdD of {
                    (,,) ww1_sLdG [Occ=Once] ww2_sLdH [Occ=Once] ww3_sLdI [Occ=Once] ->
                        case
                            GHC.Show.$w$cshowsPrec1
                                $dShow_sLdy
                                $dShow1_sLdz
                                $dShow2_sLdA
                                ww1_sLdG
                                ww2_sLdH
                                ww3_sLdI
                                w1_sLdE
                        of
                        { (#,#) ww5_sLdK [Occ=Once] ww6_sLdL [Occ=Once] ->
                              : [ww5_sLdK ww6_sLdL];
                        };
                  };
        } in  GHC.Show.showList__ sat_sLdM ls_sLdB s_sLdC;

GHC.Show.$fShow(,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c) =>
     GHC.Show.Show (a, b, c)
[GblId[DFunId],
 Arity=3,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sLdN $dShow1_sLdO $dShow2_sLdP]
        let {
          sat_sLdS [Occ=Once] :: [(a_azIG, b_azIH, c_azII)] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLdN $dShow1_sLdO $dShow2_sLdP] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,)_$cshowList
                      $dShow_sLdN $dShow1_sLdO $dShow2_sLdP eta_B2 eta_B1; } in
        let {
          sat_sLdR [Occ=Once] :: (a_azIG, b_azIH, c_azII) -> GHC.Base.String
          [LclId] =
              [$dShow_sLdN $dShow1_sLdO $dShow2_sLdP] \r [eta_B1]
                  GHC.Show.$fShow(,,)_$cshow
                      $dShow_sLdN $dShow1_sLdO $dShow2_sLdP eta_B1; } in
        let {
          sat_sLdQ [Occ=Once]
            :: GHC.Types.Int -> (a_azIG, b_azIH, c_azII) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLdN $dShow1_sLdO $dShow2_sLdP] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,)_$cshowsPrec
                      $dShow_sLdN $dShow1_sLdO $dShow2_sLdP eta_B3 eta_B2 eta_B1;
        } in  GHC.Show.C:Show [sat_sLdQ sat_sLdR sat_sLdS];

GHC.Show.$fShow(,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sLdT eta_sLdU]
        case ds_sLdT of {
          [] -> lvl11_rC0o;
          : x_sLdX [Occ=Once*!] ds1_sLdY [Occ=Once!] ->
              case ds1_sLdY of wild1_sLdZ {
                [] -> x_sLdX eta_sLdU;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sLe2 [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sLdU wild1_sLdZ] \u []
                              GHC.Show.$fShow(,)_go2 wild1_sLdZ eta_sLdU; } in
                    let {
                      sat_sLe3 [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sLe2];
                    } in  x_sLdX sat_sLe3;
              };
        };

GHC.Show.$w$s$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: [GHC.Types.Char]
     -> GHC.Stack.Types.SrcLoc
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId,
 Arity=3,
 Str=<L,U><L,U(U,U,U,U(U),U(U),U(U),U(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sLe4 ww1_sLe5 w_sLe6]
        let {
          sat_sLel [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_sLe4 ww1_sLe5 w_sLe6] \u []
                  let {
                    sat_sLek [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [GHC.Show.$fShow(,)2 w_sLe6]; } in
                  let {
                    sat_sLeh [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [ww1_sLe5] \r [w1_sLe8]
                            case ww1_sLe5 of {
                              GHC.Stack.Types.SrcLoc ww3_sLea [Occ=Once]
                                                     ww4_sLeb [Occ=Once]
                                                     ww5_sLec [Occ=Once]
                                                     ww6_sLed [Occ=Once]
                                                     ww7_sLee [Occ=Once]
                                                     ww8_sLef [Occ=Once]
                                                     ww9_sLeg [Occ=Once] ->
                                  GHC.Show.$w$cshowsPrec
                                      0#
                                      ww3_sLea
                                      ww4_sLeb
                                      ww5_sLec
                                      ww6_sLed
                                      ww7_sLee
                                      ww8_sLef
                                      ww9_sLeg
                                      w1_sLe8;
                            }; } in
                  let {
                    sat_sLei [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sLeh GHC.Types.[]]; } in
                  let {
                    sat_sLe7 [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [ww_sLe4] \r [eta_B1]
                            GHC.Show.$fShow(,)_$cshowList1 ww_sLe4 eta_B1; } in
                  let {
                    sat_sLej [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                    [LclId] =
                        CCCS :! [sat_sLe7 sat_sLei];
                  } in  GHC.Show.$fShow(,)_go2 sat_sLej sat_sLek;
        } in  (#,#) [GHC.Show.$fShow(,)4 sat_sLel];

GHC.Show.$fShow(,)_go1 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sLem eta_sLen]
        case ds_sLem of {
          [] -> lvl11_rC0o;
          : x_sLeq [Occ=Once*!] ds1_sLer [Occ=Once!] ->
              case ds1_sLer of wild1_sLes {
                [] -> x_sLeq eta_sLen;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sLev [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sLen wild1_sLes] \u []
                              GHC.Show.$fShow(,)_go1 wild1_sLes eta_sLen; } in
                    let {
                      sat_sLew [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sLev];
                    } in  x_sLeq sat_sLew;
              };
        };

GHC.Show.$fShow(,)_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a b.
     (GHC.Show.Show a, GHC.Show.Show b) =>
     GHC.Types.Int -> (a, b) -> GHC.Show.ShowS
[GblId,
 Arity=5,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sLex w1_sLey w2_sLez w3_sLeA w4_sLeB]
        case w3_sLeA of {
          (,) ww1_sLeD [Occ=Once] ww2_sLeE [Occ=Once] ->
              let {
                sat_sLeK [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sLex w1_sLey w4_sLeB ww1_sLeD ww2_sLeE] \u []
                        let {
                          sat_sLeJ [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 w4_sLeB]; } in
                        let {
                          sat_sLeG [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [w1_sLey ww2_sLeE] \u []
                                  GHC.Show.showsPrec w1_sLey GHC.Show.$fShow(,)1 ww2_sLeE; } in
                        let {
                          sat_sLeH [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sLeG GHC.Types.[]]; } in
                        let {
                          sat_sLeF [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [w_sLex ww1_sLeD] \u []
                                  GHC.Show.showsPrec w_sLex GHC.Show.$fShow(,)1 ww1_sLeD; } in
                        let {
                          sat_sLeI [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sLeF sat_sLeH];
                        } in  GHC.Show.$fShow(,)_go1 sat_sLeI sat_sLeJ;
              } in  : [GHC.Show.$fShow(,)4 sat_sLeK];
        };

GHC.Show.$fShow(,)_$cshow
  :: forall a b.
     (GHC.Show.Show a, GHC.Show.Show b) =>
     (a, b) -> GHC.Base.String
[GblId,
 Arity=3,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sLeL $dShow1_sLeM x_sLeN]
        case x_sLeN of {
          (,) ww1_sLeP [Occ=Once] ww2_sLeQ [Occ=Once] ->
              let {
                sat_sLeW [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sLeL $dShow1_sLeM ww1_sLeP ww2_sLeQ] \u []
                        let {
                          sat_sLeV [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 GHC.Types.[]]; } in
                        let {
                          sat_sLeS [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sLeM ww2_sLeQ] \u []
                                  GHC.Show.showsPrec $dShow1_sLeM GHC.Show.$fShow(,)1 ww2_sLeQ; } in
                        let {
                          sat_sLeT [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sLeS GHC.Types.[]]; } in
                        let {
                          sat_sLeR [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sLeL ww1_sLeP] \u []
                                  GHC.Show.showsPrec $dShow_sLeL GHC.Show.$fShow(,)1 ww1_sLeP; } in
                        let {
                          sat_sLeU [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sLeR sat_sLeT];
                        } in  GHC.Show.$fShow(,)_go1 sat_sLeU sat_sLeV;
              } in  : [GHC.Show.$fShow(,)4 sat_sLeW];
        };

GHC.Show.$fShow(,)_$cshowList
  :: forall a b.
     (GHC.Show.Show a, GHC.Show.Show b) =>
     [(a, b)] -> GHC.Show.ShowS
[GblId,
 Arity=4,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sLeX $dShow1_sLeY ls_sLeZ s_sLf0]
        let {
          sat_sLfc [Occ=Once] :: (a_azJ8, b_azJ9) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLeX $dShow1_sLeY] \r [w_sLf1 w1_sLf2]
                  case w_sLf1 of {
                    (,) ww1_sLf4 [Occ=Once] ww2_sLf5 [Occ=Once] ->
                        let {
                          sat_sLfb [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [$dShow_sLeX $dShow1_sLeY w1_sLf2 ww1_sLf4 ww2_sLf5] \u []
                                  let {
                                    sat_sLfa [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        CCCS :! [GHC.Show.$fShow(,)2 w1_sLf2]; } in
                                  let {
                                    sat_sLf7 [Occ=Once] :: GHC.Show.ShowS
                                    [LclId] =
                                        [$dShow1_sLeY ww2_sLf5] \u []
                                            GHC.Show.showsPrec
                                                $dShow1_sLeY GHC.Show.$fShow(,)1 ww2_sLf5; } in
                                  let {
                                    sat_sLf8 [Occ=Once] :: [GHC.Show.ShowS]
                                    [LclId] =
                                        CCCS :! [sat_sLf7 GHC.Types.[]]; } in
                                  let {
                                    sat_sLf6 [Occ=Once] :: GHC.Show.ShowS
                                    [LclId] =
                                        [$dShow_sLeX ww1_sLf4] \u []
                                            GHC.Show.showsPrec
                                                $dShow_sLeX GHC.Show.$fShow(,)1 ww1_sLf4; } in
                                  let {
                                    sat_sLf9 [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                                    [LclId] =
                                        CCCS :! [sat_sLf6 sat_sLf8];
                                  } in  GHC.Show.$fShow(,)_go1 sat_sLf9 sat_sLfa;
                        } in  : [GHC.Show.$fShow(,)4 sat_sLfb];
                  };
        } in  GHC.Show.showList__ sat_sLfc ls_sLeZ s_sLf0;

GHC.Show.$fShow(,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b.
     (GHC.Show.Show a, GHC.Show.Show b) =>
     GHC.Show.Show (a, b)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sLfd $dShow1_sLfe]
        let {
          sat_sLfh [Occ=Once] :: [(a_azJ8, b_azJ9)] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLfd $dShow1_sLfe] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,)_$cshowList
                      $dShow_sLfd $dShow1_sLfe eta_B2 eta_B1; } in
        let {
          sat_sLfg [Occ=Once] :: (a_azJ8, b_azJ9) -> GHC.Base.String
          [LclId] =
              [$dShow_sLfd $dShow1_sLfe] \r [eta_B1]
                  GHC.Show.$fShow(,)_$cshow $dShow_sLfd $dShow1_sLfe eta_B1; } in
        let {
          sat_sLff [Occ=Once]
            :: GHC.Types.Int -> (a_azJ8, b_azJ9) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLfd $dShow1_sLfe] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,)_$cshowsPrec
                      $dShow_sLfd $dShow1_sLfe eta_B3 eta_B2 eta_B1;
        } in  GHC.Show.C:Show [sat_sLff sat_sLfg sat_sLfh];

GHC.Show.showString :: GHC.Base.String -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Base.++ eta_B2 eta_B1;

GHC.Show.showCommaSpace :: GHC.Show.ShowS
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.++ GHC.Show.showCommaSpace1 eta_B1;

GHC.Show.$fShowTypeLitSort5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TypeLitSymbol"#;

GHC.Show.$fShowTypeLitSort4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowTypeLitSort5;

GHC.Show.$fShowTypeLitSort3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TypeLitNat"#;

GHC.Show.$fShowTypeLitSort2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowTypeLitSort3;

GHC.Show.$fShowTypeLitSort_$cshowsPrec
  :: GHC.Types.Int -> GHC.Types.TypeLitSort -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sLfi ds1_sLfj eta_sLfk]
        case ds1_sLfj of {
          GHC.Types.TypeLitSymbol ->
              GHC.Base.++ GHC.Show.$fShowTypeLitSort4 eta_sLfk;
          GHC.Types.TypeLitNat ->
              GHC.Base.++ GHC.Show.$fShowTypeLitSort2 eta_sLfk;
        };

GHC.Show.$fShowTypeLitSort_$cshow
  :: GHC.Types.TypeLitSort -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sLfm]
        case x_sLfm of {
          GHC.Types.TypeLitSymbol -> GHC.Show.$fShowTypeLitSort4;
          GHC.Types.TypeLitNat -> GHC.Show.$fShowTypeLitSort2;
        };

GHC.Show.$fShowTypeLitSort1
  :: GHC.Types.TypeLitSort -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sLfo eta_sLfp]
        case ds_sLfo of {
          GHC.Types.TypeLitSymbol ->
              GHC.Base.++ GHC.Show.$fShowTypeLitSort4 eta_sLfp;
          GHC.Types.TypeLitNat ->
              GHC.Base.++ GHC.Show.$fShowTypeLitSort2 eta_sLfp;
        };

GHC.Show.$fShowTypeLitSort_$cshowList
  :: [GHC.Types.TypeLitSort] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sLfr s_sLfs]
        GHC.Show.showList__ GHC.Show.$fShowTypeLitSort1 ls_sLfr s_sLfs;

GHC.Show.$fShowTypeLitSort [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.TypeLitSort
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowTypeLitSort_$cshowsPrec
                                    GHC.Show.$fShowTypeLitSort_$cshow
                                    GHC.Show.$fShowTypeLitSort_$cshowList];

GHC.Show.$fShowVecElem20 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int8ElemRep"#;

GHC.Show.$fShowVecElem19 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem20;

GHC.Show.$fShowVecElem18 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int16ElemRep"#;

GHC.Show.$fShowVecElem17 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem18;

GHC.Show.$fShowVecElem16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int32ElemRep"#;

GHC.Show.$fShowVecElem15 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem16;

GHC.Show.$fShowVecElem14 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int64ElemRep"#;

GHC.Show.$fShowVecElem13 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem14;

GHC.Show.$fShowVecElem12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word8ElemRep"#;

GHC.Show.$fShowVecElem11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem12;

GHC.Show.$fShowVecElem10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word16ElemRep"#;

GHC.Show.$fShowVecElem9 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem10;

GHC.Show.$fShowVecElem8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word32ElemRep"#;

GHC.Show.$fShowVecElem7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem8;

GHC.Show.$fShowVecElem6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word64ElemRep"#;

GHC.Show.$fShowVecElem5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem6;

GHC.Show.$fShowVecElem4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FloatElemRep"#;

GHC.Show.$fShowVecElem3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem4;

GHC.Show.$fShowVecElem2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DoubleElemRep"#;

GHC.Show.$fShowVecElem1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem2;

GHC.Show.$w$cshowsPrec10 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.VecElem -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sLft w1_sLfu]
        case w_sLft of {
          GHC.Types.Int8ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem19 w1_sLfu;
          GHC.Types.Int16ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem17 w1_sLfu;
          GHC.Types.Int32ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem15 w1_sLfu;
          GHC.Types.Int64ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem13 w1_sLfu;
          GHC.Types.Word8ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem11 w1_sLfu;
          GHC.Types.Word16ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem9 w1_sLfu;
          GHC.Types.Word32ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem7 w1_sLfu;
          GHC.Types.Word64ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem5 w1_sLfu;
          GHC.Types.FloatElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem3 w1_sLfu;
          GHC.Types.DoubleElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem1 w1_sLfu;
        };

GHC.Show.$fShowVecElem_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.VecElem -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sLfw w1_sLfx w2_sLfy]
        GHC.Show.$w$cshowsPrec10 w1_sLfx w2_sLfy;

GHC.Show.$fShowVecElem_$cshow
  :: GHC.Types.VecElem -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sLfz]
        case x_sLfz of {
          GHC.Types.Int8ElemRep -> GHC.Show.$fShowVecElem19;
          GHC.Types.Int16ElemRep -> GHC.Show.$fShowVecElem17;
          GHC.Types.Int32ElemRep -> GHC.Show.$fShowVecElem15;
          GHC.Types.Int64ElemRep -> GHC.Show.$fShowVecElem13;
          GHC.Types.Word8ElemRep -> GHC.Show.$fShowVecElem11;
          GHC.Types.Word16ElemRep -> GHC.Show.$fShowVecElem9;
          GHC.Types.Word32ElemRep -> GHC.Show.$fShowVecElem7;
          GHC.Types.Word64ElemRep -> GHC.Show.$fShowVecElem5;
          GHC.Types.FloatElemRep -> GHC.Show.$fShowVecElem3;
          GHC.Types.DoubleElemRep -> GHC.Show.$fShowVecElem1;
        };

GHC.Show.$fShowVecElem_$cshowList
  :: [GHC.Types.VecElem] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sLfB s_sLfC]
        GHC.Show.showList__ GHC.Show.$w$cshowsPrec10 ls_sLfB s_sLfC;

GHC.Show.$fShowVecElem [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.VecElem
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowVecElem_$cshowsPrec
                                    GHC.Show.$fShowVecElem_$cshow
                                    GHC.Show.$fShowVecElem_$cshowList];

GHC.Show.$fShowVecCount12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec2"#;

GHC.Show.$fShowVecCount11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount12;

GHC.Show.$fShowVecCount10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec4"#;

GHC.Show.$fShowVecCount9 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount10;

GHC.Show.$fShowVecCount8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec8"#;

GHC.Show.$fShowVecCount7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount8;

GHC.Show.$fShowVecCount6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec16"#;

GHC.Show.$fShowVecCount5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount6;

GHC.Show.$fShowVecCount4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec32"#;

GHC.Show.$fShowVecCount3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount4;

GHC.Show.$fShowVecCount2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec64"#;

GHC.Show.$fShowVecCount1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount2;

GHC.Show.$w$cshowsPrec9 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.VecCount -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sLfD w1_sLfE]
        case w_sLfD of {
          GHC.Types.Vec2 -> GHC.Base.++ GHC.Show.$fShowVecCount11 w1_sLfE;
          GHC.Types.Vec4 -> GHC.Base.++ GHC.Show.$fShowVecCount9 w1_sLfE;
          GHC.Types.Vec8 -> GHC.Base.++ GHC.Show.$fShowVecCount7 w1_sLfE;
          GHC.Types.Vec16 -> GHC.Base.++ GHC.Show.$fShowVecCount5 w1_sLfE;
          GHC.Types.Vec32 -> GHC.Base.++ GHC.Show.$fShowVecCount3 w1_sLfE;
          GHC.Types.Vec64 -> GHC.Base.++ GHC.Show.$fShowVecCount1 w1_sLfE;
        };

GHC.Show.$fShowVecCount_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.VecCount -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sLfG w1_sLfH w2_sLfI]
        GHC.Show.$w$cshowsPrec9 w1_sLfH w2_sLfI;

GHC.Show.$fShowVecCount_$cshow
  :: GHC.Types.VecCount -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sLfJ]
        case x_sLfJ of {
          GHC.Types.Vec2 -> GHC.Show.$fShowVecCount11;
          GHC.Types.Vec4 -> GHC.Show.$fShowVecCount9;
          GHC.Types.Vec8 -> GHC.Show.$fShowVecCount7;
          GHC.Types.Vec16 -> GHC.Show.$fShowVecCount5;
          GHC.Types.Vec32 -> GHC.Show.$fShowVecCount3;
          GHC.Types.Vec64 -> GHC.Show.$fShowVecCount1;
        };

GHC.Show.$fShowVecCount_$cshowList
  :: [GHC.Types.VecCount] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sLfL s_sLfM]
        GHC.Show.showList__ GHC.Show.$w$cshowsPrec9 ls_sLfL s_sLfM;

GHC.Show.$fShowVecCount [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.VecCount
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowVecCount_$cshowsPrec
                                    GHC.Show.$fShowVecCount_$cshow
                                    GHC.Show.$fShowVecCount_$cshowList];

GHC.Show.$fShowOrdering6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LT"#;

GHC.Show.$fShowOrdering5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowOrdering6;

GHC.Show.$fShowOrdering4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EQ"#;

GHC.Show.$fShowOrdering3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowOrdering4;

GHC.Show.$fShowOrdering2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GT"#;

GHC.Show.$fShowOrdering1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowOrdering2;

GHC.Show.$w$cshowsPrec8 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Ordering -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sLfN w1_sLfO]
        case w_sLfN of {
          GHC.Types.LT -> GHC.Base.++ GHC.Show.$fShowOrdering5 w1_sLfO;
          GHC.Types.EQ -> GHC.Base.++ GHC.Show.$fShowOrdering3 w1_sLfO;
          GHC.Types.GT -> GHC.Base.++ GHC.Show.$fShowOrdering1 w1_sLfO;
        };

GHC.Show.$fShowOrdering_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Ordering -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sLfQ w1_sLfR w2_sLfS]
        GHC.Show.$w$cshowsPrec8 w1_sLfR w2_sLfS;

GHC.Show.$fShowOrdering_$cshow
  :: GHC.Types.Ordering -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sLfT]
        case x_sLfT of {
          GHC.Types.LT -> GHC.Show.$fShowOrdering5;
          GHC.Types.EQ -> GHC.Show.$fShowOrdering3;
          GHC.Types.GT -> GHC.Show.$fShowOrdering1;
        };

GHC.Show.$fShowOrdering_$cshowList
  :: [GHC.Types.Ordering] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sLfV s_sLfW]
        GHC.Show.showList__ GHC.Show.$w$cshowsPrec8 ls_sLfV s_sLfW;

GHC.Show.$fShowOrdering [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Ordering
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowOrdering_$cshowsPrec
                                    GHC.Show.$fShowOrdering_$cshow
                                    GHC.Show.$fShowOrdering_$cshowList];

GHC.Show.$fShowBool5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "False"#;

GHC.Show.$fShowBool4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowBool5;

GHC.Show.$fShowBool3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "True"#;

GHC.Show.$fShowBool2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowBool3;

GHC.Show.$fShowBool_$cshowsPrec
  :: GHC.Types.Int -> GHC.Types.Bool -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sLfX ds1_sLfY eta_sLfZ]
        case ds1_sLfY of {
          GHC.Types.False -> GHC.Base.++ GHC.Show.$fShowBool4 eta_sLfZ;
          GHC.Types.True -> GHC.Base.++ GHC.Show.$fShowBool2 eta_sLfZ;
        };

GHC.Show.$fShowBool_$cshow :: GHC.Types.Bool -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sLg1]
        case x_sLg1 of {
          GHC.Types.False -> GHC.Show.$fShowBool4;
          GHC.Types.True -> GHC.Show.$fShowBool2;
        };

GHC.Show.$fShowBool1 :: GHC.Types.Bool -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sLg3 eta_sLg4]
        case ds_sLg3 of {
          GHC.Types.False -> GHC.Base.++ GHC.Show.$fShowBool4 eta_sLg4;
          GHC.Types.True -> GHC.Base.++ GHC.Show.$fShowBool2 eta_sLg4;
        };

GHC.Show.$fShowBool_$cshowList
  :: [GHC.Types.Bool] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sLg6 s_sLg7]
        GHC.Show.showList__ GHC.Show.$fShowBool1 ls_sLg6 s_sLg7;

GHC.Show.$fShowBool [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Bool
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowBool_$cshowsPrec
                                    GHC.Show.$fShowBool_$cshow
                                    GHC.Show.$fShowBool_$cshowList];

GHC.Show.$fShow()3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "()"#;

GHC.Show.$fShow()2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShow()3;

GHC.Show.$fShow()_$cshowsPrec
  :: GHC.Types.Int -> () -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*H><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sLg8 ds1_sLg9 eta_sLga]
        case ds1_sLg9 of {
          () -> GHC.Base.++ GHC.Show.$fShow()2 eta_sLga;
        };

GHC.Show.$fShow()_$cshow :: () -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [x_sLgc] case x_sLgc of { () -> GHC.Show.$fShow()2; };

GHC.Show.$fShow()1 :: () -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*H><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sLge eta_sLgf]
        case ds_sLge of { () -> GHC.Base.++ GHC.Show.$fShow()2 eta_sLgf; };

GHC.Show.$fShow()_$cshowList :: [()] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sLgh s_sLgi]
        GHC.Show.showList__ GHC.Show.$fShow()1 ls_sLgh s_sLgi;

GHC.Show.$fShow() [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show ()
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShow()_$cshowsPrec
                                    GHC.Show.$fShow()_$cshow
                                    GHC.Show.$fShow()_$cshowList];

GHC.Show.$fShowTrName_$cshowsPrec
  :: GHC.Types.Int -> GHC.Types.TrName -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_sLgj ds1_sLgk]
        case ds1_sLgk of {
          GHC.Types.TrNameS s_sLgm [Occ=Once] ->
              let {
                sat_sLgn [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [s_sLgm] \u [] GHC.CString.unpackCString# s_sLgm;
              } in  GHC.Base.++ sat_sLgn;
          GHC.Types.TrNameD s_sLgo [Occ=Once] -> GHC.Base.++ s_sLgo;
        };

GHC.Show.$fShowTrName_$cshow :: GHC.Types.TrName -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sLgp]
        case x_sLgp of {
          GHC.Types.TrNameS s_sLgr [Occ=Once] ->
              GHC.CString.unpackCString# s_sLgr;
          GHC.Types.TrNameD s_sLgs [Occ=Once] -> s_sLgs;
        };

GHC.Show.$fShowTrName1 :: GHC.Types.TrName -> GHC.Show.ShowS
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sLgt]
        case ds_sLgt of {
          GHC.Types.TrNameS s_sLgv [Occ=Once] ->
              let {
                sat_sLgw [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [s_sLgv] \u [] GHC.CString.unpackCString# s_sLgv;
              } in  GHC.Base.++ sat_sLgw;
          GHC.Types.TrNameD s_sLgx [Occ=Once] -> GHC.Base.++ s_sLgx;
        };

GHC.Show.$fShowTrName_$cshowList
  :: [GHC.Types.TrName] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sLgy s_sLgz]
        GHC.Show.showList__ GHC.Show.$fShowTrName1 ls_sLgy s_sLgz;

GHC.Show.$fShowTrName [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.TrName
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowTrName_$cshowsPrec
                                    GHC.Show.$fShowTrName_$cshow
                                    GHC.Show.$fShowTrName_$cshowList];

GHC.Show.$fShowModule2 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [':'#];

GHC.Show.$w$cshowsPrec6 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.TrName -> GHC.Types.TrName -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_sLgA ww1_sLgB]
        let {
          f12_sLgC [Occ=OnceL!, Dmd=<L,C(U)>]
            :: GHC.Base.String -> GHC.Base.String
          [LclId] =
              [ww_sLgA] \u []
                  case ww_sLgA of {
                    GHC.Types.TrNameS s_sLgE [Occ=Once] ->
                        let {
                          sat_sLgF [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [s_sLgE] \u [] GHC.CString.unpackCString# s_sLgE;
                        } in  GHC.Base.++ sat_sLgF;
                    GHC.Types.TrNameD s_sLgG [Occ=Once] -> GHC.Base.++ s_sLgG;
                  }; } in
        let {
          g_sLgH [Occ=OnceL!, Dmd=<L,C(U)>]
            :: GHC.Base.String -> [GHC.Types.Char]
          [LclId] =
              [ww1_sLgB] \u []
                  case ww1_sLgB of {
                    GHC.Types.TrNameS s_sLgJ [Occ=Once] ->
                        let {
                          sat_sLgK [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [s_sLgJ] \u [] GHC.CString.unpackCString# s_sLgJ;
                        } in  GHC.Base.++ sat_sLgK;
                    GHC.Types.TrNameD s_sLgL [Occ=Once] -> GHC.Base.++ s_sLgL;
                  }; } in
        let {
          sat_sLgP [Occ=OnceT[0]] :: GHC.Base.String -> GHC.Base.String
          [LclId] =
              [f12_sLgC g_sLgH] \r [x_sLgM]
                  let {
                    sat_sLgN [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [g_sLgH x_sLgM] \u [] g_sLgH x_sLgM; } in
                  let {
                    sat_sLgO [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [GHC.Show.$fShowModule2 sat_sLgN];
                  } in  f12_sLgC sat_sLgO;
        } in  sat_sLgP;

GHC.Show.$fShowModule_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Module -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_sLgQ w1_sLgR]
        case w1_sLgR of {
          GHC.Types.Module ww1_sLgT [Occ=Once] ww2_sLgU [Occ=Once] ->
              GHC.Show.$w$cshowsPrec6 ww1_sLgT ww2_sLgU;
        };

GHC.Show.$fShowModule_$cshow :: GHC.Types.Module -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [x_sLgV]
        case x_sLgV of {
          GHC.Types.Module ww1_sLgX [Occ=Once] ww2_sLgY [Occ=Once] ->
              GHC.Show.$w$cshowsPrec6 ww1_sLgX ww2_sLgY GHC.Types.[];
        };

GHC.Show.$fShowModule1 :: GHC.Types.Module -> GHC.Show.ShowS
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_sLgZ]
        case w_sLgZ of {
          GHC.Types.Module ww1_sLh1 [Occ=Once] ww2_sLh2 [Occ=Once] ->
              GHC.Show.$w$cshowsPrec6 ww1_sLh1 ww2_sLh2;
        };

GHC.Show.$fShowModule_$cshowList
  :: [GHC.Types.Module] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sLh3 s_sLh4]
        GHC.Show.showList__ GHC.Show.$fShowModule1 ls_sLh3 s_sLh4;

GHC.Show.$fShowModule [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Module
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowModule_$cshowsPrec
                                    GHC.Show.$fShowModule_$cshow
                                    GHC.Show.$fShowModule_$cshowList];

GHC.Show.$fShowTyCon_$cshowsPrec
  :: GHC.Types.Int -> GHC.Types.TyCon -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [p_sLh5 ds_sLh6]
        case ds_sLh6 of {
          GHC.Types.TyCon _ [Occ=Dead]
                          _ [Occ=Dead]
                          _ [Occ=Dead]
                          tc_name_sLhb [Occ=Once]
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
              GHC.Show.$fShowTrName_$cshowsPrec p_sLh5 tc_name_sLhb;
        };

GHC.Show.$fShowTyCon_$cshow :: GHC.Types.TyCon -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [x_sLhe]
        case x_sLhe of {
          GHC.Types.TyCon _ [Occ=Dead]
                          _ [Occ=Dead]
                          _ [Occ=Dead]
                          tc_name_sLhj [Occ=Once!]
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
              case tc_name_sLhj of {
                GHC.Types.TrNameS s_sLhn [Occ=Once] ->
                    GHC.CString.unpackCString# s_sLhn;
                GHC.Types.TrNameD s_sLho [Occ=Once] -> s_sLho;
              };
        };

GHC.Show.$fShowTyCon1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.TyCon -> GHC.Show.ShowS
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [w_sLhp]
        case w_sLhp of {
          GHC.Types.TyCon _ [Occ=Dead]
                          _ [Occ=Dead]
                          _ [Occ=Dead]
                          ww4_sLhu [Occ=Once]
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
              GHC.Show.$fShowTrName1 ww4_sLhu;
        };

GHC.Show.$fShowTyCon_$cshowList
  :: [GHC.Types.TyCon] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sLhx s_sLhy]
        GHC.Show.showList__ GHC.Show.$fShowTyCon1 ls_sLhx s_sLhy;

GHC.Show.$fShowTyCon [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.TyCon
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowTyCon_$cshowsPrec
                                    GHC.Show.$fShowTyCon_$cshow
                                    GHC.Show.$fShowTyCon_$cshowList];

GHC.Show.showSpace1 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [' '#];

GHC.Show.showSpace :: GHC.Show.ShowS
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [xs_sLhz] : [GHC.Show.showSpace1 xs_sLhz];

GHC.Show.protectEsc
  :: (GHC.Types.Char -> GHC.Types.Bool)
     -> GHC.Show.ShowS -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><C(S),1*C1(U)><L,1*U>,
 Unf=OtherCon []] =
    [] \r [p_sLhA f12_sLhB x_sLhC]
        let {
          sat_sLhH [Occ=Once] :: GHC.Base.String
          [LclId] =
              [p_sLhA x_sLhC] \u []
                  case x_sLhC of wild_sLhD {
                    [] -> [] [];
                    : c_sLhE [Occ=Once] _ [Occ=Dead] ->
                        case p_sLhA c_sLhE of {
                          GHC.Types.False -> wild_sLhD;
                          GHC.Types.True ->
                              GHC.CString.unpackAppendCString# GHC.Show.showLitChar4 wild_sLhD;
                        };
                  };
        } in  f12_sLhB sat_sLhH;

GHC.Show.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Show.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Show.$trModule4];

GHC.Show.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Show"#;

GHC.Show.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Show.$trModule2];

GHC.Show.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Show.$trModule3
                                     GHC.Show.$trModule1];

$krep_rC0q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep1_rC0r :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_rC0s :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep3_rC0t :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rC0q GHC.Types.[]];

$krep4_rC0u :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep3_rC0t];

$krep5_rC0v :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rC0u $krep4_rC0u];

GHC.Show.$tcShow1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$* $krep2_rC0s];

$krep6_rC0w :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep7_rC0x :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_rC0w $krep5_rC0v];

$krep8_rC0y :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_rC0r $krep7_rC0x];

$krep9_rC0z :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_rC0w $krep4_rC0u];

$krep10_rC0A :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep6_rC0w GHC.Types.[]];

$krep11_rC0B :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep10_rC0A];

$krep12_rC0C :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_rC0B $krep5_rC0v];

GHC.Show.$tcShow3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Show"#;

GHC.Show.$tcShow2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Show.$tcShow3];

GHC.Show.$tcShow :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [10437143935872046625##
                                    8934823934159178042##
                                    GHC.Show.$trModule
                                    GHC.Show.$tcShow2
                                    0#
                                    GHC.Show.$tcShow1];

$krep13_rC0D :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Show.$tcShow
                                              $krep10_rC0A];

$krep14_rC0E :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep12_rC0C $krep13_rC0D];

$krep15_rC0F :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_rC0z $krep14_rC0E];

GHC.Show.$tc'C:Show1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rC0y $krep15_rC0F];

GHC.Show.$tc'C:Show3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:Show"#;

GHC.Show.$tc'C:Show2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Show.$tc'C:Show3];

GHC.Show.$tc'C:Show :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4474575220627516169##
                                    12023205831716615459##
                                    GHC.Show.$trModule
                                    GHC.Show.$tc'C:Show2
                                    1#
                                    GHC.Show.$tc'C:Show1];

GHC.Show.$fShowInt_$cshow :: GHC.Types.Int -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_sLhI]
        case x_sLhI of {
          GHC.Types.I# ww1_sLhK [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# ww1_sLhK GHC.Types.[] of {
                (#,#) ww3_sLhM [Occ=Once] ww4_sLhN [Occ=Once] ->
                    : [ww3_sLhM ww4_sLhN];
              };
        };

GHC.Show.$fShowInt1 :: GHC.Types.Int -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sLhO w1_sLhP]
        case w_sLhO of {
          GHC.Types.I# ww1_sLhR [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# ww1_sLhR w1_sLhP of {
                (#,#) ww3_sLhT [Occ=Once] ww4_sLhU [Occ=Once] ->
                    : [ww3_sLhT ww4_sLhU];
              };
        };

GHC.Show.$fShowInt_$cshowList :: [GHC.Types.Int] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sLhV s_sLhW]
        GHC.Show.showList__ GHC.Show.$fShowInt1 ls_sLhV s_sLhW;

GHC.Show.$fShowInt [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Int
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.showSignedInt
                                    GHC.Show.$fShowInt_$cshow
                                    GHC.Show.$fShowInt_$cshowList];

lvl12_rC0G :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_sLhX]
        case ds_sLhX of {
          GHC.Types.C# x_sLhZ [Occ=Once!] ->
              case x_sLhZ of {
                __DEFAULT -> GHC.Types.False [];
                '\n'# -> GHC.Types.True [];
              };
        };

lvl13_rC0H :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\n\\"#;

lvl14_rC0I :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl13_rC0H;

lvl15_rC0J :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\n\""#;

lvl16_rC0K :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl15_rC0J;

lvl17_rC0L :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\""#;

lvl18_rC0M :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl17_rC0L;

GHC.Show.$wgo [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Types.Char
     -> [GHC.Types.Char] -> (# [GHC.Types.Char], [[GHC.Types.Char]] #)
[GblId, Arity=2, Str=<L,U><S,1*U>, Unf=OtherCon []] =
    [] \r [w_sLi1 w1_sLi2]
        case GHC.List.$wbreak lvl12_rC0G w1_sLi2 of {
          (#,#) ww1_sLi4 [Occ=Once*] ww2_sLi5 [Occ=Once!] ->
              case ww2_sLi5 of {
                [] ->
                    let {
                      sat_sLi7 [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [ww1_sLi4] \u [] GHC.Show.showLitString ww1_sLi4 lvl18_rC0M; } in
                    let {
                      sat_sLi8 [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          CCCS :! [w_sLi1 sat_sLi7];
                    } in  (#,#) [sat_sLi8 GHC.Types.[]];
                : ds_sLi9 [Occ=Once!] s'_sLia [Occ=Once!] ->
                    case s'_sLia of wild1_sLib {
                      [] ->
                          case ds_sLi9 of {
                            GHC.Types.C# ds1_sLid [Occ=Once!] ->
                                case ds1_sLid of {
                                  __DEFAULT ->
                                      let {
                                        sat_sLif [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww1_sLi4] \u []
                                                GHC.Show.showLitString ww1_sLi4 lvl18_rC0M; } in
                                      let {
                                        sat_sLig [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            CCCS :! [w_sLi1 sat_sLif];
                                      } in  (#,#) [sat_sLig GHC.Types.[]];
                                  '\n'# ->
                                      let {
                                        sat_sLih [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww1_sLi4] \u []
                                                GHC.Show.showLitString ww1_sLi4 lvl16_rC0K; } in
                                      let {
                                        sat_sLii [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            CCCS :! [w_sLi1 sat_sLih];
                                      } in  (#,#) [sat_sLii GHC.Types.[]];
                                };
                          };
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          let {
                            sat_sLiq [Occ=Once] :: [[GHC.Types.Char]]
                            [LclId] =
                                [wild1_sLib] \u []
                                    case GHC.Show.$wgo GHC.Show.showLitChar13 wild1_sLib of {
                                      (#,#) ww5_sLio [Occ=Once] ww6_sLip [Occ=Once] ->
                                          : [ww5_sLio ww6_sLip];
                                    }; } in
                          let {
                            sat_sLil [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [ww1_sLi4] \u [] GHC.Show.showLitString ww1_sLi4 lvl14_rC0I; } in
                          let {
                            sat_sLim [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                CCCS :! [w_sLi1 sat_sLil];
                          } in  (#,#) [sat_sLim sat_sLiq];
                    };
              };
        };

GHC.Show.showMultiLineString_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Char -> [GHC.Types.Char] -> [[GHC.Types.Char]]
[GblId, Arity=2, Str=<L,U><S,1*U>m2, Unf=OtherCon []] =
    [] \r [w_sLir w1_sLis]
        case GHC.Show.$wgo w_sLir w1_sLis of {
          (#,#) ww1_sLiu [Occ=Once] ww2_sLiv [Occ=Once] ->
              : [ww1_sLiu ww2_sLiv];
        };

GHC.Show.showMultiLineString
  :: GHC.Base.String -> [GHC.Base.String]
[GblId, Arity=1, Str=<S,1*U>m2, Unf=OtherCon []] =
    [] \r [str_sLiw]
        case GHC.Show.$wgo GHC.Show.$fShow(,)3 str_sLiw of {
          (#,#) ww1_sLiy [Occ=Once] ww2_sLiz [Occ=Once] ->
              : [ww1_sLiy ww2_sLiz];
        };

GHC.Show.$fShowChar3 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\''#];

GHC.Show.$fShowChar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'\\''"#;

GHC.Show.$fShowChar1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowChar2;

GHC.Show.$w$cshowsPrec3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Char# -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ww_sLiA w_sLiB]
        case ww_sLiA of ds_sLiC {
          __DEFAULT ->
              let {
                sat_sLiE [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sLiB ds_sLiC] \u []
                        let {
                          sat_sLiD [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShowChar3 w_sLiB];
                        } in  GHC.Show.$wshowLitChar ds_sLiC sat_sLiD;
              } in  : [GHC.Show.$fShowChar3 sat_sLiE];
          '\''# -> GHC.Base.++ GHC.Show.$fShowChar1 w_sLiB;
        };

GHC.Show.$fShowChar_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Char -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S(S),1*U(1*U)><L,U>, Unf=OtherCon []] =
    [] \r [w_sLiF w1_sLiG w2_sLiH]
        case w1_sLiG of {
          GHC.Types.C# ww1_sLiJ [Occ=Once] ->
              GHC.Show.$w$cshowsPrec3 ww1_sLiJ w2_sLiH;
        };

lvl19_rC0N :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShowChar3 GHC.Types.[]];

GHC.Show.$fShowChar_$cshow :: GHC.Types.Char -> GHC.Base.String
[GblId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
    [] \r [x_sLiK]
        case x_sLiK of {
          GHC.Types.C# ds_sLiM [Occ=Once!] ->
              case ds_sLiM of ds1_sLiN {
                __DEFAULT ->
                    let {
                      sat_sLiO [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [ds1_sLiN] \u [] GHC.Show.$wshowLitChar ds1_sLiN lvl19_rC0N;
                    } in  : [GHC.Show.$fShowChar3 sat_sLiO];
                '\''# -> GHC.Show.$fShowChar1;
              };
        };

GHC.Show.$fShowChar [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Char
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowChar_$cshowsPrec
                                    GHC.Show.$fShowChar_$cshow
                                    GHC.Show.$fShow(,)_$cshowList1];

GHC.Show.$fShow[]_$s$cshowList
  :: [[GHC.Types.Int]] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sLiP s_sLiQ]
        GHC.Show.showList__ GHC.Show.$fShowInt_$cshowList ls_sLiP s_sLiQ;

GHC.Show.$fShow[]_$s$cshow :: [GHC.Types.Int] -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sLiR]
        GHC.Show.showList__ GHC.Show.$fShowInt1 x_sLiR GHC.Types.[];

$s$fShow[]1_rC0O
  :: GHC.Types.Int -> [GHC.Base.String] -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_sLiS eta_B2 eta_B1]
        GHC.Show.$fShow[]_$s$cshowList1 eta_B2 eta_B1;

GHC.Show.$fShow[]_$s$cshow2 :: [GHC.Base.String] -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sLiT]
        GHC.Show.showList__
            GHC.Show.$fShow(,)_$cshowList1 x_sLiT GHC.Types.[];

GHC.Show.$fShow[]_$cshow
  :: forall a. GHC.Show.Show a => [a] -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LLC(C(S))),1*U(A,A,1*C1(C1(U)))><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sLiU x_sLiV]
        GHC.Show.showList $dShow_sLiU x_sLiV GHC.Types.[];

GHC.Show.$fShow[]_$s$cshowList2
  :: [[GHC.Base.String]] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sLiW s_sLiX]
        GHC.Show.showList__ GHC.Show.$fShow[]_$s$cshowList1 ls_sLiW s_sLiX;

GHC.Show.$fShow[]_$s$fShow[]2 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show [GHC.Base.String]
[GblId, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [$s$fShow[]1_rC0O
                                    GHC.Show.$fShow[]_$s$cshow2
                                    GHC.Show.$fShow[]_$s$cshowList2];

GHC.Show.$fShow[]_$cshowList
  :: forall a. GHC.Show.Show a => [[a]] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C(C1(U)))><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sLiY ls_sLiZ s_sLj0]
        let {
          sat_sLj1 [Occ=Once, Dmd=<L,C(C1(U))>] :: [a_azLN] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLiY] \u [] GHC.Show.showList $dShow_sLiY;
        } in  GHC.Show.showList__ sat_sLj1 ls_sLiZ s_sLj0;

$s$fShow[]2_rC0P
  :: GHC.Types.Int
     -> [GHC.Types.Int] -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_sLj2 eta_sLj3 eta1_sLj4]
        GHC.Show.$fShowInt_$cshowList eta_sLj3 eta1_sLj4;

GHC.Show.$fShow[]_$s$fShow[] [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show [GHC.Types.Int]
[GblId, Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [$s$fShow[]2_rC0P
                                    GHC.Show.$fShow[]_$s$cshow
                                    GHC.Show.$fShow[]_$s$cshowList];

GHC.Show.$fShow[] [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show a => GHC.Show.Show [a]
[GblId[DFunId], Arity=1, Caf=NoCafRefs, Str=<L,U(A,A,U)>m] =
    [] \r [$dShow_sLj5]
        let {
          lvl45_sLj6 [Occ=OnceL] :: [a_azLN] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLj5] \u [] GHC.Show.showList $dShow_sLj5; } in
        let {
          sat_sLja [Occ=Once] :: [[a_azLN]] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLj5] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow[]_$cshowList $dShow_sLj5 eta_B2 eta_B1; } in
        let {
          sat_sLj9 [Occ=Once] :: [a_azLN] -> GHC.Base.String
          [LclId] =
              [$dShow_sLj5] \r [eta_B1]
                  GHC.Show.$fShow[]_$cshow $dShow_sLj5 eta_B1; } in
        let {
          sat_sLj8 [Occ=Once] :: GHC.Types.Int -> [a_azLN] -> GHC.Show.ShowS
          [LclId] =
              [lvl45_sLj6] \r [ds_sLj7] lvl45_sLj6;
        } in  GHC.Show.C:Show [sat_sLj8 sat_sLj9 sat_sLja];

lvl20_rC0Q :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DoubleRep"#;

lvl21_rC0R :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl20_rC0Q;

lvl22_rC0S :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FloatRep"#;

lvl23_rC0T :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl22_rC0S;

lvl24_rC0U :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "AddrRep"#;

lvl25_rC0V :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl24_rC0U;

lvl26_rC0W :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word64Rep"#;

lvl27_rC0X :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl26_rC0W;

lvl28_rC0Y :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int64Rep"#;

lvl29_rC0Z :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl28_rC0Y;

lvl30_rC10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "WordRep"#;

lvl31_rC11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl30_rC10;

lvl32_rC12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IntRep"#;

lvl33_rC13 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl32_rC12;

lvl34_rC14 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UnliftedRep"#;

lvl35_rC15 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl34_rC14;

lvl36_rC16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LiftedRep"#;

lvl37_rC17 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl36_rC16;

lvl38_rC18 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SumRep "#;

lvl39_rC19 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TupleRep "#;

lvl40_rC1a :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "VecRep "#;

GHC.Show.$fShowRuntimeRep_$cshowsPrec [Occ=LoopBreaker]
  :: GHC.Types.Int -> GHC.Types.RuntimeRep -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,1*U(U)><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [a_sLjb ds_sLjc eta_sLjd]
        case ds_sLjc of {
          GHC.Types.VecRep b1_sLjf [Occ=Once] b2_sLjg [Occ=Once] ->
              case a_sLjb of {
                GHC.Types.I# x_sLji [Occ=Once] ->
                    let {
                      p_sLjj [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
                      [LclId, Arity=1, Str=<L,1*U>, Unf=OtherCon []] =
                          sat-only [b1_sLjf b2_sLjg] \r [x1_sLjk]
                              let {
                                sat_sLjn [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [b1_sLjf b2_sLjg x1_sLjk] \u []
                                        let {
                                          sat_sLjl [Occ=Once] :: [GHC.Types.Char]
                                          [LclId] =
                                              [b2_sLjg x1_sLjk] \u []
                                                  GHC.Show.$w$cshowsPrec10 b2_sLjg x1_sLjk; } in
                                        let {
                                          sat_sLjm [Occ=Once] :: GHC.Base.String
                                          [LclId] =
                                              CCCS :! [GHC.Show.showSpace1 sat_sLjl];
                                        } in  GHC.Show.$w$cshowsPrec9 b1_sLjf sat_sLjm;
                              } in  GHC.CString.unpackAppendCString# lvl40_rC1a sat_sLjn;
                    } in 
                      case >=# [x_sLji 11#] of {
                        __DEFAULT -> p_sLjj eta_sLjd;
                        1# ->
                            let {
                              sat_sLjq [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [eta_sLjd p_sLjj] \u []
                                      let {
                                        sat_sLjp [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [GHC.Show.$fShow(,)2 eta_sLjd];
                                      } in  p_sLjj sat_sLjp;
                            } in  : [GHC.Show.$fShow(,)4 sat_sLjq];
                      };
              };
          GHC.Types.TupleRep b1_sLjr [Occ=Once!] ->
              case a_sLjb of {
                GHC.Types.I# x_sLjt [Occ=Once] ->
                    let {
                      p_sLju [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
                      [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                          sat-only [b1_sLjr] \r [x1_sLjv]
                              let {
                                sat_sLjJ [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [b1_sLjr x1_sLjv] \u []
                                        case b1_sLjr of {
                                          [] ->
                                              GHC.CString.unpackAppendCString#
                                                  GHC.Show.showList__4 x1_sLjv;
                                          : x2_sLjx [Occ=Once] xs_sLjy [Occ=Once] ->
                                              let {
                                                sat_sLjI [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [x1_sLjv x2_sLjx xs_sLjy] \u []
                                                        let {
                                                          sat_sLjH [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              [x1_sLjv xs_sLjy] \u []
                                                                  let {
                                                                    lvl45_sLjz [Occ=OnceL]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId, Unf=OtherCon []] =
                                                                        CCCS :! [GHC.Show.showList__2
                                                                                 x1_sLjv]; } in
                                                                  let {
                                                                    showl_sLjA [Occ=LoopBreaker]
                                                                      :: [GHC.Types.RuntimeRep]
                                                                         -> GHC.Base.String
                                                                    [LclId,
                                                                     Arity=1,
                                                                     Str=<S,1*U>,
                                                                     Unf=OtherCon []] =
                                                                        sat-only [lvl45_sLjz
                                                                                  showl_sLjA] \r [ds1_sLjB]
                                                                            case ds1_sLjB of {
                                                                              [] -> lvl45_sLjz;
                                                                              : y_sLjD [Occ=Once]
                                                                                ys_sLjE [Occ=Once] ->
                                                                                  let {
                                                                                    sat_sLjG [Occ=Once]
                                                                                      :: [GHC.Types.Char]
                                                                                    [LclId] =
                                                                                        [showl_sLjA
                                                                                         y_sLjD
                                                                                         ys_sLjE] \u []
                                                                                            let {
                                                                                              sat_sLjF [Occ=Once]
                                                                                                :: GHC.Base.String
                                                                                              [LclId] =
                                                                                                  [showl_sLjA
                                                                                                   ys_sLjE] \u []
                                                                                                      showl_sLjA
                                                                                                          ys_sLjE;
                                                                                            } in 
                                                                                              GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                                                                                  GHC.Show.$fShow(,)1
                                                                                                  y_sLjD
                                                                                                  sat_sLjF;
                                                                                  } in 
                                                                                    : [GHC.Show.showList__1
                                                                                       sat_sLjG];
                                                                            };
                                                                  } in  showl_sLjA xs_sLjy;
                                                        } in 
                                                          GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                                              GHC.Show.$fShow(,)1 x2_sLjx sat_sLjH;
                                              } in  : [GHC.Show.showList__3 sat_sLjI];
                                        };
                              } in  GHC.CString.unpackAppendCString# lvl39_rC19 sat_sLjJ;
                    } in 
                      case >=# [x_sLjt 11#] of {
                        __DEFAULT -> p_sLju eta_sLjd;
                        1# ->
                            let {
                              sat_sLjM [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [eta_sLjd p_sLju] \u []
                                      let {
                                        sat_sLjL [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [GHC.Show.$fShow(,)2 eta_sLjd];
                                      } in  p_sLju sat_sLjL;
                            } in  : [GHC.Show.$fShow(,)4 sat_sLjM];
                      };
              };
          GHC.Types.SumRep b1_sLjN [Occ=Once!] ->
              case a_sLjb of {
                GHC.Types.I# x_sLjP [Occ=Once] ->
                    let {
                      p_sLjQ [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
                      [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                          sat-only [b1_sLjN] \r [x1_sLjR]
                              let {
                                sat_sLk5 [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [b1_sLjN x1_sLjR] \u []
                                        case b1_sLjN of {
                                          [] ->
                                              GHC.CString.unpackAppendCString#
                                                  GHC.Show.showList__4 x1_sLjR;
                                          : x2_sLjT [Occ=Once] xs_sLjU [Occ=Once] ->
                                              let {
                                                sat_sLk4 [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [x1_sLjR x2_sLjT xs_sLjU] \u []
                                                        let {
                                                          sat_sLk3 [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              [x1_sLjR xs_sLjU] \u []
                                                                  let {
                                                                    lvl45_sLjV [Occ=OnceL]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId, Unf=OtherCon []] =
                                                                        CCCS :! [GHC.Show.showList__2
                                                                                 x1_sLjR]; } in
                                                                  let {
                                                                    showl_sLjW [Occ=LoopBreaker]
                                                                      :: [GHC.Types.RuntimeRep]
                                                                         -> GHC.Base.String
                                                                    [LclId,
                                                                     Arity=1,
                                                                     Str=<S,1*U>,
                                                                     Unf=OtherCon []] =
                                                                        sat-only [lvl45_sLjV
                                                                                  showl_sLjW] \r [ds1_sLjX]
                                                                            case ds1_sLjX of {
                                                                              [] -> lvl45_sLjV;
                                                                              : y_sLjZ [Occ=Once]
                                                                                ys_sLk0 [Occ=Once] ->
                                                                                  let {
                                                                                    sat_sLk2 [Occ=Once]
                                                                                      :: [GHC.Types.Char]
                                                                                    [LclId] =
                                                                                        [showl_sLjW
                                                                                         y_sLjZ
                                                                                         ys_sLk0] \u []
                                                                                            let {
                                                                                              sat_sLk1 [Occ=Once]
                                                                                                :: GHC.Base.String
                                                                                              [LclId] =
                                                                                                  [showl_sLjW
                                                                                                   ys_sLk0] \u []
                                                                                                      showl_sLjW
                                                                                                          ys_sLk0;
                                                                                            } in 
                                                                                              GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                                                                                  GHC.Show.$fShow(,)1
                                                                                                  y_sLjZ
                                                                                                  sat_sLk1;
                                                                                  } in 
                                                                                    : [GHC.Show.showList__1
                                                                                       sat_sLk2];
                                                                            };
                                                                  } in  showl_sLjW xs_sLjU;
                                                        } in 
                                                          GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                                              GHC.Show.$fShow(,)1 x2_sLjT sat_sLk3;
                                              } in  : [GHC.Show.showList__3 sat_sLk4];
                                        };
                              } in  GHC.CString.unpackAppendCString# lvl38_rC18 sat_sLk5;
                    } in 
                      case >=# [x_sLjP 11#] of {
                        __DEFAULT -> p_sLjQ eta_sLjd;
                        1# ->
                            let {
                              sat_sLk8 [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [eta_sLjd p_sLjQ] \u []
                                      let {
                                        sat_sLk7 [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [GHC.Show.$fShow(,)2 eta_sLjd];
                                      } in  p_sLjQ sat_sLk7;
                            } in  : [GHC.Show.$fShow(,)4 sat_sLk8];
                      };
              };
          GHC.Types.LiftedRep -> GHC.Base.++ lvl37_rC17 eta_sLjd;
          GHC.Types.UnliftedRep -> GHC.Base.++ lvl35_rC15 eta_sLjd;
          GHC.Types.IntRep -> GHC.Base.++ lvl33_rC13 eta_sLjd;
          GHC.Types.WordRep -> GHC.Base.++ lvl31_rC11 eta_sLjd;
          GHC.Types.Int64Rep -> GHC.Base.++ lvl29_rC0Z eta_sLjd;
          GHC.Types.Word64Rep -> GHC.Base.++ lvl27_rC0X eta_sLjd;
          GHC.Types.AddrRep -> GHC.Base.++ lvl25_rC0V eta_sLjd;
          GHC.Types.FloatRep -> GHC.Base.++ lvl23_rC0T eta_sLjd;
          GHC.Types.DoubleRep -> GHC.Base.++ lvl21_rC0R eta_sLjd;
        };

GHC.Show.$fShowRuntimeRep1
  :: GHC.Types.RuntimeRep -> GHC.Show.ShowS
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Show.$fShowRuntimeRep_$cshowsPrec
            GHC.Show.$fShow(,)1 eta_B2 eta_B1;

GHC.Show.$fShowRuntimeRep_$cshowList
  :: [GHC.Types.RuntimeRep] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sLk9 s_sLka]
        GHC.Show.showList__ GHC.Show.$fShowRuntimeRep1 ls_sLk9 s_sLka;

GHC.Show.$fShowRuntimeRep_$cshow
  :: GHC.Types.RuntimeRep -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sLkb]
        GHC.Show.$fShowRuntimeRep_$cshowsPrec
            GHC.Show.$fShow(,)1 x_sLkb GHC.Types.[];

GHC.Show.$fShowRuntimeRep [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.RuntimeRep
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                    GHC.Show.$fShowRuntimeRep_$cshow
                                    GHC.Show.$fShowRuntimeRep_$cshowList];

GHC.Show.$fShowCallStack2
  :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc) -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U(U,U(U,U,U,U(U),U(U),U(U),U(U)))><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sLkc w1_sLkd]
        case w_sLkc of {
          (,) ww1_sLkf [Occ=Once] ww2_sLkg [Occ=Once] ->
              case GHC.Show.$w$s$cshowsPrec ww1_sLkf ww2_sLkg w1_sLkd of {
                (#,#) ww4_sLki [Occ=Once] ww5_sLkj [Occ=Once] ->
                    : [ww4_sLki ww5_sLkj];
              };
        };

GHC.Show.$fShowCallStack_$cshowsPrec
  :: GHC.Types.Int -> GHC.Stack.Types.CallStack -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,A><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sLkk eta_sLkl]
        let {
          ls_sLkm [Occ=Once] :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
          [LclId] =
              [eta_sLkl] \u [] GHC.Stack.Types.getCallStack eta_sLkl;
        } in  GHC.Show.showList__ GHC.Show.$fShowCallStack2 ls_sLkm;

GHC.Show.$fShowCallStack3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.showList__4;

lvl41_rC1b :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.showList__2 GHC.Types.[]];

GHC.Show.$fShowCallStack_showl [Occ=LoopBreaker]
  :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)] -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>m2, Unf=OtherCon []] =
    [] \r [ds_sLko]
        case ds_sLko of {
          [] -> lvl41_rC1b;
          : y_sLkq [Occ=Once!] ys_sLkr [Occ=Once] ->
              let {
                sat_sLkz [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [y_sLkq ys_sLkr] \u []
                        case y_sLkq of {
                          (,) ww1_sLkt [Occ=Once] ww2_sLku [Occ=Once] ->
                              let {
                                sat_sLkv [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    [ys_sLkr] \u [] GHC.Show.$fShowCallStack_showl ys_sLkr;
                              } in 
                                case GHC.Show.$w$s$cshowsPrec ww1_sLkt ww2_sLku sat_sLkv of {
                                  (#,#) ww4_sLkx [Occ=Once] ww5_sLky [Occ=Once] ->
                                      : [ww4_sLkx ww5_sLky];
                                };
                        };
              } in  : [GHC.Show.showList__1 sat_sLkz];
        };

GHC.Show.$fShowCallStack_$cshow
  :: GHC.Stack.Types.CallStack -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sLkA]
        case GHC.Stack.Types.getCallStack x_sLkA of {
          [] -> GHC.Show.$fShowCallStack3;
          : x1_sLkC [Occ=Once!] xs_sLkD [Occ=Once] ->
              let {
                sat_sLkL [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [x1_sLkC xs_sLkD] \u []
                        case x1_sLkC of {
                          (,) ww1_sLkF [Occ=Once] ww2_sLkG [Occ=Once] ->
                              let {
                                sat_sLkH [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    [xs_sLkD] \u [] GHC.Show.$fShowCallStack_showl xs_sLkD;
                              } in 
                                case GHC.Show.$w$s$cshowsPrec ww1_sLkF ww2_sLkG sat_sLkH of {
                                  (#,#) ww4_sLkJ [Occ=Once] ww5_sLkK [Occ=Once] ->
                                      : [ww4_sLkJ ww5_sLkK];
                                };
                        };
              } in  : [GHC.Show.showList__3 sat_sLkL];
        };

GHC.Show.$fShowCallStack1
  :: GHC.Stack.Types.CallStack -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=1, Str=<L,1*U>, Unf=OtherCon []] =
    [] \r [x_sLkM]
        let {
          ls_sLkN [Occ=Once] :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
          [LclId] =
              [x_sLkM] \u [] GHC.Stack.Types.getCallStack x_sLkM;
        } in  GHC.Show.showList__ GHC.Show.$fShowCallStack2 ls_sLkN;

GHC.Show.$fShowCallStack_$cshowList
  :: [GHC.Stack.Types.CallStack] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sLkP s_sLkQ]
        GHC.Show.showList__ GHC.Show.$fShowCallStack1 ls_sLkP s_sLkQ;

GHC.Show.$fShowCallStack [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Stack.Types.CallStack
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowCallStack_$cshowsPrec
                                    GHC.Show.$fShowCallStack_$cshow
                                    GHC.Show.$fShowCallStack_$cshowList];

GHC.Show.$fShowNonEmpty2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [6#];

GHC.Show.$fShowNonEmpty1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " :| "#;

GHC.Show.$w$cshowsPrec7 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Show.Show a =>
     GHC.Prim.Int# -> a -> [a] -> GHC.Show.ShowS
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(C1(C(U))),A,1*C1(C(U)))><S,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sLkR ww_sLkS ww1_sLkT ww2_sLkU]
        let {
          f12_sLkV [Occ=OnceL*!, Dmd=<L,C(U)>]
            :: GHC.Base.String -> GHC.Base.String
          [LclId] =
              [w_sLkR ww1_sLkT] \u []
                  GHC.Show.showsPrec w_sLkR GHC.Show.$fShowNonEmpty2 ww1_sLkT; } in
        let {
          g_sLkW [Occ=OnceL*!, Dmd=<L,C(U)>]
            :: GHC.Base.String -> GHC.Base.String
          [LclId] =
              [w_sLkR ww2_sLkU] \u [] GHC.Show.showList w_sLkR ww2_sLkU;
        } in 
          case >=# [ww_sLkS 6#] of {
            __DEFAULT ->
                let {
                  sat_sLl1 [Occ=OnceT[0]] :: GHC.Base.String -> GHC.Base.String
                  [LclId] =
                      [f12_sLkV g_sLkW] \r [x_sLkY]
                          let {
                            sat_sLl0 [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [g_sLkW x_sLkY] \u []
                                    let {
                                      sat_sLkZ [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [g_sLkW x_sLkY] \u [] g_sLkW x_sLkY;
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          GHC.Show.$fShowNonEmpty1 sat_sLkZ;
                          } in  f12_sLkV sat_sLl0;
                } in  sat_sLl1;
            1# ->
                let {
                  sat_sLl7 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                  [LclId] =
                      [f12_sLkV g_sLkW] \r [x_sLl2]
                          let {
                            sat_sLl6 [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [f12_sLkV g_sLkW x_sLl2] \u []
                                    let {
                                      sat_sLl5 [Occ=Once] :: GHC.Base.String
                                      [LclId] =
                                          [g_sLkW x_sLl2] \u []
                                              let {
                                                sat_sLl4 [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [g_sLkW x_sLl2] \u []
                                                        let {
                                                          sat_sLl3 [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2 x_sLl2];
                                                        } in  g_sLkW sat_sLl3;
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    GHC.Show.$fShowNonEmpty1 sat_sLl4;
                                    } in  f12_sLkV sat_sLl5;
                          } in  : [GHC.Show.$fShow(,)4 sat_sLl6];
                } in  sat_sLl7;
          };

GHC.Show.$fShowNonEmpty_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Show.Show a =>
     GHC.Types.Int -> GHC.Base.NonEmpty a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(C(U))),A,C(C(U)))><S(S),1*U(U)><S,1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [w_sLl8 w1_sLl9 w2_sLla]
        case w1_sLl9 of {
          GHC.Types.I# ww1_sLlc [Occ=Once] ->
              case w2_sLla of {
                GHC.Base.:| ww3_sLle [Occ=Once] ww4_sLlf [Occ=Once] ->
                    GHC.Show.$w$cshowsPrec7 w_sLl8 ww1_sLlc ww3_sLle ww4_sLlf;
              };
        };

GHC.Show.$w$cshow [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Show.Show a => a -> [a] -> GHC.Base.String
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(C(C(C(S)))LL),U(1*C1(C1(C1(U))),A,1*C1(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sLlg ww_sLlh ww1_sLli]
        let {
          sat_sLlk [Occ=Once] :: GHC.Base.String
          [LclId] =
              [w_sLlg ww1_sLli] \u []
                  let {
                    sat_sLlj [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [w_sLlg ww1_sLli] \u []
                            GHC.Show.showList w_sLlg ww1_sLli GHC.Types.[];
                  } in 
                    GHC.CString.unpackAppendCString# GHC.Show.$fShowNonEmpty1 sat_sLlj;
        } in 
          GHC.Show.showsPrec
              w_sLlg GHC.Show.$fShowNonEmpty2 ww_sLlh sat_sLlk;

GHC.Show.$fShowNonEmpty_$cshow [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Show.Show a =>
     GHC.Base.NonEmpty a -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(C(C(C(S)))LL),U(C(C1(C1(U))),A,C(C1(U)))><S,1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [w_sLll w1_sLlm]
        case w1_sLlm of {
          GHC.Base.:| ww1_sLlo [Occ=Once] ww2_sLlp [Occ=Once] ->
              GHC.Show.$w$cshow w_sLll ww1_sLlo ww2_sLlp;
        };

GHC.Show.$fShowNonEmpty_$cshowList
  :: forall a.
     GHC.Show.Show a =>
     [GHC.Base.NonEmpty a] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(C(U))),A,C(C(U)))><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sLlq ls_sLlr s_sLls]
        let {
          sat_sLlx [Occ=Once] :: GHC.Base.NonEmpty a_aztY -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLlq] \r [w_sLlt]
                  case w_sLlt of {
                    GHC.Base.:| ww1_sLlv [Occ=Once] ww2_sLlw [Occ=Once] ->
                        GHC.Show.$w$cshowsPrec7 $dShow_sLlq 0# ww1_sLlv ww2_sLlw;
                  };
        } in  GHC.Show.showList__ sat_sLlx ls_sLlr s_sLls;

GHC.Show.$fShowNonEmpty [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show a => GHC.Show.Show (GHC.Base.NonEmpty a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(C(U))),A,C(C(U)))>m] =
    [] \r [$dShow_sLly]
        let {
          sat_sLlB [Occ=Once] :: [GHC.Base.NonEmpty a_aztY] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLly] \r [eta_B2 eta_B1]
                  GHC.Show.$fShowNonEmpty_$cshowList $dShow_sLly eta_B2 eta_B1; } in
        let {
          sat_sLlA [Occ=Once] :: GHC.Base.NonEmpty a_aztY -> GHC.Base.String
          [LclId] =
              [$dShow_sLly] \r [eta_B1]
                  GHC.Show.$fShowNonEmpty_$cshow $dShow_sLly eta_B1; } in
        let {
          sat_sLlz [Occ=Once]
            :: GHC.Types.Int -> GHC.Base.NonEmpty a_aztY -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLly] \r [eta_B2 eta_B1]
                  GHC.Show.$fShowNonEmpty_$cshowsPrec $dShow_sLly eta_B2 eta_B1;
        } in  GHC.Show.C:Show [sat_sLlz sat_sLlA sat_sLlB];

GHC.Show.$fShowMaybe5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Nothing"#;

GHC.Show.$fShowMaybe4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowMaybe5;

GHC.Show.$fShowMaybe3 :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.++ GHC.Show.$fShowMaybe4 eta_B1;

GHC.Show.$fShowMaybe2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Just "#;

GHC.Show.$fShowMaybe1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowMaybe2;

GHC.Show.$fShowMaybe_$cshowsPrec
  :: forall a.
     GHC.Show.Show a =>
     GHC.Types.Int -> GHC.Base.Maybe a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sLlC ds_sLlD ds1_sLlE]
        case ds1_sLlE of {
          GHC.Base.Nothing -> GHC.Show.$fShowMaybe3;
          GHC.Base.Just b1_sLlG [Occ=Once] ->
              case ds_sLlD of {
                GHC.Types.I# x_sLlI [Occ=Once] ->
                    let {
                      g_sLlJ [Occ=OnceL*!, Dmd=<L,C(U)>]
                        :: GHC.Base.String -> GHC.Base.String
                      [LclId] =
                          [$dShow_sLlC b1_sLlG] \u []
                              GHC.Show.showsPrec $dShow_sLlC GHC.Show.appPrec1 b1_sLlG;
                    } in 
                      case >=# [x_sLlI 11#] of {
                        __DEFAULT ->
                            let {
                              sat_sLlN [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_sLlJ] \r [x1_sLlL]
                                      let {
                                        sat_sLlM [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_sLlJ x1_sLlL] \s [] g_sLlJ x1_sLlL;
                                      } in  GHC.Base.++ GHC.Show.$fShowMaybe1 sat_sLlM;
                            } in  sat_sLlN;
                        1# ->
                            let {
                              sat_sLlS [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_sLlJ] \r [x1_sLlO]
                                      let {
                                        sat_sLlR [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_sLlJ x1_sLlO] \u []
                                                let {
                                                  sat_sLlQ [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [g_sLlJ x1_sLlO] \s []
                                                          let {
                                                            sat_sLlP [Occ=Once] :: GHC.Base.String
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)2
                                                                         x1_sLlO];
                                                          } in  g_sLlJ sat_sLlP;
                                                } in  GHC.Base.++ GHC.Show.$fShowMaybe1 sat_sLlQ;
                                      } in  : [GHC.Show.$fShow(,)4 sat_sLlR];
                            } in  sat_sLlS;
                      };
              };
        };

GHC.Show.$fShowMaybe_$cshow
  :: forall a. GHC.Show.Show a => GHC.Base.Maybe a -> GHC.Base.String
[GblId,
 Arity=2,
 Str=<L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sLlT x_sLlU]
        case x_sLlU of {
          GHC.Base.Nothing -> GHC.Show.$fShowMaybe4;
          GHC.Base.Just b1_sLlW [Occ=Once] ->
              let {
                sat_sLlX [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sLlT b1_sLlW] \s []
                        GHC.Show.showsPrec
                            $dShow_sLlT GHC.Show.appPrec1 b1_sLlW GHC.Types.[];
              } in  GHC.Base.++ GHC.Show.$fShowMaybe1 sat_sLlX;
        };

GHC.Show.$fShowMaybe_$cshowList
  :: forall a.
     GHC.Show.Show a =>
     [GHC.Base.Maybe a] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sLlY ls_sLlZ s_sLm0]
        let {
          sat_sLm1 [Occ=Once] :: GHC.Base.Maybe a_azus -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLlY] \r [eta_B1]
                  GHC.Show.$fShowMaybe_$cshowsPrec
                      $dShow_sLlY GHC.Show.$fShow(,)1 eta_B1;
        } in  GHC.Show.showList__ sat_sLm1 ls_sLlZ s_sLm0;

GHC.Show.$fShowMaybe [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show a => GHC.Show.Show (GHC.Base.Maybe a)
[GblId[DFunId], Arity=1, Str=<L,U(C(C1(C(U))),A,A)>m] =
    [] \r [$dShow_sLm2]
        let {
          sat_sLm5 [Occ=Once] :: [GHC.Base.Maybe a_azus] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLm2] \r [eta_B2 eta_B1]
                  GHC.Show.$fShowMaybe_$cshowList $dShow_sLm2 eta_B2 eta_B1; } in
        let {
          sat_sLm4 [Occ=Once] :: GHC.Base.Maybe a_azus -> GHC.Base.String
          [LclId] =
              [$dShow_sLm2] \r [eta_B1]
                  GHC.Show.$fShowMaybe_$cshow $dShow_sLm2 eta_B1; } in
        let {
          sat_sLm3 [Occ=Once]
            :: GHC.Types.Int -> GHC.Base.Maybe a_azus -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLm2] \r [eta_B2 eta_B1]
                  GHC.Show.$fShowMaybe_$cshowsPrec $dShow_sLm2 eta_B2 eta_B1;
        } in  GHC.Show.C:Show [sat_sLm3 sat_sLm4 sat_sLm5];

f_rC1c :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepTypeLitD "#;

f1_rC1d :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f_rC1c;

f2_rC1e :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepTypeLitS "#;

f3_rC1f :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f2_rC1e;

f4_rC1g :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepTYPE "#;

f5_rC1h :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f4_rC1g;

f6_rC1i :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepFun "#;

f7_rC1j :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f6_rC1i;

f8_rC1k :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepApp "#;

f9_rC1l :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f8_rC1k;

f10_rC1m :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepVar "#;

f11_rC1n :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f10_rC1m;

lvl42_rC1o :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " "#;

lvl43_rC1p :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepTyConApp "#;

GHC.Show.$w$cshowsPrec5 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> GHC.Types.KindRep -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_sLm6 w_sLm7]
        case w_sLm7 of {
          GHC.Types.KindRepTyConApp p_sLm9 [Occ=Once!] q_sLma [Occ=OnceL!] ->
              let {
                f12_sLmb [Occ=OnceL!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [p_sLm9] \u []
                        case p_sLm9 of {
                          GHC.Types.TyCon _ [Occ=Dead]
                                          _ [Occ=Dead]
                                          _ [Occ=Dead]
                                          tc_name_sLmg [Occ=Once!]
                                          _ [Occ=Dead]
                                          _ [Occ=Dead] ->
                              case tc_name_sLmg of {
                                GHC.Types.TrNameS s_sLmk [Occ=Once] ->
                                    let {
                                      sat_sLml [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [s_sLmk] \u [] GHC.CString.unpackCString# s_sLmk;
                                    } in  GHC.Base.++ sat_sLml;
                                GHC.Types.TrNameD s_sLmm [Occ=Once] -> GHC.Base.++ s_sLmm;
                              };
                        }; } in
              let {
                p1_sLmn [Occ=OnceL*] :: GHC.Show.ShowS
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    [q_sLma f12_sLmb] \r [x_sLmo]
                        let {
                          sat_sLmE [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [q_sLma f12_sLmb x_sLmo] \u []
                                  let {
                                    sat_sLmD [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        [q_sLma x_sLmo] \u []
                                            let {
                                              sat_sLmC [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  [q_sLma x_sLmo] \u []
                                                      case q_sLma of {
                                                        [] ->
                                                            GHC.CString.unpackAppendCString#
                                                                GHC.Show.showList__4 x_sLmo;
                                                        : x1_sLmq [Occ=Once] xs_sLmr [Occ=Once] ->
                                                            let {
                                                              sat_sLmB [Occ=Once]
                                                                :: [GHC.Types.Char]
                                                              [LclId] =
                                                                  [x_sLmo x1_sLmq xs_sLmr] \u []
                                                                      let {
                                                                        sat_sLmA [Occ=Once]
                                                                          :: GHC.Base.String
                                                                        [LclId] =
                                                                            [x_sLmo xs_sLmr] \u []
                                                                                let {
                                                                                  lvl45_sLms [Occ=OnceL]
                                                                                    :: [GHC.Types.Char]
                                                                                  [LclId,
                                                                                   Unf=OtherCon []] =
                                                                                      CCCS :! [GHC.Show.showList__2
                                                                                               x_sLmo]; } in
                                                                                let {
                                                                                  showl_sLmt [Occ=LoopBreaker]
                                                                                    :: [GHC.Types.KindRep]
                                                                                       -> GHC.Base.String
                                                                                  [LclId,
                                                                                   Arity=1,
                                                                                   Str=<S,1*U>,
                                                                                   Unf=OtherCon []] =
                                                                                      sat-only [lvl45_sLms
                                                                                                showl_sLmt] \r [ds_sLmu]
                                                                                          case
                                                                                              ds_sLmu
                                                                                          of
                                                                                          { [] ->
                                                                                                lvl45_sLms;
                                                                                            : y_sLmw [Occ=Once]
                                                                                              ys_sLmx [Occ=Once] ->
                                                                                                let {
                                                                                                  sat_sLmz [Occ=Once]
                                                                                                    :: [GHC.Types.Char]
                                                                                                  [LclId] =
                                                                                                      [showl_sLmt
                                                                                                       y_sLmw
                                                                                                       ys_sLmx] \u []
                                                                                                          let {
                                                                                                            sat_sLmy [Occ=Once]
                                                                                                              :: GHC.Base.String
                                                                                                            [LclId] =
                                                                                                                [showl_sLmt
                                                                                                                 ys_sLmx] \u []
                                                                                                                    showl_sLmt
                                                                                                                        ys_sLmx;
                                                                                                          } in 
                                                                                                            GHC.Show.$w$cshowsPrec5
                                                                                                                0#
                                                                                                                y_sLmw
                                                                                                                sat_sLmy;
                                                                                                } in 
                                                                                                  : [GHC.Show.showList__1
                                                                                                     sat_sLmz];
                                                                                          };
                                                                                } in 
                                                                                  showl_sLmt
                                                                                      xs_sLmr;
                                                                      } in 
                                                                        GHC.Show.$w$cshowsPrec5
                                                                            0# x1_sLmq sat_sLmA;
                                                            } in  : [GHC.Show.showList__3 sat_sLmB];
                                                      };
                                            } in 
                                              GHC.CString.unpackAppendCString# lvl42_rC1o sat_sLmC;
                                  } in  f12_sLmb sat_sLmD;
                        } in  GHC.CString.unpackAppendCString# lvl43_rC1p sat_sLmE;
              } in 
                case ># [ww_sLm6 10#] of {
                  __DEFAULT -> p1_sLmn;
                  1# ->
                      let {
                        sat_sLmJ [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [p1_sLmn] \r [x_sLmG]
                                let {
                                  sat_sLmI [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [p1_sLmn x_sLmG] \u []
                                          let {
                                            sat_sLmH [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                CCCS :! [GHC.Show.$fShow(,)2 x_sLmG];
                                          } in  p1_sLmn sat_sLmH;
                                } in  : [GHC.Show.$fShow(,)4 sat_sLmI];
                      } in  sat_sLmJ;
                };
          GHC.Types.KindRepVar dt_sLmK ->
              case ># [ww_sLm6 10#] of {
                __DEFAULT ->
                    let {
                      sat_sLmX [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [dt_sLmK] \r [x_sLmM]
                              let {
                                sat_sLmW [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                [LclId] =
                                    [dt_sLmK x_sLmM] \s []
                                        case <# [dt_sLmK 0#] of {
                                          __DEFAULT ->
                                              case GHC.Show.$witos dt_sLmK x_sLmM of {
                                                (#,#) ww2_sLmP [Occ=Once] ww3_sLmQ [Occ=Once] ->
                                                    : [ww2_sLmP ww3_sLmQ];
                                              };
                                          1# ->
                                              let {
                                                sat_sLmV [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [dt_sLmK x_sLmM] \u []
                                                        let {
                                                          sat_sLmR [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2 x_sLmM];
                                                        } in 
                                                          case GHC.Show.$witos dt_sLmK sat_sLmR of {
                                                            (#,#) ww2_sLmT [Occ=Once]
                                                                  ww3_sLmU [Occ=Once] ->
                                                                : [ww2_sLmT ww3_sLmU];
                                                          };
                                              } in  : [GHC.Show.$fShow(,)4 sat_sLmV];
                                        };
                              } in  GHC.Base.++ f11_rC1n sat_sLmW;
                    } in  sat_sLmX;
                1# ->
                    let {
                      sat_sLnc [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [dt_sLmK] \r [x_sLmY]
                              let {
                                sat_sLnb [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [dt_sLmK x_sLmY] \u []
                                        let {
                                          sat_sLna [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                          [LclId] =
                                              [dt_sLmK x_sLmY] \s []
                                                  case <# [dt_sLmK 0#] of {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_sLn0 [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2 x_sLmY];
                                                        } in 
                                                          case GHC.Show.$witos dt_sLmK sat_sLn0 of {
                                                            (#,#) ww2_sLn2 [Occ=Once]
                                                                  ww3_sLn3 [Occ=Once] ->
                                                                : [ww2_sLn2 ww3_sLn3];
                                                          };
                                                    1# ->
                                                        let {
                                                          sat_sLn9 [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [dt_sLmK x_sLmY] \u []
                                                                  let {
                                                                    sat_sLn4 [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)2
                                                                                 x_sLmY]; } in
                                                                  let {
                                                                    sat_sLn5 [Occ=Once]
                                                                      :: GHC.Base.String
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)2
                                                                                 sat_sLn4];
                                                                  } in 
                                                                    case
                                                                        GHC.Show.$witos
                                                                            dt_sLmK sat_sLn5
                                                                    of
                                                                    { (#,#) ww2_sLn7 [Occ=Once]
                                                                            ww3_sLn8 [Occ=Once] ->
                                                                          : [ww2_sLn7 ww3_sLn8];
                                                                    };
                                                        } in  : [GHC.Show.$fShow(,)4 sat_sLn9];
                                                  };
                                        } in  GHC.Base.++ f11_rC1n sat_sLna;
                              } in  : [GHC.Show.$fShow(,)4 sat_sLnb];
                    } in  sat_sLnc;
              };
          GHC.Types.KindRepApp p_sLnd [Occ=Once] q_sLne [Occ=Once] ->
              let {
                f12_sLnf [Occ=OnceL*!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [p_sLnd] \u [] GHC.Show.$w$cshowsPrec5 11# p_sLnd; } in
              let {
                g_sLng [Occ=OnceL*!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [q_sLne] \u [] GHC.Show.$w$cshowsPrec5 11# q_sLne;
              } in 
                case ># [ww_sLm6 10#] of {
                  __DEFAULT ->
                      let {
                        sat_sLnm [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [f12_sLnf g_sLng] \r [x_sLni]
                                let {
                                  sat_sLnl [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [f12_sLnf g_sLng x_sLni] \s []
                                          let {
                                            sat_sLnk [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                [g_sLng x_sLni] \u []
                                                    let {
                                                      sat_sLnj [Occ=Once] :: [GHC.Types.Char]
                                                      [LclId] =
                                                          [g_sLng x_sLni] \u [] g_sLng x_sLni;
                                                    } in 
                                                      GHC.CString.unpackAppendCString#
                                                          lvl42_rC1o sat_sLnj;
                                          } in  f12_sLnf sat_sLnk;
                                } in  GHC.Base.++ f9_rC1l sat_sLnl;
                      } in  sat_sLnm;
                  1# ->
                      let {
                        sat_sLnt [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [f12_sLnf g_sLng] \r [x_sLnn]
                                let {
                                  sat_sLns [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [f12_sLnf g_sLng x_sLnn] \u []
                                          let {
                                            sat_sLnr [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                            [LclId] =
                                                [f12_sLnf g_sLng x_sLnn] \s []
                                                    let {
                                                      sat_sLnq [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [g_sLng x_sLnn] \u []
                                                              let {
                                                                sat_sLnp [Occ=Once]
                                                                  :: [GHC.Types.Char]
                                                                [LclId] =
                                                                    [g_sLng x_sLnn] \u []
                                                                        let {
                                                                          sat_sLno [Occ=Once]
                                                                            :: GHC.Base.String
                                                                          [LclId] =
                                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                                       x_sLnn];
                                                                        } in  g_sLng sat_sLno;
                                                              } in 
                                                                GHC.CString.unpackAppendCString#
                                                                    lvl42_rC1o sat_sLnp;
                                                    } in  f12_sLnf sat_sLnq;
                                          } in  GHC.Base.++ f9_rC1l sat_sLnr;
                                } in  : [GHC.Show.$fShow(,)4 sat_sLns];
                      } in  sat_sLnt;
                };
          GHC.Types.KindRepFun p_sLnu [Occ=Once] q_sLnv [Occ=Once] ->
              let {
                f12_sLnw [Occ=OnceL*!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [p_sLnu] \u [] GHC.Show.$w$cshowsPrec5 11# p_sLnu; } in
              let {
                g_sLnx [Occ=OnceL*!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [q_sLnv] \u [] GHC.Show.$w$cshowsPrec5 11# q_sLnv;
              } in 
                case ># [ww_sLm6 10#] of {
                  __DEFAULT ->
                      let {
                        sat_sLnD [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [f12_sLnw g_sLnx] \r [x_sLnz]
                                let {
                                  sat_sLnC [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [f12_sLnw g_sLnx x_sLnz] \s []
                                          let {
                                            sat_sLnB [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                [g_sLnx x_sLnz] \u []
                                                    let {
                                                      sat_sLnA [Occ=Once] :: [GHC.Types.Char]
                                                      [LclId] =
                                                          [g_sLnx x_sLnz] \u [] g_sLnx x_sLnz;
                                                    } in 
                                                      GHC.CString.unpackAppendCString#
                                                          lvl42_rC1o sat_sLnA;
                                          } in  f12_sLnw sat_sLnB;
                                } in  GHC.Base.++ f7_rC1j sat_sLnC;
                      } in  sat_sLnD;
                  1# ->
                      let {
                        sat_sLnK [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [f12_sLnw g_sLnx] \r [x_sLnE]
                                let {
                                  sat_sLnJ [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [f12_sLnw g_sLnx x_sLnE] \u []
                                          let {
                                            sat_sLnI [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                            [LclId] =
                                                [f12_sLnw g_sLnx x_sLnE] \s []
                                                    let {
                                                      sat_sLnH [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [g_sLnx x_sLnE] \u []
                                                              let {
                                                                sat_sLnG [Occ=Once]
                                                                  :: [GHC.Types.Char]
                                                                [LclId] =
                                                                    [g_sLnx x_sLnE] \u []
                                                                        let {
                                                                          sat_sLnF [Occ=Once]
                                                                            :: GHC.Base.String
                                                                          [LclId] =
                                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                                       x_sLnE];
                                                                        } in  g_sLnx sat_sLnF;
                                                              } in 
                                                                GHC.CString.unpackAppendCString#
                                                                    lvl42_rC1o sat_sLnG;
                                                    } in  f12_sLnw sat_sLnH;
                                          } in  GHC.Base.++ f7_rC1j sat_sLnI;
                                } in  : [GHC.Show.$fShow(,)4 sat_sLnJ];
                      } in  sat_sLnK;
                };
          GHC.Types.KindRepTYPE rep_sLnL [Occ=OnceL*] ->
              case ># [ww_sLm6 10#] of {
                __DEFAULT ->
                    let {
                      sat_sLnP [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [rep_sLnL] \r [x_sLnN]
                              let {
                                sat_sLnO [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                [LclId] =
                                    [rep_sLnL x_sLnN] \s []
                                        GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                            GHC.Show.appPrec1 rep_sLnL x_sLnN;
                              } in  GHC.Base.++ f5_rC1h sat_sLnO;
                    } in  sat_sLnP;
                1# ->
                    let {
                      sat_sLnU [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [rep_sLnL] \r [x_sLnQ]
                              let {
                                sat_sLnT [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [rep_sLnL x_sLnQ] \u []
                                        let {
                                          sat_sLnS [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                          [LclId] =
                                              [rep_sLnL x_sLnQ] \s []
                                                  let {
                                                    sat_sLnR [Occ=Once] :: GHC.Base.String
                                                    [LclId] =
                                                        CCCS :! [GHC.Show.$fShow(,)2 x_sLnQ];
                                                  } in 
                                                    GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                                        GHC.Show.appPrec1 rep_sLnL sat_sLnR;
                                        } in  GHC.Base.++ f5_rC1h sat_sLnS;
                              } in  : [GHC.Show.$fShow(,)4 sat_sLnT];
                    } in  sat_sLnU;
              };
          GHC.Types.KindRepTypeLitS p_sLnV [Occ=OnceL*!]
                                    q_sLnW [Occ=OnceL] ->
              let {
                cs_sLnX [Occ=OnceL*] :: [GHC.Types.Char]
                [LclId] =
                    [q_sLnW] \u [] GHC.CString.unpackCString# q_sLnW;
              } in 
                case ># [ww_sLm6 10#] of {
                  __DEFAULT ->
                      let {
                        sat_sLoa [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [p_sLnV cs_sLnX] \r [x_sLnZ]
                                let {
                                  sat_sLo9 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [p_sLnV cs_sLnX x_sLnZ] \s []
                                          case p_sLnV of {
                                            GHC.Types.TypeLitSymbol ->
                                                let {
                                                  sat_sLo4 [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [cs_sLnX x_sLnZ] \s []
                                                          let {
                                                            sat_sLo2 [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [cs_sLnX x_sLnZ] \u []
                                                                    let {
                                                                      sat_sLo1 [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   x_sLnZ];
                                                                    } in 
                                                                      GHC.Show.showLitString
                                                                          cs_sLnX sat_sLo1; } in
                                                          let {
                                                            sat_sLo3 [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)3
                                                                         sat_sLo2];
                                                          } in 
                                                            GHC.CString.unpackAppendCString#
                                                                lvl42_rC1o sat_sLo3;
                                                } in 
                                                  GHC.Base.++ GHC.Show.$fShowTypeLitSort4 sat_sLo4;
                                            GHC.Types.TypeLitNat ->
                                                let {
                                                  sat_sLo8 [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [cs_sLnX x_sLnZ] \s []
                                                          let {
                                                            sat_sLo6 [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [cs_sLnX x_sLnZ] \u []
                                                                    let {
                                                                      sat_sLo5 [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   x_sLnZ];
                                                                    } in 
                                                                      GHC.Show.showLitString
                                                                          cs_sLnX sat_sLo5; } in
                                                          let {
                                                            sat_sLo7 [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)3
                                                                         sat_sLo6];
                                                          } in 
                                                            GHC.CString.unpackAppendCString#
                                                                lvl42_rC1o sat_sLo7;
                                                } in 
                                                  GHC.Base.++ GHC.Show.$fShowTypeLitSort2 sat_sLo8;
                                          };
                                } in  GHC.Base.++ f3_rC1f sat_sLo9;
                      } in  sat_sLoa;
                  1# ->
                      let {
                        sat_sLop [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [p_sLnV cs_sLnX] \r [x_sLob]
                                let {
                                  sat_sLoo [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [p_sLnV cs_sLnX x_sLob] \u []
                                          let {
                                            sat_sLon [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                            [LclId] =
                                                [p_sLnV cs_sLnX x_sLob] \s []
                                                    case p_sLnV of {
                                                      GHC.Types.TypeLitSymbol ->
                                                          let {
                                                            sat_sLoh [Occ=Once, Dmd=<L,1*U>]
                                                              :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [cs_sLnX x_sLob] \s []
                                                                    let {
                                                                      sat_sLof [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          [cs_sLnX x_sLob] \u []
                                                                              let {
                                                                                sat_sLod [Occ=Once]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    CCCS :! [GHC.Show.$fShow(,)2
                                                                                             x_sLob]; } in
                                                                              let {
                                                                                sat_sLoe [Occ=Once]
                                                                                  :: GHC.Base.String
                                                                                [LclId] =
                                                                                    CCCS :! [GHC.Show.$fShow(,)3
                                                                                             sat_sLod];
                                                                              } in 
                                                                                GHC.Show.showLitString
                                                                                    cs_sLnX
                                                                                    sat_sLoe; } in
                                                                    let {
                                                                      sat_sLog [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   sat_sLof];
                                                                    } in 
                                                                      GHC.CString.unpackAppendCString#
                                                                          lvl42_rC1o sat_sLog;
                                                          } in 
                                                            GHC.Base.++
                                                                GHC.Show.$fShowTypeLitSort4
                                                                sat_sLoh;
                                                      GHC.Types.TypeLitNat ->
                                                          let {
                                                            sat_sLom [Occ=Once, Dmd=<L,1*U>]
                                                              :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [cs_sLnX x_sLob] \s []
                                                                    let {
                                                                      sat_sLok [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          [cs_sLnX x_sLob] \u []
                                                                              let {
                                                                                sat_sLoi [Occ=Once]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    CCCS :! [GHC.Show.$fShow(,)2
                                                                                             x_sLob]; } in
                                                                              let {
                                                                                sat_sLoj [Occ=Once]
                                                                                  :: GHC.Base.String
                                                                                [LclId] =
                                                                                    CCCS :! [GHC.Show.$fShow(,)3
                                                                                             sat_sLoi];
                                                                              } in 
                                                                                GHC.Show.showLitString
                                                                                    cs_sLnX
                                                                                    sat_sLoj; } in
                                                                    let {
                                                                      sat_sLol [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   sat_sLok];
                                                                    } in 
                                                                      GHC.CString.unpackAppendCString#
                                                                          lvl42_rC1o sat_sLol;
                                                          } in 
                                                            GHC.Base.++
                                                                GHC.Show.$fShowTypeLitSort2
                                                                sat_sLom;
                                                    };
                                          } in  GHC.Base.++ f3_rC1f sat_sLon;
                                } in  : [GHC.Show.$fShow(,)4 sat_sLoo];
                      } in  sat_sLop;
                };
          GHC.Types.KindRepTypeLitD p_sLoq [Occ=OnceL*!]
                                    q_sLor [Occ=OnceL*] ->
              case ># [ww_sLm6 10#] of {
                __DEFAULT ->
                    let {
                      sat_sLoE [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [p_sLoq q_sLor] \r [x_sLot]
                              let {
                                sat_sLoD [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                [LclId] =
                                    [p_sLoq q_sLor x_sLot] \s []
                                        case p_sLoq of {
                                          GHC.Types.TypeLitSymbol ->
                                              let {
                                                sat_sLoy [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [q_sLor x_sLot] \s []
                                                        let {
                                                          sat_sLow [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [q_sLor x_sLot] \u []
                                                                  let {
                                                                    sat_sLov [Occ=Once]
                                                                      :: GHC.Base.String
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                 x_sLot];
                                                                  } in 
                                                                    GHC.Show.showLitString
                                                                        q_sLor sat_sLov; } in
                                                        let {
                                                          sat_sLox [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_sLow];
                                                        } in 
                                                          GHC.CString.unpackAppendCString#
                                                              lvl42_rC1o sat_sLox;
                                              } in 
                                                GHC.Base.++ GHC.Show.$fShowTypeLitSort4 sat_sLoy;
                                          GHC.Types.TypeLitNat ->
                                              let {
                                                sat_sLoC [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [q_sLor x_sLot] \s []
                                                        let {
                                                          sat_sLoA [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [q_sLor x_sLot] \u []
                                                                  let {
                                                                    sat_sLoz [Occ=Once]
                                                                      :: GHC.Base.String
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                 x_sLot];
                                                                  } in 
                                                                    GHC.Show.showLitString
                                                                        q_sLor sat_sLoz; } in
                                                        let {
                                                          sat_sLoB [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_sLoA];
                                                        } in 
                                                          GHC.CString.unpackAppendCString#
                                                              lvl42_rC1o sat_sLoB;
                                              } in 
                                                GHC.Base.++ GHC.Show.$fShowTypeLitSort2 sat_sLoC;
                                        };
                              } in  GHC.Base.++ f1_rC1d sat_sLoD;
                    } in  sat_sLoE;
                1# ->
                    let {
                      sat_sLoT [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [p_sLoq q_sLor] \r [x_sLoF]
                              let {
                                sat_sLoS [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [p_sLoq q_sLor x_sLoF] \u []
                                        let {
                                          sat_sLoR [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                          [LclId] =
                                              [p_sLoq q_sLor x_sLoF] \s []
                                                  case p_sLoq of {
                                                    GHC.Types.TypeLitSymbol ->
                                                        let {
                                                          sat_sLoL [Occ=Once, Dmd=<L,1*U>]
                                                            :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [q_sLor x_sLoF] \s []
                                                                  let {
                                                                    sat_sLoJ [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        [q_sLor x_sLoF] \u []
                                                                            let {
                                                                              sat_sLoH [Occ=Once]
                                                                                :: [GHC.Types.Char]
                                                                              [LclId] =
                                                                                  CCCS :! [GHC.Show.$fShow(,)2
                                                                                           x_sLoF]; } in
                                                                            let {
                                                                              sat_sLoI [Occ=Once]
                                                                                :: GHC.Base.String
                                                                              [LclId] =
                                                                                  CCCS :! [GHC.Show.$fShow(,)3
                                                                                           sat_sLoH];
                                                                            } in 
                                                                              GHC.Show.showLitString
                                                                                  q_sLor
                                                                                  sat_sLoI; } in
                                                                  let {
                                                                    sat_sLoK [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                 sat_sLoJ];
                                                                  } in 
                                                                    GHC.CString.unpackAppendCString#
                                                                        lvl42_rC1o sat_sLoK;
                                                        } in 
                                                          GHC.Base.++
                                                              GHC.Show.$fShowTypeLitSort4 sat_sLoL;
                                                    GHC.Types.TypeLitNat ->
                                                        let {
                                                          sat_sLoQ [Occ=Once, Dmd=<L,1*U>]
                                                            :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [q_sLor x_sLoF] \s []
                                                                  let {
                                                                    sat_sLoO [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        [q_sLor x_sLoF] \u []
                                                                            let {
                                                                              sat_sLoM [Occ=Once]
                                                                                :: [GHC.Types.Char]
                                                                              [LclId] =
                                                                                  CCCS :! [GHC.Show.$fShow(,)2
                                                                                           x_sLoF]; } in
                                                                            let {
                                                                              sat_sLoN [Occ=Once]
                                                                                :: GHC.Base.String
                                                                              [LclId] =
                                                                                  CCCS :! [GHC.Show.$fShow(,)3
                                                                                           sat_sLoM];
                                                                            } in 
                                                                              GHC.Show.showLitString
                                                                                  q_sLor
                                                                                  sat_sLoN; } in
                                                                  let {
                                                                    sat_sLoP [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                 sat_sLoO];
                                                                  } in 
                                                                    GHC.CString.unpackAppendCString#
                                                                        lvl42_rC1o sat_sLoP;
                                                        } in 
                                                          GHC.Base.++
                                                              GHC.Show.$fShowTypeLitSort2 sat_sLoQ;
                                                  };
                                        } in  GHC.Base.++ f1_rC1d sat_sLoR;
                              } in  : [GHC.Show.$fShow(,)4 sat_sLoS];
                    } in  sat_sLoT;
              };
        };

GHC.Show.$fShowKindRep_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.KindRep -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S(S),1*U(U)><S,1*U>, Unf=OtherCon []] =
    [] \r [w_sLoU w1_sLoV]
        case w_sLoU of {
          GHC.Types.I# ww1_sLoX [Occ=Once] ->
              GHC.Show.$w$cshowsPrec5 ww1_sLoX w1_sLoV;
        };

GHC.Show.$fShowKindRep1 :: GHC.Types.KindRep -> GHC.Show.ShowS
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_sLoY] GHC.Show.$w$cshowsPrec5 0# w_sLoY;

GHC.Show.$fShowKindRep_$cshowList
  :: [GHC.Types.KindRep] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sLoZ s_sLp0]
        GHC.Show.showList__ GHC.Show.$fShowKindRep1 ls_sLoZ s_sLp0;

GHC.Show.$fShowKindRep_$cshow
  :: GHC.Types.KindRep -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sLp1] GHC.Show.$w$cshowsPrec5 0# x_sLp1 GHC.Types.[];

GHC.Show.$fShowKindRep [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.KindRep
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowKindRep_$cshowsPrec
                                    GHC.Show.$fShowKindRep_$cshow
                                    GHC.Show.$fShowKindRep_$cshowList];

lvl44_rC1q :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Char.intToDigit: not a digit "#;

GHC.Show.intToDigit1 :: GHC.Prim.Int# -> GHC.Types.Char
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [i_sLp2]
        let {
          sat_sLp6 [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [i_sLp2] \u []
                  case GHC.Show.$witos i_sLp2 GHC.Types.[] of {
                    (#,#) ww1_sLp4 [Occ=Once] ww2_sLp5 [Occ=Once] ->
                        : [ww1_sLp4 ww2_sLp5];
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl44_rC1q sat_sLp6
          of
          sat_sLp7
          { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sLp7;
          };

GHC.Show.$wintToDigit [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_sLp8]
        let-no-escape {
          $j_sLp9 [Occ=Once*T[0], Dmd=<L,1*U>] :: GHC.Prim.Char#
          [LclId[JoinId(0)], Unf=OtherCon []] =
              [ww_sLp8] \r []
                  case >=# [ww_sLp8 10#] of {
                    __DEFAULT -> GHC.Show.intToDigit1 ww_sLp8;
                    1# ->
                        case <=# [ww_sLp8 15#] of {
                          __DEFAULT -> GHC.Show.intToDigit1 ww_sLp8;
                          1# ->
                              case +# [97# ww_sLp8] of sat_sLpe {
                                __DEFAULT ->
                                    case -# [sat_sLpe 10#] of sat_sLpf {
                                      __DEFAULT -> chr# [sat_sLpf];
                                    };
                              };
                        };
                  };
        } in 
          case >=# [ww_sLp8 0#] of {
            __DEFAULT -> $j_sLp9;
            1# ->
                case <=# [ww_sLp8 9#] of {
                  __DEFAULT -> $j_sLp9;
                  1# ->
                      case +# [48# ww_sLp8] of sat_sLpi {
                        __DEFAULT -> chr# [sat_sLpi];
                      };
                };
          };

GHC.Show.intToDigit [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Char
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_sLpj]
        case w_sLpj of {
          GHC.Types.I# ww1_sLpl [Occ=Once] ->
              case GHC.Show.$wintToDigit ww1_sLpl of ww2_sLpm {
                __DEFAULT -> GHC.Types.C# [ww2_sLpm];
              };
        };

GHC.Show.$wjblock' [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sLpn ww1_sLpo w_sLpp]
        case ww_sLpn of wild_sLpq {
          __DEFAULT ->
              case quotRemInt# [ww1_sLpo 10#] of {
                (#,#) ipv_sLps [Occ=Once] ipv1_sLpt [Occ=Once] ->
                    case +# [48# ipv1_sLpt] of sat_sLpv {
                      __DEFAULT ->
                          case chr# [sat_sLpv] of sat_sLpw {
                            __DEFAULT ->
                                let {
                                  sat_sLpx [Occ=Once] :: GHC.Types.Char
                                  [LclId] =
                                      CCCS GHC.Types.C#! [sat_sLpw]; } in
                                let {
                                  sat_sLpy [Occ=Once] :: GHC.Base.String
                                  [LclId] =
                                      CCCS :! [sat_sLpx w_sLpp];
                                } in 
                                  case -# [wild_sLpq 1#] of sat_sLpu {
                                    __DEFAULT -> GHC.Show.$wjblock' sat_sLpu ipv_sLps sat_sLpy;
                                  };
                          };
                    };
              };
          1# ->
              case +# [48# ww1_sLpo] of sat_sLpz {
                __DEFAULT ->
                    case chr# [sat_sLpz] of sat_sLpA {
                      __DEFAULT ->
                          let {
                            sat_sLpB [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                CCCS GHC.Types.C#! [sat_sLpA];
                          } in  (#,#) [sat_sLpB w_sLpp];
                    };
              };
        };

sat_sLpD :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [465661287#];

sat_sLpE :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sLpD GHC.Types.[]];

sat_sLpC :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [660865024#];

sat_sLpF :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sLpC sat_sLpE];

GHC.Show.$fShowInteger3 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sLpF;

GHC.Show.$fShowInteger_jprintb [Occ=LoopBreaker]
  :: [GHC.Integer.Type.Integer] -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sLpG cs_sLpH]
        case ds_sLpG of {
          [] -> cs_sLpH;
          : n_sLpJ [Occ=Once] ns_sLpK [Occ=Once] ->
              case
                  GHC.Integer.Type.quotRemInteger n_sLpJ GHC.Show.$fShowInteger3
              of
              { (#,#) ipv_sLpM [Occ=Once] ipv1_sLpN [Occ=Once] ->
                    case GHC.Integer.Type.integerToInt ipv_sLpM of wild1_sLpO {
                      __DEFAULT ->
                          let {
                            sat_sLpU [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [cs_sLpH ns_sLpK ipv1_sLpN] \u []
                                    case GHC.Integer.Type.integerToInt ipv1_sLpN of wild2_sLpP {
                                      __DEFAULT ->
                                          let {
                                            sat_sLpQ [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                [cs_sLpH ns_sLpK] \u []
                                                    GHC.Show.$fShowInteger_jprintb ns_sLpK cs_sLpH;
                                          } in 
                                            case GHC.Show.$wjblock' 18# wild2_sLpP sat_sLpQ of {
                                              (#,#) ww1_sLpS [Occ=Once] ww2_sLpT [Occ=Once] ->
                                                  : [ww1_sLpS ww2_sLpT];
                                            };
                                    };
                          } in 
                            case GHC.Show.$wjblock' 18# wild1_sLpO sat_sLpU of {
                              (#,#) ww1_sLpW [Occ=Once] ww2_sLpX [Occ=Once] ->
                                  : [ww1_sLpW ww2_sLpX];
                            };
                    };
              };
        };

jsplitb_rC1r
  :: GHC.Integer.Type.Integer
     -> [GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U>,
 Unf=OtherCon []] =
    sat-only [] \r [ds_sLpY ds1_sLpZ]
        case ds1_sLpZ of {
          [] -> [] [];
          : n_sLq1 [Occ=Once] ns_sLq2 [Occ=Once] ->
              case GHC.Integer.Type.quotRemInteger n_sLq1 ds_sLpY of {
                (#,#) ipv_sLq4 [Occ=Once] ipv1_sLq5 [Occ=Once] ->
                    let {
                      sat_sLq6 [Occ=Once] :: [GHC.Integer.Type.Integer]
                      [LclId] =
                          [ds_sLpY ns_sLq2] \u [] jsplitb_rC1r ds_sLpY ns_sLq2; } in
                    let {
                      sat_sLq7 [Occ=Once] :: [GHC.Integer.Type.Integer]
                      [LclId] =
                          CCCS :! [ipv1_sLq5 sat_sLq6];
                    } in  : [ipv_sLq4 sat_sLq7];
              };
        };

GHC.Show.$fShowInteger1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

GHC.Show.$wjsplitf [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Integer.Type.Integer, [GHC.Integer.Type.Integer] #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [w_sLq8 w1_sLq9]
        case GHC.Integer.Type.gtInteger# w_sLq8 w1_sLq9 of {
          __DEFAULT ->
              case GHC.Integer.Type.timesInteger w_sLq8 w_sLq8 of sat_sLqb {
                __DEFAULT ->
                    case GHC.Show.$wjsplitf sat_sLqb w1_sLq9 of {
                      (#,#) ww1_sLqd [Occ=Once] ww2_sLqe [Occ=Once*] ->
                          case GHC.Integer.Type.quotRemInteger ww1_sLqd w_sLq8 of {
                            (#,#) ipv_sLqg ipv1_sLqh [Occ=Once*] ->
                                case
                                    GHC.Integer.Type.gtInteger# ipv_sLqg GHC.Show.$fShowInteger1
                                of
                                { __DEFAULT ->
                                      let {
                                        sat_sLqj [Occ=Once] :: [GHC.Integer.Type.Integer]
                                        [LclId] =
                                            [w_sLq8 ww2_sLqe] \u [] jsplitb_rC1r w_sLq8 ww2_sLqe;
                                      } in  (#,#) [ipv1_sLqh sat_sLqj];
                                  1# ->
                                      let {
                                        sat_sLqk [Occ=Once] :: [GHC.Integer.Type.Integer]
                                        [LclId] =
                                            [w_sLq8 ww2_sLqe] \u []
                                                jsplitb_rC1r w_sLq8 ww2_sLqe; } in
                                      let {
                                        sat_sLql [Occ=Once] :: [GHC.Integer.Type.Integer]
                                        [LclId] =
                                            CCCS :! [ipv1_sLqh sat_sLqk];
                                      } in  (#,#) [ipv_sLqg sat_sLql];
                                };
                          };
                    };
              };
          1# -> (#,#) [w1_sLq9 GHC.Types.[]];
        };

sat_sLqp :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [100974195#];

sat_sLqq :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sLqp GHC.Types.[]];

sat_sLqo :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1864637526#];

sat_sLqr :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sLqo sat_sLqq];

sat_sLqn :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1721187872#];

sat_sLqs :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sLqn sat_sLqr];

sat_sLqm :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_sLqt :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sLqm sat_sLqs];

GHC.Show.$fShowInteger2 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sLqt;

GHC.Show.$wintegerToString' [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [w_sLqu w1_sLqv]
        case
            GHC.Integer.Type.ltInteger# w_sLqu GHC.Show.$fShowInteger3
        of
        { __DEFAULT ->
              case GHC.Show.$wjsplitf GHC.Show.$fShowInteger2 w_sLqu of {
                (#,#) ww1_sLqy [Occ=Once] ww2_sLqz [Occ=Once*] ->
                    case
                        GHC.Integer.Type.quotRemInteger ww1_sLqy GHC.Show.$fShowInteger3
                    of
                    { (#,#) ipv_sLqB [Occ=Once] ipv1_sLqC [Occ=Once*] ->
                          case GHC.Integer.Type.integerToInt ipv_sLqB of wild1_sLqD {
                            __DEFAULT ->
                                case ># [wild1_sLqD 0#] of {
                                  __DEFAULT ->
                                      case GHC.Integer.Type.integerToInt ipv1_sLqC of wild2_sLqF {
                                        __DEFAULT ->
                                            let {
                                              sat_sLqG [Occ=Once] :: GHC.Base.String
                                              [LclId] =
                                                  [w1_sLqv ww2_sLqz] \u []
                                                      GHC.Show.$fShowInteger_jprintb
                                                          ww2_sLqz w1_sLqv;
                                            } in  GHC.Show.$witos' wild2_sLqF sat_sLqG;
                                      };
                                  1# ->
                                      let {
                                        sat_sLqM [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            [w1_sLqv ww2_sLqz ipv1_sLqC] \u []
                                                case
                                                    GHC.Integer.Type.integerToInt ipv1_sLqC
                                                of
                                                wild2_sLqH
                                                { __DEFAULT ->
                                                      let {
                                                        sat_sLqI [Occ=Once] :: GHC.Base.String
                                                        [LclId] =
                                                            [w1_sLqv ww2_sLqz] \u []
                                                                GHC.Show.$fShowInteger_jprintb
                                                                    ww2_sLqz w1_sLqv;
                                                      } in 
                                                        case
                                                            GHC.Show.$wjblock'
                                                                18# wild2_sLqH sat_sLqI
                                                        of
                                                        { (#,#) ww4_sLqK [Occ=Once]
                                                                ww5_sLqL [Occ=Once] ->
                                                              : [ww4_sLqK ww5_sLqL];
                                                        };
                                                };
                                      } in  GHC.Show.$witos' wild1_sLqD sat_sLqM;
                                };
                          };
                    };
              };
          1# ->
              case GHC.Integer.Type.integerToInt w_sLqu of wild1_sLqN {
                __DEFAULT -> GHC.Show.$witos' wild1_sLqN w1_sLqv;
              };
        };

GHC.Show.$wintegerToString [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [w_sLqO w1_sLqP]
        case
            GHC.Integer.Type.ltInteger# w_sLqO GHC.Show.$fShowInteger1
        of
        { __DEFAULT -> GHC.Show.$wintegerToString' w_sLqO w1_sLqP;
          1# ->
              let {
                sat_sLqV [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sLqO w1_sLqP] \u []
                        case GHC.Integer.Type.negateInteger w_sLqO of sat_sLqR {
                          __DEFAULT ->
                              case GHC.Show.$wintegerToString' sat_sLqR w1_sLqP of {
                                (#,#) ww1_sLqT [Occ=Once] ww2_sLqU [Occ=Once] ->
                                    : [ww1_sLqT ww2_sLqU];
                              };
                        };
              } in  (#,#) [GHC.Show.showLitChar1 sat_sLqV];
        };

GHC.Show.$w$cshowsPrec4 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Integer.Type.Integer
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=3, Str=<S,U><S,U><L,U>, Unf=OtherCon []] =
    [] \r [ww_sLqW w_sLqX w1_sLqY]
        case ># [ww_sLqW 6#] of {
          __DEFAULT -> GHC.Show.$wintegerToString w_sLqX w1_sLqY;
          1# ->
              case
                  GHC.Integer.Type.ltInteger# w_sLqX GHC.Show.$fShowInteger1
              of
              { __DEFAULT -> GHC.Show.$wintegerToString w_sLqX w1_sLqY;
                1# ->
                    let {
                      sat_sLr5 [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [w_sLqX w1_sLqY] \u []
                              let {
                                sat_sLr1 [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    CCCS :! [GHC.Show.$fShow(,)2 w1_sLqY];
                              } in 
                                case GHC.Show.$wintegerToString w_sLqX sat_sLr1 of {
                                  (#,#) ww2_sLr3 [Occ=Once] ww3_sLr4 [Occ=Once] ->
                                      : [ww2_sLr3 ww3_sLr4];
                                };
                    } in  (#,#) [GHC.Show.$fShow(,)4 sat_sLr5];
              };
        };

GHC.Show.$fShowInteger_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Integer.Type.Integer -> GHC.Show.ShowS
[GblId, Arity=3, Str=<S(S),1*U(U)><S,U><L,U>m2, Unf=OtherCon []] =
    [] \r [w_sLr6 w1_sLr7 w2_sLr8]
        case w_sLr6 of {
          GHC.Types.I# ww1_sLra [Occ=Once] ->
              case GHC.Show.$w$cshowsPrec4 ww1_sLra w1_sLr7 w2_sLr8 of {
                (#,#) ww3_sLrc [Occ=Once] ww4_sLrd [Occ=Once] ->
                    : [ww3_sLrc ww4_sLrd];
              };
        };

GHC.Show.$fShowInteger_$cshow
  :: GHC.Integer.Type.Integer -> GHC.Base.String
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [x_sLre]
        case GHC.Show.$w$cshowsPrec4 0# x_sLre GHC.Types.[] of {
          (#,#) ww1_sLrg [Occ=Once] ww2_sLrh [Occ=Once] ->
              : [ww1_sLrg ww2_sLrh];
        };

GHC.Show.$fShowInteger_$cshowList
  :: [GHC.Integer.Type.Integer] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sLri s_sLrj]
        case ds_sLri of {
          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s_sLrj;
          : x_sLrl [Occ=Once] xs_sLrm [Occ=Once] ->
              let {
                sat_sLrC [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [s_sLrj x_sLrl xs_sLrm] \u []
                        let {
                          sat_sLry [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              [s_sLrj xs_sLrm] \u []
                                  let {
                                    lvl45_sLrn [Occ=OnceL] :: [GHC.Types.Char]
                                    [LclId, Unf=OtherCon []] =
                                        CCCS :! [GHC.Show.showList__2 s_sLrj]; } in
                                  let {
                                    showl_sLro [Occ=LoopBreaker]
                                      :: [GHC.Integer.Type.Integer] -> GHC.Base.String
                                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                        sat-only [lvl45_sLrn showl_sLro] \r [ds1_sLrp]
                                            case ds1_sLrp of {
                                              [] -> lvl45_sLrn;
                                              : y_sLrr [Occ=Once] ys_sLrs [Occ=Once] ->
                                                  let {
                                                    sat_sLrx [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        [showl_sLro y_sLrr ys_sLrs] \u []
                                                            let {
                                                              sat_sLrt [Occ=Once] :: GHC.Base.String
                                                              [LclId] =
                                                                  [showl_sLro ys_sLrs] \u []
                                                                      showl_sLro ys_sLrs;
                                                            } in 
                                                              case
                                                                  GHC.Show.$w$cshowsPrec4
                                                                      0# y_sLrr sat_sLrt
                                                              of
                                                              { (#,#) ww1_sLrv [Occ=Once]
                                                                      ww2_sLrw [Occ=Once] ->
                                                                    : [ww1_sLrv ww2_sLrw];
                                                              };
                                                  } in  : [GHC.Show.showList__1 sat_sLrx];
                                            };
                                  } in  showl_sLro xs_sLrm;
                        } in 
                          case GHC.Show.$w$cshowsPrec4 0# x_sLrl sat_sLry of {
                            (#,#) ww1_sLrA [Occ=Once] ww2_sLrB [Occ=Once] ->
                                : [ww1_sLrA ww2_sLrB];
                          };
              } in  : [GHC.Show.showList__3 sat_sLrC];
        };

GHC.Show.$fShowInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Integer.Type.Integer
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShowInteger_$cshow
                                    GHC.Show.$fShowInteger_$cshowList];

GHC.Show.C:Show
  :: forall a.
     (GHC.Types.Int -> a -> GHC.Show.ShowS)
     -> (a -> GHC.Base.String)
     -> ([a] -> GHC.Show.ShowS)
     -> GHC.Show.Show a
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Show.C:Show [eta_B3 eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 15:55:30.957149951 UTC

GHC.Show.showsPrec
  :: forall a.
     GHC.Show.Show a =>
     GHC.Types.Int -> a -> GHC.Show.ShowS
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(SLL),U(U,A,A)>] =
    [] \r [v_sKQ2]
        case v_sKQ2 of {
          GHC.Show.C:Show v_sKQ4 [Occ=Once] _ [Occ=Dead] _ [Occ=Dead] ->
              v_sKQ4;
        };

GHC.Show.show :: forall a. GHC.Show.Show a => a -> GHC.Base.String
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LSL),U(A,U,A)>] =
    [] \r [v_sKQ7]
        case v_sKQ7 of {
          GHC.Show.C:Show _ [Occ=Dead] v_sKQa [Occ=Once] _ [Occ=Dead] ->
              v_sKQa;
        };

GHC.Show.showList
  :: forall a. GHC.Show.Show a => [a] -> GHC.Show.ShowS
[GblId[ClassOp], Arity=1, Caf=NoCafRefs, Str=<S(LLS),U(A,A,U)>] =
    [] \r [v_sKQc]
        case v_sKQc of {
          GHC.Show.C:Show _ [Occ=Dead] _ [Occ=Dead] v_sKQg [Occ=Once] ->
              v_sKQg;
        };

GHC.Show.showCommaSpace2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ", "#;

GHC.Show.showCommaSpace1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.showCommaSpace2;

GHC.Show.showLitChar13 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\\'#];

GHC.Show.asciiTab98 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NUL"#;

GHC.Show.asciiTab97 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab98;

GHC.Show.asciiTab96 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SOH"#;

GHC.Show.asciiTab95 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab96;

GHC.Show.asciiTab94 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "STX"#;

GHC.Show.asciiTab93 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab94;

GHC.Show.asciiTab92 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ETX"#;

GHC.Show.asciiTab91 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab92;

GHC.Show.asciiTab90 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EOT"#;

GHC.Show.asciiTab89 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab90;

GHC.Show.asciiTab88 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ENQ"#;

GHC.Show.asciiTab87 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab88;

GHC.Show.asciiTab86 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ACK"#;

GHC.Show.asciiTab85 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab86;

GHC.Show.asciiTab84 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BEL"#;

GHC.Show.asciiTab83 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab84;

GHC.Show.asciiTab82 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BS"#;

GHC.Show.asciiTab81 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab82;

GHC.Show.asciiTab80 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "HT"#;

GHC.Show.asciiTab79 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab80;

GHC.Show.asciiTab78 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LF"#;

GHC.Show.asciiTab77 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab78;

GHC.Show.asciiTab76 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "VT"#;

GHC.Show.asciiTab75 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab76;

GHC.Show.asciiTab74 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FF"#;

GHC.Show.asciiTab73 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab74;

GHC.Show.asciiTab72 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CR"#;

GHC.Show.asciiTab71 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab72;

GHC.Show.asciiTab70 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SO"#;

GHC.Show.asciiTab69 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab70;

GHC.Show.asciiTab68 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SI"#;

GHC.Show.asciiTab67 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab68;

GHC.Show.asciiTab66 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DLE"#;

GHC.Show.asciiTab65 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab66;

GHC.Show.asciiTab64 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC1"#;

GHC.Show.asciiTab63 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab64;

GHC.Show.asciiTab62 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC2"#;

GHC.Show.asciiTab61 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab62;

GHC.Show.asciiTab60 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC3"#;

GHC.Show.asciiTab59 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab60;

GHC.Show.asciiTab58 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DC4"#;

GHC.Show.asciiTab57 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab58;

GHC.Show.asciiTab56 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "NAK"#;

GHC.Show.asciiTab55 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab56;

GHC.Show.asciiTab54 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SYN"#;

GHC.Show.asciiTab53 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab54;

GHC.Show.asciiTab52 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ETB"#;

GHC.Show.asciiTab51 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab52;

GHC.Show.asciiTab50 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "CAN"#;

GHC.Show.asciiTab49 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab50;

GHC.Show.asciiTab48 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EM"#;

GHC.Show.asciiTab47 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab48;

GHC.Show.asciiTab46 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SUB"#;

GHC.Show.asciiTab45 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab46;

GHC.Show.asciiTab44 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ESC"#;

GHC.Show.asciiTab43 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab44;

GHC.Show.asciiTab42 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FS"#;

GHC.Show.asciiTab41 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab42;

GHC.Show.asciiTab40 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GS"#;

GHC.Show.asciiTab39 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab40;

GHC.Show.asciiTab38 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RS"#;

GHC.Show.asciiTab37 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab38;

GHC.Show.asciiTab36 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "US"#;

GHC.Show.asciiTab35 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab36;

GHC.Show.asciiTab34 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SP"#;

GHC.Show.asciiTab33 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.asciiTab34;

GHC.Show.asciiTab32 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab33 GHC.Types.[]];

GHC.Show.asciiTab31 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab35 GHC.Show.asciiTab32];

GHC.Show.asciiTab30 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab37 GHC.Show.asciiTab31];

GHC.Show.asciiTab29 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab39 GHC.Show.asciiTab30];

GHC.Show.asciiTab28 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab41 GHC.Show.asciiTab29];

GHC.Show.asciiTab27 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab43 GHC.Show.asciiTab28];

GHC.Show.asciiTab26 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab45 GHC.Show.asciiTab27];

GHC.Show.asciiTab25 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab47 GHC.Show.asciiTab26];

GHC.Show.asciiTab24 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab49 GHC.Show.asciiTab25];

GHC.Show.asciiTab23 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab51 GHC.Show.asciiTab24];

GHC.Show.asciiTab22 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab53 GHC.Show.asciiTab23];

GHC.Show.asciiTab21 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab55 GHC.Show.asciiTab22];

GHC.Show.asciiTab20 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab57 GHC.Show.asciiTab21];

GHC.Show.asciiTab19 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab59 GHC.Show.asciiTab20];

GHC.Show.asciiTab18 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab61 GHC.Show.asciiTab19];

GHC.Show.asciiTab17 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab63 GHC.Show.asciiTab18];

GHC.Show.asciiTab16 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab65 GHC.Show.asciiTab17];

GHC.Show.asciiTab15 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab67 GHC.Show.asciiTab16];

GHC.Show.asciiTab14 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab69 GHC.Show.asciiTab15];

GHC.Show.asciiTab13 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab71 GHC.Show.asciiTab14];

GHC.Show.asciiTab12 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab73 GHC.Show.asciiTab13];

GHC.Show.asciiTab11 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab75 GHC.Show.asciiTab12];

GHC.Show.asciiTab10 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab77 GHC.Show.asciiTab11];

GHC.Show.asciiTab9 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab79 GHC.Show.asciiTab10];

GHC.Show.asciiTab8 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab81 GHC.Show.asciiTab9];

GHC.Show.asciiTab7 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab83 GHC.Show.asciiTab8];

GHC.Show.asciiTab6 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab85 GHC.Show.asciiTab7];

GHC.Show.asciiTab5 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab87 GHC.Show.asciiTab6];

GHC.Show.asciiTab4 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab89 GHC.Show.asciiTab5];

GHC.Show.asciiTab3 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab91 GHC.Show.asciiTab4];

GHC.Show.asciiTab2 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab93 GHC.Show.asciiTab3];

GHC.Show.asciiTab1 :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab95 GHC.Show.asciiTab2];

GHC.Show.asciiTab :: [GHC.Base.String]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.asciiTab97 GHC.Show.asciiTab1];

GHC.Show.$fShow(,)2 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [')'#];

GHC.Show.$fShow(,)4 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['('#];

GHC.Show.showLitChar1 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['-'#];

GHC.Show.$witos' [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int#
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [w_sKQh w1_sKQi]
        case <# [w_sKQh 10#] of {
          __DEFAULT ->
              case quotRemInt# [w_sKQh 10#] of {
                (#,#) ipv_sKQl [Occ=Once] ipv1_sKQm [Occ=Once] ->
                    case +# [48# ipv1_sKQm] of sat_sKQn {
                      __DEFAULT ->
                          case chr# [sat_sKQn] of sat_sKQo {
                            __DEFAULT ->
                                let {
                                  sat_sKQp [Occ=Once] :: GHC.Types.Char
                                  [LclId] =
                                      CCCS GHC.Types.C#! [sat_sKQo]; } in
                                let {
                                  sat_sKQq [Occ=Once] :: GHC.Base.String
                                  [LclId] =
                                      CCCS :! [sat_sKQp w1_sKQi];
                                } in  GHC.Show.$witos' ipv_sKQl sat_sKQq;
                          };
                    };
              };
          1# ->
              case +# [48# w_sKQh] of sat_sKQr {
                __DEFAULT ->
                    case chr# [sat_sKQr] of sat_sKQs {
                      __DEFAULT ->
                          let {
                            sat_sKQt [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                CCCS GHC.Types.C#! [sat_sKQs];
                          } in  (#,#) [sat_sKQt w1_sKQi];
                    };
              };
        };

GHC.Show.$witos [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [w_sKQu w1_sKQv]
        case <# [w_sKQu 0#] of {
          __DEFAULT -> GHC.Show.$witos' w_sKQu w1_sKQv;
          1# ->
              case w_sKQu of wild_sKQx {
                __DEFAULT ->
                    let {
                      sat_sKQC [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [w1_sKQv wild_sKQx] \u []
                              case negateInt# [wild_sKQx] of sat_sKQy {
                                __DEFAULT ->
                                    case GHC.Show.$witos' sat_sKQy w1_sKQv of {
                                      (#,#) ww1_sKQA [Occ=Once] ww2_sKQB [Occ=Once] ->
                                          : [ww1_sKQA ww2_sKQB];
                                    };
                              };
                    } in  (#,#) [GHC.Show.showLitChar1 sat_sKQC];
                -9223372036854775808# ->
                    let {
                      sat_sKQP [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [w1_sKQv] \u []
                              case quotRemInt# [-9223372036854775808# 10#] of {
                                (#,#) ipv_sKQE [Occ=Once] ipv1_sKQF [Occ=Once] ->
                                    let {
                                      sat_sKQL [Occ=Once] :: GHC.Base.String
                                      [LclId] =
                                          [w1_sKQv ipv1_sKQF] \u []
                                              case negateInt# [ipv1_sKQF] of sat_sKQH {
                                                __DEFAULT ->
                                                    case GHC.Show.$witos' sat_sKQH w1_sKQv of {
                                                      (#,#) ww1_sKQJ [Occ=Once]
                                                            ww2_sKQK [Occ=Once] ->
                                                          : [ww1_sKQJ ww2_sKQK];
                                                    };
                                              };
                                    } in 
                                      case negateInt# [ipv_sKQE] of sat_sKQG {
                                        __DEFAULT ->
                                            case GHC.Show.$witos' sat_sKQG sat_sKQL of {
                                              (#,#) ww1_sKQN [Occ=Once] ww2_sKQO [Occ=Once] ->
                                                  : [ww1_sKQN ww2_sKQO];
                                            };
                                      };
                              };
                    } in  (#,#) [GHC.Show.showLitChar1 sat_sKQP];
              };
        };

GHC.Show.$wshowSignedInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><S,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sKQQ ww1_sKQR w_sKQS]
        case <# [ww1_sKQR 0#] of {
          __DEFAULT -> GHC.Show.$witos ww1_sKQR w_sKQS;
          1# ->
              case ># [ww_sKQQ 6#] of {
                __DEFAULT -> GHC.Show.$witos ww1_sKQR w_sKQS;
                1# ->
                    let {
                      sat_sKQZ [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [ww1_sKQR w_sKQS] \u []
                              let {
                                sat_sKQV [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    CCCS :! [GHC.Show.$fShow(,)2 w_sKQS];
                              } in 
                                case GHC.Show.$witos ww1_sKQR sat_sKQV of {
                                  (#,#) ww3_sKQX [Occ=Once] ww4_sKQY [Occ=Once] ->
                                      : [ww3_sKQX ww4_sKQY];
                                };
                    } in  (#,#) [GHC.Show.$fShow(,)4 sat_sKQZ];
              };
        };

GHC.Show.showSignedInt [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Int -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sKR0 w1_sKR1 w2_sKR2]
        case w_sKR0 of {
          GHC.Types.I# ww1_sKR4 [Occ=Once] ->
              case w1_sKR1 of {
                GHC.Types.I# ww3_sKR6 [Occ=Once] ->
                    case GHC.Show.$wshowSignedInt ww1_sKR4 ww3_sKR6 w2_sKR2 of {
                      (#,#) ww5_sKR8 [Occ=Once] ww6_sKR9 [Occ=Once] ->
                          : [ww5_sKR8 ww6_sKR9];
                    };
              };
        };

GHC.Show.showLitChar12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\a"#;

GHC.Show.showLitChar11 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\b"#;

GHC.Show.showLitChar10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\t"#;

GHC.Show.showLitChar9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\n"#;

GHC.Show.showLitChar8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\v"#;

GHC.Show.showLitChar7 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\f"#;

GHC.Show.showLitChar6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\r"#;

GHC.Show.showLitChar5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\SO"#;

GHC.Show.showLitChar4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\&"#;

GHC.Show.showLitChar3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\\\"#;

GHC.Show.showLitChar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\DEL"#;

GHC.Show.$wshowLitChar [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Char# -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [ww_sKRa w_sKRb]
        case gtChar# [ww_sKRa '\DEL'#] of {
          __DEFAULT ->
              case ww_sKRa of ds_sKRd {
                __DEFAULT ->
                    case geChar# [ds_sKRd ' '#] of {
                      __DEFAULT ->
                          case ds_sKRd of ds1_sKRf {
                            __DEFAULT ->
                                let {
                                  sat_sKRh [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [ds1_sKRf] \u []
                                          case ord# [ds1_sKRf] of sat_sKRg {
                                            __DEFAULT -> GHC.List.$w!! GHC.Show.asciiTab sat_sKRg;
                                          }; } in
                                let {
                                  sat_sKRi [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      CCCS :! [GHC.Show.showLitChar13 sat_sKRh];
                                } in  GHC.Base.++ sat_sKRi w_sKRb;
                            '\a'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar12 w_sKRb;
                            '\b'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar11 w_sKRb;
                            '\t'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar10 w_sKRb;
                            '\n'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar9 w_sKRb;
                            '\v'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar8 w_sKRb;
                            '\f'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar7 w_sKRb;
                            '\r'# ->
                                GHC.CString.unpackAppendCString# GHC.Show.showLitChar6 w_sKRb;
                            '\SO'# ->
                                let {
                                  sat_sKRp [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [w_sKRb] \u []
                                          case w_sKRb of wild_sKRj {
                                            [] -> [] [];
                                            : c_sKRk [Occ=Once!] _ [Occ=Dead] ->
                                                case c_sKRk of {
                                                  GHC.Types.C# x_sKRn [Occ=Once!] ->
                                                      case x_sKRn of {
                                                        __DEFAULT -> wild_sKRj;
                                                        'H'# ->
                                                            GHC.CString.unpackAppendCString#
                                                                GHC.Show.showLitChar4 wild_sKRj;
                                                      };
                                                };
                                          };
                                } in 
                                  GHC.CString.unpackAppendCString# GHC.Show.showLitChar5 sat_sKRp;
                          };
                      1# ->
                          let {
                            sat_sKRq [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                CCCS GHC.Types.C#! [ds_sKRd];
                          } in  : [sat_sKRq w_sKRb];
                    };
                '\\'# ->
                    GHC.CString.unpackAppendCString# GHC.Show.showLitChar3 w_sKRb;
                '\DEL'# ->
                    GHC.CString.unpackAppendCString# GHC.Show.showLitChar2 w_sKRb;
              };
          1# ->
              let {
                sat_sKRD [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ww_sKRa w_sKRb] \u []
                        let {
                          sat_sKRz [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              [w_sKRb] \u []
                                  case w_sKRb of wild_sKRs {
                                    [] -> [] [];
                                    : c_sKRt [Occ=Once!] _ [Occ=Dead] ->
                                        case c_sKRt of {
                                          GHC.Types.C# c1_sKRw ->
                                              case geChar# [c1_sKRw '0'#] of {
                                                __DEFAULT -> wild_sKRs;
                                                1# ->
                                                    case leChar# [c1_sKRw '9'#] of {
                                                      __DEFAULT -> wild_sKRs;
                                                      1# ->
                                                          GHC.CString.unpackAppendCString#
                                                              GHC.Show.showLitChar4 wild_sKRs;
                                                    };
                                              };
                                        };
                                  };
                        } in 
                          case ord# [ww_sKRa] of sat_sKRr {
                            __DEFAULT ->
                                case GHC.Show.$witos sat_sKRr sat_sKRz of {
                                  (#,#) ww2_sKRB [Occ=Once] ww3_sKRC [Occ=Once] ->
                                      : [ww2_sKRB ww3_sKRC];
                                };
                          };
              } in  : [GHC.Show.showLitChar13 sat_sKRD];
        };

GHC.Show.showLitChar [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Char -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S(S),1*U(U)><L,U>, Unf=OtherCon []] =
    [] \r [w_sKRE w1_sKRF]
        case w_sKRE of {
          GHC.Types.C# ww1_sKRH [Occ=Once] ->
              GHC.Show.$wshowLitChar ww1_sKRH w1_sKRF;
        };

GHC.Show.$dmshowsPrec
  :: forall a.
     GHC.Show.Show a =>
     GHC.Types.Int -> a -> GHC.Show.ShowS
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LC(S)L),1*U(A,1*C1(U),A)><L,A><L,U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sKRI ds_sKRJ x_sKRK s_sKRL]
        case GHC.Show.show $dShow_sKRI x_sKRK of sat_sKRM {
          __DEFAULT -> GHC.Base.++ sat_sKRM s_sKRL;
        };

GHC.Show.showList__3 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['['#];

GHC.Show.showList__2 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [']'#];

GHC.Show.showList__1 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [','#];

GHC.Show.showList__4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "[]"#;

GHC.Show.showList__
  :: forall a. (a -> GHC.Show.ShowS) -> [a] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_sKRN ds1_sKRO s_sKRP]
        case ds1_sKRO of {
          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s_sKRP;
          : x_sKRR [Occ=Once] xs_sKRS [Occ=Once] ->
              let {
                sat_sKS2 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [ds_sKRN s_sKRP x_sKRR xs_sKRS] \u []
                        let {
                          sat_sKS1 [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              [ds_sKRN s_sKRP xs_sKRS] \u []
                                  let {
                                    lvl45_sKRT [Occ=OnceL] :: [GHC.Types.Char]
                                    [LclId, Unf=OtherCon []] =
                                        CCCS :! [GHC.Show.showList__2 s_sKRP]; } in
                                  let {
                                    showl_sKRU [Occ=LoopBreaker] :: [a_azqi] -> GHC.Base.String
                                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                        sat-only [ds_sKRN lvl45_sKRT showl_sKRU] \r [ds2_sKRV]
                                            case ds2_sKRV of {
                                              [] -> lvl45_sKRT;
                                              : y_sKRX [Occ=Once] ys_sKRY [Occ=Once] ->
                                                  let {
                                                    sat_sKS0 [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        [ds_sKRN showl_sKRU y_sKRX ys_sKRY] \u []
                                                            let {
                                                              sat_sKRZ [Occ=Once] :: GHC.Base.String
                                                              [LclId] =
                                                                  [showl_sKRU ys_sKRY] \u []
                                                                      showl_sKRU ys_sKRY;
                                                            } in  ds_sKRN y_sKRX sat_sKRZ;
                                                  } in  : [GHC.Show.showList__1 sat_sKS0];
                                            };
                                  } in  showl_sKRU xs_sKRS;
                        } in  ds_sKRN x_sKRR sat_sKS1;
              } in  : [GHC.Show.showList__3 sat_sKS2];
        };

lvl_rC0c :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\\""#;

GHC.Show.showLitString [Occ=LoopBreaker]
  :: GHC.Base.String -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sKS3 s_sKS4]
        case ds_sKS3 of {
          [] -> s_sKS4;
          : ds1_sKS6 [Occ=Once!] cs_sKS7 [Occ=Once*] ->
              case ds1_sKS6 of {
                GHC.Types.C# ds2_sKS9 [Occ=Once!] ->
                    case ds2_sKS9 of ds3_sKSa {
                      __DEFAULT ->
                          let {
                            sat_sKSb [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [s_sKS4 cs_sKS7] \u [] GHC.Show.showLitString cs_sKS7 s_sKS4;
                          } in  GHC.Show.$wshowLitChar ds3_sKSa sat_sKSb;
                      '"'# ->
                          let {
                            sat_sKSc [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [s_sKS4 cs_sKS7] \u [] GHC.Show.showLitString cs_sKS7 s_sKS4;
                          } in  GHC.CString.unpackAppendCString# lvl_rC0c sat_sKSc;
                    };
              };
        };

GHC.Show.$fShow(,)3 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['"'#];

GHC.Show.$fShow(,)_$cshowList1
  :: [GHC.Types.Char] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,1*U><L,U>m2, Unf=OtherCon []] =
    [] \r [cs_sKSd eta_sKSe]
        let {
          sat_sKSg [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [cs_sKSd eta_sKSe] \u []
                  let {
                    sat_sKSf [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [GHC.Show.$fShow(,)3 eta_sKSe];
                  } in  GHC.Show.showLitString cs_sKSd sat_sKSf;
        } in  : [GHC.Show.$fShow(,)3 sat_sKSg];

$s$fShow[]_rC0d
  :: GHC.Types.Int
     -> [GHC.Types.Char] -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=3, Str=<L,A><L,1*U><L,U>m2, Unf=OtherCon []] =
    [] \r [ds_sKSh eta_sKSi eta1_sKSj]
        GHC.Show.$fShow(,)_$cshowList1 eta_sKSi eta1_sKSj;

GHC.Show.$fShow[]_$s$cshowList1
  :: [[GHC.Types.Char]] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sKSk s_sKSl]
        GHC.Show.showList__ GHC.Show.$fShow(,)_$cshowList1 ls_sKSk s_sKSl;

GHC.Show.$fShow[]1 :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShow(,)3 GHC.Types.[]];

GHC.Show.$fShow[]_$s$cshow1 :: [GHC.Types.Char] -> GHC.Base.String
[GblId, Arity=1, Str=<L,1*U>m2, Unf=OtherCon []] =
    [] \r [x_sKSm]
        let {
          sat_sKSn [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [x_sKSm] \u [] GHC.Show.showLitString x_sKSm GHC.Show.$fShow[]1;
        } in  : [GHC.Show.$fShow(,)3 sat_sKSn];

GHC.Show.$fShow[]_$s$fShow[]1 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show [GHC.Types.Char]
[GblId, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [$s$fShow[]_rC0d
                                    GHC.Show.$fShow[]_$s$cshow1
                                    GHC.Show.$fShow[]_$s$cshowList1];

GHC.Show.$fShow(,)1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl1_rC0e :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SrcLoc {"#;

lvl2_rC0f :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocPackage = "#;

lvl3_rC0g :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocModule = "#;

lvl4_rC0h :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocFile = "#;

lvl5_rC0i :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocStartLine = "#;

lvl6_rC0j :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocStartCol = "#;

lvl7_rC0k :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocEndLine = "#;

lvl8_rC0l :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "srcLocEndCol = "#;

lvl9_rC0m :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "}"#;

GHC.Show.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> [GHC.Types.Char]
     -> [GHC.Types.Char]
     -> [GHC.Types.Char]
     -> GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Base.String
     -> GHC.Base.String
[GblId,
 Arity=9,
 Str=<S,U><L,1*U><L,1*U><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sKSo
           ww1_sKSp
           ww2_sKSq
           ww3_sKSr
           ww4_sKSs
           ww5_sKSt
           ww6_sKSu
           ww7_sKSv
           w_sKSw]
        let {
          p_sKSx [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              sat-only [ww1_sKSp
                        ww2_sKSq
                        ww3_sKSr
                        ww4_sKSs
                        ww5_sKSt
                        ww6_sKSu
                        ww7_sKSv] \r [x_sKSy]
                  let {
                    sat_sKTj [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [ww1_sKSp
                         ww2_sKSq
                         ww3_sKSr
                         ww4_sKSs
                         ww5_sKSt
                         ww6_sKSu
                         ww7_sKSv
                         x_sKSy] \u []
                            let {
                              sat_sKTh [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [ww1_sKSp
                                   ww2_sKSq
                                   ww3_sKSr
                                   ww4_sKSs
                                   ww5_sKSt
                                   ww6_sKSu
                                   ww7_sKSv
                                   x_sKSy] \u []
                                      let {
                                        sat_sKTf [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww2_sKSq
                                             ww3_sKSr
                                             ww4_sKSs
                                             ww5_sKSt
                                             ww6_sKSu
                                             ww7_sKSv
                                             x_sKSy] \u []
                                                let {
                                                  sat_sKTe [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [ww2_sKSq
                                                       ww3_sKSr
                                                       ww4_sKSs
                                                       ww5_sKSt
                                                       ww6_sKSu
                                                       ww7_sKSv
                                                       x_sKSy] \s []
                                                          let {
                                                            sat_sKTc [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [ww2_sKSq
                                                                 ww3_sKSr
                                                                 ww4_sKSs
                                                                 ww5_sKSt
                                                                 ww6_sKSu
                                                                 ww7_sKSv
                                                                 x_sKSy] \u []
                                                                    let {
                                                                      sat_sKTa [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          [ww3_sKSr
                                                                           ww4_sKSs
                                                                           ww5_sKSt
                                                                           ww6_sKSu
                                                                           ww7_sKSv
                                                                           x_sKSy] \u []
                                                                              let {
                                                                                sat_sKT9 [Occ=Once,
                                                                                          Dmd=<L,1*U>]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    [ww3_sKSr
                                                                                     ww4_sKSs
                                                                                     ww5_sKSt
                                                                                     ww6_sKSu
                                                                                     ww7_sKSv
                                                                                     x_sKSy] \s []
                                                                                        let {
                                                                                          sat_sKT7 [Occ=Once]
                                                                                            :: [GHC.Types.Char]
                                                                                          [LclId] =
                                                                                              [ww3_sKSr
                                                                                               ww4_sKSs
                                                                                               ww5_sKSt
                                                                                               ww6_sKSu
                                                                                               ww7_sKSv
                                                                                               x_sKSy] \u []
                                                                                                  let {
                                                                                                    sat_sKT5 [Occ=Once]
                                                                                                      :: [GHC.Types.Char]
                                                                                                    [LclId] =
                                                                                                        [ww4_sKSs
                                                                                                         ww5_sKSt
                                                                                                         ww6_sKSu
                                                                                                         ww7_sKSv
                                                                                                         x_sKSy] \u []
                                                                                                            let {
                                                                                                              sat_sKT4 [Occ=Once,
                                                                                                                        Dmd=<L,1*U>]
                                                                                                                :: [GHC.Types.Char]
                                                                                                              [LclId] =
                                                                                                                  [ww4_sKSs
                                                                                                                   ww5_sKSt
                                                                                                                   ww6_sKSu
                                                                                                                   ww7_sKSv
                                                                                                                   x_sKSy] \s []
                                                                                                                      let {
                                                                                                                        sat_sKT3 [Occ=Once]
                                                                                                                          :: [GHC.Types.Char]
                                                                                                                        [LclId] =
                                                                                                                            [ww4_sKSs
                                                                                                                             ww5_sKSt
                                                                                                                             ww6_sKSu
                                                                                                                             ww7_sKSv
                                                                                                                             x_sKSy] \u []
                                                                                                                                case
                                                                                                                                    ww4_sKSs
                                                                                                                                of
                                                                                                                                { GHC.Types.I# n_sKSA [Occ=Once] ->
                                                                                                                                      let {
                                                                                                                                        sat_sKSZ [Occ=Once]
                                                                                                                                          :: GHC.Base.String
                                                                                                                                        [LclId] =
                                                                                                                                            [ww5_sKSt
                                                                                                                                             ww6_sKSu
                                                                                                                                             ww7_sKSv
                                                                                                                                             x_sKSy] \u []
                                                                                                                                                let {
                                                                                                                                                  sat_sKSY [Occ=Once,
                                                                                                                                                            Dmd=<L,1*U>]
                                                                                                                                                    :: [GHC.Types.Char]
                                                                                                                                                  [LclId] =
                                                                                                                                                      [ww5_sKSt
                                                                                                                                                       ww6_sKSu
                                                                                                                                                       ww7_sKSv
                                                                                                                                                       x_sKSy] \s []
                                                                                                                                                          let {
                                                                                                                                                            sat_sKSX [Occ=Once]
                                                                                                                                                              :: [GHC.Types.Char]
                                                                                                                                                            [LclId] =
                                                                                                                                                                [ww5_sKSt
                                                                                                                                                                 ww6_sKSu
                                                                                                                                                                 ww7_sKSv
                                                                                                                                                                 x_sKSy] \u []
                                                                                                                                                                    case
                                                                                                                                                                        ww5_sKSt
                                                                                                                                                                    of
                                                                                                                                                                    { GHC.Types.I# n1_sKSC [Occ=Once] ->
                                                                                                                                                                          let {
                                                                                                                                                                            sat_sKST [Occ=Once]
                                                                                                                                                                              :: GHC.Base.String
                                                                                                                                                                            [LclId] =
                                                                                                                                                                                [ww6_sKSu
                                                                                                                                                                                 ww7_sKSv
                                                                                                                                                                                 x_sKSy] \u []
                                                                                                                                                                                    let {
                                                                                                                                                                                      sat_sKSS [Occ=Once,
                                                                                                                                                                                                Dmd=<L,1*U>]
                                                                                                                                                                                        :: [GHC.Types.Char]
                                                                                                                                                                                      [LclId] =
                                                                                                                                                                                          [ww6_sKSu
                                                                                                                                                                                           ww7_sKSv
                                                                                                                                                                                           x_sKSy] \s []
                                                                                                                                                                                              let {
                                                                                                                                                                                                sat_sKSR [Occ=Once]
                                                                                                                                                                                                  :: [GHC.Types.Char]
                                                                                                                                                                                                [LclId] =
                                                                                                                                                                                                    [ww6_sKSu
                                                                                                                                                                                                     ww7_sKSv
                                                                                                                                                                                                     x_sKSy] \u []
                                                                                                                                                                                                        case
                                                                                                                                                                                                            ww6_sKSu
                                                                                                                                                                                                        of
                                                                                                                                                                                                        { GHC.Types.I# n2_sKSE [Occ=Once] ->
                                                                                                                                                                                                              let {
                                                                                                                                                                                                                sat_sKSN [Occ=Once]
                                                                                                                                                                                                                  :: GHC.Base.String
                                                                                                                                                                                                                [LclId] =
                                                                                                                                                                                                                    [ww7_sKSv
                                                                                                                                                                                                                     x_sKSy] \u []
                                                                                                                                                                                                                        let {
                                                                                                                                                                                                                          sat_sKSM [Occ=Once,
                                                                                                                                                                                                                                    Dmd=<L,1*U>]
                                                                                                                                                                                                                            :: [GHC.Types.Char]
                                                                                                                                                                                                                          [LclId] =
                                                                                                                                                                                                                              [ww7_sKSv
                                                                                                                                                                                                                               x_sKSy] \s []
                                                                                                                                                                                                                                  let {
                                                                                                                                                                                                                                    sat_sKSL [Occ=Once]
                                                                                                                                                                                                                                      :: [GHC.Types.Char]
                                                                                                                                                                                                                                    [LclId] =
                                                                                                                                                                                                                                        [ww7_sKSv
                                                                                                                                                                                                                                         x_sKSy] \u []
                                                                                                                                                                                                                                            case
                                                                                                                                                                                                                                                ww7_sKSv
                                                                                                                                                                                                                                            of
                                                                                                                                                                                                                                            { GHC.Types.I# n3_sKSG [Occ=Once] ->
                                                                                                                                                                                                                                                  let {
                                                                                                                                                                                                                                                    sat_sKSH [Occ=Once]
                                                                                                                                                                                                                                                      :: GHC.Base.String
                                                                                                                                                                                                                                                    [LclId] =
                                                                                                                                                                                                                                                        [x_sKSy] \u []
                                                                                                                                                                                                                                                            GHC.CString.unpackAppendCString#
                                                                                                                                                                                                                                                                lvl9_rC0m
                                                                                                                                                                                                                                                                x_sKSy;
                                                                                                                                                                                                                                                  } in 
                                                                                                                                                                                                                                                    case
                                                                                                                                                                                                                                                        GHC.Show.$witos
                                                                                                                                                                                                                                                            n3_sKSG
                                                                                                                                                                                                                                                            sat_sKSH
                                                                                                                                                                                                                                                    of
                                                                                                                                                                                                                                                    { (#,#) ww9_sKSJ [Occ=Once]
                                                                                                                                                                                                                                                            ww10_sKSK [Occ=Once] ->
                                                                                                                                                                                                                                                          : [ww9_sKSJ
                                                                                                                                                                                                                                                             ww10_sKSK];
                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                            };
                                                                                                                                                                                                                                  } in 
                                                                                                                                                                                                                                    GHC.CString.unpackAppendCString#
                                                                                                                                                                                                                                        lvl8_rC0l
                                                                                                                                                                                                                                        sat_sKSL;
                                                                                                                                                                                                                        } in 
                                                                                                                                                                                                                          GHC.Base.++
                                                                                                                                                                                                                              GHC.Show.showCommaSpace1
                                                                                                                                                                                                                              sat_sKSM;
                                                                                                                                                                                                              } in 
                                                                                                                                                                                                                case
                                                                                                                                                                                                                    GHC.Show.$witos
                                                                                                                                                                                                                        n2_sKSE
                                                                                                                                                                                                                        sat_sKSN
                                                                                                                                                                                                                of
                                                                                                                                                                                                                { (#,#) ww9_sKSP [Occ=Once]
                                                                                                                                                                                                                        ww10_sKSQ [Occ=Once] ->
                                                                                                                                                                                                                      : [ww9_sKSP
                                                                                                                                                                                                                         ww10_sKSQ];
                                                                                                                                                                                                                };
                                                                                                                                                                                                        };
                                                                                                                                                                                              } in 
                                                                                                                                                                                                GHC.CString.unpackAppendCString#
                                                                                                                                                                                                    lvl7_rC0k
                                                                                                                                                                                                    sat_sKSR;
                                                                                                                                                                                    } in 
                                                                                                                                                                                      GHC.Base.++
                                                                                                                                                                                          GHC.Show.showCommaSpace1
                                                                                                                                                                                          sat_sKSS;
                                                                                                                                                                          } in 
                                                                                                                                                                            case
                                                                                                                                                                                GHC.Show.$witos
                                                                                                                                                                                    n1_sKSC
                                                                                                                                                                                    sat_sKST
                                                                                                                                                                            of
                                                                                                                                                                            { (#,#) ww9_sKSV [Occ=Once]
                                                                                                                                                                                    ww10_sKSW [Occ=Once] ->
                                                                                                                                                                                  : [ww9_sKSV
                                                                                                                                                                                     ww10_sKSW];
                                                                                                                                                                            };
                                                                                                                                                                    };
                                                                                                                                                          } in 
                                                                                                                                                            GHC.CString.unpackAppendCString#
                                                                                                                                                                lvl6_rC0j
                                                                                                                                                                sat_sKSX;
                                                                                                                                                } in 
                                                                                                                                                  GHC.Base.++
                                                                                                                                                      GHC.Show.showCommaSpace1
                                                                                                                                                      sat_sKSY;
                                                                                                                                      } in 
                                                                                                                                        case
                                                                                                                                            GHC.Show.$witos
                                                                                                                                                n_sKSA
                                                                                                                                                sat_sKSZ
                                                                                                                                        of
                                                                                                                                        { (#,#) ww9_sKT1 [Occ=Once]
                                                                                                                                                ww10_sKT2 [Occ=Once] ->
                                                                                                                                              : [ww9_sKT1
                                                                                                                                                 ww10_sKT2];
                                                                                                                                        };
                                                                                                                                };
                                                                                                                      } in 
                                                                                                                        GHC.CString.unpackAppendCString#
                                                                                                                            lvl5_rC0i
                                                                                                                            sat_sKT3;
                                                                                                            } in 
                                                                                                              GHC.Base.++
                                                                                                                  GHC.Show.showCommaSpace1
                                                                                                                  sat_sKT4; } in
                                                                                                  let {
                                                                                                    sat_sKT6 [Occ=Once]
                                                                                                      :: GHC.Base.String
                                                                                                    [LclId] =
                                                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                                                 sat_sKT5];
                                                                                                  } in 
                                                                                                    GHC.Show.showLitString
                                                                                                        ww3_sKSr
                                                                                                        sat_sKT6; } in
                                                                                        let {
                                                                                          sat_sKT8 [Occ=Once]
                                                                                            :: [GHC.Types.Char]
                                                                                          [LclId] =
                                                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                                                       sat_sKT7];
                                                                                        } in 
                                                                                          GHC.CString.unpackAppendCString#
                                                                                              lvl4_rC0h
                                                                                              sat_sKT8;
                                                                              } in 
                                                                                GHC.Base.++
                                                                                    GHC.Show.showCommaSpace1
                                                                                    sat_sKT9; } in
                                                                    let {
                                                                      sat_sKTb [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   sat_sKTa];
                                                                    } in 
                                                                      GHC.Show.showLitString
                                                                          ww2_sKSq sat_sKTb; } in
                                                          let {
                                                            sat_sKTd [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)3
                                                                         sat_sKTc];
                                                          } in 
                                                            GHC.CString.unpackAppendCString#
                                                                lvl3_rC0g sat_sKTd;
                                                } in 
                                                  GHC.Base.++
                                                      GHC.Show.showCommaSpace1 sat_sKTe; } in
                                      let {
                                        sat_sKTg [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [GHC.Show.$fShow(,)3 sat_sKTf];
                                      } in  GHC.Show.showLitString ww1_sKSp sat_sKTg; } in
                            let {
                              sat_sKTi [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  CCCS :! [GHC.Show.$fShow(,)3 sat_sKTh];
                            } in  GHC.CString.unpackAppendCString# lvl2_rC0f sat_sKTi;
                  } in  GHC.CString.unpackAppendCString# lvl1_rC0e sat_sKTj;
        } in 
          case >=# [ww_sKSo 11#] of {
            __DEFAULT -> p_sKSx w_sKSw;
            1# ->
                let {
                  sat_sKTm [Occ=Once] :: [GHC.Types.Char]
                  [LclId] =
                      [w_sKSw p_sKSx] \u []
                          let {
                            sat_sKTl [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                CCCS :! [GHC.Show.$fShow(,)2 w_sKSw];
                          } in  p_sKSx sat_sKTl;
                } in  : [GHC.Show.$fShow(,)4 sat_sKTm];
          };

GHC.Show.$fShowSrcLoc_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Stack.Types.SrcLoc -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U(U),1*U(U),1*U(U),1*U(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sKTn w1_sKTo w2_sKTp]
        case w_sKTn of {
          GHC.Types.I# ww1_sKTr [Occ=Once] ->
              case w1_sKTo of {
                GHC.Stack.Types.SrcLoc ww3_sKTt [Occ=Once]
                                       ww4_sKTu [Occ=Once]
                                       ww5_sKTv [Occ=Once]
                                       ww6_sKTw [Occ=Once]
                                       ww7_sKTx [Occ=Once]
                                       ww8_sKTy [Occ=Once]
                                       ww9_sKTz [Occ=Once] ->
                    GHC.Show.$w$cshowsPrec
                        ww1_sKTr
                        ww3_sKTt
                        ww4_sKTu
                        ww5_sKTv
                        ww6_sKTw
                        ww7_sKTx
                        ww8_sKTy
                        ww9_sKTz
                        w2_sKTp;
              };
        };

GHC.Show.$fShowSrcLoc1 :: GHC.Stack.Types.SrcLoc -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U(1*U,1*U,1*U,1*U(U),1*U(U),1*U(U),1*U(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sKTA w1_sKTB]
        case w_sKTA of {
          GHC.Stack.Types.SrcLoc ww1_sKTD [Occ=Once]
                                 ww2_sKTE [Occ=Once]
                                 ww3_sKTF [Occ=Once]
                                 ww4_sKTG [Occ=Once]
                                 ww5_sKTH [Occ=Once]
                                 ww6_sKTI [Occ=Once]
                                 ww7_sKTJ [Occ=Once] ->
              GHC.Show.$w$cshowsPrec
                  0#
                  ww1_sKTD
                  ww2_sKTE
                  ww3_sKTF
                  ww4_sKTG
                  ww5_sKTH
                  ww6_sKTI
                  ww7_sKTJ
                  w1_sKTB;
        };

GHC.Show.$fShowSrcLoc_$cshowList
  :: [GHC.Stack.Types.SrcLoc] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sKTK s_sKTL]
        GHC.Show.showList__ GHC.Show.$fShowSrcLoc1 ls_sKTK s_sKTL;

GHC.Show.$fShowSrcLoc_$cshow
  :: GHC.Stack.Types.SrcLoc -> GHC.Base.String
[GblId,
 Arity=1,
 Str=<S,1*U(1*U,1*U,1*U,1*U(U),1*U(U),1*U(U),1*U(U))>,
 Unf=OtherCon []] =
    [] \r [x_sKTM]
        case x_sKTM of {
          GHC.Stack.Types.SrcLoc ww1_sKTO [Occ=Once]
                                 ww2_sKTP [Occ=Once]
                                 ww3_sKTQ [Occ=Once]
                                 ww4_sKTR [Occ=Once]
                                 ww5_sKTS [Occ=Once]
                                 ww6_sKTT [Occ=Once]
                                 ww7_sKTU [Occ=Once] ->
              GHC.Show.$w$cshowsPrec
                  0#
                  ww1_sKTO
                  ww2_sKTP
                  ww3_sKTQ
                  ww4_sKTR
                  ww5_sKTS
                  ww6_sKTT
                  ww7_sKTU
                  GHC.Types.[];
        };

GHC.Show.$fShowSrcLoc [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Stack.Types.SrcLoc
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowSrcLoc_$cshowsPrec
                                    GHC.Show.$fShowSrcLoc_$cshow
                                    GHC.Show.$fShowSrcLoc_$cshowList];

GHC.Show.appPrec :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [10#];

GHC.Show.appPrec1 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [11#];

GHC.Show.$wshowWord [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Word#
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [w_sKTV w1_sKTW]
        case ltWord# [w_sKTV 10##] of {
          __DEFAULT ->
              case remWord# [w_sKTV 10##] of sat_sKTZ {
                __DEFAULT ->
                    case word2Int# [sat_sKTZ] of sat_sKU0 {
                      __DEFAULT ->
                          case +# [48# sat_sKU0] of sat_sKU1 {
                            __DEFAULT ->
                                case chr# [sat_sKU1] of sat_sKU2 {
                                  __DEFAULT ->
                                      let {
                                        sat_sKU3 [Occ=Once] :: GHC.Types.Char
                                        [LclId] =
                                            CCCS GHC.Types.C#! [sat_sKU2]; } in
                                      let {
                                        sat_sKU4 [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [sat_sKU3 w1_sKTW];
                                      } in 
                                        case quotWord# [w_sKTV 10##] of sat_sKTY {
                                          __DEFAULT -> GHC.Show.$wshowWord sat_sKTY sat_sKU4;
                                        };
                                };
                          };
                    };
              };
          1# ->
              case word2Int# [w_sKTV] of sat_sKU5 {
                __DEFAULT ->
                    case +# [48# sat_sKU5] of sat_sKU6 {
                      __DEFAULT ->
                          case chr# [sat_sKU6] of sat_sKU7 {
                            __DEFAULT ->
                                let {
                                  sat_sKU8 [Occ=Once] :: GHC.Types.Char
                                  [LclId] =
                                      CCCS GHC.Types.C#! [sat_sKU7];
                                } in  (#,#) [sat_sKU8 w1_sKTW];
                          };
                    };
              };
        };

GHC.Show.showWord [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Word# -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sKU9 w1_sKUa]
        case GHC.Show.$wshowWord w_sKU9 w1_sKUa of {
          (#,#) ww1_sKUc [Occ=Once] ww2_sKUd [Occ=Once] ->
              : [ww1_sKUc ww2_sKUd];
        };

GHC.Show.$fShowWord_$cshowsPrec
  :: GHC.Types.Int -> GHC.Types.Word -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [ds_sKUe ds1_sKUf eta_sKUg]
        case ds1_sKUf of {
          GHC.Types.W# w_sKUi [Occ=Once] ->
              GHC.Show.showWord w_sKUi eta_sKUg;
        };

GHC.Show.shows :: forall a. GHC.Show.Show a => a -> GHC.Show.ShowS
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(C(S)LL),1*U(1*C1(U),A,A)>,
 Unf=OtherCon []] =
    [] \r [$dShow_sKUj]
        GHC.Show.showsPrec $dShow_sKUj GHC.Show.$fShow(,)1;

GHC.Show.$dmshow
  :: forall a. GHC.Show.Show a => a -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(C(C(C(S)))LL),1*U(1*C1(C1(C1(U))),A,A)><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sKUk x_sKUl]
        GHC.Show.showsPrec
            $dShow_sKUk GHC.Show.$fShow(,)1 x_sKUl GHC.Types.[];

GHC.Show.$dmshowList
  :: forall a. GHC.Show.Show a => [a] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C(C1(U))),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sKUm ls_sKUn s_sKUo]
        let {
          sat_sKUp [Occ=Once, Dmd=<L,C(C1(U))>] :: a_az3k -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sKUm] \u []
                  GHC.Show.showsPrec $dShow_sKUm GHC.Show.$fShow(,)1;
        } in  GHC.Show.showList__ sat_sKUp ls_sKUn s_sKUo;

GHC.Show.$fShowWord1
  :: GHC.Types.Word -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [ds_sKUq eta_sKUr]
        case ds_sKUq of {
          GHC.Types.W# w_sKUt [Occ=Once] ->
              GHC.Show.showWord w_sKUt eta_sKUr;
        };

GHC.Show.$fShowWord_$cshowList
  :: [GHC.Types.Word] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sKUu s_sKUv]
        GHC.Show.showList__ GHC.Show.$fShowWord1 ls_sKUu s_sKUv;

GHC.Show.$fShowWord_$cshow :: GHC.Types.Word -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_sKUw]
        case x_sKUw of {
          GHC.Types.W# w_sKUy [Occ=Once] ->
              case GHC.Show.$wshowWord w_sKUy GHC.Types.[] of {
                (#,#) ww1_sKUA [Occ=Once] ww2_sKUB [Occ=Once] ->
                    : [ww1_sKUA ww2_sKUB];
              };
        };

GHC.Show.$fShowWord [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Word
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowWord_$cshowsPrec
                                    GHC.Show.$fShowWord_$cshow
                                    GHC.Show.$fShowWord_$cshowList];

GHC.Show.showChar :: GHC.Types.Char -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] : [eta_B2 eta_B1];

GHC.Show.showParen
  :: GHC.Types.Bool -> GHC.Show.ShowS -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [b_sKUC p_sKUD]
        case b_sKUC of {
          GHC.Types.False -> p_sKUD;
          GHC.Types.True ->
              let {
                sat_sKUI [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                [LclId] =
                    [p_sKUD] \r [x_sKUF]
                        let {
                          sat_sKUH [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [p_sKUD x_sKUF] \u []
                                  let {
                                    sat_sKUG [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        CCCS :! [GHC.Show.$fShow(,)2 x_sKUF];
                                  } in  p_sKUD sat_sKUG;
                        } in  : [GHC.Show.$fShow(,)4 sat_sKUH];
              } in  sat_sKUI;
        };

lvl10_rC0n :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "foldr1"#;

lvl11_rC0o :: GHC.Base.String -> GHC.Base.String
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl10_rC0n of sat_sKUJ {
          __DEFAULT -> GHC.List.errorEmptyList sat_sKUJ;
        };

go2_rC0p
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    sat-only [] \r [ds_sKUK eta_sKUL]
        case ds_sKUK of {
          [] -> lvl11_rC0o;
          : x_sKUO [Occ=Once*!] ds1_sKUP [Occ=Once!] ->
              case ds1_sKUP of wild1_sKUQ {
                [] -> x_sKUO eta_sKUL;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sKUT [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sKUL wild1_sKUQ] \u [] go2_rC0p wild1_sKUQ eta_sKUL; } in
                    let {
                      sat_sKUU [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sKUT];
                    } in  x_sKUO sat_sKUU;
              };
        };

GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n,
      GHC.Show.Show o) =>
     GHC.Types.Int
     -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) -> GHC.Show.ShowS
[GblId,
 Arity=18,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sKUV
           $dShow1_sKUW
           $dShow2_sKUX
           $dShow3_sKUY
           $dShow4_sKUZ
           $dShow5_sKV0
           $dShow6_sKV1
           $dShow7_sKV2
           $dShow8_sKV3
           $dShow9_sKV4
           $dShow10_sKV5
           $dShow11_sKV6
           $dShow12_sKV7
           $dShow13_sKV8
           $dShow14_sKV9
           ds_sKVa
           ds1_sKVb
           s_sKVc]
        case ds1_sKVb of {
          (,,,,,,,,,,,,,,) a1_sKVe [Occ=Once]
                           b1_sKVf [Occ=Once]
                           c1_sKVg [Occ=Once]
                           d1_sKVh [Occ=Once]
                           e1_sKVi [Occ=Once]
                           f13_sKVj [Occ=Once]
                           g1_sKVk [Occ=Once]
                           h1_sKVl [Occ=Once]
                           i1_sKVm [Occ=Once]
                           j1_sKVn [Occ=Once]
                           k1_sKVo [Occ=Once]
                           l1_sKVp [Occ=Once]
                           m1_sKVq [Occ=Once]
                           n1_sKVr [Occ=Once]
                           o1_sKVs [Occ=Once] ->
              let {
                sat_sKVY [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sKUV
                     $dShow1_sKUW
                     $dShow2_sKUX
                     $dShow3_sKUY
                     $dShow4_sKUZ
                     $dShow5_sKV0
                     $dShow6_sKV1
                     $dShow7_sKV2
                     $dShow8_sKV3
                     $dShow9_sKV4
                     $dShow10_sKV5
                     $dShow11_sKV6
                     $dShow12_sKV7
                     $dShow13_sKV8
                     $dShow14_sKV9
                     s_sKVc
                     a1_sKVe
                     b1_sKVf
                     c1_sKVg
                     d1_sKVh
                     e1_sKVi
                     f13_sKVj
                     g1_sKVk
                     h1_sKVl
                     i1_sKVm
                     j1_sKVn
                     k1_sKVo
                     l1_sKVp
                     m1_sKVq
                     n1_sKVr
                     o1_sKVs] \u []
                        let {
                          sat_sKVX [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sKVc]; } in
                        let {
                          sat_sKVH [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow14_sKV9 o1_sKVs] \u []
                                  GHC.Show.showsPrec $dShow14_sKV9 GHC.Show.$fShow(,)1 o1_sKVs; } in
                        let {
                          sat_sKVI [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVH GHC.Types.[]]; } in
                        let {
                          sat_sKVG [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow13_sKV8 n1_sKVr] \u []
                                  GHC.Show.showsPrec $dShow13_sKV8 GHC.Show.$fShow(,)1 n1_sKVr; } in
                        let {
                          sat_sKVJ [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVG sat_sKVI]; } in
                        let {
                          sat_sKVF [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow12_sKV7 m1_sKVq] \u []
                                  GHC.Show.showsPrec $dShow12_sKV7 GHC.Show.$fShow(,)1 m1_sKVq; } in
                        let {
                          sat_sKVK [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVF sat_sKVJ]; } in
                        let {
                          sat_sKVE [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow11_sKV6 l1_sKVp] \u []
                                  GHC.Show.showsPrec $dShow11_sKV6 GHC.Show.$fShow(,)1 l1_sKVp; } in
                        let {
                          sat_sKVL [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVE sat_sKVK]; } in
                        let {
                          sat_sKVD [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow10_sKV5 k1_sKVo] \u []
                                  GHC.Show.showsPrec $dShow10_sKV5 GHC.Show.$fShow(,)1 k1_sKVo; } in
                        let {
                          sat_sKVM [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVD sat_sKVL]; } in
                        let {
                          sat_sKVC [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sKV4 j1_sKVn] \u []
                                  GHC.Show.showsPrec $dShow9_sKV4 GHC.Show.$fShow(,)1 j1_sKVn; } in
                        let {
                          sat_sKVN [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVC sat_sKVM]; } in
                        let {
                          sat_sKVB [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sKV3 i1_sKVm] \u []
                                  GHC.Show.showsPrec $dShow8_sKV3 GHC.Show.$fShow(,)1 i1_sKVm; } in
                        let {
                          sat_sKVO [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVB sat_sKVN]; } in
                        let {
                          sat_sKVA [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sKV2 h1_sKVl] \u []
                                  GHC.Show.showsPrec $dShow7_sKV2 GHC.Show.$fShow(,)1 h1_sKVl; } in
                        let {
                          sat_sKVP [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVA sat_sKVO]; } in
                        let {
                          sat_sKVz [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sKV1 g1_sKVk] \u []
                                  GHC.Show.showsPrec $dShow6_sKV1 GHC.Show.$fShow(,)1 g1_sKVk; } in
                        let {
                          sat_sKVQ [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVz sat_sKVP]; } in
                        let {
                          sat_sKVy [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sKV0 f13_sKVj] \u []
                                  GHC.Show.showsPrec $dShow5_sKV0 GHC.Show.$fShow(,)1 f13_sKVj; } in
                        let {
                          sat_sKVR [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVy sat_sKVQ]; } in
                        let {
                          sat_sKVx [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sKUZ e1_sKVi] \u []
                                  GHC.Show.showsPrec $dShow4_sKUZ GHC.Show.$fShow(,)1 e1_sKVi; } in
                        let {
                          sat_sKVS [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVx sat_sKVR]; } in
                        let {
                          sat_sKVw [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sKUY d1_sKVh] \u []
                                  GHC.Show.showsPrec $dShow3_sKUY GHC.Show.$fShow(,)1 d1_sKVh; } in
                        let {
                          sat_sKVT [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVw sat_sKVS]; } in
                        let {
                          sat_sKVv [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sKUX c1_sKVg] \u []
                                  GHC.Show.showsPrec $dShow2_sKUX GHC.Show.$fShow(,)1 c1_sKVg; } in
                        let {
                          sat_sKVU [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVv sat_sKVT]; } in
                        let {
                          sat_sKVu [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sKUW b1_sKVf] \u []
                                  GHC.Show.showsPrec $dShow1_sKUW GHC.Show.$fShow(,)1 b1_sKVf; } in
                        let {
                          sat_sKVV [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKVu sat_sKVU]; } in
                        let {
                          sat_sKVt [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sKUV a1_sKVe] \u []
                                  GHC.Show.showsPrec $dShow_sKUV GHC.Show.$fShow(,)1 a1_sKVe; } in
                        let {
                          sat_sKVW [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sKVt sat_sKVV];
                        } in  go2_rC0p sat_sKVW sat_sKVX;
              } in  : [GHC.Show.$fShow(,)4 sat_sKVY];
        };

GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n,
      GHC.Show.Show o) =>
     (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) -> GHC.Base.String
[GblId,
 Arity=16,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sKVZ
           $dShow1_sKW0
           $dShow2_sKW1
           $dShow3_sKW2
           $dShow4_sKW3
           $dShow5_sKW4
           $dShow6_sKW5
           $dShow7_sKW6
           $dShow8_sKW7
           $dShow9_sKW8
           $dShow10_sKW9
           $dShow11_sKWa
           $dShow12_sKWb
           $dShow13_sKWc
           $dShow14_sKWd
           x_sKWe]
        GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
            $dShow_sKVZ
            $dShow1_sKW0
            $dShow2_sKW1
            $dShow3_sKW2
            $dShow4_sKW3
            $dShow5_sKW4
            $dShow6_sKW5
            $dShow7_sKW6
            $dShow8_sKW7
            $dShow9_sKW8
            $dShow10_sKW9
            $dShow11_sKWa
            $dShow12_sKWb
            $dShow13_sKWc
            $dShow14_sKWd
            GHC.Show.$fShow(,)1
            x_sKWe
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n,
      GHC.Show.Show o) =>
     [(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)] -> GHC.Show.ShowS
[GblId,
 Arity=17,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sKWf
           $dShow1_sKWg
           $dShow2_sKWh
           $dShow3_sKWi
           $dShow4_sKWj
           $dShow5_sKWk
           $dShow6_sKWl
           $dShow7_sKWm
           $dShow8_sKWn
           $dShow9_sKWo
           $dShow10_sKWp
           $dShow11_sKWq
           $dShow12_sKWr
           $dShow13_sKWs
           $dShow14_sKWt
           ls_sKWu
           s_sKWv]
        let {
          sat_sKWw [Occ=Once]
            :: (a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
                h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sKWf
               $dShow1_sKWg
               $dShow2_sKWh
               $dShow3_sKWi
               $dShow4_sKWj
               $dShow5_sKWk
               $dShow6_sKWl
               $dShow7_sKWm
               $dShow8_sKWn
               $dShow9_sKWo
               $dShow10_sKWp
               $dShow11_sKWq
               $dShow12_sKWr
               $dShow13_sKWs
               $dShow14_sKWt] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sKWf
                      $dShow1_sKWg
                      $dShow2_sKWh
                      $dShow3_sKWi
                      $dShow4_sKWj
                      $dShow5_sKWk
                      $dShow6_sKWl
                      $dShow7_sKWm
                      $dShow8_sKWn
                      $dShow9_sKWo
                      $dShow10_sKWp
                      $dShow11_sKWq
                      $dShow12_sKWr
                      $dShow13_sKWs
                      $dShow14_sKWt
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sKWw ls_sKWu s_sKWv;

GHC.Show.$fShow(,,,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m n o.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n,
      GHC.Show.Show o) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
[GblId[DFunId],
 Arity=15,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sKWx
           $dShow1_sKWy
           $dShow2_sKWz
           $dShow3_sKWA
           $dShow4_sKWB
           $dShow5_sKWC
           $dShow6_sKWD
           $dShow7_sKWE
           $dShow8_sKWF
           $dShow9_sKWG
           $dShow10_sKWH
           $dShow11_sKWI
           $dShow12_sKWJ
           $dShow13_sKWK
           $dShow14_sKWL]
        let {
          sat_sKWO [Occ=Once]
            :: [(a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
                 h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sKWx
               $dShow1_sKWy
               $dShow2_sKWz
               $dShow3_sKWA
               $dShow4_sKWB
               $dShow5_sKWC
               $dShow6_sKWD
               $dShow7_sKWE
               $dShow8_sKWF
               $dShow9_sKWG
               $dShow10_sKWH
               $dShow11_sKWI
               $dShow12_sKWJ
               $dShow13_sKWK
               $dShow14_sKWL] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowList
                      $dShow_sKWx
                      $dShow1_sKWy
                      $dShow2_sKWz
                      $dShow3_sKWA
                      $dShow4_sKWB
                      $dShow5_sKWC
                      $dShow6_sKWD
                      $dShow7_sKWE
                      $dShow8_sKWF
                      $dShow9_sKWG
                      $dShow10_sKWH
                      $dShow11_sKWI
                      $dShow12_sKWJ
                      $dShow13_sKWK
                      $dShow14_sKWL
                      eta_B2
                      eta_B1; } in
        let {
          sat_sKWN [Occ=Once]
            :: (a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
                h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sKWx
               $dShow1_sKWy
               $dShow2_sKWz
               $dShow3_sKWA
               $dShow4_sKWB
               $dShow5_sKWC
               $dShow6_sKWD
               $dShow7_sKWE
               $dShow8_sKWF
               $dShow9_sKWG
               $dShow10_sKWH
               $dShow11_sKWI
               $dShow12_sKWJ
               $dShow13_sKWK
               $dShow14_sKWL] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshow
                      $dShow_sKWx
                      $dShow1_sKWy
                      $dShow2_sKWz
                      $dShow3_sKWA
                      $dShow4_sKWB
                      $dShow5_sKWC
                      $dShow6_sKWD
                      $dShow7_sKWE
                      $dShow8_sKWF
                      $dShow9_sKWG
                      $dShow10_sKWH
                      $dShow11_sKWI
                      $dShow12_sKWJ
                      $dShow13_sKWK
                      $dShow14_sKWL
                      eta_B1; } in
        let {
          sat_sKWM [Occ=Once]
            :: GHC.Types.Int
               -> (a_azye, b_azyf, c_azyg, d_azyh, e_azyi, f12_azyj, g_azyk,
                   h_azyl, i_azym, j_azyn, k_azyo, l_azyp, m_azyq, n_azyr, o_azys)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sKWx
               $dShow1_sKWy
               $dShow2_sKWz
               $dShow3_sKWA
               $dShow4_sKWB
               $dShow5_sKWC
               $dShow6_sKWD
               $dShow7_sKWE
               $dShow8_sKWF
               $dShow9_sKWG
               $dShow10_sKWH
               $dShow11_sKWI
               $dShow12_sKWJ
               $dShow13_sKWK
               $dShow14_sKWL] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sKWx
                      $dShow1_sKWy
                      $dShow2_sKWz
                      $dShow3_sKWA
                      $dShow4_sKWB
                      $dShow5_sKWC
                      $dShow6_sKWD
                      $dShow7_sKWE
                      $dShow8_sKWF
                      $dShow9_sKWG
                      $dShow10_sKWH
                      $dShow11_sKWI
                      $dShow12_sKWJ
                      $dShow13_sKWK
                      $dShow14_sKWL
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sKWM sat_sKWN sat_sKWO];

GHC.Show.$fShow(,,,,,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sKWP eta_sKWQ]
        case ds_sKWP of {
          [] -> lvl11_rC0o;
          : x_sKWT [Occ=Once*!] ds1_sKWU [Occ=Once!] ->
              case ds1_sKWU of wild1_sKWV {
                [] -> x_sKWT eta_sKWQ;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sKWY [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sKWQ wild1_sKWV] \u []
                              GHC.Show.$fShow(,,,,,,,,,,,,,)_go2 wild1_sKWV eta_sKWQ; } in
                    let {
                      sat_sKWZ [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sKWY];
                    } in  x_sKWT sat_sKWZ;
              };
        };

GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k l m n.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n) =>
     GHC.Types.Int
     -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n) -> GHC.Show.ShowS
[GblId,
 Arity=17,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sKX0
           $dShow1_sKX1
           $dShow2_sKX2
           $dShow3_sKX3
           $dShow4_sKX4
           $dShow5_sKX5
           $dShow6_sKX6
           $dShow7_sKX7
           $dShow8_sKX8
           $dShow9_sKX9
           $dShow10_sKXa
           $dShow11_sKXb
           $dShow12_sKXc
           $dShow13_sKXd
           ds_sKXe
           ds1_sKXf
           s_sKXg]
        case ds1_sKXf of {
          (,,,,,,,,,,,,,) a1_sKXi [Occ=Once]
                          b1_sKXj [Occ=Once]
                          c1_sKXk [Occ=Once]
                          d1_sKXl [Occ=Once]
                          e1_sKXm [Occ=Once]
                          f13_sKXn [Occ=Once]
                          g1_sKXo [Occ=Once]
                          h1_sKXp [Occ=Once]
                          i1_sKXq [Occ=Once]
                          j1_sKXr [Occ=Once]
                          k1_sKXs [Occ=Once]
                          l1_sKXt [Occ=Once]
                          m1_sKXu [Occ=Once]
                          n1_sKXv [Occ=Once] ->
              let {
                sat_sKXZ [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sKX0
                     $dShow1_sKX1
                     $dShow2_sKX2
                     $dShow3_sKX3
                     $dShow4_sKX4
                     $dShow5_sKX5
                     $dShow6_sKX6
                     $dShow7_sKX7
                     $dShow8_sKX8
                     $dShow9_sKX9
                     $dShow10_sKXa
                     $dShow11_sKXb
                     $dShow12_sKXc
                     $dShow13_sKXd
                     s_sKXg
                     a1_sKXi
                     b1_sKXj
                     c1_sKXk
                     d1_sKXl
                     e1_sKXm
                     f13_sKXn
                     g1_sKXo
                     h1_sKXp
                     i1_sKXq
                     j1_sKXr
                     k1_sKXs
                     l1_sKXt
                     m1_sKXu
                     n1_sKXv] \u []
                        let {
                          sat_sKXY [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sKXg]; } in
                        let {
                          sat_sKXJ [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow13_sKXd n1_sKXv] \u []
                                  GHC.Show.showsPrec $dShow13_sKXd GHC.Show.$fShow(,)1 n1_sKXv; } in
                        let {
                          sat_sKXK [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXJ GHC.Types.[]]; } in
                        let {
                          sat_sKXI [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow12_sKXc m1_sKXu] \u []
                                  GHC.Show.showsPrec $dShow12_sKXc GHC.Show.$fShow(,)1 m1_sKXu; } in
                        let {
                          sat_sKXL [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXI sat_sKXK]; } in
                        let {
                          sat_sKXH [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow11_sKXb l1_sKXt] \u []
                                  GHC.Show.showsPrec $dShow11_sKXb GHC.Show.$fShow(,)1 l1_sKXt; } in
                        let {
                          sat_sKXM [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXH sat_sKXL]; } in
                        let {
                          sat_sKXG [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow10_sKXa k1_sKXs] \u []
                                  GHC.Show.showsPrec $dShow10_sKXa GHC.Show.$fShow(,)1 k1_sKXs; } in
                        let {
                          sat_sKXN [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXG sat_sKXM]; } in
                        let {
                          sat_sKXF [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sKX9 j1_sKXr] \u []
                                  GHC.Show.showsPrec $dShow9_sKX9 GHC.Show.$fShow(,)1 j1_sKXr; } in
                        let {
                          sat_sKXO [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXF sat_sKXN]; } in
                        let {
                          sat_sKXE [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sKX8 i1_sKXq] \u []
                                  GHC.Show.showsPrec $dShow8_sKX8 GHC.Show.$fShow(,)1 i1_sKXq; } in
                        let {
                          sat_sKXP [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXE sat_sKXO]; } in
                        let {
                          sat_sKXD [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sKX7 h1_sKXp] \u []
                                  GHC.Show.showsPrec $dShow7_sKX7 GHC.Show.$fShow(,)1 h1_sKXp; } in
                        let {
                          sat_sKXQ [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXD sat_sKXP]; } in
                        let {
                          sat_sKXC [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sKX6 g1_sKXo] \u []
                                  GHC.Show.showsPrec $dShow6_sKX6 GHC.Show.$fShow(,)1 g1_sKXo; } in
                        let {
                          sat_sKXR [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXC sat_sKXQ]; } in
                        let {
                          sat_sKXB [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sKX5 f13_sKXn] \u []
                                  GHC.Show.showsPrec $dShow5_sKX5 GHC.Show.$fShow(,)1 f13_sKXn; } in
                        let {
                          sat_sKXS [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXB sat_sKXR]; } in
                        let {
                          sat_sKXA [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sKX4 e1_sKXm] \u []
                                  GHC.Show.showsPrec $dShow4_sKX4 GHC.Show.$fShow(,)1 e1_sKXm; } in
                        let {
                          sat_sKXT [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXA sat_sKXS]; } in
                        let {
                          sat_sKXz [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sKX3 d1_sKXl] \u []
                                  GHC.Show.showsPrec $dShow3_sKX3 GHC.Show.$fShow(,)1 d1_sKXl; } in
                        let {
                          sat_sKXU [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXz sat_sKXT]; } in
                        let {
                          sat_sKXy [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sKX2 c1_sKXk] \u []
                                  GHC.Show.showsPrec $dShow2_sKX2 GHC.Show.$fShow(,)1 c1_sKXk; } in
                        let {
                          sat_sKXV [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXy sat_sKXU]; } in
                        let {
                          sat_sKXx [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sKX1 b1_sKXj] \u []
                                  GHC.Show.showsPrec $dShow1_sKX1 GHC.Show.$fShow(,)1 b1_sKXj; } in
                        let {
                          sat_sKXW [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKXx sat_sKXV]; } in
                        let {
                          sat_sKXw [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sKX0 a1_sKXi] \u []
                                  GHC.Show.showsPrec $dShow_sKX0 GHC.Show.$fShow(,)1 a1_sKXi; } in
                        let {
                          sat_sKXX [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sKXw sat_sKXW];
                        } in  GHC.Show.$fShow(,,,,,,,,,,,,,)_go2 sat_sKXX sat_sKXY;
              } in  : [GHC.Show.$fShow(,)4 sat_sKXZ];
        };

GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k l m n.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n) =>
     (a, b, c, d, e, f, g, h, i, j, k, l, m, n) -> GHC.Base.String
[GblId,
 Arity=15,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sKY0
           $dShow1_sKY1
           $dShow2_sKY2
           $dShow3_sKY3
           $dShow4_sKY4
           $dShow5_sKY5
           $dShow6_sKY6
           $dShow7_sKY7
           $dShow8_sKY8
           $dShow9_sKY9
           $dShow10_sKYa
           $dShow11_sKYb
           $dShow12_sKYc
           $dShow13_sKYd
           x_sKYe]
        GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
            $dShow_sKY0
            $dShow1_sKY1
            $dShow2_sKY2
            $dShow3_sKY3
            $dShow4_sKY4
            $dShow5_sKY5
            $dShow6_sKY6
            $dShow7_sKY7
            $dShow8_sKY8
            $dShow9_sKY9
            $dShow10_sKYa
            $dShow11_sKYb
            $dShow12_sKYc
            $dShow13_sKYd
            GHC.Show.$fShow(,)1
            x_sKYe
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k l m n.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n) =>
     [(a, b, c, d, e, f, g, h, i, j, k, l, m, n)] -> GHC.Show.ShowS
[GblId,
 Arity=16,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sKYf
           $dShow1_sKYg
           $dShow2_sKYh
           $dShow3_sKYi
           $dShow4_sKYj
           $dShow5_sKYk
           $dShow6_sKYl
           $dShow7_sKYm
           $dShow8_sKYn
           $dShow9_sKYo
           $dShow10_sKYp
           $dShow11_sKYq
           $dShow12_sKYr
           $dShow13_sKYs
           ls_sKYt
           s_sKYu]
        let {
          sat_sKYv [Occ=Once]
            :: (a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
                h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sKYf
               $dShow1_sKYg
               $dShow2_sKYh
               $dShow3_sKYi
               $dShow4_sKYj
               $dShow5_sKYk
               $dShow6_sKYl
               $dShow7_sKYm
               $dShow8_sKYn
               $dShow9_sKYo
               $dShow10_sKYp
               $dShow11_sKYq
               $dShow12_sKYr
               $dShow13_sKYs] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sKYf
                      $dShow1_sKYg
                      $dShow2_sKYh
                      $dShow3_sKYi
                      $dShow4_sKYj
                      $dShow5_sKYk
                      $dShow6_sKYl
                      $dShow7_sKYm
                      $dShow8_sKYn
                      $dShow9_sKYo
                      $dShow10_sKYp
                      $dShow11_sKYq
                      $dShow12_sKYr
                      $dShow13_sKYs
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sKYv ls_sKYt s_sKYu;

GHC.Show.$fShow(,,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m n.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
[GblId[DFunId],
 Arity=14,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sKYw
           $dShow1_sKYx
           $dShow2_sKYy
           $dShow3_sKYz
           $dShow4_sKYA
           $dShow5_sKYB
           $dShow6_sKYC
           $dShow7_sKYD
           $dShow8_sKYE
           $dShow9_sKYF
           $dShow10_sKYG
           $dShow11_sKYH
           $dShow12_sKYI
           $dShow13_sKYJ]
        let {
          sat_sKYM [Occ=Once]
            :: [(a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
                 h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sKYw
               $dShow1_sKYx
               $dShow2_sKYy
               $dShow3_sKYz
               $dShow4_sKYA
               $dShow5_sKYB
               $dShow6_sKYC
               $dShow7_sKYD
               $dShow8_sKYE
               $dShow9_sKYF
               $dShow10_sKYG
               $dShow11_sKYH
               $dShow12_sKYI
               $dShow13_sKYJ] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowList
                      $dShow_sKYw
                      $dShow1_sKYx
                      $dShow2_sKYy
                      $dShow3_sKYz
                      $dShow4_sKYA
                      $dShow5_sKYB
                      $dShow6_sKYC
                      $dShow7_sKYD
                      $dShow8_sKYE
                      $dShow9_sKYF
                      $dShow10_sKYG
                      $dShow11_sKYH
                      $dShow12_sKYI
                      $dShow13_sKYJ
                      eta_B2
                      eta_B1; } in
        let {
          sat_sKYL [Occ=Once]
            :: (a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
                h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sKYw
               $dShow1_sKYx
               $dShow2_sKYy
               $dShow3_sKYz
               $dShow4_sKYA
               $dShow5_sKYB
               $dShow6_sKYC
               $dShow7_sKYD
               $dShow8_sKYE
               $dShow9_sKYF
               $dShow10_sKYG
               $dShow11_sKYH
               $dShow12_sKYI
               $dShow13_sKYJ] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshow
                      $dShow_sKYw
                      $dShow1_sKYx
                      $dShow2_sKYy
                      $dShow3_sKYz
                      $dShow4_sKYA
                      $dShow5_sKYB
                      $dShow6_sKYC
                      $dShow7_sKYD
                      $dShow8_sKYE
                      $dShow9_sKYF
                      $dShow10_sKYG
                      $dShow11_sKYH
                      $dShow12_sKYI
                      $dShow13_sKYJ
                      eta_B1; } in
        let {
          sat_sKYK [Occ=Once]
            :: GHC.Types.Int
               -> (a_azzs, b_azzt, c_azzu, d_azzv, e_azzw, f12_azzx, g_azzy,
                   h_azzz, i_azzA, j_azzB, k_azzC, l_azzD, m_azzE, n_azzF)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sKYw
               $dShow1_sKYx
               $dShow2_sKYy
               $dShow3_sKYz
               $dShow4_sKYA
               $dShow5_sKYB
               $dShow6_sKYC
               $dShow7_sKYD
               $dShow8_sKYE
               $dShow9_sKYF
               $dShow10_sKYG
               $dShow11_sKYH
               $dShow12_sKYI
               $dShow13_sKYJ] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sKYw
                      $dShow1_sKYx
                      $dShow2_sKYy
                      $dShow3_sKYz
                      $dShow4_sKYA
                      $dShow5_sKYB
                      $dShow6_sKYC
                      $dShow7_sKYD
                      $dShow8_sKYE
                      $dShow9_sKYF
                      $dShow10_sKYG
                      $dShow11_sKYH
                      $dShow12_sKYI
                      $dShow13_sKYJ
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sKYK sat_sKYL sat_sKYM];

GHC.Show.$fShow(,,,,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sKYN eta_sKYO]
        case ds_sKYN of {
          [] -> lvl11_rC0o;
          : x_sKYR [Occ=Once*!] ds1_sKYS [Occ=Once!] ->
              case ds1_sKYS of wild1_sKYT {
                [] -> x_sKYR eta_sKYO;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sKYW [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sKYO wild1_sKYT] \u []
                              GHC.Show.$fShow(,,,,,,,,,,,,)_go2 wild1_sKYT eta_sKYO; } in
                    let {
                      sat_sKYX [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sKYW];
                    } in  x_sKYR sat_sKYX;
              };
        };

GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k l m.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m) =>
     GHC.Types.Int
     -> (a, b, c, d, e, f, g, h, i, j, k, l, m) -> GHC.Show.ShowS
[GblId,
 Arity=16,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sKYY
           $dShow1_sKYZ
           $dShow2_sKZ0
           $dShow3_sKZ1
           $dShow4_sKZ2
           $dShow5_sKZ3
           $dShow6_sKZ4
           $dShow7_sKZ5
           $dShow8_sKZ6
           $dShow9_sKZ7
           $dShow10_sKZ8
           $dShow11_sKZ9
           $dShow12_sKZa
           ds_sKZb
           ds1_sKZc
           s_sKZd]
        case ds1_sKZc of {
          (,,,,,,,,,,,,) a1_sKZf [Occ=Once]
                         b1_sKZg [Occ=Once]
                         c1_sKZh [Occ=Once]
                         d1_sKZi [Occ=Once]
                         e1_sKZj [Occ=Once]
                         f13_sKZk [Occ=Once]
                         g1_sKZl [Occ=Once]
                         h1_sKZm [Occ=Once]
                         i1_sKZn [Occ=Once]
                         j1_sKZo [Occ=Once]
                         k1_sKZp [Occ=Once]
                         l1_sKZq [Occ=Once]
                         m1_sKZr [Occ=Once] ->
              let {
                sat_sKZT [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sKYY
                     $dShow1_sKYZ
                     $dShow2_sKZ0
                     $dShow3_sKZ1
                     $dShow4_sKZ2
                     $dShow5_sKZ3
                     $dShow6_sKZ4
                     $dShow7_sKZ5
                     $dShow8_sKZ6
                     $dShow9_sKZ7
                     $dShow10_sKZ8
                     $dShow11_sKZ9
                     $dShow12_sKZa
                     s_sKZd
                     a1_sKZf
                     b1_sKZg
                     c1_sKZh
                     d1_sKZi
                     e1_sKZj
                     f13_sKZk
                     g1_sKZl
                     h1_sKZm
                     i1_sKZn
                     j1_sKZo
                     k1_sKZp
                     l1_sKZq
                     m1_sKZr] \u []
                        let {
                          sat_sKZS [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sKZd]; } in
                        let {
                          sat_sKZE [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow12_sKZa m1_sKZr] \u []
                                  GHC.Show.showsPrec $dShow12_sKZa GHC.Show.$fShow(,)1 m1_sKZr; } in
                        let {
                          sat_sKZF [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZE GHC.Types.[]]; } in
                        let {
                          sat_sKZD [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow11_sKZ9 l1_sKZq] \u []
                                  GHC.Show.showsPrec $dShow11_sKZ9 GHC.Show.$fShow(,)1 l1_sKZq; } in
                        let {
                          sat_sKZG [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZD sat_sKZF]; } in
                        let {
                          sat_sKZC [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow10_sKZ8 k1_sKZp] \u []
                                  GHC.Show.showsPrec $dShow10_sKZ8 GHC.Show.$fShow(,)1 k1_sKZp; } in
                        let {
                          sat_sKZH [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZC sat_sKZG]; } in
                        let {
                          sat_sKZB [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sKZ7 j1_sKZo] \u []
                                  GHC.Show.showsPrec $dShow9_sKZ7 GHC.Show.$fShow(,)1 j1_sKZo; } in
                        let {
                          sat_sKZI [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZB sat_sKZH]; } in
                        let {
                          sat_sKZA [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sKZ6 i1_sKZn] \u []
                                  GHC.Show.showsPrec $dShow8_sKZ6 GHC.Show.$fShow(,)1 i1_sKZn; } in
                        let {
                          sat_sKZJ [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZA sat_sKZI]; } in
                        let {
                          sat_sKZz [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sKZ5 h1_sKZm] \u []
                                  GHC.Show.showsPrec $dShow7_sKZ5 GHC.Show.$fShow(,)1 h1_sKZm; } in
                        let {
                          sat_sKZK [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZz sat_sKZJ]; } in
                        let {
                          sat_sKZy [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sKZ4 g1_sKZl] \u []
                                  GHC.Show.showsPrec $dShow6_sKZ4 GHC.Show.$fShow(,)1 g1_sKZl; } in
                        let {
                          sat_sKZL [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZy sat_sKZK]; } in
                        let {
                          sat_sKZx [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sKZ3 f13_sKZk] \u []
                                  GHC.Show.showsPrec $dShow5_sKZ3 GHC.Show.$fShow(,)1 f13_sKZk; } in
                        let {
                          sat_sKZM [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZx sat_sKZL]; } in
                        let {
                          sat_sKZw [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sKZ2 e1_sKZj] \u []
                                  GHC.Show.showsPrec $dShow4_sKZ2 GHC.Show.$fShow(,)1 e1_sKZj; } in
                        let {
                          sat_sKZN [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZw sat_sKZM]; } in
                        let {
                          sat_sKZv [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sKZ1 d1_sKZi] \u []
                                  GHC.Show.showsPrec $dShow3_sKZ1 GHC.Show.$fShow(,)1 d1_sKZi; } in
                        let {
                          sat_sKZO [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZv sat_sKZN]; } in
                        let {
                          sat_sKZu [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sKZ0 c1_sKZh] \u []
                                  GHC.Show.showsPrec $dShow2_sKZ0 GHC.Show.$fShow(,)1 c1_sKZh; } in
                        let {
                          sat_sKZP [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZu sat_sKZO]; } in
                        let {
                          sat_sKZt [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sKYZ b1_sKZg] \u []
                                  GHC.Show.showsPrec $dShow1_sKYZ GHC.Show.$fShow(,)1 b1_sKZg; } in
                        let {
                          sat_sKZQ [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sKZt sat_sKZP]; } in
                        let {
                          sat_sKZs [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sKYY a1_sKZf] \u []
                                  GHC.Show.showsPrec $dShow_sKYY GHC.Show.$fShow(,)1 a1_sKZf; } in
                        let {
                          sat_sKZR [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sKZs sat_sKZQ];
                        } in  GHC.Show.$fShow(,,,,,,,,,,,,)_go2 sat_sKZR sat_sKZS;
              } in  : [GHC.Show.$fShow(,)4 sat_sKZT];
        };

GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k l m.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m) =>
     (a, b, c, d, e, f, g, h, i, j, k, l, m) -> GHC.Base.String
[GblId,
 Arity=14,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sKZU
           $dShow1_sKZV
           $dShow2_sKZW
           $dShow3_sKZX
           $dShow4_sKZY
           $dShow5_sKZZ
           $dShow6_sL00
           $dShow7_sL01
           $dShow8_sL02
           $dShow9_sL03
           $dShow10_sL04
           $dShow11_sL05
           $dShow12_sL06
           x_sL07]
        GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
            $dShow_sKZU
            $dShow1_sKZV
            $dShow2_sKZW
            $dShow3_sKZX
            $dShow4_sKZY
            $dShow5_sKZZ
            $dShow6_sL00
            $dShow7_sL01
            $dShow8_sL02
            $dShow9_sL03
            $dShow10_sL04
            $dShow11_sL05
            $dShow12_sL06
            GHC.Show.$fShow(,)1
            x_sL07
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k l m.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m) =>
     [(a, b, c, d, e, f, g, h, i, j, k, l, m)] -> GHC.Show.ShowS
[GblId,
 Arity=15,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sL08
           $dShow1_sL09
           $dShow2_sL0a
           $dShow3_sL0b
           $dShow4_sL0c
           $dShow5_sL0d
           $dShow6_sL0e
           $dShow7_sL0f
           $dShow8_sL0g
           $dShow9_sL0h
           $dShow10_sL0i
           $dShow11_sL0j
           $dShow12_sL0k
           ls_sL0l
           s_sL0m]
        let {
          sat_sL0n [Occ=Once]
            :: (a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
                h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL08
               $dShow1_sL09
               $dShow2_sL0a
               $dShow3_sL0b
               $dShow4_sL0c
               $dShow5_sL0d
               $dShow6_sL0e
               $dShow7_sL0f
               $dShow8_sL0g
               $dShow9_sL0h
               $dShow10_sL0i
               $dShow11_sL0j
               $dShow12_sL0k] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sL08
                      $dShow1_sL09
                      $dShow2_sL0a
                      $dShow3_sL0b
                      $dShow4_sL0c
                      $dShow5_sL0d
                      $dShow6_sL0e
                      $dShow7_sL0f
                      $dShow8_sL0g
                      $dShow9_sL0h
                      $dShow10_sL0i
                      $dShow11_sL0j
                      $dShow12_sL0k
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sL0n ls_sL0l s_sL0m;

GHC.Show.$fShow(,,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l m.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l, GHC.Show.Show m) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l, m)
[GblId[DFunId],
 Arity=13,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sL0o
           $dShow1_sL0p
           $dShow2_sL0q
           $dShow3_sL0r
           $dShow4_sL0s
           $dShow5_sL0t
           $dShow6_sL0u
           $dShow7_sL0v
           $dShow8_sL0w
           $dShow9_sL0x
           $dShow10_sL0y
           $dShow11_sL0z
           $dShow12_sL0A]
        let {
          sat_sL0D [Occ=Once]
            :: [(a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
                 h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL0o
               $dShow1_sL0p
               $dShow2_sL0q
               $dShow3_sL0r
               $dShow4_sL0s
               $dShow5_sL0t
               $dShow6_sL0u
               $dShow7_sL0v
               $dShow8_sL0w
               $dShow9_sL0x
               $dShow10_sL0y
               $dShow11_sL0z
               $dShow12_sL0A] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowList
                      $dShow_sL0o
                      $dShow1_sL0p
                      $dShow2_sL0q
                      $dShow3_sL0r
                      $dShow4_sL0s
                      $dShow5_sL0t
                      $dShow6_sL0u
                      $dShow7_sL0v
                      $dShow8_sL0w
                      $dShow9_sL0x
                      $dShow10_sL0y
                      $dShow11_sL0z
                      $dShow12_sL0A
                      eta_B2
                      eta_B1; } in
        let {
          sat_sL0C [Occ=Once]
            :: (a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
                h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sL0o
               $dShow1_sL0p
               $dShow2_sL0q
               $dShow3_sL0r
               $dShow4_sL0s
               $dShow5_sL0t
               $dShow6_sL0u
               $dShow7_sL0v
               $dShow8_sL0w
               $dShow9_sL0x
               $dShow10_sL0y
               $dShow11_sL0z
               $dShow12_sL0A] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,)_$cshow
                      $dShow_sL0o
                      $dShow1_sL0p
                      $dShow2_sL0q
                      $dShow3_sL0r
                      $dShow4_sL0s
                      $dShow5_sL0t
                      $dShow6_sL0u
                      $dShow7_sL0v
                      $dShow8_sL0w
                      $dShow9_sL0x
                      $dShow10_sL0y
                      $dShow11_sL0z
                      $dShow12_sL0A
                      eta_B1; } in
        let {
          sat_sL0B [Occ=Once]
            :: GHC.Types.Int
               -> (a_azAC, b_azAD, c_azAE, d_azAF, e_azAG, f12_azAH, g_azAI,
                   h_azAJ, i_azAK, j_azAL, k_azAM, l_azAN, m_azAO)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL0o
               $dShow1_sL0p
               $dShow2_sL0q
               $dShow3_sL0r
               $dShow4_sL0s
               $dShow5_sL0t
               $dShow6_sL0u
               $dShow7_sL0v
               $dShow8_sL0w
               $dShow9_sL0x
               $dShow10_sL0y
               $dShow11_sL0z
               $dShow12_sL0A] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sL0o
                      $dShow1_sL0p
                      $dShow2_sL0q
                      $dShow3_sL0r
                      $dShow4_sL0s
                      $dShow5_sL0t
                      $dShow6_sL0u
                      $dShow7_sL0v
                      $dShow8_sL0w
                      $dShow9_sL0x
                      $dShow10_sL0y
                      $dShow11_sL0z
                      $dShow12_sL0A
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sL0B sat_sL0C sat_sL0D];

GHC.Show.$fShow(,,,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sL0E eta_sL0F]
        case ds_sL0E of {
          [] -> lvl11_rC0o;
          : x_sL0I [Occ=Once*!] ds1_sL0J [Occ=Once!] ->
              case ds1_sL0J of wild1_sL0K {
                [] -> x_sL0I eta_sL0F;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sL0N [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sL0F wild1_sL0K] \u []
                              GHC.Show.$fShow(,,,,,,,,,,,)_go2 wild1_sL0K eta_sL0F; } in
                    let {
                      sat_sL0O [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sL0N];
                    } in  x_sL0I sat_sL0O;
              };
        };

GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k l.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l) =>
     GHC.Types.Int
     -> (a, b, c, d, e, f, g, h, i, j, k, l) -> GHC.Show.ShowS
[GblId,
 Arity=15,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL0P
           $dShow1_sL0Q
           $dShow2_sL0R
           $dShow3_sL0S
           $dShow4_sL0T
           $dShow5_sL0U
           $dShow6_sL0V
           $dShow7_sL0W
           $dShow8_sL0X
           $dShow9_sL0Y
           $dShow10_sL0Z
           $dShow11_sL10
           ds_sL11
           ds1_sL12
           s_sL13]
        case ds1_sL12 of {
          (,,,,,,,,,,,) a1_sL15 [Occ=Once]
                        b1_sL16 [Occ=Once]
                        c1_sL17 [Occ=Once]
                        d1_sL18 [Occ=Once]
                        e1_sL19 [Occ=Once]
                        f13_sL1a [Occ=Once]
                        g1_sL1b [Occ=Once]
                        h1_sL1c [Occ=Once]
                        i1_sL1d [Occ=Once]
                        j1_sL1e [Occ=Once]
                        k1_sL1f [Occ=Once]
                        l1_sL1g [Occ=Once] ->
              let {
                sat_sL1G [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sL0P
                     $dShow1_sL0Q
                     $dShow2_sL0R
                     $dShow3_sL0S
                     $dShow4_sL0T
                     $dShow5_sL0U
                     $dShow6_sL0V
                     $dShow7_sL0W
                     $dShow8_sL0X
                     $dShow9_sL0Y
                     $dShow10_sL0Z
                     $dShow11_sL10
                     s_sL13
                     a1_sL15
                     b1_sL16
                     c1_sL17
                     d1_sL18
                     e1_sL19
                     f13_sL1a
                     g1_sL1b
                     h1_sL1c
                     i1_sL1d
                     j1_sL1e
                     k1_sL1f
                     l1_sL1g] \u []
                        let {
                          sat_sL1F [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sL13]; } in
                        let {
                          sat_sL1s [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow11_sL10 l1_sL1g] \u []
                                  GHC.Show.showsPrec $dShow11_sL10 GHC.Show.$fShow(,)1 l1_sL1g; } in
                        let {
                          sat_sL1t [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL1s GHC.Types.[]]; } in
                        let {
                          sat_sL1r [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow10_sL0Z k1_sL1f] \u []
                                  GHC.Show.showsPrec $dShow10_sL0Z GHC.Show.$fShow(,)1 k1_sL1f; } in
                        let {
                          sat_sL1u [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL1r sat_sL1t]; } in
                        let {
                          sat_sL1q [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sL0Y j1_sL1e] \u []
                                  GHC.Show.showsPrec $dShow9_sL0Y GHC.Show.$fShow(,)1 j1_sL1e; } in
                        let {
                          sat_sL1v [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL1q sat_sL1u]; } in
                        let {
                          sat_sL1p [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sL0X i1_sL1d] \u []
                                  GHC.Show.showsPrec $dShow8_sL0X GHC.Show.$fShow(,)1 i1_sL1d; } in
                        let {
                          sat_sL1w [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL1p sat_sL1v]; } in
                        let {
                          sat_sL1o [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sL0W h1_sL1c] \u []
                                  GHC.Show.showsPrec $dShow7_sL0W GHC.Show.$fShow(,)1 h1_sL1c; } in
                        let {
                          sat_sL1x [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL1o sat_sL1w]; } in
                        let {
                          sat_sL1n [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sL0V g1_sL1b] \u []
                                  GHC.Show.showsPrec $dShow6_sL0V GHC.Show.$fShow(,)1 g1_sL1b; } in
                        let {
                          sat_sL1y [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL1n sat_sL1x]; } in
                        let {
                          sat_sL1m [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sL0U f13_sL1a] \u []
                                  GHC.Show.showsPrec $dShow5_sL0U GHC.Show.$fShow(,)1 f13_sL1a; } in
                        let {
                          sat_sL1z [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL1m sat_sL1y]; } in
                        let {
                          sat_sL1l [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sL0T e1_sL19] \u []
                                  GHC.Show.showsPrec $dShow4_sL0T GHC.Show.$fShow(,)1 e1_sL19; } in
                        let {
                          sat_sL1A [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL1l sat_sL1z]; } in
                        let {
                          sat_sL1k [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sL0S d1_sL18] \u []
                                  GHC.Show.showsPrec $dShow3_sL0S GHC.Show.$fShow(,)1 d1_sL18; } in
                        let {
                          sat_sL1B [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL1k sat_sL1A]; } in
                        let {
                          sat_sL1j [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sL0R c1_sL17] \u []
                                  GHC.Show.showsPrec $dShow2_sL0R GHC.Show.$fShow(,)1 c1_sL17; } in
                        let {
                          sat_sL1C [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL1j sat_sL1B]; } in
                        let {
                          sat_sL1i [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sL0Q b1_sL16] \u []
                                  GHC.Show.showsPrec $dShow1_sL0Q GHC.Show.$fShow(,)1 b1_sL16; } in
                        let {
                          sat_sL1D [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL1i sat_sL1C]; } in
                        let {
                          sat_sL1h [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sL0P a1_sL15] \u []
                                  GHC.Show.showsPrec $dShow_sL0P GHC.Show.$fShow(,)1 a1_sL15; } in
                        let {
                          sat_sL1E [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sL1h sat_sL1D];
                        } in  GHC.Show.$fShow(,,,,,,,,,,,)_go2 sat_sL1E sat_sL1F;
              } in  : [GHC.Show.$fShow(,)4 sat_sL1G];
        };

GHC.Show.$fShow(,,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k l.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l) =>
     (a, b, c, d, e, f, g, h, i, j, k, l) -> GHC.Base.String
[GblId,
 Arity=13,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL1H
           $dShow1_sL1I
           $dShow2_sL1J
           $dShow3_sL1K
           $dShow4_sL1L
           $dShow5_sL1M
           $dShow6_sL1N
           $dShow7_sL1O
           $dShow8_sL1P
           $dShow9_sL1Q
           $dShow10_sL1R
           $dShow11_sL1S
           x_sL1T]
        GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
            $dShow_sL1H
            $dShow1_sL1I
            $dShow2_sL1J
            $dShow3_sL1K
            $dShow4_sL1L
            $dShow5_sL1M
            $dShow6_sL1N
            $dShow7_sL1O
            $dShow8_sL1P
            $dShow9_sL1Q
            $dShow10_sL1R
            $dShow11_sL1S
            GHC.Show.$fShow(,)1
            x_sL1T
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k l.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l) =>
     [(a, b, c, d, e, f, g, h, i, j, k, l)] -> GHC.Show.ShowS
[GblId,
 Arity=14,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sL1U
           $dShow1_sL1V
           $dShow2_sL1W
           $dShow3_sL1X
           $dShow4_sL1Y
           $dShow5_sL1Z
           $dShow6_sL20
           $dShow7_sL21
           $dShow8_sL22
           $dShow9_sL23
           $dShow10_sL24
           $dShow11_sL25
           ls_sL26
           s_sL27]
        let {
          sat_sL28 [Occ=Once]
            :: (a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
                h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL1U
               $dShow1_sL1V
               $dShow2_sL1W
               $dShow3_sL1X
               $dShow4_sL1Y
               $dShow5_sL1Z
               $dShow6_sL20
               $dShow7_sL21
               $dShow8_sL22
               $dShow9_sL23
               $dShow10_sL24
               $dShow11_sL25] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sL1U
                      $dShow1_sL1V
                      $dShow2_sL1W
                      $dShow3_sL1X
                      $dShow4_sL1Y
                      $dShow5_sL1Z
                      $dShow6_sL20
                      $dShow7_sL21
                      $dShow8_sL22
                      $dShow9_sL23
                      $dShow10_sL24
                      $dShow11_sL25
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sL28 ls_sL26 s_sL27;

GHC.Show.$fShow(,,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k l.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
      GHC.Show.Show l) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l)
[GblId[DFunId],
 Arity=12,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sL29
           $dShow1_sL2a
           $dShow2_sL2b
           $dShow3_sL2c
           $dShow4_sL2d
           $dShow5_sL2e
           $dShow6_sL2f
           $dShow7_sL2g
           $dShow8_sL2h
           $dShow9_sL2i
           $dShow10_sL2j
           $dShow11_sL2k]
        let {
          sat_sL2n [Occ=Once]
            :: [(a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
                 h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL29
               $dShow1_sL2a
               $dShow2_sL2b
               $dShow3_sL2c
               $dShow4_sL2d
               $dShow5_sL2e
               $dShow6_sL2f
               $dShow7_sL2g
               $dShow8_sL2h
               $dShow9_sL2i
               $dShow10_sL2j
               $dShow11_sL2k] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,)_$cshowList
                      $dShow_sL29
                      $dShow1_sL2a
                      $dShow2_sL2b
                      $dShow3_sL2c
                      $dShow4_sL2d
                      $dShow5_sL2e
                      $dShow6_sL2f
                      $dShow7_sL2g
                      $dShow8_sL2h
                      $dShow9_sL2i
                      $dShow10_sL2j
                      $dShow11_sL2k
                      eta_B2
                      eta_B1; } in
        let {
          sat_sL2m [Occ=Once]
            :: (a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
                h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sL29
               $dShow1_sL2a
               $dShow2_sL2b
               $dShow3_sL2c
               $dShow4_sL2d
               $dShow5_sL2e
               $dShow6_sL2f
               $dShow7_sL2g
               $dShow8_sL2h
               $dShow9_sL2i
               $dShow10_sL2j
               $dShow11_sL2k] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,)_$cshow
                      $dShow_sL29
                      $dShow1_sL2a
                      $dShow2_sL2b
                      $dShow3_sL2c
                      $dShow4_sL2d
                      $dShow5_sL2e
                      $dShow6_sL2f
                      $dShow7_sL2g
                      $dShow8_sL2h
                      $dShow9_sL2i
                      $dShow10_sL2j
                      $dShow11_sL2k
                      eta_B1; } in
        let {
          sat_sL2l [Occ=Once]
            :: GHC.Types.Int
               -> (a_azBI, b_azBJ, c_azBK, d_azBL, e_azBM, f12_azBN, g_azBO,
                   h_azBP, i_azBQ, j_azBR, k_azBS, l_azBT)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL29
               $dShow1_sL2a
               $dShow2_sL2b
               $dShow3_sL2c
               $dShow4_sL2d
               $dShow5_sL2e
               $dShow6_sL2f
               $dShow7_sL2g
               $dShow8_sL2h
               $dShow9_sL2i
               $dShow10_sL2j
               $dShow11_sL2k] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,,)_$cshowsPrec
                      $dShow_sL29
                      $dShow1_sL2a
                      $dShow2_sL2b
                      $dShow3_sL2c
                      $dShow4_sL2d
                      $dShow5_sL2e
                      $dShow6_sL2f
                      $dShow7_sL2g
                      $dShow8_sL2h
                      $dShow9_sL2i
                      $dShow10_sL2j
                      $dShow11_sL2k
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sL2l sat_sL2m sat_sL2n];

GHC.Show.$fShow(,,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sL2o eta_sL2p]
        case ds_sL2o of {
          [] -> lvl11_rC0o;
          : x_sL2s [Occ=Once*!] ds1_sL2t [Occ=Once!] ->
              case ds1_sL2t of wild1_sL2u {
                [] -> x_sL2s eta_sL2p;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sL2x [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sL2p wild1_sL2u] \u []
                              GHC.Show.$fShow(,,,,,,,,,,)_go2 wild1_sL2u eta_sL2p; } in
                    let {
                      sat_sL2y [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sL2x];
                    } in  x_sL2s sat_sL2y;
              };
        };

GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j k.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j,
      GHC.Show.Show k) =>
     GHC.Types.Int
     -> (a, b, c, d, e, f, g, h, i, j, k) -> GHC.Show.ShowS
[GblId,
 Arity=14,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL2z
           $dShow1_sL2A
           $dShow2_sL2B
           $dShow3_sL2C
           $dShow4_sL2D
           $dShow5_sL2E
           $dShow6_sL2F
           $dShow7_sL2G
           $dShow8_sL2H
           $dShow9_sL2I
           $dShow10_sL2J
           ds_sL2K
           ds1_sL2L
           s_sL2M]
        case ds1_sL2L of {
          (,,,,,,,,,,) a1_sL2O [Occ=Once]
                       b1_sL2P [Occ=Once]
                       c1_sL2Q [Occ=Once]
                       d1_sL2R [Occ=Once]
                       e1_sL2S [Occ=Once]
                       f13_sL2T [Occ=Once]
                       g1_sL2U [Occ=Once]
                       h1_sL2V [Occ=Once]
                       i1_sL2W [Occ=Once]
                       j1_sL2X [Occ=Once]
                       k1_sL2Y [Occ=Once] ->
              let {
                sat_sL3m [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sL2z
                     $dShow1_sL2A
                     $dShow2_sL2B
                     $dShow3_sL2C
                     $dShow4_sL2D
                     $dShow5_sL2E
                     $dShow6_sL2F
                     $dShow7_sL2G
                     $dShow8_sL2H
                     $dShow9_sL2I
                     $dShow10_sL2J
                     s_sL2M
                     a1_sL2O
                     b1_sL2P
                     c1_sL2Q
                     d1_sL2R
                     e1_sL2S
                     f13_sL2T
                     g1_sL2U
                     h1_sL2V
                     i1_sL2W
                     j1_sL2X
                     k1_sL2Y] \u []
                        let {
                          sat_sL3l [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sL2M]; } in
                        let {
                          sat_sL39 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow10_sL2J k1_sL2Y] \u []
                                  GHC.Show.showsPrec $dShow10_sL2J GHC.Show.$fShow(,)1 k1_sL2Y; } in
                        let {
                          sat_sL3a [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL39 GHC.Types.[]]; } in
                        let {
                          sat_sL38 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sL2I j1_sL2X] \u []
                                  GHC.Show.showsPrec $dShow9_sL2I GHC.Show.$fShow(,)1 j1_sL2X; } in
                        let {
                          sat_sL3b [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL38 sat_sL3a]; } in
                        let {
                          sat_sL37 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sL2H i1_sL2W] \u []
                                  GHC.Show.showsPrec $dShow8_sL2H GHC.Show.$fShow(,)1 i1_sL2W; } in
                        let {
                          sat_sL3c [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL37 sat_sL3b]; } in
                        let {
                          sat_sL36 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sL2G h1_sL2V] \u []
                                  GHC.Show.showsPrec $dShow7_sL2G GHC.Show.$fShow(,)1 h1_sL2V; } in
                        let {
                          sat_sL3d [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL36 sat_sL3c]; } in
                        let {
                          sat_sL35 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sL2F g1_sL2U] \u []
                                  GHC.Show.showsPrec $dShow6_sL2F GHC.Show.$fShow(,)1 g1_sL2U; } in
                        let {
                          sat_sL3e [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL35 sat_sL3d]; } in
                        let {
                          sat_sL34 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sL2E f13_sL2T] \u []
                                  GHC.Show.showsPrec $dShow5_sL2E GHC.Show.$fShow(,)1 f13_sL2T; } in
                        let {
                          sat_sL3f [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL34 sat_sL3e]; } in
                        let {
                          sat_sL33 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sL2D e1_sL2S] \u []
                                  GHC.Show.showsPrec $dShow4_sL2D GHC.Show.$fShow(,)1 e1_sL2S; } in
                        let {
                          sat_sL3g [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL33 sat_sL3f]; } in
                        let {
                          sat_sL32 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sL2C d1_sL2R] \u []
                                  GHC.Show.showsPrec $dShow3_sL2C GHC.Show.$fShow(,)1 d1_sL2R; } in
                        let {
                          sat_sL3h [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL32 sat_sL3g]; } in
                        let {
                          sat_sL31 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sL2B c1_sL2Q] \u []
                                  GHC.Show.showsPrec $dShow2_sL2B GHC.Show.$fShow(,)1 c1_sL2Q; } in
                        let {
                          sat_sL3i [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL31 sat_sL3h]; } in
                        let {
                          sat_sL30 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sL2A b1_sL2P] \u []
                                  GHC.Show.showsPrec $dShow1_sL2A GHC.Show.$fShow(,)1 b1_sL2P; } in
                        let {
                          sat_sL3j [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL30 sat_sL3i]; } in
                        let {
                          sat_sL2Z [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sL2z a1_sL2O] \u []
                                  GHC.Show.showsPrec $dShow_sL2z GHC.Show.$fShow(,)1 a1_sL2O; } in
                        let {
                          sat_sL3k [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sL2Z sat_sL3j];
                        } in  GHC.Show.$fShow(,,,,,,,,,,)_go2 sat_sL3k sat_sL3l;
              } in  : [GHC.Show.$fShow(,)4 sat_sL3m];
        };

GHC.Show.$fShow(,,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j k.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j,
      GHC.Show.Show k) =>
     (a, b, c, d, e, f, g, h, i, j, k) -> GHC.Base.String
[GblId,
 Arity=12,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL3n
           $dShow1_sL3o
           $dShow2_sL3p
           $dShow3_sL3q
           $dShow4_sL3r
           $dShow5_sL3s
           $dShow6_sL3t
           $dShow7_sL3u
           $dShow8_sL3v
           $dShow9_sL3w
           $dShow10_sL3x
           x_sL3y]
        GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
            $dShow_sL3n
            $dShow1_sL3o
            $dShow2_sL3p
            $dShow3_sL3q
            $dShow4_sL3r
            $dShow5_sL3s
            $dShow6_sL3t
            $dShow7_sL3u
            $dShow8_sL3v
            $dShow9_sL3w
            $dShow10_sL3x
            GHC.Show.$fShow(,)1
            x_sL3y
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j k.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j,
      GHC.Show.Show k) =>
     [(a, b, c, d, e, f, g, h, i, j, k)] -> GHC.Show.ShowS
[GblId,
 Arity=13,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sL3z
           $dShow1_sL3A
           $dShow2_sL3B
           $dShow3_sL3C
           $dShow4_sL3D
           $dShow5_sL3E
           $dShow6_sL3F
           $dShow7_sL3G
           $dShow8_sL3H
           $dShow9_sL3I
           $dShow10_sL3J
           ls_sL3K
           s_sL3L]
        let {
          sat_sL3M [Occ=Once]
            :: (a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
                h_azCR, i_azCS, j_azCT, k_azCU)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL3z
               $dShow1_sL3A
               $dShow2_sL3B
               $dShow3_sL3C
               $dShow4_sL3D
               $dShow5_sL3E
               $dShow6_sL3F
               $dShow7_sL3G
               $dShow8_sL3H
               $dShow9_sL3I
               $dShow10_sL3J] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
                      $dShow_sL3z
                      $dShow1_sL3A
                      $dShow2_sL3B
                      $dShow3_sL3C
                      $dShow4_sL3D
                      $dShow5_sL3E
                      $dShow6_sL3F
                      $dShow7_sL3G
                      $dShow8_sL3H
                      $dShow9_sL3I
                      $dShow10_sL3J
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sL3M ls_sL3K s_sL3L;

GHC.Show.$fShow(,,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j k.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j,
      GHC.Show.Show k) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k)
[GblId[DFunId],
 Arity=11,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sL3N
           $dShow1_sL3O
           $dShow2_sL3P
           $dShow3_sL3Q
           $dShow4_sL3R
           $dShow5_sL3S
           $dShow6_sL3T
           $dShow7_sL3U
           $dShow8_sL3V
           $dShow9_sL3W
           $dShow10_sL3X]
        let {
          sat_sL40 [Occ=Once]
            :: [(a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
                 h_azCR, i_azCS, j_azCT, k_azCU)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL3N
               $dShow1_sL3O
               $dShow2_sL3P
               $dShow3_sL3Q
               $dShow4_sL3R
               $dShow5_sL3S
               $dShow6_sL3T
               $dShow7_sL3U
               $dShow8_sL3V
               $dShow9_sL3W
               $dShow10_sL3X] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,)_$cshowList
                      $dShow_sL3N
                      $dShow1_sL3O
                      $dShow2_sL3P
                      $dShow3_sL3Q
                      $dShow4_sL3R
                      $dShow5_sL3S
                      $dShow6_sL3T
                      $dShow7_sL3U
                      $dShow8_sL3V
                      $dShow9_sL3W
                      $dShow10_sL3X
                      eta_B2
                      eta_B1; } in
        let {
          sat_sL3Z [Occ=Once]
            :: (a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
                h_azCR, i_azCS, j_azCT, k_azCU)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sL3N
               $dShow1_sL3O
               $dShow2_sL3P
               $dShow3_sL3Q
               $dShow4_sL3R
               $dShow5_sL3S
               $dShow6_sL3T
               $dShow7_sL3U
               $dShow8_sL3V
               $dShow9_sL3W
               $dShow10_sL3X] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,)_$cshow
                      $dShow_sL3N
                      $dShow1_sL3O
                      $dShow2_sL3P
                      $dShow3_sL3Q
                      $dShow4_sL3R
                      $dShow5_sL3S
                      $dShow6_sL3T
                      $dShow7_sL3U
                      $dShow8_sL3V
                      $dShow9_sL3W
                      $dShow10_sL3X
                      eta_B1; } in
        let {
          sat_sL3Y [Occ=Once]
            :: GHC.Types.Int
               -> (a_azCK, b_azCL, c_azCM, d_azCN, e_azCO, f12_azCP, g_azCQ,
                   h_azCR, i_azCS, j_azCT, k_azCU)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL3N
               $dShow1_sL3O
               $dShow2_sL3P
               $dShow3_sL3Q
               $dShow4_sL3R
               $dShow5_sL3S
               $dShow6_sL3T
               $dShow7_sL3U
               $dShow8_sL3V
               $dShow9_sL3W
               $dShow10_sL3X] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,,)_$cshowsPrec
                      $dShow_sL3N
                      $dShow1_sL3O
                      $dShow2_sL3P
                      $dShow3_sL3Q
                      $dShow4_sL3R
                      $dShow5_sL3S
                      $dShow6_sL3T
                      $dShow7_sL3U
                      $dShow8_sL3V
                      $dShow9_sL3W
                      $dShow10_sL3X
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sL3Y sat_sL3Z sat_sL40];

GHC.Show.$fShow(,,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sL41 eta_sL42]
        case ds_sL41 of {
          [] -> lvl11_rC0o;
          : x_sL45 [Occ=Once*!] ds1_sL46 [Occ=Once!] ->
              case ds1_sL46 of wild1_sL47 {
                [] -> x_sL45 eta_sL42;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sL4a [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sL42 wild1_sL47] \u []
                              GHC.Show.$fShow(,,,,,,,,,)_go2 wild1_sL47 eta_sL42; } in
                    let {
                      sat_sL4b [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sL4a];
                    } in  x_sL45 sat_sL4b;
              };
        };

GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i j.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j) =>
     GHC.Types.Int -> (a, b, c, d, e, f, g, h, i, j) -> GHC.Show.ShowS
[GblId,
 Arity=13,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL4c
           $dShow1_sL4d
           $dShow2_sL4e
           $dShow3_sL4f
           $dShow4_sL4g
           $dShow5_sL4h
           $dShow6_sL4i
           $dShow7_sL4j
           $dShow8_sL4k
           $dShow9_sL4l
           ds_sL4m
           ds1_sL4n
           s_sL4o]
        case ds1_sL4n of {
          (,,,,,,,,,) a1_sL4q [Occ=Once]
                      b1_sL4r [Occ=Once]
                      c1_sL4s [Occ=Once]
                      d1_sL4t [Occ=Once]
                      e1_sL4u [Occ=Once]
                      f13_sL4v [Occ=Once]
                      g1_sL4w [Occ=Once]
                      h1_sL4x [Occ=Once]
                      i1_sL4y [Occ=Once]
                      j1_sL4z [Occ=Once] ->
              let {
                sat_sL4V [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sL4c
                     $dShow1_sL4d
                     $dShow2_sL4e
                     $dShow3_sL4f
                     $dShow4_sL4g
                     $dShow5_sL4h
                     $dShow6_sL4i
                     $dShow7_sL4j
                     $dShow8_sL4k
                     $dShow9_sL4l
                     s_sL4o
                     a1_sL4q
                     b1_sL4r
                     c1_sL4s
                     d1_sL4t
                     e1_sL4u
                     f13_sL4v
                     g1_sL4w
                     h1_sL4x
                     i1_sL4y
                     j1_sL4z] \u []
                        let {
                          sat_sL4U [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sL4o]; } in
                        let {
                          sat_sL4J [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow9_sL4l j1_sL4z] \u []
                                  GHC.Show.showsPrec $dShow9_sL4l GHC.Show.$fShow(,)1 j1_sL4z; } in
                        let {
                          sat_sL4K [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL4J GHC.Types.[]]; } in
                        let {
                          sat_sL4I [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sL4k i1_sL4y] \u []
                                  GHC.Show.showsPrec $dShow8_sL4k GHC.Show.$fShow(,)1 i1_sL4y; } in
                        let {
                          sat_sL4L [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL4I sat_sL4K]; } in
                        let {
                          sat_sL4H [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sL4j h1_sL4x] \u []
                                  GHC.Show.showsPrec $dShow7_sL4j GHC.Show.$fShow(,)1 h1_sL4x; } in
                        let {
                          sat_sL4M [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL4H sat_sL4L]; } in
                        let {
                          sat_sL4G [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sL4i g1_sL4w] \u []
                                  GHC.Show.showsPrec $dShow6_sL4i GHC.Show.$fShow(,)1 g1_sL4w; } in
                        let {
                          sat_sL4N [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL4G sat_sL4M]; } in
                        let {
                          sat_sL4F [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sL4h f13_sL4v] \u []
                                  GHC.Show.showsPrec $dShow5_sL4h GHC.Show.$fShow(,)1 f13_sL4v; } in
                        let {
                          sat_sL4O [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL4F sat_sL4N]; } in
                        let {
                          sat_sL4E [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sL4g e1_sL4u] \u []
                                  GHC.Show.showsPrec $dShow4_sL4g GHC.Show.$fShow(,)1 e1_sL4u; } in
                        let {
                          sat_sL4P [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL4E sat_sL4O]; } in
                        let {
                          sat_sL4D [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sL4f d1_sL4t] \u []
                                  GHC.Show.showsPrec $dShow3_sL4f GHC.Show.$fShow(,)1 d1_sL4t; } in
                        let {
                          sat_sL4Q [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL4D sat_sL4P]; } in
                        let {
                          sat_sL4C [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sL4e c1_sL4s] \u []
                                  GHC.Show.showsPrec $dShow2_sL4e GHC.Show.$fShow(,)1 c1_sL4s; } in
                        let {
                          sat_sL4R [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL4C sat_sL4Q]; } in
                        let {
                          sat_sL4B [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sL4d b1_sL4r] \u []
                                  GHC.Show.showsPrec $dShow1_sL4d GHC.Show.$fShow(,)1 b1_sL4r; } in
                        let {
                          sat_sL4S [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL4B sat_sL4R]; } in
                        let {
                          sat_sL4A [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sL4c a1_sL4q] \u []
                                  GHC.Show.showsPrec $dShow_sL4c GHC.Show.$fShow(,)1 a1_sL4q; } in
                        let {
                          sat_sL4T [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sL4A sat_sL4S];
                        } in  GHC.Show.$fShow(,,,,,,,,,)_go2 sat_sL4T sat_sL4U;
              } in  : [GHC.Show.$fShow(,)4 sat_sL4V];
        };

GHC.Show.$fShow(,,,,,,,,,)_$cshow
  :: forall a b c d e f g h i j.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j) =>
     (a, b, c, d, e, f, g, h, i, j) -> GHC.Base.String
[GblId,
 Arity=11,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL4W
           $dShow1_sL4X
           $dShow2_sL4Y
           $dShow3_sL4Z
           $dShow4_sL50
           $dShow5_sL51
           $dShow6_sL52
           $dShow7_sL53
           $dShow8_sL54
           $dShow9_sL55
           x_sL56]
        GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
            $dShow_sL4W
            $dShow1_sL4X
            $dShow2_sL4Y
            $dShow3_sL4Z
            $dShow4_sL50
            $dShow5_sL51
            $dShow6_sL52
            $dShow7_sL53
            $dShow8_sL54
            $dShow9_sL55
            GHC.Show.$fShow(,)1
            x_sL56
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i j.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j) =>
     [(a, b, c, d, e, f, g, h, i, j)] -> GHC.Show.ShowS
[GblId,
 Arity=12,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sL57
           $dShow1_sL58
           $dShow2_sL59
           $dShow3_sL5a
           $dShow4_sL5b
           $dShow5_sL5c
           $dShow6_sL5d
           $dShow7_sL5e
           $dShow8_sL5f
           $dShow9_sL5g
           ls_sL5h
           s_sL5i]
        let {
          sat_sL5j [Occ=Once]
            :: (a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
                h_azDP, i_azDQ, j_azDR)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL57
               $dShow1_sL58
               $dShow2_sL59
               $dShow3_sL5a
               $dShow4_sL5b
               $dShow5_sL5c
               $dShow6_sL5d
               $dShow7_sL5e
               $dShow8_sL5f
               $dShow9_sL5g] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
                      $dShow_sL57
                      $dShow1_sL58
                      $dShow2_sL59
                      $dShow3_sL5a
                      $dShow4_sL5b
                      $dShow5_sL5c
                      $dShow6_sL5d
                      $dShow7_sL5e
                      $dShow8_sL5f
                      $dShow9_sL5g
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sL5j ls_sL5h s_sL5i;

GHC.Show.$fShow(,,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i j.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i, j)
[GblId[DFunId],
 Arity=10,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sL5k
           $dShow1_sL5l
           $dShow2_sL5m
           $dShow3_sL5n
           $dShow4_sL5o
           $dShow5_sL5p
           $dShow6_sL5q
           $dShow7_sL5r
           $dShow8_sL5s
           $dShow9_sL5t]
        let {
          sat_sL5w [Occ=Once]
            :: [(a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
                 h_azDP, i_azDQ, j_azDR)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL5k
               $dShow1_sL5l
               $dShow2_sL5m
               $dShow3_sL5n
               $dShow4_sL5o
               $dShow5_sL5p
               $dShow6_sL5q
               $dShow7_sL5r
               $dShow8_sL5s
               $dShow9_sL5t] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,)_$cshowList
                      $dShow_sL5k
                      $dShow1_sL5l
                      $dShow2_sL5m
                      $dShow3_sL5n
                      $dShow4_sL5o
                      $dShow5_sL5p
                      $dShow6_sL5q
                      $dShow7_sL5r
                      $dShow8_sL5s
                      $dShow9_sL5t
                      eta_B2
                      eta_B1; } in
        let {
          sat_sL5v [Occ=Once]
            :: (a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
                h_azDP, i_azDQ, j_azDR)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sL5k
               $dShow1_sL5l
               $dShow2_sL5m
               $dShow3_sL5n
               $dShow4_sL5o
               $dShow5_sL5p
               $dShow6_sL5q
               $dShow7_sL5r
               $dShow8_sL5s
               $dShow9_sL5t] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,)_$cshow
                      $dShow_sL5k
                      $dShow1_sL5l
                      $dShow2_sL5m
                      $dShow3_sL5n
                      $dShow4_sL5o
                      $dShow5_sL5p
                      $dShow6_sL5q
                      $dShow7_sL5r
                      $dShow8_sL5s
                      $dShow9_sL5t
                      eta_B1; } in
        let {
          sat_sL5u [Occ=Once]
            :: GHC.Types.Int
               -> (a_azDI, b_azDJ, c_azDK, d_azDL, e_azDM, f12_azDN, g_azDO,
                   h_azDP, i_azDQ, j_azDR)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL5k
               $dShow1_sL5l
               $dShow2_sL5m
               $dShow3_sL5n
               $dShow4_sL5o
               $dShow5_sL5p
               $dShow6_sL5q
               $dShow7_sL5r
               $dShow8_sL5s
               $dShow9_sL5t] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,,)_$cshowsPrec
                      $dShow_sL5k
                      $dShow1_sL5l
                      $dShow2_sL5m
                      $dShow3_sL5n
                      $dShow4_sL5o
                      $dShow5_sL5p
                      $dShow6_sL5q
                      $dShow7_sL5r
                      $dShow8_sL5s
                      $dShow9_sL5t
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sL5u sat_sL5v sat_sL5w];

GHC.Show.$fShow(,,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sL5x eta_sL5y]
        case ds_sL5x of {
          [] -> lvl11_rC0o;
          : x_sL5B [Occ=Once*!] ds1_sL5C [Occ=Once!] ->
              case ds1_sL5C of wild1_sL5D {
                [] -> x_sL5B eta_sL5y;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sL5G [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sL5y wild1_sL5D] \u []
                              GHC.Show.$fShow(,,,,,,,,)_go2 wild1_sL5D eta_sL5y; } in
                    let {
                      sat_sL5H [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sL5G];
                    } in  x_sL5B sat_sL5H;
              };
        };

GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h i.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i) =>
     GHC.Types.Int -> (a, b, c, d, e, f, g, h, i) -> GHC.Show.ShowS
[GblId,
 Arity=12,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL5I
           $dShow1_sL5J
           $dShow2_sL5K
           $dShow3_sL5L
           $dShow4_sL5M
           $dShow5_sL5N
           $dShow6_sL5O
           $dShow7_sL5P
           $dShow8_sL5Q
           ds_sL5R
           ds1_sL5S
           s_sL5T]
        case ds1_sL5S of {
          (,,,,,,,,) a1_sL5V [Occ=Once]
                     b1_sL5W [Occ=Once]
                     c1_sL5X [Occ=Once]
                     d1_sL5Y [Occ=Once]
                     e1_sL5Z [Occ=Once]
                     f13_sL60 [Occ=Once]
                     g1_sL61 [Occ=Once]
                     h1_sL62 [Occ=Once]
                     i1_sL63 [Occ=Once] ->
              let {
                sat_sL6n [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sL5I
                     $dShow1_sL5J
                     $dShow2_sL5K
                     $dShow3_sL5L
                     $dShow4_sL5M
                     $dShow5_sL5N
                     $dShow6_sL5O
                     $dShow7_sL5P
                     $dShow8_sL5Q
                     s_sL5T
                     a1_sL5V
                     b1_sL5W
                     c1_sL5X
                     d1_sL5Y
                     e1_sL5Z
                     f13_sL60
                     g1_sL61
                     h1_sL62
                     i1_sL63] \u []
                        let {
                          sat_sL6m [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sL5T]; } in
                        let {
                          sat_sL6c [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow8_sL5Q i1_sL63] \u []
                                  GHC.Show.showsPrec $dShow8_sL5Q GHC.Show.$fShow(,)1 i1_sL63; } in
                        let {
                          sat_sL6d [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL6c GHC.Types.[]]; } in
                        let {
                          sat_sL6b [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sL5P h1_sL62] \u []
                                  GHC.Show.showsPrec $dShow7_sL5P GHC.Show.$fShow(,)1 h1_sL62; } in
                        let {
                          sat_sL6e [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL6b sat_sL6d]; } in
                        let {
                          sat_sL6a [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sL5O g1_sL61] \u []
                                  GHC.Show.showsPrec $dShow6_sL5O GHC.Show.$fShow(,)1 g1_sL61; } in
                        let {
                          sat_sL6f [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL6a sat_sL6e]; } in
                        let {
                          sat_sL69 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sL5N f13_sL60] \u []
                                  GHC.Show.showsPrec $dShow5_sL5N GHC.Show.$fShow(,)1 f13_sL60; } in
                        let {
                          sat_sL6g [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL69 sat_sL6f]; } in
                        let {
                          sat_sL68 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sL5M e1_sL5Z] \u []
                                  GHC.Show.showsPrec $dShow4_sL5M GHC.Show.$fShow(,)1 e1_sL5Z; } in
                        let {
                          sat_sL6h [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL68 sat_sL6g]; } in
                        let {
                          sat_sL67 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sL5L d1_sL5Y] \u []
                                  GHC.Show.showsPrec $dShow3_sL5L GHC.Show.$fShow(,)1 d1_sL5Y; } in
                        let {
                          sat_sL6i [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL67 sat_sL6h]; } in
                        let {
                          sat_sL66 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sL5K c1_sL5X] \u []
                                  GHC.Show.showsPrec $dShow2_sL5K GHC.Show.$fShow(,)1 c1_sL5X; } in
                        let {
                          sat_sL6j [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL66 sat_sL6i]; } in
                        let {
                          sat_sL65 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sL5J b1_sL5W] \u []
                                  GHC.Show.showsPrec $dShow1_sL5J GHC.Show.$fShow(,)1 b1_sL5W; } in
                        let {
                          sat_sL6k [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL65 sat_sL6j]; } in
                        let {
                          sat_sL64 [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sL5I a1_sL5V] \u []
                                  GHC.Show.showsPrec $dShow_sL5I GHC.Show.$fShow(,)1 a1_sL5V; } in
                        let {
                          sat_sL6l [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sL64 sat_sL6k];
                        } in  GHC.Show.$fShow(,,,,,,,,)_go2 sat_sL6l sat_sL6m;
              } in  : [GHC.Show.$fShow(,)4 sat_sL6n];
        };

GHC.Show.$fShow(,,,,,,,,)_$cshow
  :: forall a b c d e f g h i.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i) =>
     (a, b, c, d, e, f, g, h, i) -> GHC.Base.String
[GblId,
 Arity=10,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL6o
           $dShow1_sL6p
           $dShow2_sL6q
           $dShow3_sL6r
           $dShow4_sL6s
           $dShow5_sL6t
           $dShow6_sL6u
           $dShow7_sL6v
           $dShow8_sL6w
           x_sL6x]
        GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
            $dShow_sL6o
            $dShow1_sL6p
            $dShow2_sL6q
            $dShow3_sL6r
            $dShow4_sL6s
            $dShow5_sL6t
            $dShow6_sL6u
            $dShow7_sL6v
            $dShow8_sL6w
            GHC.Show.$fShow(,)1
            x_sL6x
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,,)_$cshowList
  :: forall a b c d e f g h i.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i) =>
     [(a, b, c, d, e, f, g, h, i)] -> GHC.Show.ShowS
[GblId,
 Arity=11,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sL6y
           $dShow1_sL6z
           $dShow2_sL6A
           $dShow3_sL6B
           $dShow4_sL6C
           $dShow5_sL6D
           $dShow6_sL6E
           $dShow7_sL6F
           $dShow8_sL6G
           ls_sL6H
           s_sL6I]
        let {
          sat_sL6J [Occ=Once]
            :: (a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
                h_azEJ, i_azEK)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL6y
               $dShow1_sL6z
               $dShow2_sL6A
               $dShow3_sL6B
               $dShow4_sL6C
               $dShow5_sL6D
               $dShow6_sL6E
               $dShow7_sL6F
               $dShow8_sL6G] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
                      $dShow_sL6y
                      $dShow1_sL6z
                      $dShow2_sL6A
                      $dShow3_sL6B
                      $dShow4_sL6C
                      $dShow5_sL6D
                      $dShow6_sL6E
                      $dShow7_sL6F
                      $dShow8_sL6G
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sL6J ls_sL6H s_sL6I;

GHC.Show.$fShow(,,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h i.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h, GHC.Show.Show i) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h, i)
[GblId[DFunId],
 Arity=9,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sL6K
           $dShow1_sL6L
           $dShow2_sL6M
           $dShow3_sL6N
           $dShow4_sL6O
           $dShow5_sL6P
           $dShow6_sL6Q
           $dShow7_sL6R
           $dShow8_sL6S]
        let {
          sat_sL6V [Occ=Once]
            :: [(a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
                 h_azEJ, i_azEK)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL6K
               $dShow1_sL6L
               $dShow2_sL6M
               $dShow3_sL6N
               $dShow4_sL6O
               $dShow5_sL6P
               $dShow6_sL6Q
               $dShow7_sL6R
               $dShow8_sL6S] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,)_$cshowList
                      $dShow_sL6K
                      $dShow1_sL6L
                      $dShow2_sL6M
                      $dShow3_sL6N
                      $dShow4_sL6O
                      $dShow5_sL6P
                      $dShow6_sL6Q
                      $dShow7_sL6R
                      $dShow8_sL6S
                      eta_B2
                      eta_B1; } in
        let {
          sat_sL6U [Occ=Once]
            :: (a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
                h_azEJ, i_azEK)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sL6K
               $dShow1_sL6L
               $dShow2_sL6M
               $dShow3_sL6N
               $dShow4_sL6O
               $dShow5_sL6P
               $dShow6_sL6Q
               $dShow7_sL6R
               $dShow8_sL6S] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,,)_$cshow
                      $dShow_sL6K
                      $dShow1_sL6L
                      $dShow2_sL6M
                      $dShow3_sL6N
                      $dShow4_sL6O
                      $dShow5_sL6P
                      $dShow6_sL6Q
                      $dShow7_sL6R
                      $dShow8_sL6S
                      eta_B1; } in
        let {
          sat_sL6T [Occ=Once]
            :: GHC.Types.Int
               -> (a_azEC, b_azED, c_azEE, d_azEF, e_azEG, f12_azEH, g_azEI,
                   h_azEJ, i_azEK)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL6K
               $dShow1_sL6L
               $dShow2_sL6M
               $dShow3_sL6N
               $dShow4_sL6O
               $dShow5_sL6P
               $dShow6_sL6Q
               $dShow7_sL6R
               $dShow8_sL6S] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,,)_$cshowsPrec
                      $dShow_sL6K
                      $dShow1_sL6L
                      $dShow2_sL6M
                      $dShow3_sL6N
                      $dShow4_sL6O
                      $dShow5_sL6P
                      $dShow6_sL6Q
                      $dShow7_sL6R
                      $dShow8_sL6S
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sL6T sat_sL6U sat_sL6V];

GHC.Show.$fShow(,,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sL6W eta_sL6X]
        case ds_sL6W of {
          [] -> lvl11_rC0o;
          : x_sL70 [Occ=Once*!] ds1_sL71 [Occ=Once!] ->
              case ds1_sL71 of wild1_sL72 {
                [] -> x_sL70 eta_sL6X;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sL75 [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sL6X wild1_sL72] \u []
                              GHC.Show.$fShow(,,,,,,,)_go2 wild1_sL72 eta_sL6X; } in
                    let {
                      sat_sL76 [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sL75];
                    } in  x_sL70 sat_sL76;
              };
        };

GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
  :: forall a b c d e f g h.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h) =>
     GHC.Types.Int -> (a, b, c, d, e, f, g, h) -> GHC.Show.ShowS
[GblId,
 Arity=11,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL77
           $dShow1_sL78
           $dShow2_sL79
           $dShow3_sL7a
           $dShow4_sL7b
           $dShow5_sL7c
           $dShow6_sL7d
           $dShow7_sL7e
           ds_sL7f
           ds1_sL7g
           s_sL7h]
        case ds1_sL7g of {
          (,,,,,,,) a1_sL7j [Occ=Once]
                    b1_sL7k [Occ=Once]
                    c1_sL7l [Occ=Once]
                    d1_sL7m [Occ=Once]
                    e1_sL7n [Occ=Once]
                    f13_sL7o [Occ=Once]
                    g1_sL7p [Occ=Once]
                    h1_sL7q [Occ=Once] ->
              let {
                sat_sL7I [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sL77
                     $dShow1_sL78
                     $dShow2_sL79
                     $dShow3_sL7a
                     $dShow4_sL7b
                     $dShow5_sL7c
                     $dShow6_sL7d
                     $dShow7_sL7e
                     s_sL7h
                     a1_sL7j
                     b1_sL7k
                     c1_sL7l
                     d1_sL7m
                     e1_sL7n
                     f13_sL7o
                     g1_sL7p
                     h1_sL7q] \u []
                        let {
                          sat_sL7H [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sL7h]; } in
                        let {
                          sat_sL7y [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow7_sL7e h1_sL7q] \u []
                                  GHC.Show.showsPrec $dShow7_sL7e GHC.Show.$fShow(,)1 h1_sL7q; } in
                        let {
                          sat_sL7z [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL7y GHC.Types.[]]; } in
                        let {
                          sat_sL7x [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sL7d g1_sL7p] \u []
                                  GHC.Show.showsPrec $dShow6_sL7d GHC.Show.$fShow(,)1 g1_sL7p; } in
                        let {
                          sat_sL7A [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL7x sat_sL7z]; } in
                        let {
                          sat_sL7w [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sL7c f13_sL7o] \u []
                                  GHC.Show.showsPrec $dShow5_sL7c GHC.Show.$fShow(,)1 f13_sL7o; } in
                        let {
                          sat_sL7B [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL7w sat_sL7A]; } in
                        let {
                          sat_sL7v [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sL7b e1_sL7n] \u []
                                  GHC.Show.showsPrec $dShow4_sL7b GHC.Show.$fShow(,)1 e1_sL7n; } in
                        let {
                          sat_sL7C [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL7v sat_sL7B]; } in
                        let {
                          sat_sL7u [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sL7a d1_sL7m] \u []
                                  GHC.Show.showsPrec $dShow3_sL7a GHC.Show.$fShow(,)1 d1_sL7m; } in
                        let {
                          sat_sL7D [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL7u sat_sL7C]; } in
                        let {
                          sat_sL7t [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sL79 c1_sL7l] \u []
                                  GHC.Show.showsPrec $dShow2_sL79 GHC.Show.$fShow(,)1 c1_sL7l; } in
                        let {
                          sat_sL7E [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL7t sat_sL7D]; } in
                        let {
                          sat_sL7s [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sL78 b1_sL7k] \u []
                                  GHC.Show.showsPrec $dShow1_sL78 GHC.Show.$fShow(,)1 b1_sL7k; } in
                        let {
                          sat_sL7F [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL7s sat_sL7E]; } in
                        let {
                          sat_sL7r [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sL77 a1_sL7j] \u []
                                  GHC.Show.showsPrec $dShow_sL77 GHC.Show.$fShow(,)1 a1_sL7j; } in
                        let {
                          sat_sL7G [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sL7r sat_sL7F];
                        } in  GHC.Show.$fShow(,,,,,,,)_go2 sat_sL7G sat_sL7H;
              } in  : [GHC.Show.$fShow(,)4 sat_sL7I];
        };

GHC.Show.$fShow(,,,,,,,)_$cshow
  :: forall a b c d e f g h.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h) =>
     (a, b, c, d, e, f, g, h) -> GHC.Base.String
[GblId,
 Arity=9,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL7J
           $dShow1_sL7K
           $dShow2_sL7L
           $dShow3_sL7M
           $dShow4_sL7N
           $dShow5_sL7O
           $dShow6_sL7P
           $dShow7_sL7Q
           x_sL7R]
        GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
            $dShow_sL7J
            $dShow1_sL7K
            $dShow2_sL7L
            $dShow3_sL7M
            $dShow4_sL7N
            $dShow5_sL7O
            $dShow6_sL7P
            $dShow7_sL7Q
            GHC.Show.$fShow(,)1
            x_sL7R
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,,)_$cshowList
  :: forall a b c d e f g h.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h) =>
     [(a, b, c, d, e, f, g, h)] -> GHC.Show.ShowS
[GblId,
 Arity=10,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sL7S
           $dShow1_sL7T
           $dShow2_sL7U
           $dShow3_sL7V
           $dShow4_sL7W
           $dShow5_sL7X
           $dShow6_sL7Y
           $dShow7_sL7Z
           ls_sL80
           s_sL81]
        let {
          sat_sL82 [Occ=Once]
            :: (a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
                h_azFz)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL7S
               $dShow1_sL7T
               $dShow2_sL7U
               $dShow3_sL7V
               $dShow4_sL7W
               $dShow5_sL7X
               $dShow6_sL7Y
               $dShow7_sL7Z] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
                      $dShow_sL7S
                      $dShow1_sL7T
                      $dShow2_sL7U
                      $dShow3_sL7V
                      $dShow4_sL7W
                      $dShow5_sL7X
                      $dShow6_sL7Y
                      $dShow7_sL7Z
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sL82 ls_sL80 s_sL81;

GHC.Show.$fShow(,,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g h.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
      GHC.Show.Show h) =>
     GHC.Show.Show (a, b, c, d, e, f, g, h)
[GblId[DFunId],
 Arity=8,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sL83
           $dShow1_sL84
           $dShow2_sL85
           $dShow3_sL86
           $dShow4_sL87
           $dShow5_sL88
           $dShow6_sL89
           $dShow7_sL8a]
        let {
          sat_sL8d [Occ=Once]
            :: [(a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
                 h_azFz)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL83
               $dShow1_sL84
               $dShow2_sL85
               $dShow3_sL86
               $dShow4_sL87
               $dShow5_sL88
               $dShow6_sL89
               $dShow7_sL8a] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,)_$cshowList
                      $dShow_sL83
                      $dShow1_sL84
                      $dShow2_sL85
                      $dShow3_sL86
                      $dShow4_sL87
                      $dShow5_sL88
                      $dShow6_sL89
                      $dShow7_sL8a
                      eta_B2
                      eta_B1; } in
        let {
          sat_sL8c [Occ=Once]
            :: (a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
                h_azFz)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sL83
               $dShow1_sL84
               $dShow2_sL85
               $dShow3_sL86
               $dShow4_sL87
               $dShow5_sL88
               $dShow6_sL89
               $dShow7_sL8a] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,,)_$cshow
                      $dShow_sL83
                      $dShow1_sL84
                      $dShow2_sL85
                      $dShow3_sL86
                      $dShow4_sL87
                      $dShow5_sL88
                      $dShow6_sL89
                      $dShow7_sL8a
                      eta_B1; } in
        let {
          sat_sL8b [Occ=Once]
            :: GHC.Types.Int
               -> (a_azFs, b_azFt, c_azFu, d_azFv, e_azFw, f12_azFx, g_azFy,
                   h_azFz)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL83
               $dShow1_sL84
               $dShow2_sL85
               $dShow3_sL86
               $dShow4_sL87
               $dShow5_sL88
               $dShow6_sL89
               $dShow7_sL8a] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,,)_$cshowsPrec
                      $dShow_sL83
                      $dShow1_sL84
                      $dShow2_sL85
                      $dShow3_sL86
                      $dShow4_sL87
                      $dShow5_sL88
                      $dShow6_sL89
                      $dShow7_sL8a
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sL8b sat_sL8c sat_sL8d];

GHC.Show.$fShow(,,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sL8e eta_sL8f]
        case ds_sL8e of {
          [] -> lvl11_rC0o;
          : x_sL8i [Occ=Once*!] ds1_sL8j [Occ=Once!] ->
              case ds1_sL8j of wild1_sL8k {
                [] -> x_sL8i eta_sL8f;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sL8n [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sL8f wild1_sL8k] \u []
                              GHC.Show.$fShow(,,,,,,)_go2 wild1_sL8k eta_sL8f; } in
                    let {
                      sat_sL8o [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sL8n];
                    } in  x_sL8i sat_sL8o;
              };
        };

GHC.Show.$fShow(,,,,,,)_$cshowsPrec
  :: forall a b c d e f g.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f,
      GHC.Show.Show g) =>
     GHC.Types.Int -> (a, b, c, d, e, f, g) -> GHC.Show.ShowS
[GblId,
 Arity=10,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL8p
           $dShow1_sL8q
           $dShow2_sL8r
           $dShow3_sL8s
           $dShow4_sL8t
           $dShow5_sL8u
           $dShow6_sL8v
           ds_sL8w
           ds1_sL8x
           s_sL8y]
        case ds1_sL8x of {
          (,,,,,,) a1_sL8A [Occ=Once]
                   b1_sL8B [Occ=Once]
                   c1_sL8C [Occ=Once]
                   d1_sL8D [Occ=Once]
                   e1_sL8E [Occ=Once]
                   f13_sL8F [Occ=Once]
                   g1_sL8G [Occ=Once] ->
              let {
                sat_sL8W [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sL8p
                     $dShow1_sL8q
                     $dShow2_sL8r
                     $dShow3_sL8s
                     $dShow4_sL8t
                     $dShow5_sL8u
                     $dShow6_sL8v
                     s_sL8y
                     a1_sL8A
                     b1_sL8B
                     c1_sL8C
                     d1_sL8D
                     e1_sL8E
                     f13_sL8F
                     g1_sL8G] \u []
                        let {
                          sat_sL8V [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sL8y]; } in
                        let {
                          sat_sL8N [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow6_sL8v g1_sL8G] \u []
                                  GHC.Show.showsPrec $dShow6_sL8v GHC.Show.$fShow(,)1 g1_sL8G; } in
                        let {
                          sat_sL8O [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL8N GHC.Types.[]]; } in
                        let {
                          sat_sL8M [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sL8u f13_sL8F] \u []
                                  GHC.Show.showsPrec $dShow5_sL8u GHC.Show.$fShow(,)1 f13_sL8F; } in
                        let {
                          sat_sL8P [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL8M sat_sL8O]; } in
                        let {
                          sat_sL8L [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sL8t e1_sL8E] \u []
                                  GHC.Show.showsPrec $dShow4_sL8t GHC.Show.$fShow(,)1 e1_sL8E; } in
                        let {
                          sat_sL8Q [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL8L sat_sL8P]; } in
                        let {
                          sat_sL8K [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sL8s d1_sL8D] \u []
                                  GHC.Show.showsPrec $dShow3_sL8s GHC.Show.$fShow(,)1 d1_sL8D; } in
                        let {
                          sat_sL8R [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL8K sat_sL8Q]; } in
                        let {
                          sat_sL8J [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sL8r c1_sL8C] \u []
                                  GHC.Show.showsPrec $dShow2_sL8r GHC.Show.$fShow(,)1 c1_sL8C; } in
                        let {
                          sat_sL8S [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL8J sat_sL8R]; } in
                        let {
                          sat_sL8I [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sL8q b1_sL8B] \u []
                                  GHC.Show.showsPrec $dShow1_sL8q GHC.Show.$fShow(,)1 b1_sL8B; } in
                        let {
                          sat_sL8T [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL8I sat_sL8S]; } in
                        let {
                          sat_sL8H [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sL8p a1_sL8A] \u []
                                  GHC.Show.showsPrec $dShow_sL8p GHC.Show.$fShow(,)1 a1_sL8A; } in
                        let {
                          sat_sL8U [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sL8H sat_sL8T];
                        } in  GHC.Show.$fShow(,,,,,,)_go2 sat_sL8U sat_sL8V;
              } in  : [GHC.Show.$fShow(,)4 sat_sL8W];
        };

GHC.Show.$fShow(,,,,,,)_$cshow
  :: forall a b c d e f g.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f,
      GHC.Show.Show g) =>
     (a, b, c, d, e, f, g) -> GHC.Base.String
[GblId,
 Arity=8,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL8X
           $dShow1_sL8Y
           $dShow2_sL8Z
           $dShow3_sL90
           $dShow4_sL91
           $dShow5_sL92
           $dShow6_sL93
           x_sL94]
        GHC.Show.$fShow(,,,,,,)_$cshowsPrec
            $dShow_sL8X
            $dShow1_sL8Y
            $dShow2_sL8Z
            $dShow3_sL90
            $dShow4_sL91
            $dShow5_sL92
            $dShow6_sL93
            GHC.Show.$fShow(,)1
            x_sL94
            GHC.Types.[];

GHC.Show.$fShow(,,,,,,)_$cshowList
  :: forall a b c d e f g.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f,
      GHC.Show.Show g) =>
     [(a, b, c, d, e, f, g)] -> GHC.Show.ShowS
[GblId,
 Arity=9,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sL95
           $dShow1_sL96
           $dShow2_sL97
           $dShow3_sL98
           $dShow4_sL99
           $dShow5_sL9a
           $dShow6_sL9b
           ls_sL9c
           s_sL9d]
        let {
          sat_sL9e [Occ=Once]
            :: (a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL95
               $dShow1_sL96
               $dShow2_sL97
               $dShow3_sL98
               $dShow4_sL99
               $dShow5_sL9a
               $dShow6_sL9b] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,)_$cshowsPrec
                      $dShow_sL95
                      $dShow1_sL96
                      $dShow2_sL97
                      $dShow3_sL98
                      $dShow4_sL99
                      $dShow5_sL9a
                      $dShow6_sL9b
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sL9e ls_sL9c s_sL9d;

GHC.Show.$fShow(,,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f g.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f,
      GHC.Show.Show g) =>
     GHC.Show.Show (a, b, c, d, e, f, g)
[GblId[DFunId],
 Arity=7,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sL9f
           $dShow1_sL9g
           $dShow2_sL9h
           $dShow3_sL9i
           $dShow4_sL9j
           $dShow5_sL9k
           $dShow6_sL9l]
        let {
          sat_sL9o [Occ=Once]
            :: [(a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL9f
               $dShow1_sL9g
               $dShow2_sL9h
               $dShow3_sL9i
               $dShow4_sL9j
               $dShow5_sL9k
               $dShow6_sL9l] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,)_$cshowList
                      $dShow_sL9f
                      $dShow1_sL9g
                      $dShow2_sL9h
                      $dShow3_sL9i
                      $dShow4_sL9j
                      $dShow5_sL9k
                      $dShow6_sL9l
                      eta_B2
                      eta_B1; } in
        let {
          sat_sL9n [Occ=Once]
            :: (a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sL9f
               $dShow1_sL9g
               $dShow2_sL9h
               $dShow3_sL9i
               $dShow4_sL9j
               $dShow5_sL9k
               $dShow6_sL9l] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,,)_$cshow
                      $dShow_sL9f
                      $dShow1_sL9g
                      $dShow2_sL9h
                      $dShow3_sL9i
                      $dShow4_sL9j
                      $dShow5_sL9k
                      $dShow6_sL9l
                      eta_B1; } in
        let {
          sat_sL9m [Occ=Once]
            :: GHC.Types.Int
               -> (a_azGe, b_azGf, c_azGg, d_azGh, e_azGi, f12_azGj, g_azGk)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sL9f
               $dShow1_sL9g
               $dShow2_sL9h
               $dShow3_sL9i
               $dShow4_sL9j
               $dShow5_sL9k
               $dShow6_sL9l] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,,)_$cshowsPrec
                      $dShow_sL9f
                      $dShow1_sL9g
                      $dShow2_sL9h
                      $dShow3_sL9i
                      $dShow4_sL9j
                      $dShow5_sL9k
                      $dShow6_sL9l
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sL9m sat_sL9n sat_sL9o];

GHC.Show.$fShow(,,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sL9p eta_sL9q]
        case ds_sL9p of {
          [] -> lvl11_rC0o;
          : x_sL9t [Occ=Once*!] ds1_sL9u [Occ=Once!] ->
              case ds1_sL9u of wild1_sL9v {
                [] -> x_sL9t eta_sL9q;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sL9y [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sL9q wild1_sL9v] \u []
                              GHC.Show.$fShow(,,,,,)_go2 wild1_sL9v eta_sL9q; } in
                    let {
                      sat_sL9z [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sL9y];
                    } in  x_sL9t sat_sL9z;
              };
        };

GHC.Show.$fShow(,,,,,)_$cshowsPrec
  :: forall a b c d e f.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f) =>
     GHC.Types.Int -> (a, b, c, d, e, f) -> GHC.Show.ShowS
[GblId,
 Arity=9,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sL9A
           $dShow1_sL9B
           $dShow2_sL9C
           $dShow3_sL9D
           $dShow4_sL9E
           $dShow5_sL9F
           ds_sL9G
           ds1_sL9H
           s_sL9I]
        case ds1_sL9H of {
          (,,,,,) a1_sL9K [Occ=Once]
                  b1_sL9L [Occ=Once]
                  c1_sL9M [Occ=Once]
                  d1_sL9N [Occ=Once]
                  e1_sL9O [Occ=Once]
                  f13_sL9P [Occ=Once] ->
              let {
                sat_sLa3 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sL9A
                     $dShow1_sL9B
                     $dShow2_sL9C
                     $dShow3_sL9D
                     $dShow4_sL9E
                     $dShow5_sL9F
                     s_sL9I
                     a1_sL9K
                     b1_sL9L
                     c1_sL9M
                     d1_sL9N
                     e1_sL9O
                     f13_sL9P] \u []
                        let {
                          sat_sLa2 [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sL9I]; } in
                        let {
                          sat_sL9V [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow5_sL9F f13_sL9P] \u []
                                  GHC.Show.showsPrec $dShow5_sL9F GHC.Show.$fShow(,)1 f13_sL9P; } in
                        let {
                          sat_sL9W [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL9V GHC.Types.[]]; } in
                        let {
                          sat_sL9U [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sL9E e1_sL9O] \u []
                                  GHC.Show.showsPrec $dShow4_sL9E GHC.Show.$fShow(,)1 e1_sL9O; } in
                        let {
                          sat_sL9X [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL9U sat_sL9W]; } in
                        let {
                          sat_sL9T [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sL9D d1_sL9N] \u []
                                  GHC.Show.showsPrec $dShow3_sL9D GHC.Show.$fShow(,)1 d1_sL9N; } in
                        let {
                          sat_sL9Y [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL9T sat_sL9X]; } in
                        let {
                          sat_sL9S [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sL9C c1_sL9M] \u []
                                  GHC.Show.showsPrec $dShow2_sL9C GHC.Show.$fShow(,)1 c1_sL9M; } in
                        let {
                          sat_sL9Z [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL9S sat_sL9Y]; } in
                        let {
                          sat_sL9R [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sL9B b1_sL9L] \u []
                                  GHC.Show.showsPrec $dShow1_sL9B GHC.Show.$fShow(,)1 b1_sL9L; } in
                        let {
                          sat_sLa0 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sL9R sat_sL9Z]; } in
                        let {
                          sat_sL9Q [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sL9A a1_sL9K] \u []
                                  GHC.Show.showsPrec $dShow_sL9A GHC.Show.$fShow(,)1 a1_sL9K; } in
                        let {
                          sat_sLa1 [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sL9Q sat_sLa0];
                        } in  GHC.Show.$fShow(,,,,,)_go2 sat_sLa1 sat_sLa2;
              } in  : [GHC.Show.$fShow(,)4 sat_sLa3];
        };

GHC.Show.$fShow(,,,,,)_$cshow
  :: forall a b c d e f.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f) =>
     (a, b, c, d, e, f) -> GHC.Base.String
[GblId,
 Arity=7,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sLa4
           $dShow1_sLa5
           $dShow2_sLa6
           $dShow3_sLa7
           $dShow4_sLa8
           $dShow5_sLa9
           x_sLaa]
        GHC.Show.$fShow(,,,,,)_$cshowsPrec
            $dShow_sLa4
            $dShow1_sLa5
            $dShow2_sLa6
            $dShow3_sLa7
            $dShow4_sLa8
            $dShow5_sLa9
            GHC.Show.$fShow(,)1
            x_sLaa
            GHC.Types.[];

GHC.Show.$fShow(,,,,,)_$cshowList
  :: forall a b c d e f.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f) =>
     [(a, b, c, d, e, f)] -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sLab
           $dShow1_sLac
           $dShow2_sLad
           $dShow3_sLae
           $dShow4_sLaf
           $dShow5_sLag
           ls_sLah
           s_sLai]
        let {
          sat_sLaj [Occ=Once]
            :: (a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLab
               $dShow1_sLac
               $dShow2_sLad
               $dShow3_sLae
               $dShow4_sLaf
               $dShow5_sLag] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,)_$cshowsPrec
                      $dShow_sLab
                      $dShow1_sLac
                      $dShow2_sLad
                      $dShow3_sLae
                      $dShow4_sLaf
                      $dShow5_sLag
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sLaj ls_sLah s_sLai;

GHC.Show.$fShow(,,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e f.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f) =>
     GHC.Show.Show (a, b, c, d, e, f)
[GblId[DFunId],
 Arity=6,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sLak
           $dShow1_sLal
           $dShow2_sLam
           $dShow3_sLan
           $dShow4_sLao
           $dShow5_sLap]
        let {
          sat_sLas [Occ=Once]
            :: [(a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)]
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLak
               $dShow1_sLal
               $dShow2_sLam
               $dShow3_sLan
               $dShow4_sLao
               $dShow5_sLap] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,)_$cshowList
                      $dShow_sLak
                      $dShow1_sLal
                      $dShow2_sLam
                      $dShow3_sLan
                      $dShow4_sLao
                      $dShow5_sLap
                      eta_B2
                      eta_B1; } in
        let {
          sat_sLar [Occ=Once]
            :: (a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)
               -> GHC.Base.String
          [LclId] =
              [$dShow_sLak
               $dShow1_sLal
               $dShow2_sLam
               $dShow3_sLan
               $dShow4_sLao
               $dShow5_sLap] \r [eta_B1]
                  GHC.Show.$fShow(,,,,,)_$cshow
                      $dShow_sLak
                      $dShow1_sLal
                      $dShow2_sLam
                      $dShow3_sLan
                      $dShow4_sLao
                      $dShow5_sLap
                      eta_B1; } in
        let {
          sat_sLaq [Occ=Once]
            :: GHC.Types.Int
               -> (a_azGW, b_azGX, c_azGY, d_azGZ, e_azH0, f12_azH1)
               -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLak
               $dShow1_sLal
               $dShow2_sLam
               $dShow3_sLan
               $dShow4_sLao
               $dShow5_sLap] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,,)_$cshowsPrec
                      $dShow_sLak
                      $dShow1_sLal
                      $dShow2_sLam
                      $dShow3_sLan
                      $dShow4_sLao
                      $dShow5_sLap
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sLaq sat_sLar sat_sLas];

GHC.Show.$fShow(,,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sLat eta_sLau]
        case ds_sLat of {
          [] -> lvl11_rC0o;
          : x_sLax [Occ=Once*!] ds1_sLay [Occ=Once!] ->
              case ds1_sLay of wild1_sLaz {
                [] -> x_sLax eta_sLau;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sLaC [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sLau wild1_sLaz] \u []
                              GHC.Show.$fShow(,,,,)_go2 wild1_sLaz eta_sLau; } in
                    let {
                      sat_sLaD [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sLaC];
                    } in  x_sLax sat_sLaD;
              };
        };

GHC.Show.$fShow(,,,,)_$cshowsPrec
  :: forall a b c d e.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e) =>
     GHC.Types.Int -> (a, b, c, d, e) -> GHC.Show.ShowS
[GblId,
 Arity=8,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sLaE
           $dShow1_sLaF
           $dShow2_sLaG
           $dShow3_sLaH
           $dShow4_sLaI
           ds_sLaJ
           ds1_sLaK
           s_sLaL]
        case ds1_sLaK of {
          (,,,,) a1_sLaN [Occ=Once]
                 b1_sLaO [Occ=Once]
                 c1_sLaP [Occ=Once]
                 d1_sLaQ [Occ=Once]
                 e1_sLaR [Occ=Once] ->
              let {
                sat_sLb3 [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sLaE
                     $dShow1_sLaF
                     $dShow2_sLaG
                     $dShow3_sLaH
                     $dShow4_sLaI
                     s_sLaL
                     a1_sLaN
                     b1_sLaO
                     c1_sLaP
                     d1_sLaQ
                     e1_sLaR] \u []
                        let {
                          sat_sLb2 [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 s_sLaL]; } in
                        let {
                          sat_sLaW [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow4_sLaI e1_sLaR] \u []
                                  GHC.Show.showsPrec $dShow4_sLaI GHC.Show.$fShow(,)1 e1_sLaR; } in
                        let {
                          sat_sLaX [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sLaW GHC.Types.[]]; } in
                        let {
                          sat_sLaV [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow3_sLaH d1_sLaQ] \u []
                                  GHC.Show.showsPrec $dShow3_sLaH GHC.Show.$fShow(,)1 d1_sLaQ; } in
                        let {
                          sat_sLaY [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sLaV sat_sLaX]; } in
                        let {
                          sat_sLaU [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow2_sLaG c1_sLaP] \u []
                                  GHC.Show.showsPrec $dShow2_sLaG GHC.Show.$fShow(,)1 c1_sLaP; } in
                        let {
                          sat_sLaZ [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sLaU sat_sLaY]; } in
                        let {
                          sat_sLaT [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sLaF b1_sLaO] \u []
                                  GHC.Show.showsPrec $dShow1_sLaF GHC.Show.$fShow(,)1 b1_sLaO; } in
                        let {
                          sat_sLb0 [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sLaT sat_sLaZ]; } in
                        let {
                          sat_sLaS [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sLaE a1_sLaN] \u []
                                  GHC.Show.showsPrec $dShow_sLaE GHC.Show.$fShow(,)1 a1_sLaN; } in
                        let {
                          sat_sLb1 [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sLaS sat_sLb0];
                        } in  GHC.Show.$fShow(,,,,)_go2 sat_sLb1 sat_sLb2;
              } in  : [GHC.Show.$fShow(,)4 sat_sLb3];
        };

GHC.Show.$fShow(,,,,)_$cshow
  :: forall a b c d e.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e) =>
     (a, b, c, d, e) -> GHC.Base.String
[GblId,
 Arity=6,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sLb4
           $dShow1_sLb5
           $dShow2_sLb6
           $dShow3_sLb7
           $dShow4_sLb8
           x_sLb9]
        GHC.Show.$fShow(,,,,)_$cshowsPrec
            $dShow_sLb4
            $dShow1_sLb5
            $dShow2_sLb6
            $dShow3_sLb7
            $dShow4_sLb8
            GHC.Show.$fShow(,)1
            x_sLb9
            GHC.Types.[];

GHC.Show.$fShow(,,,,)_$cshowList
  :: forall a b c d e.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e) =>
     [(a, b, c, d, e)] -> GHC.Show.ShowS
[GblId,
 Arity=7,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sLba
           $dShow1_sLbb
           $dShow2_sLbc
           $dShow3_sLbd
           $dShow4_sLbe
           ls_sLbf
           s_sLbg]
        let {
          sat_sLbh [Occ=Once]
            :: (a_azHA, b_azHB, c_azHC, d_azHD, e_azHE) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLba
               $dShow1_sLbb
               $dShow2_sLbc
               $dShow3_sLbd
               $dShow4_sLbe] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,)_$cshowsPrec
                      $dShow_sLba
                      $dShow1_sLbb
                      $dShow2_sLbc
                      $dShow3_sLbd
                      $dShow4_sLbe
                      GHC.Show.$fShow(,)1
                      eta_B2
                      eta_B1;
        } in  GHC.Show.showList__ sat_sLbh ls_sLbf s_sLbg;

GHC.Show.$fShow(,,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d e.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d, GHC.Show.Show e) =>
     GHC.Show.Show (a, b, c, d, e)
[GblId[DFunId],
 Arity=5,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sLbi
           $dShow1_sLbj
           $dShow2_sLbk
           $dShow3_sLbl
           $dShow4_sLbm]
        let {
          sat_sLbp [Occ=Once]
            :: [(a_azHA, b_azHB, c_azHC, d_azHD, e_azHE)] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLbi
               $dShow1_sLbj
               $dShow2_sLbk
               $dShow3_sLbl
               $dShow4_sLbm] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,)_$cshowList
                      $dShow_sLbi
                      $dShow1_sLbj
                      $dShow2_sLbk
                      $dShow3_sLbl
                      $dShow4_sLbm
                      eta_B2
                      eta_B1; } in
        let {
          sat_sLbo [Occ=Once]
            :: (a_azHA, b_azHB, c_azHC, d_azHD, e_azHE) -> GHC.Base.String
          [LclId] =
              [$dShow_sLbi
               $dShow1_sLbj
               $dShow2_sLbk
               $dShow3_sLbl
               $dShow4_sLbm] \r [eta_B1]
                  GHC.Show.$fShow(,,,,)_$cshow
                      $dShow_sLbi
                      $dShow1_sLbj
                      $dShow2_sLbk
                      $dShow3_sLbl
                      $dShow4_sLbm
                      eta_B1; } in
        let {
          sat_sLbn [Occ=Once]
            :: GHC.Types.Int
               -> (a_azHA, b_azHB, c_azHC, d_azHD, e_azHE) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLbi
               $dShow1_sLbj
               $dShow2_sLbk
               $dShow3_sLbl
               $dShow4_sLbm] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,,,)_$cshowsPrec
                      $dShow_sLbi
                      $dShow1_sLbj
                      $dShow2_sLbk
                      $dShow3_sLbl
                      $dShow4_sLbm
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sLbn sat_sLbo sat_sLbp];

GHC.Show.$fShow(,,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sLbq eta_sLbr]
        case ds_sLbq of {
          [] -> lvl11_rC0o;
          : x_sLbu [Occ=Once*!] ds1_sLbv [Occ=Once!] ->
              case ds1_sLbv of wild1_sLbw {
                [] -> x_sLbu eta_sLbr;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sLbz [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sLbr wild1_sLbw] \u []
                              GHC.Show.$fShow(,,,)_go2 wild1_sLbw eta_sLbr; } in
                    let {
                      sat_sLbA [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sLbz];
                    } in  x_sLbu sat_sLbA;
              };
        };

GHC.Show.$w$cshowsPrec2 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d) =>
     a
     -> b
     -> c
     -> d
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId,
 Arity=9,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sLbB
           w1_sLbC
           w2_sLbD
           w3_sLbE
           ww_sLbF
           ww1_sLbG
           ww2_sLbH
           ww3_sLbI
           w4_sLbJ]
        let {
          sat_sLbT [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [w_sLbB
               w1_sLbC
               w2_sLbD
               w3_sLbE
               ww_sLbF
               ww1_sLbG
               ww2_sLbH
               ww3_sLbI
               w4_sLbJ] \u []
                  let {
                    sat_sLbS [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [GHC.Show.$fShow(,)2 w4_sLbJ]; } in
                  let {
                    sat_sLbN [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w3_sLbE ww3_sLbI] \u []
                            GHC.Show.showsPrec w3_sLbE GHC.Show.$fShow(,)1 ww3_sLbI; } in
                  let {
                    sat_sLbO [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sLbN GHC.Types.[]]; } in
                  let {
                    sat_sLbM [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w2_sLbD ww2_sLbH] \u []
                            GHC.Show.showsPrec w2_sLbD GHC.Show.$fShow(,)1 ww2_sLbH; } in
                  let {
                    sat_sLbP [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sLbM sat_sLbO]; } in
                  let {
                    sat_sLbL [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w1_sLbC ww1_sLbG] \u []
                            GHC.Show.showsPrec w1_sLbC GHC.Show.$fShow(,)1 ww1_sLbG; } in
                  let {
                    sat_sLbQ [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sLbL sat_sLbP]; } in
                  let {
                    sat_sLbK [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w_sLbB ww_sLbF] \u []
                            GHC.Show.showsPrec w_sLbB GHC.Show.$fShow(,)1 ww_sLbF; } in
                  let {
                    sat_sLbR [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                    [LclId] =
                        CCCS :! [sat_sLbK sat_sLbQ];
                  } in  GHC.Show.$fShow(,,,)_go2 sat_sLbR sat_sLbS;
        } in  (#,#) [GHC.Show.$fShow(,)4 sat_sLbT];

GHC.Show.$fShow(,,,)_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a b c d.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d) =>
     GHC.Types.Int -> (a, b, c, d) -> GHC.Show.ShowS
[GblId,
 Arity=7,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sLbU w1_sLbV w2_sLbW w3_sLbX w4_sLbY w5_sLbZ w6_sLc0]
        case w5_sLbZ of {
          (,,,) ww1_sLc2 [Occ=Once]
                ww2_sLc3 [Occ=Once]
                ww3_sLc4 [Occ=Once]
                ww4_sLc5 [Occ=Once] ->
              case
                  GHC.Show.$w$cshowsPrec2
                      w_sLbU
                      w1_sLbV
                      w2_sLbW
                      w3_sLbX
                      ww1_sLc2
                      ww2_sLc3
                      ww3_sLc4
                      ww4_sLc5
                      w6_sLc0
              of
              { (#,#) ww6_sLc7 [Occ=Once] ww7_sLc8 [Occ=Once] ->
                    : [ww6_sLc7 ww7_sLc8];
              };
        };

GHC.Show.$fShow(,,,)_$cshow
  :: forall a b c d.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d) =>
     (a, b, c, d) -> GHC.Base.String
[GblId,
 Arity=5,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sLc9 $dShow1_sLca $dShow2_sLcb $dShow3_sLcc x_sLcd]
        case x_sLcd of {
          (,,,) ww1_sLcf [Occ=Once]
                ww2_sLcg [Occ=Once]
                ww3_sLch [Occ=Once]
                ww4_sLci [Occ=Once] ->
              case
                  GHC.Show.$w$cshowsPrec2
                      $dShow_sLc9
                      $dShow1_sLca
                      $dShow2_sLcb
                      $dShow3_sLcc
                      ww1_sLcf
                      ww2_sLcg
                      ww3_sLch
                      ww4_sLci
                      GHC.Types.[]
              of
              { (#,#) ww6_sLck [Occ=Once] ww7_sLcl [Occ=Once] ->
                    : [ww6_sLck ww7_sLcl];
              };
        };

GHC.Show.$fShow(,,,)_$cshowList
  :: forall a b c d.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d) =>
     [(a, b, c, d)] -> GHC.Show.ShowS
[GblId,
 Arity=6,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sLcm
           $dShow1_sLcn
           $dShow2_sLco
           $dShow3_sLcp
           ls_sLcq
           s_sLcr]
        let {
          sat_sLcC [Occ=Once]
            :: (a_azIa, b_azIb, c_azIc, d_azId) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLcm $dShow1_sLcn $dShow2_sLco $dShow3_sLcp] \r [w_sLcs
                                                                       w1_sLct]
                  case w_sLcs of {
                    (,,,) ww1_sLcv [Occ=Once]
                          ww2_sLcw [Occ=Once]
                          ww3_sLcx [Occ=Once]
                          ww4_sLcy [Occ=Once] ->
                        case
                            GHC.Show.$w$cshowsPrec2
                                $dShow_sLcm
                                $dShow1_sLcn
                                $dShow2_sLco
                                $dShow3_sLcp
                                ww1_sLcv
                                ww2_sLcw
                                ww3_sLcx
                                ww4_sLcy
                                w1_sLct
                        of
                        { (#,#) ww6_sLcA [Occ=Once] ww7_sLcB [Occ=Once] ->
                              : [ww6_sLcA ww7_sLcB];
                        };
                  };
        } in  GHC.Show.showList__ sat_sLcC ls_sLcq s_sLcr;

GHC.Show.$fShow(,,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c d.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
      GHC.Show.Show d) =>
     GHC.Show.Show (a, b, c, d)
[GblId[DFunId],
 Arity=4,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sLcD $dShow1_sLcE $dShow2_sLcF $dShow3_sLcG]
        let {
          sat_sLcJ [Occ=Once]
            :: [(a_azIa, b_azIb, c_azIc, d_azId)] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLcD $dShow1_sLcE $dShow2_sLcF $dShow3_sLcG] \r [eta_B2
                                                                       eta_B1]
                  GHC.Show.$fShow(,,,)_$cshowList
                      $dShow_sLcD
                      $dShow1_sLcE
                      $dShow2_sLcF
                      $dShow3_sLcG
                      eta_B2
                      eta_B1; } in
        let {
          sat_sLcI [Occ=Once]
            :: (a_azIa, b_azIb, c_azIc, d_azId) -> GHC.Base.String
          [LclId] =
              [$dShow_sLcD $dShow1_sLcE $dShow2_sLcF $dShow3_sLcG] \r [eta_B1]
                  GHC.Show.$fShow(,,,)_$cshow
                      $dShow_sLcD $dShow1_sLcE $dShow2_sLcF $dShow3_sLcG eta_B1; } in
        let {
          sat_sLcH [Occ=Once]
            :: GHC.Types.Int
               -> (a_azIa, b_azIb, c_azIc, d_azId) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLcD $dShow1_sLcE $dShow2_sLcF $dShow3_sLcG] \r [eta_B3
                                                                       eta_B2
                                                                       eta_B1]
                  GHC.Show.$fShow(,,,)_$cshowsPrec
                      $dShow_sLcD
                      $dShow1_sLcE
                      $dShow2_sLcF
                      $dShow3_sLcG
                      eta_B3
                      eta_B2
                      eta_B1;
        } in  GHC.Show.C:Show [sat_sLcH sat_sLcI sat_sLcJ];

GHC.Show.$fShow(,,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sLcK eta_sLcL]
        case ds_sLcK of {
          [] -> lvl11_rC0o;
          : x_sLcO [Occ=Once*!] ds1_sLcP [Occ=Once!] ->
              case ds1_sLcP of wild1_sLcQ {
                [] -> x_sLcO eta_sLcL;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sLcT [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sLcL wild1_sLcQ] \u []
                              GHC.Show.$fShow(,,)_go2 wild1_sLcQ eta_sLcL; } in
                    let {
                      sat_sLcU [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sLcT];
                    } in  x_sLcO sat_sLcU;
              };
        };

GHC.Show.$w$cshowsPrec1 [InlPrag=NOUSERINLINE[0]]
  :: forall a b c.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c) =>
     a
     -> b
     -> c
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId,
 Arity=7,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sLcV w1_sLcW w2_sLcX ww_sLcY ww1_sLcZ ww2_sLd0 w3_sLd1]
        let {
          sat_sLd9 [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [w_sLcV w1_sLcW w2_sLcX ww_sLcY ww1_sLcZ ww2_sLd0 w3_sLd1] \u []
                  let {
                    sat_sLd8 [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [GHC.Show.$fShow(,)2 w3_sLd1]; } in
                  let {
                    sat_sLd4 [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w2_sLcX ww2_sLd0] \u []
                            GHC.Show.showsPrec w2_sLcX GHC.Show.$fShow(,)1 ww2_sLd0; } in
                  let {
                    sat_sLd5 [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sLd4 GHC.Types.[]]; } in
                  let {
                    sat_sLd3 [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w1_sLcW ww1_sLcZ] \u []
                            GHC.Show.showsPrec w1_sLcW GHC.Show.$fShow(,)1 ww1_sLcZ; } in
                  let {
                    sat_sLd6 [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sLd3 sat_sLd5]; } in
                  let {
                    sat_sLd2 [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [w_sLcV ww_sLcY] \u []
                            GHC.Show.showsPrec w_sLcV GHC.Show.$fShow(,)1 ww_sLcY; } in
                  let {
                    sat_sLd7 [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                    [LclId] =
                        CCCS :! [sat_sLd2 sat_sLd6];
                  } in  GHC.Show.$fShow(,,)_go2 sat_sLd7 sat_sLd8;
        } in  (#,#) [GHC.Show.$fShow(,)4 sat_sLd9];

GHC.Show.$fShow(,,)_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a b c.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c) =>
     GHC.Types.Int -> (a, b, c) -> GHC.Show.ShowS
[GblId,
 Arity=6,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sLda w1_sLdb w2_sLdc w3_sLdd w4_sLde w5_sLdf]
        case w4_sLde of {
          (,,) ww1_sLdh [Occ=Once] ww2_sLdi [Occ=Once] ww3_sLdj [Occ=Once] ->
              case
                  GHC.Show.$w$cshowsPrec1
                      w_sLda w1_sLdb w2_sLdc ww1_sLdh ww2_sLdi ww3_sLdj w5_sLdf
              of
              { (#,#) ww5_sLdl [Occ=Once] ww6_sLdm [Occ=Once] ->
                    : [ww5_sLdl ww6_sLdm];
              };
        };

GHC.Show.$fShow(,,)_$cshow
  :: forall a b c.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c) =>
     (a, b, c) -> GHC.Base.String
[GblId,
 Arity=4,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sLdn $dShow1_sLdo $dShow2_sLdp x_sLdq]
        case x_sLdq of {
          (,,) ww1_sLds [Occ=Once] ww2_sLdt [Occ=Once] ww3_sLdu [Occ=Once] ->
              case
                  GHC.Show.$w$cshowsPrec1
                      $dShow_sLdn
                      $dShow1_sLdo
                      $dShow2_sLdp
                      ww1_sLds
                      ww2_sLdt
                      ww3_sLdu
                      GHC.Types.[]
              of
              { (#,#) ww5_sLdw [Occ=Once] ww6_sLdx [Occ=Once] ->
                    : [ww5_sLdw ww6_sLdx];
              };
        };

GHC.Show.$fShow(,,)_$cshowList
  :: forall a b c.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c) =>
     [(a, b, c)] -> GHC.Show.ShowS
[GblId,
 Arity=5,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sLdy $dShow1_sLdz $dShow2_sLdA ls_sLdB s_sLdC]
        let {
          sat_sLdM [Occ=Once] :: (a_azIG, b_azIH, c_azII) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLdy $dShow1_sLdz $dShow2_sLdA] \r [w_sLdD w1_sLdE]
                  case w_sLdD of {
                    (,,) ww1_sLdG [Occ=Once] ww2_sLdH [Occ=Once] ww3_sLdI [Occ=Once] ->
                        case
                            GHC.Show.$w$cshowsPrec1
                                $dShow_sLdy
                                $dShow1_sLdz
                                $dShow2_sLdA
                                ww1_sLdG
                                ww2_sLdH
                                ww3_sLdI
                                w1_sLdE
                        of
                        { (#,#) ww5_sLdK [Occ=Once] ww6_sLdL [Occ=Once] ->
                              : [ww5_sLdK ww6_sLdL];
                        };
                  };
        } in  GHC.Show.showList__ sat_sLdM ls_sLdB s_sLdC;

GHC.Show.$fShow(,,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b c.
     (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c) =>
     GHC.Show.Show (a, b, c)
[GblId[DFunId],
 Arity=3,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sLdN $dShow1_sLdO $dShow2_sLdP]
        let {
          sat_sLdS [Occ=Once] :: [(a_azIG, b_azIH, c_azII)] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLdN $dShow1_sLdO $dShow2_sLdP] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,,)_$cshowList
                      $dShow_sLdN $dShow1_sLdO $dShow2_sLdP eta_B2 eta_B1; } in
        let {
          sat_sLdR [Occ=Once] :: (a_azIG, b_azIH, c_azII) -> GHC.Base.String
          [LclId] =
              [$dShow_sLdN $dShow1_sLdO $dShow2_sLdP] \r [eta_B1]
                  GHC.Show.$fShow(,,)_$cshow
                      $dShow_sLdN $dShow1_sLdO $dShow2_sLdP eta_B1; } in
        let {
          sat_sLdQ [Occ=Once]
            :: GHC.Types.Int -> (a_azIG, b_azIH, c_azII) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLdN $dShow1_sLdO $dShow2_sLdP] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,,)_$cshowsPrec
                      $dShow_sLdN $dShow1_sLdO $dShow2_sLdP eta_B3 eta_B2 eta_B1;
        } in  GHC.Show.C:Show [sat_sLdQ sat_sLdR sat_sLdS];

GHC.Show.$fShow(,)_go2 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sLdT eta_sLdU]
        case ds_sLdT of {
          [] -> lvl11_rC0o;
          : x_sLdX [Occ=Once*!] ds1_sLdY [Occ=Once!] ->
              case ds1_sLdY of wild1_sLdZ {
                [] -> x_sLdX eta_sLdU;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sLe2 [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sLdU wild1_sLdZ] \u []
                              GHC.Show.$fShow(,)_go2 wild1_sLdZ eta_sLdU; } in
                    let {
                      sat_sLe3 [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sLe2];
                    } in  x_sLdX sat_sLe3;
              };
        };

GHC.Show.$w$s$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: [GHC.Types.Char]
     -> GHC.Stack.Types.SrcLoc
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId,
 Arity=3,
 Str=<L,U><L,U(U,U,U,U(U),U(U),U(U),U(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sLe4 ww1_sLe5 w_sLe6]
        let {
          sat_sLel [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_sLe4 ww1_sLe5 w_sLe6] \u []
                  let {
                    sat_sLek [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [GHC.Show.$fShow(,)2 w_sLe6]; } in
                  let {
                    sat_sLeh [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [ww1_sLe5] \r [w1_sLe8]
                            case ww1_sLe5 of {
                              GHC.Stack.Types.SrcLoc ww3_sLea [Occ=Once]
                                                     ww4_sLeb [Occ=Once]
                                                     ww5_sLec [Occ=Once]
                                                     ww6_sLed [Occ=Once]
                                                     ww7_sLee [Occ=Once]
                                                     ww8_sLef [Occ=Once]
                                                     ww9_sLeg [Occ=Once] ->
                                  GHC.Show.$w$cshowsPrec
                                      0#
                                      ww3_sLea
                                      ww4_sLeb
                                      ww5_sLec
                                      ww6_sLed
                                      ww7_sLee
                                      ww8_sLef
                                      ww9_sLeg
                                      w1_sLe8;
                            }; } in
                  let {
                    sat_sLei [Occ=Once] :: [GHC.Show.ShowS]
                    [LclId] =
                        CCCS :! [sat_sLeh GHC.Types.[]]; } in
                  let {
                    sat_sLe7 [Occ=Once] :: GHC.Show.ShowS
                    [LclId] =
                        [ww_sLe4] \r [eta_B1]
                            GHC.Show.$fShow(,)_$cshowList1 ww_sLe4 eta_B1; } in
                  let {
                    sat_sLej [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                    [LclId] =
                        CCCS :! [sat_sLe7 sat_sLei];
                  } in  GHC.Show.$fShow(,)_go2 sat_sLej sat_sLek;
        } in  (#,#) [GHC.Show.$fShow(,)4 sat_sLel];

GHC.Show.$fShow(,)_go1 [Occ=LoopBreaker]
  :: [GHC.Base.String -> GHC.Base.String]
     -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sLem eta_sLen]
        case ds_sLem of {
          [] -> lvl11_rC0o;
          : x_sLeq [Occ=Once*!] ds1_sLer [Occ=Once!] ->
              case ds1_sLer of wild1_sLes {
                [] -> x_sLeq eta_sLen;
                : _ [Occ=Dead] _ [Occ=Dead] ->
                    let {
                      sat_sLev [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [eta_sLen wild1_sLes] \u []
                              GHC.Show.$fShow(,)_go1 wild1_sLes eta_sLen; } in
                    let {
                      sat_sLew [Occ=Once] :: GHC.Base.String
                      [LclId] =
                          CCCS :! [GHC.Show.showList__1 sat_sLev];
                    } in  x_sLeq sat_sLew;
              };
        };

GHC.Show.$fShow(,)_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a b.
     (GHC.Show.Show a, GHC.Show.Show b) =>
     GHC.Types.Int -> (a, b) -> GHC.Show.ShowS
[GblId,
 Arity=5,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sLex w1_sLey w2_sLez w3_sLeA w4_sLeB]
        case w3_sLeA of {
          (,) ww1_sLeD [Occ=Once] ww2_sLeE [Occ=Once] ->
              let {
                sat_sLeK [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sLex w1_sLey w4_sLeB ww1_sLeD ww2_sLeE] \u []
                        let {
                          sat_sLeJ [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 w4_sLeB]; } in
                        let {
                          sat_sLeG [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [w1_sLey ww2_sLeE] \u []
                                  GHC.Show.showsPrec w1_sLey GHC.Show.$fShow(,)1 ww2_sLeE; } in
                        let {
                          sat_sLeH [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sLeG GHC.Types.[]]; } in
                        let {
                          sat_sLeF [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [w_sLex ww1_sLeD] \u []
                                  GHC.Show.showsPrec w_sLex GHC.Show.$fShow(,)1 ww1_sLeD; } in
                        let {
                          sat_sLeI [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sLeF sat_sLeH];
                        } in  GHC.Show.$fShow(,)_go1 sat_sLeI sat_sLeJ;
              } in  : [GHC.Show.$fShow(,)4 sat_sLeK];
        };

GHC.Show.$fShow(,)_$cshow
  :: forall a b.
     (GHC.Show.Show a, GHC.Show.Show b) =>
     (a, b) -> GHC.Base.String
[GblId,
 Arity=3,
 Str=<L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U)>m2,
 Unf=OtherCon []] =
    [] \r [$dShow_sLeL $dShow1_sLeM x_sLeN]
        case x_sLeN of {
          (,) ww1_sLeP [Occ=Once] ww2_sLeQ [Occ=Once] ->
              let {
                sat_sLeW [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sLeL $dShow1_sLeM ww1_sLeP ww2_sLeQ] \u []
                        let {
                          sat_sLeV [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShow(,)2 GHC.Types.[]]; } in
                        let {
                          sat_sLeS [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow1_sLeM ww2_sLeQ] \u []
                                  GHC.Show.showsPrec $dShow1_sLeM GHC.Show.$fShow(,)1 ww2_sLeQ; } in
                        let {
                          sat_sLeT [Occ=Once] :: [GHC.Show.ShowS]
                          [LclId] =
                              CCCS :! [sat_sLeS GHC.Types.[]]; } in
                        let {
                          sat_sLeR [Occ=Once] :: GHC.Show.ShowS
                          [LclId] =
                              [$dShow_sLeL ww1_sLeP] \u []
                                  GHC.Show.showsPrec $dShow_sLeL GHC.Show.$fShow(,)1 ww1_sLeP; } in
                        let {
                          sat_sLeU [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                          [LclId] =
                              CCCS :! [sat_sLeR sat_sLeT];
                        } in  GHC.Show.$fShow(,)_go1 sat_sLeU sat_sLeV;
              } in  : [GHC.Show.$fShow(,)4 sat_sLeW];
        };

GHC.Show.$fShow(,)_$cshowList
  :: forall a b.
     (GHC.Show.Show a, GHC.Show.Show b) =>
     [(a, b)] -> GHC.Show.ShowS
[GblId,
 Arity=4,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sLeX $dShow1_sLeY ls_sLeZ s_sLf0]
        let {
          sat_sLfc [Occ=Once] :: (a_azJ8, b_azJ9) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLeX $dShow1_sLeY] \r [w_sLf1 w1_sLf2]
                  case w_sLf1 of {
                    (,) ww1_sLf4 [Occ=Once] ww2_sLf5 [Occ=Once] ->
                        let {
                          sat_sLfb [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [$dShow_sLeX $dShow1_sLeY w1_sLf2 ww1_sLf4 ww2_sLf5] \u []
                                  let {
                                    sat_sLfa [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        CCCS :! [GHC.Show.$fShow(,)2 w1_sLf2]; } in
                                  let {
                                    sat_sLf7 [Occ=Once] :: GHC.Show.ShowS
                                    [LclId] =
                                        [$dShow1_sLeY ww2_sLf5] \u []
                                            GHC.Show.showsPrec
                                                $dShow1_sLeY GHC.Show.$fShow(,)1 ww2_sLf5; } in
                                  let {
                                    sat_sLf8 [Occ=Once] :: [GHC.Show.ShowS]
                                    [LclId] =
                                        CCCS :! [sat_sLf7 GHC.Types.[]]; } in
                                  let {
                                    sat_sLf6 [Occ=Once] :: GHC.Show.ShowS
                                    [LclId] =
                                        [$dShow_sLeX ww1_sLf4] \u []
                                            GHC.Show.showsPrec
                                                $dShow_sLeX GHC.Show.$fShow(,)1 ww1_sLf4; } in
                                  let {
                                    sat_sLf9 [Occ=Once] :: [GHC.Base.String -> GHC.Base.String]
                                    [LclId] =
                                        CCCS :! [sat_sLf6 sat_sLf8];
                                  } in  GHC.Show.$fShow(,)_go1 sat_sLf9 sat_sLfa;
                        } in  : [GHC.Show.$fShow(,)4 sat_sLfb];
                  };
        } in  GHC.Show.showList__ sat_sLfc ls_sLeZ s_sLf0;

GHC.Show.$fShow(,) [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a b.
     (GHC.Show.Show a, GHC.Show.Show b) =>
     GHC.Show.Show (a, b)
[GblId[DFunId],
 Arity=2,
 Str=<L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m] =
    [] \r [$dShow_sLfd $dShow1_sLfe]
        let {
          sat_sLfh [Occ=Once] :: [(a_azJ8, b_azJ9)] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLfd $dShow1_sLfe] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow(,)_$cshowList
                      $dShow_sLfd $dShow1_sLfe eta_B2 eta_B1; } in
        let {
          sat_sLfg [Occ=Once] :: (a_azJ8, b_azJ9) -> GHC.Base.String
          [LclId] =
              [$dShow_sLfd $dShow1_sLfe] \r [eta_B1]
                  GHC.Show.$fShow(,)_$cshow $dShow_sLfd $dShow1_sLfe eta_B1; } in
        let {
          sat_sLff [Occ=Once]
            :: GHC.Types.Int -> (a_azJ8, b_azJ9) -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLfd $dShow1_sLfe] \r [eta_B3 eta_B2 eta_B1]
                  GHC.Show.$fShow(,)_$cshowsPrec
                      $dShow_sLfd $dShow1_sLfe eta_B3 eta_B2 eta_B1;
        } in  GHC.Show.C:Show [sat_sLff sat_sLfg sat_sLfh];

GHC.Show.showString :: GHC.Base.String -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Base.++ eta_B2 eta_B1;

GHC.Show.showCommaSpace :: GHC.Show.ShowS
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.++ GHC.Show.showCommaSpace1 eta_B1;

GHC.Show.$fShowTypeLitSort5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TypeLitSymbol"#;

GHC.Show.$fShowTypeLitSort4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowTypeLitSort5;

GHC.Show.$fShowTypeLitSort3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TypeLitNat"#;

GHC.Show.$fShowTypeLitSort2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowTypeLitSort3;

GHC.Show.$fShowTypeLitSort_$cshowsPrec
  :: GHC.Types.Int -> GHC.Types.TypeLitSort -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sLfi ds1_sLfj eta_sLfk]
        case ds1_sLfj of {
          GHC.Types.TypeLitSymbol ->
              GHC.Base.++ GHC.Show.$fShowTypeLitSort4 eta_sLfk;
          GHC.Types.TypeLitNat ->
              GHC.Base.++ GHC.Show.$fShowTypeLitSort2 eta_sLfk;
        };

GHC.Show.$fShowTypeLitSort_$cshow
  :: GHC.Types.TypeLitSort -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sLfm]
        case x_sLfm of {
          GHC.Types.TypeLitSymbol -> GHC.Show.$fShowTypeLitSort4;
          GHC.Types.TypeLitNat -> GHC.Show.$fShowTypeLitSort2;
        };

GHC.Show.$fShowTypeLitSort1
  :: GHC.Types.TypeLitSort -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sLfo eta_sLfp]
        case ds_sLfo of {
          GHC.Types.TypeLitSymbol ->
              GHC.Base.++ GHC.Show.$fShowTypeLitSort4 eta_sLfp;
          GHC.Types.TypeLitNat ->
              GHC.Base.++ GHC.Show.$fShowTypeLitSort2 eta_sLfp;
        };

GHC.Show.$fShowTypeLitSort_$cshowList
  :: [GHC.Types.TypeLitSort] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sLfr s_sLfs]
        GHC.Show.showList__ GHC.Show.$fShowTypeLitSort1 ls_sLfr s_sLfs;

GHC.Show.$fShowTypeLitSort [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.TypeLitSort
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowTypeLitSort_$cshowsPrec
                                    GHC.Show.$fShowTypeLitSort_$cshow
                                    GHC.Show.$fShowTypeLitSort_$cshowList];

GHC.Show.$fShowVecElem20 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int8ElemRep"#;

GHC.Show.$fShowVecElem19 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem20;

GHC.Show.$fShowVecElem18 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int16ElemRep"#;

GHC.Show.$fShowVecElem17 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem18;

GHC.Show.$fShowVecElem16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int32ElemRep"#;

GHC.Show.$fShowVecElem15 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem16;

GHC.Show.$fShowVecElem14 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int64ElemRep"#;

GHC.Show.$fShowVecElem13 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem14;

GHC.Show.$fShowVecElem12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word8ElemRep"#;

GHC.Show.$fShowVecElem11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem12;

GHC.Show.$fShowVecElem10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word16ElemRep"#;

GHC.Show.$fShowVecElem9 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem10;

GHC.Show.$fShowVecElem8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word32ElemRep"#;

GHC.Show.$fShowVecElem7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem8;

GHC.Show.$fShowVecElem6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word64ElemRep"#;

GHC.Show.$fShowVecElem5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem6;

GHC.Show.$fShowVecElem4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FloatElemRep"#;

GHC.Show.$fShowVecElem3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem4;

GHC.Show.$fShowVecElem2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DoubleElemRep"#;

GHC.Show.$fShowVecElem1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecElem2;

GHC.Show.$w$cshowsPrec10 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.VecElem -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sLft w1_sLfu]
        case w_sLft of {
          GHC.Types.Int8ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem19 w1_sLfu;
          GHC.Types.Int16ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem17 w1_sLfu;
          GHC.Types.Int32ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem15 w1_sLfu;
          GHC.Types.Int64ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem13 w1_sLfu;
          GHC.Types.Word8ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem11 w1_sLfu;
          GHC.Types.Word16ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem9 w1_sLfu;
          GHC.Types.Word32ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem7 w1_sLfu;
          GHC.Types.Word64ElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem5 w1_sLfu;
          GHC.Types.FloatElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem3 w1_sLfu;
          GHC.Types.DoubleElemRep ->
              GHC.Base.++ GHC.Show.$fShowVecElem1 w1_sLfu;
        };

GHC.Show.$fShowVecElem_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.VecElem -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sLfw w1_sLfx w2_sLfy]
        GHC.Show.$w$cshowsPrec10 w1_sLfx w2_sLfy;

GHC.Show.$fShowVecElem_$cshow
  :: GHC.Types.VecElem -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sLfz]
        case x_sLfz of {
          GHC.Types.Int8ElemRep -> GHC.Show.$fShowVecElem19;
          GHC.Types.Int16ElemRep -> GHC.Show.$fShowVecElem17;
          GHC.Types.Int32ElemRep -> GHC.Show.$fShowVecElem15;
          GHC.Types.Int64ElemRep -> GHC.Show.$fShowVecElem13;
          GHC.Types.Word8ElemRep -> GHC.Show.$fShowVecElem11;
          GHC.Types.Word16ElemRep -> GHC.Show.$fShowVecElem9;
          GHC.Types.Word32ElemRep -> GHC.Show.$fShowVecElem7;
          GHC.Types.Word64ElemRep -> GHC.Show.$fShowVecElem5;
          GHC.Types.FloatElemRep -> GHC.Show.$fShowVecElem3;
          GHC.Types.DoubleElemRep -> GHC.Show.$fShowVecElem1;
        };

GHC.Show.$fShowVecElem_$cshowList
  :: [GHC.Types.VecElem] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sLfB s_sLfC]
        GHC.Show.showList__ GHC.Show.$w$cshowsPrec10 ls_sLfB s_sLfC;

GHC.Show.$fShowVecElem [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.VecElem
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowVecElem_$cshowsPrec
                                    GHC.Show.$fShowVecElem_$cshow
                                    GHC.Show.$fShowVecElem_$cshowList];

GHC.Show.$fShowVecCount12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec2"#;

GHC.Show.$fShowVecCount11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount12;

GHC.Show.$fShowVecCount10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec4"#;

GHC.Show.$fShowVecCount9 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount10;

GHC.Show.$fShowVecCount8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec8"#;

GHC.Show.$fShowVecCount7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount8;

GHC.Show.$fShowVecCount6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec16"#;

GHC.Show.$fShowVecCount5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount6;

GHC.Show.$fShowVecCount4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec32"#;

GHC.Show.$fShowVecCount3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount4;

GHC.Show.$fShowVecCount2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Vec64"#;

GHC.Show.$fShowVecCount1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowVecCount2;

GHC.Show.$w$cshowsPrec9 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.VecCount -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sLfD w1_sLfE]
        case w_sLfD of {
          GHC.Types.Vec2 -> GHC.Base.++ GHC.Show.$fShowVecCount11 w1_sLfE;
          GHC.Types.Vec4 -> GHC.Base.++ GHC.Show.$fShowVecCount9 w1_sLfE;
          GHC.Types.Vec8 -> GHC.Base.++ GHC.Show.$fShowVecCount7 w1_sLfE;
          GHC.Types.Vec16 -> GHC.Base.++ GHC.Show.$fShowVecCount5 w1_sLfE;
          GHC.Types.Vec32 -> GHC.Base.++ GHC.Show.$fShowVecCount3 w1_sLfE;
          GHC.Types.Vec64 -> GHC.Base.++ GHC.Show.$fShowVecCount1 w1_sLfE;
        };

GHC.Show.$fShowVecCount_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.VecCount -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sLfG w1_sLfH w2_sLfI]
        GHC.Show.$w$cshowsPrec9 w1_sLfH w2_sLfI;

GHC.Show.$fShowVecCount_$cshow
  :: GHC.Types.VecCount -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sLfJ]
        case x_sLfJ of {
          GHC.Types.Vec2 -> GHC.Show.$fShowVecCount11;
          GHC.Types.Vec4 -> GHC.Show.$fShowVecCount9;
          GHC.Types.Vec8 -> GHC.Show.$fShowVecCount7;
          GHC.Types.Vec16 -> GHC.Show.$fShowVecCount5;
          GHC.Types.Vec32 -> GHC.Show.$fShowVecCount3;
          GHC.Types.Vec64 -> GHC.Show.$fShowVecCount1;
        };

GHC.Show.$fShowVecCount_$cshowList
  :: [GHC.Types.VecCount] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sLfL s_sLfM]
        GHC.Show.showList__ GHC.Show.$w$cshowsPrec9 ls_sLfL s_sLfM;

GHC.Show.$fShowVecCount [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.VecCount
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowVecCount_$cshowsPrec
                                    GHC.Show.$fShowVecCount_$cshow
                                    GHC.Show.$fShowVecCount_$cshowList];

GHC.Show.$fShowOrdering6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LT"#;

GHC.Show.$fShowOrdering5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowOrdering6;

GHC.Show.$fShowOrdering4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "EQ"#;

GHC.Show.$fShowOrdering3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowOrdering4;

GHC.Show.$fShowOrdering2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GT"#;

GHC.Show.$fShowOrdering1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowOrdering2;

GHC.Show.$w$cshowsPrec8 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Ordering -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sLfN w1_sLfO]
        case w_sLfN of {
          GHC.Types.LT -> GHC.Base.++ GHC.Show.$fShowOrdering5 w1_sLfO;
          GHC.Types.EQ -> GHC.Base.++ GHC.Show.$fShowOrdering3 w1_sLfO;
          GHC.Types.GT -> GHC.Base.++ GHC.Show.$fShowOrdering1 w1_sLfO;
        };

GHC.Show.$fShowOrdering_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Ordering -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_sLfQ w1_sLfR w2_sLfS]
        GHC.Show.$w$cshowsPrec8 w1_sLfR w2_sLfS;

GHC.Show.$fShowOrdering_$cshow
  :: GHC.Types.Ordering -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sLfT]
        case x_sLfT of {
          GHC.Types.LT -> GHC.Show.$fShowOrdering5;
          GHC.Types.EQ -> GHC.Show.$fShowOrdering3;
          GHC.Types.GT -> GHC.Show.$fShowOrdering1;
        };

GHC.Show.$fShowOrdering_$cshowList
  :: [GHC.Types.Ordering] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sLfV s_sLfW]
        GHC.Show.showList__ GHC.Show.$w$cshowsPrec8 ls_sLfV s_sLfW;

GHC.Show.$fShowOrdering [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Ordering
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowOrdering_$cshowsPrec
                                    GHC.Show.$fShowOrdering_$cshow
                                    GHC.Show.$fShowOrdering_$cshowList];

GHC.Show.$fShowBool5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "False"#;

GHC.Show.$fShowBool4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowBool5;

GHC.Show.$fShowBool3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "True"#;

GHC.Show.$fShowBool2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowBool3;

GHC.Show.$fShowBool_$cshowsPrec
  :: GHC.Types.Int -> GHC.Types.Bool -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sLfX ds1_sLfY eta_sLfZ]
        case ds1_sLfY of {
          GHC.Types.False -> GHC.Base.++ GHC.Show.$fShowBool4 eta_sLfZ;
          GHC.Types.True -> GHC.Base.++ GHC.Show.$fShowBool2 eta_sLfZ;
        };

GHC.Show.$fShowBool_$cshow :: GHC.Types.Bool -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sLg1]
        case x_sLg1 of {
          GHC.Types.False -> GHC.Show.$fShowBool4;
          GHC.Types.True -> GHC.Show.$fShowBool2;
        };

GHC.Show.$fShowBool1 :: GHC.Types.Bool -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sLg3 eta_sLg4]
        case ds_sLg3 of {
          GHC.Types.False -> GHC.Base.++ GHC.Show.$fShowBool4 eta_sLg4;
          GHC.Types.True -> GHC.Base.++ GHC.Show.$fShowBool2 eta_sLg4;
        };

GHC.Show.$fShowBool_$cshowList
  :: [GHC.Types.Bool] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sLg6 s_sLg7]
        GHC.Show.showList__ GHC.Show.$fShowBool1 ls_sLg6 s_sLg7;

GHC.Show.$fShowBool [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Bool
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowBool_$cshowsPrec
                                    GHC.Show.$fShowBool_$cshow
                                    GHC.Show.$fShowBool_$cshowList];

GHC.Show.$fShow()3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "()"#;

GHC.Show.$fShow()2 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShow()3;

GHC.Show.$fShow()_$cshowsPrec
  :: GHC.Types.Int -> () -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*H><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sLg8 ds1_sLg9 eta_sLga]
        case ds1_sLg9 of {
          () -> GHC.Base.++ GHC.Show.$fShow()2 eta_sLga;
        };

GHC.Show.$fShow()_$cshow :: () -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [x_sLgc] case x_sLgc of { () -> GHC.Show.$fShow()2; };

GHC.Show.$fShow()1 :: () -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*H><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sLge eta_sLgf]
        case ds_sLge of { () -> GHC.Base.++ GHC.Show.$fShow()2 eta_sLgf; };

GHC.Show.$fShow()_$cshowList :: [()] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sLgh s_sLgi]
        GHC.Show.showList__ GHC.Show.$fShow()1 ls_sLgh s_sLgi;

GHC.Show.$fShow() [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show ()
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShow()_$cshowsPrec
                                    GHC.Show.$fShow()_$cshow
                                    GHC.Show.$fShow()_$cshowList];

GHC.Show.$fShowTrName_$cshowsPrec
  :: GHC.Types.Int -> GHC.Types.TrName -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_sLgj ds1_sLgk]
        case ds1_sLgk of {
          GHC.Types.TrNameS s_sLgm [Occ=Once] ->
              let {
                sat_sLgn [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [s_sLgm] \u [] GHC.CString.unpackCString# s_sLgm;
              } in  GHC.Base.++ sat_sLgn;
          GHC.Types.TrNameD s_sLgo [Occ=Once] -> GHC.Base.++ s_sLgo;
        };

GHC.Show.$fShowTrName_$cshow :: GHC.Types.TrName -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sLgp]
        case x_sLgp of {
          GHC.Types.TrNameS s_sLgr [Occ=Once] ->
              GHC.CString.unpackCString# s_sLgr;
          GHC.Types.TrNameD s_sLgs [Occ=Once] -> s_sLgs;
        };

GHC.Show.$fShowTrName1 :: GHC.Types.TrName -> GHC.Show.ShowS
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_sLgt]
        case ds_sLgt of {
          GHC.Types.TrNameS s_sLgv [Occ=Once] ->
              let {
                sat_sLgw [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [s_sLgv] \u [] GHC.CString.unpackCString# s_sLgv;
              } in  GHC.Base.++ sat_sLgw;
          GHC.Types.TrNameD s_sLgx [Occ=Once] -> GHC.Base.++ s_sLgx;
        };

GHC.Show.$fShowTrName_$cshowList
  :: [GHC.Types.TrName] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sLgy s_sLgz]
        GHC.Show.showList__ GHC.Show.$fShowTrName1 ls_sLgy s_sLgz;

GHC.Show.$fShowTrName [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.TrName
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowTrName_$cshowsPrec
                                    GHC.Show.$fShowTrName_$cshow
                                    GHC.Show.$fShowTrName_$cshowList];

GHC.Show.$fShowModule2 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [':'#];

GHC.Show.$w$cshowsPrec6 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.TrName -> GHC.Types.TrName -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U><L,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_sLgA ww1_sLgB]
        let {
          f12_sLgC [Occ=OnceL!, Dmd=<L,C(U)>]
            :: GHC.Base.String -> GHC.Base.String
          [LclId] =
              [ww_sLgA] \u []
                  case ww_sLgA of {
                    GHC.Types.TrNameS s_sLgE [Occ=Once] ->
                        let {
                          sat_sLgF [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [s_sLgE] \u [] GHC.CString.unpackCString# s_sLgE;
                        } in  GHC.Base.++ sat_sLgF;
                    GHC.Types.TrNameD s_sLgG [Occ=Once] -> GHC.Base.++ s_sLgG;
                  }; } in
        let {
          g_sLgH [Occ=OnceL!, Dmd=<L,C(U)>]
            :: GHC.Base.String -> [GHC.Types.Char]
          [LclId] =
              [ww1_sLgB] \u []
                  case ww1_sLgB of {
                    GHC.Types.TrNameS s_sLgJ [Occ=Once] ->
                        let {
                          sat_sLgK [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [s_sLgJ] \u [] GHC.CString.unpackCString# s_sLgJ;
                        } in  GHC.Base.++ sat_sLgK;
                    GHC.Types.TrNameD s_sLgL [Occ=Once] -> GHC.Base.++ s_sLgL;
                  }; } in
        let {
          sat_sLgP [Occ=OnceT[0]] :: GHC.Base.String -> GHC.Base.String
          [LclId] =
              [f12_sLgC g_sLgH] \r [x_sLgM]
                  let {
                    sat_sLgN [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [g_sLgH x_sLgM] \u [] g_sLgH x_sLgM; } in
                  let {
                    sat_sLgO [Occ=Once] :: GHC.Base.String
                    [LclId] =
                        CCCS :! [GHC.Show.$fShowModule2 sat_sLgN];
                  } in  f12_sLgC sat_sLgO;
        } in  sat_sLgP;

GHC.Show.$fShowModule_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Module -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_sLgQ w1_sLgR]
        case w1_sLgR of {
          GHC.Types.Module ww1_sLgT [Occ=Once] ww2_sLgU [Occ=Once] ->
              GHC.Show.$w$cshowsPrec6 ww1_sLgT ww2_sLgU;
        };

GHC.Show.$fShowModule_$cshow :: GHC.Types.Module -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [x_sLgV]
        case x_sLgV of {
          GHC.Types.Module ww1_sLgX [Occ=Once] ww2_sLgY [Occ=Once] ->
              GHC.Show.$w$cshowsPrec6 ww1_sLgX ww2_sLgY GHC.Types.[];
        };

GHC.Show.$fShowModule1 :: GHC.Types.Module -> GHC.Show.ShowS
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_sLgZ]
        case w_sLgZ of {
          GHC.Types.Module ww1_sLh1 [Occ=Once] ww2_sLh2 [Occ=Once] ->
              GHC.Show.$w$cshowsPrec6 ww1_sLh1 ww2_sLh2;
        };

GHC.Show.$fShowModule_$cshowList
  :: [GHC.Types.Module] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sLh3 s_sLh4]
        GHC.Show.showList__ GHC.Show.$fShowModule1 ls_sLh3 s_sLh4;

GHC.Show.$fShowModule [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Module
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowModule_$cshowsPrec
                                    GHC.Show.$fShowModule_$cshow
                                    GHC.Show.$fShowModule_$cshowList];

GHC.Show.$fShowTyCon_$cshowsPrec
  :: GHC.Types.Int -> GHC.Types.TyCon -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [p_sLh5 ds_sLh6]
        case ds_sLh6 of {
          GHC.Types.TyCon _ [Occ=Dead]
                          _ [Occ=Dead]
                          _ [Occ=Dead]
                          tc_name_sLhb [Occ=Once]
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
              GHC.Show.$fShowTrName_$cshowsPrec p_sLh5 tc_name_sLhb;
        };

GHC.Show.$fShowTyCon_$cshow :: GHC.Types.TyCon -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [x_sLhe]
        case x_sLhe of {
          GHC.Types.TyCon _ [Occ=Dead]
                          _ [Occ=Dead]
                          _ [Occ=Dead]
                          tc_name_sLhj [Occ=Once!]
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
              case tc_name_sLhj of {
                GHC.Types.TrNameS s_sLhn [Occ=Once] ->
                    GHC.CString.unpackCString# s_sLhn;
                GHC.Types.TrNameD s_sLho [Occ=Once] -> s_sLho;
              };
        };

GHC.Show.$fShowTyCon1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.TyCon -> GHC.Show.ShowS
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
 Unf=OtherCon []] =
    [] \r [w_sLhp]
        case w_sLhp of {
          GHC.Types.TyCon _ [Occ=Dead]
                          _ [Occ=Dead]
                          _ [Occ=Dead]
                          ww4_sLhu [Occ=Once]
                          _ [Occ=Dead]
                          _ [Occ=Dead] ->
              GHC.Show.$fShowTrName1 ww4_sLhu;
        };

GHC.Show.$fShowTyCon_$cshowList
  :: [GHC.Types.TyCon] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sLhx s_sLhy]
        GHC.Show.showList__ GHC.Show.$fShowTyCon1 ls_sLhx s_sLhy;

GHC.Show.$fShowTyCon [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.TyCon
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowTyCon_$cshowsPrec
                                    GHC.Show.$fShowTyCon_$cshow
                                    GHC.Show.$fShowTyCon_$cshowList];

GHC.Show.showSpace1 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! [' '#];

GHC.Show.showSpace :: GHC.Show.ShowS
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [xs_sLhz] : [GHC.Show.showSpace1 xs_sLhz];

GHC.Show.protectEsc
  :: (GHC.Types.Char -> GHC.Types.Bool)
     -> GHC.Show.ShowS -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><C(S),1*C1(U)><L,1*U>,
 Unf=OtherCon []] =
    [] \r [p_sLhA f12_sLhB x_sLhC]
        let {
          sat_sLhH [Occ=Once] :: GHC.Base.String
          [LclId] =
              [p_sLhA x_sLhC] \u []
                  case x_sLhC of wild_sLhD {
                    [] -> [] [];
                    : c_sLhE [Occ=Once] _ [Occ=Dead] ->
                        case p_sLhA c_sLhE of {
                          GHC.Types.False -> wild_sLhD;
                          GHC.Types.True ->
                              GHC.CString.unpackAppendCString# GHC.Show.showLitChar4 wild_sLhD;
                        };
                  };
        } in  f12_sLhB sat_sLhH;

GHC.Show.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Show.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Show.$trModule4];

GHC.Show.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Show"#;

GHC.Show.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Show.$trModule2];

GHC.Show.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Show.$trModule3
                                     GHC.Show.$trModule1];

$krep_rC0q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcChar
                                              GHC.Types.[]];

$krep1_rC0r :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep2_rC0s :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep3_rC0t :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_rC0q GHC.Types.[]];

$krep4_rC0u :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep3_rC0t];

$krep5_rC0v :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_rC0u $krep4_rC0u];

GHC.Show.$tcShow1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$* $krep2_rC0s];

$krep6_rC0w :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep7_rC0x :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_rC0w $krep5_rC0v];

$krep8_rC0y :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_rC0r $krep7_rC0x];

$krep9_rC0z :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep6_rC0w $krep4_rC0u];

$krep10_rC0A :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep6_rC0w GHC.Types.[]];

$krep11_rC0B :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tc[]
                                              $krep10_rC0A];

$krep12_rC0C :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep11_rC0B $krep5_rC0v];

GHC.Show.$tcShow3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Show"#;

GHC.Show.$tcShow2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Show.$tcShow3];

GHC.Show.$tcShow :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [10437143935872046625##
                                    8934823934159178042##
                                    GHC.Show.$trModule
                                    GHC.Show.$tcShow2
                                    0#
                                    GHC.Show.$tcShow1];

$krep13_rC0D :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Show.$tcShow
                                              $krep10_rC0A];

$krep14_rC0E :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep12_rC0C $krep13_rC0D];

$krep15_rC0F :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep9_rC0z $krep14_rC0E];

GHC.Show.$tc'C:Show1 [InlPrag=NOUSERINLINE[~]] :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_rC0y $krep15_rC0F];

GHC.Show.$tc'C:Show3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:Show"#;

GHC.Show.$tc'C:Show2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Show.$tc'C:Show3];

GHC.Show.$tc'C:Show :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4474575220627516169##
                                    12023205831716615459##
                                    GHC.Show.$trModule
                                    GHC.Show.$tc'C:Show2
                                    1#
                                    GHC.Show.$tc'C:Show1];

GHC.Show.$fShowInt_$cshow :: GHC.Types.Int -> GHC.Base.String
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)>m2,
 Unf=OtherCon []] =
    [] \r [x_sLhI]
        case x_sLhI of {
          GHC.Types.I# ww1_sLhK [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# ww1_sLhK GHC.Types.[] of {
                (#,#) ww3_sLhM [Occ=Once] ww4_sLhN [Occ=Once] ->
                    : [ww3_sLhM ww4_sLhN];
              };
        };

GHC.Show.$fShowInt1 :: GHC.Types.Int -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sLhO w1_sLhP]
        case w_sLhO of {
          GHC.Types.I# ww1_sLhR [Occ=Once] ->
              case GHC.Show.$wshowSignedInt 0# ww1_sLhR w1_sLhP of {
                (#,#) ww3_sLhT [Occ=Once] ww4_sLhU [Occ=Once] ->
                    : [ww3_sLhT ww4_sLhU];
              };
        };

GHC.Show.$fShowInt_$cshowList :: [GHC.Types.Int] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sLhV s_sLhW]
        GHC.Show.showList__ GHC.Show.$fShowInt1 ls_sLhV s_sLhW;

GHC.Show.$fShowInt [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Int
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.showSignedInt
                                    GHC.Show.$fShowInt_$cshow
                                    GHC.Show.$fShowInt_$cshowList];

lvl12_rC0G :: GHC.Types.Char -> GHC.Types.Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    [] \r [ds_sLhX]
        case ds_sLhX of {
          GHC.Types.C# x_sLhZ [Occ=Once!] ->
              case x_sLhZ of {
                __DEFAULT -> GHC.Types.False [];
                '\n'# -> GHC.Types.True [];
              };
        };

lvl13_rC0H :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\n\\"#;

lvl14_rC0I :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl13_rC0H;

lvl15_rC0J :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\\n\""#;

lvl16_rC0K :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl15_rC0J;

lvl17_rC0L :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "\""#;

lvl18_rC0M :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl17_rC0L;

GHC.Show.$wgo [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Types.Char
     -> [GHC.Types.Char] -> (# [GHC.Types.Char], [[GHC.Types.Char]] #)
[GblId, Arity=2, Str=<L,U><S,1*U>, Unf=OtherCon []] =
    [] \r [w_sLi1 w1_sLi2]
        case GHC.List.$wbreak lvl12_rC0G w1_sLi2 of {
          (#,#) ww1_sLi4 [Occ=Once*] ww2_sLi5 [Occ=Once!] ->
              case ww2_sLi5 of {
                [] ->
                    let {
                      sat_sLi7 [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [ww1_sLi4] \u [] GHC.Show.showLitString ww1_sLi4 lvl18_rC0M; } in
                    let {
                      sat_sLi8 [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          CCCS :! [w_sLi1 sat_sLi7];
                    } in  (#,#) [sat_sLi8 GHC.Types.[]];
                : ds_sLi9 [Occ=Once!] s'_sLia [Occ=Once!] ->
                    case s'_sLia of wild1_sLib {
                      [] ->
                          case ds_sLi9 of {
                            GHC.Types.C# ds1_sLid [Occ=Once!] ->
                                case ds1_sLid of {
                                  __DEFAULT ->
                                      let {
                                        sat_sLif [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww1_sLi4] \u []
                                                GHC.Show.showLitString ww1_sLi4 lvl18_rC0M; } in
                                      let {
                                        sat_sLig [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            CCCS :! [w_sLi1 sat_sLif];
                                      } in  (#,#) [sat_sLig GHC.Types.[]];
                                  '\n'# ->
                                      let {
                                        sat_sLih [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [ww1_sLi4] \u []
                                                GHC.Show.showLitString ww1_sLi4 lvl16_rC0K; } in
                                      let {
                                        sat_sLii [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            CCCS :! [w_sLi1 sat_sLih];
                                      } in  (#,#) [sat_sLii GHC.Types.[]];
                                };
                          };
                      : _ [Occ=Dead] _ [Occ=Dead] ->
                          let {
                            sat_sLiq [Occ=Once] :: [[GHC.Types.Char]]
                            [LclId] =
                                [wild1_sLib] \u []
                                    case GHC.Show.$wgo GHC.Show.showLitChar13 wild1_sLib of {
                                      (#,#) ww5_sLio [Occ=Once] ww6_sLip [Occ=Once] ->
                                          : [ww5_sLio ww6_sLip];
                                    }; } in
                          let {
                            sat_sLil [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [ww1_sLi4] \u [] GHC.Show.showLitString ww1_sLi4 lvl14_rC0I; } in
                          let {
                            sat_sLim [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                CCCS :! [w_sLi1 sat_sLil];
                          } in  (#,#) [sat_sLim sat_sLiq];
                    };
              };
        };

GHC.Show.showMultiLineString_go [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Char -> [GHC.Types.Char] -> [[GHC.Types.Char]]
[GblId, Arity=2, Str=<L,U><S,1*U>m2, Unf=OtherCon []] =
    [] \r [w_sLir w1_sLis]
        case GHC.Show.$wgo w_sLir w1_sLis of {
          (#,#) ww1_sLiu [Occ=Once] ww2_sLiv [Occ=Once] ->
              : [ww1_sLiu ww2_sLiv];
        };

GHC.Show.showMultiLineString
  :: GHC.Base.String -> [GHC.Base.String]
[GblId, Arity=1, Str=<S,1*U>m2, Unf=OtherCon []] =
    [] \r [str_sLiw]
        case GHC.Show.$wgo GHC.Show.$fShow(,)3 str_sLiw of {
          (#,#) ww1_sLiy [Occ=Once] ww2_sLiz [Occ=Once] ->
              : [ww1_sLiy ww2_sLiz];
        };

GHC.Show.$fShowChar3 :: GHC.Types.Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.C#! ['\''#];

GHC.Show.$fShowChar2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'\\''"#;

GHC.Show.$fShowChar1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowChar2;

GHC.Show.$w$cshowsPrec3 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Char# -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ww_sLiA w_sLiB]
        case ww_sLiA of ds_sLiC {
          __DEFAULT ->
              let {
                sat_sLiE [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sLiB ds_sLiC] \u []
                        let {
                          sat_sLiD [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              CCCS :! [GHC.Show.$fShowChar3 w_sLiB];
                        } in  GHC.Show.$wshowLitChar ds_sLiC sat_sLiD;
              } in  : [GHC.Show.$fShowChar3 sat_sLiE];
          '\''# -> GHC.Base.++ GHC.Show.$fShowChar1 w_sLiB;
        };

GHC.Show.$fShowChar_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Char -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S(S),1*U(1*U)><L,U>, Unf=OtherCon []] =
    [] \r [w_sLiF w1_sLiG w2_sLiH]
        case w1_sLiG of {
          GHC.Types.C# ww1_sLiJ [Occ=Once] ->
              GHC.Show.$w$cshowsPrec3 ww1_sLiJ w2_sLiH;
        };

lvl19_rC0N :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.$fShowChar3 GHC.Types.[]];

GHC.Show.$fShowChar_$cshow :: GHC.Types.Char -> GHC.Base.String
[GblId, Arity=1, Str=<S(S),1*U(1*U)>, Unf=OtherCon []] =
    [] \r [x_sLiK]
        case x_sLiK of {
          GHC.Types.C# ds_sLiM [Occ=Once!] ->
              case ds_sLiM of ds1_sLiN {
                __DEFAULT ->
                    let {
                      sat_sLiO [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [ds1_sLiN] \u [] GHC.Show.$wshowLitChar ds1_sLiN lvl19_rC0N;
                    } in  : [GHC.Show.$fShowChar3 sat_sLiO];
                '\''# -> GHC.Show.$fShowChar1;
              };
        };

GHC.Show.$fShowChar [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.Char
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowChar_$cshowsPrec
                                    GHC.Show.$fShowChar_$cshow
                                    GHC.Show.$fShow(,)_$cshowList1];

GHC.Show.$fShow[]_$s$cshowList
  :: [[GHC.Types.Int]] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ls_sLiP s_sLiQ]
        GHC.Show.showList__ GHC.Show.$fShowInt_$cshowList ls_sLiP s_sLiQ;

GHC.Show.$fShow[]_$s$cshow :: [GHC.Types.Int] -> GHC.Base.String
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sLiR]
        GHC.Show.showList__ GHC.Show.$fShowInt1 x_sLiR GHC.Types.[];

$s$fShow[]1_rC0O
  :: GHC.Types.Int -> [GHC.Base.String] -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_sLiS eta_B2 eta_B1]
        GHC.Show.$fShow[]_$s$cshowList1 eta_B2 eta_B1;

GHC.Show.$fShow[]_$s$cshow2 :: [GHC.Base.String] -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sLiT]
        GHC.Show.showList__
            GHC.Show.$fShow(,)_$cshowList1 x_sLiT GHC.Types.[];

GHC.Show.$fShow[]_$cshow
  :: forall a. GHC.Show.Show a => [a] -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LLC(C(S))),1*U(A,A,1*C1(C1(U)))><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sLiU x_sLiV]
        GHC.Show.showList $dShow_sLiU x_sLiV GHC.Types.[];

GHC.Show.$fShow[]_$s$cshowList2
  :: [[GHC.Base.String]] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sLiW s_sLiX]
        GHC.Show.showList__ GHC.Show.$fShow[]_$s$cshowList1 ls_sLiW s_sLiX;

GHC.Show.$fShow[]_$s$fShow[]2 [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show [GHC.Base.String]
[GblId, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [$s$fShow[]1_rC0O
                                    GHC.Show.$fShow[]_$s$cshow2
                                    GHC.Show.$fShow[]_$s$cshowList2];

GHC.Show.$fShow[]_$cshowList
  :: forall a. GHC.Show.Show a => [[a]] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(A,A,1*C(C1(U)))><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sLiY ls_sLiZ s_sLj0]
        let {
          sat_sLj1 [Occ=Once, Dmd=<L,C(C1(U))>] :: [a_azLN] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLiY] \u [] GHC.Show.showList $dShow_sLiY;
        } in  GHC.Show.showList__ sat_sLj1 ls_sLiZ s_sLj0;

$s$fShow[]2_rC0P
  :: GHC.Types.Int
     -> [GHC.Types.Int] -> GHC.Base.String -> GHC.Base.String
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_sLj2 eta_sLj3 eta1_sLj4]
        GHC.Show.$fShowInt_$cshowList eta_sLj3 eta1_sLj4;

GHC.Show.$fShow[]_$s$fShow[] [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show [GHC.Types.Int]
[GblId, Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [$s$fShow[]2_rC0P
                                    GHC.Show.$fShow[]_$s$cshow
                                    GHC.Show.$fShow[]_$s$cshowList];

GHC.Show.$fShow[] [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show a => GHC.Show.Show [a]
[GblId[DFunId], Arity=1, Caf=NoCafRefs, Str=<L,U(A,A,U)>m] =
    [] \r [$dShow_sLj5]
        let {
          lvl45_sLj6 [Occ=OnceL] :: [a_azLN] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLj5] \u [] GHC.Show.showList $dShow_sLj5; } in
        let {
          sat_sLja [Occ=Once] :: [[a_azLN]] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLj5] \r [eta_B2 eta_B1]
                  GHC.Show.$fShow[]_$cshowList $dShow_sLj5 eta_B2 eta_B1; } in
        let {
          sat_sLj9 [Occ=Once] :: [a_azLN] -> GHC.Base.String
          [LclId] =
              [$dShow_sLj5] \r [eta_B1]
                  GHC.Show.$fShow[]_$cshow $dShow_sLj5 eta_B1; } in
        let {
          sat_sLj8 [Occ=Once] :: GHC.Types.Int -> [a_azLN] -> GHC.Show.ShowS
          [LclId] =
              [lvl45_sLj6] \r [ds_sLj7] lvl45_sLj6;
        } in  GHC.Show.C:Show [sat_sLj8 sat_sLj9 sat_sLja];

lvl20_rC0Q :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DoubleRep"#;

lvl21_rC0R :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl20_rC0Q;

lvl22_rC0S :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "FloatRep"#;

lvl23_rC0T :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl22_rC0S;

lvl24_rC0U :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "AddrRep"#;

lvl25_rC0V :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl24_rC0U;

lvl26_rC0W :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Word64Rep"#;

lvl27_rC0X :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl26_rC0W;

lvl28_rC0Y :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Int64Rep"#;

lvl29_rC0Z :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl28_rC0Y;

lvl30_rC10 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "WordRep"#;

lvl31_rC11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl30_rC10;

lvl32_rC12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IntRep"#;

lvl33_rC13 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl32_rC12;

lvl34_rC14 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "UnliftedRep"#;

lvl35_rC15 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl34_rC14;

lvl36_rC16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "LiftedRep"#;

lvl37_rC17 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl36_rC16;

lvl38_rC18 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SumRep "#;

lvl39_rC19 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "TupleRep "#;

lvl40_rC1a :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "VecRep "#;

GHC.Show.$fShowRuntimeRep_$cshowsPrec [Occ=LoopBreaker]
  :: GHC.Types.Int -> GHC.Types.RuntimeRep -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,1*U(U)><S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [a_sLjb ds_sLjc eta_sLjd]
        case ds_sLjc of {
          GHC.Types.VecRep b1_sLjf [Occ=Once] b2_sLjg [Occ=Once] ->
              case a_sLjb of {
                GHC.Types.I# x_sLji [Occ=Once] ->
                    let {
                      p_sLjj [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
                      [LclId, Arity=1, Str=<L,1*U>, Unf=OtherCon []] =
                          sat-only [b1_sLjf b2_sLjg] \r [x1_sLjk]
                              let {
                                sat_sLjn [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [b1_sLjf b2_sLjg x1_sLjk] \u []
                                        let {
                                          sat_sLjl [Occ=Once] :: [GHC.Types.Char]
                                          [LclId] =
                                              [b2_sLjg x1_sLjk] \u []
                                                  GHC.Show.$w$cshowsPrec10 b2_sLjg x1_sLjk; } in
                                        let {
                                          sat_sLjm [Occ=Once] :: GHC.Base.String
                                          [LclId] =
                                              CCCS :! [GHC.Show.showSpace1 sat_sLjl];
                                        } in  GHC.Show.$w$cshowsPrec9 b1_sLjf sat_sLjm;
                              } in  GHC.CString.unpackAppendCString# lvl40_rC1a sat_sLjn;
                    } in 
                      case >=# [x_sLji 11#] of {
                        __DEFAULT -> p_sLjj eta_sLjd;
                        1# ->
                            let {
                              sat_sLjq [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [eta_sLjd p_sLjj] \u []
                                      let {
                                        sat_sLjp [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [GHC.Show.$fShow(,)2 eta_sLjd];
                                      } in  p_sLjj sat_sLjp;
                            } in  : [GHC.Show.$fShow(,)4 sat_sLjq];
                      };
              };
          GHC.Types.TupleRep b1_sLjr [Occ=Once!] ->
              case a_sLjb of {
                GHC.Types.I# x_sLjt [Occ=Once] ->
                    let {
                      p_sLju [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
                      [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                          sat-only [b1_sLjr] \r [x1_sLjv]
                              let {
                                sat_sLjJ [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [b1_sLjr x1_sLjv] \u []
                                        case b1_sLjr of {
                                          [] ->
                                              GHC.CString.unpackAppendCString#
                                                  GHC.Show.showList__4 x1_sLjv;
                                          : x2_sLjx [Occ=Once] xs_sLjy [Occ=Once] ->
                                              let {
                                                sat_sLjI [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [x1_sLjv x2_sLjx xs_sLjy] \u []
                                                        let {
                                                          sat_sLjH [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              [x1_sLjv xs_sLjy] \u []
                                                                  let {
                                                                    lvl45_sLjz [Occ=OnceL]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId, Unf=OtherCon []] =
                                                                        CCCS :! [GHC.Show.showList__2
                                                                                 x1_sLjv]; } in
                                                                  let {
                                                                    showl_sLjA [Occ=LoopBreaker]
                                                                      :: [GHC.Types.RuntimeRep]
                                                                         -> GHC.Base.String
                                                                    [LclId,
                                                                     Arity=1,
                                                                     Str=<S,1*U>,
                                                                     Unf=OtherCon []] =
                                                                        sat-only [lvl45_sLjz
                                                                                  showl_sLjA] \r [ds1_sLjB]
                                                                            case ds1_sLjB of {
                                                                              [] -> lvl45_sLjz;
                                                                              : y_sLjD [Occ=Once]
                                                                                ys_sLjE [Occ=Once] ->
                                                                                  let {
                                                                                    sat_sLjG [Occ=Once]
                                                                                      :: [GHC.Types.Char]
                                                                                    [LclId] =
                                                                                        [showl_sLjA
                                                                                         y_sLjD
                                                                                         ys_sLjE] \u []
                                                                                            let {
                                                                                              sat_sLjF [Occ=Once]
                                                                                                :: GHC.Base.String
                                                                                              [LclId] =
                                                                                                  [showl_sLjA
                                                                                                   ys_sLjE] \u []
                                                                                                      showl_sLjA
                                                                                                          ys_sLjE;
                                                                                            } in 
                                                                                              GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                                                                                  GHC.Show.$fShow(,)1
                                                                                                  y_sLjD
                                                                                                  sat_sLjF;
                                                                                  } in 
                                                                                    : [GHC.Show.showList__1
                                                                                       sat_sLjG];
                                                                            };
                                                                  } in  showl_sLjA xs_sLjy;
                                                        } in 
                                                          GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                                              GHC.Show.$fShow(,)1 x2_sLjx sat_sLjH;
                                              } in  : [GHC.Show.showList__3 sat_sLjI];
                                        };
                              } in  GHC.CString.unpackAppendCString# lvl39_rC19 sat_sLjJ;
                    } in 
                      case >=# [x_sLjt 11#] of {
                        __DEFAULT -> p_sLju eta_sLjd;
                        1# ->
                            let {
                              sat_sLjM [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [eta_sLjd p_sLju] \u []
                                      let {
                                        sat_sLjL [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [GHC.Show.$fShow(,)2 eta_sLjd];
                                      } in  p_sLju sat_sLjL;
                            } in  : [GHC.Show.$fShow(,)4 sat_sLjM];
                      };
              };
          GHC.Types.SumRep b1_sLjN [Occ=Once!] ->
              case a_sLjb of {
                GHC.Types.I# x_sLjP [Occ=Once] ->
                    let {
                      p_sLjQ [Occ=Once*!, Dmd=<L,1*C1(U)>] :: GHC.Show.ShowS
                      [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                          sat-only [b1_sLjN] \r [x1_sLjR]
                              let {
                                sat_sLk5 [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [b1_sLjN x1_sLjR] \u []
                                        case b1_sLjN of {
                                          [] ->
                                              GHC.CString.unpackAppendCString#
                                                  GHC.Show.showList__4 x1_sLjR;
                                          : x2_sLjT [Occ=Once] xs_sLjU [Occ=Once] ->
                                              let {
                                                sat_sLk4 [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [x1_sLjR x2_sLjT xs_sLjU] \u []
                                                        let {
                                                          sat_sLk3 [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              [x1_sLjR xs_sLjU] \u []
                                                                  let {
                                                                    lvl45_sLjV [Occ=OnceL]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId, Unf=OtherCon []] =
                                                                        CCCS :! [GHC.Show.showList__2
                                                                                 x1_sLjR]; } in
                                                                  let {
                                                                    showl_sLjW [Occ=LoopBreaker]
                                                                      :: [GHC.Types.RuntimeRep]
                                                                         -> GHC.Base.String
                                                                    [LclId,
                                                                     Arity=1,
                                                                     Str=<S,1*U>,
                                                                     Unf=OtherCon []] =
                                                                        sat-only [lvl45_sLjV
                                                                                  showl_sLjW] \r [ds1_sLjX]
                                                                            case ds1_sLjX of {
                                                                              [] -> lvl45_sLjV;
                                                                              : y_sLjZ [Occ=Once]
                                                                                ys_sLk0 [Occ=Once] ->
                                                                                  let {
                                                                                    sat_sLk2 [Occ=Once]
                                                                                      :: [GHC.Types.Char]
                                                                                    [LclId] =
                                                                                        [showl_sLjW
                                                                                         y_sLjZ
                                                                                         ys_sLk0] \u []
                                                                                            let {
                                                                                              sat_sLk1 [Occ=Once]
                                                                                                :: GHC.Base.String
                                                                                              [LclId] =
                                                                                                  [showl_sLjW
                                                                                                   ys_sLk0] \u []
                                                                                                      showl_sLjW
                                                                                                          ys_sLk0;
                                                                                            } in 
                                                                                              GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                                                                                  GHC.Show.$fShow(,)1
                                                                                                  y_sLjZ
                                                                                                  sat_sLk1;
                                                                                  } in 
                                                                                    : [GHC.Show.showList__1
                                                                                       sat_sLk2];
                                                                            };
                                                                  } in  showl_sLjW xs_sLjU;
                                                        } in 
                                                          GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                                              GHC.Show.$fShow(,)1 x2_sLjT sat_sLk3;
                                              } in  : [GHC.Show.showList__3 sat_sLk4];
                                        };
                              } in  GHC.CString.unpackAppendCString# lvl38_rC18 sat_sLk5;
                    } in 
                      case >=# [x_sLjP 11#] of {
                        __DEFAULT -> p_sLjQ eta_sLjd;
                        1# ->
                            let {
                              sat_sLk8 [Occ=Once] :: [GHC.Types.Char]
                              [LclId] =
                                  [eta_sLjd p_sLjQ] \u []
                                      let {
                                        sat_sLk7 [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            CCCS :! [GHC.Show.$fShow(,)2 eta_sLjd];
                                      } in  p_sLjQ sat_sLk7;
                            } in  : [GHC.Show.$fShow(,)4 sat_sLk8];
                      };
              };
          GHC.Types.LiftedRep -> GHC.Base.++ lvl37_rC17 eta_sLjd;
          GHC.Types.UnliftedRep -> GHC.Base.++ lvl35_rC15 eta_sLjd;
          GHC.Types.IntRep -> GHC.Base.++ lvl33_rC13 eta_sLjd;
          GHC.Types.WordRep -> GHC.Base.++ lvl31_rC11 eta_sLjd;
          GHC.Types.Int64Rep -> GHC.Base.++ lvl29_rC0Z eta_sLjd;
          GHC.Types.Word64Rep -> GHC.Base.++ lvl27_rC0X eta_sLjd;
          GHC.Types.AddrRep -> GHC.Base.++ lvl25_rC0V eta_sLjd;
          GHC.Types.FloatRep -> GHC.Base.++ lvl23_rC0T eta_sLjd;
          GHC.Types.DoubleRep -> GHC.Base.++ lvl21_rC0R eta_sLjd;
        };

GHC.Show.$fShowRuntimeRep1
  :: GHC.Types.RuntimeRep -> GHC.Show.ShowS
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Show.$fShowRuntimeRep_$cshowsPrec
            GHC.Show.$fShow(,)1 eta_B2 eta_B1;

GHC.Show.$fShowRuntimeRep_$cshowList
  :: [GHC.Types.RuntimeRep] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sLk9 s_sLka]
        GHC.Show.showList__ GHC.Show.$fShowRuntimeRep1 ls_sLk9 s_sLka;

GHC.Show.$fShowRuntimeRep_$cshow
  :: GHC.Types.RuntimeRep -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sLkb]
        GHC.Show.$fShowRuntimeRep_$cshowsPrec
            GHC.Show.$fShow(,)1 x_sLkb GHC.Types.[];

GHC.Show.$fShowRuntimeRep [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.RuntimeRep
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                    GHC.Show.$fShowRuntimeRep_$cshow
                                    GHC.Show.$fShowRuntimeRep_$cshowList];

GHC.Show.$fShowCallStack2
  :: ([GHC.Types.Char], GHC.Stack.Types.SrcLoc) -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U(U,U(U,U,U,U(U),U(U),U(U),U(U)))><L,U>m2,
 Unf=OtherCon []] =
    [] \r [w_sLkc w1_sLkd]
        case w_sLkc of {
          (,) ww1_sLkf [Occ=Once] ww2_sLkg [Occ=Once] ->
              case GHC.Show.$w$s$cshowsPrec ww1_sLkf ww2_sLkg w1_sLkd of {
                (#,#) ww4_sLki [Occ=Once] ww5_sLkj [Occ=Once] ->
                    : [ww4_sLki ww5_sLkj];
              };
        };

GHC.Show.$fShowCallStack_$cshowsPrec
  :: GHC.Types.Int -> GHC.Stack.Types.CallStack -> GHC.Show.ShowS
[GblId, Arity=2, Str=<L,A><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sLkk eta_sLkl]
        let {
          ls_sLkm [Occ=Once] :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
          [LclId] =
              [eta_sLkl] \u [] GHC.Stack.Types.getCallStack eta_sLkl;
        } in  GHC.Show.showList__ GHC.Show.$fShowCallStack2 ls_sLkm;

GHC.Show.$fShowCallStack3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.showList__4;

lvl41_rC1b :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Show.showList__2 GHC.Types.[]];

GHC.Show.$fShowCallStack_showl [Occ=LoopBreaker]
  :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)] -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>m2, Unf=OtherCon []] =
    [] \r [ds_sLko]
        case ds_sLko of {
          [] -> lvl41_rC1b;
          : y_sLkq [Occ=Once!] ys_sLkr [Occ=Once] ->
              let {
                sat_sLkz [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [y_sLkq ys_sLkr] \u []
                        case y_sLkq of {
                          (,) ww1_sLkt [Occ=Once] ww2_sLku [Occ=Once] ->
                              let {
                                sat_sLkv [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    [ys_sLkr] \u [] GHC.Show.$fShowCallStack_showl ys_sLkr;
                              } in 
                                case GHC.Show.$w$s$cshowsPrec ww1_sLkt ww2_sLku sat_sLkv of {
                                  (#,#) ww4_sLkx [Occ=Once] ww5_sLky [Occ=Once] ->
                                      : [ww4_sLkx ww5_sLky];
                                };
                        };
              } in  : [GHC.Show.showList__1 sat_sLkz];
        };

GHC.Show.$fShowCallStack_$cshow
  :: GHC.Stack.Types.CallStack -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sLkA]
        case GHC.Stack.Types.getCallStack x_sLkA of {
          [] -> GHC.Show.$fShowCallStack3;
          : x1_sLkC [Occ=Once!] xs_sLkD [Occ=Once] ->
              let {
                sat_sLkL [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [x1_sLkC xs_sLkD] \u []
                        case x1_sLkC of {
                          (,) ww1_sLkF [Occ=Once] ww2_sLkG [Occ=Once] ->
                              let {
                                sat_sLkH [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    [xs_sLkD] \u [] GHC.Show.$fShowCallStack_showl xs_sLkD;
                              } in 
                                case GHC.Show.$w$s$cshowsPrec ww1_sLkF ww2_sLkG sat_sLkH of {
                                  (#,#) ww4_sLkJ [Occ=Once] ww5_sLkK [Occ=Once] ->
                                      : [ww4_sLkJ ww5_sLkK];
                                };
                        };
              } in  : [GHC.Show.showList__3 sat_sLkL];
        };

GHC.Show.$fShowCallStack1
  :: GHC.Stack.Types.CallStack -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=1, Str=<L,1*U>, Unf=OtherCon []] =
    [] \r [x_sLkM]
        let {
          ls_sLkN [Occ=Once] :: [([GHC.Types.Char], GHC.Stack.Types.SrcLoc)]
          [LclId] =
              [x_sLkM] \u [] GHC.Stack.Types.getCallStack x_sLkM;
        } in  GHC.Show.showList__ GHC.Show.$fShowCallStack2 ls_sLkN;

GHC.Show.$fShowCallStack_$cshowList
  :: [GHC.Stack.Types.CallStack] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sLkP s_sLkQ]
        GHC.Show.showList__ GHC.Show.$fShowCallStack1 ls_sLkP s_sLkQ;

GHC.Show.$fShowCallStack [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Stack.Types.CallStack
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowCallStack_$cshowsPrec
                                    GHC.Show.$fShowCallStack_$cshow
                                    GHC.Show.$fShowCallStack_$cshowList];

GHC.Show.$fShowNonEmpty2 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [6#];

GHC.Show.$fShowNonEmpty1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " :| "#;

GHC.Show.$w$cshowsPrec7 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Show.Show a =>
     GHC.Prim.Int# -> a -> [a] -> GHC.Show.ShowS
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U(1*C1(C1(C(U))),A,1*C1(C(U)))><S,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sLkR ww_sLkS ww1_sLkT ww2_sLkU]
        let {
          f12_sLkV [Occ=OnceL*!, Dmd=<L,C(U)>]
            :: GHC.Base.String -> GHC.Base.String
          [LclId] =
              [w_sLkR ww1_sLkT] \u []
                  GHC.Show.showsPrec w_sLkR GHC.Show.$fShowNonEmpty2 ww1_sLkT; } in
        let {
          g_sLkW [Occ=OnceL*!, Dmd=<L,C(U)>]
            :: GHC.Base.String -> GHC.Base.String
          [LclId] =
              [w_sLkR ww2_sLkU] \u [] GHC.Show.showList w_sLkR ww2_sLkU;
        } in 
          case >=# [ww_sLkS 6#] of {
            __DEFAULT ->
                let {
                  sat_sLl1 [Occ=OnceT[0]] :: GHC.Base.String -> GHC.Base.String
                  [LclId] =
                      [f12_sLkV g_sLkW] \r [x_sLkY]
                          let {
                            sat_sLl0 [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [g_sLkW x_sLkY] \u []
                                    let {
                                      sat_sLkZ [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [g_sLkW x_sLkY] \u [] g_sLkW x_sLkY;
                                    } in 
                                      GHC.CString.unpackAppendCString#
                                          GHC.Show.$fShowNonEmpty1 sat_sLkZ;
                          } in  f12_sLkV sat_sLl0;
                } in  sat_sLl1;
            1# ->
                let {
                  sat_sLl7 [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                  [LclId] =
                      [f12_sLkV g_sLkW] \r [x_sLl2]
                          let {
                            sat_sLl6 [Occ=Once] :: [GHC.Types.Char]
                            [LclId] =
                                [f12_sLkV g_sLkW x_sLl2] \u []
                                    let {
                                      sat_sLl5 [Occ=Once] :: GHC.Base.String
                                      [LclId] =
                                          [g_sLkW x_sLl2] \u []
                                              let {
                                                sat_sLl4 [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [g_sLkW x_sLl2] \u []
                                                        let {
                                                          sat_sLl3 [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2 x_sLl2];
                                                        } in  g_sLkW sat_sLl3;
                                              } in 
                                                GHC.CString.unpackAppendCString#
                                                    GHC.Show.$fShowNonEmpty1 sat_sLl4;
                                    } in  f12_sLkV sat_sLl5;
                          } in  : [GHC.Show.$fShow(,)4 sat_sLl6];
                } in  sat_sLl7;
          };

GHC.Show.$fShowNonEmpty_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Show.Show a =>
     GHC.Types.Int -> GHC.Base.NonEmpty a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(C(U))),A,C(C(U)))><S(S),1*U(U)><S,1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [w_sLl8 w1_sLl9 w2_sLla]
        case w1_sLl9 of {
          GHC.Types.I# ww1_sLlc [Occ=Once] ->
              case w2_sLla of {
                GHC.Base.:| ww3_sLle [Occ=Once] ww4_sLlf [Occ=Once] ->
                    GHC.Show.$w$cshowsPrec7 w_sLl8 ww1_sLlc ww3_sLle ww4_sLlf;
              };
        };

GHC.Show.$w$cshow [InlPrag=NOUSERINLINE[0]]
  :: forall a. GHC.Show.Show a => a -> [a] -> GHC.Base.String
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(C(C(C(S)))LL),U(1*C1(C1(C1(U))),A,1*C1(C1(U)))><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [w_sLlg ww_sLlh ww1_sLli]
        let {
          sat_sLlk [Occ=Once] :: GHC.Base.String
          [LclId] =
              [w_sLlg ww1_sLli] \u []
                  let {
                    sat_sLlj [Occ=Once] :: [GHC.Types.Char]
                    [LclId] =
                        [w_sLlg ww1_sLli] \u []
                            GHC.Show.showList w_sLlg ww1_sLli GHC.Types.[];
                  } in 
                    GHC.CString.unpackAppendCString# GHC.Show.$fShowNonEmpty1 sat_sLlj;
        } in 
          GHC.Show.showsPrec
              w_sLlg GHC.Show.$fShowNonEmpty2 ww_sLlh sat_sLlk;

GHC.Show.$fShowNonEmpty_$cshow [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Show.Show a =>
     GHC.Base.NonEmpty a -> GHC.Base.String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(C(C(C(S)))LL),U(C(C1(C1(U))),A,C(C1(U)))><S,1*U(U,U)>,
 Unf=OtherCon []] =
    [] \r [w_sLll w1_sLlm]
        case w1_sLlm of {
          GHC.Base.:| ww1_sLlo [Occ=Once] ww2_sLlp [Occ=Once] ->
              GHC.Show.$w$cshow w_sLll ww1_sLlo ww2_sLlp;
        };

GHC.Show.$fShowNonEmpty_$cshowList
  :: forall a.
     GHC.Show.Show a =>
     [GHC.Base.NonEmpty a] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(C(U))),A,C(C(U)))><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sLlq ls_sLlr s_sLls]
        let {
          sat_sLlx [Occ=Once] :: GHC.Base.NonEmpty a_aztY -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLlq] \r [w_sLlt]
                  case w_sLlt of {
                    GHC.Base.:| ww1_sLlv [Occ=Once] ww2_sLlw [Occ=Once] ->
                        GHC.Show.$w$cshowsPrec7 $dShow_sLlq 0# ww1_sLlv ww2_sLlw;
                  };
        } in  GHC.Show.showList__ sat_sLlx ls_sLlr s_sLls;

GHC.Show.$fShowNonEmpty [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show a => GHC.Show.Show (GHC.Base.NonEmpty a)
[GblId[DFunId],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U(C(C1(C(U))),A,C(C(U)))>m] =
    [] \r [$dShow_sLly]
        let {
          sat_sLlB [Occ=Once] :: [GHC.Base.NonEmpty a_aztY] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLly] \r [eta_B2 eta_B1]
                  GHC.Show.$fShowNonEmpty_$cshowList $dShow_sLly eta_B2 eta_B1; } in
        let {
          sat_sLlA [Occ=Once] :: GHC.Base.NonEmpty a_aztY -> GHC.Base.String
          [LclId] =
              [$dShow_sLly] \r [eta_B1]
                  GHC.Show.$fShowNonEmpty_$cshow $dShow_sLly eta_B1; } in
        let {
          sat_sLlz [Occ=Once]
            :: GHC.Types.Int -> GHC.Base.NonEmpty a_aztY -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLly] \r [eta_B2 eta_B1]
                  GHC.Show.$fShowNonEmpty_$cshowsPrec $dShow_sLly eta_B2 eta_B1;
        } in  GHC.Show.C:Show [sat_sLlz sat_sLlA sat_sLlB];

GHC.Show.$fShowMaybe5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Nothing"#;

GHC.Show.$fShowMaybe4 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowMaybe5;

GHC.Show.$fShowMaybe3 :: [GHC.Types.Char] -> [GHC.Types.Char]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Base.++ GHC.Show.$fShowMaybe4 eta_B1;

GHC.Show.$fShowMaybe2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Just "#;

GHC.Show.$fShowMaybe1 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.Show.$fShowMaybe2;

GHC.Show.$fShowMaybe_$cshowsPrec
  :: forall a.
     GHC.Show.Show a =>
     GHC.Types.Int -> GHC.Base.Maybe a -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sLlC ds_sLlD ds1_sLlE]
        case ds1_sLlE of {
          GHC.Base.Nothing -> GHC.Show.$fShowMaybe3;
          GHC.Base.Just b1_sLlG [Occ=Once] ->
              case ds_sLlD of {
                GHC.Types.I# x_sLlI [Occ=Once] ->
                    let {
                      g_sLlJ [Occ=OnceL*!, Dmd=<L,C(U)>]
                        :: GHC.Base.String -> GHC.Base.String
                      [LclId] =
                          [$dShow_sLlC b1_sLlG] \u []
                              GHC.Show.showsPrec $dShow_sLlC GHC.Show.appPrec1 b1_sLlG;
                    } in 
                      case >=# [x_sLlI 11#] of {
                        __DEFAULT ->
                            let {
                              sat_sLlN [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_sLlJ] \r [x1_sLlL]
                                      let {
                                        sat_sLlM [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_sLlJ x1_sLlL] \s [] g_sLlJ x1_sLlL;
                                      } in  GHC.Base.++ GHC.Show.$fShowMaybe1 sat_sLlM;
                            } in  sat_sLlN;
                        1# ->
                            let {
                              sat_sLlS [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                              [LclId] =
                                  [g_sLlJ] \r [x1_sLlO]
                                      let {
                                        sat_sLlR [Occ=Once] :: [GHC.Types.Char]
                                        [LclId] =
                                            [g_sLlJ x1_sLlO] \u []
                                                let {
                                                  sat_sLlQ [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [g_sLlJ x1_sLlO] \s []
                                                          let {
                                                            sat_sLlP [Occ=Once] :: GHC.Base.String
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)2
                                                                         x1_sLlO];
                                                          } in  g_sLlJ sat_sLlP;
                                                } in  GHC.Base.++ GHC.Show.$fShowMaybe1 sat_sLlQ;
                                      } in  : [GHC.Show.$fShow(,)4 sat_sLlR];
                            } in  sat_sLlS;
                      };
              };
        };

GHC.Show.$fShowMaybe_$cshow
  :: forall a. GHC.Show.Show a => GHC.Base.Maybe a -> GHC.Base.String
[GblId,
 Arity=2,
 Str=<L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sLlT x_sLlU]
        case x_sLlU of {
          GHC.Base.Nothing -> GHC.Show.$fShowMaybe4;
          GHC.Base.Just b1_sLlW [Occ=Once] ->
              let {
                sat_sLlX [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                [LclId] =
                    [$dShow_sLlT b1_sLlW] \s []
                        GHC.Show.showsPrec
                            $dShow_sLlT GHC.Show.appPrec1 b1_sLlW GHC.Types.[];
              } in  GHC.Base.++ GHC.Show.$fShowMaybe1 sat_sLlX;
        };

GHC.Show.$fShowMaybe_$cshowList
  :: forall a.
     GHC.Show.Show a =>
     [GHC.Base.Maybe a] -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [$dShow_sLlY ls_sLlZ s_sLm0]
        let {
          sat_sLm1 [Occ=Once] :: GHC.Base.Maybe a_azus -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLlY] \r [eta_B1]
                  GHC.Show.$fShowMaybe_$cshowsPrec
                      $dShow_sLlY GHC.Show.$fShow(,)1 eta_B1;
        } in  GHC.Show.showList__ sat_sLm1 ls_sLlZ s_sLm0;

GHC.Show.$fShowMaybe [InlPrag=NOUSERINLINE CONLIKE]
  :: forall a. GHC.Show.Show a => GHC.Show.Show (GHC.Base.Maybe a)
[GblId[DFunId], Arity=1, Str=<L,U(C(C1(C(U))),A,A)>m] =
    [] \r [$dShow_sLm2]
        let {
          sat_sLm5 [Occ=Once] :: [GHC.Base.Maybe a_azus] -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLm2] \r [eta_B2 eta_B1]
                  GHC.Show.$fShowMaybe_$cshowList $dShow_sLm2 eta_B2 eta_B1; } in
        let {
          sat_sLm4 [Occ=Once] :: GHC.Base.Maybe a_azus -> GHC.Base.String
          [LclId] =
              [$dShow_sLm2] \r [eta_B1]
                  GHC.Show.$fShowMaybe_$cshow $dShow_sLm2 eta_B1; } in
        let {
          sat_sLm3 [Occ=Once]
            :: GHC.Types.Int -> GHC.Base.Maybe a_azus -> GHC.Show.ShowS
          [LclId] =
              [$dShow_sLm2] \r [eta_B2 eta_B1]
                  GHC.Show.$fShowMaybe_$cshowsPrec $dShow_sLm2 eta_B2 eta_B1;
        } in  GHC.Show.C:Show [sat_sLm3 sat_sLm4 sat_sLm5];

f_rC1c :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepTypeLitD "#;

f1_rC1d :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f_rC1c;

f2_rC1e :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepTypeLitS "#;

f3_rC1f :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f2_rC1e;

f4_rC1g :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepTYPE "#;

f5_rC1h :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f4_rC1g;

f6_rC1i :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepFun "#;

f7_rC1j :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f6_rC1i;

f8_rC1k :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepApp "#;

f9_rC1l :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f8_rC1k;

f10_rC1m :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepVar "#;

f11_rC1n :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# f10_rC1m;

lvl42_rC1o :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    " "#;

lvl43_rC1p :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "KindRepTyConApp "#;

GHC.Show.$w$cshowsPrec5 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int# -> GHC.Types.KindRep -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
    [] \r [ww_sLm6 w_sLm7]
        case w_sLm7 of {
          GHC.Types.KindRepTyConApp p_sLm9 [Occ=Once!] q_sLma [Occ=OnceL!] ->
              let {
                f12_sLmb [Occ=OnceL!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [p_sLm9] \u []
                        case p_sLm9 of {
                          GHC.Types.TyCon _ [Occ=Dead]
                                          _ [Occ=Dead]
                                          _ [Occ=Dead]
                                          tc_name_sLmg [Occ=Once!]
                                          _ [Occ=Dead]
                                          _ [Occ=Dead] ->
                              case tc_name_sLmg of {
                                GHC.Types.TrNameS s_sLmk [Occ=Once] ->
                                    let {
                                      sat_sLml [Occ=Once] :: [GHC.Types.Char]
                                      [LclId] =
                                          [s_sLmk] \u [] GHC.CString.unpackCString# s_sLmk;
                                    } in  GHC.Base.++ sat_sLml;
                                GHC.Types.TrNameD s_sLmm [Occ=Once] -> GHC.Base.++ s_sLmm;
                              };
                        }; } in
              let {
                p1_sLmn [Occ=OnceL*] :: GHC.Show.ShowS
                [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
                    [q_sLma f12_sLmb] \r [x_sLmo]
                        let {
                          sat_sLmE [Occ=Once] :: [GHC.Types.Char]
                          [LclId] =
                              [q_sLma f12_sLmb x_sLmo] \u []
                                  let {
                                    sat_sLmD [Occ=Once] :: GHC.Base.String
                                    [LclId] =
                                        [q_sLma x_sLmo] \u []
                                            let {
                                              sat_sLmC [Occ=Once] :: [GHC.Types.Char]
                                              [LclId] =
                                                  [q_sLma x_sLmo] \u []
                                                      case q_sLma of {
                                                        [] ->
                                                            GHC.CString.unpackAppendCString#
                                                                GHC.Show.showList__4 x_sLmo;
                                                        : x1_sLmq [Occ=Once] xs_sLmr [Occ=Once] ->
                                                            let {
                                                              sat_sLmB [Occ=Once]
                                                                :: [GHC.Types.Char]
                                                              [LclId] =
                                                                  [x_sLmo x1_sLmq xs_sLmr] \u []
                                                                      let {
                                                                        sat_sLmA [Occ=Once]
                                                                          :: GHC.Base.String
                                                                        [LclId] =
                                                                            [x_sLmo xs_sLmr] \u []
                                                                                let {
                                                                                  lvl45_sLms [Occ=OnceL]
                                                                                    :: [GHC.Types.Char]
                                                                                  [LclId,
                                                                                   Unf=OtherCon []] =
                                                                                      CCCS :! [GHC.Show.showList__2
                                                                                               x_sLmo]; } in
                                                                                let {
                                                                                  showl_sLmt [Occ=LoopBreaker]
                                                                                    :: [GHC.Types.KindRep]
                                                                                       -> GHC.Base.String
                                                                                  [LclId,
                                                                                   Arity=1,
                                                                                   Str=<S,1*U>,
                                                                                   Unf=OtherCon []] =
                                                                                      sat-only [lvl45_sLms
                                                                                                showl_sLmt] \r [ds_sLmu]
                                                                                          case
                                                                                              ds_sLmu
                                                                                          of
                                                                                          { [] ->
                                                                                                lvl45_sLms;
                                                                                            : y_sLmw [Occ=Once]
                                                                                              ys_sLmx [Occ=Once] ->
                                                                                                let {
                                                                                                  sat_sLmz [Occ=Once]
                                                                                                    :: [GHC.Types.Char]
                                                                                                  [LclId] =
                                                                                                      [showl_sLmt
                                                                                                       y_sLmw
                                                                                                       ys_sLmx] \u []
                                                                                                          let {
                                                                                                            sat_sLmy [Occ=Once]
                                                                                                              :: GHC.Base.String
                                                                                                            [LclId] =
                                                                                                                [showl_sLmt
                                                                                                                 ys_sLmx] \u []
                                                                                                                    showl_sLmt
                                                                                                                        ys_sLmx;
                                                                                                          } in 
                                                                                                            GHC.Show.$w$cshowsPrec5
                                                                                                                0#
                                                                                                                y_sLmw
                                                                                                                sat_sLmy;
                                                                                                } in 
                                                                                                  : [GHC.Show.showList__1
                                                                                                     sat_sLmz];
                                                                                          };
                                                                                } in 
                                                                                  showl_sLmt
                                                                                      xs_sLmr;
                                                                      } in 
                                                                        GHC.Show.$w$cshowsPrec5
                                                                            0# x1_sLmq sat_sLmA;
                                                            } in  : [GHC.Show.showList__3 sat_sLmB];
                                                      };
                                            } in 
                                              GHC.CString.unpackAppendCString# lvl42_rC1o sat_sLmC;
                                  } in  f12_sLmb sat_sLmD;
                        } in  GHC.CString.unpackAppendCString# lvl43_rC1p sat_sLmE;
              } in 
                case ># [ww_sLm6 10#] of {
                  __DEFAULT -> p1_sLmn;
                  1# ->
                      let {
                        sat_sLmJ [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [p1_sLmn] \r [x_sLmG]
                                let {
                                  sat_sLmI [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [p1_sLmn x_sLmG] \u []
                                          let {
                                            sat_sLmH [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                CCCS :! [GHC.Show.$fShow(,)2 x_sLmG];
                                          } in  p1_sLmn sat_sLmH;
                                } in  : [GHC.Show.$fShow(,)4 sat_sLmI];
                      } in  sat_sLmJ;
                };
          GHC.Types.KindRepVar dt_sLmK ->
              case ># [ww_sLm6 10#] of {
                __DEFAULT ->
                    let {
                      sat_sLmX [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [dt_sLmK] \r [x_sLmM]
                              let {
                                sat_sLmW [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                [LclId] =
                                    [dt_sLmK x_sLmM] \s []
                                        case <# [dt_sLmK 0#] of {
                                          __DEFAULT ->
                                              case GHC.Show.$witos dt_sLmK x_sLmM of {
                                                (#,#) ww2_sLmP [Occ=Once] ww3_sLmQ [Occ=Once] ->
                                                    : [ww2_sLmP ww3_sLmQ];
                                              };
                                          1# ->
                                              let {
                                                sat_sLmV [Occ=Once] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [dt_sLmK x_sLmM] \u []
                                                        let {
                                                          sat_sLmR [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2 x_sLmM];
                                                        } in 
                                                          case GHC.Show.$witos dt_sLmK sat_sLmR of {
                                                            (#,#) ww2_sLmT [Occ=Once]
                                                                  ww3_sLmU [Occ=Once] ->
                                                                : [ww2_sLmT ww3_sLmU];
                                                          };
                                              } in  : [GHC.Show.$fShow(,)4 sat_sLmV];
                                        };
                              } in  GHC.Base.++ f11_rC1n sat_sLmW;
                    } in  sat_sLmX;
                1# ->
                    let {
                      sat_sLnc [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [dt_sLmK] \r [x_sLmY]
                              let {
                                sat_sLnb [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [dt_sLmK x_sLmY] \u []
                                        let {
                                          sat_sLna [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                          [LclId] =
                                              [dt_sLmK x_sLmY] \s []
                                                  case <# [dt_sLmK 0#] of {
                                                    __DEFAULT ->
                                                        let {
                                                          sat_sLn0 [Occ=Once] :: GHC.Base.String
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)2 x_sLmY];
                                                        } in 
                                                          case GHC.Show.$witos dt_sLmK sat_sLn0 of {
                                                            (#,#) ww2_sLn2 [Occ=Once]
                                                                  ww3_sLn3 [Occ=Once] ->
                                                                : [ww2_sLn2 ww3_sLn3];
                                                          };
                                                    1# ->
                                                        let {
                                                          sat_sLn9 [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [dt_sLmK x_sLmY] \u []
                                                                  let {
                                                                    sat_sLn4 [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)2
                                                                                 x_sLmY]; } in
                                                                  let {
                                                                    sat_sLn5 [Occ=Once]
                                                                      :: GHC.Base.String
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)2
                                                                                 sat_sLn4];
                                                                  } in 
                                                                    case
                                                                        GHC.Show.$witos
                                                                            dt_sLmK sat_sLn5
                                                                    of
                                                                    { (#,#) ww2_sLn7 [Occ=Once]
                                                                            ww3_sLn8 [Occ=Once] ->
                                                                          : [ww2_sLn7 ww3_sLn8];
                                                                    };
                                                        } in  : [GHC.Show.$fShow(,)4 sat_sLn9];
                                                  };
                                        } in  GHC.Base.++ f11_rC1n sat_sLna;
                              } in  : [GHC.Show.$fShow(,)4 sat_sLnb];
                    } in  sat_sLnc;
              };
          GHC.Types.KindRepApp p_sLnd [Occ=Once] q_sLne [Occ=Once] ->
              let {
                f12_sLnf [Occ=OnceL*!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [p_sLnd] \u [] GHC.Show.$w$cshowsPrec5 11# p_sLnd; } in
              let {
                g_sLng [Occ=OnceL*!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [q_sLne] \u [] GHC.Show.$w$cshowsPrec5 11# q_sLne;
              } in 
                case ># [ww_sLm6 10#] of {
                  __DEFAULT ->
                      let {
                        sat_sLnm [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [f12_sLnf g_sLng] \r [x_sLni]
                                let {
                                  sat_sLnl [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [f12_sLnf g_sLng x_sLni] \s []
                                          let {
                                            sat_sLnk [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                [g_sLng x_sLni] \u []
                                                    let {
                                                      sat_sLnj [Occ=Once] :: [GHC.Types.Char]
                                                      [LclId] =
                                                          [g_sLng x_sLni] \u [] g_sLng x_sLni;
                                                    } in 
                                                      GHC.CString.unpackAppendCString#
                                                          lvl42_rC1o sat_sLnj;
                                          } in  f12_sLnf sat_sLnk;
                                } in  GHC.Base.++ f9_rC1l sat_sLnl;
                      } in  sat_sLnm;
                  1# ->
                      let {
                        sat_sLnt [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [f12_sLnf g_sLng] \r [x_sLnn]
                                let {
                                  sat_sLns [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [f12_sLnf g_sLng x_sLnn] \u []
                                          let {
                                            sat_sLnr [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                            [LclId] =
                                                [f12_sLnf g_sLng x_sLnn] \s []
                                                    let {
                                                      sat_sLnq [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [g_sLng x_sLnn] \u []
                                                              let {
                                                                sat_sLnp [Occ=Once]
                                                                  :: [GHC.Types.Char]
                                                                [LclId] =
                                                                    [g_sLng x_sLnn] \u []
                                                                        let {
                                                                          sat_sLno [Occ=Once]
                                                                            :: GHC.Base.String
                                                                          [LclId] =
                                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                                       x_sLnn];
                                                                        } in  g_sLng sat_sLno;
                                                              } in 
                                                                GHC.CString.unpackAppendCString#
                                                                    lvl42_rC1o sat_sLnp;
                                                    } in  f12_sLnf sat_sLnq;
                                          } in  GHC.Base.++ f9_rC1l sat_sLnr;
                                } in  : [GHC.Show.$fShow(,)4 sat_sLns];
                      } in  sat_sLnt;
                };
          GHC.Types.KindRepFun p_sLnu [Occ=Once] q_sLnv [Occ=Once] ->
              let {
                f12_sLnw [Occ=OnceL*!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [p_sLnu] \u [] GHC.Show.$w$cshowsPrec5 11# p_sLnu; } in
              let {
                g_sLnx [Occ=OnceL*!, Dmd=<L,C(U)>]
                  :: GHC.Base.String -> GHC.Base.String
                [LclId] =
                    [q_sLnv] \u [] GHC.Show.$w$cshowsPrec5 11# q_sLnv;
              } in 
                case ># [ww_sLm6 10#] of {
                  __DEFAULT ->
                      let {
                        sat_sLnD [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [f12_sLnw g_sLnx] \r [x_sLnz]
                                let {
                                  sat_sLnC [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [f12_sLnw g_sLnx x_sLnz] \s []
                                          let {
                                            sat_sLnB [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                [g_sLnx x_sLnz] \u []
                                                    let {
                                                      sat_sLnA [Occ=Once] :: [GHC.Types.Char]
                                                      [LclId] =
                                                          [g_sLnx x_sLnz] \u [] g_sLnx x_sLnz;
                                                    } in 
                                                      GHC.CString.unpackAppendCString#
                                                          lvl42_rC1o sat_sLnA;
                                          } in  f12_sLnw sat_sLnB;
                                } in  GHC.Base.++ f7_rC1j sat_sLnC;
                      } in  sat_sLnD;
                  1# ->
                      let {
                        sat_sLnK [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [f12_sLnw g_sLnx] \r [x_sLnE]
                                let {
                                  sat_sLnJ [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [f12_sLnw g_sLnx x_sLnE] \u []
                                          let {
                                            sat_sLnI [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                            [LclId] =
                                                [f12_sLnw g_sLnx x_sLnE] \s []
                                                    let {
                                                      sat_sLnH [Occ=Once] :: GHC.Base.String
                                                      [LclId] =
                                                          [g_sLnx x_sLnE] \u []
                                                              let {
                                                                sat_sLnG [Occ=Once]
                                                                  :: [GHC.Types.Char]
                                                                [LclId] =
                                                                    [g_sLnx x_sLnE] \u []
                                                                        let {
                                                                          sat_sLnF [Occ=Once]
                                                                            :: GHC.Base.String
                                                                          [LclId] =
                                                                              CCCS :! [GHC.Show.$fShow(,)2
                                                                                       x_sLnE];
                                                                        } in  g_sLnx sat_sLnF;
                                                              } in 
                                                                GHC.CString.unpackAppendCString#
                                                                    lvl42_rC1o sat_sLnG;
                                                    } in  f12_sLnw sat_sLnH;
                                          } in  GHC.Base.++ f7_rC1j sat_sLnI;
                                } in  : [GHC.Show.$fShow(,)4 sat_sLnJ];
                      } in  sat_sLnK;
                };
          GHC.Types.KindRepTYPE rep_sLnL [Occ=OnceL*] ->
              case ># [ww_sLm6 10#] of {
                __DEFAULT ->
                    let {
                      sat_sLnP [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [rep_sLnL] \r [x_sLnN]
                              let {
                                sat_sLnO [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                [LclId] =
                                    [rep_sLnL x_sLnN] \s []
                                        GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                            GHC.Show.appPrec1 rep_sLnL x_sLnN;
                              } in  GHC.Base.++ f5_rC1h sat_sLnO;
                    } in  sat_sLnP;
                1# ->
                    let {
                      sat_sLnU [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [rep_sLnL] \r [x_sLnQ]
                              let {
                                sat_sLnT [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [rep_sLnL x_sLnQ] \u []
                                        let {
                                          sat_sLnS [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                          [LclId] =
                                              [rep_sLnL x_sLnQ] \s []
                                                  let {
                                                    sat_sLnR [Occ=Once] :: GHC.Base.String
                                                    [LclId] =
                                                        CCCS :! [GHC.Show.$fShow(,)2 x_sLnQ];
                                                  } in 
                                                    GHC.Show.$fShowRuntimeRep_$cshowsPrec
                                                        GHC.Show.appPrec1 rep_sLnL sat_sLnR;
                                        } in  GHC.Base.++ f5_rC1h sat_sLnS;
                              } in  : [GHC.Show.$fShow(,)4 sat_sLnT];
                    } in  sat_sLnU;
              };
          GHC.Types.KindRepTypeLitS p_sLnV [Occ=OnceL*!]
                                    q_sLnW [Occ=OnceL] ->
              let {
                cs_sLnX [Occ=OnceL*] :: [GHC.Types.Char]
                [LclId] =
                    [q_sLnW] \u [] GHC.CString.unpackCString# q_sLnW;
              } in 
                case ># [ww_sLm6 10#] of {
                  __DEFAULT ->
                      let {
                        sat_sLoa [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [p_sLnV cs_sLnX] \r [x_sLnZ]
                                let {
                                  sat_sLo9 [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                  [LclId] =
                                      [p_sLnV cs_sLnX x_sLnZ] \s []
                                          case p_sLnV of {
                                            GHC.Types.TypeLitSymbol ->
                                                let {
                                                  sat_sLo4 [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [cs_sLnX x_sLnZ] \s []
                                                          let {
                                                            sat_sLo2 [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [cs_sLnX x_sLnZ] \u []
                                                                    let {
                                                                      sat_sLo1 [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   x_sLnZ];
                                                                    } in 
                                                                      GHC.Show.showLitString
                                                                          cs_sLnX sat_sLo1; } in
                                                          let {
                                                            sat_sLo3 [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)3
                                                                         sat_sLo2];
                                                          } in 
                                                            GHC.CString.unpackAppendCString#
                                                                lvl42_rC1o sat_sLo3;
                                                } in 
                                                  GHC.Base.++ GHC.Show.$fShowTypeLitSort4 sat_sLo4;
                                            GHC.Types.TypeLitNat ->
                                                let {
                                                  sat_sLo8 [Occ=Once, Dmd=<L,1*U>]
                                                    :: [GHC.Types.Char]
                                                  [LclId] =
                                                      [cs_sLnX x_sLnZ] \s []
                                                          let {
                                                            sat_sLo6 [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [cs_sLnX x_sLnZ] \u []
                                                                    let {
                                                                      sat_sLo5 [Occ=Once]
                                                                        :: GHC.Base.String
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   x_sLnZ];
                                                                    } in 
                                                                      GHC.Show.showLitString
                                                                          cs_sLnX sat_sLo5; } in
                                                          let {
                                                            sat_sLo7 [Occ=Once] :: [GHC.Types.Char]
                                                            [LclId] =
                                                                CCCS :! [GHC.Show.$fShow(,)3
                                                                         sat_sLo6];
                                                          } in 
                                                            GHC.CString.unpackAppendCString#
                                                                lvl42_rC1o sat_sLo7;
                                                } in 
                                                  GHC.Base.++ GHC.Show.$fShowTypeLitSort2 sat_sLo8;
                                          };
                                } in  GHC.Base.++ f3_rC1f sat_sLo9;
                      } in  sat_sLoa;
                  1# ->
                      let {
                        sat_sLop [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                        [LclId] =
                            [p_sLnV cs_sLnX] \r [x_sLob]
                                let {
                                  sat_sLoo [Occ=Once] :: [GHC.Types.Char]
                                  [LclId] =
                                      [p_sLnV cs_sLnX x_sLob] \u []
                                          let {
                                            sat_sLon [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                            [LclId] =
                                                [p_sLnV cs_sLnX x_sLob] \s []
                                                    case p_sLnV of {
                                                      GHC.Types.TypeLitSymbol ->
                                                          let {
                                                            sat_sLoh [Occ=Once, Dmd=<L,1*U>]
                                                              :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [cs_sLnX x_sLob] \s []
                                                                    let {
                                                                      sat_sLof [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          [cs_sLnX x_sLob] \u []
                                                                              let {
                                                                                sat_sLod [Occ=Once]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    CCCS :! [GHC.Show.$fShow(,)2
                                                                                             x_sLob]; } in
                                                                              let {
                                                                                sat_sLoe [Occ=Once]
                                                                                  :: GHC.Base.String
                                                                                [LclId] =
                                                                                    CCCS :! [GHC.Show.$fShow(,)3
                                                                                             sat_sLod];
                                                                              } in 
                                                                                GHC.Show.showLitString
                                                                                    cs_sLnX
                                                                                    sat_sLoe; } in
                                                                    let {
                                                                      sat_sLog [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   sat_sLof];
                                                                    } in 
                                                                      GHC.CString.unpackAppendCString#
                                                                          lvl42_rC1o sat_sLog;
                                                          } in 
                                                            GHC.Base.++
                                                                GHC.Show.$fShowTypeLitSort4
                                                                sat_sLoh;
                                                      GHC.Types.TypeLitNat ->
                                                          let {
                                                            sat_sLom [Occ=Once, Dmd=<L,1*U>]
                                                              :: [GHC.Types.Char]
                                                            [LclId] =
                                                                [cs_sLnX x_sLob] \s []
                                                                    let {
                                                                      sat_sLok [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          [cs_sLnX x_sLob] \u []
                                                                              let {
                                                                                sat_sLoi [Occ=Once]
                                                                                  :: [GHC.Types.Char]
                                                                                [LclId] =
                                                                                    CCCS :! [GHC.Show.$fShow(,)2
                                                                                             x_sLob]; } in
                                                                              let {
                                                                                sat_sLoj [Occ=Once]
                                                                                  :: GHC.Base.String
                                                                                [LclId] =
                                                                                    CCCS :! [GHC.Show.$fShow(,)3
                                                                                             sat_sLoi];
                                                                              } in 
                                                                                GHC.Show.showLitString
                                                                                    cs_sLnX
                                                                                    sat_sLoj; } in
                                                                    let {
                                                                      sat_sLol [Occ=Once]
                                                                        :: [GHC.Types.Char]
                                                                      [LclId] =
                                                                          CCCS :! [GHC.Show.$fShow(,)3
                                                                                   sat_sLok];
                                                                    } in 
                                                                      GHC.CString.unpackAppendCString#
                                                                          lvl42_rC1o sat_sLol;
                                                          } in 
                                                            GHC.Base.++
                                                                GHC.Show.$fShowTypeLitSort2
                                                                sat_sLom;
                                                    };
                                          } in  GHC.Base.++ f3_rC1f sat_sLon;
                                } in  : [GHC.Show.$fShow(,)4 sat_sLoo];
                      } in  sat_sLop;
                };
          GHC.Types.KindRepTypeLitD p_sLoq [Occ=OnceL*!]
                                    q_sLor [Occ=OnceL*] ->
              case ># [ww_sLm6 10#] of {
                __DEFAULT ->
                    let {
                      sat_sLoE [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [p_sLoq q_sLor] \r [x_sLot]
                              let {
                                sat_sLoD [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                [LclId] =
                                    [p_sLoq q_sLor x_sLot] \s []
                                        case p_sLoq of {
                                          GHC.Types.TypeLitSymbol ->
                                              let {
                                                sat_sLoy [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [q_sLor x_sLot] \s []
                                                        let {
                                                          sat_sLow [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [q_sLor x_sLot] \u []
                                                                  let {
                                                                    sat_sLov [Occ=Once]
                                                                      :: GHC.Base.String
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                 x_sLot];
                                                                  } in 
                                                                    GHC.Show.showLitString
                                                                        q_sLor sat_sLov; } in
                                                        let {
                                                          sat_sLox [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_sLow];
                                                        } in 
                                                          GHC.CString.unpackAppendCString#
                                                              lvl42_rC1o sat_sLox;
                                              } in 
                                                GHC.Base.++ GHC.Show.$fShowTypeLitSort4 sat_sLoy;
                                          GHC.Types.TypeLitNat ->
                                              let {
                                                sat_sLoC [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                                [LclId] =
                                                    [q_sLor x_sLot] \s []
                                                        let {
                                                          sat_sLoA [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [q_sLor x_sLot] \u []
                                                                  let {
                                                                    sat_sLoz [Occ=Once]
                                                                      :: GHC.Base.String
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                 x_sLot];
                                                                  } in 
                                                                    GHC.Show.showLitString
                                                                        q_sLor sat_sLoz; } in
                                                        let {
                                                          sat_sLoB [Occ=Once] :: [GHC.Types.Char]
                                                          [LclId] =
                                                              CCCS :! [GHC.Show.$fShow(,)3
                                                                       sat_sLoA];
                                                        } in 
                                                          GHC.CString.unpackAppendCString#
                                                              lvl42_rC1o sat_sLoB;
                                              } in 
                                                GHC.Base.++ GHC.Show.$fShowTypeLitSort2 sat_sLoC;
                                        };
                              } in  GHC.Base.++ f1_rC1d sat_sLoD;
                    } in  sat_sLoE;
                1# ->
                    let {
                      sat_sLoT [Occ=OnceT[0]] :: GHC.Base.String -> [GHC.Types.Char]
                      [LclId] =
                          [p_sLoq q_sLor] \r [x_sLoF]
                              let {
                                sat_sLoS [Occ=Once] :: [GHC.Types.Char]
                                [LclId] =
                                    [p_sLoq q_sLor x_sLoF] \u []
                                        let {
                                          sat_sLoR [Occ=Once, Dmd=<L,1*U>] :: [GHC.Types.Char]
                                          [LclId] =
                                              [p_sLoq q_sLor x_sLoF] \s []
                                                  case p_sLoq of {
                                                    GHC.Types.TypeLitSymbol ->
                                                        let {
                                                          sat_sLoL [Occ=Once, Dmd=<L,1*U>]
                                                            :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [q_sLor x_sLoF] \s []
                                                                  let {
                                                                    sat_sLoJ [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        [q_sLor x_sLoF] \u []
                                                                            let {
                                                                              sat_sLoH [Occ=Once]
                                                                                :: [GHC.Types.Char]
                                                                              [LclId] =
                                                                                  CCCS :! [GHC.Show.$fShow(,)2
                                                                                           x_sLoF]; } in
                                                                            let {
                                                                              sat_sLoI [Occ=Once]
                                                                                :: GHC.Base.String
                                                                              [LclId] =
                                                                                  CCCS :! [GHC.Show.$fShow(,)3
                                                                                           sat_sLoH];
                                                                            } in 
                                                                              GHC.Show.showLitString
                                                                                  q_sLor
                                                                                  sat_sLoI; } in
                                                                  let {
                                                                    sat_sLoK [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                 sat_sLoJ];
                                                                  } in 
                                                                    GHC.CString.unpackAppendCString#
                                                                        lvl42_rC1o sat_sLoK;
                                                        } in 
                                                          GHC.Base.++
                                                              GHC.Show.$fShowTypeLitSort4 sat_sLoL;
                                                    GHC.Types.TypeLitNat ->
                                                        let {
                                                          sat_sLoQ [Occ=Once, Dmd=<L,1*U>]
                                                            :: [GHC.Types.Char]
                                                          [LclId] =
                                                              [q_sLor x_sLoF] \s []
                                                                  let {
                                                                    sat_sLoO [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        [q_sLor x_sLoF] \u []
                                                                            let {
                                                                              sat_sLoM [Occ=Once]
                                                                                :: [GHC.Types.Char]
                                                                              [LclId] =
                                                                                  CCCS :! [GHC.Show.$fShow(,)2
                                                                                           x_sLoF]; } in
                                                                            let {
                                                                              sat_sLoN [Occ=Once]
                                                                                :: GHC.Base.String
                                                                              [LclId] =
                                                                                  CCCS :! [GHC.Show.$fShow(,)3
                                                                                           sat_sLoM];
                                                                            } in 
                                                                              GHC.Show.showLitString
                                                                                  q_sLor
                                                                                  sat_sLoN; } in
                                                                  let {
                                                                    sat_sLoP [Occ=Once]
                                                                      :: [GHC.Types.Char]
                                                                    [LclId] =
                                                                        CCCS :! [GHC.Show.$fShow(,)3
                                                                                 sat_sLoO];
                                                                  } in 
                                                                    GHC.CString.unpackAppendCString#
                                                                        lvl42_rC1o sat_sLoP;
                                                        } in 
                                                          GHC.Base.++
                                                              GHC.Show.$fShowTypeLitSort2 sat_sLoQ;
                                                  };
                                        } in  GHC.Base.++ f1_rC1d sat_sLoR;
                              } in  : [GHC.Show.$fShow(,)4 sat_sLoS];
                    } in  sat_sLoT;
              };
        };

GHC.Show.$fShowKindRep_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.KindRep -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S(S),1*U(U)><S,1*U>, Unf=OtherCon []] =
    [] \r [w_sLoU w1_sLoV]
        case w_sLoU of {
          GHC.Types.I# ww1_sLoX [Occ=Once] ->
              GHC.Show.$w$cshowsPrec5 ww1_sLoX w1_sLoV;
        };

GHC.Show.$fShowKindRep1 :: GHC.Types.KindRep -> GHC.Show.ShowS
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_sLoY] GHC.Show.$w$cshowsPrec5 0# w_sLoY;

GHC.Show.$fShowKindRep_$cshowList
  :: [GHC.Types.KindRep] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_sLoZ s_sLp0]
        GHC.Show.showList__ GHC.Show.$fShowKindRep1 ls_sLoZ s_sLp0;

GHC.Show.$fShowKindRep_$cshow
  :: GHC.Types.KindRep -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sLp1] GHC.Show.$w$cshowsPrec5 0# x_sLp1 GHC.Types.[];

GHC.Show.$fShowKindRep [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Types.KindRep
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowKindRep_$cshowsPrec
                                    GHC.Show.$fShowKindRep_$cshow
                                    GHC.Show.$fShowKindRep_$cshowList];

lvl44_rC1q :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Char.intToDigit: not a digit "#;

GHC.Show.intToDigit1 :: GHC.Prim.Int# -> GHC.Types.Char
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [i_sLp2]
        let {
          sat_sLp6 [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [i_sLp2] \u []
                  case GHC.Show.$witos i_sLp2 GHC.Types.[] of {
                    (#,#) ww1_sLp4 [Occ=Once] ww2_sLp5 [Occ=Once] ->
                        : [ww1_sLp4 ww2_sLp5];
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl44_rC1q sat_sLp6
          of
          sat_sLp7
          { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sLp7;
          };

GHC.Show.$wintToDigit [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_sLp8]
        let-no-escape {
          $j_sLp9 [Occ=Once*T[0], Dmd=<L,1*U>] :: GHC.Prim.Char#
          [LclId[JoinId(0)], Unf=OtherCon []] =
              [ww_sLp8] \r []
                  case >=# [ww_sLp8 10#] of {
                    __DEFAULT -> GHC.Show.intToDigit1 ww_sLp8;
                    1# ->
                        case <=# [ww_sLp8 15#] of {
                          __DEFAULT -> GHC.Show.intToDigit1 ww_sLp8;
                          1# ->
                              case +# [97# ww_sLp8] of sat_sLpe {
                                __DEFAULT ->
                                    case -# [sat_sLpe 10#] of sat_sLpf {
                                      __DEFAULT -> chr# [sat_sLpf];
                                    };
                              };
                        };
                  };
        } in 
          case >=# [ww_sLp8 0#] of {
            __DEFAULT -> $j_sLp9;
            1# ->
                case <=# [ww_sLp8 9#] of {
                  __DEFAULT -> $j_sLp9;
                  1# ->
                      case +# [48# ww_sLp8] of sat_sLpi {
                        __DEFAULT -> chr# [sat_sLpi];
                      };
                };
          };

GHC.Show.intToDigit [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Char
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [w_sLpj]
        case w_sLpj of {
          GHC.Types.I# ww1_sLpl [Occ=Once] ->
              case GHC.Show.$wintToDigit ww1_sLpl of ww2_sLpm {
                __DEFAULT -> GHC.Types.C# [ww2_sLpm];
              };
        };

GHC.Show.$wjblock' [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [ww_sLpn ww1_sLpo w_sLpp]
        case ww_sLpn of wild_sLpq {
          __DEFAULT ->
              case quotRemInt# [ww1_sLpo 10#] of {
                (#,#) ipv_sLps [Occ=Once] ipv1_sLpt [Occ=Once] ->
                    case +# [48# ipv1_sLpt] of sat_sLpv {
                      __DEFAULT ->
                          case chr# [sat_sLpv] of sat_sLpw {
                            __DEFAULT ->
                                let {
                                  sat_sLpx [Occ=Once] :: GHC.Types.Char
                                  [LclId] =
                                      CCCS GHC.Types.C#! [sat_sLpw]; } in
                                let {
                                  sat_sLpy [Occ=Once] :: GHC.Base.String
                                  [LclId] =
                                      CCCS :! [sat_sLpx w_sLpp];
                                } in 
                                  case -# [wild_sLpq 1#] of sat_sLpu {
                                    __DEFAULT -> GHC.Show.$wjblock' sat_sLpu ipv_sLps sat_sLpy;
                                  };
                          };
                    };
              };
          1# ->
              case +# [48# ww1_sLpo] of sat_sLpz {
                __DEFAULT ->
                    case chr# [sat_sLpz] of sat_sLpA {
                      __DEFAULT ->
                          let {
                            sat_sLpB [Occ=Once] :: GHC.Types.Char
                            [LclId] =
                                CCCS GHC.Types.C#! [sat_sLpA];
                          } in  (#,#) [sat_sLpB w_sLpp];
                    };
              };
        };

sat_sLpD :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [465661287#];

sat_sLpE :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sLpD GHC.Types.[]];

sat_sLpC :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [660865024#];

sat_sLpF :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sLpC sat_sLpE];

GHC.Show.$fShowInteger3 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sLpF;

GHC.Show.$fShowInteger_jprintb [Occ=LoopBreaker]
  :: [GHC.Integer.Type.Integer] -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [ds_sLpG cs_sLpH]
        case ds_sLpG of {
          [] -> cs_sLpH;
          : n_sLpJ [Occ=Once] ns_sLpK [Occ=Once] ->
              case
                  GHC.Integer.Type.quotRemInteger n_sLpJ GHC.Show.$fShowInteger3
              of
              { (#,#) ipv_sLpM [Occ=Once] ipv1_sLpN [Occ=Once] ->
                    case GHC.Integer.Type.integerToInt ipv_sLpM of wild1_sLpO {
                      __DEFAULT ->
                          let {
                            sat_sLpU [Occ=Once] :: GHC.Base.String
                            [LclId] =
                                [cs_sLpH ns_sLpK ipv1_sLpN] \u []
                                    case GHC.Integer.Type.integerToInt ipv1_sLpN of wild2_sLpP {
                                      __DEFAULT ->
                                          let {
                                            sat_sLpQ [Occ=Once] :: GHC.Base.String
                                            [LclId] =
                                                [cs_sLpH ns_sLpK] \u []
                                                    GHC.Show.$fShowInteger_jprintb ns_sLpK cs_sLpH;
                                          } in 
                                            case GHC.Show.$wjblock' 18# wild2_sLpP sat_sLpQ of {
                                              (#,#) ww1_sLpS [Occ=Once] ww2_sLpT [Occ=Once] ->
                                                  : [ww1_sLpS ww2_sLpT];
                                            };
                                    };
                          } in 
                            case GHC.Show.$wjblock' 18# wild1_sLpO sat_sLpU of {
                              (#,#) ww1_sLpW [Occ=Once] ww2_sLpX [Occ=Once] ->
                                  : [ww1_sLpW ww2_sLpX];
                            };
                    };
              };
        };

jsplitb_rC1r
  :: GHC.Integer.Type.Integer
     -> [GHC.Integer.Type.Integer] -> [GHC.Integer.Type.Integer]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U>,
 Unf=OtherCon []] =
    sat-only [] \r [ds_sLpY ds1_sLpZ]
        case ds1_sLpZ of {
          [] -> [] [];
          : n_sLq1 [Occ=Once] ns_sLq2 [Occ=Once] ->
              case GHC.Integer.Type.quotRemInteger n_sLq1 ds_sLpY of {
                (#,#) ipv_sLq4 [Occ=Once] ipv1_sLq5 [Occ=Once] ->
                    let {
                      sat_sLq6 [Occ=Once] :: [GHC.Integer.Type.Integer]
                      [LclId] =
                          [ds_sLpY ns_sLq2] \u [] jsplitb_rC1r ds_sLpY ns_sLq2; } in
                    let {
                      sat_sLq7 [Occ=Once] :: [GHC.Integer.Type.Integer]
                      [LclId] =
                          CCCS :! [ipv1_sLq5 sat_sLq6];
                    } in  : [ipv_sLq4 sat_sLq7];
              };
        };

GHC.Show.$fShowInteger1 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True GHC.Types.[];

GHC.Show.$wjsplitf [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Integer.Type.Integer, [GHC.Integer.Type.Integer] #)
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [w_sLq8 w1_sLq9]
        case GHC.Integer.Type.gtInteger# w_sLq8 w1_sLq9 of {
          __DEFAULT ->
              case GHC.Integer.Type.timesInteger w_sLq8 w_sLq8 of sat_sLqb {
                __DEFAULT ->
                    case GHC.Show.$wjsplitf sat_sLqb w1_sLq9 of {
                      (#,#) ww1_sLqd [Occ=Once] ww2_sLqe [Occ=Once*] ->
                          case GHC.Integer.Type.quotRemInteger ww1_sLqd w_sLq8 of {
                            (#,#) ipv_sLqg ipv1_sLqh [Occ=Once*] ->
                                case
                                    GHC.Integer.Type.gtInteger# ipv_sLqg GHC.Show.$fShowInteger1
                                of
                                { __DEFAULT ->
                                      let {
                                        sat_sLqj [Occ=Once] :: [GHC.Integer.Type.Integer]
                                        [LclId] =
                                            [w_sLq8 ww2_sLqe] \u [] jsplitb_rC1r w_sLq8 ww2_sLqe;
                                      } in  (#,#) [ipv1_sLqh sat_sLqj];
                                  1# ->
                                      let {
                                        sat_sLqk [Occ=Once] :: [GHC.Integer.Type.Integer]
                                        [LclId] =
                                            [w_sLq8 ww2_sLqe] \u []
                                                jsplitb_rC1r w_sLq8 ww2_sLqe; } in
                                      let {
                                        sat_sLql [Occ=Once] :: [GHC.Integer.Type.Integer]
                                        [LclId] =
                                            CCCS :! [ipv1_sLqh sat_sLqk];
                                      } in  (#,#) [ipv_sLqg sat_sLql];
                                };
                          };
                    };
              };
          1# -> (#,#) [w1_sLq9 GHC.Types.[]];
        };

sat_sLqp :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [100974195#];

sat_sLqq :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sLqp GHC.Types.[]];

sat_sLqo :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1864637526#];

sat_sLqr :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sLqo sat_sLqq];

sat_sLqn :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [1721187872#];

sat_sLqs :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sLqn sat_sLqr];

sat_sLqm :: GHC.Types.Int
[LclId] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

sat_sLqt :: [GHC.Types.Int]
[LclId] =
    CCS_DONT_CARE :! [sat_sLqm sat_sLqs];

GHC.Show.$fShowInteger2 :: GHC.Integer.Type.Integer
[GblId, Unf=OtherCon []] =
    [] \u [] GHC.Integer.Type.mkInteger GHC.Types.True sat_sLqt;

GHC.Show.$wintegerToString' [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [w_sLqu w1_sLqv]
        case
            GHC.Integer.Type.ltInteger# w_sLqu GHC.Show.$fShowInteger3
        of
        { __DEFAULT ->
              case GHC.Show.$wjsplitf GHC.Show.$fShowInteger2 w_sLqu of {
                (#,#) ww1_sLqy [Occ=Once] ww2_sLqz [Occ=Once*] ->
                    case
                        GHC.Integer.Type.quotRemInteger ww1_sLqy GHC.Show.$fShowInteger3
                    of
                    { (#,#) ipv_sLqB [Occ=Once] ipv1_sLqC [Occ=Once*] ->
                          case GHC.Integer.Type.integerToInt ipv_sLqB of wild1_sLqD {
                            __DEFAULT ->
                                case ># [wild1_sLqD 0#] of {
                                  __DEFAULT ->
                                      case GHC.Integer.Type.integerToInt ipv1_sLqC of wild2_sLqF {
                                        __DEFAULT ->
                                            let {
                                              sat_sLqG [Occ=Once] :: GHC.Base.String
                                              [LclId] =
                                                  [w1_sLqv ww2_sLqz] \u []
                                                      GHC.Show.$fShowInteger_jprintb
                                                          ww2_sLqz w1_sLqv;
                                            } in  GHC.Show.$witos' wild2_sLqF sat_sLqG;
                                      };
                                  1# ->
                                      let {
                                        sat_sLqM [Occ=Once] :: GHC.Base.String
                                        [LclId] =
                                            [w1_sLqv ww2_sLqz ipv1_sLqC] \u []
                                                case
                                                    GHC.Integer.Type.integerToInt ipv1_sLqC
                                                of
                                                wild2_sLqH
                                                { __DEFAULT ->
                                                      let {
                                                        sat_sLqI [Occ=Once] :: GHC.Base.String
                                                        [LclId] =
                                                            [w1_sLqv ww2_sLqz] \u []
                                                                GHC.Show.$fShowInteger_jprintb
                                                                    ww2_sLqz w1_sLqv;
                                                      } in 
                                                        case
                                                            GHC.Show.$wjblock'
                                                                18# wild2_sLqH sat_sLqI
                                                        of
                                                        { (#,#) ww4_sLqK [Occ=Once]
                                                                ww5_sLqL [Occ=Once] ->
                                                              : [ww4_sLqK ww5_sLqL];
                                                        };
                                                };
                                      } in  GHC.Show.$witos' wild1_sLqD sat_sLqM;
                                };
                          };
                    };
              };
          1# ->
              case GHC.Integer.Type.integerToInt w_sLqu of wild1_sLqN {
                __DEFAULT -> GHC.Show.$witos' wild1_sLqN w1_sLqv;
              };
        };

GHC.Show.$wintegerToString [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Integer
     -> GHC.Base.String -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=2, Str=<S,U><L,U>, Unf=OtherCon []] =
    [] \r [w_sLqO w1_sLqP]
        case
            GHC.Integer.Type.ltInteger# w_sLqO GHC.Show.$fShowInteger1
        of
        { __DEFAULT -> GHC.Show.$wintegerToString' w_sLqO w1_sLqP;
          1# ->
              let {
                sat_sLqV [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [w_sLqO w1_sLqP] \u []
                        case GHC.Integer.Type.negateInteger w_sLqO of sat_sLqR {
                          __DEFAULT ->
                              case GHC.Show.$wintegerToString' sat_sLqR w1_sLqP of {
                                (#,#) ww1_sLqT [Occ=Once] ww2_sLqU [Occ=Once] ->
                                    : [ww1_sLqT ww2_sLqU];
                              };
                        };
              } in  (#,#) [GHC.Show.showLitChar1 sat_sLqV];
        };

GHC.Show.$w$cshowsPrec4 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int#
     -> GHC.Integer.Type.Integer
     -> GHC.Base.String
     -> (# GHC.Types.Char, [GHC.Types.Char] #)
[GblId, Arity=3, Str=<S,U><S,U><L,U>, Unf=OtherCon []] =
    [] \r [ww_sLqW w_sLqX w1_sLqY]
        case ># [ww_sLqW 6#] of {
          __DEFAULT -> GHC.Show.$wintegerToString w_sLqX w1_sLqY;
          1# ->
              case
                  GHC.Integer.Type.ltInteger# w_sLqX GHC.Show.$fShowInteger1
              of
              { __DEFAULT -> GHC.Show.$wintegerToString w_sLqX w1_sLqY;
                1# ->
                    let {
                      sat_sLr5 [Occ=Once] :: [GHC.Types.Char]
                      [LclId] =
                          [w_sLqX w1_sLqY] \u []
                              let {
                                sat_sLr1 [Occ=Once] :: GHC.Base.String
                                [LclId] =
                                    CCCS :! [GHC.Show.$fShow(,)2 w1_sLqY];
                              } in 
                                case GHC.Show.$wintegerToString w_sLqX sat_sLr1 of {
                                  (#,#) ww2_sLr3 [Occ=Once] ww3_sLr4 [Occ=Once] ->
                                      : [ww2_sLr3 ww3_sLr4];
                                };
                    } in  (#,#) [GHC.Show.$fShow(,)4 sat_sLr5];
              };
        };

GHC.Show.$fShowInteger_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Integer.Type.Integer -> GHC.Show.ShowS
[GblId, Arity=3, Str=<S(S),1*U(U)><S,U><L,U>m2, Unf=OtherCon []] =
    [] \r [w_sLr6 w1_sLr7 w2_sLr8]
        case w_sLr6 of {
          GHC.Types.I# ww1_sLra [Occ=Once] ->
              case GHC.Show.$w$cshowsPrec4 ww1_sLra w1_sLr7 w2_sLr8 of {
                (#,#) ww3_sLrc [Occ=Once] ww4_sLrd [Occ=Once] ->
                    : [ww3_sLrc ww4_sLrd];
              };
        };

GHC.Show.$fShowInteger_$cshow
  :: GHC.Integer.Type.Integer -> GHC.Base.String
[GblId, Arity=1, Str=<S,U>m2, Unf=OtherCon []] =
    [] \r [x_sLre]
        case GHC.Show.$w$cshowsPrec4 0# x_sLre GHC.Types.[] of {
          (#,#) ww1_sLrg [Occ=Once] ww2_sLrh [Occ=Once] ->
              : [ww1_sLrg ww2_sLrh];
        };

GHC.Show.$fShowInteger_$cshowList
  :: [GHC.Integer.Type.Integer] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_sLri s_sLrj]
        case ds_sLri of {
          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s_sLrj;
          : x_sLrl [Occ=Once] xs_sLrm [Occ=Once] ->
              let {
                sat_sLrC [Occ=Once] :: [GHC.Types.Char]
                [LclId] =
                    [s_sLrj x_sLrl xs_sLrm] \u []
                        let {
                          sat_sLry [Occ=Once] :: GHC.Base.String
                          [LclId] =
                              [s_sLrj xs_sLrm] \u []
                                  let {
                                    lvl45_sLrn [Occ=OnceL] :: [GHC.Types.Char]
                                    [LclId, Unf=OtherCon []] =
                                        CCCS :! [GHC.Show.showList__2 s_sLrj]; } in
                                  let {
                                    showl_sLro [Occ=LoopBreaker]
                                      :: [GHC.Integer.Type.Integer] -> GHC.Base.String
                                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                        sat-only [lvl45_sLrn showl_sLro] \r [ds1_sLrp]
                                            case ds1_sLrp of {
                                              [] -> lvl45_sLrn;
                                              : y_sLrr [Occ=Once] ys_sLrs [Occ=Once] ->
                                                  let {
                                                    sat_sLrx [Occ=Once] :: [GHC.Types.Char]
                                                    [LclId] =
                                                        [showl_sLro y_sLrr ys_sLrs] \u []
                                                            let {
                                                              sat_sLrt [Occ=Once] :: GHC.Base.String
                                                              [LclId] =
                                                                  [showl_sLro ys_sLrs] \u []
                                                                      showl_sLro ys_sLrs;
                                                            } in 
                                                              case
                                                                  GHC.Show.$w$cshowsPrec4
                                                                      0# y_sLrr sat_sLrt
                                                              of
                                                              { (#,#) ww1_sLrv [Occ=Once]
                                                                      ww2_sLrw [Occ=Once] ->
                                                                    : [ww1_sLrv ww2_sLrw];
                                                              };
                                                  } in  : [GHC.Show.showList__1 sat_sLrx];
                                            };
                                  } in  showl_sLro xs_sLrm;
                        } in 
                          case GHC.Show.$w$cshowsPrec4 0# x_sLrl sat_sLry of {
                            (#,#) ww1_sLrA [Occ=Once] ww2_sLrB [Occ=Once] ->
                                : [ww1_sLrA ww2_sLrB];
                          };
              } in  : [GHC.Show.showList__3 sat_sLrC];
        };

GHC.Show.$fShowInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.Integer.Type.Integer
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.Show.$fShowInteger_$cshowsPrec
                                    GHC.Show.$fShowInteger_$cshow
                                    GHC.Show.$fShowInteger_$cshowList];

GHC.Show.C:Show
  :: forall a.
     (GHC.Types.Int -> a -> GHC.Show.ShowS)
     -> (a -> GHC.Base.String)
     -> ([a] -> GHC.Show.ShowS)
     -> GHC.Show.Show a
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Show.C:Show [eta_B3 eta_B2 eta_B1];

