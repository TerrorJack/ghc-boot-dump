
==================== Raw Cmm ====================
2018-03-16 15:54:59.790002244 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:54:59.791771576 UTC

[section ""data" . GHC.Num.+_closure" {
     GHC.Num.+_closure:
         const GHC.Num.+_info;
 },
 GHC.Num.+_entry() //  [R2]
         { []
         }
     {offset
       cmcp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmcq; else goto cmcr;
       cmcq: // global
           R2 = R2;
           R1 = GHC.Num.+_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmcr: // global
           I64[Sp - 8] = block_cmcm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umcv; else goto cmcn;
       umcv: // global
           call _cmcm(R1) args: 0, res: 0, upd: 0;
       cmcn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.+_info" {
     GHC.Num.+_info:
         const GHC.Num.+_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmcm() //  [R1]
         { []
         }
     {offset
       cmcm: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmcm_info" {
     block_cmcm_info:
         const _cmcm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.797645756 UTC

[section ""data" . GHC.Num.-_closure" {
     GHC.Num.-_closure:
         const GHC.Num.-_info;
 },
 GHC.Num.-_entry() //  [R2]
         { []
         }
     {offset
       cmcM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmcN; else goto cmcO;
       cmcN: // global
           R2 = R2;
           R1 = GHC.Num.-_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmcO: // global
           I64[Sp - 8] = block_cmcJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umcS; else goto cmcK;
       umcS: // global
           call _cmcJ(R1) args: 0, res: 0, upd: 0;
       cmcK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.-_info" {
     GHC.Num.-_info:
         const GHC.Num.-_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmcJ() //  [R1]
         { []
         }
     {offset
       cmcJ: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmcJ_info" {
     block_cmcJ_info:
         const _cmcJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.802794313 UTC

[section ""data" . GHC.Num.*_closure" {
     GHC.Num.*_closure:
         const GHC.Num.*_info;
 },
 GHC.Num.*_entry() //  [R2]
         { []
         }
     {offset
       cmd9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmda; else goto cmdb;
       cmda: // global
           R2 = R2;
           R1 = GHC.Num.*_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmdb: // global
           I64[Sp - 8] = block_cmd6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umdf; else goto cmd7;
       umdf: // global
           call _cmd6(R1) args: 0, res: 0, upd: 0;
       cmd7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.*_info" {
     GHC.Num.*_info:
         const GHC.Num.*_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmd6() //  [R1]
         { []
         }
     {offset
       cmd6: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmd6_info" {
     block_cmd6_info:
         const _cmd6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.808091618 UTC

[section ""data" . GHC.Num.negate_closure" {
     GHC.Num.negate_closure:
         const GHC.Num.negate_info;
 },
 GHC.Num.negate_entry() //  [R2]
         { []
         }
     {offset
       cmdw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmdx; else goto cmdy;
       cmdx: // global
           R2 = R2;
           R1 = GHC.Num.negate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmdy: // global
           I64[Sp - 8] = block_cmdt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umdC; else goto cmdu;
       umdC: // global
           call _cmdt(R1) args: 0, res: 0, upd: 0;
       cmdu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.negate_info" {
     GHC.Num.negate_info:
         const GHC.Num.negate_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmdt() //  [R1]
         { []
         }
     {offset
       cmdt: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmdt_info" {
     block_cmdt_info:
         const _cmdt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.814168458 UTC

[section ""data" . GHC.Num.abs_closure" {
     GHC.Num.abs_closure:
         const GHC.Num.abs_info;
 },
 GHC.Num.abs_entry() //  [R2]
         { []
         }
     {offset
       cmdT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmdU; else goto cmdV;
       cmdU: // global
           R2 = R2;
           R1 = GHC.Num.abs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmdV: // global
           I64[Sp - 8] = block_cmdQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umdZ; else goto cmdR;
       umdZ: // global
           call _cmdQ(R1) args: 0, res: 0, upd: 0;
       cmdR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.abs_info" {
     GHC.Num.abs_info:
         const GHC.Num.abs_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmdQ() //  [R1]
         { []
         }
     {offset
       cmdQ: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmdQ_info" {
     block_cmdQ_info:
         const _cmdQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.819934886 UTC

[section ""data" . GHC.Num.signum_closure" {
     GHC.Num.signum_closure:
         const GHC.Num.signum_info;
 },
 GHC.Num.signum_entry() //  [R2]
         { []
         }
     {offset
       cmeg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmeh; else goto cmei;
       cmeh: // global
           R2 = R2;
           R1 = GHC.Num.signum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmei: // global
           I64[Sp - 8] = block_cmed_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umem; else goto cmee;
       umem: // global
           call _cmed(R1) args: 0, res: 0, upd: 0;
       cmee: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.signum_info" {
     GHC.Num.signum_info:
         const GHC.Num.signum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmed() //  [R1]
         { []
         }
     {offset
       cmed: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmed_info" {
     block_cmed_info:
         const _cmed;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.825207741 UTC

[section ""data" . GHC.Num.fromInteger_closure" {
     GHC.Num.fromInteger_closure:
         const GHC.Num.fromInteger_info;
 },
 GHC.Num.fromInteger_entry() //  [R2]
         { []
         }
     {offset
       cmeD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmeE; else goto cmeF;
       cmeE: // global
           R2 = R2;
           R1 = GHC.Num.fromInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmeF: // global
           I64[Sp - 8] = block_cmeA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umeJ; else goto cmeB;
       umeJ: // global
           call _cmeA(R1) args: 0, res: 0, upd: 0;
       cmeB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.fromInteger_info" {
     GHC.Num.fromInteger_info:
         const GHC.Num.fromInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmeA() //  [R1]
         { []
         }
     {offset
       cmeA: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmeA_info" {
     block_cmeA_info:
         const _cmeA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.830880449 UTC

[section ""data" . GHC.Num.$fNumInt_$cfromInteger_closure" {
     GHC.Num.$fNumInt_$cfromInteger_closure:
         const GHC.Num.$fNumInt_$cfromInteger_info;
 },
 GHC.Num.$fNumInt_$cfromInteger_entry() //  [R2]
         { []
         }
     {offset
       cmeZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmf3; else goto cmf4;
       cmf3: // global
           R2 = R2;
           R1 = GHC.Num.$fNumInt_$cfromInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmf4: // global
           I64[Sp - 8] = block_cmeX_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumInt_$cfromInteger_info" {
     GHC.Num.$fNumInt_$cfromInteger_info:
         const GHC.Num.$fNumInt_$cfromInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmeX() //  [R1]
         { []
         }
     {offset
       cmeX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cmf7; else goto cmf6;
       cmf7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cmf6: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmeX_info" {
     block_cmeX_info:
         const _cmeX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.836630217 UTC

[section ""data" . GHC.Num.$fNumInt_$cnegate_closure" {
     GHC.Num.$fNumInt_$cnegate_closure:
         const GHC.Num.$fNumInt_$cnegate_info;
 },
 GHC.Num.$fNumInt_$cnegate_entry() //  [R2]
         { []
         }
     {offset
       cmfo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmfv; else goto cmfw;
       cmfv: // global
           R2 = R2;
           R1 = GHC.Num.$fNumInt_$cnegate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmfw: // global
           I64[Sp - 8] = block_cmfl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umfA; else goto cmfm;
       umfA: // global
           call _cmfl(R1) args: 0, res: 0, upd: 0;
       cmfm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumInt_$cnegate_info" {
     GHC.Num.$fNumInt_$cnegate_info:
         const GHC.Num.$fNumInt_$cnegate_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmfl() //  [R1]
         { []
         }
     {offset
       cmfl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cmfz; else goto cmfy;
       cmfz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cmfy: // global
           _slVu::I64 = -I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _slVu::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmfl_info" {
     block_cmfl_info:
         const _cmfl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.843002015 UTC

[section ""data" . GHC.Num.$fNumInt_$c*_closure" {
     GHC.Num.$fNumInt_$c*_closure:
         const GHC.Num.$fNumInt_$c*_info;
 },
 GHC.Num.$fNumInt_$c*_entry() //  [R2, R3]
         { []
         }
     {offset
       cmfS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cmg4; else goto cmg5;
       cmg4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Num.$fNumInt_$c*_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cmg5: // global
           I64[Sp - 16] = block_cmfP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto umgb; else goto cmfQ;
       umgb: // global
           call _cmfP(R1) args: 0, res: 0, upd: 0;
       cmfQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumInt_$c*_info" {
     GHC.Num.$fNumInt_$c*_info:
         const GHC.Num.$fNumInt_$c*_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cmfP() //  [R1]
         { []
         }
     {offset
       cmfP: // global
           I64[Sp] = block_cmfV_info;
           _slVy::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _slVy::I64;
           if (R1 & 7 != 0) goto umga; else goto cmfW;
       umga: // global
           call _cmfV(R1) args: 0, res: 0, upd: 0;
       cmfW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cmfP_info" {
     block_cmfP_info:
         const _cmfP;
         const 1;
         const 30;
 },
 _cmfV() //  [R1]
         { []
         }
     {offset
       cmfV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cmg9; else goto cmg8;
       cmg9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cmg8: // global
           _slVB::I64 = I64[Sp + 8] * I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _slVB::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmfV_info" {
     block_cmfV_info:
         const _cmfV;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.85201906 UTC

[section ""data" . GHC.Num.$fNumInt_$c-_closure" {
     GHC.Num.$fNumInt_$c-_closure:
         const GHC.Num.$fNumInt_$c-_info;
 },
 GHC.Num.$fNumInt_$c-_entry() //  [R2, R3]
         { []
         }
     {offset
       cmgz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cmgL; else goto cmgM;
       cmgL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Num.$fNumInt_$c-_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cmgM: // global
           I64[Sp - 16] = block_cmgw_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto umgS; else goto cmgx;
       umgS: // global
           call _cmgw(R1) args: 0, res: 0, upd: 0;
       cmgx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumInt_$c-_info" {
     GHC.Num.$fNumInt_$c-_info:
         const GHC.Num.$fNumInt_$c-_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cmgw() //  [R1]
         { []
         }
     {offset
       cmgw: // global
           I64[Sp] = block_cmgC_info;
           _slVF::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _slVF::I64;
           if (R1 & 7 != 0) goto umgR; else goto cmgD;
       umgR: // global
           call _cmgC(R1) args: 0, res: 0, upd: 0;
       cmgD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cmgw_info" {
     block_cmgw_info:
         const _cmgw;
         const 1;
         const 30;
 },
 _cmgC() //  [R1]
         { []
         }
     {offset
       cmgC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cmgQ; else goto cmgP;
       cmgQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cmgP: // global
           _slVI::I64 = I64[Sp + 8] - I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _slVI::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmgC_info" {
     block_cmgC_info:
         const _cmgC;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.859890262 UTC

[section ""data" . GHC.Num.$fNumInt_$c+_closure" {
     GHC.Num.$fNumInt_$c+_closure:
         const GHC.Num.$fNumInt_$c+_info;
 },
 GHC.Num.$fNumInt_$c+_entry() //  [R2, R3]
         { []
         }
     {offset
       cmhg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cmhs; else goto cmht;
       cmhs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Num.$fNumInt_$c+_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cmht: // global
           I64[Sp - 16] = block_cmhd_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto umhz; else goto cmhe;
       umhz: // global
           call _cmhd(R1) args: 0, res: 0, upd: 0;
       cmhe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumInt_$c+_info" {
     GHC.Num.$fNumInt_$c+_info:
         const GHC.Num.$fNumInt_$c+_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cmhd() //  [R1]
         { []
         }
     {offset
       cmhd: // global
           I64[Sp] = block_cmhj_info;
           _slVM::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _slVM::I64;
           if (R1 & 7 != 0) goto umhy; else goto cmhk;
       umhy: // global
           call _cmhj(R1) args: 0, res: 0, upd: 0;
       cmhk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cmhd_info" {
     block_cmhd_info:
         const _cmhd;
         const 1;
         const 30;
 },
 _cmhj() //  [R1]
         { []
         }
     {offset
       cmhj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cmhx; else goto cmhw;
       cmhx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cmhw: // global
           _slVP::I64 = I64[Sp + 8] + I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _slVP::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmhj_info" {
     block_cmhj_info:
         const _cmhj;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.867351208 UTC

[section ""data" . GHC.Num.$fNumInt_$cabs_closure" {
     GHC.Num.$fNumInt_$cabs_closure:
         const GHC.Num.$fNumInt_$cabs_info;
 },
 GHC.Num.$fNumInt_$cabs_entry() //  [R2]
         { []
         }
     {offset
       cmhX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmhY; else goto cmhZ;
       cmhY: // global
           R2 = R2;
           R1 = GHC.Num.$fNumInt_$cabs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmhZ: // global
           I64[Sp - 8] = block_cmhU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umif; else goto cmhV;
       umif: // global
           call _cmhU(R1) args: 0, res: 0, upd: 0;
       cmhV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumInt_$cabs_info" {
     GHC.Num.$fNumInt_$cabs_info:
         const GHC.Num.$fNumInt_$cabs_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmhU() //  [R1]
         { []
         }
     {offset
       cmhU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cmi4; else goto cmi3;
       cmi4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cmi3: // global
           _slVS::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_slVS::I64, 0)) goto cmid; else goto cmie;
       cmid: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = -_slVS::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cmie: // global
           Hp = Hp - 16;
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmhU_info" {
     block_cmhU_info:
         const _cmhU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.872321096 UTC

[section ""data" . GHC.Num.$fNumInt3_closure" {
     GHC.Num.$fNumInt3_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.873998957 UTC

[section ""data" . GHC.Num.$fNumInt2_closure" {
     GHC.Num.$fNumInt2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.875591391 UTC

[section ""data" . GHC.Num.$fNumInt1_closure" {
     GHC.Num.$fNumInt1_closure:
         const GHC.Types.I#_con_info;
         const (-1);
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.878377321 UTC

[section ""data" . GHC.Num.$fNumInt_$csignum_closure" {
     GHC.Num.$fNumInt_$csignum_closure:
         const GHC.Num.$fNumInt_$csignum_info;
 },
 GHC.Num.$fNumInt_$csignum_entry() //  [R2]
         { []
         }
     {offset
       cmiD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmiE; else goto cmiF;
       cmiE: // global
           R2 = R2;
           R1 = GHC.Num.$fNumInt_$csignum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmiF: // global
           I64[Sp - 8] = block_cmiA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umiT; else goto cmiB;
       umiT: // global
           call _cmiA(R1) args: 0, res: 0, upd: 0;
       cmiB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumInt_$csignum_info" {
     GHC.Num.$fNumInt_$csignum_info:
         const GHC.Num.$fNumInt_$csignum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmiA() //  [R1]
         { []
         }
     {offset
       cmiA: // global
           _slVX::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_slVX::I64, 0)) goto cmiR; else goto cmiS;
       cmiR: // global
           if (_slVX::I64 == 0) goto cmiP; else goto cmiO;
       cmiP: // global
           R1 = GHC.Num.$fNumInt2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cmiO: // global
           R1 = GHC.Num.$fNumInt3_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cmiS: // global
           R1 = GHC.Num.$fNumInt1_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmiA_info" {
     block_cmiA_info:
         const _cmiA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.884120102 UTC

[section ""data" . GHC.Num.$fNumInt_closure" {
     GHC.Num.$fNumInt_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Num.$fNumInt_$c+_closure+2;
         const GHC.Num.$fNumInt_$c-_closure+2;
         const GHC.Num.$fNumInt_$c*_closure+2;
         const GHC.Num.$fNumInt_$cnegate_closure+1;
         const GHC.Num.$fNumInt_$cabs_closure+1;
         const GHC.Num.$fNumInt_$csignum_closure+1;
         const GHC.Num.$fNumInt_$cfromInteger_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.887239328 UTC

[section ""data" . GHC.Num.$fNumWord_$cfromInteger_closure" {
     GHC.Num.$fNumWord_$cfromInteger_closure:
         const GHC.Num.$fNumWord_$cfromInteger_info;
 },
 GHC.Num.$fNumWord_$cfromInteger_entry() //  [R2]
         { []
         }
     {offset
       cmjd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmjh; else goto cmji;
       cmjh: // global
           R2 = R2;
           R1 = GHC.Num.$fNumWord_$cfromInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmji: // global
           I64[Sp - 8] = block_cmjb_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.integerToWord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumWord_$cfromInteger_info" {
     GHC.Num.$fNumWord_$cfromInteger_info:
         const GHC.Num.$fNumWord_$cfromInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmjb() //  [R1]
         { []
         }
     {offset
       cmjb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cmjl; else goto cmjk;
       cmjl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cmjk: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmjb_info" {
     block_cmjb_info:
         const _cmjb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.891870353 UTC

[section ""data" . GHC.Num.$fNumWord2_closure" {
     GHC.Num.$fNumWord2_closure:
         const GHC.Types.W#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.893787384 UTC

[section ""data" . GHC.Num.$fNumWord1_closure" {
     GHC.Num.$fNumWord1_closure:
         const GHC.Types.W#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.896282804 UTC

[section ""data" . GHC.Num.$fNumWord_$csignum_closure" {
     GHC.Num.$fNumWord_$csignum_closure:
         const GHC.Num.$fNumWord_$csignum_info;
 },
 GHC.Num.$fNumWord_$csignum_entry() //  [R2]
         { []
         }
     {offset
       cmjE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmjF; else goto cmjG;
       cmjF: // global
           R2 = R2;
           R1 = GHC.Num.$fNumWord_$csignum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmjG: // global
           I64[Sp - 8] = block_cmjB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umjO; else goto cmjC;
       umjO: // global
           call _cmjB(R1) args: 0, res: 0, upd: 0;
       cmjC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumWord_$csignum_info" {
     GHC.Num.$fNumWord_$csignum_info:
         const GHC.Num.$fNumWord_$csignum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmjB() //  [R1]
         { []
         }
     {offset
       cmjB: // global
           if (I64[R1 + 7] == 0) goto cmjN; else goto cmjM;
       cmjN: // global
           R1 = GHC.Num.$fNumWord1_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cmjM: // global
           R1 = GHC.Num.$fNumWord2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmjB_info" {
     block_cmjB_info:
         const _cmjB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.901397474 UTC

[section ""data" . GHC.Num.$fNumWord_$cabs_closure" {
     GHC.Num.$fNumWord_$cabs_closure:
         const GHC.Num.$fNumWord_$cabs_info;
 },
 GHC.Num.$fNumWord_$cabs_entry() //  [R2]
         { []
         }
     {offset
       cmk4: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumWord_$cabs_info" {
     GHC.Num.$fNumWord_$cabs_info:
         const GHC.Num.$fNumWord_$cabs_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.905183863 UTC

[section ""data" . GHC.Num.$fNumWord_$cnegate_closure" {
     GHC.Num.$fNumWord_$cnegate_closure:
         const GHC.Num.$fNumWord_$cnegate_info;
 },
 GHC.Num.$fNumWord_$cnegate_entry() //  [R2]
         { []
         }
     {offset
       cmkk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmkx; else goto cmky;
       cmkx: // global
           R2 = R2;
           R1 = GHC.Num.$fNumWord_$cnegate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmky: // global
           I64[Sp - 8] = block_cmkh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umkC; else goto cmki;
       umkC: // global
           call _cmkh(R1) args: 0, res: 0, upd: 0;
       cmki: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumWord_$cnegate_info" {
     GHC.Num.$fNumWord_$cnegate_info:
         const GHC.Num.$fNumWord_$cnegate_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmkh() //  [R1]
         { []
         }
     {offset
       cmkh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cmkB; else goto cmkA;
       cmkB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cmkA: // global
           _slWc::I64 = -I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _slWc::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmkh_info" {
     block_cmkh_info:
         const _cmkh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.911741571 UTC

[section ""data" . GHC.Num.$fNumWord_$c*_closure" {
     GHC.Num.$fNumWord_$c*_closure:
         const GHC.Num.$fNumWord_$c*_info;
 },
 GHC.Num.$fNumWord_$c*_entry() //  [R2, R3]
         { []
         }
     {offset
       cmkU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cml6; else goto cml7;
       cml6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Num.$fNumWord_$c*_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cml7: // global
           I64[Sp - 16] = block_cmkR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto umld; else goto cmkS;
       umld: // global
           call _cmkR(R1) args: 0, res: 0, upd: 0;
       cmkS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumWord_$c*_info" {
     GHC.Num.$fNumWord_$c*_info:
         const GHC.Num.$fNumWord_$c*_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cmkR() //  [R1]
         { []
         }
     {offset
       cmkR: // global
           I64[Sp] = block_cmkX_info;
           _slWg::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _slWg::I64;
           if (R1 & 7 != 0) goto umlc; else goto cmkY;
       umlc: // global
           call _cmkX(R1) args: 0, res: 0, upd: 0;
       cmkY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cmkR_info" {
     block_cmkR_info:
         const _cmkR;
         const 1;
         const 30;
 },
 _cmkX() //  [R1]
         { []
         }
     {offset
       cmkX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cmlb; else goto cmla;
       cmlb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cmla: // global
           _slWj::I64 = I64[Sp + 8] * I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _slWj::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmkX_info" {
     block_cmkX_info:
         const _cmkX;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.920031114 UTC

[section ""data" . GHC.Num.$fNumWord_$c-_closure" {
     GHC.Num.$fNumWord_$c-_closure:
         const GHC.Num.$fNumWord_$c-_info;
 },
 GHC.Num.$fNumWord_$c-_entry() //  [R2, R3]
         { []
         }
     {offset
       cmlB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cmlN; else goto cmlO;
       cmlN: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Num.$fNumWord_$c-_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cmlO: // global
           I64[Sp - 16] = block_cmly_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto umlU; else goto cmlz;
       umlU: // global
           call _cmly(R1) args: 0, res: 0, upd: 0;
       cmlz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumWord_$c-_info" {
     GHC.Num.$fNumWord_$c-_info:
         const GHC.Num.$fNumWord_$c-_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cmly() //  [R1]
         { []
         }
     {offset
       cmly: // global
           I64[Sp] = block_cmlE_info;
           _slWn::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _slWn::I64;
           if (R1 & 7 != 0) goto umlT; else goto cmlF;
       umlT: // global
           call _cmlE(R1) args: 0, res: 0, upd: 0;
       cmlF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cmly_info" {
     block_cmly_info:
         const _cmly;
         const 1;
         const 30;
 },
 _cmlE() //  [R1]
         { []
         }
     {offset
       cmlE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cmlS; else goto cmlR;
       cmlS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cmlR: // global
           _slWq::I64 = I64[Sp + 8] - I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _slWq::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmlE_info" {
     block_cmlE_info:
         const _cmlE;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.927374931 UTC

[section ""data" . GHC.Num.$fNumWord_$c+_closure" {
     GHC.Num.$fNumWord_$c+_closure:
         const GHC.Num.$fNumWord_$c+_info;
 },
 GHC.Num.$fNumWord_$c+_entry() //  [R2, R3]
         { []
         }
     {offset
       cmmi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cmmu; else goto cmmv;
       cmmu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Num.$fNumWord_$c+_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cmmv: // global
           I64[Sp - 16] = block_cmmf_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ummB; else goto cmmg;
       ummB: // global
           call _cmmf(R1) args: 0, res: 0, upd: 0;
       cmmg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumWord_$c+_info" {
     GHC.Num.$fNumWord_$c+_info:
         const GHC.Num.$fNumWord_$c+_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cmmf() //  [R1]
         { []
         }
     {offset
       cmmf: // global
           I64[Sp] = block_cmml_info;
           _slWu::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _slWu::I64;
           if (R1 & 7 != 0) goto ummA; else goto cmmm;
       ummA: // global
           call _cmml(R1) args: 0, res: 0, upd: 0;
       cmmm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cmmf_info" {
     block_cmmf_info:
         const _cmmf;
         const 1;
         const 30;
 },
 _cmml() //  [R1]
         { []
         }
     {offset
       cmml: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cmmz; else goto cmmy;
       cmmz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cmmy: // global
           _slWx::I64 = I64[Sp + 8] + I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _slWx::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmml_info" {
     block_cmml_info:
         const _cmml;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.933650675 UTC

[section ""data" . GHC.Num.$fNumWord_closure" {
     GHC.Num.$fNumWord_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Num.$fNumWord_$c+_closure+2;
         const GHC.Num.$fNumWord_$c-_closure+2;
         const GHC.Num.$fNumWord_$c*_closure+2;
         const GHC.Num.$fNumWord_$cnegate_closure+1;
         const GHC.Num.$fNumWord_$cabs_closure+1;
         const GHC.Num.$fNumWord_$csignum_closure+1;
         const GHC.Num.$fNumWord_$cfromInteger_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.935636852 UTC

[section ""data" . GHC.Num.$fNumInteger_$cfromInteger_closure" {
     GHC.Num.$fNumInteger_$cfromInteger_closure:
         const GHC.Num.$fNumInteger_$cfromInteger_info;
 },
 GHC.Num.$fNumInteger_$cfromInteger_entry() //  [R2]
         { []
         }
     {offset
       cmmX: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumInteger_$cfromInteger_info" {
     GHC.Num.$fNumInteger_$cfromInteger_info:
         const GHC.Num.$fNumInteger_$cfromInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.938586275 UTC

[section ""data" . GHC.Num.$fNumInteger_closure" {
     GHC.Num.$fNumInteger_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Integer.Type.plusInteger_closure+2;
         const GHC.Integer.Type.minusInteger_closure+2;
         const GHC.Integer.Type.timesInteger_closure+2;
         const GHC.Integer.Type.negateInteger_closure+1;
         const GHC.Integer.Type.absInteger_closure+1;
         const GHC.Integer.Type.signumInteger_closure+1;
         const GHC.Num.$fNumInteger_$cfromInteger_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.940846266 UTC

[section ""data" . lvl_rlU7_closure" {
     lvl_rlU7_closure:
         const lvl_rlU7_info;
         const 0;
         const 0;
         const 0;
 },
 lvl_rlU7_entry() //  [R1]
         { []
         }
     {offset
       cmnd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cmne; else goto cmnf;
       cmne: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cmnf: // global
           (_cmna::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cmna::I64 == 0) goto cmnc; else goto cmnb;
       cmnc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cmnb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cmna::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl_rlU7_info" {
     lvl_rlU7_info:
         const lvl_rlU7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.945522911 UTC

[section ""data" . GHC.Num.$dmnegate_closure" {
     GHC.Num.$dmnegate_closure:
         const GHC.Num.$dmnegate_info;
         const 0;
 },
 sat_slWI_entry() //  [R1]
         { []
         }
     {offset
       cmnv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cmnw; else goto cmnx;
       cmnw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cmnx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = lvl_rlU7_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_slWI_info" {
     sat_slWI_info:
         const sat_slWI_entry;
         const 1;
         const 4294967312;
         const Sm3Z_srt;
 },
 GHC.Num.$dmnegate_entry() //  [R2, R3]
         { []
         }
     {offset
       cmny: // global
           _slWH::P64 = R3;
           _slWG::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cmnz; else goto cmnA;
       cmnA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cmnC; else goto cmnB;
       cmnC: // global
           HpAlloc = 24;
           goto cmnz;
       cmnz: // global
           R3 = _slWH::P64;
           R2 = _slWG::P64;
           R1 = GHC.Num.$dmnegate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cmnB: // global
           I64[Hp - 16] = sat_slWI_info;
           P64[Hp] = _slWG::P64;
           R2 = _slWG::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _slWH::P64;
           Sp = Sp - 24;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$dmnegate_info" {
     GHC.Num.$dmnegate_info:
         const GHC.Num.$dmnegate_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sm3Z_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.951893935 UTC

[section ""data" . GHC.Num.$dm-_closure" {
     GHC.Num.$dm-_closure:
         const GHC.Num.$dm-_info;
 },
 sat_slWM_entry() //  [R1]
         { []
         }
     {offset
       cmnV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cmnW; else goto cmnX;
       cmnW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cmnX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_slWM_info" {
     sat_slWM_info:
         const sat_slWM_entry;
         const 2;
         const 18;
 },
 GHC.Num.$dm-_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cmnY: // global
           _slWL::P64 = R4;
           _slWK::P64 = R3;
           _slWJ::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cmnZ; else goto cmo0;
       cmo0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cmo2; else goto cmo1;
       cmo2: // global
           HpAlloc = 32;
           goto cmnZ;
       cmnZ: // global
           R4 = _slWL::P64;
           R3 = _slWK::P64;
           R2 = _slWJ::P64;
           R1 = GHC.Num.$dm-_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cmo1: // global
           I64[Hp - 24] = sat_slWM_info;
           P64[Hp - 8] = _slWJ::P64;
           P64[Hp] = _slWL::P64;
           R2 = _slWJ::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _slWK::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$dm-_info" {
     GHC.Num.$dm-_info:
         const GHC.Num.$dm-_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.957193391 UTC

[section ""data" . GHC.Num.subtract_closure" {
     GHC.Num.subtract_closure:
         const GHC.Num.subtract_info;
 },
 GHC.Num.subtract_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cmoi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cmoj; else goto cmok;
       cmoj: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Num.subtract_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cmok: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.subtract_info" {
     GHC.Num.subtract_info:
         const GHC.Num.subtract_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.960392531 UTC

[section ""cstring" . GHC.Num.$trModule4_bytes" {
     GHC.Num.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.961983531 UTC

[section ""data" . GHC.Num.$trModule3_closure" {
     GHC.Num.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Num.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.963515707 UTC

[section ""cstring" . GHC.Num.$trModule2_bytes" {
     GHC.Num.$trModule2_bytes:
         I8[] [71,72,67,46,78,117,109]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.965072156 UTC

[section ""data" . GHC.Num.$trModule1_closure" {
     GHC.Num.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Num.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.966676373 UTC

[section ""data" . GHC.Num.$trModule_closure" {
     GHC.Num.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Num.$trModule3_closure+1;
         const GHC.Num.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.968243131 UTC

[section ""data" . $krep_rlU8_closure" {
     $krep_rlU8_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.970207003 UTC

[section ""data" . $krep1_rlU9_closure" {
     $krep1_rlU9_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.971842855 UTC

[section ""data" . GHC.Num.$tcNum1_closure" {
     GHC.Num.$tcNum1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep1_rlU9_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.973465454 UTC

[section ""data" . $krep2_rlUa_closure" {
     $krep2_rlUa_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.975018255 UTC

[section ""data" . $krep3_rlUb_closure" {
     $krep3_rlUb_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rlUa_closure+2;
         const $krep2_rlUa_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.977143349 UTC

[section ""data" . $krep4_rlUc_closure" {
     $krep4_rlUc_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rlUa_closure+2;
         const $krep3_rlUb_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.979594361 UTC

[section ""data" . $krep5_rlUd_closure" {
     $krep5_rlUd_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rlU8_closure+1;
         const $krep2_rlUa_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.981156471 UTC

[section ""cstring" . GHC.Num.$tcNum3_bytes" {
     GHC.Num.$tcNum3_bytes:
         I8[] [78,117,109]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.98270132 UTC

[section ""data" . GHC.Num.$tcNum2_closure" {
     GHC.Num.$tcNum2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Num.$tcNum3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.984297004 UTC

[section ""data" . GHC.Num.$tcNum_closure" {
     GHC.Num.$tcNum_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Num.$trModule_closure+1;
         const GHC.Num.$tcNum2_closure+1;
         const GHC.Num.$tcNum1_closure+4;
         const 4789207468288702218;
         const 12287762746798050066;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.985953973 UTC

[section ""data" . $krep6_rlUe_closure" {
     $krep6_rlUe_closure:
         const :_con_info;
         const $krep2_rlUa_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.987463415 UTC

[section ""data" . $krep7_rlUf_closure" {
     $krep7_rlUf_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Num.$tcNum_closure+1;
         const $krep6_rlUe_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.989044907 UTC

[section ""data" . $krep8_rlUg_closure" {
     $krep8_rlUg_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rlUd_closure+4;
         const $krep7_rlUf_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.991277266 UTC

[section ""data" . $krep9_rlUh_closure" {
     $krep9_rlUh_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rlUb_closure+4;
         const $krep8_rlUg_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.992845786 UTC

[section ""data" . $krep10_rlUi_closure" {
     $krep10_rlUi_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rlUb_closure+4;
         const $krep9_rlUh_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.994432992 UTC

[section ""data" . $krep11_rlUj_closure" {
     $krep11_rlUj_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rlUb_closure+4;
         const $krep10_rlUi_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.996024784 UTC

[section ""data" . $krep12_rlUk_closure" {
     $krep12_rlUk_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rlUc_closure+4;
         const $krep11_rlUj_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.997571015 UTC

[section ""data" . $krep13_rlUl_closure" {
     $krep13_rlUl_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rlUc_closure+4;
         const $krep12_rlUk_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.999097218 UTC

[section ""data" . GHC.Num.$tc'C:Num1_closure" {
     GHC.Num.$tc'C:Num1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rlUc_closure+4;
         const $krep13_rlUl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.001032599 UTC

[section ""cstring" . GHC.Num.$tc'C:Num3_bytes" {
     GHC.Num.$tc'C:Num3_bytes:
         I8[] [39,67,58,78,117,109]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.002646402 UTC

[section ""data" . GHC.Num.$tc'C:Num2_closure" {
     GHC.Num.$tc'C:Num2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Num.$tc'C:Num3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.004279889 UTC

[section ""data" . GHC.Num.$tc'C:Num_closure" {
     GHC.Num.$tc'C:Num_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Num.$trModule_closure+1;
         const GHC.Num.$tc'C:Num2_closure+1;
         const GHC.Num.$tc'C:Num1_closure+4;
         const 277567704124416124;
         const 17341550453118006986;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.007006132 UTC

[section ""data" . GHC.Num.C:Num_closure" {
     GHC.Num.C:Num_closure:
         const GHC.Num.C:Num_info;
 },
 GHC.Num.C:Num_slow() //  [R1]
         { []
         }
     {offset
       cmoS: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Num.C:Num_entry(R6,
                                    R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.Num.C:Num_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cmoX: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cmp1; else goto cmp0;
       cmp1: // global
           HpAlloc = 64;
           R1 = GHC.Num.C:Num_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cmp0: // global
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 55;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.C:Num_info" {
     GHC.Num.C:Num_info:
         const GHC.Num.C:Num_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const GHC.Num.C:Num_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.011803749 UTC

[section ""cstring" . imch_str" {
     imch_str:
         I8[] [98,97,115,101,58,71,72,67,46,78,117,109,46,67,58,78,117,109]
 },
 GHC.Num.C:Num_con_entry() //  [R1]
         { []
         }
     {offset
       cmpb: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.C:Num_con_info" {
     GHC.Num.C:Num_con_info:
         const GHC.Num.C:Num_con_entry;
         const 7;
         const 1;
         const imch_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.014496131 UTC

[section ""relreadonly" . Sm3Z_srt" {
     Sm3Z_srt:
         const lvl_rlU7_closure;
         const GHC.Num.$dmnegate_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.338665713 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:55:00.340515637 UTC

[section ""data" . GHC.Num.+_closure" {
     GHC.Num.+_closure:
         const GHC.Num.+_info;
 },
 GHC.Num.+_entry() //  [R2]
         { []
         }
     {offset
       cmrK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmrL; else goto cmrM;
       cmrL: // global
           R2 = R2;
           R1 = GHC.Num.+_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmrM: // global
           I64[Sp - 8] = block_cmrH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umrQ; else goto cmrI;
       umrQ: // global
           call _cmrH(R1) args: 0, res: 0, upd: 0;
       cmrI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.+_info" {
     GHC.Num.+_info:
         const GHC.Num.+_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmrH() //  [R1]
         { []
         }
     {offset
       cmrH: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmrH_info" {
     block_cmrH_info:
         const _cmrH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.346115398 UTC

[section ""data" . GHC.Num.-_closure" {
     GHC.Num.-_closure:
         const GHC.Num.-_info;
 },
 GHC.Num.-_entry() //  [R2]
         { []
         }
     {offset
       cms8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cms9; else goto cmsa;
       cms9: // global
           R2 = R2;
           R1 = GHC.Num.-_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmsa: // global
           I64[Sp - 8] = block_cms5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umse; else goto cms6;
       umse: // global
           call _cms5(R1) args: 0, res: 0, upd: 0;
       cms6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.-_info" {
     GHC.Num.-_info:
         const GHC.Num.-_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cms5() //  [R1]
         { []
         }
     {offset
       cms5: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cms5_info" {
     block_cms5_info:
         const _cms5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.354845161 UTC

[section ""data" . GHC.Num.*_closure" {
     GHC.Num.*_closure:
         const GHC.Num.*_info;
 },
 GHC.Num.*_entry() //  [R2]
         { []
         }
     {offset
       cmsw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmsx; else goto cmsy;
       cmsx: // global
           R2 = R2;
           R1 = GHC.Num.*_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmsy: // global
           I64[Sp - 8] = block_cmst_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umsC; else goto cmsu;
       umsC: // global
           call _cmst(R1) args: 0, res: 0, upd: 0;
       cmsu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.*_info" {
     GHC.Num.*_info:
         const GHC.Num.*_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmst() //  [R1]
         { []
         }
     {offset
       cmst: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmst_info" {
     block_cmst_info:
         const _cmst;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.359937577 UTC

[section ""data" . GHC.Num.negate_closure" {
     GHC.Num.negate_closure:
         const GHC.Num.negate_info;
 },
 GHC.Num.negate_entry() //  [R2]
         { []
         }
     {offset
       cmsU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmsV; else goto cmsW;
       cmsV: // global
           R2 = R2;
           R1 = GHC.Num.negate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmsW: // global
           I64[Sp - 8] = block_cmsR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umt0; else goto cmsS;
       umt0: // global
           call _cmsR(R1) args: 0, res: 0, upd: 0;
       cmsS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.negate_info" {
     GHC.Num.negate_info:
         const GHC.Num.negate_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmsR() //  [R1]
         { []
         }
     {offset
       cmsR: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmsR_info" {
     block_cmsR_info:
         const _cmsR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.365440992 UTC

[section ""data" . GHC.Num.abs_closure" {
     GHC.Num.abs_closure:
         const GHC.Num.abs_info;
 },
 GHC.Num.abs_entry() //  [R2]
         { []
         }
     {offset
       cmti: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmtj; else goto cmtk;
       cmtj: // global
           R2 = R2;
           R1 = GHC.Num.abs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmtk: // global
           I64[Sp - 8] = block_cmtf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umto; else goto cmtg;
       umto: // global
           call _cmtf(R1) args: 0, res: 0, upd: 0;
       cmtg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.abs_info" {
     GHC.Num.abs_info:
         const GHC.Num.abs_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmtf() //  [R1]
         { []
         }
     {offset
       cmtf: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmtf_info" {
     block_cmtf_info:
         const _cmtf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.370697299 UTC

[section ""data" . GHC.Num.signum_closure" {
     GHC.Num.signum_closure:
         const GHC.Num.signum_info;
 },
 GHC.Num.signum_entry() //  [R2]
         { []
         }
     {offset
       cmtG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmtH; else goto cmtI;
       cmtH: // global
           R2 = R2;
           R1 = GHC.Num.signum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmtI: // global
           I64[Sp - 8] = block_cmtD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umtM; else goto cmtE;
       umtM: // global
           call _cmtD(R1) args: 0, res: 0, upd: 0;
       cmtE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.signum_info" {
     GHC.Num.signum_info:
         const GHC.Num.signum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmtD() //  [R1]
         { []
         }
     {offset
       cmtD: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmtD_info" {
     block_cmtD_info:
         const _cmtD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.376218137 UTC

[section ""data" . GHC.Num.fromInteger_closure" {
     GHC.Num.fromInteger_closure:
         const GHC.Num.fromInteger_info;
 },
 GHC.Num.fromInteger_entry() //  [R2]
         { []
         }
     {offset
       cmu4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmu5; else goto cmu6;
       cmu5: // global
           R2 = R2;
           R1 = GHC.Num.fromInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmu6: // global
           I64[Sp - 8] = block_cmu1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umua; else goto cmu2;
       umua: // global
           call _cmu1(R1) args: 0, res: 0, upd: 0;
       cmu2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.fromInteger_info" {
     GHC.Num.fromInteger_info:
         const GHC.Num.fromInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmu1() //  [R1]
         { []
         }
     {offset
       cmu1: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmu1_info" {
     block_cmu1_info:
         const _cmu1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.381960532 UTC

[section ""data" . GHC.Num.$fNumInt_$cfromInteger_closure" {
     GHC.Num.$fNumInt_$cfromInteger_closure:
         const GHC.Num.$fNumInt_$cfromInteger_info;
 },
 GHC.Num.$fNumInt_$cfromInteger_entry() //  [R2]
         { []
         }
     {offset
       cmur: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmuv; else goto cmuw;
       cmuv: // global
           R2 = R2;
           R1 = GHC.Num.$fNumInt_$cfromInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmuw: // global
           I64[Sp - 8] = block_cmup_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumInt_$cfromInteger_info" {
     GHC.Num.$fNumInt_$cfromInteger_info:
         const GHC.Num.$fNumInt_$cfromInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmup() //  [R1]
         { []
         }
     {offset
       cmup: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cmuz; else goto cmuy;
       cmuz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cmuy: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmup_info" {
     block_cmup_info:
         const _cmup;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.388278395 UTC

[section ""data" . GHC.Num.$fNumInt_$cnegate_closure" {
     GHC.Num.$fNumInt_$cnegate_closure:
         const GHC.Num.$fNumInt_$cnegate_info;
 },
 GHC.Num.$fNumInt_$cnegate_entry() //  [R2]
         { []
         }
     {offset
       cmuS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmuZ; else goto cmv0;
       cmuZ: // global
           R2 = R2;
           R1 = GHC.Num.$fNumInt_$cnegate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmv0: // global
           I64[Sp - 8] = block_cmuP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umv4; else goto cmuQ;
       umv4: // global
           call _cmuP(R1) args: 0, res: 0, upd: 0;
       cmuQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumInt_$cnegate_info" {
     GHC.Num.$fNumInt_$cnegate_info:
         const GHC.Num.$fNumInt_$cnegate_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmuP() //  [R1]
         { []
         }
     {offset
       cmuP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cmv3; else goto cmv2;
       cmv3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cmv2: // global
           _smqo::I64 = -I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _smqo::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmuP_info" {
     block_cmuP_info:
         const _cmuP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.394714993 UTC

[section ""data" . GHC.Num.$fNumInt_$c*_closure" {
     GHC.Num.$fNumInt_$c*_closure:
         const GHC.Num.$fNumInt_$c*_info;
 },
 GHC.Num.$fNumInt_$c*_entry() //  [R2, R3]
         { []
         }
     {offset
       cmvo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cmvA; else goto cmvB;
       cmvA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Num.$fNumInt_$c*_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cmvB: // global
           I64[Sp - 16] = block_cmvl_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto umvH; else goto cmvm;
       umvH: // global
           call _cmvl(R1) args: 0, res: 0, upd: 0;
       cmvm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumInt_$c*_info" {
     GHC.Num.$fNumInt_$c*_info:
         const GHC.Num.$fNumInt_$c*_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cmvl() //  [R1]
         { []
         }
     {offset
       cmvl: // global
           I64[Sp] = block_cmvr_info;
           _smqs::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _smqs::I64;
           if (R1 & 7 != 0) goto umvG; else goto cmvs;
       umvG: // global
           call _cmvr(R1) args: 0, res: 0, upd: 0;
       cmvs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cmvl_info" {
     block_cmvl_info:
         const _cmvl;
         const 1;
         const 30;
 },
 _cmvr() //  [R1]
         { []
         }
     {offset
       cmvr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cmvF; else goto cmvE;
       cmvF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cmvE: // global
           _smqv::I64 = I64[Sp + 8] * I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _smqv::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmvr_info" {
     block_cmvr_info:
         const _cmvr;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.402453224 UTC

[section ""data" . GHC.Num.$fNumInt_$c-_closure" {
     GHC.Num.$fNumInt_$c-_closure:
         const GHC.Num.$fNumInt_$c-_info;
 },
 GHC.Num.$fNumInt_$c-_entry() //  [R2, R3]
         { []
         }
     {offset
       cmw8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cmwk; else goto cmwl;
       cmwk: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Num.$fNumInt_$c-_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cmwl: // global
           I64[Sp - 16] = block_cmw5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto umwr; else goto cmw6;
       umwr: // global
           call _cmw5(R1) args: 0, res: 0, upd: 0;
       cmw6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumInt_$c-_info" {
     GHC.Num.$fNumInt_$c-_info:
         const GHC.Num.$fNumInt_$c-_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cmw5() //  [R1]
         { []
         }
     {offset
       cmw5: // global
           I64[Sp] = block_cmwb_info;
           _smqz::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _smqz::I64;
           if (R1 & 7 != 0) goto umwq; else goto cmwc;
       umwq: // global
           call _cmwb(R1) args: 0, res: 0, upd: 0;
       cmwc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cmw5_info" {
     block_cmw5_info:
         const _cmw5;
         const 1;
         const 30;
 },
 _cmwb() //  [R1]
         { []
         }
     {offset
       cmwb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cmwp; else goto cmwo;
       cmwp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cmwo: // global
           _smqC::I64 = I64[Sp + 8] - I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _smqC::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmwb_info" {
     block_cmwb_info:
         const _cmwb;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.410388238 UTC

[section ""data" . GHC.Num.$fNumInt_$c+_closure" {
     GHC.Num.$fNumInt_$c+_closure:
         const GHC.Num.$fNumInt_$c+_info;
 },
 GHC.Num.$fNumInt_$c+_entry() //  [R2, R3]
         { []
         }
     {offset
       cmwS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cmx4; else goto cmx5;
       cmx4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Num.$fNumInt_$c+_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cmx5: // global
           I64[Sp - 16] = block_cmwP_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto umxb; else goto cmwQ;
       umxb: // global
           call _cmwP(R1) args: 0, res: 0, upd: 0;
       cmwQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumInt_$c+_info" {
     GHC.Num.$fNumInt_$c+_info:
         const GHC.Num.$fNumInt_$c+_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cmwP() //  [R1]
         { []
         }
     {offset
       cmwP: // global
           I64[Sp] = block_cmwV_info;
           _smqG::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _smqG::I64;
           if (R1 & 7 != 0) goto umxa; else goto cmwW;
       umxa: // global
           call _cmwV(R1) args: 0, res: 0, upd: 0;
       cmwW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cmwP_info" {
     block_cmwP_info:
         const _cmwP;
         const 1;
         const 30;
 },
 _cmwV() //  [R1]
         { []
         }
     {offset
       cmwV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cmx9; else goto cmx8;
       cmx9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cmx8: // global
           _smqJ::I64 = I64[Sp + 8] + I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _smqJ::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmwV_info" {
     block_cmwV_info:
         const _cmwV;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.418093324 UTC

[section ""data" . GHC.Num.$fNumInt_$cabs_closure" {
     GHC.Num.$fNumInt_$cabs_closure:
         const GHC.Num.$fNumInt_$cabs_info;
 },
 GHC.Num.$fNumInt_$cabs_entry() //  [R2]
         { []
         }
     {offset
       cmxC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmxD; else goto cmxE;
       cmxD: // global
           R2 = R2;
           R1 = GHC.Num.$fNumInt_$cabs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmxE: // global
           I64[Sp - 8] = block_cmxz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umxU; else goto cmxA;
       umxU: // global
           call _cmxz(R1) args: 0, res: 0, upd: 0;
       cmxA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumInt_$cabs_info" {
     GHC.Num.$fNumInt_$cabs_info:
         const GHC.Num.$fNumInt_$cabs_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmxz() //  [R1]
         { []
         }
     {offset
       cmxz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cmxJ; else goto cmxI;
       cmxJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cmxI: // global
           _smqM::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_smqM::I64, 0)) goto cmxS; else goto cmxT;
       cmxS: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = -_smqM::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cmxT: // global
           Hp = Hp - 16;
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmxz_info" {
     block_cmxz_info:
         const _cmxz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.423780026 UTC

[section ""data" . GHC.Num.$fNumInt3_closure" {
     GHC.Num.$fNumInt3_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.425435663 UTC

[section ""data" . GHC.Num.$fNumInt2_closure" {
     GHC.Num.$fNumInt2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.426996927 UTC

[section ""data" . GHC.Num.$fNumInt1_closure" {
     GHC.Num.$fNumInt1_closure:
         const GHC.Types.I#_con_info;
         const (-1);
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.430070708 UTC

[section ""data" . GHC.Num.$fNumInt_$csignum_closure" {
     GHC.Num.$fNumInt_$csignum_closure:
         const GHC.Num.$fNumInt_$csignum_info;
 },
 GHC.Num.$fNumInt_$csignum_entry() //  [R2]
         { []
         }
     {offset
       cmyk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmyl; else goto cmym;
       cmyl: // global
           R2 = R2;
           R1 = GHC.Num.$fNumInt_$csignum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmym: // global
           I64[Sp - 8] = block_cmyh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umyA; else goto cmyi;
       umyA: // global
           call _cmyh(R1) args: 0, res: 0, upd: 0;
       cmyi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumInt_$csignum_info" {
     GHC.Num.$fNumInt_$csignum_info:
         const GHC.Num.$fNumInt_$csignum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmyh() //  [R1]
         { []
         }
     {offset
       cmyh: // global
           _smqR::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_smqR::I64, 0)) goto cmyy; else goto cmyz;
       cmyy: // global
           if (_smqR::I64 == 0) goto cmyw; else goto cmyv;
       cmyw: // global
           R1 = GHC.Num.$fNumInt2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cmyv: // global
           R1 = GHC.Num.$fNumInt3_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cmyz: // global
           R1 = GHC.Num.$fNumInt1_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmyh_info" {
     block_cmyh_info:
         const _cmyh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.435099842 UTC

[section ""data" . GHC.Num.$fNumInt_closure" {
     GHC.Num.$fNumInt_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Num.$fNumInt_$c+_closure+2;
         const GHC.Num.$fNumInt_$c-_closure+2;
         const GHC.Num.$fNumInt_$c*_closure+2;
         const GHC.Num.$fNumInt_$cnegate_closure+1;
         const GHC.Num.$fNumInt_$cabs_closure+1;
         const GHC.Num.$fNumInt_$csignum_closure+1;
         const GHC.Num.$fNumInt_$cfromInteger_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.437873747 UTC

[section ""data" . GHC.Num.$fNumWord_$cfromInteger_closure" {
     GHC.Num.$fNumWord_$cfromInteger_closure:
         const GHC.Num.$fNumWord_$cfromInteger_info;
 },
 GHC.Num.$fNumWord_$cfromInteger_entry() //  [R2]
         { []
         }
     {offset
       cmyV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmyZ; else goto cmz0;
       cmyZ: // global
           R2 = R2;
           R1 = GHC.Num.$fNumWord_$cfromInteger_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmz0: // global
           I64[Sp - 8] = block_cmyT_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Integer.Type.integerToWord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumWord_$cfromInteger_info" {
     GHC.Num.$fNumWord_$cfromInteger_info:
         const GHC.Num.$fNumWord_$cfromInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmyT() //  [R1]
         { []
         }
     {offset
       cmyT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cmz3; else goto cmz2;
       cmz3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cmz2: // global
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmyT_info" {
     block_cmyT_info:
         const _cmyT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.444093678 UTC

[section ""data" . GHC.Num.$fNumWord2_closure" {
     GHC.Num.$fNumWord2_closure:
         const GHC.Types.W#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.445967808 UTC

[section ""data" . GHC.Num.$fNumWord1_closure" {
     GHC.Num.$fNumWord1_closure:
         const GHC.Types.W#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.448508155 UTC

[section ""data" . GHC.Num.$fNumWord_$csignum_closure" {
     GHC.Num.$fNumWord_$csignum_closure:
         const GHC.Num.$fNumWord_$csignum_info;
 },
 GHC.Num.$fNumWord_$csignum_entry() //  [R2]
         { []
         }
     {offset
       cmzo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmzp; else goto cmzq;
       cmzp: // global
           R2 = R2;
           R1 = GHC.Num.$fNumWord_$csignum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmzq: // global
           I64[Sp - 8] = block_cmzl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umzy; else goto cmzm;
       umzy: // global
           call _cmzl(R1) args: 0, res: 0, upd: 0;
       cmzm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumWord_$csignum_info" {
     GHC.Num.$fNumWord_$csignum_info:
         const GHC.Num.$fNumWord_$csignum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmzl() //  [R1]
         { []
         }
     {offset
       cmzl: // global
           if (I64[R1 + 7] == 0) goto cmzx; else goto cmzw;
       cmzx: // global
           R1 = GHC.Num.$fNumWord1_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cmzw: // global
           R1 = GHC.Num.$fNumWord2_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmzl_info" {
     block_cmzl_info:
         const _cmzl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.454680891 UTC

[section ""data" . GHC.Num.$fNumWord_$cabs_closure" {
     GHC.Num.$fNumWord_$cabs_closure:
         const GHC.Num.$fNumWord_$cabs_info;
 },
 GHC.Num.$fNumWord_$cabs_entry() //  [R2]
         { []
         }
     {offset
       cmzP: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumWord_$cabs_info" {
     GHC.Num.$fNumWord_$cabs_info:
         const GHC.Num.$fNumWord_$cabs_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.458667928 UTC

[section ""data" . GHC.Num.$fNumWord_$cnegate_closure" {
     GHC.Num.$fNumWord_$cnegate_closure:
         const GHC.Num.$fNumWord_$cnegate_info;
 },
 GHC.Num.$fNumWord_$cnegate_entry() //  [R2]
         { []
         }
     {offset
       cmA5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cmAi; else goto cmAj;
       cmAi: // global
           R2 = R2;
           R1 = GHC.Num.$fNumWord_$cnegate_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cmAj: // global
           I64[Sp - 8] = block_cmA2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto umAn; else goto cmA3;
       umAn: // global
           call _cmA2(R1) args: 0, res: 0, upd: 0;
       cmA3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumWord_$cnegate_info" {
     GHC.Num.$fNumWord_$cnegate_info:
         const GHC.Num.$fNumWord_$cnegate_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cmA2() //  [R1]
         { []
         }
     {offset
       cmA2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cmAm; else goto cmAl;
       cmAm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cmAl: // global
           _smr6::I64 = -I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _smr6::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmA2_info" {
     block_cmA2_info:
         const _cmA2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.465297242 UTC

[section ""data" . GHC.Num.$fNumWord_$c*_closure" {
     GHC.Num.$fNumWord_$c*_closure:
         const GHC.Num.$fNumWord_$c*_info;
 },
 GHC.Num.$fNumWord_$c*_entry() //  [R2, R3]
         { []
         }
     {offset
       cmAH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cmAT; else goto cmAU;
       cmAT: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Num.$fNumWord_$c*_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cmAU: // global
           I64[Sp - 16] = block_cmAE_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto umB0; else goto cmAF;
       umB0: // global
           call _cmAE(R1) args: 0, res: 0, upd: 0;
       cmAF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumWord_$c*_info" {
     GHC.Num.$fNumWord_$c*_info:
         const GHC.Num.$fNumWord_$c*_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cmAE() //  [R1]
         { []
         }
     {offset
       cmAE: // global
           I64[Sp] = block_cmAK_info;
           _smra::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _smra::I64;
           if (R1 & 7 != 0) goto umAZ; else goto cmAL;
       umAZ: // global
           call _cmAK(R1) args: 0, res: 0, upd: 0;
       cmAL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cmAE_info" {
     block_cmAE_info:
         const _cmAE;
         const 1;
         const 30;
 },
 _cmAK() //  [R1]
         { []
         }
     {offset
       cmAK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cmAY; else goto cmAX;
       cmAY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cmAX: // global
           _smrd::I64 = I64[Sp + 8] * I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _smrd::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmAK_info" {
     block_cmAK_info:
         const _cmAK;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.479260407 UTC

[section ""data" . GHC.Num.$fNumWord_$c-_closure" {
     GHC.Num.$fNumWord_$c-_closure:
         const GHC.Num.$fNumWord_$c-_info;
 },
 GHC.Num.$fNumWord_$c-_entry() //  [R2, R3]
         { []
         }
     {offset
       cmBr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cmBD; else goto cmBE;
       cmBD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Num.$fNumWord_$c-_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cmBE: // global
           I64[Sp - 16] = block_cmBo_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto umBK; else goto cmBp;
       umBK: // global
           call _cmBo(R1) args: 0, res: 0, upd: 0;
       cmBp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumWord_$c-_info" {
     GHC.Num.$fNumWord_$c-_info:
         const GHC.Num.$fNumWord_$c-_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cmBo() //  [R1]
         { []
         }
     {offset
       cmBo: // global
           I64[Sp] = block_cmBu_info;
           _smrh::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _smrh::I64;
           if (R1 & 7 != 0) goto umBJ; else goto cmBv;
       umBJ: // global
           call _cmBu(R1) args: 0, res: 0, upd: 0;
       cmBv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cmBo_info" {
     block_cmBo_info:
         const _cmBo;
         const 1;
         const 30;
 },
 _cmBu() //  [R1]
         { []
         }
     {offset
       cmBu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cmBI; else goto cmBH;
       cmBI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cmBH: // global
           _smrk::I64 = I64[Sp + 8] - I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _smrk::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmBu_info" {
     block_cmBu_info:
         const _cmBu;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.490931817 UTC

[section ""data" . GHC.Num.$fNumWord_$c+_closure" {
     GHC.Num.$fNumWord_$c+_closure:
         const GHC.Num.$fNumWord_$c+_info;
 },
 GHC.Num.$fNumWord_$c+_entry() //  [R2, R3]
         { []
         }
     {offset
       cmCb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cmCn; else goto cmCo;
       cmCn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Num.$fNumWord_$c+_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cmCo: // global
           I64[Sp - 16] = block_cmC8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto umCu; else goto cmC9;
       umCu: // global
           call _cmC8(R1) args: 0, res: 0, upd: 0;
       cmC9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumWord_$c+_info" {
     GHC.Num.$fNumWord_$c+_info:
         const GHC.Num.$fNumWord_$c+_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cmC8() //  [R1]
         { []
         }
     {offset
       cmC8: // global
           I64[Sp] = block_cmCe_info;
           _smro::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _smro::I64;
           if (R1 & 7 != 0) goto umCt; else goto cmCf;
       umCt: // global
           call _cmCe(R1) args: 0, res: 0, upd: 0;
       cmCf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cmC8_info" {
     block_cmC8_info:
         const _cmC8;
         const 1;
         const 30;
 },
 _cmCe() //  [R1]
         { []
         }
     {offset
       cmCe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cmCs; else goto cmCr;
       cmCs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cmCr: // global
           _smrr::I64 = I64[Sp + 8] + I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _smrr::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cmCe_info" {
     block_cmCe_info:
         const _cmCe;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.500279148 UTC

[section ""data" . GHC.Num.$fNumWord_closure" {
     GHC.Num.$fNumWord_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Num.$fNumWord_$c+_closure+2;
         const GHC.Num.$fNumWord_$c-_closure+2;
         const GHC.Num.$fNumWord_$c*_closure+2;
         const GHC.Num.$fNumWord_$cnegate_closure+1;
         const GHC.Num.$fNumWord_$cabs_closure+1;
         const GHC.Num.$fNumWord_$csignum_closure+1;
         const GHC.Num.$fNumWord_$cfromInteger_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.50395551 UTC

[section ""data" . GHC.Num.$fNumInteger_$cfromInteger_closure" {
     GHC.Num.$fNumInteger_$cfromInteger_closure:
         const GHC.Num.$fNumInteger_$cfromInteger_info;
 },
 GHC.Num.$fNumInteger_$cfromInteger_entry() //  [R2]
         { []
         }
     {offset
       cmCT: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$fNumInteger_$cfromInteger_info" {
     GHC.Num.$fNumInteger_$cfromInteger_info:
         const GHC.Num.$fNumInteger_$cfromInteger_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.508509638 UTC

[section ""data" . GHC.Num.$fNumInteger_closure" {
     GHC.Num.$fNumInteger_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Integer.Type.plusInteger_closure+2;
         const GHC.Integer.Type.minusInteger_closure+2;
         const GHC.Integer.Type.timesInteger_closure+2;
         const GHC.Integer.Type.negateInteger_closure+1;
         const GHC.Integer.Type.absInteger_closure+1;
         const GHC.Integer.Type.signumInteger_closure+1;
         const GHC.Num.$fNumInteger_$cfromInteger_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.511473014 UTC

[section ""data" . lvl_rlU7_closure" {
     lvl_rlU7_closure:
         const lvl_rlU7_info;
         const 0;
         const 0;
         const 0;
 },
 lvl_rlU7_entry() //  [R1]
         { []
         }
     {offset
       cmD9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cmDa; else goto cmDb;
       cmDa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cmDb: // global
           (_cmD6::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cmD6::I64 == 0) goto cmD8; else goto cmD7;
       cmD8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cmD7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cmD6::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl_rlU7_info" {
     lvl_rlU7_info:
         const lvl_rlU7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.518158412 UTC

[section ""data" . GHC.Num.$dmnegate_closure" {
     GHC.Num.$dmnegate_closure:
         const GHC.Num.$dmnegate_info;
         const 0;
 },
 sat_smrv_entry() //  [R1]
         { []
         }
     {offset
       cmDu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cmDv; else goto cmDw;
       cmDv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cmDw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = lvl_rlU7_closure;
           Sp = Sp - 32;
           call GHC.Num.fromInteger_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_smrv_info" {
     sat_smrv_info:
         const sat_smrv_entry;
         const 1;
         const 4294967312;
         const SmDC_srt;
 },
 GHC.Num.$dmnegate_entry() //  [R2, R3]
         { []
         }
     {offset
       cmDx: // global
           _smru::P64 = R3;
           _smrt::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cmDy; else goto cmDz;
       cmDz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cmDB; else goto cmDA;
       cmDB: // global
           HpAlloc = 24;
           goto cmDy;
       cmDy: // global
           R3 = _smru::P64;
           R2 = _smrt::P64;
           R1 = GHC.Num.$dmnegate_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cmDA: // global
           I64[Hp - 16] = sat_smrv_info;
           P64[Hp] = _smrt::P64;
           R2 = _smrt::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 16;
           P64[Sp - 8] = _smru::P64;
           Sp = Sp - 24;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$dmnegate_info" {
     GHC.Num.$dmnegate_info:
         const GHC.Num.$dmnegate_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SmDC_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.526847838 UTC

[section ""data" . GHC.Num.$dm-_closure" {
     GHC.Num.$dm-_closure:
         const GHC.Num.$dm-_info;
 },
 sat_smrz_entry() //  [R1]
         { []
         }
     {offset
       cmE0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cmE1; else goto cmE2;
       cmE1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cmE2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Num.negate_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_smrz_info" {
     sat_smrz_info:
         const sat_smrz_entry;
         const 2;
         const 18;
 },
 GHC.Num.$dm-_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cmE3: // global
           _smry::P64 = R4;
           _smrx::P64 = R3;
           _smrw::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto cmE4; else goto cmE5;
       cmE5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cmE7; else goto cmE6;
       cmE7: // global
           HpAlloc = 32;
           goto cmE4;
       cmE4: // global
           R4 = _smry::P64;
           R3 = _smrx::P64;
           R2 = _smrw::P64;
           R1 = GHC.Num.$dm-_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cmE6: // global
           I64[Hp - 24] = sat_smrz_info;
           P64[Hp - 8] = _smrw::P64;
           P64[Hp] = _smry::P64;
           R2 = _smrw::P64;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = _smrx::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 24;
           call GHC.Num.+_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.$dm-_info" {
     GHC.Num.$dm-_info:
         const GHC.Num.$dm-_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.532754955 UTC

[section ""data" . GHC.Num.subtract_closure" {
     GHC.Num.subtract_closure:
         const GHC.Num.subtract_info;
 },
 GHC.Num.subtract_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cmEr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cmEs; else goto cmEt;
       cmEs: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Num.subtract_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cmEt: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.Num.-_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.subtract_info" {
     GHC.Num.subtract_info:
         const GHC.Num.subtract_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.536141909 UTC

[section ""cstring" . GHC.Num.$trModule4_bytes" {
     GHC.Num.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.537771885 UTC

[section ""data" . GHC.Num.$trModule3_closure" {
     GHC.Num.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Num.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.539307883 UTC

[section ""cstring" . GHC.Num.$trModule2_bytes" {
     GHC.Num.$trModule2_bytes:
         I8[] [71,72,67,46,78,117,109]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.540899336 UTC

[section ""data" . GHC.Num.$trModule1_closure" {
     GHC.Num.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Num.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.543563049 UTC

[section ""data" . GHC.Num.$trModule_closure" {
     GHC.Num.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Num.$trModule3_closure+1;
         const GHC.Num.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.545321189 UTC

[section ""data" . $krep_rlU8_closure" {
     $krep_rlU8_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.547005181 UTC

[section ""data" . $krep1_rlU9_closure" {
     $krep1_rlU9_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.548604419 UTC

[section ""data" . GHC.Num.$tcNum1_closure" {
     GHC.Num.$tcNum1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep1_rlU9_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.550622795 UTC

[section ""data" . $krep2_rlUa_closure" {
     $krep2_rlUa_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.552767165 UTC

[section ""data" . $krep3_rlUb_closure" {
     $krep3_rlUb_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rlUa_closure+2;
         const $krep2_rlUa_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.55505152 UTC

[section ""data" . $krep4_rlUc_closure" {
     $krep4_rlUc_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rlUa_closure+2;
         const $krep3_rlUb_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.556909576 UTC

[section ""data" . $krep5_rlUd_closure" {
     $krep5_rlUd_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rlU8_closure+1;
         const $krep2_rlUa_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.558652457 UTC

[section ""cstring" . GHC.Num.$tcNum3_bytes" {
     GHC.Num.$tcNum3_bytes:
         I8[] [78,117,109]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.560373025 UTC

[section ""data" . GHC.Num.$tcNum2_closure" {
     GHC.Num.$tcNum2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Num.$tcNum3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.562392043 UTC

[section ""data" . GHC.Num.$tcNum_closure" {
     GHC.Num.$tcNum_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Num.$trModule_closure+1;
         const GHC.Num.$tcNum2_closure+1;
         const GHC.Num.$tcNum1_closure+4;
         const 4789207468288702218;
         const 12287762746798050066;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.564610972 UTC

[section ""data" . $krep6_rlUe_closure" {
     $krep6_rlUe_closure:
         const :_con_info;
         const $krep2_rlUa_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.566923144 UTC

[section ""data" . $krep7_rlUf_closure" {
     $krep7_rlUf_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Num.$tcNum_closure+1;
         const $krep6_rlUe_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.568778204 UTC

[section ""data" . $krep8_rlUg_closure" {
     $krep8_rlUg_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rlUd_closure+4;
         const $krep7_rlUf_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.571114461 UTC

[section ""data" . $krep9_rlUh_closure" {
     $krep9_rlUh_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rlUb_closure+4;
         const $krep8_rlUg_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.572919624 UTC

[section ""data" . $krep10_rlUi_closure" {
     $krep10_rlUi_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rlUb_closure+4;
         const $krep9_rlUh_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.575016729 UTC

[section ""data" . $krep11_rlUj_closure" {
     $krep11_rlUj_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rlUb_closure+4;
         const $krep10_rlUi_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.577122998 UTC

[section ""data" . $krep12_rlUk_closure" {
     $krep12_rlUk_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rlUc_closure+4;
         const $krep11_rlUj_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.579387773 UTC

[section ""data" . $krep13_rlUl_closure" {
     $krep13_rlUl_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rlUc_closure+4;
         const $krep12_rlUk_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.58106903 UTC

[section ""data" . GHC.Num.$tc'C:Num1_closure" {
     GHC.Num.$tc'C:Num1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rlUc_closure+4;
         const $krep13_rlUl_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.583338879 UTC

[section ""cstring" . GHC.Num.$tc'C:Num3_bytes" {
     GHC.Num.$tc'C:Num3_bytes:
         I8[] [39,67,58,78,117,109]
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.585271332 UTC

[section ""data" . GHC.Num.$tc'C:Num2_closure" {
     GHC.Num.$tc'C:Num2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Num.$tc'C:Num3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.587409054 UTC

[section ""data" . GHC.Num.$tc'C:Num_closure" {
     GHC.Num.$tc'C:Num_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Num.$trModule_closure+1;
         const GHC.Num.$tc'C:Num2_closure+1;
         const GHC.Num.$tc'C:Num1_closure+4;
         const 277567704124416124;
         const 17341550453118006986;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.590765223 UTC

[section ""data" . GHC.Num.C:Num_closure" {
     GHC.Num.C:Num_closure:
         const GHC.Num.C:Num_info;
 },
 GHC.Num.C:Num_slow() //  [R1]
         { []
         }
     {offset
       cmF2: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Num.C:Num_entry(R6,
                                    R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.Num.C:Num_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cmF7: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cmFb; else goto cmFa;
       cmFb: // global
           HpAlloc = 64;
           R1 = GHC.Num.C:Num_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cmFa: // global
           I64[Hp - 56] = GHC.Num.C:Num_con_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 55;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.C:Num_info" {
     GHC.Num.C:Num_info:
         const GHC.Num.C:Num_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const GHC.Num.C:Num_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.595475261 UTC

[section ""cstring" . imFn_str" {
     imFn_str:
         I8[] [98,97,115,101,58,71,72,67,46,78,117,109,46,67,58,78,117,109]
 },
 GHC.Num.C:Num_con_entry() //  [R1]
         { []
         }
     {offset
       cmFm: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Num.C:Num_con_info" {
     GHC.Num.C:Num_con_info:
         const GHC.Num.C:Num_con_entry;
         const 7;
         const 1;
         const imFn_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:55:00.598536979 UTC

[section ""relreadonly" . SmDC_srt" {
     SmDC_srt:
         const lvl_rlU7_closure;
         const GHC.Num.$dmnegate_closure;
 }]

