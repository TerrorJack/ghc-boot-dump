
==================== Pre unarise: ====================
2018-03-16 16:09:05.372323591 UTC

GHC.TopHandler.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.TopHandler.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TopHandler.$trModule4];

GHC.TopHandler.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.TopHandler"#;

GHC.TopHandler.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TopHandler.$trModule2];

GHC.TopHandler.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.TopHandler.$trModule3
                                     GHC.TopHandler.$trModule1];

GHC.TopHandler.runMainIO2
  :: Data.Typeable.Internal.TypeRep (GHC.Types.IO ())
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                11571292540224541508##
                14006894820825784566##
                GHC.Types.$trModule
                GHC.Types.$tcIO1
                0#
                GHC.Types.krep$*Arr*
                GHC.Types.[]
        of
        { (#,,,,#) ww8_sdQm9 [Occ=Once]
                   ww9_sdQma [Occ=Once]
                   ww10_sdQmb [Occ=Once]
                   ww11_sdQmc [Occ=Once]
                   ww12_sdQmd [Occ=Once] ->
              case
                  Data.Typeable.Internal.$wmkTrCon
                      2684808367141291271##
                      14290630168515401665##
                      GHC.Tuple.$trModule
                      GHC.Tuple.$tc()1
                      0#
                      GHC.Types.krep$*
                      GHC.Types.[]
              of
              { (#,,,,#) ww2_sdQmf [Occ=Once]
                         ww3_sdQmg [Occ=Once]
                         ww4_sdQmh [Occ=Once]
                         ww5_sdQmi [Occ=Once]
                         ww6_sdQmj [Occ=Once] ->
                    let {
                      sat_sdQml [Occ=Once] :: Data.Typeable.Internal.TypeRep ()
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww2_sdQmf
                                                                ww3_sdQmg
                                                                ww4_sdQmh
                                                                ww5_sdQmi
                                                                ww6_sdQmj]; } in
                    let {
                      sat_sdQmk [Occ=Once] :: Data.Typeable.Internal.TypeRep GHC.Types.IO
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww8_sdQm9
                                                                ww9_sdQma
                                                                ww10_sdQmb
                                                                ww11_sdQmc
                                                                ww12_sdQmd];
                    } in  Data.Typeable.Internal.mkTrApp sat_sdQmk sat_sdQml;
              };
        };

unreachable_rdQlR :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "If you can read this, shutdownHaskellAndExit did not exit."#;

unreachable1_rdQlS :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# unreachable_rdQlR;

GHC.TopHandler.flushStdHandles2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.IO.Handle.Internals.wantWritableHandle1
            GHC.IO.Handle.hFlush2
            GHC.IO.Handle.FD.stderr
            GHC.IO.Handle.Internals.flushWriteBuffer1
            eta_B1;

GHC.TopHandler.flushStdHandles3
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds1_sdQmm eta_sdQmn]
        case ds1_sdQmm of {
          GHC.Exception.SomeException _ [Occ=Dead] _ [Occ=Dead] ->
              (#,#) [eta_sdQmn GHC.Tuple.()];
        };

GHC.TopHandler.flushStdHandles4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.IO.Handle.Internals.wantWritableHandle1
            GHC.IO.Handle.hFlush2
            GHC.IO.Handle.FD.stdout
            GHC.IO.Handle.Internals.flushWriteBuffer1
            eta_B1;

GHC.TopHandler.flushStdHandles1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_sdQmr]
        case
            catch# [GHC.TopHandler.flushStdHandles4
                    GHC.TopHandler.flushStdHandles3
                    s_sdQmr]
        of
        { (#,#) ipv_sdQmt [Occ=Once] _ [Occ=Dead] ->
              catch# [GHC.TopHandler.flushStdHandles2
                      GHC.TopHandler.flushStdHandles3
                      ipv_sdQmt];
        };

GHC.TopHandler.flushStdHandles :: GHC.Types.IO ()
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.TopHandler.flushStdHandles1 eta_B1;

$wexitHelper_rdQlT
  :: forall a.
     Foreign.C.Types.CInt -> GHC.Prim.Int# -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,U(U)><S,U>, Unf=OtherCon []] =
    sat-only [] \r [w_sdQmv ww_sdQmw]
        let-no-escape {
          $j_sdQmx [Occ=Once*T[0], Dmd=<L,1*U>] :: GHC.Types.IO a_sdQcn
          [LclId[JoinId(0)], Unf=OtherCon []] =
              [w_sdQmv ww_sdQmw] \r []
                  let-no-escape {
                    $j1_sdQmy [Occ=Once*T[0], Dmd=<L,1*U>] :: GHC.Types.IO a_sdQcn
                    [LclId[JoinId(0)], Unf=OtherCon []] =
                        [w_sdQmv] \r []
                            let {
                              sat_sdQmF [Occ=Once]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_sdQcn #)
                              [LclId] =
                                  [w_sdQmv] \r [s_sdQmz]
                                      case w_sdQmv of {
                                        GHC.Int.I32# ds1_sdQmB [Occ=Once] ->
                                            case
                                                __pkg_ccall_GC base-4.11.0.0 [255#
                                                                              ds1_sdQmB
                                                                              s_sdQmz]
                                            of
                                            { Unit# ds2_sdQmE [Occ=Once] ->
                                                  GHC.IO.failIO1 unreachable1_rdQlS ds2_sdQmE;
                                            };
                                      };
                            } in  sat_sdQmF;
                  } in 
                    case >=# [ww_sdQmw -127#] of {
                      __DEFAULT -> $j1_sdQmy;
                      1# ->
                          case <=# [ww_sdQmw -1#] of {
                            __DEFAULT -> $j1_sdQmy;
                            1# ->
                                let {
                                  sat_sdQmQ [Occ=Once]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_sdQcn #)
                                  [LclId] =
                                      [w_sdQmv ww_sdQmw] \r [s_sdQmI]
                                          case w_sdQmv of {
                                            GHC.Int.I32# ds1_sdQmK [Occ=Once] ->
                                                case negateInt# [ww_sdQmw] of sat_sdQmM {
                                                  __DEFAULT ->
                                                      case narrow32Int# [sat_sdQmM] of sat_sdQmN {
                                                        __DEFAULT ->
                                                            case
                                                                __pkg_ccall_GC base-4.11.0.0 [sat_sdQmN
                                                                                              ds1_sdQmK
                                                                                              s_sdQmI]
                                                            of
                                                            { Unit# ds2_sdQmP [Occ=Once] ->
                                                                  GHC.IO.failIO1
                                                                      unreachable1_rdQlS ds2_sdQmP;
                                                            };
                                                      };
                                                };
                                          };
                                } in  sat_sdQmQ;
                          };
                    };
        } in 
          case >=# [ww_sdQmw 0#] of {
            __DEFAULT -> $j_sdQmx;
            1# ->
                case <=# [ww_sdQmw 255#] of {
                  __DEFAULT -> $j_sdQmx;
                  1# ->
                      let {
                        sat_sdQn0 [Occ=Once]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_sdQcn #)
                        [LclId] =
                            [w_sdQmv ww_sdQmw] \r [s_sdQmT]
                                case w_sdQmv of {
                                  GHC.Int.I32# ds1_sdQmV [Occ=Once] ->
                                      case narrow32Int# [ww_sdQmw] of sat_sdQmX {
                                        __DEFAULT ->
                                            case
                                                __pkg_ccall_GC base-4.11.0.0 [sat_sdQmX
                                                                              ds1_sdQmV
                                                                              s_sdQmT]
                                            of
                                            { Unit# ds2_sdQmZ [Occ=Once] ->
                                                  GHC.IO.failIO1 unreachable1_rdQlS ds2_sdQmZ;
                                            };
                                      };
                                };
                      } in  sat_sdQn0;
                };
          };

safeExit1_rdQlU :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [0#];

safeExit_rdPtY :: forall a. GHC.Types.Int -> GHC.Types.IO a
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_sdQn1]
        case w_sdQn1 of {
          GHC.Types.I# ww1_sdQn3 [Occ=Once] ->
              $wexitHelper_rdQlT safeExit1_rdQlU ww1_sdQn3;
        };

exitInterrupted_rdPu2 :: forall a. GHC.Types.IO a
[GblId] =
    [] \u [] $wexitHelper_rdQlT safeExit1_rdQlU -2#;

lvl_rdQlV :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

lvl1_rdQlW :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

msgStr_rdQlX :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "encountered an exception while trying to report an exception.\n\
    \One possible reason for this is that we failed while trying to encode an error message. Check that your locale is configured properly."#;

msgStr1_rdQlY :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# msgStr_rdQlX;

str_rdQlZ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "%s"#;

str1_rdQm0 :: GHC.Base.String
[GblId] =
    [] \u [] GHC.CString.unpackCString# str_rdQlZ;

lvl2_rdQm1 :: GHC.Types.Int
[GblId] =
    [] \u []
        case GHC.List.$wlenAcc msgStr1_rdQlY 0# of v_sdQn4 {
          __DEFAULT -> GHC.Types.I# [v_sdQn4];
        };

lvl3_rdQm2 :: GHC.Types.Int
[GblId] =
    [] \u []
        case GHC.List.$wlenAcc str1_rdQm0 0# of v_sdQn5 {
          __DEFAULT -> GHC.Types.I# [v_sdQn5];
        };

lvl4_rdQm3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

lvl5_rdQm4 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [251#];

real_handler_rdQm5
  :: forall a.
     (GHC.Types.Int -> GHC.Types.IO a)
     -> GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Str=<L,C(C1(U(U,U)))><S,U><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [exit_sdQn6 se_sdQn7 s_sdQn8]
        case
            catch# [GHC.TopHandler.flushStdHandles4
                    GHC.TopHandler.flushStdHandles3
                    s_sdQn8]
        of
        { (#,#) ipv_sdQna [Occ=Once] _ [Occ=Dead] ->
              case
                  catch# [GHC.TopHandler.flushStdHandles2
                          GHC.TopHandler.flushStdHandles3
                          ipv_sdQna]
              of
              { (#,#) ipv2_sdQnd _ [Occ=Dead] ->
                    let-no-escape {
                      fail_sdQnf [Occ=Once*!T[1], Dmd=<L,1*C1(U(U,U))>]
                        :: GHC.Prim.Void#
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPA7 #)
                      [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                          sat-only [exit_sdQn6 se_sdQn7 ipv2_sdQnd] \r [ds_sdQng]
                              case se_sdQn7 of wild_sdQnh {
                                GHC.Exception.SomeException $dException1_sdQni
                                                            e2_sdQnj [Occ=Once*] ->
                                    case
                                        GHC.Exception.$p1Exception $dException1_sdQni
                                    of
                                    sat_sdQnk
                                    { __DEFAULT ->
                                          case
                                              Data.Typeable.Internal.sameTypeRep
                                                  sat_sdQnk GHC.IO.Exception.$fExceptionExitCode4
                                          of
                                          { GHC.Types.False ->
                                                let {
                                                  sat_sdQq4 [Occ=Once]
                                                    :: GHC.Exception.SomeException
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             a_adPA7 #)
                                                  [LclId] =
                                                      [exit_sdQn6] \r [e4_sdQoX eta_sdQoY]
                                                          case e4_sdQoX of wild2_sdQoZ {
                                                            GHC.Exception.SomeException $dException2_sdQp0 [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                case
                                                                    GHC.Exception.$p1Exception
                                                                        $dException2_sdQp0
                                                                of
                                                                sat_sdQp2
                                                                { __DEFAULT ->
                                                                      case
                                                                          Data.Typeable.Internal.sameTypeRep
                                                                              sat_sdQp2
                                                                              GHC.IO.Exception.$fExceptionIOException4
                                                                      of
                                                                      { GHC.Types.False ->
                                                                            raiseIO# [wild2_sdQoZ
                                                                                      eta_sdQoY];
                                                                        GHC.Types.True ->
                                                                            case lvl3_rdQm2 of {
                                                                              GHC.Types.I# v1_sdQp5 [Occ=Once] ->
                                                                                  case
                                                                                      +# [v1_sdQp5
                                                                                          1#]
                                                                                  of
                                                                                  sat_sdQp6
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            newAlignedPinnedByteArray# [sat_sdQp6
                                                                                                                        1#
                                                                                                                        eta_sdQoY]
                                                                                        of
                                                                                        { (#,#) ipv4_sdQp8 [Occ=Once]
                                                                                                ipv5_sdQp9 [Occ=Once] ->
                                                                                              case
                                                                                                  unsafeFreezeByteArray# [ipv5_sdQp9
                                                                                                                          ipv4_sdQp8]
                                                                                              of
                                                                                              { (#,#) ipv6_sdQpb [Occ=Once]
                                                                                                      ipv7_sdQpc ->
                                                                                                    case
                                                                                                        byteArrayContents# [ipv7_sdQpc]
                                                                                                    of
                                                                                                    ptr_sdQpd [Dmd=<S,U>]
                                                                                                    { __DEFAULT ->
                                                                                                          let-no-escape {
                                                                                                            exit1_sdQpe [Occ=OnceL!T[2],
                                                                                                                         Dmd=<C(C(S)),C(C1(U))>]
                                                                                                              :: GHC.Prim.Int#
                                                                                                                 -> GHC.Prim.State#
                                                                                                                      GHC.Prim.RealWorld
                                                                                                                 -> (# GHC.Prim.State#
                                                                                                                         GHC.Prim.RealWorld,
                                                                                                                       a_adPA7 #)
                                                                                                            [LclId[JoinId(2)],
                                                                                                             Arity=2,
                                                                                                             Str=<S,U><S,U>,
                                                                                                             Unf=OtherCon []] =
                                                                                                                sat-only [exit_sdQn6
                                                                                                                          ipv7_sdQpc
                                                                                                                          ptr_sdQpd] \r [ww_sdQpf
                                                                                                                                         w_sdQpg]
                                                                                                                    case
                                                                                                                        writeInt8OffAddr# [ptr_sdQpd
                                                                                                                                           ww_sdQpf
                                                                                                                                           0#
                                                                                                                                           w_sdQpg]
                                                                                                                    of
                                                                                                                    s2_sdQph
                                                                                                                    { __DEFAULT ->
                                                                                                                          case
                                                                                                                              lvl2_rdQm1
                                                                                                                          of
                                                                                                                          { GHC.Types.I# v3_sdQpj [Occ=Once] ->
                                                                                                                                case
                                                                                                                                    +# [v3_sdQpj
                                                                                                                                        1#]
                                                                                                                                of
                                                                                                                                sat_sdQpk
                                                                                                                                { __DEFAULT ->
                                                                                                                                      case
                                                                                                                                          newAlignedPinnedByteArray# [sat_sdQpk
                                                                                                                                                                      1#
                                                                                                                                                                      s2_sdQph]
                                                                                                                                      of
                                                                                                                                      { (#,#) ipv8_sdQpm [Occ=Once]
                                                                                                                                              ipv9_sdQpn [Occ=Once] ->
                                                                                                                                            case
                                                                                                                                                unsafeFreezeByteArray# [ipv9_sdQpn
                                                                                                                                                                        ipv8_sdQpm]
                                                                                                                                            of
                                                                                                                                            { (#,#) ipv10_sdQpp [Occ=Once]
                                                                                                                                                    ipv11_sdQpq ->
                                                                                                                                                  case
                                                                                                                                                      byteArrayContents# [ipv11_sdQpq]
                                                                                                                                                  of
                                                                                                                                                  ptr1_sdQpr [Dmd=<S,U>]
                                                                                                                                                  { __DEFAULT ->
                                                                                                                                                        let-no-escape {
                                                                                                                                                          exit2_sdQps [Occ=OnceL!T[2],
                                                                                                                                                                       Dmd=<C(C(S)),C(C1(U))>]
                                                                                                                                                            :: GHC.Prim.Int#
                                                                                                                                                               -> GHC.Prim.State#
                                                                                                                                                                    GHC.Prim.RealWorld
                                                                                                                                                               -> (# GHC.Prim.State#
                                                                                                                                                                       GHC.Prim.RealWorld,
                                                                                                                                                                     a_adPA7 #)
                                                                                                                                                          [LclId[JoinId(2)],
                                                                                                                                                           Arity=2,
                                                                                                                                                           Str=<S,U><S,U>,
                                                                                                                                                           Unf=OtherCon []] =
                                                                                                                                                              sat-only [exit_sdQn6
                                                                                                                                                                        ipv7_sdQpc
                                                                                                                                                                        ptr_sdQpd
                                                                                                                                                                        ipv11_sdQpq
                                                                                                                                                                        ptr1_sdQpr] \r [ww1_sdQpt
                                                                                                                                                                                        w1_sdQpu]
                                                                                                                                                                  case
                                                                                                                                                                      writeInt8OffAddr# [ptr1_sdQpr
                                                                                                                                                                                         ww1_sdQpt
                                                                                                                                                                                         0#
                                                                                                                                                                                         w1_sdQpu]
                                                                                                                                                                  of
                                                                                                                                                                  s1_sdQpv
                                                                                                                                                                  { __DEFAULT ->
                                                                                                                                                                        case
                                                                                                                                                                            __pkg_ccall base-4.11.0.0 [ptr_sdQpd
                                                                                                                                                                                                       ptr1_sdQpr
                                                                                                                                                                                                       s1_sdQpv]
                                                                                                                                                                        of
                                                                                                                                                                        { Unit# ds7_sdQpy [Occ=Once] ->
                                                                                                                                                                              case
                                                                                                                                                                                  exit_sdQn6
                                                                                                                                                                                      lvl_rdQlV
                                                                                                                                                                                      ds7_sdQpy
                                                                                                                                                                              of
                                                                                                                                                                              { (#,#) ipv12_sdQpA [Occ=Once]
                                                                                                                                                                                      ipv13_sdQpB [Occ=Once] ->
                                                                                                                                                                                    case
                                                                                                                                                                                        touch# [ipv11_sdQpq
                                                                                                                                                                                                ipv12_sdQpA]
                                                                                                                                                                                    of
                                                                                                                                                                                    s4_sdQpC
                                                                                                                                                                                    { __DEFAULT ->
                                                                                                                                                                                          case
                                                                                                                                                                                              touch# [ipv7_sdQpc
                                                                                                                                                                                                      s4_sdQpC]
                                                                                                                                                                                          of
                                                                                                                                                                                          s3_sdQpD
                                                                                                                                                                                          { __DEFAULT ->
                                                                                                                                                                                                (#,#) [s3_sdQpD
                                                                                                                                                                                                       ipv13_sdQpB];
                                                                                                                                                                                          };
                                                                                                                                                                                    };
                                                                                                                                                                              };
                                                                                                                                                                        };
                                                                                                                                                                  };
                                                                                                                                                        } in 
                                                                                                                                                          let-no-escape {
                                                                                                                                                            $wgo_sdQpE [InlPrag=NOUSERINLINE[0],
                                                                                                                                                                        Occ=LoopBreakerT[3]]
                                                                                                                                                              :: [GHC.Types.Char]
                                                                                                                                                                 -> GHC.Prim.Int#
                                                                                                                                                                 -> GHC.Prim.State#
                                                                                                                                                                      GHC.Prim.RealWorld
                                                                                                                                                                 -> (# GHC.Prim.State#
                                                                                                                                                                         GHC.Prim.RealWorld,
                                                                                                                                                                       a_adPA7 #)
                                                                                                                                                            [LclId[JoinId(3)],
                                                                                                                                                             Arity=3,
                                                                                                                                                             Str=<S,1*U><S,U><S,U>,
                                                                                                                                                             Unf=OtherCon []] =
                                                                                                                                                                sat-only [ptr1_sdQpr
                                                                                                                                                                          exit2_sdQps
                                                                                                                                                                          $wgo_sdQpE] \r [w1_sdQpF
                                                                                                                                                                                          ww1_sdQpG
                                                                                                                                                                                          w2_sdQpH]
                                                                                                                                                                    case
                                                                                                                                                                        w1_sdQpF
                                                                                                                                                                    of
                                                                                                                                                                    { [] ->
                                                                                                                                                                          exit2_sdQps
                                                                                                                                                                              ww1_sdQpG
                                                                                                                                                                              w2_sdQpH;
                                                                                                                                                                      : c_sdQpJ [Occ=Once!]
                                                                                                                                                                        cs_sdQpK [Occ=Once] ->
                                                                                                                                                                          case
                                                                                                                                                                              c_sdQpJ
                                                                                                                                                                          of
                                                                                                                                                                          { GHC.Types.C# c#_sdQpM [Occ=Once] ->
                                                                                                                                                                                case
                                                                                                                                                                                    ord# [c#_sdQpM]
                                                                                                                                                                                of
                                                                                                                                                                                sat_sdQpN
                                                                                                                                                                                { __DEFAULT ->
                                                                                                                                                                                      case
                                                                                                                                                                                          narrow8Int# [sat_sdQpN]
                                                                                                                                                                                      of
                                                                                                                                                                                      sat_sdQpO
                                                                                                                                                                                      { __DEFAULT ->
                                                                                                                                                                                            case
                                                                                                                                                                                                writeInt8OffAddr# [ptr1_sdQpr
                                                                                                                                                                                                                   ww1_sdQpG
                                                                                                                                                                                                                   sat_sdQpO
                                                                                                                                                                                                                   w2_sdQpH]
                                                                                                                                                                                            of
                                                                                                                                                                                            s1_sdQpP
                                                                                                                                                                                            { __DEFAULT ->
                                                                                                                                                                                                  case
                                                                                                                                                                                                      +# [ww1_sdQpG
                                                                                                                                                                                                          1#]
                                                                                                                                                                                                  of
                                                                                                                                                                                                  sat_sdQpQ
                                                                                                                                                                                                  { __DEFAULT ->
                                                                                                                                                                                                        $wgo_sdQpE
                                                                                                                                                                                                            cs_sdQpK
                                                                                                                                                                                                            sat_sdQpQ
                                                                                                                                                                                                            s1_sdQpP;
                                                                                                                                                                                                  };
                                                                                                                                                                                            };
                                                                                                                                                                                      };
                                                                                                                                                                                };
                                                                                                                                                                          };
                                                                                                                                                                    };
                                                                                                                                                          } in 
                                                                                                                                                            $wgo_sdQpE
                                                                                                                                                                msgStr1_rdQlY
                                                                                                                                                                0#
                                                                                                                                                                ipv10_sdQpp;
                                                                                                                                                  };
                                                                                                                                            };
                                                                                                                                      };
                                                                                                                                };
                                                                                                                          };
                                                                                                                    };
                                                                                                          } in 
                                                                                                            let-no-escape {
                                                                                                              $wgo_sdQpR [InlPrag=NOUSERINLINE[0],
                                                                                                                          Occ=LoopBreakerT[3]]
                                                                                                                :: [GHC.Types.Char]
                                                                                                                   -> GHC.Prim.Int#
                                                                                                                   -> GHC.Prim.State#
                                                                                                                        GHC.Prim.RealWorld
                                                                                                                   -> (# GHC.Prim.State#
                                                                                                                           GHC.Prim.RealWorld,
                                                                                                                         a_adPA7 #)
                                                                                                              [LclId[JoinId(3)],
                                                                                                               Arity=3,
                                                                                                               Str=<S,1*U><S,U><S,U>,
                                                                                                               Unf=OtherCon []] =
                                                                                                                  sat-only [ptr_sdQpd
                                                                                                                            exit1_sdQpe
                                                                                                                            $wgo_sdQpR] \r [w_sdQpS
                                                                                                                                            ww_sdQpT
                                                                                                                                            w1_sdQpU]
                                                                                                                      case
                                                                                                                          w_sdQpS
                                                                                                                      of
                                                                                                                      { [] ->
                                                                                                                            exit1_sdQpe
                                                                                                                                ww_sdQpT
                                                                                                                                w1_sdQpU;
                                                                                                                        : c_sdQpW [Occ=Once!]
                                                                                                                          cs_sdQpX [Occ=Once] ->
                                                                                                                            case
                                                                                                                                c_sdQpW
                                                                                                                            of
                                                                                                                            { GHC.Types.C# c#_sdQpZ [Occ=Once] ->
                                                                                                                                  case
                                                                                                                                      ord# [c#_sdQpZ]
                                                                                                                                  of
                                                                                                                                  sat_sdQq0
                                                                                                                                  { __DEFAULT ->
                                                                                                                                        case
                                                                                                                                            narrow8Int# [sat_sdQq0]
                                                                                                                                        of
                                                                                                                                        sat_sdQq1
                                                                                                                                        { __DEFAULT ->
                                                                                                                                              case
                                                                                                                                                  writeInt8OffAddr# [ptr_sdQpd
                                                                                                                                                                     ww_sdQpT
                                                                                                                                                                     sat_sdQq1
                                                                                                                                                                     w1_sdQpU]
                                                                                                                                              of
                                                                                                                                              s2_sdQq2
                                                                                                                                              { __DEFAULT ->
                                                                                                                                                    case
                                                                                                                                                        +# [ww_sdQpT
                                                                                                                                                            1#]
                                                                                                                                                    of
                                                                                                                                                    sat_sdQq3
                                                                                                                                                    { __DEFAULT ->
                                                                                                                                                          $wgo_sdQpR
                                                                                                                                                              cs_sdQpX
                                                                                                                                                              sat_sdQq3
                                                                                                                                                              s2_sdQq2;
                                                                                                                                                    };
                                                                                                                                              };
                                                                                                                                        };
                                                                                                                                  };
                                                                                                                            };
                                                                                                                      };
                                                                                                            } in 
                                                                                                              $wgo_sdQpR
                                                                                                                  str1_rdQm0
                                                                                                                  0#
                                                                                                                  ipv6_sdQpb;
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                          }; } in
                                                let {
                                                  sat_sdQoW [Occ=Once, Dmd=<L,1*C1(U)>]
                                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             a_adPA7 #)
                                                  [LclId] =
                                                      [exit_sdQn6
                                                       wild_sdQnh
                                                       $dException1_sdQni
                                                       e2_sdQnj] \s []
                                                          case
                                                              GHC.Exception.$p1Exception
                                                                  $dException1_sdQni
                                                          of
                                                          sat_sdQnm
                                                          { __DEFAULT ->
                                                                case
                                                                    Data.Typeable.Internal.sameTypeRep
                                                                        sat_sdQnm
                                                                        GHC.IO.Exception.$fExceptionIOException4
                                                                of
                                                                { GHC.Types.False ->
                                                                      let {
                                                                        sat_sdQnx [Occ=OnceT[0]]
                                                                          :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   a_adPA7 #)
                                                                        [LclId] =
                                                                            [exit_sdQn6
                                                                             wild_sdQnh] \r [s1_sdQno]
                                                                                case
                                                                                    GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                of
                                                                                { GHC.STRef.STRef var#_sdQnq [Occ=Once] ->
                                                                                      case
                                                                                          readMutVar# [var#_sdQnq
                                                                                                       s1_sdQno]
                                                                                      of
                                                                                      { (#,#) ipv4_sdQns [Occ=Once]
                                                                                              ipv5_sdQnt [Occ=Once!] ->
                                                                                            case
                                                                                                ipv5_sdQnt
                                                                                                    wild_sdQnh
                                                                                                    ipv4_sdQns
                                                                                            of
                                                                                            { (#,#) ipv6_sdQnv [Occ=Once]
                                                                                                    _ [Occ=Dead] ->
                                                                                                  exit_sdQn6
                                                                                                      lvl_rdQlV
                                                                                                      ipv6_sdQnv;
                                                                                            };
                                                                                      };
                                                                                };
                                                                      } in  sat_sdQnx;
                                                                  GHC.Types.True ->
                                                                      case e2_sdQnj of {
                                                                        GHC.IO.Exception.IOError ds3_sdQnz [Occ=Once!]
                                                                                                 ds4_sdQnA [Occ=Once!]
                                                                                                 _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 ds7_sdQnD [Occ=Once!]
                                                                                                 _ [Occ=Dead] ->
                                                                            case ds4_sdQnA of {
                                                                              __DEFAULT ->
                                                                                  let {
                                                                                    sat_sdQnP [Occ=OnceT[0]]
                                                                                      :: GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld
                                                                                         -> (# GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld,
                                                                                               a_adPA7 #)
                                                                                    [LclId] =
                                                                                        [exit_sdQn6
                                                                                         wild_sdQnh] \r [s1_sdQnG]
                                                                                            case
                                                                                                GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                            of
                                                                                            { GHC.STRef.STRef var#_sdQnI [Occ=Once] ->
                                                                                                  case
                                                                                                      readMutVar# [var#_sdQnI
                                                                                                                   s1_sdQnG]
                                                                                                  of
                                                                                                  { (#,#) ipv4_sdQnK [Occ=Once]
                                                                                                          ipv5_sdQnL [Occ=Once!] ->
                                                                                                        case
                                                                                                            ipv5_sdQnL
                                                                                                                wild_sdQnh
                                                                                                                ipv4_sdQnK
                                                                                                        of
                                                                                                        { (#,#) ipv6_sdQnN [Occ=Once]
                                                                                                                _ [Occ=Dead] ->
                                                                                                              exit_sdQn6
                                                                                                                  lvl_rdQlV
                                                                                                                  ipv6_sdQnN;
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                  } in  sat_sdQnP;
                                                                              GHC.IO.Exception.ResourceVanished ->
                                                                                  case
                                                                                      ds7_sdQnD
                                                                                  of
                                                                                  { GHC.Base.Nothing ->
                                                                                        let {
                                                                                          sat_sdQo0 [Occ=OnceT[0]]
                                                                                            :: GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld,
                                                                                                     a_adPA7 #)
                                                                                          [LclId] =
                                                                                              [exit_sdQn6
                                                                                               wild_sdQnh] \r [s1_sdQnR]
                                                                                                  case
                                                                                                      GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                  of
                                                                                                  { GHC.STRef.STRef var#_sdQnT [Occ=Once] ->
                                                                                                        case
                                                                                                            readMutVar# [var#_sdQnT
                                                                                                                         s1_sdQnR]
                                                                                                        of
                                                                                                        { (#,#) ipv4_sdQnV [Occ=Once]
                                                                                                                ipv5_sdQnW [Occ=Once!] ->
                                                                                                              case
                                                                                                                  ipv5_sdQnW
                                                                                                                      wild_sdQnh
                                                                                                                      ipv4_sdQnV
                                                                                                              of
                                                                                                              { (#,#) ipv6_sdQnY [Occ=Once]
                                                                                                                      _ [Occ=Dead] ->
                                                                                                                    exit_sdQn6
                                                                                                                        lvl_rdQlV
                                                                                                                        ipv6_sdQnY;
                                                                                                              };
                                                                                                        };
                                                                                                  };
                                                                                        } in 
                                                                                          sat_sdQo0;
                                                                                    GHC.Base.Just ioe_sdQo1 [Occ=Once] ->
                                                                                        case
                                                                                            ds3_sdQnz
                                                                                        of
                                                                                        { GHC.Base.Nothing ->
                                                                                              let {
                                                                                                sat_sdQoc [Occ=OnceT[0]]
                                                                                                  :: GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                     -> (# GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld,
                                                                                                           a_adPA7 #)
                                                                                                [LclId] =
                                                                                                    [exit_sdQn6
                                                                                                     wild_sdQnh] \r [s1_sdQo3]
                                                                                                        case
                                                                                                            GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                        of
                                                                                                        { GHC.STRef.STRef var#_sdQo5 [Occ=Once] ->
                                                                                                              case
                                                                                                                  readMutVar# [var#_sdQo5
                                                                                                                               s1_sdQo3]
                                                                                                              of
                                                                                                              { (#,#) ipv4_sdQo7 [Occ=Once]
                                                                                                                      ipv5_sdQo8 [Occ=Once!] ->
                                                                                                                    case
                                                                                                                        ipv5_sdQo8
                                                                                                                            wild_sdQnh
                                                                                                                            ipv4_sdQo7
                                                                                                                    of
                                                                                                                    { (#,#) ipv6_sdQoa [Occ=Once]
                                                                                                                            _ [Occ=Dead] ->
                                                                                                                          exit_sdQn6
                                                                                                                              lvl_rdQlV
                                                                                                                              ipv6_sdQoa;
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                              } in 
                                                                                                sat_sdQoc;
                                                                                          GHC.Base.Just hdl_sdQod [Occ=Once!] ->
                                                                                              case
                                                                                                  ioe_sdQo1
                                                                                              of
                                                                                              { GHC.Int.I32# x_sdQof [Occ=Once!] ->
                                                                                                    case
                                                                                                        x_sdQof
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          let {
                                                                                                            sat_sdQoq [Occ=OnceT[0]]
                                                                                                              :: GHC.Prim.State#
                                                                                                                   GHC.Prim.RealWorld
                                                                                                                 -> (# GHC.Prim.State#
                                                                                                                         GHC.Prim.RealWorld,
                                                                                                                       a_adPA7 #)
                                                                                                            [LclId] =
                                                                                                                [exit_sdQn6
                                                                                                                 wild_sdQnh] \r [s1_sdQoh]
                                                                                                                    case
                                                                                                                        GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                                    of
                                                                                                                    { GHC.STRef.STRef var#_sdQoj [Occ=Once] ->
                                                                                                                          case
                                                                                                                              readMutVar# [var#_sdQoj
                                                                                                                                           s1_sdQoh]
                                                                                                                          of
                                                                                                                          { (#,#) ipv4_sdQol [Occ=Once]
                                                                                                                                  ipv5_sdQom [Occ=Once!] ->
                                                                                                                                case
                                                                                                                                    ipv5_sdQom
                                                                                                                                        wild_sdQnh
                                                                                                                                        ipv4_sdQol
                                                                                                                                of
                                                                                                                                { (#,#) ipv6_sdQoo [Occ=Once]
                                                                                                                                        _ [Occ=Dead] ->
                                                                                                                                      exit_sdQn6
                                                                                                                                          lvl_rdQlV
                                                                                                                                          ipv6_sdQoo;
                                                                                                                                };
                                                                                                                          };
                                                                                                                    };
                                                                                                          } in 
                                                                                                            sat_sdQoq;
                                                                                                      32# ->
                                                                                                          let-no-escape {
                                                                                                            $j_sdQor [Occ=Once*T[0],
                                                                                                                      Dmd=<L,1*C1(U)>]
                                                                                                              :: GHC.Prim.State#
                                                                                                                   GHC.Prim.RealWorld
                                                                                                                 -> (# GHC.Prim.State#
                                                                                                                         GHC.Prim.RealWorld,
                                                                                                                       a_adPA7 #)
                                                                                                            [LclId[JoinId(0)],
                                                                                                             Unf=OtherCon []] =
                                                                                                                [exit_sdQn6
                                                                                                                 wild_sdQnh] \r []
                                                                                                                    let {
                                                                                                                      sat_sdQoB [Occ=OnceT[0]]
                                                                                                                        :: GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld
                                                                                                                           -> (# GHC.Prim.State#
                                                                                                                                   GHC.Prim.RealWorld,
                                                                                                                                 a_adPA7 #)
                                                                                                                      [LclId] =
                                                                                                                          [exit_sdQn6
                                                                                                                           wild_sdQnh] \r [s1_sdQos]
                                                                                                                              case
                                                                                                                                  GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                                              of
                                                                                                                              { GHC.STRef.STRef var#_sdQou [Occ=Once] ->
                                                                                                                                    case
                                                                                                                                        readMutVar# [var#_sdQou
                                                                                                                                                     s1_sdQos]
                                                                                                                                    of
                                                                                                                                    { (#,#) ipv4_sdQow [Occ=Once]
                                                                                                                                            ipv5_sdQox [Occ=Once!] ->
                                                                                                                                          case
                                                                                                                                              ipv5_sdQox
                                                                                                                                                  wild_sdQnh
                                                                                                                                                  ipv4_sdQow
                                                                                                                                          of
                                                                                                                                          { (#,#) ipv6_sdQoz [Occ=Once]
                                                                                                                                                  _ [Occ=Dead] ->
                                                                                                                                                exit_sdQn6
                                                                                                                                                    lvl_rdQlV
                                                                                                                                                    ipv6_sdQoz;
                                                                                                                                          };
                                                                                                                                    };
                                                                                                                              };
                                                                                                                    } in 
                                                                                                                      sat_sdQoB;
                                                                                                          } in 
                                                                                                            case
                                                                                                                hdl_sdQod
                                                                                                            of
                                                                                                            { GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                                                                                             dt_sdQoE [Occ=Once] ->
                                                                                                                  case
                                                                                                                      GHC.IO.Handle.FD.stdout
                                                                                                                  of
                                                                                                                  { GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                                                                                                   dt1_sdQoH [Occ=Once] ->
                                                                                                                        case
                                                                                                                            sameMVar# [dt_sdQoE
                                                                                                                                       dt1_sdQoH]
                                                                                                                        of
                                                                                                                        { __DEFAULT ->
                                                                                                                              $j_sdQor;
                                                                                                                          1# ->
                                                                                                                              exit_sdQn6
                                                                                                                                  lvl1_rdQlW;
                                                                                                                        };
                                                                                                                    GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                                                                                                     _ [Occ=Dead]
                                                                                                                                                     _ [Occ=Dead] ->
                                                                                                                        $j_sdQor;
                                                                                                                  };
                                                                                                              GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                                                                                               dt_sdQoN [Occ=Once]
                                                                                                                                               _ [Occ=Dead] ->
                                                                                                                  case
                                                                                                                      GHC.IO.Handle.FD.stdout
                                                                                                                  of
                                                                                                                  { GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                                                                                                   _ [Occ=Dead] ->
                                                                                                                        $j_sdQor;
                                                                                                                    GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                                                                                                     dt2_sdQoT [Occ=Once]
                                                                                                                                                     _ [Occ=Dead] ->
                                                                                                                        case
                                                                                                                            sameMVar# [dt_sdQoN
                                                                                                                                       dt2_sdQoT]
                                                                                                                        of
                                                                                                                        { __DEFAULT ->
                                                                                                                              $j_sdQor;
                                                                                                                          1# ->
                                                                                                                              exit_sdQn6
                                                                                                                                  lvl1_rdQlW;
                                                                                                                        };
                                                                                                                  };
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                } in  catch# [sat_sdQoW sat_sdQq4 ipv2_sdQnd];
                                            GHC.Types.True ->
                                                case e2_sdQnj of {
                                                  GHC.IO.Exception.ExitSuccess ->
                                                      exit_sdQn6 lvl1_rdQlW ipv2_sdQnd;
                                                  GHC.IO.Exception.ExitFailure n_sdQq6 [Occ=Once] ->
                                                      exit_sdQn6 n_sdQq6 ipv2_sdQnd;
                                                };
                                          };
                                    };
                              };
                    } in 
                      case
                          GHC.IO.Exception.$fExceptionAsyncException_$cfromException se_sdQn7
                      of
                      { GHC.Base.Nothing -> fail_sdQnf GHC.Prim.void#;
                        GHC.Base.Just ds_sdQq8 [Occ=Once!] ->
                            case ds_sdQq8 of {
                              GHC.IO.Exception.StackOverflow ->
                                  case myThreadId# [ipv2_sdQnd] of {
                                    (#,#) ipv4_sdQqb [Occ=Once] ipv5_sdQqc [Occ=Once] ->
                                        case __pkg_ccall base-4.11.0.0 [ipv5_sdQqc ipv4_sdQqb] of {
                                          Unit# ds4_sdQqf [Occ=Once] ->
                                              exit_sdQn6 lvl4_rdQm3 ds4_sdQqf;
                                        };
                                  };
                              GHC.IO.Exception.HeapOverflow ->
                                  case __pkg_ccall base-4.11.0.0 [ipv2_sdQnd] of {
                                    Unit# ds3_sdQqi [Occ=Once] -> exit_sdQn6 lvl5_rdQm4 ds3_sdQqi;
                                  };
                              GHC.IO.Exception.ThreadKilled -> fail_sdQnf GHC.Prim.void#;
                              GHC.IO.Exception.UserInterrupt -> exitInterrupted_rdPu2 ipv2_sdQnd;
                            };
                      };
              };
        };

GHC.TopHandler.runIO2
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [e1_sdQqj eta_sdQqk]
        GHC.TopHandler.runIO3 e1_sdQqj eta_sdQqk;
GHC.TopHandler.runIO3 [Occ=LoopBreaker]
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [err_sdQql eta_sdQqm]
        let {
          sat_sdQqn [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPBc #)
          [LclId] =
              [err_sdQql] \r [eta_B1]
                  real_handler_rdQm5 safeExit_rdPtY err_sdQql eta_B1;
        } in  catch# [sat_sdQqn GHC.TopHandler.runIO2 eta_sdQqm];

GHC.TopHandler.topHandler
  :: forall a. GHC.Exception.SomeException -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TopHandler.runIO3 eta_B2 eta_B1;

GHC.TopHandler.runNonIO1
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [a1_sdQqo eta_sdQqp]
        let {
          sat_sdQqt [Occ=Once, Dmd=<L,1*C1(U)>]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPBl #)
          [LclId] =
              [a1_sdQqo] \s []
                  case a1_sdQqo of a2_sdQqq {
                    __DEFAULT ->
                        let {
                          sat_sdQqs [Occ=OnceT[0]]
                            :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPBl #)
                          [LclId] =
                              [a2_sdQqq] \r [s_sdQqr] (#,#) [s_sdQqr a2_sdQqq];
                        } in  sat_sdQqs;
                  };
        } in  catch# [sat_sdQqt GHC.TopHandler.runIO2 eta_sdQqp];

GHC.TopHandler.runNonIO :: forall a. a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TopHandler.runNonIO1 eta_B2 eta_B1;

GHC.TopHandler.runIO1
  :: forall a.
     GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [main_sdQqu eta_sdQqv]
        catch# [main_sdQqu GHC.TopHandler.runIO2 eta_sdQqv];

GHC.TopHandler.runIO :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TopHandler.runIO1 eta_B2 eta_B1;

fastExit1_rdQm6 :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [1#];

fastExit_rdPtZ :: forall a. GHC.Types.Int -> GHC.Types.IO a
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_sdQqw]
        case w_sdQqw of {
          GHC.Types.I# ww1_sdQqy [Occ=Once] ->
              $wexitHelper_rdQlT fastExit1_rdQm6 ww1_sdQqy;
        };

GHC.TopHandler.runIOFastExit2
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [e1_sdQqz eta_sdQqA]
        GHC.TopHandler.runIOFastExit3 e1_sdQqz eta_sdQqA;
GHC.TopHandler.runIOFastExit3 [Occ=LoopBreaker]
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [err_sdQqB eta_sdQqC]
        let {
          sat_sdQqD [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPB0 #)
          [LclId] =
              [err_sdQqB] \r [eta_B1]
                  real_handler_rdQm5 fastExit_rdPtZ err_sdQqB eta_B1;
        } in  catch# [sat_sdQqD GHC.TopHandler.runIOFastExit2 eta_sdQqC];

GHC.TopHandler.topHandlerFastExit
  :: forall a. GHC.Exception.SomeException -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TopHandler.runIOFastExit3 eta_B2 eta_B1;

GHC.TopHandler.runIOFastExit1
  :: forall a.
     GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [main_sdQqE eta_sdQqF]
        catch# [main_sdQqE GHC.TopHandler.runIOFastExit2 eta_sdQqF];

GHC.TopHandler.runIOFastExit
  :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TopHandler.runIOFastExit1 eta_B2 eta_B1;

GHC.TopHandler.runMainIO3 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionAsyncException_$ctoException
            GHC.IO.Exception.UserInterrupt;

GHC.TopHandler.runMainIO4 :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [2#];

GHC.TopHandler.runMainIO1
  :: forall a.
     GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [main_sdQqG eta_sdQqH]
        let {
          sat_sdQro [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPCw #)
          [LclId] =
              [main_sdQqG] \r [s_sdQqI]
                  case myThreadId# [s_sdQqI] of {
                    (#,#) ipv_sdQqK [Occ=Once] ipv1_sdQqL ->
                        let {
                          sat_sdQqM [Occ=Once] :: GHC.Conc.Sync.ThreadId
                          [LclId] =
                              CCCS GHC.Conc.Sync.ThreadId! [ipv1_sdQqL];
                        } in 
                          case mkWeakNoFinalizer# [ipv1_sdQqL sat_sdQqM ipv_sdQqK] of {
                            (#,#) ipv2_sdQqO [Occ=Once] ipv3_sdQqP ->
                                case __pkg_ccall base-4.11.0.0 [ipv3_sdQqP ipv2_sdQqO] of {
                                  Unit# ds2_sdQqS [Occ=Once] ->
                                      let {
                                        sat_sdQrd [Occ=Once] :: GHC.Types.IO ()
                                        [LclId] =
                                            [ipv3_sdQqP] \r [s1_sdQr4]
                                                case deRefWeak# [ipv3_sdQqP s1_sdQr4] of {
                                                  (#,,#) ipv4_sdQr6 [Occ=Once*]
                                                         ipv5_sdQr7 [Occ=Once!]
                                                         ipv6_sdQr8 [Occ=Once!] ->
                                                      case ipv5_sdQr7 of {
                                                        __DEFAULT ->
                                                            case ipv6_sdQr8 of {
                                                              GHC.Conc.Sync.ThreadId tid_sdQrb [Occ=Once] ->
                                                                  case
                                                                      killThread# [tid_sdQrb
                                                                                   GHC.TopHandler.runMainIO3
                                                                                   ipv4_sdQr6]
                                                                  of
                                                                  s2_sdQrc
                                                                  { __DEFAULT ->
                                                                        (#,#) [s2_sdQrc
                                                                               GHC.Tuple.()];
                                                                  };
                                                            };
                                                        0# -> (#,#) [ipv4_sdQr6 GHC.Tuple.()];
                                                      };
                                                }; } in
                                      let {
                                        sat_sdQre [Occ=Once] :: Data.Dynamic.Dynamic
                                        [LclId] =
                                            CCCS Data.Dynamic.Dynamic! [GHC.TopHandler.runMainIO2
                                                                        sat_sdQrd]; } in
                                      let {
                                        sat_sdQr3 [Occ=Once]
                                          :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                             -> GHC.Types.IO ()
                                        [LclId] =
                                            [ipv3_sdQqP] \r [ds3_sdQqT eta1_sdQqU]
                                                case deRefWeak# [ipv3_sdQqP eta1_sdQqU] of {
                                                  (#,,#) ipv4_sdQqW [Occ=Once*]
                                                         ipv5_sdQqX [Occ=Once!]
                                                         ipv6_sdQqY [Occ=Once!] ->
                                                      case ipv5_sdQqX of {
                                                        __DEFAULT ->
                                                            case ipv6_sdQqY of {
                                                              GHC.Conc.Sync.ThreadId tid_sdQr1 [Occ=Once] ->
                                                                  case
                                                                      killThread# [tid_sdQr1
                                                                                   GHC.TopHandler.runMainIO3
                                                                                   ipv4_sdQqW]
                                                                  of
                                                                  s1_sdQr2
                                                                  { __DEFAULT ->
                                                                        (#,#) [s1_sdQr2
                                                                               GHC.Tuple.()];
                                                                  };
                                                            };
                                                        0# -> (#,#) [ipv4_sdQqW GHC.Tuple.()];
                                                      };
                                                }; } in
                                      let {
                                        sat_sdQrf [Occ=Once]
                                          :: (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                              -> GHC.Types.IO (),
                                              Data.Dynamic.Dynamic)
                                        [LclId] =
                                            CCCS (,)! [sat_sdQr3 sat_sdQre]; } in
                                      let {
                                        sat_sdQrg [Occ=Once]
                                          :: GHC.Base.Maybe
                                               (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic)
                                        [LclId] =
                                            CCCS GHC.Base.Just! [sat_sdQrf];
                                      } in 
                                        case
                                            GHC.Conc.Signal.setHandler1
                                                GHC.TopHandler.runMainIO4 sat_sdQrg ds2_sdQqS
                                        of
                                        { (#,#) ipv4_sdQri [Occ=Once] _ [Occ=Dead] ->
                                              case
                                                  __pkg_ccall base-4.11.0.0 [2#
                                                                             -5#
                                                                             __NULL
                                                                             ipv4_sdQri]
                                              of
                                              { (#,#) ds4_sdQrm [Occ=Once] _ [Occ=Dead] ->
                                                    main_sdQqG ds4_sdQrm;
                                              };
                                        };
                                };
                          };
                  };
        } in  catch# [sat_sdQro GHC.TopHandler.runIO2 eta_sdQqH];

GHC.TopHandler.runMainIO
  :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TopHandler.runMainIO1 eta_B2 eta_B1;


==================== STG syntax: ====================
2018-03-16 16:09:05.392816367 UTC

GHC.TopHandler.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.TopHandler.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TopHandler.$trModule4];

GHC.TopHandler.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.TopHandler"#;

GHC.TopHandler.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TopHandler.$trModule2];

GHC.TopHandler.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.TopHandler.$trModule3
                                     GHC.TopHandler.$trModule1];

GHC.TopHandler.runMainIO2
  :: Data.Typeable.Internal.TypeRep (GHC.Types.IO ())
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                11571292540224541508##
                14006894820825784566##
                GHC.Types.$trModule
                GHC.Types.$tcIO1
                0#
                GHC.Types.krep$*Arr*
                GHC.Types.[]
        of
        { (#,,,,#) ww8_sdQm9 [Occ=Once]
                   ww9_sdQma [Occ=Once]
                   ww10_sdQmb [Occ=Once]
                   ww11_sdQmc [Occ=Once]
                   ww12_sdQmd [Occ=Once] ->
              case
                  Data.Typeable.Internal.$wmkTrCon
                      2684808367141291271##
                      14290630168515401665##
                      GHC.Tuple.$trModule
                      GHC.Tuple.$tc()1
                      0#
                      GHC.Types.krep$*
                      GHC.Types.[]
              of
              { (#,,,,#) ww2_sdQmf [Occ=Once]
                         ww3_sdQmg [Occ=Once]
                         ww4_sdQmh [Occ=Once]
                         ww5_sdQmi [Occ=Once]
                         ww6_sdQmj [Occ=Once] ->
                    let {
                      sat_sdQml [Occ=Once] :: Data.Typeable.Internal.TypeRep ()
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww2_sdQmf
                                                                ww3_sdQmg
                                                                ww4_sdQmh
                                                                ww5_sdQmi
                                                                ww6_sdQmj]; } in
                    let {
                      sat_sdQmk [Occ=Once] :: Data.Typeable.Internal.TypeRep GHC.Types.IO
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww8_sdQm9
                                                                ww9_sdQma
                                                                ww10_sdQmb
                                                                ww11_sdQmc
                                                                ww12_sdQmd];
                    } in  Data.Typeable.Internal.mkTrApp sat_sdQmk sat_sdQml;
              };
        };

unreachable_rdQlR :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "If you can read this, shutdownHaskellAndExit did not exit."#;

unreachable1_rdQlS :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# unreachable_rdQlR;

GHC.TopHandler.flushStdHandles2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E]
        GHC.IO.Handle.Internals.wantWritableHandle1
            GHC.IO.Handle.hFlush2
            GHC.IO.Handle.FD.stderr
            GHC.IO.Handle.Internals.flushWriteBuffer1
            GHC.Prim.void#;

GHC.TopHandler.flushStdHandles3
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds1_sdQmm void_0E]
        case ds1_sdQmm of {
          GHC.Exception.SomeException _ [Occ=Dead] _ [Occ=Dead] ->
              Unit# [GHC.Tuple.()];
        };

GHC.TopHandler.flushStdHandles4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E]
        GHC.IO.Handle.Internals.wantWritableHandle1
            GHC.IO.Handle.hFlush2
            GHC.IO.Handle.FD.stdout
            GHC.IO.Handle.Internals.flushWriteBuffer1
            GHC.Prim.void#;

GHC.TopHandler.flushStdHandles1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case
            catch# [GHC.TopHandler.flushStdHandles4
                    GHC.TopHandler.flushStdHandles3
                    GHC.Prim.void#]
        of
        { Unit# _ [Occ=Dead] ->
              catch# [GHC.TopHandler.flushStdHandles2
                      GHC.TopHandler.flushStdHandles3
                      GHC.Prim.void#];
        };

GHC.TopHandler.flushStdHandles :: GHC.Types.IO ()
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] GHC.TopHandler.flushStdHandles1 GHC.Prim.void#;

$wexitHelper_rdQlT
  :: forall a.
     Foreign.C.Types.CInt -> GHC.Prim.Int# -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,U(U)><S,U>, Unf=OtherCon []] =
    sat-only [] \r [w_sdQmv ww_sdQmw]
        let-no-escape {
          $j_sdQmx [Occ=Once*T[0], Dmd=<L,1*U>] :: GHC.Types.IO a_sdQcn
          [LclId[JoinId(0)], Unf=OtherCon []] =
              [w_sdQmv ww_sdQmw] \r []
                  let-no-escape {
                    $j1_sdQmy [Occ=Once*T[0], Dmd=<L,1*U>] :: GHC.Types.IO a_sdQcn
                    [LclId[JoinId(0)], Unf=OtherCon []] =
                        [w_sdQmv] \r []
                            let {
                              sat_sdQmF [Occ=Once]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_sdQcn #)
                              [LclId] =
                                  [w_sdQmv] \r [void_0E]
                                      case w_sdQmv of {
                                        GHC.Int.I32# ds1_sdQmB [Occ=Once] ->
                                            case
                                                __pkg_ccall_GC base-4.11.0.0 [255#
                                                                              ds1_sdQmB
                                                                              GHC.Prim.void#]
                                            of
                                            { (##) ->
                                                  GHC.IO.failIO1 unreachable1_rdQlS GHC.Prim.void#;
                                            };
                                      };
                            } in  sat_sdQmF;
                  } in 
                    case >=# [ww_sdQmw -127#] of {
                      __DEFAULT -> $j1_sdQmy;
                      1# ->
                          case <=# [ww_sdQmw -1#] of {
                            __DEFAULT -> $j1_sdQmy;
                            1# ->
                                let {
                                  sat_sdQmQ [Occ=Once]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_sdQcn #)
                                  [LclId] =
                                      [w_sdQmv ww_sdQmw] \r [void_0E]
                                          case w_sdQmv of {
                                            GHC.Int.I32# ds1_sdQmK [Occ=Once] ->
                                                case negateInt# [ww_sdQmw] of sat_sdQmM {
                                                  __DEFAULT ->
                                                      case narrow32Int# [sat_sdQmM] of sat_sdQmN {
                                                        __DEFAULT ->
                                                            case
                                                                __pkg_ccall_GC base-4.11.0.0 [sat_sdQmN
                                                                                              ds1_sdQmK
                                                                                              GHC.Prim.void#]
                                                            of
                                                            { (##) ->
                                                                  GHC.IO.failIO1
                                                                      unreachable1_rdQlS
                                                                      GHC.Prim.void#;
                                                            };
                                                      };
                                                };
                                          };
                                } in  sat_sdQmQ;
                          };
                    };
        } in 
          case >=# [ww_sdQmw 0#] of {
            __DEFAULT -> $j_sdQmx;
            1# ->
                case <=# [ww_sdQmw 255#] of {
                  __DEFAULT -> $j_sdQmx;
                  1# ->
                      let {
                        sat_sdQn0 [Occ=Once]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_sdQcn #)
                        [LclId] =
                            [w_sdQmv ww_sdQmw] \r [void_0E]
                                case w_sdQmv of {
                                  GHC.Int.I32# ds1_sdQmV [Occ=Once] ->
                                      case narrow32Int# [ww_sdQmw] of sat_sdQmX {
                                        __DEFAULT ->
                                            case
                                                __pkg_ccall_GC base-4.11.0.0 [sat_sdQmX
                                                                              ds1_sdQmV
                                                                              GHC.Prim.void#]
                                            of
                                            { (##) ->
                                                  GHC.IO.failIO1 unreachable1_rdQlS GHC.Prim.void#;
                                            };
                                      };
                                };
                      } in  sat_sdQn0;
                };
          };

safeExit1_rdQlU :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [0#];

safeExit_rdPtY :: forall a. GHC.Types.Int -> GHC.Types.IO a
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_sdQn1]
        case w_sdQn1 of {
          GHC.Types.I# ww1_sdQn3 [Occ=Once] ->
              $wexitHelper_rdQlT safeExit1_rdQlU ww1_sdQn3;
        };

exitInterrupted_rdPu2 :: forall a. GHC.Types.IO a
[GblId] =
    [] \u [] $wexitHelper_rdQlT safeExit1_rdQlU -2#;

lvl_rdQlV :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

lvl1_rdQlW :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

msgStr_rdQlX :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "encountered an exception while trying to report an exception.\n\
    \One possible reason for this is that we failed while trying to encode an error message. Check that your locale is configured properly."#;

msgStr1_rdQlY :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# msgStr_rdQlX;

str_rdQlZ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "%s"#;

str1_rdQm0 :: GHC.Base.String
[GblId] =
    [] \u [] GHC.CString.unpackCString# str_rdQlZ;

lvl2_rdQm1 :: GHC.Types.Int
[GblId] =
    [] \u []
        case GHC.List.$wlenAcc msgStr1_rdQlY 0# of v_sdQn4 {
          __DEFAULT -> GHC.Types.I# [v_sdQn4];
        };

lvl3_rdQm2 :: GHC.Types.Int
[GblId] =
    [] \u []
        case GHC.List.$wlenAcc str1_rdQm0 0# of v_sdQn5 {
          __DEFAULT -> GHC.Types.I# [v_sdQn5];
        };

lvl4_rdQm3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

lvl5_rdQm4 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [251#];

real_handler_rdQm5
  :: forall a.
     (GHC.Types.Int -> GHC.Types.IO a)
     -> GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Str=<L,C(C1(U(U,U)))><S,U><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [exit_sdQn6 se_sdQn7 void_0E]
        case
            catch# [GHC.TopHandler.flushStdHandles4
                    GHC.TopHandler.flushStdHandles3
                    GHC.Prim.void#]
        of
        { Unit# _ [Occ=Dead] ->
              case
                  catch# [GHC.TopHandler.flushStdHandles2
                          GHC.TopHandler.flushStdHandles3
                          GHC.Prim.void#]
              of
              { Unit# _ [Occ=Dead] ->
                    let-no-escape {
                      fail_sdQnf [Occ=Once*!T[1], Dmd=<L,1*C1(U(U,U))>]
                        :: GHC.Prim.Void#
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPA7 #)
                      [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                          sat-only [exit_sdQn6 se_sdQn7] \r [void_0E]
                              case se_sdQn7 of wild_sdQnh {
                                GHC.Exception.SomeException $dException1_sdQni
                                                            e2_sdQnj [Occ=Once*] ->
                                    case
                                        GHC.Exception.$p1Exception $dException1_sdQni
                                    of
                                    sat_sdQnk
                                    { __DEFAULT ->
                                          case
                                              Data.Typeable.Internal.sameTypeRep
                                                  sat_sdQnk GHC.IO.Exception.$fExceptionExitCode4
                                          of
                                          { GHC.Types.False ->
                                                let {
                                                  sat_sdQq4 [Occ=Once]
                                                    :: GHC.Exception.SomeException
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             a_adPA7 #)
                                                  [LclId] =
                                                      [exit_sdQn6] \r [e4_sdQoX void_0E]
                                                          case e4_sdQoX of wild2_sdQoZ {
                                                            GHC.Exception.SomeException $dException2_sdQp0 [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                case
                                                                    GHC.Exception.$p1Exception
                                                                        $dException2_sdQp0
                                                                of
                                                                sat_sdQp2
                                                                { __DEFAULT ->
                                                                      case
                                                                          Data.Typeable.Internal.sameTypeRep
                                                                              sat_sdQp2
                                                                              GHC.IO.Exception.$fExceptionIOException4
                                                                      of
                                                                      { GHC.Types.False ->
                                                                            raiseIO# [wild2_sdQoZ
                                                                                      GHC.Prim.void#];
                                                                        GHC.Types.True ->
                                                                            case lvl3_rdQm2 of {
                                                                              GHC.Types.I# v1_sdQp5 [Occ=Once] ->
                                                                                  case
                                                                                      +# [v1_sdQp5
                                                                                          1#]
                                                                                  of
                                                                                  sat_sdQp6
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            newAlignedPinnedByteArray# [sat_sdQp6
                                                                                                                        1#
                                                                                                                        GHC.Prim.void#]
                                                                                        of
                                                                                        { Unit# ipv5_sdQp9 [Occ=Once] ->
                                                                                              case
                                                                                                  unsafeFreezeByteArray# [ipv5_sdQp9
                                                                                                                          GHC.Prim.void#]
                                                                                              of
                                                                                              { Unit# ipv7_sdQpc ->
                                                                                                    case
                                                                                                        byteArrayContents# [ipv7_sdQpc]
                                                                                                    of
                                                                                                    ptr_sdQpd [Dmd=<S,U>]
                                                                                                    { __DEFAULT ->
                                                                                                          let-no-escape {
                                                                                                            exit1_sdQpe [Occ=OnceL!T[2],
                                                                                                                         Dmd=<C(C(S)),C(C1(U))>]
                                                                                                              :: GHC.Prim.Int#
                                                                                                                 -> GHC.Prim.State#
                                                                                                                      GHC.Prim.RealWorld
                                                                                                                 -> (# GHC.Prim.State#
                                                                                                                         GHC.Prim.RealWorld,
                                                                                                                       a_adPA7 #)
                                                                                                            [LclId[JoinId(2)],
                                                                                                             Arity=2,
                                                                                                             Str=<S,U><S,U>,
                                                                                                             Unf=OtherCon []] =
                                                                                                                sat-only [exit_sdQn6
                                                                                                                          ipv7_sdQpc
                                                                                                                          ptr_sdQpd] \r [ww_sdQpf
                                                                                                                                         void_0E]
                                                                                                                    case
                                                                                                                        writeInt8OffAddr# [ptr_sdQpd
                                                                                                                                           ww_sdQpf
                                                                                                                                           0#
                                                                                                                                           GHC.Prim.void#]
                                                                                                                    of
                                                                                                                    s2_sdQph
                                                                                                                    { (##) ->
                                                                                                                          case
                                                                                                                              lvl2_rdQm1
                                                                                                                          of
                                                                                                                          { GHC.Types.I# v3_sdQpj [Occ=Once] ->
                                                                                                                                case
                                                                                                                                    +# [v3_sdQpj
                                                                                                                                        1#]
                                                                                                                                of
                                                                                                                                sat_sdQpk
                                                                                                                                { __DEFAULT ->
                                                                                                                                      case
                                                                                                                                          newAlignedPinnedByteArray# [sat_sdQpk
                                                                                                                                                                      1#
                                                                                                                                                                      GHC.Prim.void#]
                                                                                                                                      of
                                                                                                                                      { Unit# ipv9_sdQpn [Occ=Once] ->
                                                                                                                                            case
                                                                                                                                                unsafeFreezeByteArray# [ipv9_sdQpn
                                                                                                                                                                        GHC.Prim.void#]
                                                                                                                                            of
                                                                                                                                            { Unit# ipv11_sdQpq ->
                                                                                                                                                  case
                                                                                                                                                      byteArrayContents# [ipv11_sdQpq]
                                                                                                                                                  of
                                                                                                                                                  ptr1_sdQpr [Dmd=<S,U>]
                                                                                                                                                  { __DEFAULT ->
                                                                                                                                                        let-no-escape {
                                                                                                                                                          exit2_sdQps [Occ=OnceL!T[2],
                                                                                                                                                                       Dmd=<C(C(S)),C(C1(U))>]
                                                                                                                                                            :: GHC.Prim.Int#
                                                                                                                                                               -> GHC.Prim.State#
                                                                                                                                                                    GHC.Prim.RealWorld
                                                                                                                                                               -> (# GHC.Prim.State#
                                                                                                                                                                       GHC.Prim.RealWorld,
                                                                                                                                                                     a_adPA7 #)
                                                                                                                                                          [LclId[JoinId(2)],
                                                                                                                                                           Arity=2,
                                                                                                                                                           Str=<S,U><S,U>,
                                                                                                                                                           Unf=OtherCon []] =
                                                                                                                                                              sat-only [exit_sdQn6
                                                                                                                                                                        ipv7_sdQpc
                                                                                                                                                                        ptr_sdQpd
                                                                                                                                                                        ipv11_sdQpq
                                                                                                                                                                        ptr1_sdQpr] \r [ww1_sdQpt
                                                                                                                                                                                        void_0E]
                                                                                                                                                                  case
                                                                                                                                                                      writeInt8OffAddr# [ptr1_sdQpr
                                                                                                                                                                                         ww1_sdQpt
                                                                                                                                                                                         0#
                                                                                                                                                                                         GHC.Prim.void#]
                                                                                                                                                                  of
                                                                                                                                                                  s1_sdQpv
                                                                                                                                                                  { (##) ->
                                                                                                                                                                        case
                                                                                                                                                                            __pkg_ccall base-4.11.0.0 [ptr_sdQpd
                                                                                                                                                                                                       ptr1_sdQpr
                                                                                                                                                                                                       GHC.Prim.void#]
                                                                                                                                                                        of
                                                                                                                                                                        { (##) ->
                                                                                                                                                                              case
                                                                                                                                                                                  exit_sdQn6
                                                                                                                                                                                      lvl_rdQlV
                                                                                                                                                                                      GHC.Prim.void#
                                                                                                                                                                              of
                                                                                                                                                                              { Unit# ipv13_sdQpB [Occ=Once] ->
                                                                                                                                                                                    case
                                                                                                                                                                                        touch# [ipv11_sdQpq
                                                                                                                                                                                                GHC.Prim.void#]
                                                                                                                                                                                    of
                                                                                                                                                                                    s4_sdQpC
                                                                                                                                                                                    { (##) ->
                                                                                                                                                                                          case
                                                                                                                                                                                              touch# [ipv7_sdQpc
                                                                                                                                                                                                      GHC.Prim.void#]
                                                                                                                                                                                          of
                                                                                                                                                                                          s3_sdQpD
                                                                                                                                                                                          { (##) ->
                                                                                                                                                                                                Unit# [ipv13_sdQpB];
                                                                                                                                                                                          };
                                                                                                                                                                                    };
                                                                                                                                                                              };
                                                                                                                                                                        };
                                                                                                                                                                  };
                                                                                                                                                        } in 
                                                                                                                                                          let-no-escape {
                                                                                                                                                            $wgo_sdQpE [InlPrag=NOUSERINLINE[0],
                                                                                                                                                                        Occ=LoopBreakerT[3]]
                                                                                                                                                              :: [GHC.Types.Char]
                                                                                                                                                                 -> GHC.Prim.Int#
                                                                                                                                                                 -> GHC.Prim.State#
                                                                                                                                                                      GHC.Prim.RealWorld
                                                                                                                                                                 -> (# GHC.Prim.State#
                                                                                                                                                                         GHC.Prim.RealWorld,
                                                                                                                                                                       a_adPA7 #)
                                                                                                                                                            [LclId[JoinId(3)],
                                                                                                                                                             Arity=3,
                                                                                                                                                             Str=<S,1*U><S,U><S,U>,
                                                                                                                                                             Unf=OtherCon []] =
                                                                                                                                                                sat-only [ptr1_sdQpr
                                                                                                                                                                          exit2_sdQps
                                                                                                                                                                          $wgo_sdQpE] \r [w1_sdQpF
                                                                                                                                                                                          ww1_sdQpG
                                                                                                                                                                                          void_0E]
                                                                                                                                                                    case
                                                                                                                                                                        w1_sdQpF
                                                                                                                                                                    of
                                                                                                                                                                    { [] ->
                                                                                                                                                                          exit2_sdQps
                                                                                                                                                                              ww1_sdQpG
                                                                                                                                                                              GHC.Prim.void#;
                                                                                                                                                                      : c_sdQpJ [Occ=Once!]
                                                                                                                                                                        cs_sdQpK [Occ=Once] ->
                                                                                                                                                                          case
                                                                                                                                                                              c_sdQpJ
                                                                                                                                                                          of
                                                                                                                                                                          { GHC.Types.C# c#_sdQpM [Occ=Once] ->
                                                                                                                                                                                case
                                                                                                                                                                                    ord# [c#_sdQpM]
                                                                                                                                                                                of
                                                                                                                                                                                sat_sdQpN
                                                                                                                                                                                { __DEFAULT ->
                                                                                                                                                                                      case
                                                                                                                                                                                          narrow8Int# [sat_sdQpN]
                                                                                                                                                                                      of
                                                                                                                                                                                      sat_sdQpO
                                                                                                                                                                                      { __DEFAULT ->
                                                                                                                                                                                            case
                                                                                                                                                                                                writeInt8OffAddr# [ptr1_sdQpr
                                                                                                                                                                                                                   ww1_sdQpG
                                                                                                                                                                                                                   sat_sdQpO
                                                                                                                                                                                                                   GHC.Prim.void#]
                                                                                                                                                                                            of
                                                                                                                                                                                            s1_sdQpP
                                                                                                                                                                                            { (##) ->
                                                                                                                                                                                                  case
                                                                                                                                                                                                      +# [ww1_sdQpG
                                                                                                                                                                                                          1#]
                                                                                                                                                                                                  of
                                                                                                                                                                                                  sat_sdQpQ
                                                                                                                                                                                                  { __DEFAULT ->
                                                                                                                                                                                                        $wgo_sdQpE
                                                                                                                                                                                                            cs_sdQpK
                                                                                                                                                                                                            sat_sdQpQ
                                                                                                                                                                                                            GHC.Prim.void#;
                                                                                                                                                                                                  };
                                                                                                                                                                                            };
                                                                                                                                                                                      };
                                                                                                                                                                                };
                                                                                                                                                                          };
                                                                                                                                                                    };
                                                                                                                                                          } in 
                                                                                                                                                            $wgo_sdQpE
                                                                                                                                                                msgStr1_rdQlY
                                                                                                                                                                0#
                                                                                                                                                                GHC.Prim.void#;
                                                                                                                                                  };
                                                                                                                                            };
                                                                                                                                      };
                                                                                                                                };
                                                                                                                          };
                                                                                                                    };
                                                                                                          } in 
                                                                                                            let-no-escape {
                                                                                                              $wgo_sdQpR [InlPrag=NOUSERINLINE[0],
                                                                                                                          Occ=LoopBreakerT[3]]
                                                                                                                :: [GHC.Types.Char]
                                                                                                                   -> GHC.Prim.Int#
                                                                                                                   -> GHC.Prim.State#
                                                                                                                        GHC.Prim.RealWorld
                                                                                                                   -> (# GHC.Prim.State#
                                                                                                                           GHC.Prim.RealWorld,
                                                                                                                         a_adPA7 #)
                                                                                                              [LclId[JoinId(3)],
                                                                                                               Arity=3,
                                                                                                               Str=<S,1*U><S,U><S,U>,
                                                                                                               Unf=OtherCon []] =
                                                                                                                  sat-only [ptr_sdQpd
                                                                                                                            exit1_sdQpe
                                                                                                                            $wgo_sdQpR] \r [w_sdQpS
                                                                                                                                            ww_sdQpT
                                                                                                                                            void_0E]
                                                                                                                      case
                                                                                                                          w_sdQpS
                                                                                                                      of
                                                                                                                      { [] ->
                                                                                                                            exit1_sdQpe
                                                                                                                                ww_sdQpT
                                                                                                                                GHC.Prim.void#;
                                                                                                                        : c_sdQpW [Occ=Once!]
                                                                                                                          cs_sdQpX [Occ=Once] ->
                                                                                                                            case
                                                                                                                                c_sdQpW
                                                                                                                            of
                                                                                                                            { GHC.Types.C# c#_sdQpZ [Occ=Once] ->
                                                                                                                                  case
                                                                                                                                      ord# [c#_sdQpZ]
                                                                                                                                  of
                                                                                                                                  sat_sdQq0
                                                                                                                                  { __DEFAULT ->
                                                                                                                                        case
                                                                                                                                            narrow8Int# [sat_sdQq0]
                                                                                                                                        of
                                                                                                                                        sat_sdQq1
                                                                                                                                        { __DEFAULT ->
                                                                                                                                              case
                                                                                                                                                  writeInt8OffAddr# [ptr_sdQpd
                                                                                                                                                                     ww_sdQpT
                                                                                                                                                                     sat_sdQq1
                                                                                                                                                                     GHC.Prim.void#]
                                                                                                                                              of
                                                                                                                                              s2_sdQq2
                                                                                                                                              { (##) ->
                                                                                                                                                    case
                                                                                                                                                        +# [ww_sdQpT
                                                                                                                                                            1#]
                                                                                                                                                    of
                                                                                                                                                    sat_sdQq3
                                                                                                                                                    { __DEFAULT ->
                                                                                                                                                          $wgo_sdQpR
                                                                                                                                                              cs_sdQpX
                                                                                                                                                              sat_sdQq3
                                                                                                                                                              GHC.Prim.void#;
                                                                                                                                                    };
                                                                                                                                              };
                                                                                                                                        };
                                                                                                                                  };
                                                                                                                            };
                                                                                                                      };
                                                                                                            } in 
                                                                                                              $wgo_sdQpR
                                                                                                                  str1_rdQm0
                                                                                                                  0#
                                                                                                                  GHC.Prim.void#;
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                          }; } in
                                                let {
                                                  sat_sdQoW [Occ=Once, Dmd=<L,1*C1(U)>]
                                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             a_adPA7 #)
                                                  [LclId] =
                                                      [exit_sdQn6
                                                       wild_sdQnh
                                                       $dException1_sdQni
                                                       e2_sdQnj] \s []
                                                          case
                                                              GHC.Exception.$p1Exception
                                                                  $dException1_sdQni
                                                          of
                                                          sat_sdQnm
                                                          { __DEFAULT ->
                                                                case
                                                                    Data.Typeable.Internal.sameTypeRep
                                                                        sat_sdQnm
                                                                        GHC.IO.Exception.$fExceptionIOException4
                                                                of
                                                                { GHC.Types.False ->
                                                                      let {
                                                                        sat_sdQnx [Occ=OnceT[0]]
                                                                          :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   a_adPA7 #)
                                                                        [LclId] =
                                                                            [exit_sdQn6
                                                                             wild_sdQnh] \r [void_0E]
                                                                                case
                                                                                    GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                of
                                                                                { GHC.STRef.STRef var#_sdQnq [Occ=Once] ->
                                                                                      case
                                                                                          readMutVar# [var#_sdQnq
                                                                                                       GHC.Prim.void#]
                                                                                      of
                                                                                      { Unit# ipv5_sdQnt [Occ=Once!] ->
                                                                                            case
                                                                                                ipv5_sdQnt
                                                                                                    wild_sdQnh
                                                                                                    GHC.Prim.void#
                                                                                            of
                                                                                            { Unit# _ [Occ=Dead] ->
                                                                                                  exit_sdQn6
                                                                                                      lvl_rdQlV
                                                                                                      GHC.Prim.void#;
                                                                                            };
                                                                                      };
                                                                                };
                                                                      } in  sat_sdQnx;
                                                                  GHC.Types.True ->
                                                                      case e2_sdQnj of {
                                                                        GHC.IO.Exception.IOError ds3_sdQnz [Occ=Once!]
                                                                                                 ds4_sdQnA [Occ=Once!]
                                                                                                 _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 ds7_sdQnD [Occ=Once!]
                                                                                                 _ [Occ=Dead] ->
                                                                            case ds4_sdQnA of {
                                                                              __DEFAULT ->
                                                                                  let {
                                                                                    sat_sdQnP [Occ=OnceT[0]]
                                                                                      :: GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld
                                                                                         -> (# GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld,
                                                                                               a_adPA7 #)
                                                                                    [LclId] =
                                                                                        [exit_sdQn6
                                                                                         wild_sdQnh] \r [void_0E]
                                                                                            case
                                                                                                GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                            of
                                                                                            { GHC.STRef.STRef var#_sdQnI [Occ=Once] ->
                                                                                                  case
                                                                                                      readMutVar# [var#_sdQnI
                                                                                                                   GHC.Prim.void#]
                                                                                                  of
                                                                                                  { Unit# ipv5_sdQnL [Occ=Once!] ->
                                                                                                        case
                                                                                                            ipv5_sdQnL
                                                                                                                wild_sdQnh
                                                                                                                GHC.Prim.void#
                                                                                                        of
                                                                                                        { Unit# _ [Occ=Dead] ->
                                                                                                              exit_sdQn6
                                                                                                                  lvl_rdQlV
                                                                                                                  GHC.Prim.void#;
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                  } in  sat_sdQnP;
                                                                              GHC.IO.Exception.ResourceVanished ->
                                                                                  case
                                                                                      ds7_sdQnD
                                                                                  of
                                                                                  { GHC.Base.Nothing ->
                                                                                        let {
                                                                                          sat_sdQo0 [Occ=OnceT[0]]
                                                                                            :: GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld,
                                                                                                     a_adPA7 #)
                                                                                          [LclId] =
                                                                                              [exit_sdQn6
                                                                                               wild_sdQnh] \r [void_0E]
                                                                                                  case
                                                                                                      GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                  of
                                                                                                  { GHC.STRef.STRef var#_sdQnT [Occ=Once] ->
                                                                                                        case
                                                                                                            readMutVar# [var#_sdQnT
                                                                                                                         GHC.Prim.void#]
                                                                                                        of
                                                                                                        { Unit# ipv5_sdQnW [Occ=Once!] ->
                                                                                                              case
                                                                                                                  ipv5_sdQnW
                                                                                                                      wild_sdQnh
                                                                                                                      GHC.Prim.void#
                                                                                                              of
                                                                                                              { Unit# _ [Occ=Dead] ->
                                                                                                                    exit_sdQn6
                                                                                                                        lvl_rdQlV
                                                                                                                        GHC.Prim.void#;
                                                                                                              };
                                                                                                        };
                                                                                                  };
                                                                                        } in 
                                                                                          sat_sdQo0;
                                                                                    GHC.Base.Just ioe_sdQo1 [Occ=Once] ->
                                                                                        case
                                                                                            ds3_sdQnz
                                                                                        of
                                                                                        { GHC.Base.Nothing ->
                                                                                              let {
                                                                                                sat_sdQoc [Occ=OnceT[0]]
                                                                                                  :: GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                     -> (# GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld,
                                                                                                           a_adPA7 #)
                                                                                                [LclId] =
                                                                                                    [exit_sdQn6
                                                                                                     wild_sdQnh] \r [void_0E]
                                                                                                        case
                                                                                                            GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                        of
                                                                                                        { GHC.STRef.STRef var#_sdQo5 [Occ=Once] ->
                                                                                                              case
                                                                                                                  readMutVar# [var#_sdQo5
                                                                                                                               GHC.Prim.void#]
                                                                                                              of
                                                                                                              { Unit# ipv5_sdQo8 [Occ=Once!] ->
                                                                                                                    case
                                                                                                                        ipv5_sdQo8
                                                                                                                            wild_sdQnh
                                                                                                                            GHC.Prim.void#
                                                                                                                    of
                                                                                                                    { Unit# _ [Occ=Dead] ->
                                                                                                                          exit_sdQn6
                                                                                                                              lvl_rdQlV
                                                                                                                              GHC.Prim.void#;
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                              } in 
                                                                                                sat_sdQoc;
                                                                                          GHC.Base.Just hdl_sdQod [Occ=Once!] ->
                                                                                              case
                                                                                                  ioe_sdQo1
                                                                                              of
                                                                                              { GHC.Int.I32# x_sdQof [Occ=Once!] ->
                                                                                                    case
                                                                                                        x_sdQof
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          let {
                                                                                                            sat_sdQoq [Occ=OnceT[0]]
                                                                                                              :: GHC.Prim.State#
                                                                                                                   GHC.Prim.RealWorld
                                                                                                                 -> (# GHC.Prim.State#
                                                                                                                         GHC.Prim.RealWorld,
                                                                                                                       a_adPA7 #)
                                                                                                            [LclId] =
                                                                                                                [exit_sdQn6
                                                                                                                 wild_sdQnh] \r [void_0E]
                                                                                                                    case
                                                                                                                        GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                                    of
                                                                                                                    { GHC.STRef.STRef var#_sdQoj [Occ=Once] ->
                                                                                                                          case
                                                                                                                              readMutVar# [var#_sdQoj
                                                                                                                                           GHC.Prim.void#]
                                                                                                                          of
                                                                                                                          { Unit# ipv5_sdQom [Occ=Once!] ->
                                                                                                                                case
                                                                                                                                    ipv5_sdQom
                                                                                                                                        wild_sdQnh
                                                                                                                                        GHC.Prim.void#
                                                                                                                                of
                                                                                                                                { Unit# _ [Occ=Dead] ->
                                                                                                                                      exit_sdQn6
                                                                                                                                          lvl_rdQlV
                                                                                                                                          GHC.Prim.void#;
                                                                                                                                };
                                                                                                                          };
                                                                                                                    };
                                                                                                          } in 
                                                                                                            sat_sdQoq;
                                                                                                      32# ->
                                                                                                          let-no-escape {
                                                                                                            $j_sdQor [Occ=Once*T[0],
                                                                                                                      Dmd=<L,1*C1(U)>]
                                                                                                              :: GHC.Prim.State#
                                                                                                                   GHC.Prim.RealWorld
                                                                                                                 -> (# GHC.Prim.State#
                                                                                                                         GHC.Prim.RealWorld,
                                                                                                                       a_adPA7 #)
                                                                                                            [LclId[JoinId(0)],
                                                                                                             Unf=OtherCon []] =
                                                                                                                [exit_sdQn6
                                                                                                                 wild_sdQnh] \r []
                                                                                                                    let {
                                                                                                                      sat_sdQoB [Occ=OnceT[0]]
                                                                                                                        :: GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld
                                                                                                                           -> (# GHC.Prim.State#
                                                                                                                                   GHC.Prim.RealWorld,
                                                                                                                                 a_adPA7 #)
                                                                                                                      [LclId] =
                                                                                                                          [exit_sdQn6
                                                                                                                           wild_sdQnh] \r [void_0E]
                                                                                                                              case
                                                                                                                                  GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                                              of
                                                                                                                              { GHC.STRef.STRef var#_sdQou [Occ=Once] ->
                                                                                                                                    case
                                                                                                                                        readMutVar# [var#_sdQou
                                                                                                                                                     GHC.Prim.void#]
                                                                                                                                    of
                                                                                                                                    { Unit# ipv5_sdQox [Occ=Once!] ->
                                                                                                                                          case
                                                                                                                                              ipv5_sdQox
                                                                                                                                                  wild_sdQnh
                                                                                                                                                  GHC.Prim.void#
                                                                                                                                          of
                                                                                                                                          { Unit# _ [Occ=Dead] ->
                                                                                                                                                exit_sdQn6
                                                                                                                                                    lvl_rdQlV
                                                                                                                                                    GHC.Prim.void#;
                                                                                                                                          };
                                                                                                                                    };
                                                                                                                              };
                                                                                                                    } in 
                                                                                                                      sat_sdQoB;
                                                                                                          } in 
                                                                                                            case
                                                                                                                hdl_sdQod
                                                                                                            of
                                                                                                            { GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                                                                                             dt_sdQoE [Occ=Once] ->
                                                                                                                  case
                                                                                                                      GHC.IO.Handle.FD.stdout
                                                                                                                  of
                                                                                                                  { GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                                                                                                   dt1_sdQoH [Occ=Once] ->
                                                                                                                        case
                                                                                                                            sameMVar# [dt_sdQoE
                                                                                                                                       dt1_sdQoH]
                                                                                                                        of
                                                                                                                        { __DEFAULT ->
                                                                                                                              $j_sdQor;
                                                                                                                          1# ->
                                                                                                                              exit_sdQn6
                                                                                                                                  lvl1_rdQlW;
                                                                                                                        };
                                                                                                                    GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                                                                                                     _ [Occ=Dead]
                                                                                                                                                     _ [Occ=Dead] ->
                                                                                                                        $j_sdQor;
                                                                                                                  };
                                                                                                              GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                                                                                               dt_sdQoN [Occ=Once]
                                                                                                                                               _ [Occ=Dead] ->
                                                                                                                  case
                                                                                                                      GHC.IO.Handle.FD.stdout
                                                                                                                  of
                                                                                                                  { GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                                                                                                   _ [Occ=Dead] ->
                                                                                                                        $j_sdQor;
                                                                                                                    GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                                                                                                     dt2_sdQoT [Occ=Once]
                                                                                                                                                     _ [Occ=Dead] ->
                                                                                                                        case
                                                                                                                            sameMVar# [dt_sdQoN
                                                                                                                                       dt2_sdQoT]
                                                                                                                        of
                                                                                                                        { __DEFAULT ->
                                                                                                                              $j_sdQor;
                                                                                                                          1# ->
                                                                                                                              exit_sdQn6
                                                                                                                                  lvl1_rdQlW;
                                                                                                                        };
                                                                                                                  };
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                } in  catch# [sat_sdQoW sat_sdQq4 GHC.Prim.void#];
                                            GHC.Types.True ->
                                                case e2_sdQnj of {
                                                  GHC.IO.Exception.ExitSuccess ->
                                                      exit_sdQn6 lvl1_rdQlW GHC.Prim.void#;
                                                  GHC.IO.Exception.ExitFailure n_sdQq6 [Occ=Once] ->
                                                      exit_sdQn6 n_sdQq6 GHC.Prim.void#;
                                                };
                                          };
                                    };
                              };
                    } in 
                      case
                          GHC.IO.Exception.$fExceptionAsyncException_$cfromException se_sdQn7
                      of
                      { GHC.Base.Nothing -> fail_sdQnf GHC.Prim.void#;
                        GHC.Base.Just ds_sdQq8 [Occ=Once!] ->
                            case ds_sdQq8 of {
                              GHC.IO.Exception.StackOverflow ->
                                  case myThreadId# [GHC.Prim.void#] of {
                                    Unit# ipv5_sdQqc [Occ=Once] ->
                                        case
                                            __pkg_ccall base-4.11.0.0 [ipv5_sdQqc GHC.Prim.void#]
                                        of
                                        { (##) -> exit_sdQn6 lvl4_rdQm3 GHC.Prim.void#;
                                        };
                                  };
                              GHC.IO.Exception.HeapOverflow ->
                                  case __pkg_ccall base-4.11.0.0 [GHC.Prim.void#] of {
                                    (##) -> exit_sdQn6 lvl5_rdQm4 GHC.Prim.void#;
                                  };
                              GHC.IO.Exception.ThreadKilled -> fail_sdQnf GHC.Prim.void#;
                              GHC.IO.Exception.UserInterrupt ->
                                  exitInterrupted_rdPu2 GHC.Prim.void#;
                            };
                      };
              };
        };

GHC.TopHandler.runIO2
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [e1_sdQqj void_0E]
        GHC.TopHandler.runIO3 e1_sdQqj GHC.Prim.void#;
GHC.TopHandler.runIO3 [Occ=LoopBreaker]
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [err_sdQql void_0E]
        let {
          sat_sdQqn [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPBc #)
          [LclId] =
              [err_sdQql] \r [void_0E]
                  real_handler_rdQm5 safeExit_rdPtY err_sdQql GHC.Prim.void#;
        } in  catch# [sat_sdQqn GHC.TopHandler.runIO2 GHC.Prim.void#];

GHC.TopHandler.topHandler
  :: forall a. GHC.Exception.SomeException -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] GHC.TopHandler.runIO3 eta_B2 GHC.Prim.void#;

GHC.TopHandler.runNonIO1
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [a1_sdQqo void_0E]
        let {
          sat_sdQqt [Occ=Once, Dmd=<L,1*C1(U)>]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPBl #)
          [LclId] =
              [a1_sdQqo] \s []
                  case a1_sdQqo of a2_sdQqq {
                    __DEFAULT ->
                        let {
                          sat_sdQqs [Occ=OnceT[0]]
                            :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPBl #)
                          [LclId] =
                              [a2_sdQqq] \r [void_0E] Unit# [a2_sdQqq];
                        } in  sat_sdQqs;
                  };
        } in  catch# [sat_sdQqt GHC.TopHandler.runIO2 GHC.Prim.void#];

GHC.TopHandler.runNonIO :: forall a. a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.TopHandler.runNonIO1 eta_B2 GHC.Prim.void#;

GHC.TopHandler.runIO1
  :: forall a.
     GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [main_sdQqu void_0E]
        catch# [main_sdQqu GHC.TopHandler.runIO2 GHC.Prim.void#];

GHC.TopHandler.runIO :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] GHC.TopHandler.runIO1 eta_B2 GHC.Prim.void#;

fastExit1_rdQm6 :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [1#];

fastExit_rdPtZ :: forall a. GHC.Types.Int -> GHC.Types.IO a
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_sdQqw]
        case w_sdQqw of {
          GHC.Types.I# ww1_sdQqy [Occ=Once] ->
              $wexitHelper_rdQlT fastExit1_rdQm6 ww1_sdQqy;
        };

GHC.TopHandler.runIOFastExit2
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [e1_sdQqz void_0E]
        GHC.TopHandler.runIOFastExit3 e1_sdQqz GHC.Prim.void#;
GHC.TopHandler.runIOFastExit3 [Occ=LoopBreaker]
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [err_sdQqB void_0E]
        let {
          sat_sdQqD [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPB0 #)
          [LclId] =
              [err_sdQqB] \r [void_0E]
                  real_handler_rdQm5 fastExit_rdPtZ err_sdQqB GHC.Prim.void#;
        } in 
          catch# [sat_sdQqD GHC.TopHandler.runIOFastExit2 GHC.Prim.void#];

GHC.TopHandler.topHandlerFastExit
  :: forall a. GHC.Exception.SomeException -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.TopHandler.runIOFastExit3 eta_B2 GHC.Prim.void#;

GHC.TopHandler.runIOFastExit1
  :: forall a.
     GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [main_sdQqE void_0E]
        catch# [main_sdQqE GHC.TopHandler.runIOFastExit2 GHC.Prim.void#];

GHC.TopHandler.runIOFastExit
  :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.TopHandler.runIOFastExit1 eta_B2 GHC.Prim.void#;

GHC.TopHandler.runMainIO3 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionAsyncException_$ctoException
            GHC.IO.Exception.UserInterrupt;

GHC.TopHandler.runMainIO4 :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [2#];

GHC.TopHandler.runMainIO1
  :: forall a.
     GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [main_sdQqG void_0E]
        let {
          sat_sdQro [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPCw #)
          [LclId] =
              [main_sdQqG] \r [void_0E]
                  case myThreadId# [GHC.Prim.void#] of {
                    Unit# ipv1_sdQqL ->
                        let {
                          sat_sdQqM [Occ=Once] :: GHC.Conc.Sync.ThreadId
                          [LclId] =
                              CCCS GHC.Conc.Sync.ThreadId! [ipv1_sdQqL];
                        } in 
                          case mkWeakNoFinalizer# [ipv1_sdQqL sat_sdQqM GHC.Prim.void#] of {
                            Unit# ipv3_sdQqP ->
                                case __pkg_ccall base-4.11.0.0 [ipv3_sdQqP GHC.Prim.void#] of {
                                  (##) ->
                                      let {
                                        sat_sdQrd [Occ=Once] :: GHC.Types.IO ()
                                        [LclId] =
                                            [ipv3_sdQqP] \r [void_0E]
                                                case deRefWeak# [ipv3_sdQqP GHC.Prim.void#] of {
                                                  (#,#) ipv5_sdQr7 [Occ=Once!]
                                                        ipv6_sdQr8 [Occ=Once!] ->
                                                      case ipv5_sdQr7 of {
                                                        __DEFAULT ->
                                                            case ipv6_sdQr8 of {
                                                              GHC.Conc.Sync.ThreadId tid_sdQrb [Occ=Once] ->
                                                                  case
                                                                      killThread# [tid_sdQrb
                                                                                   GHC.TopHandler.runMainIO3
                                                                                   GHC.Prim.void#]
                                                                  of
                                                                  s2_sdQrc
                                                                  { (##) -> Unit# [GHC.Tuple.()];
                                                                  };
                                                            };
                                                        0# -> Unit# [GHC.Tuple.()];
                                                      };
                                                }; } in
                                      let {
                                        sat_sdQre [Occ=Once] :: Data.Dynamic.Dynamic
                                        [LclId] =
                                            CCCS Data.Dynamic.Dynamic! [GHC.TopHandler.runMainIO2
                                                                        sat_sdQrd]; } in
                                      let {
                                        sat_sdQr3 [Occ=Once]
                                          :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                             -> GHC.Types.IO ()
                                        [LclId] =
                                            [ipv3_sdQqP] \r [ds3_sdQqT void_0E]
                                                case deRefWeak# [ipv3_sdQqP GHC.Prim.void#] of {
                                                  (#,#) ipv5_sdQqX [Occ=Once!]
                                                        ipv6_sdQqY [Occ=Once!] ->
                                                      case ipv5_sdQqX of {
                                                        __DEFAULT ->
                                                            case ipv6_sdQqY of {
                                                              GHC.Conc.Sync.ThreadId tid_sdQr1 [Occ=Once] ->
                                                                  case
                                                                      killThread# [tid_sdQr1
                                                                                   GHC.TopHandler.runMainIO3
                                                                                   GHC.Prim.void#]
                                                                  of
                                                                  s1_sdQr2
                                                                  { (##) -> Unit# [GHC.Tuple.()];
                                                                  };
                                                            };
                                                        0# -> Unit# [GHC.Tuple.()];
                                                      };
                                                }; } in
                                      let {
                                        sat_sdQrf [Occ=Once]
                                          :: (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                              -> GHC.Types.IO (),
                                              Data.Dynamic.Dynamic)
                                        [LclId] =
                                            CCCS (,)! [sat_sdQr3 sat_sdQre]; } in
                                      let {
                                        sat_sdQrg [Occ=Once]
                                          :: GHC.Base.Maybe
                                               (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic)
                                        [LclId] =
                                            CCCS GHC.Base.Just! [sat_sdQrf];
                                      } in 
                                        case
                                            GHC.Conc.Signal.setHandler1
                                                GHC.TopHandler.runMainIO4 sat_sdQrg GHC.Prim.void#
                                        of
                                        { Unit# _ [Occ=Dead] ->
                                              case
                                                  __pkg_ccall base-4.11.0.0 [2#
                                                                             -5#
                                                                             __NULL
                                                                             GHC.Prim.void#]
                                              of
                                              { Unit# _ [Occ=Dead] -> main_sdQqG GHC.Prim.void#;
                                              };
                                        };
                                };
                          };
                  };
        } in  catch# [sat_sdQro GHC.TopHandler.runIO2 GHC.Prim.void#];

GHC.TopHandler.runMainIO
  :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.TopHandler.runMainIO1 eta_B2 GHC.Prim.void#;


==================== Pre unarise: ====================
2018-03-16 16:09:07.019039039 UTC

GHC.TopHandler.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.TopHandler.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TopHandler.$trModule4];

GHC.TopHandler.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.TopHandler"#;

GHC.TopHandler.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TopHandler.$trModule2];

GHC.TopHandler.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.TopHandler.$trModule3
                                     GHC.TopHandler.$trModule1];

GHC.TopHandler.runMainIO2
  :: Data.Typeable.Internal.TypeRep (GHC.Types.IO ())
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                11571292540224541508##
                14006894820825784566##
                GHC.Types.$trModule
                GHC.Types.$tcIO1
                0#
                GHC.Types.krep$*Arr*
                GHC.Types.[]
        of
        { (#,,,,#) ww8_sdRtu [Occ=Once]
                   ww9_sdRtv [Occ=Once]
                   ww10_sdRtw [Occ=Once]
                   ww11_sdRtx [Occ=Once]
                   ww12_sdRty [Occ=Once] ->
              case
                  Data.Typeable.Internal.$wmkTrCon
                      2684808367141291271##
                      14290630168515401665##
                      GHC.Tuple.$trModule
                      GHC.Tuple.$tc()1
                      0#
                      GHC.Types.krep$*
                      GHC.Types.[]
              of
              { (#,,,,#) ww2_sdRtA [Occ=Once]
                         ww3_sdRtB [Occ=Once]
                         ww4_sdRtC [Occ=Once]
                         ww5_sdRtD [Occ=Once]
                         ww6_sdRtE [Occ=Once] ->
                    let {
                      sat_sdRtG [Occ=Once] :: Data.Typeable.Internal.TypeRep ()
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww2_sdRtA
                                                                ww3_sdRtB
                                                                ww4_sdRtC
                                                                ww5_sdRtD
                                                                ww6_sdRtE]; } in
                    let {
                      sat_sdRtF [Occ=Once] :: Data.Typeable.Internal.TypeRep GHC.Types.IO
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww8_sdRtu
                                                                ww9_sdRtv
                                                                ww10_sdRtw
                                                                ww11_sdRtx
                                                                ww12_sdRty];
                    } in  Data.Typeable.Internal.mkTrApp sat_sdRtF sat_sdRtG;
              };
        };

unreachable_rdQlR :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "If you can read this, shutdownHaskellAndExit did not exit."#;

unreachable1_rdQlS :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# unreachable_rdQlR;

GHC.TopHandler.flushStdHandles2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.IO.Handle.Internals.wantWritableHandle1
            GHC.IO.Handle.hFlush2
            GHC.IO.Handle.FD.stderr
            GHC.IO.Handle.Internals.flushWriteBuffer1
            eta_B1;

GHC.TopHandler.flushStdHandles3
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds1_sdRtH eta_sdRtI]
        case ds1_sdRtH of {
          GHC.Exception.SomeException _ [Occ=Dead] _ [Occ=Dead] ->
              (#,#) [eta_sdRtI GHC.Tuple.()];
        };

GHC.TopHandler.flushStdHandles4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.IO.Handle.Internals.wantWritableHandle1
            GHC.IO.Handle.hFlush2
            GHC.IO.Handle.FD.stdout
            GHC.IO.Handle.Internals.flushWriteBuffer1
            eta_B1;

GHC.TopHandler.flushStdHandles1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [s_sdRtM]
        case
            catch# [GHC.TopHandler.flushStdHandles4
                    GHC.TopHandler.flushStdHandles3
                    s_sdRtM]
        of
        { (#,#) ipv_sdRtO [Occ=Once] _ [Occ=Dead] ->
              catch# [GHC.TopHandler.flushStdHandles2
                      GHC.TopHandler.flushStdHandles3
                      ipv_sdRtO];
        };

GHC.TopHandler.flushStdHandles :: GHC.Types.IO ()
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.TopHandler.flushStdHandles1 eta_B1;

$wexitHelper_rdQlT
  :: forall a.
     Foreign.C.Types.CInt -> GHC.Prim.Int# -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,U(U)><S,U>, Unf=OtherCon []] =
    sat-only [] \r [w_sdRtQ ww_sdRtR]
        let-no-escape {
          $j_sdRtS [Occ=Once*T[0], Dmd=<L,1*U>] :: GHC.Types.IO a_sdQcn
          [LclId[JoinId(0)], Unf=OtherCon []] =
              [w_sdRtQ ww_sdRtR] \r []
                  let-no-escape {
                    $j1_sdRtT [Occ=Once*T[0], Dmd=<L,1*U>] :: GHC.Types.IO a_sdQcn
                    [LclId[JoinId(0)], Unf=OtherCon []] =
                        [w_sdRtQ] \r []
                            let {
                              sat_sdRu0 [Occ=Once]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_sdQcn #)
                              [LclId] =
                                  [w_sdRtQ] \r [s_sdRtU]
                                      case w_sdRtQ of {
                                        GHC.Int.I32# ds1_sdRtW [Occ=Once] ->
                                            case
                                                __pkg_ccall_GC base-4.11.0.0 [255#
                                                                              ds1_sdRtW
                                                                              s_sdRtU]
                                            of
                                            { Unit# ds2_sdRtZ [Occ=Once] ->
                                                  GHC.IO.failIO1 unreachable1_rdQlS ds2_sdRtZ;
                                            };
                                      };
                            } in  sat_sdRu0;
                  } in 
                    case >=# [ww_sdRtR -127#] of {
                      __DEFAULT -> $j1_sdRtT;
                      1# ->
                          case <=# [ww_sdRtR -1#] of {
                            __DEFAULT -> $j1_sdRtT;
                            1# ->
                                let {
                                  sat_sdRub [Occ=Once]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_sdQcn #)
                                  [LclId] =
                                      [w_sdRtQ ww_sdRtR] \r [s_sdRu3]
                                          case w_sdRtQ of {
                                            GHC.Int.I32# ds1_sdRu5 [Occ=Once] ->
                                                case negateInt# [ww_sdRtR] of sat_sdRu7 {
                                                  __DEFAULT ->
                                                      case narrow32Int# [sat_sdRu7] of sat_sdRu8 {
                                                        __DEFAULT ->
                                                            case
                                                                __pkg_ccall_GC base-4.11.0.0 [sat_sdRu8
                                                                                              ds1_sdRu5
                                                                                              s_sdRu3]
                                                            of
                                                            { Unit# ds2_sdRua [Occ=Once] ->
                                                                  GHC.IO.failIO1
                                                                      unreachable1_rdQlS ds2_sdRua;
                                                            };
                                                      };
                                                };
                                          };
                                } in  sat_sdRub;
                          };
                    };
        } in 
          case >=# [ww_sdRtR 0#] of {
            __DEFAULT -> $j_sdRtS;
            1# ->
                case <=# [ww_sdRtR 255#] of {
                  __DEFAULT -> $j_sdRtS;
                  1# ->
                      let {
                        sat_sdRul [Occ=Once]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_sdQcn #)
                        [LclId] =
                            [w_sdRtQ ww_sdRtR] \r [s_sdRue]
                                case w_sdRtQ of {
                                  GHC.Int.I32# ds1_sdRug [Occ=Once] ->
                                      case narrow32Int# [ww_sdRtR] of sat_sdRui {
                                        __DEFAULT ->
                                            case
                                                __pkg_ccall_GC base-4.11.0.0 [sat_sdRui
                                                                              ds1_sdRug
                                                                              s_sdRue]
                                            of
                                            { Unit# ds2_sdRuk [Occ=Once] ->
                                                  GHC.IO.failIO1 unreachable1_rdQlS ds2_sdRuk;
                                            };
                                      };
                                };
                      } in  sat_sdRul;
                };
          };

safeExit1_rdQlU :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [0#];

safeExit_rdPtY :: forall a. GHC.Types.Int -> GHC.Types.IO a
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_sdRum]
        case w_sdRum of {
          GHC.Types.I# ww1_sdRuo [Occ=Once] ->
              $wexitHelper_rdQlT safeExit1_rdQlU ww1_sdRuo;
        };

exitInterrupted_rdPu2 :: forall a. GHC.Types.IO a
[GblId] =
    [] \u [] $wexitHelper_rdQlT safeExit1_rdQlU -2#;

lvl_rdQlV :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

lvl1_rdQlW :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

msgStr_rdQlX :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "encountered an exception while trying to report an exception.\n\
    \One possible reason for this is that we failed while trying to encode an error message. Check that your locale is configured properly."#;

msgStr1_rdQlY :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# msgStr_rdQlX;

str_rdQlZ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "%s"#;

str1_rdQm0 :: GHC.Base.String
[GblId] =
    [] \u [] GHC.CString.unpackCString# str_rdQlZ;

lvl2_rdQm1 :: GHC.Types.Int
[GblId] =
    [] \u []
        case GHC.List.$wlenAcc msgStr1_rdQlY 0# of v_sdRup {
          __DEFAULT -> GHC.Types.I# [v_sdRup];
        };

lvl3_rdQm2 :: GHC.Types.Int
[GblId] =
    [] \u []
        case GHC.List.$wlenAcc str1_rdQm0 0# of v_sdRuq {
          __DEFAULT -> GHC.Types.I# [v_sdRuq];
        };

lvl4_rdQm3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

lvl5_rdQm4 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [251#];

real_handler_rdQm5
  :: forall a.
     (GHC.Types.Int -> GHC.Types.IO a)
     -> GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Str=<L,C(C1(U(U,U)))><S,U><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [exit_sdRur se_sdRus s_sdRut]
        case
            catch# [GHC.TopHandler.flushStdHandles4
                    GHC.TopHandler.flushStdHandles3
                    s_sdRut]
        of
        { (#,#) ipv_sdRuv [Occ=Once] _ [Occ=Dead] ->
              case
                  catch# [GHC.TopHandler.flushStdHandles2
                          GHC.TopHandler.flushStdHandles3
                          ipv_sdRuv]
              of
              { (#,#) ipv2_sdRuy _ [Occ=Dead] ->
                    let-no-escape {
                      fail_sdRuA [Occ=Once*!T[1], Dmd=<L,1*C1(U(U,U))>]
                        :: GHC.Prim.Void#
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPA7 #)
                      [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                          sat-only [exit_sdRur se_sdRus ipv2_sdRuy] \r [ds_sdRuB]
                              case se_sdRus of wild_sdRuC {
                                GHC.Exception.SomeException $dException1_sdRuD
                                                            e2_sdRuE [Occ=Once*] ->
                                    case
                                        GHC.Exception.$p1Exception $dException1_sdRuD
                                    of
                                    sat_sdRuF
                                    { __DEFAULT ->
                                          case
                                              Data.Typeable.Internal.sameTypeRep
                                                  sat_sdRuF GHC.IO.Exception.$fExceptionExitCode4
                                          of
                                          { GHC.Types.False ->
                                                let {
                                                  sat_sdRxp [Occ=Once]
                                                    :: GHC.Exception.SomeException
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             a_adPA7 #)
                                                  [LclId] =
                                                      [exit_sdRur] \r [e4_sdRwi eta_sdRwj]
                                                          case e4_sdRwi of wild2_sdRwk {
                                                            GHC.Exception.SomeException $dException2_sdRwl [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                case
                                                                    GHC.Exception.$p1Exception
                                                                        $dException2_sdRwl
                                                                of
                                                                sat_sdRwn
                                                                { __DEFAULT ->
                                                                      case
                                                                          Data.Typeable.Internal.sameTypeRep
                                                                              sat_sdRwn
                                                                              GHC.IO.Exception.$fExceptionIOException4
                                                                      of
                                                                      { GHC.Types.False ->
                                                                            raiseIO# [wild2_sdRwk
                                                                                      eta_sdRwj];
                                                                        GHC.Types.True ->
                                                                            case lvl3_rdQm2 of {
                                                                              GHC.Types.I# v1_sdRwq [Occ=Once] ->
                                                                                  case
                                                                                      +# [v1_sdRwq
                                                                                          1#]
                                                                                  of
                                                                                  sat_sdRwr
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            newAlignedPinnedByteArray# [sat_sdRwr
                                                                                                                        1#
                                                                                                                        eta_sdRwj]
                                                                                        of
                                                                                        { (#,#) ipv4_sdRwt [Occ=Once]
                                                                                                ipv5_sdRwu [Occ=Once] ->
                                                                                              case
                                                                                                  unsafeFreezeByteArray# [ipv5_sdRwu
                                                                                                                          ipv4_sdRwt]
                                                                                              of
                                                                                              { (#,#) ipv6_sdRww [Occ=Once]
                                                                                                      ipv7_sdRwx ->
                                                                                                    case
                                                                                                        byteArrayContents# [ipv7_sdRwx]
                                                                                                    of
                                                                                                    ptr_sdRwy [Dmd=<S,U>]
                                                                                                    { __DEFAULT ->
                                                                                                          let-no-escape {
                                                                                                            exit1_sdRwz [Occ=OnceL!T[2],
                                                                                                                         Dmd=<C(C(S)),C(C1(U))>]
                                                                                                              :: GHC.Prim.Int#
                                                                                                                 -> GHC.Prim.State#
                                                                                                                      GHC.Prim.RealWorld
                                                                                                                 -> (# GHC.Prim.State#
                                                                                                                         GHC.Prim.RealWorld,
                                                                                                                       a_adPA7 #)
                                                                                                            [LclId[JoinId(2)],
                                                                                                             Arity=2,
                                                                                                             Str=<S,U><S,U>,
                                                                                                             Unf=OtherCon []] =
                                                                                                                sat-only [exit_sdRur
                                                                                                                          ipv7_sdRwx
                                                                                                                          ptr_sdRwy] \r [ww_sdRwA
                                                                                                                                         w_sdRwB]
                                                                                                                    case
                                                                                                                        writeInt8OffAddr# [ptr_sdRwy
                                                                                                                                           ww_sdRwA
                                                                                                                                           0#
                                                                                                                                           w_sdRwB]
                                                                                                                    of
                                                                                                                    s2_sdRwC
                                                                                                                    { __DEFAULT ->
                                                                                                                          case
                                                                                                                              lvl2_rdQm1
                                                                                                                          of
                                                                                                                          { GHC.Types.I# v3_sdRwE [Occ=Once] ->
                                                                                                                                case
                                                                                                                                    +# [v3_sdRwE
                                                                                                                                        1#]
                                                                                                                                of
                                                                                                                                sat_sdRwF
                                                                                                                                { __DEFAULT ->
                                                                                                                                      case
                                                                                                                                          newAlignedPinnedByteArray# [sat_sdRwF
                                                                                                                                                                      1#
                                                                                                                                                                      s2_sdRwC]
                                                                                                                                      of
                                                                                                                                      { (#,#) ipv8_sdRwH [Occ=Once]
                                                                                                                                              ipv9_sdRwI [Occ=Once] ->
                                                                                                                                            case
                                                                                                                                                unsafeFreezeByteArray# [ipv9_sdRwI
                                                                                                                                                                        ipv8_sdRwH]
                                                                                                                                            of
                                                                                                                                            { (#,#) ipv10_sdRwK [Occ=Once]
                                                                                                                                                    ipv11_sdRwL ->
                                                                                                                                                  case
                                                                                                                                                      byteArrayContents# [ipv11_sdRwL]
                                                                                                                                                  of
                                                                                                                                                  ptr1_sdRwM [Dmd=<S,U>]
                                                                                                                                                  { __DEFAULT ->
                                                                                                                                                        let-no-escape {
                                                                                                                                                          exit2_sdRwN [Occ=OnceL!T[2],
                                                                                                                                                                       Dmd=<C(C(S)),C(C1(U))>]
                                                                                                                                                            :: GHC.Prim.Int#
                                                                                                                                                               -> GHC.Prim.State#
                                                                                                                                                                    GHC.Prim.RealWorld
                                                                                                                                                               -> (# GHC.Prim.State#
                                                                                                                                                                       GHC.Prim.RealWorld,
                                                                                                                                                                     a_adPA7 #)
                                                                                                                                                          [LclId[JoinId(2)],
                                                                                                                                                           Arity=2,
                                                                                                                                                           Str=<S,U><S,U>,
                                                                                                                                                           Unf=OtherCon []] =
                                                                                                                                                              sat-only [exit_sdRur
                                                                                                                                                                        ipv7_sdRwx
                                                                                                                                                                        ptr_sdRwy
                                                                                                                                                                        ipv11_sdRwL
                                                                                                                                                                        ptr1_sdRwM] \r [ww1_sdRwO
                                                                                                                                                                                        w1_sdRwP]
                                                                                                                                                                  case
                                                                                                                                                                      writeInt8OffAddr# [ptr1_sdRwM
                                                                                                                                                                                         ww1_sdRwO
                                                                                                                                                                                         0#
                                                                                                                                                                                         w1_sdRwP]
                                                                                                                                                                  of
                                                                                                                                                                  s1_sdRwQ
                                                                                                                                                                  { __DEFAULT ->
                                                                                                                                                                        case
                                                                                                                                                                            __pkg_ccall base-4.11.0.0 [ptr_sdRwy
                                                                                                                                                                                                       ptr1_sdRwM
                                                                                                                                                                                                       s1_sdRwQ]
                                                                                                                                                                        of
                                                                                                                                                                        { Unit# ds7_sdRwT [Occ=Once] ->
                                                                                                                                                                              case
                                                                                                                                                                                  exit_sdRur
                                                                                                                                                                                      lvl_rdQlV
                                                                                                                                                                                      ds7_sdRwT
                                                                                                                                                                              of
                                                                                                                                                                              { (#,#) ipv12_sdRwV [Occ=Once]
                                                                                                                                                                                      ipv13_sdRwW [Occ=Once] ->
                                                                                                                                                                                    case
                                                                                                                                                                                        touch# [ipv11_sdRwL
                                                                                                                                                                                                ipv12_sdRwV]
                                                                                                                                                                                    of
                                                                                                                                                                                    s4_sdRwX
                                                                                                                                                                                    { __DEFAULT ->
                                                                                                                                                                                          case
                                                                                                                                                                                              touch# [ipv7_sdRwx
                                                                                                                                                                                                      s4_sdRwX]
                                                                                                                                                                                          of
                                                                                                                                                                                          s3_sdRwY
                                                                                                                                                                                          { __DEFAULT ->
                                                                                                                                                                                                (#,#) [s3_sdRwY
                                                                                                                                                                                                       ipv13_sdRwW];
                                                                                                                                                                                          };
                                                                                                                                                                                    };
                                                                                                                                                                              };
                                                                                                                                                                        };
                                                                                                                                                                  };
                                                                                                                                                        } in 
                                                                                                                                                          let-no-escape {
                                                                                                                                                            $wgo_sdRwZ [InlPrag=NOUSERINLINE[0],
                                                                                                                                                                        Occ=LoopBreakerT[3]]
                                                                                                                                                              :: [GHC.Types.Char]
                                                                                                                                                                 -> GHC.Prim.Int#
                                                                                                                                                                 -> GHC.Prim.State#
                                                                                                                                                                      GHC.Prim.RealWorld
                                                                                                                                                                 -> (# GHC.Prim.State#
                                                                                                                                                                         GHC.Prim.RealWorld,
                                                                                                                                                                       a_adPA7 #)
                                                                                                                                                            [LclId[JoinId(3)],
                                                                                                                                                             Arity=3,
                                                                                                                                                             Str=<S,1*U><S,U><S,U>,
                                                                                                                                                             Unf=OtherCon []] =
                                                                                                                                                                sat-only [ptr1_sdRwM
                                                                                                                                                                          exit2_sdRwN
                                                                                                                                                                          $wgo_sdRwZ] \r [w1_sdRx0
                                                                                                                                                                                          ww1_sdRx1
                                                                                                                                                                                          w2_sdRx2]
                                                                                                                                                                    case
                                                                                                                                                                        w1_sdRx0
                                                                                                                                                                    of
                                                                                                                                                                    { [] ->
                                                                                                                                                                          exit2_sdRwN
                                                                                                                                                                              ww1_sdRx1
                                                                                                                                                                              w2_sdRx2;
                                                                                                                                                                      : c_sdRx4 [Occ=Once!]
                                                                                                                                                                        cs_sdRx5 [Occ=Once] ->
                                                                                                                                                                          case
                                                                                                                                                                              c_sdRx4
                                                                                                                                                                          of
                                                                                                                                                                          { GHC.Types.C# c#_sdRx7 [Occ=Once] ->
                                                                                                                                                                                case
                                                                                                                                                                                    ord# [c#_sdRx7]
                                                                                                                                                                                of
                                                                                                                                                                                sat_sdRx8
                                                                                                                                                                                { __DEFAULT ->
                                                                                                                                                                                      case
                                                                                                                                                                                          narrow8Int# [sat_sdRx8]
                                                                                                                                                                                      of
                                                                                                                                                                                      sat_sdRx9
                                                                                                                                                                                      { __DEFAULT ->
                                                                                                                                                                                            case
                                                                                                                                                                                                writeInt8OffAddr# [ptr1_sdRwM
                                                                                                                                                                                                                   ww1_sdRx1
                                                                                                                                                                                                                   sat_sdRx9
                                                                                                                                                                                                                   w2_sdRx2]
                                                                                                                                                                                            of
                                                                                                                                                                                            s1_sdRxa
                                                                                                                                                                                            { __DEFAULT ->
                                                                                                                                                                                                  case
                                                                                                                                                                                                      +# [ww1_sdRx1
                                                                                                                                                                                                          1#]
                                                                                                                                                                                                  of
                                                                                                                                                                                                  sat_sdRxb
                                                                                                                                                                                                  { __DEFAULT ->
                                                                                                                                                                                                        $wgo_sdRwZ
                                                                                                                                                                                                            cs_sdRx5
                                                                                                                                                                                                            sat_sdRxb
                                                                                                                                                                                                            s1_sdRxa;
                                                                                                                                                                                                  };
                                                                                                                                                                                            };
                                                                                                                                                                                      };
                                                                                                                                                                                };
                                                                                                                                                                          };
                                                                                                                                                                    };
                                                                                                                                                          } in 
                                                                                                                                                            $wgo_sdRwZ
                                                                                                                                                                msgStr1_rdQlY
                                                                                                                                                                0#
                                                                                                                                                                ipv10_sdRwK;
                                                                                                                                                  };
                                                                                                                                            };
                                                                                                                                      };
                                                                                                                                };
                                                                                                                          };
                                                                                                                    };
                                                                                                          } in 
                                                                                                            let-no-escape {
                                                                                                              $wgo_sdRxc [InlPrag=NOUSERINLINE[0],
                                                                                                                          Occ=LoopBreakerT[3]]
                                                                                                                :: [GHC.Types.Char]
                                                                                                                   -> GHC.Prim.Int#
                                                                                                                   -> GHC.Prim.State#
                                                                                                                        GHC.Prim.RealWorld
                                                                                                                   -> (# GHC.Prim.State#
                                                                                                                           GHC.Prim.RealWorld,
                                                                                                                         a_adPA7 #)
                                                                                                              [LclId[JoinId(3)],
                                                                                                               Arity=3,
                                                                                                               Str=<S,1*U><S,U><S,U>,
                                                                                                               Unf=OtherCon []] =
                                                                                                                  sat-only [ptr_sdRwy
                                                                                                                            exit1_sdRwz
                                                                                                                            $wgo_sdRxc] \r [w_sdRxd
                                                                                                                                            ww_sdRxe
                                                                                                                                            w1_sdRxf]
                                                                                                                      case
                                                                                                                          w_sdRxd
                                                                                                                      of
                                                                                                                      { [] ->
                                                                                                                            exit1_sdRwz
                                                                                                                                ww_sdRxe
                                                                                                                                w1_sdRxf;
                                                                                                                        : c_sdRxh [Occ=Once!]
                                                                                                                          cs_sdRxi [Occ=Once] ->
                                                                                                                            case
                                                                                                                                c_sdRxh
                                                                                                                            of
                                                                                                                            { GHC.Types.C# c#_sdRxk [Occ=Once] ->
                                                                                                                                  case
                                                                                                                                      ord# [c#_sdRxk]
                                                                                                                                  of
                                                                                                                                  sat_sdRxl
                                                                                                                                  { __DEFAULT ->
                                                                                                                                        case
                                                                                                                                            narrow8Int# [sat_sdRxl]
                                                                                                                                        of
                                                                                                                                        sat_sdRxm
                                                                                                                                        { __DEFAULT ->
                                                                                                                                              case
                                                                                                                                                  writeInt8OffAddr# [ptr_sdRwy
                                                                                                                                                                     ww_sdRxe
                                                                                                                                                                     sat_sdRxm
                                                                                                                                                                     w1_sdRxf]
                                                                                                                                              of
                                                                                                                                              s2_sdRxn
                                                                                                                                              { __DEFAULT ->
                                                                                                                                                    case
                                                                                                                                                        +# [ww_sdRxe
                                                                                                                                                            1#]
                                                                                                                                                    of
                                                                                                                                                    sat_sdRxo
                                                                                                                                                    { __DEFAULT ->
                                                                                                                                                          $wgo_sdRxc
                                                                                                                                                              cs_sdRxi
                                                                                                                                                              sat_sdRxo
                                                                                                                                                              s2_sdRxn;
                                                                                                                                                    };
                                                                                                                                              };
                                                                                                                                        };
                                                                                                                                  };
                                                                                                                            };
                                                                                                                      };
                                                                                                            } in 
                                                                                                              $wgo_sdRxc
                                                                                                                  str1_rdQm0
                                                                                                                  0#
                                                                                                                  ipv6_sdRww;
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                          }; } in
                                                let {
                                                  sat_sdRwh [Occ=Once, Dmd=<L,1*C1(U)>]
                                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             a_adPA7 #)
                                                  [LclId] =
                                                      [exit_sdRur
                                                       wild_sdRuC
                                                       $dException1_sdRuD
                                                       e2_sdRuE] \s []
                                                          case
                                                              GHC.Exception.$p1Exception
                                                                  $dException1_sdRuD
                                                          of
                                                          sat_sdRuH
                                                          { __DEFAULT ->
                                                                case
                                                                    Data.Typeable.Internal.sameTypeRep
                                                                        sat_sdRuH
                                                                        GHC.IO.Exception.$fExceptionIOException4
                                                                of
                                                                { GHC.Types.False ->
                                                                      let {
                                                                        sat_sdRuS [Occ=OnceT[0]]
                                                                          :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   a_adPA7 #)
                                                                        [LclId] =
                                                                            [exit_sdRur
                                                                             wild_sdRuC] \r [s1_sdRuJ]
                                                                                case
                                                                                    GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                of
                                                                                { GHC.STRef.STRef var#_sdRuL [Occ=Once] ->
                                                                                      case
                                                                                          readMutVar# [var#_sdRuL
                                                                                                       s1_sdRuJ]
                                                                                      of
                                                                                      { (#,#) ipv4_sdRuN [Occ=Once]
                                                                                              ipv5_sdRuO [Occ=Once!] ->
                                                                                            case
                                                                                                ipv5_sdRuO
                                                                                                    wild_sdRuC
                                                                                                    ipv4_sdRuN
                                                                                            of
                                                                                            { (#,#) ipv6_sdRuQ [Occ=Once]
                                                                                                    _ [Occ=Dead] ->
                                                                                                  exit_sdRur
                                                                                                      lvl_rdQlV
                                                                                                      ipv6_sdRuQ;
                                                                                            };
                                                                                      };
                                                                                };
                                                                      } in  sat_sdRuS;
                                                                  GHC.Types.True ->
                                                                      case e2_sdRuE of {
                                                                        GHC.IO.Exception.IOError ds3_sdRuU [Occ=Once!]
                                                                                                 ds4_sdRuV [Occ=Once!]
                                                                                                 _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 ds7_sdRuY [Occ=Once!]
                                                                                                 _ [Occ=Dead] ->
                                                                            case ds4_sdRuV of {
                                                                              __DEFAULT ->
                                                                                  let {
                                                                                    sat_sdRva [Occ=OnceT[0]]
                                                                                      :: GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld
                                                                                         -> (# GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld,
                                                                                               a_adPA7 #)
                                                                                    [LclId] =
                                                                                        [exit_sdRur
                                                                                         wild_sdRuC] \r [s1_sdRv1]
                                                                                            case
                                                                                                GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                            of
                                                                                            { GHC.STRef.STRef var#_sdRv3 [Occ=Once] ->
                                                                                                  case
                                                                                                      readMutVar# [var#_sdRv3
                                                                                                                   s1_sdRv1]
                                                                                                  of
                                                                                                  { (#,#) ipv4_sdRv5 [Occ=Once]
                                                                                                          ipv5_sdRv6 [Occ=Once!] ->
                                                                                                        case
                                                                                                            ipv5_sdRv6
                                                                                                                wild_sdRuC
                                                                                                                ipv4_sdRv5
                                                                                                        of
                                                                                                        { (#,#) ipv6_sdRv8 [Occ=Once]
                                                                                                                _ [Occ=Dead] ->
                                                                                                              exit_sdRur
                                                                                                                  lvl_rdQlV
                                                                                                                  ipv6_sdRv8;
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                  } in  sat_sdRva;
                                                                              GHC.IO.Exception.ResourceVanished ->
                                                                                  case
                                                                                      ds7_sdRuY
                                                                                  of
                                                                                  { GHC.Base.Nothing ->
                                                                                        let {
                                                                                          sat_sdRvl [Occ=OnceT[0]]
                                                                                            :: GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld,
                                                                                                     a_adPA7 #)
                                                                                          [LclId] =
                                                                                              [exit_sdRur
                                                                                               wild_sdRuC] \r [s1_sdRvc]
                                                                                                  case
                                                                                                      GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                  of
                                                                                                  { GHC.STRef.STRef var#_sdRve [Occ=Once] ->
                                                                                                        case
                                                                                                            readMutVar# [var#_sdRve
                                                                                                                         s1_sdRvc]
                                                                                                        of
                                                                                                        { (#,#) ipv4_sdRvg [Occ=Once]
                                                                                                                ipv5_sdRvh [Occ=Once!] ->
                                                                                                              case
                                                                                                                  ipv5_sdRvh
                                                                                                                      wild_sdRuC
                                                                                                                      ipv4_sdRvg
                                                                                                              of
                                                                                                              { (#,#) ipv6_sdRvj [Occ=Once]
                                                                                                                      _ [Occ=Dead] ->
                                                                                                                    exit_sdRur
                                                                                                                        lvl_rdQlV
                                                                                                                        ipv6_sdRvj;
                                                                                                              };
                                                                                                        };
                                                                                                  };
                                                                                        } in 
                                                                                          sat_sdRvl;
                                                                                    GHC.Base.Just ioe_sdRvm [Occ=Once] ->
                                                                                        case
                                                                                            ds3_sdRuU
                                                                                        of
                                                                                        { GHC.Base.Nothing ->
                                                                                              let {
                                                                                                sat_sdRvx [Occ=OnceT[0]]
                                                                                                  :: GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                     -> (# GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld,
                                                                                                           a_adPA7 #)
                                                                                                [LclId] =
                                                                                                    [exit_sdRur
                                                                                                     wild_sdRuC] \r [s1_sdRvo]
                                                                                                        case
                                                                                                            GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                        of
                                                                                                        { GHC.STRef.STRef var#_sdRvq [Occ=Once] ->
                                                                                                              case
                                                                                                                  readMutVar# [var#_sdRvq
                                                                                                                               s1_sdRvo]
                                                                                                              of
                                                                                                              { (#,#) ipv4_sdRvs [Occ=Once]
                                                                                                                      ipv5_sdRvt [Occ=Once!] ->
                                                                                                                    case
                                                                                                                        ipv5_sdRvt
                                                                                                                            wild_sdRuC
                                                                                                                            ipv4_sdRvs
                                                                                                                    of
                                                                                                                    { (#,#) ipv6_sdRvv [Occ=Once]
                                                                                                                            _ [Occ=Dead] ->
                                                                                                                          exit_sdRur
                                                                                                                              lvl_rdQlV
                                                                                                                              ipv6_sdRvv;
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                              } in 
                                                                                                sat_sdRvx;
                                                                                          GHC.Base.Just hdl_sdRvy [Occ=Once!] ->
                                                                                              case
                                                                                                  ioe_sdRvm
                                                                                              of
                                                                                              { GHC.Int.I32# x_sdRvA [Occ=Once!] ->
                                                                                                    case
                                                                                                        x_sdRvA
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          let {
                                                                                                            sat_sdRvL [Occ=OnceT[0]]
                                                                                                              :: GHC.Prim.State#
                                                                                                                   GHC.Prim.RealWorld
                                                                                                                 -> (# GHC.Prim.State#
                                                                                                                         GHC.Prim.RealWorld,
                                                                                                                       a_adPA7 #)
                                                                                                            [LclId] =
                                                                                                                [exit_sdRur
                                                                                                                 wild_sdRuC] \r [s1_sdRvC]
                                                                                                                    case
                                                                                                                        GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                                    of
                                                                                                                    { GHC.STRef.STRef var#_sdRvE [Occ=Once] ->
                                                                                                                          case
                                                                                                                              readMutVar# [var#_sdRvE
                                                                                                                                           s1_sdRvC]
                                                                                                                          of
                                                                                                                          { (#,#) ipv4_sdRvG [Occ=Once]
                                                                                                                                  ipv5_sdRvH [Occ=Once!] ->
                                                                                                                                case
                                                                                                                                    ipv5_sdRvH
                                                                                                                                        wild_sdRuC
                                                                                                                                        ipv4_sdRvG
                                                                                                                                of
                                                                                                                                { (#,#) ipv6_sdRvJ [Occ=Once]
                                                                                                                                        _ [Occ=Dead] ->
                                                                                                                                      exit_sdRur
                                                                                                                                          lvl_rdQlV
                                                                                                                                          ipv6_sdRvJ;
                                                                                                                                };
                                                                                                                          };
                                                                                                                    };
                                                                                                          } in 
                                                                                                            sat_sdRvL;
                                                                                                      32# ->
                                                                                                          let-no-escape {
                                                                                                            $j_sdRvM [Occ=Once*T[0],
                                                                                                                      Dmd=<L,1*C1(U)>]
                                                                                                              :: GHC.Prim.State#
                                                                                                                   GHC.Prim.RealWorld
                                                                                                                 -> (# GHC.Prim.State#
                                                                                                                         GHC.Prim.RealWorld,
                                                                                                                       a_adPA7 #)
                                                                                                            [LclId[JoinId(0)],
                                                                                                             Unf=OtherCon []] =
                                                                                                                [exit_sdRur
                                                                                                                 wild_sdRuC] \r []
                                                                                                                    let {
                                                                                                                      sat_sdRvW [Occ=OnceT[0]]
                                                                                                                        :: GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld
                                                                                                                           -> (# GHC.Prim.State#
                                                                                                                                   GHC.Prim.RealWorld,
                                                                                                                                 a_adPA7 #)
                                                                                                                      [LclId] =
                                                                                                                          [exit_sdRur
                                                                                                                           wild_sdRuC] \r [s1_sdRvN]
                                                                                                                              case
                                                                                                                                  GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                                              of
                                                                                                                              { GHC.STRef.STRef var#_sdRvP [Occ=Once] ->
                                                                                                                                    case
                                                                                                                                        readMutVar# [var#_sdRvP
                                                                                                                                                     s1_sdRvN]
                                                                                                                                    of
                                                                                                                                    { (#,#) ipv4_sdRvR [Occ=Once]
                                                                                                                                            ipv5_sdRvS [Occ=Once!] ->
                                                                                                                                          case
                                                                                                                                              ipv5_sdRvS
                                                                                                                                                  wild_sdRuC
                                                                                                                                                  ipv4_sdRvR
                                                                                                                                          of
                                                                                                                                          { (#,#) ipv6_sdRvU [Occ=Once]
                                                                                                                                                  _ [Occ=Dead] ->
                                                                                                                                                exit_sdRur
                                                                                                                                                    lvl_rdQlV
                                                                                                                                                    ipv6_sdRvU;
                                                                                                                                          };
                                                                                                                                    };
                                                                                                                              };
                                                                                                                    } in 
                                                                                                                      sat_sdRvW;
                                                                                                          } in 
                                                                                                            case
                                                                                                                hdl_sdRvy
                                                                                                            of
                                                                                                            { GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                                                                                             dt_sdRvZ [Occ=Once] ->
                                                                                                                  case
                                                                                                                      GHC.IO.Handle.FD.stdout
                                                                                                                  of
                                                                                                                  { GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                                                                                                   dt1_sdRw2 [Occ=Once] ->
                                                                                                                        case
                                                                                                                            sameMVar# [dt_sdRvZ
                                                                                                                                       dt1_sdRw2]
                                                                                                                        of
                                                                                                                        { __DEFAULT ->
                                                                                                                              $j_sdRvM;
                                                                                                                          1# ->
                                                                                                                              exit_sdRur
                                                                                                                                  lvl1_rdQlW;
                                                                                                                        };
                                                                                                                    GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                                                                                                     _ [Occ=Dead]
                                                                                                                                                     _ [Occ=Dead] ->
                                                                                                                        $j_sdRvM;
                                                                                                                  };
                                                                                                              GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                                                                                               dt_sdRw8 [Occ=Once]
                                                                                                                                               _ [Occ=Dead] ->
                                                                                                                  case
                                                                                                                      GHC.IO.Handle.FD.stdout
                                                                                                                  of
                                                                                                                  { GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                                                                                                   _ [Occ=Dead] ->
                                                                                                                        $j_sdRvM;
                                                                                                                    GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                                                                                                     dt2_sdRwe [Occ=Once]
                                                                                                                                                     _ [Occ=Dead] ->
                                                                                                                        case
                                                                                                                            sameMVar# [dt_sdRw8
                                                                                                                                       dt2_sdRwe]
                                                                                                                        of
                                                                                                                        { __DEFAULT ->
                                                                                                                              $j_sdRvM;
                                                                                                                          1# ->
                                                                                                                              exit_sdRur
                                                                                                                                  lvl1_rdQlW;
                                                                                                                        };
                                                                                                                  };
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                } in  catch# [sat_sdRwh sat_sdRxp ipv2_sdRuy];
                                            GHC.Types.True ->
                                                case e2_sdRuE of {
                                                  GHC.IO.Exception.ExitSuccess ->
                                                      exit_sdRur lvl1_rdQlW ipv2_sdRuy;
                                                  GHC.IO.Exception.ExitFailure n_sdRxr [Occ=Once] ->
                                                      exit_sdRur n_sdRxr ipv2_sdRuy;
                                                };
                                          };
                                    };
                              };
                    } in 
                      case
                          GHC.IO.Exception.$fExceptionAsyncException_$cfromException se_sdRus
                      of
                      { GHC.Base.Nothing -> fail_sdRuA GHC.Prim.void#;
                        GHC.Base.Just ds_sdRxt [Occ=Once!] ->
                            case ds_sdRxt of {
                              GHC.IO.Exception.StackOverflow ->
                                  case myThreadId# [ipv2_sdRuy] of {
                                    (#,#) ipv4_sdRxw [Occ=Once] ipv5_sdRxx [Occ=Once] ->
                                        case __pkg_ccall base-4.11.0.0 [ipv5_sdRxx ipv4_sdRxw] of {
                                          Unit# ds4_sdRxA [Occ=Once] ->
                                              exit_sdRur lvl4_rdQm3 ds4_sdRxA;
                                        };
                                  };
                              GHC.IO.Exception.HeapOverflow ->
                                  case __pkg_ccall base-4.11.0.0 [ipv2_sdRuy] of {
                                    Unit# ds3_sdRxD [Occ=Once] -> exit_sdRur lvl5_rdQm4 ds3_sdRxD;
                                  };
                              GHC.IO.Exception.ThreadKilled -> fail_sdRuA GHC.Prim.void#;
                              GHC.IO.Exception.UserInterrupt -> exitInterrupted_rdPu2 ipv2_sdRuy;
                            };
                      };
              };
        };

GHC.TopHandler.runIO2
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [e1_sdRxE eta_sdRxF]
        GHC.TopHandler.runIO3 e1_sdRxE eta_sdRxF;
GHC.TopHandler.runIO3 [Occ=LoopBreaker]
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [err_sdRxG eta_sdRxH]
        let {
          sat_sdRxI [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPBc #)
          [LclId] =
              [err_sdRxG] \r [eta_B1]
                  real_handler_rdQm5 safeExit_rdPtY err_sdRxG eta_B1;
        } in  catch# [sat_sdRxI GHC.TopHandler.runIO2 eta_sdRxH];

GHC.TopHandler.topHandler
  :: forall a. GHC.Exception.SomeException -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TopHandler.runIO3 eta_B2 eta_B1;

GHC.TopHandler.runNonIO1
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [a1_sdRxJ eta_sdRxK]
        let {
          sat_sdRxO [Occ=Once, Dmd=<L,1*C1(U)>]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPBl #)
          [LclId] =
              [a1_sdRxJ] \s []
                  case a1_sdRxJ of a2_sdRxL {
                    __DEFAULT ->
                        let {
                          sat_sdRxN [Occ=OnceT[0]]
                            :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPBl #)
                          [LclId] =
                              [a2_sdRxL] \r [s_sdRxM] (#,#) [s_sdRxM a2_sdRxL];
                        } in  sat_sdRxN;
                  };
        } in  catch# [sat_sdRxO GHC.TopHandler.runIO2 eta_sdRxK];

GHC.TopHandler.runNonIO :: forall a. a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TopHandler.runNonIO1 eta_B2 eta_B1;

GHC.TopHandler.runIO1
  :: forall a.
     GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [main_sdRxP eta_sdRxQ]
        catch# [main_sdRxP GHC.TopHandler.runIO2 eta_sdRxQ];

GHC.TopHandler.runIO :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TopHandler.runIO1 eta_B2 eta_B1;

fastExit1_rdQm6 :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [1#];

fastExit_rdPtZ :: forall a. GHC.Types.Int -> GHC.Types.IO a
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_sdRxR]
        case w_sdRxR of {
          GHC.Types.I# ww1_sdRxT [Occ=Once] ->
              $wexitHelper_rdQlT fastExit1_rdQm6 ww1_sdRxT;
        };

GHC.TopHandler.runIOFastExit2
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [e1_sdRxU eta_sdRxV]
        GHC.TopHandler.runIOFastExit3 e1_sdRxU eta_sdRxV;
GHC.TopHandler.runIOFastExit3 [Occ=LoopBreaker]
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [err_sdRxW eta_sdRxX]
        let {
          sat_sdRxY [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPB0 #)
          [LclId] =
              [err_sdRxW] \r [eta_B1]
                  real_handler_rdQm5 fastExit_rdPtZ err_sdRxW eta_B1;
        } in  catch# [sat_sdRxY GHC.TopHandler.runIOFastExit2 eta_sdRxX];

GHC.TopHandler.topHandlerFastExit
  :: forall a. GHC.Exception.SomeException -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TopHandler.runIOFastExit3 eta_B2 eta_B1;

GHC.TopHandler.runIOFastExit1
  :: forall a.
     GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [main_sdRxZ eta_sdRy0]
        catch# [main_sdRxZ GHC.TopHandler.runIOFastExit2 eta_sdRy0];

GHC.TopHandler.runIOFastExit
  :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TopHandler.runIOFastExit1 eta_B2 eta_B1;

GHC.TopHandler.runMainIO3 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionAsyncException_$ctoException
            GHC.IO.Exception.UserInterrupt;

GHC.TopHandler.runMainIO4 :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [2#];

GHC.TopHandler.runMainIO1
  :: forall a.
     GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [main_sdRy1 eta_sdRy2]
        let {
          sat_sdRyJ [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPCw #)
          [LclId] =
              [main_sdRy1] \r [s_sdRy3]
                  case myThreadId# [s_sdRy3] of {
                    (#,#) ipv_sdRy5 [Occ=Once] ipv1_sdRy6 ->
                        let {
                          sat_sdRy7 [Occ=Once] :: GHC.Conc.Sync.ThreadId
                          [LclId] =
                              CCCS GHC.Conc.Sync.ThreadId! [ipv1_sdRy6];
                        } in 
                          case mkWeakNoFinalizer# [ipv1_sdRy6 sat_sdRy7 ipv_sdRy5] of {
                            (#,#) ipv2_sdRy9 [Occ=Once] ipv3_sdRya ->
                                case __pkg_ccall base-4.11.0.0 [ipv3_sdRya ipv2_sdRy9] of {
                                  Unit# ds2_sdRyd [Occ=Once] ->
                                      let {
                                        sat_sdRyy [Occ=Once] :: GHC.Types.IO ()
                                        [LclId] =
                                            [ipv3_sdRya] \r [s1_sdRyp]
                                                case deRefWeak# [ipv3_sdRya s1_sdRyp] of {
                                                  (#,,#) ipv4_sdRyr [Occ=Once*]
                                                         ipv5_sdRys [Occ=Once!]
                                                         ipv6_sdRyt [Occ=Once!] ->
                                                      case ipv5_sdRys of {
                                                        __DEFAULT ->
                                                            case ipv6_sdRyt of {
                                                              GHC.Conc.Sync.ThreadId tid_sdRyw [Occ=Once] ->
                                                                  case
                                                                      killThread# [tid_sdRyw
                                                                                   GHC.TopHandler.runMainIO3
                                                                                   ipv4_sdRyr]
                                                                  of
                                                                  s2_sdRyx
                                                                  { __DEFAULT ->
                                                                        (#,#) [s2_sdRyx
                                                                               GHC.Tuple.()];
                                                                  };
                                                            };
                                                        0# -> (#,#) [ipv4_sdRyr GHC.Tuple.()];
                                                      };
                                                }; } in
                                      let {
                                        sat_sdRyz [Occ=Once] :: Data.Dynamic.Dynamic
                                        [LclId] =
                                            CCCS Data.Dynamic.Dynamic! [GHC.TopHandler.runMainIO2
                                                                        sat_sdRyy]; } in
                                      let {
                                        sat_sdRyo [Occ=Once]
                                          :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                             -> GHC.Types.IO ()
                                        [LclId] =
                                            [ipv3_sdRya] \r [ds3_sdRye eta1_sdRyf]
                                                case deRefWeak# [ipv3_sdRya eta1_sdRyf] of {
                                                  (#,,#) ipv4_sdRyh [Occ=Once*]
                                                         ipv5_sdRyi [Occ=Once!]
                                                         ipv6_sdRyj [Occ=Once!] ->
                                                      case ipv5_sdRyi of {
                                                        __DEFAULT ->
                                                            case ipv6_sdRyj of {
                                                              GHC.Conc.Sync.ThreadId tid_sdRym [Occ=Once] ->
                                                                  case
                                                                      killThread# [tid_sdRym
                                                                                   GHC.TopHandler.runMainIO3
                                                                                   ipv4_sdRyh]
                                                                  of
                                                                  s1_sdRyn
                                                                  { __DEFAULT ->
                                                                        (#,#) [s1_sdRyn
                                                                               GHC.Tuple.()];
                                                                  };
                                                            };
                                                        0# -> (#,#) [ipv4_sdRyh GHC.Tuple.()];
                                                      };
                                                }; } in
                                      let {
                                        sat_sdRyA [Occ=Once]
                                          :: (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                              -> GHC.Types.IO (),
                                              Data.Dynamic.Dynamic)
                                        [LclId] =
                                            CCCS (,)! [sat_sdRyo sat_sdRyz]; } in
                                      let {
                                        sat_sdRyB [Occ=Once]
                                          :: GHC.Base.Maybe
                                               (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic)
                                        [LclId] =
                                            CCCS GHC.Base.Just! [sat_sdRyA];
                                      } in 
                                        case
                                            GHC.Conc.Signal.setHandler1
                                                GHC.TopHandler.runMainIO4 sat_sdRyB ds2_sdRyd
                                        of
                                        { (#,#) ipv4_sdRyD [Occ=Once] _ [Occ=Dead] ->
                                              case
                                                  __pkg_ccall base-4.11.0.0 [2#
                                                                             -5#
                                                                             __NULL
                                                                             ipv4_sdRyD]
                                              of
                                              { (#,#) ds4_sdRyH [Occ=Once] _ [Occ=Dead] ->
                                                    main_sdRy1 ds4_sdRyH;
                                              };
                                        };
                                };
                          };
                  };
        } in  catch# [sat_sdRyJ GHC.TopHandler.runIO2 eta_sdRy2];

GHC.TopHandler.runMainIO
  :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.TopHandler.runMainIO1 eta_B2 eta_B1;


==================== STG syntax: ====================
2018-03-16 16:09:07.043745728 UTC

GHC.TopHandler.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.TopHandler.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TopHandler.$trModule4];

GHC.TopHandler.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.TopHandler"#;

GHC.TopHandler.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.TopHandler.$trModule2];

GHC.TopHandler.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.TopHandler.$trModule3
                                     GHC.TopHandler.$trModule1];

GHC.TopHandler.runMainIO2
  :: Data.Typeable.Internal.TypeRep (GHC.Types.IO ())
[GblId] =
    [] \u []
        case
            Data.Typeable.Internal.$wmkTrCon
                11571292540224541508##
                14006894820825784566##
                GHC.Types.$trModule
                GHC.Types.$tcIO1
                0#
                GHC.Types.krep$*Arr*
                GHC.Types.[]
        of
        { (#,,,,#) ww8_sdRtu [Occ=Once]
                   ww9_sdRtv [Occ=Once]
                   ww10_sdRtw [Occ=Once]
                   ww11_sdRtx [Occ=Once]
                   ww12_sdRty [Occ=Once] ->
              case
                  Data.Typeable.Internal.$wmkTrCon
                      2684808367141291271##
                      14290630168515401665##
                      GHC.Tuple.$trModule
                      GHC.Tuple.$tc()1
                      0#
                      GHC.Types.krep$*
                      GHC.Types.[]
              of
              { (#,,,,#) ww2_sdRtA [Occ=Once]
                         ww3_sdRtB [Occ=Once]
                         ww4_sdRtC [Occ=Once]
                         ww5_sdRtD [Occ=Once]
                         ww6_sdRtE [Occ=Once] ->
                    let {
                      sat_sdRtG [Occ=Once] :: Data.Typeable.Internal.TypeRep ()
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww2_sdRtA
                                                                ww3_sdRtB
                                                                ww4_sdRtC
                                                                ww5_sdRtD
                                                                ww6_sdRtE]; } in
                    let {
                      sat_sdRtF [Occ=Once] :: Data.Typeable.Internal.TypeRep GHC.Types.IO
                      [LclId] =
                          CCCS Data.Typeable.Internal.TrTyCon! [ww8_sdRtu
                                                                ww9_sdRtv
                                                                ww10_sdRtw
                                                                ww11_sdRtx
                                                                ww12_sdRty];
                    } in  Data.Typeable.Internal.mkTrApp sat_sdRtF sat_sdRtG;
              };
        };

unreachable_rdQlR :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "If you can read this, shutdownHaskellAndExit did not exit."#;

unreachable1_rdQlS :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# unreachable_rdQlR;

GHC.TopHandler.flushStdHandles2
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E]
        GHC.IO.Handle.Internals.wantWritableHandle1
            GHC.IO.Handle.hFlush2
            GHC.IO.Handle.FD.stderr
            GHC.IO.Handle.Internals.flushWriteBuffer1
            GHC.Prim.void#;

GHC.TopHandler.flushStdHandles3
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [ds1_sdRtH void_0E]
        case ds1_sdRtH of {
          GHC.Exception.SomeException _ [Occ=Dead] _ [Occ=Dead] ->
              Unit# [GHC.Tuple.()];
        };

GHC.TopHandler.flushStdHandles4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [void_0E]
        GHC.IO.Handle.Internals.wantWritableHandle1
            GHC.IO.Handle.hFlush2
            GHC.IO.Handle.FD.stdout
            GHC.IO.Handle.Internals.flushWriteBuffer1
            GHC.Prim.void#;

GHC.TopHandler.flushStdHandles1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E]
        case
            catch# [GHC.TopHandler.flushStdHandles4
                    GHC.TopHandler.flushStdHandles3
                    GHC.Prim.void#]
        of
        { Unit# _ [Occ=Dead] ->
              catch# [GHC.TopHandler.flushStdHandles2
                      GHC.TopHandler.flushStdHandles3
                      GHC.Prim.void#];
        };

GHC.TopHandler.flushStdHandles :: GHC.Types.IO ()
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [void_0E] GHC.TopHandler.flushStdHandles1 GHC.Prim.void#;

$wexitHelper_rdQlT
  :: forall a.
     Foreign.C.Types.CInt -> GHC.Prim.Int# -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,U(U)><S,U>, Unf=OtherCon []] =
    sat-only [] \r [w_sdRtQ ww_sdRtR]
        let-no-escape {
          $j_sdRtS [Occ=Once*T[0], Dmd=<L,1*U>] :: GHC.Types.IO a_sdQcn
          [LclId[JoinId(0)], Unf=OtherCon []] =
              [w_sdRtQ ww_sdRtR] \r []
                  let-no-escape {
                    $j1_sdRtT [Occ=Once*T[0], Dmd=<L,1*U>] :: GHC.Types.IO a_sdQcn
                    [LclId[JoinId(0)], Unf=OtherCon []] =
                        [w_sdRtQ] \r []
                            let {
                              sat_sdRu0 [Occ=Once]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_sdQcn #)
                              [LclId] =
                                  [w_sdRtQ] \r [void_0E]
                                      case w_sdRtQ of {
                                        GHC.Int.I32# ds1_sdRtW [Occ=Once] ->
                                            case
                                                __pkg_ccall_GC base-4.11.0.0 [255#
                                                                              ds1_sdRtW
                                                                              GHC.Prim.void#]
                                            of
                                            { (##) ->
                                                  GHC.IO.failIO1 unreachable1_rdQlS GHC.Prim.void#;
                                            };
                                      };
                            } in  sat_sdRu0;
                  } in 
                    case >=# [ww_sdRtR -127#] of {
                      __DEFAULT -> $j1_sdRtT;
                      1# ->
                          case <=# [ww_sdRtR -1#] of {
                            __DEFAULT -> $j1_sdRtT;
                            1# ->
                                let {
                                  sat_sdRub [Occ=Once]
                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_sdQcn #)
                                  [LclId] =
                                      [w_sdRtQ ww_sdRtR] \r [void_0E]
                                          case w_sdRtQ of {
                                            GHC.Int.I32# ds1_sdRu5 [Occ=Once] ->
                                                case negateInt# [ww_sdRtR] of sat_sdRu7 {
                                                  __DEFAULT ->
                                                      case narrow32Int# [sat_sdRu7] of sat_sdRu8 {
                                                        __DEFAULT ->
                                                            case
                                                                __pkg_ccall_GC base-4.11.0.0 [sat_sdRu8
                                                                                              ds1_sdRu5
                                                                                              GHC.Prim.void#]
                                                            of
                                                            { (##) ->
                                                                  GHC.IO.failIO1
                                                                      unreachable1_rdQlS
                                                                      GHC.Prim.void#;
                                                            };
                                                      };
                                                };
                                          };
                                } in  sat_sdRub;
                          };
                    };
        } in 
          case >=# [ww_sdRtR 0#] of {
            __DEFAULT -> $j_sdRtS;
            1# ->
                case <=# [ww_sdRtR 255#] of {
                  __DEFAULT -> $j_sdRtS;
                  1# ->
                      let {
                        sat_sdRul [Occ=Once]
                          :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_sdQcn #)
                        [LclId] =
                            [w_sdRtQ ww_sdRtR] \r [void_0E]
                                case w_sdRtQ of {
                                  GHC.Int.I32# ds1_sdRug [Occ=Once] ->
                                      case narrow32Int# [ww_sdRtR] of sat_sdRui {
                                        __DEFAULT ->
                                            case
                                                __pkg_ccall_GC base-4.11.0.0 [sat_sdRui
                                                                              ds1_sdRug
                                                                              GHC.Prim.void#]
                                            of
                                            { (##) ->
                                                  GHC.IO.failIO1 unreachable1_rdQlS GHC.Prim.void#;
                                            };
                                      };
                                };
                      } in  sat_sdRul;
                };
          };

safeExit1_rdQlU :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [0#];

safeExit_rdPtY :: forall a. GHC.Types.Int -> GHC.Types.IO a
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_sdRum]
        case w_sdRum of {
          GHC.Types.I# ww1_sdRuo [Occ=Once] ->
              $wexitHelper_rdQlT safeExit1_rdQlU ww1_sdRuo;
        };

exitInterrupted_rdPu2 :: forall a. GHC.Types.IO a
[GblId] =
    [] \u [] $wexitHelper_rdQlT safeExit1_rdQlU -2#;

lvl_rdQlV :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

lvl1_rdQlW :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

msgStr_rdQlX :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "encountered an exception while trying to report an exception.\n\
    \One possible reason for this is that we failed while trying to encode an error message. Check that your locale is configured properly."#;

msgStr1_rdQlY :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# msgStr_rdQlX;

str_rdQlZ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "%s"#;

str1_rdQm0 :: GHC.Base.String
[GblId] =
    [] \u [] GHC.CString.unpackCString# str_rdQlZ;

lvl2_rdQm1 :: GHC.Types.Int
[GblId] =
    [] \u []
        case GHC.List.$wlenAcc msgStr1_rdQlY 0# of v_sdRup {
          __DEFAULT -> GHC.Types.I# [v_sdRup];
        };

lvl3_rdQm2 :: GHC.Types.Int
[GblId] =
    [] \u []
        case GHC.List.$wlenAcc str1_rdQm0 0# of v_sdRuq {
          __DEFAULT -> GHC.Types.I# [v_sdRuq];
        };

lvl4_rdQm3 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

lvl5_rdQm4 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [251#];

real_handler_rdQm5
  :: forall a.
     (GHC.Types.Int -> GHC.Types.IO a)
     -> GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Str=<L,C(C1(U(U,U)))><S,U><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [exit_sdRur se_sdRus void_0E]
        case
            catch# [GHC.TopHandler.flushStdHandles4
                    GHC.TopHandler.flushStdHandles3
                    GHC.Prim.void#]
        of
        { Unit# _ [Occ=Dead] ->
              case
                  catch# [GHC.TopHandler.flushStdHandles2
                          GHC.TopHandler.flushStdHandles3
                          GHC.Prim.void#]
              of
              { Unit# _ [Occ=Dead] ->
                    let-no-escape {
                      fail_sdRuA [Occ=Once*!T[1], Dmd=<L,1*C1(U(U,U))>]
                        :: GHC.Prim.Void#
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPA7 #)
                      [LclId[JoinId(1)], Arity=1, Str=<L,A>, Unf=OtherCon []] =
                          sat-only [exit_sdRur se_sdRus] \r [void_0E]
                              case se_sdRus of wild_sdRuC {
                                GHC.Exception.SomeException $dException1_sdRuD
                                                            e2_sdRuE [Occ=Once*] ->
                                    case
                                        GHC.Exception.$p1Exception $dException1_sdRuD
                                    of
                                    sat_sdRuF
                                    { __DEFAULT ->
                                          case
                                              Data.Typeable.Internal.sameTypeRep
                                                  sat_sdRuF GHC.IO.Exception.$fExceptionExitCode4
                                          of
                                          { GHC.Types.False ->
                                                let {
                                                  sat_sdRxp [Occ=Once]
                                                    :: GHC.Exception.SomeException
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             a_adPA7 #)
                                                  [LclId] =
                                                      [exit_sdRur] \r [e4_sdRwi void_0E]
                                                          case e4_sdRwi of wild2_sdRwk {
                                                            GHC.Exception.SomeException $dException2_sdRwl [Occ=Once]
                                                                                        _ [Occ=Dead] ->
                                                                case
                                                                    GHC.Exception.$p1Exception
                                                                        $dException2_sdRwl
                                                                of
                                                                sat_sdRwn
                                                                { __DEFAULT ->
                                                                      case
                                                                          Data.Typeable.Internal.sameTypeRep
                                                                              sat_sdRwn
                                                                              GHC.IO.Exception.$fExceptionIOException4
                                                                      of
                                                                      { GHC.Types.False ->
                                                                            raiseIO# [wild2_sdRwk
                                                                                      GHC.Prim.void#];
                                                                        GHC.Types.True ->
                                                                            case lvl3_rdQm2 of {
                                                                              GHC.Types.I# v1_sdRwq [Occ=Once] ->
                                                                                  case
                                                                                      +# [v1_sdRwq
                                                                                          1#]
                                                                                  of
                                                                                  sat_sdRwr
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            newAlignedPinnedByteArray# [sat_sdRwr
                                                                                                                        1#
                                                                                                                        GHC.Prim.void#]
                                                                                        of
                                                                                        { Unit# ipv5_sdRwu [Occ=Once] ->
                                                                                              case
                                                                                                  unsafeFreezeByteArray# [ipv5_sdRwu
                                                                                                                          GHC.Prim.void#]
                                                                                              of
                                                                                              { Unit# ipv7_sdRwx ->
                                                                                                    case
                                                                                                        byteArrayContents# [ipv7_sdRwx]
                                                                                                    of
                                                                                                    ptr_sdRwy [Dmd=<S,U>]
                                                                                                    { __DEFAULT ->
                                                                                                          let-no-escape {
                                                                                                            exit1_sdRwz [Occ=OnceL!T[2],
                                                                                                                         Dmd=<C(C(S)),C(C1(U))>]
                                                                                                              :: GHC.Prim.Int#
                                                                                                                 -> GHC.Prim.State#
                                                                                                                      GHC.Prim.RealWorld
                                                                                                                 -> (# GHC.Prim.State#
                                                                                                                         GHC.Prim.RealWorld,
                                                                                                                       a_adPA7 #)
                                                                                                            [LclId[JoinId(2)],
                                                                                                             Arity=2,
                                                                                                             Str=<S,U><S,U>,
                                                                                                             Unf=OtherCon []] =
                                                                                                                sat-only [exit_sdRur
                                                                                                                          ipv7_sdRwx
                                                                                                                          ptr_sdRwy] \r [ww_sdRwA
                                                                                                                                         void_0E]
                                                                                                                    case
                                                                                                                        writeInt8OffAddr# [ptr_sdRwy
                                                                                                                                           ww_sdRwA
                                                                                                                                           0#
                                                                                                                                           GHC.Prim.void#]
                                                                                                                    of
                                                                                                                    s2_sdRwC
                                                                                                                    { (##) ->
                                                                                                                          case
                                                                                                                              lvl2_rdQm1
                                                                                                                          of
                                                                                                                          { GHC.Types.I# v3_sdRwE [Occ=Once] ->
                                                                                                                                case
                                                                                                                                    +# [v3_sdRwE
                                                                                                                                        1#]
                                                                                                                                of
                                                                                                                                sat_sdRwF
                                                                                                                                { __DEFAULT ->
                                                                                                                                      case
                                                                                                                                          newAlignedPinnedByteArray# [sat_sdRwF
                                                                                                                                                                      1#
                                                                                                                                                                      GHC.Prim.void#]
                                                                                                                                      of
                                                                                                                                      { Unit# ipv9_sdRwI [Occ=Once] ->
                                                                                                                                            case
                                                                                                                                                unsafeFreezeByteArray# [ipv9_sdRwI
                                                                                                                                                                        GHC.Prim.void#]
                                                                                                                                            of
                                                                                                                                            { Unit# ipv11_sdRwL ->
                                                                                                                                                  case
                                                                                                                                                      byteArrayContents# [ipv11_sdRwL]
                                                                                                                                                  of
                                                                                                                                                  ptr1_sdRwM [Dmd=<S,U>]
                                                                                                                                                  { __DEFAULT ->
                                                                                                                                                        let-no-escape {
                                                                                                                                                          exit2_sdRwN [Occ=OnceL!T[2],
                                                                                                                                                                       Dmd=<C(C(S)),C(C1(U))>]
                                                                                                                                                            :: GHC.Prim.Int#
                                                                                                                                                               -> GHC.Prim.State#
                                                                                                                                                                    GHC.Prim.RealWorld
                                                                                                                                                               -> (# GHC.Prim.State#
                                                                                                                                                                       GHC.Prim.RealWorld,
                                                                                                                                                                     a_adPA7 #)
                                                                                                                                                          [LclId[JoinId(2)],
                                                                                                                                                           Arity=2,
                                                                                                                                                           Str=<S,U><S,U>,
                                                                                                                                                           Unf=OtherCon []] =
                                                                                                                                                              sat-only [exit_sdRur
                                                                                                                                                                        ipv7_sdRwx
                                                                                                                                                                        ptr_sdRwy
                                                                                                                                                                        ipv11_sdRwL
                                                                                                                                                                        ptr1_sdRwM] \r [ww1_sdRwO
                                                                                                                                                                                        void_0E]
                                                                                                                                                                  case
                                                                                                                                                                      writeInt8OffAddr# [ptr1_sdRwM
                                                                                                                                                                                         ww1_sdRwO
                                                                                                                                                                                         0#
                                                                                                                                                                                         GHC.Prim.void#]
                                                                                                                                                                  of
                                                                                                                                                                  s1_sdRwQ
                                                                                                                                                                  { (##) ->
                                                                                                                                                                        case
                                                                                                                                                                            __pkg_ccall base-4.11.0.0 [ptr_sdRwy
                                                                                                                                                                                                       ptr1_sdRwM
                                                                                                                                                                                                       GHC.Prim.void#]
                                                                                                                                                                        of
                                                                                                                                                                        { (##) ->
                                                                                                                                                                              case
                                                                                                                                                                                  exit_sdRur
                                                                                                                                                                                      lvl_rdQlV
                                                                                                                                                                                      GHC.Prim.void#
                                                                                                                                                                              of
                                                                                                                                                                              { Unit# ipv13_sdRwW [Occ=Once] ->
                                                                                                                                                                                    case
                                                                                                                                                                                        touch# [ipv11_sdRwL
                                                                                                                                                                                                GHC.Prim.void#]
                                                                                                                                                                                    of
                                                                                                                                                                                    s4_sdRwX
                                                                                                                                                                                    { (##) ->
                                                                                                                                                                                          case
                                                                                                                                                                                              touch# [ipv7_sdRwx
                                                                                                                                                                                                      GHC.Prim.void#]
                                                                                                                                                                                          of
                                                                                                                                                                                          s3_sdRwY
                                                                                                                                                                                          { (##) ->
                                                                                                                                                                                                Unit# [ipv13_sdRwW];
                                                                                                                                                                                          };
                                                                                                                                                                                    };
                                                                                                                                                                              };
                                                                                                                                                                        };
                                                                                                                                                                  };
                                                                                                                                                        } in 
                                                                                                                                                          let-no-escape {
                                                                                                                                                            $wgo_sdRwZ [InlPrag=NOUSERINLINE[0],
                                                                                                                                                                        Occ=LoopBreakerT[3]]
                                                                                                                                                              :: [GHC.Types.Char]
                                                                                                                                                                 -> GHC.Prim.Int#
                                                                                                                                                                 -> GHC.Prim.State#
                                                                                                                                                                      GHC.Prim.RealWorld
                                                                                                                                                                 -> (# GHC.Prim.State#
                                                                                                                                                                         GHC.Prim.RealWorld,
                                                                                                                                                                       a_adPA7 #)
                                                                                                                                                            [LclId[JoinId(3)],
                                                                                                                                                             Arity=3,
                                                                                                                                                             Str=<S,1*U><S,U><S,U>,
                                                                                                                                                             Unf=OtherCon []] =
                                                                                                                                                                sat-only [ptr1_sdRwM
                                                                                                                                                                          exit2_sdRwN
                                                                                                                                                                          $wgo_sdRwZ] \r [w1_sdRx0
                                                                                                                                                                                          ww1_sdRx1
                                                                                                                                                                                          void_0E]
                                                                                                                                                                    case
                                                                                                                                                                        w1_sdRx0
                                                                                                                                                                    of
                                                                                                                                                                    { [] ->
                                                                                                                                                                          exit2_sdRwN
                                                                                                                                                                              ww1_sdRx1
                                                                                                                                                                              GHC.Prim.void#;
                                                                                                                                                                      : c_sdRx4 [Occ=Once!]
                                                                                                                                                                        cs_sdRx5 [Occ=Once] ->
                                                                                                                                                                          case
                                                                                                                                                                              c_sdRx4
                                                                                                                                                                          of
                                                                                                                                                                          { GHC.Types.C# c#_sdRx7 [Occ=Once] ->
                                                                                                                                                                                case
                                                                                                                                                                                    ord# [c#_sdRx7]
                                                                                                                                                                                of
                                                                                                                                                                                sat_sdRx8
                                                                                                                                                                                { __DEFAULT ->
                                                                                                                                                                                      case
                                                                                                                                                                                          narrow8Int# [sat_sdRx8]
                                                                                                                                                                                      of
                                                                                                                                                                                      sat_sdRx9
                                                                                                                                                                                      { __DEFAULT ->
                                                                                                                                                                                            case
                                                                                                                                                                                                writeInt8OffAddr# [ptr1_sdRwM
                                                                                                                                                                                                                   ww1_sdRx1
                                                                                                                                                                                                                   sat_sdRx9
                                                                                                                                                                                                                   GHC.Prim.void#]
                                                                                                                                                                                            of
                                                                                                                                                                                            s1_sdRxa
                                                                                                                                                                                            { (##) ->
                                                                                                                                                                                                  case
                                                                                                                                                                                                      +# [ww1_sdRx1
                                                                                                                                                                                                          1#]
                                                                                                                                                                                                  of
                                                                                                                                                                                                  sat_sdRxb
                                                                                                                                                                                                  { __DEFAULT ->
                                                                                                                                                                                                        $wgo_sdRwZ
                                                                                                                                                                                                            cs_sdRx5
                                                                                                                                                                                                            sat_sdRxb
                                                                                                                                                                                                            GHC.Prim.void#;
                                                                                                                                                                                                  };
                                                                                                                                                                                            };
                                                                                                                                                                                      };
                                                                                                                                                                                };
                                                                                                                                                                          };
                                                                                                                                                                    };
                                                                                                                                                          } in 
                                                                                                                                                            $wgo_sdRwZ
                                                                                                                                                                msgStr1_rdQlY
                                                                                                                                                                0#
                                                                                                                                                                GHC.Prim.void#;
                                                                                                                                                  };
                                                                                                                                            };
                                                                                                                                      };
                                                                                                                                };
                                                                                                                          };
                                                                                                                    };
                                                                                                          } in 
                                                                                                            let-no-escape {
                                                                                                              $wgo_sdRxc [InlPrag=NOUSERINLINE[0],
                                                                                                                          Occ=LoopBreakerT[3]]
                                                                                                                :: [GHC.Types.Char]
                                                                                                                   -> GHC.Prim.Int#
                                                                                                                   -> GHC.Prim.State#
                                                                                                                        GHC.Prim.RealWorld
                                                                                                                   -> (# GHC.Prim.State#
                                                                                                                           GHC.Prim.RealWorld,
                                                                                                                         a_adPA7 #)
                                                                                                              [LclId[JoinId(3)],
                                                                                                               Arity=3,
                                                                                                               Str=<S,1*U><S,U><S,U>,
                                                                                                               Unf=OtherCon []] =
                                                                                                                  sat-only [ptr_sdRwy
                                                                                                                            exit1_sdRwz
                                                                                                                            $wgo_sdRxc] \r [w_sdRxd
                                                                                                                                            ww_sdRxe
                                                                                                                                            void_0E]
                                                                                                                      case
                                                                                                                          w_sdRxd
                                                                                                                      of
                                                                                                                      { [] ->
                                                                                                                            exit1_sdRwz
                                                                                                                                ww_sdRxe
                                                                                                                                GHC.Prim.void#;
                                                                                                                        : c_sdRxh [Occ=Once!]
                                                                                                                          cs_sdRxi [Occ=Once] ->
                                                                                                                            case
                                                                                                                                c_sdRxh
                                                                                                                            of
                                                                                                                            { GHC.Types.C# c#_sdRxk [Occ=Once] ->
                                                                                                                                  case
                                                                                                                                      ord# [c#_sdRxk]
                                                                                                                                  of
                                                                                                                                  sat_sdRxl
                                                                                                                                  { __DEFAULT ->
                                                                                                                                        case
                                                                                                                                            narrow8Int# [sat_sdRxl]
                                                                                                                                        of
                                                                                                                                        sat_sdRxm
                                                                                                                                        { __DEFAULT ->
                                                                                                                                              case
                                                                                                                                                  writeInt8OffAddr# [ptr_sdRwy
                                                                                                                                                                     ww_sdRxe
                                                                                                                                                                     sat_sdRxm
                                                                                                                                                                     GHC.Prim.void#]
                                                                                                                                              of
                                                                                                                                              s2_sdRxn
                                                                                                                                              { (##) ->
                                                                                                                                                    case
                                                                                                                                                        +# [ww_sdRxe
                                                                                                                                                            1#]
                                                                                                                                                    of
                                                                                                                                                    sat_sdRxo
                                                                                                                                                    { __DEFAULT ->
                                                                                                                                                          $wgo_sdRxc
                                                                                                                                                              cs_sdRxi
                                                                                                                                                              sat_sdRxo
                                                                                                                                                              GHC.Prim.void#;
                                                                                                                                                    };
                                                                                                                                              };
                                                                                                                                        };
                                                                                                                                  };
                                                                                                                            };
                                                                                                                      };
                                                                                                            } in 
                                                                                                              $wgo_sdRxc
                                                                                                                  str1_rdQm0
                                                                                                                  0#
                                                                                                                  GHC.Prim.void#;
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                          }; } in
                                                let {
                                                  sat_sdRwh [Occ=Once, Dmd=<L,1*C1(U)>]
                                                    :: GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             a_adPA7 #)
                                                  [LclId] =
                                                      [exit_sdRur
                                                       wild_sdRuC
                                                       $dException1_sdRuD
                                                       e2_sdRuE] \s []
                                                          case
                                                              GHC.Exception.$p1Exception
                                                                  $dException1_sdRuD
                                                          of
                                                          sat_sdRuH
                                                          { __DEFAULT ->
                                                                case
                                                                    Data.Typeable.Internal.sameTypeRep
                                                                        sat_sdRuH
                                                                        GHC.IO.Exception.$fExceptionIOException4
                                                                of
                                                                { GHC.Types.False ->
                                                                      let {
                                                                        sat_sdRuS [Occ=OnceT[0]]
                                                                          :: GHC.Prim.State#
                                                                               GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   a_adPA7 #)
                                                                        [LclId] =
                                                                            [exit_sdRur
                                                                             wild_sdRuC] \r [void_0E]
                                                                                case
                                                                                    GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                of
                                                                                { GHC.STRef.STRef var#_sdRuL [Occ=Once] ->
                                                                                      case
                                                                                          readMutVar# [var#_sdRuL
                                                                                                       GHC.Prim.void#]
                                                                                      of
                                                                                      { Unit# ipv5_sdRuO [Occ=Once!] ->
                                                                                            case
                                                                                                ipv5_sdRuO
                                                                                                    wild_sdRuC
                                                                                                    GHC.Prim.void#
                                                                                            of
                                                                                            { Unit# _ [Occ=Dead] ->
                                                                                                  exit_sdRur
                                                                                                      lvl_rdQlV
                                                                                                      GHC.Prim.void#;
                                                                                            };
                                                                                      };
                                                                                };
                                                                      } in  sat_sdRuS;
                                                                  GHC.Types.True ->
                                                                      case e2_sdRuE of {
                                                                        GHC.IO.Exception.IOError ds3_sdRuU [Occ=Once!]
                                                                                                 ds4_sdRuV [Occ=Once!]
                                                                                                 _ [Occ=Dead]
                                                                                                 _ [Occ=Dead]
                                                                                                 ds7_sdRuY [Occ=Once!]
                                                                                                 _ [Occ=Dead] ->
                                                                            case ds4_sdRuV of {
                                                                              __DEFAULT ->
                                                                                  let {
                                                                                    sat_sdRva [Occ=OnceT[0]]
                                                                                      :: GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld
                                                                                         -> (# GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld,
                                                                                               a_adPA7 #)
                                                                                    [LclId] =
                                                                                        [exit_sdRur
                                                                                         wild_sdRuC] \r [void_0E]
                                                                                            case
                                                                                                GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                            of
                                                                                            { GHC.STRef.STRef var#_sdRv3 [Occ=Once] ->
                                                                                                  case
                                                                                                      readMutVar# [var#_sdRv3
                                                                                                                   GHC.Prim.void#]
                                                                                                  of
                                                                                                  { Unit# ipv5_sdRv6 [Occ=Once!] ->
                                                                                                        case
                                                                                                            ipv5_sdRv6
                                                                                                                wild_sdRuC
                                                                                                                GHC.Prim.void#
                                                                                                        of
                                                                                                        { Unit# _ [Occ=Dead] ->
                                                                                                              exit_sdRur
                                                                                                                  lvl_rdQlV
                                                                                                                  GHC.Prim.void#;
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                  } in  sat_sdRva;
                                                                              GHC.IO.Exception.ResourceVanished ->
                                                                                  case
                                                                                      ds7_sdRuY
                                                                                  of
                                                                                  { GHC.Base.Nothing ->
                                                                                        let {
                                                                                          sat_sdRvl [Occ=OnceT[0]]
                                                                                            :: GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld,
                                                                                                     a_adPA7 #)
                                                                                          [LclId] =
                                                                                              [exit_sdRur
                                                                                               wild_sdRuC] \r [void_0E]
                                                                                                  case
                                                                                                      GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                  of
                                                                                                  { GHC.STRef.STRef var#_sdRve [Occ=Once] ->
                                                                                                        case
                                                                                                            readMutVar# [var#_sdRve
                                                                                                                         GHC.Prim.void#]
                                                                                                        of
                                                                                                        { Unit# ipv5_sdRvh [Occ=Once!] ->
                                                                                                              case
                                                                                                                  ipv5_sdRvh
                                                                                                                      wild_sdRuC
                                                                                                                      GHC.Prim.void#
                                                                                                              of
                                                                                                              { Unit# _ [Occ=Dead] ->
                                                                                                                    exit_sdRur
                                                                                                                        lvl_rdQlV
                                                                                                                        GHC.Prim.void#;
                                                                                                              };
                                                                                                        };
                                                                                                  };
                                                                                        } in 
                                                                                          sat_sdRvl;
                                                                                    GHC.Base.Just ioe_sdRvm [Occ=Once] ->
                                                                                        case
                                                                                            ds3_sdRuU
                                                                                        of
                                                                                        { GHC.Base.Nothing ->
                                                                                              let {
                                                                                                sat_sdRvx [Occ=OnceT[0]]
                                                                                                  :: GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                     -> (# GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld,
                                                                                                           a_adPA7 #)
                                                                                                [LclId] =
                                                                                                    [exit_sdRur
                                                                                                     wild_sdRuC] \r [void_0E]
                                                                                                        case
                                                                                                            GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                        of
                                                                                                        { GHC.STRef.STRef var#_sdRvq [Occ=Once] ->
                                                                                                              case
                                                                                                                  readMutVar# [var#_sdRvq
                                                                                                                               GHC.Prim.void#]
                                                                                                              of
                                                                                                              { Unit# ipv5_sdRvt [Occ=Once!] ->
                                                                                                                    case
                                                                                                                        ipv5_sdRvt
                                                                                                                            wild_sdRuC
                                                                                                                            GHC.Prim.void#
                                                                                                                    of
                                                                                                                    { Unit# _ [Occ=Dead] ->
                                                                                                                          exit_sdRur
                                                                                                                              lvl_rdQlV
                                                                                                                              GHC.Prim.void#;
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                              } in 
                                                                                                sat_sdRvx;
                                                                                          GHC.Base.Just hdl_sdRvy [Occ=Once!] ->
                                                                                              case
                                                                                                  ioe_sdRvm
                                                                                              of
                                                                                              { GHC.Int.I32# x_sdRvA [Occ=Once!] ->
                                                                                                    case
                                                                                                        x_sdRvA
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          let {
                                                                                                            sat_sdRvL [Occ=OnceT[0]]
                                                                                                              :: GHC.Prim.State#
                                                                                                                   GHC.Prim.RealWorld
                                                                                                                 -> (# GHC.Prim.State#
                                                                                                                         GHC.Prim.RealWorld,
                                                                                                                       a_adPA7 #)
                                                                                                            [LclId] =
                                                                                                                [exit_sdRur
                                                                                                                 wild_sdRuC] \r [void_0E]
                                                                                                                    case
                                                                                                                        GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                                    of
                                                                                                                    { GHC.STRef.STRef var#_sdRvE [Occ=Once] ->
                                                                                                                          case
                                                                                                                              readMutVar# [var#_sdRvE
                                                                                                                                           GHC.Prim.void#]
                                                                                                                          of
                                                                                                                          { Unit# ipv5_sdRvH [Occ=Once!] ->
                                                                                                                                case
                                                                                                                                    ipv5_sdRvH
                                                                                                                                        wild_sdRuC
                                                                                                                                        GHC.Prim.void#
                                                                                                                                of
                                                                                                                                { Unit# _ [Occ=Dead] ->
                                                                                                                                      exit_sdRur
                                                                                                                                          lvl_rdQlV
                                                                                                                                          GHC.Prim.void#;
                                                                                                                                };
                                                                                                                          };
                                                                                                                    };
                                                                                                          } in 
                                                                                                            sat_sdRvL;
                                                                                                      32# ->
                                                                                                          let-no-escape {
                                                                                                            $j_sdRvM [Occ=Once*T[0],
                                                                                                                      Dmd=<L,1*C1(U)>]
                                                                                                              :: GHC.Prim.State#
                                                                                                                   GHC.Prim.RealWorld
                                                                                                                 -> (# GHC.Prim.State#
                                                                                                                         GHC.Prim.RealWorld,
                                                                                                                       a_adPA7 #)
                                                                                                            [LclId[JoinId(0)],
                                                                                                             Unf=OtherCon []] =
                                                                                                                [exit_sdRur
                                                                                                                 wild_sdRuC] \r []
                                                                                                                    let {
                                                                                                                      sat_sdRvW [Occ=OnceT[0]]
                                                                                                                        :: GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld
                                                                                                                           -> (# GHC.Prim.State#
                                                                                                                                   GHC.Prim.RealWorld,
                                                                                                                                 a_adPA7 #)
                                                                                                                      [LclId] =
                                                                                                                          [exit_sdRur
                                                                                                                           wild_sdRuC] \r [void_0E]
                                                                                                                              case
                                                                                                                                  GHC.Conc.Sync.uncaughtExceptionHandler
                                                                                                                              of
                                                                                                                              { GHC.STRef.STRef var#_sdRvP [Occ=Once] ->
                                                                                                                                    case
                                                                                                                                        readMutVar# [var#_sdRvP
                                                                                                                                                     GHC.Prim.void#]
                                                                                                                                    of
                                                                                                                                    { Unit# ipv5_sdRvS [Occ=Once!] ->
                                                                                                                                          case
                                                                                                                                              ipv5_sdRvS
                                                                                                                                                  wild_sdRuC
                                                                                                                                                  GHC.Prim.void#
                                                                                                                                          of
                                                                                                                                          { Unit# _ [Occ=Dead] ->
                                                                                                                                                exit_sdRur
                                                                                                                                                    lvl_rdQlV
                                                                                                                                                    GHC.Prim.void#;
                                                                                                                                          };
                                                                                                                                    };
                                                                                                                              };
                                                                                                                    } in 
                                                                                                                      sat_sdRvW;
                                                                                                          } in 
                                                                                                            case
                                                                                                                hdl_sdRvy
                                                                                                            of
                                                                                                            { GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                                                                                             dt_sdRvZ [Occ=Once] ->
                                                                                                                  case
                                                                                                                      GHC.IO.Handle.FD.stdout
                                                                                                                  of
                                                                                                                  { GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                                                                                                   dt1_sdRw2 [Occ=Once] ->
                                                                                                                        case
                                                                                                                            sameMVar# [dt_sdRvZ
                                                                                                                                       dt1_sdRw2]
                                                                                                                        of
                                                                                                                        { __DEFAULT ->
                                                                                                                              $j_sdRvM;
                                                                                                                          1# ->
                                                                                                                              exit_sdRur
                                                                                                                                  lvl1_rdQlW;
                                                                                                                        };
                                                                                                                    GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                                                                                                     _ [Occ=Dead]
                                                                                                                                                     _ [Occ=Dead] ->
                                                                                                                        $j_sdRvM;
                                                                                                                  };
                                                                                                              GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                                                                                               dt_sdRw8 [Occ=Once]
                                                                                                                                               _ [Occ=Dead] ->
                                                                                                                  case
                                                                                                                      GHC.IO.Handle.FD.stdout
                                                                                                                  of
                                                                                                                  { GHC.IO.Handle.Types.FileHandle _ [Occ=Dead]
                                                                                                                                                   _ [Occ=Dead] ->
                                                                                                                        $j_sdRvM;
                                                                                                                    GHC.IO.Handle.Types.DuplexHandle _ [Occ=Dead]
                                                                                                                                                     dt2_sdRwe [Occ=Once]
                                                                                                                                                     _ [Occ=Dead] ->
                                                                                                                        case
                                                                                                                            sameMVar# [dt_sdRw8
                                                                                                                                       dt2_sdRwe]
                                                                                                                        of
                                                                                                                        { __DEFAULT ->
                                                                                                                              $j_sdRvM;
                                                                                                                          1# ->
                                                                                                                              exit_sdRur
                                                                                                                                  lvl1_rdQlW;
                                                                                                                        };
                                                                                                                  };
                                                                                                            };
                                                                                                    };
                                                                                              };
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                } in  catch# [sat_sdRwh sat_sdRxp GHC.Prim.void#];
                                            GHC.Types.True ->
                                                case e2_sdRuE of {
                                                  GHC.IO.Exception.ExitSuccess ->
                                                      exit_sdRur lvl1_rdQlW GHC.Prim.void#;
                                                  GHC.IO.Exception.ExitFailure n_sdRxr [Occ=Once] ->
                                                      exit_sdRur n_sdRxr GHC.Prim.void#;
                                                };
                                          };
                                    };
                              };
                    } in 
                      case
                          GHC.IO.Exception.$fExceptionAsyncException_$cfromException se_sdRus
                      of
                      { GHC.Base.Nothing -> fail_sdRuA GHC.Prim.void#;
                        GHC.Base.Just ds_sdRxt [Occ=Once!] ->
                            case ds_sdRxt of {
                              GHC.IO.Exception.StackOverflow ->
                                  case myThreadId# [GHC.Prim.void#] of {
                                    Unit# ipv5_sdRxx [Occ=Once] ->
                                        case
                                            __pkg_ccall base-4.11.0.0 [ipv5_sdRxx GHC.Prim.void#]
                                        of
                                        { (##) -> exit_sdRur lvl4_rdQm3 GHC.Prim.void#;
                                        };
                                  };
                              GHC.IO.Exception.HeapOverflow ->
                                  case __pkg_ccall base-4.11.0.0 [GHC.Prim.void#] of {
                                    (##) -> exit_sdRur lvl5_rdQm4 GHC.Prim.void#;
                                  };
                              GHC.IO.Exception.ThreadKilled -> fail_sdRuA GHC.Prim.void#;
                              GHC.IO.Exception.UserInterrupt ->
                                  exitInterrupted_rdPu2 GHC.Prim.void#;
                            };
                      };
              };
        };

GHC.TopHandler.runIO2
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [e1_sdRxE void_0E]
        GHC.TopHandler.runIO3 e1_sdRxE GHC.Prim.void#;
GHC.TopHandler.runIO3 [Occ=LoopBreaker]
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [err_sdRxG void_0E]
        let {
          sat_sdRxI [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPBc #)
          [LclId] =
              [err_sdRxG] \r [void_0E]
                  real_handler_rdQm5 safeExit_rdPtY err_sdRxG GHC.Prim.void#;
        } in  catch# [sat_sdRxI GHC.TopHandler.runIO2 GHC.Prim.void#];

GHC.TopHandler.topHandler
  :: forall a. GHC.Exception.SomeException -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] GHC.TopHandler.runIO3 eta_B2 GHC.Prim.void#;

GHC.TopHandler.runNonIO1
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [a1_sdRxJ void_0E]
        let {
          sat_sdRxO [Occ=Once, Dmd=<L,1*C1(U)>]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPBl #)
          [LclId] =
              [a1_sdRxJ] \s []
                  case a1_sdRxJ of a2_sdRxL {
                    __DEFAULT ->
                        let {
                          sat_sdRxN [Occ=OnceT[0]]
                            :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPBl #)
                          [LclId] =
                              [a2_sdRxL] \r [void_0E] Unit# [a2_sdRxL];
                        } in  sat_sdRxN;
                  };
        } in  catch# [sat_sdRxO GHC.TopHandler.runIO2 GHC.Prim.void#];

GHC.TopHandler.runNonIO :: forall a. a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.TopHandler.runNonIO1 eta_B2 GHC.Prim.void#;

GHC.TopHandler.runIO1
  :: forall a.
     GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [main_sdRxP void_0E]
        catch# [main_sdRxP GHC.TopHandler.runIO2 GHC.Prim.void#];

GHC.TopHandler.runIO :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] GHC.TopHandler.runIO1 eta_B2 GHC.Prim.void#;

fastExit1_rdQm6 :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [1#];

fastExit_rdPtZ :: forall a. GHC.Types.Int -> GHC.Types.IO a
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_sdRxR]
        case w_sdRxR of {
          GHC.Types.I# ww1_sdRxT [Occ=Once] ->
              $wexitHelper_rdQlT fastExit1_rdQm6 ww1_sdRxT;
        };

GHC.TopHandler.runIOFastExit2
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [e1_sdRxU void_0E]
        GHC.TopHandler.runIOFastExit3 e1_sdRxU GHC.Prim.void#;
GHC.TopHandler.runIOFastExit3 [Occ=LoopBreaker]
  :: forall a.
     GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [err_sdRxW void_0E]
        let {
          sat_sdRxY [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPB0 #)
          [LclId] =
              [err_sdRxW] \r [void_0E]
                  real_handler_rdQm5 fastExit_rdPtZ err_sdRxW GHC.Prim.void#;
        } in 
          catch# [sat_sdRxY GHC.TopHandler.runIOFastExit2 GHC.Prim.void#];

GHC.TopHandler.topHandlerFastExit
  :: forall a. GHC.Exception.SomeException -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.TopHandler.runIOFastExit3 eta_B2 GHC.Prim.void#;

GHC.TopHandler.runIOFastExit1
  :: forall a.
     GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [main_sdRxZ void_0E]
        catch# [main_sdRxZ GHC.TopHandler.runIOFastExit2 GHC.Prim.void#];

GHC.TopHandler.runIOFastExit
  :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.TopHandler.runIOFastExit1 eta_B2 GHC.Prim.void#;

GHC.TopHandler.runMainIO3 :: GHC.Exception.SomeException
[GblId] =
    [] \u []
        GHC.IO.Exception.$fExceptionAsyncException_$ctoException
            GHC.IO.Exception.UserInterrupt;

GHC.TopHandler.runMainIO4 :: GHC.Int.Int32
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Int.I32#! [2#];

GHC.TopHandler.runMainIO1
  :: forall a.
     GHC.Types.IO a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [main_sdRy1 void_0E]
        let {
          sat_sdRyJ [Occ=Once]
            :: GHC.Prim.State# GHC.Prim.RealWorld
               -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_adPCw #)
          [LclId] =
              [main_sdRy1] \r [void_0E]
                  case myThreadId# [GHC.Prim.void#] of {
                    Unit# ipv1_sdRy6 ->
                        let {
                          sat_sdRy7 [Occ=Once] :: GHC.Conc.Sync.ThreadId
                          [LclId] =
                              CCCS GHC.Conc.Sync.ThreadId! [ipv1_sdRy6];
                        } in 
                          case mkWeakNoFinalizer# [ipv1_sdRy6 sat_sdRy7 GHC.Prim.void#] of {
                            Unit# ipv3_sdRya ->
                                case __pkg_ccall base-4.11.0.0 [ipv3_sdRya GHC.Prim.void#] of {
                                  (##) ->
                                      let {
                                        sat_sdRyy [Occ=Once] :: GHC.Types.IO ()
                                        [LclId] =
                                            [ipv3_sdRya] \r [void_0E]
                                                case deRefWeak# [ipv3_sdRya GHC.Prim.void#] of {
                                                  (#,#) ipv5_sdRys [Occ=Once!]
                                                        ipv6_sdRyt [Occ=Once!] ->
                                                      case ipv5_sdRys of {
                                                        __DEFAULT ->
                                                            case ipv6_sdRyt of {
                                                              GHC.Conc.Sync.ThreadId tid_sdRyw [Occ=Once] ->
                                                                  case
                                                                      killThread# [tid_sdRyw
                                                                                   GHC.TopHandler.runMainIO3
                                                                                   GHC.Prim.void#]
                                                                  of
                                                                  s2_sdRyx
                                                                  { (##) -> Unit# [GHC.Tuple.()];
                                                                  };
                                                            };
                                                        0# -> Unit# [GHC.Tuple.()];
                                                      };
                                                }; } in
                                      let {
                                        sat_sdRyz [Occ=Once] :: Data.Dynamic.Dynamic
                                        [LclId] =
                                            CCCS Data.Dynamic.Dynamic! [GHC.TopHandler.runMainIO2
                                                                        sat_sdRyy]; } in
                                      let {
                                        sat_sdRyo [Occ=Once]
                                          :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                             -> GHC.Types.IO ()
                                        [LclId] =
                                            [ipv3_sdRya] \r [ds3_sdRye void_0E]
                                                case deRefWeak# [ipv3_sdRya GHC.Prim.void#] of {
                                                  (#,#) ipv5_sdRyi [Occ=Once!]
                                                        ipv6_sdRyj [Occ=Once!] ->
                                                      case ipv5_sdRyi of {
                                                        __DEFAULT ->
                                                            case ipv6_sdRyj of {
                                                              GHC.Conc.Sync.ThreadId tid_sdRym [Occ=Once] ->
                                                                  case
                                                                      killThread# [tid_sdRym
                                                                                   GHC.TopHandler.runMainIO3
                                                                                   GHC.Prim.void#]
                                                                  of
                                                                  s1_sdRyn
                                                                  { (##) -> Unit# [GHC.Tuple.()];
                                                                  };
                                                            };
                                                        0# -> Unit# [GHC.Tuple.()];
                                                      };
                                                }; } in
                                      let {
                                        sat_sdRyA [Occ=Once]
                                          :: (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8
                                              -> GHC.Types.IO (),
                                              Data.Dynamic.Dynamic)
                                        [LclId] =
                                            CCCS (,)! [sat_sdRyo sat_sdRyz]; } in
                                      let {
                                        sat_sdRyB [Occ=Once]
                                          :: GHC.Base.Maybe
                                               (GHC.Conc.Signal.HandlerFun, Data.Dynamic.Dynamic)
                                        [LclId] =
                                            CCCS GHC.Base.Just! [sat_sdRyA];
                                      } in 
                                        case
                                            GHC.Conc.Signal.setHandler1
                                                GHC.TopHandler.runMainIO4 sat_sdRyB GHC.Prim.void#
                                        of
                                        { Unit# _ [Occ=Dead] ->
                                              case
                                                  __pkg_ccall base-4.11.0.0 [2#
                                                                             -5#
                                                                             __NULL
                                                                             GHC.Prim.void#]
                                              of
                                              { Unit# _ [Occ=Dead] -> main_sdRy1 GHC.Prim.void#;
                                              };
                                        };
                                };
                          };
                  };
        } in  catch# [sat_sdRyJ GHC.TopHandler.runIO2 GHC.Prim.void#];

GHC.TopHandler.runMainIO
  :: forall a. GHC.Types.IO a -> GHC.Types.IO a
[GblId, Arity=2, Str=<L,1*C1(U)><S,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.TopHandler.runMainIO1 eta_B2 GHC.Prim.void#;

