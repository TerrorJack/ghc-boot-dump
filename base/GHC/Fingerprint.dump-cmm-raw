
==================== Raw Cmm ====================
2018-03-16 16:06:33.327868907 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:33.328923958 UTC

[section ""cstring" . GHC.Fingerprint.$trModule4_bytes" {
     GHC.Fingerprint.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.330729531 UTC

[section ""data" . GHC.Fingerprint.$trModule3_closure" {
     GHC.Fingerprint.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Fingerprint.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.332305768 UTC

[section ""cstring" . GHC.Fingerprint.$trModule2_bytes" {
     GHC.Fingerprint.$trModule2_bytes:
         I8[] [71,72,67,46,70,105,110,103,101,114,112,114,105,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.333962768 UTC

[section ""data" . GHC.Fingerprint.$trModule1_closure" {
     GHC.Fingerprint.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Fingerprint.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.335531237 UTC

[section ""data" . GHC.Fingerprint.$trModule_closure" {
     GHC.Fingerprint.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Fingerprint.$trModule3_closure+1;
         const GHC.Fingerprint.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.33714026 UTC

[section ""cstring" . GHC.Fingerprint.$tcMD5Context2_bytes" {
     GHC.Fingerprint.$tcMD5Context2_bytes:
         I8[] [77,68,53,67,111,110,116,101,120,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.338730183 UTC

[section ""data" . GHC.Fingerprint.$tcMD5Context1_closure" {
     GHC.Fingerprint.$tcMD5Context1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Fingerprint.$tcMD5Context2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.340414117 UTC

[section ""data" . GHC.Fingerprint.$tcMD5Context_closure" {
     GHC.Fingerprint.$tcMD5Context_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Fingerprint.$trModule_closure+1;
         const GHC.Fingerprint.$tcMD5Context1_closure+1;
         const GHC.Types.krep$*_closure;
         const 2786815183060026909;
         const 11852912954819316049;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.342210758 UTC

[section ""data" . GHC.Fingerprint.fingerprint0_closure" {
     GHC.Fingerprint.fingerprint0_closure:
         const GHC.Fingerprint.Type.Fingerprint_con_info;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.34388066 UTC

[section ""cstring" . lvl_rbDDO_bytes" {
     lvl_rbDDO_bytes:
         I8[] [71,72,67,46,70,105,110,103,101,114,112,114,105,110,116,46,103,101,116,70,105,108,101,72,97,115,104,58,32,111,110,108,121,32,114,101,97,100,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.345548714 UTC

[section ""cstring" . lvl1_rbDDP_bytes" {
     lvl1_rbDDP_bytes:
         I8[] [32,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.34930764 UTC

[section ""data" . lvl2_rbDDQ_closure" {
     lvl2_rbDDQ_closure:
         const lvl2_rbDDQ_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_rbDDQ_entry() //  [R1]
         { []
         }
     {offset
       cbE0G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbE0H; else goto cbE0I;
       cbE0H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbE0I: // global
           (_cbE0D::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbE0D::I64 == 0) goto cbE0F; else goto cbE0E;
       cbE0F: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbE0E: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbE0D::I64;
           R2 = lvl1_rbDDP_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_rbDDQ_info" {
     lvl2_rbDDQ_info:
         const lvl2_rbDDQ_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.354341121 UTC

[section ""data" . GHC.Fingerprint.$wlvl_closure" {
     GHC.Fingerprint.$wlvl_closure:
         const GHC.Fingerprint.$wlvl_info;
         const 0;
 },
 sat_sbDDX_entry() //  [R1]
         { []
         }
     {offset
       cbE11: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbE12; else goto cbE13;
       cbE12: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbE13: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbE0Y_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbDDX_info" {
     sat_sbDDX_info:
         const sat_sbDDX_entry;
         const 4294967296;
         const 4294967313;
         const SbDI6_srt;
 },
 _cbE0Y() //  [R1, R2]
         { []
         }
     {offset
       cbE0Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbE16; else goto cbE15;
       cbE16: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cbE15: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = lvl2_rbDDQ_closure;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbE0Y_info" {
     block_cbE0Y_info:
         const _cbE0Y;
         const 0;
         const 4294967326;
         const SbDI6_srt;
 },
 GHC.Fingerprint.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       cbE19: // global
           _sbDDS::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cbE1a; else goto cbE1b;
       cbE1b: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbE1d; else goto cbE1c;
       cbE1d: // global
           HpAlloc = 24;
           goto cbE1a;
       cbE1a: // global
           R2 = _sbDDS::I64;
           R1 = GHC.Fingerprint.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbE1c: // global
           I64[Hp - 16] = sat_sbDDX_info;
           I64[Hp] = _sbDDS::I64;
           I64[Sp - 8] = block_cbE17_info;
           R3 = Hp - 16;
           R2 = lvl_rbDDO_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.$wlvl_info" {
     GHC.Fingerprint.$wlvl_info:
         const GHC.Fingerprint.$wlvl_entry;
         const 0;
         const 30064771086;
         const 4294967300;
         const SbDI6_srt;
 },
 _cbE17() //  [R1]
         { []
         }
     {offset
       cbE17: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbE17_info" {
     block_cbE17_info:
         const _cbE17;
         const 0;
         const 4294967326;
         const SbDI6_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.36734092 UTC

[section ""data" . GHC.Fingerprint.getFileHash2_closure" {
     GHC.Fingerprint.getFileHash2_closure:
         const GHC.Fingerprint.getFileHash2_info;
         const 0;
 },
 sat_sbDEH_entry() //  [R1]
         { []
         }
     {offset
       cbE2g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbE2h; else goto cbE2i;
       cbE2h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbE2i: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Fingerprint.Type.$WFingerprint_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbDEH_info" {
     sat_sbDEH_info:
         const sat_sbDEH_entry;
         const 2;
         const 18;
 },
 GHC.Fingerprint.getFileHash2_entry() //  [R2]
         { []
         }
     {offset
       cbE2j: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cbE2k; else goto cbE2l;
       cbE2k: // global
           R2 = R2;
           R1 = GHC.Fingerprint.getFileHash2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbE2l: // global
           I64[Sp - 16] = block_cbE1A_info;
           R1 = 0;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.getFileHash2_info" {
     GHC.Fingerprint.getFileHash2_info:
         const GHC.Fingerprint.getFileHash2_entry;
         const 0;
         const 133143986190;
         const 8589934597;
         const SbDI6_srt+16;
 },
 _cbE1A() //  [R1]
         { []
         }
     {offset
       cbE1A: // global
           _sbDE7::I64 = R1 + 16;
           call "ccall" arg hints:  [PtrHint]  result hints:  [] __hsbase_MD5Init(_sbDE7::I64);
           I64[Sp - 16] = block_cbE1H_info;
           _sbDE6::P64 = R1;
           R1 = 4096;
           I64[Sp - 8] = _sbDE7::I64;
           P64[Sp] = _sbDE6::P64;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbE1A_info" {
     block_cbE1A_info:
         const _cbE1A;
         const 1;
         const 64424509470;
         const SbDI6_srt+16;
 },
 _cbE1H() //  [R1]
         { []
         }
     {offset
       cbE1H: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbE2p; else goto cbE2o;
       cbE2p: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbE2o: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           _sbDEh::I64 = R1 + 16;
           I64[Hp] = _sbDEh::I64;
           P64[Sp - 16] = R1;
           I64[Sp - 8] = _sbDEh::I64;
           P64[Sp] = Hp - 7;
           Sp = Sp - 16;
           call _cbE2D() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbE1H_info" {
     block_cbE1H_info:
         const _cbE1H;
         const 67;
         const 64424509470;
         const SbDI6_srt+16;
 },
 _cbE2D() //  []
         { []
         }
     {offset
       cbE2D: // global
           I64[Sp - 8] = block_cbE2F_info;
           R4 = 4096;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 40];
           Sp = Sp - 8;
           call GHC.IO.Handle.Text.$whGetBuf_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 _cbE2F() //  [R1]
         { []
         }
     {offset
       cbE2F: // global
           I64[Sp - 8] = block_cbE2H_info;
           R4 = GHC.IO.Handle.hIsEOF2_closure+2;
           R3 = P64[Sp + 48];
           R2 = GHC.IO.Handle.hIsEOF3_closure;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbE2F_info" {
     block_cbE2F_info:
         const _cbE2F;
         const 646;
         const 64424509470;
         const SbDI6_srt+16;
 },
 _cbE2H() //  [R1]
         { []
         }
     {offset
       cbE2H: // global
           I64[Sp] = block_cbE2J_info;
           _sbDEP::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbDEP::P64;
           if (R1 & 7 != 0) goto ubE3F; else goto cbE2N;
       ubE3F: // global
           call _cbE2J(R1) args: 0, res: 0, upd: 0;
       cbE2N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbE2H_info" {
     block_cbE2H_info:
         const _cbE2H;
         const 1287;
         const 64424509470;
         const SbDI6_srt+16;
 },
 _cbE2J() //  [R1]
         { []
         }
     {offset
       cbE2J: // global
           _sbDER::I64 = I64[R1 + 7];
           if (_sbDER::I64 == 4096) goto ubE3B; else goto cbE3l;
       ubE3B: // global
           I64[Sp] = _sbDER::I64;
           call _sbDES() args: 0, res: 0, upd: 0;
       cbE3l: // global
           I64[Sp - 16] = block_cbE3j_info;
           R1 = P64[Sp + 8];
           I64[Sp - 8] = _sbDER::I64;
           I64[Sp] = _sbDER::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubE3G; else goto cbE3m;
       ubE3G: // global
           call _cbE3j(R1) args: 0, res: 0, upd: 0;
       cbE3m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbE2J_info" {
     block_cbE2J_info:
         const _cbE2J;
         const 1287;
         const 64424509470;
         const SbDI6_srt+16;
 },
 _cbE3j() //  [R1]
         { []
         }
     {offset
       cbE3j: // global
           if (R1 & 7 == 1) goto cbE3s; else goto ubE3C;
       cbE3s: // global
           R2 = I64[Sp + 8];
           Sp = Sp + 80;
           call GHC.Fingerprint.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       ubE3C: // global
           Sp = Sp + 16;
           call _sbDES() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbE3j_info" {
     block_cbE3j_info:
         const _cbE3j;
         const 5321;
         const 64424509470;
         const SbDI6_srt+16;
 },
 _sbDES() //  []
         { []
         }
     {offset
       sbDES: // global
           _sbDEP::P64 = P64[Sp + 8];
           call "ccall" arg hints:  [PtrHint, PtrHint,
                                     ‘signed’]  result hints:  [] __hsbase_MD5Update(I64[Sp + 40], I64[Sp + 24], %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp])));
           I64[Sp + 8] = block_cbE35_info;
           R1 = _sbDEP::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubE3K; else goto cbE36;
       ubE3K: // global
           call _cbE35(R1) args: 0, res: 0, upd: 0;
       cbE36: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbE35() //  [R1]
         { []
         }
     {offset
       cbE35: // global
           if (R1 & 7 == 1) goto ubE3D; else goto cbE3g;
       ubE3D: // global
           Sp = Sp + 8;
           call _cbE2D() args: 0, res: 0, upd: 0;
       cbE3g: // global
           call MO_Touch(P64[Sp + 8]);
           I64[Sp + 24] = block_cbE1T_info;
           R1 = 16;
           Sp = Sp + 24;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbE35_info" {
     block_cbE35_info:
         const _cbE35;
         const 646;
         const 64424509470;
         const SbDI6_srt+16;
 },
 _cbE1T() //  [R1]
         { []
         }
     {offset
       cbE1T: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbE2t; else goto cbE2s;
       cbE2t: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbE2s: // global
           _sbDEs::I64 = R1 + 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] __hsbase_MD5Final(_sbDEs::I64, I64[Sp + 8]);
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sbDEs::I64;
           I64[Sp] = block_cbE22_info;
           R4 = 0;
           R3 = 8;
           R2 = Hp - 7;
           I64[Sp + 8] = _sbDEs::I64;
           P64[Sp + 24] = R1;
           call Foreign.Storable.$wpeekW64_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbE1T_info" {
     block_cbE1T_info:
         const _cbE1T;
         const 323;
         const 30;
 },
 _cbE22() //  [R1]
         { []
         }
     {offset
       cbE22: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbE2w; else goto cbE2v;
       cbE2w: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbE2v: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 8] + 8;
           I64[Sp] = block_cbE28_info;
           R4 = 0;
           R3 = 8;
           R2 = Hp - 7;
           P64[Sp + 8] = R1;
           call Foreign.Storable.$wpeekW64_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbE22_info" {
     block_cbE22_info:
         const _cbE22;
         const 67;
         const 30;
 },
 _cbE28() //  [R1]
         { []
         }
     {offset
       cbE28: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbE2z; else goto cbE2y;
       cbE2z: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbE2y: // global
           _sbDE6::P64 = P64[Sp + 16];
           _sbDEz::P64 = P64[Sp + 8];
           call MO_Touch(P64[Sp + 24]);
           call MO_Touch(_sbDE6::P64);
           I64[Hp - 24] = sat_sbDEH_info;
           P64[Hp - 8] = _sbDEz::P64;
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbE28_info" {
     block_cbE28_info:
         const _cbE28;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.391810803 UTC

[section ""data" . GHC.Fingerprint.getFileHash1_closure" {
     GHC.Fingerprint.getFileHash1_closure:
         const GHC.Fingerprint.getFileHash1_info;
         const 0;
 },
 GHC.Fingerprint.getFileHash1_entry() //  [R2]
         { []
         }
     {offset
       cbE4I: // global
           R4 = GHC.Fingerprint.getFileHash2_closure+2;
           R3 = GHC.IO.IOMode.ReadMode_closure+1;
           R2 = R2;
           call System.IO.withBinaryFile1_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.getFileHash1_info" {
     GHC.Fingerprint.getFileHash1_info:
         const GHC.Fingerprint.getFileHash1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SbDI6_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.3951676 UTC

[section ""data" . GHC.Fingerprint.getFileHash_closure" {
     GHC.Fingerprint.getFileHash_closure:
         const GHC.Fingerprint.getFileHash_info;
         const 0;
 },
 GHC.Fingerprint.getFileHash_entry() //  [R2]
         { []
         }
     {offset
       cbE4T: // global
           R2 = R2;
           call GHC.Fingerprint.getFileHash1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.getFileHash_info" {
     GHC.Fingerprint.getFileHash_info:
         const GHC.Fingerprint.getFileHash_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbDI6_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.401049882 UTC

[section ""data" . GHC.Fingerprint.$wfingerprintData_closure" {
     GHC.Fingerprint.$wfingerprintData_closure:
         const GHC.Fingerprint.$wfingerprintData_info;
 },
 sat_sbDFF_entry() //  [R1]
         { []
         }
     {offset
       cbE5F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbE5G; else goto cbE5H;
       cbE5G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbE5H: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Fingerprint.Type.$WFingerprint_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbDFF_info" {
     sat_sbDFF_info:
         const sat_sbDFF_entry;
         const 2;
         const 18;
 },
 GHC.Fingerprint.$wfingerprintData_entry() //  [R2, R3]
         { []
         }
     {offset
       cbE5I: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbE5J; else goto cbE5K;
       cbE5J: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.$wfingerprintData_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbE5K: // global
           I64[Sp - 24] = block_cbE54_info;
           R1 = 0;
           I64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.$wfingerprintData_info" {
     GHC.Fingerprint.$wfingerprintData_info:
         const GHC.Fingerprint.$wfingerprintData_entry;
         const 0;
         const 14;
         const 12884901900;
 },
 _cbE54() //  [R1]
         { []
         }
     {offset
       cbE54: // global
           _sbDF3::I64 = I64[Sp + 8];
           _sbDF4::I64 = I64[Sp + 16];
           _sbDFc::I64 = R1 + 16;
           call "ccall" arg hints:  [PtrHint]  result hints:  [] __hsbase_MD5Init(_sbDFc::I64);
           call "ccall" arg hints:  [PtrHint, PtrHint,
                                     ‘signed’]  result hints:  [] __hsbase_MD5Update(_sbDFc::I64, _sbDF3::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbDF4::I64)));
           I64[Sp] = block_cbE5i_info;
           _sbDFb::P64 = R1;
           R1 = 16;
           I64[Sp + 8] = _sbDFc::I64;
           P64[Sp + 16] = _sbDFb::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbE54_info" {
     block_cbE54_info:
         const _cbE54;
         const 194;
         const 30;
 },
 _cbE5i() //  [R1]
         { []
         }
     {offset
       cbE5i: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbE5O; else goto cbE5N;
       cbE5O: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbE5N: // global
           _sbDFq::I64 = R1 + 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] __hsbase_MD5Final(_sbDFq::I64, I64[Sp + 8]);
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sbDFq::I64;
           I64[Sp - 8] = block_cbE5r_info;
           R4 = 0;
           R3 = 8;
           R2 = Hp - 7;
           I64[Sp] = _sbDFq::I64;
           P64[Sp + 8] = R1;
           Sp = Sp - 8;
           call Foreign.Storable.$wpeekW64_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbE5i_info" {
     block_cbE5i_info:
         const _cbE5i;
         const 66;
         const 30;
 },
 _cbE5r() //  [R1]
         { []
         }
     {offset
       cbE5r: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbE5R; else goto cbE5Q;
       cbE5R: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbE5Q: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 8] + 8;
           I64[Sp] = block_cbE5x_info;
           R4 = 0;
           R3 = 8;
           R2 = Hp - 7;
           P64[Sp + 8] = R1;
           call Foreign.Storable.$wpeekW64_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbE5r_info" {
     block_cbE5r_info:
         const _cbE5r;
         const 67;
         const 30;
 },
 _cbE5x() //  [R1]
         { []
         }
     {offset
       cbE5x: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbE5U; else goto cbE5T;
       cbE5U: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbE5T: // global
           _sbDFb::P64 = P64[Sp + 24];
           _sbDFx::P64 = P64[Sp + 8];
           call MO_Touch(P64[Sp + 16]);
           call MO_Touch(_sbDFb::P64);
           I64[Hp - 24] = sat_sbDFF_info;
           P64[Hp - 8] = _sbDFx::P64;
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbE5x_info" {
     block_cbE5x_info:
         const _cbE5x;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.414242964 UTC

[section ""data" . GHC.Fingerprint.fingerprintData1_closure" {
     GHC.Fingerprint.fingerprintData1_closure:
         const GHC.Fingerprint.fingerprintData1_info;
 },
 GHC.Fingerprint.fingerprintData1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbE6s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbE6w; else goto cbE6x;
       cbE6w: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.fingerprintData1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbE6x: // global
           I64[Sp - 16] = block_cbE6p_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubE6F; else goto cbE6q;
       ubE6F: // global
           call _cbE6p(R1) args: 0, res: 0, upd: 0;
       cbE6q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.fingerprintData1_info" {
     GHC.Fingerprint.fingerprintData1_info:
         const GHC.Fingerprint.fingerprintData1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cbE6p() //  [R1]
         { []
         }
     {offset
       cbE6p: // global
           I64[Sp] = block_cbE6v_info;
           _sbDFK::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sbDFK::I64;
           if (R1 & 7 != 0) goto ubE6E; else goto cbE6z;
       ubE6E: // global
           call _cbE6v(R1) args: 0, res: 0, upd: 0;
       cbE6z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbE6p_info" {
     block_cbE6p_info:
         const _cbE6p;
         const 1;
         const 30;
 },
 _cbE6v() //  [R1]
         { []
         }
     {offset
       cbE6v: // global
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Fingerprint.$wfingerprintData_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbE6v_info" {
     block_cbE6v_info:
         const _cbE6v;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.420690122 UTC

[section ""data" . GHC.Fingerprint.fingerprintData_closure" {
     GHC.Fingerprint.fingerprintData_closure:
         const GHC.Fingerprint.fingerprintData_info;
 },
 GHC.Fingerprint.fingerprintData_entry() //  [R2, R3]
         { []
         }
     {offset
       cbE6X: // global
           R3 = R3;
           R2 = R2;
           call GHC.Fingerprint.fingerprintData1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.fingerprintData_info" {
     GHC.Fingerprint.fingerprintData_info:
         const GHC.Fingerprint.fingerprintData_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.429958304 UTC

[section ""data" . GHC.Fingerprint.fingerprintString_go_closure" {
     GHC.Fingerprint.fingerprintString_go_closure:
         const GHC.Fingerprint.fingerprintString_go_info;
 },
 w32_sbDFR_entry() //  [R1]
         { []
         }
     {offset
       cbE7l: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbE7y; else goto cbE7z;
       cbE7y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbE7z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbE7i_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubE7D; else goto cbE7j;
       ubE7D: // global
           call _cbE7i(R1) args: 0, res: 0, upd: 0;
       cbE7j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w32_sbDFR_info" {
     w32_sbDFR_info:
         const w32_sbDFR_entry;
         const 1;
         const 16;
 },
 _cbE7i() //  [R1]
         { []
         }
     {offset
       cbE7i: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbE7C; else goto cbE7B;
       cbE7C: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbE7B: // global
           _sbDFW::I64 = %MO_UU_Conv_W32_W64(%MO_UU_Conv_W64_W32(I64[R1 + 7]));
           I64[Hp - 8] = GHC.Word.W32#_con_info;
           I64[Hp] = _sbDFW::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbE7i_info" {
     block_cbE7i_info:
         const _cbE7i;
         const 0;
         const 30;
 },
 sat_sbDGg_entry() //  [R1]
         { []
         }
     {offset
       cbE7I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbE7J; else goto cbE7K;
       cbE7J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbE7K: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Fingerprint.fingerprintString_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbDGg_info" {
     sat_sbDGg_info:
         const sat_sbDGg_entry;
         const 1;
         const 16;
 },
 sat_sbDGf_entry() //  [R1]
         { []
         }
     {offset
       cbE7S: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbE7Z; else goto cbE80;
       cbE7Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbE80: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbE7P_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubE84; else goto cbE7Q;
       ubE84: // global
           call _cbE7P(R1) args: 0, res: 0, upd: 0;
       cbE7Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbDGf_info" {
     sat_sbDGf_info:
         const sat_sbDGf_entry;
         const 1;
         const 16;
 },
 _cbE7P() //  [R1]
         { []
         }
     {offset
       cbE7P: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbE83; else goto cbE82;
       cbE83: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbE82: // global
           _sbDGe::I64 = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(I64[R1 + 7]));
           I64[Hp - 8] = GHC.Word.W8#_con_info;
           I64[Hp] = _sbDGe::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbE7P_info" {
     block_cbE7P_info:
         const _cbE7P;
         const 0;
         const 30;
 },
 sat_sbDGb_entry() //  [R1]
         { []
         }
     {offset
       cbE8d: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbE8n; else goto cbE8o;
       cbE8n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbE8o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbE8a_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubE8s; else goto cbE8b;
       ubE8s: // global
           call _cbE8a(R1) args: 0, res: 0, upd: 0;
       cbE8b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbDGb_info" {
     sat_sbDGb_info:
         const sat_sbDGb_entry;
         const 1;
         const 16;
 },
 _cbE8a() //  [R1]
         { []
         }
     {offset
       cbE8a: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbE8r; else goto cbE8q;
       cbE8r: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbE8q: // global
           _sbDGa::I64 = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(I64[R1 + 7] >> 8));
           I64[Hp - 8] = GHC.Word.W8#_con_info;
           I64[Hp] = _sbDGa::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbE8a_info" {
     block_cbE8a_info:
         const _cbE8a;
         const 0;
         const 30;
 },
 sat_sbDG6_entry() //  [R1]
         { []
         }
     {offset
       cbE8B: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbE8L; else goto cbE8M;
       cbE8L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbE8M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbE8y_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubE8Q; else goto cbE8z;
       ubE8Q: // global
           call _cbE8y(R1) args: 0, res: 0, upd: 0;
       cbE8z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbDG6_info" {
     sat_sbDG6_info:
         const sat_sbDG6_entry;
         const 1;
         const 16;
 },
 _cbE8y() //  [R1]
         { []
         }
     {offset
       cbE8y: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbE8P; else goto cbE8O;
       cbE8P: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbE8O: // global
           _sbDG5::I64 = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(I64[R1 + 7] >> 16));
           I64[Hp - 8] = GHC.Word.W8#_con_info;
           I64[Hp] = _sbDG5::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbE8y_info" {
     block_cbE8y_info:
         const _cbE8y;
         const 0;
         const 30;
 },
 sat_sbDG1_entry() //  [R1]
         { []
         }
     {offset
       cbE8Z: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbE99; else goto cbE9a;
       cbE99: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbE9a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbE8W_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubE9e; else goto cbE8X;
       ubE9e: // global
           call _cbE8W(R1) args: 0, res: 0, upd: 0;
       cbE8X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbDG1_info" {
     sat_sbDG1_info:
         const sat_sbDG1_entry;
         const 1;
         const 16;
 },
 _cbE8W() //  [R1]
         { []
         }
     {offset
       cbE8W: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbE9d; else goto cbE9c;
       cbE9d: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbE9c: // global
           _sbDG0::I64 = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(I64[R1 + 7] >> 24));
           I64[Hp - 8] = GHC.Word.W8#_con_info;
           I64[Hp] = _sbDG0::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbE8W_info" {
     block_cbE8W_info:
         const _cbE8W;
         const 0;
         const 30;
 },
 GHC.Fingerprint.fingerprintString_go_entry() //  [R2]
         { []
         }
     {offset
       cbE9j: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbE9k; else goto cbE9l;
       cbE9k: // global
           R2 = R2;
           R1 = GHC.Fingerprint.fingerprintString_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbE9l: // global
           I64[Sp - 8] = block_cbE78_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubE9s; else goto cbE79;
       ubE9s: // global
           call _cbE78(R1) args: 0, res: 0, upd: 0;
       cbE79: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.fingerprintString_go_info" {
     GHC.Fingerprint.fingerprintString_go_info:
         const GHC.Fingerprint.fingerprintString_go_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cbE78() //  [R1]
         { []
         }
     {offset
       cbE78: // global
           if (R1 & 7 == 1) goto cbE9g; else goto cbE9h;
       cbE9g: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbE9h: // global
           Hp = Hp + 240;
           if (Hp > HpLim) (likely: False) goto cbE9r; else goto cbE9q;
       cbE9r: // global
           HpAlloc = 240;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbE9q: // global
           _sbDFP::P64 = P64[R1 + 6];
           _sbDFQ::P64 = P64[R1 + 14];
           I64[Hp - 232] = w32_sbDFR_info;
           P64[Hp - 216] = _sbDFP::P64;
           I64[Hp - 208] = sat_sbDGg_info;
           P64[Hp - 192] = _sbDFQ::P64;
           I64[Hp - 184] = sat_sbDGf_info;
           _cbE7e::P64 = Hp - 232;
           P64[Hp - 168] = _cbE7e::P64;
           I64[Hp - 160] = :_con_info;
           P64[Hp - 152] = Hp - 184;
           P64[Hp - 144] = Hp - 208;
           I64[Hp - 136] = sat_sbDGb_info;
           P64[Hp - 120] = _cbE7e::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = Hp - 136;
           P64[Hp - 96] = Hp - 158;
           I64[Hp - 88] = sat_sbDG6_info;
           P64[Hp - 72] = _cbE7e::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 110;
           I64[Hp - 40] = sat_sbDG1_info;
           P64[Hp - 24] = _cbE7e::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbE78_info" {
     block_cbE78_info:
         const _cbE78;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.455842559 UTC

[section ""data" . GHC.Fingerprint.fingerprintString_closure" {
     GHC.Fingerprint.fingerprintString_closure:
         const GHC.Fingerprint.fingerprintString_info;
 },
 GHC.Fingerprint.fingerprintString_entry() //  [R2]
         { []
         }
     {offset
       cbEaM: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbEaN; else goto cbEaO;
       cbEaN: // global
           R2 = R2;
           R1 = GHC.Fingerprint.fingerprintString_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbEaO: // global
           I64[Sp - 8] = block_cbEaK_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Fingerprint.fingerprintString_go_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.fingerprintString_info" {
     GHC.Fingerprint.fingerprintString_info:
         const GHC.Fingerprint.fingerprintString_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cbEaK() //  [R1]
         { []
         }
     {offset
       cbEaK: // global
           I64[Sp - 8] = block_cbEaR_info;
           R3 = 0;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEaK_info" {
     block_cbEaK_info:
         const _cbEaK;
         const 0;
         const 30;
 },
 _cbEaR() //  [R1]
         { []
         }
     {offset
       cbEaR: // global
           I64[Sp - 8] = block_cbEaW_info;
           R2 = 1;
           _sbDGm::I64 = R1;
           R1 = R1;
           I64[Sp] = _sbDGm::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEaR_info" {
     block_cbEaR_info:
         const _cbEaR;
         const 1;
         const 30;
 },
 _cbEaW() //  [R1]
         { []
         }
     {offset
       cbEaW: // global
           P64[Sp - 16] = P64[Sp + 16];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call _cbEbe() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbEaW_info" {
     block_cbEaW_info:
         const _cbEaW;
         const 66;
         const 30;
 },
 _cbEbe() //  []
         { []
         }
     {offset
       cbEbe: // global
           _sbDGB::P64 = P64[Sp];
           I64[Sp] = block_cbEbh_info;
           R1 = _sbDGB::P64;
           if (R1 & 7 != 0) goto ubEbK; else goto cbEbj;
       ubEbK: // global
           call _cbEbh(R1) args: 0, res: 0, upd: 0;
       cbEbj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbEbh() //  [R1]
         { []
         }
     {offset
       cbEbh: // global
           if (R1 & 7 == 1) goto cbEbp; else goto cbEbu;
       cbEbp: // global
           _sbDGm::I64 = I64[Sp + 24];
           I64[Sp + 24] = block_cbEb8_info;
           R3 = _sbDGm::I64;
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Fingerprint.$wfingerprintData_entry(R3,
                                                        R2) args: 8, res: 8, upd: 8;
       cbEbu: // global
           I64[Sp - 8] = block_cbEbs_info;
           _sbDGG::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sbDGG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubEbL; else goto cbEbv;
       ubEbL: // global
           call _cbEbs(R1) args: 0, res: 0, upd: 0;
       cbEbv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEbh_info" {
     block_cbEbh_info:
         const _cbEbh;
         const 452;
         const 30;
 },
 _cbEb8() //  [R1]
         { []
         }
     {offset
       cbEb8: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEb8_info" {
     block_cbEb8_info:
         const _cbEb8;
         const 1;
         const 30;
 },
 _cbEbs() //  [R1]
         { []
         }
     {offset
       cbEbs: // global
           _sbDGC::I64 = I64[Sp + 16];
           _sbDGG::P64 = P64[Sp + 8];
           I8[I64[Sp + 24] + _sbDGC::I64] = %MO_UU_Conv_W64_W8(I64[R1 + 7]);
           P64[Sp + 8] = _sbDGG::P64;
           I64[Sp + 16] = _sbDGC::I64 + 1;
           Sp = Sp + 8;
           call _cbEbe() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbEbs_info" {
     block_cbEbs_info:
         const _cbEbs;
         const 901;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.47311272 UTC

[section ""data" . GHC.Fingerprint.fingerprintFingerprints_closure" {
     GHC.Fingerprint.fingerprintFingerprints_closure:
         const GHC.Fingerprint.fingerprintFingerprints_info;
 },
 GHC.Fingerprint.fingerprintFingerprints_entry() //  [R2]
         { []
         }
     {offset
       cbEcw: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbEcx; else goto cbEcy;
       cbEcx: // global
           R2 = R2;
           R1 = GHC.Fingerprint.fingerprintFingerprints_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbEcy: // global
           I64[Sp - 16] = block_cbEcr_info;
           R3 = 0;
           _sbDGO::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _sbDGO::P64;
           Sp = Sp - 16;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.fingerprintFingerprints_info" {
     GHC.Fingerprint.fingerprintFingerprints_info:
         const GHC.Fingerprint.fingerprintFingerprints_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cbEcr() //  [R1]
         { []
         }
     {offset
       cbEcr: // global
           I64[Sp - 8] = block_cbEcF_info;
           R2 = 8;
           _sbDGP::I64 = R1;
           R1 = R1 << 4;
           I64[Sp] = _sbDGP::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEcr_info" {
     block_cbEcr_info:
         const _cbEcr;
         const 1;
         const 30;
 },
 _cbEcF() //  [R1]
         { []
         }
     {offset
       cbEcF: // global
           P64[Sp - 16] = P64[Sp + 16];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call _cbEcZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbEcF_info" {
     block_cbEcF_info:
         const _cbEcF;
         const 66;
         const 30;
 },
 _cbEcZ() //  []
         { []
         }
     {offset
       cbEcZ: // global
           _sbDH6::P64 = P64[Sp];
           I64[Sp] = block_cbEd2_info;
           R1 = _sbDH6::P64;
           if (R1 & 7 != 0) goto ubEdP; else goto cbEd4;
       ubEdP: // global
           call _cbEd2(R1) args: 0, res: 0, upd: 0;
       cbEd4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbEd2() //  [R1]
         { []
         }
     {offset
       cbEd2: // global
           if (R1 & 7 == 1) goto cbEda; else goto cbEdf;
       cbEda: // global
           _sbDH0::I64 = I64[Sp + 24] << 4;
           I64[Sp + 24] = block_cbEcU_info;
           R3 = _sbDH0::I64;
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Fingerprint.$wfingerprintData_entry(R3,
                                                        R2) args: 8, res: 8, upd: 8;
       cbEdf: // global
           I64[Sp - 8] = block_cbEdd_info;
           _sbDHb::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sbDHb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubEdQ; else goto cbEdg;
       ubEdQ: // global
           call _cbEdd(R1) args: 0, res: 0, upd: 0;
       cbEdg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEd2_info" {
     block_cbEd2_info:
         const _cbEd2;
         const 452;
         const 30;
 },
 _cbEcU() //  [R1]
         { []
         }
     {offset
       cbEcU: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEcU_info" {
     block_cbEcU_info:
         const _cbEcU;
         const 1;
         const 30;
 },
 _cbEdd() //  [R1]
         { []
         }
     {offset
       cbEdd: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbEdm; else goto cbEdl;
       cbEdm: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbEdl: // global
           _sbDHd::I64 = I64[R1 + 7];
           _sbDHe::I64 = I64[R1 + 15];
           I64[Hp - 24] = GHC.Word.W64#_con_info;
           I64[Hp - 16] = _sbDHd::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           _sbDHf::I64 = I64[Sp + 24] + (I64[Sp + 16] << 4);
           I64[Hp] = _sbDHf::I64;
           I64[Sp - 16] = block_cbEdv_info;
           R4 = Hp - 23;
           R3 = 8;
           R2 = Hp - 7;
           I64[Sp - 8] = _sbDHf::I64;
           I64[Sp] = _sbDHe::I64;
           Sp = Sp - 16;
           call Foreign.Storable.$wpokeW64_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEdd_info" {
     block_cbEdd_info:
         const _cbEdd;
         const 901;
         const 30;
 },
 _cbEdv() //  [R1]
         { []
         }
     {offset
       cbEdv: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbEdz; else goto cbEdy;
       cbEdz: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbEdy: // global
           I64[Hp - 24] = GHC.Word.W64#_con_info;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 8] + 8;
           I64[Sp + 16] = block_cbEdF_info;
           R4 = Hp - 23;
           R3 = 8;
           R2 = Hp - 7;
           Sp = Sp + 16;
           call Foreign.Storable.$wpokeW64_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEdv_info" {
     block_cbEdv_info:
         const _cbEdv;
         const 3783;
         const 30;
 },
 _cbEdF() //  []
         { []
         }
     {offset
       cbEdF: // global
           P64[Sp + 8] = P64[Sp + 8];
           I64[Sp + 16] = I64[Sp + 16] + 1;
           Sp = Sp + 8;
           call _cbEcZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbEdF_info" {
     block_cbEdF_info:
         const _cbEdF;
         const 901;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.488179432 UTC

[section ""relreadonly" . SbDI6_srt" {
     SbDI6_srt:
         const lvl2_rbDDQ_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Fingerprint.$wlvl_closure;
         const GHC.IO.Handle.Internals.wantReadableHandle_1_closure;
         const GHC.IO.Handle.Text.$whGetBuf_closure;
         const GHC.IO.Handle.hIsEOF3_closure;
         const GHC.Fingerprint.getFileHash2_closure;
         const System.IO.withBinaryFile1_closure;
         const GHC.Fingerprint.getFileHash1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.864281158 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:33.865426203 UTC

[section ""cstring" . GHC.Fingerprint.$trModule4_bytes" {
     GHC.Fingerprint.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.867141313 UTC

[section ""data" . GHC.Fingerprint.$trModule3_closure" {
     GHC.Fingerprint.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Fingerprint.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.868904993 UTC

[section ""cstring" . GHC.Fingerprint.$trModule2_bytes" {
     GHC.Fingerprint.$trModule2_bytes:
         I8[] [71,72,67,46,70,105,110,103,101,114,112,114,105,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.870611979 UTC

[section ""data" . GHC.Fingerprint.$trModule1_closure" {
     GHC.Fingerprint.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Fingerprint.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.872239033 UTC

[section ""data" . GHC.Fingerprint.$trModule_closure" {
     GHC.Fingerprint.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Fingerprint.$trModule3_closure+1;
         const GHC.Fingerprint.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.874001663 UTC

[section ""cstring" . GHC.Fingerprint.$tcMD5Context2_bytes" {
     GHC.Fingerprint.$tcMD5Context2_bytes:
         I8[] [77,68,53,67,111,110,116,101,120,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.875639882 UTC

[section ""data" . GHC.Fingerprint.$tcMD5Context1_closure" {
     GHC.Fingerprint.$tcMD5Context1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Fingerprint.$tcMD5Context2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.877333392 UTC

[section ""data" . GHC.Fingerprint.$tcMD5Context_closure" {
     GHC.Fingerprint.$tcMD5Context_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Fingerprint.$trModule_closure+1;
         const GHC.Fingerprint.$tcMD5Context1_closure+1;
         const GHC.Types.krep$*_closure;
         const 2786815183060026909;
         const 11852912954819316049;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.879047142 UTC

[section ""data" . GHC.Fingerprint.fingerprint0_closure" {
     GHC.Fingerprint.fingerprint0_closure:
         const GHC.Fingerprint.Type.Fingerprint_con_info;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.880685284 UTC

[section ""cstring" . lvl_rbDDO_bytes" {
     lvl_rbDDO_bytes:
         I8[] [71,72,67,46,70,105,110,103,101,114,112,114,105,110,116,46,103,101,116,70,105,108,101,72,97,115,104,58,32,111,110,108,121,32,114,101,97,100,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.882390224 UTC

[section ""cstring" . lvl1_rbDDP_bytes" {
     lvl1_rbDDP_bytes:
         I8[] [32,98,121,116,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.884723166 UTC

[section ""data" . lvl2_rbDDQ_closure" {
     lvl2_rbDDQ_closure:
         const lvl2_rbDDQ_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_rbDDQ_entry() //  [R1]
         { []
         }
     {offset
       cbEiu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbEiv; else goto cbEiw;
       cbEiv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbEiw: // global
           (_cbEir::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbEir::I64 == 0) goto cbEit; else goto cbEis;
       cbEit: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbEis: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbEir::I64;
           R2 = lvl1_rbDDP_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_rbDDQ_info" {
     lvl2_rbDDQ_info:
         const lvl2_rbDDQ_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.891435548 UTC

[section ""data" . GHC.Fingerprint.$wlvl_closure" {
     GHC.Fingerprint.$wlvl_closure:
         const GHC.Fingerprint.$wlvl_info;
         const 0;
 },
 sat_sbEeE_entry() //  [R1]
         { []
         }
     {offset
       cbEiQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbEiR; else goto cbEiS;
       cbEiR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbEiS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbEiN_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbEeE_info" {
     sat_sbEeE_info:
         const sat_sbEeE_entry;
         const 4294967296;
         const 4294967313;
         const SbEj6_srt;
 },
 _cbEiN() //  [R1, R2]
         { []
         }
     {offset
       cbEiN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbEiV; else goto cbEiU;
       cbEiV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cbEiU: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = lvl2_rbDDQ_closure;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbEiN_info" {
     block_cbEiN_info:
         const _cbEiN;
         const 0;
         const 4294967326;
         const SbEj6_srt;
 },
 GHC.Fingerprint.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       cbEiY: // global
           _sbEez::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cbEiZ; else goto cbEj0;
       cbEj0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbEj2; else goto cbEj1;
       cbEj2: // global
           HpAlloc = 24;
           goto cbEiZ;
       cbEiZ: // global
           R2 = _sbEez::I64;
           R1 = GHC.Fingerprint.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbEj1: // global
           I64[Hp - 16] = sat_sbEeE_info;
           I64[Hp] = _sbEez::I64;
           I64[Sp - 8] = block_cbEiW_info;
           R3 = Hp - 16;
           R2 = lvl_rbDDO_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.$wlvl_info" {
     GHC.Fingerprint.$wlvl_info:
         const GHC.Fingerprint.$wlvl_entry;
         const 0;
         const 30064771086;
         const 4294967300;
         const SbEj6_srt;
 },
 _cbEiW() //  [R1]
         { []
         }
     {offset
       cbEiW: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEiW_info" {
     block_cbEiW_info:
         const _cbEiW;
         const 0;
         const 4294967326;
         const SbEj6_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.904993709 UTC

[section ""data" . GHC.Fingerprint.getFileHash2_closure" {
     GHC.Fingerprint.getFileHash2_closure:
         const GHC.Fingerprint.getFileHash2_info;
         const 0;
 },
 sat_sbEfo_entry() //  [R1]
         { []
         }
     {offset
       cbEkc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbEkd; else goto cbEke;
       cbEkd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbEke: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Fingerprint.Type.$WFingerprint_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbEfo_info" {
     sat_sbEfo_info:
         const sat_sbEfo_entry;
         const 2;
         const 18;
 },
 GHC.Fingerprint.getFileHash2_entry() //  [R2]
         { []
         }
     {offset
       cbEkf: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cbEkg; else goto cbEkh;
       cbEkg: // global
           R2 = R2;
           R1 = GHC.Fingerprint.getFileHash2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbEkh: // global
           I64[Sp - 16] = block_cbEjw_info;
           R1 = 0;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.getFileHash2_info" {
     GHC.Fingerprint.getFileHash2_info:
         const GHC.Fingerprint.getFileHash2_entry;
         const 0;
         const 133143986190;
         const 8589934597;
         const SbEj6_srt+16;
 },
 _cbEjw() //  [R1]
         { []
         }
     {offset
       cbEjw: // global
           _sbEeO::I64 = R1 + 16;
           call "ccall" arg hints:  [PtrHint]  result hints:  [] __hsbase_MD5Init(_sbEeO::I64);
           I64[Sp - 16] = block_cbEjD_info;
           _sbEeN::P64 = R1;
           R1 = 4096;
           I64[Sp - 8] = _sbEeO::I64;
           P64[Sp] = _sbEeN::P64;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEjw_info" {
     block_cbEjw_info:
         const _cbEjw;
         const 1;
         const 64424509470;
         const SbEj6_srt+16;
 },
 _cbEjD() //  [R1]
         { []
         }
     {offset
       cbEjD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbEkl; else goto cbEkk;
       cbEkl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbEkk: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           _sbEeY::I64 = R1 + 16;
           I64[Hp] = _sbEeY::I64;
           P64[Sp - 16] = R1;
           I64[Sp - 8] = _sbEeY::I64;
           P64[Sp] = Hp - 7;
           Sp = Sp - 16;
           call _cbEkz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbEjD_info" {
     block_cbEjD_info:
         const _cbEjD;
         const 67;
         const 64424509470;
         const SbEj6_srt+16;
 },
 _cbEkz() //  []
         { []
         }
     {offset
       cbEkz: // global
           I64[Sp - 8] = block_cbEkB_info;
           R4 = 4096;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 40];
           Sp = Sp - 8;
           call GHC.IO.Handle.Text.$whGetBuf_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 _cbEkB() //  [R1]
         { []
         }
     {offset
       cbEkB: // global
           I64[Sp - 8] = block_cbEkD_info;
           R4 = GHC.IO.Handle.hIsEOF2_closure+2;
           R3 = P64[Sp + 48];
           R2 = GHC.IO.Handle.hIsEOF3_closure;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEkB_info" {
     block_cbEkB_info:
         const _cbEkB;
         const 646;
         const 64424509470;
         const SbEj6_srt+16;
 },
 _cbEkD() //  [R1]
         { []
         }
     {offset
       cbEkD: // global
           I64[Sp] = block_cbEkF_info;
           _sbEfw::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbEfw::P64;
           if (R1 & 7 != 0) goto ubElB; else goto cbEkJ;
       ubElB: // global
           call _cbEkF(R1) args: 0, res: 0, upd: 0;
       cbEkJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEkD_info" {
     block_cbEkD_info:
         const _cbEkD;
         const 1287;
         const 64424509470;
         const SbEj6_srt+16;
 },
 _cbEkF() //  [R1]
         { []
         }
     {offset
       cbEkF: // global
           _sbEfy::I64 = I64[R1 + 7];
           if (_sbEfy::I64 == 4096) goto ubElx; else goto cbElh;
       ubElx: // global
           I64[Sp] = _sbEfy::I64;
           call _sbEfz() args: 0, res: 0, upd: 0;
       cbElh: // global
           I64[Sp - 16] = block_cbElf_info;
           R1 = P64[Sp + 8];
           I64[Sp - 8] = _sbEfy::I64;
           I64[Sp] = _sbEfy::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubElC; else goto cbEli;
       ubElC: // global
           call _cbElf(R1) args: 0, res: 0, upd: 0;
       cbEli: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEkF_info" {
     block_cbEkF_info:
         const _cbEkF;
         const 1287;
         const 64424509470;
         const SbEj6_srt+16;
 },
 _cbElf() //  [R1]
         { []
         }
     {offset
       cbElf: // global
           if (R1 & 7 == 1) goto cbElo; else goto ubEly;
       cbElo: // global
           R2 = I64[Sp + 8];
           Sp = Sp + 80;
           call GHC.Fingerprint.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       ubEly: // global
           Sp = Sp + 16;
           call _sbEfz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbElf_info" {
     block_cbElf_info:
         const _cbElf;
         const 5321;
         const 64424509470;
         const SbEj6_srt+16;
 },
 _sbEfz() //  []
         { []
         }
     {offset
       sbEfz: // global
           _sbEfw::P64 = P64[Sp + 8];
           call "ccall" arg hints:  [PtrHint, PtrHint,
                                     ‘signed’]  result hints:  [] __hsbase_MD5Update(I64[Sp + 40], I64[Sp + 24], %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp])));
           I64[Sp + 8] = block_cbEl1_info;
           R1 = _sbEfw::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubElG; else goto cbEl2;
       ubElG: // global
           call _cbEl1(R1) args: 0, res: 0, upd: 0;
       cbEl2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbEl1() //  [R1]
         { []
         }
     {offset
       cbEl1: // global
           if (R1 & 7 == 1) goto ubElz; else goto cbElc;
       ubElz: // global
           Sp = Sp + 8;
           call _cbEkz() args: 0, res: 0, upd: 0;
       cbElc: // global
           call MO_Touch(P64[Sp + 8]);
           I64[Sp + 24] = block_cbEjP_info;
           R1 = 16;
           Sp = Sp + 24;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEl1_info" {
     block_cbEl1_info:
         const _cbEl1;
         const 646;
         const 64424509470;
         const SbEj6_srt+16;
 },
 _cbEjP() //  [R1]
         { []
         }
     {offset
       cbEjP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbEkp; else goto cbEko;
       cbEkp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbEko: // global
           _sbEf9::I64 = R1 + 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] __hsbase_MD5Final(_sbEf9::I64, I64[Sp + 8]);
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sbEf9::I64;
           I64[Sp] = block_cbEjY_info;
           R4 = 0;
           R3 = 8;
           R2 = Hp - 7;
           I64[Sp + 8] = _sbEf9::I64;
           P64[Sp + 24] = R1;
           call Foreign.Storable.$wpeekW64_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEjP_info" {
     block_cbEjP_info:
         const _cbEjP;
         const 323;
         const 30;
 },
 _cbEjY() //  [R1]
         { []
         }
     {offset
       cbEjY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbEks; else goto cbEkr;
       cbEks: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbEkr: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 8] + 8;
           I64[Sp] = block_cbEk4_info;
           R4 = 0;
           R3 = 8;
           R2 = Hp - 7;
           P64[Sp + 8] = R1;
           call Foreign.Storable.$wpeekW64_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEjY_info" {
     block_cbEjY_info:
         const _cbEjY;
         const 67;
         const 30;
 },
 _cbEk4() //  [R1]
         { []
         }
     {offset
       cbEk4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbEkv; else goto cbEku;
       cbEkv: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbEku: // global
           _sbEeN::P64 = P64[Sp + 16];
           _sbEfg::P64 = P64[Sp + 8];
           call MO_Touch(P64[Sp + 24]);
           call MO_Touch(_sbEeN::P64);
           I64[Hp - 24] = sat_sbEfo_info;
           P64[Hp - 8] = _sbEfg::P64;
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEk4_info" {
     block_cbEk4_info:
         const _cbEk4;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.928208221 UTC

[section ""data" . GHC.Fingerprint.getFileHash1_closure" {
     GHC.Fingerprint.getFileHash1_closure:
         const GHC.Fingerprint.getFileHash1_info;
         const 0;
 },
 GHC.Fingerprint.getFileHash1_entry() //  [R2]
         { []
         }
     {offset
       cbEmU: // global
           R4 = GHC.Fingerprint.getFileHash2_closure+2;
           R3 = GHC.IO.IOMode.ReadMode_closure+1;
           R2 = R2;
           call System.IO.withBinaryFile1_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.getFileHash1_info" {
     GHC.Fingerprint.getFileHash1_info:
         const GHC.Fingerprint.getFileHash1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SbEj6_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.932141777 UTC

[section ""data" . GHC.Fingerprint.getFileHash_closure" {
     GHC.Fingerprint.getFileHash_closure:
         const GHC.Fingerprint.getFileHash_info;
         const 0;
 },
 GHC.Fingerprint.getFileHash_entry() //  [R2]
         { []
         }
     {offset
       cbEn6: // global
           R2 = R2;
           call GHC.Fingerprint.getFileHash1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.getFileHash_info" {
     GHC.Fingerprint.getFileHash_info:
         const GHC.Fingerprint.getFileHash_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbEj6_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.93816321 UTC

[section ""data" . GHC.Fingerprint.$wfingerprintData_closure" {
     GHC.Fingerprint.$wfingerprintData_closure:
         const GHC.Fingerprint.$wfingerprintData_info;
 },
 sat_sbEgm_entry() //  [R1]
         { []
         }
     {offset
       cbEnS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbEnT; else goto cbEnU;
       cbEnT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbEnU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Fingerprint.Type.$WFingerprint_entry(R3,
                                                         R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbEgm_info" {
     sat_sbEgm_info:
         const sat_sbEgm_entry;
         const 2;
         const 18;
 },
 GHC.Fingerprint.$wfingerprintData_entry() //  [R2, R3]
         { []
         }
     {offset
       cbEnV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbEnW; else goto cbEnX;
       cbEnW: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.$wfingerprintData_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbEnX: // global
           I64[Sp - 24] = block_cbEnh_info;
           R1 = 0;
           I64[Sp - 16] = R2;
           I64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.$wfingerprintData_info" {
     GHC.Fingerprint.$wfingerprintData_info:
         const GHC.Fingerprint.$wfingerprintData_entry;
         const 0;
         const 14;
         const 12884901900;
 },
 _cbEnh() //  [R1]
         { []
         }
     {offset
       cbEnh: // global
           _sbEfK::I64 = I64[Sp + 8];
           _sbEfL::I64 = I64[Sp + 16];
           _sbEfT::I64 = R1 + 16;
           call "ccall" arg hints:  [PtrHint]  result hints:  [] __hsbase_MD5Init(_sbEfT::I64);
           call "ccall" arg hints:  [PtrHint, PtrHint,
                                     ‘signed’]  result hints:  [] __hsbase_MD5Update(_sbEfT::I64, _sbEfK::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sbEfL::I64)));
           I64[Sp] = block_cbEnv_info;
           _sbEfS::P64 = R1;
           R1 = 16;
           I64[Sp + 8] = _sbEfT::I64;
           P64[Sp + 16] = _sbEfS::P64;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEnh_info" {
     block_cbEnh_info:
         const _cbEnh;
         const 194;
         const 30;
 },
 _cbEnv() //  [R1]
         { []
         }
     {offset
       cbEnv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbEo1; else goto cbEo0;
       cbEo1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbEo0: // global
           _sbEg7::I64 = R1 + 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] __hsbase_MD5Final(_sbEg7::I64, I64[Sp + 8]);
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sbEg7::I64;
           I64[Sp - 8] = block_cbEnE_info;
           R4 = 0;
           R3 = 8;
           R2 = Hp - 7;
           I64[Sp] = _sbEg7::I64;
           P64[Sp + 8] = R1;
           Sp = Sp - 8;
           call Foreign.Storable.$wpeekW64_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEnv_info" {
     block_cbEnv_info:
         const _cbEnv;
         const 66;
         const 30;
 },
 _cbEnE() //  [R1]
         { []
         }
     {offset
       cbEnE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbEo4; else goto cbEo3;
       cbEo4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbEo3: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 8] + 8;
           I64[Sp] = block_cbEnK_info;
           R4 = 0;
           R3 = 8;
           R2 = Hp - 7;
           P64[Sp + 8] = R1;
           call Foreign.Storable.$wpeekW64_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEnE_info" {
     block_cbEnE_info:
         const _cbEnE;
         const 67;
         const 30;
 },
 _cbEnK() //  [R1]
         { []
         }
     {offset
       cbEnK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbEo7; else goto cbEo6;
       cbEo7: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbEo6: // global
           _sbEfS::P64 = P64[Sp + 24];
           _sbEge::P64 = P64[Sp + 8];
           call MO_Touch(P64[Sp + 16]);
           call MO_Touch(_sbEfS::P64);
           I64[Hp - 24] = sat_sbEgm_info;
           P64[Hp - 8] = _sbEge::P64;
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEnK_info" {
     block_cbEnK_info:
         const _cbEnK;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.951307021 UTC

[section ""data" . GHC.Fingerprint.fingerprintData1_closure" {
     GHC.Fingerprint.fingerprintData1_closure:
         const GHC.Fingerprint.fingerprintData1_info;
 },
 GHC.Fingerprint.fingerprintData1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbEoN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbEoR; else goto cbEoS;
       cbEoR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Fingerprint.fingerprintData1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbEoS: // global
           I64[Sp - 16] = block_cbEoK_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubEp0; else goto cbEoL;
       ubEp0: // global
           call _cbEoK(R1) args: 0, res: 0, upd: 0;
       cbEoL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.fingerprintData1_info" {
     GHC.Fingerprint.fingerprintData1_info:
         const GHC.Fingerprint.fingerprintData1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cbEoK() //  [R1]
         { []
         }
     {offset
       cbEoK: // global
           I64[Sp] = block_cbEoQ_info;
           _sbEgr::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sbEgr::I64;
           if (R1 & 7 != 0) goto ubEoZ; else goto cbEoU;
       ubEoZ: // global
           call _cbEoQ(R1) args: 0, res: 0, upd: 0;
       cbEoU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEoK_info" {
     block_cbEoK_info:
         const _cbEoK;
         const 1;
         const 30;
 },
 _cbEoQ() //  [R1]
         { []
         }
     {offset
       cbEoQ: // global
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Fingerprint.$wfingerprintData_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEoQ_info" {
     block_cbEoQ_info:
         const _cbEoQ;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.957948666 UTC

[section ""data" . GHC.Fingerprint.fingerprintData_closure" {
     GHC.Fingerprint.fingerprintData_closure:
         const GHC.Fingerprint.fingerprintData_info;
 },
 GHC.Fingerprint.fingerprintData_entry() //  [R2, R3]
         { []
         }
     {offset
       cbEpk: // global
           R3 = R3;
           R2 = R2;
           call GHC.Fingerprint.fingerprintData1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.fingerprintData_info" {
     GHC.Fingerprint.fingerprintData_info:
         const GHC.Fingerprint.fingerprintData_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.966546208 UTC

[section ""data" . GHC.Fingerprint.fingerprintString_go_closure" {
     GHC.Fingerprint.fingerprintString_go_closure:
         const GHC.Fingerprint.fingerprintString_go_info;
 },
 w32_sbEgy_entry() //  [R1]
         { []
         }
     {offset
       cbEpI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbEpV; else goto cbEpW;
       cbEpV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbEpW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbEpF_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubEq0; else goto cbEpG;
       ubEq0: // global
           call _cbEpF(R1) args: 0, res: 0, upd: 0;
       cbEpG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w32_sbEgy_info" {
     w32_sbEgy_info:
         const w32_sbEgy_entry;
         const 1;
         const 16;
 },
 _cbEpF() //  [R1]
         { []
         }
     {offset
       cbEpF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbEpZ; else goto cbEpY;
       cbEpZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbEpY: // global
           _sbEgD::I64 = %MO_UU_Conv_W32_W64(%MO_UU_Conv_W64_W32(I64[R1 + 7]));
           I64[Hp - 8] = GHC.Word.W32#_con_info;
           I64[Hp] = _sbEgD::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbEpF_info" {
     block_cbEpF_info:
         const _cbEpF;
         const 0;
         const 30;
 },
 sat_sbEgX_entry() //  [R1]
         { []
         }
     {offset
       cbEq5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbEq6; else goto cbEq7;
       cbEq6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbEq7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Fingerprint.fingerprintString_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbEgX_info" {
     sat_sbEgX_info:
         const sat_sbEgX_entry;
         const 1;
         const 16;
 },
 sat_sbEgW_entry() //  [R1]
         { []
         }
     {offset
       cbEqf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbEqm; else goto cbEqn;
       cbEqm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbEqn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbEqc_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubEqr; else goto cbEqd;
       ubEqr: // global
           call _cbEqc(R1) args: 0, res: 0, upd: 0;
       cbEqd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbEgW_info" {
     sat_sbEgW_info:
         const sat_sbEgW_entry;
         const 1;
         const 16;
 },
 _cbEqc() //  [R1]
         { []
         }
     {offset
       cbEqc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbEqq; else goto cbEqp;
       cbEqq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbEqp: // global
           _sbEgV::I64 = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(I64[R1 + 7]));
           I64[Hp - 8] = GHC.Word.W8#_con_info;
           I64[Hp] = _sbEgV::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbEqc_info" {
     block_cbEqc_info:
         const _cbEqc;
         const 0;
         const 30;
 },
 sat_sbEgS_entry() //  [R1]
         { []
         }
     {offset
       cbEqA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbEqK; else goto cbEqL;
       cbEqK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbEqL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbEqx_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubEqP; else goto cbEqy;
       ubEqP: // global
           call _cbEqx(R1) args: 0, res: 0, upd: 0;
       cbEqy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbEgS_info" {
     sat_sbEgS_info:
         const sat_sbEgS_entry;
         const 1;
         const 16;
 },
 _cbEqx() //  [R1]
         { []
         }
     {offset
       cbEqx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbEqO; else goto cbEqN;
       cbEqO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbEqN: // global
           _sbEgR::I64 = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(I64[R1 + 7] >> 8));
           I64[Hp - 8] = GHC.Word.W8#_con_info;
           I64[Hp] = _sbEgR::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbEqx_info" {
     block_cbEqx_info:
         const _cbEqx;
         const 0;
         const 30;
 },
 sat_sbEgN_entry() //  [R1]
         { []
         }
     {offset
       cbEqY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbEr8; else goto cbEr9;
       cbEr8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbEr9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbEqV_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubErd; else goto cbEqW;
       ubErd: // global
           call _cbEqV(R1) args: 0, res: 0, upd: 0;
       cbEqW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbEgN_info" {
     sat_sbEgN_info:
         const sat_sbEgN_entry;
         const 1;
         const 16;
 },
 _cbEqV() //  [R1]
         { []
         }
     {offset
       cbEqV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbErc; else goto cbErb;
       cbErc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbErb: // global
           _sbEgM::I64 = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(I64[R1 + 7] >> 16));
           I64[Hp - 8] = GHC.Word.W8#_con_info;
           I64[Hp] = _sbEgM::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbEqV_info" {
     block_cbEqV_info:
         const _cbEqV;
         const 0;
         const 30;
 },
 sat_sbEgI_entry() //  [R1]
         { []
         }
     {offset
       cbErm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbErw; else goto cbErx;
       cbErw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbErx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbErj_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubErB; else goto cbErk;
       ubErB: // global
           call _cbErj(R1) args: 0, res: 0, upd: 0;
       cbErk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbEgI_info" {
     sat_sbEgI_info:
         const sat_sbEgI_entry;
         const 1;
         const 16;
 },
 _cbErj() //  [R1]
         { []
         }
     {offset
       cbErj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbErA; else goto cbErz;
       cbErA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbErz: // global
           _sbEgH::I64 = %MO_UU_Conv_W8_W64(%MO_UU_Conv_W64_W8(I64[R1 + 7] >> 24));
           I64[Hp - 8] = GHC.Word.W8#_con_info;
           I64[Hp] = _sbEgH::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbErj_info" {
     block_cbErj_info:
         const _cbErj;
         const 0;
         const 30;
 },
 GHC.Fingerprint.fingerprintString_go_entry() //  [R2]
         { []
         }
     {offset
       cbErG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbErH; else goto cbErI;
       cbErH: // global
           R2 = R2;
           R1 = GHC.Fingerprint.fingerprintString_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbErI: // global
           I64[Sp - 8] = block_cbEpv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubErP; else goto cbEpw;
       ubErP: // global
           call _cbEpv(R1) args: 0, res: 0, upd: 0;
       cbEpw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.fingerprintString_go_info" {
     GHC.Fingerprint.fingerprintString_go_info:
         const GHC.Fingerprint.fingerprintString_go_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cbEpv() //  [R1]
         { []
         }
     {offset
       cbEpv: // global
           if (R1 & 7 == 1) goto cbErD; else goto cbErE;
       cbErD: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbErE: // global
           Hp = Hp + 240;
           if (Hp > HpLim) (likely: False) goto cbErO; else goto cbErN;
       cbErO: // global
           HpAlloc = 240;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbErN: // global
           _sbEgw::P64 = P64[R1 + 6];
           _sbEgx::P64 = P64[R1 + 14];
           I64[Hp - 232] = w32_sbEgy_info;
           P64[Hp - 216] = _sbEgw::P64;
           I64[Hp - 208] = sat_sbEgX_info;
           P64[Hp - 192] = _sbEgx::P64;
           I64[Hp - 184] = sat_sbEgW_info;
           _cbEpB::P64 = Hp - 232;
           P64[Hp - 168] = _cbEpB::P64;
           I64[Hp - 160] = :_con_info;
           P64[Hp - 152] = Hp - 184;
           P64[Hp - 144] = Hp - 208;
           I64[Hp - 136] = sat_sbEgS_info;
           P64[Hp - 120] = _cbEpB::P64;
           I64[Hp - 112] = :_con_info;
           P64[Hp - 104] = Hp - 136;
           P64[Hp - 96] = Hp - 158;
           I64[Hp - 88] = sat_sbEgN_info;
           P64[Hp - 72] = _cbEpB::P64;
           I64[Hp - 64] = :_con_info;
           P64[Hp - 56] = Hp - 88;
           P64[Hp - 48] = Hp - 110;
           I64[Hp - 40] = sat_sbEgI_info;
           P64[Hp - 24] = _cbEpB::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 62;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEpv_info" {
     block_cbEpv_info:
         const _cbEpv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:33.994030611 UTC

[section ""data" . GHC.Fingerprint.fingerprintString_closure" {
     GHC.Fingerprint.fingerprintString_closure:
         const GHC.Fingerprint.fingerprintString_info;
 },
 GHC.Fingerprint.fingerprintString_entry() //  [R2]
         { []
         }
     {offset
       cbEtB: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbEtC; else goto cbEtD;
       cbEtC: // global
           R2 = R2;
           R1 = GHC.Fingerprint.fingerprintString_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbEtD: // global
           I64[Sp - 8] = block_cbEtz_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Fingerprint.fingerprintString_go_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.fingerprintString_info" {
     GHC.Fingerprint.fingerprintString_info:
         const GHC.Fingerprint.fingerprintString_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cbEtz() //  [R1]
         { []
         }
     {offset
       cbEtz: // global
           I64[Sp - 8] = block_cbEtG_info;
           R3 = 0;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEtz_info" {
     block_cbEtz_info:
         const _cbEtz;
         const 0;
         const 30;
 },
 _cbEtG() //  [R1]
         { []
         }
     {offset
       cbEtG: // global
           I64[Sp - 8] = block_cbEtL_info;
           R2 = 1;
           _sbEh3::I64 = R1;
           R1 = R1;
           I64[Sp] = _sbEh3::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEtG_info" {
     block_cbEtG_info:
         const _cbEtG;
         const 1;
         const 30;
 },
 _cbEtL() //  [R1]
         { []
         }
     {offset
       cbEtL: // global
           P64[Sp - 16] = P64[Sp + 16];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call _cbEu3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbEtL_info" {
     block_cbEtL_info:
         const _cbEtL;
         const 66;
         const 30;
 },
 _cbEu3() //  []
         { []
         }
     {offset
       cbEu3: // global
           _sbEhi::P64 = P64[Sp];
           I64[Sp] = block_cbEu6_info;
           R1 = _sbEhi::P64;
           if (R1 & 7 != 0) goto ubEuz; else goto cbEu8;
       ubEuz: // global
           call _cbEu6(R1) args: 0, res: 0, upd: 0;
       cbEu8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbEu6() //  [R1]
         { []
         }
     {offset
       cbEu6: // global
           if (R1 & 7 == 1) goto cbEue; else goto cbEuj;
       cbEue: // global
           _sbEh3::I64 = I64[Sp + 24];
           I64[Sp + 24] = block_cbEtX_info;
           R3 = _sbEh3::I64;
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Fingerprint.$wfingerprintData_entry(R3,
                                                        R2) args: 8, res: 8, upd: 8;
       cbEuj: // global
           I64[Sp - 8] = block_cbEuh_info;
           _sbEhn::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sbEhn::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubEuA; else goto cbEuk;
       ubEuA: // global
           call _cbEuh(R1) args: 0, res: 0, upd: 0;
       cbEuk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEu6_info" {
     block_cbEu6_info:
         const _cbEu6;
         const 452;
         const 30;
 },
 _cbEtX() //  [R1]
         { []
         }
     {offset
       cbEtX: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEtX_info" {
     block_cbEtX_info:
         const _cbEtX;
         const 1;
         const 30;
 },
 _cbEuh() //  [R1]
         { []
         }
     {offset
       cbEuh: // global
           _sbEhj::I64 = I64[Sp + 16];
           _sbEhn::P64 = P64[Sp + 8];
           I8[I64[Sp + 24] + _sbEhj::I64] = %MO_UU_Conv_W64_W8(I64[R1 + 7]);
           P64[Sp + 8] = _sbEhn::P64;
           I64[Sp + 16] = _sbEhj::I64 + 1;
           Sp = Sp + 8;
           call _cbEu3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbEuh_info" {
     block_cbEuh_info:
         const _cbEuh;
         const 901;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.010444991 UTC

[section ""data" . GHC.Fingerprint.fingerprintFingerprints_closure" {
     GHC.Fingerprint.fingerprintFingerprints_closure:
         const GHC.Fingerprint.fingerprintFingerprints_info;
 },
 GHC.Fingerprint.fingerprintFingerprints_entry() //  [R2]
         { []
         }
     {offset
       cbEvr: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbEvs; else goto cbEvt;
       cbEvs: // global
           R2 = R2;
           R1 = GHC.Fingerprint.fingerprintFingerprints_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbEvt: // global
           I64[Sp - 16] = block_cbEvm_info;
           R3 = 0;
           _sbEhv::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _sbEhv::P64;
           Sp = Sp - 16;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Fingerprint.fingerprintFingerprints_info" {
     GHC.Fingerprint.fingerprintFingerprints_info:
         const GHC.Fingerprint.fingerprintFingerprints_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cbEvm() //  [R1]
         { []
         }
     {offset
       cbEvm: // global
           I64[Sp - 8] = block_cbEvA_info;
           R2 = 8;
           _sbEhw::I64 = R1;
           R1 = R1 << 4;
           I64[Sp] = _sbEhw::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEvm_info" {
     block_cbEvm_info:
         const _cbEvm;
         const 1;
         const 30;
 },
 _cbEvA() //  [R1]
         { []
         }
     {offset
       cbEvA: // global
           P64[Sp - 16] = P64[Sp + 16];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 16] = R1;
           Sp = Sp - 16;
           call _cbEvU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbEvA_info" {
     block_cbEvA_info:
         const _cbEvA;
         const 66;
         const 30;
 },
 _cbEvU() //  []
         { []
         }
     {offset
       cbEvU: // global
           _sbEhN::P64 = P64[Sp];
           I64[Sp] = block_cbEvX_info;
           R1 = _sbEhN::P64;
           if (R1 & 7 != 0) goto ubEwK; else goto cbEvZ;
       ubEwK: // global
           call _cbEvX(R1) args: 0, res: 0, upd: 0;
       cbEvZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbEvX() //  [R1]
         { []
         }
     {offset
       cbEvX: // global
           if (R1 & 7 == 1) goto cbEw5; else goto cbEwa;
       cbEw5: // global
           _sbEhH::I64 = I64[Sp + 24] << 4;
           I64[Sp + 24] = block_cbEvP_info;
           R3 = _sbEhH::I64;
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Fingerprint.$wfingerprintData_entry(R3,
                                                        R2) args: 8, res: 8, upd: 8;
       cbEwa: // global
           I64[Sp - 8] = block_cbEw8_info;
           _sbEhS::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sbEhS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubEwL; else goto cbEwb;
       ubEwL: // global
           call _cbEw8(R1) args: 0, res: 0, upd: 0;
       cbEwb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEvX_info" {
     block_cbEvX_info:
         const _cbEvX;
         const 452;
         const 30;
 },
 _cbEvP() //  [R1]
         { []
         }
     {offset
       cbEvP: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEvP_info" {
     block_cbEvP_info:
         const _cbEvP;
         const 1;
         const 30;
 },
 _cbEw8() //  [R1]
         { []
         }
     {offset
       cbEw8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbEwh; else goto cbEwg;
       cbEwh: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbEwg: // global
           _sbEhU::I64 = I64[R1 + 7];
           _sbEhV::I64 = I64[R1 + 15];
           I64[Hp - 24] = GHC.Word.W64#_con_info;
           I64[Hp - 16] = _sbEhU::I64;
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           _sbEhW::I64 = I64[Sp + 24] + (I64[Sp + 16] << 4);
           I64[Hp] = _sbEhW::I64;
           I64[Sp - 16] = block_cbEwq_info;
           R4 = Hp - 23;
           R3 = 8;
           R2 = Hp - 7;
           I64[Sp - 8] = _sbEhW::I64;
           I64[Sp] = _sbEhV::I64;
           Sp = Sp - 16;
           call Foreign.Storable.$wpokeW64_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEw8_info" {
     block_cbEw8_info:
         const _cbEw8;
         const 901;
         const 30;
 },
 _cbEwq() //  [R1]
         { []
         }
     {offset
       cbEwq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbEwu; else goto cbEwt;
       cbEwu: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbEwt: // global
           I64[Hp - 24] = GHC.Word.W64#_con_info;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 8] + 8;
           I64[Sp + 16] = block_cbEwA_info;
           R4 = Hp - 23;
           R3 = 8;
           R2 = Hp - 7;
           Sp = Sp + 16;
           call Foreign.Storable.$wpokeW64_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbEwq_info" {
     block_cbEwq_info:
         const _cbEwq;
         const 3783;
         const 30;
 },
 _cbEwA() //  []
         { []
         }
     {offset
       cbEwA: // global
           P64[Sp + 8] = P64[Sp + 8];
           I64[Sp + 16] = I64[Sp + 16] + 1;
           Sp = Sp + 8;
           call _cbEvU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbEwA_info" {
     block_cbEwA_info:
         const _cbEwA;
         const 901;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:34.026060534 UTC

[section ""relreadonly" . SbEj6_srt" {
     SbEj6_srt:
         const lvl2_rbDDQ_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Fingerprint.$wlvl_closure;
         const GHC.IO.Handle.Internals.wantReadableHandle_1_closure;
         const GHC.IO.Handle.Text.$whGetBuf_closure;
         const GHC.IO.Handle.hIsEOF3_closure;
         const GHC.Fingerprint.getFileHash2_closure;
         const System.IO.withBinaryFile1_closure;
         const GHC.Fingerprint.getFileHash1_closure;
 }]

