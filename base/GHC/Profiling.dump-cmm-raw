
==================== Raw Cmm ====================
2018-03-16 15:54:59.318309787 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:54:59.319376426 UTC

[section ""cstring" . GHC.Profiling.$trModule4_bytes" {
     GHC.Profiling.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.321062996 UTC

[section ""data" . GHC.Profiling.$trModule3_closure" {
     GHC.Profiling.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Profiling.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.32280691 UTC

[section ""cstring" . GHC.Profiling.$trModule2_bytes" {
     GHC.Profiling.$trModule2_bytes:
         I8[] [71,72,67,46,80,114,111,102,105,108,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.324424001 UTC

[section ""data" . GHC.Profiling.$trModule1_closure" {
     GHC.Profiling.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Profiling.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.326219373 UTC

[section ""data" . GHC.Profiling.$trModule_closure" {
     GHC.Profiling.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Profiling.$trModule3_closure+1;
         const GHC.Profiling.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.32978085 UTC

[section ""data" . stopProfTimer1_rlyb_closure" {
     stopProfTimer1_rlyb_closure:
         const stopProfTimer1_rlyb_info;
 },
 stopProfTimer1_rlyb_entry() //  []
         { []
         }
     {offset
       clAn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto clAo; else goto clAp;
       clAo: // global
           R1 = stopProfTimer1_rlyb_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       clAp: // global
           I64[Sp - 8] = block_clAl_info;
           Sp = Sp - 8;
           _ulAt::P64 = CurrentTSO;
           I64[I64[_ulAt::P64 + 24] + 16] = Sp;
           _ulAu::I64 = CurrentNursery;
           P64[_ulAu::I64 + 8] = Hp + 8;
           I64[_ulAt::P64 + 104] = I64[_ulAt::P64 + 104] - ((Hp + 8) - I64[_ulAu::I64]);
           (_ulAr::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           call "ccall" arg hints:  []  result hints:  [] stopProfTimer();
           (_ulAs::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_ulAr::I64);
           BaseReg = _ulAs::I64;
           _ulAv::P64 = CurrentTSO;
           _ulAw::P64 = I64[_ulAv::P64 + 24];
           Sp = I64[_ulAw::P64 + 16];
           SpLim = _ulAw::P64 + 192;
           HpAlloc = 0;
           _ulAx::I64 = CurrentNursery;
           _ulAy::I64 = I64[_ulAx::I64 + 8];
           Hp = _ulAy::I64 - 8;
           _ulAz::I64 = I64[_ulAx::I64];
           HpLim = _ulAz::I64 + ((%MO_SS_Conv_W32_W64(I32[_ulAx::I64 + 48]) << 12) - 1);
           I64[_ulAv::P64 + 104] = I64[_ulAv::P64 + 104] + (_ulAy::I64 - _ulAz::I64);
           call (I64[I64[Sp]])() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . stopProfTimer1_rlyb_info" {
     stopProfTimer1_rlyb_info:
         const stopProfTimer1_rlyb_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _clAl() //  []
         { []
         }
     {offset
       clAl: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_clAl_info" {
     block_clAl_info:
         const _clAl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.335101099 UTC

[section ""data" . GHC.Profiling.stopProfTimer_closure" {
     GHC.Profiling.stopProfTimer_closure:
         const GHC.Profiling.stopProfTimer_info;
 },
 GHC.Profiling.stopProfTimer_entry() //  []
         { []
         }
     {offset
       clB3: // global
           call stopProfTimer1_rlyb_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Profiling.stopProfTimer_info" {
     GHC.Profiling.stopProfTimer_info:
         const GHC.Profiling.stopProfTimer_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.33888198 UTC

[section ""data" . startProfTimer1_rlyc_closure" {
     startProfTimer1_rlyc_closure:
         const startProfTimer1_rlyc_info;
 },
 startProfTimer1_rlyc_entry() //  []
         { []
         }
     {offset
       clBh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto clBi; else goto clBj;
       clBi: // global
           R1 = startProfTimer1_rlyc_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       clBj: // global
           I64[Sp - 8] = block_clBf_info;
           Sp = Sp - 8;
           _ulBn::P64 = CurrentTSO;
           I64[I64[_ulBn::P64 + 24] + 16] = Sp;
           _ulBo::I64 = CurrentNursery;
           P64[_ulBo::I64 + 8] = Hp + 8;
           I64[_ulBn::P64 + 104] = I64[_ulBn::P64 + 104] - ((Hp + 8) - I64[_ulBo::I64]);
           (_ulBl::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           call "ccall" arg hints:  []  result hints:  [] startProfTimer();
           (_ulBm::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_ulBl::I64);
           BaseReg = _ulBm::I64;
           _ulBp::P64 = CurrentTSO;
           _ulBq::P64 = I64[_ulBp::P64 + 24];
           Sp = I64[_ulBq::P64 + 16];
           SpLim = _ulBq::P64 + 192;
           HpAlloc = 0;
           _ulBr::I64 = CurrentNursery;
           _ulBs::I64 = I64[_ulBr::I64 + 8];
           Hp = _ulBs::I64 - 8;
           _ulBt::I64 = I64[_ulBr::I64];
           HpLim = _ulBt::I64 + ((%MO_SS_Conv_W32_W64(I32[_ulBr::I64 + 48]) << 12) - 1);
           I64[_ulBp::P64 + 104] = I64[_ulBp::P64 + 104] + (_ulBs::I64 - _ulBt::I64);
           call (I64[I64[Sp]])() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . startProfTimer1_rlyc_info" {
     startProfTimer1_rlyc_info:
         const startProfTimer1_rlyc_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _clBf() //  []
         { []
         }
     {offset
       clBf: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_clBf_info" {
     block_clBf_info:
         const _clBf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.344477274 UTC

[section ""data" . GHC.Profiling.startProfTimer_closure" {
     GHC.Profiling.startProfTimer_closure:
         const GHC.Profiling.startProfTimer_info;
 },
 GHC.Profiling.startProfTimer_entry() //  []
         { []
         }
     {offset
       clBX: // global
           call startProfTimer1_rlyc_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Profiling.startProfTimer_info" {
     GHC.Profiling.startProfTimer_info:
         const GHC.Profiling.startProfTimer_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.34809855 UTC

[section ""relreadonly" . Slzg_srt" { Slzg_srt:
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.39035758 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:54:59.391500313 UTC

[section ""cstring" . GHC.Profiling.$trModule4_bytes" {
     GHC.Profiling.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.393345757 UTC

[section ""data" . GHC.Profiling.$trModule3_closure" {
     GHC.Profiling.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Profiling.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.395021206 UTC

[section ""cstring" . GHC.Profiling.$trModule2_bytes" {
     GHC.Profiling.$trModule2_bytes:
         I8[] [71,72,67,46,80,114,111,102,105,108,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.396825965 UTC

[section ""data" . GHC.Profiling.$trModule1_closure" {
     GHC.Profiling.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Profiling.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.39865152 UTC

[section ""data" . GHC.Profiling.$trModule_closure" {
     GHC.Profiling.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Profiling.$trModule3_closure+1;
         const GHC.Profiling.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.401876055 UTC

[section ""data" . stopProfTimer1_rlyb_closure" {
     stopProfTimer1_rlyb_closure:
         const stopProfTimer1_rlyb_info;
 },
 stopProfTimer1_rlyb_entry() //  []
         { []
         }
     {offset
       clCp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto clCq; else goto clCr;
       clCq: // global
           R1 = stopProfTimer1_rlyb_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       clCr: // global
           I64[Sp - 8] = block_clCn_info;
           Sp = Sp - 8;
           _ulCv::P64 = CurrentTSO;
           I64[I64[_ulCv::P64 + 24] + 16] = Sp;
           _ulCw::I64 = CurrentNursery;
           P64[_ulCw::I64 + 8] = Hp + 8;
           I64[_ulCv::P64 + 104] = I64[_ulCv::P64 + 104] - ((Hp + 8) - I64[_ulCw::I64]);
           (_ulCt::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           call "ccall" arg hints:  []  result hints:  [] stopProfTimer();
           (_ulCu::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_ulCt::I64);
           BaseReg = _ulCu::I64;
           _ulCx::P64 = CurrentTSO;
           _ulCy::P64 = I64[_ulCx::P64 + 24];
           Sp = I64[_ulCy::P64 + 16];
           SpLim = _ulCy::P64 + 192;
           HpAlloc = 0;
           _ulCz::I64 = CurrentNursery;
           _ulCA::I64 = I64[_ulCz::I64 + 8];
           Hp = _ulCA::I64 - 8;
           _ulCB::I64 = I64[_ulCz::I64];
           HpLim = _ulCB::I64 + ((%MO_SS_Conv_W32_W64(I32[_ulCz::I64 + 48]) << 12) - 1);
           I64[_ulCx::P64 + 104] = I64[_ulCx::P64 + 104] + (_ulCA::I64 - _ulCB::I64);
           call (I64[I64[Sp]])() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . stopProfTimer1_rlyb_info" {
     stopProfTimer1_rlyb_info:
         const stopProfTimer1_rlyb_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _clCn() //  []
         { []
         }
     {offset
       clCn: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_clCn_info" {
     block_clCn_info:
         const _clCn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.409659723 UTC

[section ""data" . GHC.Profiling.stopProfTimer_closure" {
     GHC.Profiling.stopProfTimer_closure:
         const GHC.Profiling.stopProfTimer_info;
 },
 GHC.Profiling.stopProfTimer_entry() //  []
         { []
         }
     {offset
       clD7: // global
           call stopProfTimer1_rlyb_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Profiling.stopProfTimer_info" {
     GHC.Profiling.stopProfTimer_info:
         const GHC.Profiling.stopProfTimer_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.414092488 UTC

[section ""data" . startProfTimer1_rlyc_closure" {
     startProfTimer1_rlyc_closure:
         const startProfTimer1_rlyc_info;
 },
 startProfTimer1_rlyc_entry() //  []
         { []
         }
     {offset
       clDl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto clDm; else goto clDn;
       clDm: // global
           R1 = startProfTimer1_rlyc_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       clDn: // global
           I64[Sp - 8] = block_clDj_info;
           Sp = Sp - 8;
           _ulDr::P64 = CurrentTSO;
           I64[I64[_ulDr::P64 + 24] + 16] = Sp;
           _ulDs::I64 = CurrentNursery;
           P64[_ulDs::I64 + 8] = Hp + 8;
           I64[_ulDr::P64 + 104] = I64[_ulDr::P64 + 104] - ((Hp + 8) - I64[_ulDs::I64]);
           (_ulDp::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           call "ccall" arg hints:  []  result hints:  [] startProfTimer();
           (_ulDq::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_ulDp::I64);
           BaseReg = _ulDq::I64;
           _ulDt::P64 = CurrentTSO;
           _ulDu::P64 = I64[_ulDt::P64 + 24];
           Sp = I64[_ulDu::P64 + 16];
           SpLim = _ulDu::P64 + 192;
           HpAlloc = 0;
           _ulDv::I64 = CurrentNursery;
           _ulDw::I64 = I64[_ulDv::I64 + 8];
           Hp = _ulDw::I64 - 8;
           _ulDx::I64 = I64[_ulDv::I64];
           HpLim = _ulDx::I64 + ((%MO_SS_Conv_W32_W64(I32[_ulDv::I64 + 48]) << 12) - 1);
           I64[_ulDt::P64 + 104] = I64[_ulDt::P64 + 104] + (_ulDw::I64 - _ulDx::I64);
           call (I64[I64[Sp]])() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . startProfTimer1_rlyc_info" {
     startProfTimer1_rlyc_info:
         const startProfTimer1_rlyc_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _clDj() //  []
         { []
         }
     {offset
       clDj: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_clDj_info" {
     block_clDj_info:
         const _clDj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.421209824 UTC

[section ""data" . GHC.Profiling.startProfTimer_closure" {
     GHC.Profiling.startProfTimer_closure:
         const GHC.Profiling.startProfTimer_info;
 },
 GHC.Profiling.startProfTimer_entry() //  []
         { []
         }
     {offset
       clE3: // global
           call startProfTimer1_rlyc_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Profiling.startProfTimer_info" {
     GHC.Profiling.startProfTimer_info:
         const GHC.Profiling.startProfTimer_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 15:54:59.424429931 UTC

[section ""relreadonly" . SlEa_srt" { SlEa_srt:
 }]

