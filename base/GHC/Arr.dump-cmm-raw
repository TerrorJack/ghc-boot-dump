
==================== Raw Cmm ====================
2018-03-16 15:56:38.332365369 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:56:38.355025126 UTC

[section ""data" . GHC.Arr.$p1Ix_closure" {
     GHC.Arr.$p1Ix_closure:
         const GHC.Arr.$p1Ix_info;
 },
 GHC.Arr.$p1Ix_entry() //  [R2]
         { []
         }
     {offset
       c25jw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c25jx; else goto c25jy;
       c25jx: // global
           R2 = R2;
           R1 = GHC.Arr.$p1Ix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c25jy: // global
           I64[Sp - 8] = block_c25jt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25jC; else goto c25ju;
       u25jC: // global
           call _c25jt(R1) args: 0, res: 0, upd: 0;
       c25ju: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$p1Ix_info" {
     GHC.Arr.$p1Ix_info:
         const GHC.Arr.$p1Ix_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c25jt() //  [R1]
         { []
         }
     {offset
       c25jt: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25jt_info" {
     block_c25jt_info:
         const _c25jt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.361302141 UTC

[section ""data" . GHC.Arr.range_closure" {
     GHC.Arr.range_closure:
         const GHC.Arr.range_info;
 },
 GHC.Arr.range_entry() //  [R2]
         { []
         }
     {offset
       c25jV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c25jW; else goto c25jX;
       c25jW: // global
           R2 = R2;
           R1 = GHC.Arr.range_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c25jX: // global
           I64[Sp - 8] = block_c25jS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25k1; else goto c25jT;
       u25k1: // global
           call _c25jS(R1) args: 0, res: 0, upd: 0;
       c25jT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.range_info" {
     GHC.Arr.range_info:
         const GHC.Arr.range_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c25jS() //  [R1]
         { []
         }
     {offset
       c25jS: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25jS_info" {
     block_c25jS_info:
         const _c25jS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.367297048 UTC

[section ""data" . GHC.Arr.index_closure" {
     GHC.Arr.index_closure:
         const GHC.Arr.index_info;
 },
 GHC.Arr.index_entry() //  [R2]
         { []
         }
     {offset
       c25ki: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c25kj; else goto c25kk;
       c25kj: // global
           R2 = R2;
           R1 = GHC.Arr.index_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c25kk: // global
           I64[Sp - 8] = block_c25kf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25ko; else goto c25kg;
       u25ko: // global
           call _c25kf(R1) args: 0, res: 0, upd: 0;
       c25kg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.index_info" {
     GHC.Arr.index_info:
         const GHC.Arr.index_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c25kf() //  [R1]
         { []
         }
     {offset
       c25kf: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25kf_info" {
     block_c25kf_info:
         const _c25kf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.373486619 UTC

[section ""data" . GHC.Arr.unsafeIndex_closure" {
     GHC.Arr.unsafeIndex_closure:
         const GHC.Arr.unsafeIndex_info;
 },
 GHC.Arr.unsafeIndex_entry() //  [R2]
         { []
         }
     {offset
       c25kF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c25kG; else goto c25kH;
       c25kG: // global
           R2 = R2;
           R1 = GHC.Arr.unsafeIndex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c25kH: // global
           I64[Sp - 8] = block_c25kC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25kL; else goto c25kD;
       u25kL: // global
           call _c25kC(R1) args: 0, res: 0, upd: 0;
       c25kD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeIndex_info" {
     GHC.Arr.unsafeIndex_info:
         const GHC.Arr.unsafeIndex_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c25kC() //  [R1]
         { []
         }
     {offset
       c25kC: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25kC_info" {
     block_c25kC_info:
         const _c25kC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.379259413 UTC

[section ""data" . GHC.Arr.inRange_closure" {
     GHC.Arr.inRange_closure:
         const GHC.Arr.inRange_info;
 },
 GHC.Arr.inRange_entry() //  [R2]
         { []
         }
     {offset
       c25l2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c25l3; else goto c25l4;
       c25l3: // global
           R2 = R2;
           R1 = GHC.Arr.inRange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c25l4: // global
           I64[Sp - 8] = block_c25kZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25l8; else goto c25l0;
       u25l8: // global
           call _c25kZ(R1) args: 0, res: 0, upd: 0;
       c25l0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.inRange_info" {
     GHC.Arr.inRange_info:
         const GHC.Arr.inRange_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c25kZ() //  [R1]
         { []
         }
     {offset
       c25kZ: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25kZ_info" {
     block_c25kZ_info:
         const _c25kZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.385391166 UTC

[section ""data" . GHC.Arr.rangeSize_closure" {
     GHC.Arr.rangeSize_closure:
         const GHC.Arr.rangeSize_info;
 },
 GHC.Arr.rangeSize_entry() //  [R2]
         { []
         }
     {offset
       c25lp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c25lq; else goto c25lr;
       c25lq: // global
           R2 = R2;
           R1 = GHC.Arr.rangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c25lr: // global
           I64[Sp - 8] = block_c25lm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25lv; else goto c25ln;
       u25lv: // global
           call _c25lm(R1) args: 0, res: 0, upd: 0;
       c25ln: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.rangeSize_info" {
     GHC.Arr.rangeSize_info:
         const GHC.Arr.rangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c25lm() //  [R1]
         { []
         }
     {offset
       c25lm: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25lm_info" {
     block_c25lm_info:
         const _c25lm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.391149918 UTC

[section ""data" . GHC.Arr.unsafeRangeSize_closure" {
     GHC.Arr.unsafeRangeSize_closure:
         const GHC.Arr.unsafeRangeSize_info;
 },
 GHC.Arr.unsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c25lM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c25lN; else goto c25lO;
       c25lN: // global
           R2 = R2;
           R1 = GHC.Arr.unsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c25lO: // global
           I64[Sp - 8] = block_c25lJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25lS; else goto c25lK;
       u25lS: // global
           call _c25lJ(R1) args: 0, res: 0, upd: 0;
       c25lK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeRangeSize_info" {
     GHC.Arr.unsafeRangeSize_info:
         const GHC.Arr.unsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c25lJ() //  [R1]
         { []
         }
     {offset
       c25lJ: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25lJ_info" {
     block_c25lJ_info:
         const _c25lJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.397627331 UTC

[section ""data" . GHC.Arr.$WSTArray_closure" {
     GHC.Arr.$WSTArray_closure:
         const GHC.Arr.$WSTArray_info;
 },
 GHC.Arr.$WSTArray_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c25md: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c25mh; else goto c25mi;
       c25mh: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$WSTArray_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c25mi: // global
           I64[Sp - 32] = block_c25m6_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$WSTArray_info" {
     GHC.Arr.$WSTArray_info:
         const GHC.Arr.$WSTArray_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c25m6() //  [R1]
         { []
         }
     {offset
       c25m6: // global
           I64[Sp] = block_c25m8_info;
           _s1Xxs::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1Xxs::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25m6_info" {
     block_c25m6_info:
         const _c25m6;
         const 3;
         const 30;
 },
 _c25m8() //  [R1]
         { []
         }
     {offset
       c25m8: // global
           I64[Sp] = block_c25ma_info;
           _s1Xxt::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1Xxt::P64;
           if (R1 & 7 != 0) goto u25mo; else goto c25mb;
       u25mo: // global
           call _c25ma(R1) args: 0, res: 0, upd: 0;
       c25mb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25m8_info" {
     block_c25m8_info:
         const _c25m8;
         const 3;
         const 30;
 },
 _c25ma() //  [R1]
         { []
         }
     {offset
       c25ma: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c25mn; else goto c25mm;
       c25mn: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c25mm: // global
           _s1Xxv::I64 = I64[R1 + 7];
           I64[Hp - 32] = GHC.Arr.STArray_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = _s1Xxv::I64;
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25ma_info" {
     block_c25ma_info:
         const _c25ma;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.407228558 UTC

[section ""data" . GHC.Arr.$WArray_closure" {
     GHC.Arr.$WArray_closure:
         const GHC.Arr.$WArray_info;
 },
 GHC.Arr.$WArray_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c25mT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c25mX; else goto c25mY;
       c25mX: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$WArray_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c25mY: // global
           I64[Sp - 32] = block_c25mM_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$WArray_info" {
     GHC.Arr.$WArray_info:
         const GHC.Arr.$WArray_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c25mM() //  [R1]
         { []
         }
     {offset
       c25mM: // global
           I64[Sp] = block_c25mO_info;
           _s1XxA::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1XxA::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25mM_info" {
     block_c25mM_info:
         const _c25mM;
         const 3;
         const 30;
 },
 _c25mO() //  [R1]
         { []
         }
     {offset
       c25mO: // global
           I64[Sp] = block_c25mQ_info;
           _s1XxB::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1XxB::P64;
           if (R1 & 7 != 0) goto u25n4; else goto c25mR;
       u25n4: // global
           call _c25mQ(R1) args: 0, res: 0, upd: 0;
       c25mR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25mO_info" {
     block_c25mO_info:
         const _c25mO;
         const 3;
         const 30;
 },
 _c25mQ() //  [R1]
         { []
         }
     {offset
       c25mQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c25n3; else goto c25n2;
       c25n3: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c25n2: // global
           _s1XxD::I64 = I64[R1 + 7];
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = _s1XxD::I64;
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25mQ_info" {
     block_c25mQ_info:
         const _c25mQ;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.416074924 UTC

[section ""data" . GHC.Arr.$fIxInt1_closure" {
     GHC.Arr.$fIxInt1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.417821604 UTC

[section ""data" . f_r1Xus_closure" {
     f_r1Xus_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.419855029 UTC

[section ""cstring" . lvl_r1Xut_bytes" {
     lvl_r1Xut_bytes:
         I8[] [41]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.421584863 UTC

[section ""cstring" . lvl1_r1Xuu_bytes" {
     lvl1_r1Xuu_bytes:
         I8[] [32,110,111,116,32,105,110,32,114,97,110,103,101,32,91,48,46,46]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.423311006 UTC

[section ""cstring" . lvl2_r1Xuv_bytes" {
     lvl2_r1Xuv_bytes:
         I8[] [69,114,114,111,114,32,105,110,32,97,114,114,97,121,32,105,110,100,101,120,59,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.42595076 UTC

[section ""data" . lvl3_r1Xuw_closure" {
     lvl3_r1Xuw_closure:
         const lvl3_r1Xuw_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r1Xuw_entry() //  [R1]
         { []
         }
     {offset
       c25nz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c25nA; else goto c25nB;
       c25nA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c25nB: // global
           (_c25nw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c25nw::I64 == 0) goto c25ny; else goto c25nx;
       c25ny: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c25nx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c25nw::I64;
           R2 = lvl_r1Xut_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r1Xuw_info" {
     lvl3_r1Xuw_info:
         const lvl3_r1Xuw_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.433374706 UTC

[section ""data" . GHC.Arr.$wbadSafeIndex_closure" {
     GHC.Arr.$wbadSafeIndex_closure:
         const GHC.Arr.$wbadSafeIndex_info;
         const 0;
 },
 sat_s1XxO_entry() //  [R1]
         { []
         }
     {offset
       c25o4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c25o5; else goto c25o6;
       c25o5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c25o6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c25o1_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XxO_info" {
     sat_s1XxO_info:
         const sat_s1XxO_entry;
         const 4294967296;
         const 4294967313;
         const S1YCH_srt;
 },
 _c25o1() //  [R1, R2]
         { []
         }
     {offset
       c25o1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c25o9; else goto c25o8;
       c25o9: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c25o8: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = lvl3_r1Xuw_closure;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c25o1_info" {
     block_c25o1_info:
         const _c25o1;
         const 0;
         const 4294967326;
         const S1YCH_srt;
 },
 sat_s1XxP_entry() //  [R1]
         { []
         }
     {offset
       c25oa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c25oe; else goto c25od;
       c25oe: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c25od: // global
           _s1XxF::I64 = I64[R1 + 16];
           I64[Hp - 16] = sat_s1XxO_info;
           I64[Hp] = _s1XxF::I64;
           R3 = Hp - 16;
           R2 = lvl1_r1Xuu_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1XxP_info" {
     sat_s1XxP_info:
         const sat_s1XxP_entry;
         const 4294967296;
         const 4294967313;
         const S1YCH_srt;
 },
 sat_s1XxQ_entry() //  [R1]
         { []
         }
     {offset
       c25og: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c25oh; else goto c25oi;
       c25oh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c25oi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c25nR_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           I64[Sp - 24] = I64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XxQ_info" {
     sat_s1XxQ_info:
         const sat_s1XxQ_entry;
         const 8589934592;
         const 4294967316;
         const S1YCH_srt;
 },
 _c25nR() //  [R1, R2]
         { []
         }
     {offset
       c25nR: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c25ol; else goto c25ok;
       c25ol: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c25ok: // global
           I64[Hp - 40] = sat_s1XxP_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c25nR_info" {
     block_c25nR_info:
         const _c25nR;
         const 65;
         const 4294967326;
         const S1YCH_srt;
 },
 GHC.Arr.$wbadSafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c25oo: // global
           _s1XxF::I64 = R3;
           _s1XxE::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c25op; else goto c25oq;
       c25oq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c25os; else goto c25or;
       c25os: // global
           HpAlloc = 32;
           goto c25op;
       c25op: // global
           R3 = _s1XxF::I64;
           R2 = _s1XxE::I64;
           R1 = GHC.Arr.$wbadSafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c25or: // global
           I64[Hp - 24] = sat_s1XxQ_info;
           I64[Hp - 8] = _s1XxE::I64;
           I64[Hp] = _s1XxF::I64;
           I64[Sp - 8] = block_c25om_info;
           R3 = Hp - 24;
           R2 = lvl2_r1Xuv_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$wbadSafeIndex_info" {
     GHC.Arr.$wbadSafeIndex_info:
         const GHC.Arr.$wbadSafeIndex_entry;
         const 0;
         const 30064771086;
         const 8589934604;
         const S1YCH_srt;
 },
 _c25om() //  [R1]
         { []
         }
     {offset
       c25om: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25om_info" {
     block_c25om_info:
         const _c25om;
         const 0;
         const 4294967326;
         const S1YCH_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.448954002 UTC

[section ""data" . GHC.Arr.badSafeIndex_closure" {
     GHC.Arr.badSafeIndex_closure:
         const GHC.Arr.badSafeIndex_info;
         const 0;
 },
 GHC.Arr.badSafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c25p4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c25p8; else goto c25p9;
       c25p8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.badSafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c25p9: // global
           I64[Sp - 16] = block_c25p1_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u25ph; else goto c25p2;
       u25ph: // global
           call _c25p1(R1) args: 0, res: 0, upd: 0;
       c25p2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.badSafeIndex_info" {
     GHC.Arr.badSafeIndex_info:
         const GHC.Arr.badSafeIndex_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1YCH_srt+16;
 },
 _c25p1() //  [R1]
         { []
         }
     {offset
       c25p1: // global
           I64[Sp] = block_c25p7_info;
           _s1XxV::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1XxV::I64;
           if (R1 & 7 != 0) goto u25pg; else goto c25pb;
       u25pg: // global
           call _c25p7(R1) args: 0, res: 0, upd: 0;
       c25pb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25p1_info" {
     block_c25p1_info:
         const _c25p1;
         const 1;
         const 4294967326;
         const S1YCH_srt+16;
 },
 _c25p7() //  [R1]
         { []
         }
     {offset
       c25p7: // global
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25p7_info" {
     block_c25p7_info:
         const _c25p7;
         const 65;
         const 4294967326;
         const S1YCH_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.459406022 UTC

[section ""data" . GHC.Arr.$w$s$fIx(,,)_closure" {
     GHC.Arr.$w$s$fIx(,,)_closure:
         const GHC.Arr.$w$s$fIx(,,)_info;
 },
 GHC.Arr.$w$s$fIx(,,)_slow() //  [R1]
         { []
         }
     {offset
       c25pw: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$w$s$fIx(,,)_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2,
                                           R1) args: 40, res: 0, upd: 8;
     }
 },
 GHC.Arr.$w$s$fIx(,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c25pF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c25pG; else goto c25pH;
       c25pG: // global
           R1 = GHC.Arr.$w$s$fIx(,,)_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c25pH: // global
           _s1Xy4::I64 = I64[Sp + 8];
           if (%MO_S_Gt_W64(R2, _s1Xy4::I64)) goto u25qN; else goto c25pE;
       u25qN: // global
           Sp = Sp + 32;
           goto u25qU;
       c25pE: // global
           if (%MO_S_Gt_W64(_s1Xy4::I64, R5)) goto u25qO; else goto c25q1;
       u25qO: // global
           Sp = Sp + 32;
           goto u25qU;
       u25qU: // global
           call _c25qH() args: 0, res: 0, upd: 0;
       c25q1: // global
           I64[Sp - 16] = block_c25pQ_info;
           R1 = R3;
           P64[Sp - 8] = R6;
           P64[Sp + 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u25qS; else goto c25pR;
       u25qS: // global
           call _c25pQ(R1) args: 0, res: 0, upd: 0;
       c25pR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$s$fIx(,,)_info" {
     GHC.Arr.$w$s$fIx(,,)_info:
         const GHC.Arr.$w$s$fIx(,,)_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 4681;
         const GHC.Arr.$w$s$fIx(,,)_slow;
 },
 _c25pQ() //  [R1]
         { []
         }
     {offset
       c25pQ: // global
           I64[Sp] = block_c25pV_info;
           _s1Xya::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1Xya::I64;
           if (R1 & 7 != 0) goto u25qV; else goto c25pW;
       u25qV: // global
           call _c25pV(R1) args: 0, res: 0, upd: 0;
       c25pW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25pQ_info" {
     block_c25pQ_info:
         const _c25pQ;
         const 5;
         const 30;
 },
 _c25pV() //  [R1]
         { []
         }
     {offset
       c25pV: // global
           I64[Sp] = block_c25q0_info;
           _s1Xyc::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s1Xyc::I64;
           if (R1 & 7 != 0) goto u25qW; else goto c25q4;
       u25qW: // global
           call _c25q0(R1) args: 0, res: 0, upd: 0;
       c25q4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25pV_info" {
     block_c25pV_info:
         const _c25pV;
         const 69;
         const 30;
 },
 _c25q0() //  [R1]
         { []
         }
     {offset
       c25q0: // global
           _s1Xye::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(I64[Sp + 8],
                            _s1Xye::I64)) goto u25qP; else goto c25qJ;
       u25qP: // global
           Sp = Sp + 48;
           goto u25qZ;
       c25qJ: // global
           if (%MO_S_Gt_W64(_s1Xye::I64,
                            I64[Sp + 32])) goto u25qQ; else goto c25qw;
       u25qQ: // global
           Sp = Sp + 48;
           goto u25qZ;
       u25qZ: // global
           call _c25qH() args: 0, res: 0, upd: 0;
       c25qw: // global
           I64[Sp + 8] = block_c25ql_info;
           R1 = P64[Sp + 24];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u25qX; else goto c25qm;
       u25qX: // global
           call _c25ql(R1) args: 0, res: 0, upd: 0;
       c25qm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25q0_info" {
     block_c25q0_info:
         const _c25q0;
         const 581;
         const 30;
 },
 _c25ql() //  [R1]
         { []
         }
     {offset
       c25ql: // global
           I64[Sp + 16] = block_c25qq_info;
           _s1Xyi::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 24] = _s1Xyi::I64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u25r0; else goto c25qr;
       u25r0: // global
           call _c25qq(R1) args: 0, res: 0, upd: 0;
       c25qr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25ql_info" {
     block_c25ql_info:
         const _c25ql;
         const 388;
         const 30;
 },
 _c25qq() //  [R1]
         { []
         }
     {offset
       c25qq: // global
           I64[Sp] = block_c25qv_info;
           _s1Xyk::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1Xyk::I64;
           if (R1 & 7 != 0) goto u25r1; else goto c25qz;
       u25r1: // global
           call _c25qv(R1) args: 0, res: 0, upd: 0;
       c25qz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25qq_info" {
     block_c25qq_info:
         const _c25qq;
         const 66;
         const 30;
 },
 _c25qv() //  [R1]
         { []
         }
     {offset
       c25qv: // global
           _s1Xym::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(I64[Sp + 8],
                            _s1Xym::I64)) goto u25qR; else goto c25qI;
       u25qR: // global
           Sp = Sp + 24;
           call _c25qH() args: 0, res: 0, upd: 0;
       c25qI: // global
           R1 = I64[(%MO_S_Le_W64(_s1Xym::I64,
                                  I64[Sp + 16]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25qv_info" {
     block_c25qv_info:
         const _c25qv;
         const 194;
         const 30;
 },
 _c25qH() //  []
         { []
         }
     {offset
       c25qH: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.47887447 UTC

[section ""data" . GHC.Arr.$fIx(,,)1_closure" {
     GHC.Arr.$fIx(,,)1_closure:
         const GHC.Arr.$fIx(,,)1_info;
 },
 GHC.Arr.$fIx(,,)1_entry() //  [R2, R3]
         { []
         }
     {offset
       c25rL: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c25se; else goto c25sf;
       c25se: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c25sf: // global
           I64[Sp - 16] = block_c25rI_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u25ss; else goto c25rJ;
       u25ss: // global
           call _c25rI(R1) args: 0, res: 0, upd: 0;
       c25rJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)1_info" {
     GHC.Arr.$fIx(,,)1_info:
         const GHC.Arr.$fIx(,,)1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c25rI() //  [R1]
         { []
         }
     {offset
       c25rI: // global
           I64[Sp - 8] = block_c25rO_info;
           _s1Xyt::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Xyt::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25sr; else goto c25rP;
       u25sr: // global
           call _c25rO(R1) args: 0, res: 0, upd: 0;
       c25rP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25rI_info" {
     block_c25rI_info:
         const _c25rI;
         const 1;
         const 30;
 },
 _c25rO() //  [R1]
         { []
         }
     {offset
       c25rO: // global
           I64[Sp - 16] = block_c25rT_info;
           _s1Xyw::P64 = P64[R1 + 15];
           _s1Xyx::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1Xyx::P64;
           P64[Sp] = _s1Xyw::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u25st; else goto c25rU;
       u25st: // global
           call _c25rT(R1) args: 0, res: 0, upd: 0;
       c25rU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25rO_info" {
     block_c25rO_info:
         const _c25rO;
         const 2;
         const 30;
 },
 _c25rT() //  [R1]
         { []
         }
     {offset
       c25rT: // global
           I64[Sp] = block_c25rY_info;
           _s1Xyz::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s1Xyz::I64;
           if (R1 & 7 != 0) goto u25su; else goto c25rZ;
       u25su: // global
           call _c25rY(R1) args: 0, res: 0, upd: 0;
       c25rZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25rT_info" {
     block_c25rT_info:
         const _c25rT;
         const 4;
         const 30;
 },
 _c25rY() //  [R1]
         { []
         }
     {offset
       c25rY: // global
           I64[Sp - 16] = block_c25s3_info;
           _s1XyC::P64 = P64[R1 + 15];
           _s1XyD::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1XyD::P64;
           P64[Sp] = _s1XyC::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u25sv; else goto c25s4;
       u25sv: // global
           call _c25s3(R1) args: 0, res: 0, upd: 0;
       c25s4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25rY_info" {
     block_c25rY_info:
         const _c25rY;
         const 260;
         const 30;
 },
 _c25s3() //  [R1]
         { []
         }
     {offset
       c25s3: // global
           I64[Sp] = block_c25s8_info;
           _s1XyF::I64 = I64[R1 + 7];
           R1 = P64[Sp + 48];
           I64[Sp + 48] = _s1XyF::I64;
           if (R1 & 7 != 0) goto u25sw; else goto c25s9;
       u25sw: // global
           call _c25s8(R1) args: 0, res: 0, upd: 0;
       c25s9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25s3_info" {
     block_c25s3_info:
         const _c25s3;
         const 1030;
         const 30;
 },
 _c25s8() //  [R1]
         { []
         }
     {offset
       c25s8: // global
           I64[Sp - 16] = block_c25sd_info;
           _s1XyI::P64 = P64[R1 + 15];
           _s1XyJ::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1XyJ::P64;
           P64[Sp] = _s1XyI::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u25sx; else goto c25sm;
       u25sx: // global
           call _c25sd(R1) args: 0, res: 0, upd: 0;
       c25sm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25s8_info" {
     block_c25s8_info:
         const _c25s8;
         const 3078;
         const 30;
 },
 _c25sd() //  [R1]
         { []
         }
     {offset
       c25sd: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 64];
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 48];
           R2 = I64[Sp + 56];
           P64[Sp + 40] = P64[Sp + 24];
           I64[Sp + 48] = I64[R1 + 7];
           P64[Sp + 56] = P64[Sp + 16];
           P64[Sp + 64] = P64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Arr.$w$s$fIx(,,)_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25sd_info" {
     block_c25sd_info:
         const _c25sd;
         const 12296;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.498556316 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$s$crangeSize_closure" {
     GHC.Arr.$fIx(,,)_$s$crangeSize_closure:
         const GHC.Arr.$fIx(,,)_$s$crangeSize_info;
 },
 GHC.Arr.$fIx(,,)_$s$crangeSize_entry() //  [R2]
         { []
         }
     {offset
       c25tg: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c25tz; else goto c25tA;
       c25tz: // global
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$s$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c25tA: // global
           I64[Sp - 8] = block_c25td_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25v9; else goto c25te;
       u25v9: // global
           call _c25td(R1) args: 0, res: 0, upd: 0;
       c25te: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$s$crangeSize_info" {
     GHC.Arr.$fIx(,,)_$s$crangeSize_info:
         const GHC.Arr.$fIx(,,)_$s$crangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c25td() //  [R1]
         { []
         }
     {offset
       c25td: // global
           I64[Sp - 8] = block_c25tj_info;
           _s1XyP::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XyP::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25v8; else goto c25tk;
       u25v8: // global
           call _c25tj(R1) args: 0, res: 0, upd: 0;
       c25tk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25td_info" {
     block_c25td_info:
         const _c25td;
         const 0;
         const 30;
 },
 _c25tj() //  [R1]
         { []
         }
     {offset
       c25tj: // global
           I64[Sp - 16] = block_c25to_info;
           _s1XyS::P64 = P64[R1 + 15];
           _s1XyT::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1XyT::P64;
           P64[Sp] = _s1XyS::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u25va; else goto c25tp;
       u25va: // global
           call _c25to(R1) args: 0, res: 0, upd: 0;
       c25tp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25tj_info" {
     block_c25tj_info:
         const _c25tj;
         const 1;
         const 30;
 },
 _c25to() //  [R1]
         { []
         }
     {offset
       c25to: // global
           I64[Sp] = block_c25tt_info;
           _s1XyV::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s1XyV::I64;
           if (R1 & 7 != 0) goto u25vb; else goto c25tu;
       u25vb: // global
           call _c25tt(R1) args: 0, res: 0, upd: 0;
       c25tu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25to_info" {
     block_c25to_info:
         const _c25to;
         const 3;
         const 30;
 },
 _c25tt() //  [R1]
         { []
         }
     {offset
       c25tt: // global
           I64[Sp - 16] = block_c25ty_info;
           _s1XyY::P64 = P64[R1 + 15];
           _s1XyZ::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1XyZ::P64;
           P64[Sp] = _s1XyY::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u25vc; else goto c25tF;
       u25vc: // global
           call _c25ty(R1) args: 0, res: 0, upd: 0;
       c25tF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25tt_info" {
     block_c25tt_info:
         const _c25tt;
         const 259;
         const 30;
 },
 _c25ty() //  [R1]
         { []
         }
     {offset
       c25ty: // global
           _s1Xz1::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(I64[Sp + 40],
                            _s1Xz1::I64)) goto u25v6; else goto c25tW;
       u25v6: // global
           Sp = Sp + 48;
           call _c25u6() args: 0, res: 0, upd: 0;
       c25tW: // global
           I64[Sp] = block_c25tQ_info;
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s1Xz1::I64;
           if (R1 & 7 != 0) goto u25vd; else goto c25tR;
       u25vd: // global
           call _c25tQ(R1) args: 0, res: 0, upd: 0;
       c25tR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25ty_info" {
     block_c25ty_info:
         const _c25ty;
         const 1029;
         const 30;
 },
 _c25tQ() //  [R1]
         { []
         }
     {offset
       c25tQ: // global
           I64[Sp] = block_c25tV_info;
           _s1Xz4::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1Xz4::I64;
           if (R1 & 7 != 0) goto u25vf; else goto c25tY;
       u25vf: // global
           call _c25tV(R1) args: 0, res: 0, upd: 0;
       c25tY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25tQ_info" {
     block_c25tQ_info:
         const _c25tQ;
         const 1541;
         const 30;
 },
 _c25tV() //  [R1]
         { []
         }
     {offset
       c25tV: // global
           _s1Xz6::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(I64[Sp + 16],
                            _s1Xz6::I64)) goto u25v7; else goto c25uf;
       u25v7: // global
           Sp = Sp + 48;
           call _c25u6() args: 0, res: 0, upd: 0;
       c25uf: // global
           I64[Sp] = block_c25u9_info;
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s1Xz6::I64;
           if (R1 & 7 != 0) goto u25vg; else goto c25ua;
       u25vg: // global
           call _c25u9(R1) args: 0, res: 0, upd: 0;
       c25ua: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25tV_info" {
     block_c25tV_info:
         const _c25tV;
         const 1669;
         const 30;
 },
 _c25u6() //  []
         { []
         }
     {offset
       c25u6: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c25u9() //  [R1]
         { []
         }
     {offset
       c25u9: // global
           I64[Sp] = block_c25ue_info;
           _s1Xz9::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1Xz9::I64;
           if (R1 & 7 != 0) goto u25vi; else goto c25uh;
       u25vi: // global
           call _c25ue(R1) args: 0, res: 0, upd: 0;
       c25uh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25u9_info" {
     block_c25u9_info:
         const _c25u9;
         const 1925;
         const 30;
 },
 _c25ue() //  [R1]
         { []
         }
     {offset
       c25ue: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c25un; else goto c25um;
       c25un: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c25um: // global
           _s1Xz9::I64 = I64[Sp + 8];
           _s1Xzb::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s1Xz9::I64,
                            _s1Xzb::I64)) goto c25ur; else goto c25v5;
       c25ur: // global
           Hp = Hp - 16;
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c25v5: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s1Xz4::I64 = I64[Sp + 16];
           _s1Xz6::I64 = I64[Sp + 24];
           I64[Hp] = _s1Xzb::I64 + ((_s1Xzb::I64 + (1 - _s1Xz9::I64)) * (_s1Xz6::I64 + ((_s1Xz6::I64 + (1 - _s1Xz4::I64)) * (I64[Sp + 32] - I64[Sp + 40]) - _s1Xz4::I64)) - _s1Xz9::I64) + 1;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25ue_info" {
     block_c25ue_info:
         const _c25ue;
         const 1989;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.522537906 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$s$cunsafeRangeSize_closure" {
     GHC.Arr.$fIx(,,)_$s$cunsafeRangeSize_closure:
         const GHC.Arr.$fIx(,,)_$s$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIx(,,)_$s$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c25wt: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c25xL; else goto c25xM;
       c25xL: // global
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$s$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c25xM: // global
           I64[Sp - 8] = block_c25wq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25xZ; else goto c25wr;
       u25xZ: // global
           call _c25wq(R1) args: 0, res: 0, upd: 0;
       c25wr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$s$cunsafeRangeSize_info" {
     GHC.Arr.$fIx(,,)_$s$cunsafeRangeSize_info:
         const GHC.Arr.$fIx(,,)_$s$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c25wq() //  [R1]
         { []
         }
     {offset
       c25wq: // global
           I64[Sp - 8] = block_c25ww_info;
           _s1Xzs::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Xzs::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25xY; else goto c25wx;
       u25xY: // global
           call _c25ww(R1) args: 0, res: 0, upd: 0;
       c25wx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25wq_info" {
     block_c25wq_info:
         const _c25wq;
         const 0;
         const 30;
 },
 _c25ww() //  [R1]
         { []
         }
     {offset
       c25ww: // global
           I64[Sp - 16] = block_c25wB_info;
           _s1Xzv::P64 = P64[R1 + 15];
           _s1Xzw::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1Xzw::P64;
           P64[Sp] = _s1Xzv::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u25y0; else goto c25wC;
       u25y0: // global
           call _c25wB(R1) args: 0, res: 0, upd: 0;
       c25wC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25ww_info" {
     block_c25ww_info:
         const _c25ww;
         const 1;
         const 30;
 },
 _c25wB() //  [R1]
         { []
         }
     {offset
       c25wB: // global
           I64[Sp] = block_c25wG_info;
           _s1Xzy::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1Xzy::I64;
           if (R1 & 7 != 0) goto u25y1; else goto c25wH;
       u25y1: // global
           call _c25wG(R1) args: 0, res: 0, upd: 0;
       c25wH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25wB_info" {
     block_c25wB_info:
         const _c25wB;
         const 3;
         const 30;
 },
 _c25wG() //  [R1]
         { []
         }
     {offset
       c25wG: // global
           I64[Sp] = block_c25wL_info;
           _s1XzA::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1XzA::I64;
           if (R1 & 7 != 0) goto u25y2; else goto c25wM;
       u25y2: // global
           call _c25wL(R1) args: 0, res: 0, upd: 0;
       c25wM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25wG_info" {
     block_c25wG_info:
         const _c25wG;
         const 131;
         const 30;
 },
 _c25wL() //  [R1]
         { []
         }
     {offset
       c25wL: // global
           I64[Sp] = block_c25wQ_info;
           _s1XzC::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s1XzC::I64;
           if (R1 & 7 != 0) goto u25y3; else goto c25wR;
       u25y3: // global
           call _c25wQ(R1) args: 0, res: 0, upd: 0;
       c25wR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25wL_info" {
     block_c25wL_info:
         const _c25wL;
         const 195;
         const 30;
 },
 _c25wQ() //  [R1]
         { []
         }
     {offset
       c25wQ: // global
           I64[Sp - 16] = block_c25wV_info;
           _s1XzF::P64 = P64[R1 + 15];
           _s1XzG::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1XzG::P64;
           P64[Sp] = _s1XzF::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u25y4; else goto c25wW;
       u25y4: // global
           call _c25wV(R1) args: 0, res: 0, upd: 0;
       c25wW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25wQ_info" {
     block_c25wQ_info:
         const _c25wQ;
         const 451;
         const 30;
 },
 _c25wV() //  [R1]
         { []
         }
     {offset
       c25wV: // global
           I64[Sp] = block_c25x0_info;
           _s1XzI::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1XzI::I64;
           if (R1 & 7 != 0) goto u25y5; else goto c25x1;
       u25y5: // global
           call _c25x0(R1) args: 0, res: 0, upd: 0;
       c25x1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25wV_info" {
     block_c25wV_info:
         const _c25wV;
         const 1797;
         const 30;
 },
 _c25x0() //  [R1]
         { []
         }
     {offset
       c25x0: // global
           I64[Sp] = block_c25x5_info;
           _s1XzK::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1XzK::I64;
           if (R1 & 7 != 0) goto u25y6; else goto c25x6;
       u25y6: // global
           call _c25x5(R1) args: 0, res: 0, upd: 0;
       c25x6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25x0_info" {
     block_c25x0_info:
         const _c25x0;
         const 1925;
         const 30;
 },
 _c25x5() //  [R1]
         { []
         }
     {offset
       c25x5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c25xX; else goto c25xW;
       c25xX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c25xW: // global
           _s1XzM::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s1XzA::I64 = I64[Sp + 24];
           _s1XzC::I64 = I64[Sp + 40];
           _s1XzK::I64 = I64[Sp + 8];
           I64[Hp] = _s1XzM::I64 + ((_s1XzM::I64 + (1 - _s1XzC::I64)) * (_s1XzK::I64 + ((_s1XzK::I64 + (1 - _s1XzA::I64)) * (I64[Sp + 16] - I64[Sp + 32]) - _s1XzA::I64)) - _s1XzC::I64) + 1;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25x5_info" {
     block_c25x5_info:
         const _c25x5;
         const 1989;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.546083545 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$cinRange_closure" {
     GHC.Arr.$fIx(,,)_$cinRange_closure:
         const GHC.Arr.$fIx(,,)_$cinRange_info;
 },
 GHC.Arr.$fIx(,,)_$cinRange_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c25zd: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c25zr; else goto c25zs;
       c25zr: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$cinRange_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c25zs: // global
           I64[Sp - 40] = block_c25za_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u25Ab; else goto c25zb;
       u25Ab: // global
           call _c25za(R1) args: 0, res: 0, upd: 0;
       c25zb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$cinRange_info" {
     GHC.Arr.$fIx(,,)_$cinRange_info:
         const GHC.Arr.$fIx(,,)_$cinRange_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c25za() //  [R1]
         { []
         }
     {offset
       c25za: // global
           I64[Sp - 8] = block_c25zg_info;
           _s1XA6::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XA6::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25Aa; else goto c25zh;
       u25Aa: // global
           call _c25zg(R1) args: 0, res: 0, upd: 0;
       c25zh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25za_info" {
     block_c25za_info:
         const _c25za;
         const 4;
         const 30;
 },
 _c25zg() //  [R1]
         { []
         }
     {offset
       c25zg: // global
           I64[Sp - 16] = block_c25zl_info;
           _s1XA8::P64 = P64[R1 + 7];
           _s1XA9::P64 = P64[R1 + 15];
           _s1XAa::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s1XAa::P64;
           P64[Sp] = _s1XA9::P64;
           P64[Sp + 8] = _s1XA8::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u25Ac; else goto c25zm;
       u25Ac: // global
           call _c25zl(R1) args: 0, res: 0, upd: 0;
       c25zm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25zg_info" {
     block_c25zg_info:
         const _c25zg;
         const 5;
         const 30;
 },
 _c25zl() //  [R1]
         { []
         }
     {offset
       c25zl: // global
           I64[Sp - 16] = block_c25zq_info;
           _s1XAc::P64 = P64[R1 + 7];
           _s1XAd::P64 = P64[R1 + 15];
           _s1XAe::P64 = P64[R1 + 23];
           R1 = P64[Sp + 56];
           P64[Sp - 8] = _s1XAe::P64;
           P64[Sp] = _s1XAd::P64;
           P64[Sp + 56] = _s1XAc::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u25Ad; else goto c25zw;
       u25Ad: // global
           call _c25zq(R1) args: 0, res: 0, upd: 0;
       c25zw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25zl_info" {
     block_c25zl_info:
         const _c25zl;
         const 7;
         const 30;
 },
 _c25zq() //  [R1]
         { []
         }
     {offset
       c25zq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c25zE; else goto c25zD;
       c25zE: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c25zD: // global
           _s1XAg::P64 = P64[R1 + 7];
           _s1XAh::P64 = P64[R1 + 15];
           _s1XAi::P64 = P64[R1 + 23];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 72];
           I64[Sp] = block_c25zB_info;
           R2 = P64[Sp + 48];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = _s1XAg::P64;
           P64[Sp + 48] = _s1XAi::P64;
           P64[Sp + 72] = _s1XAh::P64;
           Sp = Sp - 24;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25zq_info" {
     block_c25zq_info:
         const _c25zq;
         const 9;
         const 30;
 },
 _c25zB() //  [R1]
         { []
         }
     {offset
       c25zB: // global
           if (R1 & 7 == 1) goto u25A8; else goto c25zP;
       u25A8: // global
           Sp = Sp + 80;
           call _c25zY() args: 0, res: 0, upd: 0;
       c25zP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c25zS; else goto c25zR;
       c25zS: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c25zR: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 16];
           I64[Sp] = block_c25zO_info;
           R2 = P64[Sp + 56];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = P64[Sp + 72];
           Sp = Sp - 24;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25zB_info" {
     block_c25zB_info:
         const _c25zB;
         const 1033;
         const 30;
 },
 _c25zO() //  [R1]
         { []
         }
     {offset
       c25zO: // global
           if (R1 & 7 == 1) goto u25A9; else goto c25zZ;
       u25A9: // global
           Sp = Sp + 80;
           call _c25zY() args: 0, res: 0, upd: 0;
       c25zZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c25A4; else goto c25A3;
       c25A4: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c25A3: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           R2 = P64[Sp + 64];
           I64[Sp + 56] = stg_ap_pp_info;
           P64[Sp + 64] = Hp - 15;
           P64[Sp + 72] = P64[Sp + 48];
           Sp = Sp + 56;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25zO_info" {
     block_c25zO_info:
         const _c25zO;
         const 22153;
         const 30;
 },
 _c25zY() //  []
         { []
         }
     {offset
       c25zY: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.566436731 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$s$cunsafeIndex_closure" {
     GHC.Arr.$fIx(,,)_$s$cunsafeIndex_closure:
         const GHC.Arr.$fIx(,,)_$s$cunsafeIndex_info;
 },
 GHC.Arr.$fIx(,,)_$s$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c25B6: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c25CA; else goto c25CB;
       c25CA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$s$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c25CB: // global
           I64[Sp - 16] = block_c25B3_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u25CR; else goto c25B4;
       u25CR: // global
           call _c25B3(R1) args: 0, res: 0, upd: 0;
       c25B4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$s$cunsafeIndex_info" {
     GHC.Arr.$fIx(,,)_$s$cunsafeIndex_info:
         const GHC.Arr.$fIx(,,)_$s$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c25B3() //  [R1]
         { []
         }
     {offset
       c25B3: // global
           I64[Sp - 8] = block_c25B9_info;
           _s1XAs::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XAs::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25CQ; else goto c25Ba;
       u25CQ: // global
           call _c25B9(R1) args: 0, res: 0, upd: 0;
       c25Ba: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25B3_info" {
     block_c25B3_info:
         const _c25B3;
         const 1;
         const 30;
 },
 _c25B9() //  [R1]
         { []
         }
     {offset
       c25B9: // global
           I64[Sp - 16] = block_c25Be_info;
           _s1XAv::P64 = P64[R1 + 15];
           _s1XAw::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1XAw::P64;
           P64[Sp] = _s1XAv::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u25CS; else goto c25Bf;
       u25CS: // global
           call _c25Be(R1) args: 0, res: 0, upd: 0;
       c25Bf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25B9_info" {
     block_c25B9_info:
         const _c25B9;
         const 2;
         const 30;
 },
 _c25Be() //  [R1]
         { []
         }
     {offset
       c25Be: // global
           I64[Sp] = block_c25Bj_info;
           _s1XAy::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1XAy::I64;
           if (R1 & 7 != 0) goto u25CT; else goto c25Bk;
       u25CT: // global
           call _c25Bj(R1) args: 0, res: 0, upd: 0;
       c25Bk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Be_info" {
     block_c25Be_info:
         const _c25Be;
         const 4;
         const 30;
 },
 _c25Bj() //  [R1]
         { []
         }
     {offset
       c25Bj: // global
           I64[Sp] = block_c25Bo_info;
           _s1XAA::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1XAA::I64;
           if (R1 & 7 != 0) goto u25CU; else goto c25Bp;
       u25CU: // global
           call _c25Bo(R1) args: 0, res: 0, upd: 0;
       c25Bp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Bj_info" {
     block_c25Bj_info:
         const _c25Bj;
         const 132;
         const 30;
 },
 _c25Bo() //  [R1]
         { []
         }
     {offset
       c25Bo: // global
           I64[Sp] = block_c25Bt_info;
           _s1XAC::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s1XAC::I64;
           if (R1 & 7 != 0) goto u25CV; else goto c25Bu;
       u25CV: // global
           call _c25Bt(R1) args: 0, res: 0, upd: 0;
       c25Bu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Bo_info" {
     block_c25Bo_info:
         const _c25Bo;
         const 196;
         const 30;
 },
 _c25Bt() //  [R1]
         { []
         }
     {offset
       c25Bt: // global
           I64[Sp - 8] = block_c25By_info;
           _s1XAG::P64 = P64[R1 + 23];
           R1 = P64[R1 + 15];
           P64[Sp] = _s1XAG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25CW; else goto c25Bz;
       u25CW: // global
           call _c25By(R1) args: 0, res: 0, upd: 0;
       c25Bz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Bt_info" {
     block_c25Bt_info:
         const _c25Bt;
         const 452;
         const 30;
 },
 _c25By() //  [R1]
         { []
         }
     {offset
       c25By: // global
           I64[Sp] = block_c25BD_info;
           _s1XAI::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1XAI::I64;
           if (R1 & 7 != 0) goto u25CX; else goto c25BE;
       u25CX: // global
           call _c25BD(R1) args: 0, res: 0, upd: 0;
       c25BE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25By_info" {
     block_c25By_info:
         const _c25By;
         const 901;
         const 30;
 },
 _c25BD() //  [R1]
         { []
         }
     {offset
       c25BD: // global
           I64[Sp] = block_c25BI_info;
           _s1XAK::I64 = I64[R1 + 7];
           R1 = P64[Sp + 40];
           I64[Sp + 40] = _s1XAK::I64;
           if (R1 & 7 != 0) goto u25CY; else goto c25BJ;
       u25CY: // global
           call _c25BI(R1) args: 0, res: 0, upd: 0;
       c25BJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25BD_info" {
     block_c25BD_info:
         const _c25BD;
         const 965;
         const 30;
 },
 _c25BI() //  [R1]
         { []
         }
     {offset
       c25BI: // global
           I64[Sp - 16] = block_c25BN_info;
           _s1XAN::P64 = P64[R1 + 15];
           _s1XAO::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1XAO::P64;
           P64[Sp] = _s1XAN::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u25CZ; else goto c25BO;
       u25CZ: // global
           call _c25BN(R1) args: 0, res: 0, upd: 0;
       c25BO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25BI_info" {
     block_c25BI_info:
         const _c25BI;
         const 1989;
         const 30;
 },
 _c25BN() //  [R1]
         { []
         }
     {offset
       c25BN: // global
           I64[Sp] = block_c25BS_info;
           _s1XAQ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1XAQ::I64;
           if (R1 & 7 != 0) goto u25D0; else goto c25BT;
       u25D0: // global
           call _c25BS(R1) args: 0, res: 0, upd: 0;
       c25BT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25BN_info" {
     block_c25BN_info:
         const _c25BN;
         const 7943;
         const 30;
 },
 _c25BS() //  [R1]
         { []
         }
     {offset
       c25BS: // global
           I64[Sp] = block_c25BX_info;
           _s1XAS::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1XAS::I64;
           if (R1 & 7 != 0) goto u25D1; else goto c25BY;
       u25D1: // global
           call _c25BX(R1) args: 0, res: 0, upd: 0;
       c25BY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25BS_info" {
     block_c25BS_info:
         const _c25BS;
         const 8071;
         const 30;
 },
 _c25BX() //  [R1]
         { []
         }
     {offset
       c25BX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c25CP; else goto c25CO;
       c25CP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c25CO: // global
           _s1XAA::I64 = I64[Sp + 32];
           _s1XAC::I64 = I64[Sp + 48];
           _s1XB5::I64 = I64[R1 + 7] + ((I64[Sp + 56] + (1 - _s1XAC::I64)) * (I64[Sp + 8] + ((I64[Sp + 24] + (1 - _s1XAA::I64)) * (I64[Sp + 16] - I64[Sp + 40]) - _s1XAA::I64)) - _s1XAC::I64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1XB5::I64;
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25BX_info" {
     block_c25BX_info:
         const _c25BX;
         const 8135;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.594941822 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$cunsafeIndex_closure" {
     GHC.Arr.$fIx(,,)_$cunsafeIndex_closure:
         const GHC.Arr.$fIx(,,)_$cunsafeIndex_info;
 },
 GHC.Arr.$fIx(,,)_$cunsafeIndex_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c25Ei: // global
           if ((Sp + -112) < SpLim) (likely: False) goto c25Fa; else goto c25Fb;
       c25Fa: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$cunsafeIndex_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c25Fb: // global
           I64[Sp - 40] = block_c25Ef_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u25Fu; else goto c25Eg;
       u25Fu: // global
           call _c25Ef(R1) args: 0, res: 0, upd: 0;
       c25Eg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$cunsafeIndex_info" {
     GHC.Arr.$fIx(,,)_$cunsafeIndex_info:
         const GHC.Arr.$fIx(,,)_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c25Ef() //  [R1]
         { []
         }
     {offset
       c25Ef: // global
           I64[Sp - 8] = block_c25El_info;
           _s1XBd::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XBd::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25Ft; else goto c25Em;
       u25Ft: // global
           call _c25El(R1) args: 0, res: 0, upd: 0;
       c25Em: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Ef_info" {
     block_c25Ef_info:
         const _c25Ef;
         const 4;
         const 30;
 },
 _c25El() //  [R1]
         { []
         }
     {offset
       c25El: // global
           I64[Sp - 16] = block_c25Eq_info;
           _s1XBf::P64 = P64[R1 + 7];
           _s1XBg::P64 = P64[R1 + 15];
           _s1XBh::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s1XBh::P64;
           P64[Sp] = _s1XBg::P64;
           P64[Sp + 8] = _s1XBf::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u25Fv; else goto c25Er;
       u25Fv: // global
           call _c25Eq(R1) args: 0, res: 0, upd: 0;
       c25Er: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25El_info" {
     block_c25El_info:
         const _c25El;
         const 5;
         const 30;
 },
 _c25Eq() //  [R1]
         { []
         }
     {offset
       c25Eq: // global
           I64[Sp - 16] = block_c25Ev_info;
           _s1XBj::P64 = P64[R1 + 7];
           _s1XBk::P64 = P64[R1 + 15];
           _s1XBl::P64 = P64[R1 + 23];
           R1 = P64[Sp + 56];
           P64[Sp - 8] = _s1XBl::P64;
           P64[Sp] = _s1XBk::P64;
           P64[Sp + 56] = _s1XBj::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u25Fw; else goto c25Ew;
       u25Fw: // global
           call _c25Ev(R1) args: 0, res: 0, upd: 0;
       c25Ew: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Eq_info" {
     block_c25Eq_info:
         const _c25Eq;
         const 7;
         const 30;
 },
 _c25Ev() //  [R1]
         { []
         }
     {offset
       c25Ev: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c25Fh; else goto c25Fg;
       c25Fh: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c25Fg: // global
           _s1XBn::P64 = P64[R1 + 7];
           _s1XBo::P64 = P64[R1 + 15];
           _s1XBp::P64 = P64[R1 + 23];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_c25EB_info;
           R2 = P64[Sp + 64];
           I64[Sp - 32] = stg_ap_pp_info;
           _c25EA::P64 = Hp - 15;
           P64[Sp - 24] = _c25EA::P64;
           P64[Sp - 16] = _s1XBp::P64;
           P64[Sp] = _s1XBo::P64;
           P64[Sp + 8] = _s1XBn::P64;
           P64[Sp + 24] = _c25EA::P64;
           Sp = Sp - 32;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Ev_info" {
     block_c25Ev_info:
         const _c25Ev;
         const 9;
         const 30;
 },
 _c25EB() //  [R1]
         { []
         }
     {offset
       c25EB: // global
           I64[Sp] = block_c25EF_info;
           R2 = P64[Sp + 72];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 32];
           I64[Sp + 72] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25EB_info" {
     block_c25EB_info:
         const _c25EB;
         const 10;
         const 30;
 },
 _c25EF() //  [R1]
         { []
         }
     {offset
       c25EF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c25Fl; else goto c25Fk;
       c25Fl: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c25Fk: // global
           _s1XBv::I64 = I64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 24];
           _s1XBo::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c25EK_info;
           R2 = P64[Sp + 64];
           I64[Sp - 16] = stg_ap_pp_info;
           _c25EJ::P64 = Hp - 15;
           P64[Sp - 8] = _c25EJ::P64;
           P64[Sp] = _s1XBo::P64;
           I64[Sp + 32] = _s1XBv::I64;
           P64[Sp + 40] = _c25EJ::P64;
           Sp = Sp - 16;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25EF_info" {
     block_c25EF_info:
         const _c25EF;
         const 16906;
         const 30;
 },
 _c25EK() //  [R1]
         { []
         }
     {offset
       c25EK: // global
           I64[Sp] = block_c25EO_info;
           R2 = P64[Sp + 56];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 32];
           I64[Sp + 56] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25EK_info" {
     block_c25EK_info:
         const _c25EK;
         const 8585;
         const 30;
 },
 _c25EO() //  [R1]
         { []
         }
     {offset
       c25EO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c25Fp; else goto c25Fo;
       c25Fp: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c25Fo: // global
           _s1XBB::I64 = I64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 72];
           I64[Sp + 16] = block_c25ET_info;
           R2 = P64[Sp + 48];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Hp - 15;
           I64[Sp + 72] = _s1XBB::I64;
           Sp = Sp - 8;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25EO_info" {
     block_c25EO_info:
         const _c25EO;
         const 13193;
         const 30;
 },
 _c25ET() //  [R1]
         { []
         }
     {offset
       c25ET: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c25Fs; else goto c25Fr;
       c25Fs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c25Fr: // global
           _s1XBI::I64 = I64[Sp + 48] + I64[Sp + 8] * (I64[Sp + 40] + I64[Sp + 56] * I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1XBI::I64;
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25ET_info" {
     block_c25ET_info:
         const _c25ET;
         const 8135;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.615942215 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$cunsafeRangeSize_closure" {
     GHC.Arr.$fIx(,,)_$cunsafeRangeSize_closure:
         const GHC.Arr.$fIx(,,)_$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIx(,,)_$cunsafeRangeSize_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c25Gy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c25GJ; else goto c25GK;
       c25GJ: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c25GK: // global
           I64[Sp - 32] = block_c25Gv_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u25GP; else goto c25Gw;
       u25GP: // global
           call _c25Gv(R1) args: 0, res: 0, upd: 0;
       c25Gw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$cunsafeRangeSize_info" {
     GHC.Arr.$fIx(,,)_$cunsafeRangeSize_info:
         const GHC.Arr.$fIx(,,)_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c25Gv() //  [R1]
         { []
         }
     {offset
       c25Gv: // global
           _s1XBL::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c25GB_info;
           R6 = P64[R1 + 15];
           R5 = R1;
           R4 = _s1XBL::P64;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Arr.$fIx(,,)_$cunsafeIndex_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Gv_info" {
     block_c25Gv_info:
         const _c25Gv;
         const 3;
         const 30;
 },
 _c25GB() //  [R1]
         { []
         }
     {offset
       c25GB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c25GO; else goto c25GN;
       c25GO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c25GN: // global
           _s1XBS::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1XBS::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25GB_info" {
     block_c25GB_info:
         const _c25GB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.626010661 UTC

[section ""data" . GHC.Arr.$w$crangeSize1_closure" {
     GHC.Arr.$w$crangeSize1_closure:
         const GHC.Arr.$w$crangeSize1_info;
 },
 GHC.Arr.$w$crangeSize1_slow() //  [R1]
         { []
         }
     {offset
       c25H5: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$w$crangeSize1_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 40, res: 0, upd: 8;
     }
 },
 GHC.Arr.$w$crangeSize1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c25Hi: // global
           _s1XBX::P64 = R6;
           _s1XBW::P64 = R5;
           _s1XBV::P64 = R4;
           _s1XBU::P64 = R3;
           _s1XBT::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c25Hj; else goto c25Hk;
       c25Hk: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c25Hm; else goto c25Hl;
       c25Hm: // global
           HpAlloc = 88;
           goto c25Hj;
       c25Hj: // global
           R1 = GHC.Arr.$w$crangeSize1_closure;
           P64[Sp - 40] = _s1XBT::P64;
           P64[Sp - 32] = _s1XBU::P64;
           P64[Sp - 24] = _s1XBV::P64;
           P64[Sp - 16] = _s1XBW::P64;
           P64[Sp - 8] = _s1XBX::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c25Hl: // global
           I64[Hp - 80] = (,,)_con_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           I64[Hp - 48] = (,,)_con_info;
           P64[Hp - 40] = _s1XBW::P64;
           P64[Hp - 32] = _s1XBX::P64;
           P64[Hp - 24] = P64[Sp];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 47;
           _c25H9::P64 = Hp - 79;
           P64[Hp] = _c25H9::P64;
           I64[Sp - 16] = block_c25Hc_info;
           R6 = _c25H9::P64;
           _c25Hb::P64 = Hp - 15;
           R5 = _c25Hb::P64;
           R4 = _s1XBV::P64;
           R3 = _s1XBU::P64;
           R2 = _s1XBT::P64;
           P64[Sp - 8] = _s1XBV::P64;
           P64[Sp] = _s1XBU::P64;
           P64[Sp + 8] = _s1XBT::P64;
           P64[Sp + 16] = _c25Hb::P64;
           P64[Sp + 24] = _c25H9::P64;
           Sp = Sp - 16;
           call GHC.Arr.$fIx(,,)_$cinRange_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$crangeSize1_info" {
     GHC.Arr.$w$crangeSize1_info:
         const GHC.Arr.$w$crangeSize1_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const GHC.Arr.$w$crangeSize1_slow;
 },
 _c25Hc() //  [R1]
         { []
         }
     {offset
       c25Hc: // global
           if (R1 & 7 == 1) goto c25Hf; else goto c25Hg;
       c25Hf: // global
           R1 = 0;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c25Hg: // global
           _c25H9::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_c25Hs_info;
           R6 = _c25H9::P64;
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 24];
           Sp = Sp + 40;
           call GHC.Arr.$fIx(,,)_$cunsafeIndex_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Hc_info" {
     block_c25Hc_info:
         const _c25Hc;
         const 5;
         const 30;
 },
 _c25Hs() //  [R1]
         { []
         }
     {offset
       c25Hs: // global
           R1 = I64[R1 + 7] + 1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Hs_info" {
     block_c25Hs_info:
         const _c25Hs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.637487116 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$crangeSize_closure" {
     GHC.Arr.$fIx(,,)_$crangeSize_closure:
         const GHC.Arr.$fIx(,,)_$crangeSize_info;
 },
 GHC.Arr.$fIx(,,)_$crangeSize_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c25I3: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c25Il; else goto c25Im;
       c25Il: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$crangeSize_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c25Im: // global
           I64[Sp - 32] = block_c25I0_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u25Iu; else goto c25I1;
       u25Iu: // global
           call _c25I0(R1) args: 0, res: 0, upd: 0;
       c25I1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$crangeSize_info" {
     GHC.Arr.$fIx(,,)_$crangeSize_info:
         const GHC.Arr.$fIx(,,)_$crangeSize_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c25I0() //  [R1]
         { []
         }
     {offset
       c25I0: // global
           I64[Sp - 8] = block_c25I6_info;
           _s1XCe::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XCe::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25It; else goto c25I7;
       u25It: // global
           call _c25I6(R1) args: 0, res: 0, upd: 0;
       c25I7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25I0_info" {
     block_c25I0_info:
         const _c25I0;
         const 3;
         const 30;
 },
 _c25I6() //  [R1]
         { []
         }
     {offset
       c25I6: // global
           I64[Sp - 16] = block_c25Ib_info;
           _s1XCg::P64 = P64[R1 + 7];
           _s1XCh::P64 = P64[R1 + 15];
           _s1XCi::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s1XCi::P64;
           P64[Sp] = _s1XCh::P64;
           P64[Sp + 8] = _s1XCg::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u25Iv; else goto c25Ic;
       u25Iv: // global
           call _c25Ib(R1) args: 0, res: 0, upd: 0;
       c25Ic: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25I6_info" {
     block_c25I6_info:
         const _c25I6;
         const 4;
         const 30;
 },
 _c25Ib() //  [R1]
         { []
         }
     {offset
       c25Ib: // global
           _s1XCa::P64 = P64[Sp + 48];
           I64[Sp + 48] = block_c25Ig_info;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 24];
           R4 = _s1XCa::P64;
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           P64[Sp + 16] = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 7];
           P64[Sp + 32] = P64[R1 + 15];
           P64[Sp + 40] = P64[R1 + 23];
           Sp = Sp + 16;
           call GHC.Arr.$w$crangeSize1_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Ib_info" {
     block_c25Ib_info:
         const _c25Ib;
         const 6;
         const 30;
 },
 _c25Ig() //  [R1]
         { []
         }
     {offset
       c25Ig: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c25Is; else goto c25Ir;
       c25Is: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c25Ir: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Ig_info" {
     block_c25Ig_info:
         const _c25Ig;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.6560351 UTC

[section ""data" . GHC.Arr.$w$s$crange_closure" {
     GHC.Arr.$w$s$crange_closure:
         const GHC.Arr.$w$s$crange_info;
 },
 GHC.Arr.$w$s$crange_slow() //  [R1]
         { []
         }
     {offset
       c25IW: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$w$s$crange_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2,
                                          R1) args: 16, res: 0, upd: 8;
     }
 },
 n_s1XCB_entry() //  [R1]
         { []
         }
     {offset
       c25Jr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c25Js; else goto c25Jt;
       c25Js: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c25Jt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s1XCw::I64 = I64[R1 + 32];
           if (_s1XCw::I64 == I64[R1 + 24]) goto c25Jq; else goto c25Jp;
       c25Jq: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c25Jp: // global
           R2 = _s1XCw::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s1XCv_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . n_s1XCB_info" {
     n_s1XCB_info:
         const n_s1XCB_entry;
         const 8589934593;
         const 15;
 },
 n1_s1XCM_entry() //  [R1]
         { []
         }
     {offset
       c25JY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c25JZ; else goto c25K0;
       c25JZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c25K0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s1XCH::I64 = I64[R1 + 40];
           if (_s1XCH::I64 == I64[R1 + 32]) goto c25JX; else goto c25JW;
       c25JX: // global
           R1 = P64[R1 + 16] & (-8);
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c25JW: // global
           R2 = _s1XCH::I64 + 1;
           R1 = P64[R1 + 24];
           Sp = Sp - 16;
           call go1_s1XCG_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . n1_s1XCM_info" {
     n1_s1XCM_info:
         const n1_s1XCM_entry;
         const 8589934594;
         const 15;
 },
 sat_s1XCX_entry() //  [R1]
         { []
         }
     {offset
       c25Kl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c25Km; else goto c25Kn;
       c25Km: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c25Kn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s1XCS::I64 = I64[R1 + 40];
           if (_s1XCS::I64 == I64[R1 + 32]) goto c25Kk; else goto c25Kj;
       c25Kk: // global
           R1 = P64[R1 + 16] & (-8);
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c25Kj: // global
           R2 = _s1XCS::I64 + 1;
           R1 = P64[R1 + 24];
           Sp = Sp - 16;
           call go2_s1XCR_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XCX_info" {
     sat_s1XCX_info:
         const sat_s1XCX_entry;
         const 8589934594;
         const 15;
 },
 go2_s1XCR_entry() //  [R1, R2]
         { []
         }
     {offset
       c25Kt: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c25Kx; else goto c25Kw;
       c25Kx: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c25Kw: // global
           _s1XCF::P64 = P64[R1 + 7];
           _s1XCM::P64 = P64[R1 + 15];
           _s1XCQ::P64 = P64[R1 + 23];
           _s1XCL::I64 = I64[R1 + 31];
           I64[Hp - 112] = sat_s1XCX_info;
           P64[Hp - 96] = _s1XCM::P64;
           P64[Hp - 88] = R1;
           I64[Hp - 80] = _s1XCL::I64;
           I64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = (,,)_con_info;
           P64[Hp - 40] = _s1XCF::P64;
           P64[Hp - 32] = _s1XCQ::P64;
           P64[Hp - 24] = Hp - 63;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = Hp - 112;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go2_s1XCR_info" {
     go2_s1XCR_info:
         const go2_s1XCR_entry;
         const 4294967299;
         const 8;
         const 4294967300;
 },
 go1_s1XCG_entry() //  [R1, R2]
         { []
         }
     {offset
       c25Ky: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c25Kz; else goto c25KA;
       c25Kz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c25KA: // global
           I64[Sp - 56] = block_c25JF_info;
           _s1XCG::P64 = R1;
           _s1XCt::P64 = P64[R1 + 15];
           _s1XCB::P64 = P64[R1 + 23];
           _s1XCF::P64 = P64[R1 + 31];
           _s1XCA::I64 = I64[R1 + 39];
           R1 = P64[R1 + 7];
           P64[Sp - 48] = _s1XCt::P64;
           I64[Sp - 40] = _s1XCA::I64;
           P64[Sp - 32] = _s1XCB::P64;
           P64[Sp - 24] = _s1XCF::P64;
           P64[Sp - 16] = _s1XCG::P64;
           I64[Sp - 8] = R2;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u25KJ; else goto c25JG;
       u25KJ: // global
           call _c25JF(R1) args: 0, res: 0, upd: 0;
       c25JG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s1XCG_info" {
     go1_s1XCG_info:
         const go1_s1XCG_entry;
         const 4294967300;
         const 8;
         const 4294967300;
 },
 _c25JF() //  [R1]
         { []
         }
     {offset
       c25JF: // global
           I64[Sp] = block_c25JK_info;
           _s1XCJ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1XCJ::I64;
           if (R1 & 7 != 0) goto u25KI; else goto c25JL;
       u25KI: // global
           call _c25JK(R1) args: 0, res: 0, upd: 0;
       c25JL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25JF_info" {
     block_c25JF_info:
         const _c25JF;
         const 2182;
         const 30;
 },
 _c25JK() //  [R1]
         { []
         }
     {offset
       c25JK: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c25KE; else goto c25KD;
       c25KE: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c25KD: // global
           _s1XCL::I64 = I64[R1 + 7];
           I64[Hp - 96] = n1_s1XCM_info;
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 40];
           I64[Hp - 64] = I64[Sp + 16];
           _s1XCH::I64 = I64[Sp + 48];
           I64[Hp - 56] = _s1XCH::I64;
           _s1XCJ::I64 = I64[Sp + 8];
           _c25JP::P64 = Hp - 96;
           if (%MO_S_Le_W64(_s1XCJ::I64,
                            _s1XCL::I64)) goto c25KG; else goto c25KH;
       c25KG: // global
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s1XCH::I64;
           I64[Hp - 32] = go2_s1XCR_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = _c25JP::P64;
           P64[Hp - 8] = Hp - 47;
           I64[Hp] = _s1XCL::I64;
           R2 = _s1XCJ::I64;
           R1 = Hp - 31;
           Sp = Sp + 56;
           call go2_s1XCR_entry(R2, R1) args: 8, res: 0, upd: 8;
       c25KH: // global
           Hp = Hp - 56;
           R1 = _c25JP::P64 & (-8);
           Sp = Sp + 56;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25JK_info" {
     block_c25JK_info:
         const _c25JK;
         const 2246;
         const 30;
 },
 go_s1XCv_entry() //  [R1, R2]
         { []
         }
     {offset
       c25KK: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c25KL; else goto c25KM;
       c25KL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c25KM: // global
           I64[Sp - 56] = block_c25J8_info;
           _s1XCv::P64 = R1;
           _s1XCq::P64 = P64[R1 + 15];
           _s1XCs::P64 = P64[R1 + 23];
           _s1XCt::P64 = P64[R1 + 31];
           _s1XCr::I64 = I64[R1 + 39];
           R1 = P64[R1 + 7];
           P64[Sp - 48] = _s1XCq::P64;
           I64[Sp - 40] = _s1XCr::I64;
           P64[Sp - 32] = _s1XCs::P64;
           P64[Sp - 24] = _s1XCt::P64;
           P64[Sp - 16] = _s1XCv::P64;
           I64[Sp - 8] = R2;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u25KV; else goto c25J9;
       u25KV: // global
           call _c25J8(R1) args: 0, res: 0, upd: 0;
       c25J9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1XCv_info" {
     go_s1XCv_info:
         const go_s1XCv_entry;
         const 4294967300;
         const 8;
         const 4294967300;
 },
 _c25J8() //  [R1]
         { []
         }
     {offset
       c25J8: // global
           I64[Sp] = block_c25Jd_info;
           _s1XCy::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s1XCy::I64;
           if (R1 & 7 != 0) goto u25KU; else goto c25Je;
       u25KU: // global
           call _c25Jd(R1) args: 0, res: 0, upd: 0;
       c25Je: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25J8_info" {
     block_c25J8_info:
         const _c25J8;
         const 2182;
         const 30;
 },
 _c25Jd() //  [R1]
         { []
         }
     {offset
       c25Jd: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c25KQ; else goto c25KP;
       c25KQ: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c25KP: // global
           _s1XCA::I64 = I64[R1 + 7];
           I64[Hp - 96] = n_s1XCB_info;
           P64[Hp - 80] = P64[Sp + 40];
           I64[Hp - 72] = I64[Sp + 16];
           _s1XCw::I64 = I64[Sp + 48];
           I64[Hp - 64] = _s1XCw::I64;
           _s1XCy::I64 = I64[Sp + 24];
           _c25Ji::P64 = Hp - 96;
           if (%MO_S_Le_W64(_s1XCy::I64,
                            _s1XCA::I64)) goto c25KS; else goto c25KT;
       c25KS: // global
           I64[Hp - 56] = GHC.Types.I#_con_info;
           I64[Hp - 48] = _s1XCw::I64;
           I64[Hp - 40] = go1_s1XCG_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = _c25Ji::P64;
           P64[Hp - 8] = Hp - 55;
           I64[Hp] = _s1XCA::I64;
           R2 = _s1XCy::I64;
           R1 = Hp - 39;
           Sp = Sp + 56;
           call go1_s1XCG_entry(R2, R1) args: 8, res: 0, upd: 8;
       c25KT: // global
           Hp = Hp - 64;
           R1 = _c25Ji::P64 & (-8);
           Sp = Sp + 56;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Jd_info" {
     block_c25Jd_info:
         const _c25Jd;
         const 2438;
         const 30;
 },
 GHC.Arr.$w$s$crange_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c25KZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c25L3; else goto c25L2;
       c25L3: // global
           HpAlloc = 48;
           R1 = GHC.Arr.$w$s$crange_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c25L2: // global
           if (%MO_S_Le_W64(R2, R5)) goto c25KX; else goto c25KY;
       c25KX: // global
           I64[Hp - 40] = go_s1XCv_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           I64[Hp] = R5;
           R2 = R2;
           R1 = Hp - 39;
           Sp = Sp + 8;
           call go_s1XCv_entry(R2, R1) args: 8, res: 0, upd: 8;
       c25KY: // global
           Hp = Hp - 48;
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$s$crange_info" {
     GHC.Arr.$w$s$crange_info:
         const GHC.Arr.$w$s$crange_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 582;
         const GHC.Arr.$w$s$crange_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.682507757 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$s$crange_closure" {
     GHC.Arr.$fIx(,,)_$s$crange_closure:
         const GHC.Arr.$fIx(,,)_$s$crange_info;
 },
 GHC.Arr.$fIx(,,)_$s$crange_entry() //  [R2]
         { []
         }
     {offset
       c25Mj: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c25MC; else goto c25MD;
       c25MC: // global
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$s$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c25MD: // global
           I64[Sp - 8] = block_c25Mg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25MO; else goto c25Mh;
       u25MO: // global
           call _c25Mg(R1) args: 0, res: 0, upd: 0;
       c25Mh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$s$crange_info" {
     GHC.Arr.$fIx(,,)_$s$crange_info:
         const GHC.Arr.$fIx(,,)_$s$crange_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c25Mg() //  [R1]
         { []
         }
     {offset
       c25Mg: // global
           I64[Sp - 8] = block_c25Mm_info;
           _s1XD1::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XD1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25MN; else goto c25Mn;
       u25MN: // global
           call _c25Mm(R1) args: 0, res: 0, upd: 0;
       c25Mn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Mg_info" {
     block_c25Mg_info:
         const _c25Mg;
         const 0;
         const 30;
 },
 _c25Mm() //  [R1]
         { []
         }
     {offset
       c25Mm: // global
           I64[Sp - 16] = block_c25Mr_info;
           _s1XD4::P64 = P64[R1 + 15];
           _s1XD5::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1XD5::P64;
           P64[Sp] = _s1XD4::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u25MP; else goto c25Ms;
       u25MP: // global
           call _c25Mr(R1) args: 0, res: 0, upd: 0;
       c25Ms: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Mm_info" {
     block_c25Mm_info:
         const _c25Mm;
         const 1;
         const 30;
 },
 _c25Mr() //  [R1]
         { []
         }
     {offset
       c25Mr: // global
           I64[Sp] = block_c25Mw_info;
           _s1XD7::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s1XD7::I64;
           if (R1 & 7 != 0) goto u25MQ; else goto c25Mx;
       u25MQ: // global
           call _c25Mw(R1) args: 0, res: 0, upd: 0;
       c25Mx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Mr_info" {
     block_c25Mr_info:
         const _c25Mr;
         const 3;
         const 30;
 },
 _c25Mw() //  [R1]
         { []
         }
     {offset
       c25Mw: // global
           I64[Sp - 16] = block_c25MB_info;
           _s1XDa::P64 = P64[R1 + 15];
           _s1XDb::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1XDb::P64;
           P64[Sp] = _s1XDa::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u25MR; else goto c25MI;
       u25MR: // global
           call _c25MB(R1) args: 0, res: 0, upd: 0;
       c25MI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Mw_info" {
     block_c25Mw_info:
         const _c25Mw;
         const 259;
         const 30;
 },
 _c25MB() //  [R1]
         { []
         }
     {offset
       c25MB: // global
           R6 = P64[Sp + 16];
           R5 = I64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Arr.$w$s$crange_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25MB_info" {
     block_c25MB_info:
         const _c25MB;
         const 1029;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.702292333 UTC

[section ""data" . GHC.Arr.$w$crange_closure" {
     GHC.Arr.$w$crange_closure:
         const GHC.Arr.$w$crange_info;
 },
 GHC.Arr.$w$crange_slow() //  [R1]
         { []
         }
     {offset
       c25Nj: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$w$crange_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2,
                                        R1) args: 40, res: 0, upd: 8;
     }
 },
 lvl50_s1XDn_entry() //  [R1]
         { []
         }
     {offset
       c25Ns: // global
           _s1XDn::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c25Nt; else goto c25Nu;
       c25Nu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c25Nw; else goto c25Nv;
       c25Nw: // global
           HpAlloc = 24;
           goto c25Nt;
       c25Nt: // global
           R1 = _s1XDn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c25Nv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1XDn::P64;
           _s1XDg::P64 = P64[_s1XDn::P64 + 16];
           _s1XDj::P64 = P64[_s1XDn::P64 + 24];
           _s1XDm::P64 = P64[_s1XDn::P64 + 32];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s1XDj::P64;
           P64[Hp] = _s1XDm::P64;
           R2 = _s1XDg::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Arr.range_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl50_s1XDn_info" {
     lvl50_s1XDn_info:
         const lvl50_s1XDn_entry;
         const 3;
         const 15;
 },
 lvl51_s1XDp_entry() //  [R1]
         { []
         }
     {offset
       c25NC: // global
           _s1XDp::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c25ND; else goto c25NE;
       c25NE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c25NG; else goto c25NF;
       c25NG: // global
           HpAlloc = 24;
           goto c25ND;
       c25ND: // global
           R1 = _s1XDp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c25NF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1XDp::P64;
           _s1XDf::P64 = P64[_s1XDp::P64 + 16];
           _s1XDi::P64 = P64[_s1XDp::P64 + 24];
           _s1XDl::P64 = P64[_s1XDp::P64 + 32];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s1XDi::P64;
           P64[Hp] = _s1XDl::P64;
           R2 = _s1XDf::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Arr.range_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl51_s1XDp_info" {
     lvl51_s1XDp_info:
         const lvl51_s1XDp_entry;
         const 3;
         const 15;
 },
 go2_s1XDD_entry() //  [R1, R2]
         { []
         }
     {offset
       c25Oh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c25Oi; else goto c25Oj;
       c25Oi: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c25Oj: // global
           I64[Sp - 40] = block_c25Oa_info;
           _s1XDD::P64 = R1;
           _s1XDu::P64 = P64[R1 + 7];
           _s1XDA::P64 = P64[R1 + 15];
           _s1XDC::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _s1XDu::P64;
           P64[Sp - 24] = _s1XDA::P64;
           P64[Sp - 16] = _s1XDC::P64;
           P64[Sp - 8] = _s1XDD::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u25Ov; else goto c25Ob;
       u25Ov: // global
           call _c25Oa(R1) args: 0, res: 0, upd: 0;
       c25Ob: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go2_s1XDD_info" {
     go2_s1XDD_info:
         const go2_s1XDD_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c25Oa() //  [R1]
         { []
         }
     {offset
       c25Oa: // global
           if (R1 & 7 == 1) goto c25Oe; else goto c25Of;
       c25Oe: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c25Of: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c25Ou; else goto c25Ot;
       c25Ou: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c25Ot: // global
           _s1XDG::P64 = P64[R1 + 6];
           _s1XDH::P64 = P64[R1 + 14];
           I64[Hp - 80] = stg_ap_2_upd_info;
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s1XDH::P64;
           I64[Hp - 48] = (,,)_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s1XDG::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Oa_info" {
     block_c25Oa_info:
         const _c25Oa;
         const 4;
         const 30;
 },
 go1_s1XDx_entry() //  [R1, R2]
         { []
         }
     {offset
       c25OA: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c25OB; else goto c25OC;
       c25OB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c25OC: // global
           I64[Sp - 40] = block_c25NY_info;
           _s1XDx::P64 = R1;
           _s1XDn::P64 = P64[R1 + 7];
           _s1XDu::P64 = P64[R1 + 15];
           _s1XDw::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _s1XDn::P64;
           P64[Sp - 24] = _s1XDu::P64;
           P64[Sp - 16] = _s1XDw::P64;
           P64[Sp - 8] = _s1XDx::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u25OI; else goto c25NZ;
       u25OI: // global
           call _c25NY(R1) args: 0, res: 0, upd: 0;
       c25NZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s1XDx_info" {
     go1_s1XDx_info:
         const go1_s1XDx_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c25NY() //  [R1]
         { []
         }
     {offset
       c25NY: // global
           if (R1 & 7 == 1) goto c25Ox; else goto c25Oy;
       c25Ox: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c25Oy: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c25OH; else goto c25OG;
       c25OH: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c25OG: // global
           _s1XDA::P64 = P64[R1 + 6];
           _s1XDB::P64 = P64[R1 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _s1XDB::P64;
           I64[Hp - 24] = go2_s1XDD_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s1XDA::P64;
           P64[Hp] = Hp - 56;
           R2 = P64[Sp + 8];
           R1 = Hp - 23;
           Sp = Sp + 40;
           call go2_s1XDD_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25NY_info" {
     block_c25NY_info:
         const _c25NY;
         const 4;
         const 30;
 },
 go_s1XDr_entry() //  [R1, R2]
         { []
         }
     {offset
       c25ON: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c25OO; else goto c25OP;
       c25OO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c25OP: // global
           I64[Sp - 32] = block_c25NM_info;
           _s1XDr::P64 = R1;
           _s1XDn::P64 = P64[R1 + 7];
           _s1XDp::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s1XDn::P64;
           P64[Sp - 16] = _s1XDp::P64;
           P64[Sp - 8] = _s1XDr::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u25OV; else goto c25NN;
       u25OV: // global
           call _c25NM(R1) args: 0, res: 0, upd: 0;
       c25NN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1XDr_info" {
     go_s1XDr_info:
         const go_s1XDr_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c25NM() //  [R1]
         { []
         }
     {offset
       c25NM: // global
           if (R1 & 7 == 1) goto c25OK; else goto c25OL;
       c25OK: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c25OL: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c25OU; else goto c25OT;
       c25OU: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c25OT: // global
           _s1XDu::P64 = P64[R1 + 6];
           _s1XDv::P64 = P64[R1 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = _s1XDv::P64;
           I64[Hp - 24] = go1_s1XDx_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s1XDu::P64;
           P64[Hp] = Hp - 56;
           R2 = P64[Sp + 16];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call go1_s1XDx_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25NM_info" {
     block_c25NM_info:
         const _c25NM;
         const 3;
         const 30;
 },
 GHC.Arr.$w$crange_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c25OZ: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c25P3; else goto c25P2;
       c25P3: // global
           HpAlloc = 128;
           R1 = GHC.Arr.$w$crange_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c25P2: // global
           I64[Hp - 120] = lvl50_s1XDn_info;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = P64[Sp];
           P64[Hp - 88] = P64[Sp + 24];
           I64[Hp - 80] = lvl51_s1XDp_info;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R6;
           P64[Hp - 48] = P64[Sp + 16];
           I64[Hp - 40] = go_s1XDr_info;
           P64[Hp - 32] = Hp - 120;
           P64[Hp - 24] = Hp - 80;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R5;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 16] = block_c25OX_info;
           R2 = R2;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = Hp - 15;
           P64[Sp + 24] = Hp - 39;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$crange_info" {
     GHC.Arr.$w$crange_info:
         const GHC.Arr.$w$crange_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const GHC.Arr.$w$crange_slow;
 },
 _c25OX() //  [R1]
         { []
         }
     {offset
       c25OX: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1XDr_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25OX_info" {
     block_c25OX_info:
         const _c25OX;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.7278416 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$crange_closure" {
     GHC.Arr.$fIx(,,)_$crange_closure:
         const GHC.Arr.$fIx(,,)_$crange_info;
 },
 GHC.Arr.$fIx(,,)_$crange_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c25Qq: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c25Qz; else goto c25QA;
       c25Qz: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$crange_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c25QA: // global
           I64[Sp - 32] = block_c25Qn_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u25QJ; else goto c25Qo;
       u25QJ: // global
           call _c25Qn(R1) args: 0, res: 0, upd: 0;
       c25Qo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$crange_info" {
     GHC.Arr.$fIx(,,)_$crange_info:
         const GHC.Arr.$fIx(,,)_$crange_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c25Qn() //  [R1]
         { []
         }
     {offset
       c25Qn: // global
           I64[Sp - 8] = block_c25Qt_info;
           _s1XDS::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XDS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25QI; else goto c25Qu;
       u25QI: // global
           call _c25Qt(R1) args: 0, res: 0, upd: 0;
       c25Qu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Qn_info" {
     block_c25Qn_info:
         const _c25Qn;
         const 3;
         const 30;
 },
 _c25Qt() //  [R1]
         { []
         }
     {offset
       c25Qt: // global
           I64[Sp - 16] = block_c25Qy_info;
           _s1XDU::P64 = P64[R1 + 7];
           _s1XDV::P64 = P64[R1 + 15];
           _s1XDW::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s1XDW::P64;
           P64[Sp] = _s1XDV::P64;
           P64[Sp + 8] = _s1XDU::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u25QK; else goto c25QD;
       u25QK: // global
           call _c25Qy(R1) args: 0, res: 0, upd: 0;
       c25QD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Qt_info" {
     block_c25Qt_info:
         const _c25Qt;
         const 4;
         const 30;
 },
 _c25Qy() //  [R1]
         { []
         }
     {offset
       c25Qy: // global
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           P64[Sp + 24] = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 7];
           P64[Sp + 40] = P64[R1 + 15];
           P64[Sp + 48] = P64[R1 + 23];
           Sp = Sp + 24;
           call GHC.Arr.$w$crange_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Qy_info" {
     block_c25Qy_info:
         const _c25Qy;
         const 6;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.741042809 UTC

[section ""data" . GHC.Arr.$fIx(,)_$s$crangeSize_closure" {
     GHC.Arr.$fIx(,)_$s$crangeSize_closure:
         const GHC.Arr.$fIx(,)_$s$crangeSize_info;
 },
 GHC.Arr.$fIx(,)_$s$crangeSize_entry() //  [R2]
         { []
         }
     {offset
       c25Rd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c25Rw; else goto c25Rx;
       c25Rw: // global
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$s$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c25Rx: // global
           I64[Sp - 8] = block_c25Ra_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25Sw; else goto c25Rb;
       u25Sw: // global
           call _c25Ra(R1) args: 0, res: 0, upd: 0;
       c25Rb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$s$crangeSize_info" {
     GHC.Arr.$fIx(,)_$s$crangeSize_info:
         const GHC.Arr.$fIx(,)_$s$crangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c25Ra() //  [R1]
         { []
         }
     {offset
       c25Ra: // global
           I64[Sp - 8] = block_c25Rg_info;
           _s1XE4::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XE4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25Sv; else goto c25Rh;
       u25Sv: // global
           call _c25Rg(R1) args: 0, res: 0, upd: 0;
       c25Rh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Ra_info" {
     block_c25Ra_info:
         const _c25Ra;
         const 0;
         const 30;
 },
 _c25Rg() //  [R1]
         { []
         }
     {offset
       c25Rg: // global
           I64[Sp - 8] = block_c25Rl_info;
           _s1XE7::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XE7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25Sx; else goto c25Rm;
       u25Sx: // global
           call _c25Rl(R1) args: 0, res: 0, upd: 0;
       c25Rm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Rg_info" {
     block_c25Rg_info:
         const _c25Rg;
         const 1;
         const 30;
 },
 _c25Rl() //  [R1]
         { []
         }
     {offset
       c25Rl: // global
           I64[Sp] = block_c25Rq_info;
           _s1XE9::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1XE9::I64;
           if (R1 & 7 != 0) goto u25Sy; else goto c25Rr;
       u25Sy: // global
           call _c25Rq(R1) args: 0, res: 0, upd: 0;
       c25Rr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Rl_info" {
     block_c25Rl_info:
         const _c25Rl;
         const 2;
         const 30;
 },
 _c25Rq() //  [R1]
         { []
         }
     {offset
       c25Rq: // global
           I64[Sp - 8] = block_c25Rv_info;
           _s1XEc::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XEc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25Sz; else goto c25RC;
       u25Sz: // global
           call _c25Rv(R1) args: 0, res: 0, upd: 0;
       c25RC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Rq_info" {
     block_c25Rq_info:
         const _c25Rq;
         const 130;
         const 30;
 },
 _c25Rv() //  [R1]
         { []
         }
     {offset
       c25Rv: // global
           _s1XEe::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(I64[Sp + 24],
                            _s1XEe::I64)) goto c25RK; else goto c25RT;
       c25RK: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c25RT: // global
           I64[Sp] = block_c25RN_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1XEe::I64;
           if (R1 & 7 != 0) goto u25SA; else goto c25RO;
       u25SA: // global
           call _c25RN(R1) args: 0, res: 0, upd: 0;
       c25RO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Rv_info" {
     block_c25Rv_info:
         const _c25Rv;
         const 259;
         const 30;
 },
 _c25RN() //  [R1]
         { []
         }
     {offset
       c25RN: // global
           I64[Sp] = block_c25RS_info;
           _s1XEh::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1XEh::I64;
           if (R1 & 7 != 0) goto u25SB; else goto c25RV;
       u25SB: // global
           call _c25RS(R1) args: 0, res: 0, upd: 0;
       c25RV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25RN_info" {
     block_c25RN_info:
         const _c25RN;
         const 387;
         const 30;
 },
 _c25RS() //  [R1]
         { []
         }
     {offset
       c25RS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c25S1; else goto c25S0;
       c25S1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c25S0: // global
           _s1XEh::I64 = I64[Sp + 8];
           _s1XEj::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s1XEh::I64,
                            _s1XEj::I64)) goto c25S5; else goto c25Su;
       c25S5: // global
           Hp = Hp - 16;
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c25Su: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = (I64[Sp + 16] - I64[Sp + 24]) * (_s1XEj::I64 + (1 - _s1XEh::I64)) + (_s1XEj::I64 - _s1XEh::I64) + 1;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25RS_info" {
     block_c25RS_info:
         const _c25RS;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.761042492 UTC

[section ""data" . GHC.Arr.$w$crangeSize_closure" {
     GHC.Arr.$w$crangeSize_closure:
         const GHC.Arr.$w$crangeSize_info;
 },
 GHC.Arr.$w$crangeSize_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c25Ty: // global
           _s1XEw::P64 = R6;
           _s1XEv::P64 = R5;
           _s1XEu::P64 = R4;
           _s1XEt::P64 = R3;
           _s1XEs::P64 = R2;
           if ((Sp + -72) < SpLim) (likely: False) goto c25Tz; else goto c25TA;
       c25TA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c25TC; else goto c25TB;
       c25TC: // global
           HpAlloc = 24;
           goto c25Tz;
       c25Tz: // global
           R6 = _s1XEw::P64;
           R5 = _s1XEv::P64;
           R4 = _s1XEu::P64;
           R3 = _s1XEt::P64;
           R2 = _s1XEs::P64;
           R1 = GHC.Arr.$w$crangeSize_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c25TB: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s1XEu::P64;
           P64[Hp] = _s1XEw::P64;
           I64[Sp - 48] = block_c25Ts_info;
           R2 = _s1XEs::P64;
           I64[Sp - 72] = stg_ap_pp_info;
           _c25Tr::P64 = Hp - 15;
           P64[Sp - 64] = _c25Tr::P64;
           P64[Sp - 56] = _s1XEw::P64;
           P64[Sp - 40] = _c25Tr::P64;
           P64[Sp - 32] = _s1XEs::P64;
           P64[Sp - 24] = _s1XEt::P64;
           P64[Sp - 16] = _s1XEv::P64;
           P64[Sp - 8] = _s1XEw::P64;
           Sp = Sp - 72;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$crangeSize_info" {
     GHC.Arr.$w$crangeSize_info:
         const GHC.Arr.$w$crangeSize_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _c25Ts() //  [R1]
         { []
         }
     {offset
       c25Ts: // global
           if (R1 & 7 == 1) goto u25Uk; else goto c25Tw;
       u25Uk: // global
           Sp = Sp + 56;
           call _c25TS() args: 0, res: 0, upd: 0;
       c25Tw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c25TM; else goto c25TL;
       c25TM: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c25TL: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           _s1XEx::P64 = P64[Sp + 48];
           P64[Hp] = _s1XEx::P64;
           I64[Sp] = block_c25TJ_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_pp_info;
           _c25TI::P64 = Hp - 15;
           P64[Sp - 16] = _c25TI::P64;
           P64[Sp - 8] = _s1XEx::P64;
           P64[Sp + 32] = _c25TI::P64;
           Sp = Sp - 24;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Ts_info" {
     block_c25Ts_info:
         const _c25Ts;
         const 6;
         const 30;
 },
 _c25TJ() //  [R1]
         { []
         }
     {offset
       c25TJ: // global
           if (R1 & 7 == 1) goto u25Ul; else goto c25Uf;
       u25Ul: // global
           Sp = Sp + 56;
           call _c25TS() args: 0, res: 0, upd: 0;
       c25Uf: // global
           _s1XEs::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c25TV_info;
           R2 = _s1XEs::P64;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 40];
           Sp = Sp - 8;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25TJ_info" {
     block_c25TJ_info:
         const _c25TJ;
         const 6;
         const 30;
 },
 _c25TS() //  []
         { []
         }
     {offset
       c25TS: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c25TV() //  [R1]
         { []
         }
     {offset
       c25TV: // global
           I64[Sp] = block_c25TZ_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 16];
           I64[Sp + 24] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25TV_info" {
     block_c25TV_info:
         const _c25TV;
         const 260;
         const 30;
 },
 _c25TZ() //  [R1]
         { []
         }
     {offset
       c25TZ: // global
           _c25TI::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c25U3_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _c25TI::P64;
           P64[Sp + 8] = P64[Sp + 32];
           I64[Sp + 32] = I64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25TZ_info" {
     block_c25TZ_info:
         const _c25TZ;
         const 260;
         const 30;
 },
 _c25U3() //  [R1]
         { []
         }
     {offset
       c25U3: // global
           R1 = I64[Sp + 8] * I64[Sp + 16] + I64[R1 + 7] + 1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25U3_info" {
     block_c25U3_info:
         const _c25U3;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.776726687 UTC

[section ""data" . GHC.Arr.$fIx(,)_$crangeSize_closure" {
     GHC.Arr.$fIx(,)_$crangeSize_closure:
         const GHC.Arr.$fIx(,)_$crangeSize_info;
 },
 GHC.Arr.$fIx(,)_$crangeSize_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c25V8: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c25Vq; else goto c25Vr;
       c25Vq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$crangeSize_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c25Vr: // global
           I64[Sp - 24] = block_c25V5_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u25Vz; else goto c25V6;
       u25Vz: // global
           call _c25V5(R1) args: 0, res: 0, upd: 0;
       c25V6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$crangeSize_info" {
     GHC.Arr.$fIx(,)_$crangeSize_info:
         const GHC.Arr.$fIx(,)_$crangeSize_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c25V5() //  [R1]
         { []
         }
     {offset
       c25V5: // global
           I64[Sp - 8] = block_c25Vb_info;
           _s1XES::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XES::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25Vy; else goto c25Vc;
       u25Vy: // global
           call _c25Vb(R1) args: 0, res: 0, upd: 0;
       c25Vc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25V5_info" {
     block_c25V5_info:
         const _c25V5;
         const 2;
         const 30;
 },
 _c25Vb() //  [R1]
         { []
         }
     {offset
       c25Vb: // global
           I64[Sp - 8] = block_c25Vg_info;
           _s1XEU::P64 = P64[R1 + 7];
           _s1XEV::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1XEV::P64;
           P64[Sp + 8] = _s1XEU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25VA; else goto c25Vh;
       u25VA: // global
           call _c25Vg(R1) args: 0, res: 0, upd: 0;
       c25Vh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Vb_info" {
     block_c25Vb_info:
         const _c25Vb;
         const 3;
         const 30;
 },
 _c25Vg() //  [R1]
         { []
         }
     {offset
       c25Vg: // global
           _s1XEO::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_c25Vl_info;
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 16];
           R3 = _s1XEO::P64;
           R2 = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp + 24;
           call GHC.Arr.$w$crangeSize_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Vg_info" {
     block_c25Vg_info:
         const _c25Vg;
         const 4;
         const 30;
 },
 _c25Vl() //  [R1]
         { []
         }
     {offset
       c25Vl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c25Vx; else goto c25Vw;
       c25Vx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c25Vw: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Vl_info" {
     block_c25Vl_info:
         const _c25Vl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.790816872 UTC

[section ""data" . GHC.Arr.$fIx(,)_$s$cunsafeRangeSize_closure" {
     GHC.Arr.$fIx(,)_$s$cunsafeRangeSize_closure:
         const GHC.Arr.$fIx(,)_$s$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIx(,)_$s$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c25W4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c25WX; else goto c25WY;
       c25WX: // global
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$s$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c25WY: // global
           I64[Sp - 8] = block_c25W1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25X9; else goto c25W2;
       u25X9: // global
           call _c25W1(R1) args: 0, res: 0, upd: 0;
       c25W2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$s$cunsafeRangeSize_info" {
     GHC.Arr.$fIx(,)_$s$cunsafeRangeSize_info:
         const GHC.Arr.$fIx(,)_$s$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c25W1() //  [R1]
         { []
         }
     {offset
       c25W1: // global
           I64[Sp - 8] = block_c25W7_info;
           _s1XF3::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XF3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25X8; else goto c25W8;
       u25X8: // global
           call _c25W7(R1) args: 0, res: 0, upd: 0;
       c25W8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25W1_info" {
     block_c25W1_info:
         const _c25W1;
         const 0;
         const 30;
 },
 _c25W7() //  [R1]
         { []
         }
     {offset
       c25W7: // global
           I64[Sp - 8] = block_c25Wc_info;
           _s1XF6::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XF6::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25Xa; else goto c25Wd;
       u25Xa: // global
           call _c25Wc(R1) args: 0, res: 0, upd: 0;
       c25Wd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25W7_info" {
     block_c25W7_info:
         const _c25W7;
         const 1;
         const 30;
 },
 _c25Wc() //  [R1]
         { []
         }
     {offset
       c25Wc: // global
           I64[Sp] = block_c25Wh_info;
           _s1XF8::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1XF8::I64;
           if (R1 & 7 != 0) goto u25Xb; else goto c25Wi;
       u25Xb: // global
           call _c25Wh(R1) args: 0, res: 0, upd: 0;
       c25Wi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Wc_info" {
     block_c25Wc_info:
         const _c25Wc;
         const 2;
         const 30;
 },
 _c25Wh() //  [R1]
         { []
         }
     {offset
       c25Wh: // global
           I64[Sp] = block_c25Wm_info;
           _s1XFa::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1XFa::I64;
           if (R1 & 7 != 0) goto u25Xc; else goto c25Wn;
       u25Xc: // global
           call _c25Wm(R1) args: 0, res: 0, upd: 0;
       c25Wn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Wh_info" {
     block_c25Wh_info:
         const _c25Wh;
         const 66;
         const 30;
 },
 _c25Wm() //  [R1]
         { []
         }
     {offset
       c25Wm: // global
           I64[Sp - 8] = block_c25Wr_info;
           _s1XFd::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XFd::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25Xd; else goto c25Ws;
       u25Xd: // global
           call _c25Wr(R1) args: 0, res: 0, upd: 0;
       c25Ws: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Wm_info" {
     block_c25Wm_info:
         const _c25Wm;
         const 194;
         const 30;
 },
 _c25Wr() //  [R1]
         { []
         }
     {offset
       c25Wr: // global
           I64[Sp] = block_c25Ww_info;
           _s1XFf::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1XFf::I64;
           if (R1 & 7 != 0) goto u25Xe; else goto c25Wx;
       u25Xe: // global
           call _c25Ww(R1) args: 0, res: 0, upd: 0;
       c25Wx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Wr_info" {
     block_c25Wr_info:
         const _c25Wr;
         const 387;
         const 30;
 },
 _c25Ww() //  [R1]
         { []
         }
     {offset
       c25Ww: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c25X7; else goto c25X6;
       c25X7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c25X6: // global
           _s1XFh::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s1XFa::I64 = I64[Sp + 24];
           I64[Hp] = (I64[Sp + 8] - I64[Sp + 16]) * (_s1XFh::I64 + (1 - _s1XFa::I64)) + (_s1XFh::I64 - _s1XFa::I64) + 1;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Ww_info" {
     block_c25Ww_info:
         const _c25Ww;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.808212842 UTC

[section ""data" . GHC.Arr.$w$cunsafeRangeSize_closure" {
     GHC.Arr.$w$cunsafeRangeSize_closure:
         const GHC.Arr.$w$cunsafeRangeSize_info;
 },
 GHC.Arr.$w$cunsafeRangeSize_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c25Y5: // global
           _s1XFt::P64 = R6;
           _s1XFs::P64 = R5;
           _s1XFr::P64 = R4;
           _s1XFq::P64 = R3;
           _s1XFp::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto c25Yo; else goto c25Yp;
       c25Yp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c25Yr; else goto c25Yq;
       c25Yr: // global
           HpAlloc = 24;
           goto c25Yo;
       c25Yo: // global
           R6 = _s1XFt::P64;
           R5 = _s1XFs::P64;
           R4 = _s1XFr::P64;
           R3 = _s1XFq::P64;
           R2 = _s1XFp::P64;
           R1 = GHC.Arr.$w$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c25Yq: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s1XFr::P64;
           P64[Hp] = _s1XFt::P64;
           I64[Sp - 24] = block_c25Y3_info;
           R2 = _s1XFp::P64;
           I64[Sp - 48] = stg_ap_pp_info;
           P64[Sp - 40] = Hp - 15;
           P64[Sp - 32] = _s1XFt::P64;
           P64[Sp - 16] = _s1XFq::P64;
           P64[Sp - 8] = _s1XFs::P64;
           Sp = Sp - 48;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$cunsafeRangeSize_info" {
     GHC.Arr.$w$cunsafeRangeSize_info:
         const GHC.Arr.$w$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _c25Y3() //  [R1]
         { []
         }
     {offset
       c25Y3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c25Yu; else goto c25Yt;
       c25Yu: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c25Yt: // global
           _s1XFx::I64 = I64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp - 8] = block_c25Y9_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           _c25Y8::P64 = Hp - 15;
           P64[Sp - 16] = _c25Y8::P64;
           I64[Sp] = _s1XFx::I64;
           P64[Sp + 16] = _c25Y8::P64;
           Sp = Sp - 24;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Y3_info" {
     block_c25Y3_info:
         const _c25Y3;
         const 3;
         const 30;
 },
 _c25Y9() //  [R1]
         { []
         }
     {offset
       c25Y9: // global
           I64[Sp] = block_c25Yd_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[Sp + 32];
           I64[Sp + 32] = I64[R1 + 7];
           Sp = Sp - 24;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Y9_info" {
     block_c25Y9_info:
         const _c25Y9;
         const 68;
         const 30;
 },
 _c25Yd() //  [R1]
         { []
         }
     {offset
       c25Yd: // global
           R1 = I64[Sp + 8] * I64[Sp + 32] + I64[R1 + 7] + 1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Yd_info" {
     block_c25Yd_info:
         const _c25Yd;
         const 964;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.819668652 UTC

[section ""data" . GHC.Arr.$fIx(,)_$cunsafeRangeSize_closure" {
     GHC.Arr.$fIx(,)_$cunsafeRangeSize_closure:
         const GHC.Arr.$fIx(,)_$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIx(,)_$cunsafeRangeSize_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c25Z3: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c25Zl; else goto c25Zm;
       c25Zl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c25Zm: // global
           I64[Sp - 24] = block_c25Z0_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u25Zu; else goto c25Z1;
       u25Zu: // global
           call _c25Z0(R1) args: 0, res: 0, upd: 0;
       c25Z1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$cunsafeRangeSize_info" {
     GHC.Arr.$fIx(,)_$cunsafeRangeSize_info:
         const GHC.Arr.$fIx(,)_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c25Z0() //  [R1]
         { []
         }
     {offset
       c25Z0: // global
           I64[Sp - 8] = block_c25Z6_info;
           _s1XFL::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XFL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25Zt; else goto c25Z7;
       u25Zt: // global
           call _c25Z6(R1) args: 0, res: 0, upd: 0;
       c25Z7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Z0_info" {
     block_c25Z0_info:
         const _c25Z0;
         const 2;
         const 30;
 },
 _c25Z6() //  [R1]
         { []
         }
     {offset
       c25Z6: // global
           I64[Sp - 8] = block_c25Zb_info;
           _s1XFN::P64 = P64[R1 + 7];
           _s1XFO::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1XFO::P64;
           P64[Sp + 8] = _s1XFN::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u25Zv; else goto c25Zc;
       u25Zv: // global
           call _c25Zb(R1) args: 0, res: 0, upd: 0;
       c25Zc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Z6_info" {
     block_c25Z6_info:
         const _c25Z6;
         const 3;
         const 30;
 },
 _c25Zb() //  [R1]
         { []
         }
     {offset
       c25Zb: // global
           _s1XFH::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_c25Zg_info;
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 16];
           R3 = _s1XFH::P64;
           R2 = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp + 24;
           call GHC.Arr.$w$cunsafeRangeSize_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Zb_info" {
     block_c25Zb_info:
         const _c25Zb;
         const 4;
         const 30;
 },
 _c25Zg() //  [R1]
         { []
         }
     {offset
       c25Zg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c25Zs; else goto c25Zr;
       c25Zs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c25Zr: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c25Zg_info" {
     block_c25Zg_info:
         const _c25Zg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.830666602 UTC

[section ""cstring" . GHC.Arr.$tc'STArray3_bytes" {
     GHC.Arr.$tc'STArray3_bytes:
         I8[] [39,83,84,65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.832358957 UTC

[section ""data" . GHC.Arr.$tc'STArray2_closure" {
     GHC.Arr.$tc'STArray2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Arr.$tc'STArray3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.834372877 UTC

[section ""cstring" . GHC.Arr.$tcSTArray3_bytes" {
     GHC.Arr.$tcSTArray3_bytes:
         I8[] [83,84,65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.835991818 UTC

[section ""data" . GHC.Arr.$tcSTArray2_closure" {
     GHC.Arr.$tcSTArray2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Arr.$tcSTArray3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.838103019 UTC

[section ""cstring" . GHC.Arr.$tc'Array3_bytes" {
     GHC.Arr.$tc'Array3_bytes:
         I8[] [39,65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.840232274 UTC

[section ""data" . GHC.Arr.$tc'Array2_closure" {
     GHC.Arr.$tc'Array2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Arr.$tc'Array3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.842003628 UTC

[section ""cstring" . GHC.Arr.$tcArray2_bytes" {
     GHC.Arr.$tcArray2_bytes:
         I8[] [65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.843733529 UTC

[section ""data" . GHC.Arr.$tcArray1_closure" {
     GHC.Arr.$tcArray1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Arr.$tcArray2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.845851259 UTC

[section ""cstring" . GHC.Arr.$tc'C:Ix3_bytes" {
     GHC.Arr.$tc'C:Ix3_bytes:
         I8[] [39,67,58,73,120]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.847493204 UTC

[section ""data" . GHC.Arr.$tc'C:Ix2_closure" {
     GHC.Arr.$tc'C:Ix2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Arr.$tc'C:Ix3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.849580388 UTC

[section ""cstring" . GHC.Arr.$tcIx3_bytes" {
     GHC.Arr.$tcIx3_bytes:
         I8[] [73,120]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.851233163 UTC

[section ""data" . GHC.Arr.$tcIx2_closure" {
     GHC.Arr.$tcIx2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Arr.$tcIx3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.853207516 UTC

[section ""data" . $krep_r1Xux_closure" {
     $krep_r1Xux_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.855880454 UTC

[section ""data" . $krep1_r1Xuy_closure" {
     $krep1_r1Xuy_closure:
         const :_con_info;
         const $krep_r1Xux_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.85768422 UTC

[section ""data" . $krep2_r1Xuz_closure" {
     $krep2_r1Xuz_closure:
         const :_con_info;
         const $krep_r1Xux_closure+2;
         const $krep1_r1Xuy_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.859448711 UTC

[section ""data" . $krep3_r1XuA_closure" {
     $krep3_r1XuA_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep2_r1Xuz_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.861606958 UTC

[section ""data" . $krep4_r1XuB_closure" {
     $krep4_r1XuB_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep1_r1Xuy_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.863366627 UTC

[section ""data" . $krep5_r1XuC_closure" {
     $krep5_r1XuC_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r1XuA_closure+1;
         const $krep4_r1XuB_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.865423372 UTC

[section ""data" . $krep6_r1XuD_closure" {
     $krep6_r1XuD_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Classes.$tcOrd_closure;
         const $krep1_r1Xuy_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.867087337 UTC

[section ""data" . $krep7_r1XuE_closure" {
     $krep7_r1XuE_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.868901264 UTC

[section ""data" . $krep8_r1XuF_closure" {
     $krep8_r1XuF_closure:
         const :_con_info;
         const $krep7_r1XuE_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.871147308 UTC

[section ""data" . $krep9_r1XuG_closure" {
     $krep9_r1XuG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcArray#_closure;
         const $krep8_r1XuF_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.87281334 UTC

[section ""data" . $krep10_r1XuH_closure" {
     $krep10_r1XuH_closure:
         const :_con_info;
         const $krep_r1Xux_closure+2;
         const $krep8_r1XuF_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.874523078 UTC

[section ""data" . $krep11_r1XuI_closure" {
     $krep11_r1XuI_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.87654898 UTC

[section ""data" . $krep12_r1XuJ_closure" {
     $krep12_r1XuJ_closure:
         const :_con_info;
         const $krep11_r1XuI_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.878598905 UTC

[section ""data" . $krep13_r1XuK_closure" {
     $krep13_r1XuK_closure:
         const :_con_info;
         const $krep_r1Xux_closure+2;
         const $krep12_r1XuJ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.880637462 UTC

[section ""data" . $krep14_r1XuL_closure" {
     $krep14_r1XuL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutableArray#_closure;
         const $krep13_r1XuK_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.882454355 UTC

[section ""data" . $krep15_r1XuM_closure" {
     $krep15_r1XuM_closure:
         const :_con_info;
         const $krep7_r1XuE_closure+2;
         const $krep12_r1XuJ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.884295506 UTC

[section ""data" . $krep16_r1XuN_closure" {
     $krep16_r1XuN_closure:
         const :_con_info;
         const $krep_r1Xux_closure+2;
         const $krep15_r1XuM_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.886956382 UTC

[section ""data" . GHC.Arr.$tcSTArray1_closure" {
     GHC.Arr.$tcSTArray1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const GHC.Types.krep$*->*->*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.888711381 UTC

[section ""data" . $krep17_r1XuO_closure" {
     $krep17_r1XuO_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.890771434 UTC

[section ""data" . $krep18_r1XuP_closure" {
     $krep18_r1XuP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r1Xux_closure+2;
         const $krep17_r1XuO_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.892466733 UTC

[section ""data" . $krep19_r1XuQ_closure" {
     $krep19_r1XuQ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r1XuA_closure+1;
         const $krep18_r1XuP_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.894649669 UTC

[section ""data" . $krep20_r1XuR_closure" {
     $krep20_r1XuR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r1XuA_closure+1;
         const $krep17_r1XuO_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.896581587 UTC

[section ""data" . $krep21_r1XuS_closure" {
     $krep21_r1XuS_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.898419103 UTC

[section ""data" . GHC.Arr.$tcIx1_closure" {
     GHC.Arr.$tcIx1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep21_r1XuS_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.900524435 UTC

[section ""data" . $krep22_r1XuT_closure" {
     $krep22_r1XuT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcBool_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.902486743 UTC

[section ""data" . $krep23_r1XuU_closure" {
     $krep23_r1XuU_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r1Xux_closure+2;
         const $krep22_r1XuT_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.904293007 UTC

[section ""data" . $krep24_r1XuV_closure" {
     $krep24_r1XuV_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r1XuA_closure+1;
         const $krep23_r1XuU_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.906442777 UTC

[section ""cstring" . GHC.Arr.$trModule2_bytes" {
     GHC.Arr.$trModule2_bytes:
         I8[] [71,72,67,46,65,114,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.9082367 UTC

[section ""data" . GHC.Arr.$trModule1_closure" {
     GHC.Arr.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Arr.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.909995631 UTC

[section ""cstring" . GHC.Arr.$trModule4_bytes" {
     GHC.Arr.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.912034541 UTC

[section ""data" . GHC.Arr.$trModule3_closure" {
     GHC.Arr.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Arr.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.914097454 UTC

[section ""data" . GHC.Arr.$trModule_closure" {
     GHC.Arr.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Arr.$trModule3_closure+1;
         const GHC.Arr.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.91632633 UTC

[section ""data" . GHC.Arr.$tcIx_closure" {
     GHC.Arr.$tcIx_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Arr.$trModule_closure+1;
         const GHC.Arr.$tcIx2_closure+1;
         const GHC.Arr.$tcIx1_closure+4;
         const 13772232542578256353;
         const 6762827082053304105;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.918167829 UTC

[section ""data" . $krep25_r1XuW_closure" {
     $krep25_r1XuW_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Arr.$tcIx_closure+1;
         const $krep1_r1Xuy_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.919915372 UTC

[section ""data" . $krep26_r1XuX_closure" {
     $krep26_r1XuX_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep20_r1XuR_closure+4;
         const $krep25_r1XuW_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.922171432 UTC

[section ""data" . $krep27_r1XuY_closure" {
     $krep27_r1XuY_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep20_r1XuR_closure+4;
         const $krep26_r1XuX_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.923965053 UTC

[section ""data" . $krep28_r1XuZ_closure" {
     $krep28_r1XuZ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep24_r1XuV_closure+4;
         const $krep27_r1XuY_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.926171423 UTC

[section ""data" . $krep29_r1Xv0_closure" {
     $krep29_r1Xv0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep19_r1XuQ_closure+4;
         const $krep28_r1XuZ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.927914283 UTC

[section ""data" . $krep30_r1Xv1_closure" {
     $krep30_r1Xv1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep19_r1XuQ_closure+4;
         const $krep29_r1Xv0_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.930372688 UTC

[section ""data" . $krep31_r1Xv2_closure" {
     $krep31_r1Xv2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r1XuC_closure+4;
         const $krep30_r1Xv1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.932412171 UTC

[section ""data" . GHC.Arr.$tc'C:Ix1_closure" {
     GHC.Arr.$tc'C:Ix1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r1XuD_closure+1;
         const $krep31_r1Xv2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.934378432 UTC

[section ""data" . GHC.Arr.$tc'C:Ix_closure" {
     GHC.Arr.$tc'C:Ix_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Arr.$trModule_closure+1;
         const GHC.Arr.$tc'C:Ix2_closure+1;
         const GHC.Arr.$tc'C:Ix1_closure+4;
         const 9761537348743518432;
         const 9936836232101669382;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.936612815 UTC

[section ""data" . GHC.Arr.$tcArray_closure" {
     GHC.Arr.$tcArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Arr.$trModule_closure+1;
         const GHC.Arr.$tcArray1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 10788835947821237041;
         const 14169157647019398948;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.938545576 UTC

[section ""data" . $krep32_r1Xv3_closure" {
     $krep32_r1Xv3_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Arr.$tcArray_closure+1;
         const $krep10_r1XuH_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.94026389 UTC

[section ""data" . $krep33_r1Xv4_closure" {
     $krep33_r1Xv4_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r1XuG_closure+1;
         const $krep32_r1Xv3_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.942474436 UTC

[section ""data" . $krep34_r1Xv5_closure" {
     $krep34_r1Xv5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep17_r1XuO_closure+1;
         const $krep33_r1Xv4_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.944269694 UTC

[section ""data" . $krep35_r1Xv6_closure" {
     $krep35_r1Xv6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r1Xux_closure+2;
         const $krep34_r1Xv5_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.946452298 UTC

[section ""data" . GHC.Arr.$tc'Array1_closure" {
     GHC.Arr.$tc'Array1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r1Xux_closure+2;
         const $krep35_r1Xv6_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.948241587 UTC

[section ""data" . GHC.Arr.$tc'Array_closure" {
     GHC.Arr.$tc'Array_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Arr.$trModule_closure+1;
         const GHC.Arr.$tc'Array2_closure+1;
         const GHC.Arr.$tc'Array1_closure+4;
         const 3242711757478233377;
         const 12319810478938809147;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.950675843 UTC

[section ""data" . GHC.Arr.$tcSTArray_closure" {
     GHC.Arr.$tcSTArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Arr.$trModule_closure+1;
         const GHC.Arr.$tcSTArray2_closure+1;
         const GHC.Arr.$tcSTArray1_closure+4;
         const 345285176724813242;
         const 9254447028624491998;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.952843705 UTC

[section ""data" . $krep36_r1Xv7_closure" {
     $krep36_r1Xv7_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Arr.$tcSTArray_closure+1;
         const $krep16_r1XuN_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.9546377 UTC

[section ""data" . $krep37_r1Xv8_closure" {
     $krep37_r1Xv8_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1XuL_closure+1;
         const $krep36_r1Xv7_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.956656511 UTC

[section ""data" . $krep38_r1Xv9_closure" {
     $krep38_r1Xv9_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep17_r1XuO_closure+1;
         const $krep37_r1Xv8_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.958480726 UTC

[section ""data" . $krep39_r1Xva_closure" {
     $krep39_r1Xva_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r1XuE_closure+2;
         const $krep38_r1Xv9_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.960405198 UTC

[section ""data" . GHC.Arr.$tc'STArray1_closure" {
     GHC.Arr.$tc'STArray1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r1XuE_closure+2;
         const $krep39_r1Xva_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.962691143 UTC

[section ""data" . GHC.Arr.$tc'STArray_closure" {
     GHC.Arr.$tc'STArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Arr.$trModule_closure+1;
         const GHC.Arr.$tc'STArray2_closure+1;
         const GHC.Arr.$tc'STArray1_closure+4;
         const 804430358013947666;
         const 730912265096030373;
         const 3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.966479164 UTC

[section ""data" . unsafeThawSTArray1_r1Xvb_closure" {
     unsafeThawSTArray1_r1Xvb_closure:
         const unsafeThawSTArray1_r1Xvb_info;
 },
 unsafeThawSTArray1_r1Xvb_entry() //  [R2]
         { []
         }
     {offset
       c2615: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c261b; else goto c261c;
       c261b: // global
           R2 = R2;
           R1 = unsafeThawSTArray1_r1Xvb_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c261c: // global
           I64[Sp - 8] = block_c2612_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u261h; else goto c2613;
       u261h: // global
           call _c2612(R1) args: 0, res: 0, upd: 0;
       c2613: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . unsafeThawSTArray1_r1Xvb_info" {
     unsafeThawSTArray1_r1Xvb_info:
         const unsafeThawSTArray1_r1Xvb_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c2612() //  [R1]
         { []
         }
     {offset
       c2612: // global
           I64[Sp - 24] = block_c2618_info;
           _s1XFW::P64 = P64[R1 + 7];
           _s1XFX::P64 = P64[R1 + 15];
           _s1XFY::I64 = I64[R1 + 31];
           R1 = P64[R1 + 23];
           P64[Sp - 16] = _s1XFX::P64;
           I64[Sp - 8] = _s1XFY::I64;
           P64[Sp] = _s1XFW::P64;
           Sp = Sp - 24;
           call stg_unsafeThawArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2612_info" {
     block_c2612_info:
         const _c2612;
         const 0;
         const 30;
 },
 _c2618() //  [R1]
         { []
         }
     {offset
       c2618: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c261g; else goto c261f;
       c261g: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c261f: // global
           I64[Hp - 32] = GHC.Arr.STArray_con_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2618_info" {
     block_c2618_info:
         const _c2618;
         const 131;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.974310293 UTC

[section ""data" . GHC.Arr.unsafeThawSTArray_closure" {
     GHC.Arr.unsafeThawSTArray_closure:
         const GHC.Arr.unsafeThawSTArray_info;
 },
 GHC.Arr.unsafeThawSTArray_entry() //  [R2]
         { []
         }
     {offset
       c261C: // global
           R2 = R2;
           call unsafeThawSTArray1_r1Xvb_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeThawSTArray_info" {
     GHC.Arr.unsafeThawSTArray_info:
         const GHC.Arr.unsafeThawSTArray_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.978436291 UTC

[section ""data" . unsafeFreezeSTArray1_r1Xvc_closure" {
     unsafeFreezeSTArray1_r1Xvc_closure:
         const unsafeFreezeSTArray1_r1Xvc_info;
 },
 unsafeFreezeSTArray1_r1Xvc_entry() //  [R2]
         { []
         }
     {offset
       c261Q: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c261U; else goto c261V;
       c261U: // global
           R2 = R2;
           R1 = unsafeFreezeSTArray1_r1Xvc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c261V: // global
           I64[Sp - 8] = block_c261N_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u261Z; else goto c261O;
       u261Z: // global
           call _c261N(R1) args: 0, res: 0, upd: 0;
       c261O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . unsafeFreezeSTArray1_r1Xvc_info" {
     unsafeFreezeSTArray1_r1Xvc_info:
         const unsafeFreezeSTArray1_r1Xvc_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c261N() //  [R1]
         { []
         }
     {offset
       c261N: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c261Y; else goto c261X;
       c261Y: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c261X: // global
           _s1XG7::P64 = P64[R1 + 7];
           _s1XG8::P64 = P64[R1 + 15];
           _s1XGa::P64 = P64[R1 + 23];
           _s1XG9::I64 = I64[R1 + 31];
           I64[_s1XGa::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = _s1XG7::P64;
           P64[Hp - 16] = _s1XG8::P64;
           P64[Hp - 8] = _s1XGa::P64;
           I64[Hp] = _s1XG9::I64;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c261N_info" {
     block_c261N_info:
         const _c261N;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.984337544 UTC

[section ""data" . GHC.Arr.unsafeFreezeSTArray_closure" {
     GHC.Arr.unsafeFreezeSTArray_closure:
         const GHC.Arr.unsafeFreezeSTArray_info;
 },
 GHC.Arr.unsafeFreezeSTArray_entry() //  [R2]
         { []
         }
     {offset
       c262e: // global
           R2 = R2;
           call unsafeFreezeSTArray1_r1Xvc_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeFreezeSTArray_info" {
     GHC.Arr.unsafeFreezeSTArray_info:
         const GHC.Arr.unsafeFreezeSTArray_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.988836765 UTC

[section ""data" . unsafeWriteSTArray1_r1Xvd_closure" {
     unsafeWriteSTArray1_r1Xvd_closure:
         const unsafeWriteSTArray1_r1Xvd_info;
 },
 unsafeWriteSTArray1_r1Xvd_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c262s: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c262w; else goto c262x;
       c262w: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = unsafeWriteSTArray1_r1Xvd_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c262x: // global
           I64[Sp - 24] = block_c262p_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u262F; else goto c262q;
       u262F: // global
           call _c262p(R1) args: 0, res: 0, upd: 0;
       c262q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . unsafeWriteSTArray1_r1Xvd_info" {
     unsafeWriteSTArray1_r1Xvd_info:
         const unsafeWriteSTArray1_r1Xvd_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c262p() //  [R1]
         { []
         }
     {offset
       c262p: // global
           I64[Sp] = block_c262v_info;
           _s1XGn::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1XGn::P64;
           if (R1 & 7 != 0) goto u262E; else goto c262z;
       u262E: // global
           call _c262v(R1) args: 0, res: 0, upd: 0;
       c262z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c262p_info" {
     block_c262p_info:
         const _c262p;
         const 2;
         const 30;
 },
 _c262v() //  [R1]
         { []
         }
     {offset
       c262v: // global
           _s1XGh::P64 = P64[Sp + 16];
           _s1XGn::P64 = P64[Sp + 8];
           _s1XGp::I64 = I64[R1 + 7];
           call MO_WriteBarrier();
           P64[(_s1XGn::P64 + 24) + (_s1XGp::I64 << 3)] = _s1XGh::P64;
           I64[_s1XGn::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1XGn::P64 + 24) + ((I64[_s1XGn::P64 + 8] << 3) + (_s1XGp::I64 >> 7))] = 1 :: W8;
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c262v_info" {
     block_c262v_info:
         const _c262v;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:38.996787905 UTC

[section ""data" . GHC.Arr.unsafeWriteSTArray_closure" {
     GHC.Arr.unsafeWriteSTArray_closure:
         const GHC.Arr.unsafeWriteSTArray_info;
 },
 GHC.Arr.unsafeWriteSTArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2632: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call unsafeWriteSTArray1_r1Xvd_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeWriteSTArray_info" {
     GHC.Arr.unsafeWriteSTArray_info:
         const GHC.Arr.unsafeWriteSTArray_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.001166034 UTC

[section ""data" . unsafeReadSTArray1_r1Xve_closure" {
     unsafeReadSTArray1_r1Xve_closure:
         const unsafeReadSTArray1_r1Xve_info;
 },
 unsafeReadSTArray1_r1Xve_entry() //  [R2, R3]
         { []
         }
     {offset
       c263g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c263p; else goto c263q;
       c263p: // global
           R3 = R3;
           R2 = R2;
           R1 = unsafeReadSTArray1_r1Xve_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c263q: // global
           I64[Sp - 16] = block_c263d_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u263u; else goto c263e;
       u263u: // global
           call _c263d(R1) args: 0, res: 0, upd: 0;
       c263e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . unsafeReadSTArray1_r1Xve_info" {
     unsafeReadSTArray1_r1Xve_info:
         const unsafeReadSTArray1_r1Xve_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c263d() //  [R1]
         { []
         }
     {offset
       c263d: // global
           I64[Sp] = block_c263j_info;
           _s1XGy::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1XGy::P64;
           if (R1 & 7 != 0) goto u263t; else goto c263k;
       u263t: // global
           call _c263j(R1) args: 0, res: 0, upd: 0;
       c263k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c263d_info" {
     block_c263d_info:
         const _c263d;
         const 1;
         const 30;
 },
 _c263j() //  [R1]
         { []
         }
     {offset
       c263j: // global
           R1 = P64[P64[Sp + 8] + ((I64[R1 + 7] << 3) + 24)];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c263j_info" {
     block_c263j_info:
         const _c263j;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.00893888 UTC

[section ""data" . GHC.Arr.unsafeReadSTArray_closure" {
     GHC.Arr.unsafeReadSTArray_closure:
         const GHC.Arr.unsafeReadSTArray_info;
 },
 GHC.Arr.unsafeReadSTArray_entry() //  [R2, R3]
         { []
         }
     {offset
       c263P: // global
           R3 = R3;
           R2 = R2;
           call unsafeReadSTArray1_r1Xve_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeReadSTArray_info" {
     GHC.Arr.unsafeReadSTArray_info:
         const GHC.Arr.unsafeReadSTArray_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.013052821 UTC

[section ""data" . GHC.Arr.numElementsSTArray_closure" {
     GHC.Arr.numElementsSTArray_closure:
         const GHC.Arr.numElementsSTArray_info;
 },
 GHC.Arr.numElementsSTArray_entry() //  [R2]
         { []
         }
     {offset
       c2643: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2647; else goto c2648;
       c2647: // global
           R2 = R2;
           R1 = GHC.Arr.numElementsSTArray_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2648: // global
           I64[Sp - 8] = block_c2640_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u264c; else goto c2641;
       u264c: // global
           call _c2640(R1) args: 0, res: 0, upd: 0;
       c2641: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.numElementsSTArray_info" {
     GHC.Arr.numElementsSTArray_info:
         const GHC.Arr.numElementsSTArray_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2640() //  [R1]
         { []
         }
     {offset
       c2640: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c264b; else goto c264a;
       c264b: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c264a: // global
           _s1XGF::I64 = I64[R1 + 31];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1XGF::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2640_info" {
     block_c2640_info:
         const _c2640;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.020084616 UTC

[section ""data" . GHC.Arr.boundsSTArray_closure" {
     GHC.Arr.boundsSTArray_closure:
         const GHC.Arr.boundsSTArray_info;
 },
 GHC.Arr.boundsSTArray_entry() //  [R2]
         { []
         }
     {offset
       c264u: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c264y; else goto c264z;
       c264y: // global
           R2 = R2;
           R1 = GHC.Arr.boundsSTArray_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c264z: // global
           I64[Sp - 8] = block_c264r_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u264D; else goto c264s;
       u264D: // global
           call _c264r(R1) args: 0, res: 0, upd: 0;
       c264s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.boundsSTArray_info" {
     GHC.Arr.boundsSTArray_info:
         const GHC.Arr.boundsSTArray_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c264r() //  [R1]
         { []
         }
     {offset
       c264r: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c264C; else goto c264B;
       c264C: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c264B: // global
           _s1XGJ::P64 = P64[R1 + 7];
           _s1XGK::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s1XGJ::P64;
           P64[Hp] = _s1XGK::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c264r_info" {
     block_c264r_info:
         const _c264r;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.027806432 UTC

[section ""data" . GHC.Arr.adjust'_closure" {
     GHC.Arr.adjust'_closure:
         const GHC.Arr.adjust'_info;
 },
 GHC.Arr.adjust'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c264V: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c264Z; else goto c2650;
       c264Z: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.adjust'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2650: // global
           I64[Sp - 32] = block_c264S_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u265b; else goto c264T;
       u265b: // global
           call _c264S(R1) args: 0, res: 0, upd: 0;
       c264T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.adjust'_info" {
     GHC.Arr.adjust'_info:
         const GHC.Arr.adjust'_entry;
         const 0;
         const 14;
         const 21474836504;
 },
 _c264S() //  [R1]
         { []
         }
     {offset
       c264S: // global
           I64[Sp - 8] = block_c264Y_info;
           _s1XGU::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XGU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u265a; else goto c2652;
       u265a: // global
           call _c264Y(R1) args: 0, res: 0, upd: 0;
       c2652: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c264S_info" {
     block_c264S_info:
         const _c264S;
         const 3;
         const 30;
 },
 _c264Y() //  [R1]
         { []
         }
     {offset
       c264Y: // global
           _s1XGU::P64 = P64[Sp + 8];
           _s1XGW::I64 = I64[R1 + 7];
           _s1XGZ::P64 = P64[P64[Sp + 24] + ((_s1XGW::I64 << 3) + 24)];
           I64[Sp + 8] = block_c2656_info;
           R3 = _s1XGU::P64;
           R2 = _s1XGZ::P64;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1XGW::I64;
           Sp = Sp + 8;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c264Y_info" {
     block_c264Y_info:
         const _c264Y;
         const 4;
         const 30;
 },
 _c2656() //  [R1]
         { []
         }
     {offset
       c2656: // global
           _s1XGO::P64 = P64[Sp + 16];
           _s1XGQ::P64 = P64[Sp + 24];
           _s1XGW::I64 = I64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s1XGO::P64 + 24) + (_s1XGW::I64 << 3)] = R1;
           I64[_s1XGO::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1XGO::P64 + 24) + ((I64[_s1XGO::P64 + 8] << 3) + (_s1XGW::I64 >> 7))] = 1 :: W8;
           R1 = _s1XGQ::P64;
           Sp = Sp + 32;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2656_info" {
     block_c2656_info:
         const _c2656;
         const 67;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.044082568 UTC

[section ""data" . GHC.Arr.unsafeAccumArray'_closure" {
     GHC.Arr.unsafeAccumArray'_closure:
         const GHC.Arr.unsafeAccumArray'_info;
 },
 sat_s1XHm_entry() //  [R1]
         { []
         }
     {offset
       c2661: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2662; else goto c2663;
       c2662: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2663: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c265W_info;
           _s1XH9::P64 = P64[R1 + 24];
           _s1XHj::P64 = P64[R1 + 32];
           _s1XHb::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s1XH9::P64;
           I64[Sp - 32] = _s1XHb::I64;
           P64[Sp - 24] = _s1XHj::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XHm_info" {
     sat_s1XHm_info:
         const sat_s1XHm_entry;
         const 4294967299;
         const 15;
 },
 _c265W() //  [R1]
         { []
         }
     {offset
       c265W: // global
           I64[Sp] = block_c265Y_info;
           _s1XHk::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1XHk::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c265W_info" {
     block_c265W_info:
         const _c265W;
         const 131;
         const 30;
 },
 _c265Y() //  [R1]
         { []
         }
     {offset
       c265Y: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2667; else goto c2666;
       c2667: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2666: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c265Y_info" {
     block_c265Y_info:
         const _c265Y;
         const 131;
         const 30;
 },
 GHC.Arr.unsafeAccumArray'_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2668: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2669; else goto c266a;
       c2669: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.unsafeAccumArray'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c266a: // global
           I64[Sp - 40] = block_c265B_info;
           R1 = R4;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u266X; else goto c265C;
       u266X: // global
           call _c265B(R1) args: 0, res: 0, upd: 0;
       c265C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeAccumArray'_info" {
     GHC.Arr.unsafeAccumArray'_info:
         const GHC.Arr.unsafeAccumArray'_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c265B() //  [R1]
         { []
         }
     {offset
       c265B: // global
           I64[Sp - 8] = block_c265G_info;
           _s1XH8::P64 = P64[R1 + 7];
           _s1XH9::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _s1XH9::P64;
           P64[Sp + 24] = _s1XH8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u266V; else goto c265H;
       u266V: // global
           call _c265G(R1) args: 0, res: 0, upd: 0;
       c265H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c265B_info" {
     block_c265B_info:
         const _c265B;
         const 4;
         const 30;
 },
 _c265G() //  [R1]
         { []
         }
     {offset
       c265G: // global
           I64[Sp] = block_c265L_info;
           R2 = P64[Sp + 24];
           _s1XHb::I64 = I64[R1 + 7];
           R1 = _s1XHb::I64;
           I64[Sp + 24] = _s1XHb::I64;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c265G_info" {
     block_c265G_info:
         const _c265G;
         const 5;
         const 30;
 },
 _c265L() //  [R1]
         { []
         }
     {offset
       c265L: // global
           P64[Sp] = P64[Sp + 40];
           P64[Sp + 40] = R1;
           call _c266k() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c265L_info" {
     block_c265L_info:
         const _c265L;
         const 261;
         const 30;
 },
 _c266k() //  []
         { []
         }
     {offset
       c266k: // global
           _s1XHo::P64 = P64[Sp];
           I64[Sp] = block_c266m_info;
           R1 = _s1XHo::P64;
           if (R1 & 7 != 0) goto u266Y; else goto c266o;
       u266Y: // global
           call _c266m(R1) args: 0, res: 0, upd: 0;
       c266o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c266m() //  [R1]
         { []
         }
     {offset
       c266m: // global
           if (R1 & 7 == 1) goto u266Z; else goto c266E;
       u266Z: // global
           call _c265Q() args: 0, res: 0, upd: 0;
       c266E: // global
           I64[Sp - 8] = block_c266x_info;
           _s1XHs::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s1XHs::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2670; else goto c266y;
       u2670: // global
           call _c266x(R1) args: 0, res: 0, upd: 0;
       c266y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c266m_info" {
     block_c266m_info:
         const _c266m;
         const 261;
         const 30;
 },
 _c265Q() //  []
         { []
         }
     {offset
       c265Q: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c266g; else goto c266f;
       c266g: // global
           HpAlloc = 48;
           I64[Sp] = block_c265Q_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c266f: // global
           _s1XHe::P64 = P64[Sp + 40];
           I64[_s1XHe::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 40] = sat_s1XHm_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s1XHe::P64;
           I64[Hp] = I64[Sp + 24];
           R1 = (Hp + -40) & (-8);
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c265Q_info" {
     block_c265Q_info:
         const _c265Q;
         const 389;
         const 30;
 },
 _c266x() //  [R1]
         { []
         }
     {offset
       c266x: // global
           I64[Sp - 8] = block_c266C_info;
           _s1XHv::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XHv::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2671; else goto c266G;
       u2671: // global
           call _c266C(R1) args: 0, res: 0, upd: 0;
       c266G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c266x_info" {
     block_c266x_info:
         const _c266x;
         const 518;
         const 30;
 },
 _c266C() //  [R1]
         { []
         }
     {offset
       c266C: // global
           _s1XHx::I64 = I64[R1 + 7];
           _s1XHA::P64 = P64[P64[Sp + 56] + ((_s1XHx::I64 << 3) + 24)];
           I64[Sp] = block_c266K_info;
           R3 = P64[Sp + 8];
           R2 = _s1XHA::P64;
           R1 = P64[Sp + 32];
           I64[Sp + 8] = _s1XHx::I64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c266C_info" {
     block_c266C_info:
         const _c266C;
         const 1031;
         const 30;
 },
 _c266K() //  [R1]
         { []
         }
     {offset
       c266K: // global
           _s1XHe::P64 = P64[Sp + 56];
           _s1XHs::P64 = P64[Sp + 16];
           _s1XHx::I64 = I64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s1XHe::P64 + 24) + (_s1XHx::I64 << 3)] = R1;
           I64[_s1XHe::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1XHe::P64 + 24) + ((I64[_s1XHe::P64 + 8] << 3) + (_s1XHx::I64 >> 7))] = 1 :: W8;
           P64[Sp + 16] = _s1XHs::P64;
           Sp = Sp + 16;
           call _c266k() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c266K_info" {
     block_c266K_info:
         const _c266K;
         const 1095;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.074467435 UTC

[section ""data" . GHC.Arr.unsafeAccumArray_closure" {
     GHC.Arr.unsafeAccumArray_closure:
         const GHC.Arr.unsafeAccumArray_info;
 },
 sat_s1XI0_entry() //  [R1]
         { []
         }
     {offset
       c268x: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c268y; else goto c268z;
       c268y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c268z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c268s_info;
           _s1XHN::P64 = P64[R1 + 24];
           _s1XHX::P64 = P64[R1 + 32];
           _s1XHP::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s1XHN::P64;
           I64[Sp - 32] = _s1XHP::I64;
           P64[Sp - 24] = _s1XHX::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XI0_info" {
     sat_s1XI0_info:
         const sat_s1XI0_entry;
         const 4294967299;
         const 15;
 },
 _c268s() //  [R1]
         { []
         }
     {offset
       c268s: // global
           I64[Sp] = block_c268u_info;
           _s1XHY::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1XHY::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c268s_info" {
     block_c268s_info:
         const _c268s;
         const 131;
         const 30;
 },
 _c268u() //  [R1]
         { []
         }
     {offset
       c268u: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c268D; else goto c268C;
       c268D: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c268C: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c268u_info" {
     block_c268u_info:
         const _c268u;
         const 131;
         const 30;
 },
 GHC.Arr.unsafeAccumArray_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c268E: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c268F; else goto c268G;
       c268F: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.unsafeAccumArray_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c268G: // global
           I64[Sp - 40] = block_c2688_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u269s; else goto c2689;
       u269s: // global
           call _c2688(R1) args: 0, res: 0, upd: 0;
       c2689: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeAccumArray_info" {
     GHC.Arr.unsafeAccumArray_info:
         const GHC.Arr.unsafeAccumArray_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c2688() //  [R1]
         { []
         }
     {offset
       c2688: // global
           I64[Sp - 8] = block_c268d_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = R1;
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 24;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2688_info" {
     block_c2688_info:
         const _c2688;
         const 4;
         const 30;
 },
 _c268d() //  [R1]
         { []
         }
     {offset
       c268d: // global
           I64[Sp] = block_c268h_info;
           R2 = P64[Sp + 32];
           _s1XHP::I64 = I64[R1 + 7];
           R1 = _s1XHP::I64;
           I64[Sp + 32] = _s1XHP::I64;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c268d_info" {
     block_c268d_info:
         const _c268d;
         const 5;
         const 30;
 },
 _c268h() //  [R1]
         { []
         }
     {offset
       c268h: // global
           P64[Sp] = P64[Sp + 40];
           P64[Sp + 40] = R1;
           call _c268Q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c268h_info" {
     block_c268h_info:
         const _c268h;
         const 517;
         const 30;
 },
 _c268Q() //  []
         { []
         }
     {offset
       c268Q: // global
           _s1XI2::P64 = P64[Sp];
           I64[Sp] = block_c268S_info;
           R1 = _s1XI2::P64;
           if (R1 & 7 != 0) goto u269t; else goto c268U;
       u269t: // global
           call _c268S(R1) args: 0, res: 0, upd: 0;
       c268U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c268S() //  [R1]
         { []
         }
     {offset
       c268S: // global
           if (R1 & 7 == 1) goto u269u; else goto c269a;
       u269u: // global
           call _c268m() args: 0, res: 0, upd: 0;
       c269a: // global
           I64[Sp - 8] = block_c2693_info;
           _s1XI6::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s1XI6::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u269v; else goto c2694;
       u269v: // global
           call _c2693(R1) args: 0, res: 0, upd: 0;
       c2694: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c268S_info" {
     block_c268S_info:
         const _c268S;
         const 517;
         const 30;
 },
 _c268m() //  []
         { []
         }
     {offset
       c268m: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c268M; else goto c268L;
       c268M: // global
           HpAlloc = 48;
           I64[Sp] = block_c268m_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c268L: // global
           _s1XHS::P64 = P64[Sp + 40];
           I64[_s1XHS::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 40] = sat_s1XI0_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s1XHS::P64;
           I64[Hp] = I64[Sp + 32];
           R1 = (Hp + -40) & (-8);
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c268m_info" {
     block_c268m_info:
         const _c268m;
         const 773;
         const 30;
 },
 _c2693() //  [R1]
         { []
         }
     {offset
       c2693: // global
           I64[Sp - 8] = block_c2698_info;
           _s1XI9::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XI9::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u269w; else goto c269c;
       u269w: // global
           call _c2698(R1) args: 0, res: 0, upd: 0;
       c269c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2693_info" {
     block_c2693_info:
         const _c2693;
         const 1030;
         const 30;
 },
 _c2698() //  [R1]
         { []
         }
     {offset
       c2698: // global
           _s1XIb::I64 = I64[R1 + 7];
           _s1XIe::P64 = P64[P64[Sp + 56] + ((_s1XIb::I64 << 3) + 24)];
           I64[Sp] = block_c269g_info;
           R3 = P64[Sp + 8];
           R2 = _s1XIe::P64;
           R1 = P64[Sp + 40];
           I64[Sp + 8] = _s1XIb::I64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2698_info" {
     block_c2698_info:
         const _c2698;
         const 2055;
         const 30;
 },
 _c269g() //  [R1]
         { []
         }
     {offset
       c269g: // global
           _s1XHS::P64 = P64[Sp + 56];
           _s1XI6::P64 = P64[Sp + 16];
           _s1XIb::I64 = I64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s1XHS::P64 + 24) + (_s1XIb::I64 << 3)] = R1;
           I64[_s1XHS::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1XHS::P64 + 24) + ((I64[_s1XHS::P64 + 8] << 3) + (_s1XIb::I64 >> 7))] = 1 :: W8;
           P64[Sp + 16] = _s1XI6::P64;
           Sp = Sp + 16;
           call _c268Q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c269g_info" {
     block_c269g_info:
         const _c269g;
         const 2119;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.101114768 UTC

[section ""data" . GHC.Arr.adjust_closure" {
     GHC.Arr.adjust_closure:
         const GHC.Arr.adjust_info;
 },
 GHC.Arr.adjust_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c26aH: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c26aL; else goto c26aM;
       c26aL: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.adjust_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c26aM: // global
           I64[Sp - 32] = block_c26aE_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u26aX; else goto c26aF;
       u26aX: // global
           call _c26aE(R1) args: 0, res: 0, upd: 0;
       c26aF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.adjust_info" {
     GHC.Arr.adjust_info:
         const GHC.Arr.adjust_entry;
         const 0;
         const 14;
         const 21474836504;
 },
 _c26aE() //  [R1]
         { []
         }
     {offset
       c26aE: // global
           I64[Sp - 8] = block_c26aK_info;
           _s1XIr::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XIr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u26aW; else goto c26aO;
       u26aW: // global
           call _c26aK(R1) args: 0, res: 0, upd: 0;
       c26aO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26aE_info" {
     block_c26aE_info:
         const _c26aE;
         const 3;
         const 30;
 },
 _c26aK() //  [R1]
         { []
         }
     {offset
       c26aK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c26aU; else goto c26aT;
       c26aU: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c26aT: // global
           _s1XIl::P64 = P64[Sp + 24];
           _s1XIt::I64 = I64[R1 + 7];
           _s1XIw::P64 = P64[(_s1XIl::P64 + 24) + (_s1XIt::I64 << 3)];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s1XIw::P64;
           P64[Hp] = P64[Sp + 8];
           _s1XIn::P64 = P64[Sp + 32];
           call MO_WriteBarrier();
           P64[(_s1XIl::P64 + 24) + (_s1XIt::I64 << 3)] = Hp - 32;
           I64[_s1XIl::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1XIl::P64 + 24) + ((I64[_s1XIl::P64 + 8] << 3) + (_s1XIt::I64 >> 7))] = 1 :: W8;
           R1 = _s1XIn::P64;
           Sp = Sp + 40;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26aK_info" {
     block_c26aK_info:
         const _c26aK;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.110191948 UTC

[section ""data" . GHC.Arr.indices_closure" {
     GHC.Arr.indices_closure:
         const GHC.Arr.indices_info;
 },
 GHC.Arr.indices_entry() //  [R2, R3]
         { []
         }
     {offset
       c26bp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26bq; else goto c26br;
       c26bq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.indices_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c26br: // global
           I64[Sp - 16] = block_c26bm_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u26by; else goto c26bn;
       u26by: // global
           call _c26bm(R1) args: 0, res: 0, upd: 0;
       c26bn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.indices_info" {
     GHC.Arr.indices_info:
         const GHC.Arr.indices_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c26bm() //  [R1]
         { []
         }
     {offset
       c26bm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c26bw; else goto c26bv;
       c26bw: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c26bv: // global
           _s1XIC::P64 = P64[R1 + 7];
           _s1XID::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s1XIC::P64;
           P64[Hp] = _s1XID::P64;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = Hp - 15;
           call GHC.Arr.range_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26bm_info" {
     block_c26bm_info:
         const _c26bm;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.116825156 UTC

[section ""data" . GHC.Arr.numElements_closure" {
     GHC.Arr.numElements_closure:
         const GHC.Arr.numElements_info;
 },
 GHC.Arr.numElements_entry() //  [R2]
         { []
         }
     {offset
       c26bQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c26bU; else goto c26bV;
       c26bU: // global
           R2 = R2;
           R1 = GHC.Arr.numElements_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c26bV: // global
           I64[Sp - 8] = block_c26bN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u26bZ; else goto c26bO;
       u26bZ: // global
           call _c26bN(R1) args: 0, res: 0, upd: 0;
       c26bO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.numElements_info" {
     GHC.Arr.numElements_info:
         const GHC.Arr.numElements_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c26bN() //  [R1]
         { []
         }
     {offset
       c26bN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c26bY; else goto c26bX;
       c26bY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c26bX: // global
           _s1XIL::I64 = I64[R1 + 31];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1XIL::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26bN_info" {
     block_c26bN_info:
         const _c26bN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.123022717 UTC

[section ""data" . GHC.Arr.bounds_closure" {
     GHC.Arr.bounds_closure:
         const GHC.Arr.bounds_info;
 },
 GHC.Arr.bounds_entry() //  [R2]
         { []
         }
     {offset
       c26ch: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c26cl; else goto c26cm;
       c26cl: // global
           R2 = R2;
           R1 = GHC.Arr.bounds_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c26cm: // global
           I64[Sp - 8] = block_c26ce_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u26cq; else goto c26cf;
       u26cq: // global
           call _c26ce(R1) args: 0, res: 0, upd: 0;
       c26cf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.bounds_info" {
     GHC.Arr.bounds_info:
         const GHC.Arr.bounds_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c26ce() //  [R1]
         { []
         }
     {offset
       c26ce: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c26cp; else goto c26co;
       c26cp: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c26co: // global
           _s1XIP::P64 = P64[R1 + 7];
           _s1XIQ::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s1XIP::P64;
           P64[Hp] = _s1XIQ::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26ce_info" {
     block_c26ce_info:
         const _c26ce;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.135077949 UTC

[section ""data" . GHC.Arr.cmpIntArray_closure" {
     GHC.Arr.cmpIntArray_closure:
         const GHC.Arr.cmpIntArray_info;
 },
 sat_s1XJw_entry() //  [R1]
         { []
         }
     {offset
       c26dG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26dH; else goto c26dI;
       c26dH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26dI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XJw_info" {
     sat_s1XJw_info:
         const sat_s1XJw_entry;
         const 4294967297;
         const 19;
 },
 sat_s1XJt_entry() //  [R1]
         { []
         }
     {offset
       c26dN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26dO; else goto c26dP;
       c26dO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26dP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XJt_info" {
     sat_s1XJt_info:
         const sat_s1XJt_entry;
         const 4294967297;
         const 19;
 },
 GHC.Arr.cmpIntArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c26dQ: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c26dR; else goto c26dS;
       c26dR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.cmpIntArray_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c26dS: // global
           I64[Sp - 24] = block_c26cF_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u26fq; else goto c26cG;
       u26fq: // global
           call _c26cF(R1) args: 0, res: 0, upd: 0;
       c26cG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.cmpIntArray_info" {
     GHC.Arr.cmpIntArray_info:
         const GHC.Arr.cmpIntArray_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c26cF() //  [R1]
         { []
         }
     {offset
       c26cF: // global
           I64[Sp - 24] = block_c26cK_info;
           _s1XIX::P64 = P64[R1 + 7];
           _s1XJ0::P64 = P64[R1 + 23];
           _s1XIZ::I64 = I64[R1 + 31];
           R1 = P64[R1 + 15];
           I64[Sp - 16] = _s1XIZ::I64;
           P64[Sp - 8] = _s1XJ0::P64;
           P64[Sp] = _s1XIX::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u26fd; else goto c26cL;
       u26fd: // global
           call _c26cK(R1) args: 0, res: 0, upd: 0;
       c26cL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26cF_info" {
     block_c26cF_info:
         const _c26cF;
         const 2;
         const 30;
 },
 _c26cK() //  [R1]
         { []
         }
     {offset
       c26cK: // global
           I64[Sp] = block_c26cP_info;
           _s1XJ2::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s1XJ2::I64;
           if (R1 & 7 != 0) goto u26fe; else goto c26cQ;
       u26fe: // global
           call _c26cP(R1) args: 0, res: 0, upd: 0;
       c26cQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26cK_info" {
     block_c26cK_info:
         const _c26cK;
         const 69;
         const 30;
 },
 _c26cP() //  [R1]
         { []
         }
     {offset
       c26cP: // global
           I64[Sp] = block_c26cU_info;
           _s1XJ4::I64 = I64[R1 + 7];
           R1 = P64[Sp + 40];
           I64[Sp + 40] = _s1XJ4::I64;
           if (R1 & 7 != 0) goto u26ff; else goto c26cV;
       u26ff: // global
           call _c26cU(R1) args: 0, res: 0, upd: 0;
       c26cV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26cP_info" {
     block_c26cP_info:
         const _c26cP;
         const 325;
         const 30;
 },
 _c26cU() //  [R1]
         { []
         }
     {offset
       c26cU: // global
           I64[Sp - 24] = block_c26cZ_info;
           _s1XJ6::P64 = P64[R1 + 7];
           _s1XJ9::P64 = P64[R1 + 23];
           _s1XJ8::I64 = I64[R1 + 31];
           R1 = P64[R1 + 15];
           I64[Sp - 16] = _s1XJ8::I64;
           P64[Sp - 8] = _s1XJ9::P64;
           P64[Sp] = _s1XJ6::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u26fg; else goto c26d0;
       u26fg: // global
           call _c26cZ(R1) args: 0, res: 0, upd: 0;
       c26d0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26cU_info" {
     block_c26cU_info:
         const _c26cU;
         const 1349;
         const 30;
 },
 _c26cZ() //  [R1]
         { []
         }
     {offset
       c26cZ: // global
           I64[Sp] = block_c26d4_info;
           _s1XJb::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s1XJb::I64;
           if (R1 & 7 != 0) goto u26fh; else goto c26d5;
       u26fh: // global
           call _c26d4(R1) args: 0, res: 0, upd: 0;
       c26d5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26cZ_info" {
     block_c26cZ_info:
         const _c26cZ;
         const 10824;
         const 30;
 },
 _c26d4() //  [R1]
         { []
         }
     {offset
       c26d4: // global
           _s1XJ8::I64 = I64[Sp + 8];
           _s1XJe::I64 = I64[Sp + 32];
           if (_s1XJe::I64 != 0) goto c26eQ; else goto c26eW;
       c26eQ: // global
           if (_s1XJ8::I64 == 0) goto u26f0; else goto c26eN;
       u26f0: // global
           Sp = Sp + 72;
           goto u26fk;
       c26eN: // global
           _s1XJ4::I64 = I64[Sp + 64];
           _s1XJd::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1XJ4::I64,
                            _s1XJd::I64)) goto c26eK; else goto u26f1;
       c26eK: // global
           if (_s1XJ4::I64 == _s1XJd::I64) goto c26eI; else goto u26f2;
       c26eI: // global
           if (%MO_S_Gt_W64(_s1XJe::I64,
                            _s1XJ8::I64)) goto c26eG; else goto c26eH;
       c26eG: // global
           _s1XJj::I64 = _s1XJ8::I64;
           goto s1XJi;
       c26eH: // global
           _s1XJj::I64 = _s1XJe::I64;
           goto s1XJi;
       s1XJi: // global
           _s1XJk::I64 = _s1XJj::I64 - 1;
           if (%MO_S_Le_W64(0, _s1XJk::I64)) goto c26eB; else goto u26f3;
       c26eB: // global
           I64[Sp + 32] = 0;
           I64[Sp + 64] = _s1XJk::I64;
           Sp = Sp + 16;
           call _c26dA() args: 0, res: 0, upd: 0;
       u26f3: // global
           Sp = Sp + 24;
           call _s1XJl() args: 0, res: 0, upd: 0;
       u26f2: // global
           Sp = Sp + 72;
           goto u26fk;
       u26fk: // global
           call _c26eO() args: 0, res: 0, upd: 0;
       u26f1: // global
           Sp = Sp + 72;
           goto u26fo;
       c26eW: // global
           if (_s1XJ8::I64 == 0) goto u26fb; else goto u26fc;
       u26fb: // global
           Sp = Sp + 72;
           call _c26eV() args: 0, res: 0, upd: 0;
       u26fc: // global
           Sp = Sp + 72;
           goto u26fo;
       u26fo: // global
           call _c26eU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26d4_info" {
     block_c26d4_info:
         const _c26d4;
         const 11080;
         const 30;
 },
 _c26dA() //  []
         { []
         }
     {offset
       c26dA: // global
           Hp = Hp + 64;
           _s1XJq::I64 = I64[Sp + 16];
           if (Hp > HpLim) (likely: False) goto c26ek; else goto c26ej;
       c26ek: // global
           HpAlloc = 64;
           I64[Sp - 8] = block_c26dz_info;
           R1 = _s1XJq::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c26ej: // global
           I64[Hp - 56] = sat_s1XJw_info;
           P64[Hp - 40] = P64[Sp];
           I64[Hp - 32] = _s1XJq::I64;
           I64[Hp - 24] = sat_s1XJt_info;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = _s1XJq::I64;
           I64[Sp - 8] = block_c26eh_info;
           R2 = P64[Sp + 40];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = Hp - 56;
           Sp = Sp - 32;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c26dz() //  [R1]
         { []
         }
     {offset
       c26dz: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c26dA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26dz_info" {
     block_c26dz_info:
         const _c26dz;
         const 5511;
         const 30;
 },
 _c26eh() //  [R1]
         { []
         }
     {offset
       c26eh: // global
           if (R1 & 7 == 2) goto c26ez; else goto c26eq;
       c26ez: // global
           _s1XJq::I64 = I64[Sp + 24];
           if (_s1XJq::I64 == I64[Sp + 56]) goto u26f6; else goto c26ex;
       u26f6: // global
           Sp = Sp + 16;
           call _s1XJl() args: 0, res: 0, upd: 0;
       c26ex: // global
           I64[Sp + 24] = _s1XJq::I64 + 1;
           Sp = Sp + 8;
           call _c26dA() args: 0, res: 0, upd: 0;
       c26eq: // global
           R1 = R1 & (-8);
           Sp = Sp + 64;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26eh_info" {
     block_c26eh_info:
         const _c26eh;
         const 5511;
         const 30;
 },
 _s1XJl() //  []
         { []
         }
     {offset
       s1XJl: // global
           _s1XJ2::I64 = I64[Sp + 24];
           _s1XJb::I64 = I64[Sp];
           if (%MO_S_Ge_W64(_s1XJ2::I64,
                            _s1XJb::I64)) goto c26ef; else goto u26f8;
       c26ef: // global
           if (_s1XJ2::I64 == _s1XJb::I64) goto u26f9; else goto u26fa;
       u26f9: // global
           Sp = Sp + 48;
           call _c26eV() args: 0, res: 0, upd: 0;
       u26fa: // global
           Sp = Sp + 48;
           call _c26eO() args: 0, res: 0, upd: 0;
       u26f8: // global
           Sp = Sp + 48;
           call _c26eU() args: 0, res: 0, upd: 0;
     }
 },
 _c26eO() //  []
         { []
         }
     {offset
       c26eO: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c26eV() //  []
         { []
         }
     {offset
       c26eV: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c26eU() //  []
         { []
         }
     {offset
       c26eU: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.166984452 UTC

[section ""data" . GHC.Arr.$fEqArray_$c/=_closure" {
     GHC.Arr.$fEqArray_$c/=_closure:
         const GHC.Arr.$fEqArray_$c/=_info;
 },
 sat_s1XK4_entry() //  [R1]
         { []
         }
     {offset
       c26hr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26hs; else goto c26ht;
       c26hs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26ht: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XK4_info" {
     sat_s1XK4_info:
         const sat_s1XK4_entry;
         const 4294967297;
         const 19;
 },
 sat_s1XK1_entry() //  [R1]
         { []
         }
     {offset
       c26hy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26hz; else goto c26hA;
       c26hz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26hA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XK1_info" {
     sat_s1XK1_info:
         const sat_s1XK1_entry;
         const 4294967297;
         const 19;
 },
 GHC.Arr.$fEqArray_$c/=_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c26hB: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c26hC; else goto c26hD;
       c26hC: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fEqArray_$c/=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c26hD: // global
           I64[Sp - 32] = block_c26gI_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u26iL; else goto c26gJ;
       u26iL: // global
           call _c26gI(R1) args: 0, res: 0, upd: 0;
       c26gJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fEqArray_$c/=_info" {
     GHC.Arr.$fEqArray_$c/=_info:
         const GHC.Arr.$fEqArray_$c/=_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c26gI() //  [R1]
         { []
         }
     {offset
       c26gI: // global
           I64[Sp - 24] = block_c26gN_info;
           _s1XJH::P64 = P64[R1 + 7];
           _s1XJI::P64 = P64[R1 + 15];
           _s1XJK::P64 = P64[R1 + 23];
           _s1XJJ::I64 = I64[R1 + 31];
           R1 = P64[Sp + 24];
           I64[Sp - 16] = _s1XJJ::I64;
           P64[Sp - 8] = _s1XJK::P64;
           P64[Sp] = _s1XJI::P64;
           P64[Sp + 24] = _s1XJH::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u26iD; else goto c26gO;
       u26iD: // global
           call _c26gN(R1) args: 0, res: 0, upd: 0;
       c26gO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26gI_info" {
     block_c26gI_info:
         const _c26gI;
         const 3;
         const 30;
 },
 _c26gN() //  [R1]
         { []
         }
     {offset
       c26gN: // global
           _s1XJQ::I64 = I64[Sp + 8];
           if (_s1XJQ::I64 != 0) goto c26hH; else goto c26in;
       c26hH: // global
           I64[Sp - 16] = block_c26gU_info;
           R2 = P64[Sp + 32];
           I64[Sp - 8] = _s1XJQ::I64;
           P64[Sp] = P64[R1 + 23];
           P64[Sp + 8] = P64[R1 + 15];
           P64[Sp + 32] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 8, res: 8, upd: 8;
       c26in: // global
           if (I64[R1 + 31] == 0) goto u26iB; else goto u26iC;
       u26iB: // global
           Sp = Sp + 56;
           call _c26im() args: 0, res: 0, upd: 0;
       u26iC: // global
           Sp = Sp + 56;
           call _c26il() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26gN_info" {
     block_c26gN_info:
         const _c26gN;
         const 70;
         const 30;
 },
 _c26gU() //  [R1]
         { []
         }
     {offset
       c26gU: // global
           I64[Sp] = block_c26gY_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26gU_info" {
     block_c26gU_info:
         const _c26gU;
         const 72;
         const 30;
 },
 _c26gY() //  [R1]
         { []
         }
     {offset
       c26gY: // global
           I64[Sp] = block_c26h2_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 64];
           P64[Sp - 8] = P64[Sp + 48];
           P64[Sp + 64] = R1;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26gY_info" {
     block_c26gY_info:
         const _c26gY;
         const 72;
         const 30;
 },
 _c26h2() //  [R1]
         { []
         }
     {offset
       c26h2: // global
           if (R1 & 7 == 1) goto u26it; else goto c26hP;
       u26it: // global
           Sp = Sp + 72;
           call _c26il() args: 0, res: 0, upd: 0;
       c26hP: // global
           I64[Sp] = block_c26h7_info;
           R2 = P64[Sp + 64];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 40];
           P64[Sp - 8] = P64[Sp + 24];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26h2_info" {
     block_c26h2_info:
         const _c26h2;
         const 2120;
         const 30;
 },
 _c26h7() //  [R1]
         { []
         }
     {offset
       c26h7: // global
           if (R1 & 7 == 1) goto u26iu; else goto c26ih;
       u26iu: // global
           Sp = Sp + 72;
           call _c26il() args: 0, res: 0, upd: 0;
       c26ih: // global
           _s1XJV::I64 = I64[Sp + 8] - 1;
           if (%MO_S_Le_W64(0, _s1XJV::I64)) goto c26if; else goto u26iv;
       c26if: // global
           I64[Sp + 48] = 0;
           I64[Sp + 64] = _s1XJV::I64;
           Sp = Sp + 16;
           call _c26hl() args: 0, res: 0, upd: 0;
       u26iv: // global
           Sp = Sp + 72;
           call _c26im() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26h7_info" {
     block_c26h7_info:
         const _c26h7;
         const 11592;
         const 30;
 },
 _c26hl() //  []
         { []
         }
     {offset
       c26hl: // global
           Hp = Hp + 64;
           _s1XJY::I64 = I64[Sp + 32];
           if (Hp > HpLim) (likely: False) goto c26hY; else goto c26hX;
       c26hY: // global
           HpAlloc = 64;
           I64[Sp - 8] = block_c26hk_info;
           R1 = _s1XJY::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c26hX: // global
           I64[Hp - 56] = sat_s1XK4_info;
           P64[Hp - 40] = P64[Sp];
           I64[Hp - 32] = _s1XJY::I64;
           I64[Hp - 24] = sat_s1XK1_info;
           P64[Hp - 8] = P64[Sp + 16];
           I64[Hp] = _s1XJY::I64;
           I64[Sp - 8] = block_c26hV_info;
           R2 = P64[Sp + 40];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = Hp - 56;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c26hk() //  [R1]
         { []
         }
     {offset
       c26hk: // global
           I64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _c26hl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26hk_info" {
     block_c26hk_info:
         const _c26hk;
         const 5767;
         const 30;
 },
 _c26hV() //  [R1]
         { []
         }
     {offset
       c26hV: // global
           if (R1 & 7 == 1) goto u26iy; else goto c26id;
       u26iy: // global
           Sp = Sp + 64;
           call _c26il() args: 0, res: 0, upd: 0;
       c26id: // global
           _s1XJY::I64 = I64[Sp + 40];
           if (_s1XJY::I64 == I64[Sp + 56]) goto u26iz; else goto c26ib;
       u26iz: // global
           Sp = Sp + 64;
           call _c26im() args: 0, res: 0, upd: 0;
       c26ib: // global
           I64[Sp + 40] = _s1XJY::I64 + 1;
           Sp = Sp + 8;
           call _c26hl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26hV_info" {
     block_c26hV_info:
         const _c26hV;
         const 5767;
         const 30;
 },
 _c26im() //  []
         { []
         }
     {offset
       c26im: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c26il() //  []
         { []
         }
     {offset
       c26il: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.196493956 UTC

[section ""data" . GHC.Arr.eqArray_closure" {
     GHC.Arr.eqArray_closure:
         const GHC.Arr.eqArray_info;
 },
 sat_s1XKB_entry() //  [R1]
         { []
         }
     {offset
       c26kK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26kL; else goto c26kM;
       c26kL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26kM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XKB_info" {
     sat_s1XKB_info:
         const sat_s1XKB_entry;
         const 4294967297;
         const 19;
 },
 sat_s1XKy_entry() //  [R1]
         { []
         }
     {offset
       c26kR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26kS; else goto c26kT;
       c26kS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26kT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XKy_info" {
     sat_s1XKy_info:
         const sat_s1XKy_entry;
         const 4294967297;
         const 19;
 },
 GHC.Arr.eqArray_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c26kU: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c26kV; else goto c26kW;
       c26kV: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.eqArray_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c26kW: // global
           I64[Sp - 32] = block_c26k1_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u26m4; else goto c26k2;
       u26m4: // global
           call _c26k1(R1) args: 0, res: 0, upd: 0;
       c26k2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.eqArray_info" {
     GHC.Arr.eqArray_info:
         const GHC.Arr.eqArray_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c26k1() //  [R1]
         { []
         }
     {offset
       c26k1: // global
           I64[Sp - 24] = block_c26k6_info;
           _s1XKe::P64 = P64[R1 + 7];
           _s1XKf::P64 = P64[R1 + 15];
           _s1XKh::P64 = P64[R1 + 23];
           _s1XKg::I64 = I64[R1 + 31];
           R1 = P64[Sp + 24];
           I64[Sp - 16] = _s1XKg::I64;
           P64[Sp - 8] = _s1XKh::P64;
           P64[Sp] = _s1XKf::P64;
           P64[Sp + 24] = _s1XKe::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u26lW; else goto c26k7;
       u26lW: // global
           call _c26k6(R1) args: 0, res: 0, upd: 0;
       c26k7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26k1_info" {
     block_c26k1_info:
         const _c26k1;
         const 3;
         const 30;
 },
 _c26k6() //  [R1]
         { []
         }
     {offset
       c26k6: // global
           _s1XKn::I64 = I64[Sp + 8];
           if (_s1XKn::I64 != 0) goto c26l0; else goto c26lG;
       c26l0: // global
           I64[Sp - 16] = block_c26kd_info;
           R2 = P64[Sp + 32];
           I64[Sp - 8] = _s1XKn::I64;
           P64[Sp] = P64[R1 + 23];
           P64[Sp + 8] = P64[R1 + 15];
           P64[Sp + 32] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 8, res: 8, upd: 8;
       c26lG: // global
           if (I64[R1 + 31] == 0) goto u26lU; else goto u26lV;
       u26lU: // global
           Sp = Sp + 56;
           call _c26lF() args: 0, res: 0, upd: 0;
       u26lV: // global
           Sp = Sp + 56;
           call _c26lE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26k6_info" {
     block_c26k6_info:
         const _c26k6;
         const 70;
         const 30;
 },
 _c26kd() //  [R1]
         { []
         }
     {offset
       c26kd: // global
           I64[Sp] = block_c26kh_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26kd_info" {
     block_c26kd_info:
         const _c26kd;
         const 72;
         const 30;
 },
 _c26kh() //  [R1]
         { []
         }
     {offset
       c26kh: // global
           I64[Sp] = block_c26kl_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 64];
           P64[Sp - 8] = P64[Sp + 48];
           P64[Sp + 64] = R1;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26kh_info" {
     block_c26kh_info:
         const _c26kh;
         const 72;
         const 30;
 },
 _c26kl() //  [R1]
         { []
         }
     {offset
       c26kl: // global
           if (R1 & 7 == 1) goto u26lM; else goto c26l8;
       u26lM: // global
           Sp = Sp + 72;
           call _c26lE() args: 0, res: 0, upd: 0;
       c26l8: // global
           I64[Sp] = block_c26kq_info;
           R2 = P64[Sp + 64];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 40];
           P64[Sp - 8] = P64[Sp + 24];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26kl_info" {
     block_c26kl_info:
         const _c26kl;
         const 2120;
         const 30;
 },
 _c26kq() //  [R1]
         { []
         }
     {offset
       c26kq: // global
           if (R1 & 7 == 1) goto u26lN; else goto c26lA;
       u26lN: // global
           Sp = Sp + 72;
           call _c26lE() args: 0, res: 0, upd: 0;
       c26lA: // global
           _s1XKs::I64 = I64[Sp + 8] - 1;
           if (%MO_S_Le_W64(0, _s1XKs::I64)) goto c26ly; else goto u26lO;
       c26ly: // global
           I64[Sp + 48] = 0;
           I64[Sp + 64] = _s1XKs::I64;
           Sp = Sp + 16;
           call _c26kE() args: 0, res: 0, upd: 0;
       u26lO: // global
           Sp = Sp + 72;
           call _c26lF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26kq_info" {
     block_c26kq_info:
         const _c26kq;
         const 11592;
         const 30;
 },
 _c26kE() //  []
         { []
         }
     {offset
       c26kE: // global
           Hp = Hp + 64;
           _s1XKv::I64 = I64[Sp + 32];
           if (Hp > HpLim) (likely: False) goto c26lh; else goto c26lg;
       c26lh: // global
           HpAlloc = 64;
           I64[Sp - 8] = block_c26kD_info;
           R1 = _s1XKv::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c26lg: // global
           I64[Hp - 56] = sat_s1XKB_info;
           P64[Hp - 40] = P64[Sp];
           I64[Hp - 32] = _s1XKv::I64;
           I64[Hp - 24] = sat_s1XKy_info;
           P64[Hp - 8] = P64[Sp + 16];
           I64[Hp] = _s1XKv::I64;
           I64[Sp - 8] = block_c26le_info;
           R2 = P64[Sp + 40];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = Hp - 56;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c26kD() //  [R1]
         { []
         }
     {offset
       c26kD: // global
           I64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _c26kE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26kD_info" {
     block_c26kD_info:
         const _c26kD;
         const 5767;
         const 30;
 },
 _c26le() //  [R1]
         { []
         }
     {offset
       c26le: // global
           if (R1 & 7 == 1) goto u26lR; else goto c26lw;
       u26lR: // global
           Sp = Sp + 64;
           call _c26lE() args: 0, res: 0, upd: 0;
       c26lw: // global
           _s1XKv::I64 = I64[Sp + 40];
           if (_s1XKv::I64 == I64[Sp + 56]) goto u26lS; else goto c26lu;
       u26lS: // global
           Sp = Sp + 64;
           call _c26lF() args: 0, res: 0, upd: 0;
       c26lu: // global
           I64[Sp + 40] = _s1XKv::I64 + 1;
           Sp = Sp + 8;
           call _c26kE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26le_info" {
     block_c26le_info:
         const _c26le;
         const 5767;
         const 30;
 },
 _c26lF() //  []
         { []
         }
     {offset
       c26lF: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c26lE() //  []
         { []
         }
     {offset
       c26lE: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.222461254 UTC

[section ""data" . GHC.Arr.$fEqArray_closure" {
     GHC.Arr.$fEqArray_closure:
         const GHC.Arr.$fEqArray_info;
 },
 sat_s1XKJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c26np: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fEqArray_$c/=_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1XKJ_info" {
     sat_s1XKJ_info:
         const sat_s1XKJ_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_s1XKI_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c26nx: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.eqArray_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1XKI_info" {
     sat_s1XKI_info:
         const sat_s1XKI_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 GHC.Arr.$fEqArray_entry() //  [R2, R3]
         { []
         }
     {offset
       c26nB: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c26nF; else goto c26nE;
       c26nF: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fEqArray_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c26nE: // global
           I64[Hp - 64] = sat_s1XKJ_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_s1XKI_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 62;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fEqArray_info" {
     GHC.Arr.$fEqArray_info:
         const GHC.Arr.$fEqArray_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.230099536 UTC

[section ""data" . GHC.Arr.$fOrdArray_$cp1Ord_closure" {
     GHC.Arr.$fOrdArray_$cp1Ord_closure:
         const GHC.Arr.$fOrdArray_$cp1Ord_info;
 },
 sat_s1XKM_entry() //  [R1]
         { []
         }
     {offset
       c26o1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26o2; else goto c26o3;
       c26o2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26o3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XKM_info" {
     sat_s1XKM_info:
         const sat_s1XKM_entry;
         const 1;
         const 16;
 },
 GHC.Arr.$fOrdArray_$cp1Ord_entry() //  [R2, R3]
         { []
         }
     {offset
       c26o4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c26o8; else goto c26o7;
       c26o8: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fOrdArray_$cp1Ord_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c26o7: // global
           I64[Hp - 16] = sat_s1XKM_info;
           P64[Hp] = R3;
           R3 = Hp - 16;
           R2 = R2;
           call GHC.Arr.$fEqArray_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fOrdArray_$cp1Ord_info" {
     GHC.Arr.$fOrdArray_$cp1Ord_info:
         const GHC.Arr.$fOrdArray_$cp1Ord_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.23526093 UTC

[section ""cstring" . lvl4_r1Xvf_bytes" {
     lvl4_r1Xvf_bytes:
         I8[] [102,111,108,100,114,49,58,32,101,109,112,116,121,32,65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.238557508 UTC

[section ""data" . lvl5_r1Xvg_closure" {
     lvl5_r1Xvg_closure:
         const lvl5_r1Xvg_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r1Xvg_entry() //  [R1]
         { []
         }
     {offset
       c26oq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c26or; else goto c26os;
       c26or: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26os: // global
           (_c26ol::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c26ol::I64 == 0) goto c26on; else goto c26om;
       c26on: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c26om: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c26ol::I64;
           I64[Sp - 24] = block_c26oo_info;
           R2 = lvl4_r1Xvf_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_r1Xvg_info" {
     lvl5_r1Xvg_info:
         const lvl5_r1Xvg_entry;
         const 0;
         const 4294967317;
         const S1YCH_srt+8;
 },
 _c26oo() //  [R1]
         { []
         }
     {offset
       c26oo: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c26oo_info" {
     block_c26oo_info:
         const _c26oo;
         const 0;
         const 4294967326;
         const S1YCH_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.2460446 UTC

[section ""data" . GHC.Arr.$wfoldr1Elems_closure" {
     GHC.Arr.$wfoldr1Elems_closure:
         const GHC.Arr.$wfoldr1Elems_info;
         const 0;
 },
 sat_s1XL0_entry() //  [R1]
         { []
         }
     {offset
       c26p3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26p4; else goto c26p5;
       c26p4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26p5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wgo_s1XKT_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XL0_info" {
     sat_s1XL0_info:
         const sat_s1XL0_entry;
         const 4294967297;
         const 19;
 },
 sat_s1XKY_entry() //  [R1]
         { []
         }
     {offset
       c26pa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26pb; else goto c26pc;
       c26pb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26pc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XKY_info" {
     sat_s1XKY_info:
         const sat_s1XKY_entry;
         const 4294967297;
         const 19;
 },
 $wgo_s1XKT_entry() //  [R1, R2]
         { []
         }
     {offset
       c26pg: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c26pk; else goto c26pj;
       c26pk: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c26pj: // global
           _s1XKQ::P64 = P64[R1 + 15];
           if (R2 == I64[R1 + 23]) goto c26pf; else goto c26pe;
       c26pf: // global
           Hp = Hp - 64;
           R1 = P64[(_s1XKQ::P64 + 24) + (R2 << 3)];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c26pe: // global
           _s1XKO::P64 = P64[R1 + 7];
           I64[Hp - 56] = sat_s1XL0_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s1XKY_info;
           P64[Hp - 8] = _s1XKQ::P64;
           I64[Hp] = R2;
           R3 = Hp - 56;
           R2 = Hp - 24;
           R1 = _s1XKO::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s1XKT_info" {
     $wgo_s1XKT_info:
         const $wgo_s1XKT_entry;
         const 4294967298;
         const 8;
         const 4294967300;
 },
 GHC.Arr.$wfoldr1Elems_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c26po: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c26ps; else goto c26pr;
       c26ps: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$wfoldr1Elems_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c26pr: // global
           if (R3 == 0) goto c26pn; else goto c26pm;
       c26pn: // global
           Hp = Hp - 32;
           R1 = lvl5_r1Xvg_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c26pm: // global
           I64[Hp - 24] = $wgo_s1XKT_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           I64[Hp] = R3 - 1;
           R2 = 0;
           R1 = Hp - 23;
           call $wgo_s1XKT_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$wfoldr1Elems_info" {
     GHC.Arr.$wfoldr1Elems_info:
         const GHC.Arr.$wfoldr1Elems_entry;
         const 0;
         const 12884901902;
         const 12884901909;
         const S1YCH_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.256126095 UTC

[section ""data" . GHC.Arr.foldr1Elems_closure" {
     GHC.Arr.foldr1Elems_closure:
         const GHC.Arr.foldr1Elems_info;
         const 0;
 },
 GHC.Arr.foldr1Elems_entry() //  [R2, R3]
         { []
         }
     {offset
       c26pT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26pU; else goto c26pV;
       c26pU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.foldr1Elems_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c26pV: // global
           I64[Sp - 16] = block_c26pQ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u26pZ; else goto c26pR;
       u26pZ: // global
           call _c26pQ(R1) args: 0, res: 0, upd: 0;
       c26pR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.foldr1Elems_info" {
     GHC.Arr.foldr1Elems_info:
         const GHC.Arr.foldr1Elems_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S1YCH_srt+32;
 },
 _c26pQ() //  [R1]
         { []
         }
     {offset
       c26pQ: // global
           R4 = P64[R1 + 23];
           R3 = I64[R1 + 31];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Arr.$wfoldr1Elems_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26pQ_info" {
     block_c26pQ_info:
         const _c26pQ;
         const 1;
         const 4294967326;
         const S1YCH_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.261620936 UTC

[section ""cstring" . lvl6_r1Xvh_bytes" {
     lvl6_r1Xvh_bytes:
         I8[] [102,111,108,100,108,49,58,32,101,109,112,116,121,32,65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.264538556 UTC

[section ""data" . lvl7_r1Xvi_closure" {
     lvl7_r1Xvi_closure:
         const lvl7_r1Xvi_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r1Xvi_entry() //  [R1]
         { []
         }
     {offset
       c26qi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c26qj; else goto c26qk;
       c26qj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26qk: // global
           (_c26qd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c26qd::I64 == 0) goto c26qf; else goto c26qe;
       c26qf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c26qe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c26qd::I64;
           I64[Sp - 24] = block_c26qg_info;
           R2 = lvl6_r1Xvh_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_r1Xvi_info" {
     lvl7_r1Xvi_info:
         const lvl7_r1Xvi_entry;
         const 0;
         const 4294967317;
         const S1YCH_srt+8;
 },
 _c26qg() //  [R1]
         { []
         }
     {offset
       c26qg: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c26qg_info" {
     block_c26qg_info:
         const _c26qg;
         const 0;
         const 4294967326;
         const S1YCH_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.272156823 UTC

[section ""data" . GHC.Arr.$wfoldl1Elems_closure" {
     GHC.Arr.$wfoldl1Elems_closure:
         const GHC.Arr.$wfoldl1Elems_info;
         const 0;
 },
 sat_s1XLm_entry() //  [R1]
         { []
         }
     {offset
       c26qP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26qQ; else goto c26qR;
       c26qQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26qR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XLm_info" {
     sat_s1XLm_info:
         const sat_s1XLm_entry;
         const 4294967297;
         const 19;
 },
 sat_s1XLj_entry() //  [R1]
         { []
         }
     {offset
       c26qY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26qZ; else goto c26r0;
       c26qZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26r0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wgo_s1XLf_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XLj_info" {
     sat_s1XLj_info:
         const sat_s1XLj_entry;
         const 4294967297;
         const 19;
 },
 $wgo_s1XLf_entry() //  [R1, R2]
         { []
         }
     {offset
       c26r4: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c26r8; else goto c26r7;
       c26r8: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c26r7: // global
           _s1XLd::P64 = P64[R1 + 15];
           if (R2 == 0) goto c26r3; else goto c26r2;
       c26r3: // global
           _s1XLo::P64 = P64[_s1XLd::P64 + 24];
           Hp = Hp - 64;
           R1 = _s1XLo::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c26r2: // global
           _s1XLb::P64 = P64[R1 + 7];
           I64[Hp - 56] = sat_s1XLm_info;
           P64[Hp - 40] = _s1XLd::P64;
           I64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s1XLj_info;
           P64[Hp - 8] = R1;
           I64[Hp] = R2;
           R3 = Hp - 56;
           R2 = Hp - 24;
           R1 = _s1XLb::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s1XLf_info" {
     $wgo_s1XLf_info:
         const $wgo_s1XLf_entry;
         const 2;
         const 11;
         const 4294967300;
 },
 GHC.Arr.$wfoldl1Elems_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c26rc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c26rg; else goto c26rf;
       c26rg: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$wfoldl1Elems_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c26rf: // global
           if (R3 == 0) goto c26rb; else goto c26ra;
       c26rb: // global
           Hp = Hp - 24;
           R1 = lvl7_r1Xvi_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c26ra: // global
           I64[Hp - 16] = $wgo_s1XLf_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R2 = R3 - 1;
           R1 = Hp - 15;
           call $wgo_s1XLf_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$wfoldl1Elems_info" {
     GHC.Arr.$wfoldl1Elems_info:
         const GHC.Arr.$wfoldl1Elems_entry;
         const 0;
         const 12884901902;
         const 12884901909;
         const S1YCH_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.282632204 UTC

[section ""data" . GHC.Arr.foldl1Elems_closure" {
     GHC.Arr.foldl1Elems_closure:
         const GHC.Arr.foldl1Elems_info;
         const 0;
 },
 GHC.Arr.foldl1Elems_entry() //  [R2, R3]
         { []
         }
     {offset
       c26rH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26rI; else goto c26rJ;
       c26rI: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.foldl1Elems_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c26rJ: // global
           I64[Sp - 16] = block_c26rE_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u26rN; else goto c26rF;
       u26rN: // global
           call _c26rE(R1) args: 0, res: 0, upd: 0;
       c26rF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.foldl1Elems_info" {
     GHC.Arr.foldl1Elems_info:
         const GHC.Arr.foldl1Elems_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S1YCH_srt+56;
 },
 _c26rE() //  [R1]
         { []
         }
     {offset
       c26rE: // global
           R4 = P64[R1 + 23];
           R3 = I64[R1 + 31];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Arr.$wfoldl1Elems_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26rE_info" {
     block_c26rE_info:
         const _c26rE;
         const 1;
         const 4294967326;
         const S1YCH_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.290745611 UTC

[section ""data" . GHC.Arr.$wfoldlElems'_closure" {
     GHC.Arr.$wfoldlElems'_closure:
         const GHC.Arr.$wfoldlElems'_info;
 },
 GHC.Arr.$wfoldlElems'_slow() //  [R1]
         { []
         }
     {offset
       c26rY: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Arr.$wfoldlElems'_entry(R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1XLJ_entry() //  [R1]
         { []
         }
     {offset
       c26sg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26sh; else goto c26si;
       c26sh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26si: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XLJ_info" {
     sat_s1XLJ_info:
         const sat_s1XLJ_entry;
         const 4294967297;
         const 19;
 },
 GHC.Arr.$wfoldlElems'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c26sj: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c26sk; else goto c26sl;
       c26sk: // global
           R1 = GHC.Arr.$wfoldlElems'_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c26sl: // global
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R4;
           P64[Sp - 24] = R5;
           I64[Sp - 16] = 0;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           call _c26s4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Arr.$wfoldlElems'_info" {
     GHC.Arr.$wfoldlElems'_info:
         const GHC.Arr.$wfoldlElems'_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 260;
         const GHC.Arr.$wfoldlElems'_slow;
 },
 _c26s4() //  []
         { []
         }
     {offset
       c26s4: // global
           _s1XLD::P64 = P64[Sp + 32];
           if (I64[Sp + 24] == I64[Sp + 8]) goto c26sv; else goto c26sp;
       c26sv: // global
           R1 = _s1XLD::P64;
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c26sp: // global
           I64[Sp - 8] = block_c26sa_info;
           R1 = _s1XLD::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c26sa() //  [R1]
         { []
         }
     {offset
       c26sa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c26ss; else goto c26sr;
       c26ss: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c26sr: // global
           I64[Hp - 24] = sat_s1XLJ_info;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 32];
           I64[Sp] = block_c26sn_info;
           R3 = Hp - 24;
           R2 = R1;
           R1 = P64[Sp + 8];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26sa_info" {
     block_c26sa_info:
         const _c26sa;
         const 1669;
         const 30;
 },
 _c26sn() //  [R1]
         { []
         }
     {offset
       c26sn: // global
           I64[Sp + 32] = I64[Sp + 32] + 1;
           P64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _c26s4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26sn_info" {
     block_c26sn_info:
         const _c26sn;
         const 1669;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.30218498 UTC

[section ""data" . GHC.Arr.foldlElems'_closure" {
     GHC.Arr.foldlElems'_closure:
         const GHC.Arr.foldlElems'_info;
 },
 GHC.Arr.foldlElems'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c26t6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c26t7; else goto c26t8;
       c26t7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.foldlElems'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c26t8: // global
           I64[Sp - 24] = block_c26t3_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u26tc; else goto c26t4;
       u26tc: // global
           call _c26t3(R1) args: 0, res: 0, upd: 0;
       c26t4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.foldlElems'_info" {
     GHC.Arr.foldlElems'_info:
         const GHC.Arr.foldlElems'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c26t3() //  [R1]
         { []
         }
     {offset
       c26t3: // global
           R5 = P64[R1 + 23];
           R4 = I64[R1 + 31];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Arr.$wfoldlElems'_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26t3_info" {
     block_c26t3_info:
         const _c26t3;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.309801199 UTC

[section ""data" . GHC.Arr.$wfoldrElems'_closure" {
     GHC.Arr.$wfoldrElems'_closure:
         const GHC.Arr.$wfoldrElems'_info;
 },
 GHC.Arr.$wfoldrElems'_slow() //  [R1]
         { []
         }
     {offset
       c26tn: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Arr.$wfoldrElems'_entry(R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1XM5_entry() //  [R1]
         { []
         }
     {offset
       c26tH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26tI; else goto c26tJ;
       c26tI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26tJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XM5_info" {
     sat_s1XM5_info:
         const sat_s1XM5_entry;
         const 4294967297;
         const 19;
 },
 GHC.Arr.$wfoldrElems'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c26tK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c26tL; else goto c26tM;
       c26tL: // global
           R1 = GHC.Arr.$wfoldrElems'_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c26tM: // global
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R5;
           I64[Sp - 16] = R4 - 1;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           call _c26tw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Arr.$wfoldrElems'_info" {
     GHC.Arr.$wfoldrElems'_info:
         const GHC.Arr.$wfoldrElems'_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 260;
         const GHC.Arr.$wfoldrElems'_slow;
 },
 _c26tw() //  []
         { []
         }
     {offset
       c26tw: // global
           _s1XLZ::P64 = P64[Sp + 24];
           _s1XM0::I64 = I64[Sp + 16];
           if (_s1XM0::I64 != (-1)) goto c26tQ; else goto c26tW;
       c26tQ: // global
           I64[Sp - 8] = block_c26tB_info;
           R1 = _s1XLZ::P64;
           I64[Sp + 24] = _s1XM0::I64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c26tW: // global
           R1 = _s1XLZ::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c26tB() //  [R1]
         { []
         }
     {offset
       c26tB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c26tT; else goto c26tS;
       c26tT: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c26tS: // global
           I64[Hp - 24] = sat_s1XM5_info;
           P64[Hp - 8] = P64[Sp + 16];
           I64[Hp] = I64[Sp + 32];
           I64[Sp] = block_c26tO_info;
           R3 = R1;
           R2 = Hp - 24;
           R1 = P64[Sp + 8];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26tB_info" {
     block_c26tB_info:
         const _c26tB;
         const 772;
         const 30;
 },
 _c26tO() //  [R1]
         { []
         }
     {offset
       c26tO: // global
           I64[Sp + 24] = I64[Sp + 32] - 1;
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c26tw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26tO_info" {
     block_c26tO_info:
         const _c26tO;
         const 772;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.321090852 UTC

[section ""data" . GHC.Arr.foldrElems'_closure" {
     GHC.Arr.foldrElems'_closure:
         const GHC.Arr.foldrElems'_info;
 },
 GHC.Arr.foldrElems'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c26uz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c26uA; else goto c26uB;
       c26uA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.foldrElems'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c26uB: // global
           I64[Sp - 24] = block_c26uw_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u26uF; else goto c26ux;
       u26uF: // global
           call _c26uw(R1) args: 0, res: 0, upd: 0;
       c26ux: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.foldrElems'_info" {
     GHC.Arr.foldrElems'_info:
         const GHC.Arr.foldrElems'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c26uw() //  [R1]
         { []
         }
     {offset
       c26uw: // global
           R5 = P64[R1 + 23];
           R4 = I64[R1 + 31];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Arr.$wfoldrElems'_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26uw_info" {
     block_c26uw_info:
         const _c26uw;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.329566477 UTC

[section ""data" . GHC.Arr.$wfoldlElems_closure" {
     GHC.Arr.$wfoldlElems_closure:
         const GHC.Arr.$wfoldlElems_info;
 },
 GHC.Arr.$wfoldlElems_slow() //  [R1]
         { []
         }
     {offset
       c26uQ: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Arr.$wfoldlElems_entry(R5,
                                           R4,
                                           R3,
                                           R2,
                                           R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1XMr_entry() //  [R1]
         { []
         }
     {offset
       c26v5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26v6; else goto c26v7;
       c26v6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26v7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XMr_info" {
     sat_s1XMr_info:
         const sat_s1XMr_entry;
         const 4294967297;
         const 19;
 },
 sat_s1XMo_entry() //  [R1]
         { []
         }
     {offset
       c26ve: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26vf; else goto c26vg;
       c26vf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26vg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wgo_s1XMk_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XMo_info" {
     sat_s1XMo_info:
         const sat_s1XMo_entry;
         const 4294967297;
         const 19;
 },
 $wgo_s1XMk_entry() //  [R1, R2]
         { []
         }
     {offset
       c26vk: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c26vo; else goto c26vn;
       c26vo: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c26vn: // global
           if (R2 == (-1)) goto c26vj; else goto c26vi;
       c26vj: // global
           _s1XMh::P64 = P64[R1 + 15];
           Hp = Hp - 64;
           R1 = _s1XMh::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c26vi: // global
           _s1XMg::P64 = P64[R1 + 7];
           _s1XMj::P64 = P64[R1 + 23];
           I64[Hp - 56] = sat_s1XMr_info;
           P64[Hp - 40] = _s1XMj::P64;
           I64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s1XMo_info;
           P64[Hp - 8] = R1;
           I64[Hp] = R2;
           R3 = Hp - 56;
           R2 = Hp - 24;
           R1 = _s1XMg::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s1XMk_info" {
     $wgo_s1XMk_info:
         const $wgo_s1XMk_entry;
         const 3;
         const 8;
         const 4294967300;
 },
 GHC.Arr.$wfoldlElems_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c26vr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c26vv; else goto c26vu;
       c26vv: // global
           HpAlloc = 32;
           R1 = GHC.Arr.$wfoldlElems_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c26vu: // global
           I64[Hp - 24] = $wgo_s1XMk_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R5;
           R2 = R4 - 1;
           R1 = Hp - 23;
           call $wgo_s1XMk_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$wfoldlElems_info" {
     GHC.Arr.$wfoldlElems_info:
         const GHC.Arr.$wfoldlElems_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 260;
         const GHC.Arr.$wfoldlElems_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.340169475 UTC

[section ""data" . GHC.Arr.foldlElems_closure" {
     GHC.Arr.foldlElems_closure:
         const GHC.Arr.foldlElems_info;
 },
 GHC.Arr.foldlElems_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c26vX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c26vY; else goto c26vZ;
       c26vY: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.foldlElems_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c26vZ: // global
           I64[Sp - 24] = block_c26vU_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u26w3; else goto c26vV;
       u26w3: // global
           call _c26vU(R1) args: 0, res: 0, upd: 0;
       c26vV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.foldlElems_info" {
     GHC.Arr.foldlElems_info:
         const GHC.Arr.foldlElems_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c26vU() //  [R1]
         { []
         }
     {offset
       c26vU: // global
           R5 = P64[R1 + 23];
           R4 = I64[R1 + 31];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Arr.$wfoldlElems_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26vU_info" {
     block_c26vU_info:
         const _c26vU;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.347613467 UTC

[section ""data" . GHC.Arr.$wfoldrElems_closure" {
     GHC.Arr.$wfoldrElems_closure:
         const GHC.Arr.$wfoldrElems_info;
 },
 GHC.Arr.$wfoldrElems_slow() //  [R1]
         { []
         }
     {offset
       c26we: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Arr.$wfoldrElems_entry(R5,
                                           R4,
                                           R3,
                                           R2,
                                           R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1XMM_entry() //  [R1]
         { []
         }
     {offset
       c26ww: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26wx; else goto c26wy;
       c26wx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26wy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wgo_s1XMF_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XMM_info" {
     sat_s1XMM_info:
         const sat_s1XMM_entry;
         const 4294967297;
         const 19;
 },
 sat_s1XMK_entry() //  [R1]
         { []
         }
     {offset
       c26wD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26wE; else goto c26wF;
       c26wE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26wF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XMK_info" {
     sat_s1XMK_info:
         const sat_s1XMK_entry;
         const 4294967297;
         const 19;
 },
 $wgo_s1XMF_entry() //  [R1, R2]
         { []
         }
     {offset
       c26wJ: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c26wN; else goto c26wM;
       c26wN: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c26wM: // global
           if (R2 == I64[R1 + 31]) goto c26wI; else goto c26wH;
       c26wI: // global
           _s1XMC::P64 = P64[R1 + 15];
           Hp = Hp - 64;
           R1 = _s1XMC::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c26wH: // global
           _s1XMB::P64 = P64[R1 + 7];
           _s1XME::P64 = P64[R1 + 23];
           I64[Hp - 56] = sat_s1XMM_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s1XMK_info;
           P64[Hp - 8] = _s1XME::P64;
           I64[Hp] = R2;
           R3 = Hp - 56;
           R2 = Hp - 24;
           R1 = _s1XMB::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s1XMF_info" {
     $wgo_s1XMF_info:
         const $wgo_s1XMF_entry;
         const 4294967299;
         const 8;
         const 4294967300;
 },
 GHC.Arr.$wfoldrElems_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c26wO: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c26wS; else goto c26wR;
       c26wS: // global
           HpAlloc = 40;
           R1 = GHC.Arr.$wfoldrElems_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c26wR: // global
           I64[Hp - 32] = $wgo_s1XMF_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R5;
           I64[Hp] = R4;
           R2 = 0;
           R1 = Hp - 31;
           call $wgo_s1XMF_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$wfoldrElems_info" {
     GHC.Arr.$wfoldrElems_info:
         const GHC.Arr.$wfoldrElems_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 260;
         const GHC.Arr.$wfoldrElems_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.358875017 UTC

[section ""data" . GHC.Arr.foldrElems_closure" {
     GHC.Arr.foldrElems_closure:
         const GHC.Arr.foldrElems_info;
 },
 GHC.Arr.foldrElems_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c26xk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c26xl; else goto c26xm;
       c26xl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.foldrElems_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c26xm: // global
           I64[Sp - 24] = block_c26xh_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u26xq; else goto c26xi;
       u26xq: // global
           call _c26xh(R1) args: 0, res: 0, upd: 0;
       c26xi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.foldrElems_info" {
     GHC.Arr.foldrElems_info:
         const GHC.Arr.foldrElems_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c26xh() //  [R1]
         { []
         }
     {offset
       c26xh: // global
           R5 = P64[R1 + 23];
           R4 = I64[R1 + 31];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Arr.$wfoldrElems_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26xh_info" {
     block_c26xh_info:
         const _c26xh;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.366998972 UTC

[section ""data" . GHC.Arr.elems_closure" {
     GHC.Arr.elems_closure:
         const GHC.Arr.elems_info;
 },
 sat_s1XNa_entry() //  [R1]
         { []
         }
     {offset
       c26y3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26y4; else goto c26y5;
       c26y4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26y5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s1XN4::I64 = I64[R1 + 32];
           if (_s1XN4::I64 == I64[R1 + 24]) goto c26y2; else goto c26y1;
       c26y2: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c26y1: // global
           R2 = _s1XN4::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s1XN3_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XNa_info" {
     sat_s1XNa_info:
         const sat_s1XNa_entry;
         const 8589934593;
         const 15;
 },
 sat_s1XN7_entry() //  [R1]
         { []
         }
     {offset
       c26yc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26yd; else goto c26ye;
       c26yd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26ye: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XN7_info" {
     sat_s1XN7_info:
         const sat_s1XN7_entry;
         const 4294967297;
         const 19;
 },
 go_s1XN3_entry() //  [R1, R2]
         { []
         }
     {offset
       c26yg: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c26yk; else goto c26yj;
       c26yk: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c26yj: // global
           _s1XN0::P64 = P64[R1 + 7];
           _s1XN1::I64 = I64[R1 + 15];
           I64[Hp - 88] = sat_s1XNa_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = _s1XN1::I64;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s1XN7_info;
           P64[Hp - 32] = _s1XN0::P64;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s1XN3_info" {
     go_s1XN3_info:
         const go_s1XN3_entry;
         const 4294967297;
         const 12;
         const 4294967300;
 },
 GHC.Arr.elems_entry() //  [R2]
         { []
         }
     {offset
       c26yl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c26ym; else goto c26yn;
       c26ym: // global
           R2 = R2;
           R1 = GHC.Arr.elems_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c26yn: // global
           I64[Sp - 8] = block_c26xE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u26yu; else goto c26xF;
       u26yu: // global
           call _c26xE(R1) args: 0, res: 0, upd: 0;
       c26xF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.elems_info" {
     GHC.Arr.elems_info:
         const GHC.Arr.elems_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c26xE() //  [R1]
         { []
         }
     {offset
       c26xE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c26yq; else goto c26yp;
       c26yq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c26yp: // global
           _s1XN1::I64 = I64[R1 + 31] - 1;
           if (%MO_S_Le_W64(0, _s1XN1::I64)) goto c26ys; else goto c26yt;
       c26ys: // global
           _s1XN0::P64 = P64[R1 + 23];
           I64[Hp - 16] = go_s1XN3_info;
           P64[Hp - 8] = _s1XN0::P64;
           I64[Hp] = _s1XN1::I64;
           R2 = 0;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call go_s1XN3_entry(R2, R1) args: 8, res: 0, upd: 8;
       c26yt: // global
           Hp = Hp - 24;
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26xE_info" {
     block_c26xE_info:
         const _c26xE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.379129141 UTC

[section ""data" . GHC.Arr.unsafeAt_closure" {
     GHC.Arr.unsafeAt_closure:
         const GHC.Arr.unsafeAt_info;
 },
 GHC.Arr.unsafeAt_entry() //  [R2, R3]
         { []
         }
     {offset
       c26z4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26z8; else goto c26z9;
       c26z8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.unsafeAt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c26z9: // global
           I64[Sp - 16] = block_c26z1_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u26zh; else goto c26z2;
       u26zh: // global
           call _c26z1(R1) args: 0, res: 0, upd: 0;
       c26z2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeAt_info" {
     GHC.Arr.unsafeAt_info:
         const GHC.Arr.unsafeAt_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c26z1() //  [R1]
         { []
         }
     {offset
       c26z1: // global
           I64[Sp] = block_c26z7_info;
           _s1XNh::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1XNh::P64;
           if (R1 & 7 != 0) goto u26zg; else goto c26zb;
       u26zg: // global
           call _c26z7(R1) args: 0, res: 0, upd: 0;
       c26zb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26z1_info" {
     block_c26z1_info:
         const _c26z1;
         const 1;
         const 30;
 },
 _c26z7() //  [R1]
         { []
         }
     {offset
       c26z7: // global
           R1 = P64[P64[Sp + 8] + ((I64[R1 + 7] << 3) + 24)];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26z7_info" {
     block_c26z7_info:
         const _c26z7;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.387111232 UTC

[section ""data" . GHC.Arr.lessSafeIndex_closure" {
     GHC.Arr.lessSafeIndex_closure:
         const GHC.Arr.lessSafeIndex_info;
 },
 GHC.Arr.lessSafeIndex_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c26zE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c26zF; else goto c26zG;
       c26zF: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.lessSafeIndex_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c26zG: // global
           I64[Sp - 24] = block_c26zB_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u26zK; else goto c26zC;
       u26zK: // global
           call _c26zB(R1) args: 0, res: 0, upd: 0;
       c26zC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.lessSafeIndex_info" {
     GHC.Arr.lessSafeIndex_info:
         const GHC.Arr.lessSafeIndex_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c26zB() //  [R1]
         { []
         }
     {offset
       c26zB: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = R1;
           call GHC.Arr.index_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26zB_info" {
     block_c26zB_info:
         const _c26zB;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.39215775 UTC

[section ""cstring" . lvl8_r1Xvj_bytes" {
     lvl8_r1Xvj_bytes:
         I8[] [78,101,103,97,116,105,118,101,32,114,97,110,103,101,32,115,105,122,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.394939502 UTC

[section ""data" . GHC.Arr.negRange_closure" {
     GHC.Arr.negRange_closure:
         const GHC.Arr.negRange_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Arr.negRange_entry() //  [R1]
         { []
         }
     {offset
       c26A3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c26A4; else goto c26A5;
       c26A4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26A5: // global
           (_c26zY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c26zY::I64 == 0) goto c26A0; else goto c26zZ;
       c26A0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c26zZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c26zY::I64;
           I64[Sp - 24] = block_c26A1_info;
           R2 = lvl8_r1Xvj_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Arr.negRange_info" {
     GHC.Arr.negRange_info:
         const GHC.Arr.negRange_entry;
         const 0;
         const 4294967317;
         const S1YCH_srt+8;
 },
 _c26A1() //  [R1]
         { []
         }
     {offset
       c26A1: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c26A1_info" {
     block_c26A1_info:
         const _c26A1;
         const 0;
         const 4294967326;
         const S1YCH_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.401488488 UTC

[section ""data" . GHC.Arr.safeRangeSize_closure" {
     GHC.Arr.safeRangeSize_closure:
         const GHC.Arr.safeRangeSize_info;
         const 0;
 },
 GHC.Arr.safeRangeSize_entry() //  [R2, R3]
         { []
         }
     {offset
       c26Aq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c26Au; else goto c26Av;
       c26Au: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.safeRangeSize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c26Av: // global
           I64[Sp - 16] = block_c26An_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u26AG; else goto c26Ao;
       u26AG: // global
           call _c26An(R1) args: 0, res: 0, upd: 0;
       c26Ao: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.safeRangeSize_info" {
     GHC.Arr.safeRangeSize_info:
         const GHC.Arr.safeRangeSize_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1YCH_srt+80;
 },
 _c26An() //  [R1]
         { []
         }
     {offset
       c26An: // global
           _s1XNu::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c26At_info;
           R2 = _s1XNu::P64;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26An_info" {
     block_c26An_info:
         const _c26An;
         const 1;
         const 4294967326;
         const S1YCH_srt+88;
 },
 _c26At() //  [R1]
         { []
         }
     {offset
       c26At: // global
           if (%MO_S_Ge_W64(I64[R1 + 7], 0)) goto c26AE; else goto c26AF;
       c26AE: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c26AF: // global
           R1 = GHC.Arr.negRange_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26At_info" {
     block_c26At_info:
         const _c26At;
         const 0;
         const 4294967326;
         const S1YCH_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.411564786 UTC

[section ""data" . $wnewSTArray_r1Xvk_closure" {
     $wnewSTArray_r1Xvk_closure:
         const $wnewSTArray_r1Xvk_info;
         const 0;
 },
 sat_s1XNQ_entry() //  [R1]
         { []
         }
     {offset
       c26Bj: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c26Bk; else goto c26Bl;
       c26Bk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26Bl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c26Be_info;
           _s1XNE::P64 = P64[R1 + 24];
           _s1XNN::P64 = P64[R1 + 32];
           _s1XNJ::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s1XNE::P64;
           I64[Sp - 32] = _s1XNJ::I64;
           P64[Sp - 24] = _s1XNN::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XNQ_info" {
     sat_s1XNQ_info:
         const sat_s1XNQ_entry;
         const 4294967299;
         const 15;
 },
 _c26Be() //  [R1]
         { []
         }
     {offset
       c26Be: // global
           I64[Sp] = block_c26Bg_info;
           _s1XNO::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1XNO::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c26Be_info" {
     block_c26Be_info:
         const _c26Be;
         const 131;
         const 30;
 },
 _c26Bg() //  [R1]
         { []
         }
     {offset
       c26Bg: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c26Bp; else goto c26Bo;
       c26Bp: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c26Bo: // global
           I64[Hp - 32] = GHC.Arr.STArray_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c26Bg_info" {
     block_c26Bg_info:
         const _c26Bg;
         const 131;
         const 30;
 },
 $wnewSTArray_r1Xvk_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c26Bq: // global
           _s1XNF::P64 = R5;
           _s1XNE::P64 = R4;
           _s1XND::P64 = R3;
           _s1XNC::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c26Br; else goto c26Bs;
       c26Bs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c26Bu; else goto c26Bt;
       c26Bu: // global
           HpAlloc = 24;
           goto c26Br;
       c26Br: // global
           R5 = _s1XNF::P64;
           R4 = _s1XNE::P64;
           R3 = _s1XND::P64;
           R2 = _s1XNC::P64;
           R1 = $wnewSTArray_r1Xvk_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c26Bt: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s1XND::P64;
           P64[Hp] = _s1XNE::P64;
           I64[Sp - 32] = block_c26B1_info;
           R2 = _s1XNC::P64;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = Hp - 15;
           P64[Sp - 24] = _s1XND::P64;
           P64[Sp - 16] = _s1XNE::P64;
           P64[Sp - 8] = _s1XNF::P64;
           Sp = Sp - 48;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wnewSTArray_r1Xvk_info" {
     $wnewSTArray_r1Xvk_info:
         const $wnewSTArray_r1Xvk_entry;
         const 0;
         const 12884901902;
         const 21474836504;
         const S1YCH_srt+88;
 },
 _c26B1() //  [R1]
         { []
         }
     {offset
       c26B1: // global
           _s1XNJ::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1XNJ::I64, 0)) goto c26Bx; else goto c26BB;
       c26Bx: // global
           I64[Sp] = block_c26B8_info;
           R2 = P64[Sp + 24];
           R1 = _s1XNJ::I64;
           I64[Sp + 24] = _s1XNJ::I64;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
       c26BB: // global
           R1 = GHC.Arr.negRange_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26B1_info" {
     block_c26B1_info:
         const _c26B1;
         const 3;
         const 4294967326;
         const S1YCH_srt+88;
 },
 _c26B8() //  [R1]
         { []
         }
     {offset
       c26B8: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c26BA; else goto c26Bz;
       c26BA: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c26Bz: // global
           I64[Hp - 40] = sat_s1XNQ_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 40;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26B8_info" {
     block_c26B8_info:
         const _c26B8;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.425628594 UTC

[section ""data" . newSTArray1_r1Xvl_closure" {
     newSTArray1_r1Xvl_closure:
         const newSTArray1_r1Xvl_info;
         const 0;
 },
 newSTArray1_r1Xvl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c26Ce: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c26Cf; else goto c26Cg;
       c26Cf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = newSTArray1_r1Xvl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c26Cg: // global
           I64[Sp - 24] = block_c26Cb_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u26Ck; else goto c26Cc;
       u26Ck: // global
           call _c26Cb(R1) args: 0, res: 0, upd: 0;
       c26Cc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . newSTArray1_r1Xvl_info" {
     newSTArray1_r1Xvl_info:
         const newSTArray1_r1Xvl_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S1YCH_srt+96;
 },
 _c26Cb() //  [R1]
         { []
         }
     {offset
       c26Cb: // global
           R5 = P64[Sp + 16];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call $wnewSTArray_r1Xvk_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26Cb_info" {
     block_c26Cb_info:
         const _c26Cb;
         const 2;
         const 4294967326;
         const S1YCH_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.431397284 UTC

[section ""data" . GHC.Arr.newSTArray_closure" {
     GHC.Arr.newSTArray_closure:
         const GHC.Arr.newSTArray_info;
         const 0;
 },
 GHC.Arr.newSTArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c26Cy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call newSTArray1_r1Xvl_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.newSTArray_info" {
     GHC.Arr.newSTArray_info:
         const GHC.Arr.newSTArray_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S1YCH_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.436932078 UTC

[section ""data" . GHC.Arr.done_closure" {
     GHC.Arr.done_closure:
         const GHC.Arr.done_info;
 },
 sat_s1XOb_entry() //  [R1]
         { []
         }
     {offset
       c26CX: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c26CY; else goto c26CZ;
       c26CY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26CZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c26CS_info;
           _s1XO0::P64 = P64[R1 + 24];
           _s1XO8::P64 = P64[R1 + 32];
           _s1XO5::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s1XO0::P64;
           I64[Sp - 32] = _s1XO5::I64;
           P64[Sp - 24] = _s1XO8::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XOb_info" {
     sat_s1XOb_info:
         const sat_s1XOb_entry;
         const 4294967299;
         const 15;
 },
 _c26CS() //  [R1]
         { []
         }
     {offset
       c26CS: // global
           I64[Sp] = block_c26CU_info;
           _s1XO9::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1XO9::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c26CS_info" {
     block_c26CS_info:
         const _c26CS;
         const 131;
         const 30;
 },
 _c26CU() //  [R1]
         { []
         }
     {offset
       c26CU: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c26D3; else goto c26D2;
       c26D3: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c26D2: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c26CU_info" {
     block_c26CU_info:
         const _c26CU;
         const 131;
         const 30;
 },
 GHC.Arr.done_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c26D4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c26D5; else goto c26D6;
       c26D5: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.done_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c26D6: // global
           I64[Sp - 32] = block_c26CJ_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u26Da; else goto c26CK;
       u26Da: // global
           call _c26CJ(R1) args: 0, res: 0, upd: 0;
       c26CK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.done_info" {
     GHC.Arr.done_info:
         const GHC.Arr.done_entry;
         const 0;
         const 14;
         const 21474836504;
 },
 _c26CJ() //  [R1]
         { []
         }
     {offset
       c26CJ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c26D9; else goto c26D8;
       c26D9: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c26D8: // global
           _s1XO2::P64 = P64[Sp + 24];
           _s1XO5::I64 = I64[R1 + 7];
           I64[_s1XO2::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 40] = sat_s1XOb_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s1XO2::P64;
           I64[Hp] = _s1XO5::I64;
           R1 = Hp - 40;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26CJ_info" {
     block_c26CJ_info:
         const _c26CJ;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.449778463 UTC

[section ""data" . GHC.Arr.fill_closure" {
     GHC.Arr.fill_closure:
         const GHC.Arr.fill_info;
 },
 GHC.Arr.fill_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c26DI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c26DM; else goto c26DN;
       c26DM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.fill_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c26DN: // global
           I64[Sp - 24] = block_c26DF_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u26DV; else goto c26DG;
       u26DV: // global
           call _c26DF(R1) args: 0, res: 0, upd: 0;
       c26DG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.fill_info" {
     GHC.Arr.fill_info:
         const GHC.Arr.fill_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c26DF() //  [R1]
         { []
         }
     {offset
       c26DF: // global
           I64[Sp - 8] = block_c26DL_info;
           _s1XOi::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XOi::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u26DU; else goto c26DP;
       u26DU: // global
           call _c26DL(R1) args: 0, res: 0, upd: 0;
       c26DP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26DF_info" {
     block_c26DF_info:
         const _c26DF;
         const 2;
         const 30;
 },
 _c26DL() //  [R1]
         { []
         }
     {offset
       c26DL: // global
           _s1XOc::P64 = P64[Sp + 16];
           _s1XOe::P64 = P64[Sp + 24];
           _s1XOi::P64 = P64[Sp + 8];
           _s1XOk::I64 = I64[R1 + 7];
           call MO_WriteBarrier();
           P64[(_s1XOc::P64 + 24) + (_s1XOk::I64 << 3)] = _s1XOi::P64;
           I64[_s1XOc::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1XOc::P64 + 24) + ((I64[_s1XOc::P64 + 8] << 3) + (_s1XOk::I64 >> 7))] = 1 :: W8;
           R1 = _s1XOe::P64;
           Sp = Sp + 32;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26DL_info" {
     block_c26DL_info:
         const _c26DL;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.456662108 UTC

[section ""cstring" . lvl9_r1Xvm_bytes" {
     lvl9_r1Xvm_bytes:
         I8[] [40,65,114,114,97,121,46,33,41,58,32,117,110,100,101,102,105,110,101,100,32,97,114,114,97,121,32,101,108,101,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.459914178 UTC

[section ""data" . GHC.Arr.arrEleBottom_closure" {
     GHC.Arr.arrEleBottom_closure:
         const GHC.Arr.arrEleBottom_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Arr.arrEleBottom_entry() //  [R1]
         { []
         }
     {offset
       c26Em: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c26En; else goto c26Eo;
       c26En: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26Eo: // global
           (_c26Eh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c26Eh::I64 == 0) goto c26Ej; else goto c26Ei;
       c26Ej: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c26Ei: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c26Eh::I64;
           I64[Sp - 24] = block_c26Ek_info;
           R2 = lvl9_r1Xvm_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Arr.arrEleBottom_info" {
     GHC.Arr.arrEleBottom_info:
         const GHC.Arr.arrEleBottom_entry;
         const 0;
         const 4294967317;
         const S1YCH_srt+8;
 },
 _c26Ek() //  [R1]
         { []
         }
     {offset
       c26Ek: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c26Ek_info" {
     block_c26Ek_info:
         const _c26Ek;
         const 0;
         const 4294967326;
         const S1YCH_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.46741165 UTC

[section ""data" . GHC.Arr.freezeSTArray1_closure" {
     GHC.Arr.freezeSTArray1_closure:
         const GHC.Arr.freezeSTArray1_info;
         const 0;
 },
 GHC.Arr.freezeSTArray1_entry() //  [R2]
         { []
         }
     {offset
       c26EJ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c26EK; else goto c26EL;
       c26EK: // global
           R2 = R2;
           R1 = GHC.Arr.freezeSTArray1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c26EL: // global
           I64[Sp - 8] = block_c26EG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u26Ff; else goto c26EH;
       u26Ff: // global
           call _c26EG(R1) args: 0, res: 0, upd: 0;
       c26EH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.freezeSTArray1_info" {
     GHC.Arr.freezeSTArray1_info:
         const GHC.Arr.freezeSTArray1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S1YCH_srt+112;
 },
 _c26EG() //  [R1]
         { []
         }
     {offset
       c26EG: // global
           I64[Sp - 32] = block_c26EO_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           _s1XOq::P64 = P64[R1 + 7];
           _s1XOr::P64 = P64[R1 + 15];
           _s1XOt::P64 = P64[R1 + 23];
           _s1XOs::I64 = I64[R1 + 31];
           R1 = _s1XOs::I64;
           P64[Sp - 24] = _s1XOr::P64;
           I64[Sp - 16] = _s1XOs::I64;
           P64[Sp - 8] = _s1XOt::P64;
           P64[Sp] = _s1XOq::P64;
           Sp = Sp - 32;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26EG_info" {
     block_c26EG_info:
         const _c26EG;
         const 0;
         const 4294967326;
         const S1YCH_srt+112;
 },
 _c26EO() //  [R1]
         { []
         }
     {offset
       c26EO: // global
           _s1XOs::I64 = I64[Sp + 16];
           _s1XOt::P64 = P64[Sp + 24];
           _s1XOw::P64 = R1;
           _s1XOE::I64 = 0;
           goto c26F4;
       c26F4: // global
           if (_s1XOE::I64 == _s1XOs::I64) goto u26Fe; else goto c26Fa;
       u26Fe: // global
           P64[Sp + 24] = _s1XOw::P64;
           call _c26EV() args: 0, res: 0, upd: 0;
       c26Fa: // global
           _s1XOJ::P64 = P64[(_s1XOt::P64 + 24) + (_s1XOE::I64 << 3)];
           call MO_WriteBarrier();
           P64[(_s1XOw::P64 + 24) + (_s1XOE::I64 << 3)] = _s1XOJ::P64;
           I64[_s1XOw::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1XOw::P64 + 24) + ((I64[_s1XOw::P64 + 8] << 3) + (_s1XOE::I64 >> 7))] = 1 :: W8;
           _s1XOE::I64 = _s1XOE::I64 + 1;
           goto c26F4;
     }
 },
 section ""relreadonly" . block_c26EO_info" {
     block_c26EO_info:
         const _c26EO;
         const 132;
         const 30;
 },
 _c26EV() //  []
         { []
         }
     {offset
       c26EV: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c26F0; else goto c26EZ;
       c26F0: // global
           HpAlloc = 40;
           I64[Sp] = block_c26EV_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c26EZ: // global
           _s1XOw::P64 = P64[Sp + 24];
           I64[_s1XOw::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s1XOw::P64;
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26EV_info" {
     block_c26EV_info:
         const _c26EV;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.477643914 UTC

[section ""data" . GHC.Arr.freezeSTArray_closure" {
     GHC.Arr.freezeSTArray_closure:
         const GHC.Arr.freezeSTArray_info;
         const 0;
 },
 GHC.Arr.freezeSTArray_entry() //  [R2]
         { []
         }
     {offset
       c26FI: // global
           R2 = R2;
           call GHC.Arr.freezeSTArray1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.freezeSTArray_info" {
     GHC.Arr.freezeSTArray_info:
         const GHC.Arr.freezeSTArray_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S1YCH_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.483339625 UTC

[section ""data" . GHC.Arr.thawSTArray1_closure" {
     GHC.Arr.thawSTArray1_closure:
         const GHC.Arr.thawSTArray1_info;
         const 0;
 },
 GHC.Arr.thawSTArray1_entry() //  [R2]
         { []
         }
     {offset
       c26FW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c26FX; else goto c26FY;
       c26FX: // global
           R2 = R2;
           R1 = GHC.Arr.thawSTArray1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c26FY: // global
           I64[Sp - 8] = block_c26FT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u26Gs; else goto c26FU;
       u26Gs: // global
           call _c26FT(R1) args: 0, res: 0, upd: 0;
       c26FU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.thawSTArray1_info" {
     GHC.Arr.thawSTArray1_info:
         const GHC.Arr.thawSTArray1_entry;
         const 0;
         const 21474836494;
         const 8589934597;
         const S1YCH_srt+112;
 },
 _c26FT() //  [R1]
         { []
         }
     {offset
       c26FT: // global
           I64[Sp - 32] = block_c26G1_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           _s1XOP::P64 = P64[R1 + 7];
           _s1XOQ::P64 = P64[R1 + 15];
           _s1XOS::P64 = P64[R1 + 23];
           _s1XOR::I64 = I64[R1 + 31];
           R1 = _s1XOR::I64;
           P64[Sp - 24] = _s1XOQ::P64;
           I64[Sp - 16] = _s1XOR::I64;
           P64[Sp - 8] = _s1XOS::P64;
           P64[Sp] = _s1XOP::P64;
           Sp = Sp - 32;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26FT_info" {
     block_c26FT_info:
         const _c26FT;
         const 0;
         const 4294967326;
         const S1YCH_srt+112;
 },
 _c26G1() //  [R1]
         { []
         }
     {offset
       c26G1: // global
           _s1XOR::I64 = I64[Sp + 16];
           _s1XOS::P64 = P64[Sp + 24];
           _s1XOV::P64 = R1;
           _s1XP0::I64 = 0;
           goto c26Gh;
       c26Gh: // global
           if (_s1XP0::I64 == _s1XOR::I64) goto u26Gr; else goto c26Gn;
       u26Gr: // global
           P64[Sp + 24] = _s1XOV::P64;
           call _c26G8() args: 0, res: 0, upd: 0;
       c26Gn: // global
           _s1XP4::P64 = P64[(_s1XOS::P64 + 24) + (_s1XP0::I64 << 3)];
           call MO_WriteBarrier();
           P64[(_s1XOV::P64 + 24) + (_s1XP0::I64 << 3)] = _s1XP4::P64;
           I64[_s1XOV::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1XOV::P64 + 24) + ((I64[_s1XOV::P64 + 8] << 3) + (_s1XP0::I64 >> 7))] = 1 :: W8;
           _s1XP0::I64 = _s1XP0::I64 + 1;
           goto c26Gh;
     }
 },
 section ""relreadonly" . block_c26G1_info" {
     block_c26G1_info:
         const _c26G1;
         const 132;
         const 30;
 },
 _c26G8() //  []
         { []
         }
     {offset
       c26G8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c26Gd; else goto c26Gc;
       c26Gd: // global
           HpAlloc = 40;
           I64[Sp] = block_c26G8_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c26Gc: // global
           I64[Hp - 32] = GHC.Arr.STArray_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26G8_info" {
     block_c26G8_info:
         const _c26G8;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.497095417 UTC

[section ""data" . GHC.Arr.thawSTArray_closure" {
     GHC.Arr.thawSTArray_closure:
         const GHC.Arr.thawSTArray_info;
         const 0;
 },
 GHC.Arr.thawSTArray_entry() //  [R2]
         { []
         }
     {offset
       c26GW: // global
           R2 = R2;
           call GHC.Arr.thawSTArray1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.thawSTArray_info" {
     GHC.Arr.thawSTArray_info:
         const GHC.Arr.thawSTArray_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S1YCH_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.50418246 UTC

[section ""data" . GHC.Arr.unsafeReplace_closure" {
     GHC.Arr.unsafeReplace_closure:
         const GHC.Arr.unsafeReplace_info;
         const 0;
 },
 GHC.Arr.unsafeReplace_entry() //  [R2, R3]
         { []
         }
     {offset
       c26Hd: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c26He; else goto c26Hf;
       c26He: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.unsafeReplace_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c26Hf: // global
           I64[Sp - 16] = block_c26H7_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u26Im; else goto c26H8;
       u26Im: // global
           call _c26H7(R1) args: 0, res: 0, upd: 0;
       c26H8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeReplace_info" {
     GHC.Arr.unsafeReplace_info:
         const GHC.Arr.unsafeReplace_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S1YCH_srt+112;
 },
 _c26H7() //  [R1]
         { []
         }
     {offset
       c26H7: // global
           I64[Sp - 32] = block_c26Hi_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           _s1XPa::P64 = P64[R1 + 7];
           _s1XPb::P64 = P64[R1 + 15];
           _s1XPd::P64 = P64[R1 + 23];
           _s1XPc::I64 = I64[R1 + 31];
           R1 = _s1XPc::I64;
           P64[Sp - 24] = _s1XPb::P64;
           I64[Sp - 16] = _s1XPc::I64;
           P64[Sp - 8] = _s1XPd::P64;
           P64[Sp] = _s1XPa::P64;
           Sp = Sp - 32;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26H7_info" {
     block_c26H7_info:
         const _c26H7;
         const 1;
         const 4294967326;
         const S1YCH_srt+112;
 },
 _c26Hi() //  [R1]
         { []
         }
     {offset
       c26Hi: // global
           _s1XP8::P64 = P64[Sp + 40];
           _s1XPc::I64 = I64[Sp + 16];
           _s1XPd::P64 = P64[Sp + 24];
           _s1XPg::P64 = R1;
           _s1XPC::I64 = 0;
           goto c26I7;
       c26I7: // global
           if (_s1XPC::I64 == _s1XPc::I64) goto c26Ie; else goto c26Id;
       c26Ie: // global
           P64[Sp + 24] = _s1XP8::P64;
           P64[Sp + 40] = _s1XPg::P64;
           Sp = Sp + 8;
           call _c26HD() args: 0, res: 0, upd: 0;
       c26Id: // global
           _s1XPG::P64 = P64[(_s1XPd::P64 + 24) + (_s1XPC::I64 << 3)];
           call MO_WriteBarrier();
           P64[(_s1XPg::P64 + 24) + (_s1XPC::I64 << 3)] = _s1XPG::P64;
           I64[_s1XPg::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1XPg::P64 + 24) + ((I64[_s1XPg::P64 + 8] << 3) + (_s1XPC::I64 >> 7))] = 1 :: W8;
           _s1XPC::I64 = _s1XPC::I64 + 1;
           goto c26I7;
     }
 },
 section ""relreadonly" . block_c26Hi_info" {
     block_c26Hi_info:
         const _c26Hi;
         const 133;
         const 30;
 },
 _c26HD() //  []
         { []
         }
     {offset
       c26HD: // global
           I64[Sp - 8] = block_c26HF_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u26Io; else goto c26HH;
       u26Io: // global
           call _c26HF(R1) args: 0, res: 0, upd: 0;
       c26HH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c26HF() //  [R1]
         { []
         }
     {offset
       c26HF: // global
           if (R1 & 7 == 1) goto u26Ip; else goto c26HX;
       u26Ip: // global
           call _c26Hv() args: 0, res: 0, upd: 0;
       c26HX: // global
           I64[Sp] = block_c26HQ_info;
           _s1XPu::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _s1XPu::P64;
           if (R1 & 7 != 0) goto u26Iq; else goto c26HR;
       u26Iq: // global
           call _c26HQ(R1) args: 0, res: 0, upd: 0;
       c26HR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26HF_info" {
     block_c26HF_info:
         const _c26HF;
         const 389;
         const 30;
 },
 _c26Hv() //  []
         { []
         }
     {offset
       c26Hv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c26Hz; else goto c26Hy;
       c26Hz: // global
           HpAlloc = 40;
           I64[Sp] = block_c26Hv_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c26Hy: // global
           _s1XPg::P64 = P64[Sp + 40];
           I64[_s1XPg::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s1XPg::P64;
           I64[Hp] = I64[Sp + 16];
           R1 = (Hp + -31) & (-8);
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26Hv_info" {
     block_c26Hv_info:
         const _c26Hv;
         const 389;
         const 30;
 },
 _c26HQ() //  [R1]
         { []
         }
     {offset
       c26HQ: // global
           I64[Sp - 8] = block_c26HV_info;
           _s1XPx::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XPx::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u26Ir; else goto c26HZ;
       u26Ir: // global
           call _c26HV(R1) args: 0, res: 0, upd: 0;
       c26HZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26HQ_info" {
     block_c26HQ_info:
         const _c26HQ;
         const 133;
         const 30;
 },
 _c26HV() //  [R1]
         { []
         }
     {offset
       c26HV: // global
           _s1XPg::P64 = P64[Sp + 48];
           _s1XPu::P64 = P64[Sp + 32];
           _s1XPx::P64 = P64[Sp + 8];
           _s1XPz::I64 = I64[R1 + 7];
           call MO_WriteBarrier();
           P64[(_s1XPg::P64 + 24) + (_s1XPz::I64 << 3)] = _s1XPx::P64;
           I64[_s1XPg::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1XPg::P64 + 24) + ((I64[_s1XPg::P64 + 8] << 3) + (_s1XPz::I64 >> 7))] = 1 :: W8;
           P64[Sp + 32] = _s1XPu::P64;
           Sp = Sp + 16;
           call _c26HD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26HV_info" {
     block_c26HV_info:
         const _c26HV;
         const 262;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.523822933 UTC

[section ""data" . GHC.Arr.unsafeAccum_closure" {
     GHC.Arr.unsafeAccum_closure:
         const GHC.Arr.unsafeAccum_info;
         const 0;
 },
 GHC.Arr.unsafeAccum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c26Jl: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c26Jm; else goto c26Jn;
       c26Jm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.unsafeAccum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c26Jn: // global
           I64[Sp - 24] = block_c26Jf_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u26Kx; else goto c26Jg;
       u26Kx: // global
           call _c26Jf(R1) args: 0, res: 0, upd: 0;
       c26Jg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeAccum_info" {
     GHC.Arr.unsafeAccum_info:
         const GHC.Arr.unsafeAccum_entry;
         const 0;
         const 73014444046;
         const 12884901911;
         const S1YCH_srt+112;
 },
 _c26Jf() //  [R1]
         { []
         }
     {offset
       c26Jf: // global
           I64[Sp - 32] = block_c26Jq_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           _s1XPQ::P64 = P64[R1 + 7];
           _s1XPR::P64 = P64[R1 + 15];
           _s1XPT::P64 = P64[R1 + 23];
           _s1XPS::I64 = I64[R1 + 31];
           R1 = _s1XPS::I64;
           P64[Sp - 24] = _s1XPR::P64;
           I64[Sp - 16] = _s1XPS::I64;
           P64[Sp - 8] = _s1XPT::P64;
           P64[Sp] = _s1XPQ::P64;
           Sp = Sp - 32;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26Jf_info" {
     block_c26Jf_info:
         const _c26Jf;
         const 2;
         const 4294967326;
         const S1YCH_srt+112;
 },
 _c26Jq() //  [R1]
         { []
         }
     {offset
       c26Jq: // global
           _s1XPO::P64 = P64[Sp + 48];
           _s1XPS::I64 = I64[Sp + 16];
           _s1XPT::P64 = P64[Sp + 24];
           _s1XPW::P64 = R1;
           _s1XQm::I64 = 0;
           goto c26Ki;
       c26Ki: // global
           if (_s1XQm::I64 == _s1XPS::I64) goto c26Kp; else goto c26Ko;
       c26Kp: // global
           P64[Sp + 24] = _s1XPO::P64;
           P64[Sp + 48] = _s1XPW::P64;
           Sp = Sp + 8;
           call _c26JL() args: 0, res: 0, upd: 0;
       c26Ko: // global
           _s1XQq::P64 = P64[(_s1XPT::P64 + 24) + (_s1XQm::I64 << 3)];
           call MO_WriteBarrier();
           P64[(_s1XPW::P64 + 24) + (_s1XQm::I64 << 3)] = _s1XQq::P64;
           I64[_s1XPW::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1XPW::P64 + 24) + ((I64[_s1XPW::P64 + 8] << 3) + (_s1XQm::I64 >> 7))] = 1 :: W8;
           _s1XQm::I64 = _s1XQm::I64 + 1;
           goto c26Ki;
     }
 },
 section ""relreadonly" . block_c26Jq_info" {
     block_c26Jq_info:
         const _c26Jq;
         const 134;
         const 30;
 },
 _c26JL() //  []
         { []
         }
     {offset
       c26JL: // global
           I64[Sp - 8] = block_c26JN_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u26Kz; else goto c26JP;
       u26Kz: // global
           call _c26JN(R1) args: 0, res: 0, upd: 0;
       c26JP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c26JN() //  [R1]
         { []
         }
     {offset
       c26JN: // global
           if (R1 & 7 == 1) goto u26KA; else goto c26K5;
       u26KA: // global
           call _c26JD() args: 0, res: 0, upd: 0;
       c26K5: // global
           I64[Sp] = block_c26JY_info;
           _s1XQa::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _s1XQa::P64;
           if (R1 & 7 != 0) goto u26KB; else goto c26JZ;
       u26KB: // global
           call _c26JY(R1) args: 0, res: 0, upd: 0;
       c26JZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26JN_info" {
     block_c26JN_info:
         const _c26JN;
         const 390;
         const 30;
 },
 _c26JD() //  []
         { []
         }
     {offset
       c26JD: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c26JH; else goto c26JG;
       c26JH: // global
           HpAlloc = 40;
           I64[Sp] = block_c26JD_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c26JG: // global
           _s1XPW::P64 = P64[Sp + 48];
           I64[_s1XPW::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s1XPW::P64;
           I64[Hp] = I64[Sp + 16];
           R1 = (Hp + -31) & (-8);
           Sp = Sp + 56;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26JD_info" {
     block_c26JD_info:
         const _c26JD;
         const 1414;
         const 30;
 },
 _c26JY() //  [R1]
         { []
         }
     {offset
       c26JY: // global
           I64[Sp - 8] = block_c26K3_info;
           _s1XQd::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XQd::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u26KC; else goto c26K7;
       u26KC: // global
           call _c26K3(R1) args: 0, res: 0, upd: 0;
       c26K7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26JY_info" {
     block_c26JY_info:
         const _c26JY;
         const 134;
         const 30;
 },
 _c26K3() //  [R1]
         { []
         }
     {offset
       c26K3: // global
           _s1XQf::I64 = I64[R1 + 7];
           _s1XQi::P64 = P64[P64[Sp + 56] + ((_s1XQf::I64 << 3) + 24)];
           I64[Sp] = block_c26Kb_info;
           R3 = P64[Sp + 8];
           R2 = _s1XQi::P64;
           R1 = P64[Sp + 48];
           I64[Sp + 8] = _s1XQf::I64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26K3_info" {
     block_c26K3_info:
         const _c26K3;
         const 263;
         const 30;
 },
 _c26Kb() //  [R1]
         { []
         }
     {offset
       c26Kb: // global
           _s1XPW::P64 = P64[Sp + 56];
           _s1XQa::P64 = P64[Sp + 32];
           _s1XQf::I64 = I64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s1XPW::P64 + 24) + (_s1XQf::I64 << 3)] = R1;
           I64[_s1XPW::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1XPW::P64 + 24) + ((I64[_s1XPW::P64 + 8] << 3) + (_s1XQf::I64 >> 7))] = 1 :: W8;
           P64[Sp + 32] = _s1XQa::P64;
           Sp = Sp + 16;
           call _c26JL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26Kb_info" {
     block_c26Kb_info:
         const _c26Kb;
         const 327;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.545390326 UTC

[section ""data" . GHC.Arr.unsafeArray'_closure" {
     GHC.Arr.unsafeArray'_closure:
         const GHC.Arr.unsafeArray'_info;
         const 0;
 },
 sat_s1XQO_entry() //  [R1]
         { []
         }
     {offset
       c26LU: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c26LV; else goto c26LW;
       c26LV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26LW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c26LP_info;
           _s1XQB::P64 = P64[R1 + 24];
           _s1XQL::P64 = P64[R1 + 32];
           _s1XQD::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s1XQB::P64;
           I64[Sp - 32] = _s1XQD::I64;
           P64[Sp - 24] = _s1XQL::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XQO_info" {
     sat_s1XQO_info:
         const sat_s1XQO_entry;
         const 4294967299;
         const 15;
 },
 _c26LP() //  [R1]
         { []
         }
     {offset
       c26LP: // global
           I64[Sp] = block_c26LR_info;
           _s1XQM::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1XQM::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c26LP_info" {
     block_c26LP_info:
         const _c26LP;
         const 131;
         const 30;
 },
 _c26LR() //  [R1]
         { []
         }
     {offset
       c26LR: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c26M0; else goto c26LZ;
       c26M0: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c26LZ: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c26LR_info" {
     block_c26LR_info:
         const _c26LR;
         const 131;
         const 30;
 },
 GHC.Arr.unsafeArray'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c26M1: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c26M2; else goto c26M3;
       c26M2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.unsafeArray'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c26M3: // global
           I64[Sp - 24] = block_c26Lu_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u26MN; else goto c26Lv;
       u26MN: // global
           call _c26Lu(R1) args: 0, res: 0, upd: 0;
       c26Lv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeArray'_info" {
     GHC.Arr.unsafeArray'_info:
         const GHC.Arr.unsafeArray'_entry;
         const 0;
         const 141733920782;
         const 12884901911;
         const S1YCH_srt+112;
 },
 _c26Lu() //  [R1]
         { []
         }
     {offset
       c26Lu: // global
           I64[Sp - 8] = block_c26Lz_info;
           _s1XQA::P64 = P64[R1 + 7];
           _s1XQB::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1XQB::P64;
           P64[Sp + 8] = _s1XQA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u26ML; else goto c26LA;
       u26ML: // global
           call _c26Lz(R1) args: 0, res: 0, upd: 0;
       c26LA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26Lu_info" {
     block_c26Lu_info:
         const _c26Lu;
         const 2;
         const 4294967326;
         const S1YCH_srt+112;
 },
 _c26Lz() //  [R1]
         { []
         }
     {offset
       c26Lz: // global
           I64[Sp - 8] = block_c26LE_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           _s1XQD::I64 = I64[R1 + 7];
           R1 = _s1XQD::I64;
           I64[Sp] = _s1XQD::I64;
           Sp = Sp - 8;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26Lz_info" {
     block_c26Lz_info:
         const _c26Lz;
         const 3;
         const 4294967326;
         const S1YCH_srt+112;
 },
 _c26LE() //  [R1]
         { []
         }
     {offset
       c26LE: // global
           P64[Sp] = P64[Sp + 32];
           P64[Sp + 32] = R1;
           call _c26Md() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26LE_info" {
     block_c26LE_info:
         const _c26LE;
         const 68;
         const 30;
 },
 _c26Md() //  []
         { []
         }
     {offset
       c26Md: // global
           _s1XQQ::P64 = P64[Sp];
           I64[Sp] = block_c26Mf_info;
           R1 = _s1XQQ::P64;
           if (R1 & 7 != 0) goto u26MO; else goto c26Mh;
       u26MO: // global
           call _c26Mf(R1) args: 0, res: 0, upd: 0;
       c26Mh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c26Mf() //  [R1]
         { []
         }
     {offset
       c26Mf: // global
           if (R1 & 7 == 1) goto u26MP; else goto c26Mx;
       u26MP: // global
           call _c26LJ() args: 0, res: 0, upd: 0;
       c26Mx: // global
           I64[Sp - 8] = block_c26Mq_info;
           _s1XQU::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s1XQU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u26MQ; else goto c26Mr;
       u26MQ: // global
           call _c26Mq(R1) args: 0, res: 0, upd: 0;
       c26Mr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26Mf_info" {
     block_c26Mf_info:
         const _c26Mf;
         const 68;
         const 30;
 },
 _c26LJ() //  []
         { []
         }
     {offset
       c26LJ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c26M9; else goto c26M8;
       c26M9: // global
           HpAlloc = 48;
           I64[Sp] = block_c26LJ_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c26M8: // global
           _s1XQG::P64 = P64[Sp + 32];
           I64[_s1XQG::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 40] = sat_s1XQO_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s1XQG::P64;
           I64[Hp] = I64[Sp + 8];
           R1 = (Hp + -40) & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26LJ_info" {
     block_c26LJ_info:
         const _c26LJ;
         const 68;
         const 30;
 },
 _c26Mq() //  [R1]
         { []
         }
     {offset
       c26Mq: // global
           I64[Sp - 8] = block_c26Mv_info;
           _s1XQX::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XQX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u26MR; else goto c26Mz;
       u26MR: // global
           call _c26Mv(R1) args: 0, res: 0, upd: 0;
       c26Mz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26Mq_info" {
     block_c26Mq_info:
         const _c26Mq;
         const 133;
         const 30;
 },
 _c26Mv() //  [R1]
         { []
         }
     {offset
       c26Mv: // global
           _s1XQG::P64 = P64[Sp + 48];
           _s1XQU::P64 = P64[Sp + 16];
           _s1XQX::P64 = P64[Sp + 8];
           _s1XQZ::I64 = I64[R1 + 7];
           call MO_WriteBarrier();
           P64[(_s1XQG::P64 + 24) + (_s1XQZ::I64 << 3)] = _s1XQX::P64;
           I64[_s1XQG::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1XQG::P64 + 24) + ((I64[_s1XQG::P64 + 8] << 3) + (_s1XQZ::I64 >> 7))] = 1 :: W8;
           P64[Sp + 16] = _s1XQU::P64;
           Sp = Sp + 16;
           call _c26Md() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26Mv_info" {
     block_c26Mv_info:
         const _c26Mv;
         const 262;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.57110963 UTC

[section ""data" . GHC.Arr.unsafeArray_closure" {
     GHC.Arr.unsafeArray_closure:
         const GHC.Arr.unsafeArray_info;
         const 0;
 },
 sat_s1XRm_entry() //  [R1]
         { []
         }
     {offset
       c26Oj: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c26Ok; else goto c26Ol;
       c26Ok: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26Ol: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c26Oe_info;
           _s1XR9::P64 = P64[R1 + 24];
           _s1XRj::P64 = P64[R1 + 32];
           _s1XRb::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s1XR9::P64;
           I64[Sp - 32] = _s1XRb::I64;
           P64[Sp - 24] = _s1XRj::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XRm_info" {
     sat_s1XRm_info:
         const sat_s1XRm_entry;
         const 4294967299;
         const 15;
 },
 _c26Oe() //  [R1]
         { []
         }
     {offset
       c26Oe: // global
           I64[Sp] = block_c26Og_info;
           _s1XRk::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1XRk::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c26Oe_info" {
     block_c26Oe_info:
         const _c26Oe;
         const 131;
         const 30;
 },
 _c26Og() //  [R1]
         { []
         }
     {offset
       c26Og: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c26Op; else goto c26Oo;
       c26Op: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c26Oo: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c26Og_info" {
     block_c26Og_info:
         const _c26Og;
         const 131;
         const 30;
 },
 GHC.Arr.unsafeArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c26Oq: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c26Or; else goto c26Os;
       c26Or: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.unsafeArray_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c26Os: // global
           I64[Sp - 24] = block_c26NU_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u26Pb; else goto c26NV;
       u26Pb: // global
           call _c26NU(R1) args: 0, res: 0, upd: 0;
       c26NV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeArray_info" {
     GHC.Arr.unsafeArray_info:
         const GHC.Arr.unsafeArray_entry;
         const 0;
         const 279172874254;
         const 12884901911;
         const S1YCH_srt+112;
 },
 _c26NU() //  [R1]
         { []
         }
     {offset
       c26NU: // global
           I64[Sp - 8] = block_c26NZ_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = R1;
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 24;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26NU_info" {
     block_c26NU_info:
         const _c26NU;
         const 2;
         const 4294967326;
         const S1YCH_srt+112;
 },
 _c26NZ() //  [R1]
         { []
         }
     {offset
       c26NZ: // global
           I64[Sp - 8] = block_c26O3_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           _s1XRb::I64 = I64[R1 + 7];
           R1 = _s1XRb::I64;
           I64[Sp] = _s1XRb::I64;
           Sp = Sp - 8;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26NZ_info" {
     block_c26NZ_info:
         const _c26NZ;
         const 3;
         const 4294967326;
         const S1YCH_srt+112;
 },
 _c26O3() //  [R1]
         { []
         }
     {offset
       c26O3: // global
           P64[Sp] = P64[Sp + 32];
           P64[Sp + 32] = R1;
           call _c26OC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26O3_info" {
     block_c26O3_info:
         const _c26O3;
         const 68;
         const 30;
 },
 _c26OC() //  []
         { []
         }
     {offset
       c26OC: // global
           _s1XRo::P64 = P64[Sp];
           I64[Sp] = block_c26OE_info;
           R1 = _s1XRo::P64;
           if (R1 & 7 != 0) goto u26Pc; else goto c26OG;
       u26Pc: // global
           call _c26OE(R1) args: 0, res: 0, upd: 0;
       c26OG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c26OE() //  [R1]
         { []
         }
     {offset
       c26OE: // global
           if (R1 & 7 == 1) goto u26Pd; else goto c26OW;
       u26Pd: // global
           call _c26O8() args: 0, res: 0, upd: 0;
       c26OW: // global
           I64[Sp - 8] = block_c26OP_info;
           _s1XRs::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s1XRs::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u26Pe; else goto c26OQ;
       u26Pe: // global
           call _c26OP(R1) args: 0, res: 0, upd: 0;
       c26OQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26OE_info" {
     block_c26OE_info:
         const _c26OE;
         const 68;
         const 30;
 },
 _c26O8() //  []
         { []
         }
     {offset
       c26O8: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c26Oy; else goto c26Ox;
       c26Oy: // global
           HpAlloc = 48;
           I64[Sp] = block_c26O8_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c26Ox: // global
           _s1XRe::P64 = P64[Sp + 32];
           I64[_s1XRe::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 40] = sat_s1XRm_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s1XRe::P64;
           I64[Hp] = I64[Sp + 8];
           R1 = (Hp + -40) & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26O8_info" {
     block_c26O8_info:
         const _c26O8;
         const 68;
         const 30;
 },
 _c26OP() //  [R1]
         { []
         }
     {offset
       c26OP: // global
           I64[Sp - 8] = block_c26OU_info;
           _s1XRv::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XRv::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u26Pf; else goto c26OY;
       u26Pf: // global
           call _c26OU(R1) args: 0, res: 0, upd: 0;
       c26OY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26OP_info" {
     block_c26OP_info:
         const _c26OP;
         const 133;
         const 30;
 },
 _c26OU() //  [R1]
         { []
         }
     {offset
       c26OU: // global
           _s1XRe::P64 = P64[Sp + 48];
           _s1XRs::P64 = P64[Sp + 16];
           _s1XRv::P64 = P64[Sp + 8];
           _s1XRx::I64 = I64[R1 + 7];
           call MO_WriteBarrier();
           P64[(_s1XRe::P64 + 24) + (_s1XRx::I64 << 3)] = _s1XRv::P64;
           I64[_s1XRe::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1XRe::P64 + 24) + ((I64[_s1XRe::P64 + 8] << 3) + (_s1XRx::I64 >> 7))] = 1 :: W8;
           P64[Sp + 16] = _s1XRs::P64;
           Sp = Sp + 16;
           call _c26OC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26OU_info" {
     block_c26OU_info:
         const _c26OU;
         const 262;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.599122102 UTC

[section ""data" . GHC.Arr.listArray_closure" {
     GHC.Arr.listArray_closure:
         const GHC.Arr.listArray_info;
         const 0;
 },
 sat_s1XRW_entry() //  [R1]
         { []
         }
     {offset
       c26QN: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c26QO; else goto c26QP;
       c26QO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26QP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c26QI_info;
           _s1XRH::P64 = P64[R1 + 24];
           _s1XRT::P64 = P64[R1 + 32];
           _s1XRO::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s1XRH::P64;
           I64[Sp - 32] = _s1XRO::I64;
           P64[Sp - 24] = _s1XRT::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XRW_info" {
     sat_s1XRW_info:
         const sat_s1XRW_entry;
         const 4294967299;
         const 15;
 },
 _c26QI() //  [R1]
         { []
         }
     {offset
       c26QI: // global
           I64[Sp] = block_c26QK_info;
           _s1XRU::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1XRU::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c26QI_info" {
     block_c26QI_info:
         const _c26QI;
         const 131;
         const 30;
 },
 _c26QK() //  [R1]
         { []
         }
     {offset
       c26QK: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c26QT; else goto c26QS;
       c26QT: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c26QS: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c26QK_info" {
     block_c26QK_info:
         const _c26QK;
         const 131;
         const 30;
 },
 sat_s1XSd_entry() //  [R1]
         { []
         }
     {offset
       c26R4: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c26R5; else goto c26R6;
       c26R5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26R6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c26QZ_info;
           _s1XRH::P64 = P64[R1 + 24];
           _s1XSa::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _s1XRH::P64;
           P64[Sp - 24] = _s1XSa::P64;
           Sp = Sp - 40;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XSd_info" {
     sat_s1XSd_info:
         const sat_s1XSd_entry;
         const 3;
         const 15;
 },
 _c26QZ() //  [R1]
         { []
         }
     {offset
       c26QZ: // global
           I64[Sp] = block_c26R1_info;
           _s1XSb::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1XSb::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c26QZ_info" {
     block_c26QZ_info:
         const _c26QZ;
         const 2;
         const 30;
 },
 _c26R1() //  [R1]
         { []
         }
     {offset
       c26R1: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c26Ra; else goto c26R9;
       c26Ra: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c26R9: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 16];
           I64[Hp] = 0;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c26R1_info" {
     block_c26R1_info:
         const _c26R1;
         const 2;
         const 30;
 },
 GHC.Arr.listArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c26Rb: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c26Rc; else goto c26Rd;
       c26Rc: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.listArray_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c26Rd: // global
           I64[Sp - 24] = block_c26Qj_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u26Sd; else goto c26Qk;
       u26Sd: // global
           call _c26Qj(R1) args: 0, res: 0, upd: 0;
       c26Qk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.listArray_info" {
     GHC.Arr.listArray_info:
         const GHC.Arr.listArray_entry;
         const 0;
         const 4436701216782;
         const 12884901911;
         const S1YCH_srt+88;
 },
 _c26Qj() //  [R1]
         { []
         }
     {offset
       c26Qj: // global
           I64[Sp - 8] = block_c26Qo_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = R1;
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 24;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26Qj_info" {
     block_c26Qj_info:
         const _c26Qj;
         const 2;
         const 38654705694;
         const S1YCH_srt+88;
 },
 _c26Qo() //  [R1]
         { []
         }
     {offset
       c26Qo: // global
           _s1XRJ::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1XRJ::I64, 0)) goto c26Rh; else goto c26RT;
       c26Rh: // global
           I64[Sp - 8] = block_c26Qv_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           R1 = _s1XRJ::I64;
           I64[Sp] = _s1XRJ::I64;
           Sp = Sp - 8;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
       c26RT: // global
           I64[Sp + 24] = block_c26RS_info;
           R1 = GHC.Arr.negRange_closure;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u26S9; else goto c26RU;
       u26S9: // global
           call _c26RS(R1) args: 0, res: 0, upd: 0;
       c26RU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26Qo_info" {
     block_c26Qo_info:
         const _c26Qo;
         const 3;
         const 38654705694;
         const S1YCH_srt+88;
 },
 _c26Qv() //  [R1]
         { []
         }
     {offset
       c26Qv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c26Rk; else goto c26Rj;
       c26Rk: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c26Rj: // global
           _s1XRO::I64 = I64[Sp + 8];
           if (_s1XRO::I64 == 0) goto c26RQ; else goto c26RP;
       c26RQ: // global
           I64[R1] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = sat_s1XSd_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           P64[Sp + 32] = Hp - 32;
           Sp = Sp + 32;
           call _c26Rg() args: 0, res: 0, upd: 0;
       c26RP: // global
           Hp = Hp - 40;
           I64[Sp - 8] = 0;
           P64[Sp] = P64[Sp + 32];
           I64[Sp + 8] = _s1XRO::I64;
           P64[Sp + 32] = R1;
           Sp = Sp - 8;
           call _c26Rq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26Qv_info" {
     block_c26Qv_info:
         const _c26Qv;
         const 68;
         const 30;
 },
 _c26Rq() //  []
         { []
         }
     {offset
       c26Rq: // global
           I64[Sp - 8] = block_c26Rt_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u26Se; else goto c26Rv;
       u26Se: // global
           call _c26Rt(R1) args: 0, res: 0, upd: 0;
       c26Rv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c26Rt() //  [R1]
         { []
         }
     {offset
       c26Rt: // global
           if (R1 & 7 == 1) goto u26S3; else goto c26RN;
       u26S3: // global
           Sp = Sp + 16;
           goto u26Sg;
       c26RN: // global
           _s1XRN::P64 = P64[Sp + 48];
           _s1XRO::I64 = I64[Sp + 24];
           _s1XRZ::I64 = I64[Sp + 8];
           _s1XS2::P64 = P64[R1 + 6];
           _s1XS3::P64 = P64[R1 + 14];
           call MO_WriteBarrier();
           P64[(_s1XRN::P64 + 24) + (_s1XRZ::I64 << 3)] = _s1XS2::P64;
           I64[_s1XRN::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1XRN::P64 + 24) + ((I64[_s1XRN::P64 + 8] << 3) + (_s1XRZ::I64 >> 7))] = 1 :: W8;
           if (_s1XRZ::I64 == (_s1XRO::I64 + -1)) goto u26S4; else goto c26RL;
       u26S4: // global
           Sp = Sp + 16;
           goto u26Sg;
       u26Sg: // global
           call _c26QC() args: 0, res: 0, upd: 0;
       c26RL: // global
           P64[Sp + 16] = _s1XS3::P64;
           I64[Sp + 8] = _s1XRZ::I64 + 1;
           Sp = Sp + 8;
           call _c26Rq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26Rt_info" {
     block_c26Rt_info:
         const _c26Rt;
         const 454;
         const 30;
 },
 _c26QC() //  []
         { []
         }
     {offset
       c26QC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c26Rn; else goto c26Rm;
       c26Rn: // global
           HpAlloc = 48;
           I64[Sp] = block_c26QC_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c26Rm: // global
           _s1XRN::P64 = P64[Sp + 32];
           I64[_s1XRN::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 40] = sat_s1XRW_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s1XRN::P64;
           I64[Hp] = I64[Sp + 8];
           P64[Sp + 32] = Hp - 40;
           Sp = Sp + 32;
           call _c26Rg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26QC_info" {
     block_c26QC_info:
         const _c26QC;
         const 68;
         const 30;
 },
 _c26RS() //  [R1]
         { []
         }
     {offset
       c26RS: // global
           P64[Sp] = R1;
           call _c26Rg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26RS_info" {
     block_c26RS_info:
         const _c26RS;
         const 0;
         const 30;
 },
 _c26Rg() //  []
         { []
         }
     {offset
       c26Rg: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.629911613 UTC

[section ""data" . GHC.Arr.amap_closure" {
     GHC.Arr.amap_closure:
         const GHC.Arr.amap_info;
         const 0;
 },
 sat_s1XSE_entry() //  [R1]
         { []
         }
     {offset
       c26U1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26U2; else goto c26U3;
       c26U2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26U3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XSE_info" {
     sat_s1XSE_info:
         const sat_s1XSE_entry;
         const 4294967297;
         const 19;
 },
 sat_s1XSF_entry() //  [R1]
         { []
         }
     {offset
       c26U4: // global
           _s1XSF::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c26U5; else goto c26U6;
       c26U6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c26U8; else goto c26U7;
       c26U8: // global
           HpAlloc = 32;
           goto c26U5;
       c26U5: // global
           R1 = _s1XSF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26U7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1XSF::P64;
           _s1XSi::P64 = P64[_s1XSF::P64 + 16];
           _s1XSo::P64 = P64[_s1XSF::P64 + 24];
           _s1XSz::I64 = I64[_s1XSF::P64 + 32];
           I64[Hp - 24] = sat_s1XSE_info;
           P64[Hp - 8] = _s1XSo::P64;
           I64[Hp] = _s1XSz::I64;
           R2 = Hp - 24;
           R1 = _s1XSi::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XSF_info" {
     sat_s1XSF_info:
         const sat_s1XSF_entry;
         const 4294967298;
         const 15;
 },
 GHC.Arr.amap_entry() //  [R2, R3]
         { []
         }
     {offset
       c26U9: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c26Ua; else goto c26Ub;
       c26Ua: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.amap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c26Ub: // global
           I64[Sp - 16] = block_c26TC_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u26UD; else goto c26TD;
       u26UD: // global
           call _c26TC(R1) args: 0, res: 0, upd: 0;
       c26TD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.amap_info" {
     GHC.Arr.amap_info:
         const GHC.Arr.amap_entry;
         const 0;
         const 1103806595086;
         const 8589934607;
         const S1YCH_srt+112;
 },
 _c26TC() //  [R1]
         { []
         }
     {offset
       c26TC: // global
           I64[Sp - 32] = block_c26TH_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           _s1XSl::P64 = P64[R1 + 7];
           _s1XSm::P64 = P64[R1 + 15];
           _s1XSo::P64 = P64[R1 + 23];
           _s1XSn::I64 = I64[R1 + 31];
           R1 = _s1XSn::I64;
           P64[Sp - 24] = _s1XSm::P64;
           I64[Sp - 16] = _s1XSn::I64;
           P64[Sp - 8] = _s1XSo::P64;
           P64[Sp] = _s1XSl::P64;
           Sp = Sp - 32;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26TC_info" {
     block_c26TC_info:
         const _c26TC;
         const 1;
         const 4294967326;
         const S1YCH_srt+112;
 },
 _c26TH() //  [R1]
         { []
         }
     {offset
       c26TH: // global
           I64[Sp - 8] = 0;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _c26TO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26TH_info" {
     block_c26TH_info:
         const _c26TH;
         const 133;
         const 30;
 },
 _c26TO() //  []
         { []
         }
     {offset
       c26TO: // global
           Hp = Hp + 40;
           _s1XSz::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c26Um; else goto c26Ul;
       c26Um: // global
           HpAlloc = 40;
           I64[Sp] = block_c26TN_info;
           R1 = _s1XSz::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c26Ul: // global
           if (_s1XSz::I64 == I64[Sp + 24]) goto c26Up; else goto c26Uo;
       c26Up: // global
           Hp = Hp - 40;
           call _c26Uf() args: 0, res: 0, upd: 0;
       c26Uo: // global
           I64[Hp - 32] = sat_s1XSF_info;
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 32];
           I64[Hp] = _s1XSz::I64;
           _s1XSr::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s1XSr::P64 + 24) + (_s1XSz::I64 << 3)] = Hp - 32;
           I64[_s1XSr::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1XSr::P64 + 24) + ((I64[_s1XSr::P64 + 8] << 3) + (_s1XSz::I64 >> 7))] = 1 :: W8;
           I64[Sp] = _s1XSz::I64 + 1;
           call _c26TO() args: 0, res: 0, upd: 0;
     }
 },
 _c26TN() //  [R1]
         { []
         }
     {offset
       c26TN: // global
           I64[Sp] = R1;
           call _c26TO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c26TN_info" {
     block_c26TN_info:
         const _c26TN;
         const 262;
         const 30;
 },
 _c26Uf() //  []
         { []
         }
     {offset
       c26Uf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c26Uj; else goto c26Ui;
       c26Uj: // global
           HpAlloc = 40;
           I64[Sp] = block_c26Uf_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c26Ui: // global
           _s1XSr::P64 = P64[Sp + 8];
           I64[_s1XSr::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s1XSr::P64;
           I64[Hp] = I64[Sp + 24];
           R1 = (Hp + -31) & (-8);
           Sp = Sp + 56;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26Uf_info" {
     block_c26Uf_info:
         const _c26Uf;
         const 2822;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.648354781 UTC

[section ""data" . GHC.Arr.$fFunctorArray_$c<$_closure" {
     GHC.Arr.$fFunctorArray_$c<$_closure:
         const GHC.Arr.$fFunctorArray_$c<$_info;
         const 0;
 },
 GHC.Arr.$fFunctorArray_$c<$_entry() //  [R2, R3]
         { []
         }
     {offset
       c26Vs: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c26Vt; else goto c26Vu;
       c26Vt: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fFunctorArray_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c26Vu: // global
           I64[Sp - 16] = block_c26Vp_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u26W2; else goto c26Vq;
       u26W2: // global
           call _c26Vp(R1) args: 0, res: 0, upd: 0;
       c26Vq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fFunctorArray_$c<$_info" {
     GHC.Arr.$fFunctorArray_$c<$_info:
         const GHC.Arr.$fFunctorArray_$c<$_entry;
         const 0;
         const 2203318222862;
         const 8589934607;
         const S1YCH_srt+112;
 },
 _c26Vp() //  [R1]
         { []
         }
     {offset
       c26Vp: // global
           I64[Sp - 24] = block_c26Vx_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           _s1XSO::P64 = P64[R1 + 7];
           _s1XSP::P64 = P64[R1 + 15];
           _s1XSQ::I64 = I64[R1 + 31];
           R1 = _s1XSQ::I64;
           P64[Sp - 16] = _s1XSP::P64;
           I64[Sp - 8] = _s1XSQ::I64;
           P64[Sp] = _s1XSO::P64;
           Sp = Sp - 24;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26Vp_info" {
     block_c26Vp_info:
         const _c26Vp;
         const 1;
         const 4294967326;
         const S1YCH_srt+112;
 },
 _c26Vx() //  [R1]
         { []
         }
     {offset
       c26Vx: // global
           _s1XSL::P64 = P64[Sp + 32];
           _s1XSQ::I64 = I64[Sp + 16];
           _s1XSU::P64 = R1;
           _s1XT2::I64 = 0;
           goto c26VM;
       c26VM: // global
           if (_s1XT2::I64 == _s1XSQ::I64) goto u26W1; else goto c26VS;
       u26W1: // global
           P64[Sp + 32] = _s1XSU::P64;
           call _c26VE() args: 0, res: 0, upd: 0;
       c26VS: // global
           call MO_WriteBarrier();
           P64[(_s1XSU::P64 + 24) + (_s1XT2::I64 << 3)] = _s1XSL::P64;
           I64[_s1XSU::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1XSU::P64 + 24) + ((I64[_s1XSU::P64 + 8] << 3) + (_s1XT2::I64 >> 7))] = 1 :: W8;
           _s1XT2::I64 = _s1XT2::I64 + 1;
           goto c26VM;
     }
 },
 section ""relreadonly" . block_c26Vx_info" {
     block_c26Vx_info:
         const _c26Vx;
         const 132;
         const 30;
 },
 _c26VE() //  []
         { []
         }
     {offset
       c26VE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c26VI; else goto c26VH;
       c26VI: // global
           HpAlloc = 40;
           I64[Sp] = block_c26VE_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c26VH: // global
           _s1XSU::P64 = P64[Sp + 32];
           I64[_s1XSU::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s1XSU::P64;
           I64[Hp] = I64[Sp + 16];
           R1 = (Hp + -31) & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26VE_info" {
     block_c26VE_info:
         const _c26VE;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.658245518 UTC

[section ""data" . GHC.Arr.$fFunctorArray_closure" {
     GHC.Arr.$fFunctorArray_closure:
         const GHC.Base.C:Functor_con_info;
         const GHC.Arr.amap_closure+2;
         const GHC.Arr.$fFunctorArray_$c<$_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.66213559 UTC

[section ""data" . GHC.Arr.$fIxWord_$cunsafeRangeSize_closure" {
     GHC.Arr.$fIxWord_$cunsafeRangeSize_closure:
         const GHC.Arr.$fIxWord_$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIxWord_$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c26WA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26WX; else goto c26WY;
       c26WX: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxWord_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c26WY: // global
           I64[Sp - 8] = block_c26Wx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u26X5; else goto c26Wy;
       u26X5: // global
           call _c26Wx(R1) args: 0, res: 0, upd: 0;
       c26Wy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxWord_$cunsafeRangeSize_info" {
     GHC.Arr.$fIxWord_$cunsafeRangeSize_info:
         const GHC.Arr.$fIxWord_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c26Wx() //  [R1]
         { []
         }
     {offset
       c26Wx: // global
           I64[Sp - 8] = block_c26WD_info;
           _s1XTc::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s1XTc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u26X4; else goto c26WE;
       u26X4: // global
           call _c26WD(R1) args: 0, res: 0, upd: 0;
       c26WE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26Wx_info" {
     block_c26Wx_info:
         const _c26Wx;
         const 0;
         const 30;
 },
 _c26WD() //  [R1]
         { []
         }
     {offset
       c26WD: // global
           I64[Sp] = block_c26WI_info;
           _s1XTf::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1XTf::I64;
           if (R1 & 7 != 0) goto u26X6; else goto c26WJ;
       u26X6: // global
           call _c26WI(R1) args: 0, res: 0, upd: 0;
       c26WJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26WD_info" {
     block_c26WD_info:
         const _c26WD;
         const 1;
         const 30;
 },
 _c26WI() //  [R1]
         { []
         }
     {offset
       c26WI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c26X3; else goto c26X2;
       c26X3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c26X2: // global
           _s1XTk::I64 = I64[Sp + 8] - I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1XTk::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26WI_info" {
     block_c26WI_info:
         const _c26WI;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.672557074 UTC

[section ""data" . GHC.Arr.$fIxWord_$crangeSize_closure" {
     GHC.Arr.$fIxWord_$crangeSize_closure:
         const GHC.Arr.$fIxWord_$crangeSize_info;
 },
 GHC.Arr.$fIxWord_$crangeSize_entry() //  [R2]
         { []
         }
     {offset
       c26Xz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c26XI; else goto c26XJ;
       c26XI: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxWord_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c26XJ: // global
           I64[Sp - 8] = block_c26Xw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u26Yb; else goto c26Xx;
       u26Yb: // global
           call _c26Xw(R1) args: 0, res: 0, upd: 0;
       c26Xx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxWord_$crangeSize_info" {
     GHC.Arr.$fIxWord_$crangeSize_info:
         const GHC.Arr.$fIxWord_$crangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c26Xw() //  [R1]
         { []
         }
     {offset
       c26Xw: // global
           I64[Sp - 8] = block_c26XC_info;
           _s1XTo::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XTo::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u26Ya; else goto c26XD;
       u26Ya: // global
           call _c26XC(R1) args: 0, res: 0, upd: 0;
       c26XD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26Xw_info" {
     block_c26Xw_info:
         const _c26Xw;
         const 0;
         const 30;
 },
 _c26XC() //  [R1]
         { []
         }
     {offset
       c26XC: // global
           I64[Sp] = block_c26XH_info;
           _s1XTq::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1XTq::I64;
           if (R1 & 7 != 0) goto u26Yc; else goto c26XM;
       u26Yc: // global
           call _c26XH(R1) args: 0, res: 0, upd: 0;
       c26XM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26XC_info" {
     block_c26XC_info:
         const _c26XC;
         const 1;
         const 30;
 },
 _c26XH() //  [R1]
         { []
         }
     {offset
       c26XH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c26XS; else goto c26XR;
       c26XS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c26XR: // global
           _s1XTq::I64 = I64[Sp + 8];
           _s1XTs::I64 = I64[R1 + 7];
           if (_s1XTq::I64 > _s1XTs::I64) goto c26XW; else goto c26Y9;
       c26XW: // global
           Hp = Hp - 16;
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c26Y9: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1XTs::I64 - _s1XTq::I64 + 1;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26XH_info" {
     block_c26XH_info:
         const _c26XH;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.681499973 UTC

[section ""cstring" . lvl10_r1Xvn_bytes" {
     lvl10_r1Xvn_bytes:
         I8[] [69,114,114,111,114,32,105,110,32,97,114,114,97,121,32,105,110,100,101,120]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.684430474 UTC

[section ""data" . GHC.Arr.hopelessIndexError_closure" {
     GHC.Arr.hopelessIndexError_closure:
         const GHC.Arr.hopelessIndexError_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Arr.hopelessIndexError_entry() //  [R1]
         { []
         }
     {offset
       c26YI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c26YJ; else goto c26YK;
       c26YJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c26YK: // global
           (_c26YD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c26YD::I64 == 0) goto c26YF; else goto c26YE;
       c26YF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c26YE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c26YD::I64;
           I64[Sp - 24] = block_c26YG_info;
           R2 = lvl10_r1Xvn_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Arr.hopelessIndexError_info" {
     GHC.Arr.hopelessIndexError_info:
         const GHC.Arr.hopelessIndexError_entry;
         const 0;
         const 4294967317;
         const S1YCH_srt+8;
 },
 _c26YG() //  [R1]
         { []
         }
     {offset
       c26YG: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c26YG_info" {
     block_c26YG_info:
         const _c26YG;
         const 0;
         const 4294967326;
         const S1YCH_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.69083086 UTC

[section ""data" . GHC.Arr.$dmindex_closure" {
     GHC.Arr.$dmindex_closure:
         const GHC.Arr.$dmindex_info;
         const 0;
 },
 GHC.Arr.$dmindex_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c26Z8: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c26Z9; else goto c26Za;
       c26Z9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$dmindex_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c26Za: // global
           I64[Sp - 32] = block_c26Z2_info;
           _s1XTy::P64 = R2;
           R2 = R2;
           I64[Sp - 56] = stg_ap_pp_info;
           P64[Sp - 48] = R3;
           P64[Sp - 40] = R4;
           P64[Sp - 24] = _s1XTy::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 56;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$dmindex_info" {
     GHC.Arr.$dmindex_info:
         const GHC.Arr.$dmindex_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1YCH_srt+192;
 },
 _c26Z2() //  [R1]
         { []
         }
     {offset
       c26Z2: // global
           if (R1 & 7 == 1) goto c26Z5; else goto c26Z6;
       c26Z5: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c26Z6: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           Sp = Sp + 8;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26Z2_info" {
     block_c26Z2_info:
         const _c26Z2;
         const 3;
         const 4294967326;
         const S1YCH_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.698835142 UTC

[section ""data" . GHC.Arr.$fIxWord_$cindex_closure" {
     GHC.Arr.$fIxWord_$cindex_closure:
         const GHC.Arr.$fIxWord_$cindex_info;
         const 0;
 },
 GHC.Arr.$fIxWord_$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c26Zz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c26ZI; else goto c26ZJ;
       c26ZI: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxWord_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c26ZJ: // global
           I64[Sp - 16] = block_c26Zw_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u270l; else goto c26Zx;
       u270l: // global
           call _c26Zw(R1) args: 0, res: 0, upd: 0;
       c26Zx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxWord_$cindex_info" {
     GHC.Arr.$fIxWord_$cindex_info:
         const GHC.Arr.$fIxWord_$cindex_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S1YCH_srt+192;
 },
 _c26Zw() //  [R1]
         { []
         }
     {offset
       c26Zw: // global
           I64[Sp - 8] = block_c26ZC_info;
           _s1XTG::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XTG::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u270k; else goto c26ZD;
       u270k: // global
           call _c26ZC(R1) args: 0, res: 0, upd: 0;
       c26ZD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26Zw_info" {
     block_c26Zw_info:
         const _c26Zw;
         const 1;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c26ZC() //  [R1]
         { []
         }
     {offset
       c26ZC: // global
           I64[Sp] = block_c26ZH_info;
           _s1XTI::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1XTI::I64;
           if (R1 & 7 != 0) goto u270m; else goto c26ZM;
       u270m: // global
           call _c26ZH(R1) args: 0, res: 0, upd: 0;
       c26ZM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26ZC_info" {
     block_c26ZC_info:
         const _c26ZC;
         const 2;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c26ZH() //  [R1]
         { []
         }
     {offset
       c26ZH: // global
           _s1XTK::I64 = I64[R1 + 7];
           if (I64[Sp + 16] > _s1XTK::I64) goto c26ZU; else goto c26ZY;
       c26ZU: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c26ZY: // global
           I64[Sp] = block_c26ZX_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1XTK::I64;
           if (R1 & 7 != 0) goto u270n; else goto c26ZZ;
       u270n: // global
           call _c26ZX(R1) args: 0, res: 0, upd: 0;
       c26ZZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c26ZH_info" {
     block_c26ZH_info:
         const _c26ZH;
         const 130;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c26ZX() //  [R1]
         { []
         }
     {offset
       c26ZX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2705; else goto c2704;
       c2705: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2704: // global
           _s1XTK::I64 = I64[Sp + 8];
           if (_s1XTK::I64 > I64[R1 + 7]) goto c2709; else goto c270j;
       c2709: // global
           Hp = Hp - 16;
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c270j: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1XTK::I64 - I64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c26ZX_info" {
     block_c26ZX_info:
         const _c26ZX;
         const 194;
         const 4294967326;
         const S1YCH_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.714829707 UTC

[section ""data" . GHC.Arr.$fIx(,)_$s$cindex_closure" {
     GHC.Arr.$fIx(,)_$s$cindex_closure:
         const GHC.Arr.$fIx(,)_$s$cindex_info;
         const 0;
 },
 GHC.Arr.$fIx(,)_$s$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c270V: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c271o; else goto c271p;
       c271o: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$s$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c271p: // global
           I64[Sp - 16] = block_c270S_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u272H; else goto c270T;
       u272H: // global
           call _c270S(R1) args: 0, res: 0, upd: 0;
       c270T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$s$cindex_info" {
     GHC.Arr.$fIx(,)_$s$cindex_info:
         const GHC.Arr.$fIx(,)_$s$cindex_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S1YCH_srt+192;
 },
 _c270S() //  [R1]
         { []
         }
     {offset
       c270S: // global
           I64[Sp - 8] = block_c270Y_info;
           _s1XTV::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XTV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u272G; else goto c270Z;
       u272G: // global
           call _c270Y(R1) args: 0, res: 0, upd: 0;
       c270Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c270S_info" {
     block_c270S_info:
         const _c270S;
         const 1;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c270Y() //  [R1]
         { []
         }
     {offset
       c270Y: // global
           I64[Sp - 8] = block_c2713_info;
           _s1XTX::P64 = P64[R1 + 7];
           _s1XTY::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1XTY::P64;
           P64[Sp + 8] = _s1XTX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u272I; else goto c2714;
       u272I: // global
           call _c2713(R1) args: 0, res: 0, upd: 0;
       c2714: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c270Y_info" {
     block_c270Y_info:
         const _c270Y;
         const 2;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c2713() //  [R1]
         { []
         }
     {offset
       c2713: // global
           I64[Sp - 8] = block_c2718_info;
           _s1XU0::P64 = P64[R1 + 7];
           _s1XU1::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _s1XU1::P64;
           P64[Sp + 24] = _s1XU0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u272J; else goto c2719;
       u272J: // global
           call _c2718(R1) args: 0, res: 0, upd: 0;
       c2719: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2713_info" {
     block_c2713_info:
         const _c2713;
         const 3;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c2718() //  [R1]
         { []
         }
     {offset
       c2718: // global
           I64[Sp - 8] = block_c271d_info;
           _s1XU3::P64 = P64[R1 + 7];
           _s1XU4::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _s1XU4::P64;
           P64[Sp + 24] = _s1XU3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u272K; else goto c271e;
       u272K: // global
           call _c271d(R1) args: 0, res: 0, upd: 0;
       c271e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2718_info" {
     block_c2718_info:
         const _c2718;
         const 4;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c271d() //  [R1]
         { []
         }
     {offset
       c271d: // global
           I64[Sp] = block_c271i_info;
           _s1XU6::I64 = I64[R1 + 7];
           R1 = P64[Sp + 40];
           I64[Sp + 40] = _s1XU6::I64;
           if (R1 & 7 != 0) goto u272L; else goto c271j;
       u272L: // global
           call _c271i(R1) args: 0, res: 0, upd: 0;
       c271j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c271d_info" {
     block_c271d_info:
         const _c271d;
         const 5;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c271i() //  [R1]
         { []
         }
     {offset
       c271i: // global
           I64[Sp] = block_c271n_info;
           _s1XU8::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s1XU8::I64;
           if (R1 & 7 != 0) goto u272M; else goto c271w;
       u272M: // global
           call _c271n(R1) args: 0, res: 0, upd: 0;
       c271w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c271i_info" {
     block_c271i_info:
         const _c271i;
         const 1029;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c271n() //  [R1]
         { []
         }
     {offset
       c271n: // global
           _s1XUa::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(I64[Sp + 40],
                            _s1XUa::I64)) goto c271K; else goto c272F;
       c272F: // global
           if (%MO_S_Gt_W64(_s1XUa::I64,
                            I64[Sp + 32])) goto c271K; else goto c271Y;
       c271K: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c271Y: // global
           I64[Sp] = block_c271N_info;
           R1 = P64[Sp + 24];
           I64[Sp + 32] = _s1XUa::I64;
           if (R1 & 7 != 0) goto u272N; else goto c271O;
       u272N: // global
           call _c271N(R1) args: 0, res: 0, upd: 0;
       c271O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c271n_info" {
     block_c271n_info:
         const _c271n;
         const 1541;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c271N() //  [R1]
         { []
         }
     {offset
       c271N: // global
           I64[Sp] = block_c271S_info;
           _s1XUe::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 24] = _s1XUe::I64;
           if (R1 & 7 != 0) goto u272O; else goto c271T;
       u272O: // global
           call _c271S(R1) args: 0, res: 0, upd: 0;
       c271T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c271N_info" {
     block_c271N_info:
         const _c271N;
         const 1797;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c271S() //  [R1]
         { []
         }
     {offset
       c271S: // global
           _s1XU4::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c271X_info;
           _s1XUg::I64 = I64[R1 + 7];
           R1 = _s1XU4::P64;
           I64[Sp + 16] = _s1XUg::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u272P; else goto c2721;
       u272P: // global
           call _c271X(R1) args: 0, res: 0, upd: 0;
       c2721: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c271S_info" {
     block_c271S_info:
         const _c271S;
         const 1925;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c271X() //  [R1]
         { []
         }
     {offset
       c271X: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2727; else goto c2726;
       c2727: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2726: // global
           _s1XUe::I64 = I64[Sp + 16];
           _s1XUi::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s1XUe::I64,
                            _s1XUi::I64)) goto c272h; else goto c272E;
       c272E: // global
           _s1XUg::I64 = I64[Sp + 8];
           if (%MO_S_Gt_W64(_s1XUi::I64,
                            _s1XUg::I64)) goto c272h; else goto c272D;
       c272h: // global
           Hp = Hp - 16;
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c272D: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = (I64[Sp + 24] - I64[Sp + 32]) * (_s1XUg::I64 + (1 - _s1XUe::I64)) + (_s1XUi::I64 - _s1XUe::I64);
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c271X_info" {
     block_c271X_info:
         const _c271X;
         const 964;
         const 4294967326;
         const S1YCH_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.741084639 UTC

[section ""data" . GHC.Arr.$fIx(,)_$cindex_closure" {
     GHC.Arr.$fIx(,)_$cindex_closure:
         const GHC.Arr.$fIx(,)_$cindex_info;
         const 0;
 },
 GHC.Arr.$fIx(,)_$cindex_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c273T: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c2747; else goto c2748;
       c2747: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$cindex_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2748: // global
           I64[Sp - 32] = block_c273Q_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u275c; else goto c273R;
       u275c: // global
           call _c273Q(R1) args: 0, res: 0, upd: 0;
       c273R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$cindex_info" {
     GHC.Arr.$fIx(,)_$cindex_info:
         const GHC.Arr.$fIx(,)_$cindex_entry;
         const 0;
         const 73014444046;
         const 17179869208;
         const S1YCH_srt+192;
 },
 _c273Q() //  [R1]
         { []
         }
     {offset
       c273Q: // global
           I64[Sp - 8] = block_c273W_info;
           _s1XUx::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XUx::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u275b; else goto c273X;
       u275b: // global
           call _c273W(R1) args: 0, res: 0, upd: 0;
       c273X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c273Q_info" {
     block_c273Q_info:
         const _c273Q;
         const 3;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c273W() //  [R1]
         { []
         }
     {offset
       c273W: // global
           I64[Sp - 8] = block_c2741_info;
           _s1XUz::P64 = P64[R1 + 7];
           _s1XUA::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1XUA::P64;
           P64[Sp + 8] = _s1XUz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u275d; else goto c2742;
       u275d: // global
           call _c2741(R1) args: 0, res: 0, upd: 0;
       c2742: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c273W_info" {
     block_c273W_info:
         const _c273W;
         const 4;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c2741() //  [R1]
         { []
         }
     {offset
       c2741: // global
           I64[Sp - 8] = block_c2746_info;
           _s1XUC::P64 = P64[R1 + 7];
           _s1XUD::P64 = P64[R1 + 15];
           R1 = P64[Sp + 40];
           P64[Sp] = _s1XUD::P64;
           P64[Sp + 40] = _s1XUC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u275e; else goto c274c;
       u275e: // global
           call _c2746(R1) args: 0, res: 0, upd: 0;
       c274c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2741_info" {
     block_c2741_info:
         const _c2741;
         const 5;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c2746() //  [R1]
         { []
         }
     {offset
       c2746: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c274k; else goto c274j;
       c274k: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c274j: // global
           _s1XUF::P64 = P64[R1 + 7];
           _s1XUG::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 48];
           I64[Sp - 8] = block_c274h_info;
           R2 = P64[Sp + 32];
           I64[Sp - 32] = stg_ap_pp_info;
           _c274g::P64 = Hp - 15;
           P64[Sp - 24] = _c274g::P64;
           P64[Sp - 16] = _s1XUF::P64;
           P64[Sp] = _s1XUG::P64;
           P64[Sp + 24] = _s1XUF::P64;
           P64[Sp + 48] = _c274g::P64;
           Sp = Sp - 32;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2746_info" {
     block_c2746_info:
         const _c2746;
         const 6;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c274h() //  [R1]
         { []
         }
     {offset
       c274h: // global
           if (R1 & 7 == 1) goto u2759; else goto c274v;
       u2759: // global
           Sp = Sp + 64;
           call _c274E() args: 0, res: 0, upd: 0;
       c274v: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c274y; else goto c274x;
       c274y: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c274x: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 16];
           I64[Sp] = block_c274u_info;
           R2 = P64[Sp + 48];
           I64[Sp - 24] = stg_ap_pp_info;
           _c274t::P64 = Hp - 15;
           P64[Sp - 16] = _c274t::P64;
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp + 24] = _c274t::P64;
           Sp = Sp - 24;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c274h_info" {
     block_c274h_info:
         const _c274h;
         const 7;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c274u() //  [R1]
         { []
         }
     {offset
       c274u: // global
           if (R1 & 7 == 1) goto u275a; else goto c2751;
       u275a: // global
           Sp = Sp + 64;
           call _c274E() args: 0, res: 0, upd: 0;
       c2751: // global
           I64[Sp] = block_c274H_info;
           R2 = P64[Sp + 40];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 56];
           P64[Sp - 8] = P64[Sp + 32];
           Sp = Sp - 24;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c274u_info" {
     block_c274u_info:
         const _c274u;
         const 135;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c274E() //  []
         { []
         }
     {offset
       c274E: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c274H() //  [R1]
         { []
         }
     {offset
       c274H: // global
           I64[Sp] = block_c274L_info;
           R2 = P64[Sp + 48];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 24];
           I64[Sp + 56] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c274H_info" {
     block_c274H_info:
         const _c274H;
         const 5767;
         const 30;
 },
 _c274L() //  [R1]
         { []
         }
     {offset
       c274L: // global
           I64[Sp + 40] = block_c274P_info;
           R2 = P64[Sp + 48];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 32] = P64[Sp + 8];
           I64[Sp + 48] = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c274L_info" {
     block_c274L_info:
         const _c274L;
         const 5767;
         const 30;
 },
 _c274P() //  [R1]
         { []
         }
     {offset
       c274P: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2756; else goto c2755;
       c2756: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2755: // global
           _s1XUV::I64 = I64[Sp + 16] * I64[Sp + 8] + I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1XUV::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c274P_info" {
     block_c274P_info:
         const _c274P;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.768121442 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$s$cindex_closure" {
     GHC.Arr.$fIx(,,)_$s$cindex_closure:
         const GHC.Arr.$fIx(,,)_$s$cindex_info;
         const 0;
 },
 GHC.Arr.$fIx(,,)_$s$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c276k: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c276N; else goto c276O;
       c276N: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$s$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c276O: // global
           I64[Sp - 16] = block_c276h_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u278V; else goto c276i;
       u278V: // global
           call _c276h(R1) args: 0, res: 0, upd: 0;
       c276i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$s$cindex_info" {
     GHC.Arr.$fIx(,,)_$s$cindex_info:
         const GHC.Arr.$fIx(,,)_$s$cindex_entry;
         const 0;
         const 141733920782;
         const 8589934607;
         const S1YCH_srt+192;
 },
 _c276h() //  [R1]
         { []
         }
     {offset
       c276h: // global
           I64[Sp - 8] = block_c276n_info;
           _s1XV0::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XV0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u278U; else goto c276o;
       u278U: // global
           call _c276n(R1) args: 0, res: 0, upd: 0;
       c276o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c276h_info" {
     block_c276h_info:
         const _c276h;
         const 1;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c276n() //  [R1]
         { []
         }
     {offset
       c276n: // global
           I64[Sp - 16] = block_c276s_info;
           _s1XV2::P64 = P64[R1 + 7];
           _s1XV3::P64 = P64[R1 + 15];
           _s1XV4::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s1XV4::P64;
           P64[Sp] = _s1XV3::P64;
           P64[Sp + 8] = _s1XV2::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u278W; else goto c276t;
       u278W: // global
           call _c276s(R1) args: 0, res: 0, upd: 0;
       c276t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c276n_info" {
     block_c276n_info:
         const _c276n;
         const 2;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c276s() //  [R1]
         { []
         }
     {offset
       c276s: // global
           I64[Sp - 16] = block_c276x_info;
           _s1XV6::P64 = P64[R1 + 7];
           _s1XV7::P64 = P64[R1 + 15];
           _s1XV8::P64 = P64[R1 + 23];
           R1 = P64[Sp + 32];
           P64[Sp - 8] = _s1XV8::P64;
           P64[Sp] = _s1XV7::P64;
           P64[Sp + 32] = _s1XV6::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u278X; else goto c276y;
       u278X: // global
           call _c276x(R1) args: 0, res: 0, upd: 0;
       c276y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c276s_info" {
     block_c276s_info:
         const _c276s;
         const 4;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c276x() //  [R1]
         { []
         }
     {offset
       c276x: // global
           I64[Sp - 16] = block_c276C_info;
           _s1XVa::P64 = P64[R1 + 7];
           _s1XVb::P64 = P64[R1 + 15];
           _s1XVc::P64 = P64[R1 + 23];
           R1 = P64[Sp + 40];
           P64[Sp - 8] = _s1XVc::P64;
           P64[Sp] = _s1XVb::P64;
           P64[Sp + 40] = _s1XVa::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u278Y; else goto c276D;
       u278Y: // global
           call _c276C(R1) args: 0, res: 0, upd: 0;
       c276D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c276x_info" {
     block_c276x_info:
         const _c276x;
         const 6;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c276C() //  [R1]
         { []
         }
     {offset
       c276C: // global
           I64[Sp] = block_c276H_info;
           _s1XVe::I64 = I64[R1 + 7];
           R1 = P64[Sp + 64];
           I64[Sp + 64] = _s1XVe::I64;
           if (R1 & 7 != 0) goto u278Z; else goto c276I;
       u278Z: // global
           call _c276H(R1) args: 0, res: 0, upd: 0;
       c276I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c276C_info" {
     block_c276C_info:
         const _c276C;
         const 8;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c276H() //  [R1]
         { []
         }
     {offset
       c276H: // global
           I64[Sp] = block_c276M_info;
           _s1XVg::I64 = I64[R1 + 7];
           R1 = P64[Sp + 56];
           I64[Sp + 56] = _s1XVg::I64;
           if (R1 & 7 != 0) goto u2790; else goto c276V;
       u2790: // global
           call _c276M(R1) args: 0, res: 0, upd: 0;
       c276V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c276H_info" {
     block_c276H_info:
         const _c276H;
         const 8200;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c276M() //  [R1]
         { []
         }
     {offset
       c276M: // global
           _s1XVi::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(I64[Sp + 64],
                            _s1XVi::I64)) goto u278Q; else goto c278P;
       u278Q: // global
           Sp = Sp + 72;
           goto u2793;
       c278P: // global
           if (%MO_S_Gt_W64(_s1XVi::I64,
                            I64[Sp + 56])) goto u278R; else goto c277n;
       u278R: // global
           Sp = Sp + 72;
           goto u2793;
       u2793: // global
           call _c277E() args: 0, res: 0, upd: 0;
       c277n: // global
           I64[Sp] = block_c277c_info;
           R1 = P64[Sp + 48];
           I64[Sp + 56] = _s1XVi::I64;
           if (R1 & 7 != 0) goto u2791; else goto c277d;
       u2791: // global
           call _c277c(R1) args: 0, res: 0, upd: 0;
       c277d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c276M_info" {
     block_c276M_info:
         const _c276M;
         const 12296;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c277c() //  [R1]
         { []
         }
     {offset
       c277c: // global
           I64[Sp] = block_c277h_info;
           _s1XVm::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 48] = _s1XVm::I64;
           if (R1 & 7 != 0) goto u2794; else goto c277i;
       u2794: // global
           call _c277h(R1) args: 0, res: 0, upd: 0;
       c277i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c277c_info" {
     block_c277c_info:
         const _c277c;
         const 14344;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c277h() //  [R1]
         { []
         }
     {offset
       c277h: // global
           I64[Sp] = block_c277m_info;
           _s1XVo::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 32] = _s1XVo::I64;
           if (R1 & 7 != 0) goto u2795; else goto c277q;
       u2795: // global
           call _c277m(R1) args: 0, res: 0, upd: 0;
       c277q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c277h_info" {
     block_c277h_info:
         const _c277h;
         const 14856;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c277m() //  [R1]
         { []
         }
     {offset
       c277m: // global
           _s1XVq::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(I64[Sp + 48],
                            _s1XVq::I64)) goto u278S; else goto c278O;
       u278S: // global
           Sp = Sp + 72;
           goto u2798;
       c278O: // global
           if (%MO_S_Gt_W64(_s1XVq::I64,
                            I64[Sp + 32])) goto u278T; else goto c277S;
       u278T: // global
           Sp = Sp + 72;
           goto u2798;
       u2798: // global
           call _c277E() args: 0, res: 0, upd: 0;
       c277S: // global
           I64[Sp] = block_c277H_info;
           R1 = P64[Sp + 40];
           I64[Sp + 40] = _s1XVq::I64;
           if (R1 & 7 != 0) goto u2796; else goto c277I;
       u2796: // global
           call _c277H(R1) args: 0, res: 0, upd: 0;
       c277I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c277m_info" {
     block_c277m_info:
         const _c277m;
         const 14984;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c277E() //  []
         { []
         }
     {offset
       c277E: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c277H() //  [R1]
         { []
         }
     {offset
       c277H: // global
           I64[Sp] = block_c277M_info;
           _s1XVu::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s1XVu::I64;
           if (R1 & 7 != 0) goto u2799; else goto c277N;
       u2799: // global
           call _c277M(R1) args: 0, res: 0, upd: 0;
       c277N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c277H_info" {
     block_c277H_info:
         const _c277H;
         const 16008;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c277M() //  [R1]
         { []
         }
     {offset
       c277M: // global
           _s1XVc::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c277R_info;
           _s1XVw::I64 = I64[R1 + 7];
           R1 = _s1XVc::P64;
           I64[Sp + 16] = _s1XVw::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u279a; else goto c277V;
       u279a: // global
           call _c277R(R1) args: 0, res: 0, upd: 0;
       c277V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c277M_info" {
     block_c277M_info:
         const _c277M;
         const 16264;
         const 4294967326;
         const S1YCH_srt+192;
 },
 _c277R() //  [R1]
         { []
         }
     {offset
       c277R: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2781; else goto c2780;
       c2781: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2780: // global
           _s1XVu::I64 = I64[Sp + 16];
           _s1XVy::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s1XVu::I64,
                            _s1XVy::I64)) goto c278b; else goto c278N;
       c278N: // global
           _s1XVw::I64 = I64[Sp + 8];
           if (%MO_S_Gt_W64(_s1XVy::I64,
                            _s1XVw::I64)) goto c278b; else goto c278M;
       c278b: // global
           Hp = Hp - 16;
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 64;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c278M: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s1XVm::I64 = I64[Sp + 40];
           I64[Hp] = _s1XVy::I64 + ((_s1XVw::I64 + (1 - _s1XVu::I64)) * (I64[Sp + 32] + ((I64[Sp + 24] + (1 - _s1XVm::I64)) * (I64[Sp + 48] - I64[Sp + 56]) - _s1XVm::I64)) - _s1XVu::I64);
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c277R_info" {
     block_c277R_info:
         const _c277R;
         const 8135;
         const 4294967326;
         const S1YCH_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.796526529 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$cindex_closure" {
     GHC.Arr.$fIx(,,)_$cindex_closure:
         const GHC.Arr.$fIx(,,)_$cindex_info;
         const 0;
 },
 GHC.Arr.$fIx(,,)_$cindex_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c27aD: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c27aE; else goto c27aF;
       c27aE: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$cindex_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c27aF: // global
           I64[Sp - 48] = block_c27ax_info;
           _s1XVQ::P64 = R6;
           R6 = R6;
           _s1XVP::P64 = R5;
           R5 = R5;
           _s1XVO::P64 = R4;
           R4 = R4;
           _s1XVN::P64 = R3;
           R3 = R3;
           _s1XVM::P64 = R2;
           R2 = R2;
           P64[Sp - 40] = _s1XVM::P64;
           P64[Sp - 32] = _s1XVN::P64;
           P64[Sp - 24] = _s1XVO::P64;
           P64[Sp - 16] = _s1XVP::P64;
           P64[Sp - 8] = _s1XVQ::P64;
           Sp = Sp - 48;
           call GHC.Arr.$fIx(,,)_$cinRange_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$cindex_info" {
     GHC.Arr.$fIx(,,)_$cindex_info:
         const GHC.Arr.$fIx(,,)_$cindex_entry;
         const 0;
         const 279172874254;
         const 21474836505;
         const S1YCH_srt+192;
 },
 _c27ax() //  [R1]
         { []
         }
     {offset
       c27ax: // global
           if (R1 & 7 == 1) goto c27aA; else goto c27aB;
       c27aA: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c27aB: // global
           R6 = P64[Sp + 40];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 48;
           call GHC.Arr.$fIx(,,)_$cunsafeIndex_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27ax_info" {
     block_c27ax_info:
         const _c27ax;
         const 5;
         const 4294967326;
         const S1YCH_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.802302997 UTC

[section ""cstring" . lvl11_r1Xvo_bytes" {
     lvl11_r1Xvo_bytes:
         I8[] [67,104,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.80488965 UTC

[section ""data" . lvl12_r1Xvp_closure" {
     lvl12_r1Xvp_closure:
         const lvl12_r1Xvp_info;
         const 0;
         const 0;
         const 0;
 },
 lvl12_r1Xvp_entry() //  [R1]
         { []
         }
     {offset
       c27b4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27b5; else goto c27b6;
       c27b5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27b6: // global
           (_c27b1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c27b1::I64 == 0) goto c27b3; else goto c27b2;
       c27b3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c27b2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c27b1::I64;
           R2 = lvl11_r1Xvo_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl12_r1Xvp_info" {
     lvl12_r1Xvp_info:
         const lvl12_r1Xvp_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.810392302 UTC

[section ""data" . GHC.Arr.$fIxChar_$cunsafeRangeSize_closure" {
     GHC.Arr.$fIxChar_$cunsafeRangeSize_closure:
         const GHC.Arr.$fIxChar_$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIxChar_$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c27bl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27bL; else goto c27bM;
       c27bL: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxChar_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c27bM: // global
           I64[Sp - 8] = block_c27bi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u27bT; else goto c27bj;
       u27bT: // global
           call _c27bi(R1) args: 0, res: 0, upd: 0;
       c27bj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxChar_$cunsafeRangeSize_info" {
     GHC.Arr.$fIxChar_$cunsafeRangeSize_info:
         const GHC.Arr.$fIxChar_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c27bi() //  [R1]
         { []
         }
     {offset
       c27bi: // global
           I64[Sp - 8] = block_c27bo_info;
           _s1XVU::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s1XVU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u27bS; else goto c27bp;
       u27bS: // global
           call _c27bo(R1) args: 0, res: 0, upd: 0;
       c27bp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27bi_info" {
     block_c27bi_info:
         const _c27bi;
         const 0;
         const 30;
 },
 _c27bo() //  [R1]
         { []
         }
     {offset
       c27bo: // global
           I64[Sp] = block_c27bt_info;
           _s1XVX::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1XVX::I64;
           if (R1 & 7 != 0) goto u27bU; else goto c27bu;
       u27bU: // global
           call _c27bt(R1) args: 0, res: 0, upd: 0;
       c27bu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27bo_info" {
     block_c27bo_info:
         const _c27bo;
         const 1;
         const 30;
 },
 _c27bt() //  [R1]
         { []
         }
     {offset
       c27bt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c27bR; else goto c27bQ;
       c27bR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27bQ: // global
           _s1XW3::I64 = I64[Sp + 8] - I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1XW3::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27bt_info" {
     block_c27bt_info:
         const _c27bt;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.821665799 UTC

[section ""data" . GHC.Arr.$fIxChar_$crangeSize_closure" {
     GHC.Arr.$fIxChar_$crangeSize_closure:
         const GHC.Arr.$fIxChar_$crangeSize_info;
 },
 GHC.Arr.$fIxChar_$crangeSize_entry() //  [R2]
         { []
         }
     {offset
       c27cn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27cw; else goto c27cx;
       c27cw: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxChar_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c27cx: // global
           I64[Sp - 8] = block_c27ck_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u27d2; else goto c27cl;
       u27d2: // global
           call _c27ck(R1) args: 0, res: 0, upd: 0;
       c27cl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxChar_$crangeSize_info" {
     GHC.Arr.$fIxChar_$crangeSize_info:
         const GHC.Arr.$fIxChar_$crangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c27ck() //  [R1]
         { []
         }
     {offset
       c27ck: // global
           I64[Sp - 8] = block_c27cq_info;
           _s1XW7::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XW7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u27d1; else goto c27cr;
       u27d1: // global
           call _c27cq(R1) args: 0, res: 0, upd: 0;
       c27cr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27ck_info" {
     block_c27ck_info:
         const _c27ck;
         const 0;
         const 30;
 },
 _c27cq() //  [R1]
         { []
         }
     {offset
       c27cq: // global
           I64[Sp] = block_c27cv_info;
           _s1XW9::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1XW9::I64;
           if (R1 & 7 != 0) goto u27d3; else goto c27cA;
       u27d3: // global
           call _c27cv(R1) args: 0, res: 0, upd: 0;
       c27cA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27cq_info" {
     block_c27cq_info:
         const _c27cq;
         const 1;
         const 30;
 },
 _c27cv() //  [R1]
         { []
         }
     {offset
       c27cv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c27cG; else goto c27cF;
       c27cG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27cF: // global
           _s1XW9::I64 = I64[Sp + 8];
           _s1XWb::I64 = I64[R1 + 7];
           if (_s1XW9::I64 > _s1XWb::I64) goto c27cK; else goto c27d0;
       c27cK: // global
           Hp = Hp - 16;
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c27d0: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1XWb::I64 - _s1XW9::I64 + 1;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27cv_info" {
     block_c27cv_info:
         const _c27cv;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.830737878 UTC

[section ""cstring" . lvl13_r1Xvq_bytes" {
     lvl13_r1Xvq_bytes:
         I8[] [73,110,116,101,103,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.833110031 UTC

[section ""data" . lvl14_r1Xvr_closure" {
     lvl14_r1Xvr_closure:
         const lvl14_r1Xvr_info;
         const 0;
         const 0;
         const 0;
 },
 lvl14_r1Xvr_entry() //  [R1]
         { []
         }
     {offset
       c27dx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27dy; else goto c27dz;
       c27dy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27dz: // global
           (_c27du::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c27du::I64 == 0) goto c27dw; else goto c27dv;
       c27dw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c27dv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c27du::I64;
           R2 = lvl13_r1Xvq_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl14_r1Xvr_info" {
     lvl14_r1Xvr_info:
         const lvl14_r1Xvr_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.838792217 UTC

[section ""data" . GHC.Arr.$fIxInteger_$cunsafeRangeSize_closure" {
     GHC.Arr.$fIxInteger_$cunsafeRangeSize_closure:
         const GHC.Arr.$fIxInteger_$cunsafeRangeSize_info;
         const 0;
 },
 GHC.Arr.$fIxInteger_$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c27dO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c27e3; else goto c27e4;
       c27e3: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxInteger_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c27e4: // global
           I64[Sp - 8] = block_c27dL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u27ea; else goto c27dM;
       u27ea: // global
           call _c27dL(R1) args: 0, res: 0, upd: 0;
       c27dM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInteger_$cunsafeRangeSize_info" {
     GHC.Arr.$fIxInteger_$cunsafeRangeSize_info:
         const GHC.Arr.$fIxInteger_$cunsafeRangeSize_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1YCH_srt+248;
 },
 _c27dL() //  [R1]
         { []
         }
     {offset
       c27dL: // global
           I64[Sp] = block_c27dR_info;
           R3 = P64[R1 + 7];
           R2 = P64[R1 + 15];
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27dL_info" {
     block_c27dL_info:
         const _c27dL;
         const 0;
         const 4294967326;
         const S1YCH_srt+248;
 },
 _c27dR() //  [R1]
         { []
         }
     {offset
       c27dR: // global
           I64[Sp] = block_c27dV_info;
           R2 = R1;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27dR_info" {
     block_c27dR_info:
         const _c27dR;
         const 0;
         const 30;
 },
 _c27dV() //  [R1]
         { []
         }
     {offset
       c27dV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c27e9; else goto c27e8;
       c27e9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c27e8: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1 + 1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27dV_info" {
     block_c27dV_info:
         const _c27dV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.849634091 UTC

[section ""data" . GHC.Arr.$w$crangeSize2_closure" {
     GHC.Arr.$w$crangeSize2_closure:
         const GHC.Arr.$w$crangeSize2_info;
         const 0;
 },
 GHC.Arr.$w$crangeSize2_entry() //  [R2, R3]
         { []
         }
     {offset
       c27eB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c27eC; else goto c27eD;
       c27eC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$w$crangeSize2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27eD: // global
           I64[Sp - 24] = block_c27ew_info;
           _s1XWp::P64 = R3;
           R3 = R3;
           _s1XWo::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s1XWo::P64;
           P64[Sp - 8] = _s1XWp::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$crangeSize2_info" {
     GHC.Arr.$w$crangeSize2_info:
         const GHC.Arr.$w$crangeSize2_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S1YCH_srt+248;
 },
 _c27ew() //  [R1]
         { []
         }
     {offset
       c27ew: // global
           if (R1 == 1) goto c27eA; else goto u27f6;
       c27eA: // global
           I64[Sp] = block_c27eJ_info;
           _s1XWp::P64 = P64[Sp + 16];
           R3 = _s1XWp::P64;
           R2 = _s1XWp::P64;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       u27f6: // global
           Sp = Sp + 24;
           call _c27eQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c27ew_info" {
     block_c27ew_info:
         const _c27ew;
         const 2;
         const 4294967326;
         const S1YCH_srt+248;
 },
 _c27eJ() //  [R1]
         { []
         }
     {offset
       c27eJ: // global
           if (R1 == 1) goto c27f3; else goto u27f7;
       c27f3: // global
           _s1XWp::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c27eT_info;
           R3 = P64[Sp + 8];
           R2 = _s1XWp::P64;
           Sp = Sp + 16;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
       u27f7: // global
           Sp = Sp + 24;
           call _c27eQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c27eJ_info" {
     block_c27eJ_info:
         const _c27eJ;
         const 2;
         const 4294967326;
         const S1YCH_srt+248;
 },
 _c27eT() //  [R1]
         { []
         }
     {offset
       c27eT: // global
           I64[Sp] = block_c27eX_info;
           R2 = R1;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27eT_info" {
     block_c27eT_info:
         const _c27eT;
         const 0;
         const 30;
 },
 _c27eX() //  [R1]
         { []
         }
     {offset
       c27eX: // global
           R1 = R1 + 1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27eX_info" {
     block_c27eX_info:
         const _c27eX;
         const 0;
         const 30;
 },
 _c27eQ() //  []
         { []
         }
     {offset
       c27eQ: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.862267237 UTC

[section ""data" . GHC.Arr.$fIxInteger_$crangeSize_closure" {
     GHC.Arr.$fIxInteger_$crangeSize_closure:
         const GHC.Arr.$fIxInteger_$crangeSize_info;
         const 0;
 },
 GHC.Arr.$fIxInteger_$crangeSize_entry() //  [R2]
         { []
         }
     {offset
       c27fC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c27fK; else goto c27fL;
       c27fK: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxInteger_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c27fL: // global
           I64[Sp - 8] = block_c27fz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u27fQ; else goto c27fA;
       u27fQ: // global
           call _c27fz(R1) args: 0, res: 0, upd: 0;
       c27fA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInteger_$crangeSize_info" {
     GHC.Arr.$fIxInteger_$crangeSize_info:
         const GHC.Arr.$fIxInteger_$crangeSize_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1YCH_srt+264;
 },
 _c27fz() //  [R1]
         { []
         }
     {offset
       c27fz: // global
           I64[Sp] = block_c27fF_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$w$crangeSize2_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27fz_info" {
     block_c27fz_info:
         const _c27fz;
         const 0;
         const 4294967326;
         const S1YCH_srt+264;
 },
 _c27fF() //  [R1]
         { []
         }
     {offset
       c27fF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c27fP; else goto c27fO;
       c27fP: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c27fO: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27fF_info" {
     block_c27fF_info:
         const _c27fF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.869611633 UTC

[section ""cstring" . lvl15_r1Xvs_bytes" {
     lvl15_r1Xvs_bytes:
         I8[] [66,111,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.871962991 UTC

[section ""data" . lvl16_r1Xvt_closure" {
     lvl16_r1Xvt_closure:
         const lvl16_r1Xvt_info;
         const 0;
         const 0;
         const 0;
 },
 lvl16_r1Xvt_entry() //  [R1]
         { []
         }
     {offset
       c27gb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27gc; else goto c27gd;
       c27gc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27gd: // global
           (_c27g8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c27g8::I64 == 0) goto c27ga; else goto c27g9;
       c27ga: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c27g9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c27g8::I64;
           R2 = lvl15_r1Xvs_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl16_r1Xvt_info" {
     lvl16_r1Xvt_info:
         const lvl16_r1Xvt_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.875927082 UTC

[section ""data" . lvl17_r1Xvu_closure" {
     lvl17_r1Xvu_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.878047105 UTC

[section ""data" . lvl18_r1Xvv_closure" {
     lvl18_r1Xvv_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.882410691 UTC

[section ""data" . GHC.Arr.$fIxBool_$cunsafeRangeSize_closure" {
     GHC.Arr.$fIxBool_$cunsafeRangeSize_closure:
         const GHC.Arr.$fIxBool_$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIxBool_$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c27gu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27gv; else goto c27gw;
       c27gv: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxBool_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c27gw: // global
           I64[Sp - 8] = block_c27gr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u27hg; else goto c27gs;
       u27hg: // global
           call _c27gr(R1) args: 0, res: 0, upd: 0;
       c27gs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxBool_$cunsafeRangeSize_info" {
     GHC.Arr.$fIxBool_$cunsafeRangeSize_info:
         const GHC.Arr.$fIxBool_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c27gr() //  [R1]
         { []
         }
     {offset
       c27gr: // global
           I64[Sp - 8] = block_c27gz_info;
           _s1XWB::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s1XWB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u27hf; else goto c27gB;
       u27hf: // global
           call _c27gz(R1) args: 0, res: 0, upd: 0;
       c27gB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27gr_info" {
     block_c27gr_info:
         const _c27gr;
         const 0;
         const 30;
 },
 _c27gz() //  [R1]
         { []
         }
     {offset
       c27gz: // global
           _s1XWB::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c27gI; else goto c27gY;
       c27gI: // global
           I64[Sp + 8] = block_c27gF_info;
           R1 = _s1XWB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u27hh; else goto c27gJ;
       u27hh: // global
           call _c27gF(R1) args: 0, res: 0, upd: 0;
       c27gJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c27gY: // global
           I64[Sp + 8] = block_c27gW_info;
           R1 = _s1XWB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u27hi; else goto c27gZ;
       u27hi: // global
           call _c27gW(R1) args: 0, res: 0, upd: 0;
       c27gZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27gz_info" {
     block_c27gz_info:
         const _c27gz;
         const 1;
         const 30;
 },
 _c27gF() //  [R1]
         { []
         }
     {offset
       c27gF: // global
           if (R1 & 7 == 1) goto u27he; else goto c27gT;
       u27he: // global
           Sp = Sp + 8;
           call _c27h9() args: 0, res: 0, upd: 0;
       c27gT: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27gF_info" {
     block_c27gF_info:
         const _c27gF;
         const 0;
         const 30;
 },
 _c27gW() //  [R1]
         { []
         }
     {offset
       c27gW: // global
           if (R1 & 7 == 1) goto c27h5; else goto u27hd;
       c27h5: // global
           R1 = lvl18_r1Xvv_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u27hd: // global
           Sp = Sp + 8;
           call _c27h9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c27gW_info" {
     block_c27gW_info:
         const _c27gW;
         const 0;
         const 30;
 },
 _c27h9() //  []
         { []
         }
     {offset
       c27h9: // global
           R1 = lvl17_r1Xvu_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.894054567 UTC

[section ""cstring" . lvl19_r1Xvw_bytes" {
     lvl19_r1Xvw_bytes:
         I8[] [79,114,100,101,114,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.896558425 UTC

[section ""data" . lvl20_r1Xvx_closure" {
     lvl20_r1Xvx_closure:
         const lvl20_r1Xvx_info;
         const 0;
         const 0;
         const 0;
 },
 lvl20_r1Xvx_entry() //  [R1]
         { []
         }
     {offset
       c27hY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27hZ; else goto c27i0;
       c27hZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27i0: // global
           (_c27hV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c27hV::I64 == 0) goto c27hX; else goto c27hW;
       c27hX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c27hW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c27hV::I64;
           R2 = lvl19_r1Xvw_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl20_r1Xvx_info" {
     lvl20_r1Xvx_info:
         const lvl20_r1Xvx_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.903994195 UTC

[section ""data" . GHC.Arr.$w$cunsafeRangeSize1_closure" {
     GHC.Arr.$w$cunsafeRangeSize1_closure:
         const GHC.Arr.$w$cunsafeRangeSize1_info;
 },
 GHC.Arr.$w$cunsafeRangeSize1_entry() //  [R2, R3]
         { []
         }
     {offset
       c27ik: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27il; else goto c27im;
       c27il: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$w$cunsafeRangeSize1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27im: // global
           I64[Sp - 16] = block_c27ic_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u27jz; else goto c27id;
       u27jz: // global
           call _c27ic(R1) args: 0, res: 0, upd: 0;
       c27id: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$cunsafeRangeSize1_info" {
     GHC.Arr.$w$cunsafeRangeSize1_info:
         const GHC.Arr.$w$cunsafeRangeSize1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c27ic() //  [R1]
         { []
         }
     {offset
       c27ic: // global
           _s1XWG::P64 = P64[Sp + 8];
           _c27ij::P64 = R1 & 7;
           if (_c27ij::P64 < 3) goto u27jl; else goto c27ii;
       u27jl: // global
           if (_c27ij::P64 < 2) goto c27ig; else goto c27ih;
       c27ig: // global
           I64[Sp + 8] = block_c27ip_info;
           R1 = _s1XWG::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u27jw; else goto c27ir;
       u27jw: // global
           call _c27ip(R1) args: 0, res: 0, upd: 0;
       c27ir: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c27ih: // global
           I64[Sp + 8] = block_c27iI_info;
           R1 = _s1XWG::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u27jx; else goto c27iK;
       u27jx: // global
           call _c27iI(R1) args: 0, res: 0, upd: 0;
       c27iK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c27ii: // global
           I64[Sp + 8] = block_c27j1_info;
           R1 = _s1XWG::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u27jy; else goto c27j3;
       u27jy: // global
           call _c27j1(R1) args: 0, res: 0, upd: 0;
       c27j3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27ic_info" {
     block_c27ic_info:
         const _c27ic;
         const 1;
         const 30;
 },
 _c27ip() //  [R1]
         { []
         }
     {offset
       c27ip: // global
           _c27jk::P64 = R1 & 7;
           if (_c27jk::P64 < 3) goto u27jm; else goto c27iF;
       u27jm: // global
           if (_c27jk::P64 < 2) goto u27jq; else goto u27jp;
       u27jq: // global
           Sp = Sp + 8;
           call _c27jh() args: 0, res: 0, upd: 0;
       u27jp: // global
           Sp = Sp + 8;
           call _c27iY() args: 0, res: 0, upd: 0;
       c27iF: // global
           R1 = (-1);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27ip_info" {
     block_c27ip_info:
         const _c27ip;
         const 0;
         const 30;
 },
 _c27iI() //  [R1]
         { []
         }
     {offset
       c27iI: // global
           _c27jj::P64 = R1 & 7;
           if (_c27jj::P64 < 3) goto u27jn; else goto u27jr;
       u27jn: // global
           if (_c27jj::P64 < 2) goto u27jt; else goto u27js;
       u27jt: // global
           Sp = Sp + 8;
           call _c27jd() args: 0, res: 0, upd: 0;
       u27js: // global
           Sp = Sp + 8;
           call _c27jh() args: 0, res: 0, upd: 0;
       u27jr: // global
           Sp = Sp + 8;
           call _c27iY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c27iI_info" {
     block_c27iI_info:
         const _c27iI;
         const 0;
         const 30;
 },
 _c27iY() //  []
         { []
         }
     {offset
       c27iY: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c27j1() //  [R1]
         { []
         }
     {offset
       c27j1: // global
           _c27ji::P64 = R1 & 7;
           if (_c27ji::P64 < 3) goto u27jo; else goto u27ju;
       u27jo: // global
           if (_c27ji::P64 < 2) goto c27j9; else goto u27jv;
       c27j9: // global
           R1 = 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u27jv: // global
           Sp = Sp + 8;
           call _c27jd() args: 0, res: 0, upd: 0;
       u27ju: // global
           Sp = Sp + 8;
           call _c27jh() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c27j1_info" {
     block_c27j1_info:
         const _c27j1;
         const 0;
         const 30;
 },
 _c27jd() //  []
         { []
         }
     {offset
       c27jd: // global
           R1 = 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c27jh() //  []
         { []
         }
     {offset
       c27jh: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.918687422 UTC

[section ""data" . GHC.Arr.$fIxOrdering_$cunsafeRangeSize_closure" {
     GHC.Arr.$fIxOrdering_$cunsafeRangeSize_closure:
         const GHC.Arr.$fIxOrdering_$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIxOrdering_$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c27ko: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c27kw; else goto c27kx;
       c27kw: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxOrdering_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c27kx: // global
           I64[Sp - 8] = block_c27kl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u27kC; else goto c27km;
       u27kC: // global
           call _c27kl(R1) args: 0, res: 0, upd: 0;
       c27km: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxOrdering_$cunsafeRangeSize_info" {
     GHC.Arr.$fIxOrdering_$cunsafeRangeSize_info:
         const GHC.Arr.$fIxOrdering_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c27kl() //  [R1]
         { []
         }
     {offset
       c27kl: // global
           I64[Sp] = block_c27kr_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$w$cunsafeRangeSize1_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27kl_info" {
     block_c27kl_info:
         const _c27kl;
         const 0;
         const 30;
 },
 _c27kr() //  [R1]
         { []
         }
     {offset
       c27kr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c27kB; else goto c27kA;
       c27kB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c27kA: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27kr_info" {
     block_c27kr_info:
         const _c27kr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.9258348 UTC

[section ""data" . GHC.Arr.$dmunsafeIndex_closure" {
     GHC.Arr.$dmunsafeIndex_closure:
         const GHC.Arr.$dmunsafeIndex_info;
 },
 GHC.Arr.$dmunsafeIndex_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c27kU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c27kV; else goto c27kW;
       c27kV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$dmunsafeIndex_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c27kW: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Arr.index_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$dmunsafeIndex_info" {
     GHC.Arr.$dmunsafeIndex_info:
         const GHC.Arr.$dmunsafeIndex_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.930864394 UTC

[section ""data" . GHC.Arr.$fIx()_$cunsafeRangeSize_closure" {
     GHC.Arr.$fIx()_$cunsafeRangeSize_closure:
         const GHC.Arr.$fIx()_$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIx()_$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c27l9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27li; else goto c27lj;
       c27li: // global
           R2 = R2;
           R1 = GHC.Arr.$fIx()_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c27lj: // global
           I64[Sp - 8] = block_c27l6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u27ls; else goto c27l7;
       u27ls: // global
           call _c27l6(R1) args: 0, res: 0, upd: 0;
       c27l7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx()_$cunsafeRangeSize_info" {
     GHC.Arr.$fIx()_$cunsafeRangeSize_info:
         const GHC.Arr.$fIx()_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c27l6() //  [R1]
         { []
         }
     {offset
       c27l6: // global
           I64[Sp - 8] = block_c27lc_info;
           _s1XWX::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XWX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u27lr; else goto c27ld;
       u27lr: // global
           call _c27lc() args: 0, res: 0, upd: 0;
       c27ld: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27l6_info" {
     block_c27l6_info:
         const _c27l6;
         const 0;
         const 30;
 },
 _c27lc() //  []
         { []
         }
     {offset
       c27lc: // global
           _s1XWX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c27lh_info;
           R1 = _s1XWX::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u27lt; else goto c27lm;
       u27lt: // global
           call _c27lh() args: 0, res: 0, upd: 0;
       c27lm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27lc_info" {
     block_c27lc_info:
         const _c27lc;
         const 1;
         const 30;
 },
 _c27lh() //  []
         { []
         }
     {offset
       c27lh: // global
           R1 = lvl17_r1Xvu_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27lh_info" {
     block_c27lh_info:
         const _c27lh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.941425908 UTC

[section ""data" . GHC.Arr.$dmrangeSize_closure" {
     GHC.Arr.$dmrangeSize_closure:
         const GHC.Arr.$dmrangeSize_info;
 },
 GHC.Arr.$dmrangeSize_entry() //  [R2, R3]
         { []
         }
     {offset
       c27lT: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c27lU; else goto c27lV;
       c27lU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$dmrangeSize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27lV: // global
           I64[Sp - 16] = block_c27lQ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u27mm; else goto c27lR;
       u27mm: // global
           call _c27lQ(R1) args: 0, res: 0, upd: 0;
       c27lR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$dmrangeSize_info" {
     GHC.Arr.$dmrangeSize_info:
         const GHC.Arr.$dmrangeSize_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c27lQ() //  [R1]
         { []
         }
     {offset
       c27lQ: // global
           I64[Sp - 16] = block_c27lY_info;
           R2 = P64[Sp + 8];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = R1;
           _s1XX4::P64 = P64[R1 + 15];
           P64[Sp - 24] = _s1XX4::P64;
           P64[Sp - 8] = _s1XX4::P64;
           P64[Sp] = R1;
           Sp = Sp - 40;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27lQ_info" {
     block_c27lQ_info:
         const _c27lQ;
         const 1;
         const 30;
 },
 _c27lY() //  [R1]
         { []
         }
     {offset
       c27lY: // global
           if (R1 & 7 == 1) goto c27m5; else goto c27mh;
       c27m5: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c27mh: // global
           _s1XX0::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c27m8_info;
           R2 = _s1XX0::P64;
           I64[Sp] = stg_ap_pp_info;
           _s1XX4::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _s1XX4::P64;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27lY_info" {
     block_c27lY_info:
         const _c27lY;
         const 3;
         const 30;
 },
 _c27m8() //  [R1]
         { []
         }
     {offset
       c27m8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c27mk; else goto c27mj;
       c27mk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27mj: // global
           _s1XX8::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1XX8::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27m8_info" {
     block_c27m8_info:
         const _c27m8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.952382651 UTC

[section ""data" . GHC.Arr.$dmunsafeRangeSize_closure" {
     GHC.Arr.$dmunsafeRangeSize_closure:
         const GHC.Arr.$dmunsafeRangeSize_info;
 },
 GHC.Arr.$dmunsafeRangeSize_entry() //  [R2, R3]
         { []
         }
     {offset
       c27mP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c27n0; else goto c27n1;
       c27n0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$dmunsafeRangeSize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27n1: // global
           I64[Sp - 16] = block_c27mM_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u27n6; else goto c27mN;
       u27n6: // global
           call _c27mM(R1) args: 0, res: 0, upd: 0;
       c27mN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$dmunsafeRangeSize_info" {
     GHC.Arr.$dmunsafeRangeSize_info:
         const GHC.Arr.$dmunsafeRangeSize_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c27mM() //  [R1]
         { []
         }
     {offset
       c27mM: // global
           _s1XX9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c27mS_info;
           R2 = _s1XX9::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = R1;
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 16;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27mM_info" {
     block_c27mM_info:
         const _c27mM;
         const 1;
         const 30;
 },
 _c27mS() //  [R1]
         { []
         }
     {offset
       c27mS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c27n5; else goto c27n4;
       c27n5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27n4: // global
           _s1XXg::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1XXg::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27mS_info" {
     block_c27mS_info:
         const _c27mS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.961958949 UTC

[section ""data" . GHC.Arr.$fEqSTArray_$c/=_closure" {
     GHC.Arr.$fEqSTArray_$c/=_closure:
         const GHC.Arr.$fEqSTArray_$c/=_info;
 },
 GHC.Arr.$fEqSTArray_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c27nt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27nx; else goto c27ny;
       c27nx: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fEqSTArray_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27ny: // global
           I64[Sp - 16] = block_c27nq_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u27nV; else goto c27nr;
       u27nV: // global
           call _c27nq(R1) args: 0, res: 0, upd: 0;
       c27nr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fEqSTArray_$c/=_info" {
     GHC.Arr.$fEqSTArray_$c/=_info:
         const GHC.Arr.$fEqSTArray_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c27nq() //  [R1]
         { []
         }
     {offset
       c27nq: // global
           I64[Sp] = block_c27nw_info;
           _s1XXn::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1XXn::P64;
           if (R1 & 7 != 0) goto u27nU; else goto c27nA;
       u27nU: // global
           call _c27nw(R1) args: 0, res: 0, upd: 0;
       c27nA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27nq_info" {
     block_c27nq_info:
         const _c27nq;
         const 1;
         const 30;
 },
 _c27nw() //  [R1]
         { []
         }
     {offset
       c27nw: // global
           if (P64[Sp + 8] == P64[R1 + 23]) goto c27nQ; else goto c27nK;
       c27nQ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c27nK: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27nw_info" {
     block_c27nw_info:
         const _c27nw;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.970396124 UTC

[section ""data" . GHC.Arr.$fEqSTArray_$c==_closure" {
     GHC.Arr.$fEqSTArray_$c==_closure:
         const GHC.Arr.$fEqSTArray_$c==_info;
 },
 GHC.Arr.$fEqSTArray_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c27oj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27on; else goto c27oo;
       c27on: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fEqSTArray_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27oo: // global
           I64[Sp - 16] = block_c27og_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u27ox; else goto c27oh;
       u27ox: // global
           call _c27og(R1) args: 0, res: 0, upd: 0;
       c27oh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fEqSTArray_$c==_info" {
     GHC.Arr.$fEqSTArray_$c==_info:
         const GHC.Arr.$fEqSTArray_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c27og() //  [R1]
         { []
         }
     {offset
       c27og: // global
           I64[Sp] = block_c27om_info;
           _s1XXA::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1XXA::P64;
           if (R1 & 7 != 0) goto u27ow; else goto c27oq;
       u27ow: // global
           call _c27om(R1) args: 0, res: 0, upd: 0;
       c27oq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27og_info" {
     block_c27og_info:
         const _c27og;
         const 1;
         const 30;
 },
 _c27om() //  [R1]
         { []
         }
     {offset
       c27om: // global
           R1 = I64[((P64[Sp + 8] == P64[R1 + 23]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27om_info" {
     block_c27om_info:
         const _c27om;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.97720538 UTC

[section ""data" . GHC.Arr.$fEqSTArray_closure" {
     GHC.Arr.$fEqSTArray_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Arr.$fEqSTArray_$c==_closure+2;
         const GHC.Arr.$fEqSTArray_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:39.989126844 UTC

[section ""data" . GHC.Arr.$w$cp1Ix1_closure" {
     GHC.Arr.$w$cp1Ix1_closure:
         const GHC.Arr.$w$cp1Ix1_info;
 },
 lvl50_s1XXM_entry() //  [R1]
         { []
         }
     {offset
       c27oY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27oZ; else goto c27p0;
       c27oZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27p0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl50_s1XXM_info" {
     lvl50_s1XXM_info:
         const lvl50_s1XXM_entry;
         const 1;
         const 16;
 },
 lvl51_s1XXN_entry() //  [R1]
         { []
         }
     {offset
       c27p5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27p6; else goto c27p7;
       c27p6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27p7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl51_s1XXN_info" {
     lvl51_s1XXN_info:
         const lvl51_s1XXN_entry;
         const 1;
         const 16;
 },
 lvl52_s1XXO_entry() //  [R1]
         { []
         }
     {offset
       c27pc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27pd; else goto c27pe;
       c27pd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27pe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl52_s1XXO_info" {
     lvl52_s1XXO_info:
         const lvl52_s1XXO_entry;
         const 1;
         const 16;
 },
 lvl53_s1XXP_entry() //  [R1]
         { []
         }
     {offset
       c27pj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27pk; else goto c27pl;
       c27pk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27pl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl53_s1XXP_info" {
     lvl53_s1XXP_info:
         const lvl53_s1XXP_entry;
         const 1;
         const 16;
 },
 lvl54_s1XXQ_entry() //  [R1]
         { []
         }
     {offset
       c27pq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27pr; else goto c27ps;
       c27pr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27ps: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl54_s1XXQ_info" {
     lvl54_s1XXQ_info:
         const lvl54_s1XXQ_entry;
         const 1;
         const 16;
 },
 sat_s1XYf_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c27pE: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c27pF; else goto c27pG;
       c27pF: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27pG: // global
           I64[Sp - 24] = block_c27py_info;
           R6 = P64[R1 + 6];
           R5 = P64[R1 + 14];
           R4 = P64[R1 + 22];
           _s1XYd::P64 = R3;
           R3 = P64[R1 + 30];
           _s1XYc::P64 = R2;
           R2 = P64[R1 + 38];
           P64[Sp - 40] = _s1XYd::P64;
           P64[Sp - 32] = _s1XYc::P64;
           P64[Sp - 16] = _s1XYc::P64;
           P64[Sp - 8] = _s1XYd::P64;
           Sp = Sp - 40;
           call GHC.Classes.$fOrd(,,,,)_$c<_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1XYf_info" {
     sat_s1XYf_info:
         const sat_s1XYf_entry;
         const 5;
         const 8;
         const 8589934607;
 },
 _c27py() //  [R1]
         { []
         }
     {offset
       c27py: // global
           if (R1 & 7 == 1) goto c27pB; else goto c27pC;
       c27pB: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c27pC: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27py_info" {
     block_c27py_info:
         const _c27py;
         const 2;
         const 30;
 },
 sat_s1XYb_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c27pY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c27pZ; else goto c27q0;
       c27pZ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27q0: // global
           I64[Sp - 24] = block_c27pS_info;
           R6 = P64[R1 + 6];
           R5 = P64[R1 + 14];
           R4 = P64[R1 + 22];
           _s1XY9::P64 = R3;
           R3 = P64[R1 + 30];
           _s1XY8::P64 = R2;
           R2 = P64[R1 + 38];
           P64[Sp - 40] = _s1XY9::P64;
           P64[Sp - 32] = _s1XY8::P64;
           P64[Sp - 16] = _s1XY8::P64;
           P64[Sp - 8] = _s1XY9::P64;
           Sp = Sp - 40;
           call GHC.Classes.$fOrd(,,,,)_$c<_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1XYb_info" {
     sat_s1XYb_info:
         const sat_s1XYb_entry;
         const 5;
         const 8;
         const 8589934607;
 },
 _c27pS() //  [R1]
         { []
         }
     {offset
       c27pS: // global
           if (R1 & 7 == 1) goto c27pV; else goto c27pW;
       c27pV: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c27pW: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27pS_info" {
     block_c27pS_info:
         const _c27pS;
         const 2;
         const 30;
 },
 sat_s1XY7_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c27qi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c27qj; else goto c27qk;
       c27qj: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27qk: // global
           I64[Sp - 8] = block_c27qc_info;
           R6 = P64[R1 + 6];
           R5 = P64[R1 + 14];
           R4 = P64[R1 + 22];
           _s1XY5::P64 = R3;
           R3 = P64[R1 + 30];
           _s1XY4::P64 = R2;
           R2 = P64[R1 + 38];
           P64[Sp - 24] = _s1XY4::P64;
           P64[Sp - 16] = _s1XY5::P64;
           Sp = Sp - 24;
           call GHC.Classes.$fOrd(,,,,)_$c<_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1XY7_info" {
     sat_s1XY7_info:
         const sat_s1XY7_entry;
         const 5;
         const 8;
         const 8589934607;
 },
 _c27qc() //  [R1]
         { []
         }
     {offset
       c27qc: // global
           if (R1 & 7 == 1) goto c27qf; else goto c27qg;
       c27qf: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c27qg: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27qc_info" {
     block_c27qc_info:
         const _c27qc;
         const 0;
         const 30;
 },
 sat_s1XY3_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c27qw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27qx; else goto c27qy;
       c27qx: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27qy: // global
           R6 = P64[R1 + 6];
           R5 = P64[R1 + 14];
           R4 = P64[R1 + 22];
           _s1XY2::P64 = R3;
           R3 = P64[R1 + 30];
           _s1XY1::P64 = R2;
           R2 = P64[R1 + 38];
           P64[Sp - 16] = _s1XY2::P64;
           P64[Sp - 8] = _s1XY1::P64;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,,,,)_$c<_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1XY3_info" {
     sat_s1XY3_info:
         const sat_s1XY3_entry;
         const 5;
         const 8;
         const 8589934607;
 },
 sat_s1XY0_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c27qK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c27qL; else goto c27qM;
       c27qL: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27qM: // global
           I64[Sp - 8] = block_c27qE_info;
           R6 = P64[R1 + 6];
           R5 = P64[R1 + 14];
           R4 = P64[R1 + 22];
           _s1XXY::P64 = R3;
           R3 = P64[R1 + 30];
           _s1XXX::P64 = R2;
           R2 = P64[R1 + 38];
           P64[Sp - 24] = _s1XXY::P64;
           P64[Sp - 16] = _s1XXX::P64;
           Sp = Sp - 24;
           call GHC.Classes.$fOrd(,,,,)_$c<_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1XY0_info" {
     sat_s1XY0_info:
         const sat_s1XY0_entry;
         const 5;
         const 8;
         const 8589934607;
 },
 _c27qE() //  [R1]
         { []
         }
     {offset
       c27qE: // global
           if (R1 & 7 == 1) goto c27qH; else goto c27qI;
       c27qH: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c27qI: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27qE_info" {
     block_c27qE_info:
         const _c27qE;
         const 0;
         const 30;
 },
 sat_s1XXW_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c27qY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27qZ; else goto c27r0;
       c27qZ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27r0: // global
           R6 = P64[R1 + 6];
           R5 = P64[R1 + 14];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 30];
           _B2::P64 = R2;
           R2 = P64[R1 + 38];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,,,,)_$c<_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1XXW_info" {
     sat_s1XXW_info:
         const sat_s1XXW_entry;
         const 5;
         const 8;
         const 8589934607;
 },
 sat_s1XXV_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c27r6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27r7; else goto c27r8;
       c27r7: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27r8: // global
           R6 = P64[R1 + 6];
           R5 = P64[R1 + 14];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 30];
           _B2::P64 = R2;
           R2 = P64[R1 + 38];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,,,,)_$ccompare_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1XXV_info" {
     sat_s1XXV_info:
         const sat_s1XXV_entry;
         const 5;
         const 8;
         const 8589934607;
 },
 sat_s1XXU_entry() //  [R1]
         { []
         }
     {offset
       c27rg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c27rh; else goto c27ri;
       c27rh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27ri: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c27rd_info;
           R6 = P64[R1 + 16];
           R5 = P64[R1 + 24];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 40];
           R2 = P64[R1 + 48];
           Sp = Sp - 24;
           call GHC.Classes.$w$cp1Ord1_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1XXU_info" {
     sat_s1XXU_info:
         const sat_s1XXU_entry;
         const 5;
         const 15;
 },
 _c27rd() //  [R1, R2]
         { []
         }
     {offset
       c27rd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27rl; else goto c27rk;
       c27rl: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c27rk: // global
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c27rd_info" {
     block_c27rd_info:
         const _c27rd;
         const 0;
         const 30;
 },
 GHC.Arr.$w$cp1Ix1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c27rm: // global
           _s1XXL::P64 = R6;
           _s1XXK::P64 = R5;
           _s1XXJ::P64 = R4;
           _s1XXI::P64 = R3;
           _s1XXH::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c27rn; else goto c27ro;
       c27ro: // global
           Hp = Hp + 512;
           if (Hp > HpLim) (likely: False) goto c27rq; else goto c27rp;
       c27rq: // global
           HpAlloc = 512;
           goto c27rn;
       c27rn: // global
           R6 = _s1XXL::P64;
           R5 = _s1XXK::P64;
           R4 = _s1XXJ::P64;
           R3 = _s1XXI::P64;
           R2 = _s1XXH::P64;
           R1 = GHC.Arr.$w$cp1Ix1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c27rp: // global
           I64[Hp - 504] = lvl50_s1XXM_info;
           P64[Hp - 488] = _s1XXL::P64;
           I64[Hp - 480] = lvl51_s1XXN_info;
           P64[Hp - 464] = _s1XXK::P64;
           I64[Hp - 456] = lvl52_s1XXO_info;
           P64[Hp - 440] = _s1XXJ::P64;
           I64[Hp - 432] = lvl53_s1XXP_info;
           P64[Hp - 416] = _s1XXI::P64;
           I64[Hp - 408] = lvl54_s1XXQ_info;
           P64[Hp - 392] = _s1XXH::P64;
           I64[Hp - 384] = sat_s1XYf_info;
           _c27oU::P64 = Hp - 504;
           P64[Hp - 376] = _c27oU::P64;
           _c27p1::P64 = Hp - 480;
           P64[Hp - 368] = _c27p1::P64;
           _c27p8::P64 = Hp - 456;
           P64[Hp - 360] = _c27p8::P64;
           _c27pf::P64 = Hp - 432;
           P64[Hp - 352] = _c27pf::P64;
           _c27pm::P64 = Hp - 408;
           P64[Hp - 344] = _c27pm::P64;
           I64[Hp - 336] = sat_s1XYb_info;
           P64[Hp - 328] = _c27oU::P64;
           P64[Hp - 320] = _c27p1::P64;
           P64[Hp - 312] = _c27p8::P64;
           P64[Hp - 304] = _c27pf::P64;
           P64[Hp - 296] = _c27pm::P64;
           I64[Hp - 288] = sat_s1XY7_info;
           P64[Hp - 280] = _c27oU::P64;
           P64[Hp - 272] = _c27p1::P64;
           P64[Hp - 264] = _c27p8::P64;
           P64[Hp - 256] = _c27pf::P64;
           P64[Hp - 248] = _c27pm::P64;
           I64[Hp - 240] = sat_s1XY3_info;
           P64[Hp - 232] = _c27oU::P64;
           P64[Hp - 224] = _c27p1::P64;
           P64[Hp - 216] = _c27p8::P64;
           P64[Hp - 208] = _c27pf::P64;
           P64[Hp - 200] = _c27pm::P64;
           I64[Hp - 192] = sat_s1XY0_info;
           P64[Hp - 184] = _c27oU::P64;
           P64[Hp - 176] = _c27p1::P64;
           P64[Hp - 168] = _c27p8::P64;
           P64[Hp - 160] = _c27pf::P64;
           P64[Hp - 152] = _c27pm::P64;
           I64[Hp - 144] = sat_s1XXW_info;
           P64[Hp - 136] = _c27oU::P64;
           P64[Hp - 128] = _c27p1::P64;
           P64[Hp - 120] = _c27p8::P64;
           P64[Hp - 112] = _c27pf::P64;
           P64[Hp - 104] = _c27pm::P64;
           I64[Hp - 96] = sat_s1XXV_info;
           P64[Hp - 88] = _c27oU::P64;
           P64[Hp - 80] = _c27p1::P64;
           P64[Hp - 72] = _c27p8::P64;
           P64[Hp - 64] = _c27pf::P64;
           P64[Hp - 56] = _c27pm::P64;
           I64[Hp - 48] = sat_s1XXU_info;
           P64[Hp - 32] = _c27oU::P64;
           P64[Hp - 24] = _c27p1::P64;
           P64[Hp - 16] = _c27p8::P64;
           P64[Hp - 8] = _c27pf::P64;
           P64[Hp] = _c27pm::P64;
           R6 = Hp - 286;
           R5 = Hp - 238;
           R4 = Hp - 190;
           R3 = Hp - 142;
           R2 = Hp - 94;
           R1 = Hp - 48;
           P64[Sp - 16] = Hp - 334;
           P64[Sp - 8] = Hp - 382;
           Sp = Sp - 16;
           call (I64[P64[Sp + 16]])(R6,
                                    R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$cp1Ix1_info" {
     GHC.Arr.$w$cp1Ix1_info:
         const GHC.Arr.$w$cp1Ix1_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.024493379 UTC

[section ""data" . GHC.Arr.$fIx(,,,,)_$cp1Ix_closure" {
     GHC.Arr.$fIx(,,,,)_$cp1Ix_closure:
         const GHC.Arr.$fIx(,,,,)_$cp1Ix_info;
 },
 GHC.Arr.$fIx(,,,,)_$cp1Ix_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c27t8: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c27t9; else goto c27ta;
       c27t9: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,,)_$cp1Ix_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c27ta: // global
           I64[Sp - 8] = block_c27t3_info;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Arr.$w$cp1Ix1_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2) args: 8, res: 24, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,,)_$cp1Ix_info" {
     GHC.Arr.$fIx(,,,,)_$cp1Ix_info:
         const GHC.Arr.$fIx(,,,,)_$cp1Ix_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c27t3() //  [R1, R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c27t3: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 16] = R1;
           Sp = Sp - 48;
           call _c27t4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c27t3_info" {
     block_c27t3_info:
         const _c27t3;
         const 0;
         const 30;
 },
 _c27t4() //  []
         { []
         }
     {offset
       c27t4: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c27td; else goto c27tc;
       c27td: // global
           HpAlloc = 72;
           I64[Sp] = block_c27t4_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c27tc: // global
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 56];
           R1 = Hp - 63;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27t4_info" {
     block_c27t4_info:
         const _c27t4;
         const 8;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.043225657 UTC

[section ""data" . GHC.Arr.$fIx(,,,,)_$crange_closure" {
     GHC.Arr.$fIx(,,,,)_$crange_closure:
         const GHC.Arr.$fIx(,,,,)_$crange_info;
 },
 lvl50_s1XYP_entry() //  [R1]
         { []
         }
     {offset
       c27tY: // global
           _s1XYP::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c27tZ; else goto c27u0;
       c27u0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27u2; else goto c27u1;
       c27u2: // global
           HpAlloc = 24;
           goto c27tZ;
       c27tZ: // global
           R1 = _s1XYP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27u1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1XYP::P64;
           _s1XYy::P64 = P64[_s1XYP::P64 + 16];
           _s1XYI::P64 = P64[_s1XYP::P64 + 24];
           _s1XYO::P64 = P64[_s1XYP::P64 + 32];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s1XYI::P64;
           P64[Hp] = _s1XYO::P64;
           R2 = _s1XYy::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Arr.range_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl50_s1XYP_info" {
     lvl50_s1XYP_info:
         const lvl50_s1XYP_entry;
         const 3;
         const 15;
 },
 lvl51_s1XYR_entry() //  [R1]
         { []
         }
     {offset
       c27u8: // global
           _s1XYR::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c27u9; else goto c27ua;
       c27ua: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27uc; else goto c27ub;
       c27uc: // global
           HpAlloc = 24;
           goto c27u9;
       c27u9: // global
           R1 = _s1XYR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27ub: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1XYR::P64;
           _s1XYx::P64 = P64[_s1XYR::P64 + 16];
           _s1XYH::P64 = P64[_s1XYR::P64 + 24];
           _s1XYN::P64 = P64[_s1XYR::P64 + 32];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s1XYH::P64;
           P64[Hp] = _s1XYN::P64;
           R2 = _s1XYx::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Arr.range_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl51_s1XYR_info" {
     lvl51_s1XYR_info:
         const lvl51_s1XYR_entry;
         const 3;
         const 15;
 },
 lvl52_s1XYT_entry() //  [R1]
         { []
         }
     {offset
       c27ui: // global
           _s1XYT::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c27uj; else goto c27uk;
       c27uk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27um; else goto c27ul;
       c27um: // global
           HpAlloc = 24;
           goto c27uj;
       c27uj: // global
           R1 = _s1XYT::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27ul: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1XYT::P64;
           _s1XYw::P64 = P64[_s1XYT::P64 + 16];
           _s1XYG::P64 = P64[_s1XYT::P64 + 24];
           _s1XYM::P64 = P64[_s1XYT::P64 + 32];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s1XYG::P64;
           P64[Hp] = _s1XYM::P64;
           R2 = _s1XYw::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Arr.range_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl52_s1XYT_info" {
     lvl52_s1XYT_info:
         const lvl52_s1XYT_entry;
         const 3;
         const 15;
 },
 lvl53_s1XYV_entry() //  [R1]
         { []
         }
     {offset
       c27us: // global
           _s1XYV::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c27ut; else goto c27uu;
       c27uu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27uw; else goto c27uv;
       c27uw: // global
           HpAlloc = 24;
           goto c27ut;
       c27ut: // global
           R1 = _s1XYV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27uv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1XYV::P64;
           _s1XYv::P64 = P64[_s1XYV::P64 + 16];
           _s1XYF::P64 = P64[_s1XYV::P64 + 24];
           _s1XYL::P64 = P64[_s1XYV::P64 + 32];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s1XYF::P64;
           P64[Hp] = _s1XYL::P64;
           R2 = _s1XYv::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Arr.range_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl53_s1XYV_info" {
     lvl53_s1XYV_info:
         const lvl53_s1XYV_entry;
         const 3;
         const 15;
 },
 go4_s1XZl_entry() //  [R1, R2]
         { []
         }
     {offset
       c27vv: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c27vw; else goto c27vx;
       c27vw: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c27vx: // global
           I64[Sp - 56] = block_c27vo_info;
           _s1XZl::P64 = R1;
           _s1XZ0::P64 = P64[R1 + 7];
           _s1XZ6::P64 = P64[R1 + 15];
           _s1XZc::P64 = P64[R1 + 23];
           _s1XZi::P64 = P64[R1 + 31];
           _s1XZk::P64 = P64[R1 + 39];
           R1 = R2;
           P64[Sp - 48] = _s1XZ0::P64;
           P64[Sp - 40] = _s1XZ6::P64;
           P64[Sp - 32] = _s1XZc::P64;
           P64[Sp - 24] = _s1XZi::P64;
           P64[Sp - 16] = _s1XZk::P64;
           P64[Sp - 8] = _s1XZl::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u27vJ; else goto c27vp;
       u27vJ: // global
           call _c27vo(R1) args: 0, res: 0, upd: 0;
       c27vp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go4_s1XZl_info" {
     go4_s1XZl_info:
         const go4_s1XZl_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 _c27vo() //  [R1]
         { []
         }
     {offset
       c27vo: // global
           if (R1 & 7 == 1) goto c27vs; else goto c27vt;
       c27vs: // global
           R1 = P64[Sp + 40] & (-8);
           Sp = Sp + 56;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c27vt: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c27vI; else goto c27vH;
       c27vI: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27vH: // global
           _s1XZo::P64 = P64[R1 + 6];
           _s1XZp::P64 = P64[R1 + 14];
           I64[Hp - 96] = stg_ap_2_upd_info;
           P64[Hp - 80] = P64[Sp + 48];
           P64[Hp - 72] = _s1XZp::P64;
           I64[Hp - 64] = (,,,,)_con_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _s1XZo::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 63;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27vo_info" {
     block_c27vo_info:
         const _c27vo;
         const 6;
         const 30;
 },
 go3_s1XZf_entry() //  [R1, R2]
         { []
         }
     {offset
       c27vO: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c27vP; else goto c27vQ;
       c27vP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c27vQ: // global
           I64[Sp - 56] = block_c27vc_info;
           _s1XZf::P64 = R1;
           _s1XYP::P64 = P64[R1 + 7];
           _s1XZ0::P64 = P64[R1 + 15];
           _s1XZ6::P64 = P64[R1 + 23];
           _s1XZc::P64 = P64[R1 + 31];
           _s1XZe::P64 = P64[R1 + 39];
           R1 = R2;
           P64[Sp - 48] = _s1XYP::P64;
           P64[Sp - 40] = _s1XZ0::P64;
           P64[Sp - 32] = _s1XZ6::P64;
           P64[Sp - 24] = _s1XZc::P64;
           P64[Sp - 16] = _s1XZe::P64;
           P64[Sp - 8] = _s1XZf::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u27vW; else goto c27vd;
       u27vW: // global
           call _c27vc(R1) args: 0, res: 0, upd: 0;
       c27vd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go3_s1XZf_info" {
     go3_s1XZf_info:
         const go3_s1XZf_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 _c27vc() //  [R1]
         { []
         }
     {offset
       c27vc: // global
           if (R1 & 7 == 1) goto c27vL; else goto c27vM;
       c27vL: // global
           R1 = P64[Sp + 40] & (-8);
           Sp = Sp + 56;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c27vM: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c27vV; else goto c27vU;
       c27vV: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27vU: // global
           _s1XZi::P64 = P64[R1 + 6];
           _s1XZj::P64 = P64[R1 + 14];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 48];
           P64[Hp - 48] = _s1XZj::P64;
           I64[Hp - 40] = go4_s1XZl_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = _s1XZi::P64;
           P64[Hp] = Hp - 72;
           R2 = P64[Sp + 8];
           R1 = Hp - 39;
           Sp = Sp + 56;
           call go4_s1XZl_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27vc_info" {
     block_c27vc_info:
         const _c27vc;
         const 6;
         const 30;
 },
 go2_s1XZ9_entry() //  [R1, R2]
         { []
         }
     {offset
       c27w1: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c27w2; else goto c27w3;
       c27w2: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c27w3: // global
           I64[Sp - 56] = block_c27v0_info;
           _s1XZ9::P64 = R1;
           _s1XYP::P64 = P64[R1 + 7];
           _s1XYR::P64 = P64[R1 + 15];
           _s1XZ0::P64 = P64[R1 + 23];
           _s1XZ6::P64 = P64[R1 + 31];
           _s1XZ8::P64 = P64[R1 + 39];
           R1 = R2;
           P64[Sp - 48] = _s1XYP::P64;
           P64[Sp - 40] = _s1XYR::P64;
           P64[Sp - 32] = _s1XZ0::P64;
           P64[Sp - 24] = _s1XZ6::P64;
           P64[Sp - 16] = _s1XZ8::P64;
           P64[Sp - 8] = _s1XZ9::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u27w9; else goto c27v1;
       u27w9: // global
           call _c27v0(R1) args: 0, res: 0, upd: 0;
       c27v1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go2_s1XZ9_info" {
     go2_s1XZ9_info:
         const go2_s1XZ9_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 _c27v0() //  [R1]
         { []
         }
     {offset
       c27v0: // global
           if (R1 & 7 == 1) goto c27vY; else goto c27vZ;
       c27vY: // global
           R1 = P64[Sp + 40] & (-8);
           Sp = Sp + 56;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c27vZ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c27w8; else goto c27w7;
       c27w8: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27w7: // global
           _s1XZc::P64 = P64[R1 + 6];
           _s1XZd::P64 = P64[R1 + 14];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 48];
           P64[Hp - 48] = _s1XZd::P64;
           I64[Hp - 40] = go3_s1XZf_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = _s1XZc::P64;
           P64[Hp] = Hp - 72;
           R2 = P64[Sp + 16];
           R1 = Hp - 39;
           Sp = Sp + 56;
           call go3_s1XZf_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27v0_info" {
     block_c27v0_info:
         const _c27v0;
         const 6;
         const 30;
 },
 go1_s1XZ3_entry() //  [R1, R2]
         { []
         }
     {offset
       c27we: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c27wf; else goto c27wg;
       c27wf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c27wg: // global
           I64[Sp - 56] = block_c27uO_info;
           _s1XZ3::P64 = R1;
           _s1XYP::P64 = P64[R1 + 7];
           _s1XYR::P64 = P64[R1 + 15];
           _s1XYT::P64 = P64[R1 + 23];
           _s1XZ0::P64 = P64[R1 + 31];
           _s1XZ2::P64 = P64[R1 + 39];
           R1 = R2;
           P64[Sp - 48] = _s1XYP::P64;
           P64[Sp - 40] = _s1XYR::P64;
           P64[Sp - 32] = _s1XYT::P64;
           P64[Sp - 24] = _s1XZ0::P64;
           P64[Sp - 16] = _s1XZ2::P64;
           P64[Sp - 8] = _s1XZ3::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u27wm; else goto c27uP;
       u27wm: // global
           call _c27uO(R1) args: 0, res: 0, upd: 0;
       c27uP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s1XZ3_info" {
     go1_s1XZ3_info:
         const go1_s1XZ3_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 _c27uO() //  [R1]
         { []
         }
     {offset
       c27uO: // global
           if (R1 & 7 == 1) goto c27wb; else goto c27wc;
       c27wb: // global
           R1 = P64[Sp + 40] & (-8);
           Sp = Sp + 56;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c27wc: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c27wl; else goto c27wk;
       c27wl: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27wk: // global
           _s1XZ6::P64 = P64[R1 + 6];
           _s1XZ7::P64 = P64[R1 + 14];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 48];
           P64[Hp - 48] = _s1XZ7::P64;
           I64[Hp - 40] = go2_s1XZ9_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = _s1XZ6::P64;
           P64[Hp] = Hp - 72;
           R2 = P64[Sp + 24];
           R1 = Hp - 39;
           Sp = Sp + 56;
           call go2_s1XZ9_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27uO_info" {
     block_c27uO_info:
         const _c27uO;
         const 6;
         const 30;
 },
 go_s1XYX_entry() //  [R1, R2]
         { []
         }
     {offset
       c27wr: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c27ws; else goto c27wt;
       c27ws: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c27wt: // global
           I64[Sp - 48] = block_c27uC_info;
           _s1XYX::P64 = R1;
           _s1XYP::P64 = P64[R1 + 7];
           _s1XYR::P64 = P64[R1 + 15];
           _s1XYT::P64 = P64[R1 + 23];
           _s1XYV::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s1XYP::P64;
           P64[Sp - 32] = _s1XYR::P64;
           P64[Sp - 24] = _s1XYT::P64;
           P64[Sp - 16] = _s1XYV::P64;
           P64[Sp - 8] = _s1XYX::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u27wz; else goto c27uD;
       u27wz: // global
           call _c27uC(R1) args: 0, res: 0, upd: 0;
       c27uD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1XYX_info" {
     go_s1XYX_info:
         const go_s1XYX_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _c27uC() //  [R1]
         { []
         }
     {offset
       c27uC: // global
           if (R1 & 7 == 1) goto c27wo; else goto c27wp;
       c27wo: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c27wp: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c27wy; else goto c27wx;
       c27wy: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27wx: // global
           _s1XZ0::P64 = P64[R1 + 6];
           _s1XZ1::P64 = P64[R1 + 14];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 40];
           P64[Hp - 48] = _s1XZ1::P64;
           I64[Hp - 40] = go1_s1XZ3_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s1XZ0::P64;
           P64[Hp] = Hp - 72;
           R2 = P64[Sp + 32];
           R1 = Hp - 39;
           Sp = Sp + 48;
           call go1_s1XZ3_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27uC_info" {
     block_c27uC_info:
         const _c27uC;
         const 5;
         const 30;
 },
 GHC.Arr.$fIx(,,,,)_$crange_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c27wA: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c27wD; else goto c27wE;
       c27wD: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,,)_$crange_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c27wE: // global
           I64[Sp - 40] = block_c27tE_info;
           R1 = P64[Sp];
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u27wQ; else goto c27tF;
       u27wQ: // global
           call _c27tE(R1) args: 0, res: 0, upd: 0;
       c27tF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,,)_$crange_info" {
     GHC.Arr.$fIx(,,,,)_$crange_info:
         const GHC.Arr.$fIx(,,,,)_$crange_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _c27tE() //  [R1]
         { []
         }
     {offset
       c27tE: // global
           I64[Sp - 8] = block_c27tJ_info;
           _s1XYC::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XYC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u27wO; else goto c27tK;
       u27wO: // global
           call _c27tJ(R1) args: 0, res: 0, upd: 0;
       c27tK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27tE_info" {
     block_c27tE_info:
         const _c27tE;
         const 5;
         const 30;
 },
 _c27tJ() //  [R1]
         { []
         }
     {offset
       c27tJ: // global
           I64[Sp - 32] = block_c27tO_info;
           _s1XYE::P64 = P64[R1 + 7];
           _s1XYF::P64 = P64[R1 + 15];
           _s1XYG::P64 = P64[R1 + 23];
           _s1XYH::P64 = P64[R1 + 31];
           _s1XYI::P64 = P64[R1 + 39];
           R1 = P64[Sp + 8];
           P64[Sp - 24] = _s1XYG::P64;
           P64[Sp - 16] = _s1XYH::P64;
           P64[Sp - 8] = _s1XYI::P64;
           P64[Sp] = _s1XYF::P64;
           P64[Sp + 8] = _s1XYE::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u27wP; else goto c27tP;
       u27wP: // global
           call _c27tO(R1) args: 0, res: 0, upd: 0;
       c27tP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27tJ_info" {
     block_c27tJ_info:
         const _c27tJ;
         const 6;
         const 30;
 },
 _c27tO() //  [R1]
         { []
         }
     {offset
       c27tO: // global
           Hp = Hp + 224;
           if (Hp > HpLim) (likely: False) goto c27wJ; else goto c27wI;
       c27wJ: // global
           HpAlloc = 224;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27wI: // global
           _s1XYK::P64 = P64[R1 + 7];
           _s1XYL::P64 = P64[R1 + 15];
           _s1XYM::P64 = P64[R1 + 23];
           _s1XYN::P64 = P64[R1 + 31];
           _s1XYO::P64 = P64[R1 + 39];
           I64[Hp - 216] = lvl50_s1XYP_info;
           P64[Hp - 200] = P64[Sp + 72];
           P64[Hp - 192] = P64[Sp + 24];
           P64[Hp - 184] = _s1XYO::P64;
           I64[Hp - 176] = lvl51_s1XYR_info;
           P64[Hp - 160] = P64[Sp + 64];
           P64[Hp - 152] = P64[Sp + 16];
           P64[Hp - 144] = _s1XYN::P64;
           I64[Hp - 136] = lvl52_s1XYT_info;
           P64[Hp - 120] = P64[Sp + 56];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = _s1XYM::P64;
           I64[Hp - 96] = lvl53_s1XYV_info;
           P64[Hp - 80] = P64[Sp + 48];
           P64[Hp - 72] = P64[Sp + 32];
           P64[Hp - 64] = _s1XYL::P64;
           I64[Hp - 56] = go_s1XYX_info;
           P64[Hp - 48] = Hp - 216;
           P64[Hp - 40] = Hp - 176;
           P64[Hp - 32] = Hp - 136;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _s1XYK::P64;
           I64[Sp + 72] = block_c27wC_info;
           R2 = P64[Sp + 80];
           I64[Sp + 56] = stg_ap_p_info;
           P64[Sp + 64] = Hp - 15;
           P64[Sp + 80] = Hp - 55;
           Sp = Sp + 56;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27tO_info" {
     block_c27tO_info:
         const _c27tO;
         const 10;
         const 30;
 },
 _c27wC() //  [R1]
         { []
         }
     {offset
       c27wC: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1XYX_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27wC_info" {
     block_c27wC_info:
         const _c27wC;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.086563929 UTC

[section ""data" . GHC.Arr.$fIx(,,,,)_$cunsafeIndex_closure" {
     GHC.Arr.$fIx(,,,,)_$cunsafeIndex_closure:
         const GHC.Arr.$fIx(,,,,)_$cunsafeIndex_info;
 },
 GHC.Arr.$fIx(,,,,)_$cunsafeIndex_slow() //  [R1]
         { []
         }
     {offset
       c27za: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$fIx(,,,,)_$cunsafeIndex_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2,
                                                       R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.Arr.$fIx(,,,,)_$cunsafeIndex_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c27zh: // global
           if ((Sp + -160) < SpLim) (likely: False) goto c27AD; else goto c27AE;
       c27AD: // global
           R1 = GHC.Arr.$fIx(,,,,)_$cunsafeIndex_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c27AE: // global
           I64[Sp - 40] = block_c27ze_info;
           R1 = P64[Sp];
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u27B5; else goto c27zf;
       u27B5: // global
           call _c27ze(R1) args: 0, res: 0, upd: 0;
       c27zf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,,)_$cunsafeIndex_info" {
     GHC.Arr.$fIx(,,,,)_$cunsafeIndex_info:
         const GHC.Arr.$fIx(,,,,)_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const GHC.Arr.$fIx(,,,,)_$cunsafeIndex_slow;
 },
 _c27ze() //  [R1]
         { []
         }
     {offset
       c27ze: // global
           I64[Sp - 8] = block_c27zk_info;
           _s1XZD::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1XZD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u27B4; else goto c27zl;
       u27B4: // global
           call _c27zk(R1) args: 0, res: 0, upd: 0;
       c27zl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27ze_info" {
     block_c27ze_info:
         const _c27ze;
         const 6;
         const 30;
 },
 _c27zk() //  [R1]
         { []
         }
     {offset
       c27zk: // global
           I64[Sp - 32] = block_c27zp_info;
           _s1XZF::P64 = P64[R1 + 7];
           _s1XZG::P64 = P64[R1 + 15];
           _s1XZH::P64 = P64[R1 + 23];
           _s1XZI::P64 = P64[R1 + 31];
           _s1XZJ::P64 = P64[R1 + 39];
           R1 = P64[Sp + 8];
           P64[Sp - 24] = _s1XZH::P64;
           P64[Sp - 16] = _s1XZI::P64;
           P64[Sp - 8] = _s1XZJ::P64;
           P64[Sp] = _s1XZG::P64;
           P64[Sp + 8] = _s1XZF::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u27B6; else goto c27zq;
       u27B6: // global
           call _c27zp(R1) args: 0, res: 0, upd: 0;
       c27zq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27zk_info" {
     block_c27zk_info:
         const _c27zk;
         const 7;
         const 30;
 },
 _c27zp() //  [R1]
         { []
         }
     {offset
       c27zp: // global
           I64[Sp - 32] = block_c27zu_info;
           _s1XZL::P64 = P64[R1 + 7];
           _s1XZM::P64 = P64[R1 + 15];
           _s1XZN::P64 = P64[R1 + 23];
           _s1XZO::P64 = P64[R1 + 31];
           _s1XZP::P64 = P64[R1 + 39];
           R1 = P64[Sp + 88];
           P64[Sp - 24] = _s1XZN::P64;
           P64[Sp - 16] = _s1XZO::P64;
           P64[Sp - 8] = _s1XZP::P64;
           P64[Sp] = _s1XZM::P64;
           P64[Sp + 88] = _s1XZL::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u27B7; else goto c27zv;
       u27B7: // global
           call _c27zu(R1) args: 0, res: 0, upd: 0;
       c27zv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27zp_info" {
     block_c27zp_info:
         const _c27zp;
         const 11;
         const 30;
 },
 _c27zu() //  [R1]
         { []
         }
     {offset
       c27zu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27AK; else goto c27AJ;
       c27AK: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27AJ: // global
           _s1XZR::P64 = P64[R1 + 7];
           _s1XZS::P64 = P64[R1 + 15];
           _s1XZT::P64 = P64[R1 + 23];
           _s1XZU::P64 = P64[R1 + 31];
           _s1XZV::P64 = P64[R1 + 39];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 24];
           I64[Sp - 24] = block_c27zA_info;
           R2 = P64[Sp + 104];
           I64[Sp - 48] = stg_ap_pp_info;
           _c27zz::P64 = Hp - 15;
           P64[Sp - 40] = _c27zz::P64;
           P64[Sp - 32] = _s1XZV::P64;
           P64[Sp - 16] = _s1XZT::P64;
           P64[Sp - 8] = _s1XZU::P64;
           P64[Sp] = _s1XZS::P64;
           P64[Sp + 24] = _s1XZR::P64;
           P64[Sp + 56] = _c27zz::P64;
           Sp = Sp - 48;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27zu_info" {
     block_c27zu_info:
         const _c27zu;
         const 15;
         const 30;
 },
 _c27zA() //  [R1]
         { []
         }
     {offset
       c27zA: // global
           I64[Sp] = block_c27zE_info;
           R2 = P64[Sp + 128];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 80];
           I64[Sp + 128] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27zA_info" {
     block_c27zA_info:
         const _c27zA;
         const 18;
         const 30;
 },
 _c27zE() //  [R1]
         { []
         }
     {offset
       c27zE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27AO; else goto c27AN;
       c27AO: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27AN: // global
           _s1Y01::I64 = I64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 72];
           P64[Hp] = P64[Sp + 40];
           I64[Sp] = block_c27zJ_info;
           R2 = P64[Sp + 120];
           I64[Sp - 24] = stg_ap_pp_info;
           _c27zI::P64 = Hp - 15;
           P64[Sp - 16] = _c27zI::P64;
           P64[Sp - 8] = P64[Sp + 16];
           I64[Sp + 72] = _s1Y01::I64;
           P64[Sp + 80] = _c27zI::P64;
           Sp = Sp - 24;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27zE_info" {
     block_c27zE_info:
         const _c27zE;
         const 2129938;
         const 30;
 },
 _c27zJ() //  [R1]
         { []
         }
     {offset
       c27zJ: // global
           I64[Sp] = block_c27zN_info;
           R2 = P64[Sp + 120];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 80];
           I64[Sp + 120] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27zJ_info" {
     block_c27zJ_info:
         const _c27zJ;
         const 2114706;
         const 30;
 },
 _c27zN() //  [R1]
         { []
         }
     {offset
       c27zN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27AS; else goto c27AR;
       c27AS: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27AR: // global
           _s1Y07::I64 = I64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 64];
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 16] = block_c27zS_info;
           R2 = P64[Sp + 112];
           I64[Sp - 8] = stg_ap_pp_info;
           _c27zR::P64 = Hp - 15;
           P64[Sp] = _c27zR::P64;
           I64[Sp + 64] = _s1Y07::I64;
           P64[Sp + 80] = _c27zR::P64;
           Sp = Sp - 8;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27zN_info" {
     block_c27zN_info:
         const _c27zN;
         const 3196050;
         const 30;
 },
 _c27zS() //  [R1]
         { []
         }
     {offset
       c27zS: // global
           I64[Sp] = block_c27zW_info;
           R2 = P64[Sp + 96];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 64];
           I64[Sp + 96] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27zS_info" {
     block_c27zS_info:
         const _c27zS;
         const 792976;
         const 30;
 },
 _c27zW() //  [R1]
         { []
         }
     {offset
       c27zW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27AW; else goto c27AV;
       c27AW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27AV: // global
           _s1Y0d::I64 = I64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 72];
           P64[Hp] = P64[Sp + 40];
           I64[Sp + 24] = block_c27A1_info;
           R2 = P64[Sp + 88];
           I64[Sp] = stg_ap_pp_info;
           _s1XZS::P64 = P64[Sp + 8];
           _c27A0::P64 = Hp - 15;
           P64[Sp + 8] = _c27A0::P64;
           P64[Sp + 16] = _s1XZS::P64;
           I64[Sp + 64] = _s1Y0d::I64;
           P64[Sp + 72] = _c27A0::P64;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27zW_info" {
     block_c27zW_info:
         const _c27zW;
         const 932240;
         const 30;
 },
 _c27A1() //  [R1]
         { []
         }
     {offset
       c27A1: // global
           I64[Sp] = block_c27A5_info;
           R2 = P64[Sp + 64];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 48];
           I64[Sp + 64] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27A1_info" {
     block_c27A1_info:
         const _c27A1;
         const 116621;
         const 30;
 },
 _c27A5() //  [R1]
         { []
         }
     {offset
       c27A5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27B0; else goto c27AZ;
       c27B0: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27AZ: // global
           _s1Y0j::I64 = I64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 104];
           I64[Sp + 16] = block_c27Aa_info;
           R2 = P64[Sp + 96];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Hp - 15;
           I64[Sp + 104] = _s1Y0j::I64;
           Sp = Sp - 8;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27A5_info" {
     block_c27A5_info:
         const _c27A5;
         const 126861;
         const 30;
 },
 _c27Aa() //  [R1]
         { []
         }
     {offset
       c27Aa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c27B3; else goto c27B2;
       c27B3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27B2: // global
           _s1Y0u::I64 = I64[Sp + 72] + I64[Sp + 16] * (I64[Sp + 64] + I64[Sp + 8] * (I64[Sp + 56] + I64[Sp + 24] * (I64[Sp + 48] + I64[Sp + 88] * I64[R1 + 7])));
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1Y0u::I64;
           R1 = Hp - 7;
           Sp = Sp + 96;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27Aa_info" {
     block_c27Aa_info:
         const _c27Aa;
         const 131019;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.11458332 UTC

[section ""data" . GHC.Arr.$fIx(,,,,)_$cunsafeRangeSize_closure" {
     GHC.Arr.$fIx(,,,,)_$cunsafeRangeSize_closure:
         const GHC.Arr.$fIx(,,,,)_$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIx(,,,,)_$cunsafeRangeSize_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c27CE: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c27CP; else goto c27CQ;
       c27CP: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,,)_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c27CQ: // global
           I64[Sp - 40] = block_c27CB_info;
           R1 = P64[Sp];
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u27CV; else goto c27CC;
       u27CV: // global
           call _c27CB(R1) args: 0, res: 0, upd: 0;
       c27CC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,,)_$cunsafeRangeSize_info" {
     GHC.Arr.$fIx(,,,,)_$cunsafeRangeSize_info:
         const GHC.Arr.$fIx(,,,,)_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _c27CB() //  [R1]
         { []
         }
     {offset
       c27CB: // global
           _s1Y0v::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_c27CH_info;
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = _s1Y0v::P64;
           P64[Sp + 24] = R1;
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 24;
           call GHC.Arr.$fIx(,,,,)_$cunsafeIndex_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27CB_info" {
     block_c27CB_info:
         const _c27CB;
         const 5;
         const 30;
 },
 _c27CH() //  [R1]
         { []
         }
     {offset
       c27CH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c27CU; else goto c27CT;
       c27CU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27CT: // global
           _s1Y0G::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1Y0G::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27CH_info" {
     block_c27CH_info:
         const _c27CH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.127444217 UTC

[section ""data" . GHC.Arr.$fIx(,,,,)_$cinRange_closure" {
     GHC.Arr.$fIx(,,,,)_$cinRange_closure:
         const GHC.Arr.$fIx(,,,,)_$cinRange_info;
 },
 GHC.Arr.$fIx(,,,,)_$cinRange_slow() //  [R1]
         { []
         }
     {offset
       c27Dc: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$fIx(,,,,)_$cinRange_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.Arr.$fIx(,,,,)_$cinRange_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c27Dj: // global
           if ((Sp + -144) < SpLim) (likely: False) goto c27Dx; else goto c27Dy;
       c27Dx: // global
           R1 = GHC.Arr.$fIx(,,,,)_$cinRange_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c27Dy: // global
           I64[Sp - 40] = block_c27Dg_info;
           R1 = P64[Sp];
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u27EN; else goto c27Dh;
       u27EN: // global
           call _c27Dg(R1) args: 0, res: 0, upd: 0;
       c27Dh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,,)_$cinRange_info" {
     GHC.Arr.$fIx(,,,,)_$cinRange_info:
         const GHC.Arr.$fIx(,,,,)_$cinRange_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const GHC.Arr.$fIx(,,,,)_$cinRange_slow;
 },
 _c27Dg() //  [R1]
         { []
         }
     {offset
       c27Dg: // global
           I64[Sp - 8] = block_c27Dm_info;
           _s1Y0Q::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Y0Q::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u27EM; else goto c27Dn;
       u27EM: // global
           call _c27Dm(R1) args: 0, res: 0, upd: 0;
       c27Dn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27Dg_info" {
     block_c27Dg_info:
         const _c27Dg;
         const 6;
         const 30;
 },
 _c27Dm() //  [R1]
         { []
         }
     {offset
       c27Dm: // global
           I64[Sp - 32] = block_c27Dr_info;
           _s1Y0S::P64 = P64[R1 + 7];
           _s1Y0T::P64 = P64[R1 + 15];
           _s1Y0U::P64 = P64[R1 + 23];
           _s1Y0V::P64 = P64[R1 + 31];
           _s1Y0W::P64 = P64[R1 + 39];
           R1 = P64[Sp + 8];
           P64[Sp - 24] = _s1Y0U::P64;
           P64[Sp - 16] = _s1Y0V::P64;
           P64[Sp - 8] = _s1Y0W::P64;
           P64[Sp] = _s1Y0T::P64;
           P64[Sp + 8] = _s1Y0S::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u27EO; else goto c27Ds;
       u27EO: // global
           call _c27Dr(R1) args: 0, res: 0, upd: 0;
       c27Ds: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27Dm_info" {
     block_c27Dm_info:
         const _c27Dm;
         const 7;
         const 30;
 },
 _c27Dr() //  [R1]
         { []
         }
     {offset
       c27Dr: // global
           I64[Sp - 32] = block_c27Dw_info;
           _s1Y0Y::P64 = P64[R1 + 7];
           _s1Y0Z::P64 = P64[R1 + 15];
           _s1Y10::P64 = P64[R1 + 23];
           _s1Y11::P64 = P64[R1 + 31];
           _s1Y12::P64 = P64[R1 + 39];
           R1 = P64[Sp + 88];
           P64[Sp - 24] = _s1Y10::P64;
           P64[Sp - 16] = _s1Y11::P64;
           P64[Sp - 8] = _s1Y12::P64;
           P64[Sp] = _s1Y0Z::P64;
           P64[Sp + 88] = _s1Y0Y::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u27EP; else goto c27DC;
       u27EP: // global
           call _c27Dw(R1) args: 0, res: 0, upd: 0;
       c27DC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27Dr_info" {
     block_c27Dr_info:
         const _c27Dr;
         const 11;
         const 30;
 },
 _c27Dw() //  [R1]
         { []
         }
     {offset
       c27Dw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27DK; else goto c27DJ;
       c27DK: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27DJ: // global
           _s1Y14::P64 = P64[R1 + 7];
           _s1Y15::P64 = P64[R1 + 15];
           _s1Y16::P64 = P64[R1 + 23];
           _s1Y17::P64 = P64[R1 + 31];
           _s1Y18::P64 = P64[R1 + 39];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 72];
           P64[Hp] = P64[Sp + 120];
           I64[Sp - 8] = block_c27DH_info;
           R2 = P64[Sp + 112];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 15;
           P64[Sp - 16] = _s1Y14::P64;
           P64[Sp] = _s1Y18::P64;
           P64[Sp + 72] = _s1Y17::P64;
           P64[Sp + 112] = _s1Y16::P64;
           P64[Sp + 120] = _s1Y15::P64;
           Sp = Sp - 32;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27Dw_info" {
     block_c27Dw_info:
         const _c27Dw;
         const 15;
         const 30;
 },
 _c27DH() //  [R1]
         { []
         }
     {offset
       c27DH: // global
           if (R1 & 7 == 1) goto u27EI; else goto c27DV;
       u27EI: // global
           Sp = Sp + 136;
           call _c27Ew() args: 0, res: 0, upd: 0;
       c27DV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27DY; else goto c27DX;
       c27DY: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27DX: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 72];
           P64[Hp] = P64[Sp + 40];
           I64[Sp] = block_c27DU_info;
           R2 = P64[Sp + 88];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = P64[Sp + 128];
           Sp = Sp - 24;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27DH_info" {
     block_c27DH_info:
         const _c27DH;
         const 16;
         const 30;
 },
 _c27DU() //  [R1]
         { []
         }
     {offset
       c27DU: // global
           if (R1 & 7 == 1) goto u27EJ; else goto c27E9;
       u27EJ: // global
           Sp = Sp + 136;
           call _c27Ew() args: 0, res: 0, upd: 0;
       c27E9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27Ec; else goto c27Eb;
       c27Ec: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27Eb: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 16];
           I64[Sp] = block_c27E8_info;
           R2 = P64[Sp + 96];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = P64[Sp + 120];
           Sp = Sp - 24;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27DU_info" {
     block_c27DU_info:
         const _c27DU;
         const 2180112;
         const 30;
 },
 _c27E8() //  [R1]
         { []
         }
     {offset
       c27E8: // global
           if (R1 & 7 == 1) goto u27EK; else goto c27En;
       u27EK: // global
           Sp = Sp + 136;
           call _c27Ew() args: 0, res: 0, upd: 0;
       c27En: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27Eq; else goto c27Ep;
       c27Eq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27Ep: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_c27Em_info;
           R2 = P64[Sp + 104];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = P64[Sp + 80];
           Sp = Sp - 24;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27E8_info" {
     block_c27E8_info:
         const _c27E8;
         const 3361936;
         const 30;
 },
 _c27Em() //  [R1]
         { []
         }
     {offset
       c27Em: // global
           if (R1 & 7 == 1) goto u27EL; else goto c27Ex;
       u27EL: // global
           Sp = Sp + 136;
           call _c27Ew() args: 0, res: 0, upd: 0;
       c27Ex: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27EC; else goto c27EB;
       c27EC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27EB: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 64];
           P64[Hp] = P64[Sp + 32];
           R2 = P64[Sp + 112];
           I64[Sp + 112] = stg_ap_pp_info;
           P64[Sp + 120] = Hp - 15;
           P64[Sp + 128] = P64[Sp + 8];
           Sp = Sp + 112;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27Em_info" {
     block_c27Em_info:
         const _c27Em;
         const 3661200;
         const 30;
 },
 _c27Ew() //  []
         { []
         }
     {offset
       c27Ew: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.149102182 UTC

[section ""data" . GHC.Arr.$fIx(,,,,)_$crangeSize_closure" {
     GHC.Arr.$fIx(,,,,)_$crangeSize_closure:
         const GHC.Arr.$fIx(,,,,)_$crangeSize_info;
 },
 GHC.Arr.$fIx(,,,,)_$crangeSize_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c27G4: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c27G5; else goto c27G6;
       c27G5: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,,)_$crangeSize_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c27G6: // global
           I64[Sp - 40] = block_c27G1_info;
           R1 = P64[Sp];
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u27Gx; else goto c27G2;
       u27Gx: // global
           call _c27G1(R1) args: 0, res: 0, upd: 0;
       c27G2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,,)_$crangeSize_info" {
     GHC.Arr.$fIx(,,,,)_$crangeSize_info:
         const GHC.Arr.$fIx(,,,,)_$crangeSize_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _c27G1() //  [R1]
         { []
         }
     {offset
       c27G1: // global
           I64[Sp - 16] = block_c27G9_info;
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 40];
           P64[Sp - 32] = R1;
           _s1Y1q::P64 = P64[R1 + 15];
           P64[Sp - 24] = _s1Y1q::P64;
           P64[Sp - 8] = _s1Y1q::P64;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Arr.$fIx(,,,,)_$cinRange_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27G1_info" {
     block_c27G1_info:
         const _c27G1;
         const 5;
         const 30;
 },
 _c27G9() //  [R1]
         { []
         }
     {offset
       c27G9: // global
           if (R1 & 7 == 1) goto c27Gg; else goto c27Gs;
       c27Gg: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c27Gs: // global
           _s1Y1i::P64 = P64[Sp + 56];
           I64[Sp + 56] = block_c27Gj_info;
           R6 = P64[Sp + 48];
           R5 = P64[Sp + 40];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = _s1Y1i::P64;
           P64[Sp + 40] = P64[Sp + 16];
           P64[Sp + 48] = P64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Arr.$fIx(,,,,)_$cunsafeIndex_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27G9_info" {
     block_c27G9_info:
         const _c27G9;
         const 7;
         const 30;
 },
 _c27Gj() //  [R1]
         { []
         }
     {offset
       c27Gj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c27Gv; else goto c27Gu;
       c27Gv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27Gu: // global
           _s1Y1u::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1Y1u::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27Gj_info" {
     block_c27Gj_info:
         const _c27Gj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.15908321 UTC

[section ""data" . GHC.Arr.$fIx(,,,,)_$cindex_closure" {
     GHC.Arr.$fIx(,,,,)_$cindex_closure:
         const GHC.Arr.$fIx(,,,,)_$cindex_info;
         const 0;
 },
 GHC.Arr.$fIx(,,,,)_$cindex_slow() //  [R1]
         { []
         }
     {offset
       c27GV: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$fIx(,,,,)_$cindex_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.Arr.$fIx(,,,,)_$cindex_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c27H5: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c27H6; else goto c27H7;
       c27H6: // global
           R1 = GHC.Arr.$fIx(,,,,)_$cindex_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c27H7: // global
           I64[Sp - 48] = block_c27GZ_info;
           _s1Y1z::P64 = R6;
           R6 = R6;
           _s1Y1y::P64 = R5;
           R5 = R5;
           _s1Y1x::P64 = R4;
           R4 = R4;
           _s1Y1w::P64 = R3;
           R3 = R3;
           _s1Y1v::P64 = R2;
           R2 = R2;
           P64[Sp - 64] = P64[Sp];
           P64[Sp - 56] = P64[Sp + 8];
           P64[Sp - 40] = _s1Y1v::P64;
           P64[Sp - 32] = _s1Y1w::P64;
           P64[Sp - 24] = _s1Y1x::P64;
           P64[Sp - 16] = _s1Y1y::P64;
           P64[Sp - 8] = _s1Y1z::P64;
           Sp = Sp - 64;
           call GHC.Arr.$fIx(,,,,)_$cinRange_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,,)_$cindex_info" {
     GHC.Arr.$fIx(,,,,)_$cindex_info:
         const GHC.Arr.$fIx(,,,,)_$cindex_entry;
         const 0;
         const 8800387989518;
         const 30064771072;
         const S1YCH_srt+192;
         const 7;
         const GHC.Arr.$fIx(,,,,)_$cindex_slow;
 },
 _c27GZ() //  [R1]
         { []
         }
     {offset
       c27GZ: // global
           if (R1 & 7 == 1) goto c27H2; else goto c27H3;
       c27H2: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 64;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c27H3: // global
           R6 = P64[Sp + 40];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 48;
           call GHC.Arr.$fIx(,,,,)_$cunsafeIndex_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27GZ_info" {
     block_c27GZ_info:
         const _c27GZ;
         const 7;
         const 4294967326;
         const S1YCH_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.170216096 UTC

[section ""data" . GHC.Arr.$fIx(,,,,)_closure" {
     GHC.Arr.$fIx(,,,,)_closure:
         const GHC.Arr.$fIx(,,,,)_info;
         const 0;
 },
 sat_s1Y1O_entry() //  [R1, R2]
         { []
         }
     {offset
       c27HC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c27HD; else goto c27HE;
       c27HD: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c27HE: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Arr.$fIx(,,,,)_$cunsafeRangeSize_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Y1O_info" {
     sat_s1Y1O_info:
         const sat_s1Y1O_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 sat_s1Y1N_entry() //  [R1, R2]
         { []
         }
     {offset
       c27HK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c27HL; else goto c27HM;
       c27HL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c27HM: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Arr.$fIx(,,,,)_$crangeSize_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Y1N_info" {
     sat_s1Y1N_info:
         const sat_s1Y1N_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 sat_s1Y1M_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c27HS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27HT; else goto c27HU;
       c27HT: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27HU: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Arr.$fIx(,,,,)_$cinRange_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Y1M_info" {
     sat_s1Y1M_info:
         const sat_s1Y1M_entry;
         const 5;
         const 8;
         const 8589934607;
 },
 sat_s1Y1L_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c27I0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27I1; else goto c27I2;
       c27I1: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27I2: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Arr.$fIx(,,,,)_$cunsafeIndex_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Y1L_info" {
     sat_s1Y1L_info:
         const sat_s1Y1L_entry;
         const 5;
         const 8;
         const 8589934607;
 },
 sat_s1Y1K_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c27I8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27I9; else goto c27Ia;
       c27I9: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27Ia: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Arr.$fIx(,,,,)_$cindex_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Y1K_info" {
     sat_s1Y1K_info:
         const sat_s1Y1K_entry;
         const 5;
         const 4294967304;
         const 8589934607;
         const S1YCH_srt+280;
 },
 sat_s1Y1J_entry() //  [R1, R2]
         { []
         }
     {offset
       c27Ig: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c27Ih; else goto c27Ii;
       c27Ih: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c27Ii: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Arr.$fIx(,,,,)_$crange_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Y1J_info" {
     sat_s1Y1J_info:
         const sat_s1Y1J_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 sat_s1Y1I_entry() //  [R1]
         { []
         }
     {offset
       c27In: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27Io; else goto c27Ip;
       c27Io: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27Ip: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$fIx(,,,,)_$cp1Ix_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Y1I_info" {
     sat_s1Y1I_info:
         const sat_s1Y1I_entry;
         const 5;
         const 15;
 },
 GHC.Arr.$fIx(,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c27Ir: // global
           Hp = Hp + 408;
           if (Hp > HpLim) (likely: False) goto c27Iv; else goto c27Iu;
       c27Iv: // global
           HpAlloc = 408;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,,)_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c27Iu: // global
           I64[Hp - 400] = sat_s1Y1O_info;
           P64[Hp - 392] = R2;
           P64[Hp - 384] = R3;
           P64[Hp - 376] = R4;
           P64[Hp - 368] = R5;
           P64[Hp - 360] = R6;
           I64[Hp - 352] = sat_s1Y1N_info;
           P64[Hp - 344] = R2;
           P64[Hp - 336] = R3;
           P64[Hp - 328] = R4;
           P64[Hp - 320] = R5;
           P64[Hp - 312] = R6;
           I64[Hp - 304] = sat_s1Y1M_info;
           P64[Hp - 296] = R2;
           P64[Hp - 288] = R3;
           P64[Hp - 280] = R4;
           P64[Hp - 272] = R5;
           P64[Hp - 264] = R6;
           I64[Hp - 256] = sat_s1Y1L_info;
           P64[Hp - 248] = R2;
           P64[Hp - 240] = R3;
           P64[Hp - 232] = R4;
           P64[Hp - 224] = R5;
           P64[Hp - 216] = R6;
           I64[Hp - 208] = sat_s1Y1K_info;
           P64[Hp - 200] = R2;
           P64[Hp - 192] = R3;
           P64[Hp - 184] = R4;
           P64[Hp - 176] = R5;
           P64[Hp - 168] = R6;
           I64[Hp - 160] = sat_s1Y1J_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           P64[Hp - 136] = R4;
           P64[Hp - 128] = R5;
           P64[Hp - 120] = R6;
           I64[Hp - 112] = sat_s1Y1I_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           P64[Hp - 64] = R6;
           I64[Hp - 56] = GHC.Arr.C:Ix_con_info;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 159;
           P64[Hp - 32] = Hp - 206;
           P64[Hp - 24] = Hp - 254;
           P64[Hp - 16] = Hp - 302;
           P64[Hp - 8] = Hp - 351;
           P64[Hp] = Hp - 399;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,,)_info" {
     GHC.Arr.$fIx(,,,,)_info:
         const GHC.Arr.$fIx(,,,,)_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const S1YCH_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.196143644 UTC

[section ""data" . GHC.Arr.$w$cp1Ix_closure" {
     GHC.Arr.$w$cp1Ix_closure:
         const GHC.Arr.$w$cp1Ix_info;
 },
 lvl50_s1Y1T_entry() //  [R1]
         { []
         }
     {offset
       c27Ji: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27Jj; else goto c27Jk;
       c27Jj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27Jk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl50_s1Y1T_info" {
     lvl50_s1Y1T_info:
         const lvl50_s1Y1T_entry;
         const 1;
         const 16;
 },
 lvl51_s1Y1U_entry() //  [R1]
         { []
         }
     {offset
       c27Jp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27Jq; else goto c27Jr;
       c27Jq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27Jr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl51_s1Y1U_info" {
     lvl51_s1Y1U_info:
         const lvl51_s1Y1U_entry;
         const 1;
         const 16;
 },
 lvl52_s1Y1V_entry() //  [R1]
         { []
         }
     {offset
       c27Jw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27Jx; else goto c27Jy;
       c27Jx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27Jy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl52_s1Y1V_info" {
     lvl52_s1Y1V_info:
         const lvl52_s1Y1V_entry;
         const 1;
         const 16;
 },
 lvl53_s1Y1W_entry() //  [R1]
         { []
         }
     {offset
       c27JD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27JE; else goto c27JF;
       c27JE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27JF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl53_s1Y1W_info" {
     lvl53_s1Y1W_info:
         const lvl53_s1Y1W_entry;
         const 1;
         const 16;
 },
 sat_s1Y2l_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c27JR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c27JS; else goto c27JT;
       c27JS: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27JT: // global
           I64[Sp - 24] = block_c27JL_info;
           R6 = R3;
           R5 = P64[R1 + 6];
           R4 = P64[R1 + 14];
           _s1Y2j::P64 = R3;
           R3 = P64[R1 + 22];
           _s1Y2i::P64 = R2;
           R2 = P64[R1 + 30];
           P64[Sp - 32] = _s1Y2i::P64;
           P64[Sp - 16] = _s1Y2i::P64;
           P64[Sp - 8] = _s1Y2j::P64;
           Sp = Sp - 32;
           call GHC.Classes.$fOrd(,,,)_$c<_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Y2l_info" {
     sat_s1Y2l_info:
         const sat_s1Y2l_entry;
         const 4;
         const 8;
         const 8589934607;
 },
 _c27JL() //  [R1]
         { []
         }
     {offset
       c27JL: // global
           if (R1 & 7 == 1) goto c27JO; else goto c27JP;
       c27JO: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c27JP: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27JL_info" {
     block_c27JL_info:
         const _c27JL;
         const 2;
         const 30;
 },
 sat_s1Y2h_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c27Kb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c27Kc; else goto c27Kd;
       c27Kc: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27Kd: // global
           I64[Sp - 24] = block_c27K5_info;
           R6 = R3;
           R5 = P64[R1 + 6];
           R4 = P64[R1 + 14];
           _s1Y2f::P64 = R3;
           R3 = P64[R1 + 22];
           _s1Y2e::P64 = R2;
           R2 = P64[R1 + 30];
           P64[Sp - 32] = _s1Y2e::P64;
           P64[Sp - 16] = _s1Y2e::P64;
           P64[Sp - 8] = _s1Y2f::P64;
           Sp = Sp - 32;
           call GHC.Classes.$fOrd(,,,)_$c<_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Y2h_info" {
     sat_s1Y2h_info:
         const sat_s1Y2h_entry;
         const 4;
         const 8;
         const 8589934607;
 },
 _c27K5() //  [R1]
         { []
         }
     {offset
       c27K5: // global
           if (R1 & 7 == 1) goto c27K8; else goto c27K9;
       c27K8: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c27K9: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27K5_info" {
     block_c27K5_info:
         const _c27K5;
         const 2;
         const 30;
 },
 sat_s1Y2d_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c27Kv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27Kw; else goto c27Kx;
       c27Kw: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27Kx: // global
           I64[Sp - 8] = block_c27Kp_info;
           R6 = R2;
           R5 = P64[R1 + 6];
           R4 = P64[R1 + 14];
           _s1Y2b::P64 = R3;
           R3 = P64[R1 + 22];
           R2 = P64[R1 + 30];
           P64[Sp - 16] = _s1Y2b::P64;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,,,)_$c<_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Y2d_info" {
     sat_s1Y2d_info:
         const sat_s1Y2d_entry;
         const 4;
         const 8;
         const 8589934607;
 },
 _c27Kp() //  [R1]
         { []
         }
     {offset
       c27Kp: // global
           if (R1 & 7 == 1) goto c27Ks; else goto c27Kt;
       c27Ks: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c27Kt: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27Kp_info" {
     block_c27Kp_info:
         const _c27Kp;
         const 0;
         const 30;
 },
 sat_s1Y29_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c27KJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c27KK; else goto c27KL;
       c27KK: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27KL: // global
           R6 = R3;
           R5 = P64[R1 + 6];
           R4 = P64[R1 + 14];
           R3 = P64[R1 + 22];
           _s1Y27::P64 = R2;
           R2 = P64[R1 + 30];
           P64[Sp - 8] = _s1Y27::P64;
           Sp = Sp - 8;
           call GHC.Classes.$fOrd(,,,)_$c<_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Y29_info" {
     sat_s1Y29_info:
         const sat_s1Y29_entry;
         const 4;
         const 8;
         const 8589934607;
 },
 sat_s1Y26_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c27KX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c27KY; else goto c27KZ;
       c27KY: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27KZ: // global
           I64[Sp - 8] = block_c27KR_info;
           R6 = R3;
           R5 = P64[R1 + 6];
           R4 = P64[R1 + 14];
           R3 = P64[R1 + 22];
           _s1Y23::P64 = R2;
           R2 = P64[R1 + 30];
           P64[Sp - 16] = _s1Y23::P64;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,,,)_$c<_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Y26_info" {
     sat_s1Y26_info:
         const sat_s1Y26_entry;
         const 4;
         const 8;
         const 8589934607;
 },
 _c27KR() //  [R1]
         { []
         }
     {offset
       c27KR: // global
           if (R1 & 7 == 1) goto c27KU; else goto c27KV;
       c27KU: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c27KV: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27KR_info" {
     block_c27KR_info:
         const _c27KR;
         const 0;
         const 30;
 },
 sat_s1Y22_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c27Lb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c27Lc; else goto c27Ld;
       c27Lc: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27Ld: // global
           R6 = R2;
           R5 = P64[R1 + 6];
           R4 = P64[R1 + 14];
           _B1::P64 = R3;
           R3 = P64[R1 + 22];
           R2 = P64[R1 + 30];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Classes.$fOrd(,,,)_$c<_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Y22_info" {
     sat_s1Y22_info:
         const sat_s1Y22_entry;
         const 4;
         const 8;
         const 8589934607;
 },
 sat_s1Y21_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c27Lj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c27Lk; else goto c27Ll;
       c27Lk: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27Ll: // global
           R6 = R2;
           R5 = P64[R1 + 6];
           R4 = P64[R1 + 14];
           _B1::P64 = R3;
           R3 = P64[R1 + 22];
           R2 = P64[R1 + 30];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Classes.$fOrd(,,,)_$ccompare_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Y21_info" {
     sat_s1Y21_info:
         const sat_s1Y21_entry;
         const 4;
         const 8;
         const 8589934607;
 },
 sat_s1Y20_entry() //  [R1]
         { []
         }
     {offset
       c27Lt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c27Lu; else goto c27Lv;
       c27Lu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27Lv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c27Lq_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 40];
           Sp = Sp - 24;
           call GHC.Classes.$w$cp1Ord_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Y20_info" {
     sat_s1Y20_info:
         const sat_s1Y20_entry;
         const 4;
         const 15;
 },
 _c27Lq() //  [R1, R2]
         { []
         }
     {offset
       c27Lq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27Ly; else goto c27Lx;
       c27Ly: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c27Lx: // global
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c27Lq_info" {
     block_c27Lq_info:
         const _c27Lq;
         const 0;
         const 30;
 },
 GHC.Arr.$w$cp1Ix_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c27Lz: // global
           _s1Y1S::P64 = R5;
           _s1Y1R::P64 = R4;
           _s1Y1Q::P64 = R3;
           _s1Y1P::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c27LA; else goto c27LB;
       c27LB: // global
           Hp = Hp + 424;
           if (Hp > HpLim) (likely: False) goto c27LD; else goto c27LC;
       c27LD: // global
           HpAlloc = 424;
           goto c27LA;
       c27LA: // global
           R5 = _s1Y1S::P64;
           R4 = _s1Y1R::P64;
           R3 = _s1Y1Q::P64;
           R2 = _s1Y1P::P64;
           R1 = GHC.Arr.$w$cp1Ix_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c27LC: // global
           I64[Hp - 416] = lvl50_s1Y1T_info;
           P64[Hp - 400] = _s1Y1S::P64;
           I64[Hp - 392] = lvl51_s1Y1U_info;
           P64[Hp - 376] = _s1Y1R::P64;
           I64[Hp - 368] = lvl52_s1Y1V_info;
           P64[Hp - 352] = _s1Y1Q::P64;
           I64[Hp - 344] = lvl53_s1Y1W_info;
           P64[Hp - 328] = _s1Y1P::P64;
           I64[Hp - 320] = sat_s1Y2l_info;
           _c27Je::P64 = Hp - 416;
           P64[Hp - 312] = _c27Je::P64;
           _c27Jl::P64 = Hp - 392;
           P64[Hp - 304] = _c27Jl::P64;
           _c27Js::P64 = Hp - 368;
           P64[Hp - 296] = _c27Js::P64;
           _c27Jz::P64 = Hp - 344;
           P64[Hp - 288] = _c27Jz::P64;
           I64[Hp - 280] = sat_s1Y2h_info;
           P64[Hp - 272] = _c27Je::P64;
           P64[Hp - 264] = _c27Jl::P64;
           P64[Hp - 256] = _c27Js::P64;
           P64[Hp - 248] = _c27Jz::P64;
           I64[Hp - 240] = sat_s1Y2d_info;
           P64[Hp - 232] = _c27Je::P64;
           P64[Hp - 224] = _c27Jl::P64;
           P64[Hp - 216] = _c27Js::P64;
           P64[Hp - 208] = _c27Jz::P64;
           I64[Hp - 200] = sat_s1Y29_info;
           P64[Hp - 192] = _c27Je::P64;
           P64[Hp - 184] = _c27Jl::P64;
           P64[Hp - 176] = _c27Js::P64;
           P64[Hp - 168] = _c27Jz::P64;
           I64[Hp - 160] = sat_s1Y26_info;
           P64[Hp - 152] = _c27Je::P64;
           P64[Hp - 144] = _c27Jl::P64;
           P64[Hp - 136] = _c27Js::P64;
           P64[Hp - 128] = _c27Jz::P64;
           I64[Hp - 120] = sat_s1Y22_info;
           P64[Hp - 112] = _c27Je::P64;
           P64[Hp - 104] = _c27Jl::P64;
           P64[Hp - 96] = _c27Js::P64;
           P64[Hp - 88] = _c27Jz::P64;
           I64[Hp - 80] = sat_s1Y21_info;
           P64[Hp - 72] = _c27Je::P64;
           P64[Hp - 64] = _c27Jl::P64;
           P64[Hp - 56] = _c27Js::P64;
           P64[Hp - 48] = _c27Jz::P64;
           I64[Hp - 40] = sat_s1Y20_info;
           P64[Hp - 24] = _c27Je::P64;
           P64[Hp - 16] = _c27Jl::P64;
           P64[Hp - 8] = _c27Js::P64;
           P64[Hp] = _c27Jz::P64;
           R6 = Hp - 238;
           R5 = Hp - 198;
           R4 = Hp - 158;
           R3 = Hp - 118;
           R2 = Hp - 78;
           R1 = Hp - 40;
           P64[Sp - 16] = Hp - 278;
           P64[Sp - 8] = Hp - 318;
           Sp = Sp - 16;
           call (I64[P64[Sp + 16]])(R6,
                                    R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$cp1Ix_info" {
     GHC.Arr.$w$cp1Ix_info:
         const GHC.Arr.$w$cp1Ix_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.230668114 UTC

[section ""data" . GHC.Arr.$fIx(,,,)_$cp1Ix_closure" {
     GHC.Arr.$fIx(,,,)_$cp1Ix_closure:
         const GHC.Arr.$fIx(,,,)_$cp1Ix_info;
 },
 GHC.Arr.$fIx(,,,)_$cp1Ix_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c27Nh: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c27Ni; else goto c27Nj;
       c27Ni: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,)_$cp1Ix_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c27Nj: // global
           I64[Sp - 8] = block_c27Nc_info;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Arr.$w$cp1Ix_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 24, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,)_$cp1Ix_info" {
     GHC.Arr.$fIx(,,,)_$cp1Ix_info:
         const GHC.Arr.$fIx(,,,)_$cp1Ix_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c27Nc() //  [R1, R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c27Nc: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 16] = R1;
           Sp = Sp - 48;
           call _c27Nd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c27Nc_info" {
     block_c27Nc_info:
         const _c27Nc;
         const 0;
         const 30;
 },
 _c27Nd() //  []
         { []
         }
     {offset
       c27Nd: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c27Nm; else goto c27Nl;
       c27Nm: // global
           HpAlloc = 72;
           I64[Sp] = block_c27Nd_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c27Nl: // global
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 56];
           R1 = Hp - 63;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27Nd_info" {
     block_c27Nd_info:
         const _c27Nd;
         const 8;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.246937723 UTC

[section ""data" . GHC.Arr.$fIx(,,,)_$crange_closure" {
     GHC.Arr.$fIx(,,,)_$crange_closure:
         const GHC.Arr.$fIx(,,,)_$crange_info;
 },
 lvl50_s1Y2R_entry() //  [R1]
         { []
         }
     {offset
       c27O7: // global
           _s1Y2R::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c27O8; else goto c27O9;
       c27O9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27Ob; else goto c27Oa;
       c27Ob: // global
           HpAlloc = 24;
           goto c27O8;
       c27O8: // global
           R1 = _s1Y2R::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27Oa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1Y2R::P64;
           _s1Y2C::P64 = P64[_s1Y2R::P64 + 16];
           _s1Y2L::P64 = P64[_s1Y2R::P64 + 24];
           _s1Y2Q::P64 = P64[_s1Y2R::P64 + 32];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s1Y2L::P64;
           P64[Hp] = _s1Y2Q::P64;
           R2 = _s1Y2C::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Arr.range_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl50_s1Y2R_info" {
     lvl50_s1Y2R_info:
         const lvl50_s1Y2R_entry;
         const 3;
         const 15;
 },
 lvl51_s1Y2T_entry() //  [R1]
         { []
         }
     {offset
       c27Oh: // global
           _s1Y2T::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c27Oi; else goto c27Oj;
       c27Oj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27Ol; else goto c27Ok;
       c27Ol: // global
           HpAlloc = 24;
           goto c27Oi;
       c27Oi: // global
           R1 = _s1Y2T::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27Ok: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1Y2T::P64;
           _s1Y2B::P64 = P64[_s1Y2T::P64 + 16];
           _s1Y2K::P64 = P64[_s1Y2T::P64 + 24];
           _s1Y2P::P64 = P64[_s1Y2T::P64 + 32];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s1Y2K::P64;
           P64[Hp] = _s1Y2P::P64;
           R2 = _s1Y2B::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Arr.range_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl51_s1Y2T_info" {
     lvl51_s1Y2T_info:
         const lvl51_s1Y2T_entry;
         const 3;
         const 15;
 },
 lvl52_s1Y2V_entry() //  [R1]
         { []
         }
     {offset
       c27Or: // global
           _s1Y2V::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c27Os; else goto c27Ot;
       c27Ot: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27Ov; else goto c27Ou;
       c27Ov: // global
           HpAlloc = 24;
           goto c27Os;
       c27Os: // global
           R1 = _s1Y2V::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c27Ou: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1Y2V::P64;
           _s1Y2A::P64 = P64[_s1Y2V::P64 + 16];
           _s1Y2J::P64 = P64[_s1Y2V::P64 + 24];
           _s1Y2O::P64 = P64[_s1Y2V::P64 + 32];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s1Y2J::P64;
           P64[Hp] = _s1Y2O::P64;
           R2 = _s1Y2A::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Arr.range_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl52_s1Y2V_info" {
     lvl52_s1Y2V_info:
         const lvl52_s1Y2V_entry;
         const 3;
         const 15;
 },
 go3_s1Y3f_entry() //  [R1, R2]
         { []
         }
     {offset
       c27Pi: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c27Pj; else goto c27Pk;
       c27Pj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c27Pk: // global
           I64[Sp - 48] = block_c27Pb_info;
           _s1Y3f::P64 = R1;
           _s1Y30::P64 = P64[R1 + 7];
           _s1Y36::P64 = P64[R1 + 15];
           _s1Y3c::P64 = P64[R1 + 23];
           _s1Y3e::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s1Y30::P64;
           P64[Sp - 32] = _s1Y36::P64;
           P64[Sp - 24] = _s1Y3c::P64;
           P64[Sp - 16] = _s1Y3e::P64;
           P64[Sp - 8] = _s1Y3f::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u27Pw; else goto c27Pc;
       u27Pw: // global
           call _c27Pb(R1) args: 0, res: 0, upd: 0;
       c27Pc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go3_s1Y3f_info" {
     go3_s1Y3f_info:
         const go3_s1Y3f_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _c27Pb() //  [R1]
         { []
         }
     {offset
       c27Pb: // global
           if (R1 & 7 == 1) goto c27Pf; else goto c27Pg;
       c27Pf: // global
           R1 = P64[Sp + 32] & (-8);
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c27Pg: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c27Pv; else goto c27Pu;
       c27Pv: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27Pu: // global
           _s1Y3i::P64 = P64[R1 + 6];
           _s1Y3j::P64 = P64[R1 + 14];
           I64[Hp - 88] = stg_ap_2_upd_info;
           P64[Hp - 72] = P64[Sp + 40];
           P64[Hp - 64] = _s1Y3j::P64;
           I64[Hp - 56] = (,,,)_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = _s1Y3i::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27Pb_info" {
     block_c27Pb_info:
         const _c27Pb;
         const 5;
         const 30;
 },
 go2_s1Y39_entry() //  [R1, R2]
         { []
         }
     {offset
       c27PB: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c27PC; else goto c27PD;
       c27PC: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c27PD: // global
           I64[Sp - 48] = block_c27OZ_info;
           _s1Y39::P64 = R1;
           _s1Y2R::P64 = P64[R1 + 7];
           _s1Y30::P64 = P64[R1 + 15];
           _s1Y36::P64 = P64[R1 + 23];
           _s1Y38::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s1Y2R::P64;
           P64[Sp - 32] = _s1Y30::P64;
           P64[Sp - 24] = _s1Y36::P64;
           P64[Sp - 16] = _s1Y38::P64;
           P64[Sp - 8] = _s1Y39::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u27PJ; else goto c27P0;
       u27PJ: // global
           call _c27OZ(R1) args: 0, res: 0, upd: 0;
       c27P0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go2_s1Y39_info" {
     go2_s1Y39_info:
         const go2_s1Y39_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _c27OZ() //  [R1]
         { []
         }
     {offset
       c27OZ: // global
           if (R1 & 7 == 1) goto c27Py; else goto c27Pz;
       c27Py: // global
           R1 = P64[Sp + 32] & (-8);
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c27Pz: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c27PI; else goto c27PH;
       c27PI: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27PH: // global
           _s1Y3c::P64 = P64[R1 + 6];
           _s1Y3d::P64 = P64[R1 + 14];
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = _s1Y3d::P64;
           I64[Hp - 32] = go3_s1Y3f_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s1Y3c::P64;
           P64[Hp] = Hp - 64;
           R2 = P64[Sp + 8];
           R1 = Hp - 31;
           Sp = Sp + 48;
           call go3_s1Y3f_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27OZ_info" {
     block_c27OZ_info:
         const _c27OZ;
         const 5;
         const 30;
 },
 go1_s1Y33_entry() //  [R1, R2]
         { []
         }
     {offset
       c27PO: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c27PP; else goto c27PQ;
       c27PP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c27PQ: // global
           I64[Sp - 48] = block_c27ON_info;
           _s1Y33::P64 = R1;
           _s1Y2R::P64 = P64[R1 + 7];
           _s1Y2T::P64 = P64[R1 + 15];
           _s1Y30::P64 = P64[R1 + 23];
           _s1Y32::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s1Y2R::P64;
           P64[Sp - 32] = _s1Y2T::P64;
           P64[Sp - 24] = _s1Y30::P64;
           P64[Sp - 16] = _s1Y32::P64;
           P64[Sp - 8] = _s1Y33::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u27PW; else goto c27OO;
       u27PW: // global
           call _c27ON(R1) args: 0, res: 0, upd: 0;
       c27OO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s1Y33_info" {
     go1_s1Y33_info:
         const go1_s1Y33_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _c27ON() //  [R1]
         { []
         }
     {offset
       c27ON: // global
           if (R1 & 7 == 1) goto c27PL; else goto c27PM;
       c27PL: // global
           R1 = P64[Sp + 32] & (-8);
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c27PM: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c27PV; else goto c27PU;
       c27PV: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27PU: // global
           _s1Y36::P64 = P64[R1 + 6];
           _s1Y37::P64 = P64[R1 + 14];
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = _s1Y37::P64;
           I64[Hp - 32] = go2_s1Y39_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s1Y36::P64;
           P64[Hp] = Hp - 64;
           R2 = P64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 48;
           call go2_s1Y39_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27ON_info" {
     block_c27ON_info:
         const _c27ON;
         const 5;
         const 30;
 },
 go_s1Y2X_entry() //  [R1, R2]
         { []
         }
     {offset
       c27Q1: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c27Q2; else goto c27Q3;
       c27Q2: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c27Q3: // global
           I64[Sp - 40] = block_c27OB_info;
           _s1Y2X::P64 = R1;
           _s1Y2R::P64 = P64[R1 + 7];
           _s1Y2T::P64 = P64[R1 + 15];
           _s1Y2V::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _s1Y2R::P64;
           P64[Sp - 24] = _s1Y2T::P64;
           P64[Sp - 16] = _s1Y2V::P64;
           P64[Sp - 8] = _s1Y2X::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u27Q9; else goto c27OC;
       u27Q9: // global
           call _c27OB(R1) args: 0, res: 0, upd: 0;
       c27OC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1Y2X_info" {
     go_s1Y2X_info:
         const go_s1Y2X_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c27OB() //  [R1]
         { []
         }
     {offset
       c27OB: // global
           if (R1 & 7 == 1) goto c27PY; else goto c27PZ;
       c27PY: // global
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c27PZ: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c27Q8; else goto c27Q7;
       c27Q8: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27Q7: // global
           _s1Y30::P64 = P64[R1 + 6];
           _s1Y31::P64 = P64[R1 + 14];
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = _s1Y31::P64;
           I64[Hp - 32] = go1_s1Y33_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s1Y30::P64;
           P64[Hp] = Hp - 64;
           R2 = P64[Sp + 24];
           R1 = Hp - 31;
           Sp = Sp + 40;
           call go1_s1Y33_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27OB_info" {
     block_c27OB_info:
         const _c27OB;
         const 4;
         const 30;
 },
 GHC.Arr.$fIx(,,,)_$crange_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c27Qa: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c27Qd; else goto c27Qe;
       c27Qd: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,)_$crange_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c27Qe: // global
           I64[Sp - 40] = block_c27NN_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u27Qq; else goto c27NO;
       u27Qq: // global
           call _c27NN(R1) args: 0, res: 0, upd: 0;
       c27NO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,)_$crange_info" {
     GHC.Arr.$fIx(,,,)_$crange_info:
         const GHC.Arr.$fIx(,,,)_$crange_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c27NN() //  [R1]
         { []
         }
     {offset
       c27NN: // global
           I64[Sp - 8] = block_c27NS_info;
           _s1Y2G::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Y2G::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u27Qo; else goto c27NT;
       u27Qo: // global
           call _c27NS(R1) args: 0, res: 0, upd: 0;
       c27NT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27NN_info" {
     block_c27NN_info:
         const _c27NN;
         const 4;
         const 30;
 },
 _c27NS() //  [R1]
         { []
         }
     {offset
       c27NS: // global
           I64[Sp - 24] = block_c27NX_info;
           _s1Y2I::P64 = P64[R1 + 7];
           _s1Y2J::P64 = P64[R1 + 15];
           _s1Y2K::P64 = P64[R1 + 23];
           _s1Y2L::P64 = P64[R1 + 31];
           R1 = P64[Sp + 8];
           P64[Sp - 16] = _s1Y2K::P64;
           P64[Sp - 8] = _s1Y2L::P64;
           P64[Sp] = _s1Y2J::P64;
           P64[Sp + 8] = _s1Y2I::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u27Qp; else goto c27NY;
       u27Qp: // global
           call _c27NX(R1) args: 0, res: 0, upd: 0;
       c27NY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27NS_info" {
     block_c27NS_info:
         const _c27NS;
         const 5;
         const 30;
 },
 _c27NX() //  [R1]
         { []
         }
     {offset
       c27NX: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto c27Qj; else goto c27Qi;
       c27Qj: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27Qi: // global
           _s1Y2N::P64 = P64[R1 + 7];
           _s1Y2O::P64 = P64[R1 + 15];
           _s1Y2P::P64 = P64[R1 + 23];
           _s1Y2Q::P64 = P64[R1 + 31];
           I64[Hp - 168] = lvl50_s1Y2R_info;
           P64[Hp - 152] = P64[Sp + 64];
           P64[Hp - 144] = P64[Sp + 16];
           P64[Hp - 136] = _s1Y2Q::P64;
           I64[Hp - 128] = lvl51_s1Y2T_info;
           P64[Hp - 112] = P64[Sp + 56];
           P64[Hp - 104] = P64[Sp + 8];
           P64[Hp - 96] = _s1Y2P::P64;
           I64[Hp - 88] = lvl52_s1Y2V_info;
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = P64[Sp + 24];
           P64[Hp - 56] = _s1Y2O::P64;
           I64[Hp - 48] = go_s1Y2X_info;
           P64[Hp - 40] = Hp - 168;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _s1Y2N::P64;
           I64[Sp + 56] = block_c27Qc_info;
           R2 = P64[Sp + 40];
           I64[Sp + 40] = stg_ap_p_info;
           P64[Sp + 48] = Hp - 15;
           P64[Sp + 64] = Hp - 47;
           Sp = Sp + 40;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27NX_info" {
     block_c27NX_info:
         const _c27NX;
         const 8;
         const 30;
 },
 _c27Qc() //  [R1]
         { []
         }
     {offset
       c27Qc: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1Y2X_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27Qc_info" {
     block_c27Qc_info:
         const _c27Qc;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.285232934 UTC

[section ""data" . GHC.Arr.$fIx(,,,)_$cunsafeIndex_closure" {
     GHC.Arr.$fIx(,,,)_$cunsafeIndex_closure:
         const GHC.Arr.$fIx(,,,)_$cunsafeIndex_info;
 },
 GHC.Arr.$fIx(,,,)_$cunsafeIndex_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c27Sn: // global
           if ((Sp + -136) < SpLim) (likely: False) goto c27Tu; else goto c27Tv;
       c27Tu: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,)_$cunsafeIndex_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c27Tv: // global
           I64[Sp - 40] = block_c27Sk_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u27TS; else goto c27Sl;
       u27TS: // global
           call _c27Sk(R1) args: 0, res: 0, upd: 0;
       c27Sl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,)_$cunsafeIndex_info" {
     GHC.Arr.$fIx(,,,)_$cunsafeIndex_info:
         const GHC.Arr.$fIx(,,,)_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _c27Sk() //  [R1]
         { []
         }
     {offset
       c27Sk: // global
           I64[Sp - 8] = block_c27Sq_info;
           _s1Y3w::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Y3w::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u27TR; else goto c27Sr;
       u27TR: // global
           call _c27Sq(R1) args: 0, res: 0, upd: 0;
       c27Sr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27Sk_info" {
     block_c27Sk_info:
         const _c27Sk;
         const 5;
         const 30;
 },
 _c27Sq() //  [R1]
         { []
         }
     {offset
       c27Sq: // global
           I64[Sp - 24] = block_c27Sv_info;
           _s1Y3y::P64 = P64[R1 + 7];
           _s1Y3z::P64 = P64[R1 + 15];
           _s1Y3A::P64 = P64[R1 + 23];
           _s1Y3B::P64 = P64[R1 + 31];
           R1 = P64[Sp + 8];
           P64[Sp - 16] = _s1Y3A::P64;
           P64[Sp - 8] = _s1Y3B::P64;
           P64[Sp] = _s1Y3z::P64;
           P64[Sp + 8] = _s1Y3y::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u27TT; else goto c27Sw;
       u27TT: // global
           call _c27Sv(R1) args: 0, res: 0, upd: 0;
       c27Sw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27Sq_info" {
     block_c27Sq_info:
         const _c27Sq;
         const 6;
         const 30;
 },
 _c27Sv() //  [R1]
         { []
         }
     {offset
       c27Sv: // global
           I64[Sp - 24] = block_c27SA_info;
           _s1Y3D::P64 = P64[R1 + 7];
           _s1Y3E::P64 = P64[R1 + 15];
           _s1Y3F::P64 = P64[R1 + 23];
           _s1Y3G::P64 = P64[R1 + 31];
           R1 = P64[Sp + 72];
           P64[Sp - 16] = _s1Y3F::P64;
           P64[Sp - 8] = _s1Y3G::P64;
           P64[Sp] = _s1Y3E::P64;
           P64[Sp + 72] = _s1Y3D::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u27TU; else goto c27SB;
       u27TU: // global
           call _c27SA(R1) args: 0, res: 0, upd: 0;
       c27SB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27Sv_info" {
     block_c27Sv_info:
         const _c27Sv;
         const 9;
         const 30;
 },
 _c27SA() //  [R1]
         { []
         }
     {offset
       c27SA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27TB; else goto c27TA;
       c27TB: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27TA: // global
           _s1Y3I::P64 = P64[R1 + 7];
           _s1Y3J::P64 = P64[R1 + 15];
           _s1Y3K::P64 = P64[R1 + 23];
           _s1Y3L::P64 = P64[R1 + 31];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 16];
           I64[Sp - 16] = block_c27SG_info;
           R2 = P64[Sp + 88];
           I64[Sp - 40] = stg_ap_pp_info;
           _c27SF::P64 = Hp - 15;
           P64[Sp - 32] = _c27SF::P64;
           P64[Sp - 24] = _s1Y3L::P64;
           P64[Sp - 8] = _s1Y3K::P64;
           P64[Sp] = _s1Y3J::P64;
           P64[Sp + 16] = _s1Y3I::P64;
           P64[Sp + 40] = _c27SF::P64;
           Sp = Sp - 40;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27SA_info" {
     block_c27SA_info:
         const _c27SA;
         const 12;
         const 30;
 },
 _c27SG() //  [R1]
         { []
         }
     {offset
       c27SG: // global
           I64[Sp] = block_c27SK_info;
           R2 = P64[Sp + 104];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 56];
           I64[Sp + 104] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27SG_info" {
     block_c27SG_info:
         const _c27SG;
         const 14;
         const 30;
 },
 _c27SK() //  [R1]
         { []
         }
     {offset
       c27SK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27TF; else goto c27TE;
       c27TF: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27TE: // global
           _s1Y3R::I64 = I64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 24];
           _s1Y3K::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c27SP_info;
           R2 = P64[Sp + 96];
           I64[Sp - 16] = stg_ap_pp_info;
           _c27SO::P64 = Hp - 15;
           P64[Sp - 8] = _c27SO::P64;
           P64[Sp] = _s1Y3K::P64;
           I64[Sp + 48] = _s1Y3R::I64;
           P64[Sp + 56] = _c27SO::P64;
           Sp = Sp - 16;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27SK_info" {
     block_c27SK_info:
         const _c27SK;
         const 266254;
         const 30;
 },
 _c27SP() //  [R1]
         { []
         }
     {offset
       c27SP: // global
           I64[Sp] = block_c27ST_info;
           R2 = P64[Sp + 88];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 48];
           I64[Sp + 88] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27SP_info" {
     block_c27SP_info:
         const _c27SP;
         const 132237;
         const 30;
 },
 _c27ST() //  [R1]
         { []
         }
     {offset
       c27ST: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27TJ; else goto c27TI;
       c27TJ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27TI: // global
           _s1Y3X::I64 = I64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 16] = block_c27SY_info;
           R2 = P64[Sp + 80];
           I64[Sp - 8] = stg_ap_pp_info;
           _c27SX::P64 = Hp - 15;
           P64[Sp] = _c27SX::P64;
           I64[Sp + 48] = _s1Y3X::I64;
           P64[Sp + 56] = _c27SX::P64;
           Sp = Sp - 8;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27ST_info" {
     block_c27ST_info:
         const _c27ST;
         const 199821;
         const 30;
 },
 _c27SY() //  [R1]
         { []
         }
     {offset
       c27SY: // global
           I64[Sp] = block_c27T2_info;
           R2 = P64[Sp + 64];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 40];
           I64[Sp + 64] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27SY_info" {
     block_c27SY_info:
         const _c27SY;
         const 50059;
         const 30;
 },
 _c27T2() //  [R1]
         { []
         }
     {offset
       c27T2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27TN; else goto c27TM;
       c27TN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27TM: // global
           _s1Y43::I64 = I64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 88];
           I64[Sp + 16] = block_c27T7_info;
           R2 = P64[Sp + 56];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Hp - 15;
           I64[Sp + 88] = _s1Y43::I64;
           Sp = Sp - 8;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27T2_info" {
     block_c27T2_info:
         const _c27T2;
         const 59275;
         const 30;
 },
 _c27T7() //  [R1]
         { []
         }
     {offset
       c27T7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c27TQ; else goto c27TP;
       c27TQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27TP: // global
           _s1Y4c::I64 = I64[Sp + 64] + I64[Sp + 8] * (I64[Sp + 56] + I64[Sp + 16] * (I64[Sp + 48] + I64[Sp + 72] * I64[R1 + 7]));
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1Y4c::I64;
           R1 = Hp - 7;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27T7_info" {
     block_c27T7_info:
         const _c27T7;
         const 32713;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.309617287 UTC

[section ""data" . GHC.Arr.$fIx(,,,)_$cunsafeRangeSize_closure" {
     GHC.Arr.$fIx(,,,)_$cunsafeRangeSize_closure:
         const GHC.Arr.$fIx(,,,)_$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIx(,,,)_$cunsafeRangeSize_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       c27Va: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c27Vl; else goto c27Vm;
       c27Vl: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,)_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c27Vm: // global
           I64[Sp - 40] = block_c27V7_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u27Vr; else goto c27V8;
       u27Vr: // global
           call _c27V7(R1) args: 0, res: 0, upd: 0;
       c27V8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,)_$cunsafeRangeSize_info" {
     GHC.Arr.$fIx(,,,)_$cunsafeRangeSize_info:
         const GHC.Arr.$fIx(,,,)_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c27V7() //  [R1]
         { []
         }
     {offset
       c27V7: // global
           _s1Y4g::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_c27Vd_info;
           R6 = R1;
           R5 = _s1Y4g::P64;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp + 24;
           call GHC.Arr.$fIx(,,,)_$cunsafeIndex_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27V7_info" {
     block_c27V7_info:
         const _c27V7;
         const 4;
         const 30;
 },
 _c27Vd() //  [R1]
         { []
         }
     {offset
       c27Vd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c27Vq; else goto c27Vp;
       c27Vq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27Vp: // global
           _s1Y4n::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1Y4n::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27Vd_info" {
     block_c27Vd_info:
         const _c27Vd;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.322556802 UTC

[section ""data" . GHC.Arr.$fIx(,,,)_$cinRange_closure" {
     GHC.Arr.$fIx(,,,)_$cinRange_closure:
         const GHC.Arr.$fIx(,,,)_$cinRange_info;
 },
 GHC.Arr.$fIx(,,,)_$cinRange_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c27VO: // global
           if ((Sp + -120) < SpLim) (likely: False) goto c27W2; else goto c27W3;
       c27W2: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,)_$cinRange_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c27W3: // global
           I64[Sp - 40] = block_c27VL_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u27X2; else goto c27VM;
       u27X2: // global
           call _c27VL(R1) args: 0, res: 0, upd: 0;
       c27VM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,)_$cinRange_info" {
     GHC.Arr.$fIx(,,,)_$cinRange_info:
         const GHC.Arr.$fIx(,,,)_$cinRange_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _c27VL() //  [R1]
         { []
         }
     {offset
       c27VL: // global
           I64[Sp - 8] = block_c27VR_info;
           _s1Y4w::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Y4w::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u27X1; else goto c27VS;
       u27X1: // global
           call _c27VR(R1) args: 0, res: 0, upd: 0;
       c27VS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27VL_info" {
     block_c27VL_info:
         const _c27VL;
         const 5;
         const 30;
 },
 _c27VR() //  [R1]
         { []
         }
     {offset
       c27VR: // global
           I64[Sp - 24] = block_c27VW_info;
           _s1Y4y::P64 = P64[R1 + 7];
           _s1Y4z::P64 = P64[R1 + 15];
           _s1Y4A::P64 = P64[R1 + 23];
           _s1Y4B::P64 = P64[R1 + 31];
           R1 = P64[Sp + 8];
           P64[Sp - 16] = _s1Y4A::P64;
           P64[Sp - 8] = _s1Y4B::P64;
           P64[Sp] = _s1Y4z::P64;
           P64[Sp + 8] = _s1Y4y::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u27X3; else goto c27VX;
       u27X3: // global
           call _c27VW(R1) args: 0, res: 0, upd: 0;
       c27VX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27VR_info" {
     block_c27VR_info:
         const _c27VR;
         const 6;
         const 30;
 },
 _c27VW() //  [R1]
         { []
         }
     {offset
       c27VW: // global
           I64[Sp - 24] = block_c27W1_info;
           _s1Y4D::P64 = P64[R1 + 7];
           _s1Y4E::P64 = P64[R1 + 15];
           _s1Y4F::P64 = P64[R1 + 23];
           _s1Y4G::P64 = P64[R1 + 31];
           R1 = P64[Sp + 72];
           P64[Sp - 16] = _s1Y4F::P64;
           P64[Sp - 8] = _s1Y4G::P64;
           P64[Sp] = _s1Y4E::P64;
           P64[Sp + 72] = _s1Y4D::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u27X4; else goto c27W7;
       u27X4: // global
           call _c27W1(R1) args: 0, res: 0, upd: 0;
       c27W7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27VW_info" {
     block_c27VW_info:
         const _c27VW;
         const 9;
         const 30;
 },
 _c27W1() //  [R1]
         { []
         }
     {offset
       c27W1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27Wf; else goto c27We;
       c27Wf: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27We: // global
           _s1Y4I::P64 = P64[R1 + 7];
           _s1Y4J::P64 = P64[R1 + 15];
           _s1Y4K::P64 = P64[R1 + 23];
           _s1Y4L::P64 = P64[R1 + 31];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 96];
           I64[Sp] = block_c27Wc_info;
           R2 = P64[Sp + 64];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = _s1Y4I::P64;
           P64[Sp + 56] = _s1Y4L::P64;
           P64[Sp + 64] = _s1Y4K::P64;
           P64[Sp + 96] = _s1Y4J::P64;
           Sp = Sp - 24;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27W1_info" {
     block_c27W1_info:
         const _c27W1;
         const 12;
         const 30;
 },
 _c27Wc() //  [R1]
         { []
         }
     {offset
       c27Wc: // global
           if (R1 & 7 == 1) goto u27WY; else goto c27Wq;
       u27WY: // global
           Sp = Sp + 104;
           call _c27WN() args: 0, res: 0, upd: 0;
       c27Wq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27Wt; else goto c27Ws;
       c27Wt: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27Ws: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_c27Wp_info;
           R2 = P64[Sp + 72];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = P64[Sp + 96];
           Sp = Sp - 24;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27Wc_info" {
     block_c27Wc_info:
         const _c27Wc;
         const 12;
         const 30;
 },
 _c27Wp() //  [R1]
         { []
         }
     {offset
       c27Wp: // global
           if (R1 & 7 == 1) goto u27WZ; else goto c27WE;
       u27WZ: // global
           Sp = Sp + 104;
           call _c27WN() args: 0, res: 0, upd: 0;
       c27WE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27WH; else goto c27WG;
       c27WH: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27WG: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c27WD_info;
           R2 = P64[Sp + 80];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = Hp - 15;
           P64[Sp] = P64[Sp + 64];
           Sp = Sp - 16;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27Wp_info" {
     block_c27Wp_info:
         const _c27Wp;
         const 149772;
         const 30;
 },
 _c27WD() //  [R1]
         { []
         }
     {offset
       c27WD: // global
           if (R1 & 7 == 1) goto u27X0; else goto c27WO;
       u27X0: // global
           Sp = Sp + 96;
           call _c27WN() args: 0, res: 0, upd: 0;
       c27WO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c27WT; else goto c27WS;
       c27WT: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27WS: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           R2 = P64[Sp + 80];
           I64[Sp + 72] = stg_ap_pp_info;
           P64[Sp + 80] = Hp - 15;
           P64[Sp + 88] = P64[Sp + 48];
           Sp = Sp + 72;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27WD_info" {
     block_c27WD_info:
         const _c27WD;
         const 95627;
         const 30;
 },
 _c27WN() //  []
         { []
         }
     {offset
       c27WN: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.342076498 UTC

[section ""data" . GHC.Arr.$fIx(,,,)_$crangeSize_closure" {
     GHC.Arr.$fIx(,,,)_$crangeSize_closure:
         const GHC.Arr.$fIx(,,,)_$crangeSize_info;
 },
 GHC.Arr.$fIx(,,,)_$crangeSize_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c27Y7: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c27Y8; else goto c27Y9;
       c27Y8: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,)_$crangeSize_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c27Y9: // global
           I64[Sp - 40] = block_c27Y4_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u27YA; else goto c27Y5;
       u27YA: // global
           call _c27Y4(R1) args: 0, res: 0, upd: 0;
       c27Y5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,)_$crangeSize_info" {
     GHC.Arr.$fIx(,,,)_$crangeSize_info:
         const GHC.Arr.$fIx(,,,)_$crangeSize_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c27Y4() //  [R1]
         { []
         }
     {offset
       c27Y4: // global
           I64[Sp - 16] = block_c27Yc_info;
           R6 = R1;
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           _s1Y50::P64 = P64[R1 + 15];
           P64[Sp - 24] = _s1Y50::P64;
           P64[Sp - 8] = _s1Y50::P64;
           P64[Sp] = R1;
           Sp = Sp - 24;
           call GHC.Arr.$fIx(,,,)_$cinRange_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27Y4_info" {
     block_c27Y4_info:
         const _c27Y4;
         const 4;
         const 30;
 },
 _c27Yc() //  [R1]
         { []
         }
     {offset
       c27Yc: // global
           if (R1 & 7 == 1) goto c27Yj; else goto c27Yv;
       c27Yj: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c27Yv: // global
           _s1Y4W::P64 = P64[Sp + 48];
           I64[Sp + 48] = block_c27Ym_info;
           R6 = P64[Sp + 16];
           R5 = _s1Y4W::P64;
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 24];
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Arr.$fIx(,,,)_$cunsafeIndex_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c27Yc_info" {
     block_c27Yc_info:
         const _c27Yc;
         const 6;
         const 30;
 },
 _c27Ym() //  [R1]
         { []
         }
     {offset
       c27Ym: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c27Yy; else goto c27Yx;
       c27Yy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c27Yx: // global
           _s1Y54::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1Y54::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27Ym_info" {
     block_c27Ym_info:
         const _c27Ym;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.352528714 UTC

[section ""data" . GHC.Arr.$fIx(,,,)_$cindex_closure" {
     GHC.Arr.$fIx(,,,)_$cindex_closure:
         const GHC.Arr.$fIx(,,,)_$cindex_info;
         const 0;
 },
 GHC.Arr.$fIx(,,,)_$cindex_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c27Z6: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c27Z7; else goto c27Z8;
       c27Z7: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,)_$cindex_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c27Z8: // global
           I64[Sp - 48] = block_c27Z0_info;
           _s1Y59::P64 = R6;
           R6 = R6;
           _s1Y58::P64 = R5;
           R5 = R5;
           _s1Y57::P64 = R4;
           R4 = R4;
           _s1Y56::P64 = R3;
           R3 = R3;
           _s1Y55::P64 = R2;
           R2 = R2;
           P64[Sp - 56] = P64[Sp];
           P64[Sp - 40] = _s1Y55::P64;
           P64[Sp - 32] = _s1Y56::P64;
           P64[Sp - 24] = _s1Y57::P64;
           P64[Sp - 16] = _s1Y58::P64;
           P64[Sp - 8] = _s1Y59::P64;
           Sp = Sp - 56;
           call GHC.Arr.$fIx(,,,)_$cinRange_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,)_$cindex_info" {
     GHC.Arr.$fIx(,,,)_$cindex_info:
         const GHC.Arr.$fIx(,,,)_$cindex_entry;
         const 0;
         const 35188667056142;
         const 25769803802;
         const S1YCH_srt+192;
 },
 _c27Z0() //  [R1]
         { []
         }
     {offset
       c27Z0: // global
           if (R1 & 7 == 1) goto c27Z3; else goto c27Z4;
       c27Z3: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 56;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c27Z4: // global
           R6 = P64[Sp + 40];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 48;
           call GHC.Arr.$fIx(,,,)_$cunsafeIndex_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c27Z0_info" {
     block_c27Z0_info:
         const _c27Z0;
         const 6;
         const 4294967326;
         const S1YCH_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.362801177 UTC

[section ""data" . GHC.Arr.$fIx(,,,)_closure" {
     GHC.Arr.$fIx(,,,)_closure:
         const GHC.Arr.$fIx(,,,)_info;
         const 0;
 },
 sat_s1Y5m_entry() //  [R1, R2]
         { []
         }
     {offset
       c27ZA: // global
           R6 = R2;
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$fIx(,,,)_$cunsafeRangeSize_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Y5m_info" {
     sat_s1Y5m_info:
         const sat_s1Y5m_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 sat_s1Y5l_entry() //  [R1, R2]
         { []
         }
     {offset
       c27ZI: // global
           R6 = R2;
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$fIx(,,,)_$crangeSize_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Y5l_info" {
     sat_s1Y5l_info:
         const sat_s1Y5l_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 sat_s1Y5k_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c27ZQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c27ZR; else goto c27ZS;
       c27ZR: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c27ZS: // global
           R6 = R2;
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Arr.$fIx(,,,)_$cinRange_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Y5k_info" {
     sat_s1Y5k_info:
         const sat_s1Y5k_entry;
         const 4;
         const 8;
         const 8589934607;
 },
 sat_s1Y5j_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c27ZY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c27ZZ; else goto c2800;
       c27ZZ: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2800: // global
           R6 = R2;
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Arr.$fIx(,,,)_$cunsafeIndex_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Y5j_info" {
     sat_s1Y5j_info:
         const sat_s1Y5j_entry;
         const 4;
         const 8;
         const 8589934607;
 },
 sat_s1Y5i_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2806: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2807; else goto c2808;
       c2807: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2808: // global
           R6 = R2;
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Arr.$fIx(,,,)_$cindex_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Y5i_info" {
     sat_s1Y5i_info:
         const sat_s1Y5i_entry;
         const 4;
         const 4294967304;
         const 8589934607;
         const S1YCH_srt+296;
 },
 sat_s1Y5h_entry() //  [R1, R2]
         { []
         }
     {offset
       c280e: // global
           R6 = R2;
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$fIx(,,,)_$crange_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Y5h_info" {
     sat_s1Y5h_info:
         const sat_s1Y5h_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 sat_s1Y5g_entry() //  [R1]
         { []
         }
     {offset
       c280l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c280m; else goto c280n;
       c280m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c280n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$fIx(,,,)_$cp1Ix_entry(R5,
                                               R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Y5g_info" {
     sat_s1Y5g_info:
         const sat_s1Y5g_entry;
         const 4;
         const 15;
 },
 GHC.Arr.$fIx(,,,)_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c280p: // global
           Hp = Hp + 352;
           if (Hp > HpLim) (likely: False) goto c280t; else goto c280s;
       c280t: // global
           HpAlloc = 352;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,)_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c280s: // global
           I64[Hp - 344] = sat_s1Y5m_info;
           P64[Hp - 336] = R2;
           P64[Hp - 328] = R3;
           P64[Hp - 320] = R4;
           P64[Hp - 312] = R5;
           I64[Hp - 304] = sat_s1Y5l_info;
           P64[Hp - 296] = R2;
           P64[Hp - 288] = R3;
           P64[Hp - 280] = R4;
           P64[Hp - 272] = R5;
           I64[Hp - 264] = sat_s1Y5k_info;
           P64[Hp - 256] = R2;
           P64[Hp - 248] = R3;
           P64[Hp - 240] = R4;
           P64[Hp - 232] = R5;
           I64[Hp - 224] = sat_s1Y5j_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           P64[Hp - 200] = R4;
           P64[Hp - 192] = R5;
           I64[Hp - 184] = sat_s1Y5i_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           P64[Hp - 160] = R4;
           P64[Hp - 152] = R5;
           I64[Hp - 144] = sat_s1Y5h_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           P64[Hp - 120] = R4;
           P64[Hp - 112] = R5;
           I64[Hp - 104] = sat_s1Y5g_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R5;
           I64[Hp - 56] = GHC.Arr.C:Ix_con_info;
           P64[Hp - 48] = Hp - 104;
           P64[Hp - 40] = Hp - 143;
           P64[Hp - 32] = Hp - 182;
           P64[Hp - 24] = Hp - 222;
           P64[Hp - 16] = Hp - 262;
           P64[Hp - 8] = Hp - 303;
           P64[Hp] = Hp - 343;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,)_info" {
     GHC.Arr.$fIx(,,,)_info:
         const GHC.Arr.$fIx(,,,)_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S1YCH_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.381159449 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$cp1Ix_closure" {
     GHC.Arr.$fIx(,,)_$cp1Ix_closure:
         const GHC.Arr.$fIx(,,)_$cp1Ix_info;
 },
 sat_s1Y5s_entry() //  [R1]
         { []
         }
     {offset
       c281d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c281e; else goto c281f;
       c281e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c281f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Y5s_info" {
     sat_s1Y5s_info:
         const sat_s1Y5s_entry;
         const 1;
         const 16;
 },
 sat_s1Y5r_entry() //  [R1]
         { []
         }
     {offset
       c281k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c281l; else goto c281m;
       c281l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c281m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Y5r_info" {
     sat_s1Y5r_info:
         const sat_s1Y5r_entry;
         const 1;
         const 16;
 },
 sat_s1Y5q_entry() //  [R1]
         { []
         }
     {offset
       c281r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c281s; else goto c281t;
       c281s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c281t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Y5q_info" {
     sat_s1Y5q_info:
         const sat_s1Y5q_entry;
         const 1;
         const 16;
 },
 GHC.Arr.$fIx(,,)_$cp1Ix_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c281u: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c281y; else goto c281x;
       c281y: // global
           HpAlloc = 72;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$cp1Ix_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c281x: // global
           I64[Hp - 64] = sat_s1Y5s_info;
           P64[Hp - 48] = R4;
           I64[Hp - 40] = sat_s1Y5r_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s1Y5q_info;
           P64[Hp] = R2;
           R4 = Hp - 64;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call GHC.Classes.$fOrd(,,)_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$cp1Ix_info" {
     GHC.Arr.$fIx(,,)_$cp1Ix_info:
         const GHC.Arr.$fIx(,,)_$cp1Ix_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.39099536 UTC

[section ""data" . GHC.Arr.$fIx(,)_$cp1Ix_closure" {
     GHC.Arr.$fIx(,)_$cp1Ix_closure:
         const GHC.Arr.$fIx(,)_$cp1Ix_info;
 },
 sat_s1Y5w_entry() //  [R1]
         { []
         }
     {offset
       c281X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c281Y; else goto c281Z;
       c281Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c281Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Y5w_info" {
     sat_s1Y5w_info:
         const sat_s1Y5w_entry;
         const 1;
         const 16;
 },
 sat_s1Y5v_entry() //  [R1]
         { []
         }
     {offset
       c2824: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2825; else goto c2826;
       c2825: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2826: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Y5v_info" {
     sat_s1Y5v_info:
         const sat_s1Y5v_entry;
         const 1;
         const 16;
 },
 GHC.Arr.$fIx(,)_$cp1Ix_entry() //  [R2, R3]
         { []
         }
     {offset
       c2827: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c282b; else goto c282a;
       c282b: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$cp1Ix_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c282a: // global
           I64[Hp - 40] = sat_s1Y5w_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s1Y5v_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call GHC.Classes.$fOrd(,)_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$cp1Ix_info" {
     GHC.Arr.$fIx(,)_$cp1Ix_info:
         const GHC.Arr.$fIx(,)_$cp1Ix_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.403127626 UTC

[section ""data" . GHC.Arr.$fIx(,)_$s$crange_closure" {
     GHC.Arr.$fIx(,)_$s$crange_closure:
         const GHC.Arr.$fIx(,)_$s$crange_info;
 },
 z_s1Y5U_entry() //  [R1]
         { []
         }
     {offset
       c283n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c283o; else goto c283p;
       c283o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c283p: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s1Y5S::I64 = I64[R1 + 32];
           if (_s1Y5S::I64 == I64[R1 + 24]) goto c283m; else goto c283l;
       c283m: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c283l: // global
           R2 = _s1Y5S::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s1Y5R_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_s1Y5U_info" {
     z_s1Y5U_info:
         const z_s1Y5U_entry;
         const 8589934593;
         const 15;
 },
 go1_s1Y5X_entry() //  [R1, R2]
         { []
         }
     {offset
       c283E: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c283F; else goto c283G;
       c283F: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c283G: // global
           I64[Sp - 32] = block_c283x_info;
           _s1Y5X::P64 = R1;
           _s1Y5T::P64 = P64[R1 + 7];
           _s1Y5U::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s1Y5T::P64;
           P64[Sp - 16] = _s1Y5U::P64;
           P64[Sp - 8] = _s1Y5X::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u283S; else goto c283y;
       u283S: // global
           call _c283x(R1) args: 0, res: 0, upd: 0;
       c283y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s1Y5X_info" {
     go1_s1Y5X_info:
         const go1_s1Y5X_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c283x() //  [R1]
         { []
         }
     {offset
       c283x: // global
           if (R1 & 7 == 1) goto c283B; else goto c283C;
       c283B: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c283C: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c283R; else goto c283Q;
       c283R: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c283Q: // global
           _s1Y60::P64 = P64[R1 + 6];
           _s1Y61::P64 = P64[R1 + 14];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = _s1Y61::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s1Y60::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c283x_info" {
     block_c283x_info:
         const _c283x;
         const 3;
         const 30;
 },
 go_s1Y5R_entry() //  [R1, R2]
         { []
         }
     {offset
       c283T: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c283X; else goto c283W;
       c283X: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c283W: // global
           _s1Y5Q::P64 = P64[R1 + 7];
           _s1Y5K::I64 = I64[R1 + 15];
           I64[Hp - 72] = GHC.Types.I#_con_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = z_s1Y5U_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = _s1Y5K::I64;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = go1_s1Y5X_info;
           P64[Hp - 8] = Hp - 71;
           P64[Hp] = Hp - 56;
           R2 = _s1Y5Q::P64;
           R1 = Hp - 15;
           call go1_s1Y5X_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s1Y5R_info" {
     go_s1Y5R_info:
         const go_s1Y5R_entry;
         const 4294967297;
         const 12;
         const 4294967300;
 },
 GHC.Arr.$fIx(,)_$s$crange_entry() //  [R2]
         { []
         }
     {offset
       c283Y: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c283Z; else goto c2840;
       c283Z: // global
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$s$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2840: // global
           I64[Sp - 8] = block_c282s_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u284k; else goto c282t;
       u284k: // global
           call _c282s(R1) args: 0, res: 0, upd: 0;
       c282t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$s$crange_info" {
     GHC.Arr.$fIx(,)_$s$crange_info:
         const GHC.Arr.$fIx(,)_$s$crange_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c282s() //  [R1]
         { []
         }
     {offset
       c282s: // global
           I64[Sp - 8] = block_c282x_info;
           _s1Y5A::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Y5A::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u284e; else goto c282y;
       u284e: // global
           call _c282x(R1) args: 0, res: 0, upd: 0;
       c282y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c282s_info" {
     block_c282s_info:
         const _c282s;
         const 0;
         const 30;
 },
 _c282x() //  [R1]
         { []
         }
     {offset
       c282x: // global
           I64[Sp - 8] = block_c282C_info;
           _s1Y5C::P64 = P64[R1 + 7];
           _s1Y5D::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1Y5D::P64;
           P64[Sp + 8] = _s1Y5C::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u284f; else goto c282D;
       u284f: // global
           call _c282C(R1) args: 0, res: 0, upd: 0;
       c282D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c282x_info" {
     block_c282x_info:
         const _c282x;
         const 1;
         const 30;
 },
 _c282C() //  [R1]
         { []
         }
     {offset
       c282C: // global
           I64[Sp - 8] = block_c282H_info;
           _s1Y5F::P64 = P64[R1 + 7];
           _s1Y5G::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1Y5G::P64;
           P64[Sp + 16] = _s1Y5F::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u284g; else goto c282I;
       u284g: // global
           call _c282H(R1) args: 0, res: 0, upd: 0;
       c282I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c282C_info" {
     block_c282C_info:
         const _c282C;
         const 2;
         const 30;
 },
 _c282H() //  [R1]
         { []
         }
     {offset
       c282H: // global
           I64[Sp] = block_c282M_info;
           _s1Y5I::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s1Y5I::I64;
           if (R1 & 7 != 0) goto u284h; else goto c282N;
       u284h: // global
           call _c282M(R1) args: 0, res: 0, upd: 0;
       c282N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c282H_info" {
     block_c282H_info:
         const _c282H;
         const 3;
         const 30;
 },
 _c282M() //  [R1]
         { []
         }
     {offset
       c282M: // global
           _s1Y5K::I64 = I64[R1 + 7];
           if (%MO_S_Le_W64(I64[Sp + 24],
                            _s1Y5K::I64)) goto c2847; else goto c284d;
       c2847: // global
           I64[Sp] = block_c282U_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1Y5K::I64;
           if (R1 & 7 != 0) goto u284i; else goto c282V;
       u284i: // global
           call _c282U(R1) args: 0, res: 0, upd: 0;
       c282V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c284d: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c282M_info" {
     block_c282M_info:
         const _c282M;
         const 259;
         const 30;
 },
 _c282U() //  [R1]
         { []
         }
     {offset
       c282U: // global
           I64[Sp] = block_c282Z_info;
           _s1Y5N::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1Y5N::I64;
           if (R1 & 7 != 0) goto u284j; else goto c2830;
       u284j: // global
           call _c282Z(R1) args: 0, res: 0, upd: 0;
       c2830: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c282U_info" {
     block_c282U_info:
         const _c282U;
         const 387;
         const 30;
 },
 _c282Z() //  [R1]
         { []
         }
     {offset
       c282Z: // global
           _s1Y5N::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c2834_info;
           R3 = I64[R1 + 7];
           R2 = _s1Y5N::I64;
           Sp = Sp + 8;
           call GHC.Enum.eftInt_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c282Z_info" {
     block_c282Z_info:
         const _c282Z;
         const 451;
         const 30;
 },
 _c2834() //  [R1]
         { []
         }
     {offset
       c2834: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c284c; else goto c284b;
       c284c: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c284b: // global
           I64[Hp - 16] = go_s1Y5R_info;
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 8];
           R2 = I64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call go_s1Y5R_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2834_info" {
     block_c2834_info:
         const _c2834;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.433287623 UTC

[section ""data" . GHC.Arr.$fIx(,)_$crange_closure" {
     GHC.Arr.$fIx(,)_$crange_closure:
         const GHC.Arr.$fIx(,)_$crange_info;
 },
 lvl50_s1Y6g_entry() //  [R1]
         { []
         }
     {offset
       c285M: // global
           _s1Y6g::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c285N; else goto c285O;
       c285O: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c285Q; else goto c285P;
       c285Q: // global
           HpAlloc = 24;
           goto c285N;
       c285N: // global
           R1 = _s1Y6g::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c285P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1Y6g::P64;
           _s1Y65::P64 = P64[_s1Y6g::P64 + 16];
           _s1Y6c::P64 = P64[_s1Y6g::P64 + 24];
           _s1Y6f::P64 = P64[_s1Y6g::P64 + 32];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s1Y6c::P64;
           P64[Hp] = _s1Y6f::P64;
           R2 = _s1Y65::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Arr.range_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl50_s1Y6g_info" {
     lvl50_s1Y6g_info:
         const lvl50_s1Y6g_entry;
         const 3;
         const 15;
 },
 go1_s1Y6o_entry() //  [R1, R2]
         { []
         }
     {offset
       c286f: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c286g; else goto c286h;
       c286g: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c286h: // global
           I64[Sp - 32] = block_c2868_info;
           _s1Y6o::P64 = R1;
           _s1Y6l::P64 = P64[R1 + 7];
           _s1Y6n::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s1Y6l::P64;
           P64[Sp - 16] = _s1Y6n::P64;
           P64[Sp - 8] = _s1Y6o::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u286t; else goto c2869;
       u286t: // global
           call _c2868(R1) args: 0, res: 0, upd: 0;
       c2869: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s1Y6o_info" {
     go1_s1Y6o_info:
         const go1_s1Y6o_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c2868() //  [R1]
         { []
         }
     {offset
       c2868: // global
           if (R1 & 7 == 1) goto c286c; else goto c286d;
       c286c: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c286d: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c286s; else goto c286r;
       c286s: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c286r: // global
           _s1Y6r::P64 = P64[R1 + 6];
           _s1Y6s::P64 = P64[R1 + 14];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = _s1Y6s::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s1Y6r::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2868_info" {
     block_c2868_info:
         const _c2868;
         const 3;
         const 30;
 },
 go_s1Y6i_entry() //  [R1, R2]
         { []
         }
     {offset
       c286y: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c286z; else goto c286A;
       c286z: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c286A: // global
           I64[Sp - 24] = block_c285W_info;
           _s1Y6i::P64 = R1;
           _s1Y6g::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s1Y6g::P64;
           P64[Sp - 8] = _s1Y6i::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u286G; else goto c285X;
       u286G: // global
           call _c285W(R1) args: 0, res: 0, upd: 0;
       c285X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1Y6i_info" {
     go_s1Y6i_info:
         const go_s1Y6i_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c285W() //  [R1]
         { []
         }
     {offset
       c285W: // global
           if (R1 & 7 == 1) goto c286v; else goto c286w;
       c286v: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c286w: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c286F; else goto c286E;
       c286F: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c286E: // global
           _s1Y6l::P64 = P64[R1 + 6];
           _s1Y6m::P64 = P64[R1 + 14];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s1Y6m::P64;
           I64[Hp - 16] = go1_s1Y6o_info;
           P64[Hp - 8] = _s1Y6l::P64;
           P64[Hp] = Hp - 48;
           R2 = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call go1_s1Y6o_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c285W_info" {
     block_c285W_info:
         const _c285W;
         const 2;
         const 30;
 },
 GHC.Arr.$fIx(,)_$crange_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c286H: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c286K; else goto c286L;
       c286K: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$crange_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c286L: // global
           I64[Sp - 24] = block_c285s_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u286X; else goto c285t;
       u286X: // global
           call _c285s(R1) args: 0, res: 0, upd: 0;
       c285t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$crange_info" {
     GHC.Arr.$fIx(,)_$crange_info:
         const GHC.Arr.$fIx(,)_$crange_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c285s() //  [R1]
         { []
         }
     {offset
       c285s: // global
           I64[Sp - 8] = block_c285x_info;
           _s1Y69::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Y69::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u286V; else goto c285y;
       u286V: // global
           call _c285x(R1) args: 0, res: 0, upd: 0;
       c285y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c285s_info" {
     block_c285s_info:
         const _c285s;
         const 2;
         const 30;
 },
 _c285x() //  [R1]
         { []
         }
     {offset
       c285x: // global
           I64[Sp - 8] = block_c285C_info;
           _s1Y6b::P64 = P64[R1 + 7];
           _s1Y6c::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1Y6c::P64;
           P64[Sp + 8] = _s1Y6b::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u286W; else goto c285D;
       u286W: // global
           call _c285C(R1) args: 0, res: 0, upd: 0;
       c285D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c285x_info" {
     block_c285x_info:
         const _c285x;
         const 3;
         const 30;
 },
 _c285C() //  [R1]
         { []
         }
     {offset
       c285C: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c286Q; else goto c286P;
       c286Q: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c286P: // global
           _s1Y6e::P64 = P64[R1 + 7];
           _s1Y6f::P64 = P64[R1 + 15];
           I64[Hp - 72] = lvl50_s1Y6g_info;
           P64[Hp - 56] = P64[Sp + 32];
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _s1Y6f::P64;
           I64[Hp - 32] = go_s1Y6i_info;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s1Y6e::P64;
           _s1Y64::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c286J_info;
           R2 = _s1Y64::P64;
           I64[Sp + 8] = stg_ap_p_info;
           P64[Sp + 16] = Hp - 15;
           P64[Sp + 32] = Hp - 31;
           Sp = Sp + 8;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c285C_info" {
     block_c285C_info:
         const _c285C;
         const 4;
         const 30;
 },
 _c286J() //  [R1]
         { []
         }
     {offset
       c286J: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1Y6i_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c286J_info" {
     block_c286J_info:
         const _c286J;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.456786828 UTC

[section ""data" . GHC.Arr.$fIx(,)_$s$cunsafeIndex_closure" {
     GHC.Arr.$fIx(,)_$s$cunsafeIndex_closure:
         const GHC.Arr.$fIx(,)_$s$cunsafeIndex_info;
 },
 GHC.Arr.$fIx(,)_$s$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2884: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2894; else goto c2895;
       c2894: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$s$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2895: // global
           I64[Sp - 16] = block_c2881_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u289i; else goto c2882;
       u289i: // global
           call _c2881(R1) args: 0, res: 0, upd: 0;
       c2882: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$s$cunsafeIndex_info" {
     GHC.Arr.$fIx(,)_$s$cunsafeIndex_info:
         const GHC.Arr.$fIx(,)_$s$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2881() //  [R1]
         { []
         }
     {offset
       c2881: // global
           I64[Sp - 8] = block_c2887_info;
           _s1Y6B::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Y6B::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u289h; else goto c2888;
       u289h: // global
           call _c2887(R1) args: 0, res: 0, upd: 0;
       c2888: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2881_info" {
     block_c2881_info:
         const _c2881;
         const 1;
         const 30;
 },
 _c2887() //  [R1]
         { []
         }
     {offset
       c2887: // global
           I64[Sp - 8] = block_c288c_info;
           _s1Y6D::P64 = P64[R1 + 7];
           _s1Y6E::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1Y6E::P64;
           P64[Sp + 8] = _s1Y6D::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u289j; else goto c288d;
       u289j: // global
           call _c288c(R1) args: 0, res: 0, upd: 0;
       c288d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2887_info" {
     block_c2887_info:
         const _c2887;
         const 2;
         const 30;
 },
 _c288c() //  [R1]
         { []
         }
     {offset
       c288c: // global
           I64[Sp] = block_c288h_info;
           _s1Y6H::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s1Y6H::P64;
           if (R1 & 7 != 0) goto u289k; else goto c288i;
       u289k: // global
           call _c288h(R1) args: 0, res: 0, upd: 0;
       c288i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c288c_info" {
     block_c288c_info:
         const _c288c;
         const 3;
         const 30;
 },
 _c288h() //  [R1]
         { []
         }
     {offset
       c288h: // global
           I64[Sp - 8] = block_c288m_info;
           _s1Y6K::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Y6K::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u289l; else goto c288n;
       u289l: // global
           call _c288m(R1) args: 0, res: 0, upd: 0;
       c288n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c288h_info" {
     block_c288h_info:
         const _c288h;
         const 3;
         const 30;
 },
 _c288m() //  [R1]
         { []
         }
     {offset
       c288m: // global
           I64[Sp] = block_c288r_info;
           _s1Y6M::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s1Y6M::I64;
           if (R1 & 7 != 0) goto u289m; else goto c288s;
       u289m: // global
           call _c288r(R1) args: 0, res: 0, upd: 0;
       c288s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c288m_info" {
     block_c288m_info:
         const _c288m;
         const 4;
         const 30;
 },
 _c288r() //  [R1]
         { []
         }
     {offset
       c288r: // global
           I64[Sp] = block_c288w_info;
           _s1Y6O::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s1Y6O::I64;
           if (R1 & 7 != 0) goto u289n; else goto c288x;
       u289n: // global
           call _c288w(R1) args: 0, res: 0, upd: 0;
       c288x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c288r_info" {
     block_c288r_info:
         const _c288r;
         const 260;
         const 30;
 },
 _c288w() //  [R1]
         { []
         }
     {offset
       c288w: // global
           I64[Sp] = block_c288B_info;
           _s1Y6Q::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1Y6Q::I64;
           if (R1 & 7 != 0) goto u289o; else goto c288C;
       u289o: // global
           call _c288B(R1) args: 0, res: 0, upd: 0;
       c288C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c288w_info" {
     block_c288w_info:
         const _c288w;
         const 772;
         const 30;
 },
 _c288B() //  [R1]
         { []
         }
     {offset
       c288B: // global
           I64[Sp] = block_c288G_info;
           _s1Y6S::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1Y6S::I64;
           if (R1 & 7 != 0) goto u289p; else goto c288H;
       u289p: // global
           call _c288G(R1) args: 0, res: 0, upd: 0;
       c288H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c288B_info" {
     block_c288B_info:
         const _c288B;
         const 900;
         const 30;
 },
 _c288G() //  [R1]
         { []
         }
     {offset
       c288G: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c289g; else goto c289f;
       c289g: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c289f: // global
           _s1Y6S::I64 = I64[Sp + 8];
           _s1Y70::I64 = (I64[Sp + 24] - I64[Sp + 32]) * (I64[Sp + 16] + (1 - _s1Y6S::I64)) + (I64[R1 + 7] - _s1Y6S::I64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1Y70::I64;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c288G_info" {
     block_c288G_info:
         const _c288G;
         const 964;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.477808181 UTC

[section ""data" . GHC.Arr.$fIx(,)_$cunsafeIndex_closure" {
     GHC.Arr.$fIx(,)_$cunsafeIndex_closure:
         const GHC.Arr.$fIx(,)_$cunsafeIndex_info;
 },
 GHC.Arr.$fIx(,)_$cunsafeIndex_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c28am: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c28aZ; else goto c28b0;
       c28aZ: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$cunsafeIndex_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c28b0: // global
           I64[Sp - 32] = block_c28aj_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u28bf; else goto c28ak;
       u28bf: // global
           call _c28aj(R1) args: 0, res: 0, upd: 0;
       c28ak: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$cunsafeIndex_info" {
     GHC.Arr.$fIx(,)_$cunsafeIndex_info:
         const GHC.Arr.$fIx(,)_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c28aj() //  [R1]
         { []
         }
     {offset
       c28aj: // global
           I64[Sp - 8] = block_c28ap_info;
           _s1Y77::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Y77::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28be; else goto c28aq;
       u28be: // global
           call _c28ap(R1) args: 0, res: 0, upd: 0;
       c28aq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28aj_info" {
     block_c28aj_info:
         const _c28aj;
         const 3;
         const 30;
 },
 _c28ap() //  [R1]
         { []
         }
     {offset
       c28ap: // global
           I64[Sp - 8] = block_c28au_info;
           _s1Y79::P64 = P64[R1 + 7];
           _s1Y7a::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1Y7a::P64;
           P64[Sp + 8] = _s1Y79::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28bg; else goto c28av;
       u28bg: // global
           call _c28au(R1) args: 0, res: 0, upd: 0;
       c28av: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28ap_info" {
     block_c28ap_info:
         const _c28ap;
         const 4;
         const 30;
 },
 _c28au() //  [R1]
         { []
         }
     {offset
       c28au: // global
           I64[Sp - 8] = block_c28az_info;
           _s1Y7c::P64 = P64[R1 + 7];
           _s1Y7d::P64 = P64[R1 + 15];
           R1 = P64[Sp + 40];
           P64[Sp] = _s1Y7d::P64;
           P64[Sp + 40] = _s1Y7c::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28bh; else goto c28aA;
       u28bh: // global
           call _c28az(R1) args: 0, res: 0, upd: 0;
       c28aA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28au_info" {
     block_c28au_info:
         const _c28au;
         const 5;
         const 30;
 },
 _c28az() //  [R1]
         { []
         }
     {offset
       c28az: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c28b6; else goto c28b5;
       c28b6: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c28b5: // global
           _s1Y7f::P64 = P64[R1 + 7];
           _s1Y7g::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 48];
           I64[Sp] = block_c28aF_info;
           R2 = P64[Sp + 32];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = _s1Y7f::P64;
           P64[Sp + 48] = _s1Y7g::P64;
           Sp = Sp - 24;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28az_info" {
     block_c28az_info:
         const _c28az;
         const 6;
         const 30;
 },
 _c28aF() //  [R1]
         { []
         }
     {offset
       c28aF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c28b9; else goto c28b8;
       c28b9: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c28b8: // global
           _s1Y7j::I64 = I64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 16] = block_c28aK_info;
           R2 = P64[Sp + 40];
           I64[Sp] = stg_ap_p_info;
           _c28aJ::P64 = Hp - 15;
           P64[Sp + 8] = _c28aJ::P64;
           I64[Sp + 24] = _s1Y7j::I64;
           P64[Sp + 32] = _c28aJ::P64;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28aF_info" {
     block_c28aF_info:
         const _c28aF;
         const 774;
         const 30;
 },
 _c28aK() //  [R1]
         { []
         }
     {offset
       c28aK: // global
           I64[Sp] = block_c28aO_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 16];
           P64[Sp - 8] = P64[Sp + 32];
           I64[Sp + 32] = I64[R1 + 7];
           Sp = Sp - 24;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28aK_info" {
     block_c28aK_info:
         const _c28aK;
         const 68;
         const 30;
 },
 _c28aO() //  [R1]
         { []
         }
     {offset
       c28aO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c28bd; else goto c28bc;
       c28bd: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c28bc: // global
           _s1Y7r::I64 = I64[Sp + 8] * I64[Sp + 32] + I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1Y7r::I64;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28aO_info" {
     block_c28aO_info:
         const _c28aO;
         const 964;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.497509434 UTC

[section ""data" . GHC.Arr.$fIx(,)_$s$cinRange_closure" {
     GHC.Arr.$fIx(,)_$s$cinRange_closure:
         const GHC.Arr.$fIx(,)_$s$cinRange_info;
 },
 GHC.Arr.$fIx(,)_$s$cinRange_entry() //  [R2, R3]
         { []
         }
     {offset
       c28c5: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c28cy; else goto c28cz;
       c28cy: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$s$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28cz: // global
           I64[Sp - 16] = block_c28c2_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28dt; else goto c28c3;
       u28dt: // global
           call _c28c2(R1) args: 0, res: 0, upd: 0;
       c28c3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$s$cinRange_info" {
     GHC.Arr.$fIx(,)_$s$cinRange_info:
         const GHC.Arr.$fIx(,)_$s$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c28c2() //  [R1]
         { []
         }
     {offset
       c28c2: // global
           I64[Sp - 8] = block_c28c8_info;
           _s1Y7w::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Y7w::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28ds; else goto c28c9;
       u28ds: // global
           call _c28c8(R1) args: 0, res: 0, upd: 0;
       c28c9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28c2_info" {
     block_c28c2_info:
         const _c28c2;
         const 1;
         const 30;
 },
 _c28c8() //  [R1]
         { []
         }
     {offset
       c28c8: // global
           I64[Sp - 8] = block_c28cd_info;
           _s1Y7y::P64 = P64[R1 + 7];
           _s1Y7z::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1Y7z::P64;
           P64[Sp + 8] = _s1Y7y::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28du; else goto c28ce;
       u28du: // global
           call _c28cd(R1) args: 0, res: 0, upd: 0;
       c28ce: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28c8_info" {
     block_c28c8_info:
         const _c28c8;
         const 2;
         const 30;
 },
 _c28cd() //  [R1]
         { []
         }
     {offset
       c28cd: // global
           I64[Sp - 8] = block_c28ci_info;
           _s1Y7B::P64 = P64[R1 + 7];
           _s1Y7C::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _s1Y7C::P64;
           P64[Sp + 24] = _s1Y7B::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28dv; else goto c28cj;
       u28dv: // global
           call _c28ci(R1) args: 0, res: 0, upd: 0;
       c28cj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28cd_info" {
     block_c28cd_info:
         const _c28cd;
         const 3;
         const 30;
 },
 _c28ci() //  [R1]
         { []
         }
     {offset
       c28ci: // global
           I64[Sp - 8] = block_c28cn_info;
           _s1Y7E::P64 = P64[R1 + 7];
           _s1Y7F::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _s1Y7F::P64;
           P64[Sp + 24] = _s1Y7E::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28dw; else goto c28co;
       u28dw: // global
           call _c28cn(R1) args: 0, res: 0, upd: 0;
       c28co: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28ci_info" {
     block_c28ci_info:
         const _c28ci;
         const 4;
         const 30;
 },
 _c28cn() //  [R1]
         { []
         }
     {offset
       c28cn: // global
           I64[Sp] = block_c28cs_info;
           _s1Y7H::I64 = I64[R1 + 7];
           R1 = P64[Sp + 40];
           I64[Sp + 40] = _s1Y7H::I64;
           if (R1 & 7 != 0) goto u28dx; else goto c28ct;
       u28dx: // global
           call _c28cs(R1) args: 0, res: 0, upd: 0;
       c28ct: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28cn_info" {
     block_c28cn_info:
         const _c28cn;
         const 5;
         const 30;
 },
 _c28cs() //  [R1]
         { []
         }
     {offset
       c28cs: // global
           I64[Sp] = block_c28cx_info;
           _s1Y7J::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s1Y7J::I64;
           if (R1 & 7 != 0) goto u28dy; else goto c28cG;
       u28dy: // global
           call _c28cx(R1) args: 0, res: 0, upd: 0;
       c28cG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28cs_info" {
     block_c28cs_info:
         const _c28cs;
         const 1029;
         const 30;
 },
 _c28cx() //  [R1]
         { []
         }
     {offset
       c28cx: // global
           _s1Y7L::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(I64[Sp + 40],
                            _s1Y7L::I64)) goto u28dp; else goto c28dl;
       u28dp: // global
           Sp = Sp + 48;
           goto u28dB;
       c28dl: // global
           if (%MO_S_Gt_W64(_s1Y7L::I64,
                            I64[Sp + 32])) goto u28dq; else goto c28d8;
       u28dq: // global
           Sp = Sp + 48;
           goto u28dB;
       u28dB: // global
           call _c28dj() args: 0, res: 0, upd: 0;
       c28d8: // global
           I64[Sp] = block_c28cX_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u28dz; else goto c28cY;
       u28dz: // global
           call _c28cX(R1) args: 0, res: 0, upd: 0;
       c28cY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28cx_info" {
     block_c28cx_info:
         const _c28cx;
         const 1541;
         const 30;
 },
 _c28cX() //  [R1]
         { []
         }
     {offset
       c28cX: // global
           I64[Sp] = block_c28d2_info;
           _s1Y7P::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 40] = _s1Y7P::I64;
           if (R1 & 7 != 0) goto u28dC; else goto c28d3;
       u28dC: // global
           call _c28d2(R1) args: 0, res: 0, upd: 0;
       c28d3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28cX_info" {
     block_c28cX_info:
         const _c28cX;
         const 1797;
         const 30;
 },
 _c28d2() //  [R1]
         { []
         }
     {offset
       c28d2: // global
           I64[Sp + 24] = block_c28d7_info;
           _s1Y7R::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 32] = _s1Y7R::I64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u28dD; else goto c28db;
       u28dD: // global
           call _c28d7(R1) args: 0, res: 0, upd: 0;
       c28db: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28d2_info" {
     block_c28d2_info:
         const _c28d2;
         const 1925;
         const 30;
 },
 _c28d7() //  [R1]
         { []
         }
     {offset
       c28d7: // global
           _s1Y7T::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(I64[Sp + 16],
                            _s1Y7T::I64)) goto u28dr; else goto c28dk;
       u28dr: // global
           Sp = Sp + 24;
           call _c28dj() args: 0, res: 0, upd: 0;
       c28dk: // global
           R1 = I64[(%MO_S_Le_W64(_s1Y7T::I64,
                                  I64[Sp + 8]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28d7_info" {
     block_c28d7_info:
         const _c28d7;
         const 194;
         const 30;
 },
 _c28dj() //  []
         { []
         }
     {offset
       c28dj: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.519871299 UTC

[section ""data" . GHC.Arr.$fIx(,)_$cinRange_closure" {
     GHC.Arr.$fIx(,)_$cinRange_closure:
         const GHC.Arr.$fIx(,)_$cinRange_info;
 },
 GHC.Arr.$fIx(,)_$cinRange_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c28eB: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c28eP; else goto c28eQ;
       c28eP: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$cinRange_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c28eQ: // global
           I64[Sp - 32] = block_c28ey_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u28fi; else goto c28ez;
       u28fi: // global
           call _c28ey(R1) args: 0, res: 0, upd: 0;
       c28ez: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$cinRange_info" {
     GHC.Arr.$fIx(,)_$cinRange_info:
         const GHC.Arr.$fIx(,)_$cinRange_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c28ey() //  [R1]
         { []
         }
     {offset
       c28ey: // global
           I64[Sp - 8] = block_c28eE_info;
           _s1Y82::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Y82::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28fh; else goto c28eF;
       u28fh: // global
           call _c28eE(R1) args: 0, res: 0, upd: 0;
       c28eF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28ey_info" {
     block_c28ey_info:
         const _c28ey;
         const 3;
         const 30;
 },
 _c28eE() //  [R1]
         { []
         }
     {offset
       c28eE: // global
           I64[Sp - 8] = block_c28eJ_info;
           _s1Y84::P64 = P64[R1 + 7];
           _s1Y85::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1Y85::P64;
           P64[Sp + 8] = _s1Y84::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28fj; else goto c28eK;
       u28fj: // global
           call _c28eJ(R1) args: 0, res: 0, upd: 0;
       c28eK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28eE_info" {
     block_c28eE_info:
         const _c28eE;
         const 4;
         const 30;
 },
 _c28eJ() //  [R1]
         { []
         }
     {offset
       c28eJ: // global
           I64[Sp - 8] = block_c28eO_info;
           _s1Y87::P64 = P64[R1 + 7];
           _s1Y88::P64 = P64[R1 + 15];
           R1 = P64[Sp + 40];
           P64[Sp] = _s1Y88::P64;
           P64[Sp + 40] = _s1Y87::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28fk; else goto c28eU;
       u28fk: // global
           call _c28eO(R1) args: 0, res: 0, upd: 0;
       c28eU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28eJ_info" {
     block_c28eJ_info:
         const _c28eJ;
         const 5;
         const 30;
 },
 _c28eO() //  [R1]
         { []
         }
     {offset
       c28eO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c28f2; else goto c28f1;
       c28f2: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c28f1: // global
           _s1Y8a::P64 = P64[R1 + 7];
           _s1Y8b::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 48];
           I64[Sp] = block_c28eZ_info;
           R2 = P64[Sp + 32];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = _s1Y8a::P64;
           P64[Sp + 48] = _s1Y8b::P64;
           Sp = Sp - 24;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28eO_info" {
     block_c28eO_info:
         const _c28eO;
         const 6;
         const 30;
 },
 _c28eZ() //  [R1]
         { []
         }
     {offset
       c28eZ: // global
           if (R1 & 7 == 1) goto c28f8; else goto c28f9;
       c28f8: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c28f9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c28fe; else goto c28fd;
       c28fe: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c28fd: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           R2 = P64[Sp + 40];
           I64[Sp + 32] = stg_ap_pp_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28eZ_info" {
     block_c28eZ_info:
         const _c28eZ;
         const 774;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.532247549 UTC

[section ""data" . lvl21_r1Xvy_closure" {
     lvl21_r1Xvy_closure:
         const :_con_info;
         const GHC.Tuple.()_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.53537939 UTC

[section ""data" . GHC.Arr.$fIx()_$crange_closure" {
     GHC.Arr.$fIx()_$crange_closure:
         const GHC.Arr.$fIx()_$crange_info;
 },
 GHC.Arr.$fIx()_$crange_entry() //  [R2]
         { []
         }
     {offset
       c28g0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c28g9; else goto c28ga;
       c28g9: // global
           R2 = R2;
           R1 = GHC.Arr.$fIx()_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c28ga: // global
           I64[Sp - 8] = block_c28fX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28gj; else goto c28fY;
       u28gj: // global
           call _c28fX(R1) args: 0, res: 0, upd: 0;
       c28fY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx()_$crange_info" {
     GHC.Arr.$fIx()_$crange_info:
         const GHC.Arr.$fIx()_$crange_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c28fX() //  [R1]
         { []
         }
     {offset
       c28fX: // global
           I64[Sp - 8] = block_c28g3_info;
           _s1Y8i::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Y8i::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28gi; else goto c28g4;
       u28gi: // global
           call _c28g3() args: 0, res: 0, upd: 0;
       c28g4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28fX_info" {
     block_c28fX_info:
         const _c28fX;
         const 0;
         const 30;
 },
 _c28g3() //  []
         { []
         }
     {offset
       c28g3: // global
           _s1Y8i::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c28g8_info;
           R1 = _s1Y8i::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u28gk; else goto c28gd;
       u28gk: // global
           call _c28g8() args: 0, res: 0, upd: 0;
       c28gd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28g3_info" {
     block_c28g3_info:
         const _c28g3;
         const 1;
         const 30;
 },
 _c28g8() //  []
         { []
         }
     {offset
       c28g8: // global
           R1 = lvl21_r1Xvy_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28g8_info" {
     block_c28g8_info:
         const _c28g8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.54521774 UTC

[section ""data" . GHC.Arr.$fIx()_$cunsafeIndex_closure" {
     GHC.Arr.$fIx()_$cunsafeIndex_closure:
         const GHC.Arr.$fIx()_$cunsafeIndex_info;
 },
 GHC.Arr.$fIx()_$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c28gK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c28gY; else goto c28gZ;
       c28gY: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx()_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28gZ: // global
           I64[Sp - 16] = block_c28gH_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28h9; else goto c28gI;
       u28h9: // global
           call _c28gH(R1) args: 0, res: 0, upd: 0;
       c28gI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx()_$cunsafeIndex_info" {
     GHC.Arr.$fIx()_$cunsafeIndex_info:
         const GHC.Arr.$fIx()_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c28gH() //  [R1]
         { []
         }
     {offset
       c28gH: // global
           I64[Sp - 8] = block_c28gN_info;
           _s1Y8p::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Y8p::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28h8; else goto c28gO;
       u28h8: // global
           call _c28gN() args: 0, res: 0, upd: 0;
       c28gO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28gH_info" {
     block_c28gH_info:
         const _c28gH;
         const 1;
         const 30;
 },
 _c28gN() //  []
         { []
         }
     {offset
       c28gN: // global
           _s1Y8p::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c28gS_info;
           R1 = _s1Y8p::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u28ha; else goto c28gT;
       u28ha: // global
           call _c28gS() args: 0, res: 0, upd: 0;
       c28gT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28gN_info" {
     block_c28gN_info:
         const _c28gN;
         const 2;
         const 30;
 },
 _c28gS() //  []
         { []
         }
     {offset
       c28gS: // global
           _s1Y8m::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c28gX_info;
           R1 = _s1Y8m::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u28hb; else goto c28h3;
       u28hb: // global
           call _c28gX() args: 0, res: 0, upd: 0;
       c28h3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28gS_info" {
     block_c28gS_info:
         const _c28gS;
         const 1;
         const 30;
 },
 _c28gX() //  []
         { []
         }
     {offset
       c28gX: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28gX_info" {
     block_c28gX_info:
         const _c28gX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.555634375 UTC

[section ""data" . GHC.Arr.$fIx()_$cindex_closure" {
     GHC.Arr.$fIx()_$cindex_closure:
         const GHC.Arr.$fIx()_$cindex_info;
 },
 GHC.Arr.$fIx()_$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c28hC: // global
           R3 = R3;
           R2 = R2;
           call GHC.Arr.$fIx()_$cunsafeIndex_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx()_$cindex_info" {
     GHC.Arr.$fIx()_$cindex_info:
         const GHC.Arr.$fIx()_$cindex_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.560076489 UTC

[section ""data" . GHC.Arr.$fIx()_$cinRange_closure" {
     GHC.Arr.$fIx()_$cinRange_closure:
         const GHC.Arr.$fIx()_$cinRange_info;
 },
 GHC.Arr.$fIx()_$cinRange_entry() //  [R2, R3]
         { []
         }
     {offset
       c28hQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c28i4; else goto c28i5;
       c28i4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx()_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28i5: // global
           I64[Sp - 16] = block_c28hN_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28if; else goto c28hO;
       u28if: // global
           call _c28hN(R1) args: 0, res: 0, upd: 0;
       c28hO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx()_$cinRange_info" {
     GHC.Arr.$fIx()_$cinRange_info:
         const GHC.Arr.$fIx()_$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c28hN() //  [R1]
         { []
         }
     {offset
       c28hN: // global
           I64[Sp - 8] = block_c28hT_info;
           _s1Y8x::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Y8x::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28ie; else goto c28hU;
       u28ie: // global
           call _c28hT() args: 0, res: 0, upd: 0;
       c28hU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28hN_info" {
     block_c28hN_info:
         const _c28hN;
         const 1;
         const 30;
 },
 _c28hT() //  []
         { []
         }
     {offset
       c28hT: // global
           _s1Y8x::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c28hY_info;
           R1 = _s1Y8x::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u28ig; else goto c28hZ;
       u28ig: // global
           call _c28hY() args: 0, res: 0, upd: 0;
       c28hZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28hT_info" {
     block_c28hT_info:
         const _c28hT;
         const 2;
         const 30;
 },
 _c28hY() //  []
         { []
         }
     {offset
       c28hY: // global
           _s1Y8u::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c28i3_info;
           R1 = _s1Y8u::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u28ih; else goto c28i9;
       u28ih: // global
           call _c28i3() args: 0, res: 0, upd: 0;
       c28i9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28hY_info" {
     block_c28hY_info:
         const _c28hY;
         const 1;
         const 30;
 },
 _c28i3() //  []
         { []
         }
     {offset
       c28i3: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28i3_info" {
     block_c28i3_info:
         const _c28i3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.569964309 UTC

[section ""data" . GHC.Arr.$fIx()_closure" {
     GHC.Arr.$fIx()_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Classes.$fOrd()_closure;
         const GHC.Arr.$fIx()_$crange_closure+1;
         const GHC.Arr.$fIx()_$cindex_closure+2;
         const GHC.Arr.$fIx()_$cunsafeIndex_closure+2;
         const GHC.Arr.$fIx()_$cinRange_closure+2;
         const GHC.Arr.$fIx()_$cunsafeRangeSize_closure+1;
         const GHC.Arr.$fIx()_$cunsafeRangeSize_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.572746038 UTC

[section ""data" . GHC.Arr.$fIxOrdering_$crange_closure" {
     GHC.Arr.$fIxOrdering_$crange_closure:
         const GHC.Arr.$fIxOrdering_$crange_info;
         const 0;
 },
 GHC.Arr.$fIxOrdering_$crange_entry() //  [R2]
         { []
         }
     {offset
       c28iM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c28iN; else goto c28iO;
       c28iN: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxOrdering_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c28iO: // global
           I64[Sp - 8] = block_c28iJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28iS; else goto c28iK;
       u28iS: // global
           call _c28iJ(R1) args: 0, res: 0, upd: 0;
       c28iK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxOrdering_$crange_info" {
     GHC.Arr.$fIxOrdering_$crange_info:
         const GHC.Arr.$fIxOrdering_$crange_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1YCH_srt+312;
 },
 _c28iJ() //  [R1]
         { []
         }
     {offset
       c28iJ: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.$fEnumOrdering_$cenumFromTo_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28iJ_info" {
     block_c28iJ_info:
         const _c28iJ;
         const 0;
         const 4294967326;
         const S1YCH_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.57819436 UTC

[section ""data" . lvl22_r1Xvz_closure" {
     lvl22_r1Xvz_closure:
         const GHC.Types.I#_con_info;
         const (-1);
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.579756398 UTC

[section ""data" . lvl23_r1XvA_closure" {
     lvl23_r1XvA_closure:
         const GHC.Types.I#_con_info;
         const (-2);
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.584848337 UTC

[section ""data" . GHC.Arr.$fIxOrdering_$cunsafeIndex_closure" {
     GHC.Arr.$fIxOrdering_$cunsafeIndex_closure:
         const GHC.Arr.$fIxOrdering_$cunsafeIndex_info;
 },
 GHC.Arr.$fIxOrdering_$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c28jb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c28jc; else goto c28jd;
       c28jc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxOrdering_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28jd: // global
           I64[Sp - 16] = block_c28j8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28kz; else goto c28j9;
       u28kz: // global
           call _c28j8(R1) args: 0, res: 0, upd: 0;
       c28j9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxOrdering_$cunsafeIndex_info" {
     GHC.Arr.$fIxOrdering_$cunsafeIndex_info:
         const GHC.Arr.$fIxOrdering_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c28j8() //  [R1]
         { []
         }
     {offset
       c28j8: // global
           I64[Sp] = block_c28jg_info;
           _s1Y8I::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1Y8I::P64;
           if (R1 & 7 != 0) goto u28ky; else goto c28ji;
       u28ky: // global
           call _c28jg(R1) args: 0, res: 0, upd: 0;
       c28ji: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28j8_info" {
     block_c28j8_info:
         const _c28j8;
         const 1;
         const 30;
 },
 _c28jg() //  [R1]
         { []
         }
     {offset
       c28jg: // global
           _s1Y8I::P64 = P64[Sp + 8];
           _c28kj::P64 = R1 & 7;
           if (_c28kj::P64 < 3) goto u28kn; else goto c28k3;
       u28kn: // global
           if (_c28kj::P64 < 2) goto c28jp; else goto c28jJ;
       c28jp: // global
           I64[Sp + 8] = block_c28jm_info;
           R1 = _s1Y8I::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u28kA; else goto c28jq;
       u28kA: // global
           call _c28jm(R1) args: 0, res: 0, upd: 0;
       c28jq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c28jJ: // global
           I64[Sp + 8] = block_c28jH_info;
           R1 = _s1Y8I::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u28kB; else goto c28jK;
       u28kB: // global
           call _c28jH(R1) args: 0, res: 0, upd: 0;
       c28jK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c28k3: // global
           I64[Sp + 8] = block_c28k1_info;
           R1 = _s1Y8I::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u28kC; else goto c28k4;
       u28kC: // global
           call _c28k1(R1) args: 0, res: 0, upd: 0;
       c28k4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28jg_info" {
     block_c28jg_info:
         const _c28jg;
         const 1;
         const 30;
 },
 _c28jm() //  [R1]
         { []
         }
     {offset
       c28jm: // global
           _c28km::P64 = R1 & 7;
           if (_c28km::P64 < 3) goto u28ko; else goto c28jE;
       u28ko: // global
           if (_c28km::P64 < 2) goto u28ks; else goto u28kr;
       u28ks: // global
           Sp = Sp + 8;
           call _c28ki() args: 0, res: 0, upd: 0;
       u28kr: // global
           Sp = Sp + 8;
           call _c28jY() args: 0, res: 0, upd: 0;
       c28jE: // global
           R1 = lvl23_r1XvA_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28jm_info" {
     block_c28jm_info:
         const _c28jm;
         const 0;
         const 30;
 },
 _c28jH() //  [R1]
         { []
         }
     {offset
       c28jH: // global
           _c28kl::P64 = R1 & 7;
           if (_c28kl::P64 < 3) goto u28kp; else goto u28kt;
       u28kp: // global
           if (_c28kl::P64 < 2) goto u28kv; else goto u28ku;
       u28kv: // global
           Sp = Sp + 8;
           call _c28ke() args: 0, res: 0, upd: 0;
       u28ku: // global
           Sp = Sp + 8;
           call _c28ki() args: 0, res: 0, upd: 0;
       u28kt: // global
           Sp = Sp + 8;
           call _c28jY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c28jH_info" {
     block_c28jH_info:
         const _c28jH;
         const 0;
         const 30;
 },
 _c28jY() //  []
         { []
         }
     {offset
       c28jY: // global
           R1 = lvl22_r1Xvz_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c28k1() //  [R1]
         { []
         }
     {offset
       c28k1: // global
           _c28kk::P64 = R1 & 7;
           if (_c28kk::P64 < 3) goto u28kq; else goto u28kw;
       u28kq: // global
           if (_c28kk::P64 < 2) goto c28ka; else goto u28kx;
       c28ka: // global
           R1 = lvl18_r1Xvv_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u28kx: // global
           Sp = Sp + 8;
           call _c28ke() args: 0, res: 0, upd: 0;
       u28kw: // global
           Sp = Sp + 8;
           call _c28ki() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c28k1_info" {
     block_c28k1_info:
         const _c28k1;
         const 0;
         const 30;
 },
 _c28ke() //  []
         { []
         }
     {offset
       c28ke: // global
           R1 = lvl17_r1Xvu_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c28ki() //  []
         { []
         }
     {offset
       c28ki: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.603577134 UTC

[section ""data" . GHC.Arr.$w$cinRange_closure" {
     GHC.Arr.$w$cinRange_closure:
         const GHC.Arr.$w$cinRange_info;
 },
 GHC.Arr.$w$cinRange_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c28lC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c28lD; else goto c28lE;
       c28lD: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$w$cinRange_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c28lE: // global
           I64[Sp - 32] = block_c28lu_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u28nB; else goto c28lv;
       u28nB: // global
           call _c28lu(R1) args: 0, res: 0, upd: 0;
       c28lv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$cinRange_info" {
     GHC.Arr.$w$cinRange_info:
         const GHC.Arr.$w$cinRange_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c28lu() //  [R1]
         { []
         }
     {offset
       c28lu: // global
           _s1Y8O::P64 = P64[Sp + 8];
           _c28lB::P64 = R1 & 7;
           if (_c28lB::P64 < 3) goto u28nj; else goto c28lA;
       u28nj: // global
           if (_c28lB::P64 < 2) goto c28ly; else goto c28lz;
       c28ly: // global
           I64[Sp + 8] = block_c28mz_info;
           R1 = _s1Y8O::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u28ny; else goto c28mB;
       u28ny: // global
           call _c28mz(R1) args: 0, res: 0, upd: 0;
       c28mB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c28lz: // global
           I64[Sp + 8] = block_c28mS_info;
           R1 = _s1Y8O::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u28nz; else goto c28mU;
       u28nz: // global
           call _c28mS(R1) args: 0, res: 0, upd: 0;
       c28mU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c28lA: // global
           I64[Sp + 8] = block_c28n7_info;
           R1 = _s1Y8O::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u28nA; else goto c28n9;
       u28nA: // global
           call _c28n7() args: 0, res: 0, upd: 0;
       c28n9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28lu_info" {
     block_c28lu_info:
         const _c28lu;
         const 3;
         const 30;
 },
 _c28mz() //  [R1]
         { []
         }
     {offset
       c28mz: // global
           _c28nf::P64 = R1 & 7;
           if (_c28nf::P64 < 3) goto u28nm; else goto u28nn;
       u28nm: // global
           if (_c28nf::P64 < 2) goto u28np; else goto u28no;
       u28np: // global
           Sp = Sp + 8;
           call _s1Y8R() args: 0, res: 0, upd: 0;
       u28no: // global
           Sp = Sp + 24;
           goto u28nL;
       u28nn: // global
           Sp = Sp + 24;
           goto u28nL;
       u28nL: // global
           call _c28n4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c28mz_info" {
     block_c28mz_info:
         const _c28mz;
         const 2;
         const 30;
 },
 _c28mS() //  [R1]
         { []
         }
     {offset
       c28mS: // global
           if (R1 & 7 == 3) goto u28nq; else goto u28nr;
       u28nq: // global
           Sp = Sp + 24;
           call _c28n4() args: 0, res: 0, upd: 0;
       u28nr: // global
           Sp = Sp + 8;
           call _s1Y8R() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c28mS_info" {
     block_c28mS_info:
         const _c28mS;
         const 2;
         const 30;
 },
 _c28n7() //  []
         { []
         }
     {offset
       c28n7: // global
           Sp = Sp + 8;
           call _s1Y8R() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c28n7_info" {
     block_c28n7_info:
         const _c28n7;
         const 2;
         const 30;
 },
 _s1Y8R() //  []
         { []
         }
     {offset
       s1Y8R: // global
           I64[Sp - 8] = block_c28lI_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28nQ; else goto c28lK;
       u28nQ: // global
           call _c28lI(R1) args: 0, res: 0, upd: 0;
       c28lK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c28lI() //  [R1]
         { []
         }
     {offset
       c28lI: // global
           _s1Y8P::P64 = P64[Sp + 8];
           _c28ng::P64 = R1 & 7;
           if (_c28ng::P64 < 3) goto u28nk; else goto c28ml;
       u28nk: // global
           if (_c28ng::P64 < 2) goto c28lR; else goto c28m1;
       c28lR: // global
           I64[Sp + 16] = block_c28lO_info;
           R1 = _s1Y8P::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u28nC; else goto c28lS;
       u28nC: // global
           call _c28lO() args: 0, res: 0, upd: 0;
       c28lS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c28m1: // global
           I64[Sp + 16] = block_c28lZ_info;
           R1 = _s1Y8P::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u28nD; else goto c28m2;
       u28nD: // global
           call _c28lZ(R1) args: 0, res: 0, upd: 0;
       c28m2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c28ml: // global
           I64[Sp + 16] = block_c28mj_info;
           R1 = _s1Y8P::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u28nE; else goto c28mm;
       u28nE: // global
           call _c28mj(R1) args: 0, res: 0, upd: 0;
       c28mm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28lI_info" {
     block_c28lI_info:
         const _c28lI;
         const 130;
         const 30;
 },
 _c28lO() //  []
         { []
         }
     {offset
       c28lO: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28lO_info" {
     block_c28lO_info:
         const _c28lO;
         const 0;
         const 30;
 },
 _c28lZ() //  [R1]
         { []
         }
     {offset
       c28lZ: // global
           _c28ni::P64 = R1 & 7;
           if (_c28ni::P64 < 3) goto u28nl; else goto u28nt;
       u28nl: // global
           if (_c28ni::P64 < 2) goto u28nv; else goto u28nu;
       u28nv: // global
           Sp = Sp + 8;
           call _c28n4() args: 0, res: 0, upd: 0;
       u28nu: // global
           Sp = Sp + 8;
           goto u28nG;
       u28nt: // global
           Sp = Sp + 8;
           goto u28nG;
       u28nG: // global
           call _c28mw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c28lZ_info" {
     block_c28lZ_info:
         const _c28lZ;
         const 0;
         const 30;
 },
 _c28mj() //  [R1]
         { []
         }
     {offset
       c28mj: // global
           if (R1 & 7 == 3) goto u28nw; else goto u28nx;
       u28nw: // global
           Sp = Sp + 8;
           call _c28mw() args: 0, res: 0, upd: 0;
       u28nx: // global
           Sp = Sp + 8;
           call _c28n4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c28mj_info" {
     block_c28mj_info:
         const _c28mj;
         const 0;
         const 30;
 },
 _c28mw() //  []
         { []
         }
     {offset
       c28mw: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c28n4() //  []
         { []
         }
     {offset
       c28n4: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.624098639 UTC

[section ""data" . GHC.Arr.$fIxOrdering_$cinRange_closure" {
     GHC.Arr.$fIxOrdering_$cinRange_closure:
         const GHC.Arr.$fIxOrdering_$cinRange_info;
 },
 GHC.Arr.$fIxOrdering_$cinRange_entry() //  [R2, R3]
         { []
         }
     {offset
       c28oQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c28oR; else goto c28oS;
       c28oR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxOrdering_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28oS: // global
           I64[Sp - 16] = block_c28oN_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28oW; else goto c28oO;
       u28oW: // global
           call _c28oN(R1) args: 0, res: 0, upd: 0;
       c28oO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxOrdering_$cinRange_info" {
     GHC.Arr.$fIxOrdering_$cinRange_info:
         const GHC.Arr.$fIxOrdering_$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c28oN() //  [R1]
         { []
         }
     {offset
       c28oN: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Arr.$w$cinRange_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28oN_info" {
     block_c28oN_info:
         const _c28oN;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.631938449 UTC

[section ""data" . GHC.Arr.$w$crangeSize3_closure" {
     GHC.Arr.$w$crangeSize3_closure:
         const GHC.Arr.$w$crangeSize3_info;
 },
 GHC.Arr.$w$crangeSize3_entry() //  [R2, R3]
         { []
         }
     {offset
       c28pg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c28ph; else goto c28pi;
       c28ph: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$w$crangeSize3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28pi: // global
           I64[Sp - 24] = block_c28pa_info;
           R4 = R3;
           _s1Y96::P64 = R3;
           R3 = R3;
           _s1Y95::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s1Y95::P64;
           P64[Sp - 8] = _s1Y96::P64;
           Sp = Sp - 24;
           call GHC.Arr.$w$cinRange_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$crangeSize3_info" {
     GHC.Arr.$w$crangeSize3_info:
         const GHC.Arr.$w$crangeSize3_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c28pa() //  [R1]
         { []
         }
     {offset
       c28pa: // global
           if (R1 & 7 == 1) goto u28qz; else goto c28pe;
       u28qz: // global
           Sp = Sp + 24;
           call _c28q6() args: 0, res: 0, upd: 0;
       c28pe: // global
           I64[Sp] = block_c28po_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u28qH; else goto c28pq;
       u28qH: // global
           call _c28po(R1) args: 0, res: 0, upd: 0;
       c28pq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28pa_info" {
     block_c28pa_info:
         const _c28pa;
         const 2;
         const 30;
 },
 _c28po() //  [R1]
         { []
         }
     {offset
       c28po: // global
           _s1Y95::P64 = P64[Sp + 8];
           _c28qr::P64 = R1 & 7;
           if (_c28qr::P64 < 3) goto u28qv; else goto c28qb;
       u28qv: // global
           if (_c28qr::P64 < 2) goto c28px; else goto c28pR;
       c28px: // global
           I64[Sp + 16] = block_c28pu_info;
           R1 = _s1Y95::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u28qJ; else goto c28py;
       u28qJ: // global
           call _c28pu(R1) args: 0, res: 0, upd: 0;
       c28py: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c28pR: // global
           I64[Sp + 16] = block_c28pP_info;
           R1 = _s1Y95::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u28qK; else goto c28pS;
       u28qK: // global
           call _c28pP(R1) args: 0, res: 0, upd: 0;
       c28pS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c28qb: // global
           I64[Sp + 16] = block_c28q9_info;
           R1 = _s1Y95::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u28qL; else goto c28qc;
       u28qL: // global
           call _c28q9(R1) args: 0, res: 0, upd: 0;
       c28qc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28po_info" {
     block_c28po_info:
         const _c28po;
         const 130;
         const 30;
 },
 _c28pu() //  [R1]
         { []
         }
     {offset
       c28pu: // global
           _c28qu::P64 = R1 & 7;
           if (_c28qu::P64 < 3) goto u28qw; else goto c28pM;
       u28qw: // global
           if (_c28qu::P64 < 2) goto u28qB; else goto u28qA;
       u28qB: // global
           Sp = Sp + 8;
           call _c28qq() args: 0, res: 0, upd: 0;
       u28qA: // global
           Sp = Sp + 8;
           call _c28q6() args: 0, res: 0, upd: 0;
       c28pM: // global
           R1 = (-1);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28pu_info" {
     block_c28pu_info:
         const _c28pu;
         const 0;
         const 30;
 },
 _c28pP() //  [R1]
         { []
         }
     {offset
       c28pP: // global
           _c28qt::P64 = R1 & 7;
           if (_c28qt::P64 < 3) goto u28qx; else goto u28qC;
       u28qx: // global
           if (_c28qt::P64 < 2) goto u28qE; else goto u28qD;
       u28qE: // global
           Sp = Sp + 8;
           call _c28qm() args: 0, res: 0, upd: 0;
       u28qD: // global
           Sp = Sp + 8;
           call _c28qq() args: 0, res: 0, upd: 0;
       u28qC: // global
           Sp = Sp + 8;
           call _c28q6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c28pP_info" {
     block_c28pP_info:
         const _c28pP;
         const 0;
         const 30;
 },
 _c28q6() //  []
         { []
         }
     {offset
       c28q6: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c28q9() //  [R1]
         { []
         }
     {offset
       c28q9: // global
           _c28qs::P64 = R1 & 7;
           if (_c28qs::P64 < 3) goto u28qy; else goto u28qF;
       u28qy: // global
           if (_c28qs::P64 < 2) goto c28qi; else goto u28qG;
       c28qi: // global
           R1 = 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u28qG: // global
           Sp = Sp + 8;
           call _c28qm() args: 0, res: 0, upd: 0;
       u28qF: // global
           Sp = Sp + 8;
           call _c28qq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c28q9_info" {
     block_c28q9_info:
         const _c28q9;
         const 0;
         const 30;
 },
 _c28qm() //  []
         { []
         }
     {offset
       c28qm: // global
           R1 = 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c28qq() //  []
         { []
         }
     {offset
       c28qq: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.647221256 UTC

[section ""data" . GHC.Arr.$fIxOrdering_$crangeSize_closure" {
     GHC.Arr.$fIxOrdering_$crangeSize_closure:
         const GHC.Arr.$fIxOrdering_$crangeSize_info;
 },
 GHC.Arr.$fIxOrdering_$crangeSize_entry() //  [R2]
         { []
         }
     {offset
       c28rF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c28rN; else goto c28rO;
       c28rN: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxOrdering_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c28rO: // global
           I64[Sp - 8] = block_c28rC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28rT; else goto c28rD;
       u28rT: // global
           call _c28rC(R1) args: 0, res: 0, upd: 0;
       c28rD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxOrdering_$crangeSize_info" {
     GHC.Arr.$fIxOrdering_$crangeSize_info:
         const GHC.Arr.$fIxOrdering_$crangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c28rC() //  [R1]
         { []
         }
     {offset
       c28rC: // global
           I64[Sp] = block_c28rI_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$w$crangeSize3_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28rC_info" {
     block_c28rC_info:
         const _c28rC;
         const 0;
         const 30;
 },
 _c28rI() //  [R1]
         { []
         }
     {offset
       c28rI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c28rS; else goto c28rR;
       c28rS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c28rR: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28rI_info" {
     block_c28rI_info:
         const _c28rI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.655069253 UTC

[section ""data" . GHC.Arr.$fIxBool_$crange_closure" {
     GHC.Arr.$fIxBool_$crange_closure:
         const GHC.Arr.$fIxBool_$crange_info;
         const 0;
 },
 GHC.Arr.$fIxBool_$crange_entry() //  [R2]
         { []
         }
     {offset
       c28se: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c28sf; else goto c28sg;
       c28sf: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxBool_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c28sg: // global
           I64[Sp - 8] = block_c28sb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28sk; else goto c28sc;
       u28sk: // global
           call _c28sb(R1) args: 0, res: 0, upd: 0;
       c28sc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxBool_$crange_info" {
     GHC.Arr.$fIxBool_$crange_info:
         const GHC.Arr.$fIxBool_$crange_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1YCH_srt+328;
 },
 _c28sb() //  [R1]
         { []
         }
     {offset
       c28sb: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.$fEnumBool_$cenumFromTo_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28sb_info" {
     block_c28sb_info:
         const _c28sb;
         const 0;
         const 4294967326;
         const S1YCH_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.662648506 UTC

[section ""data" . GHC.Arr.$fIxBool_$cunsafeIndex_closure" {
     GHC.Arr.$fIxBool_$cunsafeIndex_closure:
         const GHC.Arr.$fIxBool_$cunsafeIndex_info;
 },
 GHC.Arr.$fIxBool_$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c28sB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c28sC; else goto c28sD;
       c28sC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxBool_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28sD: // global
           I64[Sp - 16] = block_c28sy_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28tn; else goto c28sz;
       u28tn: // global
           call _c28sy(R1) args: 0, res: 0, upd: 0;
       c28sz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxBool_$cunsafeIndex_info" {
     GHC.Arr.$fIxBool_$cunsafeIndex_info:
         const GHC.Arr.$fIxBool_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c28sy() //  [R1]
         { []
         }
     {offset
       c28sy: // global
           I64[Sp] = block_c28sG_info;
           _s1Y9o::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1Y9o::P64;
           if (R1 & 7 != 0) goto u28tm; else goto c28sI;
       u28tm: // global
           call _c28sG(R1) args: 0, res: 0, upd: 0;
       c28sI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28sy_info" {
     block_c28sy_info:
         const _c28sy;
         const 1;
         const 30;
 },
 _c28sG() //  [R1]
         { []
         }
     {offset
       c28sG: // global
           _s1Y9o::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c28sP; else goto c28t5;
       c28sP: // global
           I64[Sp + 8] = block_c28sM_info;
           R1 = _s1Y9o::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u28to; else goto c28sQ;
       u28to: // global
           call _c28sM(R1) args: 0, res: 0, upd: 0;
       c28sQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c28t5: // global
           I64[Sp + 8] = block_c28t3_info;
           R1 = _s1Y9o::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u28tp; else goto c28t6;
       u28tp: // global
           call _c28t3(R1) args: 0, res: 0, upd: 0;
       c28t6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28sG_info" {
     block_c28sG_info:
         const _c28sG;
         const 1;
         const 30;
 },
 _c28sM() //  [R1]
         { []
         }
     {offset
       c28sM: // global
           if (R1 & 7 == 1) goto u28tl; else goto c28t0;
       u28tl: // global
           Sp = Sp + 8;
           call _c28tg() args: 0, res: 0, upd: 0;
       c28t0: // global
           R1 = lvl22_r1Xvz_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28sM_info" {
     block_c28sM_info:
         const _c28sM;
         const 0;
         const 30;
 },
 _c28t3() //  [R1]
         { []
         }
     {offset
       c28t3: // global
           if (R1 & 7 == 1) goto c28tc; else goto u28tk;
       c28tc: // global
           R1 = lvl17_r1Xvu_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u28tk: // global
           Sp = Sp + 8;
           call _c28tg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c28t3_info" {
     block_c28t3_info:
         const _c28t3;
         const 0;
         const 30;
 },
 _c28tg() //  []
         { []
         }
     {offset
       c28tg: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.675163721 UTC

[section ""data" . GHC.Arr.$fIxBool_$cinRange_closure" {
     GHC.Arr.$fIxBool_$cinRange_closure:
         const GHC.Arr.$fIxBool_$cinRange_info;
 },
 GHC.Arr.$fIxBool_$cinRange_entry() //  [R2, R3]
         { []
         }
     {offset
       c28u5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c28u6; else goto c28u7;
       c28u6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxBool_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28u7: // global
           I64[Sp - 16] = block_c28u2_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28uO; else goto c28u3;
       u28uO: // global
           call _c28u2(R1) args: 0, res: 0, upd: 0;
       c28u3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxBool_$cinRange_info" {
     GHC.Arr.$fIxBool_$cinRange_info:
         const GHC.Arr.$fIxBool_$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c28u2() //  [R1]
         { []
         }
     {offset
       c28u2: // global
           I64[Sp - 8] = block_c28ua_info;
           _s1Y9w::P64 = P64[R1 + 7];
           _s1Y9x::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1Y9x::P64;
           P64[Sp + 8] = _s1Y9w::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28uN; else goto c28uc;
       u28uN: // global
           call _c28ua(R1) args: 0, res: 0, upd: 0;
       c28uc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28u2_info" {
     block_c28u2_info:
         const _c28u2;
         const 1;
         const 30;
 },
 _c28ua() //  [R1]
         { []
         }
     {offset
       c28ua: // global
           _s1Y9w::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c28uj; else goto c28uF;
       c28uj: // global
           I64[Sp] = block_c28ug_info;
           R1 = _s1Y9w::P64;
           if (R1 & 7 != 0) goto u28uP; else goto c28uk;
       u28uP: // global
           call _c28ug(R1) args: 0, res: 0, upd: 0;
       c28uk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c28uF: // global
           I64[Sp] = block_c28uD_info;
           R1 = _s1Y9w::P64;
           if (R1 & 7 != 0) goto u28uQ; else goto c28uG;
       u28uQ: // global
           call _c28uD() args: 0, res: 0, upd: 0;
       c28uG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28ua_info" {
     block_c28ua_info:
         const _c28ua;
         const 2;
         const 30;
 },
 _c28ug() //  [R1]
         { []
         }
     {offset
       c28ug: // global
           if (R1 & 7 == 1) goto c28ur; else goto c28uA;
       c28ur: // global
           I64[Sp + 16] = block_c28uo_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u28uR; else goto c28us;
       u28uR: // global
           call _c28uo() args: 0, res: 0, upd: 0;
       c28us: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c28uA: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28ug_info" {
     block_c28ug_info:
         const _c28ug;
         const 130;
         const 30;
 },
 _c28uo() //  []
         { []
         }
     {offset
       c28uo: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28uo_info" {
     block_c28uo_info:
         const _c28uo;
         const 0;
         const 30;
 },
 _c28uD() //  []
         { []
         }
     {offset
       c28uD: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28uD_info" {
     block_c28uD_info:
         const _c28uD;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.687211694 UTC

[section ""data" . GHC.Arr.$fIxInteger_$crange_closure" {
     GHC.Arr.$fIxInteger_$crange_closure:
         const GHC.Arr.$fIxInteger_$crange_info;
         const 0;
 },
 GHC.Arr.$fIxInteger_$crange_entry() //  [R2]
         { []
         }
     {offset
       c28vw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c28vx; else goto c28vy;
       c28vx: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxInteger_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c28vy: // global
           I64[Sp - 8] = block_c28vt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28vC; else goto c28vu;
       u28vC: // global
           call _c28vt(R1) args: 0, res: 0, upd: 0;
       c28vu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInteger_$crange_info" {
     GHC.Arr.$fIxInteger_$crange_info:
         const GHC.Arr.$fIxInteger_$crange_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S1YCH_srt+344;
 },
 _c28vt() //  [R1]
         { []
         }
     {offset
       c28vt: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.$fEnumInteger_$cenumFromTo_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28vt_info" {
     block_c28vt_info:
         const _c28vt;
         const 0;
         const 4294967326;
         const S1YCH_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.693763657 UTC

[section ""data" . GHC.Arr.$fIxInteger_$cunsafeIndex_closure" {
     GHC.Arr.$fIxInteger_$cunsafeIndex_closure:
         const GHC.Arr.$fIxInteger_$cunsafeIndex_info;
         const 0;
 },
 GHC.Arr.$fIxInteger_$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c28vT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c28w5; else goto c28w6;
       c28w5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxInteger_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28w6: // global
           I64[Sp - 16] = block_c28vQ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28wc; else goto c28vR;
       u28wc: // global
           call _c28vQ(R1) args: 0, res: 0, upd: 0;
       c28vR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInteger_$cunsafeIndex_info" {
     GHC.Arr.$fIxInteger_$cunsafeIndex_info:
         const GHC.Arr.$fIxInteger_$cunsafeIndex_entry;
         const 0;
         const 70373039144974;
         const 8589934607;
         const S1YCH_srt+248;
 },
 _c28vQ() //  [R1]
         { []
         }
     {offset
       c28vQ: // global
           _s1Y9H::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c28vW_info;
           R3 = P64[R1 + 7];
           R2 = _s1Y9H::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28vQ_info" {
     block_c28vQ_info:
         const _c28vQ;
         const 1;
         const 4294967326;
         const S1YCH_srt+248;
 },
 _c28vW() //  [R1]
         { []
         }
     {offset
       c28vW: // global
           I64[Sp] = block_c28w0_info;
           R2 = R1;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28vW_info" {
     block_c28vW_info:
         const _c28vW;
         const 0;
         const 30;
 },
 _c28w0() //  [R1]
         { []
         }
     {offset
       c28w0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c28wb; else goto c28wa;
       c28wb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c28wa: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28w0_info" {
     block_c28w0_info:
         const _c28w0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.70321632 UTC

[section ""data" . GHC.Arr.$fIxInteger_$cinRange_closure" {
     GHC.Arr.$fIxInteger_$cinRange_closure:
         const GHC.Arr.$fIxInteger_$cinRange_info;
 },
 GHC.Arr.$fIxInteger_$cinRange_entry() //  [R2, R3]
         { []
         }
     {offset
       c28wA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c28wB; else goto c28wC;
       c28wB: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxInteger_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28wC: // global
           I64[Sp - 16] = block_c28wx_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28wR; else goto c28wy;
       u28wR: // global
           call _c28wx(R1) args: 0, res: 0, upd: 0;
       c28wy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInteger_$cinRange_info" {
     GHC.Arr.$fIxInteger_$cinRange_info:
         const GHC.Arr.$fIxInteger_$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c28wx() //  [R1]
         { []
         }
     {offset
       c28wx: // global
           I64[Sp - 8] = block_c28wF_info;
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28wx_info" {
     block_c28wx_info:
         const _c28wx;
         const 1;
         const 30;
 },
 _c28wF() //  [R1]
         { []
         }
     {offset
       c28wF: // global
           if (R1 == 1) goto c28wQ; else goto c28wM;
       c28wQ: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Integer.Type.leInteger_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
       c28wM: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28wF_info" {
     block_c28wF_info:
         const _c28wF;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.710618653 UTC

[section ""data" . GHC.Arr.$fIxWord_$crange_closure" {
     GHC.Arr.$fIxWord_$crange_closure:
         const GHC.Arr.$fIxWord_$crange_info;
 },
 GHC.Arr.$fIxWord_$crange_entry() //  [R2]
         { []
         }
     {offset
       c28xd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c28xe; else goto c28xf;
       c28xe: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxWord_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c28xf: // global
           I64[Sp - 8] = block_c28xa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28xj; else goto c28xb;
       u28xj: // global
           call _c28xa(R1) args: 0, res: 0, upd: 0;
       c28xb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxWord_$crange_info" {
     GHC.Arr.$fIxWord_$crange_info:
         const GHC.Arr.$fIxWord_$crange_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c28xa() //  [R1]
         { []
         }
     {offset
       c28xa: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.$fEnumWord_$cenumFromTo_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28xa_info" {
     block_c28xa_info:
         const _c28xa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.716822234 UTC

[section ""data" . GHC.Arr.$fIxWord_$cunsafeIndex_closure" {
     GHC.Arr.$fIxWord_$cunsafeIndex_closure:
         const GHC.Arr.$fIxWord_$cunsafeIndex_info;
 },
 GHC.Arr.$fIxWord_$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c28xA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c28xU; else goto c28xV;
       c28xU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxWord_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28xV: // global
           I64[Sp - 16] = block_c28xx_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28y2; else goto c28xy;
       u28y2: // global
           call _c28xx(R1) args: 0, res: 0, upd: 0;
       c28xy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxWord_$cunsafeIndex_info" {
     GHC.Arr.$fIxWord_$cunsafeIndex_info:
         const GHC.Arr.$fIxWord_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c28xx() //  [R1]
         { []
         }
     {offset
       c28xx: // global
           I64[Sp] = block_c28xD_info;
           _s1Ya0::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1Ya0::P64;
           if (R1 & 7 != 0) goto u28y1; else goto c28xE;
       u28y1: // global
           call _c28xD(R1) args: 0, res: 0, upd: 0;
       c28xE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28xx_info" {
     block_c28xx_info:
         const _c28xx;
         const 1;
         const 30;
 },
 _c28xD() //  [R1]
         { []
         }
     {offset
       c28xD: // global
           I64[Sp] = block_c28xI_info;
           _s1Ya3::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1Ya3::I64;
           if (R1 & 7 != 0) goto u28y3; else goto c28xJ;
       u28y3: // global
           call _c28xI(R1) args: 0, res: 0, upd: 0;
       c28xJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28xD_info" {
     block_c28xD_info:
         const _c28xD;
         const 1;
         const 30;
 },
 _c28xI() //  [R1]
         { []
         }
     {offset
       c28xI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c28y0; else goto c28xZ;
       c28y0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c28xZ: // global
           _s1Ya7::I64 = I64[Sp + 8] - I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1Ya7::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28xI_info" {
     block_c28xI_info:
         const _c28xI;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.727066108 UTC

[section ""data" . GHC.Arr.$fIxWord_$cinRange_closure" {
     GHC.Arr.$fIxWord_$cinRange_closure:
         const GHC.Arr.$fIxWord_$cinRange_info;
 },
 GHC.Arr.$fIxWord_$cinRange_entry() //  [R2, R3]
         { []
         }
     {offset
       c28yv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c28yE; else goto c28yF;
       c28yE: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxWord_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28yF: // global
           I64[Sp - 16] = block_c28ys_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28z2; else goto c28yt;
       u28z2: // global
           call _c28ys(R1) args: 0, res: 0, upd: 0;
       c28yt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxWord_$cinRange_info" {
     GHC.Arr.$fIxWord_$cinRange_info:
         const GHC.Arr.$fIxWord_$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c28ys() //  [R1]
         { []
         }
     {offset
       c28ys: // global
           I64[Sp - 8] = block_c28yy_info;
           _s1Yac::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Yac::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28z1; else goto c28yz;
       u28z1: // global
           call _c28yy(R1) args: 0, res: 0, upd: 0;
       c28yz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28ys_info" {
     block_c28ys_info:
         const _c28ys;
         const 1;
         const 30;
 },
 _c28yy() //  [R1]
         { []
         }
     {offset
       c28yy: // global
           I64[Sp] = block_c28yD_info;
           _s1Yae::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1Yae::I64;
           if (R1 & 7 != 0) goto u28z3; else goto c28yI;
       u28z3: // global
           call _c28yD(R1) args: 0, res: 0, upd: 0;
       c28yI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28yy_info" {
     block_c28yy_info:
         const _c28yy;
         const 2;
         const 30;
 },
 _c28yD() //  [R1]
         { []
         }
     {offset
       c28yD: // global
           _s1Yag::I64 = I64[R1 + 7];
           if (I64[Sp + 16] > _s1Yag::I64) goto c28yQ; else goto c28yU;
       c28yQ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c28yU: // global
           _s1Yac::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c28yT_info;
           R1 = _s1Yac::P64;
           I64[Sp + 16] = _s1Yag::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u28z4; else goto c28yV;
       u28z4: // global
           call _c28yT(R1) args: 0, res: 0, upd: 0;
       c28yV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28yD_info" {
     block_c28yD_info:
         const _c28yD;
         const 130;
         const 30;
 },
 _c28yT() //  [R1]
         { []
         }
     {offset
       c28yT: // global
           R1 = I64[((I64[Sp + 8] <= I64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28yT_info" {
     block_c28yT_info:
         const _c28yT;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.73700885 UTC

[section ""data" . GHC.Arr.$fIxWord_closure" {
     GHC.Arr.$fIxWord_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Classes.$fOrdWord_closure;
         const GHC.Arr.$fIxWord_$crange_closure+1;
         const GHC.Arr.$fIxWord_$cindex_closure+2;
         const GHC.Arr.$fIxWord_$cunsafeIndex_closure+2;
         const GHC.Arr.$fIxWord_$cinRange_closure+2;
         const GHC.Arr.$fIxWord_$crangeSize_closure+1;
         const GHC.Arr.$fIxWord_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.739769869 UTC

[section ""data" . GHC.Arr.$fIxInt_$crange_closure" {
     GHC.Arr.$fIxInt_$crange_closure:
         const GHC.Arr.$fIxInt_$crange_info;
 },
 GHC.Arr.$fIxInt_$crange_entry() //  [R2]
         { []
         }
     {offset
       c28zD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c28zE; else goto c28zF;
       c28zE: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxInt_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c28zF: // global
           I64[Sp - 8] = block_c28zA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28zJ; else goto c28zB;
       u28zJ: // global
           call _c28zA(R1) args: 0, res: 0, upd: 0;
       c28zB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInt_$crange_info" {
     GHC.Arr.$fIxInt_$crange_info:
         const GHC.Arr.$fIxInt_$crange_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c28zA() //  [R1]
         { []
         }
     {offset
       c28zA: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.$fEnumInt_$cenumFromTo_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28zA_info" {
     block_c28zA_info:
         const _c28zA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.744678902 UTC

[section ""cstring" . lvl24_r1XvB_bytes" {
     lvl24_r1XvB_bytes:
         I8[] [73,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.74699975 UTC

[section ""data" . lvl25_r1XvC_closure" {
     lvl25_r1XvC_closure:
         const lvl25_r1XvC_info;
         const 0;
         const 0;
         const 0;
 },
 lvl25_r1XvC_entry() //  [R1]
         { []
         }
     {offset
       c28A0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c28A1; else goto c28A2;
       c28A1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c28A2: // global
           (_c28zX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c28zX::I64 == 0) goto c28zZ; else goto c28zY;
       c28zZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c28zY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c28zX::I64;
           R2 = lvl24_r1XvB_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl25_r1XvC_info" {
     lvl25_r1XvC_info:
         const lvl25_r1XvC_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.751029811 UTC

[section ""data" . GHC.Arr.$fIxInt_$cunsafeIndex_closure" {
     GHC.Arr.$fIxInt_$cunsafeIndex_closure:
         const GHC.Arr.$fIxInt_$cunsafeIndex_info;
 },
 GHC.Arr.$fIxInt_$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c28Ah: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c28Ai; else goto c28Aj;
       c28Ai: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxInt_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28Aj: // global
           I64[Sp - 16] = block_c28Ae_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28An; else goto c28Af;
       u28An: // global
           call _c28Ae(R1) args: 0, res: 0, upd: 0;
       c28Af: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInt_$cunsafeIndex_info" {
     GHC.Arr.$fIxInt_$cunsafeIndex_info:
         const GHC.Arr.$fIxInt_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c28Ae() //  [R1]
         { []
         }
     {offset
       c28Ae: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Num.$fNumInt_$c-_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Ae_info" {
     block_c28Ae_info:
         const _c28Ae;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.757507875 UTC

[section ""data" . GHC.Arr.$fIxInt_$cinRange_closure" {
     GHC.Arr.$fIxInt_$cinRange_closure:
         const GHC.Arr.$fIxInt_$cinRange_info;
 },
 GHC.Arr.$fIxInt_$cinRange_entry() //  [R2, R3]
         { []
         }
     {offset
       c28AE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c28AS; else goto c28AT;
       c28AS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxInt_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28AT: // global
           I64[Sp - 16] = block_c28AB_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28Bb; else goto c28AC;
       u28Bb: // global
           call _c28AB(R1) args: 0, res: 0, upd: 0;
       c28AC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInt_$cinRange_info" {
     GHC.Arr.$fIxInt_$cinRange_info:
         const GHC.Arr.$fIxInt_$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c28AB() //  [R1]
         { []
         }
     {offset
       c28AB: // global
           I64[Sp - 8] = block_c28AH_info;
           _s1Yay::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Yay::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28Ba; else goto c28AI;
       u28Ba: // global
           call _c28AH(R1) args: 0, res: 0, upd: 0;
       c28AI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28AB_info" {
     block_c28AB_info:
         const _c28AB;
         const 1;
         const 30;
 },
 _c28AH() //  [R1]
         { []
         }
     {offset
       c28AH: // global
           I64[Sp] = block_c28AM_info;
           _s1YaA::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1YaA::I64;
           if (R1 & 7 != 0) goto u28Bc; else goto c28AN;
       u28Bc: // global
           call _c28AM(R1) args: 0, res: 0, upd: 0;
       c28AN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28AH_info" {
     block_c28AH_info:
         const _c28AH;
         const 2;
         const 30;
 },
 _c28AM() //  [R1]
         { []
         }
     {offset
       c28AM: // global
           I64[Sp] = block_c28AR_info;
           _s1YaC::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1YaC::I64;
           if (R1 & 7 != 0) goto u28Bd; else goto c28AX;
       u28Bd: // global
           call _c28AR(R1) args: 0, res: 0, upd: 0;
       c28AX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28AM_info" {
     block_c28AM_info:
         const _c28AM;
         const 66;
         const 30;
 },
 _c28AR() //  [R1]
         { []
         }
     {offset
       c28AR: // global
           _s1YaE::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(I64[Sp + 8],
                            _s1YaE::I64)) goto c28B5; else goto c28B6;
       c28B5: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c28B6: // global
           R1 = I64[(%MO_S_Le_W64(_s1YaE::I64,
                                  I64[Sp + 16]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28AR_info" {
     block_c28AR_info:
         const _c28AR;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.768739411 UTC

[section ""data" . GHC.Arr.$fIxChar_$crange_closure" {
     GHC.Arr.$fIxChar_$crange_closure:
         const GHC.Arr.$fIxChar_$crange_info;
 },
 GHC.Arr.$fIxChar_$crange_entry() //  [R2]
         { []
         }
     {offset
       c28BK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c28BL; else goto c28BM;
       c28BL: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxChar_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c28BM: // global
           I64[Sp - 8] = block_c28BH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28BQ; else goto c28BI;
       u28BQ: // global
           call _c28BH(R1) args: 0, res: 0, upd: 0;
       c28BI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxChar_$crange_info" {
     GHC.Arr.$fIxChar_$crange_info:
         const GHC.Arr.$fIxChar_$crange_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c28BH() //  [R1]
         { []
         }
     {offset
       c28BH: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.$fEnumChar_$cenumFromTo_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28BH_info" {
     block_c28BH_info:
         const _c28BH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.77581284 UTC

[section ""data" . GHC.Arr.$fIxChar_$cunsafeIndex_closure" {
     GHC.Arr.$fIxChar_$cunsafeIndex_closure:
         const GHC.Arr.$fIxChar_$cunsafeIndex_info;
 },
 GHC.Arr.$fIxChar_$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c28C7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c28Cu; else goto c28Cv;
       c28Cu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxChar_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28Cv: // global
           I64[Sp - 16] = block_c28C4_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28CC; else goto c28C5;
       u28CC: // global
           call _c28C4(R1) args: 0, res: 0, upd: 0;
       c28C5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxChar_$cunsafeIndex_info" {
     GHC.Arr.$fIxChar_$cunsafeIndex_info:
         const GHC.Arr.$fIxChar_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c28C4() //  [R1]
         { []
         }
     {offset
       c28C4: // global
           I64[Sp] = block_c28Ca_info;
           _s1YaO::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1YaO::P64;
           if (R1 & 7 != 0) goto u28CB; else goto c28Cb;
       u28CB: // global
           call _c28Ca(R1) args: 0, res: 0, upd: 0;
       c28Cb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28C4_info" {
     block_c28C4_info:
         const _c28C4;
         const 1;
         const 30;
 },
 _c28Ca() //  [R1]
         { []
         }
     {offset
       c28Ca: // global
           I64[Sp] = block_c28Cf_info;
           _s1YaR::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1YaR::I64;
           if (R1 & 7 != 0) goto u28CD; else goto c28Cg;
       u28CD: // global
           call _c28Cf(R1) args: 0, res: 0, upd: 0;
       c28Cg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Ca_info" {
     block_c28Ca_info:
         const _c28Ca;
         const 1;
         const 30;
 },
 _c28Cf() //  [R1]
         { []
         }
     {offset
       c28Cf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c28CA; else goto c28Cz;
       c28CA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c28Cz: // global
           _s1YaW::I64 = I64[Sp + 8] - I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1YaW::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Cf_info" {
     block_c28Cf_info:
         const _c28Cf;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.787387173 UTC

[section ""data" . GHC.Arr.$fIxChar_$cinRange_closure" {
     GHC.Arr.$fIxChar_$cinRange_closure:
         const GHC.Arr.$fIxChar_$cinRange_info;
 },
 GHC.Arr.$fIxChar_$cinRange_entry() //  [R2, R3]
         { []
         }
     {offset
       c28D5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c28De; else goto c28Df;
       c28De: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxChar_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28Df: // global
           I64[Sp - 16] = block_c28D2_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28DC; else goto c28D3;
       u28DC: // global
           call _c28D2(R1) args: 0, res: 0, upd: 0;
       c28D3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxChar_$cinRange_info" {
     GHC.Arr.$fIxChar_$cinRange_info:
         const GHC.Arr.$fIxChar_$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c28D2() //  [R1]
         { []
         }
     {offset
       c28D2: // global
           I64[Sp - 8] = block_c28D8_info;
           _s1Yb1::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Yb1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28DB; else goto c28D9;
       u28DB: // global
           call _c28D8(R1) args: 0, res: 0, upd: 0;
       c28D9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28D2_info" {
     block_c28D2_info:
         const _c28D2;
         const 1;
         const 30;
 },
 _c28D8() //  [R1]
         { []
         }
     {offset
       c28D8: // global
           I64[Sp] = block_c28Dd_info;
           _s1Yb3::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1Yb3::I64;
           if (R1 & 7 != 0) goto u28DD; else goto c28Di;
       u28DD: // global
           call _c28Dd(R1) args: 0, res: 0, upd: 0;
       c28Di: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28D8_info" {
     block_c28D8_info:
         const _c28D8;
         const 2;
         const 30;
 },
 _c28Dd() //  [R1]
         { []
         }
     {offset
       c28Dd: // global
           _s1Yb5::I64 = I64[R1 + 7];
           if (I64[Sp + 16] > _s1Yb5::I64) goto c28Dq; else goto c28Du;
       c28Dq: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c28Du: // global
           _s1Yb1::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c28Dt_info;
           R1 = _s1Yb1::P64;
           I64[Sp + 16] = _s1Yb5::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u28DE; else goto c28Dv;
       u28DE: // global
           call _c28Dt(R1) args: 0, res: 0, upd: 0;
       c28Dv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Dd_info" {
     block_c28Dd_info:
         const _c28Dd;
         const 130;
         const 30;
 },
 _c28Dt() //  [R1]
         { []
         }
     {offset
       c28Dt: // global
           R1 = I64[((I64[Sp + 8] <= I64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Dt_info" {
     block_c28Dt_info:
         const _c28Dt;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.798993167 UTC

[section ""data" . GHC.Arr.$fIxInt_$cunsafeRangeSize_closure" {
     GHC.Arr.$fIxInt_$cunsafeRangeSize_closure:
         const GHC.Arr.$fIxInt_$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIxInt_$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c28Ec: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c28Ew; else goto c28Ex;
       c28Ew: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxInt_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c28Ex: // global
           I64[Sp - 8] = block_c28E9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28EE; else goto c28Ea;
       u28EE: // global
           call _c28E9(R1) args: 0, res: 0, upd: 0;
       c28Ea: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInt_$cunsafeRangeSize_info" {
     GHC.Arr.$fIxInt_$cunsafeRangeSize_info:
         const GHC.Arr.$fIxInt_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c28E9() //  [R1]
         { []
         }
     {offset
       c28E9: // global
           I64[Sp - 8] = block_c28Ef_info;
           _s1Ybc::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s1Ybc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28ED; else goto c28Eg;
       u28ED: // global
           call _c28Ef(R1) args: 0, res: 0, upd: 0;
       c28Eg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28E9_info" {
     block_c28E9_info:
         const _c28E9;
         const 0;
         const 30;
 },
 _c28Ef() //  [R1]
         { []
         }
     {offset
       c28Ef: // global
           I64[Sp] = block_c28Ek_info;
           _s1Ybf::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1Ybf::I64;
           if (R1 & 7 != 0) goto u28EF; else goto c28El;
       u28EF: // global
           call _c28Ek(R1) args: 0, res: 0, upd: 0;
       c28El: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Ef_info" {
     block_c28Ef_info:
         const _c28Ef;
         const 1;
         const 30;
 },
 _c28Ek() //  [R1]
         { []
         }
     {offset
       c28Ek: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c28EC; else goto c28EB;
       c28EC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c28EB: // global
           _s1Ybj::I64 = I64[Sp + 8] - I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1Ybj::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Ek_info" {
     block_c28Ek_info:
         const _c28Ek;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.808746712 UTC

[section ""data" . GHC.Arr.$fIxInt_$crangeSize_closure" {
     GHC.Arr.$fIxInt_$crangeSize_closure:
         const GHC.Arr.$fIxInt_$crangeSize_info;
 },
 GHC.Arr.$fIxInt_$crangeSize_entry() //  [R2]
         { []
         }
     {offset
       c28F8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c28Fh; else goto c28Fi;
       c28Fh: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxInt_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c28Fi: // global
           I64[Sp - 8] = block_c28F5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28FH; else goto c28F6;
       u28FH: // global
           call _c28F5(R1) args: 0, res: 0, upd: 0;
       c28F6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInt_$crangeSize_info" {
     GHC.Arr.$fIxInt_$crangeSize_info:
         const GHC.Arr.$fIxInt_$crangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c28F5() //  [R1]
         { []
         }
     {offset
       c28F5: // global
           I64[Sp - 8] = block_c28Fb_info;
           _s1Ybn::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Ybn::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28FG; else goto c28Fc;
       u28FG: // global
           call _c28Fb(R1) args: 0, res: 0, upd: 0;
       c28Fc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28F5_info" {
     block_c28F5_info:
         const _c28F5;
         const 0;
         const 30;
 },
 _c28Fb() //  [R1]
         { []
         }
     {offset
       c28Fb: // global
           I64[Sp] = block_c28Fg_info;
           _s1Ybp::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1Ybp::I64;
           if (R1 & 7 != 0) goto u28FI; else goto c28Fl;
       u28FI: // global
           call _c28Fg(R1) args: 0, res: 0, upd: 0;
       c28Fl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Fb_info" {
     block_c28Fb_info:
         const _c28Fb;
         const 1;
         const 30;
 },
 _c28Fg() //  [R1]
         { []
         }
     {offset
       c28Fg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c28Fr; else goto c28Fq;
       c28Fr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c28Fq: // global
           _s1Ybp::I64 = I64[Sp + 8];
           _s1Ybr::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s1Ybp::I64,
                            _s1Ybr::I64)) goto c28Fv; else goto c28FF;
       c28Fv: // global
           Hp = Hp - 16;
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c28FF: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1Ybr::I64 - _s1Ybp::I64 + 1;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Fg_info" {
     block_c28Fg_info:
         const _c28Fg;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.817471024 UTC

[section ""data" . lvl26_r1XvD_closure" {
     lvl26_r1XvD_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)2_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.819105517 UTC

[section ""cstring" . lvl27_r1XvE_bytes" {
     lvl27_r1XvE_bytes:
         I8[] [73,120,123]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.820808572 UTC

[section ""cstring" . lvl28_r1XvF_bytes" {
     lvl28_r1XvF_bytes:
         I8[] [125,46,105,110,100,101,120,58,32,73,110,100,101,120,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.822572514 UTC

[section ""cstring" . lvl29_r1XvG_bytes" {
     lvl29_r1XvG_bytes:
         I8[] [32,111,117,116,32,111,102,32,114,97,110,103,101,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.824475198 UTC

[section ""data" . lvl30_r1XvH_closure" {
     lvl30_r1XvH_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)2_closure;
         const lvl26_r1XvD_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.832120123 UTC

[section ""data" . GHC.Arr.$windexError_closure" {
     GHC.Arr.$windexError_closure:
         const GHC.Arr.$windexError_info;
         const 0;
 },
 sat_s1YbB_entry() //  [R1]
         { []
         }
     {offset
       c28GC: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c28GD; else goto c28GE;
       c28GD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c28GE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YbB_info" {
     sat_s1YbB_info:
         const sat_s1YbB_entry;
         const 2;
         const 18;
 },
 sat_s1YbA_entry() //  [R1]
         { []
         }
     {offset
       c28GK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c28GL; else goto c28GM;
       c28GL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c28GM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YbA_info" {
     sat_s1YbA_info:
         const sat_s1YbA_entry;
         const 2;
         const 18;
 },
 sat_s1YbE_entry() //  [R1]
         { []
         }
     {offset
       c28GO: // global
           _s1YbE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c28GP; else goto c28GQ;
       c28GQ: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c28GS; else goto c28GR;
       c28GS: // global
           HpAlloc = 112;
           goto c28GP;
       c28GP: // global
           R1 = _s1YbE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c28GR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1YbE::P64;
           _s1Ybv::P64 = P64[_s1YbE::P64 + 16];
           _s1Ybw::P64 = P64[_s1YbE::P64 + 24];
           _s1Ybx::P64 = P64[_s1YbE::P64 + 32];
           I64[Hp - 104] = sat_s1YbB_info;
           P64[Hp - 88] = _s1Ybv::P64;
           P64[Hp - 80] = _s1Ybx::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = GHC.Types.[]_closure+1;
           I64[Hp - 48] = sat_s1YbA_info;
           P64[Hp - 32] = _s1Ybv::P64;
           P64[Hp - 24] = _s1Ybw::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = lvl30_r1XvH_closure+2;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YbE_info" {
     sat_s1YbE_info:
         const sat_s1YbE_entry;
         const 3;
         const 4294967311;
         const S1YCH_srt+368;
 },
 sat_s1YbH_entry() //  [R1]
         { []
         }
     {offset
       c28GV: // global
           _s1YbH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c28GW; else goto c28GX;
       c28GX: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c28GZ; else goto c28GY;
       c28GZ: // global
           HpAlloc = 88;
           goto c28GW;
       c28GW: // global
           R1 = _s1YbH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c28GY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1YbH::P64;
           _s1Ybv::P64 = P64[_s1YbH::P64 + 16];
           _s1Ybw::P64 = P64[_s1YbH::P64 + 24];
           _s1Ybx::P64 = P64[_s1YbH::P64 + 32];
           I64[Hp - 80] = sat_s1YbE_info;
           P64[Hp - 64] = _s1Ybv::P64;
           P64[Hp - 56] = _s1Ybw::P64;
           P64[Hp - 48] = _s1Ybx::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)4_closure;
           P64[Hp - 24] = Hp - 80;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = lvl29_r1XvG_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YbH_info" {
     sat_s1YbH_info:
         const sat_s1YbH_entry;
         const 3;
         const 4294967311;
         const S1YCH_srt+368;
 },
 sat_s1YbJ_entry() //  [R1]
         { []
         }
     {offset
       c28H1: // global
           _s1YbJ::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto c28H2; else goto c28H3;
       c28H3: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c28H5; else goto c28H4;
       c28H5: // global
           HpAlloc = 64;
           goto c28H2;
       c28H2: // global
           R1 = _s1YbJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c28H4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1YbJ::P64;
           _s1Ybv::P64 = P64[_s1YbJ::P64 + 16];
           _s1Ybw::P64 = P64[_s1YbJ::P64 + 24];
           _s1Ybx::P64 = P64[_s1YbJ::P64 + 32];
           _s1Yby::P64 = P64[_s1YbJ::P64 + 40];
           I64[Hp - 56] = sat_s1YbH_info;
           P64[Hp - 40] = _s1Ybv::P64;
           P64[Hp - 32] = _s1Ybw::P64;
           P64[Hp - 24] = _s1Ybx::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = Hp - 56;
           R2 = _s1Ybv::P64;
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = GHC.Arr.$fIxInt1_closure+1;
           P64[Sp - 32] = _s1Yby::P64;
           P64[Sp - 24] = Hp - 14;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YbJ_info" {
     sat_s1YbJ_info:
         const sat_s1YbJ_entry;
         const 4;
         const 4294967311;
         const S1YCH_srt+368;
 },
 sat_s1YbL_entry() //  [R1]
         { []
         }
     {offset
       c28H7: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c28Hb; else goto c28Ha;
       c28Hb: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c28Ha: // global
           _s1Ybv::P64 = P64[R1 + 16];
           _s1Ybw::P64 = P64[R1 + 24];
           _s1Ybx::P64 = P64[R1 + 32];
           _s1Yby::P64 = P64[R1 + 40];
           I64[Hp - 64] = sat_s1YbJ_info;
           P64[Hp - 48] = _s1Ybv::P64;
           P64[Hp - 40] = _s1Ybw::P64;
           P64[Hp - 32] = _s1Ybx::P64;
           P64[Hp - 24] = _s1Yby::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 64;
           R3 = Hp - 14;
           R2 = lvl28_r1XvF_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1YbL_info" {
     sat_s1YbL_info:
         const sat_s1YbL_entry;
         const 4;
         const 4294967311;
         const S1YCH_srt+368;
 },
 sat_s1YbM_entry() //  [R1]
         { []
         }
     {offset
       c28Hc: // global
           _s1YbM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c28Hd; else goto c28He;
       c28He: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c28Hg; else goto c28Hf;
       c28Hg: // global
           HpAlloc = 48;
           goto c28Hd;
       c28Hd: // global
           R1 = _s1YbM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c28Hf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1YbM::P64;
           _s1Ybv::P64 = P64[_s1YbM::P64 + 16];
           _s1Ybw::P64 = P64[_s1YbM::P64 + 24];
           _s1Ybx::P64 = P64[_s1YbM::P64 + 32];
           _s1Yby::P64 = P64[_s1YbM::P64 + 40];
           _s1Ybz::P64 = P64[_s1YbM::P64 + 48];
           I64[Hp - 40] = sat_s1YbL_info;
           P64[Hp - 24] = _s1Ybv::P64;
           P64[Hp - 16] = _s1Ybw::P64;
           P64[Hp - 8] = _s1Ybx::P64;
           P64[Hp] = _s1Yby::P64;
           R3 = Hp - 40;
           R2 = _s1Ybz::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YbM_info" {
     sat_s1YbM_info:
         const sat_s1YbM_entry;
         const 5;
         const 4294967311;
         const S1YCH_srt+368;
 },
 section ""relreadonly" . u28Hr_srtd" {
     u28Hr_srtd:
         const S1YCH_srt+8;
         const 47;
         const 105553116266497;
 },
 GHC.Arr.$windexError_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c28Hj: // global
           _s1Ybz::P64 = R6;
           _s1Yby::P64 = R5;
           _s1Ybx::P64 = R4;
           _s1Ybw::P64 = R3;
           _s1Ybv::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c28Hk; else goto c28Hl;
       c28Hl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c28Hn; else goto c28Hm;
       c28Hn: // global
           HpAlloc = 56;
           goto c28Hk;
       c28Hk: // global
           R6 = _s1Ybz::P64;
           R5 = _s1Yby::P64;
           R4 = _s1Ybx::P64;
           R3 = _s1Ybw::P64;
           R2 = _s1Ybv::P64;
           R1 = GHC.Arr.$windexError_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c28Hm: // global
           I64[Hp - 48] = sat_s1YbM_info;
           P64[Hp - 32] = _s1Ybv::P64;
           P64[Hp - 24] = _s1Ybw::P64;
           P64[Hp - 16] = _s1Ybx::P64;
           P64[Hp - 8] = _s1Yby::P64;
           P64[Hp] = _s1Ybz::P64;
           I64[Sp - 8] = block_c28Hh_info;
           R3 = Hp - 48;
           R2 = lvl27_r1XvE_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$windexError_info" {
     GHC.Arr.$windexError_info:
         const GHC.Arr.$windexError_entry;
         const 0;
         const 18446744069414584334;
         const 21474836505;
         const u28Hr_srtd;
 },
 _c28Hh() //  [R1]
         { []
         }
     {offset
       c28Hh: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Hh_info" {
     block_c28Hh_info:
         const _c28Hh;
         const 0;
         const 4294967326;
         const S1YCH_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.852758483 UTC

[section ""data" . GHC.Arr.indexError_closure" {
     GHC.Arr.indexError_closure:
         const GHC.Arr.indexError_info;
         const 0;
 },
 GHC.Arr.indexError_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c28Ij: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c28Ik; else goto c28Il;
       c28Ik: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.indexError_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c28Il: // global
           I64[Sp - 32] = block_c28Ig_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u28Ip; else goto c28Ih;
       u28Ip: // global
           call _c28Ig(R1) args: 0, res: 0, upd: 0;
       c28Ih: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.indexError_info" {
     GHC.Arr.indexError_info:
         const GHC.Arr.indexError_entry;
         const 0;
         const 21474836494;
         const 17179869208;
         const S1YCH_srt+376;
 },
 _c28Ig() //  [R1]
         { []
         }
     {offset
       c28Ig: // global
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Ig_info" {
     block_c28Ig_info:
         const _c28Ig;
         const 3;
         const 4294967326;
         const S1YCH_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.858185951 UTC

[section ""data" . $wlvl_r1XvI_closure" {
     $wlvl_r1XvI_closure:
         const $wlvl_r1XvI_info;
         const 0;
 },
 $wlvl_r1XvI_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c28ID: // global
           R6 = lvl25_r1XvC_closure;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowInt_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl_r1XvI_info" {
     $wlvl_r1XvI_info:
         const $wlvl_r1XvI_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const S1YCH_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.863828073 UTC

[section ""data" . GHC.Arr.$fIxInt_$cindex_closure" {
     GHC.Arr.$fIxInt_$cindex_closure:
         const GHC.Arr.$fIxInt_$cindex_info;
         const 0;
 },
 GHC.Arr.$fIxInt_$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c28IR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c28J5; else goto c28J6;
       c28J5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxInt_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28J6: // global
           I64[Sp - 16] = block_c28IO_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28JA; else goto c28IP;
       u28JA: // global
           call _c28IO(R1) args: 0, res: 0, upd: 0;
       c28IP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInt_$cindex_info" {
     GHC.Arr.$fIxInt_$cindex_info:
         const GHC.Arr.$fIxInt_$cindex_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1YCH_srt+408;
 },
 _c28IO() //  [R1]
         { []
         }
     {offset
       c28IO: // global
           I64[Sp - 8] = block_c28IU_info;
           _s1Yc2::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Yc2::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28Jz; else goto c28IV;
       u28Jz: // global
           call _c28IU(R1) args: 0, res: 0, upd: 0;
       c28IV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28IO_info" {
     block_c28IO_info:
         const _c28IO;
         const 1;
         const 4294967326;
         const S1YCH_srt+416;
 },
 _c28IU() //  [R1]
         { []
         }
     {offset
       c28IU: // global
           I64[Sp - 8] = block_c28IZ_info;
           _s1Yc3::P64 = R1;
           _s1Yc4::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _s1Yc4::I64;
           P64[Sp + 8] = _s1Yc3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28JB; else goto c28J0;
       u28JB: // global
           call _c28IZ(R1) args: 0, res: 0, upd: 0;
       c28J0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28IU_info" {
     block_c28IU_info:
         const _c28IU;
         const 2;
         const 4294967326;
         const S1YCH_srt+416;
 },
 _c28IZ() //  [R1]
         { []
         }
     {offset
       c28IZ: // global
           I64[Sp - 8] = block_c28J4_info;
           _s1Yc5::P64 = R1;
           _s1Yc6::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp] = _s1Yc6::I64;
           P64[Sp + 24] = _s1Yc5::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28JC; else goto c28Ja;
       u28JC: // global
           call _c28J4(R1) args: 0, res: 0, upd: 0;
       c28Ja: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28IZ_info" {
     block_c28IZ_info:
         const _c28IZ;
         const 67;
         const 4294967326;
         const S1YCH_srt+416;
 },
 _c28J4() //  [R1]
         { []
         }
     {offset
       c28J4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c28Jg; else goto c28Jf;
       c28Jg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c28Jf: // global
           _s1Yc3::P64 = P64[Sp + 24];
           _s1Yc4::I64 = I64[Sp + 16];
           _s1Yc5::P64 = P64[Sp + 32];
           _s1Yc7::P64 = R1;
           _s1Yc8::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s1Yc4::I64,
                            _s1Yc8::I64)) goto c28Jq; else goto c28Jy;
       c28Jy: // global
           if (%MO_S_Gt_W64(_s1Yc8::I64,
                            I64[Sp + 8])) goto c28Jq; else goto c28Jx;
       c28Jq: // global
           Hp = Hp - 16;
           R4 = _s1Yc7::P64;
           R3 = _s1Yc5::P64;
           R2 = _s1Yc3::P64;
           Sp = Sp + 40;
           call $wlvl_r1XvI_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c28Jx: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1Yc8::I64 - _s1Yc4::I64;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28J4_info" {
     block_c28J4_info:
         const _c28J4;
         const 196;
         const 4294967326;
         const S1YCH_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.874305295 UTC

[section ""data" . GHC.Arr.$fIxInt_closure" {
     GHC.Arr.$fIxInt_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Classes.$fOrdInt_closure;
         const GHC.Arr.$fIxInt_$crange_closure+1;
         const GHC.Arr.$fIxInt_$cindex_closure+2;
         const GHC.Arr.$fIxInt_$cunsafeIndex_closure+2;
         const GHC.Arr.$fIxInt_$cinRange_closure+2;
         const GHC.Arr.$fIxInt_$crangeSize_closure+1;
         const GHC.Arr.$fIxInt_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.876703685 UTC

[section ""data" . $wlvl1_r1XvJ_closure" {
     $wlvl1_r1XvJ_closure:
         const $wlvl1_r1XvJ_info;
         const 0;
 },
 $wlvl1_r1XvJ_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c28K6: // global
           R6 = lvl20_r1Xvx_closure;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowOrdering_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl1_r1XvJ_info" {
     $wlvl1_r1XvJ_info:
         const $wlvl1_r1XvJ_entry;
         const 0;
         const 828928688142;
         const 12884901911;
         const S1YCH_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.883994665 UTC

[section ""data" . GHC.Arr.$fIxOrdering_$cindex_closure" {
     GHC.Arr.$fIxOrdering_$cindex_closure:
         const GHC.Arr.$fIxOrdering_$cindex_info;
         const 0;
 },
 GHC.Arr.$fIxOrdering_$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c28Kk: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c28Kl; else goto c28Km;
       c28Kl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxOrdering_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28Km: // global
           I64[Sp - 16] = block_c28Kh_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28LT; else goto c28Ki;
       u28LT: // global
           call _c28Kh(R1) args: 0, res: 0, upd: 0;
       c28Ki: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxOrdering_$cindex_info" {
     GHC.Arr.$fIxOrdering_$cindex_info:
         const GHC.Arr.$fIxOrdering_$cindex_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1YCH_srt+440;
 },
 _c28Kh() //  [R1]
         { []
         }
     {offset
       c28Kh: // global
           I64[Sp - 16] = block_c28Kp_info;
           R4 = P64[Sp + 8];
           _s1Ycj::P64 = P64[R1 + 15];
           R3 = _s1Ycj::P64;
           _s1Yci::P64 = P64[R1 + 7];
           R2 = _s1Yci::P64;
           P64[Sp - 8] = _s1Ycj::P64;
           P64[Sp] = _s1Yci::P64;
           Sp = Sp - 16;
           call GHC.Arr.$w$cinRange_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Kh_info" {
     block_c28Kh_info:
         const _c28Kh;
         const 1;
         const 4294967326;
         const S1YCH_srt+448;
 },
 _c28Kp() //  [R1]
         { []
         }
     {offset
       c28Kp: // global
           _s1Ycg::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c28Kw; else goto c28KB;
       c28Kw: // global
           R4 = _s1Ycg::P64;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call $wlvl1_r1XvJ_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c28KB: // global
           I64[Sp + 8] = block_c28Kz_info;
           R1 = _s1Ycg::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u28LU; else goto c28KC;
       u28LU: // global
           call _c28Kz(R1) args: 0, res: 0, upd: 0;
       c28KC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Kp_info" {
     block_c28Kp_info:
         const _c28Kp;
         const 3;
         const 4294967326;
         const S1YCH_srt+448;
 },
 _c28Kz() //  [R1]
         { []
         }
     {offset
       c28Kz: // global
           _s1Yci::P64 = P64[Sp + 8];
           _c28LE::P64 = R1 & 7;
           if (_c28LE::P64 < 3) goto u28LI; else goto c28Ln;
       u28LI: // global
           if (_c28LE::P64 < 2) goto c28KJ; else goto c28L3;
       c28KJ: // global
           I64[Sp + 16] = block_c28KG_info;
           R1 = _s1Yci::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u28LV; else goto c28KK;
       u28LV: // global
           call _c28KG(R1) args: 0, res: 0, upd: 0;
       c28KK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c28L3: // global
           I64[Sp + 16] = block_c28L1_info;
           R1 = _s1Yci::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u28LW; else goto c28L4;
       u28LW: // global
           call _c28L1(R1) args: 0, res: 0, upd: 0;
       c28L4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c28Ln: // global
           I64[Sp + 16] = block_c28Ll_info;
           R1 = _s1Yci::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u28LX; else goto c28Lo;
       u28LX: // global
           call _c28Ll(R1) args: 0, res: 0, upd: 0;
       c28Lo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Kz_info" {
     block_c28Kz_info:
         const _c28Kz;
         const 130;
         const 30;
 },
 _c28KG() //  [R1]
         { []
         }
     {offset
       c28KG: // global
           _c28LH::P64 = R1 & 7;
           if (_c28LH::P64 < 3) goto u28LJ; else goto c28KY;
       u28LJ: // global
           if (_c28LH::P64 < 2) goto u28LN; else goto u28LM;
       u28LN: // global
           Sp = Sp + 8;
           call _c28LC() args: 0, res: 0, upd: 0;
       u28LM: // global
           Sp = Sp + 8;
           call _c28Li() args: 0, res: 0, upd: 0;
       c28KY: // global
           R1 = lvl23_r1XvA_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28KG_info" {
     block_c28KG_info:
         const _c28KG;
         const 0;
         const 30;
 },
 _c28L1() //  [R1]
         { []
         }
     {offset
       c28L1: // global
           _c28LG::P64 = R1 & 7;
           if (_c28LG::P64 < 3) goto u28LK; else goto u28LO;
       u28LK: // global
           if (_c28LG::P64 < 2) goto u28LQ; else goto u28LP;
       u28LQ: // global
           Sp = Sp + 8;
           call _c28Ly() args: 0, res: 0, upd: 0;
       u28LP: // global
           Sp = Sp + 8;
           call _c28LC() args: 0, res: 0, upd: 0;
       u28LO: // global
           Sp = Sp + 8;
           call _c28Li() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c28L1_info" {
     block_c28L1_info:
         const _c28L1;
         const 0;
         const 30;
 },
 _c28Li() //  []
         { []
         }
     {offset
       c28Li: // global
           R1 = lvl22_r1Xvz_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c28Ll() //  [R1]
         { []
         }
     {offset
       c28Ll: // global
           _c28LF::P64 = R1 & 7;
           if (_c28LF::P64 < 3) goto u28LL; else goto u28LR;
       u28LL: // global
           if (_c28LF::P64 < 2) goto c28Lu; else goto u28LS;
       c28Lu: // global
           R1 = lvl18_r1Xvv_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u28LS: // global
           Sp = Sp + 8;
           call _c28Ly() args: 0, res: 0, upd: 0;
       u28LR: // global
           Sp = Sp + 8;
           call _c28LC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c28Ll_info" {
     block_c28Ll_info:
         const _c28Ll;
         const 0;
         const 30;
 },
 _c28Ly() //  []
         { []
         }
     {offset
       c28Ly: // global
           R1 = lvl17_r1Xvu_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c28LC() //  []
         { []
         }
     {offset
       c28LC: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.90060564 UTC

[section ""data" . GHC.Arr.$fIxOrdering_closure" {
     GHC.Arr.$fIxOrdering_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Classes.$fOrdOrdering_closure;
         const GHC.Arr.$fIxOrdering_$crange_closure+1;
         const GHC.Arr.$fIxOrdering_$cindex_closure+2;
         const GHC.Arr.$fIxOrdering_$cunsafeIndex_closure+2;
         const GHC.Arr.$fIxOrdering_$cinRange_closure+2;
         const GHC.Arr.$fIxOrdering_$crangeSize_closure+1;
         const GHC.Arr.$fIxOrdering_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.903091717 UTC

[section ""data" . $wlvl2_r1XvK_closure" {
     $wlvl2_r1XvK_closure:
         const $wlvl2_r1XvK_info;
         const 0;
 },
 $wlvl2_r1XvK_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c28MT: // global
           R6 = lvl16_r1Xvt_closure;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowBool_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl2_r1XvK_info" {
     $wlvl2_r1XvK_info:
         const $wlvl2_r1XvK_entry;
         const 0;
         const 13198434500622;
         const 12884901911;
         const S1YCH_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.906815212 UTC

[section ""data" . lvl31_r1XvL_closure" {
     lvl31_r1XvL_closure:
         const lvl31_r1XvL_info;
         const 0;
 },
 lvl31_r1XvL_entry() //  [R2]
         { []
         }
     {offset
       c28N4: // global
           R4 = GHC.Types.False_closure+1;
           R3 = R2;
           R2 = GHC.Types.True_closure+2;
           call $wlvl2_r1XvK_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl31_r1XvL_info" {
     lvl31_r1XvL_info:
         const lvl31_r1XvL_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S1YCH_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.910208383 UTC

[section ""data" . lvl32_r1XvM_closure" {
     lvl32_r1XvM_closure:
         const lvl32_r1XvM_info;
         const 0;
 },
 lvl32_r1XvM_entry() //  [R2]
         { []
         }
     {offset
       c28Nf: // global
           R4 = GHC.Types.True_closure+2;
           R3 = GHC.Types.False_closure+1;
           R2 = R2;
           call $wlvl2_r1XvK_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl32_r1XvM_info" {
     lvl32_r1XvM_info:
         const lvl32_r1XvM_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S1YCH_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.916417253 UTC

[section ""data" . GHC.Arr.$fIxBool_$cindex_closure" {
     GHC.Arr.$fIxBool_$cindex_closure:
         const GHC.Arr.$fIxBool_$cindex_info;
         const 0;
 },
 GHC.Arr.$fIxBool_$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c28Nt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c28Nu; else goto c28Nv;
       c28Nu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxBool_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28Nv: // global
           I64[Sp - 16] = block_c28Nq_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28OC; else goto c28Nr;
       u28OC: // global
           call _c28Nq(R1) args: 0, res: 0, upd: 0;
       c28Nr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxBool_$cindex_info" {
     GHC.Arr.$fIxBool_$cindex_info:
         const GHC.Arr.$fIxBool_$cindex_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S1YCH_srt+480;
 },
 _c28Nq() //  [R1]
         { []
         }
     {offset
       c28Nq: // global
           I64[Sp - 8] = block_c28Ny_info;
           _s1Ycx::P64 = P64[R1 + 7];
           _s1Ycy::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1Ycy::P64;
           P64[Sp + 8] = _s1Ycx::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28OB; else goto c28NA;
       u28OB: // global
           call _c28Ny(R1) args: 0, res: 0, upd: 0;
       c28NA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Nq_info" {
     block_c28Nq_info:
         const _c28Nq;
         const 1;
         const 12884901918;
         const S1YCH_srt+488;
 },
 _c28Ny() //  [R1]
         { []
         }
     {offset
       c28Ny: // global
           _s1Ycx::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c28NH; else goto c28O3;
       c28NH: // global
           I64[Sp] = block_c28NE_info;
           R1 = _s1Ycx::P64;
           if (R1 & 7 != 0) goto u28OD; else goto c28NI;
       u28OD: // global
           call _c28NE(R1) args: 0, res: 0, upd: 0;
       c28NI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c28O3: // global
           I64[Sp] = block_c28O1_info;
           R1 = _s1Ycx::P64;
           if (R1 & 7 != 0) goto u28OE; else goto c28O4;
       u28OE: // global
           call _c28O1(R1) args: 0, res: 0, upd: 0;
       c28O4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Ny_info" {
     block_c28Ny_info:
         const _c28Ny;
         const 2;
         const 12884901918;
         const S1YCH_srt+488;
 },
 _c28NE() //  [R1]
         { []
         }
     {offset
       c28NE: // global
           _s1Ycy::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c28NP; else goto c28NY;
       c28NP: // global
           I64[Sp + 16] = block_c28NM_info;
           R1 = _s1Ycy::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u28OF; else goto c28NQ;
       u28OF: // global
           call _c28NM() args: 0, res: 0, upd: 0;
       c28NQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c28NY: // global
           R2 = _s1Ycy::P64;
           Sp = Sp + 24;
           call lvl31_r1XvL_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28NE_info" {
     block_c28NE_info:
         const _c28NE;
         const 130;
         const 4294967326;
         const S1YCH_srt+488;
 },
 _c28NM() //  []
         { []
         }
     {offset
       c28NM: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28NM_info" {
     block_c28NM_info:
         const _c28NM;
         const 0;
         const 30;
 },
 _c28O1() //  [R1]
         { []
         }
     {offset
       c28O1: // global
           _s1Ycy::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c28O8_info;
           _s1YcC::P64 = R1;
           R1 = _s1Ycy::P64;
           P64[Sp + 16] = _s1YcC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u28OG; else goto c28Oa;
       u28OG: // global
           call _c28O8(R1) args: 0, res: 0, upd: 0;
       c28Oa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28O1_info" {
     block_c28O1_info:
         const _c28O1;
         const 130;
         const 4294967326;
         const S1YCH_srt+496;
 },
 _c28O8() //  [R1]
         { []
         }
     {offset
       c28O8: // global
           _s1YcC::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c28Og; else goto c28Ol;
       c28Og: // global
           R2 = _s1YcC::P64;
           Sp = Sp + 16;
           call lvl32_r1XvM_entry(R2) args: 8, res: 0, upd: 8;
       c28Ol: // global
           I64[Sp + 8] = block_c28Oj_info;
           R1 = _s1YcC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u28OH; else goto c28Om;
       u28OH: // global
           call _c28Oj(R1) args: 0, res: 0, upd: 0;
       c28Om: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28O8_info" {
     block_c28O8_info:
         const _c28O8;
         const 1;
         const 4294967326;
         const S1YCH_srt+496;
 },
 _c28Oj() //  [R1]
         { []
         }
     {offset
       c28Oj: // global
           if (R1 & 7 == 1) goto c28Os; else goto c28Ow;
       c28Os: // global
           R1 = lvl17_r1Xvu_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c28Ow: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Oj_info" {
     block_c28Oj_info:
         const _c28Oj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.932102121 UTC

[section ""data" . GHC.Arr.$fIxBool_closure" {
     GHC.Arr.$fIxBool_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Classes.$fOrdBool_closure;
         const GHC.Arr.$fIxBool_$crange_closure+1;
         const GHC.Arr.$fIxBool_$cindex_closure+2;
         const GHC.Arr.$fIxBool_$cunsafeIndex_closure+2;
         const GHC.Arr.$fIxBool_$cinRange_closure+2;
         const GHC.Arr.$fIxBool_$cunsafeRangeSize_closure+1;
         const GHC.Arr.$fIxBool_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.934694116 UTC

[section ""data" . $wlvl3_r1XvN_closure" {
     $wlvl3_r1XvN_closure:
         const $wlvl3_r1XvN_info;
         const 0;
 },
 $wlvl3_r1XvN_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c28Pv: // global
           R6 = lvl14_r1Xvr_closure;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowInteger_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl3_r1XvN_info" {
     $wlvl3_r1XvN_info:
         const $wlvl3_r1XvN_entry;
         const 0;
         const 844429225099278;
         const 12884901911;
         const S1YCH_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.940099383 UTC

[section ""data" . GHC.Arr.$fIxInteger_$cindex_closure" {
     GHC.Arr.$fIxInteger_$cindex_closure:
         const GHC.Arr.$fIxInteger_$cindex_info;
         const 0;
 },
 GHC.Arr.$fIxInteger_$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c28PJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c28PK; else goto c28PL;
       c28PK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxInteger_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28PL: // global
           I64[Sp - 16] = block_c28PG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28Qq; else goto c28PH;
       u28Qq: // global
           call _c28PG(R1) args: 0, res: 0, upd: 0;
       c28PH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInteger_$cindex_info" {
     GHC.Arr.$fIxInteger_$cindex_info:
         const GHC.Arr.$fIxInteger_$cindex_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S1YCH_srt+520;
 },
 _c28PG() //  [R1]
         { []
         }
     {offset
       c28PG: // global
           I64[Sp - 16] = block_c28PO_info;
           R3 = P64[Sp + 8];
           _s1YcL::P64 = P64[R1 + 7];
           R2 = _s1YcL::P64;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = _s1YcL::P64;
           Sp = Sp - 16;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28PG_info" {
     block_c28PG_info:
         const _c28PG;
         const 1;
         const 12884901918;
         const S1YCH_srt+528;
 },
 _c28PO() //  [R1]
         { []
         }
     {offset
       c28PO: // global
           if (R1 == 1) goto c28Q0; else goto u28Qo;
       c28Q0: // global
           I64[Sp] = block_c28PY_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       u28Qo: // global
           Sp = Sp + 8;
           call _c28Q6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c28PO_info" {
     block_c28PO_info:
         const _c28PO;
         const 3;
         const 12884901918;
         const S1YCH_srt+528;
 },
 _c28PY() //  [R1]
         { []
         }
     {offset
       c28PY: // global
           if (R1 == 1) goto c28Qj; else goto u28Qp;
       c28Qj: // global
           _s1YcJ::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c28Q9_info;
           R3 = P64[Sp + 16];
           R2 = _s1YcJ::P64;
           Sp = Sp + 24;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
       u28Qp: // global
           Sp = Sp + 8;
           call _c28Q6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c28PY_info" {
     block_c28PY_info:
         const _c28PY;
         const 3;
         const 12884901918;
         const S1YCH_srt+528;
 },
 _c28Q9() //  [R1]
         { []
         }
     {offset
       c28Q9: // global
           I64[Sp] = block_c28Qd_info;
           R2 = R1;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Q9_info" {
     block_c28Q9_info:
         const _c28Q9;
         const 0;
         const 30;
 },
 _c28Qd() //  [R1]
         { []
         }
     {offset
       c28Qd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c28Qn; else goto c28Qm;
       c28Qn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c28Qm: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Qd_info" {
     block_c28Qd_info:
         const _c28Qd;
         const 0;
         const 30;
 },
 _c28Q6() //  []
         { []
         }
     {offset
       c28Q6: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call $wlvl3_r1XvN_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.952680832 UTC

[section ""data" . GHC.Arr.$fIxInteger_closure" {
     GHC.Arr.$fIxInteger_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Integer.Type.$fOrdInteger_closure;
         const GHC.Arr.$fIxInteger_$crange_closure+1;
         const GHC.Arr.$fIxInteger_$cindex_closure+2;
         const GHC.Arr.$fIxInteger_$cunsafeIndex_closure+2;
         const GHC.Arr.$fIxInteger_$cinRange_closure+2;
         const GHC.Arr.$fIxInteger_$crangeSize_closure+1;
         const GHC.Arr.$fIxInteger_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.955166609 UTC

[section ""data" . $wlvl4_r1XvO_closure" {
     $wlvl4_r1XvO_closure:
         const $wlvl4_r1XvO_info;
         const 0;
 },
 $wlvl4_r1XvO_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c28QX: // global
           R6 = lvl12_r1Xvp_closure;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowChar_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl4_r1XvO_info" {
     $wlvl4_r1XvO_info:
         const $wlvl4_r1XvO_entry;
         const 0;
         const 27021602059190286;
         const 12884901911;
         const S1YCH_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.960965591 UTC

[section ""data" . GHC.Arr.$fIxChar_$cindex_closure" {
     GHC.Arr.$fIxChar_$cindex_closure:
         const GHC.Arr.$fIxChar_$cindex_info;
         const 0;
 },
 GHC.Arr.$fIxChar_$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c28Rb: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c28Rk; else goto c28Rl;
       c28Rk: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxChar_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28Rl: // global
           I64[Sp - 16] = block_c28R8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28S0; else goto c28R9;
       u28S0: // global
           call _c28R8(R1) args: 0, res: 0, upd: 0;
       c28R9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxChar_$cindex_info" {
     GHC.Arr.$fIxChar_$cindex_info:
         const GHC.Arr.$fIxChar_$cindex_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1YCH_srt+560;
 },
 _c28R8() //  [R1]
         { []
         }
     {offset
       c28R8: // global
           I64[Sp - 8] = block_c28Re_info;
           _s1YcY::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1YcY::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28RZ; else goto c28Rf;
       u28RZ: // global
           call _c28Re(R1) args: 0, res: 0, upd: 0;
       c28Rf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28R8_info" {
     block_c28R8_info:
         const _c28R8;
         const 1;
         const 4294967326;
         const S1YCH_srt+568;
 },
 _c28Re() //  [R1]
         { []
         }
     {offset
       c28Re: // global
           I64[Sp - 8] = block_c28Rj_info;
           _s1YcZ::P64 = R1;
           _s1Yd0::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _s1Yd0::I64;
           P64[Sp + 16] = _s1YcZ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28S1; else goto c28Ro;
       u28S1: // global
           call _c28Rj(R1) args: 0, res: 0, upd: 0;
       c28Ro: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Re_info" {
     block_c28Re_info:
         const _c28Re;
         const 2;
         const 4294967326;
         const S1YCH_srt+568;
 },
 _c28Rj() //  [R1]
         { []
         }
     {offset
       c28Rj: // global
           _s1YcY::P64 = P64[Sp + 16];
           _s1Yd2::I64 = I64[R1 + 7];
           if (I64[Sp + 8] > _s1Yd2::I64) goto c28Rw; else goto c28RA;
       c28Rw: // global
           R4 = R1;
           R3 = _s1YcY::P64;
           R2 = P64[Sp + 24];
           Sp = Sp + 32;
           call $wlvl4_r1XvO_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c28RA: // global
           I64[Sp - 8] = block_c28Rz_info;
           _s1Yd1::P64 = R1;
           R1 = _s1YcY::P64;
           I64[Sp] = _s1Yd2::I64;
           P64[Sp + 16] = _s1Yd1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u28S2; else goto c28RB;
       u28S2: // global
           call _c28Rz(R1) args: 0, res: 0, upd: 0;
       c28RB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Rj_info" {
     block_c28Rj_info:
         const _c28Rj;
         const 67;
         const 4294967326;
         const S1YCH_srt+568;
 },
 _c28Rz() //  [R1]
         { []
         }
     {offset
       c28Rz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c28RH; else goto c28RG;
       c28RH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c28RG: // global
           _s1Yd2::I64 = I64[Sp + 8];
           if (_s1Yd2::I64 > I64[R1 + 7]) goto c28RL; else goto c28RY;
       c28RL: // global
           Hp = Hp - 16;
           R4 = P64[Sp + 24];
           R3 = R1;
           R2 = P64[Sp + 32];
           Sp = Sp + 40;
           call $wlvl4_r1XvO_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c28RY: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s1Yd2::I64 - I64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Rz_info" {
     block_c28Rz_info:
         const _c28Rz;
         const 196;
         const 4294967326;
         const S1YCH_srt+568;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.972095302 UTC

[section ""data" . GHC.Arr.$fIxChar_closure" {
     GHC.Arr.$fIxChar_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Classes.$fOrdChar_closure;
         const GHC.Arr.$fIxChar_$crange_closure+1;
         const GHC.Arr.$fIxChar_$cindex_closure+2;
         const GHC.Arr.$fIxChar_$cunsafeIndex_closure+2;
         const GHC.Arr.$fIxChar_$cinRange_closure+2;
         const GHC.Arr.$fIxChar_$crangeSize_closure+1;
         const GHC.Arr.$fIxChar_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.976030703 UTC

[section ""data" . $wlvl5_r1XvP_closure" {
     $wlvl5_r1XvP_closure:
         const $wlvl5_r1XvP_info;
 },
 $wlvl5_r1XvP_slow() //  [R1]
         { []
         }
     {offset
       c28St: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call $wlvl5_r1XvP_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 16, res: 0, upd: 8;
     }
 },
 $wlvl5_r1XvP_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c28SC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c28SD; else goto c28SE;
       c28SD: // global
           R1 = $wlvl5_r1XvP_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c28SE: // global
           if (R2 == R5) goto c28SB; else goto u28SY;
       c28SB: // global
           I64[Sp - 24] = block_c28SH_info;
           R1 = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u28T0; else goto c28SI;
       u28T0: // global
           call _c28SH(R1) args: 0, res: 0, upd: 0;
       c28SI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u28SY: // global
           Sp = Sp + 8;
           call _c28SW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wlvl5_r1XvP_info" {
     $wlvl5_r1XvP_info:
         const $wlvl5_r1XvP_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 582;
         const $wlvl5_r1XvP_slow;
 },
 _c28SH() //  [R1]
         { []
         }
     {offset
       c28SH: // global
           I64[Sp] = block_c28SM_info;
           _s1Ydi::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1Ydi::I64;
           if (R1 & 7 != 0) goto u28T2; else goto c28SO;
       u28T2: // global
           call _c28SM(R1) args: 0, res: 0, upd: 0;
       c28SO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28SH_info" {
     block_c28SH_info:
         const _c28SH;
         const 3;
         const 30;
 },
 _c28SM() //  [R1]
         { []
         }
     {offset
       c28SM: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c28SX; else goto u28SZ;
       c28SX: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Classes.eqInt_entry(R3, R2) args: 8, res: 0, upd: 8;
       u28SZ: // global
           Sp = Sp + 32;
           call _c28SW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c28SM_info" {
     block_c28SM_info:
         const _c28SM;
         const 131;
         const 30;
 },
 _c28SW() //  []
         { []
         }
     {offset
       c28SW: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:40.986370018 UTC

[section ""data" . lvl33_r1XvQ_closure" {
     lvl33_r1XvQ_closure:
         const lvl33_r1XvQ_info;
 },
 lvl33_r1XvQ_entry() //  [R2, R3]
         { []
         }
     {offset
       c28Tu: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c28TI; else goto c28TJ;
       c28TI: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl33_r1XvQ_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28TJ: // global
           I64[Sp - 16] = block_c28Tr_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28TT; else goto c28Ts;
       u28TT: // global
           call _c28Tr(R1) args: 0, res: 0, upd: 0;
       c28Ts: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl33_r1XvQ_info" {
     lvl33_r1XvQ_info:
         const lvl33_r1XvQ_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c28Tr() //  [R1]
         { []
         }
     {offset
       c28Tr: // global
           I64[Sp - 16] = block_c28Tx_info;
           _s1Ydq::P64 = P64[R1 + 15];
           _s1Ydr::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1Ydr::P64;
           P64[Sp] = _s1Ydq::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28TS; else goto c28Ty;
       u28TS: // global
           call _c28Tx(R1) args: 0, res: 0, upd: 0;
       c28Ty: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Tr_info" {
     block_c28Tr_info:
         const _c28Tr;
         const 1;
         const 30;
 },
 _c28Tx() //  [R1]
         { []
         }
     {offset
       c28Tx: // global
           I64[Sp] = block_c28TC_info;
           _s1Ydt::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s1Ydt::I64;
           if (R1 & 7 != 0) goto u28TU; else goto c28TD;
       u28TU: // global
           call _c28TC(R1) args: 0, res: 0, upd: 0;
       c28TD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Tx_info" {
     block_c28Tx_info:
         const _c28Tx;
         const 3;
         const 30;
 },
 _c28TC() //  [R1]
         { []
         }
     {offset
       c28TC: // global
           I64[Sp - 16] = block_c28TH_info;
           _s1Ydw::P64 = P64[R1 + 15];
           _s1Ydx::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1Ydx::P64;
           P64[Sp] = _s1Ydw::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28TV; else goto c28TN;
       u28TV: // global
           call _c28TH(R1) args: 0, res: 0, upd: 0;
       c28TN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28TC_info" {
     block_c28TC_info:
         const _c28TC;
         const 259;
         const 30;
 },
 _c28TH() //  [R1]
         { []
         }
     {offset
       c28TH: // global
           R6 = P64[Sp + 16];
           R5 = I64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 40;
           call $wlvl5_r1XvP_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28TH_info" {
     block_c28TH_info:
         const _c28TH;
         const 1029;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.000790446 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$s$fEq(,,)_$c/=_closure" {
     GHC.Arr.$fIx(,,)_$s$fEq(,,)_$c/=_closure:
         const GHC.Arr.$fIx(,,)_$s$fEq(,,)_$c/=_info;
 },
 GHC.Arr.$fIx(,,)_$s$fEq(,,)_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c28Up: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c28UD; else goto c28UE;
       c28UD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$s$fEq(,,)_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28UE: // global
           I64[Sp - 16] = block_c28Um_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28Vy; else goto c28Un;
       u28Vy: // global
           call _c28Um(R1) args: 0, res: 0, upd: 0;
       c28Un: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$s$fEq(,,)_$c/=_info" {
     GHC.Arr.$fIx(,,)_$s$fEq(,,)_$c/=_info:
         const GHC.Arr.$fIx(,,)_$s$fEq(,,)_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c28Um() //  [R1]
         { []
         }
     {offset
       c28Um: // global
           I64[Sp - 16] = block_c28Us_info;
           _s1YdD::P64 = P64[R1 + 7];
           _s1YdE::P64 = P64[R1 + 15];
           _s1YdF::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s1YdF::P64;
           P64[Sp] = _s1YdE::P64;
           P64[Sp + 8] = _s1YdD::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28Vx; else goto c28Ut;
       u28Vx: // global
           call _c28Us(R1) args: 0, res: 0, upd: 0;
       c28Ut: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Um_info" {
     block_c28Um_info:
         const _c28Um;
         const 1;
         const 30;
 },
 _c28Us() //  [R1]
         { []
         }
     {offset
       c28Us: // global
           I64[Sp - 16] = block_c28Ux_info;
           _s1YdH::P64 = P64[R1 + 7];
           _s1YdI::P64 = P64[R1 + 15];
           _s1YdJ::P64 = P64[R1 + 23];
           R1 = P64[Sp + 24];
           P64[Sp - 8] = _s1YdJ::P64;
           P64[Sp] = _s1YdI::P64;
           P64[Sp + 24] = _s1YdH::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28Vz; else goto c28Uy;
       u28Vz: // global
           call _c28Ux(R1) args: 0, res: 0, upd: 0;
       c28Uy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Us_info" {
     block_c28Us_info:
         const _c28Us;
         const 3;
         const 30;
 },
 _c28Ux() //  [R1]
         { []
         }
     {offset
       c28Ux: // global
           I64[Sp] = block_c28UC_info;
           _s1YdL::I64 = I64[R1 + 7];
           R1 = P64[Sp + 40];
           I64[Sp + 40] = _s1YdL::I64;
           if (R1 & 7 != 0) goto u28VA; else goto c28UI;
       u28VA: // global
           call _c28UC(R1) args: 0, res: 0, upd: 0;
       c28UI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Ux_info" {
     block_c28Ux_info:
         const _c28Ux;
         const 5;
         const 30;
 },
 _c28UC() //  [R1]
         { []
         }
     {offset
       c28UC: // global
           if (I64[Sp + 40] == I64[R1 + 7]) goto c28UZ; else goto u28Vu;
       c28UZ: // global
           I64[Sp] = block_c28UT_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto u28VB; else goto c28UU;
       u28VB: // global
           call _c28UT(R1) args: 0, res: 0, upd: 0;
       c28UU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u28Vu: // global
           Sp = Sp + 48;
           call _c28Vs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c28UC_info" {
     block_c28UC_info:
         const _c28UC;
         const 1029;
         const 30;
 },
 _c28UT() //  [R1]
         { []
         }
     {offset
       c28UT: // global
           I64[Sp] = block_c28UY_info;
           _s1YdQ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 40] = _s1YdQ::I64;
           if (R1 & 7 != 0) goto u28VD; else goto c28V1;
       u28VD: // global
           call _c28UY(R1) args: 0, res: 0, upd: 0;
       c28V1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28UT_info" {
     block_c28UT_info:
         const _c28UT;
         const 1541;
         const 30;
 },
 _c28UY() //  [R1]
         { []
         }
     {offset
       c28UY: // global
           if (I64[Sp + 40] == I64[R1 + 7]) goto c28Vi; else goto u28Vv;
       c28Vi: // global
           I64[Sp] = block_c28Vc_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u28VE; else goto c28Vd;
       u28VE: // global
           call _c28Vc(R1) args: 0, res: 0, upd: 0;
       c28Vd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u28Vv: // global
           Sp = Sp + 48;
           call _c28Vs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c28UY_info" {
     block_c28UY_info:
         const _c28UY;
         const 1669;
         const 30;
 },
 _c28Vc() //  [R1]
         { []
         }
     {offset
       c28Vc: // global
           I64[Sp + 32] = block_c28Vh_info;
           _s1YdV::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 40] = _s1YdV::I64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u28VG; else goto c28Vk;
       u28VG: // global
           call _c28Vh(R1) args: 0, res: 0, upd: 0;
       c28Vk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28Vc_info" {
     block_c28Vc_info:
         const _c28Vc;
         const 1925;
         const 30;
 },
 _c28Vh() //  [R1]
         { []
         }
     {offset
       c28Vh: // global
           if (I64[Sp + 8] == I64[R1 + 7]) goto c28Vt; else goto u28Vw;
       c28Vt: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u28Vw: // global
           Sp = Sp + 16;
           call _c28Vs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c28Vh_info" {
     block_c28Vh_info:
         const _c28Vh;
         const 65;
         const 30;
 },
 _c28Vs() //  []
         { []
         }
     {offset
       c28Vs: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.017791096 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$s$fEq(,,)_closure" {
     GHC.Arr.$fIx(,,)_$s$fEq(,,)_closure:
         const GHC.Classes.C:Eq_con_info;
         const lvl33_r1XvQ_closure+2;
         const GHC.Arr.$fIx(,,)_$s$fEq(,,)_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.021762674 UTC

[section ""data" . $wlvl6_r1XvR_closure" {
     $wlvl6_r1XvR_closure:
         const $wlvl6_r1XvR_info;
 },
 $wlvl6_r1XvR_slow() //  [R1]
         { []
         }
     {offset
       c28Ws: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call $wlvl6_r1XvR_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 16, res: 0, upd: 8;
     }
 },
 $wlvl6_r1XvR_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c28WB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c28WC; else goto c28WD;
       c28WC: // global
           R1 = $wlvl6_r1XvR_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c28WD: // global
           if (%MO_S_Ge_W64(R2, R5)) goto c28Wz; else goto u28X9;
       c28Wz: // global
           if (R2 == R5) goto c28WR; else goto u28Xa;
       c28WR: // global
           I64[Sp - 24] = block_c28WL_info;
           R1 = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u28Xd; else goto c28WM;
       u28Xd: // global
           call _c28WL(R1) args: 0, res: 0, upd: 0;
       c28WM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u28Xa: // global
           Sp = Sp + 8;
           call _c28X4() args: 0, res: 0, upd: 0;
       u28X9: // global
           Sp = Sp + 8;
           call _c28WA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wlvl6_r1XvR_info" {
     $wlvl6_r1XvR_info:
         const $wlvl6_r1XvR_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 582;
         const $wlvl6_r1XvR_slow;
 },
 _c28WL() //  [R1]
         { []
         }
     {offset
       c28WL: // global
           I64[Sp] = block_c28WQ_info;
           _s1Ye8::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1Ye8::I64;
           if (R1 & 7 != 0) goto u28Xg; else goto c28WT;
       u28Xg: // global
           call _c28WQ(R1) args: 0, res: 0, upd: 0;
       c28WT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28WL_info" {
     block_c28WL_info:
         const _c28WL;
         const 3;
         const 30;
 },
 _c28WQ() //  [R1]
         { []
         }
     {offset
       c28WQ: // global
           _s1Ye8::I64 = I64[Sp + 16];
           _s1Yea::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1Ye8::I64,
                            _s1Yea::I64)) goto c28X7; else goto u28Xb;
       c28X7: // global
           if (_s1Ye8::I64 == _s1Yea::I64) goto c28X5; else goto u28Xc;
       c28X5: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Classes.compareInt_entry(R3, R2) args: 8, res: 0, upd: 8;
       u28Xc: // global
           Sp = Sp + 32;
           call _c28X4() args: 0, res: 0, upd: 0;
       u28Xb: // global
           Sp = Sp + 32;
           call _c28WA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c28WQ_info" {
     block_c28WQ_info:
         const _c28WQ;
         const 131;
         const 30;
 },
 _c28X4() //  []
         { []
         }
     {offset
       c28X4: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c28WA() //  []
         { []
         }
     {offset
       c28WA: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.033076673 UTC

[section ""data" . lvl34_r1XvS_closure" {
     lvl34_r1XvS_closure:
         const lvl34_r1XvS_info;
 },
 lvl34_r1XvS_entry() //  [R2, R3]
         { []
         }
     {offset
       c28XL: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c28XZ; else goto c28Y0;
       c28XZ: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl34_r1XvS_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c28Y0: // global
           I64[Sp - 16] = block_c28XI_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28Ya; else goto c28XJ;
       u28Ya: // global
           call _c28XI(R1) args: 0, res: 0, upd: 0;
       c28XJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl34_r1XvS_info" {
     lvl34_r1XvS_info:
         const lvl34_r1XvS_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c28XI() //  [R1]
         { []
         }
     {offset
       c28XI: // global
           I64[Sp - 16] = block_c28XO_info;
           _s1Yeh::P64 = P64[R1 + 15];
           _s1Yei::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1Yei::P64;
           P64[Sp] = _s1Yeh::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28Y9; else goto c28XP;
       u28Y9: // global
           call _c28XO(R1) args: 0, res: 0, upd: 0;
       c28XP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28XI_info" {
     block_c28XI_info:
         const _c28XI;
         const 1;
         const 30;
 },
 _c28XO() //  [R1]
         { []
         }
     {offset
       c28XO: // global
           I64[Sp] = block_c28XT_info;
           _s1Yek::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s1Yek::I64;
           if (R1 & 7 != 0) goto u28Yb; else goto c28XU;
       u28Yb: // global
           call _c28XT(R1) args: 0, res: 0, upd: 0;
       c28XU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28XO_info" {
     block_c28XO_info:
         const _c28XO;
         const 3;
         const 30;
 },
 _c28XT() //  [R1]
         { []
         }
     {offset
       c28XT: // global
           I64[Sp - 16] = block_c28XY_info;
           _s1Yen::P64 = P64[R1 + 15];
           _s1Yeo::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1Yeo::P64;
           P64[Sp] = _s1Yen::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u28Yc; else goto c28Y4;
       u28Yc: // global
           call _c28XY(R1) args: 0, res: 0, upd: 0;
       c28Y4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28XT_info" {
     block_c28XT_info:
         const _c28XT;
         const 259;
         const 30;
 },
 _c28XY() //  [R1]
         { []
         }
     {offset
       c28XY: // global
           R6 = P64[Sp + 16];
           R5 = I64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 40;
           call $wlvl6_r1XvR_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c28XY_info" {
     block_c28XY_info:
         const _c28XY;
         const 1029;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.044750243 UTC

[section ""data" . $wlvl7_r1XvT_closure" {
     $wlvl7_r1XvT_closure:
         const $wlvl7_r1XvT_info;
 },
 $wlvl7_r1XvT_slow() //  [R1]
         { []
         }
     {offset
       c28YA: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call $wlvl7_r1XvT_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 16, res: 0, upd: 8;
     }
 },
 $wlvl7_r1XvT_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c28YJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c28YK; else goto c28YL;
       c28YK: // global
           R1 = $wlvl7_r1XvT_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c28YL: // global
           if (%MO_S_Ge_W64(R2, R5)) goto c28YH; else goto u28Zh;
       c28YH: // global
           if (R2 == R5) goto c28YZ; else goto u28Zi;
       c28YZ: // global
           I64[Sp - 24] = block_c28YT_info;
           R1 = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u28Zl; else goto c28YU;
       u28Zl: // global
           call _c28YT(R1) args: 0, res: 0, upd: 0;
       c28YU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u28Zi: // global
           Sp = Sp + 8;
           call _c28Zc() args: 0, res: 0, upd: 0;
       u28Zh: // global
           Sp = Sp + 8;
           call _c28YI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wlvl7_r1XvT_info" {
     $wlvl7_r1XvT_info:
         const $wlvl7_r1XvT_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 582;
         const $wlvl7_r1XvT_slow;
 },
 _c28YT() //  [R1]
         { []
         }
     {offset
       c28YT: // global
           I64[Sp] = block_c28YY_info;
           _s1YeA::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1YeA::I64;
           if (R1 & 7 != 0) goto u28Zo; else goto c28Z1;
       u28Zo: // global
           call _c28YY(R1) args: 0, res: 0, upd: 0;
       c28Z1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28YT_info" {
     block_c28YT_info:
         const _c28YT;
         const 3;
         const 30;
 },
 _c28YY() //  [R1]
         { []
         }
     {offset
       c28YY: // global
           _s1YeA::I64 = I64[Sp + 16];
           _s1YeC::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1YeA::I64,
                            _s1YeC::I64)) goto c28Zf; else goto u28Zj;
       c28Zf: // global
           if (_s1YeA::I64 == _s1YeC::I64) goto c28Zd; else goto u28Zk;
       c28Zd: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Classes.ltInt_entry(R3, R2) args: 8, res: 0, upd: 8;
       u28Zk: // global
           Sp = Sp + 32;
           call _c28Zc() args: 0, res: 0, upd: 0;
       u28Zj: // global
           Sp = Sp + 32;
           call _c28YI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c28YY_info" {
     block_c28YY_info:
         const _c28YY;
         const 131;
         const 30;
 },
 _c28Zc() //  []
         { []
         }
     {offset
       c28Zc: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c28YI() //  []
         { []
         }
     {offset
       c28YI: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.055568302 UTC

[section ""data" . lvl35_r1XvU_closure" {
     lvl35_r1XvU_closure:
         const lvl35_r1XvU_info;
 },
 lvl35_r1XvU_entry() //  [R2, R3]
         { []
         }
     {offset
       c28ZT: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2907; else goto c2908;
       c2907: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl35_r1XvU_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2908: // global
           I64[Sp - 16] = block_c28ZQ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u290i; else goto c28ZR;
       u290i: // global
           call _c28ZQ(R1) args: 0, res: 0, upd: 0;
       c28ZR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl35_r1XvU_info" {
     lvl35_r1XvU_info:
         const lvl35_r1XvU_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c28ZQ() //  [R1]
         { []
         }
     {offset
       c28ZQ: // global
           I64[Sp - 16] = block_c28ZW_info;
           _s1YeJ::P64 = P64[R1 + 15];
           _s1YeK::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1YeK::P64;
           P64[Sp] = _s1YeJ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u290h; else goto c28ZX;
       u290h: // global
           call _c28ZW(R1) args: 0, res: 0, upd: 0;
       c28ZX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28ZQ_info" {
     block_c28ZQ_info:
         const _c28ZQ;
         const 1;
         const 30;
 },
 _c28ZW() //  [R1]
         { []
         }
     {offset
       c28ZW: // global
           I64[Sp] = block_c2901_info;
           _s1YeM::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s1YeM::I64;
           if (R1 & 7 != 0) goto u290j; else goto c2902;
       u290j: // global
           call _c2901(R1) args: 0, res: 0, upd: 0;
       c2902: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c28ZW_info" {
     block_c28ZW_info:
         const _c28ZW;
         const 3;
         const 30;
 },
 _c2901() //  [R1]
         { []
         }
     {offset
       c2901: // global
           I64[Sp - 16] = block_c2906_info;
           _s1YeP::P64 = P64[R1 + 15];
           _s1YeQ::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1YeQ::P64;
           P64[Sp] = _s1YeP::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u290k; else goto c290c;
       u290k: // global
           call _c2906(R1) args: 0, res: 0, upd: 0;
       c290c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2901_info" {
     block_c2901_info:
         const _c2901;
         const 259;
         const 30;
 },
 _c2906() //  [R1]
         { []
         }
     {offset
       c2906: // global
           R6 = P64[Sp + 16];
           R5 = I64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 40;
           call $wlvl7_r1XvT_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2906_info" {
     block_c2906_info:
         const _c2906;
         const 1029;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.067585458 UTC

[section ""data" . $wlvl8_r1XvV_closure" {
     $wlvl8_r1XvV_closure:
         const $wlvl8_r1XvV_info;
 },
 $wlvl8_r1XvV_slow() //  [R1]
         { []
         }
     {offset
       c290I: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call $wlvl8_r1XvV_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 16, res: 0, upd: 8;
     }
 },
 $wlvl8_r1XvV_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c290R: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c290S; else goto c290T;
       c290S: // global
           R1 = $wlvl8_r1XvV_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c290T: // global
           if (%MO_S_Ge_W64(R5, R2)) goto c290P; else goto u291I;
       c290P: // global
           if (R5 == R2) goto c2917; else goto u291J;
       c2917: // global
           I64[Sp - 24] = block_c2911_info;
           R1 = R6;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u291O; else goto c2912;
       u291O: // global
           call _c2911(R1) args: 0, res: 0, upd: 0;
       c2912: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u291J: // global
           Sp = Sp + 8;
           call _c291D() args: 0, res: 0, upd: 0;
       u291I: // global
           Sp = Sp + 8;
           call _c290Q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wlvl8_r1XvV_info" {
     $wlvl8_r1XvV_info:
         const $wlvl8_r1XvV_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 582;
         const $wlvl8_r1XvV_slow;
 },
 _c2911() //  [R1]
         { []
         }
     {offset
       c2911: // global
           I64[Sp] = block_c2916_info;
           _s1Yf2::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1Yf2::I64;
           if (R1 & 7 != 0) goto u291R; else goto c2919;
       u291R: // global
           call _c2916(R1) args: 0, res: 0, upd: 0;
       c2919: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2911_info" {
     block_c2911_info:
         const _c2911;
         const 3;
         const 30;
 },
 _c2916() //  [R1]
         { []
         }
     {offset
       c2916: // global
           _s1Yf2::I64 = I64[Sp + 8];
           _s1Yf4::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1Yf2::I64,
                            _s1Yf4::I64)) goto c291G; else goto u291K;
       c291G: // global
           if (_s1Yf2::I64 == _s1Yf4::I64) goto c291t; else goto u291L;
       c291t: // global
           I64[Sp + 8] = block_c291n_info;
           R1 = P64[Sp + 24];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u291S; else goto c291o;
       u291S: // global
           call _c291n(R1) args: 0, res: 0, upd: 0;
       c291o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u291L: // global
           Sp = Sp + 32;
           call _c291D() args: 0, res: 0, upd: 0;
       u291K: // global
           Sp = Sp + 32;
           call _c290Q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2916_info" {
     block_c2916_info:
         const _c2916;
         const 67;
         const 30;
 },
 _c291n() //  [R1]
         { []
         }
     {offset
       c291n: // global
           _s1YeV::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c291s_info;
           _s1Yf8::I64 = I64[R1 + 7];
           R1 = _s1YeV::P64;
           I64[Sp + 16] = _s1Yf8::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u291V; else goto c291v;
       u291V: // global
           call _c291s(R1) args: 0, res: 0, upd: 0;
       c291v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c291n_info" {
     block_c291n_info:
         const _c291n;
         const 130;
         const 30;
 },
 _c291s() //  [R1]
         { []
         }
     {offset
       c291s: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u291N; else goto u291M;
       u291N: // global
           Sp = Sp + 16;
           call _c291D() args: 0, res: 0, upd: 0;
       u291M: // global
           Sp = Sp + 16;
           call _c290Q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c291s_info" {
     block_c291s_info:
         const _c291s;
         const 65;
         const 30;
 },
 _c291D() //  []
         { []
         }
     {offset
       c291D: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c290Q() //  []
         { []
         }
     {offset
       c290Q: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.082144026 UTC

[section ""data" . lvl36_r1XvW_closure" {
     lvl36_r1XvW_closure:
         const lvl36_r1XvW_info;
 },
 lvl36_r1XvW_entry() //  [R2, R3]
         { []
         }
     {offset
       c292z: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c292N; else goto c292O;
       c292N: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl36_r1XvW_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c292O: // global
           I64[Sp - 16] = block_c292w_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u292Y; else goto c292x;
       u292Y: // global
           call _c292w(R1) args: 0, res: 0, upd: 0;
       c292x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl36_r1XvW_info" {
     lvl36_r1XvW_info:
         const lvl36_r1XvW_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c292w() //  [R1]
         { []
         }
     {offset
       c292w: // global
           I64[Sp - 16] = block_c292C_info;
           _s1Yfg::P64 = P64[R1 + 15];
           _s1Yfh::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1Yfh::P64;
           P64[Sp] = _s1Yfg::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u292X; else goto c292D;
       u292X: // global
           call _c292C(R1) args: 0, res: 0, upd: 0;
       c292D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c292w_info" {
     block_c292w_info:
         const _c292w;
         const 1;
         const 30;
 },
 _c292C() //  [R1]
         { []
         }
     {offset
       c292C: // global
           I64[Sp] = block_c292H_info;
           _s1Yfj::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s1Yfj::I64;
           if (R1 & 7 != 0) goto u292Z; else goto c292I;
       u292Z: // global
           call _c292H(R1) args: 0, res: 0, upd: 0;
       c292I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c292C_info" {
     block_c292C_info:
         const _c292C;
         const 3;
         const 30;
 },
 _c292H() //  [R1]
         { []
         }
     {offset
       c292H: // global
           I64[Sp - 16] = block_c292M_info;
           _s1Yfm::P64 = P64[R1 + 15];
           _s1Yfn::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1Yfn::P64;
           P64[Sp] = _s1Yfm::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2930; else goto c292S;
       u2930: // global
           call _c292M(R1) args: 0, res: 0, upd: 0;
       c292S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c292H_info" {
     block_c292H_info:
         const _c292H;
         const 259;
         const 30;
 },
 _c292M() //  [R1]
         { []
         }
     {offset
       c292M: // global
           R6 = P64[Sp + 16];
           R5 = I64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 40;
           call $wlvl8_r1XvV_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c292M_info" {
     block_c292M_info:
         const _c292M;
         const 1029;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.094300344 UTC

[section ""data" . $wlvl9_r1XvX_closure" {
     $wlvl9_r1XvX_closure:
         const $wlvl9_r1XvX_info;
 },
 $wlvl9_r1XvX_slow() //  [R1]
         { []
         }
     {offset
       c293o: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call $wlvl9_r1XvX_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 16, res: 0, upd: 8;
     }
 },
 $wlvl9_r1XvX_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c293x: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c293y; else goto c293z;
       c293y: // global
           R1 = $wlvl9_r1XvX_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c293z: // global
           if (%MO_S_Ge_W64(R5, R2)) goto c293v; else goto u2945;
       c293v: // global
           if (R5 == R2) goto c293N; else goto u2946;
       c293N: // global
           I64[Sp - 24] = block_c293H_info;
           R1 = R6;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2949; else goto c293I;
       u2949: // global
           call _c293H(R1) args: 0, res: 0, upd: 0;
       c293I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2946: // global
           Sp = Sp + 8;
           call _c2940() args: 0, res: 0, upd: 0;
       u2945: // global
           Sp = Sp + 8;
           call _c293w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wlvl9_r1XvX_info" {
     $wlvl9_r1XvX_info:
         const $wlvl9_r1XvX_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 582;
         const $wlvl9_r1XvX_slow;
 },
 _c293H() //  [R1]
         { []
         }
     {offset
       c293H: // global
           I64[Sp] = block_c293M_info;
           _s1Yfz::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1Yfz::I64;
           if (R1 & 7 != 0) goto u294c; else goto c293P;
       u294c: // global
           call _c293M(R1) args: 0, res: 0, upd: 0;
       c293P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c293H_info" {
     block_c293H_info:
         const _c293H;
         const 3;
         const 30;
 },
 _c293M() //  [R1]
         { []
         }
     {offset
       c293M: // global
           _s1Yfz::I64 = I64[Sp + 8];
           _s1YfB::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1Yfz::I64,
                            _s1YfB::I64)) goto c2943; else goto u2947;
       c2943: // global
           if (_s1Yfz::I64 == _s1YfB::I64) goto c2941; else goto u2948;
       c2941: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 24];
           Sp = Sp + 32;
           call GHC.Classes.ltInt_entry(R3, R2) args: 8, res: 0, upd: 8;
       u2948: // global
           Sp = Sp + 32;
           call _c2940() args: 0, res: 0, upd: 0;
       u2947: // global
           Sp = Sp + 32;
           call _c293w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c293M_info" {
     block_c293M_info:
         const _c293M;
         const 67;
         const 30;
 },
 _c2940() //  []
         { []
         }
     {offset
       c2940: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c293w() //  []
         { []
         }
     {offset
       c293w: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.106390887 UTC

[section ""data" . lvl37_r1XvY_closure" {
     lvl37_r1XvY_closure:
         const lvl37_r1XvY_info;
 },
 lvl37_r1XvY_entry() //  [R2, R3]
         { []
         }
     {offset
       c294H: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c294V; else goto c294W;
       c294V: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl37_r1XvY_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c294W: // global
           I64[Sp - 16] = block_c294E_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2956; else goto c294F;
       u2956: // global
           call _c294E(R1) args: 0, res: 0, upd: 0;
       c294F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl37_r1XvY_info" {
     lvl37_r1XvY_info:
         const lvl37_r1XvY_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c294E() //  [R1]
         { []
         }
     {offset
       c294E: // global
           I64[Sp - 16] = block_c294K_info;
           _s1YfI::P64 = P64[R1 + 15];
           _s1YfJ::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1YfJ::P64;
           P64[Sp] = _s1YfI::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2955; else goto c294L;
       u2955: // global
           call _c294K(R1) args: 0, res: 0, upd: 0;
       c294L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c294E_info" {
     block_c294E_info:
         const _c294E;
         const 1;
         const 30;
 },
 _c294K() //  [R1]
         { []
         }
     {offset
       c294K: // global
           I64[Sp] = block_c294P_info;
           _s1YfL::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s1YfL::I64;
           if (R1 & 7 != 0) goto u2957; else goto c294Q;
       u2957: // global
           call _c294P(R1) args: 0, res: 0, upd: 0;
       c294Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c294K_info" {
     block_c294K_info:
         const _c294K;
         const 3;
         const 30;
 },
 _c294P() //  [R1]
         { []
         }
     {offset
       c294P: // global
           I64[Sp - 16] = block_c294U_info;
           _s1YfO::P64 = P64[R1 + 15];
           _s1YfP::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1YfP::P64;
           P64[Sp] = _s1YfO::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2958; else goto c2950;
       u2958: // global
           call _c294U(R1) args: 0, res: 0, upd: 0;
       c2950: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c294P_info" {
     block_c294P_info:
         const _c294P;
         const 259;
         const 30;
 },
 _c294U() //  [R1]
         { []
         }
     {offset
       c294U: // global
           R6 = P64[Sp + 16];
           R5 = I64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 40;
           call $wlvl9_r1XvX_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c294U_info" {
     block_c294U_info:
         const _c294U;
         const 1029;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.119925803 UTC

[section ""data" . $wlvl10_r1XvZ_closure" {
     $wlvl10_r1XvZ_closure:
         const $wlvl10_r1XvZ_info;
 },
 $wlvl10_r1XvZ_slow() //  [R1]
         { []
         }
     {offset
       c295w: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call $wlvl10_r1XvZ_entry(R6,
                                    R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 16, res: 0, upd: 8;
     }
 },
 $wlvl10_r1XvZ_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c295F: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c295G; else goto c295H;
       c295G: // global
           R1 = $wlvl10_r1XvZ_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c295H: // global
           if (%MO_S_Ge_W64(R2, R5)) goto c295D; else goto u296w;
       c295D: // global
           if (R2 == R5) goto c295V; else goto u296x;
       c295V: // global
           I64[Sp - 24] = block_c295P_info;
           R1 = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u296C; else goto c295Q;
       u296C: // global
           call _c295P(R1) args: 0, res: 0, upd: 0;
       c295Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u296x: // global
           Sp = Sp + 8;
           call _c296r() args: 0, res: 0, upd: 0;
       u296w: // global
           Sp = Sp + 8;
           call _c295E() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wlvl10_r1XvZ_info" {
     $wlvl10_r1XvZ_info:
         const $wlvl10_r1XvZ_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 582;
         const $wlvl10_r1XvZ_slow;
 },
 _c295P() //  [R1]
         { []
         }
     {offset
       c295P: // global
           I64[Sp] = block_c295U_info;
           _s1Yg1::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1Yg1::I64;
           if (R1 & 7 != 0) goto u296F; else goto c295X;
       u296F: // global
           call _c295U(R1) args: 0, res: 0, upd: 0;
       c295X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c295P_info" {
     block_c295P_info:
         const _c295P;
         const 3;
         const 30;
 },
 _c295U() //  [R1]
         { []
         }
     {offset
       c295U: // global
           _s1Yg1::I64 = I64[Sp + 16];
           _s1Yg3::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1Yg1::I64,
                            _s1Yg3::I64)) goto c296u; else goto u296y;
       c296u: // global
           if (_s1Yg1::I64 == _s1Yg3::I64) goto c296h; else goto u296z;
       c296h: // global
           I64[Sp + 16] = block_c296b_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u296G; else goto c296c;
       u296G: // global
           call _c296b(R1) args: 0, res: 0, upd: 0;
       c296c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u296z: // global
           Sp = Sp + 32;
           call _c296r() args: 0, res: 0, upd: 0;
       u296y: // global
           Sp = Sp + 32;
           call _c295E() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c295U_info" {
     block_c295U_info:
         const _c295U;
         const 131;
         const 30;
 },
 _c296b() //  [R1]
         { []
         }
     {offset
       c296b: // global
           I64[Sp] = block_c296g_info;
           _s1Yg7::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1Yg7::I64;
           if (R1 & 7 != 0) goto u296J; else goto c296j;
       u296J: // global
           call _c296g(R1) args: 0, res: 0, upd: 0;
       c296j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c296b_info" {
     block_c296b_info:
         const _c296b;
         const 1;
         const 30;
 },
 _c296g() //  [R1]
         { []
         }
     {offset
       c296g: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u296B; else goto u296A;
       u296B: // global
           Sp = Sp + 16;
           call _c296r() args: 0, res: 0, upd: 0;
       u296A: // global
           Sp = Sp + 16;
           call _c295E() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c296g_info" {
     block_c296g_info:
         const _c296g;
         const 65;
         const 30;
 },
 _c296r() //  []
         { []
         }
     {offset
       c296r: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c295E() //  []
         { []
         }
     {offset
       c295E: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.134571184 UTC

[section ""data" . lvl38_r1Xw0_closure" {
     lvl38_r1Xw0_closure:
         const lvl38_r1Xw0_info;
 },
 lvl38_r1Xw0_entry() //  [R2, R3]
         { []
         }
     {offset
       c297n: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c297B; else goto c297C;
       c297B: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl38_r1Xw0_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c297C: // global
           I64[Sp - 16] = block_c297k_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u297M; else goto c297l;
       u297M: // global
           call _c297k(R1) args: 0, res: 0, upd: 0;
       c297l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl38_r1Xw0_info" {
     lvl38_r1Xw0_info:
         const lvl38_r1Xw0_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c297k() //  [R1]
         { []
         }
     {offset
       c297k: // global
           I64[Sp - 16] = block_c297q_info;
           _s1Ygf::P64 = P64[R1 + 15];
           _s1Ygg::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1Ygg::P64;
           P64[Sp] = _s1Ygf::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u297L; else goto c297r;
       u297L: // global
           call _c297q(R1) args: 0, res: 0, upd: 0;
       c297r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c297k_info" {
     block_c297k_info:
         const _c297k;
         const 1;
         const 30;
 },
 _c297q() //  [R1]
         { []
         }
     {offset
       c297q: // global
           I64[Sp] = block_c297v_info;
           _s1Ygi::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s1Ygi::I64;
           if (R1 & 7 != 0) goto u297N; else goto c297w;
       u297N: // global
           call _c297v(R1) args: 0, res: 0, upd: 0;
       c297w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c297q_info" {
     block_c297q_info:
         const _c297q;
         const 3;
         const 30;
 },
 _c297v() //  [R1]
         { []
         }
     {offset
       c297v: // global
           I64[Sp - 16] = block_c297A_info;
           _s1Ygl::P64 = P64[R1 + 15];
           _s1Ygm::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1Ygm::P64;
           P64[Sp] = _s1Ygl::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u297O; else goto c297G;
       u297O: // global
           call _c297A(R1) args: 0, res: 0, upd: 0;
       c297G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c297v_info" {
     block_c297v_info:
         const _c297v;
         const 259;
         const 30;
 },
 _c297A() //  [R1]
         { []
         }
     {offset
       c297A: // global
           R6 = P64[Sp + 16];
           R5 = I64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 40;
           call $wlvl10_r1XvZ_entry(R6,
                                    R5,
                                    R4,
                                    R3,
                                    R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c297A_info" {
     block_c297A_info:
         const _c297A;
         const 1029;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.147925946 UTC

[section ""data" . lvl39_r1Xw1_closure" {
     lvl39_r1Xw1_closure:
         const lvl39_r1Xw1_info;
 },
 lvl39_r1Xw1_entry() //  [R2, R3]
         { []
         }
     {offset
       c298i: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c298w; else goto c298x;
       c298w: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl39_r1Xw1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c298x: // global
           I64[Sp - 16] = block_c298f_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u299G; else goto c298g;
       u299G: // global
           call _c298f(R1) args: 0, res: 0, upd: 0;
       c298g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl39_r1Xw1_info" {
     lvl39_r1Xw1_info:
         const lvl39_r1Xw1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c298f() //  [R1]
         { []
         }
     {offset
       c298f: // global
           I64[Sp - 24] = block_c298l_info;
           _s1Ygr::P64 = R1;
           _s1Ygt::P64 = P64[R1 + 15];
           _s1Ygu::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s1Ygt::P64;
           P64[Sp - 8] = _s1Ygu::P64;
           P64[Sp] = _s1Ygr::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u299F; else goto c298m;
       u299F: // global
           call _c298l(R1) args: 0, res: 0, upd: 0;
       c298m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c298f_info" {
     block_c298f_info:
         const _c298f;
         const 1;
         const 30;
 },
 _c298l() //  [R1]
         { []
         }
     {offset
       c298l: // global
           I64[Sp] = block_c298q_info;
           _s1Ygw::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s1Ygw::I64;
           if (R1 & 7 != 0) goto u299H; else goto c298r;
       u299H: // global
           call _c298q(R1) args: 0, res: 0, upd: 0;
       c298r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c298l_info" {
     block_c298l_info:
         const _c298l;
         const 4;
         const 30;
 },
 _c298q() //  [R1]
         { []
         }
     {offset
       c298q: // global
           I64[Sp - 24] = block_c298v_info;
           _s1Ygx::P64 = R1;
           _s1Ygz::P64 = P64[R1 + 15];
           _s1YgA::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s1Ygz::P64;
           P64[Sp - 8] = _s1YgA::P64;
           P64[Sp] = _s1Ygx::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u299I; else goto c298B;
       u299I: // global
           call _c298v(R1) args: 0, res: 0, upd: 0;
       c298B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c298q_info" {
     block_c298q_info:
         const _c298q;
         const 516;
         const 30;
 },
 _c298v() //  [R1]
         { []
         }
     {offset
       c298v: // global
           _s1Ygw::I64 = I64[Sp + 56];
           _s1YgC::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1YgC::I64,
                            _s1Ygw::I64)) goto c299x; else goto u299z;
       c299x: // global
           if (_s1YgC::I64 == _s1Ygw::I64) goto c298V; else goto u299A;
       c298V: // global
           _s1Ygz::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c298P_info;
           R1 = _s1Ygz::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u299J; else goto c298Q;
       u299J: // global
           call _c298P(R1) args: 0, res: 0, upd: 0;
       c298Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u299A: // global
           Sp = Sp + 24;
           call _c299r() args: 0, res: 0, upd: 0;
       u299z: // global
           Sp = Sp + 48;
           call _c299y() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c298v_info" {
     block_c298v_info:
         const _c298v;
         const 4103;
         const 30;
 },
 _c298P() //  [R1]
         { []
         }
     {offset
       c298P: // global
           I64[Sp] = block_c298U_info;
           _s1YgG::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 48] = _s1YgG::I64;
           if (R1 & 7 != 0) goto u299M; else goto c298X;
       u299M: // global
           call _c298U(R1) args: 0, res: 0, upd: 0;
       c298X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c298P_info" {
     block_c298P_info:
         const _c298P;
         const 2054;
         const 30;
 },
 _c298U() //  [R1]
         { []
         }
     {offset
       c298U: // global
           _s1YgG::I64 = I64[Sp + 48];
           _s1YgI::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1YgG::I64,
                            _s1YgI::I64)) goto c299u; else goto u299B;
       c299u: // global
           if (_s1YgG::I64 == _s1YgI::I64) goto c299h; else goto u299C;
       c299h: // global
           _s1YgA::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c299b_info;
           R1 = _s1YgA::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u299N; else goto c299c;
       u299N: // global
           call _c299b(R1) args: 0, res: 0, upd: 0;
       c299c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u299C: // global
           Sp = Sp + 16;
           call _c299r() args: 0, res: 0, upd: 0;
       u299B: // global
           Sp = Sp + 40;
           call _c299y() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c298U_info" {
     block_c298U_info:
         const _c298U;
         const 2310;
         const 30;
 },
 _c299b() //  [R1]
         { []
         }
     {offset
       c299b: // global
           I64[Sp] = block_c299g_info;
           _s1YgM::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 40] = _s1YgM::I64;
           if (R1 & 7 != 0) goto u299Q; else goto c299j;
       u299Q: // global
           call _c299g(R1) args: 0, res: 0, upd: 0;
       c299j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c299b_info" {
     block_c299b_info:
         const _c299b;
         const 1157;
         const 30;
 },
 _c299g() //  [R1]
         { []
         }
     {offset
       c299g: // global
           if (%MO_S_Ge_W64(I64[Sp + 40],
                            I64[R1 + 7])) goto u299E; else goto u299D;
       u299E: // global
           Sp = Sp + 8;
           call _c299r() args: 0, res: 0, upd: 0;
       u299D: // global
           Sp = Sp + 32;
           call _c299y() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c299g_info" {
     block_c299g_info:
         const _c299g;
         const 1413;
         const 30;
 },
 _c299r() //  []
         { []
         }
     {offset
       c299r: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c299y() //  []
         { []
         }
     {offset
       c299y: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.169627118 UTC

[section ""data" . lvl40_r1Xw2_closure" {
     lvl40_r1Xw2_closure:
         const lvl40_r1Xw2_info;
 },
 lvl40_r1Xw2_entry() //  [R2, R3]
         { []
         }
     {offset
       c29aK: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c29aY; else goto c29aZ;
       c29aY: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl40_r1Xw2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c29aZ: // global
           I64[Sp - 16] = block_c29aH_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u29c8; else goto c29aI;
       u29c8: // global
           call _c29aH(R1) args: 0, res: 0, upd: 0;
       c29aI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl40_r1Xw2_info" {
     lvl40_r1Xw2_info:
         const lvl40_r1Xw2_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c29aH() //  [R1]
         { []
         }
     {offset
       c29aH: // global
           I64[Sp - 24] = block_c29aN_info;
           _s1YgS::P64 = R1;
           _s1YgU::P64 = P64[R1 + 15];
           _s1YgV::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s1YgU::P64;
           P64[Sp - 8] = _s1YgV::P64;
           P64[Sp] = _s1YgS::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u29c7; else goto c29aO;
       u29c7: // global
           call _c29aN(R1) args: 0, res: 0, upd: 0;
       c29aO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29aH_info" {
     block_c29aH_info:
         const _c29aH;
         const 1;
         const 30;
 },
 _c29aN() //  [R1]
         { []
         }
     {offset
       c29aN: // global
           I64[Sp] = block_c29aS_info;
           _s1YgX::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s1YgX::I64;
           if (R1 & 7 != 0) goto u29c9; else goto c29aT;
       u29c9: // global
           call _c29aS(R1) args: 0, res: 0, upd: 0;
       c29aT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29aN_info" {
     block_c29aN_info:
         const _c29aN;
         const 4;
         const 30;
 },
 _c29aS() //  [R1]
         { []
         }
     {offset
       c29aS: // global
           I64[Sp - 24] = block_c29aX_info;
           _s1YgY::P64 = R1;
           _s1Yh0::P64 = P64[R1 + 15];
           _s1Yh1::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s1Yh0::P64;
           P64[Sp - 8] = _s1Yh1::P64;
           P64[Sp] = _s1YgY::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u29ca; else goto c29b3;
       u29ca: // global
           call _c29aX(R1) args: 0, res: 0, upd: 0;
       c29b3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29aS_info" {
     block_c29aS_info:
         const _c29aS;
         const 516;
         const 30;
 },
 _c29aX() //  [R1]
         { []
         }
     {offset
       c29aX: // global
           _s1YgX::I64 = I64[Sp + 56];
           _s1Yh3::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1Yh3::I64,
                            _s1YgX::I64)) goto c29bZ; else goto u29c1;
       c29bZ: // global
           if (_s1Yh3::I64 == _s1YgX::I64) goto c29bn; else goto u29c2;
       c29bn: // global
           _s1Yh0::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c29bh_info;
           R1 = _s1Yh0::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u29cb; else goto c29bi;
       u29cb: // global
           call _c29bh(R1) args: 0, res: 0, upd: 0;
       c29bi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u29c2: // global
           Sp = Sp + 48;
           call _c29bT() args: 0, res: 0, upd: 0;
       u29c1: // global
           Sp = Sp + 24;
           call _c29c0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c29aX_info" {
     block_c29aX_info:
         const _c29aX;
         const 4103;
         const 30;
 },
 _c29bh() //  [R1]
         { []
         }
     {offset
       c29bh: // global
           I64[Sp] = block_c29bm_info;
           _s1Yh7::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 48] = _s1Yh7::I64;
           if (R1 & 7 != 0) goto u29ce; else goto c29bp;
       u29ce: // global
           call _c29bm(R1) args: 0, res: 0, upd: 0;
       c29bp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29bh_info" {
     block_c29bh_info:
         const _c29bh;
         const 2054;
         const 30;
 },
 _c29bm() //  [R1]
         { []
         }
     {offset
       c29bm: // global
           _s1Yh7::I64 = I64[Sp + 48];
           _s1Yh9::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1Yh7::I64,
                            _s1Yh9::I64)) goto c29bW; else goto u29c3;
       c29bW: // global
           if (_s1Yh7::I64 == _s1Yh9::I64) goto c29bJ; else goto u29c4;
       c29bJ: // global
           _s1Yh1::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c29bD_info;
           R1 = _s1Yh1::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u29cf; else goto c29bE;
       u29cf: // global
           call _c29bD(R1) args: 0, res: 0, upd: 0;
       c29bE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u29c4: // global
           Sp = Sp + 40;
           call _c29bT() args: 0, res: 0, upd: 0;
       u29c3: // global
           Sp = Sp + 16;
           call _c29c0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c29bm_info" {
     block_c29bm_info:
         const _c29bm;
         const 2310;
         const 30;
 },
 _c29bD() //  [R1]
         { []
         }
     {offset
       c29bD: // global
           I64[Sp] = block_c29bI_info;
           _s1Yhd::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 40] = _s1Yhd::I64;
           if (R1 & 7 != 0) goto u29ci; else goto c29bL;
       u29ci: // global
           call _c29bI(R1) args: 0, res: 0, upd: 0;
       c29bL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29bD_info" {
     block_c29bD_info:
         const _c29bD;
         const 1157;
         const 30;
 },
 _c29bI() //  [R1]
         { []
         }
     {offset
       c29bI: // global
           if (%MO_S_Ge_W64(I64[Sp + 40],
                            I64[R1 + 7])) goto u29c6; else goto u29c5;
       u29c6: // global
           Sp = Sp + 32;
           call _c29bT() args: 0, res: 0, upd: 0;
       u29c5: // global
           Sp = Sp + 8;
           call _c29c0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c29bI_info" {
     block_c29bI_info:
         const _c29bI;
         const 1413;
         const 30;
 },
 _c29bT() //  []
         { []
         }
     {offset
       c29bT: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c29c0() //  []
         { []
         }
     {offset
       c29c0: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.187458295 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$s$fOrd(,,)_closure" {
     GHC.Arr.$fIx(,,)_$s$fOrd(,,)_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Arr.$fIx(,,)_$s$fEq(,,)_closure+1;
         const lvl34_r1XvS_closure+2;
         const lvl35_r1XvU_closure+2;
         const lvl36_r1XvW_closure+2;
         const lvl37_r1XvY_closure+2;
         const lvl38_r1Xw0_closure+2;
         const lvl39_r1Xw1_closure+2;
         const lvl40_r1Xw2_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.189800655 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$s$fIx(,,)_closure" {
     GHC.Arr.$fIx(,,)_$s$fIx(,,)_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Arr.$fIx(,,)_$s$fOrd(,,)_closure+1;
         const GHC.Arr.$fIx(,,)_$s$crange_closure+1;
         const GHC.Arr.$fIx(,,)_$s$cindex_closure+2;
         const GHC.Arr.$fIx(,,)_$s$cunsafeIndex_closure+2;
         const GHC.Arr.$fIx(,,)1_closure+2;
         const GHC.Arr.$fIx(,,)_$s$crangeSize_closure+1;
         const GHC.Arr.$fIx(,,)_$s$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.195264043 UTC

[section ""data" . GHC.Arr.$fIx(,,)_closure" {
     GHC.Arr.$fIx(,,)_closure:
         const GHC.Arr.$fIx(,,)_info;
         const 0;
 },
 sat_s1Yhq_entry() //  [R1, R2]
         { []
         }
     {offset
       c29dg: // global
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$fIx(,,)_$cunsafeRangeSize_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Yhq_info" {
     sat_s1Yhq_info:
         const sat_s1Yhq_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s1Yhp_entry() //  [R1, R2]
         { []
         }
     {offset
       c29do: // global
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$fIx(,,)_$crangeSize_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Yhp_info" {
     sat_s1Yhp_info:
         const sat_s1Yhp_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s1Yho_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c29dw: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fIx(,,)_$cinRange_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Yho_info" {
     sat_s1Yho_info:
         const sat_s1Yho_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_s1Yhn_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c29dE: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fIx(,,)_$cunsafeIndex_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Yhn_info" {
     sat_s1Yhn_info:
         const sat_s1Yhn_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_s1Yhm_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c29dM: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fIx(,,)_$cindex_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Yhm_info" {
     sat_s1Yhm_info:
         const sat_s1Yhm_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const S1YCH_srt+576;
 },
 sat_s1Yhl_entry() //  [R1, R2]
         { []
         }
     {offset
       c29dU: // global
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$fIx(,,)_$crange_entry(R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Yhl_info" {
     sat_s1Yhl_info:
         const sat_s1Yhl_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s1Yhk_entry() //  [R1]
         { []
         }
     {offset
       c29e1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c29e2; else goto c29e3;
       c29e2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29e3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$fIx(,,)_$cp1Ix_entry(R4,
                                              R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Yhk_info" {
     sat_s1Yhk_info:
         const sat_s1Yhk_entry;
         const 3;
         const 15;
 },
 GHC.Arr.$fIx(,,)_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c29e5: // global
           Hp = Hp + 296;
           if (Hp > HpLim) (likely: False) goto c29e9; else goto c29e8;
       c29e9: // global
           HpAlloc = 296;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c29e8: // global
           I64[Hp - 288] = sat_s1Yhq_info;
           P64[Hp - 280] = R2;
           P64[Hp - 272] = R3;
           P64[Hp - 264] = R4;
           I64[Hp - 256] = sat_s1Yhp_info;
           P64[Hp - 248] = R2;
           P64[Hp - 240] = R3;
           P64[Hp - 232] = R4;
           I64[Hp - 224] = sat_s1Yho_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           P64[Hp - 200] = R4;
           I64[Hp - 192] = sat_s1Yhn_info;
           P64[Hp - 184] = R2;
           P64[Hp - 176] = R3;
           P64[Hp - 168] = R4;
           I64[Hp - 160] = sat_s1Yhm_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           P64[Hp - 136] = R4;
           I64[Hp - 128] = sat_s1Yhl_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           I64[Hp - 96] = sat_s1Yhk_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = GHC.Arr.C:Ix_con_info;
           P64[Hp - 48] = Hp - 96;
           P64[Hp - 40] = Hp - 127;
           P64[Hp - 32] = Hp - 158;
           P64[Hp - 24] = Hp - 190;
           P64[Hp - 16] = Hp - 222;
           P64[Hp - 8] = Hp - 255;
           P64[Hp] = Hp - 287;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_info" {
     GHC.Arr.$fIx(,,)_info:
         const GHC.Arr.$fIx(,,)_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S1YCH_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.210777163 UTC

[section ""data" . $wlvl11_r1Xw3_closure" {
     $wlvl11_r1Xw3_closure:
         const $wlvl11_r1Xw3_info;
 },
 $wlvl11_r1Xw3_slow() //  [R1]
         { []
         }
     {offset
       c29eJ: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call $wlvl11_r1Xw3_entry(R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlvl11_r1Xw3_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c29eS: // global
           if (R2 == R4) goto c29eR; else goto c29eQ;
       c29eR: // global
           _s1Yhs::P64 = R3;
           R3 = R5;
           R2 = _s1Yhs::P64;
           call GHC.Classes.eqInt_entry(R3, R2) args: 8, res: 0, upd: 8;
       c29eQ: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl11_r1Xw3_info" {
     $wlvl11_r1Xw3_info:
         const $wlvl11_r1Xw3_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 324;
         const $wlvl11_r1Xw3_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.216571063 UTC

[section ""data" . lvl41_r1Xw4_closure" {
     lvl41_r1Xw4_closure:
         const lvl41_r1Xw4_info;
 },
 lvl41_r1Xw4_entry() //  [R2, R3]
         { []
         }
     {offset
       c29f9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c29fn; else goto c29fo;
       c29fn: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl41_r1Xw4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c29fo: // global
           I64[Sp - 16] = block_c29f6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u29fy; else goto c29f7;
       u29fy: // global
           call _c29f6(R1) args: 0, res: 0, upd: 0;
       c29f7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl41_r1Xw4_info" {
     lvl41_r1Xw4_info:
         const lvl41_r1Xw4_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c29f6() //  [R1]
         { []
         }
     {offset
       c29f6: // global
           I64[Sp - 8] = block_c29fc_info;
           _s1YhA::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1YhA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u29fx; else goto c29fd;
       u29fx: // global
           call _c29fc(R1) args: 0, res: 0, upd: 0;
       c29fd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29f6_info" {
     block_c29f6_info:
         const _c29f6;
         const 1;
         const 30;
 },
 _c29fc() //  [R1]
         { []
         }
     {offset
       c29fc: // global
           I64[Sp] = block_c29fh_info;
           _s1YhC::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1YhC::I64;
           if (R1 & 7 != 0) goto u29fz; else goto c29fi;
       u29fz: // global
           call _c29fh(R1) args: 0, res: 0, upd: 0;
       c29fi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29fc_info" {
     block_c29fc_info:
         const _c29fc;
         const 2;
         const 30;
 },
 _c29fh() //  [R1]
         { []
         }
     {offset
       c29fh: // global
           I64[Sp - 8] = block_c29fm_info;
           _s1YhF::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1YhF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u29fA; else goto c29fs;
       u29fA: // global
           call _c29fm(R1) args: 0, res: 0, upd: 0;
       c29fs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29fh_info" {
     block_c29fh_info:
         const _c29fh;
         const 130;
         const 30;
 },
 _c29fm() //  [R1]
         { []
         }
     {offset
       c29fm: // global
           R5 = P64[Sp + 8];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = I64[Sp + 24];
           Sp = Sp + 32;
           call $wlvl11_r1Xw3_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29fm_info" {
     block_c29fm_info:
         const _c29fm;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.229169586 UTC

[section ""data" . GHC.Arr.$fIx(,)_$s$fEq(,)_$c/=_closure" {
     GHC.Arr.$fIx(,)_$s$fEq(,)_$c/=_closure:
         const GHC.Arr.$fIx(,)_$s$fEq(,)_$c/=_info;
 },
 GHC.Arr.$fIx(,)_$s$fEq(,)_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c29g3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c29gh; else goto c29gi;
       c29gh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$s$fEq(,)_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c29gi: // global
           I64[Sp - 16] = block_c29g0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u29gS; else goto c29g1;
       u29gS: // global
           call _c29g0(R1) args: 0, res: 0, upd: 0;
       c29g1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$s$fEq(,)_$c/=_info" {
     GHC.Arr.$fIx(,)_$s$fEq(,)_$c/=_info:
         const GHC.Arr.$fIx(,)_$s$fEq(,)_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c29g0() //  [R1]
         { []
         }
     {offset
       c29g0: // global
           I64[Sp - 8] = block_c29g6_info;
           _s1YhL::P64 = P64[R1 + 7];
           _s1YhM::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s1YhM::P64;
           P64[Sp + 8] = _s1YhL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u29gR; else goto c29g7;
       u29gR: // global
           call _c29g6(R1) args: 0, res: 0, upd: 0;
       c29g7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29g0_info" {
     block_c29g0_info:
         const _c29g0;
         const 1;
         const 30;
 },
 _c29g6() //  [R1]
         { []
         }
     {offset
       c29g6: // global
           I64[Sp - 8] = block_c29gb_info;
           _s1YhO::P64 = P64[R1 + 7];
           _s1YhP::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s1YhP::P64;
           P64[Sp + 16] = _s1YhO::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u29gT; else goto c29gc;
       u29gT: // global
           call _c29gb(R1) args: 0, res: 0, upd: 0;
       c29gc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29g6_info" {
     block_c29g6_info:
         const _c29g6;
         const 2;
         const 30;
 },
 _c29gb() //  [R1]
         { []
         }
     {offset
       c29gb: // global
           I64[Sp] = block_c29gg_info;
           _s1YhR::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s1YhR::I64;
           if (R1 & 7 != 0) goto u29gU; else goto c29gm;
       u29gU: // global
           call _c29gg(R1) args: 0, res: 0, upd: 0;
       c29gm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29gb_info" {
     block_c29gb_info:
         const _c29gb;
         const 3;
         const 30;
 },
 _c29gg() //  [R1]
         { []
         }
     {offset
       c29gg: // global
           if (I64[Sp + 24] == I64[R1 + 7]) goto c29gD; else goto u29gP;
       c29gD: // global
           I64[Sp] = block_c29gx_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u29gV; else goto c29gy;
       u29gV: // global
           call _c29gx(R1) args: 0, res: 0, upd: 0;
       c29gy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u29gP: // global
           Sp = Sp + 32;
           call _c29gN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c29gg_info" {
     block_c29gg_info:
         const _c29gg;
         const 259;
         const 30;
 },
 _c29gx() //  [R1]
         { []
         }
     {offset
       c29gx: // global
           I64[Sp + 16] = block_c29gC_info;
           _s1YhW::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 24] = _s1YhW::I64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u29gX; else goto c29gF;
       u29gX: // global
           call _c29gC(R1) args: 0, res: 0, upd: 0;
       c29gF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29gx_info" {
     block_c29gx_info:
         const _c29gx;
         const 387;
         const 30;
 },
 _c29gC() //  [R1]
         { []
         }
     {offset
       c29gC: // global
           if (I64[Sp + 8] == I64[R1 + 7]) goto c29gO; else goto u29gQ;
       c29gO: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u29gQ: // global
           Sp = Sp + 16;
           call _c29gN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c29gC_info" {
     block_c29gC_info:
         const _c29gC;
         const 65;
         const 30;
 },
 _c29gN() //  []
         { []
         }
     {offset
       c29gN: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.243280362 UTC

[section ""data" . GHC.Arr.$fIx(,)_$s$fEq(,)_closure" {
     GHC.Arr.$fIx(,)_$s$fEq(,)_closure:
         const GHC.Classes.C:Eq_con_info;
         const lvl41_r1Xw4_closure+2;
         const GHC.Arr.$fIx(,)_$s$fEq(,)_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.24605052 UTC

[section ""data" . $wlvl12_r1Xw5_closure" {
     $wlvl12_r1Xw5_closure:
         const $wlvl12_r1Xw5_info;
 },
 $wlvl12_r1Xw5_slow() //  [R1]
         { []
         }
     {offset
       c29hA: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call $wlvl12_r1Xw5_entry(R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlvl12_r1Xw5_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c29hJ: // global
           if (%MO_S_Ge_W64(R2, R4)) goto c29hH; else goto c29hI;
       c29hH: // global
           if (R2 == R4) goto c29hR; else goto c29hQ;
       c29hR: // global
           _s1Yi1::P64 = R3;
           R3 = R5;
           R2 = _s1Yi1::P64;
           call GHC.Classes.compareInt_entry(R3, R2) args: 8, res: 0, upd: 8;
       c29hQ: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c29hI: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl12_r1Xw5_info" {
     $wlvl12_r1Xw5_info:
         const $wlvl12_r1Xw5_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 324;
         const $wlvl12_r1Xw5_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.251660815 UTC

[section ""data" . lvl42_r1Xw6_closure" {
     lvl42_r1Xw6_closure:
         const lvl42_r1Xw6_info;
 },
 lvl42_r1Xw6_entry() //  [R2, R3]
         { []
         }
     {offset
       c29i7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c29il; else goto c29im;
       c29il: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl42_r1Xw6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c29im: // global
           I64[Sp - 16] = block_c29i4_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u29iw; else goto c29i5;
       u29iw: // global
           call _c29i4(R1) args: 0, res: 0, upd: 0;
       c29i5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl42_r1Xw6_info" {
     lvl42_r1Xw6_info:
         const lvl42_r1Xw6_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c29i4() //  [R1]
         { []
         }
     {offset
       c29i4: // global
           I64[Sp - 8] = block_c29ia_info;
           _s1Yia::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Yia::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u29iv; else goto c29ib;
       u29iv: // global
           call _c29ia(R1) args: 0, res: 0, upd: 0;
       c29ib: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29i4_info" {
     block_c29i4_info:
         const _c29i4;
         const 1;
         const 30;
 },
 _c29ia() //  [R1]
         { []
         }
     {offset
       c29ia: // global
           I64[Sp] = block_c29if_info;
           _s1Yic::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1Yic::I64;
           if (R1 & 7 != 0) goto u29ix; else goto c29ig;
       u29ix: // global
           call _c29if(R1) args: 0, res: 0, upd: 0;
       c29ig: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29ia_info" {
     block_c29ia_info:
         const _c29ia;
         const 2;
         const 30;
 },
 _c29if() //  [R1]
         { []
         }
     {offset
       c29if: // global
           I64[Sp - 8] = block_c29ik_info;
           _s1Yif::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Yif::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u29iy; else goto c29iq;
       u29iy: // global
           call _c29ik(R1) args: 0, res: 0, upd: 0;
       c29iq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29if_info" {
     block_c29if_info:
         const _c29if;
         const 130;
         const 30;
 },
 _c29ik() //  [R1]
         { []
         }
     {offset
       c29ik: // global
           R5 = P64[Sp + 8];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = I64[Sp + 24];
           Sp = Sp + 32;
           call $wlvl12_r1Xw5_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29ik_info" {
     block_c29ik_info:
         const _c29ik;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.261916387 UTC

[section ""data" . $wlvl13_r1Xw7_closure" {
     $wlvl13_r1Xw7_closure:
         const $wlvl13_r1Xw7_info;
 },
 $wlvl13_r1Xw7_slow() //  [R1]
         { []
         }
     {offset
       c29iV: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call $wlvl13_r1Xw7_entry(R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlvl13_r1Xw7_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c29j4: // global
           if (%MO_S_Ge_W64(R2, R4)) goto c29j2; else goto c29j3;
       c29j2: // global
           if (R2 == R4) goto c29jc; else goto c29jb;
       c29jc: // global
           _s1Yij::P64 = R3;
           R3 = R5;
           R2 = _s1Yij::P64;
           call GHC.Classes.ltInt_entry(R3, R2) args: 8, res: 0, upd: 8;
       c29jb: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c29j3: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl13_r1Xw7_info" {
     $wlvl13_r1Xw7_info:
         const $wlvl13_r1Xw7_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 324;
         const $wlvl13_r1Xw7_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.268102532 UTC

[section ""data" . lvl43_r1Xw8_closure" {
     lvl43_r1Xw8_closure:
         const lvl43_r1Xw8_info;
 },
 lvl43_r1Xw8_entry() //  [R2, R3]
         { []
         }
     {offset
       c29js: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c29jG; else goto c29jH;
       c29jG: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl43_r1Xw8_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c29jH: // global
           I64[Sp - 16] = block_c29jp_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u29jR; else goto c29jq;
       u29jR: // global
           call _c29jp(R1) args: 0, res: 0, upd: 0;
       c29jq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl43_r1Xw8_info" {
     lvl43_r1Xw8_info:
         const lvl43_r1Xw8_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c29jp() //  [R1]
         { []
         }
     {offset
       c29jp: // global
           I64[Sp - 8] = block_c29jv_info;
           _s1Yis::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Yis::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u29jQ; else goto c29jw;
       u29jQ: // global
           call _c29jv(R1) args: 0, res: 0, upd: 0;
       c29jw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29jp_info" {
     block_c29jp_info:
         const _c29jp;
         const 1;
         const 30;
 },
 _c29jv() //  [R1]
         { []
         }
     {offset
       c29jv: // global
           I64[Sp] = block_c29jA_info;
           _s1Yiu::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1Yiu::I64;
           if (R1 & 7 != 0) goto u29jS; else goto c29jB;
       u29jS: // global
           call _c29jA(R1) args: 0, res: 0, upd: 0;
       c29jB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29jv_info" {
     block_c29jv_info:
         const _c29jv;
         const 2;
         const 30;
 },
 _c29jA() //  [R1]
         { []
         }
     {offset
       c29jA: // global
           I64[Sp - 8] = block_c29jF_info;
           _s1Yix::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Yix::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u29jT; else goto c29jL;
       u29jT: // global
           call _c29jF(R1) args: 0, res: 0, upd: 0;
       c29jL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29jA_info" {
     block_c29jA_info:
         const _c29jA;
         const 130;
         const 30;
 },
 _c29jF() //  [R1]
         { []
         }
     {offset
       c29jF: // global
           R5 = P64[Sp + 8];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = I64[Sp + 24];
           Sp = Sp + 32;
           call $wlvl13_r1Xw7_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29jF_info" {
     block_c29jF_info:
         const _c29jF;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.27999329 UTC

[section ""data" . $wlvl14_r1Xw9_closure" {
     $wlvl14_r1Xw9_closure:
         const $wlvl14_r1Xw9_info;
 },
 $wlvl14_r1Xw9_slow() //  [R1]
         { []
         }
     {offset
       c29kg: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call $wlvl14_r1Xw9_entry(R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlvl14_r1Xw9_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c29kp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c29kq; else goto c29kr;
       c29kq: // global
           R1 = $wlvl14_r1Xw9_closure;
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c29kr: // global
           if (%MO_S_Ge_W64(R4, R2)) goto c29kn; else goto u29kU;
       c29kn: // global
           if (R4 == R2) goto c29kF; else goto u29kT;
       c29kF: // global
           I64[Sp - 16] = block_c29kz_info;
           R1 = R5;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u29kV; else goto c29kA;
       u29kV: // global
           call _c29kz(R1) args: 0, res: 0, upd: 0;
       c29kA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u29kT: // global
           call _c29kP() args: 0, res: 0, upd: 0;
       u29kU: // global
           call _c29ko() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wlvl14_r1Xw9_info" {
     $wlvl14_r1Xw9_info:
         const $wlvl14_r1Xw9_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 324;
         const $wlvl14_r1Xw9_slow;
 },
 _c29kz() //  [R1]
         { []
         }
     {offset
       c29kz: // global
           I64[Sp] = block_c29kE_info;
           _s1YiH::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1YiH::I64;
           if (R1 & 7 != 0) goto u29kW; else goto c29kH;
       u29kW: // global
           call _c29kE(R1) args: 0, res: 0, upd: 0;
       c29kH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29kz_info" {
     block_c29kz_info:
         const _c29kz;
         const 1;
         const 30;
 },
 _c29kE() //  [R1]
         { []
         }
     {offset
       c29kE: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u29kS; else goto u29kR;
       u29kS: // global
           Sp = Sp + 16;
           call _c29kP() args: 0, res: 0, upd: 0;
       u29kR: // global
           Sp = Sp + 16;
           call _c29ko() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c29kE_info" {
     block_c29kE_info:
         const _c29kE;
         const 65;
         const 30;
 },
 _c29kP() //  []
         { []
         }
     {offset
       c29kP: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c29ko() //  []
         { []
         }
     {offset
       c29ko: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.29101999 UTC

[section ""data" . lvl44_r1Xwa_closure" {
     lvl44_r1Xwa_closure:
         const lvl44_r1Xwa_info;
 },
 lvl44_r1Xwa_entry() //  [R2, R3]
         { []
         }
     {offset
       c29ls: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c29lG; else goto c29lH;
       c29lG: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl44_r1Xwa_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c29lH: // global
           I64[Sp - 16] = block_c29lp_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u29lR; else goto c29lq;
       u29lR: // global
           call _c29lp(R1) args: 0, res: 0, upd: 0;
       c29lq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl44_r1Xwa_info" {
     lvl44_r1Xwa_info:
         const lvl44_r1Xwa_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c29lp() //  [R1]
         { []
         }
     {offset
       c29lp: // global
           I64[Sp - 8] = block_c29lv_info;
           _s1YiP::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1YiP::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u29lQ; else goto c29lw;
       u29lQ: // global
           call _c29lv(R1) args: 0, res: 0, upd: 0;
       c29lw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29lp_info" {
     block_c29lp_info:
         const _c29lp;
         const 1;
         const 30;
 },
 _c29lv() //  [R1]
         { []
         }
     {offset
       c29lv: // global
           I64[Sp] = block_c29lA_info;
           _s1YiR::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1YiR::I64;
           if (R1 & 7 != 0) goto u29lS; else goto c29lB;
       u29lS: // global
           call _c29lA(R1) args: 0, res: 0, upd: 0;
       c29lB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29lv_info" {
     block_c29lv_info:
         const _c29lv;
         const 2;
         const 30;
 },
 _c29lA() //  [R1]
         { []
         }
     {offset
       c29lA: // global
           I64[Sp - 8] = block_c29lF_info;
           _s1YiU::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1YiU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u29lT; else goto c29lL;
       u29lT: // global
           call _c29lF(R1) args: 0, res: 0, upd: 0;
       c29lL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29lA_info" {
     block_c29lA_info:
         const _c29lA;
         const 130;
         const 30;
 },
 _c29lF() //  [R1]
         { []
         }
     {offset
       c29lF: // global
           R5 = P64[Sp + 8];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = I64[Sp + 24];
           Sp = Sp + 32;
           call $wlvl14_r1Xw9_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29lF_info" {
     block_c29lF_info:
         const _c29lF;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.301650939 UTC

[section ""data" . $wlvl15_r1Xwb_closure" {
     $wlvl15_r1Xwb_closure:
         const $wlvl15_r1Xwb_info;
 },
 $wlvl15_r1Xwb_slow() //  [R1]
         { []
         }
     {offset
       c29mg: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call $wlvl15_r1Xwb_entry(R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlvl15_r1Xwb_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c29mp: // global
           if (%MO_S_Ge_W64(R4, R2)) goto c29mn; else goto c29mo;
       c29mn: // global
           if (R4 == R2) goto c29mx; else goto c29mw;
       c29mx: // global
           R3 = R3;
           R2 = R5;
           call GHC.Classes.ltInt_entry(R3, R2) args: 8, res: 0, upd: 8;
       c29mw: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c29mo: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl15_r1Xwb_info" {
     $wlvl15_r1Xwb_info:
         const $wlvl15_r1Xwb_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 324;
         const $wlvl15_r1Xwb_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.307424706 UTC

[section ""data" . lvl45_r1Xwc_closure" {
     lvl45_r1Xwc_closure:
         const lvl45_r1Xwc_info;
 },
 lvl45_r1Xwc_entry() //  [R2, R3]
         { []
         }
     {offset
       c29mN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c29n1; else goto c29n2;
       c29n1: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl45_r1Xwc_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c29n2: // global
           I64[Sp - 16] = block_c29mK_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u29nc; else goto c29mL;
       u29nc: // global
           call _c29mK(R1) args: 0, res: 0, upd: 0;
       c29mL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl45_r1Xwc_info" {
     lvl45_r1Xwc_info:
         const lvl45_r1Xwc_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c29mK() //  [R1]
         { []
         }
     {offset
       c29mK: // global
           I64[Sp - 8] = block_c29mQ_info;
           _s1Yj7::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Yj7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u29nb; else goto c29mR;
       u29nb: // global
           call _c29mQ(R1) args: 0, res: 0, upd: 0;
       c29mR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29mK_info" {
     block_c29mK_info:
         const _c29mK;
         const 1;
         const 30;
 },
 _c29mQ() //  [R1]
         { []
         }
     {offset
       c29mQ: // global
           I64[Sp] = block_c29mV_info;
           _s1Yj9::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1Yj9::I64;
           if (R1 & 7 != 0) goto u29nd; else goto c29mW;
       u29nd: // global
           call _c29mV(R1) args: 0, res: 0, upd: 0;
       c29mW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29mQ_info" {
     block_c29mQ_info:
         const _c29mQ;
         const 2;
         const 30;
 },
 _c29mV() //  [R1]
         { []
         }
     {offset
       c29mV: // global
           I64[Sp - 8] = block_c29n0_info;
           _s1Yjc::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Yjc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u29ne; else goto c29n6;
       u29ne: // global
           call _c29n0(R1) args: 0, res: 0, upd: 0;
       c29n6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29mV_info" {
     block_c29mV_info:
         const _c29mV;
         const 130;
         const 30;
 },
 _c29n0() //  [R1]
         { []
         }
     {offset
       c29n0: // global
           R5 = P64[Sp + 8];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = I64[Sp + 24];
           Sp = Sp + 32;
           call $wlvl15_r1Xwb_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29n0_info" {
     block_c29n0_info:
         const _c29n0;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.318876896 UTC

[section ""data" . $wlvl16_r1Xwd_closure" {
     $wlvl16_r1Xwd_closure:
         const $wlvl16_r1Xwd_info;
 },
 $wlvl16_r1Xwd_slow() //  [R1]
         { []
         }
     {offset
       c29nB: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call $wlvl16_r1Xwd_entry(R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlvl16_r1Xwd_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c29nK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c29nL; else goto c29nM;
       c29nL: // global
           R1 = $wlvl16_r1Xwd_closure;
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c29nM: // global
           if (%MO_S_Ge_W64(R2, R4)) goto c29nI; else goto u29of;
       c29nI: // global
           if (R2 == R4) goto c29o0; else goto u29oe;
       c29o0: // global
           I64[Sp - 16] = block_c29nU_info;
           R1 = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u29og; else goto c29nV;
       u29og: // global
           call _c29nU(R1) args: 0, res: 0, upd: 0;
       c29nV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u29oe: // global
           call _c29oa() args: 0, res: 0, upd: 0;
       u29of: // global
           call _c29nJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wlvl16_r1Xwd_info" {
     $wlvl16_r1Xwd_info:
         const $wlvl16_r1Xwd_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 324;
         const $wlvl16_r1Xwd_slow;
 },
 _c29nU() //  [R1]
         { []
         }
     {offset
       c29nU: // global
           I64[Sp] = block_c29nZ_info;
           _s1Yjm::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s1Yjm::I64;
           if (R1 & 7 != 0) goto u29oh; else goto c29o2;
       u29oh: // global
           call _c29nZ(R1) args: 0, res: 0, upd: 0;
       c29o2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29nU_info" {
     block_c29nU_info:
         const _c29nU;
         const 1;
         const 30;
 },
 _c29nZ() //  [R1]
         { []
         }
     {offset
       c29nZ: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u29od; else goto u29oc;
       u29od: // global
           Sp = Sp + 16;
           call _c29oa() args: 0, res: 0, upd: 0;
       u29oc: // global
           Sp = Sp + 16;
           call _c29nJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c29nZ_info" {
     block_c29nZ_info:
         const _c29nZ;
         const 65;
         const 30;
 },
 _c29oa() //  []
         { []
         }
     {offset
       c29oa: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c29nJ() //  []
         { []
         }
     {offset
       c29nJ: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.329693356 UTC

[section ""data" . lvl46_r1Xwe_closure" {
     lvl46_r1Xwe_closure:
         const lvl46_r1Xwe_info;
 },
 lvl46_r1Xwe_entry() //  [R2, R3]
         { []
         }
     {offset
       c29oN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c29p1; else goto c29p2;
       c29p1: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl46_r1Xwe_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c29p2: // global
           I64[Sp - 16] = block_c29oK_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u29pc; else goto c29oL;
       u29pc: // global
           call _c29oK(R1) args: 0, res: 0, upd: 0;
       c29oL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl46_r1Xwe_info" {
     lvl46_r1Xwe_info:
         const lvl46_r1Xwe_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c29oK() //  [R1]
         { []
         }
     {offset
       c29oK: // global
           I64[Sp - 8] = block_c29oQ_info;
           _s1Yju::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Yju::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u29pb; else goto c29oR;
       u29pb: // global
           call _c29oQ(R1) args: 0, res: 0, upd: 0;
       c29oR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29oK_info" {
     block_c29oK_info:
         const _c29oK;
         const 1;
         const 30;
 },
 _c29oQ() //  [R1]
         { []
         }
     {offset
       c29oQ: // global
           I64[Sp] = block_c29oV_info;
           _s1Yjw::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s1Yjw::I64;
           if (R1 & 7 != 0) goto u29pd; else goto c29oW;
       u29pd: // global
           call _c29oV(R1) args: 0, res: 0, upd: 0;
       c29oW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29oQ_info" {
     block_c29oQ_info:
         const _c29oQ;
         const 2;
         const 30;
 },
 _c29oV() //  [R1]
         { []
         }
     {offset
       c29oV: // global
           I64[Sp - 8] = block_c29p0_info;
           _s1Yjz::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s1Yjz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u29pe; else goto c29p6;
       u29pe: // global
           call _c29p0(R1) args: 0, res: 0, upd: 0;
       c29p6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29oV_info" {
     block_c29oV_info:
         const _c29oV;
         const 130;
         const 30;
 },
 _c29p0() //  [R1]
         { []
         }
     {offset
       c29p0: // global
           R5 = P64[Sp + 8];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = I64[Sp + 24];
           Sp = Sp + 32;
           call $wlvl16_r1Xwd_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29p0_info" {
     block_c29p0_info:
         const _c29p0;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.341965945 UTC

[section ""data" . lvl47_r1Xwf_closure" {
     lvl47_r1Xwf_closure:
         const lvl47_r1Xwf_info;
 },
 lvl47_r1Xwf_entry() //  [R2, R3]
         { []
         }
     {offset
       c29pH: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c29pV; else goto c29pW;
       c29pV: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl47_r1Xwf_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c29pW: // global
           I64[Sp - 16] = block_c29pE_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u29qE; else goto c29pF;
       u29qE: // global
           call _c29pE(R1) args: 0, res: 0, upd: 0;
       c29pF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl47_r1Xwf_info" {
     lvl47_r1Xwf_info:
         const lvl47_r1Xwf_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c29pE() //  [R1]
         { []
         }
     {offset
       c29pE: // global
           I64[Sp - 16] = block_c29pK_info;
           _s1YjE::P64 = R1;
           _s1YjG::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1YjG::P64;
           P64[Sp] = _s1YjE::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u29qD; else goto c29pL;
       u29qD: // global
           call _c29pK(R1) args: 0, res: 0, upd: 0;
       c29pL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29pE_info" {
     block_c29pE_info:
         const _c29pE;
         const 1;
         const 30;
 },
 _c29pK() //  [R1]
         { []
         }
     {offset
       c29pK: // global
           I64[Sp] = block_c29pP_info;
           _s1YjI::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s1YjI::I64;
           if (R1 & 7 != 0) goto u29qF; else goto c29pQ;
       u29qF: // global
           call _c29pP(R1) args: 0, res: 0, upd: 0;
       c29pQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29pK_info" {
     block_c29pK_info:
         const _c29pK;
         const 3;
         const 30;
 },
 _c29pP() //  [R1]
         { []
         }
     {offset
       c29pP: // global
           I64[Sp - 16] = block_c29pU_info;
           _s1YjJ::P64 = R1;
           _s1YjL::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1YjL::P64;
           P64[Sp] = _s1YjJ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u29qG; else goto c29q0;
       u29qG: // global
           call _c29pU(R1) args: 0, res: 0, upd: 0;
       c29q0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29pP_info" {
     block_c29pP_info:
         const _c29pP;
         const 259;
         const 30;
 },
 _c29pU() //  [R1]
         { []
         }
     {offset
       c29pU: // global
           _s1YjI::I64 = I64[Sp + 40];
           _s1YjN::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1YjN::I64,
                            _s1YjI::I64)) goto c29qx; else goto u29qz;
       c29qx: // global
           if (_s1YjN::I64 == _s1YjI::I64) goto c29qk; else goto u29qA;
       c29qk: // global
           _s1YjL::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c29qe_info;
           R1 = _s1YjL::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u29qH; else goto c29qf;
       u29qH: // global
           call _c29qe(R1) args: 0, res: 0, upd: 0;
       c29qf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u29qA: // global
           Sp = Sp + 16;
           call _c29qu() args: 0, res: 0, upd: 0;
       u29qz: // global
           Sp = Sp + 32;
           call _c29qy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c29pU_info" {
     block_c29pU_info:
         const _c29pU;
         const 1029;
         const 30;
 },
 _c29qe() //  [R1]
         { []
         }
     {offset
       c29qe: // global
           I64[Sp] = block_c29qj_info;
           _s1YjR::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 32] = _s1YjR::I64;
           if (R1 & 7 != 0) goto u29qK; else goto c29qm;
       u29qK: // global
           call _c29qj(R1) args: 0, res: 0, upd: 0;
       c29qm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29qe_info" {
     block_c29qe_info:
         const _c29qe;
         const 516;
         const 30;
 },
 _c29qj() //  [R1]
         { []
         }
     {offset
       c29qj: // global
           if (%MO_S_Ge_W64(I64[Sp + 32],
                            I64[R1 + 7])) goto u29qC; else goto u29qB;
       u29qC: // global
           Sp = Sp + 8;
           call _c29qu() args: 0, res: 0, upd: 0;
       u29qB: // global
           Sp = Sp + 24;
           call _c29qy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c29qj_info" {
     block_c29qj_info:
         const _c29qj;
         const 644;
         const 30;
 },
 _c29qu() //  []
         { []
         }
     {offset
       c29qu: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c29qy() //  []
         { []
         }
     {offset
       c29qy: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.359472338 UTC

[section ""data" . lvl48_r1Xwg_closure" {
     lvl48_r1Xwg_closure:
         const lvl48_r1Xwg_info;
 },
 lvl48_r1Xwg_entry() //  [R2, R3]
         { []
         }
     {offset
       c29rw: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c29rK; else goto c29rL;
       c29rK: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl48_r1Xwg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c29rL: // global
           I64[Sp - 16] = block_c29rt_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u29st; else goto c29ru;
       u29st: // global
           call _c29rt(R1) args: 0, res: 0, upd: 0;
       c29ru: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl48_r1Xwg_info" {
     lvl48_r1Xwg_info:
         const lvl48_r1Xwg_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c29rt() //  [R1]
         { []
         }
     {offset
       c29rt: // global
           I64[Sp - 16] = block_c29rz_info;
           _s1YjX::P64 = R1;
           _s1YjZ::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1YjZ::P64;
           P64[Sp] = _s1YjX::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u29ss; else goto c29rA;
       u29ss: // global
           call _c29rz(R1) args: 0, res: 0, upd: 0;
       c29rA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29rt_info" {
     block_c29rt_info:
         const _c29rt;
         const 1;
         const 30;
 },
 _c29rz() //  [R1]
         { []
         }
     {offset
       c29rz: // global
           I64[Sp] = block_c29rE_info;
           _s1Yk1::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s1Yk1::I64;
           if (R1 & 7 != 0) goto u29su; else goto c29rF;
       u29su: // global
           call _c29rE(R1) args: 0, res: 0, upd: 0;
       c29rF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29rz_info" {
     block_c29rz_info:
         const _c29rz;
         const 3;
         const 30;
 },
 _c29rE() //  [R1]
         { []
         }
     {offset
       c29rE: // global
           I64[Sp - 16] = block_c29rJ_info;
           _s1Yk2::P64 = R1;
           _s1Yk4::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s1Yk4::P64;
           P64[Sp] = _s1Yk2::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u29sv; else goto c29rP;
       u29sv: // global
           call _c29rJ(R1) args: 0, res: 0, upd: 0;
       c29rP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29rE_info" {
     block_c29rE_info:
         const _c29rE;
         const 259;
         const 30;
 },
 _c29rJ() //  [R1]
         { []
         }
     {offset
       c29rJ: // global
           _s1Yk1::I64 = I64[Sp + 40];
           _s1Yk6::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1Yk6::I64,
                            _s1Yk1::I64)) goto c29sm; else goto u29so;
       c29sm: // global
           if (_s1Yk6::I64 == _s1Yk1::I64) goto c29s9; else goto u29sp;
       c29s9: // global
           _s1Yk4::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c29s3_info;
           R1 = _s1Yk4::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u29sw; else goto c29s4;
       u29sw: // global
           call _c29s3(R1) args: 0, res: 0, upd: 0;
       c29s4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u29sp: // global
           Sp = Sp + 32;
           call _c29sj() args: 0, res: 0, upd: 0;
       u29so: // global
           Sp = Sp + 16;
           call _c29sn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c29rJ_info" {
     block_c29rJ_info:
         const _c29rJ;
         const 1029;
         const 30;
 },
 _c29s3() //  [R1]
         { []
         }
     {offset
       c29s3: // global
           I64[Sp] = block_c29s8_info;
           _s1Yka::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 32] = _s1Yka::I64;
           if (R1 & 7 != 0) goto u29sz; else goto c29sb;
       u29sz: // global
           call _c29s8(R1) args: 0, res: 0, upd: 0;
       c29sb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29s3_info" {
     block_c29s3_info:
         const _c29s3;
         const 516;
         const 30;
 },
 _c29s8() //  [R1]
         { []
         }
     {offset
       c29s8: // global
           if (%MO_S_Ge_W64(I64[Sp + 32],
                            I64[R1 + 7])) goto u29sr; else goto u29sq;
       u29sr: // global
           Sp = Sp + 24;
           call _c29sj() args: 0, res: 0, upd: 0;
       u29sq: // global
           Sp = Sp + 8;
           call _c29sn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c29s8_info" {
     block_c29s8_info:
         const _c29s8;
         const 644;
         const 30;
 },
 _c29sj() //  []
         { []
         }
     {offset
       c29sj: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c29sn() //  []
         { []
         }
     {offset
       c29sn: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.374705114 UTC

[section ""data" . GHC.Arr.$fIx(,)_$s$fOrd(,)_closure" {
     GHC.Arr.$fIx(,)_$s$fOrd(,)_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Arr.$fIx(,)_$s$fEq(,)_closure+1;
         const lvl42_r1Xw6_closure+2;
         const lvl43_r1Xw8_closure+2;
         const lvl44_r1Xwa_closure+2;
         const lvl45_r1Xwc_closure+2;
         const lvl46_r1Xwe_closure+2;
         const lvl47_r1Xwf_closure+2;
         const lvl48_r1Xwg_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.376713179 UTC

[section ""data" . GHC.Arr.$fIx(,)_$s$fIx(,)_closure" {
     GHC.Arr.$fIx(,)_$s$fIx(,)_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Arr.$fIx(,)_$s$fOrd(,)_closure+1;
         const GHC.Arr.$fIx(,)_$s$crange_closure+1;
         const GHC.Arr.$fIx(,)_$s$cindex_closure+2;
         const GHC.Arr.$fIx(,)_$s$cunsafeIndex_closure+2;
         const GHC.Arr.$fIx(,)_$s$cinRange_closure+2;
         const GHC.Arr.$fIx(,)_$s$crangeSize_closure+1;
         const GHC.Arr.$fIx(,)_$s$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.38177 UTC

[section ""data" . GHC.Arr.$fIx(,)_closure" {
     GHC.Arr.$fIx(,)_closure:
         const GHC.Arr.$fIx(,)_info;
         const 0;
 },
 sat_s1Ykm_entry() //  [R1, R2]
         { []
         }
     {offset
       c29tp: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$fIx(,)_$cunsafeRangeSize_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Ykm_info" {
     sat_s1Ykm_info:
         const sat_s1Ykm_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s1Ykl_entry() //  [R1, R2]
         { []
         }
     {offset
       c29tx: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$fIx(,)_$crangeSize_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Ykl_info" {
     sat_s1Ykl_info:
         const sat_s1Ykl_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s1Ykk_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c29tF: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fIx(,)_$cinRange_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Ykk_info" {
     sat_s1Ykk_info:
         const sat_s1Ykk_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_s1Ykj_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c29tN: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fIx(,)_$cunsafeIndex_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Ykj_info" {
     sat_s1Ykj_info:
         const sat_s1Ykj_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_s1Yki_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c29tV: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fIx(,)_$cindex_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Yki_info" {
     sat_s1Yki_info:
         const sat_s1Yki_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S1YCH_srt+592;
 },
 sat_s1Ykh_entry() //  [R1, R2]
         { []
         }
     {offset
       c29u3: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$fIx(,)_$crange_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Ykh_info" {
     sat_s1Ykh_info:
         const sat_s1Ykh_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s1Ykg_entry() //  [R1]
         { []
         }
     {offset
       c29ua: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c29ub; else goto c29uc;
       c29ub: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29uc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$fIx(,)_$cp1Ix_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Ykg_info" {
     sat_s1Ykg_info:
         const sat_s1Ykg_entry;
         const 2;
         const 18;
 },
 GHC.Arr.$fIx(,)_entry() //  [R2, R3]
         { []
         }
     {offset
       c29ue: // global
           Hp = Hp + 240;
           if (Hp > HpLim) (likely: False) goto c29ui; else goto c29uh;
       c29ui: // global
           HpAlloc = 240;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c29uh: // global
           I64[Hp - 232] = sat_s1Ykm_info;
           P64[Hp - 224] = R2;
           P64[Hp - 216] = R3;
           I64[Hp - 208] = sat_s1Ykl_info;
           P64[Hp - 200] = R2;
           P64[Hp - 192] = R3;
           I64[Hp - 184] = sat_s1Ykk_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           I64[Hp - 160] = sat_s1Ykj_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           I64[Hp - 136] = sat_s1Yki_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_s1Ykh_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_s1Ykg_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = GHC.Arr.C:Ix_con_info;
           P64[Hp - 48] = Hp - 88;
           P64[Hp - 40] = Hp - 111;
           P64[Hp - 32] = Hp - 134;
           P64[Hp - 24] = Hp - 158;
           P64[Hp - 16] = Hp - 182;
           P64[Hp - 8] = Hp - 207;
           P64[Hp] = Hp - 231;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_info" {
     GHC.Arr.$fIx(,)_info:
         const GHC.Arr.$fIx(,)_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S1YCH_srt+592;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.401051756 UTC

[section ""data" . GHC.Arr.safeIndex_closure" {
     GHC.Arr.safeIndex_closure:
         const GHC.Arr.safeIndex_info;
         const 0;
 },
 GHC.Arr.safeIndex_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c29uY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c29v7; else goto c29v8;
       c29v7: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.safeIndex_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c29v8: // global
           I64[Sp - 32] = block_c29uV_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u29vs; else goto c29uW;
       u29vs: // global
           call _c29uV(R1) args: 0, res: 0, upd: 0;
       c29uW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.safeIndex_info" {
     GHC.Arr.safeIndex_info:
         const GHC.Arr.safeIndex_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S1YCH_srt+608;
 },
 _c29uV() //  [R1]
         { []
         }
     {offset
       c29uV: // global
           I64[Sp] = block_c29v1_info;
           _s1Ykr::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s1Ykr::P64;
           if (R1 & 7 != 0) goto u29vr; else goto c29v2;
       u29vr: // global
           call _c29v1(R1) args: 0, res: 0, upd: 0;
       c29v2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29uV_info" {
     block_c29uV_info:
         const _c29uV;
         const 3;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c29v1() //  [R1]
         { []
         }
     {offset
       c29v1: // global
           _s1Ykr::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c29v6_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s1Ykr::P64;
           P64[Sp + 8] = P64[Sp + 24];
           I64[Sp + 24] = I64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29v1_info" {
     block_c29v1_info:
         const _c29v1;
         const 3;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c29v6() //  [R1]
         { []
         }
     {offset
       c29v6: // global
           _s1Ykv::I64 = I64[Sp + 8];
           _s1Ykx::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1Ykx::I64)) goto c29vo; else goto c29vq;
       c29vq: // global
           if (%MO_S_Ge_W64(_s1Ykx::I64,
                            _s1Ykv::I64)) goto c29vo; else goto c29vp;
       c29vo: // global
           R3 = _s1Ykv::I64;
           R2 = _s1Ykx::I64;
           Sp = Sp + 16;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 0, upd: 8;
       c29vp: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29v6_info" {
     block_c29v6_info:
         const _c29v6;
         const 65;
         const 4294967326;
         const S1YCH_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.412269363 UTC

[section ""data" . $wreadSTArray_r1Xwh_closure" {
     $wreadSTArray_r1Xwh_closure:
         const $wreadSTArray_r1Xwh_info;
         const 0;
 },
 $wreadSTArray_r1Xwh_slow() //  [R1]
         { []
         }
     {offset
       c29vO: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call $wreadSTArray_r1Xwh_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2,
                                          R1) args: 16, res: 0, upd: 8;
     }
 },
 $wreadSTArray_r1Xwh_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c29vV: // global
           _s1YkE::P64 = R6;
           _s1YkD::I64 = R5;
           _s1YkC::P64 = R4;
           _s1YkB::P64 = R3;
           _s1YkA::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c29vW; else goto c29vX;
       c29vX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c29vZ; else goto c29vY;
       c29vZ: // global
           HpAlloc = 24;
           goto c29vW;
       c29vW: // global
           R1 = $wreadSTArray_r1Xwh_closure;
           P64[Sp - 40] = _s1YkA::P64;
           P64[Sp - 32] = _s1YkB::P64;
           P64[Sp - 24] = _s1YkC::P64;
           I64[Sp - 16] = _s1YkD::I64;
           P64[Sp - 8] = _s1YkE::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c29vY: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s1YkB::P64;
           P64[Hp] = _s1YkC::P64;
           I64[Sp - 16] = block_c29vT_info;
           R2 = _s1YkA::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 15;
           P64[Sp - 24] = P64[Sp];
           P64[Sp - 8] = _s1YkE::P64;
           I64[Sp] = _s1YkD::I64;
           Sp = Sp - 40;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wreadSTArray_r1Xwh_info" {
     $wreadSTArray_r1Xwh_info:
         const $wreadSTArray_r1Xwh_entry;
         const 0;
         const 12884901902;
         const 30064771072;
         const S1YCH_srt+616;
         const 518;
         const $wreadSTArray_r1Xwh_slow;
 },
 _c29vT() //  [R1]
         { []
         }
     {offset
       c29vT: // global
           _s1YkD::I64 = I64[Sp + 16];
           _s1YkJ::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1YkJ::I64)) goto c29wc; else goto c29wh;
       c29wh: // global
           if (%MO_S_Ge_W64(_s1YkJ::I64,
                            _s1YkD::I64)) goto c29wc; else goto c29wg;
       c29wc: // global
           R3 = _s1YkD::I64;
           R2 = _s1YkJ::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 0, upd: 8;
       c29wg: // global
           R1 = P64[P64[Sp + 8] + ((_s1YkJ::I64 << 3) + 24)];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29vT_info" {
     block_c29vT_info:
         const _c29vT;
         const 130;
         const 4294967326;
         const S1YCH_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.420174111 UTC

[section ""data" . readSTArray1_r1Xwi_closure" {
     readSTArray1_r1Xwi_closure:
         const readSTArray1_r1Xwi_info;
         const 0;
 },
 readSTArray1_r1Xwi_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c29wD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c29wE; else goto c29wF;
       c29wE: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = readSTArray1_r1Xwi_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c29wF: // global
           I64[Sp - 24] = block_c29wA_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u29wJ; else goto c29wB;
       u29wJ: // global
           call _c29wA(R1) args: 0, res: 0, upd: 0;
       c29wB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . readSTArray1_r1Xwi_info" {
     readSTArray1_r1Xwi_info:
         const readSTArray1_r1Xwi_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S1YCH_srt+624;
 },
 _c29wA() //  [R1]
         { []
         }
     {offset
       c29wA: // global
           R6 = P64[R1 + 23];
           R5 = I64[R1 + 31];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wreadSTArray_r1Xwh_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29wA_info" {
     block_c29wA_info:
         const _c29wA;
         const 2;
         const 4294967326;
         const S1YCH_srt+624;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.425879473 UTC

[section ""data" . GHC.Arr.readSTArray_closure" {
     GHC.Arr.readSTArray_closure:
         const GHC.Arr.readSTArray_info;
         const 0;
 },
 GHC.Arr.readSTArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c29wX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call readSTArray1_r1Xwi_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.readSTArray_info" {
     GHC.Arr.readSTArray_info:
         const GHC.Arr.readSTArray_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S1YCH_srt+632;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.431213518 UTC

[section ""data" . $wwriteSTArray_r1Xwj_closure" {
     $wwriteSTArray_r1Xwj_closure:
         const $wwriteSTArray_r1Xwj_info;
         const 0;
 },
 $wwriteSTArray_r1Xwj_slow() //  [R1]
         { []
         }
     {offset
       c29x5: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call $wwriteSTArray_r1Xwj_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2,
                                           R1) args: 24, res: 0, upd: 8;
     }
 },
 $wwriteSTArray_r1Xwj_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c29xc: // global
           _s1Yl1::P64 = R6;
           _s1Yl0::I64 = R5;
           _s1YkZ::P64 = R4;
           _s1YkY::P64 = R3;
           _s1YkX::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c29xd; else goto c29xe;
       c29xe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c29xg; else goto c29xf;
       c29xg: // global
           HpAlloc = 24;
           goto c29xd;
       c29xd: // global
           R1 = $wwriteSTArray_r1Xwj_closure;
           P64[Sp - 40] = _s1YkX::P64;
           P64[Sp - 32] = _s1YkY::P64;
           P64[Sp - 24] = _s1YkZ::P64;
           I64[Sp - 16] = _s1Yl0::I64;
           P64[Sp - 8] = _s1Yl1::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c29xf: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s1YkY::P64;
           P64[Hp] = _s1YkZ::P64;
           I64[Sp - 16] = block_c29xa_info;
           R2 = _s1YkX::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 15;
           P64[Sp - 24] = P64[Sp];
           P64[Sp - 8] = _s1Yl1::P64;
           I64[Sp] = _s1Yl0::I64;
           Sp = Sp - 40;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wwriteSTArray_r1Xwj_info" {
     $wwriteSTArray_r1Xwj_info:
         const $wwriteSTArray_r1Xwj_entry;
         const 0;
         const 38654705678;
         const 34359738368;
         const S1YCH_srt+616;
         const 519;
         const $wwriteSTArray_r1Xwj_slow;
 },
 _c29xa() //  [R1]
         { []
         }
     {offset
       c29xa: // global
           _s1Yl0::I64 = I64[Sp + 16];
           _s1Yl7::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1Yl7::I64)) goto c29xt; else goto c29xv;
       c29xv: // global
           if (%MO_S_Ge_W64(_s1Yl7::I64,
                            _s1Yl0::I64)) goto c29xt; else goto c29xu;
       c29xt: // global
           R3 = _s1Yl0::I64;
           R2 = _s1Yl7::I64;
           Sp = Sp + 32;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 0, upd: 8;
       c29xu: // global
           _s1Yl1::P64 = P64[Sp + 8];
           _s1Yl3::P64 = P64[Sp + 24];
           call MO_WriteBarrier();
           P64[(_s1Yl1::P64 + 24) + (_s1Yl7::I64 << 3)] = _s1Yl3::P64;
           I64[_s1Yl1::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1Yl1::P64 + 24) + ((I64[_s1Yl1::P64 + 8] << 3) + (_s1Yl7::I64 >> 7))] = 1 :: W8;
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29xa_info" {
     block_c29xa_info:
         const _c29xa;
         const 131;
         const 4294967326;
         const S1YCH_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.439029248 UTC

[section ""data" . writeSTArray1_r1Xwk_closure" {
     writeSTArray1_r1Xwk_closure:
         const writeSTArray1_r1Xwk_info;
         const 0;
 },
 writeSTArray1_r1Xwk_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c29xU: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c29xV; else goto c29xW;
       c29xV: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = writeSTArray1_r1Xwk_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c29xW: // global
           I64[Sp - 32] = block_c29xR_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u29y0; else goto c29xS;
       u29y0: // global
           call _c29xR(R1) args: 0, res: 0, upd: 0;
       c29xS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . writeSTArray1_r1Xwk_info" {
     writeSTArray1_r1Xwk_info:
         const writeSTArray1_r1Xwk_entry;
         const 0;
         const 12884901902;
         const 21474836504;
         const S1YCH_srt+640;
 },
 _c29xR() //  [R1]
         { []
         }
     {offset
       c29xR: // global
           R6 = P64[R1 + 23];
           R5 = I64[R1 + 31];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wwriteSTArray_r1Xwj_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29xR_info" {
     block_c29xR_info:
         const _c29xR;
         const 3;
         const 4294967326;
         const S1YCH_srt+640;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.444878289 UTC

[section ""data" . GHC.Arr.writeSTArray_closure" {
     GHC.Arr.writeSTArray_closure:
         const GHC.Arr.writeSTArray_info;
         const 0;
 },
 GHC.Arr.writeSTArray_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c29ye: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call writeSTArray1_r1Xwk_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.writeSTArray_info" {
     GHC.Arr.writeSTArray_info:
         const GHC.Arr.writeSTArray_entry;
         const 0;
         const 4294967310;
         const 21474836504;
         const S1YCH_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.450250395 UTC

[section ""data" . GHC.Arr.!_closure" {
     GHC.Arr.!_closure:
         const GHC.Arr.!_info;
         const 0;
 },
 GHC.Arr.!_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c29ys: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c29yx; else goto c29yy;
       c29yx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.!_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c29yy: // global
           I64[Sp - 24] = block_c29yp_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u29yS; else goto c29yq;
       u29yS: // global
           call _c29yp(R1) args: 0, res: 0, upd: 0;
       c29yq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.!_info" {
     GHC.Arr.!_info:
         const GHC.Arr.!_entry;
         const 0;
         const 141733920782;
         const 12884901911;
         const S1YCH_srt+616;
 },
 _c29yp() //  [R1]
         { []
         }
     {offset
       c29yp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c29yB; else goto c29yA;
       c29yB: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c29yA: // global
           _s1Ylr::P64 = P64[R1 + 7];
           _s1Yls::P64 = P64[R1 + 15];
           _s1Ylu::P64 = P64[R1 + 23];
           _s1Ylt::I64 = I64[R1 + 31];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s1Ylr::P64;
           P64[Hp] = _s1Yls::P64;
           I64[Sp] = block_c29yw_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp + 8] = _s1Ylu::P64;
           I64[Sp + 16] = _s1Ylt::I64;
           Sp = Sp - 24;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29yp_info" {
     block_c29yp_info:
         const _c29yp;
         const 2;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c29yw() //  [R1]
         { []
         }
     {offset
       c29yw: // global
           _s1Ylt::I64 = I64[Sp + 16];
           _s1Ylx::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1Ylx::I64)) goto c29yP; else goto c29yR;
       c29yR: // global
           if (%MO_S_Ge_W64(_s1Ylx::I64,
                            _s1Ylt::I64)) goto c29yP; else goto c29yQ;
       c29yP: // global
           R3 = _s1Ylt::I64;
           R2 = _s1Ylx::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 0, upd: 8;
       c29yQ: // global
           R1 = P64[P64[Sp + 8] + ((_s1Ylx::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29yw_info" {
     block_c29yw_info:
         const _c29yw;
         const 130;
         const 4294967326;
         const S1YCH_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.461750981 UTC

[section ""data" . GHC.Arr.assocs_closure" {
     GHC.Arr.assocs_closure:
         const GHC.Arr.assocs_info;
         const 0;
 },
 sat_s1YlZ_entry() //  [R1]
         { []
         }
     {offset
       c29zA: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c29zB; else goto c29zC;
       c29zB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29zC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c29zy_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YlZ_info" {
     sat_s1YlZ_info:
         const sat_s1YlZ_entry;
         const 4294967300;
         const 4294967311;
         const S1YCH_srt+616;
 },
 _c29zy() //  [R1]
         { []
         }
     {offset
       c29zy: // global
           _s1YlJ::I64 = I64[Sp + 8];
           _s1YlS::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1YlS::I64)) goto c29zP; else goto c29zR;
       c29zR: // global
           if (%MO_S_Ge_W64(_s1YlS::I64,
                            _s1YlJ::I64)) goto c29zP; else goto c29zQ;
       c29zP: // global
           R3 = _s1YlJ::I64;
           R2 = _s1YlS::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c29zQ: // global
           R1 = P64[P64[Sp + 16] + ((_s1YlS::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c29zy_info" {
     block_c29zy_info:
         const _c29zy;
         const 66;
         const 4294967326;
         const S1YCH_srt+616;
 },
 go_s1YlM_entry() //  [R1, R2]
         { []
         }
     {offset
       c29zW: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c29zX; else goto c29zY;
       c29zX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c29zY: // global
           I64[Sp - 48] = block_c29zn_info;
           _s1YlM::P64 = R1;
           _s1YlE::P64 = P64[R1 + 7];
           _s1YlK::P64 = P64[R1 + 15];
           _s1YlL::P64 = P64[R1 + 23];
           _s1YlJ::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s1YlE::P64;
           I64[Sp - 32] = _s1YlJ::I64;
           P64[Sp - 24] = _s1YlK::P64;
           P64[Sp - 16] = _s1YlL::P64;
           P64[Sp - 8] = _s1YlM::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u29A6; else goto c29zo;
       u29A6: // global
           call _c29zn(R1) args: 0, res: 0, upd: 0;
       c29zo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1YlM_info" {
     go_s1YlM_info:
         const go_s1YlM_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S1YCH_srt+616;
 },
 _c29zn() //  [R1]
         { []
         }
     {offset
       c29zn: // global
           if (R1 & 7 == 1) goto c29zT; else goto c29zU;
       c29zT: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c29zU: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c29A5; else goto c29A4;
       c29A5: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c29A4: // global
           _s1YlP::P64 = P64[R1 + 6];
           _s1YlQ::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s1YlQ::P64;
           I64[Hp - 96] = sat_s1YlZ_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s1YlP::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s1YlP::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29zn_info" {
     block_c29zn_info:
         const _c29zn;
         const 133;
         const 4294967326;
         const S1YCH_srt+616;
 },
 GHC.Arr.assocs_entry() //  [R2, R3]
         { []
         }
     {offset
       c29A7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c29A9; else goto c29Aa;
       c29A9: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.assocs_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c29Aa: // global
           I64[Sp - 16] = block_c29zc_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u29Ai; else goto c29zd;
       u29Ai: // global
           call _c29zc(R1) args: 0, res: 0, upd: 0;
       c29zd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.assocs_info" {
     GHC.Arr.assocs_info:
         const GHC.Arr.assocs_entry;
         const 0;
         const 279172874254;
         const 8589934607;
         const S1YCH_srt+616;
 },
 _c29zc() //  [R1]
         { []
         }
     {offset
       c29zc: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c29Ad; else goto c29Ac;
       c29Ad: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c29Ac: // global
           _s1YlH::P64 = P64[R1 + 7];
           _s1YlI::P64 = P64[R1 + 15];
           _s1YlK::P64 = P64[R1 + 23];
           _s1YlJ::I64 = I64[R1 + 31];
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = _s1YlH::P64;
           P64[Hp - 40] = _s1YlI::P64;
           I64[Hp - 32] = go_s1YlM_info;
           _s1YlE::P64 = P64[Sp + 8];
           P64[Hp - 24] = _s1YlE::P64;
           P64[Hp - 16] = _s1YlK::P64;
           _c29zh::P64 = Hp - 55;
           P64[Hp - 8] = _c29zh::P64;
           I64[Hp] = _s1YlJ::I64;
           I64[Sp] = block_c29A8_info;
           R2 = _s1YlE::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _c29zh::P64;
           P64[Sp + 8] = Hp - 31;
           Sp = Sp - 16;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29zc_info" {
     block_c29zc_info:
         const _c29zc;
         const 1;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c29A8() //  [R1]
         { []
         }
     {offset
       c29A8: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1YlM_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29A8_info" {
     block_c29A8_info:
         const _c29A8;
         const 1;
         const 4294967326;
         const S1YCH_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.485228301 UTC

[section ""data" . GHC.Arr.cmpArray_closure" {
     GHC.Arr.cmpArray_closure:
         const GHC.Arr.cmpArray_info;
         const 0;
 },
 sat_s1Ymv_entry() //  [R1]
         { []
         }
     {offset
       c29Bz: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c29BA; else goto c29BB;
       c29BA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29BB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c29Bx_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Ymv_info" {
     sat_s1Ymv_info:
         const sat_s1Ymv_entry;
         const 4294967300;
         const 4294967311;
         const S1YCH_srt+616;
 },
 _c29Bx() //  [R1]
         { []
         }
     {offset
       c29Bx: // global
           _s1Yma::I64 = I64[Sp + 8];
           _s1Ymo::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1Ymo::I64)) goto c29BO; else goto c29BQ;
       c29BQ: // global
           if (%MO_S_Ge_W64(_s1Ymo::I64,
                            _s1Yma::I64)) goto c29BO; else goto c29BP;
       c29BO: // global
           R3 = _s1Yma::I64;
           R2 = _s1Ymo::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c29BP: // global
           R1 = P64[P64[Sp + 16] + ((_s1Ymo::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c29Bx_info" {
     block_c29Bx_info:
         const _c29Bx;
         const 66;
         const 4294967326;
         const S1YCH_srt+616;
 },
 go_s1Ymi_entry() //  [R1, R2]
         { []
         }
     {offset
       c29BV: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c29BW; else goto c29BX;
       c29BW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c29BX: // global
           I64[Sp - 48] = block_c29Bm_info;
           _s1Ymi::P64 = R1;
           _s1Ym3::P64 = P64[R1 + 7];
           _s1Ymb::P64 = P64[R1 + 15];
           _s1Ymh::P64 = P64[R1 + 23];
           _s1Yma::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s1Ym3::P64;
           I64[Sp - 32] = _s1Yma::I64;
           P64[Sp - 24] = _s1Ymb::P64;
           P64[Sp - 16] = _s1Ymh::P64;
           P64[Sp - 8] = _s1Ymi::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u29C5; else goto c29Bn;
       u29C5: // global
           call _c29Bm(R1) args: 0, res: 0, upd: 0;
       c29Bn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1Ymi_info" {
     go_s1Ymi_info:
         const go_s1Ymi_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S1YCH_srt+616;
 },
 _c29Bm() //  [R1]
         { []
         }
     {offset
       c29Bm: // global
           if (R1 & 7 == 1) goto c29BS; else goto c29BT;
       c29BS: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c29BT: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c29C4; else goto c29C3;
       c29C4: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c29C3: // global
           _s1Yml::P64 = P64[R1 + 6];
           _s1Ymm::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s1Ymm::P64;
           I64[Hp - 96] = sat_s1Ymv_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s1Yml::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s1Yml::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29Bm_info" {
     block_c29Bm_info:
         const _c29Bm;
         const 133;
         const 4294967326;
         const S1YCH_srt+616;
 },
 sat_s1YmM_entry() //  [R1]
         { []
         }
     {offset
       c29Cp: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c29Cq; else goto c29Cr;
       c29Cq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29Cr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c29Cn_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YmM_info" {
     sat_s1YmM_info:
         const sat_s1YmM_entry;
         const 4294967300;
         const 4294967311;
         const S1YCH_srt+616;
 },
 _c29Cn() //  [R1]
         { []
         }
     {offset
       c29Cn: // global
           _s1Ymf::I64 = I64[Sp + 8];
           _s1YmF::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1YmF::I64)) goto c29CE; else goto c29CG;
       c29CG: // global
           if (%MO_S_Ge_W64(_s1YmF::I64,
                            _s1Ymf::I64)) goto c29CE; else goto c29CF;
       c29CE: // global
           R3 = _s1Ymf::I64;
           R2 = _s1YmF::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c29CF: // global
           R1 = P64[P64[Sp + 16] + ((_s1YmF::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c29Cn_info" {
     block_c29Cn_info:
         const _c29Cn;
         const 66;
         const 4294967326;
         const S1YCH_srt+616;
 },
 go1_s1Ymz_entry() //  [R1, R2]
         { []
         }
     {offset
       c29CL: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c29CM; else goto c29CN;
       c29CM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c29CN: // global
           I64[Sp - 48] = block_c29Cc_info;
           _s1Ymz::P64 = R1;
           _s1Ym3::P64 = P64[R1 + 7];
           _s1Ymg::P64 = P64[R1 + 15];
           _s1Ymy::P64 = P64[R1 + 23];
           _s1Ymf::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s1Ym3::P64;
           I64[Sp - 32] = _s1Ymf::I64;
           P64[Sp - 24] = _s1Ymg::P64;
           P64[Sp - 16] = _s1Ymy::P64;
           P64[Sp - 8] = _s1Ymz::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u29CV; else goto c29Cd;
       u29CV: // global
           call _c29Cc(R1) args: 0, res: 0, upd: 0;
       c29Cd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s1Ymz_info" {
     go1_s1Ymz_info:
         const go1_s1Ymz_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S1YCH_srt+616;
 },
 _c29Cc() //  [R1]
         { []
         }
     {offset
       c29Cc: // global
           if (R1 & 7 == 1) goto c29CI; else goto c29CJ;
       c29CI: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c29CJ: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c29CU; else goto c29CT;
       c29CU: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c29CT: // global
           _s1YmC::P64 = P64[R1 + 6];
           _s1YmD::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s1YmD::P64;
           I64[Hp - 96] = sat_s1YmM_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s1YmC::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s1YmC::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29Cc_info" {
     block_c29Cc_info:
         const _c29Cc;
         const 133;
         const 4294967326;
         const S1YCH_srt+616;
 },
 sat_s1YmP_entry() //  [R1]
         { []
         }
     {offset
       c29Dk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c29Dl; else goto c29Dm;
       c29Dl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29Dm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YmP_info" {
     sat_s1YmP_info:
         const sat_s1YmP_entry;
         const 1;
         const 16;
 },
 sat_s1YmQ_entry() //  [R1]
         { []
         }
     {offset
       c29Dn: // global
           _s1YmQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c29Do; else goto c29Dp;
       c29Dp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c29Dr; else goto c29Dq;
       c29Dr: // global
           HpAlloc = 24;
           goto c29Do;
       c29Do: // global
           R1 = _s1YmQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29Dq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1YmQ::P64;
           _s1Ym3::P64 = P64[_s1YmQ::P64 + 16];
           _s1Ym4::P64 = P64[_s1YmQ::P64 + 24];
           I64[Hp - 16] = sat_s1YmP_info;
           P64[Hp] = _s1Ym3::P64;
           R3 = _s1Ym4::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,)_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YmQ_info" {
     sat_s1YmQ_info:
         const sat_s1YmQ_entry;
         const 2;
         const 18;
 },
 GHC.Arr.cmpArray_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c29Ds: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c29Dt; else goto c29Du;
       c29Dt: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.cmpArray_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c29Du: // global
           I64[Sp - 32] = block_c29B6_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u29DG; else goto c29B7;
       u29DG: // global
           call _c29B6(R1) args: 0, res: 0, upd: 0;
       c29B7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.cmpArray_info" {
     GHC.Arr.cmpArray_info:
         const GHC.Arr.cmpArray_entry;
         const 0;
         const 554050781198;
         const 17179869208;
         const S1YCH_srt+616;
 },
 _c29B6() //  [R1]
         { []
         }
     {offset
       c29B6: // global
           I64[Sp - 24] = block_c29Bb_info;
           _s1Ym8::P64 = P64[R1 + 7];
           _s1Ym9::P64 = P64[R1 + 15];
           _s1Ymb::P64 = P64[R1 + 23];
           _s1Yma::I64 = I64[R1 + 31];
           R1 = P64[Sp + 24];
           I64[Sp - 16] = _s1Yma::I64;
           P64[Sp - 8] = _s1Ymb::P64;
           P64[Sp] = _s1Ym9::P64;
           P64[Sp + 24] = _s1Ym8::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u29DF; else goto c29Bc;
       u29DF: // global
           call _c29Bb(R1) args: 0, res: 0, upd: 0;
       c29Bc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29B6_info" {
     block_c29B6_info:
         const _c29B6;
         const 3;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c29Bb() //  [R1]
         { []
         }
     {offset
       c29Bb: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c29Dy; else goto c29Dx;
       c29Dy: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c29Dx: // global
           _s1Ymd::P64 = P64[R1 + 7];
           _s1Yme::P64 = P64[R1 + 15];
           _s1Ymg::P64 = P64[R1 + 23];
           _s1Ymf::I64 = I64[R1 + 31];
           I64[Hp - 120] = (,)_con_info;
           P64[Hp - 112] = P64[Sp + 48];
           P64[Hp - 104] = P64[Sp + 24];
           I64[Hp - 96] = go_s1Ymi_info;
           _s1Ym3::P64 = P64[Sp + 32];
           P64[Hp - 88] = _s1Ym3::P64;
           P64[Hp - 80] = P64[Sp + 16];
           _c29Bg::P64 = Hp - 119;
           P64[Hp - 72] = _c29Bg::P64;
           I64[Hp - 64] = I64[Sp + 8];
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = _s1Ymd::P64;
           P64[Hp - 40] = _s1Yme::P64;
           I64[Hp - 32] = go1_s1Ymz_info;
           P64[Hp - 24] = _s1Ym3::P64;
           P64[Hp - 16] = _s1Ymg::P64;
           _c29C6::P64 = Hp - 55;
           P64[Hp - 8] = _c29C6::P64;
           I64[Hp] = _s1Ymf::I64;
           I64[Sp + 8] = block_c29CW_info;
           R2 = _s1Ym3::P64;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = _c29C6::P64;
           P64[Sp + 16] = Hp - 31;
           P64[Sp + 24] = Hp - 95;
           P64[Sp + 48] = _c29Bg::P64;
           Sp = Sp - 8;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29Bb_info" {
     block_c29Bb_info:
         const _c29Bb;
         const 70;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c29CW() //  [R1]
         { []
         }
     {offset
       c29CW: // global
           _c29C7::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c29D0_info;
           R2 = R1;
           R1 = _c29C7::P64;
           Sp = Sp + 8;
           call go1_s1Ymz_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29CW_info" {
     block_c29CW_info:
         const _c29CW;
         const 5;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c29D0() //  [R1]
         { []
         }
     {offset
       c29D0: // global
           I64[Sp] = block_c29D4_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp + 32] = R1;
           Sp = Sp - 16;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29D0_info" {
     block_c29D0_info:
         const _c29D0;
         const 4;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c29D4() //  [R1]
         { []
         }
     {offset
       c29D4: // global
           _c29Bh::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c29D8_info;
           R2 = R1;
           R1 = _c29Bh::P64;
           Sp = Sp + 8;
           call go_s1Ymi_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29D4_info" {
     block_c29D4_info:
         const _c29D4;
         const 4;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c29D8() //  [R1]
         { []
         }
     {offset
       c29D8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c29DE; else goto c29DD;
       c29DE: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c29DD: // global
           I64[Hp - 24] = sat_s1YmQ_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R4 = P64[Sp + 24];
           R3 = R1;
           R2 = Hp - 24;
           Sp = Sp + 32;
           call GHC.Classes.$fOrd[]_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29D8_info" {
     block_c29D8_info:
         const _c29D8;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.527362381 UTC

[section ""data" . GHC.Arr.$w$c<_closure" {
     GHC.Arr.$w$c<_closure:
         const GHC.Arr.$w$c<_info;
         const 0;
 },
 GHC.Arr.$w$c<_slow() //  [R1]
         { []
         }
     {offset
       c29Fq: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$w$c<_entry(R6,
                                    R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s1Ynj_entry() //  [R1]
         { []
         }
     {offset
       c29FN: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c29FO; else goto c29FP;
       c29FO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29FP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c29FL_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Ynj_info" {
     sat_s1Ynj_info:
         const sat_s1Ynj_entry;
         const 4294967300;
         const 4294967311;
         const S1YCH_srt+616;
 },
 _c29FL() //  [R1]
         { []
         }
     {offset
       c29FL: // global
           _s1YmZ::I64 = I64[Sp + 8];
           _s1Ync::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1Ync::I64)) goto c29G2; else goto c29G4;
       c29G4: // global
           if (%MO_S_Ge_W64(_s1Ync::I64,
                            _s1YmZ::I64)) goto c29G2; else goto c29G3;
       c29G2: // global
           R3 = _s1YmZ::I64;
           R2 = _s1Ync::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c29G3: // global
           R1 = P64[P64[Sp + 16] + ((_s1Ync::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c29FL_info" {
     block_c29FL_info:
         const _c29FL;
         const 66;
         const 4294967326;
         const S1YCH_srt+616;
 },
 go_s1Yn6_entry() //  [R1, R2]
         { []
         }
     {offset
       c29G9: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c29Ga; else goto c29Gb;
       c29Ga: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c29Gb: // global
           I64[Sp - 48] = block_c29FA_info;
           _s1Yn6::P64 = R1;
           _s1YmV::P64 = P64[R1 + 7];
           _s1Yn0::P64 = P64[R1 + 15];
           _s1Yn5::P64 = P64[R1 + 23];
           _s1YmZ::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s1YmV::P64;
           I64[Sp - 32] = _s1YmZ::I64;
           P64[Sp - 24] = _s1Yn0::P64;
           P64[Sp - 16] = _s1Yn5::P64;
           P64[Sp - 8] = _s1Yn6::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u29Gj; else goto c29FB;
       u29Gj: // global
           call _c29FA(R1) args: 0, res: 0, upd: 0;
       c29FB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1Yn6_info" {
     go_s1Yn6_info:
         const go_s1Yn6_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S1YCH_srt+616;
 },
 _c29FA() //  [R1]
         { []
         }
     {offset
       c29FA: // global
           if (R1 & 7 == 1) goto c29G6; else goto c29G7;
       c29G6: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c29G7: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c29Gi; else goto c29Gh;
       c29Gi: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c29Gh: // global
           _s1Yn9::P64 = P64[R1 + 6];
           _s1Yna::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s1Yna::P64;
           I64[Hp - 96] = sat_s1Ynj_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s1Yn9::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s1Yn9::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29FA_info" {
     block_c29FA_info:
         const _c29FA;
         const 133;
         const 4294967326;
         const S1YCH_srt+616;
 },
 sat_s1YnA_entry() //  [R1]
         { []
         }
     {offset
       c29GD: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c29GE; else goto c29GF;
       c29GE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29GF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c29GB_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YnA_info" {
     sat_s1YnA_info:
         const sat_s1YnA_entry;
         const 4294967300;
         const 4294967311;
         const S1YCH_srt+616;
 },
 _c29GB() //  [R1]
         { []
         }
     {offset
       c29GB: // global
           _s1Yn3::I64 = I64[Sp + 8];
           _s1Ynt::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1Ynt::I64)) goto c29GS; else goto c29GU;
       c29GU: // global
           if (%MO_S_Ge_W64(_s1Ynt::I64,
                            _s1Yn3::I64)) goto c29GS; else goto c29GT;
       c29GS: // global
           R3 = _s1Yn3::I64;
           R2 = _s1Ynt::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c29GT: // global
           R1 = P64[P64[Sp + 16] + ((_s1Ynt::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c29GB_info" {
     block_c29GB_info:
         const _c29GB;
         const 66;
         const 4294967326;
         const S1YCH_srt+616;
 },
 go1_s1Ynn_entry() //  [R1, R2]
         { []
         }
     {offset
       c29GZ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c29H0; else goto c29H1;
       c29H0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c29H1: // global
           I64[Sp - 48] = block_c29Gq_info;
           _s1Ynn::P64 = R1;
           _s1YmV::P64 = P64[R1 + 7];
           _s1Yn4::P64 = P64[R1 + 15];
           _s1Ynm::P64 = P64[R1 + 23];
           _s1Yn3::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s1YmV::P64;
           I64[Sp - 32] = _s1Yn3::I64;
           P64[Sp - 24] = _s1Yn4::P64;
           P64[Sp - 16] = _s1Ynm::P64;
           P64[Sp - 8] = _s1Ynn::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u29H9; else goto c29Gr;
       u29H9: // global
           call _c29Gq(R1) args: 0, res: 0, upd: 0;
       c29Gr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s1Ynn_info" {
     go1_s1Ynn_info:
         const go1_s1Ynn_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S1YCH_srt+616;
 },
 _c29Gq() //  [R1]
         { []
         }
     {offset
       c29Gq: // global
           if (R1 & 7 == 1) goto c29GW; else goto c29GX;
       c29GW: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c29GX: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c29H8; else goto c29H7;
       c29H8: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c29H7: // global
           _s1Ynq::P64 = P64[R1 + 6];
           _s1Ynr::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s1Ynr::P64;
           I64[Hp - 96] = sat_s1YnA_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s1Ynq::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s1Ynq::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29Gq_info" {
     block_c29Gq_info:
         const _c29Gq;
         const 133;
         const 4294967326;
         const S1YCH_srt+616;
 },
 sat_s1YnD_entry() //  [R1]
         { []
         }
     {offset
       c29Hy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c29Hz; else goto c29HA;
       c29Hz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29HA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YnD_info" {
     sat_s1YnD_info:
         const sat_s1YnD_entry;
         const 1;
         const 16;
 },
 sat_s1YnE_entry() //  [R1]
         { []
         }
     {offset
       c29HB: // global
           _s1YnE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c29HC; else goto c29HD;
       c29HD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c29HF; else goto c29HE;
       c29HF: // global
           HpAlloc = 24;
           goto c29HC;
       c29HC: // global
           R1 = _s1YnE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29HE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1YnE::P64;
           _s1YmV::P64 = P64[_s1YnE::P64 + 16];
           _s1YmW::P64 = P64[_s1YnE::P64 + 24];
           I64[Hp - 16] = sat_s1YnD_info;
           P64[Hp] = _s1YmV::P64;
           R3 = _s1YmW::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,)_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YnE_info" {
     sat_s1YnE_info:
         const sat_s1YnE_entry;
         const 2;
         const 18;
 },
 GHC.Arr.$w$c<_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c29HG: // global
           _s1YmZ::I64 = R6;
           _s1YmY::P64 = R5;
           _s1YmX::P64 = R4;
           _s1YmW::P64 = R3;
           _s1YmV::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c29HH; else goto c29HI;
       c29HI: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c29HK; else goto c29HJ;
       c29HK: // global
           HpAlloc = 128;
           goto c29HH;
       c29HH: // global
           R1 = GHC.Arr.$w$c<_closure;
           P64[Sp - 40] = _s1YmV::P64;
           P64[Sp - 32] = _s1YmW::P64;
           P64[Sp - 24] = _s1YmX::P64;
           P64[Sp - 16] = _s1YmY::P64;
           I64[Sp - 8] = _s1YmZ::I64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c29HJ: // global
           I64[Hp - 120] = (,)_con_info;
           P64[Hp - 112] = _s1YmX::P64;
           P64[Hp - 104] = _s1YmY::P64;
           I64[Hp - 96] = go_s1Yn6_info;
           P64[Hp - 88] = _s1YmV::P64;
           P64[Hp - 80] = P64[Sp];
           _c29Fu::P64 = Hp - 119;
           P64[Hp - 72] = _c29Fu::P64;
           I64[Hp - 64] = _s1YmZ::I64;
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = go1_s1Ynn_info;
           P64[Hp - 24] = _s1YmV::P64;
           P64[Hp - 16] = P64[Sp + 32];
           _c29Gk::P64 = Hp - 55;
           P64[Hp - 8] = _c29Gk::P64;
           I64[Hp] = I64[Sp + 24];
           I64[Sp - 8] = block_c29Ha_info;
           R2 = _s1YmV::P64;
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = _c29Gk::P64;
           P64[Sp] = _s1YmW::P64;
           P64[Sp + 8] = _s1YmV::P64;
           P64[Sp + 16] = Hp - 31;
           P64[Sp + 24] = Hp - 95;
           P64[Sp + 32] = _c29Fu::P64;
           Sp = Sp - 24;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$c<_info" {
     GHC.Arr.$w$c<_info:
         const GHC.Arr.$w$c<_entry;
         const 0;
         const 1103806595086;
         const 42949672960;
         const S1YCH_srt+616;
         const 17418;
         const GHC.Arr.$w$c<_slow;
 },
 _c29Ha() //  [R1]
         { []
         }
     {offset
       c29Ha: // global
           I64[Sp] = block_c29He_info;
           R2 = R1;
           R1 = P64[Sp + 24];
           call go1_s1Ynn_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29Ha_info" {
     block_c29Ha_info:
         const _c29Ha;
         const 5;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c29He() //  [R1]
         { []
         }
     {offset
       c29He: // global
           I64[Sp] = block_c29Hi_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 40];
           P64[Sp + 40] = R1;
           Sp = Sp - 16;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29He_info" {
     block_c29He_info:
         const _c29He;
         const 261;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c29Hi() //  [R1]
         { []
         }
     {offset
       c29Hi: // global
           I64[Sp] = block_c29Hm_info;
           R2 = R1;
           R1 = P64[Sp + 32];
           call go_s1Yn6_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29Hi_info" {
     block_c29Hi_info:
         const _c29Hi;
         const 261;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c29Hm() //  [R1]
         { []
         }
     {offset
       c29Hm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c29HR; else goto c29HQ;
       c29HR: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c29HQ: // global
           I64[Hp - 24] = sat_s1YnE_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _s1YnI::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_c29HO_info;
           R4 = _s1YnI::P64;
           R3 = R1;
           R2 = Hp - 24;
           Sp = Sp + 40;
           call GHC.Classes.$fOrd[]_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29Hm_info" {
     block_c29Hm_info:
         const _c29Hm;
         const 773;
         const 30;
 },
 _c29HO() //  [R1]
         { []
         }
     {offset
       c29HO: // global
           if (R1 & 7 == 1) goto c29I1; else goto c29HX;
       c29I1: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c29HX: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29HO_info" {
     block_c29HO_info:
         const _c29HO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.56073899 UTC

[section ""data" . GHC.Arr.$fOrdArray_$c<_closure" {
     GHC.Arr.$fOrdArray_$c<_closure:
         const GHC.Arr.$fOrdArray_$c<_info;
         const 0;
 },
 GHC.Arr.$fOrdArray_$c<_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c29JU: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c29JY; else goto c29JZ;
       c29JY: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fOrdArray_$c<_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c29JZ: // global
           I64[Sp - 32] = block_c29JR_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u29K7; else goto c29JS;
       u29K7: // global
           call _c29JR(R1) args: 0, res: 0, upd: 0;
       c29JS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fOrdArray_$c<_info" {
     GHC.Arr.$fOrdArray_$c<_info:
         const GHC.Arr.$fOrdArray_$c<_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S1YCH_srt+680;
 },
 _c29JR() //  [R1]
         { []
         }
     {offset
       c29JR: // global
           I64[Sp - 24] = block_c29JX_info;
           _s1YnP::P64 = P64[R1 + 7];
           _s1YnQ::P64 = P64[R1 + 15];
           _s1YnS::P64 = P64[R1 + 23];
           _s1YnR::I64 = I64[R1 + 31];
           R1 = P64[Sp + 24];
           I64[Sp - 16] = _s1YnR::I64;
           P64[Sp - 8] = _s1YnS::P64;
           P64[Sp] = _s1YnQ::P64;
           P64[Sp + 24] = _s1YnP::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u29K6; else goto c29K1;
       u29K6: // global
           call _c29JX(R1) args: 0, res: 0, upd: 0;
       c29K1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29JR_info" {
     block_c29JR_info:
         const _c29JR;
         const 3;
         const 4294967326;
         const S1YCH_srt+680;
 },
 _c29JX() //  [R1]
         { []
         }
     {offset
       c29JX: // global
           R6 = I64[Sp + 8];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           P64[Sp + 24] = P64[R1 + 7];
           P64[Sp + 32] = P64[R1 + 15];
           I64[Sp + 40] = I64[R1 + 31];
           P64[Sp + 48] = P64[R1 + 23];
           Sp = Sp + 16;
           call GHC.Arr.$w$c<_entry(R6,
                                    R5,
                                    R4,
                                    R3,
                                    R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29JX_info" {
     block_c29JX_info:
         const _c29JX;
         const 70;
         const 4294967326;
         const S1YCH_srt+680;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.578016248 UTC

[section ""data" . GHC.Arr.$w$c>=_closure" {
     GHC.Arr.$w$c>=_closure:
         const GHC.Arr.$w$c>=_info;
         const 0;
 },
 GHC.Arr.$w$c>=_slow() //  [R1]
         { []
         }
     {offset
       c29Kq: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$w$c>=_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2,
                                     R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s1Yom_entry() //  [R1]
         { []
         }
     {offset
       c29KN: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c29KO; else goto c29KP;
       c29KO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29KP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c29KL_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Yom_info" {
     sat_s1Yom_info:
         const sat_s1Yom_entry;
         const 4294967300;
         const 4294967311;
         const S1YCH_srt+616;
 },
 _c29KL() //  [R1]
         { []
         }
     {offset
       c29KL: // global
           _s1Yo2::I64 = I64[Sp + 8];
           _s1Yof::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1Yof::I64)) goto c29L2; else goto c29L4;
       c29L4: // global
           if (%MO_S_Ge_W64(_s1Yof::I64,
                            _s1Yo2::I64)) goto c29L2; else goto c29L3;
       c29L2: // global
           R3 = _s1Yo2::I64;
           R2 = _s1Yof::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c29L3: // global
           R1 = P64[P64[Sp + 16] + ((_s1Yof::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c29KL_info" {
     block_c29KL_info:
         const _c29KL;
         const 66;
         const 4294967326;
         const S1YCH_srt+616;
 },
 go_s1Yo9_entry() //  [R1, R2]
         { []
         }
     {offset
       c29L9: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c29La; else goto c29Lb;
       c29La: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c29Lb: // global
           I64[Sp - 48] = block_c29KA_info;
           _s1Yo9::P64 = R1;
           _s1YnY::P64 = P64[R1 + 7];
           _s1Yo3::P64 = P64[R1 + 15];
           _s1Yo8::P64 = P64[R1 + 23];
           _s1Yo2::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s1YnY::P64;
           I64[Sp - 32] = _s1Yo2::I64;
           P64[Sp - 24] = _s1Yo3::P64;
           P64[Sp - 16] = _s1Yo8::P64;
           P64[Sp - 8] = _s1Yo9::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u29Lj; else goto c29KB;
       u29Lj: // global
           call _c29KA(R1) args: 0, res: 0, upd: 0;
       c29KB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1Yo9_info" {
     go_s1Yo9_info:
         const go_s1Yo9_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S1YCH_srt+616;
 },
 _c29KA() //  [R1]
         { []
         }
     {offset
       c29KA: // global
           if (R1 & 7 == 1) goto c29L6; else goto c29L7;
       c29L6: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c29L7: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c29Li; else goto c29Lh;
       c29Li: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c29Lh: // global
           _s1Yoc::P64 = P64[R1 + 6];
           _s1Yod::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s1Yod::P64;
           I64[Hp - 96] = sat_s1Yom_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s1Yoc::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s1Yoc::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29KA_info" {
     block_c29KA_info:
         const _c29KA;
         const 133;
         const 4294967326;
         const S1YCH_srt+616;
 },
 sat_s1YoD_entry() //  [R1]
         { []
         }
     {offset
       c29LD: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c29LE; else goto c29LF;
       c29LE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29LF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c29LB_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YoD_info" {
     sat_s1YoD_info:
         const sat_s1YoD_entry;
         const 4294967300;
         const 4294967311;
         const S1YCH_srt+616;
 },
 _c29LB() //  [R1]
         { []
         }
     {offset
       c29LB: // global
           _s1Yo6::I64 = I64[Sp + 8];
           _s1Yow::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1Yow::I64)) goto c29LS; else goto c29LU;
       c29LU: // global
           if (%MO_S_Ge_W64(_s1Yow::I64,
                            _s1Yo6::I64)) goto c29LS; else goto c29LT;
       c29LS: // global
           R3 = _s1Yo6::I64;
           R2 = _s1Yow::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c29LT: // global
           R1 = P64[P64[Sp + 16] + ((_s1Yow::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c29LB_info" {
     block_c29LB_info:
         const _c29LB;
         const 66;
         const 4294967326;
         const S1YCH_srt+616;
 },
 go1_s1Yoq_entry() //  [R1, R2]
         { []
         }
     {offset
       c29LZ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c29M0; else goto c29M1;
       c29M0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c29M1: // global
           I64[Sp - 48] = block_c29Lq_info;
           _s1Yoq::P64 = R1;
           _s1YnY::P64 = P64[R1 + 7];
           _s1Yo7::P64 = P64[R1 + 15];
           _s1Yop::P64 = P64[R1 + 23];
           _s1Yo6::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s1YnY::P64;
           I64[Sp - 32] = _s1Yo6::I64;
           P64[Sp - 24] = _s1Yo7::P64;
           P64[Sp - 16] = _s1Yop::P64;
           P64[Sp - 8] = _s1Yoq::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u29M9; else goto c29Lr;
       u29M9: // global
           call _c29Lq(R1) args: 0, res: 0, upd: 0;
       c29Lr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s1Yoq_info" {
     go1_s1Yoq_info:
         const go1_s1Yoq_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S1YCH_srt+616;
 },
 _c29Lq() //  [R1]
         { []
         }
     {offset
       c29Lq: // global
           if (R1 & 7 == 1) goto c29LW; else goto c29LX;
       c29LW: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c29LX: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c29M8; else goto c29M7;
       c29M8: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c29M7: // global
           _s1Yot::P64 = P64[R1 + 6];
           _s1You::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s1You::P64;
           I64[Hp - 96] = sat_s1YoD_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s1Yot::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s1Yot::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29Lq_info" {
     block_c29Lq_info:
         const _c29Lq;
         const 133;
         const 4294967326;
         const S1YCH_srt+616;
 },
 sat_s1YoG_entry() //  [R1]
         { []
         }
     {offset
       c29My: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c29Mz; else goto c29MA;
       c29Mz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29MA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YoG_info" {
     sat_s1YoG_info:
         const sat_s1YoG_entry;
         const 1;
         const 16;
 },
 sat_s1YoH_entry() //  [R1]
         { []
         }
     {offset
       c29MB: // global
           _s1YoH::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c29MC; else goto c29MD;
       c29MD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c29MF; else goto c29ME;
       c29MF: // global
           HpAlloc = 24;
           goto c29MC;
       c29MC: // global
           R1 = _s1YoH::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29ME: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1YoH::P64;
           _s1YnY::P64 = P64[_s1YoH::P64 + 16];
           _s1YnZ::P64 = P64[_s1YoH::P64 + 24];
           I64[Hp - 16] = sat_s1YoG_info;
           P64[Hp] = _s1YnY::P64;
           R3 = _s1YnZ::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,)_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YoH_info" {
     sat_s1YoH_info:
         const sat_s1YoH_entry;
         const 2;
         const 18;
 },
 GHC.Arr.$w$c>=_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c29MG: // global
           _s1Yo2::I64 = R6;
           _s1Yo1::P64 = R5;
           _s1Yo0::P64 = R4;
           _s1YnZ::P64 = R3;
           _s1YnY::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c29MH; else goto c29MI;
       c29MI: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c29MK; else goto c29MJ;
       c29MK: // global
           HpAlloc = 128;
           goto c29MH;
       c29MH: // global
           R1 = GHC.Arr.$w$c>=_closure;
           P64[Sp - 40] = _s1YnY::P64;
           P64[Sp - 32] = _s1YnZ::P64;
           P64[Sp - 24] = _s1Yo0::P64;
           P64[Sp - 16] = _s1Yo1::P64;
           I64[Sp - 8] = _s1Yo2::I64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c29MJ: // global
           I64[Hp - 120] = (,)_con_info;
           P64[Hp - 112] = _s1Yo0::P64;
           P64[Hp - 104] = _s1Yo1::P64;
           I64[Hp - 96] = go_s1Yo9_info;
           P64[Hp - 88] = _s1YnY::P64;
           P64[Hp - 80] = P64[Sp];
           _c29Ku::P64 = Hp - 119;
           P64[Hp - 72] = _c29Ku::P64;
           I64[Hp - 64] = _s1Yo2::I64;
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = go1_s1Yoq_info;
           P64[Hp - 24] = _s1YnY::P64;
           P64[Hp - 16] = P64[Sp + 32];
           _c29Lk::P64 = Hp - 55;
           P64[Hp - 8] = _c29Lk::P64;
           I64[Hp] = I64[Sp + 24];
           I64[Sp - 8] = block_c29Ma_info;
           R2 = _s1YnY::P64;
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = _c29Lk::P64;
           P64[Sp] = _s1YnZ::P64;
           P64[Sp + 8] = _s1YnY::P64;
           P64[Sp + 16] = Hp - 31;
           P64[Sp + 24] = Hp - 95;
           P64[Sp + 32] = _c29Ku::P64;
           Sp = Sp - 24;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$c>=_info" {
     GHC.Arr.$w$c>=_info:
         const GHC.Arr.$w$c>=_entry;
         const 0;
         const 4402341478414;
         const 42949672960;
         const S1YCH_srt+616;
         const 17418;
         const GHC.Arr.$w$c>=_slow;
 },
 _c29Ma() //  [R1]
         { []
         }
     {offset
       c29Ma: // global
           I64[Sp] = block_c29Me_info;
           R2 = R1;
           R1 = P64[Sp + 24];
           call go1_s1Yoq_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29Ma_info" {
     block_c29Ma_info:
         const _c29Ma;
         const 5;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c29Me() //  [R1]
         { []
         }
     {offset
       c29Me: // global
           I64[Sp] = block_c29Mi_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 40];
           P64[Sp + 40] = R1;
           Sp = Sp - 16;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29Me_info" {
     block_c29Me_info:
         const _c29Me;
         const 261;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c29Mi() //  [R1]
         { []
         }
     {offset
       c29Mi: // global
           I64[Sp] = block_c29Mm_info;
           R2 = R1;
           R1 = P64[Sp + 32];
           call go_s1Yo9_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29Mi_info" {
     block_c29Mi_info:
         const _c29Mi;
         const 261;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c29Mm() //  [R1]
         { []
         }
     {offset
       c29Mm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c29MR; else goto c29MQ;
       c29MR: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c29MQ: // global
           I64[Hp - 24] = sat_s1YoH_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _s1YoL::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_c29MO_info;
           R4 = _s1YoL::P64;
           R3 = R1;
           R2 = Hp - 24;
           Sp = Sp + 40;
           call GHC.Classes.$fOrd[]_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29Mm_info" {
     block_c29Mm_info:
         const _c29Mm;
         const 773;
         const 30;
 },
 _c29MO() //  [R1]
         { []
         }
     {offset
       c29MO: // global
           if (R1 & 7 == 1) goto c29N1; else goto c29MX;
       c29N1: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c29MX: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29MO_info" {
     block_c29MO_info:
         const _c29MO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.611907555 UTC

[section ""data" . GHC.Arr.$fOrdArray_$c>=_closure" {
     GHC.Arr.$fOrdArray_$c>=_closure:
         const GHC.Arr.$fOrdArray_$c>=_info;
         const 0;
 },
 GHC.Arr.$fOrdArray_$c>=_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c29OU: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c29OY; else goto c29OZ;
       c29OY: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fOrdArray_$c>=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c29OZ: // global
           I64[Sp - 32] = block_c29OR_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u29P7; else goto c29OS;
       u29P7: // global
           call _c29OR(R1) args: 0, res: 0, upd: 0;
       c29OS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fOrdArray_$c>=_info" {
     GHC.Arr.$fOrdArray_$c>=_info:
         const GHC.Arr.$fOrdArray_$c>=_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S1YCH_srt+696;
 },
 _c29OR() //  [R1]
         { []
         }
     {offset
       c29OR: // global
           I64[Sp - 24] = block_c29OX_info;
           _s1YoS::P64 = P64[R1 + 7];
           _s1YoT::P64 = P64[R1 + 15];
           _s1YoV::P64 = P64[R1 + 23];
           _s1YoU::I64 = I64[R1 + 31];
           R1 = P64[Sp + 24];
           I64[Sp - 16] = _s1YoU::I64;
           P64[Sp - 8] = _s1YoV::P64;
           P64[Sp] = _s1YoT::P64;
           P64[Sp + 24] = _s1YoS::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u29P6; else goto c29P1;
       u29P6: // global
           call _c29OX(R1) args: 0, res: 0, upd: 0;
       c29P1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29OR_info" {
     block_c29OR_info:
         const _c29OR;
         const 3;
         const 4294967326;
         const S1YCH_srt+696;
 },
 _c29OX() //  [R1]
         { []
         }
     {offset
       c29OX: // global
           R6 = I64[Sp + 8];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           P64[Sp + 24] = P64[R1 + 7];
           P64[Sp + 32] = P64[R1 + 15];
           I64[Sp + 40] = I64[R1 + 31];
           P64[Sp + 48] = P64[R1 + 23];
           Sp = Sp + 16;
           call GHC.Arr.$w$c>=_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29OX_info" {
     block_c29OX_info:
         const _c29OX;
         const 70;
         const 4294967326;
         const S1YCH_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.628269904 UTC

[section ""data" . GHC.Arr.$w$c>_closure" {
     GHC.Arr.$w$c>_closure:
         const GHC.Arr.$w$c>_info;
         const 0;
 },
 GHC.Arr.$w$c>_slow() //  [R1]
         { []
         }
     {offset
       c29Pq: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$w$c>_entry(R6,
                                    R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s1Ypp_entry() //  [R1]
         { []
         }
     {offset
       c29PN: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c29PO; else goto c29PP;
       c29PO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29PP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c29PL_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Ypp_info" {
     sat_s1Ypp_info:
         const sat_s1Ypp_entry;
         const 4294967300;
         const 4294967311;
         const S1YCH_srt+616;
 },
 _c29PL() //  [R1]
         { []
         }
     {offset
       c29PL: // global
           _s1Yp5::I64 = I64[Sp + 8];
           _s1Ypi::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1Ypi::I64)) goto c29Q2; else goto c29Q4;
       c29Q4: // global
           if (%MO_S_Ge_W64(_s1Ypi::I64,
                            _s1Yp5::I64)) goto c29Q2; else goto c29Q3;
       c29Q2: // global
           R3 = _s1Yp5::I64;
           R2 = _s1Ypi::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c29Q3: // global
           R1 = P64[P64[Sp + 16] + ((_s1Ypi::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c29PL_info" {
     block_c29PL_info:
         const _c29PL;
         const 66;
         const 4294967326;
         const S1YCH_srt+616;
 },
 go_s1Ypc_entry() //  [R1, R2]
         { []
         }
     {offset
       c29Q9: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c29Qa; else goto c29Qb;
       c29Qa: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c29Qb: // global
           I64[Sp - 48] = block_c29PA_info;
           _s1Ypc::P64 = R1;
           _s1Yp1::P64 = P64[R1 + 7];
           _s1Yp6::P64 = P64[R1 + 15];
           _s1Ypb::P64 = P64[R1 + 23];
           _s1Yp5::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s1Yp1::P64;
           I64[Sp - 32] = _s1Yp5::I64;
           P64[Sp - 24] = _s1Yp6::P64;
           P64[Sp - 16] = _s1Ypb::P64;
           P64[Sp - 8] = _s1Ypc::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u29Qj; else goto c29PB;
       u29Qj: // global
           call _c29PA(R1) args: 0, res: 0, upd: 0;
       c29PB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1Ypc_info" {
     go_s1Ypc_info:
         const go_s1Ypc_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S1YCH_srt+616;
 },
 _c29PA() //  [R1]
         { []
         }
     {offset
       c29PA: // global
           if (R1 & 7 == 1) goto c29Q6; else goto c29Q7;
       c29Q6: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c29Q7: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c29Qi; else goto c29Qh;
       c29Qi: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c29Qh: // global
           _s1Ypf::P64 = P64[R1 + 6];
           _s1Ypg::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s1Ypg::P64;
           I64[Hp - 96] = sat_s1Ypp_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s1Ypf::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s1Ypf::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29PA_info" {
     block_c29PA_info:
         const _c29PA;
         const 133;
         const 4294967326;
         const S1YCH_srt+616;
 },
 sat_s1YpG_entry() //  [R1]
         { []
         }
     {offset
       c29QD: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c29QE; else goto c29QF;
       c29QE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29QF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c29QB_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YpG_info" {
     sat_s1YpG_info:
         const sat_s1YpG_entry;
         const 4294967300;
         const 4294967311;
         const S1YCH_srt+616;
 },
 _c29QB() //  [R1]
         { []
         }
     {offset
       c29QB: // global
           _s1Yp9::I64 = I64[Sp + 8];
           _s1Ypz::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1Ypz::I64)) goto c29QS; else goto c29QU;
       c29QU: // global
           if (%MO_S_Ge_W64(_s1Ypz::I64,
                            _s1Yp9::I64)) goto c29QS; else goto c29QT;
       c29QS: // global
           R3 = _s1Yp9::I64;
           R2 = _s1Ypz::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c29QT: // global
           R1 = P64[P64[Sp + 16] + ((_s1Ypz::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c29QB_info" {
     block_c29QB_info:
         const _c29QB;
         const 66;
         const 4294967326;
         const S1YCH_srt+616;
 },
 go1_s1Ypt_entry() //  [R1, R2]
         { []
         }
     {offset
       c29QZ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c29R0; else goto c29R1;
       c29R0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c29R1: // global
           I64[Sp - 48] = block_c29Qq_info;
           _s1Ypt::P64 = R1;
           _s1Yp1::P64 = P64[R1 + 7];
           _s1Ypa::P64 = P64[R1 + 15];
           _s1Yps::P64 = P64[R1 + 23];
           _s1Yp9::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s1Yp1::P64;
           I64[Sp - 32] = _s1Yp9::I64;
           P64[Sp - 24] = _s1Ypa::P64;
           P64[Sp - 16] = _s1Yps::P64;
           P64[Sp - 8] = _s1Ypt::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u29R9; else goto c29Qr;
       u29R9: // global
           call _c29Qq(R1) args: 0, res: 0, upd: 0;
       c29Qr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s1Ypt_info" {
     go1_s1Ypt_info:
         const go1_s1Ypt_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S1YCH_srt+616;
 },
 _c29Qq() //  [R1]
         { []
         }
     {offset
       c29Qq: // global
           if (R1 & 7 == 1) goto c29QW; else goto c29QX;
       c29QW: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c29QX: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c29R8; else goto c29R7;
       c29R8: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c29R7: // global
           _s1Ypw::P64 = P64[R1 + 6];
           _s1Ypx::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s1Ypx::P64;
           I64[Hp - 96] = sat_s1YpG_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s1Ypw::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s1Ypw::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29Qq_info" {
     block_c29Qq_info:
         const _c29Qq;
         const 133;
         const 4294967326;
         const S1YCH_srt+616;
 },
 sat_s1YpJ_entry() //  [R1]
         { []
         }
     {offset
       c29Ry: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c29Rz; else goto c29RA;
       c29Rz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29RA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YpJ_info" {
     sat_s1YpJ_info:
         const sat_s1YpJ_entry;
         const 1;
         const 16;
 },
 sat_s1YpK_entry() //  [R1]
         { []
         }
     {offset
       c29RB: // global
           _s1YpK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c29RC; else goto c29RD;
       c29RD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c29RF; else goto c29RE;
       c29RF: // global
           HpAlloc = 24;
           goto c29RC;
       c29RC: // global
           R1 = _s1YpK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29RE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1YpK::P64;
           _s1Yp1::P64 = P64[_s1YpK::P64 + 16];
           _s1Yp2::P64 = P64[_s1YpK::P64 + 24];
           I64[Hp - 16] = sat_s1YpJ_info;
           P64[Hp] = _s1Yp1::P64;
           R3 = _s1Yp2::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,)_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YpK_info" {
     sat_s1YpK_info:
         const sat_s1YpK_entry;
         const 2;
         const 18;
 },
 GHC.Arr.$w$c>_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c29RG: // global
           _s1Yp5::I64 = R6;
           _s1Yp4::P64 = R5;
           _s1Yp3::P64 = R4;
           _s1Yp2::P64 = R3;
           _s1Yp1::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c29RH; else goto c29RI;
       c29RI: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c29RK; else goto c29RJ;
       c29RK: // global
           HpAlloc = 128;
           goto c29RH;
       c29RH: // global
           R1 = GHC.Arr.$w$c>_closure;
           P64[Sp - 40] = _s1Yp1::P64;
           P64[Sp - 32] = _s1Yp2::P64;
           P64[Sp - 24] = _s1Yp3::P64;
           P64[Sp - 16] = _s1Yp4::P64;
           I64[Sp - 8] = _s1Yp5::I64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c29RJ: // global
           I64[Hp - 120] = (,)_con_info;
           P64[Hp - 112] = _s1Yp3::P64;
           P64[Hp - 104] = _s1Yp4::P64;
           I64[Hp - 96] = go_s1Ypc_info;
           P64[Hp - 88] = _s1Yp1::P64;
           P64[Hp - 80] = P64[Sp];
           _c29Pu::P64 = Hp - 119;
           P64[Hp - 72] = _c29Pu::P64;
           I64[Hp - 64] = _s1Yp5::I64;
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = go1_s1Ypt_info;
           P64[Hp - 24] = _s1Yp1::P64;
           P64[Hp - 16] = P64[Sp + 32];
           _c29Qk::P64 = Hp - 55;
           P64[Hp - 8] = _c29Qk::P64;
           I64[Hp] = I64[Sp + 24];
           I64[Sp - 8] = block_c29Ra_info;
           R2 = _s1Yp1::P64;
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = _c29Qk::P64;
           P64[Sp] = _s1Yp2::P64;
           P64[Sp + 8] = _s1Yp1::P64;
           P64[Sp + 16] = Hp - 31;
           P64[Sp + 24] = Hp - 95;
           P64[Sp + 32] = _c29Pu::P64;
           Sp = Sp - 24;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$c>_info" {
     GHC.Arr.$w$c>_info:
         const GHC.Arr.$w$c>_entry;
         const 0;
         const 17596481011726;
         const 42949672960;
         const S1YCH_srt+616;
         const 17418;
         const GHC.Arr.$w$c>_slow;
 },
 _c29Ra() //  [R1]
         { []
         }
     {offset
       c29Ra: // global
           I64[Sp] = block_c29Re_info;
           R2 = R1;
           R1 = P64[Sp + 24];
           call go1_s1Ypt_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29Ra_info" {
     block_c29Ra_info:
         const _c29Ra;
         const 5;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c29Re() //  [R1]
         { []
         }
     {offset
       c29Re: // global
           I64[Sp] = block_c29Ri_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 40];
           P64[Sp + 40] = R1;
           Sp = Sp - 16;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29Re_info" {
     block_c29Re_info:
         const _c29Re;
         const 261;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c29Ri() //  [R1]
         { []
         }
     {offset
       c29Ri: // global
           I64[Sp] = block_c29Rm_info;
           R2 = R1;
           R1 = P64[Sp + 32];
           call go_s1Ypc_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29Ri_info" {
     block_c29Ri_info:
         const _c29Ri;
         const 261;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c29Rm() //  [R1]
         { []
         }
     {offset
       c29Rm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c29RR; else goto c29RQ;
       c29RR: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c29RQ: // global
           I64[Hp - 24] = sat_s1YpK_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _s1YpO::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_c29RO_info;
           R4 = _s1YpO::P64;
           R3 = R1;
           R2 = Hp - 24;
           Sp = Sp + 40;
           call GHC.Classes.$fOrd[]_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29Rm_info" {
     block_c29Rm_info:
         const _c29Rm;
         const 773;
         const 30;
 },
 _c29RO() //  [R1]
         { []
         }
     {offset
       c29RO: // global
           if (R1 & 7 == 3) goto c29S1; else goto c29RX;
       c29S1: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c29RX: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29RO_info" {
     block_c29RO_info:
         const _c29RO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.662004075 UTC

[section ""data" . GHC.Arr.$fOrdArray_$c>_closure" {
     GHC.Arr.$fOrdArray_$c>_closure:
         const GHC.Arr.$fOrdArray_$c>_info;
         const 0;
 },
 GHC.Arr.$fOrdArray_$c>_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c29TU: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c29TY; else goto c29TZ;
       c29TY: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fOrdArray_$c>_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c29TZ: // global
           I64[Sp - 32] = block_c29TR_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u29U7; else goto c29TS;
       u29U7: // global
           call _c29TR(R1) args: 0, res: 0, upd: 0;
       c29TS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fOrdArray_$c>_info" {
     GHC.Arr.$fOrdArray_$c>_info:
         const GHC.Arr.$fOrdArray_$c>_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S1YCH_srt+712;
 },
 _c29TR() //  [R1]
         { []
         }
     {offset
       c29TR: // global
           I64[Sp - 24] = block_c29TX_info;
           _s1YpV::P64 = P64[R1 + 7];
           _s1YpW::P64 = P64[R1 + 15];
           _s1YpY::P64 = P64[R1 + 23];
           _s1YpX::I64 = I64[R1 + 31];
           R1 = P64[Sp + 24];
           I64[Sp - 16] = _s1YpX::I64;
           P64[Sp - 8] = _s1YpY::P64;
           P64[Sp] = _s1YpW::P64;
           P64[Sp + 24] = _s1YpV::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u29U6; else goto c29U1;
       u29U6: // global
           call _c29TX(R1) args: 0, res: 0, upd: 0;
       c29U1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29TR_info" {
     block_c29TR_info:
         const _c29TR;
         const 3;
         const 4294967326;
         const S1YCH_srt+712;
 },
 _c29TX() //  [R1]
         { []
         }
     {offset
       c29TX: // global
           R6 = I64[Sp + 8];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           P64[Sp + 24] = P64[R1 + 7];
           P64[Sp + 32] = P64[R1 + 15];
           I64[Sp + 40] = I64[R1 + 31];
           P64[Sp + 48] = P64[R1 + 23];
           Sp = Sp + 16;
           call GHC.Arr.$w$c>_entry(R6,
                                    R5,
                                    R4,
                                    R3,
                                    R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29TX_info" {
     block_c29TX_info:
         const _c29TX;
         const 70;
         const 4294967326;
         const S1YCH_srt+712;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.677962183 UTC

[section ""data" . GHC.Arr.$w$c<=_closure" {
     GHC.Arr.$w$c<=_closure:
         const GHC.Arr.$w$c<=_info;
         const 0;
 },
 GHC.Arr.$w$c<=_slow() //  [R1]
         { []
         }
     {offset
       c29Uq: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$w$c<=_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2,
                                     R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s1Yqs_entry() //  [R1]
         { []
         }
     {offset
       c29UN: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c29UO; else goto c29UP;
       c29UO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29UP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c29UL_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Yqs_info" {
     sat_s1Yqs_info:
         const sat_s1Yqs_entry;
         const 4294967300;
         const 4294967311;
         const S1YCH_srt+616;
 },
 _c29UL() //  [R1]
         { []
         }
     {offset
       c29UL: // global
           _s1Yq8::I64 = I64[Sp + 8];
           _s1Yql::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1Yql::I64)) goto c29V2; else goto c29V4;
       c29V4: // global
           if (%MO_S_Ge_W64(_s1Yql::I64,
                            _s1Yq8::I64)) goto c29V2; else goto c29V3;
       c29V2: // global
           R3 = _s1Yq8::I64;
           R2 = _s1Yql::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c29V3: // global
           R1 = P64[P64[Sp + 16] + ((_s1Yql::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c29UL_info" {
     block_c29UL_info:
         const _c29UL;
         const 66;
         const 4294967326;
         const S1YCH_srt+616;
 },
 go_s1Yqf_entry() //  [R1, R2]
         { []
         }
     {offset
       c29V9: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c29Va; else goto c29Vb;
       c29Va: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c29Vb: // global
           I64[Sp - 48] = block_c29UA_info;
           _s1Yqf::P64 = R1;
           _s1Yq4::P64 = P64[R1 + 7];
           _s1Yq9::P64 = P64[R1 + 15];
           _s1Yqe::P64 = P64[R1 + 23];
           _s1Yq8::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s1Yq4::P64;
           I64[Sp - 32] = _s1Yq8::I64;
           P64[Sp - 24] = _s1Yq9::P64;
           P64[Sp - 16] = _s1Yqe::P64;
           P64[Sp - 8] = _s1Yqf::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u29Vj; else goto c29UB;
       u29Vj: // global
           call _c29UA(R1) args: 0, res: 0, upd: 0;
       c29UB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1Yqf_info" {
     go_s1Yqf_info:
         const go_s1Yqf_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S1YCH_srt+616;
 },
 _c29UA() //  [R1]
         { []
         }
     {offset
       c29UA: // global
           if (R1 & 7 == 1) goto c29V6; else goto c29V7;
       c29V6: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c29V7: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c29Vi; else goto c29Vh;
       c29Vi: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c29Vh: // global
           _s1Yqi::P64 = P64[R1 + 6];
           _s1Yqj::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s1Yqj::P64;
           I64[Hp - 96] = sat_s1Yqs_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s1Yqi::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s1Yqi::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29UA_info" {
     block_c29UA_info:
         const _c29UA;
         const 133;
         const 4294967326;
         const S1YCH_srt+616;
 },
 sat_s1YqJ_entry() //  [R1]
         { []
         }
     {offset
       c29VD: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c29VE; else goto c29VF;
       c29VE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29VF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c29VB_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YqJ_info" {
     sat_s1YqJ_info:
         const sat_s1YqJ_entry;
         const 4294967300;
         const 4294967311;
         const S1YCH_srt+616;
 },
 _c29VB() //  [R1]
         { []
         }
     {offset
       c29VB: // global
           _s1Yqc::I64 = I64[Sp + 8];
           _s1YqC::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1YqC::I64)) goto c29VS; else goto c29VU;
       c29VU: // global
           if (%MO_S_Ge_W64(_s1YqC::I64,
                            _s1Yqc::I64)) goto c29VS; else goto c29VT;
       c29VS: // global
           R3 = _s1Yqc::I64;
           R2 = _s1YqC::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c29VT: // global
           R1 = P64[P64[Sp + 16] + ((_s1YqC::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c29VB_info" {
     block_c29VB_info:
         const _c29VB;
         const 66;
         const 4294967326;
         const S1YCH_srt+616;
 },
 go1_s1Yqw_entry() //  [R1, R2]
         { []
         }
     {offset
       c29VZ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c29W0; else goto c29W1;
       c29W0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c29W1: // global
           I64[Sp - 48] = block_c29Vq_info;
           _s1Yqw::P64 = R1;
           _s1Yq4::P64 = P64[R1 + 7];
           _s1Yqd::P64 = P64[R1 + 15];
           _s1Yqv::P64 = P64[R1 + 23];
           _s1Yqc::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s1Yq4::P64;
           I64[Sp - 32] = _s1Yqc::I64;
           P64[Sp - 24] = _s1Yqd::P64;
           P64[Sp - 16] = _s1Yqv::P64;
           P64[Sp - 8] = _s1Yqw::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u29W9; else goto c29Vr;
       u29W9: // global
           call _c29Vq(R1) args: 0, res: 0, upd: 0;
       c29Vr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s1Yqw_info" {
     go1_s1Yqw_info:
         const go1_s1Yqw_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S1YCH_srt+616;
 },
 _c29Vq() //  [R1]
         { []
         }
     {offset
       c29Vq: // global
           if (R1 & 7 == 1) goto c29VW; else goto c29VX;
       c29VW: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c29VX: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c29W8; else goto c29W7;
       c29W8: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c29W7: // global
           _s1Yqz::P64 = P64[R1 + 6];
           _s1YqA::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s1YqA::P64;
           I64[Hp - 96] = sat_s1YqJ_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s1Yqz::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s1Yqz::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29Vq_info" {
     block_c29Vq_info:
         const _c29Vq;
         const 133;
         const 4294967326;
         const S1YCH_srt+616;
 },
 sat_s1YqM_entry() //  [R1]
         { []
         }
     {offset
       c29Wy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c29Wz; else goto c29WA;
       c29Wz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29WA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YqM_info" {
     sat_s1YqM_info:
         const sat_s1YqM_entry;
         const 1;
         const 16;
 },
 sat_s1YqN_entry() //  [R1]
         { []
         }
     {offset
       c29WB: // global
           _s1YqN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c29WC; else goto c29WD;
       c29WD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c29WF; else goto c29WE;
       c29WF: // global
           HpAlloc = 24;
           goto c29WC;
       c29WC: // global
           R1 = _s1YqN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29WE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1YqN::P64;
           _s1Yq4::P64 = P64[_s1YqN::P64 + 16];
           _s1Yq5::P64 = P64[_s1YqN::P64 + 24];
           I64[Hp - 16] = sat_s1YqM_info;
           P64[Hp] = _s1Yq4::P64;
           R3 = _s1Yq5::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,)_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YqN_info" {
     sat_s1YqN_info:
         const sat_s1YqN_entry;
         const 2;
         const 18;
 },
 GHC.Arr.$w$c<=_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c29WG: // global
           _s1Yq8::I64 = R6;
           _s1Yq7::P64 = R5;
           _s1Yq6::P64 = R4;
           _s1Yq5::P64 = R3;
           _s1Yq4::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c29WH; else goto c29WI;
       c29WI: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c29WK; else goto c29WJ;
       c29WK: // global
           HpAlloc = 128;
           goto c29WH;
       c29WH: // global
           R1 = GHC.Arr.$w$c<=_closure;
           P64[Sp - 40] = _s1Yq4::P64;
           P64[Sp - 32] = _s1Yq5::P64;
           P64[Sp - 24] = _s1Yq6::P64;
           P64[Sp - 16] = _s1Yq7::P64;
           I64[Sp - 8] = _s1Yq8::I64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c29WJ: // global
           I64[Hp - 120] = (,)_con_info;
           P64[Hp - 112] = _s1Yq6::P64;
           P64[Hp - 104] = _s1Yq7::P64;
           I64[Hp - 96] = go_s1Yqf_info;
           P64[Hp - 88] = _s1Yq4::P64;
           P64[Hp - 80] = P64[Sp];
           _c29Uu::P64 = Hp - 119;
           P64[Hp - 72] = _c29Uu::P64;
           I64[Hp - 64] = _s1Yq8::I64;
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = go1_s1Yqw_info;
           P64[Hp - 24] = _s1Yq4::P64;
           P64[Hp - 16] = P64[Sp + 32];
           _c29Vk::P64 = Hp - 55;
           P64[Hp - 8] = _c29Vk::P64;
           I64[Hp] = I64[Sp + 24];
           I64[Sp - 8] = block_c29Wa_info;
           R2 = _s1Yq4::P64;
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = _c29Vk::P64;
           P64[Sp] = _s1Yq5::P64;
           P64[Sp + 8] = _s1Yq4::P64;
           P64[Sp + 16] = Hp - 31;
           P64[Sp + 24] = Hp - 95;
           P64[Sp + 32] = _c29Uu::P64;
           Sp = Sp - 24;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$c<=_info" {
     GHC.Arr.$w$c<=_info:
         const GHC.Arr.$w$c<=_entry;
         const 0;
         const 70373039144974;
         const 42949672960;
         const S1YCH_srt+616;
         const 17418;
         const GHC.Arr.$w$c<=_slow;
 },
 _c29Wa() //  [R1]
         { []
         }
     {offset
       c29Wa: // global
           I64[Sp] = block_c29We_info;
           R2 = R1;
           R1 = P64[Sp + 24];
           call go1_s1Yqw_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29Wa_info" {
     block_c29Wa_info:
         const _c29Wa;
         const 5;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c29We() //  [R1]
         { []
         }
     {offset
       c29We: // global
           I64[Sp] = block_c29Wi_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 40];
           P64[Sp + 40] = R1;
           Sp = Sp - 16;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29We_info" {
     block_c29We_info:
         const _c29We;
         const 261;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c29Wi() //  [R1]
         { []
         }
     {offset
       c29Wi: // global
           I64[Sp] = block_c29Wm_info;
           R2 = R1;
           R1 = P64[Sp + 32];
           call go_s1Yqf_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29Wi_info" {
     block_c29Wi_info:
         const _c29Wi;
         const 261;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c29Wm() //  [R1]
         { []
         }
     {offset
       c29Wm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c29WR; else goto c29WQ;
       c29WR: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c29WQ: // global
           I64[Hp - 24] = sat_s1YqN_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _s1YqR::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_c29WO_info;
           R4 = _s1YqR::P64;
           R3 = R1;
           R2 = Hp - 24;
           Sp = Sp + 40;
           call GHC.Classes.$fOrd[]_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29Wm_info" {
     block_c29Wm_info:
         const _c29Wm;
         const 773;
         const 30;
 },
 _c29WO() //  [R1]
         { []
         }
     {offset
       c29WO: // global
           if (R1 & 7 == 3) goto c29X1; else goto c29WX;
       c29X1: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c29WX: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29WO_info" {
     block_c29WO_info:
         const _c29WO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.711734848 UTC

[section ""data" . GHC.Arr.$fOrdArray_$c<=_closure" {
     GHC.Arr.$fOrdArray_$c<=_closure:
         const GHC.Arr.$fOrdArray_$c<=_info;
         const 0;
 },
 GHC.Arr.$fOrdArray_$c<=_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c29YU: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c29YY; else goto c29YZ;
       c29YY: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fOrdArray_$c<=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c29YZ: // global
           I64[Sp - 32] = block_c29YR_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u29Z7; else goto c29YS;
       u29Z7: // global
           call _c29YR(R1) args: 0, res: 0, upd: 0;
       c29YS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fOrdArray_$c<=_info" {
     GHC.Arr.$fOrdArray_$c<=_info:
         const GHC.Arr.$fOrdArray_$c<=_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S1YCH_srt+728;
 },
 _c29YR() //  [R1]
         { []
         }
     {offset
       c29YR: // global
           I64[Sp - 24] = block_c29YX_info;
           _s1YqY::P64 = P64[R1 + 7];
           _s1YqZ::P64 = P64[R1 + 15];
           _s1Yr1::P64 = P64[R1 + 23];
           _s1Yr0::I64 = I64[R1 + 31];
           R1 = P64[Sp + 24];
           I64[Sp - 16] = _s1Yr0::I64;
           P64[Sp - 8] = _s1Yr1::P64;
           P64[Sp] = _s1YqZ::P64;
           P64[Sp + 24] = _s1YqY::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u29Z6; else goto c29Z1;
       u29Z6: // global
           call _c29YX(R1) args: 0, res: 0, upd: 0;
       c29Z1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c29YR_info" {
     block_c29YR_info:
         const _c29YR;
         const 3;
         const 4294967326;
         const S1YCH_srt+728;
 },
 _c29YX() //  [R1]
         { []
         }
     {offset
       c29YX: // global
           R6 = I64[Sp + 8];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           P64[Sp + 24] = P64[R1 + 7];
           P64[Sp + 32] = P64[R1 + 15];
           I64[Sp + 40] = I64[R1 + 31];
           P64[Sp + 48] = P64[R1 + 23];
           Sp = Sp + 16;
           call GHC.Arr.$w$c<=_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29YX_info" {
     block_c29YX_info:
         const _c29YX;
         const 70;
         const 4294967326;
         const S1YCH_srt+728;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.728033748 UTC

[section ""data" . GHC.Arr.$w$cmax_closure" {
     GHC.Arr.$w$cmax_closure:
         const GHC.Arr.$w$cmax_info;
         const 0;
 },
 GHC.Arr.$w$cmax_slow() //  [R1]
         { []
         }
     {offset
       c29Zq: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$w$cmax_entry(R6,
                                      R5,
                                      R4,
                                      R3,
                                      R2,
                                      R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s1Yrv_entry() //  [R1]
         { []
         }
     {offset
       c29ZN: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c29ZO; else goto c29ZP;
       c29ZO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c29ZP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c29ZL_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Yrv_info" {
     sat_s1Yrv_info:
         const sat_s1Yrv_entry;
         const 4294967300;
         const 4294967311;
         const S1YCH_srt+616;
 },
 _c29ZL() //  [R1]
         { []
         }
     {offset
       c29ZL: // global
           _s1Yrb::I64 = I64[Sp + 8];
           _s1Yro::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1Yro::I64)) goto c2a02; else goto c2a04;
       c2a04: // global
           if (%MO_S_Ge_W64(_s1Yro::I64,
                            _s1Yrb::I64)) goto c2a02; else goto c2a03;
       c2a02: // global
           R3 = _s1Yrb::I64;
           R2 = _s1Yro::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2a03: // global
           R1 = P64[P64[Sp + 16] + ((_s1Yro::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c29ZL_info" {
     block_c29ZL_info:
         const _c29ZL;
         const 66;
         const 4294967326;
         const S1YCH_srt+616;
 },
 go_s1Yri_entry() //  [R1, R2]
         { []
         }
     {offset
       c2a09: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2a0a; else goto c2a0b;
       c2a0a: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2a0b: // global
           I64[Sp - 48] = block_c29ZA_info;
           _s1Yri::P64 = R1;
           _s1Yr7::P64 = P64[R1 + 7];
           _s1Yrc::P64 = P64[R1 + 15];
           _s1Yrh::P64 = P64[R1 + 23];
           _s1Yrb::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s1Yr7::P64;
           I64[Sp - 32] = _s1Yrb::I64;
           P64[Sp - 24] = _s1Yrc::P64;
           P64[Sp - 16] = _s1Yrh::P64;
           P64[Sp - 8] = _s1Yri::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2a0j; else goto c29ZB;
       u2a0j: // global
           call _c29ZA(R1) args: 0, res: 0, upd: 0;
       c29ZB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1Yri_info" {
     go_s1Yri_info:
         const go_s1Yri_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S1YCH_srt+616;
 },
 _c29ZA() //  [R1]
         { []
         }
     {offset
       c29ZA: // global
           if (R1 & 7 == 1) goto c2a06; else goto c2a07;
       c2a06: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2a07: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c2a0i; else goto c2a0h;
       c2a0i: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2a0h: // global
           _s1Yrl::P64 = P64[R1 + 6];
           _s1Yrm::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s1Yrm::P64;
           I64[Hp - 96] = sat_s1Yrv_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s1Yrl::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s1Yrl::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c29ZA_info" {
     block_c29ZA_info:
         const _c29ZA;
         const 133;
         const 4294967326;
         const S1YCH_srt+616;
 },
 sat_s1YrM_entry() //  [R1]
         { []
         }
     {offset
       c2a0D: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2a0E; else goto c2a0F;
       c2a0E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2a0F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c2a0B_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YrM_info" {
     sat_s1YrM_info:
         const sat_s1YrM_entry;
         const 4294967300;
         const 4294967311;
         const S1YCH_srt+616;
 },
 _c2a0B() //  [R1]
         { []
         }
     {offset
       c2a0B: // global
           _s1Yrf::I64 = I64[Sp + 8];
           _s1YrF::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1YrF::I64)) goto c2a0S; else goto c2a0U;
       c2a0U: // global
           if (%MO_S_Ge_W64(_s1YrF::I64,
                            _s1Yrf::I64)) goto c2a0S; else goto c2a0T;
       c2a0S: // global
           R3 = _s1Yrf::I64;
           R2 = _s1YrF::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2a0T: // global
           R1 = P64[P64[Sp + 16] + ((_s1YrF::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2a0B_info" {
     block_c2a0B_info:
         const _c2a0B;
         const 66;
         const 4294967326;
         const S1YCH_srt+616;
 },
 go1_s1Yrz_entry() //  [R1, R2]
         { []
         }
     {offset
       c2a0Z: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2a10; else goto c2a11;
       c2a10: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2a11: // global
           I64[Sp - 48] = block_c2a0q_info;
           _s1Yrz::P64 = R1;
           _s1Yr7::P64 = P64[R1 + 7];
           _s1Yrg::P64 = P64[R1 + 15];
           _s1Yry::P64 = P64[R1 + 23];
           _s1Yrf::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s1Yr7::P64;
           I64[Sp - 32] = _s1Yrf::I64;
           P64[Sp - 24] = _s1Yrg::P64;
           P64[Sp - 16] = _s1Yry::P64;
           P64[Sp - 8] = _s1Yrz::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2a19; else goto c2a0r;
       u2a19: // global
           call _c2a0q(R1) args: 0, res: 0, upd: 0;
       c2a0r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s1Yrz_info" {
     go1_s1Yrz_info:
         const go1_s1Yrz_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S1YCH_srt+616;
 },
 _c2a0q() //  [R1]
         { []
         }
     {offset
       c2a0q: // global
           if (R1 & 7 == 1) goto c2a0W; else goto c2a0X;
       c2a0W: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2a0X: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c2a18; else goto c2a17;
       c2a18: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2a17: // global
           _s1YrC::P64 = P64[R1 + 6];
           _s1YrD::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s1YrD::P64;
           I64[Hp - 96] = sat_s1YrM_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s1YrC::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s1YrC::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2a0q_info" {
     block_c2a0q_info:
         const _c2a0q;
         const 133;
         const 4294967326;
         const S1YCH_srt+616;
 },
 sat_s1YrP_entry() //  [R1]
         { []
         }
     {offset
       c2a1y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2a1z; else goto c2a1A;
       c2a1z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2a1A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YrP_info" {
     sat_s1YrP_info:
         const sat_s1YrP_entry;
         const 1;
         const 16;
 },
 sat_s1YrQ_entry() //  [R1]
         { []
         }
     {offset
       c2a1B: // global
           _s1YrQ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2a1C; else goto c2a1D;
       c2a1D: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2a1F; else goto c2a1E;
       c2a1F: // global
           HpAlloc = 24;
           goto c2a1C;
       c2a1C: // global
           R1 = _s1YrQ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2a1E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1YrQ::P64;
           _s1Yr7::P64 = P64[_s1YrQ::P64 + 16];
           _s1Yr8::P64 = P64[_s1YrQ::P64 + 24];
           I64[Hp - 16] = sat_s1YrP_info;
           P64[Hp] = _s1Yr7::P64;
           R3 = _s1Yr8::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,)_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YrQ_info" {
     sat_s1YrQ_info:
         const sat_s1YrQ_entry;
         const 2;
         const 18;
 },
 GHC.Arr.$w$cmax_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2a1G: // global
           _s1Yrb::I64 = R6;
           _s1Yra::P64 = R5;
           _s1Yr9::P64 = R4;
           _s1Yr8::P64 = R3;
           _s1Yr7::P64 = R2;
           if ((Sp + -88) < SpLim) (likely: False) goto c2a1H; else goto c2a1I;
       c2a1I: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c2a1K; else goto c2a1J;
       c2a1K: // global
           HpAlloc = 128;
           goto c2a1H;
       c2a1H: // global
           R1 = GHC.Arr.$w$cmax_closure;
           P64[Sp - 40] = _s1Yr7::P64;
           P64[Sp - 32] = _s1Yr8::P64;
           P64[Sp - 24] = _s1Yr9::P64;
           P64[Sp - 16] = _s1Yra::P64;
           I64[Sp - 8] = _s1Yrb::I64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c2a1J: // global
           I64[Hp - 120] = (,)_con_info;
           P64[Hp - 112] = _s1Yr9::P64;
           P64[Hp - 104] = _s1Yra::P64;
           I64[Hp - 96] = go_s1Yri_info;
           P64[Hp - 88] = _s1Yr7::P64;
           P64[Hp - 80] = P64[Sp];
           _c29Zu::P64 = Hp - 119;
           P64[Hp - 72] = _c29Zu::P64;
           I64[Hp - 64] = _s1Yrb::I64;
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = go1_s1Yrz_info;
           P64[Hp - 24] = _s1Yr7::P64;
           P64[Hp - 16] = P64[Sp + 32];
           _c2a0k::P64 = Hp - 55;
           P64[Hp - 8] = _c2a0k::P64;
           I64[Hp] = I64[Sp + 24];
           I64[Sp - 72] = block_c2a1a_info;
           R2 = _s1Yr7::P64;
           I64[Sp - 88] = stg_ap_p_info;
           P64[Sp - 80] = _c2a0k::P64;
           P64[Sp - 64] = _c29Zu::P64;
           P64[Sp - 56] = Hp - 95;
           P64[Sp - 48] = Hp - 31;
           P64[Sp - 40] = _s1Yr7::P64;
           P64[Sp - 32] = _s1Yr8::P64;
           P64[Sp - 24] = _s1Yr9::P64;
           P64[Sp - 16] = _s1Yra::P64;
           I64[Sp - 8] = _s1Yrb::I64;
           Sp = Sp - 88;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$cmax_info" {
     GHC.Arr.$w$cmax_info:
         const GHC.Arr.$w$cmax_entry;
         const 0;
         const 281479271677966;
         const 42949672960;
         const S1YCH_srt+616;
         const 17418;
         const GHC.Arr.$w$cmax_slow;
 },
 _c2a1a() //  [R1]
         { []
         }
     {offset
       c2a1a: // global
           I64[Sp] = block_c2a1e_info;
           R2 = R1;
           R1 = P64[Sp + 24];
           call go1_s1Yrz_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2a1a_info" {
     block_c2a1a_info:
         const _c2a1a;
         const 139277;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2a1e() //  [R1]
         { []
         }
     {offset
       c2a1e: // global
           _c29Zu::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2a1i_info;
           R2 = P64[Sp + 32];
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = _c29Zu::P64;
           P64[Sp + 24] = R1;
           Sp = Sp - 8;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2a1e_info" {
     block_c2a1e_info:
         const _c2a1e;
         const 139533;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2a1i() //  [R1]
         { []
         }
     {offset
       c2a1i: // global
           _c29Zv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2a1m_info;
           R2 = R1;
           R1 = _c29Zv::P64;
           Sp = Sp + 8;
           call go_s1Yri_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2a1i_info" {
     block_c2a1i_info:
         const _c2a1i;
         const 69644;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2a1m() //  [R1]
         { []
         }
     {offset
       c2a1m: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2a1R; else goto c2a1Q;
       c2a1R: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2a1Q: // global
           I64[Hp - 24] = sat_s1YrQ_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_c2a1O_info;
           R4 = P64[Sp + 8];
           R3 = R1;
           R2 = Hp - 24;
           Sp = Sp + 24;
           call GHC.Classes.$fOrd[]_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2a1m_info" {
     block_c2a1m_info:
         const _c2a1m;
         const 34827;
         const 30;
 },
 _c2a1O() //  [R1]
         { []
         }
     {offset
       c2a1O: // global
           if (R1 & 7 == 3) goto c2a21; else goto c2a1X;
       c2a21: // global
           R4 = P64[Sp + 32];
           R3 = I64[Sp + 24];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2a1X: // global
           R4 = P64[Sp + 64];
           R3 = I64[Sp + 56];
           R2 = P64[Sp + 48];
           R1 = P64[Sp + 40];
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2a1O_info" {
     block_c2a1O_info:
         const _c2a1O;
         const 4360;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.764873173 UTC

[section ""data" . GHC.Arr.$fOrdArray_$cmax_closure" {
     GHC.Arr.$fOrdArray_$cmax_closure:
         const GHC.Arr.$fOrdArray_$cmax_info;
         const 0;
 },
 GHC.Arr.$fOrdArray_$cmax_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2a3T: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2a46; else goto c2a47;
       c2a46: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fOrdArray_$cmax_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2a47: // global
           I64[Sp - 32] = block_c2a3Q_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2a4f; else goto c2a3R;
       u2a4f: // global
           call _c2a3Q(R1) args: 0, res: 0, upd: 0;
       c2a3R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fOrdArray_$cmax_info" {
     GHC.Arr.$fOrdArray_$cmax_info:
         const GHC.Arr.$fOrdArray_$cmax_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S1YCH_srt+744;
 },
 _c2a3Q() //  [R1]
         { []
         }
     {offset
       c2a3Q: // global
           I64[Sp - 24] = block_c2a3W_info;
           _s1Ys1::P64 = P64[R1 + 7];
           _s1Ys2::P64 = P64[R1 + 15];
           _s1Ys4::P64 = P64[R1 + 23];
           _s1Ys3::I64 = I64[R1 + 31];
           R1 = P64[Sp + 24];
           I64[Sp - 16] = _s1Ys3::I64;
           P64[Sp - 8] = _s1Ys4::P64;
           P64[Sp] = _s1Ys2::P64;
           P64[Sp + 24] = _s1Ys1::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2a4e; else goto c2a3X;
       u2a4e: // global
           call _c2a3W(R1) args: 0, res: 0, upd: 0;
       c2a3X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2a3Q_info" {
     block_c2a3Q_info:
         const _c2a3Q;
         const 3;
         const 4294967326;
         const S1YCH_srt+744;
 },
 _c2a3W() //  [R1]
         { []
         }
     {offset
       c2a3W: // global
           _s1Ys1::P64 = P64[Sp + 48];
           I64[Sp + 48] = block_c2a41_info;
           R6 = I64[Sp + 8];
           R5 = P64[Sp + 24];
           R4 = _s1Ys1::P64;
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 7];
           P64[Sp + 24] = P64[R1 + 15];
           I64[Sp + 32] = I64[R1 + 31];
           P64[Sp + 40] = P64[R1 + 23];
           Sp = Sp + 8;
           call GHC.Arr.$w$cmax_entry(R6,
                                      R5,
                                      R4,
                                      R3,
                                      R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2a3W_info" {
     block_c2a3W_info:
         const _c2a3W;
         const 70;
         const 4294967326;
         const S1YCH_srt+744;
 },
 _c2a41() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c2a41: // global
           P64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call _c2a42() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2a41_info" {
     block_c2a41_info:
         const _c2a41;
         const 0;
         const 30;
 },
 _c2a42() //  []
         { []
         }
     {offset
       c2a42: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2a4c; else goto c2a4b;
       c2a4c: // global
           HpAlloc = 40;
           I64[Sp] = block_c2a42_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2a4b: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2a42_info" {
     block_c2a42_info:
         const _c2a42;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.784846145 UTC

[section ""data" . GHC.Arr.$w$cmin_closure" {
     GHC.Arr.$w$cmin_closure:
         const GHC.Arr.$w$cmin_info;
         const 0;
 },
 GHC.Arr.$w$cmin_slow() //  [R1]
         { []
         }
     {offset
       c2a4L: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$w$cmin_entry(R6,
                                      R5,
                                      R4,
                                      R3,
                                      R2,
                                      R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s1YsD_entry() //  [R1]
         { []
         }
     {offset
       c2a58: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2a59; else goto c2a5a;
       c2a59: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2a5a: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c2a56_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YsD_info" {
     sat_s1YsD_info:
         const sat_s1YsD_entry;
         const 4294967300;
         const 4294967311;
         const S1YCH_srt+616;
 },
 _c2a56() //  [R1]
         { []
         }
     {offset
       c2a56: // global
           _s1Ysj::I64 = I64[Sp + 8];
           _s1Ysw::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1Ysw::I64)) goto c2a5n; else goto c2a5p;
       c2a5p: // global
           if (%MO_S_Ge_W64(_s1Ysw::I64,
                            _s1Ysj::I64)) goto c2a5n; else goto c2a5o;
       c2a5n: // global
           R3 = _s1Ysj::I64;
           R2 = _s1Ysw::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2a5o: // global
           R1 = P64[P64[Sp + 16] + ((_s1Ysw::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2a56_info" {
     block_c2a56_info:
         const _c2a56;
         const 66;
         const 4294967326;
         const S1YCH_srt+616;
 },
 go_s1Ysq_entry() //  [R1, R2]
         { []
         }
     {offset
       c2a5u: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2a5v; else goto c2a5w;
       c2a5v: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2a5w: // global
           I64[Sp - 48] = block_c2a4V_info;
           _s1Ysq::P64 = R1;
           _s1Ysf::P64 = P64[R1 + 7];
           _s1Ysk::P64 = P64[R1 + 15];
           _s1Ysp::P64 = P64[R1 + 23];
           _s1Ysj::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s1Ysf::P64;
           I64[Sp - 32] = _s1Ysj::I64;
           P64[Sp - 24] = _s1Ysk::P64;
           P64[Sp - 16] = _s1Ysp::P64;
           P64[Sp - 8] = _s1Ysq::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2a5E; else goto c2a4W;
       u2a5E: // global
           call _c2a4V(R1) args: 0, res: 0, upd: 0;
       c2a4W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1Ysq_info" {
     go_s1Ysq_info:
         const go_s1Ysq_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S1YCH_srt+616;
 },
 _c2a4V() //  [R1]
         { []
         }
     {offset
       c2a4V: // global
           if (R1 & 7 == 1) goto c2a5r; else goto c2a5s;
       c2a5r: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2a5s: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c2a5D; else goto c2a5C;
       c2a5D: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2a5C: // global
           _s1Yst::P64 = P64[R1 + 6];
           _s1Ysu::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s1Ysu::P64;
           I64[Hp - 96] = sat_s1YsD_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s1Yst::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s1Yst::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2a4V_info" {
     block_c2a4V_info:
         const _c2a4V;
         const 133;
         const 4294967326;
         const S1YCH_srt+616;
 },
 sat_s1YsU_entry() //  [R1]
         { []
         }
     {offset
       c2a5Y: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2a5Z; else goto c2a60;
       c2a5Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2a60: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c2a5W_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YsU_info" {
     sat_s1YsU_info:
         const sat_s1YsU_entry;
         const 4294967300;
         const 4294967311;
         const S1YCH_srt+616;
 },
 _c2a5W() //  [R1]
         { []
         }
     {offset
       c2a5W: // global
           _s1Ysn::I64 = I64[Sp + 8];
           _s1YsN::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1YsN::I64)) goto c2a6d; else goto c2a6f;
       c2a6f: // global
           if (%MO_S_Ge_W64(_s1YsN::I64,
                            _s1Ysn::I64)) goto c2a6d; else goto c2a6e;
       c2a6d: // global
           R3 = _s1Ysn::I64;
           R2 = _s1YsN::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2a6e: // global
           R1 = P64[P64[Sp + 16] + ((_s1YsN::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2a5W_info" {
     block_c2a5W_info:
         const _c2a5W;
         const 66;
         const 4294967326;
         const S1YCH_srt+616;
 },
 go1_s1YsH_entry() //  [R1, R2]
         { []
         }
     {offset
       c2a6k: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2a6l; else goto c2a6m;
       c2a6l: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2a6m: // global
           I64[Sp - 48] = block_c2a5L_info;
           _s1YsH::P64 = R1;
           _s1Ysf::P64 = P64[R1 + 7];
           _s1Yso::P64 = P64[R1 + 15];
           _s1YsG::P64 = P64[R1 + 23];
           _s1Ysn::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s1Ysf::P64;
           I64[Sp - 32] = _s1Ysn::I64;
           P64[Sp - 24] = _s1Yso::P64;
           P64[Sp - 16] = _s1YsG::P64;
           P64[Sp - 8] = _s1YsH::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2a6u; else goto c2a5M;
       u2a6u: // global
           call _c2a5L(R1) args: 0, res: 0, upd: 0;
       c2a5M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s1YsH_info" {
     go1_s1YsH_info:
         const go1_s1YsH_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S1YCH_srt+616;
 },
 _c2a5L() //  [R1]
         { []
         }
     {offset
       c2a5L: // global
           if (R1 & 7 == 1) goto c2a6h; else goto c2a6i;
       c2a6h: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2a6i: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c2a6t; else goto c2a6s;
       c2a6t: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2a6s: // global
           _s1YsK::P64 = P64[R1 + 6];
           _s1YsL::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s1YsL::P64;
           I64[Hp - 96] = sat_s1YsU_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s1YsK::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s1YsK::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2a5L_info" {
     block_c2a5L_info:
         const _c2a5L;
         const 133;
         const 4294967326;
         const S1YCH_srt+616;
 },
 sat_s1YsX_entry() //  [R1]
         { []
         }
     {offset
       c2a6T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2a6U; else goto c2a6V;
       c2a6U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2a6V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YsX_info" {
     sat_s1YsX_info:
         const sat_s1YsX_entry;
         const 1;
         const 16;
 },
 sat_s1YsY_entry() //  [R1]
         { []
         }
     {offset
       c2a6W: // global
           _s1YsY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2a6X; else goto c2a6Y;
       c2a6Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2a70; else goto c2a6Z;
       c2a70: // global
           HpAlloc = 24;
           goto c2a6X;
       c2a6X: // global
           R1 = _s1YsY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2a6Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1YsY::P64;
           _s1Ysf::P64 = P64[_s1YsY::P64 + 16];
           _s1Ysg::P64 = P64[_s1YsY::P64 + 24];
           I64[Hp - 16] = sat_s1YsX_info;
           P64[Hp] = _s1Ysf::P64;
           R3 = _s1Ysg::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,)_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YsY_info" {
     sat_s1YsY_info:
         const sat_s1YsY_entry;
         const 2;
         const 18;
 },
 GHC.Arr.$w$cmin_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2a71: // global
           _s1Ysj::I64 = R6;
           _s1Ysi::P64 = R5;
           _s1Ysh::P64 = R4;
           _s1Ysg::P64 = R3;
           _s1Ysf::P64 = R2;
           if ((Sp + -88) < SpLim) (likely: False) goto c2a72; else goto c2a73;
       c2a73: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c2a75; else goto c2a74;
       c2a75: // global
           HpAlloc = 128;
           goto c2a72;
       c2a72: // global
           R1 = GHC.Arr.$w$cmin_closure;
           P64[Sp - 40] = _s1Ysf::P64;
           P64[Sp - 32] = _s1Ysg::P64;
           P64[Sp - 24] = _s1Ysh::P64;
           P64[Sp - 16] = _s1Ysi::P64;
           I64[Sp - 8] = _s1Ysj::I64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c2a74: // global
           I64[Hp - 120] = (,)_con_info;
           P64[Hp - 112] = _s1Ysh::P64;
           P64[Hp - 104] = _s1Ysi::P64;
           I64[Hp - 96] = go_s1Ysq_info;
           P64[Hp - 88] = _s1Ysf::P64;
           P64[Hp - 80] = P64[Sp];
           _c2a4P::P64 = Hp - 119;
           P64[Hp - 72] = _c2a4P::P64;
           I64[Hp - 64] = _s1Ysj::I64;
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = go1_s1YsH_info;
           P64[Hp - 24] = _s1Ysf::P64;
           P64[Hp - 16] = P64[Sp + 32];
           _c2a5F::P64 = Hp - 55;
           P64[Hp - 8] = _c2a5F::P64;
           I64[Hp] = I64[Sp + 24];
           I64[Sp - 72] = block_c2a6v_info;
           R2 = _s1Ysf::P64;
           I64[Sp - 88] = stg_ap_p_info;
           P64[Sp - 80] = _c2a5F::P64;
           P64[Sp - 64] = _c2a4P::P64;
           P64[Sp - 56] = Hp - 95;
           P64[Sp - 48] = Hp - 31;
           P64[Sp - 40] = _s1Ysf::P64;
           P64[Sp - 32] = _s1Ysg::P64;
           P64[Sp - 24] = _s1Ysh::P64;
           P64[Sp - 16] = _s1Ysi::P64;
           I64[Sp - 8] = _s1Ysj::I64;
           Sp = Sp - 88;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$cmin_info" {
     GHC.Arr.$w$cmin_info:
         const GHC.Arr.$w$cmin_entry;
         const 0;
         const 1125904201809934;
         const 42949672960;
         const S1YCH_srt+616;
         const 17418;
         const GHC.Arr.$w$cmin_slow;
 },
 _c2a6v() //  [R1]
         { []
         }
     {offset
       c2a6v: // global
           I64[Sp] = block_c2a6z_info;
           R2 = R1;
           R1 = P64[Sp + 24];
           call go1_s1YsH_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2a6v_info" {
     block_c2a6v_info:
         const _c2a6v;
         const 139277;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2a6z() //  [R1]
         { []
         }
     {offset
       c2a6z: // global
           _c2a4P::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2a6D_info;
           R2 = P64[Sp + 32];
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = _c2a4P::P64;
           P64[Sp + 24] = R1;
           Sp = Sp - 8;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2a6z_info" {
     block_c2a6z_info:
         const _c2a6z;
         const 139533;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2a6D() //  [R1]
         { []
         }
     {offset
       c2a6D: // global
           _c2a4Q::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2a6H_info;
           R2 = R1;
           R1 = _c2a4Q::P64;
           Sp = Sp + 8;
           call go_s1Ysq_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2a6D_info" {
     block_c2a6D_info:
         const _c2a6D;
         const 69644;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2a6H() //  [R1]
         { []
         }
     {offset
       c2a6H: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2a7c; else goto c2a7b;
       c2a7c: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2a7b: // global
           I64[Hp - 24] = sat_s1YsY_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_c2a79_info;
           R4 = P64[Sp + 8];
           R3 = R1;
           R2 = Hp - 24;
           Sp = Sp + 24;
           call GHC.Classes.$fOrd[]_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2a6H_info" {
     block_c2a6H_info:
         const _c2a6H;
         const 34827;
         const 30;
 },
 _c2a79() //  [R1]
         { []
         }
     {offset
       c2a79: // global
           if (R1 & 7 == 3) goto c2a7m; else goto c2a7i;
       c2a7m: // global
           R4 = P64[Sp + 64];
           R3 = I64[Sp + 56];
           R2 = P64[Sp + 48];
           R1 = P64[Sp + 40];
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2a7i: // global
           R4 = P64[Sp + 32];
           R3 = I64[Sp + 24];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2a79_info" {
     block_c2a79_info:
         const _c2a79;
         const 4360;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.819782446 UTC

[section ""data" . GHC.Arr.$fOrdArray_$cmin_closure" {
     GHC.Arr.$fOrdArray_$cmin_closure:
         const GHC.Arr.$fOrdArray_$cmin_info;
         const 0;
 },
 GHC.Arr.$fOrdArray_$cmin_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2a9e: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2a9r; else goto c2a9s;
       c2a9r: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fOrdArray_$cmin_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2a9s: // global
           I64[Sp - 32] = block_c2a9b_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2a9A; else goto c2a9c;
       u2a9A: // global
           call _c2a9b(R1) args: 0, res: 0, upd: 0;
       c2a9c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fOrdArray_$cmin_info" {
     GHC.Arr.$fOrdArray_$cmin_info:
         const GHC.Arr.$fOrdArray_$cmin_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S1YCH_srt+760;
 },
 _c2a9b() //  [R1]
         { []
         }
     {offset
       c2a9b: // global
           I64[Sp - 24] = block_c2a9h_info;
           _s1Yt9::P64 = P64[R1 + 7];
           _s1Yta::P64 = P64[R1 + 15];
           _s1Ytc::P64 = P64[R1 + 23];
           _s1Ytb::I64 = I64[R1 + 31];
           R1 = P64[Sp + 24];
           I64[Sp - 16] = _s1Ytb::I64;
           P64[Sp - 8] = _s1Ytc::P64;
           P64[Sp] = _s1Yta::P64;
           P64[Sp + 24] = _s1Yt9::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2a9z; else goto c2a9i;
       u2a9z: // global
           call _c2a9h(R1) args: 0, res: 0, upd: 0;
       c2a9i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2a9b_info" {
     block_c2a9b_info:
         const _c2a9b;
         const 3;
         const 4294967326;
         const S1YCH_srt+760;
 },
 _c2a9h() //  [R1]
         { []
         }
     {offset
       c2a9h: // global
           _s1Yt9::P64 = P64[Sp + 48];
           I64[Sp + 48] = block_c2a9m_info;
           R6 = I64[Sp + 8];
           R5 = P64[Sp + 24];
           R4 = _s1Yt9::P64;
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 7];
           P64[Sp + 24] = P64[R1 + 15];
           I64[Sp + 32] = I64[R1 + 31];
           P64[Sp + 40] = P64[R1 + 23];
           Sp = Sp + 8;
           call GHC.Arr.$w$cmin_entry(R6,
                                      R5,
                                      R4,
                                      R3,
                                      R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2a9h_info" {
     block_c2a9h_info:
         const _c2a9h;
         const 70;
         const 4294967326;
         const S1YCH_srt+760;
 },
 _c2a9m() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c2a9m: // global
           P64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call _c2a9n() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2a9m_info" {
     block_c2a9m_info:
         const _c2a9m;
         const 0;
         const 30;
 },
 _c2a9n() //  []
         { []
         }
     {offset
       c2a9n: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2a9x; else goto c2a9w;
       c2a9x: // global
           HpAlloc = 40;
           I64[Sp] = block_c2a9n_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2a9w: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2a9n_info" {
     block_c2a9n_info:
         const _c2a9n;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.834692152 UTC

[section ""data" . GHC.Arr.$fOrdArray_closure" {
     GHC.Arr.$fOrdArray_closure:
         const GHC.Arr.$fOrdArray_info;
         const 0;
 },
 sat_s1Ytw_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2aae: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fOrdArray_$cmin_entry(R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Ytw_info" {
     sat_s1Ytw_info:
         const sat_s1Ytw_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S1YCH_srt+768;
 },
 sat_s1Ytv_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2aam: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fOrdArray_$cmax_entry(R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Ytv_info" {
     sat_s1Ytv_info:
         const sat_s1Ytv_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S1YCH_srt+752;
 },
 sat_s1Ytu_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2aau: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fOrdArray_$c>=_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Ytu_info" {
     sat_s1Ytu_info:
         const sat_s1Ytu_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S1YCH_srt+704;
 },
 sat_s1Ytt_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2aaC: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fOrdArray_$c>_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Ytt_info" {
     sat_s1Ytt_info:
         const sat_s1Ytt_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S1YCH_srt+720;
 },
 sat_s1Yts_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2aaK: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fOrdArray_$c<=_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Yts_info" {
     sat_s1Yts_info:
         const sat_s1Yts_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S1YCH_srt+736;
 },
 sat_s1Ytr_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2aaS: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fOrdArray_$c<_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Ytr_info" {
     sat_s1Ytr_info:
         const sat_s1Ytr_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S1YCH_srt+688;
 },
 sat_s1Ytq_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2ab0: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.cmpArray_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Ytq_info" {
     sat_s1Ytq_info:
         const sat_s1Ytq_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S1YCH_srt+672;
 },
 sat_s1Ytp_entry() //  [R1]
         { []
         }
     {offset
       c2ab7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ab8; else goto c2ab9;
       c2ab8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ab9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$fOrdArray_$cp1Ord_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Ytp_info" {
     sat_s1Ytp_info:
         const sat_s1Ytp_entry;
         const 2;
         const 18;
 },
 GHC.Arr.$fOrdArray_entry() //  [R2, R3]
         { []
         }
     {offset
       c2abb: // global
           Hp = Hp + 272;
           if (Hp > HpLim) (likely: False) goto c2abf; else goto c2abe;
       c2abf: // global
           HpAlloc = 272;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fOrdArray_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2abe: // global
           I64[Hp - 264] = sat_s1Ytw_info;
           P64[Hp - 256] = R2;
           P64[Hp - 248] = R3;
           I64[Hp - 240] = sat_s1Ytv_info;
           P64[Hp - 232] = R2;
           P64[Hp - 224] = R3;
           I64[Hp - 216] = sat_s1Ytu_info;
           P64[Hp - 208] = R2;
           P64[Hp - 200] = R3;
           I64[Hp - 192] = sat_s1Ytt_info;
           P64[Hp - 184] = R2;
           P64[Hp - 176] = R3;
           I64[Hp - 168] = sat_s1Yts_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           I64[Hp - 144] = sat_s1Ytr_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           I64[Hp - 120] = sat_s1Ytq_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           I64[Hp - 96] = sat_s1Ytp_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 96;
           P64[Hp - 48] = Hp - 118;
           P64[Hp - 40] = Hp - 142;
           P64[Hp - 32] = Hp - 166;
           P64[Hp - 24] = Hp - 190;
           P64[Hp - 16] = Hp - 214;
           P64[Hp - 8] = Hp - 238;
           P64[Hp] = Hp - 262;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fOrdArray_info" {
     GHC.Arr.$fOrdArray_info:
         const GHC.Arr.$fOrdArray_entry;
         const 0;
         const 58639188492302;
         const 8589934607;
         const S1YCH_srt+672;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.851273331 UTC

[section ""cstring" . lvl49_r1Xwl_bytes" {
     lvl49_r1Xwl_bytes:
         I8[] [97,114,114,97,121,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.873281224 UTC

[section ""data" . GHC.Arr.$w$cshowsPrec_closure" {
     GHC.Arr.$w$cshowsPrec_closure:
         const GHC.Arr.$w$cshowsPrec_info;
         const 0;
 },
 GHC.Arr.$w$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       c2abU: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$w$cshowsPrec_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s1YtW_entry() //  [R1]
         { []
         }
     {offset
       c2acq: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2acr; else goto c2acs;
       c2acr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2acs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c2aco_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YtW_info" {
     sat_s1YtW_info:
         const sat_s1YtW_entry;
         const 4294967300;
         const 4294967311;
         const S1YCH_srt+616;
 },
 _c2aco() //  [R1]
         { []
         }
     {offset
       c2aco: // global
           _s1YtG::I64 = I64[Sp + 8];
           _s1YtP::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1YtP::I64)) goto c2acF; else goto c2acH;
       c2acH: // global
           if (%MO_S_Ge_W64(_s1YtP::I64,
                            _s1YtG::I64)) goto c2acF; else goto c2acG;
       c2acF: // global
           R3 = _s1YtG::I64;
           R2 = _s1YtP::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2acG: // global
           R1 = P64[P64[Sp + 16] + ((_s1YtP::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2aco_info" {
     block_c2aco_info:
         const _c2aco;
         const 66;
         const 4294967326;
         const S1YCH_srt+616;
 },
 go_s1YtJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c2acM: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2acN; else goto c2acO;
       c2acN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2acO: // global
           I64[Sp - 48] = block_c2acd_info;
           _s1YtJ::P64 = R1;
           _s1Ytx::P64 = P64[R1 + 7];
           _s1YtH::P64 = P64[R1 + 15];
           _s1YtI::P64 = P64[R1 + 23];
           _s1YtG::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s1Ytx::P64;
           I64[Sp - 32] = _s1YtG::I64;
           P64[Sp - 24] = _s1YtH::P64;
           P64[Sp - 16] = _s1YtI::P64;
           P64[Sp - 8] = _s1YtJ::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2acW; else goto c2ace;
       u2acW: // global
           call _c2acd(R1) args: 0, res: 0, upd: 0;
       c2ace: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s1YtJ_info" {
     go_s1YtJ_info:
         const go_s1YtJ_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S1YCH_srt+616;
 },
 _c2acd() //  [R1]
         { []
         }
     {offset
       c2acd: // global
           if (R1 & 7 == 1) goto c2acJ; else goto c2acK;
       c2acJ: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2acK: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c2acV; else goto c2acU;
       c2acV: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2acU: // global
           _s1YtM::P64 = P64[R1 + 6];
           _s1YtN::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s1YtN::P64;
           I64[Hp - 96] = sat_s1YtW_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s1YtM::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s1YtM::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2acd_info" {
     block_c2acd_info:
         const _c2acd;
         const 133;
         const 4294967326;
         const S1YCH_srt+616;
 },
 ls_s1YtC_entry() //  [R1]
         { []
         }
     {offset
       c2acX: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2acZ; else goto c2ad0;
       c2acZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ad0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c2ac2_info;
           _s1Ytx::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s1Ytx::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2ad8; else goto c2ac3;
       u2ad8: // global
           call _c2ac2(R1) args: 0, res: 0, upd: 0;
       c2ac3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ls_s1YtC_info" {
     ls_s1YtC_info:
         const ls_s1YtC_entry;
         const 2;
         const 4294967314;
         const S1YCH_srt+616;
 },
 _c2ac2() //  [R1]
         { []
         }
     {offset
       c2ac2: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c2ad3; else goto c2ad2;
       c2ad3: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2ad2: // global
           _s1YtE::P64 = P64[R1 + 7];
           _s1YtF::P64 = P64[R1 + 15];
           _s1YtH::P64 = P64[R1 + 23];
           _s1YtG::I64 = I64[R1 + 31];
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = _s1YtE::P64;
           P64[Hp - 40] = _s1YtF::P64;
           I64[Hp - 32] = go_s1YtJ_info;
           _s1Ytx::P64 = P64[Sp + 8];
           P64[Hp - 24] = _s1Ytx::P64;
           P64[Hp - 16] = _s1YtH::P64;
           _c2ac7::P64 = Hp - 55;
           P64[Hp - 8] = _c2ac7::P64;
           I64[Hp] = _s1YtG::I64;
           I64[Sp] = block_c2acY_info;
           R2 = _s1Ytx::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _c2ac7::P64;
           P64[Sp + 8] = Hp - 31;
           Sp = Sp - 16;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c2ac2_info" {
     block_c2ac2_info:
         const _c2ac2;
         const 1;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2acY() //  [R1]
         { []
         }
     {offset
       c2acY: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s1YtJ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2acY_info" {
     block_c2acY_info:
         const _c2acY;
         const 1;
         const 4294967326;
         const S1YCH_srt+616;
 },
 sat_s1Yuv_entry() //  [R1]
         { []
         }
     {offset
       c2aen: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2aeo; else goto c2aep;
       c2aeo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2aep: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Yuv_info" {
     sat_s1Yuv_info:
         const sat_s1Yuv_entry;
         const 2;
         const 18;
 },
 sat_s1Yuu_entry() //  [R1]
         { []
         }
     {offset
       c2aev: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2aew; else goto c2aex;
       c2aew: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2aex: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Yuu_info" {
     sat_s1Yuu_info:
         const sat_s1Yuu_entry;
         const 2;
         const 18;
 },
 sat_s1YuA_entry() //  [R1]
         { []
         }
     {offset
       c2aez: // global
           _s1YuA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2aeA; else goto c2aeB;
       c2aeB: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c2aeD; else goto c2aeC;
       c2aeD: // global
           HpAlloc = 168;
           goto c2aeA;
       c2aeA: // global
           R1 = _s1YuA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2aeC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1YuA::P64;
           _s1Yty::P64 = P64[_s1YuA::P64 + 16];
           _s1Ytz::P64 = P64[_s1YuA::P64 + 24];
           _s1Yum::P64 = P64[_s1YuA::P64 + 32];
           _s1Yuq::P64 = P64[_s1YuA::P64 + 40];
           _s1Yus::P64 = P64[_s1YuA::P64 + 48];
           _s1Yut::P64 = P64[_s1YuA::P64 + 56];
           I64[Hp - 160] = stg_ap_2_upd_info;
           P64[Hp - 144] = _s1Yum::P64;
           P64[Hp - 136] = _s1Yuq::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 112] = Hp - 160;
           I64[Hp - 104] = sat_s1Yuv_info;
           P64[Hp - 88] = _s1Ytz::P64;
           P64[Hp - 80] = _s1Yut::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = GHC.Types.[]_closure+1;
           I64[Hp - 48] = sat_s1Yuu_info;
           P64[Hp - 32] = _s1Yty::P64;
           P64[Hp - 24] = _s1Yus::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 126;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YuA_info" {
     sat_s1YuA_info:
         const sat_s1YuA_entry;
         const 6;
         const 4294967311;
         const S1YCH_srt+784;
 },
 sat_s1YuB_entry() //  [R1]
         { []
         }
     {offset
       c2aeE: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2aeG; else goto c2aeH;
       c2aeG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2aeH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_c2ae8_info;
           _s1Yty::P64 = P64[R1 + 16];
           _s1Ytz::P64 = P64[R1 + 24];
           _s1Yum::P64 = P64[R1 + 32];
           _s1Yuq::P64 = P64[R1 + 48];
           R1 = P64[R1 + 40];
           P64[Sp - 48] = _s1Yty::P64;
           P64[Sp - 40] = _s1Ytz::P64;
           P64[Sp - 32] = _s1Yum::P64;
           P64[Sp - 24] = _s1Yuq::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u2aeL; else goto c2ae9;
       u2aeL: // global
           call _c2ae8(R1) args: 0, res: 0, upd: 0;
       c2ae9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YuB_info" {
     sat_s1YuB_info:
         const sat_s1YuB_entry;
         const 5;
         const 4294967311;
         const S1YCH_srt+784;
 },
 _c2ae8() //  [R1]
         { []
         }
     {offset
       c2ae8: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2aeK; else goto c2aeJ;
       c2aeK: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2aeJ: // global
           _s1Yus::P64 = P64[R1 + 7];
           _s1Yut::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_s1YuA_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _s1Yus::P64;
           P64[Hp - 24] = _s1Yut::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2ae8_info" {
     block_c2ae8_info:
         const _c2ae8;
         const 4;
         const 4294967326;
         const S1YCH_srt+784;
 },
 showl_s1Yum_entry() //  [R1, R2]
         { []
         }
     {offset
       c2aeQ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2aeR; else goto c2aeS;
       c2aeR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2aeS: // global
           I64[Sp - 40] = block_c2adY_info;
           _s1Yum::P64 = R1;
           _s1Yty::P64 = P64[R1 + 7];
           _s1Ytz::P64 = P64[R1 + 15];
           _s1Yul::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _s1Yty::P64;
           P64[Sp - 24] = _s1Ytz::P64;
           P64[Sp - 16] = _s1Yul::P64;
           P64[Sp - 8] = _s1Yum::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2aeZ; else goto c2adZ;
       u2aeZ: // global
           call _c2adY(R1) args: 0, res: 0, upd: 0;
       c2adZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . showl_s1Yum_info" {
     showl_s1Yum_info:
         const showl_s1Yum_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S1YCH_srt+784;
 },
 _c2adY() //  [R1]
         { []
         }
     {offset
       c2adY: // global
           if (R1 & 7 == 1) goto c2aeN; else goto c2aeO;
       c2aeN: // global
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2aeO: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c2aeY; else goto c2aeX;
       c2aeY: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2aeX: // global
           _s1Yup::P64 = P64[R1 + 6];
           _s1Yuq::P64 = P64[R1 + 14];
           I64[Hp - 72] = sat_s1YuB_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _s1Yup::P64;
           P64[Hp - 24] = _s1Yuq::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2adY_info" {
     block_c2adY_info:
         const _c2adY;
         const 4;
         const 4294967326;
         const S1YCH_srt+784;
 },
 sat_s1YuC_entry() //  [R1]
         { []
         }
     {offset
       c2af0: // global
           _s1YuC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2af1; else goto c2af2;
       c2af2: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c2af4; else goto c2af3;
       c2af4: // global
           HpAlloc = 56;
           goto c2af1;
       c2af1: // global
           R1 = _s1YuC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2af3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1YuC::P64;
           _s1Yty::P64 = P64[_s1YuC::P64 + 16];
           _s1Ytz::P64 = P64[_s1YuC::P64 + 24];
           _s1Yu1::P64 = P64[_s1YuC::P64 + 32];
           _s1Yud::P64 = P64[_s1YuC::P64 + 40];
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = GHC.Show.showList__2_closure;
           P64[Hp - 32] = _s1Yu1::P64;
           I64[Hp - 24] = showl_s1Yum_info;
           P64[Hp - 16] = _s1Yty::P64;
           P64[Hp - 8] = _s1Ytz::P64;
           P64[Hp] = Hp - 46;
           R2 = _s1Yud::P64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call showl_s1Yum_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YuC_info" {
     sat_s1YuC_info:
         const sat_s1YuC_entry;
         const 4;
         const 4294967311;
         const S1YCH_srt+784;
 },
 sat_s1Yui_entry() //  [R1]
         { []
         }
     {offset
       c2afa: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2afb; else goto c2afc;
       c2afb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2afc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Yui_info" {
     sat_s1Yui_info:
         const sat_s1Yui_entry;
         const 2;
         const 18;
 },
 sat_s1Yuh_entry() //  [R1]
         { []
         }
     {offset
       c2afi: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2afj; else goto c2afk;
       c2afj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2afk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Yuh_info" {
     sat_s1Yuh_info:
         const sat_s1Yuh_entry;
         const 2;
         const 18;
 },
 sat_s1YuE_entry() //  [R1]
         { []
         }
     {offset
       c2afm: // global
           _s1YuE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2afn; else goto c2afo;
       c2afo: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto c2afq; else goto c2afp;
       c2afq: // global
           HpAlloc = 184;
           goto c2afn;
       c2afn: // global
           R1 = _s1YuE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2afp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1YuE::P64;
           _s1Yty::P64 = P64[_s1YuE::P64 + 16];
           _s1Ytz::P64 = P64[_s1YuE::P64 + 24];
           _s1Yu1::P64 = P64[_s1YuE::P64 + 32];
           _s1Yud::P64 = P64[_s1YuE::P64 + 40];
           _s1Yuf::P64 = P64[_s1YuE::P64 + 48];
           _s1Yug::P64 = P64[_s1YuE::P64 + 56];
           I64[Hp - 176] = sat_s1YuC_info;
           P64[Hp - 160] = _s1Yty::P64;
           P64[Hp - 152] = _s1Ytz::P64;
           P64[Hp - 144] = _s1Yu1::P64;
           P64[Hp - 136] = _s1Yud::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 112] = Hp - 176;
           I64[Hp - 104] = sat_s1Yui_info;
           P64[Hp - 88] = _s1Ytz::P64;
           P64[Hp - 80] = _s1Yug::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = GHC.Types.[]_closure+1;
           I64[Hp - 48] = sat_s1Yuh_info;
           P64[Hp - 32] = _s1Yty::P64;
           P64[Hp - 24] = _s1Yuf::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 126;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YuE_info" {
     sat_s1YuE_info:
         const sat_s1YuE_entry;
         const 6;
         const 4294967311;
         const S1YCH_srt+784;
 },
 sat_s1YuF_entry() //  [R1]
         { []
         }
     {offset
       c2afr: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2aft; else goto c2afu;
       c2aft: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2afu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_c2adF_info;
           _s1Yty::P64 = P64[R1 + 16];
           _s1Ytz::P64 = P64[R1 + 24];
           _s1Yu1::P64 = P64[R1 + 32];
           _s1Yud::P64 = P64[R1 + 48];
           R1 = P64[R1 + 40];
           P64[Sp - 48] = _s1Yty::P64;
           P64[Sp - 40] = _s1Ytz::P64;
           P64[Sp - 32] = _s1Yu1::P64;
           P64[Sp - 24] = _s1Yud::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u2afy; else goto c2adG;
       u2afy: // global
           call _c2adF(R1) args: 0, res: 0, upd: 0;
       c2adG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YuF_info" {
     sat_s1YuF_info:
         const sat_s1YuF_entry;
         const 5;
         const 4294967311;
         const S1YCH_srt+784;
 },
 _c2adF() //  [R1]
         { []
         }
     {offset
       c2adF: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2afx; else goto c2afw;
       c2afx: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2afw: // global
           _s1Yuf::P64 = P64[R1 + 7];
           _s1Yug::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_s1YuE_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _s1Yuf::P64;
           P64[Hp - 24] = _s1Yug::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2adF_info" {
     block_c2adF_info:
         const _c2adF;
         const 4;
         const 4294967326;
         const S1YCH_srt+784;
 },
 sat_s1YuG_entry() //  [R1]
         { []
         }
     {offset
       c2afD: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2afE; else goto c2afF;
       c2afE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2afF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c2adv_info;
           _s1Yty::P64 = P64[R1 + 16];
           _s1Ytz::P64 = P64[R1 + 24];
           _s1Yu1::P64 = P64[R1 + 40];
           R1 = P64[R1 + 32];
           P64[Sp - 40] = _s1Yty::P64;
           P64[Sp - 32] = _s1Ytz::P64;
           P64[Sp - 24] = _s1Yu1::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2afM; else goto c2adw;
       u2afM: // global
           call _c2adv(R1) args: 0, res: 0, upd: 0;
       c2adw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YuG_info" {
     sat_s1YuG_info:
         const sat_s1YuG_entry;
         const 4;
         const 4294967311;
         const S1YCH_srt+784;
 },
 _c2adv() //  [R1]
         { []
         }
     {offset
       c2adv: // global
           _s1Yu1::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c2afA; else goto c2afB;
       c2afA: // global
           R3 = _s1Yu1::P64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp + 32;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
       c2afB: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c2afL; else goto c2afK;
       c2afL: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2afK: // global
           _s1Yuc::P64 = P64[R1 + 6];
           _s1Yud::P64 = P64[R1 + 14];
           I64[Hp - 72] = sat_s1YuF_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = _s1Yu1::P64;
           P64[Hp - 32] = _s1Yuc::P64;
           P64[Hp - 24] = _s1Yud::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2adv_info" {
     block_c2adv_info:
         const _c2adv;
         const 3;
         const 4294967326;
         const S1YCH_srt+784;
 },
 sat_s1Yu8_entry() //  [R1]
         { []
         }
     {offset
       c2afT: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2afU; else goto c2afV;
       c2afU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2afV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Yu8_info" {
     sat_s1Yu8_info:
         const sat_s1Yu8_entry;
         const 2;
         const 18;
 },
 sat_s1Yu7_entry() //  [R1]
         { []
         }
     {offset
       c2ag1: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2ag2; else goto c2ag3;
       c2ag2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ag3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Yu7_info" {
     sat_s1Yu7_info:
         const sat_s1Yu7_entry;
         const 2;
         const 18;
 },
 sat_s1YuJ_entry() //  [R1]
         { []
         }
     {offset
       c2ag5: // global
           _s1YuJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2ag6; else goto c2ag7;
       c2ag7: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto c2ag9; else goto c2ag8;
       c2ag9: // global
           HpAlloc = 208;
           goto c2ag6;
       c2ag6: // global
           R1 = _s1YuJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ag8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1YuJ::P64;
           _s1Yty::P64 = P64[_s1YuJ::P64 + 16];
           _s1Ytz::P64 = P64[_s1YuJ::P64 + 24];
           _s1YtC::P64 = P64[_s1YuJ::P64 + 32];
           _s1Yu1::P64 = P64[_s1YuJ::P64 + 40];
           _s1Yu3::P64 = P64[_s1YuJ::P64 + 48];
           _s1Yu4::P64 = P64[_s1YuJ::P64 + 56];
           I64[Hp - 200] = sat_s1YuG_info;
           P64[Hp - 184] = _s1Yty::P64;
           P64[Hp - 176] = _s1Ytz::P64;
           P64[Hp - 168] = _s1YtC::P64;
           P64[Hp - 160] = _s1Yu1::P64;
           I64[Hp - 152] = :_con_info;
           P64[Hp - 144] = f_r1Xus_closure+1;
           P64[Hp - 136] = Hp - 200;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 112] = Hp - 150;
           I64[Hp - 104] = sat_s1Yu8_info;
           P64[Hp - 88] = _s1Yty::P64;
           P64[Hp - 80] = _s1Yu4::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = GHC.Types.[]_closure+1;
           I64[Hp - 48] = sat_s1Yu7_info;
           P64[Hp - 32] = _s1Yty::P64;
           P64[Hp - 24] = _s1Yu3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 126;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YuJ_info" {
     sat_s1YuJ_info:
         const sat_s1YuJ_entry;
         const 6;
         const 4294967311;
         const S1YCH_srt+784;
 },
 sat_s1YuK_entry() //  [R1]
         { []
         }
     {offset
       c2aga: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2agc; else goto c2agd;
       c2agc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2agd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_c2adi_info;
           _s1Yty::P64 = P64[R1 + 16];
           _s1Ytz::P64 = P64[R1 + 24];
           _s1YtC::P64 = P64[R1 + 40];
           _s1Yu1::P64 = P64[R1 + 48];
           R1 = P64[R1 + 32];
           P64[Sp - 48] = _s1Yty::P64;
           P64[Sp - 40] = _s1Ytz::P64;
           P64[Sp - 32] = _s1YtC::P64;
           P64[Sp - 24] = _s1Yu1::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u2agh; else goto c2adj;
       u2agh: // global
           call _c2adi(R1) args: 0, res: 0, upd: 0;
       c2adj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YuK_info" {
     sat_s1YuK_info:
         const sat_s1YuK_entry;
         const 5;
         const 4294967311;
         const S1YCH_srt+784;
 },
 _c2adi() //  [R1]
         { []
         }
     {offset
       c2adi: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2agg; else goto c2agf;
       c2agg: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2agf: // global
           _s1Yu3::P64 = P64[R1 + 7];
           _s1Yu4::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_s1YuJ_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _s1Yu3::P64;
           P64[Hp - 24] = _s1Yu4::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2adi_info" {
     block_c2adi_info:
         const _c2adi;
         const 4;
         const 4294967326;
         const S1YCH_srt+784;
 },
 p_s1Yu0_entry() //  [R1, R2]
         { []
         }
     {offset
       c2agi: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c2agm; else goto c2agl;
       c2agm: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2agl: // global
           _s1Yty::P64 = P64[R1 + 7];
           _s1Ytz::P64 = P64[R1 + 15];
           _s1YtB::P64 = P64[R1 + 23];
           _s1YtC::P64 = P64[R1 + 31];
           I64[Hp - 48] = sat_s1YuK_info;
           P64[Hp - 32] = _s1Yty::P64;
           P64[Hp - 24] = _s1Ytz::P64;
           P64[Hp - 16] = _s1YtB::P64;
           P64[Hp - 8] = _s1YtC::P64;
           P64[Hp] = R2;
           R3 = Hp - 48;
           R2 = lvl49_r1Xwl_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s1Yu0_info" {
     p_s1Yu0_info:
         const p_s1Yu0_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const S1YCH_srt+784;
 },
 sat_s1YuO_entry() //  [R1]
         { []
         }
     {offset
       c2agB: // global
           _s1YuO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2agC; else goto c2agD;
       c2agD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2agF; else goto c2agE;
       c2agF: // global
           HpAlloc = 24;
           goto c2agC;
       c2agC: // global
           R1 = _s1YuO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2agE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s1YuO::P64;
           _s1Yu0::P64 = P64[_s1YuO::P64 + 16];
           _s1YuM::P64 = P64[_s1YuO::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s1YuM::P64;
           R2 = Hp - 14;
           R1 = _s1Yu0::P64;
           Sp = Sp - 16;
           call p_s1Yu0_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YuO_info" {
     sat_s1YuO_info:
         const sat_s1YuO_entry;
         const 2;
         const 4294967314;
         const S1YCH_srt+784;
 },
 sat_s1YuP_entry() //  [R1, R2]
         { []
         }
     {offset
       c2agH: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c2agL; else goto c2agK;
       c2agL: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2agK: // global
           _s1Yu0::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s1YuO_info;
           P64[Hp - 32] = _s1Yu0::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1YuP_info" {
     sat_s1YuP_info:
         const sat_s1YuP_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S1YCH_srt+784;
 },
 GHC.Arr.$w$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2agP: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2agT; else goto c2agS;
       c2agT: // global
           HpAlloc = 88;
           R1 = GHC.Arr.$w$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       c2agS: // global
           I64[Hp - 80] = ls_s1YtC_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R6;
           I64[Hp - 48] = p_s1Yu0_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R6;
           P64[Hp - 16] = Hp - 80;
           _c2ad9::P64 = Hp - 47;
           if (%MO_S_Le_W64(R5, 10)) goto c2agN; else goto c2agO;
       c2agN: // global
           Hp = Hp - 16;
           R1 = _c2ad9::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2agO: // global
           I64[Hp - 8] = sat_s1YuP_info;
           P64[Hp] = _c2ad9::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$cshowsPrec_info" {
     GHC.Arr.$w$cshowsPrec_info:
         const GHC.Arr.$w$cshowsPrec_entry;
         const 0;
         const 27021602059190286;
         const 21474836480;
         const S1YCH_srt+616;
         const 517;
         const GHC.Arr.$w$cshowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.938805763 UTC

[section ""data" . GHC.Arr.$fShowArray_$cshowsPrec_closure" {
     GHC.Arr.$fShowArray_$cshowsPrec_closure:
         const GHC.Arr.$fShowArray_$cshowsPrec_info;
         const 0;
 },
 GHC.Arr.$fShowArray_$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2akc: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2akd; else goto c2ake;
       c2akd: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fShowArray_$cshowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2ake: // global
           I64[Sp - 40] = block_c2ak9_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2aki; else goto c2aka;
       u2aki: // global
           call _c2ak9(R1) args: 0, res: 0, upd: 0;
       c2aka: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fShowArray_$cshowsPrec_info" {
     GHC.Arr.$fShowArray_$cshowsPrec_info:
         const GHC.Arr.$fShowArray_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const S1YCH_srt+792;
 },
 _c2ak9() //  [R1]
         { []
         }
     {offset
       c2ak9: // global
           R6 = P64[Sp + 32];
           R5 = I64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Arr.$w$cshowsPrec_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ak9_info" {
     block_c2ak9_info:
         const _c2ak9;
         const 4;
         const 4294967326;
         const S1YCH_srt+792;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.945030935 UTC

[section ""data" . GHC.Arr.$fShowArray_$cshow_closure" {
     GHC.Arr.$fShowArray_$cshow_closure:
         const GHC.Arr.$fShowArray_$cshow_info;
         const 0;
 },
 GHC.Arr.$fShowArray_$cshow_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2akw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2akx; else goto c2aky;
       c2akx: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fShowArray_$cshow_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2aky: // global
           R6 = R5;
           R5 = 0;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Arr.$w$cshowsPrec_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fShowArray_$cshow_info" {
     GHC.Arr.$fShowArray_$cshow_info:
         const GHC.Arr.$fShowArray_$cshow_entry;
         const 0;
         const 21474836494;
         const 17179869208;
         const S1YCH_srt+792;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.94991936 UTC

[section ""data" . GHC.Arr.$fShowArray_$cshowList_closure" {
     GHC.Arr.$fShowArray_$cshowList_closure:
         const GHC.Arr.$fShowArray_$cshowList_info;
         const 0;
 },
 sat_s1Yv7_entry() //  [R1, R2]
         { []
         }
     {offset
       c2akN: // global
           R6 = R2;
           R5 = 0;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$w$cshowsPrec_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Yv7_info" {
     sat_s1Yv7_info:
         const sat_s1Yv7_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S1YCH_srt+792;
 },
 GHC.Arr.$fShowArray_$cshowList_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2akQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2akU; else goto c2akT;
       c2akU: // global
           HpAlloc = 32;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fShowArray_$cshowList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2akT: // global
           I64[Hp - 24] = sat_s1Yv7_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R4 = R6;
           R3 = R5;
           R2 = Hp - 23;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fShowArray_$cshowList_info" {
     GHC.Arr.$fShowArray_$cshowList_info:
         const GHC.Arr.$fShowArray_$cshowList_entry;
         const 0;
         const 38654705678;
         const 21474836505;
         const S1YCH_srt+792;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.957282604 UTC

[section ""data" . GHC.Arr.$fShowArray_closure" {
     GHC.Arr.$fShowArray_closure:
         const GHC.Arr.$fShowArray_info;
         const 0;
 },
 sat_s1Yvd_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2alb: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fShowArray_$cshowList_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Yvd_info" {
     sat_s1Yvd_info:
         const sat_s1Yvd_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const S1YCH_srt+816;
 },
 sat_s1Yvc_entry() //  [R1, R2]
         { []
         }
     {offset
       c2alj: // global
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$fShowArray_$cshow_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Yvc_info" {
     sat_s1Yvc_info:
         const sat_s1Yvc_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S1YCH_srt+808;
 },
 sat_s1Yvb_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2alr: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fShowArray_$cshowsPrec_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s1Yvb_info" {
     sat_s1Yvb_info:
         const sat_s1Yvb_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const S1YCH_srt+800;
 },
 GHC.Arr.$fShowArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2alv: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c2alz; else goto c2aly;
       c2alz: // global
           HpAlloc = 128;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fShowArray_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2aly: // global
           I64[Hp - 120] = sat_s1Yvd_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           I64[Hp - 88] = sat_s1Yvc_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = sat_s1Yvb_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 54;
           P64[Hp - 8] = Hp - 87;
           P64[Hp] = Hp - 118;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fShowArray_info" {
     GHC.Arr.$fShowArray_info:
         const GHC.Arr.$fShowArray_entry;
         const 0;
         const 64424509454;
         const 12884901911;
         const S1YCH_srt+800;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:41.972253617 UTC

[section ""data" . GHC.Arr.accumArray_closure" {
     GHC.Arr.accumArray_closure:
         const GHC.Arr.accumArray_info;
         const 0;
 },
 sat_s1YvF_entry() //  [R1]
         { []
         }
     {offset
       c2amr: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2ams; else goto c2amt;
       c2ams: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2amt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c2amm_info;
           _s1Yvl::P64 = P64[R1 + 24];
           _s1YvC::P64 = P64[R1 + 32];
           _s1Yvn::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s1Yvl::P64;
           I64[Sp - 32] = _s1Yvn::I64;
           P64[Sp - 24] = _s1YvC::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YvF_info" {
     sat_s1YvF_info:
         const sat_s1YvF_entry;
         const 4294967299;
         const 15;
 },
 _c2amm() //  [R1]
         { []
         }
     {offset
       c2amm: // global
           I64[Sp] = block_c2amo_info;
           _s1YvD::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1YvD::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c2amm_info" {
     block_c2amm_info:
         const _c2amm;
         const 131;
         const 30;
 },
 _c2amo() //  [R1]
         { []
         }
     {offset
       c2amo: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2amx; else goto c2amw;
       c2amx: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2amw: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2amo_info" {
     block_c2amo_info:
         const _c2amo;
         const 131;
         const 30;
 },
 section ""relreadonly" . u2anV_srtd" {
     u2anV_srtd:
         const S1YCH_srt+88;
         const 94;
         const 1;
         const 536870916;
 },
 GHC.Arr.accumArray_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2amy: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c2amz; else goto c2amA;
       c2amz: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.accumArray_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2amA: // global
           I64[Sp - 40] = block_c2alV_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2anP; else goto c2alW;
       u2anP: // global
           call _c2alV(R1) args: 0, res: 0, upd: 0;
       c2alW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.accumArray_info" {
     GHC.Arr.accumArray_info:
         const GHC.Arr.accumArray_entry;
         const 0;
         const 18446744069414584334;
         const 21474836505;
         const u2anV_srtd;
 },
 section ""relreadonly" . u2anW_srtd" {
     u2anW_srtd:
         const S1YCH_srt+88;
         const 67;
         const 1;
         const 4;
 },
 _c2alV() //  [R1]
         { []
         }
     {offset
       c2alV: // global
           I64[Sp - 24] = block_c2am0_info;
           R2 = P64[Sp + 8];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R1;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 40;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2alV_info" {
     block_c2alV_info:
         const _c2alV;
         const 4;
         const 18446744069414584350;
         const u2anW_srtd;
 },
 section ""relreadonly" . u2anX_srtd" {
     u2anX_srtd:
         const S1YCH_srt+88;
         const 67;
         const 1;
         const 4;
 },
 _c2am0() //  [R1]
         { []
         }
     {offset
       c2am0: // global
           _s1Yvn::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1Yvn::I64, 0)) goto c2amE; else goto c2anH;
       c2amE: // global
           I64[Sp] = block_c2am7_info;
           R2 = P64[Sp + 48];
           R1 = _s1Yvn::I64;
           I64[Sp + 48] = _s1Yvn::I64;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
       c2anH: // global
           R1 = GHC.Arr.negRange_closure;
           Sp = Sp + 64;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2am0_info" {
     block_c2am0_info:
         const _c2am0;
         const 7;
         const 18446744069414584350;
         const u2anX_srtd;
 },
 _c2am7() //  [R1]
         { []
         }
     {offset
       c2am7: // global
           P64[Sp] = P64[Sp + 56];
           P64[Sp + 56] = R1;
           call _c2amW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2am7_info" {
     block_c2am7_info:
         const _c2am7;
         const 2055;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2amW() //  []
         { []
         }
     {offset
       c2amW: // global
           _s1YvH::P64 = P64[Sp];
           I64[Sp] = block_c2amY_info;
           R1 = _s1YvH::P64;
           if (R1 & 7 != 0) goto u2anR; else goto c2an0;
       u2anR: // global
           call _c2amY(R1) args: 0, res: 0, upd: 0;
       c2an0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2amY() //  [R1]
         { []
         }
     {offset
       c2amY: // global
           if (R1 & 7 == 1) goto u2anS; else goto c2ang;
       u2anS: // global
           call _c2amg() args: 0, res: 0, upd: 0;
       c2ang: // global
           I64[Sp - 8] = block_c2an9_info;
           _s1YvL::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s1YvL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2anT; else goto c2ana;
       u2anT: // global
           call _c2an9(R1) args: 0, res: 0, upd: 0;
       c2ana: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2amY_info" {
     block_c2amY_info:
         const _c2amY;
         const 2055;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2amg() //  []
         { []
         }
     {offset
       c2amg: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c2amS; else goto c2amR;
       c2amS: // global
           HpAlloc = 48;
           I64[Sp] = block_c2amg_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2amR: // global
           _s1Yvr::P64 = P64[Sp + 56];
           I64[_s1Yvr::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 40] = sat_s1YvF_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s1Yvr::P64;
           I64[Hp] = I64[Sp + 48];
           P64[Sp + 56] = Hp - 40;
           Sp = Sp + 56;
           call _c2am9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2amg_info" {
     block_c2amg_info:
         const _c2amg;
         const 3847;
         const 30;
 },
 _c2an9() //  [R1]
         { []
         }
     {offset
       c2an9: // global
           I64[Sp - 8] = block_c2ane_info;
           R2 = P64[Sp + 40];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 32];
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 32;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2an9_info" {
     block_c2an9_info:
         const _c2an9;
         const 4104;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2ane() //  [R1]
         { []
         }
     {offset
       c2ane: // global
           _s1Yvn::I64 = I64[Sp + 64];
           _s1YvQ::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1YvQ::I64)) goto c2anp; else goto c2anC;
       c2anp: // global
           I64[Sp + 72] = block_c2amO_info;
           R3 = _s1Yvn::I64;
           R2 = _s1YvQ::I64;
           Sp = Sp + 72;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 8, upd: 8;
       c2anC: // global
           if (%MO_S_Ge_W64(_s1YvQ::I64,
                            _s1Yvn::I64)) goto c2anv; else goto c2anz;
       c2anv: // global
           I64[Sp + 72] = block_c2amO_info;
           R3 = _s1Yvn::I64;
           R2 = _s1YvQ::I64;
           Sp = Sp + 72;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 8, upd: 8;
       c2anz: // global
           _s1YvV::P64 = P64[P64[Sp + 72] + ((_s1YvQ::I64 << 3) + 24)];
           I64[Sp] = block_c2any_info;
           R3 = P64[Sp + 8];
           R2 = _s1YvV::P64;
           R1 = P64[Sp + 56];
           I64[Sp + 8] = _s1YvQ::I64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ane_info" {
     block_c2ane_info:
         const _c2ane;
         const 8201;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2amO() //  [R1]
         { []
         }
     {offset
       c2amO: // global
           P64[Sp] = R1;
           call _c2am9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2amO_info" {
     block_c2amO_info:
         const _c2amO;
         const 0;
         const 30;
 },
 _c2am9() //  []
         { []
         }
     {offset
       c2am9: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2any() //  [R1]
         { []
         }
     {offset
       c2any: // global
           _s1Yvr::P64 = P64[Sp + 72];
           _s1YvL::P64 = P64[Sp + 16];
           _s1YvQ::I64 = I64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s1Yvr::P64 + 24) + (_s1YvQ::I64 << 3)] = R1;
           I64[_s1Yvr::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1Yvr::P64 + 24) + ((I64[_s1Yvr::P64 + 8] << 3) + (_s1YvQ::I64 >> 7))] = 1 :: W8;
           P64[Sp + 16] = _s1YvL::P64;
           Sp = Sp + 16;
           call _c2amW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2any_info" {
     block_c2any_info:
         const _c2any;
         const 8265;
         const 4294967326;
         const S1YCH_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:42.006470475 UTC

[section ""data" . GHC.Arr.array_closure" {
     GHC.Arr.array_closure:
         const GHC.Arr.array_info;
         const 0;
 },
 sat_s1Ywr_entry() //  [R1]
         { []
         }
     {offset
       c2apM: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2apN; else goto c2apO;
       c2apN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2apO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c2apH_info;
           _s1Yw7::P64 = P64[R1 + 24];
           _s1Ywo::P64 = P64[R1 + 32];
           _s1Yw9::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s1Yw7::P64;
           I64[Sp - 32] = _s1Yw9::I64;
           P64[Sp - 24] = _s1Ywo::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Ywr_info" {
     sat_s1Ywr_info:
         const sat_s1Ywr_entry;
         const 4294967299;
         const 15;
 },
 _c2apH() //  [R1]
         { []
         }
     {offset
       c2apH: // global
           I64[Sp] = block_c2apJ_info;
           _s1Ywp::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1Ywp::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c2apH_info" {
     block_c2apH_info:
         const _c2apH;
         const 131;
         const 30;
 },
 _c2apJ() //  [R1]
         { []
         }
     {offset
       c2apJ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2apS; else goto c2apR;
       c2apS: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2apR: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2apJ_info" {
     block_c2apJ_info:
         const _c2apJ;
         const 131;
         const 30;
 },
 section ""relreadonly" . u2arb_srtd" {
     u2arb_srtd:
         const S1YCH_srt+88;
         const 95;
         const 9;
         const 1073741828;
 },
 GHC.Arr.array_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2apT: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c2apU; else goto c2apV;
       c2apU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.array_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2apV: // global
           I64[Sp - 24] = block_c2apg_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2ar5; else goto c2aph;
       u2ar5: // global
           call _c2apg(R1) args: 0, res: 0, upd: 0;
       c2aph: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.array_info" {
     GHC.Arr.array_info:
         const GHC.Arr.array_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u2arb_srtd;
 },
 section ""relreadonly" . u2arc_srtd" {
     u2arc_srtd:
         const S1YCH_srt+88;
         const 67;
         const 9;
         const 4;
 },
 _c2apg() //  [R1]
         { []
         }
     {offset
       c2apg: // global
           I64[Sp - 24] = block_c2apl_info;
           R2 = P64[Sp + 8];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R1;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 40;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2apg_info" {
     block_c2apg_info:
         const _c2apg;
         const 2;
         const 18446744069414584350;
         const u2arc_srtd;
 },
 section ""relreadonly" . u2ard_srtd" {
     u2ard_srtd:
         const S1YCH_srt+88;
         const 67;
         const 9;
         const 4;
 },
 _c2apl() //  [R1]
         { []
         }
     {offset
       c2apl: // global
           _s1Yw9::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1Yw9::I64, 0)) goto c2apZ; else goto c2aqX;
       c2apZ: // global
           I64[Sp - 8] = block_c2aps_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           R1 = _s1Yw9::I64;
           I64[Sp] = _s1Yw9::I64;
           Sp = Sp - 8;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
       c2aqX: // global
           R1 = GHC.Arr.negRange_closure;
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2apl_info" {
     block_c2apl_info:
         const _c2apl;
         const 5;
         const 18446744069414584350;
         const u2ard_srtd;
 },
 _c2aps() //  [R1]
         { []
         }
     {offset
       c2aps: // global
           P64[Sp] = P64[Sp + 48];
           P64[Sp + 48] = R1;
           call _c2aqh() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2aps_info" {
     block_c2aps_info:
         const _c2aps;
         const 70;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2aqh() //  []
         { []
         }
     {offset
       c2aqh: // global
           _s1Ywt::P64 = P64[Sp];
           I64[Sp] = block_c2aqj_info;
           R1 = _s1Ywt::P64;
           if (R1 & 7 != 0) goto u2ar7; else goto c2aql;
       u2ar7: // global
           call _c2aqj(R1) args: 0, res: 0, upd: 0;
       c2aql: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2aqj() //  [R1]
         { []
         }
     {offset
       c2aqj: // global
           if (R1 & 7 == 1) goto u2ar8; else goto c2aqB;
       u2ar8: // global
           call _c2apB() args: 0, res: 0, upd: 0;
       c2aqB: // global
           I64[Sp - 8] = block_c2aqu_info;
           _s1Ywx::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s1Ywx::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2ar9; else goto c2aqv;
       u2ar9: // global
           call _c2aqu(R1) args: 0, res: 0, upd: 0;
       c2aqv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2aqj_info" {
     block_c2aqj_info:
         const _c2aqj;
         const 70;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2apB() //  []
         { []
         }
     {offset
       c2apB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c2aqd; else goto c2aqc;
       c2aqd: // global
           HpAlloc = 48;
           I64[Sp] = block_c2apB_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2aqc: // global
           _s1Ywd::P64 = P64[Sp + 48];
           I64[_s1Ywd::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 40] = sat_s1Ywr_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s1Ywd::P64;
           I64[Hp] = I64[Sp + 8];
           P64[Sp + 48] = Hp - 40;
           Sp = Sp + 48;
           call _c2apu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2apB_info" {
     block_c2apB_info:
         const _c2apB;
         const 1606;
         const 30;
 },
 _c2aqu() //  [R1]
         { []
         }
     {offset
       c2aqu: // global
           I64[Sp - 8] = block_c2aqz_info;
           R2 = P64[Sp + 48];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 40];
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 32;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2aqu_info" {
     block_c2aqu_info:
         const _c2aqu;
         const 135;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2aqz() //  [R1]
         { []
         }
     {offset
       c2aqz: // global
           _s1Yw9::I64 = I64[Sp + 24];
           _s1YwC::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1YwC::I64)) goto c2aqK; else goto c2aqS;
       c2aqK: // global
           I64[Sp + 64] = block_c2aq9_info;
           R3 = _s1Yw9::I64;
           R2 = _s1YwC::I64;
           Sp = Sp + 64;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 8, upd: 8;
       c2aqS: // global
           if (%MO_S_Ge_W64(_s1YwC::I64,
                            _s1Yw9::I64)) goto c2aqQ; else goto c2aqR;
       c2aqQ: // global
           I64[Sp + 64] = block_c2aq9_info;
           R3 = _s1Yw9::I64;
           R2 = _s1YwC::I64;
           Sp = Sp + 64;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 8, upd: 8;
       c2aqR: // global
           _s1Ywd::P64 = P64[Sp + 64];
           _s1Ywx::P64 = P64[Sp + 16];
           _s1YwA::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s1Ywd::P64 + 24) + (_s1YwC::I64 << 3)] = _s1YwA::P64;
           I64[_s1Ywd::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1Ywd::P64 + 24) + ((I64[_s1Ywd::P64 + 8] << 3) + (_s1YwC::I64 >> 7))] = 1 :: W8;
           P64[Sp + 16] = _s1Ywx::P64;
           Sp = Sp + 16;
           call _c2aqh() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2aqz_info" {
     block_c2aqz_info:
         const _c2aqz;
         const 264;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2aq9() //  [R1]
         { []
         }
     {offset
       c2aq9: // global
           P64[Sp] = R1;
           call _c2apu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2aq9_info" {
     block_c2aq9_info:
         const _c2aq9;
         const 0;
         const 30;
 },
 _c2apu() //  []
         { []
         }
     {offset
       c2apu: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:42.043332535 UTC

[section ""data" . GHC.Arr.ixmap_closure" {
     GHC.Arr.ixmap_closure:
         const GHC.Arr.ixmap_info;
         const 0;
 },
 sat_s1Yxb_entry() //  [R1]
         { []
         }
     {offset
       c2at2: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2at3; else goto c2at4;
       c2at3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2at4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c2asX_info;
           _s1YwR::P64 = P64[R1 + 24];
           _s1Yx8::P64 = P64[R1 + 32];
           _s1YwT::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s1YwR::P64;
           I64[Sp - 32] = _s1YwT::I64;
           P64[Sp - 24] = _s1Yx8::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1Yxb_info" {
     sat_s1Yxb_info:
         const sat_s1Yxb_entry;
         const 4294967299;
         const 15;
 },
 _c2asX() //  [R1]
         { []
         }
     {offset
       c2asX: // global
           I64[Sp] = block_c2asZ_info;
           _s1Yx9::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s1Yx9::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c2asX_info" {
     block_c2asX_info:
         const _c2asX;
         const 131;
         const 30;
 },
 _c2asZ() //  [R1]
         { []
         }
     {offset
       c2asZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2at8; else goto c2at7;
       c2at8: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2at7: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2asZ_info" {
     block_c2asZ_info:
         const _c2asZ;
         const 131;
         const 30;
 },
 sat_s1YxB_entry() //  [R1]
         { []
         }
     {offset
       c2atD: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2atJ; else goto c2atK;
       c2atJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2atK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c2atA_info;
           _s1YwL::P64 = P64[R1 + 16];
           _s1YwN::P64 = P64[R1 + 24];
           _s1Yxg::P64 = P64[R1 + 40];
           R1 = P64[R1 + 32];
           P64[Sp - 40] = _s1YwL::P64;
           P64[Sp - 32] = _s1YwN::P64;
           P64[Sp - 24] = _s1Yxg::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2au4; else goto c2atB;
       u2au4: // global
           call _c2atA(R1) args: 0, res: 0, upd: 0;
       c2atB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s1YxB_info" {
     sat_s1YxB_info:
         const sat_s1YxB_entry;
         const 4;
         const 4294967311;
         const S1YCH_srt+616;
 },
 _c2atA() //  [R1]
         { []
         }
     {offset
       c2atA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c2atN; else goto c2atM;
       c2atN: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2atM: // global
           _s1Yxn::P64 = P64[R1 + 7];
           _s1Yxo::P64 = P64[R1 + 15];
           _s1Yxq::P64 = P64[R1 + 23];
           _s1Yxp::I64 = I64[R1 + 31];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s1Yxn::P64;
           P64[Hp] = _s1Yxo::P64;
           _s1YwL::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2atI_info;
           R2 = _s1YwL::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = Hp - 15;
           P64[Sp] = Hp - 48;
           P64[Sp + 16] = _s1Yxq::P64;
           I64[Sp + 24] = _s1Yxp::I64;
           Sp = Sp - 16;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c2atA_info" {
     block_c2atA_info:
         const _c2atA;
         const 3;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2atI() //  [R1]
         { []
         }
     {offset
       c2atI: // global
           _s1Yxp::I64 = I64[Sp + 16];
           _s1Yxu::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1Yxu::I64)) goto c2au1; else goto c2au3;
       c2au3: // global
           if (%MO_S_Ge_W64(_s1Yxu::I64,
                            _s1Yxp::I64)) goto c2au1; else goto c2au2;
       c2au1: // global
           R3 = _s1Yxp::I64;
           R2 = _s1Yxu::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2au2: // global
           R1 = P64[P64[Sp + 8] + ((_s1Yxu::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2atI_info" {
     block_c2atI_info:
         const _c2atI;
         const 130;
         const 4294967326;
         const S1YCH_srt+616;
 },
 section ""relreadonly" . u2auY_srtd" {
     u2auY_srtd:
         const S1YCH_srt+88;
         const 96;
         const 9;
         const 2147483652;
 },
 GHC.Arr.ixmap_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2au5: // global
           if ((Sp + -120) < SpLim) (likely: False) goto c2au6; else goto c2au7;
       c2au6: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.ixmap_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2au7: // global
           I64[Sp - 40] = block_c2ass_info;
           R1 = R4;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2auW; else goto c2ast;
       u2auW: // global
           call _c2ass(R1) args: 0, res: 0, upd: 0;
       c2ast: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.ixmap_info" {
     GHC.Arr.ixmap_info:
         const GHC.Arr.ixmap_entry;
         const 0;
         const 18446744069414584334;
         const 21474836505;
         const u2auY_srtd;
 },
 section ""relreadonly" . u2auZ_srtd" {
     u2auZ_srtd:
         const S1YCH_srt+88;
         const 67;
         const 9;
         const 4;
 },
 _c2ass() //  [R1]
         { []
         }
     {offset
       c2ass: // global
           I64[Sp - 24] = block_c2asx_info;
           R2 = P64[Sp + 8];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R1;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 40;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ass_info" {
     block_c2ass_info:
         const _c2ass;
         const 4;
         const 18446744069414584350;
         const u2auZ_srtd;
 },
 section ""relreadonly" . u2av0_srtd" {
     u2av0_srtd:
         const S1YCH_srt+88;
         const 67;
         const 9;
         const 4;
 },
 _c2asx() //  [R1]
         { []
         }
     {offset
       c2asx: // global
           _s1YwT::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s1YwT::I64, 0)) goto c2aub; else goto c2auL;
       c2aub: // global
           I64[Sp - 8] = block_c2asE_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           R1 = _s1YwT::I64;
           I64[Sp] = _s1YwT::I64;
           Sp = Sp - 8;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
       c2auL: // global
           R1 = GHC.Arr.negRange_closure;
           Sp = Sp + 64;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2asx_info" {
     block_c2asx_info:
         const _c2asx;
         const 7;
         const 18446744069414584350;
         const u2av0_srtd;
 },
 _c2asE() //  [R1]
         { []
         }
     {offset
       c2asE: // global
           I64[Sp - 8] = block_c2asG_info;
           R2 = P64[Sp + 40];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = P64[Sp + 32];
           P64[Sp] = R1;
           Sp = Sp - 24;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2asE_info" {
     block_c2asE_info:
         const _c2asE;
         const 72;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2asG() //  [R1]
         { []
         }
     {offset
       c2asG: // global
           P64[Sp] = R1;
           call _c2atc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2asG_info" {
     block_c2asG_info:
         const _c2asG;
         const 137;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2atc() //  []
         { []
         }
     {offset
       c2atc: // global
           _s1Yxd::P64 = P64[Sp];
           I64[Sp] = block_c2ate_info;
           R1 = _s1Yxd::P64;
           if (R1 & 7 != 0) goto u2auT; else goto c2atf;
       u2auT: // global
           call _c2ate(R1) args: 0, res: 0, upd: 0;
       c2atf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2ate() //  [R1]
         { []
         }
     {offset
       c2ate: // global
           if (R1 & 7 == 1) goto u2auU; else goto c2aux;
       u2auU: // global
           call _c2asR() args: 0, res: 0, upd: 0;
       c2aux: // global
           I64[Sp - 16] = block_c2atk_info;
           R2 = P64[Sp + 48];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[Sp + 40];
           _s1Yxg::P64 = P64[R1 + 6];
           P64[Sp - 24] = _s1Yxg::P64;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = _s1Yxg::P64;
           Sp = Sp - 40;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ate_info" {
     block_c2ate_info:
         const _c2ate;
         const 137;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2asR() //  []
         { []
         }
     {offset
       c2asR: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c2auq; else goto c2aup;
       c2auq: // global
           HpAlloc = 48;
           I64[Sp] = block_c2asR_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2aup: // global
           _s1YwX::P64 = P64[Sp + 8];
           I64[_s1YwX::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 40] = sat_s1Yxb_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = _s1YwX::P64;
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 72] = Hp - 40;
           Sp = Sp + 72;
           call _c2asK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2asR_info" {
     block_c2asR_info:
         const _c2asR;
         const 31881;
         const 30;
 },
 _c2atk() //  [R1]
         { []
         }
     {offset
       c2atk: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c2auA; else goto c2auz;
       c2auA: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2auz: // global
           _s1YwT::I64 = I64[Sp + 32];
           _s1Yxj::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1Yxj::I64)) goto c2auC; else goto c2auG;
       c2auC: // global
           Hp = Hp - 48;
           I64[Sp + 88] = block_c2aum_info;
           R3 = _s1YwT::I64;
           R2 = _s1Yxj::I64;
           Sp = Sp + 88;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 8, upd: 8;
       c2auG: // global
           if (%MO_S_Ge_W64(_s1Yxj::I64,
                            _s1YwT::I64)) goto c2auE; else goto c2auF;
       c2auE: // global
           Hp = Hp - 48;
           I64[Sp + 88] = block_c2aum_info;
           R3 = _s1YwT::I64;
           R2 = _s1Yxj::I64;
           Sp = Sp + 88;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 8, upd: 8;
       c2auF: // global
           I64[Hp - 40] = sat_s1YxB_info;
           P64[Hp - 24] = P64[Sp + 72];
           P64[Hp - 16] = P64[Sp + 80];
           P64[Hp - 8] = P64[Sp + 88];
           P64[Hp] = P64[Sp + 16];
           _s1YwX::P64 = P64[Sp + 24];
           _s1Yxh::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s1YwX::P64 + 24) + (_s1Yxj::I64 << 3)] = Hp - 40;
           I64[_s1YwX::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1YwX::P64 + 24) + ((I64[_s1YwX::P64 + 8] << 3) + (_s1Yxj::I64 >> 7))] = 1 :: W8;
           P64[Sp + 16] = _s1Yxh::P64;
           Sp = Sp + 16;
           call _c2atc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2atk_info" {
     block_c2atk_info:
         const _c2atk;
         const 523;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2aum() //  [R1]
         { []
         }
     {offset
       c2aum: // global
           P64[Sp] = R1;
           call _c2asK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2aum_info" {
     block_c2aum_info:
         const _c2aum;
         const 0;
         const 30;
 },
 _c2asK() //  []
         { []
         }
     {offset
       c2asK: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:42.1938721 UTC

[section ""data" . GHC.Arr.//_closure" {
     GHC.Arr.//_closure:
         const GHC.Arr.//_info;
         const 0;
 },
 section ""relreadonly" . u2ayr_srtd" {
     u2ayr_srtd:
         const S1YCH_srt+112;
         const 94;
         const 9223372036854775809;
         const 536870912;
 },
 GHC.Arr.//_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2awB: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c2awC; else goto c2awD;
       c2awC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.//_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2awD: // global
           I64[Sp - 24] = block_c2awy_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2ayi; else goto c2awz;
       u2ayi: // global
           call _c2awy(R1) args: 0, res: 0, upd: 0;
       c2awz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.//_info" {
     GHC.Arr.//_info:
         const GHC.Arr.//_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u2ayr_srtd;
 },
 section ""relreadonly" . u2ays_srtd" {
     u2ays_srtd:
         const S1YCH_srt+112;
         const 64;
         const 9223372036854775809;
 },
 _c2awy() //  [R1]
         { []
         }
     {offset
       c2awy: // global
           I64[Sp - 32] = block_c2awG_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           _s1YxM::P64 = P64[R1 + 7];
           _s1YxN::P64 = P64[R1 + 15];
           _s1YxP::P64 = P64[R1 + 23];
           _s1YxO::I64 = I64[R1 + 31];
           R1 = _s1YxO::I64;
           P64[Sp - 24] = _s1YxN::P64;
           I64[Sp - 16] = _s1YxO::I64;
           P64[Sp - 8] = _s1YxP::P64;
           P64[Sp] = _s1YxM::P64;
           Sp = Sp - 32;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2awy_info" {
     block_c2awy_info:
         const _c2awy;
         const 2;
         const 18446744069414584350;
         const u2ays_srtd;
 },
 _c2awG() //  [R1]
         { []
         }
     {offset
       c2awG: // global
           _s1YxO::I64 = I64[Sp + 16];
           _s1YxP::P64 = P64[Sp + 24];
           _s1YxS::P64 = R1;
           _s1Yyn::I64 = 0;
           goto c2axX;
       c2axX: // global
           if (_s1Yyn::I64 == _s1YxO::I64) goto u2ayd; else goto c2ay3;
       u2ayd: // global
           P64[Sp + 24] = _s1YxS::P64;
           call _c2awN() args: 0, res: 0, upd: 0;
       c2ay3: // global
           _s1Yyr::P64 = P64[(_s1YxP::P64 + 24) + (_s1Yyn::I64 << 3)];
           call MO_WriteBarrier();
           P64[(_s1YxS::P64 + 24) + (_s1Yyn::I64 << 3)] = _s1Yyr::P64;
           I64[_s1YxS::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1YxS::P64 + 24) + ((I64[_s1YxS::P64 + 8] << 3) + (_s1Yyn::I64 >> 7))] = 1 :: W8;
           _s1Yyn::I64 = _s1Yyn::I64 + 1;
           goto c2axX;
     }
 },
 section ""relreadonly" . block_c2awG_info" {
     block_c2awG_info:
         const _c2awG;
         const 134;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2awN() //  []
         { []
         }
     {offset
       c2awN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2awR; else goto c2awQ;
       c2awR: // global
           HpAlloc = 24;
           I64[Sp] = block_c2awN_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2awQ: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           P64[Sp] = P64[Sp + 48];
           P64[Sp + 48] = Hp - 15;
           call _c2axi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2awN_info" {
     block_c2awN_info:
         const _c2awN;
         const 134;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2axi() //  []
         { []
         }
     {offset
       c2axi: // global
           _s1Yy9::P64 = P64[Sp];
           I64[Sp] = block_c2axk_info;
           R1 = _s1Yy9::P64;
           if (R1 & 7 != 0) goto u2ayn; else goto c2axm;
       u2ayn: // global
           call _c2axk(R1) args: 0, res: 0, upd: 0;
       c2axm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2axk() //  [R1]
         { []
         }
     {offset
       c2axk: // global
           if (R1 & 7 == 1) goto u2ayo; else goto c2axC;
       u2ayo: // global
           call _c2axa() args: 0, res: 0, upd: 0;
       c2axC: // global
           I64[Sp - 8] = block_c2axv_info;
           _s1Yyd::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s1Yyd::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2ayp; else goto c2axw;
       u2ayp: // global
           call _c2axv(R1) args: 0, res: 0, upd: 0;
       c2axw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2axk_info" {
     block_c2axk_info:
         const _c2axk;
         const 134;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2axa() //  []
         { []
         }
     {offset
       c2axa: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2axe; else goto c2axd;
       c2axe: // global
           HpAlloc = 40;
           I64[Sp] = block_c2axa_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2axd: // global
           _s1YxS::P64 = P64[Sp + 24];
           I64[_s1YxS::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s1YxS::P64;
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 48] = Hp - 31;
           Sp = Sp + 48;
           call _c2awT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2axa_info" {
     block_c2axa_info:
         const _c2axa;
         const 3206;
         const 30;
 },
 _c2axv() //  [R1]
         { []
         }
     {offset
       c2axv: // global
           I64[Sp - 8] = block_c2axA_info;
           R2 = P64[Sp + 48];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 56];
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 32;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2axv_info" {
     block_c2axv_info:
         const _c2axv;
         const 263;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2axA() //  [R1]
         { []
         }
     {offset
       c2axA: // global
           _s1YxO::I64 = I64[Sp + 32];
           _s1Yyi::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1Yyi::I64)) goto c2axL; else goto c2axT;
       c2axL: // global
           I64[Sp + 64] = block_c2ax5_info;
           R3 = _s1YxO::I64;
           R2 = _s1Yyi::I64;
           Sp = Sp + 64;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 8, upd: 8;
       c2axT: // global
           if (%MO_S_Ge_W64(_s1Yyi::I64,
                            _s1YxO::I64)) goto c2axR; else goto c2axS;
       c2axR: // global
           I64[Sp + 64] = block_c2ax5_info;
           R3 = _s1YxO::I64;
           R2 = _s1Yyi::I64;
           Sp = Sp + 64;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 8, upd: 8;
       c2axS: // global
           _s1YxS::P64 = P64[Sp + 40];
           _s1Yyd::P64 = P64[Sp + 16];
           _s1Yyg::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s1YxS::P64 + 24) + (_s1Yyi::I64 << 3)] = _s1Yyg::P64;
           I64[_s1YxS::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1YxS::P64 + 24) + ((I64[_s1YxS::P64 + 8] << 3) + (_s1Yyi::I64 >> 7))] = 1 :: W8;
           P64[Sp + 16] = _s1Yyd::P64;
           Sp = Sp + 16;
           call _c2axi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2axA_info" {
     block_c2axA_info:
         const _c2axA;
         const 520;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2ax5() //  [R1]
         { []
         }
     {offset
       c2ax5: // global
           P64[Sp] = R1;
           call _c2awT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2ax5_info" {
     block_c2ax5_info:
         const _c2ax5;
         const 0;
         const 30;
 },
 _c2awT() //  []
         { []
         }
     {offset
       c2awT: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:42.227348809 UTC

[section ""data" . GHC.Arr.accum_closure" {
     GHC.Arr.accum_closure:
         const GHC.Arr.accum_info;
         const 0;
 },
 section ""relreadonly" . u2aBu_srtd" {
     u2aBu_srtd:
         const S1YCH_srt+112;
         const 95;
         const 9223372036854775809;
         const 1073741824;
 },
 GHC.Arr.accum_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2azz: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c2azA; else goto c2azB;
       c2azA: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.accum_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2azB: // global
           I64[Sp - 32] = block_c2azw_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2aBl; else goto c2azx;
       u2aBl: // global
           call _c2azw(R1) args: 0, res: 0, upd: 0;
       c2azx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.accum_info" {
     GHC.Arr.accum_info:
         const GHC.Arr.accum_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u2aBu_srtd;
 },
 section ""relreadonly" . u2aBv_srtd" {
     u2aBv_srtd:
         const S1YCH_srt+112;
         const 64;
         const 9223372036854775809;
 },
 _c2azw() //  [R1]
         { []
         }
     {offset
       c2azw: // global
           I64[Sp - 32] = block_c2azE_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           _s1YyC::P64 = P64[R1 + 7];
           _s1YyD::P64 = P64[R1 + 15];
           _s1YyF::P64 = P64[R1 + 23];
           _s1YyE::I64 = I64[R1 + 31];
           R1 = _s1YyE::I64;
           P64[Sp - 24] = _s1YyD::P64;
           I64[Sp - 16] = _s1YyE::I64;
           P64[Sp - 8] = _s1YyF::P64;
           P64[Sp] = _s1YyC::P64;
           Sp = Sp - 32;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2azw_info" {
     block_c2azw_info:
         const _c2azw;
         const 3;
         const 18446744069414584350;
         const u2aBv_srtd;
 },
 _c2azE() //  [R1]
         { []
         }
     {offset
       c2azE: // global
           _s1YyE::I64 = I64[Sp + 16];
           _s1YyF::P64 = P64[Sp + 24];
           _s1YyI::P64 = R1;
           _s1Yzh::I64 = 0;
           goto c2aB0;
       c2aB0: // global
           if (_s1Yzh::I64 == _s1YyE::I64) goto u2aBg; else goto c2aB6;
       u2aBg: // global
           P64[Sp + 24] = _s1YyI::P64;
           call _c2azL() args: 0, res: 0, upd: 0;
       c2aB6: // global
           _s1Yzl::P64 = P64[(_s1YyF::P64 + 24) + (_s1Yzh::I64 << 3)];
           call MO_WriteBarrier();
           P64[(_s1YyI::P64 + 24) + (_s1Yzh::I64 << 3)] = _s1Yzl::P64;
           I64[_s1YyI::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1YyI::P64 + 24) + ((I64[_s1YyI::P64 + 8] << 3) + (_s1Yzh::I64 >> 7))] = 1 :: W8;
           _s1Yzh::I64 = _s1Yzh::I64 + 1;
           goto c2aB0;
     }
 },
 section ""relreadonly" . block_c2azE_info" {
     block_c2azE_info:
         const _c2azE;
         const 135;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2azL() //  []
         { []
         }
     {offset
       c2azL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2azP; else goto c2azO;
       c2azP: // global
           HpAlloc = 24;
           I64[Sp] = block_c2azL_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2azO: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           P64[Sp] = P64[Sp + 56];
           P64[Sp + 56] = Hp - 15;
           call _c2aAg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2azL_info" {
     block_c2azL_info:
         const _c2azL;
         const 135;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2aAg() //  []
         { []
         }
     {offset
       c2aAg: // global
           _s1YyZ::P64 = P64[Sp];
           I64[Sp] = block_c2aAi_info;
           R1 = _s1YyZ::P64;
           if (R1 & 7 != 0) goto u2aBq; else goto c2aAk;
       u2aBq: // global
           call _c2aAi(R1) args: 0, res: 0, upd: 0;
       c2aAk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2aAi() //  [R1]
         { []
         }
     {offset
       c2aAi: // global
           if (R1 & 7 == 1) goto u2aBr; else goto c2aAA;
       u2aBr: // global
           call _c2aA8() args: 0, res: 0, upd: 0;
       c2aAA: // global
           I64[Sp - 8] = block_c2aAt_info;
           _s1Yz3::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s1Yz3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2aBs; else goto c2aAu;
       u2aBs: // global
           call _c2aAt(R1) args: 0, res: 0, upd: 0;
       c2aAu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2aAi_info" {
     block_c2aAi_info:
         const _c2aAi;
         const 135;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2aA8() //  []
         { []
         }
     {offset
       c2aA8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2aAc; else goto c2aAb;
       c2aAc: // global
           HpAlloc = 40;
           I64[Sp] = block_c2aA8_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2aAb: // global
           _s1YyI::P64 = P64[Sp + 24];
           I64[_s1YyI::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s1YyI::P64;
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 56] = Hp - 31;
           Sp = Sp + 56;
           call _c2azR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2aA8_info" {
     block_c2aA8_info:
         const _c2aA8;
         const 7303;
         const 30;
 },
 _c2aAt() //  [R1]
         { []
         }
     {offset
       c2aAt: // global
           I64[Sp - 8] = block_c2aAy_info;
           R2 = P64[Sp + 48];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 64];
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 32;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2aAt_info" {
     block_c2aAt_info:
         const _c2aAt;
         const 264;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2aAy() //  [R1]
         { []
         }
     {offset
       c2aAy: // global
           _s1YyE::I64 = I64[Sp + 32];
           _s1Yz8::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s1Yz8::I64)) goto c2aAJ; else goto c2aAW;
       c2aAJ: // global
           I64[Sp + 72] = block_c2aA3_info;
           R3 = _s1YyE::I64;
           R2 = _s1Yz8::I64;
           Sp = Sp + 72;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 8, upd: 8;
       c2aAW: // global
           if (%MO_S_Ge_W64(_s1Yz8::I64,
                            _s1YyE::I64)) goto c2aAP; else goto c2aAT;
       c2aAP: // global
           I64[Sp + 72] = block_c2aA3_info;
           R3 = _s1YyE::I64;
           R2 = _s1Yz8::I64;
           Sp = Sp + 72;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 8, upd: 8;
       c2aAT: // global
           _s1Yzd::P64 = P64[P64[Sp + 40] + ((_s1Yz8::I64 << 3) + 24)];
           I64[Sp] = block_c2aAS_info;
           R3 = P64[Sp + 8];
           R2 = _s1Yzd::P64;
           R1 = P64[Sp + 64];
           I64[Sp + 8] = _s1Yz8::I64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2aAy_info" {
     block_c2aAy_info:
         const _c2aAy;
         const 521;
         const 4294967326;
         const S1YCH_srt+616;
 },
 _c2aA3() //  [R1]
         { []
         }
     {offset
       c2aA3: // global
           P64[Sp] = R1;
           call _c2azR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2aA3_info" {
     block_c2aA3_info:
         const _c2aA3;
         const 0;
         const 30;
 },
 _c2azR() //  []
         { []
         }
     {offset
       c2azR: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2aAS() //  [R1]
         { []
         }
     {offset
       c2aAS: // global
           _s1YyI::P64 = P64[Sp + 40];
           _s1Yz3::P64 = P64[Sp + 16];
           _s1Yz8::I64 = I64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s1YyI::P64 + 24) + (_s1Yz8::I64 << 3)] = R1;
           I64[_s1YyI::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s1YyI::P64 + 24) + ((I64[_s1YyI::P64 + 8] << 3) + (_s1Yz8::I64 >> 7))] = 1 :: W8;
           P64[Sp + 16] = _s1Yz3::P64;
           Sp = Sp + 16;
           call _c2aAg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2aAS_info" {
     block_c2aAS_info:
         const _c2aAS;
         const 585;
         const 4294967326;
         const S1YCH_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:42.2505374 UTC

[section ""data" . GHC.Arr.C:Ix_closure" {
     GHC.Arr.C:Ix_closure:
         const GHC.Arr.C:Ix_info;
 },
 GHC.Arr.C:Ix_slow() //  [R1]
         { []
         }
     {offset
       c2aCA: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.C:Ix_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.Arr.C:Ix_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2aCF: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c2aCJ; else goto c2aCI;
       c2aCJ: // global
           HpAlloc = 64;
           R1 = GHC.Arr.C:Ix_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c2aCI: // global
           I64[Hp - 56] = GHC.Arr.C:Ix_con_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 55;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.C:Ix_info" {
     GHC.Arr.C:Ix_info:
         const GHC.Arr.C:Ix_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const GHC.Arr.C:Ix_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:42.256037118 UTC

[section ""data" . GHC.Arr.STArray_closure" {
     GHC.Arr.STArray_closure:
         const GHC.Arr.STArray_info;
 },
 GHC.Arr.STArray_slow() //  [R1]
         { []
         }
     {offset
       c2aCU: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Arr.STArray_entry(R5,
                                      R4,
                                      R3,
                                      R2,
                                      R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Arr.STArray_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2aCZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2aD3; else goto c2aD2;
       c2aD3: // global
           HpAlloc = 40;
           R1 = GHC.Arr.STArray_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c2aD2: // global
           I64[Hp - 32] = GHC.Arr.STArray_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R5;
           I64[Hp] = R4;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.STArray_info" {
     GHC.Arr.STArray_info:
         const GHC.Arr.STArray_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 260;
         const GHC.Arr.STArray_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:42.262071285 UTC

[section ""data" . GHC.Arr.Array_closure" {
     GHC.Arr.Array_closure:
         const GHC.Arr.Array_info;
 },
 GHC.Arr.Array_slow() //  [R1]
         { []
         }
     {offset
       c2aDc: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Arr.Array_entry(R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Arr.Array_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2aDh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2aDl; else goto c2aDk;
       c2aDl: // global
           HpAlloc = 40;
           R1 = GHC.Arr.Array_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c2aDk: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R5;
           I64[Hp] = R4;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.Array_info" {
     GHC.Arr.Array_info:
         const GHC.Arr.Array_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 260;
         const GHC.Arr.Array_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:42.266971484 UTC

[section ""cstring" . i25jk_str" {
     i25jk_str:
         I8[] [98,97,115,101,58,71,72,67,46,65,114,114,46,67,58,73,120]
 },
 GHC.Arr.C:Ix_con_entry() //  [R1]
         { []
         }
     {offset
       c2aDt: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.C:Ix_con_info" {
     GHC.Arr.C:Ix_con_info:
         const GHC.Arr.C:Ix_con_entry;
         const 7;
         const 1;
         const i25jk_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:42.270344293 UTC

[section ""cstring" . i25jm_str" {
     i25jm_str:
         I8[] [98,97,115,101,58,71,72,67,46,65,114,114,46,83,84,65,114,114,97,121]
 },
 GHC.Arr.STArray_con_entry() //  [R1]
         { []
         }
     {offset
       c2aDz: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.STArray_con_info" {
     GHC.Arr.STArray_con_info:
         const GHC.Arr.STArray_con_entry;
         const 4294967299;
         const 1;
         const i25jm_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:42.273666155 UTC

[section ""cstring" . i25jo_str" {
     i25jo_str:
         I8[] [98,97,115,101,58,71,72,67,46,65,114,114,46,65,114,114,97,121]
 },
 GHC.Arr.Array_con_entry() //  [R1]
         { []
         }
     {offset
       c2aDF: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.Array_con_info" {
     GHC.Arr.Array_con_info:
         const GHC.Arr.Array_con_entry;
         const 4294967299;
         const 1;
         const i25jo_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:42.277323355 UTC

[section ""relreadonly" . S1YCH_srt" {
     S1YCH_srt:
         const lvl3_r1Xuw_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Arr.$wbadSafeIndex_closure;
         const GHC.Arr.badSafeIndex_closure;
         const GHC.Arr.$wfoldr1Elems_closure;
         const lvl5_r1Xvg_closure;
         const GHC.Arr.foldr1Elems_closure;
         const GHC.Arr.$wfoldl1Elems_closure;
         const lvl7_r1Xvi_closure;
         const GHC.Arr.foldl1Elems_closure;
         const GHC.Arr.safeRangeSize_closure;
         const GHC.Arr.negRange_closure;
         const $wnewSTArray_r1Xvk_closure;
         const newSTArray1_r1Xvl_closure;
         const GHC.Arr.arrEleBottom_closure;
         const GHC.Arr.freezeSTArray1_closure;
         const GHC.Arr.thawSTArray1_closure;
         const GHC.Arr.unsafeReplace_closure;
         const GHC.Arr.unsafeAccum_closure;
         const GHC.Arr.unsafeArray'_closure;
         const GHC.Arr.unsafeArray_closure;
         const GHC.Arr.listArray_closure;
         const GHC.Arr.amap_closure;
         const GHC.Arr.$fFunctorArray_$c<$_closure;
         const GHC.Arr.hopelessIndexError_closure;
         const GHC.Arr.$dmindex_closure;
         const GHC.Arr.$fIxWord_$cindex_closure;
         const GHC.Arr.$fIx(,)_$s$cindex_closure;
         const GHC.Arr.$fIx(,)_$cindex_closure;
         const GHC.Arr.$fIx(,,)_$s$cindex_closure;
         const GHC.Arr.$fIx(,,)_$cindex_closure;
         const GHC.Integer.Type.minusInteger_closure;
         const GHC.Arr.$fIxInteger_$cunsafeRangeSize_closure;
         const GHC.Arr.$w$crangeSize2_closure;
         const GHC.Arr.$fIxInteger_$crangeSize_closure;
         const GHC.Arr.$fIx(,,,,)_$cindex_closure;
         const GHC.Arr.$fIx(,,,,)_closure;
         const GHC.Arr.$fIx(,,,)_$cindex_closure;
         const GHC.Arr.$fIx(,,,)_closure;
         const GHC.Enum.$fEnumOrdering_$cenumFromTo_closure;
         const GHC.Arr.$fIxOrdering_$crange_closure;
         const GHC.Enum.$fEnumBool_$cenumFromTo_closure;
         const GHC.Arr.$fIxBool_$crange_closure;
         const GHC.Enum.$fEnumInteger_$cenumFromTo_closure;
         const GHC.Arr.$fIxInteger_$crange_closure;
         const GHC.Arr.$fIxInteger_$cunsafeIndex_closure;
         const GHC.Show.$fShow(,)_go1_closure;
         const GHC.Arr.$windexError_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Arr.indexError_closure;
         const lvl25_r1XvC_closure;
         const GHC.Arr.$fIxInt_$cindex_closure;
         const $wlvl_r1XvI_closure;
         const GHC.Show.$fShowOrdering_closure;
         const lvl20_r1Xvx_closure;
         const GHC.Arr.$fIxOrdering_$cindex_closure;
         const $wlvl1_r1XvJ_closure;
         const GHC.Show.$fShowBool_closure;
         const lvl16_r1Xvt_closure;
         const $wlvl2_r1XvK_closure;
         const GHC.Arr.$fIxBool_$cindex_closure;
         const lvl31_r1XvL_closure;
         const lvl32_r1XvM_closure;
         const GHC.Show.$fShowInteger_closure;
         const lvl14_r1Xvr_closure;
         const GHC.Arr.$fIxInteger_$cindex_closure;
         const $wlvl3_r1XvN_closure;
         const GHC.Integer.Type.minusInteger_closure;
         const GHC.Show.$fShowChar_closure;
         const lvl12_r1Xvp_closure;
         const GHC.Arr.$fIxChar_$cindex_closure;
         const $wlvl4_r1XvO_closure;
         const GHC.Arr.$fIx(,,)_$cindex_closure;
         const GHC.Arr.$fIx(,,)_closure;
         const GHC.Arr.$fIx(,)_$cindex_closure;
         const GHC.Arr.$fIx(,)_closure;
         const GHC.Arr.safeIndex_closure;
         const GHC.Arr.$wbadSafeIndex_closure;
         const $wreadSTArray_r1Xwh_closure;
         const readSTArray1_r1Xwi_closure;
         const $wwriteSTArray_r1Xwj_closure;
         const writeSTArray1_r1Xwk_closure;
         const GHC.Arr.!_closure;
         const GHC.Arr.assocs_closure;
         const GHC.Arr.cmpArray_closure;
         const GHC.Arr.$w$c<_closure;
         const GHC.Arr.$fOrdArray_$c<_closure;
         const GHC.Arr.$w$c>=_closure;
         const GHC.Arr.$fOrdArray_$c>=_closure;
         const GHC.Arr.$w$c>_closure;
         const GHC.Arr.$fOrdArray_$c>_closure;
         const GHC.Arr.$w$c<=_closure;
         const GHC.Arr.$fOrdArray_$c<=_closure;
         const GHC.Arr.$w$cmax_closure;
         const GHC.Arr.$fOrdArray_$cmax_closure;
         const GHC.Arr.$w$cmin_closure;
         const GHC.Arr.$fOrdArray_$cmin_closure;
         const GHC.Arr.$fOrdArray_closure;
         const GHC.Show.$fShow(,)_go1_closure;
         const GHC.Arr.$w$cshowsPrec_closure;
         const GHC.Arr.$fShowArray_$cshowsPrec_closure;
         const GHC.Arr.$fShowArray_$cshow_closure;
         const GHC.Arr.$fShowArray_$cshowList_closure;
         const GHC.Arr.$fShowArray_closure;
         const GHC.Arr.accumArray_closure;
         const GHC.Arr.array_closure;
         const GHC.Arr.ixmap_closure;
         const GHC.Arr.//_closure;
         const GHC.Arr.accum_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.175686888 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:56:57.177807077 UTC

[section ""data" . GHC.Arr.$p1Ix_closure" {
     GHC.Arr.$p1Ix_closure:
         const GHC.Arr.$p1Ix_info;
 },
 GHC.Arr.$p1Ix_entry() //  [R2]
         { []
         }
     {offset
       c2bGX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2bGY; else goto c2bGZ;
       c2bGY: // global
           R2 = R2;
           R1 = GHC.Arr.$p1Ix_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2bGZ: // global
           I64[Sp - 8] = block_c2bGU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2bH3; else goto c2bGV;
       u2bH3: // global
           call _c2bGU(R1) args: 0, res: 0, upd: 0;
       c2bGV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$p1Ix_info" {
     GHC.Arr.$p1Ix_info:
         const GHC.Arr.$p1Ix_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2bGU() //  [R1]
         { []
         }
     {offset
       c2bGU: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bGU_info" {
     block_c2bGU_info:
         const _c2bGU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.18385817 UTC

[section ""data" . GHC.Arr.range_closure" {
     GHC.Arr.range_closure:
         const GHC.Arr.range_info;
 },
 GHC.Arr.range_entry() //  [R2]
         { []
         }
     {offset
       c2bHn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2bHo; else goto c2bHp;
       c2bHo: // global
           R2 = R2;
           R1 = GHC.Arr.range_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2bHp: // global
           I64[Sp - 8] = block_c2bHk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2bHt; else goto c2bHl;
       u2bHt: // global
           call _c2bHk(R1) args: 0, res: 0, upd: 0;
       c2bHl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.range_info" {
     GHC.Arr.range_info:
         const GHC.Arr.range_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2bHk() //  [R1]
         { []
         }
     {offset
       c2bHk: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bHk_info" {
     block_c2bHk_info:
         const _c2bHk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.18971575 UTC

[section ""data" . GHC.Arr.index_closure" {
     GHC.Arr.index_closure:
         const GHC.Arr.index_info;
 },
 GHC.Arr.index_entry() //  [R2]
         { []
         }
     {offset
       c2bHL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2bHM; else goto c2bHN;
       c2bHM: // global
           R2 = R2;
           R1 = GHC.Arr.index_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2bHN: // global
           I64[Sp - 8] = block_c2bHI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2bHR; else goto c2bHJ;
       u2bHR: // global
           call _c2bHI(R1) args: 0, res: 0, upd: 0;
       c2bHJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.index_info" {
     GHC.Arr.index_info:
         const GHC.Arr.index_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2bHI() //  [R1]
         { []
         }
     {offset
       c2bHI: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bHI_info" {
     block_c2bHI_info:
         const _c2bHI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.196057658 UTC

[section ""data" . GHC.Arr.unsafeIndex_closure" {
     GHC.Arr.unsafeIndex_closure:
         const GHC.Arr.unsafeIndex_info;
 },
 GHC.Arr.unsafeIndex_entry() //  [R2]
         { []
         }
     {offset
       c2bI9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2bIa; else goto c2bIb;
       c2bIa: // global
           R2 = R2;
           R1 = GHC.Arr.unsafeIndex_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2bIb: // global
           I64[Sp - 8] = block_c2bI6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2bIf; else goto c2bI7;
       u2bIf: // global
           call _c2bI6(R1) args: 0, res: 0, upd: 0;
       c2bI7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeIndex_info" {
     GHC.Arr.unsafeIndex_info:
         const GHC.Arr.unsafeIndex_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2bI6() //  [R1]
         { []
         }
     {offset
       c2bI6: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bI6_info" {
     block_c2bI6_info:
         const _c2bI6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.202338884 UTC

[section ""data" . GHC.Arr.inRange_closure" {
     GHC.Arr.inRange_closure:
         const GHC.Arr.inRange_info;
 },
 GHC.Arr.inRange_entry() //  [R2]
         { []
         }
     {offset
       c2bIx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2bIy; else goto c2bIz;
       c2bIy: // global
           R2 = R2;
           R1 = GHC.Arr.inRange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2bIz: // global
           I64[Sp - 8] = block_c2bIu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2bID; else goto c2bIv;
       u2bID: // global
           call _c2bIu(R1) args: 0, res: 0, upd: 0;
       c2bIv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.inRange_info" {
     GHC.Arr.inRange_info:
         const GHC.Arr.inRange_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2bIu() //  [R1]
         { []
         }
     {offset
       c2bIu: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bIu_info" {
     block_c2bIu_info:
         const _c2bIu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.28244821 UTC

[section ""data" . GHC.Arr.rangeSize_closure" {
     GHC.Arr.rangeSize_closure:
         const GHC.Arr.rangeSize_info;
 },
 GHC.Arr.rangeSize_entry() //  [R2]
         { []
         }
     {offset
       c2bIV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2bIW; else goto c2bIX;
       c2bIW: // global
           R2 = R2;
           R1 = GHC.Arr.rangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2bIX: // global
           I64[Sp - 8] = block_c2bIS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2bJ1; else goto c2bIT;
       u2bJ1: // global
           call _c2bIS(R1) args: 0, res: 0, upd: 0;
       c2bIT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.rangeSize_info" {
     GHC.Arr.rangeSize_info:
         const GHC.Arr.rangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2bIS() //  [R1]
         { []
         }
     {offset
       c2bIS: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bIS_info" {
     block_c2bIS_info:
         const _c2bIS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.287968189 UTC

[section ""data" . GHC.Arr.unsafeRangeSize_closure" {
     GHC.Arr.unsafeRangeSize_closure:
         const GHC.Arr.unsafeRangeSize_info;
 },
 GHC.Arr.unsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c2bJj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2bJk; else goto c2bJl;
       c2bJk: // global
           R2 = R2;
           R1 = GHC.Arr.unsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2bJl: // global
           I64[Sp - 8] = block_c2bJg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2bJp; else goto c2bJh;
       u2bJp: // global
           call _c2bJg(R1) args: 0, res: 0, upd: 0;
       c2bJh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeRangeSize_info" {
     GHC.Arr.unsafeRangeSize_info:
         const GHC.Arr.unsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2bJg() //  [R1]
         { []
         }
     {offset
       c2bJg: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bJg_info" {
     block_c2bJg_info:
         const _c2bJg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.29404279 UTC

[section ""data" . GHC.Arr.$WSTArray_closure" {
     GHC.Arr.$WSTArray_closure:
         const GHC.Arr.$WSTArray_info;
 },
 GHC.Arr.$WSTArray_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2bJL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2bJP; else goto c2bJQ;
       c2bJP: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$WSTArray_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2bJQ: // global
           I64[Sp - 32] = block_c2bJE_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$WSTArray_info" {
     GHC.Arr.$WSTArray_info:
         const GHC.Arr.$WSTArray_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c2bJE() //  [R1]
         { []
         }
     {offset
       c2bJE: // global
           I64[Sp] = block_c2bJG_info;
           _s2aER::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s2aER::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bJE_info" {
     block_c2bJE_info:
         const _c2bJE;
         const 3;
         const 30;
 },
 _c2bJG() //  [R1]
         { []
         }
     {offset
       c2bJG: // global
           I64[Sp] = block_c2bJI_info;
           _s2aES::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s2aES::P64;
           if (R1 & 7 != 0) goto u2bJW; else goto c2bJJ;
       u2bJW: // global
           call _c2bJI(R1) args: 0, res: 0, upd: 0;
       c2bJJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bJG_info" {
     block_c2bJG_info:
         const _c2bJG;
         const 3;
         const 30;
 },
 _c2bJI() //  [R1]
         { []
         }
     {offset
       c2bJI: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2bJV; else goto c2bJU;
       c2bJV: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2bJU: // global
           _s2aEU::I64 = I64[R1 + 7];
           I64[Hp - 32] = GHC.Arr.STArray_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = _s2aEU::I64;
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bJI_info" {
     block_c2bJI_info:
         const _c2bJI;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.304569346 UTC

[section ""data" . GHC.Arr.$WArray_closure" {
     GHC.Arr.$WArray_closure:
         const GHC.Arr.$WArray_info;
 },
 GHC.Arr.$WArray_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2bKv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2bKz; else goto c2bKA;
       c2bKz: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$WArray_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2bKA: // global
           I64[Sp - 32] = block_c2bKo_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$WArray_info" {
     GHC.Arr.$WArray_info:
         const GHC.Arr.$WArray_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c2bKo() //  [R1]
         { []
         }
     {offset
       c2bKo: // global
           I64[Sp] = block_c2bKq_info;
           _s2aEZ::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s2aEZ::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bKo_info" {
     block_c2bKo_info:
         const _c2bKo;
         const 3;
         const 30;
 },
 _c2bKq() //  [R1]
         { []
         }
     {offset
       c2bKq: // global
           I64[Sp] = block_c2bKs_info;
           _s2aF0::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s2aF0::P64;
           if (R1 & 7 != 0) goto u2bKG; else goto c2bKt;
       u2bKG: // global
           call _c2bKs(R1) args: 0, res: 0, upd: 0;
       c2bKt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bKq_info" {
     block_c2bKq_info:
         const _c2bKq;
         const 3;
         const 30;
 },
 _c2bKs() //  [R1]
         { []
         }
     {offset
       c2bKs: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2bKF; else goto c2bKE;
       c2bKF: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2bKE: // global
           _s2aF2::I64 = I64[R1 + 7];
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = _s2aF2::I64;
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bKs_info" {
     block_c2bKs_info:
         const _c2bKs;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.31270335 UTC

[section ""data" . GHC.Arr.$fIxInt1_closure" {
     GHC.Arr.$fIxInt1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.314350872 UTC

[section ""data" . f_r1Xus_closure" {
     f_r1Xus_closure:
         const GHC.Types.C#_con_info;
         const 32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.315970912 UTC

[section ""cstring" . lvl_r1Xut_bytes" {
     lvl_r1Xut_bytes:
         I8[] [41]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.318228464 UTC

[section ""cstring" . lvl1_r1Xuu_bytes" {
     lvl1_r1Xuu_bytes:
         I8[] [32,110,111,116,32,105,110,32,114,97,110,103,101,32,91,48,46,46]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.319802706 UTC

[section ""cstring" . lvl2_r1Xuv_bytes" {
     lvl2_r1Xuv_bytes:
         I8[] [69,114,114,111,114,32,105,110,32,97,114,114,97,121,32,105,110,100,101,120,59,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.322187885 UTC

[section ""data" . lvl3_r1Xuw_closure" {
     lvl3_r1Xuw_closure:
         const lvl3_r1Xuw_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r1Xuw_entry() //  [R1]
         { []
         }
     {offset
       c2bLf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2bLg; else goto c2bLh;
       c2bLg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2bLh: // global
           (_c2bLc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2bLc::I64 == 0) goto c2bLe; else goto c2bLd;
       c2bLe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2bLd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2bLc::I64;
           R2 = lvl_r1Xut_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r1Xuw_info" {
     lvl3_r1Xuw_info:
         const lvl3_r1Xuw_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.328601151 UTC

[section ""data" . GHC.Arr.$wbadSafeIndex_closure" {
     GHC.Arr.$wbadSafeIndex_closure:
         const GHC.Arr.$wbadSafeIndex_info;
         const 0;
 },
 sat_s2aFd_entry() //  [R1]
         { []
         }
     {offset
       c2bLL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2bLM; else goto c2bLN;
       c2bLM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2bLN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c2bLI_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aFd_info" {
     sat_s2aFd_info:
         const sat_s2aFd_entry;
         const 4294967296;
         const 4294967313;
         const S2bMd_srt;
 },
 _c2bLI() //  [R1, R2]
         { []
         }
     {offset
       c2bLI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2bLQ; else goto c2bLP;
       c2bLQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c2bLP: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = lvl3_r1Xuw_closure;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2bLI_info" {
     block_c2bLI_info:
         const _c2bLI;
         const 0;
         const 4294967326;
         const S2bMd_srt;
 },
 sat_s2aFe_entry() //  [R1]
         { []
         }
     {offset
       c2bLR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2bLV; else goto c2bLU;
       c2bLV: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2bLU: // global
           _s2aF4::I64 = I64[R1 + 16];
           I64[Hp - 16] = sat_s2aFd_info;
           I64[Hp] = _s2aF4::I64;
           R3 = Hp - 16;
           R2 = lvl1_r1Xuu_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2aFe_info" {
     sat_s2aFe_info:
         const sat_s2aFe_entry;
         const 4294967296;
         const 4294967313;
         const S2bMd_srt;
 },
 sat_s2aFf_entry() //  [R1]
         { []
         }
     {offset
       c2bLX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2bLY; else goto c2bLZ;
       c2bLY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2bLZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c2bLy_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           I64[Sp - 24] = I64[R1 + 24];
           Sp = Sp - 32;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aFf_info" {
     sat_s2aFf_info:
         const sat_s2aFf_entry;
         const 8589934592;
         const 4294967316;
         const S2bMd_srt;
 },
 _c2bLy() //  [R1, R2]
         { []
         }
     {offset
       c2bLy: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c2bM2; else goto c2bM1;
       c2bM2: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c2bM1: // global
           I64[Hp - 40] = sat_s2aFe_info;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2bLy_info" {
     block_c2bLy_info:
         const _c2bLy;
         const 65;
         const 4294967326;
         const S2bMd_srt;
 },
 GHC.Arr.$wbadSafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2bM5: // global
           _s2aF4::I64 = R3;
           _s2aF3::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c2bM6; else goto c2bM7;
       c2bM7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2bM9; else goto c2bM8;
       c2bM9: // global
           HpAlloc = 32;
           goto c2bM6;
       c2bM6: // global
           R3 = _s2aF4::I64;
           R2 = _s2aF3::I64;
           R1 = GHC.Arr.$wbadSafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2bM8: // global
           I64[Hp - 24] = sat_s2aFf_info;
           I64[Hp - 8] = _s2aF3::I64;
           I64[Hp] = _s2aF4::I64;
           I64[Sp - 8] = block_c2bM3_info;
           R3 = Hp - 24;
           R2 = lvl2_r1Xuv_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$wbadSafeIndex_info" {
     GHC.Arr.$wbadSafeIndex_info:
         const GHC.Arr.$wbadSafeIndex_entry;
         const 0;
         const 30064771086;
         const 8589934604;
         const S2bMd_srt;
 },
 _c2bM3() //  [R1]
         { []
         }
     {offset
       c2bM3: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bM3_info" {
     block_c2bM3_info:
         const _c2bM3;
         const 0;
         const 4294967326;
         const S2bMd_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.343953851 UTC

[section ""data" . GHC.Arr.badSafeIndex_closure" {
     GHC.Arr.badSafeIndex_closure:
         const GHC.Arr.badSafeIndex_info;
         const 0;
 },
 GHC.Arr.badSafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2bMY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2bN2; else goto c2bN3;
       c2bN2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.badSafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2bN3: // global
           I64[Sp - 16] = block_c2bMV_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2bNb; else goto c2bMW;
       u2bNb: // global
           call _c2bMV(R1) args: 0, res: 0, upd: 0;
       c2bMW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.badSafeIndex_info" {
     GHC.Arr.badSafeIndex_info:
         const GHC.Arr.badSafeIndex_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S2bMd_srt+16;
 },
 _c2bMV() //  [R1]
         { []
         }
     {offset
       c2bMV: // global
           I64[Sp] = block_c2bN1_info;
           _s2aFk::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2aFk::I64;
           if (R1 & 7 != 0) goto u2bNa; else goto c2bN5;
       u2bNa: // global
           call _c2bN1(R1) args: 0, res: 0, upd: 0;
       c2bN5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bMV_info" {
     block_c2bMV_info:
         const _c2bMV;
         const 1;
         const 4294967326;
         const S2bMd_srt+16;
 },
 _c2bN1() //  [R1]
         { []
         }
     {offset
       c2bN1: // global
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bN1_info" {
     block_c2bN1_info:
         const _c2bN1;
         const 65;
         const 4294967326;
         const S2bMd_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.353900758 UTC

[section ""data" . GHC.Arr.$w$s$fIx(,,)_closure" {
     GHC.Arr.$w$s$fIx(,,)_closure:
         const GHC.Arr.$w$s$fIx(,,)_info;
 },
 GHC.Arr.$w$s$fIx(,,)_slow() //  [R1]
         { []
         }
     {offset
       c2bNs: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$w$s$fIx(,,)_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2,
                                           R1) args: 40, res: 0, upd: 8;
     }
 },
 GHC.Arr.$w$s$fIx(,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2bNB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2bNC; else goto c2bND;
       c2bNC: // global
           R1 = GHC.Arr.$w$s$fIx(,,)_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c2bND: // global
           _s2aFt::I64 = I64[Sp + 8];
           if (%MO_S_Gt_W64(R2, _s2aFt::I64)) goto u2bOJ; else goto c2bNA;
       u2bOJ: // global
           Sp = Sp + 32;
           goto u2bOQ;
       c2bNA: // global
           if (%MO_S_Gt_W64(_s2aFt::I64, R5)) goto u2bOK; else goto c2bNX;
       u2bOK: // global
           Sp = Sp + 32;
           goto u2bOQ;
       u2bOQ: // global
           call _c2bOD() args: 0, res: 0, upd: 0;
       c2bNX: // global
           I64[Sp - 16] = block_c2bNM_info;
           R1 = R3;
           P64[Sp - 8] = R6;
           P64[Sp + 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2bOO; else goto c2bNN;
       u2bOO: // global
           call _c2bNM(R1) args: 0, res: 0, upd: 0;
       c2bNN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$s$fIx(,,)_info" {
     GHC.Arr.$w$s$fIx(,,)_info:
         const GHC.Arr.$w$s$fIx(,,)_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 4681;
         const GHC.Arr.$w$s$fIx(,,)_slow;
 },
 _c2bNM() //  [R1]
         { []
         }
     {offset
       c2bNM: // global
           I64[Sp] = block_c2bNR_info;
           _s2aFz::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2aFz::I64;
           if (R1 & 7 != 0) goto u2bOR; else goto c2bNS;
       u2bOR: // global
           call _c2bNR(R1) args: 0, res: 0, upd: 0;
       c2bNS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bNM_info" {
     block_c2bNM_info:
         const _c2bNM;
         const 5;
         const 30;
 },
 _c2bNR() //  [R1]
         { []
         }
     {offset
       c2bNR: // global
           I64[Sp] = block_c2bNW_info;
           _s2aFB::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s2aFB::I64;
           if (R1 & 7 != 0) goto u2bOS; else goto c2bO0;
       u2bOS: // global
           call _c2bNW(R1) args: 0, res: 0, upd: 0;
       c2bO0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bNR_info" {
     block_c2bNR_info:
         const _c2bNR;
         const 69;
         const 30;
 },
 _c2bNW() //  [R1]
         { []
         }
     {offset
       c2bNW: // global
           _s2aFD::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(I64[Sp + 8],
                            _s2aFD::I64)) goto u2bOL; else goto c2bOF;
       u2bOL: // global
           Sp = Sp + 48;
           goto u2bOV;
       c2bOF: // global
           if (%MO_S_Gt_W64(_s2aFD::I64,
                            I64[Sp + 32])) goto u2bOM; else goto c2bOs;
       u2bOM: // global
           Sp = Sp + 48;
           goto u2bOV;
       u2bOV: // global
           call _c2bOD() args: 0, res: 0, upd: 0;
       c2bOs: // global
           I64[Sp + 8] = block_c2bOh_info;
           R1 = P64[Sp + 24];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2bOT; else goto c2bOi;
       u2bOT: // global
           call _c2bOh(R1) args: 0, res: 0, upd: 0;
       c2bOi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bNW_info" {
     block_c2bNW_info:
         const _c2bNW;
         const 581;
         const 30;
 },
 _c2bOh() //  [R1]
         { []
         }
     {offset
       c2bOh: // global
           I64[Sp + 16] = block_c2bOm_info;
           _s2aFH::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 24] = _s2aFH::I64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u2bOW; else goto c2bOn;
       u2bOW: // global
           call _c2bOm(R1) args: 0, res: 0, upd: 0;
       c2bOn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bOh_info" {
     block_c2bOh_info:
         const _c2bOh;
         const 388;
         const 30;
 },
 _c2bOm() //  [R1]
         { []
         }
     {offset
       c2bOm: // global
           I64[Sp] = block_c2bOr_info;
           _s2aFJ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2aFJ::I64;
           if (R1 & 7 != 0) goto u2bOX; else goto c2bOv;
       u2bOX: // global
           call _c2bOr(R1) args: 0, res: 0, upd: 0;
       c2bOv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bOm_info" {
     block_c2bOm_info:
         const _c2bOm;
         const 66;
         const 30;
 },
 _c2bOr() //  [R1]
         { []
         }
     {offset
       c2bOr: // global
           _s2aFL::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(I64[Sp + 8],
                            _s2aFL::I64)) goto u2bON; else goto c2bOE;
       u2bON: // global
           Sp = Sp + 24;
           call _c2bOD() args: 0, res: 0, upd: 0;
       c2bOE: // global
           R1 = I64[(%MO_S_Le_W64(_s2aFL::I64,
                                  I64[Sp + 16]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bOr_info" {
     block_c2bOr_info:
         const _c2bOr;
         const 194;
         const 30;
 },
 _c2bOD() //  []
         { []
         }
     {offset
       c2bOD: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.372215682 UTC

[section ""data" . GHC.Arr.$fIx(,,)1_closure" {
     GHC.Arr.$fIx(,,)1_closure:
         const GHC.Arr.$fIx(,,)1_info;
 },
 GHC.Arr.$fIx(,,)1_entry() //  [R2, R3]
         { []
         }
     {offset
       c2bPP: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c2bQi; else goto c2bQj;
       c2bQi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2bQj: // global
           I64[Sp - 16] = block_c2bPM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2bQw; else goto c2bPN;
       u2bQw: // global
           call _c2bPM(R1) args: 0, res: 0, upd: 0;
       c2bPN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)1_info" {
     GHC.Arr.$fIx(,,)1_info:
         const GHC.Arr.$fIx(,,)1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2bPM() //  [R1]
         { []
         }
     {offset
       c2bPM: // global
           I64[Sp - 8] = block_c2bPS_info;
           _s2aFS::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aFS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2bQv; else goto c2bPT;
       u2bQv: // global
           call _c2bPS(R1) args: 0, res: 0, upd: 0;
       c2bPT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bPM_info" {
     block_c2bPM_info:
         const _c2bPM;
         const 1;
         const 30;
 },
 _c2bPS() //  [R1]
         { []
         }
     {offset
       c2bPS: // global
           I64[Sp - 16] = block_c2bPX_info;
           _s2aFV::P64 = P64[R1 + 15];
           _s2aFW::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2aFW::P64;
           P64[Sp] = _s2aFV::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2bQx; else goto c2bPY;
       u2bQx: // global
           call _c2bPX(R1) args: 0, res: 0, upd: 0;
       c2bPY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bPS_info" {
     block_c2bPS_info:
         const _c2bPS;
         const 2;
         const 30;
 },
 _c2bPX() //  [R1]
         { []
         }
     {offset
       c2bPX: // global
           I64[Sp] = block_c2bQ2_info;
           _s2aFY::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s2aFY::I64;
           if (R1 & 7 != 0) goto u2bQy; else goto c2bQ3;
       u2bQy: // global
           call _c2bQ2(R1) args: 0, res: 0, upd: 0;
       c2bQ3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bPX_info" {
     block_c2bPX_info:
         const _c2bPX;
         const 4;
         const 30;
 },
 _c2bQ2() //  [R1]
         { []
         }
     {offset
       c2bQ2: // global
           I64[Sp - 16] = block_c2bQ7_info;
           _s2aG1::P64 = P64[R1 + 15];
           _s2aG2::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2aG2::P64;
           P64[Sp] = _s2aG1::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2bQz; else goto c2bQ8;
       u2bQz: // global
           call _c2bQ7(R1) args: 0, res: 0, upd: 0;
       c2bQ8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bQ2_info" {
     block_c2bQ2_info:
         const _c2bQ2;
         const 260;
         const 30;
 },
 _c2bQ7() //  [R1]
         { []
         }
     {offset
       c2bQ7: // global
           I64[Sp] = block_c2bQc_info;
           _s2aG4::I64 = I64[R1 + 7];
           R1 = P64[Sp + 48];
           I64[Sp + 48] = _s2aG4::I64;
           if (R1 & 7 != 0) goto u2bQA; else goto c2bQd;
       u2bQA: // global
           call _c2bQc(R1) args: 0, res: 0, upd: 0;
       c2bQd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bQ7_info" {
     block_c2bQ7_info:
         const _c2bQ7;
         const 1030;
         const 30;
 },
 _c2bQc() //  [R1]
         { []
         }
     {offset
       c2bQc: // global
           I64[Sp - 16] = block_c2bQh_info;
           _s2aG7::P64 = P64[R1 + 15];
           _s2aG8::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2aG8::P64;
           P64[Sp] = _s2aG7::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2bQB; else goto c2bQq;
       u2bQB: // global
           call _c2bQh(R1) args: 0, res: 0, upd: 0;
       c2bQq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bQc_info" {
     block_c2bQc_info:
         const _c2bQc;
         const 3078;
         const 30;
 },
 _c2bQh() //  [R1]
         { []
         }
     {offset
       c2bQh: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 64];
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 48];
           R2 = I64[Sp + 56];
           P64[Sp + 40] = P64[Sp + 24];
           I64[Sp + 48] = I64[R1 + 7];
           P64[Sp + 56] = P64[Sp + 16];
           P64[Sp + 64] = P64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Arr.$w$s$fIx(,,)_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bQh_info" {
     block_c2bQh_info:
         const _c2bQh;
         const 12296;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.39190381 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$s$crangeSize_closure" {
     GHC.Arr.$fIx(,,)_$s$crangeSize_closure:
         const GHC.Arr.$fIx(,,)_$s$crangeSize_info;
 },
 GHC.Arr.$fIx(,,)_$s$crangeSize_entry() //  [R2]
         { []
         }
     {offset
       c2bRr: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2bRK; else goto c2bRL;
       c2bRK: // global
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$s$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2bRL: // global
           I64[Sp - 8] = block_c2bRo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2bTk; else goto c2bRp;
       u2bTk: // global
           call _c2bRo(R1) args: 0, res: 0, upd: 0;
       c2bRp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$s$crangeSize_info" {
     GHC.Arr.$fIx(,,)_$s$crangeSize_info:
         const GHC.Arr.$fIx(,,)_$s$crangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2bRo() //  [R1]
         { []
         }
     {offset
       c2bRo: // global
           I64[Sp - 8] = block_c2bRu_info;
           _s2aGe::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aGe::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2bTj; else goto c2bRv;
       u2bTj: // global
           call _c2bRu(R1) args: 0, res: 0, upd: 0;
       c2bRv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bRo_info" {
     block_c2bRo_info:
         const _c2bRo;
         const 0;
         const 30;
 },
 _c2bRu() //  [R1]
         { []
         }
     {offset
       c2bRu: // global
           I64[Sp - 16] = block_c2bRz_info;
           _s2aGh::P64 = P64[R1 + 15];
           _s2aGi::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2aGi::P64;
           P64[Sp] = _s2aGh::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2bTl; else goto c2bRA;
       u2bTl: // global
           call _c2bRz(R1) args: 0, res: 0, upd: 0;
       c2bRA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bRu_info" {
     block_c2bRu_info:
         const _c2bRu;
         const 1;
         const 30;
 },
 _c2bRz() //  [R1]
         { []
         }
     {offset
       c2bRz: // global
           I64[Sp] = block_c2bRE_info;
           _s2aGk::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s2aGk::I64;
           if (R1 & 7 != 0) goto u2bTm; else goto c2bRF;
       u2bTm: // global
           call _c2bRE(R1) args: 0, res: 0, upd: 0;
       c2bRF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bRz_info" {
     block_c2bRz_info:
         const _c2bRz;
         const 3;
         const 30;
 },
 _c2bRE() //  [R1]
         { []
         }
     {offset
       c2bRE: // global
           I64[Sp - 16] = block_c2bRJ_info;
           _s2aGn::P64 = P64[R1 + 15];
           _s2aGo::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2aGo::P64;
           P64[Sp] = _s2aGn::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2bTn; else goto c2bRQ;
       u2bTn: // global
           call _c2bRJ(R1) args: 0, res: 0, upd: 0;
       c2bRQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bRE_info" {
     block_c2bRE_info:
         const _c2bRE;
         const 259;
         const 30;
 },
 _c2bRJ() //  [R1]
         { []
         }
     {offset
       c2bRJ: // global
           _s2aGq::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(I64[Sp + 40],
                            _s2aGq::I64)) goto u2bTh; else goto c2bS7;
       u2bTh: // global
           Sp = Sp + 48;
           call _c2bSh() args: 0, res: 0, upd: 0;
       c2bS7: // global
           I64[Sp] = block_c2bS1_info;
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s2aGq::I64;
           if (R1 & 7 != 0) goto u2bTo; else goto c2bS2;
       u2bTo: // global
           call _c2bS1(R1) args: 0, res: 0, upd: 0;
       c2bS2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bRJ_info" {
     block_c2bRJ_info:
         const _c2bRJ;
         const 1029;
         const 30;
 },
 _c2bS1() //  [R1]
         { []
         }
     {offset
       c2bS1: // global
           I64[Sp] = block_c2bS6_info;
           _s2aGt::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2aGt::I64;
           if (R1 & 7 != 0) goto u2bTq; else goto c2bS9;
       u2bTq: // global
           call _c2bS6(R1) args: 0, res: 0, upd: 0;
       c2bS9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bS1_info" {
     block_c2bS1_info:
         const _c2bS1;
         const 1541;
         const 30;
 },
 _c2bS6() //  [R1]
         { []
         }
     {offset
       c2bS6: // global
           _s2aGv::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(I64[Sp + 16],
                            _s2aGv::I64)) goto u2bTi; else goto c2bSq;
       u2bTi: // global
           Sp = Sp + 48;
           call _c2bSh() args: 0, res: 0, upd: 0;
       c2bSq: // global
           I64[Sp] = block_c2bSk_info;
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s2aGv::I64;
           if (R1 & 7 != 0) goto u2bTr; else goto c2bSl;
       u2bTr: // global
           call _c2bSk(R1) args: 0, res: 0, upd: 0;
       c2bSl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bS6_info" {
     block_c2bS6_info:
         const _c2bS6;
         const 1669;
         const 30;
 },
 _c2bSh() //  []
         { []
         }
     {offset
       c2bSh: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2bSk() //  [R1]
         { []
         }
     {offset
       c2bSk: // global
           I64[Sp] = block_c2bSp_info;
           _s2aGy::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2aGy::I64;
           if (R1 & 7 != 0) goto u2bTt; else goto c2bSs;
       u2bTt: // global
           call _c2bSp(R1) args: 0, res: 0, upd: 0;
       c2bSs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bSk_info" {
     block_c2bSk_info:
         const _c2bSk;
         const 1925;
         const 30;
 },
 _c2bSp() //  [R1]
         { []
         }
     {offset
       c2bSp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2bSy; else goto c2bSx;
       c2bSy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2bSx: // global
           _s2aGy::I64 = I64[Sp + 8];
           _s2aGA::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s2aGy::I64,
                            _s2aGA::I64)) goto c2bSC; else goto c2bTg;
       c2bSC: // global
           Hp = Hp - 16;
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2bTg: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s2aGt::I64 = I64[Sp + 16];
           _s2aGv::I64 = I64[Sp + 24];
           I64[Hp] = _s2aGA::I64 + ((_s2aGA::I64 + (1 - _s2aGy::I64)) * (_s2aGv::I64 + ((_s2aGv::I64 + (1 - _s2aGt::I64)) * (I64[Sp + 32] - I64[Sp + 40]) - _s2aGt::I64)) - _s2aGy::I64) + 1;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bSp_info" {
     block_c2bSp_info:
         const _c2bSp;
         const 1989;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.414754781 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$s$cunsafeRangeSize_closure" {
     GHC.Arr.$fIx(,,)_$s$cunsafeRangeSize_closure:
         const GHC.Arr.$fIx(,,)_$s$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIx(,,)_$s$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c2bUO: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2bW6; else goto c2bW7;
       c2bW6: // global
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$s$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2bW7: // global
           I64[Sp - 8] = block_c2bUL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2bWk; else goto c2bUM;
       u2bWk: // global
           call _c2bUL(R1) args: 0, res: 0, upd: 0;
       c2bUM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$s$cunsafeRangeSize_info" {
     GHC.Arr.$fIx(,,)_$s$cunsafeRangeSize_info:
         const GHC.Arr.$fIx(,,)_$s$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2bUL() //  [R1]
         { []
         }
     {offset
       c2bUL: // global
           I64[Sp - 8] = block_c2bUR_info;
           _s2aGR::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aGR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2bWj; else goto c2bUS;
       u2bWj: // global
           call _c2bUR(R1) args: 0, res: 0, upd: 0;
       c2bUS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bUL_info" {
     block_c2bUL_info:
         const _c2bUL;
         const 0;
         const 30;
 },
 _c2bUR() //  [R1]
         { []
         }
     {offset
       c2bUR: // global
           I64[Sp - 16] = block_c2bUW_info;
           _s2aGU::P64 = P64[R1 + 15];
           _s2aGV::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2aGV::P64;
           P64[Sp] = _s2aGU::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2bWl; else goto c2bUX;
       u2bWl: // global
           call _c2bUW(R1) args: 0, res: 0, upd: 0;
       c2bUX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bUR_info" {
     block_c2bUR_info:
         const _c2bUR;
         const 1;
         const 30;
 },
 _c2bUW() //  [R1]
         { []
         }
     {offset
       c2bUW: // global
           I64[Sp] = block_c2bV1_info;
           _s2aGX::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2aGX::I64;
           if (R1 & 7 != 0) goto u2bWm; else goto c2bV2;
       u2bWm: // global
           call _c2bV1(R1) args: 0, res: 0, upd: 0;
       c2bV2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bUW_info" {
     block_c2bUW_info:
         const _c2bUW;
         const 3;
         const 30;
 },
 _c2bV1() //  [R1]
         { []
         }
     {offset
       c2bV1: // global
           I64[Sp] = block_c2bV6_info;
           _s2aGZ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2aGZ::I64;
           if (R1 & 7 != 0) goto u2bWn; else goto c2bV7;
       u2bWn: // global
           call _c2bV6(R1) args: 0, res: 0, upd: 0;
       c2bV7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bV1_info" {
     block_c2bV1_info:
         const _c2bV1;
         const 131;
         const 30;
 },
 _c2bV6() //  [R1]
         { []
         }
     {offset
       c2bV6: // global
           I64[Sp] = block_c2bVb_info;
           _s2aH1::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s2aH1::I64;
           if (R1 & 7 != 0) goto u2bWo; else goto c2bVc;
       u2bWo: // global
           call _c2bVb(R1) args: 0, res: 0, upd: 0;
       c2bVc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bV6_info" {
     block_c2bV6_info:
         const _c2bV6;
         const 195;
         const 30;
 },
 _c2bVb() //  [R1]
         { []
         }
     {offset
       c2bVb: // global
           I64[Sp - 16] = block_c2bVg_info;
           _s2aH4::P64 = P64[R1 + 15];
           _s2aH5::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2aH5::P64;
           P64[Sp] = _s2aH4::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2bWp; else goto c2bVh;
       u2bWp: // global
           call _c2bVg(R1) args: 0, res: 0, upd: 0;
       c2bVh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bVb_info" {
     block_c2bVb_info:
         const _c2bVb;
         const 451;
         const 30;
 },
 _c2bVg() //  [R1]
         { []
         }
     {offset
       c2bVg: // global
           I64[Sp] = block_c2bVl_info;
           _s2aH7::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2aH7::I64;
           if (R1 & 7 != 0) goto u2bWq; else goto c2bVm;
       u2bWq: // global
           call _c2bVl(R1) args: 0, res: 0, upd: 0;
       c2bVm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bVg_info" {
     block_c2bVg_info:
         const _c2bVg;
         const 1797;
         const 30;
 },
 _c2bVl() //  [R1]
         { []
         }
     {offset
       c2bVl: // global
           I64[Sp] = block_c2bVq_info;
           _s2aH9::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2aH9::I64;
           if (R1 & 7 != 0) goto u2bWr; else goto c2bVr;
       u2bWr: // global
           call _c2bVq(R1) args: 0, res: 0, upd: 0;
       c2bVr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bVl_info" {
     block_c2bVl_info:
         const _c2bVl;
         const 1925;
         const 30;
 },
 _c2bVq() //  [R1]
         { []
         }
     {offset
       c2bVq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2bWi; else goto c2bWh;
       c2bWi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2bWh: // global
           _s2aHb::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s2aGZ::I64 = I64[Sp + 24];
           _s2aH1::I64 = I64[Sp + 40];
           _s2aH9::I64 = I64[Sp + 8];
           I64[Hp] = _s2aHb::I64 + ((_s2aHb::I64 + (1 - _s2aH1::I64)) * (_s2aH9::I64 + ((_s2aH9::I64 + (1 - _s2aGZ::I64)) * (I64[Sp + 16] - I64[Sp + 32]) - _s2aGZ::I64)) - _s2aH1::I64) + 1;
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bVq_info" {
     block_c2bVq_info:
         const _c2bVq;
         const 1989;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.436548891 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$cinRange_closure" {
     GHC.Arr.$fIx(,,)_$cinRange_closure:
         const GHC.Arr.$fIx(,,)_$cinRange_info;
 },
 GHC.Arr.$fIx(,,)_$cinRange_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2bXI: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c2bXW; else goto c2bXX;
       c2bXW: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$cinRange_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2bXX: // global
           I64[Sp - 40] = block_c2bXF_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2bYG; else goto c2bXG;
       u2bYG: // global
           call _c2bXF(R1) args: 0, res: 0, upd: 0;
       c2bXG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$cinRange_info" {
     GHC.Arr.$fIx(,,)_$cinRange_info:
         const GHC.Arr.$fIx(,,)_$cinRange_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c2bXF() //  [R1]
         { []
         }
     {offset
       c2bXF: // global
           I64[Sp - 8] = block_c2bXL_info;
           _s2aHv::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aHv::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2bYF; else goto c2bXM;
       u2bYF: // global
           call _c2bXL(R1) args: 0, res: 0, upd: 0;
       c2bXM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bXF_info" {
     block_c2bXF_info:
         const _c2bXF;
         const 4;
         const 30;
 },
 _c2bXL() //  [R1]
         { []
         }
     {offset
       c2bXL: // global
           I64[Sp - 16] = block_c2bXQ_info;
           _s2aHx::P64 = P64[R1 + 7];
           _s2aHy::P64 = P64[R1 + 15];
           _s2aHz::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s2aHz::P64;
           P64[Sp] = _s2aHy::P64;
           P64[Sp + 8] = _s2aHx::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2bYH; else goto c2bXR;
       u2bYH: // global
           call _c2bXQ(R1) args: 0, res: 0, upd: 0;
       c2bXR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bXL_info" {
     block_c2bXL_info:
         const _c2bXL;
         const 5;
         const 30;
 },
 _c2bXQ() //  [R1]
         { []
         }
     {offset
       c2bXQ: // global
           I64[Sp - 16] = block_c2bXV_info;
           _s2aHB::P64 = P64[R1 + 7];
           _s2aHC::P64 = P64[R1 + 15];
           _s2aHD::P64 = P64[R1 + 23];
           R1 = P64[Sp + 56];
           P64[Sp - 8] = _s2aHD::P64;
           P64[Sp] = _s2aHC::P64;
           P64[Sp + 56] = _s2aHB::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2bYI; else goto c2bY1;
       u2bYI: // global
           call _c2bXV(R1) args: 0, res: 0, upd: 0;
       c2bY1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bXQ_info" {
     block_c2bXQ_info:
         const _c2bXQ;
         const 7;
         const 30;
 },
 _c2bXV() //  [R1]
         { []
         }
     {offset
       c2bXV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2bY9; else goto c2bY8;
       c2bY9: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2bY8: // global
           _s2aHF::P64 = P64[R1 + 7];
           _s2aHG::P64 = P64[R1 + 15];
           _s2aHH::P64 = P64[R1 + 23];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 72];
           I64[Sp] = block_c2bY6_info;
           R2 = P64[Sp + 48];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = _s2aHF::P64;
           P64[Sp + 48] = _s2aHH::P64;
           P64[Sp + 72] = _s2aHG::P64;
           Sp = Sp - 24;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bXV_info" {
     block_c2bXV_info:
         const _c2bXV;
         const 9;
         const 30;
 },
 _c2bY6() //  [R1]
         { []
         }
     {offset
       c2bY6: // global
           if (R1 & 7 == 1) goto u2bYD; else goto c2bYk;
       u2bYD: // global
           Sp = Sp + 80;
           call _c2bYt() args: 0, res: 0, upd: 0;
       c2bYk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2bYn; else goto c2bYm;
       c2bYn: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2bYm: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 16];
           I64[Sp] = block_c2bYj_info;
           R2 = P64[Sp + 56];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = P64[Sp + 72];
           Sp = Sp - 24;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bY6_info" {
     block_c2bY6_info:
         const _c2bY6;
         const 1033;
         const 30;
 },
 _c2bYj() //  [R1]
         { []
         }
     {offset
       c2bYj: // global
           if (R1 & 7 == 1) goto u2bYE; else goto c2bYu;
       u2bYE: // global
           Sp = Sp + 80;
           call _c2bYt() args: 0, res: 0, upd: 0;
       c2bYu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2bYz; else goto c2bYy;
       c2bYz: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2bYy: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           R2 = P64[Sp + 64];
           I64[Sp + 56] = stg_ap_pp_info;
           P64[Sp + 64] = Hp - 15;
           P64[Sp + 72] = P64[Sp + 48];
           Sp = Sp + 56;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bYj_info" {
     block_c2bYj_info:
         const _c2bYj;
         const 22153;
         const 30;
 },
 _c2bYt() //  []
         { []
         }
     {offset
       c2bYt: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.457797877 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$s$cunsafeIndex_closure" {
     GHC.Arr.$fIx(,,)_$s$cunsafeIndex_closure:
         const GHC.Arr.$fIx(,,)_$s$cunsafeIndex_info;
 },
 GHC.Arr.$fIx(,,)_$s$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2bZO: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2c1i; else goto c2c1j;
       c2c1i: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$s$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2c1j: // global
           I64[Sp - 16] = block_c2bZL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2c1z; else goto c2bZM;
       u2c1z: // global
           call _c2bZL(R1) args: 0, res: 0, upd: 0;
       c2bZM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$s$cunsafeIndex_info" {
     GHC.Arr.$fIx(,,)_$s$cunsafeIndex_info:
         const GHC.Arr.$fIx(,,)_$s$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2bZL() //  [R1]
         { []
         }
     {offset
       c2bZL: // global
           I64[Sp - 8] = block_c2bZR_info;
           _s2aHR::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aHR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2c1y; else goto c2bZS;
       u2c1y: // global
           call _c2bZR(R1) args: 0, res: 0, upd: 0;
       c2bZS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bZL_info" {
     block_c2bZL_info:
         const _c2bZL;
         const 1;
         const 30;
 },
 _c2bZR() //  [R1]
         { []
         }
     {offset
       c2bZR: // global
           I64[Sp - 16] = block_c2bZW_info;
           _s2aHU::P64 = P64[R1 + 15];
           _s2aHV::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2aHV::P64;
           P64[Sp] = _s2aHU::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2c1A; else goto c2bZX;
       u2c1A: // global
           call _c2bZW(R1) args: 0, res: 0, upd: 0;
       c2bZX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bZR_info" {
     block_c2bZR_info:
         const _c2bZR;
         const 2;
         const 30;
 },
 _c2bZW() //  [R1]
         { []
         }
     {offset
       c2bZW: // global
           I64[Sp] = block_c2c01_info;
           _s2aHX::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2aHX::I64;
           if (R1 & 7 != 0) goto u2c1B; else goto c2c02;
       u2c1B: // global
           call _c2c01(R1) args: 0, res: 0, upd: 0;
       c2c02: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2bZW_info" {
     block_c2bZW_info:
         const _c2bZW;
         const 4;
         const 30;
 },
 _c2c01() //  [R1]
         { []
         }
     {offset
       c2c01: // global
           I64[Sp] = block_c2c06_info;
           _s2aHZ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2aHZ::I64;
           if (R1 & 7 != 0) goto u2c1C; else goto c2c07;
       u2c1C: // global
           call _c2c06(R1) args: 0, res: 0, upd: 0;
       c2c07: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c01_info" {
     block_c2c01_info:
         const _c2c01;
         const 132;
         const 30;
 },
 _c2c06() //  [R1]
         { []
         }
     {offset
       c2c06: // global
           I64[Sp] = block_c2c0b_info;
           _s2aI1::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s2aI1::I64;
           if (R1 & 7 != 0) goto u2c1D; else goto c2c0c;
       u2c1D: // global
           call _c2c0b(R1) args: 0, res: 0, upd: 0;
       c2c0c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c06_info" {
     block_c2c06_info:
         const _c2c06;
         const 196;
         const 30;
 },
 _c2c0b() //  [R1]
         { []
         }
     {offset
       c2c0b: // global
           I64[Sp - 8] = block_c2c0g_info;
           _s2aI5::P64 = P64[R1 + 23];
           R1 = P64[R1 + 15];
           P64[Sp] = _s2aI5::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2c1E; else goto c2c0h;
       u2c1E: // global
           call _c2c0g(R1) args: 0, res: 0, upd: 0;
       c2c0h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c0b_info" {
     block_c2c0b_info:
         const _c2c0b;
         const 452;
         const 30;
 },
 _c2c0g() //  [R1]
         { []
         }
     {offset
       c2c0g: // global
           I64[Sp] = block_c2c0l_info;
           _s2aI7::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2aI7::I64;
           if (R1 & 7 != 0) goto u2c1F; else goto c2c0m;
       u2c1F: // global
           call _c2c0l(R1) args: 0, res: 0, upd: 0;
       c2c0m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c0g_info" {
     block_c2c0g_info:
         const _c2c0g;
         const 901;
         const 30;
 },
 _c2c0l() //  [R1]
         { []
         }
     {offset
       c2c0l: // global
           I64[Sp] = block_c2c0q_info;
           _s2aI9::I64 = I64[R1 + 7];
           R1 = P64[Sp + 40];
           I64[Sp + 40] = _s2aI9::I64;
           if (R1 & 7 != 0) goto u2c1G; else goto c2c0r;
       u2c1G: // global
           call _c2c0q(R1) args: 0, res: 0, upd: 0;
       c2c0r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c0l_info" {
     block_c2c0l_info:
         const _c2c0l;
         const 965;
         const 30;
 },
 _c2c0q() //  [R1]
         { []
         }
     {offset
       c2c0q: // global
           I64[Sp - 16] = block_c2c0v_info;
           _s2aIc::P64 = P64[R1 + 15];
           _s2aId::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2aId::P64;
           P64[Sp] = _s2aIc::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2c1H; else goto c2c0w;
       u2c1H: // global
           call _c2c0v(R1) args: 0, res: 0, upd: 0;
       c2c0w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c0q_info" {
     block_c2c0q_info:
         const _c2c0q;
         const 1989;
         const 30;
 },
 _c2c0v() //  [R1]
         { []
         }
     {offset
       c2c0v: // global
           I64[Sp] = block_c2c0A_info;
           _s2aIf::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2aIf::I64;
           if (R1 & 7 != 0) goto u2c1I; else goto c2c0B;
       u2c1I: // global
           call _c2c0A(R1) args: 0, res: 0, upd: 0;
       c2c0B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c0v_info" {
     block_c2c0v_info:
         const _c2c0v;
         const 7943;
         const 30;
 },
 _c2c0A() //  [R1]
         { []
         }
     {offset
       c2c0A: // global
           I64[Sp] = block_c2c0F_info;
           _s2aIh::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2aIh::I64;
           if (R1 & 7 != 0) goto u2c1J; else goto c2c0G;
       u2c1J: // global
           call _c2c0F(R1) args: 0, res: 0, upd: 0;
       c2c0G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c0A_info" {
     block_c2c0A_info:
         const _c2c0A;
         const 8071;
         const 30;
 },
 _c2c0F() //  [R1]
         { []
         }
     {offset
       c2c0F: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2c1x; else goto c2c1w;
       c2c1x: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2c1w: // global
           _s2aHZ::I64 = I64[Sp + 32];
           _s2aI1::I64 = I64[Sp + 48];
           _s2aIu::I64 = I64[R1 + 7] + ((I64[Sp + 56] + (1 - _s2aI1::I64)) * (I64[Sp + 8] + ((I64[Sp + 24] + (1 - _s2aHZ::I64)) * (I64[Sp + 16] - I64[Sp + 40]) - _s2aHZ::I64)) - _s2aI1::I64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2aIu::I64;
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c0F_info" {
     block_c2c0F_info:
         const _c2c0F;
         const 8135;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.485533683 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$cunsafeIndex_closure" {
     GHC.Arr.$fIx(,,)_$cunsafeIndex_closure:
         const GHC.Arr.$fIx(,,)_$cunsafeIndex_info;
 },
 GHC.Arr.$fIx(,,)_$cunsafeIndex_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2c3d: // global
           if ((Sp + -112) < SpLim) (likely: False) goto c2c45; else goto c2c46;
       c2c45: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$cunsafeIndex_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2c46: // global
           I64[Sp - 40] = block_c2c3a_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2c4p; else goto c2c3b;
       u2c4p: // global
           call _c2c3a(R1) args: 0, res: 0, upd: 0;
       c2c3b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$cunsafeIndex_info" {
     GHC.Arr.$fIx(,,)_$cunsafeIndex_info:
         const GHC.Arr.$fIx(,,)_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c2c3a() //  [R1]
         { []
         }
     {offset
       c2c3a: // global
           I64[Sp - 8] = block_c2c3g_info;
           _s2aIC::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aIC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2c4o; else goto c2c3h;
       u2c4o: // global
           call _c2c3g(R1) args: 0, res: 0, upd: 0;
       c2c3h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c3a_info" {
     block_c2c3a_info:
         const _c2c3a;
         const 4;
         const 30;
 },
 _c2c3g() //  [R1]
         { []
         }
     {offset
       c2c3g: // global
           I64[Sp - 16] = block_c2c3l_info;
           _s2aIE::P64 = P64[R1 + 7];
           _s2aIF::P64 = P64[R1 + 15];
           _s2aIG::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s2aIG::P64;
           P64[Sp] = _s2aIF::P64;
           P64[Sp + 8] = _s2aIE::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2c4q; else goto c2c3m;
       u2c4q: // global
           call _c2c3l(R1) args: 0, res: 0, upd: 0;
       c2c3m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c3g_info" {
     block_c2c3g_info:
         const _c2c3g;
         const 5;
         const 30;
 },
 _c2c3l() //  [R1]
         { []
         }
     {offset
       c2c3l: // global
           I64[Sp - 16] = block_c2c3q_info;
           _s2aII::P64 = P64[R1 + 7];
           _s2aIJ::P64 = P64[R1 + 15];
           _s2aIK::P64 = P64[R1 + 23];
           R1 = P64[Sp + 56];
           P64[Sp - 8] = _s2aIK::P64;
           P64[Sp] = _s2aIJ::P64;
           P64[Sp + 56] = _s2aII::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2c4r; else goto c2c3r;
       u2c4r: // global
           call _c2c3q(R1) args: 0, res: 0, upd: 0;
       c2c3r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c3l_info" {
     block_c2c3l_info:
         const _c2c3l;
         const 7;
         const 30;
 },
 _c2c3q() //  [R1]
         { []
         }
     {offset
       c2c3q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2c4c; else goto c2c4b;
       c2c4c: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2c4b: // global
           _s2aIM::P64 = P64[R1 + 7];
           _s2aIN::P64 = P64[R1 + 15];
           _s2aIO::P64 = P64[R1 + 23];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_c2c3w_info;
           R2 = P64[Sp + 64];
           I64[Sp - 32] = stg_ap_pp_info;
           _c2c3v::P64 = Hp - 15;
           P64[Sp - 24] = _c2c3v::P64;
           P64[Sp - 16] = _s2aIO::P64;
           P64[Sp] = _s2aIN::P64;
           P64[Sp + 8] = _s2aIM::P64;
           P64[Sp + 24] = _c2c3v::P64;
           Sp = Sp - 32;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c3q_info" {
     block_c2c3q_info:
         const _c2c3q;
         const 9;
         const 30;
 },
 _c2c3w() //  [R1]
         { []
         }
     {offset
       c2c3w: // global
           I64[Sp] = block_c2c3A_info;
           R2 = P64[Sp + 72];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 32];
           I64[Sp + 72] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c3w_info" {
     block_c2c3w_info:
         const _c2c3w;
         const 10;
         const 30;
 },
 _c2c3A() //  [R1]
         { []
         }
     {offset
       c2c3A: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2c4g; else goto c2c4f;
       c2c4g: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2c4f: // global
           _s2aIU::I64 = I64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 24];
           _s2aIN::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2c3F_info;
           R2 = P64[Sp + 64];
           I64[Sp - 16] = stg_ap_pp_info;
           _c2c3E::P64 = Hp - 15;
           P64[Sp - 8] = _c2c3E::P64;
           P64[Sp] = _s2aIN::P64;
           I64[Sp + 32] = _s2aIU::I64;
           P64[Sp + 40] = _c2c3E::P64;
           Sp = Sp - 16;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c3A_info" {
     block_c2c3A_info:
         const _c2c3A;
         const 16906;
         const 30;
 },
 _c2c3F() //  [R1]
         { []
         }
     {offset
       c2c3F: // global
           I64[Sp] = block_c2c3J_info;
           R2 = P64[Sp + 56];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 32];
           I64[Sp + 56] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c3F_info" {
     block_c2c3F_info:
         const _c2c3F;
         const 8585;
         const 30;
 },
 _c2c3J() //  [R1]
         { []
         }
     {offset
       c2c3J: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2c4k; else goto c2c4j;
       c2c4k: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2c4j: // global
           _s2aJ0::I64 = I64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 72];
           I64[Sp + 16] = block_c2c3O_info;
           R2 = P64[Sp + 48];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Hp - 15;
           I64[Sp + 72] = _s2aJ0::I64;
           Sp = Sp - 8;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c3J_info" {
     block_c2c3J_info:
         const _c2c3J;
         const 13193;
         const 30;
 },
 _c2c3O() //  [R1]
         { []
         }
     {offset
       c2c3O: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2c4n; else goto c2c4m;
       c2c4n: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2c4m: // global
           _s2aJ7::I64 = I64[Sp + 48] + I64[Sp + 8] * (I64[Sp + 40] + I64[Sp + 56] * I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2aJ7::I64;
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c3O_info" {
     block_c2c3O_info:
         const _c2c3O;
         const 8135;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.506506808 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$cunsafeRangeSize_closure" {
     GHC.Arr.$fIx(,,)_$cunsafeRangeSize_closure:
         const GHC.Arr.$fIx(,,)_$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIx(,,)_$cunsafeRangeSize_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2c5L: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2c5W; else goto c2c5X;
       c2c5W: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2c5X: // global
           I64[Sp - 32] = block_c2c5I_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2c62; else goto c2c5J;
       u2c62: // global
           call _c2c5I(R1) args: 0, res: 0, upd: 0;
       c2c5J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$cunsafeRangeSize_info" {
     GHC.Arr.$fIx(,,)_$cunsafeRangeSize_info:
         const GHC.Arr.$fIx(,,)_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c2c5I() //  [R1]
         { []
         }
     {offset
       c2c5I: // global
           _s2aJa::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c2c5O_info;
           R6 = P64[R1 + 15];
           R5 = R1;
           R4 = _s2aJa::P64;
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Arr.$fIx(,,)_$cunsafeIndex_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c5I_info" {
     block_c2c5I_info:
         const _c2c5I;
         const 3;
         const 30;
 },
 _c2c5O() //  [R1]
         { []
         }
     {offset
       c2c5O: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2c61; else goto c2c60;
       c2c61: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2c60: // global
           _s2aJh::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2aJh::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c5O_info" {
     block_c2c5O_info:
         const _c2c5O;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.515159451 UTC

[section ""data" . GHC.Arr.$w$crangeSize1_closure" {
     GHC.Arr.$w$crangeSize1_closure:
         const GHC.Arr.$w$crangeSize1_info;
 },
 GHC.Arr.$w$crangeSize1_slow() //  [R1]
         { []
         }
     {offset
       c2c6l: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$w$crangeSize1_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2,
                                             R1) args: 40, res: 0, upd: 8;
     }
 },
 GHC.Arr.$w$crangeSize1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2c6y: // global
           _s2aJm::P64 = R6;
           _s2aJl::P64 = R5;
           _s2aJk::P64 = R4;
           _s2aJj::P64 = R3;
           _s2aJi::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c2c6z; else goto c2c6A;
       c2c6A: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2c6C; else goto c2c6B;
       c2c6C: // global
           HpAlloc = 88;
           goto c2c6z;
       c2c6z: // global
           R1 = GHC.Arr.$w$crangeSize1_closure;
           P64[Sp - 40] = _s2aJi::P64;
           P64[Sp - 32] = _s2aJj::P64;
           P64[Sp - 24] = _s2aJk::P64;
           P64[Sp - 16] = _s2aJl::P64;
           P64[Sp - 8] = _s2aJm::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c2c6B: // global
           I64[Hp - 80] = (,,)_con_info;
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           I64[Hp - 48] = (,,)_con_info;
           P64[Hp - 40] = _s2aJl::P64;
           P64[Hp - 32] = _s2aJm::P64;
           P64[Hp - 24] = P64[Sp];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 47;
           _c2c6p::P64 = Hp - 79;
           P64[Hp] = _c2c6p::P64;
           I64[Sp - 16] = block_c2c6s_info;
           R6 = _c2c6p::P64;
           _c2c6r::P64 = Hp - 15;
           R5 = _c2c6r::P64;
           R4 = _s2aJk::P64;
           R3 = _s2aJj::P64;
           R2 = _s2aJi::P64;
           P64[Sp - 8] = _s2aJk::P64;
           P64[Sp] = _s2aJj::P64;
           P64[Sp + 8] = _s2aJi::P64;
           P64[Sp + 16] = _c2c6r::P64;
           P64[Sp + 24] = _c2c6p::P64;
           Sp = Sp - 16;
           call GHC.Arr.$fIx(,,)_$cinRange_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$crangeSize1_info" {
     GHC.Arr.$w$crangeSize1_info:
         const GHC.Arr.$w$crangeSize1_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const GHC.Arr.$w$crangeSize1_slow;
 },
 _c2c6s() //  [R1]
         { []
         }
     {offset
       c2c6s: // global
           if (R1 & 7 == 1) goto c2c6v; else goto c2c6w;
       c2c6v: // global
           R1 = 0;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2c6w: // global
           _c2c6p::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_c2c6I_info;
           R6 = _c2c6p::P64;
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 24];
           Sp = Sp + 40;
           call GHC.Arr.$fIx(,,)_$cunsafeIndex_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c6s_info" {
     block_c2c6s_info:
         const _c2c6s;
         const 5;
         const 30;
 },
 _c2c6I() //  [R1]
         { []
         }
     {offset
       c2c6I: // global
           R1 = I64[R1 + 7] + 1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c6I_info" {
     block_c2c6I_info:
         const _c2c6I;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.526325148 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$crangeSize_closure" {
     GHC.Arr.$fIx(,,)_$crangeSize_closure:
         const GHC.Arr.$fIx(,,)_$crangeSize_info;
 },
 GHC.Arr.$fIx(,,)_$crangeSize_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2c7o: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2c7G; else goto c2c7H;
       c2c7G: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$crangeSize_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2c7H: // global
           I64[Sp - 32] = block_c2c7l_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2c7P; else goto c2c7m;
       u2c7P: // global
           call _c2c7l(R1) args: 0, res: 0, upd: 0;
       c2c7m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$crangeSize_info" {
     GHC.Arr.$fIx(,,)_$crangeSize_info:
         const GHC.Arr.$fIx(,,)_$crangeSize_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c2c7l() //  [R1]
         { []
         }
     {offset
       c2c7l: // global
           I64[Sp - 8] = block_c2c7r_info;
           _s2aJD::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aJD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2c7O; else goto c2c7s;
       u2c7O: // global
           call _c2c7r(R1) args: 0, res: 0, upd: 0;
       c2c7s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c7l_info" {
     block_c2c7l_info:
         const _c2c7l;
         const 3;
         const 30;
 },
 _c2c7r() //  [R1]
         { []
         }
     {offset
       c2c7r: // global
           I64[Sp - 16] = block_c2c7w_info;
           _s2aJF::P64 = P64[R1 + 7];
           _s2aJG::P64 = P64[R1 + 15];
           _s2aJH::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s2aJH::P64;
           P64[Sp] = _s2aJG::P64;
           P64[Sp + 8] = _s2aJF::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2c7Q; else goto c2c7x;
       u2c7Q: // global
           call _c2c7w(R1) args: 0, res: 0, upd: 0;
       c2c7x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c7r_info" {
     block_c2c7r_info:
         const _c2c7r;
         const 4;
         const 30;
 },
 _c2c7w() //  [R1]
         { []
         }
     {offset
       c2c7w: // global
           _s2aJz::P64 = P64[Sp + 48];
           I64[Sp + 48] = block_c2c7B_info;
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 24];
           R4 = _s2aJz::P64;
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           P64[Sp + 16] = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 7];
           P64[Sp + 32] = P64[R1 + 15];
           P64[Sp + 40] = P64[R1 + 23];
           Sp = Sp + 16;
           call GHC.Arr.$w$crangeSize1_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 40, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c7w_info" {
     block_c2c7w_info:
         const _c2c7w;
         const 6;
         const 30;
 },
 _c2c7B() //  [R1]
         { []
         }
     {offset
       c2c7B: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2c7N; else goto c2c7M;
       c2c7N: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2c7M: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c7B_info" {
     block_c2c7B_info:
         const _c2c7B;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.543737045 UTC

[section ""data" . GHC.Arr.$w$s$crange_closure" {
     GHC.Arr.$w$s$crange_closure:
         const GHC.Arr.$w$s$crange_info;
 },
 GHC.Arr.$w$s$crange_slow() //  [R1]
         { []
         }
     {offset
       c2c8m: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$w$s$crange_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2,
                                          R1) args: 16, res: 0, upd: 8;
     }
 },
 n_s2aK0_entry() //  [R1]
         { []
         }
     {offset
       c2c8R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2c8S; else goto c2c8T;
       c2c8S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2c8T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2aJV::I64 = I64[R1 + 32];
           if (_s2aJV::I64 == I64[R1 + 24]) goto c2c8Q; else goto c2c8P;
       c2c8Q: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c2c8P: // global
           R2 = _s2aJV::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s2aJU_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . n_s2aK0_info" {
     n_s2aK0_info:
         const n_s2aK0_entry;
         const 8589934593;
         const 15;
 },
 n1_s2aKb_entry() //  [R1]
         { []
         }
     {offset
       c2c9o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2c9p; else goto c2c9q;
       c2c9p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2c9q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2aK6::I64 = I64[R1 + 40];
           if (_s2aK6::I64 == I64[R1 + 32]) goto c2c9n; else goto c2c9m;
       c2c9n: // global
           R1 = P64[R1 + 16] & (-8);
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c2c9m: // global
           R2 = _s2aK6::I64 + 1;
           R1 = P64[R1 + 24];
           Sp = Sp - 16;
           call go1_s2aK5_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . n1_s2aKb_info" {
     n1_s2aKb_info:
         const n1_s2aKb_entry;
         const 8589934594;
         const 15;
 },
 sat_s2aKm_entry() //  [R1]
         { []
         }
     {offset
       c2c9L: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2c9M; else goto c2c9N;
       c2c9M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2c9N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2aKh::I64 = I64[R1 + 40];
           if (_s2aKh::I64 == I64[R1 + 32]) goto c2c9K; else goto c2c9J;
       c2c9K: // global
           R1 = P64[R1 + 16] & (-8);
           Sp = Sp - 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c2c9J: // global
           R2 = _s2aKh::I64 + 1;
           R1 = P64[R1 + 24];
           Sp = Sp - 16;
           call go2_s2aKg_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aKm_info" {
     sat_s2aKm_info:
         const sat_s2aKm_entry;
         const 8589934594;
         const 15;
 },
 go2_s2aKg_entry() //  [R1, R2]
         { []
         }
     {offset
       c2c9T: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c2c9X; else goto c2c9W;
       c2c9X: // global
           HpAlloc = 120;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2c9W: // global
           _s2aK4::P64 = P64[R1 + 7];
           _s2aKb::P64 = P64[R1 + 15];
           _s2aKf::P64 = P64[R1 + 23];
           _s2aKa::I64 = I64[R1 + 31];
           I64[Hp - 112] = sat_s2aKm_info;
           P64[Hp - 96] = _s2aKb::P64;
           P64[Hp - 88] = R1;
           I64[Hp - 80] = _s2aKa::I64;
           I64[Hp - 72] = R2;
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = (,,)_con_info;
           P64[Hp - 40] = _s2aK4::P64;
           P64[Hp - 32] = _s2aKf::P64;
           P64[Hp - 24] = Hp - 63;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = Hp - 112;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go2_s2aKg_info" {
     go2_s2aKg_info:
         const go2_s2aKg_entry;
         const 4294967299;
         const 8;
         const 4294967300;
 },
 go1_s2aK5_entry() //  [R1, R2]
         { []
         }
     {offset
       c2c9Y: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2c9Z; else goto c2ca0;
       c2c9Z: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2ca0: // global
           I64[Sp - 56] = block_c2c95_info;
           _s2aK5::P64 = R1;
           _s2aJS::P64 = P64[R1 + 15];
           _s2aK0::P64 = P64[R1 + 23];
           _s2aK4::P64 = P64[R1 + 31];
           _s2aJZ::I64 = I64[R1 + 39];
           R1 = P64[R1 + 7];
           P64[Sp - 48] = _s2aJS::P64;
           I64[Sp - 40] = _s2aJZ::I64;
           P64[Sp - 32] = _s2aK0::P64;
           P64[Sp - 24] = _s2aK4::P64;
           P64[Sp - 16] = _s2aK5::P64;
           I64[Sp - 8] = R2;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u2ca9; else goto c2c96;
       u2ca9: // global
           call _c2c95(R1) args: 0, res: 0, upd: 0;
       c2c96: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s2aK5_info" {
     go1_s2aK5_info:
         const go1_s2aK5_entry;
         const 4294967300;
         const 8;
         const 4294967300;
 },
 _c2c95() //  [R1]
         { []
         }
     {offset
       c2c95: // global
           I64[Sp] = block_c2c9a_info;
           _s2aK8::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2aK8::I64;
           if (R1 & 7 != 0) goto u2ca8; else goto c2c9b;
       u2ca8: // global
           call _c2c9a(R1) args: 0, res: 0, upd: 0;
       c2c9b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c95_info" {
     block_c2c95_info:
         const _c2c95;
         const 2182;
         const 30;
 },
 _c2c9a() //  [R1]
         { []
         }
     {offset
       c2c9a: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c2ca4; else goto c2ca3;
       c2ca4: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2ca3: // global
           _s2aKa::I64 = I64[R1 + 7];
           I64[Hp - 96] = n1_s2aKb_info;
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 40];
           I64[Hp - 64] = I64[Sp + 16];
           _s2aK6::I64 = I64[Sp + 48];
           I64[Hp - 56] = _s2aK6::I64;
           _s2aK8::I64 = I64[Sp + 8];
           _c2c9f::P64 = Hp - 96;
           if (%MO_S_Le_W64(_s2aK8::I64,
                            _s2aKa::I64)) goto c2ca6; else goto c2ca7;
       c2ca6: // global
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _s2aK6::I64;
           I64[Hp - 32] = go2_s2aKg_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = _c2c9f::P64;
           P64[Hp - 8] = Hp - 47;
           I64[Hp] = _s2aKa::I64;
           R2 = _s2aK8::I64;
           R1 = Hp - 31;
           Sp = Sp + 56;
           call go2_s2aKg_entry(R2, R1) args: 8, res: 0, upd: 8;
       c2ca7: // global
           Hp = Hp - 56;
           R1 = _c2c9f::P64 & (-8);
           Sp = Sp + 56;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c9a_info" {
     block_c2c9a_info:
         const _c2c9a;
         const 2246;
         const 30;
 },
 go_s2aJU_entry() //  [R1, R2]
         { []
         }
     {offset
       c2caa: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2cab; else goto c2cac;
       c2cab: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2cac: // global
           I64[Sp - 56] = block_c2c8y_info;
           _s2aJU::P64 = R1;
           _s2aJP::P64 = P64[R1 + 15];
           _s2aJR::P64 = P64[R1 + 23];
           _s2aJS::P64 = P64[R1 + 31];
           _s2aJQ::I64 = I64[R1 + 39];
           R1 = P64[R1 + 7];
           P64[Sp - 48] = _s2aJP::P64;
           I64[Sp - 40] = _s2aJQ::I64;
           P64[Sp - 32] = _s2aJR::P64;
           P64[Sp - 24] = _s2aJS::P64;
           P64[Sp - 16] = _s2aJU::P64;
           I64[Sp - 8] = R2;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u2cal; else goto c2c8z;
       u2cal: // global
           call _c2c8y(R1) args: 0, res: 0, upd: 0;
       c2c8z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s2aJU_info" {
     go_s2aJU_info:
         const go_s2aJU_entry;
         const 4294967300;
         const 8;
         const 4294967300;
 },
 _c2c8y() //  [R1]
         { []
         }
     {offset
       c2c8y: // global
           I64[Sp] = block_c2c8D_info;
           _s2aJX::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s2aJX::I64;
           if (R1 & 7 != 0) goto u2cak; else goto c2c8E;
       u2cak: // global
           call _c2c8D(R1) args: 0, res: 0, upd: 0;
       c2c8E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c8y_info" {
     block_c2c8y_info:
         const _c2c8y;
         const 2182;
         const 30;
 },
 _c2c8D() //  [R1]
         { []
         }
     {offset
       c2c8D: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c2cag; else goto c2caf;
       c2cag: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2caf: // global
           _s2aJZ::I64 = I64[R1 + 7];
           I64[Hp - 96] = n_s2aK0_info;
           P64[Hp - 80] = P64[Sp + 40];
           I64[Hp - 72] = I64[Sp + 16];
           _s2aJV::I64 = I64[Sp + 48];
           I64[Hp - 64] = _s2aJV::I64;
           _s2aJX::I64 = I64[Sp + 24];
           _c2c8I::P64 = Hp - 96;
           if (%MO_S_Le_W64(_s2aJX::I64,
                            _s2aJZ::I64)) goto c2cai; else goto c2caj;
       c2cai: // global
           I64[Hp - 56] = GHC.Types.I#_con_info;
           I64[Hp - 48] = _s2aJV::I64;
           I64[Hp - 40] = go1_s2aK5_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = _c2c8I::P64;
           P64[Hp - 8] = Hp - 55;
           I64[Hp] = _s2aJZ::I64;
           R2 = _s2aJX::I64;
           R1 = Hp - 39;
           Sp = Sp + 56;
           call go1_s2aK5_entry(R2, R1) args: 8, res: 0, upd: 8;
       c2caj: // global
           Hp = Hp - 64;
           R1 = _c2c8I::P64 & (-8);
           Sp = Sp + 56;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2c8D_info" {
     block_c2c8D_info:
         const _c2c8D;
         const 2438;
         const 30;
 },
 GHC.Arr.$w$s$crange_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2cap: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c2cat; else goto c2cas;
       c2cat: // global
           HpAlloc = 48;
           R1 = GHC.Arr.$w$s$crange_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c2cas: // global
           if (%MO_S_Le_W64(R2, R5)) goto c2can; else goto c2cao;
       c2can: // global
           I64[Hp - 40] = go_s2aJU_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           I64[Hp] = R5;
           R2 = R2;
           R1 = Hp - 39;
           Sp = Sp + 8;
           call go_s2aJU_entry(R2, R1) args: 8, res: 0, upd: 8;
       c2cao: // global
           Hp = Hp - 48;
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$s$crange_info" {
     GHC.Arr.$w$s$crange_info:
         const GHC.Arr.$w$s$crange_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 582;
         const GHC.Arr.$w$s$crange_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.570849088 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$s$crange_closure" {
     GHC.Arr.$fIx(,,)_$s$crange_closure:
         const GHC.Arr.$fIx(,,)_$s$crange_info;
 },
 GHC.Arr.$fIx(,,)_$s$crange_entry() //  [R2]
         { []
         }
     {offset
       c2cc3: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2ccm; else goto c2ccn;
       c2ccm: // global
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$s$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2ccn: // global
           I64[Sp - 8] = block_c2cc0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2ccy; else goto c2cc1;
       u2ccy: // global
           call _c2cc0(R1) args: 0, res: 0, upd: 0;
       c2cc1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$s$crange_info" {
     GHC.Arr.$fIx(,,)_$s$crange_info:
         const GHC.Arr.$fIx(,,)_$s$crange_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2cc0() //  [R1]
         { []
         }
     {offset
       c2cc0: // global
           I64[Sp - 8] = block_c2cc6_info;
           _s2aKq::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aKq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2ccx; else goto c2cc7;
       u2ccx: // global
           call _c2cc6(R1) args: 0, res: 0, upd: 0;
       c2cc7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cc0_info" {
     block_c2cc0_info:
         const _c2cc0;
         const 0;
         const 30;
 },
 _c2cc6() //  [R1]
         { []
         }
     {offset
       c2cc6: // global
           I64[Sp - 16] = block_c2ccb_info;
           _s2aKt::P64 = P64[R1 + 15];
           _s2aKu::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2aKu::P64;
           P64[Sp] = _s2aKt::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2ccz; else goto c2ccc;
       u2ccz: // global
           call _c2ccb(R1) args: 0, res: 0, upd: 0;
       c2ccc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cc6_info" {
     block_c2cc6_info:
         const _c2cc6;
         const 1;
         const 30;
 },
 _c2ccb() //  [R1]
         { []
         }
     {offset
       c2ccb: // global
           I64[Sp] = block_c2ccg_info;
           _s2aKw::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s2aKw::I64;
           if (R1 & 7 != 0) goto u2ccA; else goto c2cch;
       u2ccA: // global
           call _c2ccg(R1) args: 0, res: 0, upd: 0;
       c2cch: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ccb_info" {
     block_c2ccb_info:
         const _c2ccb;
         const 3;
         const 30;
 },
 _c2ccg() //  [R1]
         { []
         }
     {offset
       c2ccg: // global
           I64[Sp - 16] = block_c2ccl_info;
           _s2aKz::P64 = P64[R1 + 15];
           _s2aKA::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2aKA::P64;
           P64[Sp] = _s2aKz::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2ccB; else goto c2ccs;
       u2ccB: // global
           call _c2ccl(R1) args: 0, res: 0, upd: 0;
       c2ccs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ccg_info" {
     block_c2ccg_info:
         const _c2ccg;
         const 259;
         const 30;
 },
 _c2ccl() //  [R1]
         { []
         }
     {offset
       c2ccl: // global
           R6 = P64[Sp + 16];
           R5 = I64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Arr.$w$s$crange_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ccl_info" {
     block_c2ccl_info:
         const _c2ccl;
         const 1029;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.589321195 UTC

[section ""data" . GHC.Arr.$w$crange_closure" {
     GHC.Arr.$w$crange_closure:
         const GHC.Arr.$w$crange_info;
 },
 GHC.Arr.$w$crange_slow() //  [R1]
         { []
         }
     {offset
       c2cd8: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$w$crange_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2,
                                        R1) args: 40, res: 0, upd: 8;
     }
 },
 lvl50_s2aKM_entry() //  [R1]
         { []
         }
     {offset
       c2cdh: // global
           _s2aKM::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c2cdi; else goto c2cdj;
       c2cdj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2cdl; else goto c2cdk;
       c2cdl: // global
           HpAlloc = 24;
           goto c2cdi;
       c2cdi: // global
           R1 = _s2aKM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2cdk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2aKM::P64;
           _s2aKF::P64 = P64[_s2aKM::P64 + 16];
           _s2aKI::P64 = P64[_s2aKM::P64 + 24];
           _s2aKL::P64 = P64[_s2aKM::P64 + 32];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2aKI::P64;
           P64[Hp] = _s2aKL::P64;
           R2 = _s2aKF::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Arr.range_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl50_s2aKM_info" {
     lvl50_s2aKM_info:
         const lvl50_s2aKM_entry;
         const 3;
         const 15;
 },
 lvl51_s2aKO_entry() //  [R1]
         { []
         }
     {offset
       c2cdr: // global
           _s2aKO::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c2cds; else goto c2cdt;
       c2cdt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2cdv; else goto c2cdu;
       c2cdv: // global
           HpAlloc = 24;
           goto c2cds;
       c2cds: // global
           R1 = _s2aKO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2cdu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2aKO::P64;
           _s2aKE::P64 = P64[_s2aKO::P64 + 16];
           _s2aKH::P64 = P64[_s2aKO::P64 + 24];
           _s2aKK::P64 = P64[_s2aKO::P64 + 32];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2aKH::P64;
           P64[Hp] = _s2aKK::P64;
           R2 = _s2aKE::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Arr.range_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl51_s2aKO_info" {
     lvl51_s2aKO_info:
         const lvl51_s2aKO_entry;
         const 3;
         const 15;
 },
 go2_s2aL2_entry() //  [R1, R2]
         { []
         }
     {offset
       c2ce6: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2ce7; else goto c2ce8;
       c2ce7: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2ce8: // global
           I64[Sp - 40] = block_c2cdZ_info;
           _s2aL2::P64 = R1;
           _s2aKT::P64 = P64[R1 + 7];
           _s2aKZ::P64 = P64[R1 + 15];
           _s2aL1::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _s2aKT::P64;
           P64[Sp - 24] = _s2aKZ::P64;
           P64[Sp - 16] = _s2aL1::P64;
           P64[Sp - 8] = _s2aL2::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2cek; else goto c2ce0;
       u2cek: // global
           call _c2cdZ(R1) args: 0, res: 0, upd: 0;
       c2ce0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go2_s2aL2_info" {
     go2_s2aL2_info:
         const go2_s2aL2_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c2cdZ() //  [R1]
         { []
         }
     {offset
       c2cdZ: // global
           if (R1 & 7 == 1) goto c2ce3; else goto c2ce4;
       c2ce3: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2ce4: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2cej; else goto c2cei;
       c2cej: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2cei: // global
           _s2aL5::P64 = P64[R1 + 6];
           _s2aL6::P64 = P64[R1 + 14];
           I64[Hp - 80] = stg_ap_2_upd_info;
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s2aL6::P64;
           I64[Hp - 48] = (,,)_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s2aL5::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cdZ_info" {
     block_c2cdZ_info:
         const _c2cdZ;
         const 4;
         const 30;
 },
 go1_s2aKW_entry() //  [R1, R2]
         { []
         }
     {offset
       c2cep: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2ceq; else goto c2cer;
       c2ceq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2cer: // global
           I64[Sp - 40] = block_c2cdN_info;
           _s2aKW::P64 = R1;
           _s2aKM::P64 = P64[R1 + 7];
           _s2aKT::P64 = P64[R1 + 15];
           _s2aKV::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _s2aKM::P64;
           P64[Sp - 24] = _s2aKT::P64;
           P64[Sp - 16] = _s2aKV::P64;
           P64[Sp - 8] = _s2aKW::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2cex; else goto c2cdO;
       u2cex: // global
           call _c2cdN(R1) args: 0, res: 0, upd: 0;
       c2cdO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s2aKW_info" {
     go1_s2aKW_info:
         const go1_s2aKW_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c2cdN() //  [R1]
         { []
         }
     {offset
       c2cdN: // global
           if (R1 & 7 == 1) goto c2cem; else goto c2cen;
       c2cem: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2cen: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c2cew; else goto c2cev;
       c2cew: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2cev: // global
           _s2aKZ::P64 = P64[R1 + 6];
           _s2aL0::P64 = P64[R1 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _s2aL0::P64;
           I64[Hp - 24] = go2_s2aL2_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s2aKZ::P64;
           P64[Hp] = Hp - 56;
           R2 = P64[Sp + 8];
           R1 = Hp - 23;
           Sp = Sp + 40;
           call go2_s2aL2_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cdN_info" {
     block_c2cdN_info:
         const _c2cdN;
         const 4;
         const 30;
 },
 go_s2aKQ_entry() //  [R1, R2]
         { []
         }
     {offset
       c2ceC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2ceD; else goto c2ceE;
       c2ceD: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2ceE: // global
           I64[Sp - 32] = block_c2cdB_info;
           _s2aKQ::P64 = R1;
           _s2aKM::P64 = P64[R1 + 7];
           _s2aKO::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s2aKM::P64;
           P64[Sp - 16] = _s2aKO::P64;
           P64[Sp - 8] = _s2aKQ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2ceK; else goto c2cdC;
       u2ceK: // global
           call _c2cdB(R1) args: 0, res: 0, upd: 0;
       c2cdC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s2aKQ_info" {
     go_s2aKQ_info:
         const go_s2aKQ_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c2cdB() //  [R1]
         { []
         }
     {offset
       c2cdB: // global
           if (R1 & 7 == 1) goto c2cez; else goto c2ceA;
       c2cez: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2ceA: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c2ceJ; else goto c2ceI;
       c2ceJ: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2ceI: // global
           _s2aKT::P64 = P64[R1 + 6];
           _s2aKU::P64 = P64[R1 + 14];
           I64[Hp - 56] = stg_ap_2_upd_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = _s2aKU::P64;
           I64[Hp - 24] = go1_s2aKW_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s2aKT::P64;
           P64[Hp] = Hp - 56;
           R2 = P64[Sp + 16];
           R1 = Hp - 23;
           Sp = Sp + 32;
           call go1_s2aKW_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cdB_info" {
     block_c2cdB_info:
         const _c2cdB;
         const 3;
         const 30;
 },
 GHC.Arr.$w$crange_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2ceO: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c2ceS; else goto c2ceR;
       c2ceS: // global
           HpAlloc = 128;
           R1 = GHC.Arr.$w$crange_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       c2ceR: // global
           I64[Hp - 120] = lvl50_s2aKM_info;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = P64[Sp];
           P64[Hp - 88] = P64[Sp + 24];
           I64[Hp - 80] = lvl51_s2aKO_info;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R6;
           P64[Hp - 48] = P64[Sp + 16];
           I64[Hp - 40] = go_s2aKQ_info;
           P64[Hp - 32] = Hp - 120;
           P64[Hp - 24] = Hp - 80;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R5;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 16] = block_c2ceM_info;
           R2 = R2;
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = Hp - 15;
           P64[Sp + 24] = Hp - 39;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$crange_info" {
     GHC.Arr.$w$crange_info:
         const GHC.Arr.$w$crange_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 9;
         const GHC.Arr.$w$crange_slow;
 },
 _c2ceM() //  [R1]
         { []
         }
     {offset
       c2ceM: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s2aKQ_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ceM_info" {
     block_c2ceM_info:
         const _c2ceM;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.613870325 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$crange_closure" {
     GHC.Arr.$fIx(,,)_$crange_closure:
         const GHC.Arr.$fIx(,,)_$crange_info;
 },
 GHC.Arr.$fIx(,,)_$crange_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2cgC: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2cgL; else goto c2cgM;
       c2cgL: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$crange_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2cgM: // global
           I64[Sp - 32] = block_c2cgz_info;
           R1 = R5;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2cgV; else goto c2cgA;
       u2cgV: // global
           call _c2cgz(R1) args: 0, res: 0, upd: 0;
       c2cgA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$crange_info" {
     GHC.Arr.$fIx(,,)_$crange_info:
         const GHC.Arr.$fIx(,,)_$crange_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c2cgz() //  [R1]
         { []
         }
     {offset
       c2cgz: // global
           I64[Sp - 8] = block_c2cgF_info;
           _s2aLh::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aLh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2cgU; else goto c2cgG;
       u2cgU: // global
           call _c2cgF(R1) args: 0, res: 0, upd: 0;
       c2cgG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cgz_info" {
     block_c2cgz_info:
         const _c2cgz;
         const 3;
         const 30;
 },
 _c2cgF() //  [R1]
         { []
         }
     {offset
       c2cgF: // global
           I64[Sp - 16] = block_c2cgK_info;
           _s2aLj::P64 = P64[R1 + 7];
           _s2aLk::P64 = P64[R1 + 15];
           _s2aLl::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s2aLl::P64;
           P64[Sp] = _s2aLk::P64;
           P64[Sp + 8] = _s2aLj::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2cgW; else goto c2cgP;
       u2cgW: // global
           call _c2cgK(R1) args: 0, res: 0, upd: 0;
       c2cgP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cgF_info" {
     block_c2cgF_info:
         const _c2cgF;
         const 4;
         const 30;
 },
 _c2cgK() //  [R1]
         { []
         }
     {offset
       c2cgK: // global
           R6 = P64[Sp + 16];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           P64[Sp + 24] = P64[Sp + 8];
           P64[Sp + 32] = P64[R1 + 7];
           P64[Sp + 40] = P64[R1 + 15];
           P64[Sp + 48] = P64[R1 + 23];
           Sp = Sp + 24;
           call GHC.Arr.$w$crange_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cgK_info" {
     block_c2cgK_info:
         const _c2cgK;
         const 6;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.625465481 UTC

[section ""data" . GHC.Arr.$fIx(,)_$s$crangeSize_closure" {
     GHC.Arr.$fIx(,)_$s$crangeSize_closure:
         const GHC.Arr.$fIx(,)_$s$crangeSize_info;
 },
 GHC.Arr.$fIx(,)_$s$crangeSize_entry() //  [R2]
         { []
         }
     {offset
       c2chs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2chL; else goto c2chM;
       c2chL: // global
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$s$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2chM: // global
           I64[Sp - 8] = block_c2chp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2ciL; else goto c2chq;
       u2ciL: // global
           call _c2chp(R1) args: 0, res: 0, upd: 0;
       c2chq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$s$crangeSize_info" {
     GHC.Arr.$fIx(,)_$s$crangeSize_info:
         const GHC.Arr.$fIx(,)_$s$crangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2chp() //  [R1]
         { []
         }
     {offset
       c2chp: // global
           I64[Sp - 8] = block_c2chv_info;
           _s2aLt::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aLt::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2ciK; else goto c2chw;
       u2ciK: // global
           call _c2chv(R1) args: 0, res: 0, upd: 0;
       c2chw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2chp_info" {
     block_c2chp_info:
         const _c2chp;
         const 0;
         const 30;
 },
 _c2chv() //  [R1]
         { []
         }
     {offset
       c2chv: // global
           I64[Sp - 8] = block_c2chA_info;
           _s2aLw::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aLw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2ciM; else goto c2chB;
       u2ciM: // global
           call _c2chA(R1) args: 0, res: 0, upd: 0;
       c2chB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2chv_info" {
     block_c2chv_info:
         const _c2chv;
         const 1;
         const 30;
 },
 _c2chA() //  [R1]
         { []
         }
     {offset
       c2chA: // global
           I64[Sp] = block_c2chF_info;
           _s2aLy::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2aLy::I64;
           if (R1 & 7 != 0) goto u2ciN; else goto c2chG;
       u2ciN: // global
           call _c2chF(R1) args: 0, res: 0, upd: 0;
       c2chG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2chA_info" {
     block_c2chA_info:
         const _c2chA;
         const 2;
         const 30;
 },
 _c2chF() //  [R1]
         { []
         }
     {offset
       c2chF: // global
           I64[Sp - 8] = block_c2chK_info;
           _s2aLB::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aLB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2ciO; else goto c2chR;
       u2ciO: // global
           call _c2chK(R1) args: 0, res: 0, upd: 0;
       c2chR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2chF_info" {
     block_c2chF_info:
         const _c2chF;
         const 130;
         const 30;
 },
 _c2chK() //  [R1]
         { []
         }
     {offset
       c2chK: // global
           _s2aLD::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(I64[Sp + 24],
                            _s2aLD::I64)) goto c2chZ; else goto c2ci8;
       c2chZ: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2ci8: // global
           I64[Sp] = block_c2ci2_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2aLD::I64;
           if (R1 & 7 != 0) goto u2ciP; else goto c2ci3;
       u2ciP: // global
           call _c2ci2(R1) args: 0, res: 0, upd: 0;
       c2ci3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2chK_info" {
     block_c2chK_info:
         const _c2chK;
         const 259;
         const 30;
 },
 _c2ci2() //  [R1]
         { []
         }
     {offset
       c2ci2: // global
           I64[Sp] = block_c2ci7_info;
           _s2aLG::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2aLG::I64;
           if (R1 & 7 != 0) goto u2ciQ; else goto c2cia;
       u2ciQ: // global
           call _c2ci7(R1) args: 0, res: 0, upd: 0;
       c2cia: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ci2_info" {
     block_c2ci2_info:
         const _c2ci2;
         const 387;
         const 30;
 },
 _c2ci7() //  [R1]
         { []
         }
     {offset
       c2ci7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2cig; else goto c2cif;
       c2cig: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2cif: // global
           _s2aLG::I64 = I64[Sp + 8];
           _s2aLI::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s2aLG::I64,
                            _s2aLI::I64)) goto c2cik; else goto c2ciJ;
       c2cik: // global
           Hp = Hp - 16;
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2ciJ: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = (I64[Sp + 16] - I64[Sp + 24]) * (_s2aLI::I64 + (1 - _s2aLG::I64)) + (_s2aLI::I64 - _s2aLG::I64) + 1;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ci7_info" {
     block_c2ci7_info:
         const _c2ci7;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.645224137 UTC

[section ""data" . GHC.Arr.$w$crangeSize_closure" {
     GHC.Arr.$w$crangeSize_closure:
         const GHC.Arr.$w$crangeSize_info;
 },
 GHC.Arr.$w$crangeSize_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2cjV: // global
           _s2aLV::P64 = R6;
           _s2aLU::P64 = R5;
           _s2aLT::P64 = R4;
           _s2aLS::P64 = R3;
           _s2aLR::P64 = R2;
           if ((Sp + -72) < SpLim) (likely: False) goto c2cjW; else goto c2cjX;
       c2cjX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2cjZ; else goto c2cjY;
       c2cjZ: // global
           HpAlloc = 24;
           goto c2cjW;
       c2cjW: // global
           R6 = _s2aLV::P64;
           R5 = _s2aLU::P64;
           R4 = _s2aLT::P64;
           R3 = _s2aLS::P64;
           R2 = _s2aLR::P64;
           R1 = GHC.Arr.$w$crangeSize_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c2cjY: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2aLT::P64;
           P64[Hp] = _s2aLV::P64;
           I64[Sp - 48] = block_c2cjP_info;
           R2 = _s2aLR::P64;
           I64[Sp - 72] = stg_ap_pp_info;
           _c2cjO::P64 = Hp - 15;
           P64[Sp - 64] = _c2cjO::P64;
           P64[Sp - 56] = _s2aLV::P64;
           P64[Sp - 40] = _c2cjO::P64;
           P64[Sp - 32] = _s2aLR::P64;
           P64[Sp - 24] = _s2aLS::P64;
           P64[Sp - 16] = _s2aLU::P64;
           P64[Sp - 8] = _s2aLV::P64;
           Sp = Sp - 72;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$crangeSize_info" {
     GHC.Arr.$w$crangeSize_info:
         const GHC.Arr.$w$crangeSize_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _c2cjP() //  [R1]
         { []
         }
     {offset
       c2cjP: // global
           if (R1 & 7 == 1) goto u2ckH; else goto c2cjT;
       u2ckH: // global
           Sp = Sp + 56;
           call _c2ckf() args: 0, res: 0, upd: 0;
       c2cjT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2ck9; else goto c2ck8;
       c2ck9: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2ck8: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           _s2aLW::P64 = P64[Sp + 48];
           P64[Hp] = _s2aLW::P64;
           I64[Sp] = block_c2ck6_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_pp_info;
           _c2ck5::P64 = Hp - 15;
           P64[Sp - 16] = _c2ck5::P64;
           P64[Sp - 8] = _s2aLW::P64;
           P64[Sp + 32] = _c2ck5::P64;
           Sp = Sp - 24;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cjP_info" {
     block_c2cjP_info:
         const _c2cjP;
         const 6;
         const 30;
 },
 _c2ck6() //  [R1]
         { []
         }
     {offset
       c2ck6: // global
           if (R1 & 7 == 1) goto u2ckI; else goto c2ckC;
       u2ckI: // global
           Sp = Sp + 56;
           call _c2ckf() args: 0, res: 0, upd: 0;
       c2ckC: // global
           _s2aLR::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c2cki_info;
           R2 = _s2aLR::P64;
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 40];
           Sp = Sp - 8;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ck6_info" {
     block_c2ck6_info:
         const _c2ck6;
         const 6;
         const 30;
 },
 _c2ckf() //  []
         { []
         }
     {offset
       c2ckf: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2cki() //  [R1]
         { []
         }
     {offset
       c2cki: // global
           I64[Sp] = block_c2ckm_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 16];
           I64[Sp + 24] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cki_info" {
     block_c2cki_info:
         const _c2cki;
         const 260;
         const 30;
 },
 _c2ckm() //  [R1]
         { []
         }
     {offset
       c2ckm: // global
           _c2ck5::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c2ckq_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _c2ck5::P64;
           P64[Sp + 8] = P64[Sp + 32];
           I64[Sp + 32] = I64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ckm_info" {
     block_c2ckm_info:
         const _c2ckm;
         const 260;
         const 30;
 },
 _c2ckq() //  [R1]
         { []
         }
     {offset
       c2ckq: // global
           R1 = I64[Sp + 8] * I64[Sp + 16] + I64[R1 + 7] + 1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ckq_info" {
     block_c2ckq_info:
         const _c2ckq;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.660270446 UTC

[section ""data" . GHC.Arr.$fIx(,)_$crangeSize_closure" {
     GHC.Arr.$fIx(,)_$crangeSize_closure:
         const GHC.Arr.$fIx(,)_$crangeSize_info;
 },
 GHC.Arr.$fIx(,)_$crangeSize_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2clH: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2clZ; else goto c2cm0;
       c2clZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$crangeSize_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2cm0: // global
           I64[Sp - 24] = block_c2clE_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2cm8; else goto c2clF;
       u2cm8: // global
           call _c2clE(R1) args: 0, res: 0, upd: 0;
       c2clF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$crangeSize_info" {
     GHC.Arr.$fIx(,)_$crangeSize_info:
         const GHC.Arr.$fIx(,)_$crangeSize_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c2clE() //  [R1]
         { []
         }
     {offset
       c2clE: // global
           I64[Sp - 8] = block_c2clK_info;
           _s2aMh::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aMh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2cm7; else goto c2clL;
       u2cm7: // global
           call _c2clK(R1) args: 0, res: 0, upd: 0;
       c2clL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2clE_info" {
     block_c2clE_info:
         const _c2clE;
         const 2;
         const 30;
 },
 _c2clK() //  [R1]
         { []
         }
     {offset
       c2clK: // global
           I64[Sp - 8] = block_c2clP_info;
           _s2aMj::P64 = P64[R1 + 7];
           _s2aMk::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s2aMk::P64;
           P64[Sp + 8] = _s2aMj::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2cm9; else goto c2clQ;
       u2cm9: // global
           call _c2clP(R1) args: 0, res: 0, upd: 0;
       c2clQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2clK_info" {
     block_c2clK_info:
         const _c2clK;
         const 3;
         const 30;
 },
 _c2clP() //  [R1]
         { []
         }
     {offset
       c2clP: // global
           _s2aMd::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_c2clU_info;
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 16];
           R3 = _s2aMd::P64;
           R2 = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp + 24;
           call GHC.Arr.$w$crangeSize_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2clP_info" {
     block_c2clP_info:
         const _c2clP;
         const 4;
         const 30;
 },
 _c2clU() //  [R1]
         { []
         }
     {offset
       c2clU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2cm6; else goto c2cm5;
       c2cm6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2cm5: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2clU_info" {
     block_c2clU_info:
         const _c2clU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.673568889 UTC

[section ""data" . GHC.Arr.$fIx(,)_$s$cunsafeRangeSize_closure" {
     GHC.Arr.$fIx(,)_$s$cunsafeRangeSize_closure:
         const GHC.Arr.$fIx(,)_$s$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIx(,)_$s$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c2cmI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2cnB; else goto c2cnC;
       c2cnB: // global
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$s$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2cnC: // global
           I64[Sp - 8] = block_c2cmF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2cnN; else goto c2cmG;
       u2cnN: // global
           call _c2cmF(R1) args: 0, res: 0, upd: 0;
       c2cmG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$s$cunsafeRangeSize_info" {
     GHC.Arr.$fIx(,)_$s$cunsafeRangeSize_info:
         const GHC.Arr.$fIx(,)_$s$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2cmF() //  [R1]
         { []
         }
     {offset
       c2cmF: // global
           I64[Sp - 8] = block_c2cmL_info;
           _s2aMs::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aMs::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2cnM; else goto c2cmM;
       u2cnM: // global
           call _c2cmL(R1) args: 0, res: 0, upd: 0;
       c2cmM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cmF_info" {
     block_c2cmF_info:
         const _c2cmF;
         const 0;
         const 30;
 },
 _c2cmL() //  [R1]
         { []
         }
     {offset
       c2cmL: // global
           I64[Sp - 8] = block_c2cmQ_info;
           _s2aMv::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aMv::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2cnO; else goto c2cmR;
       u2cnO: // global
           call _c2cmQ(R1) args: 0, res: 0, upd: 0;
       c2cmR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cmL_info" {
     block_c2cmL_info:
         const _c2cmL;
         const 1;
         const 30;
 },
 _c2cmQ() //  [R1]
         { []
         }
     {offset
       c2cmQ: // global
           I64[Sp] = block_c2cmV_info;
           _s2aMx::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2aMx::I64;
           if (R1 & 7 != 0) goto u2cnP; else goto c2cmW;
       u2cnP: // global
           call _c2cmV(R1) args: 0, res: 0, upd: 0;
       c2cmW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cmQ_info" {
     block_c2cmQ_info:
         const _c2cmQ;
         const 2;
         const 30;
 },
 _c2cmV() //  [R1]
         { []
         }
     {offset
       c2cmV: // global
           I64[Sp] = block_c2cn0_info;
           _s2aMz::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2aMz::I64;
           if (R1 & 7 != 0) goto u2cnQ; else goto c2cn1;
       u2cnQ: // global
           call _c2cn0(R1) args: 0, res: 0, upd: 0;
       c2cn1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cmV_info" {
     block_c2cmV_info:
         const _c2cmV;
         const 66;
         const 30;
 },
 _c2cn0() //  [R1]
         { []
         }
     {offset
       c2cn0: // global
           I64[Sp - 8] = block_c2cn5_info;
           _s2aMC::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aMC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2cnR; else goto c2cn6;
       u2cnR: // global
           call _c2cn5(R1) args: 0, res: 0, upd: 0;
       c2cn6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cn0_info" {
     block_c2cn0_info:
         const _c2cn0;
         const 194;
         const 30;
 },
 _c2cn5() //  [R1]
         { []
         }
     {offset
       c2cn5: // global
           I64[Sp] = block_c2cna_info;
           _s2aME::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2aME::I64;
           if (R1 & 7 != 0) goto u2cnS; else goto c2cnb;
       u2cnS: // global
           call _c2cna(R1) args: 0, res: 0, upd: 0;
       c2cnb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cn5_info" {
     block_c2cn5_info:
         const _c2cn5;
         const 387;
         const 30;
 },
 _c2cna() //  [R1]
         { []
         }
     {offset
       c2cna: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2cnL; else goto c2cnK;
       c2cnL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2cnK: // global
           _s2aMG::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s2aMz::I64 = I64[Sp + 24];
           I64[Hp] = (I64[Sp + 8] - I64[Sp + 16]) * (_s2aMG::I64 + (1 - _s2aMz::I64)) + (_s2aMG::I64 - _s2aMz::I64) + 1;
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cna_info" {
     block_c2cna_info:
         const _c2cna;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.690177748 UTC

[section ""data" . GHC.Arr.$w$cunsafeRangeSize_closure" {
     GHC.Arr.$w$cunsafeRangeSize_closure:
         const GHC.Arr.$w$cunsafeRangeSize_info;
 },
 GHC.Arr.$w$cunsafeRangeSize_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2coR: // global
           _s2aMS::P64 = R6;
           _s2aMR::P64 = R5;
           _s2aMQ::P64 = R4;
           _s2aMP::P64 = R3;
           _s2aMO::P64 = R2;
           if ((Sp + -56) < SpLim) (likely: False) goto c2cpa; else goto c2cpb;
       c2cpb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2cpd; else goto c2cpc;
       c2cpd: // global
           HpAlloc = 24;
           goto c2cpa;
       c2cpa: // global
           R6 = _s2aMS::P64;
           R5 = _s2aMR::P64;
           R4 = _s2aMQ::P64;
           R3 = _s2aMP::P64;
           R2 = _s2aMO::P64;
           R1 = GHC.Arr.$w$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c2cpc: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2aMQ::P64;
           P64[Hp] = _s2aMS::P64;
           I64[Sp - 24] = block_c2coP_info;
           R2 = _s2aMO::P64;
           I64[Sp - 48] = stg_ap_pp_info;
           P64[Sp - 40] = Hp - 15;
           P64[Sp - 32] = _s2aMS::P64;
           P64[Sp - 16] = _s2aMP::P64;
           P64[Sp - 8] = _s2aMR::P64;
           Sp = Sp - 48;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$cunsafeRangeSize_info" {
     GHC.Arr.$w$cunsafeRangeSize_info:
         const GHC.Arr.$w$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _c2coP() //  [R1]
         { []
         }
     {offset
       c2coP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2cpg; else goto c2cpf;
       c2cpg: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2cpf: // global
           _s2aMW::I64 = I64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp - 8] = block_c2coV_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           _c2coU::P64 = Hp - 15;
           P64[Sp - 16] = _c2coU::P64;
           I64[Sp] = _s2aMW::I64;
           P64[Sp + 16] = _c2coU::P64;
           Sp = Sp - 24;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2coP_info" {
     block_c2coP_info:
         const _c2coP;
         const 3;
         const 30;
 },
 _c2coV() //  [R1]
         { []
         }
     {offset
       c2coV: // global
           I64[Sp] = block_c2coZ_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = P64[Sp + 32];
           I64[Sp + 32] = I64[R1 + 7];
           Sp = Sp - 24;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2coV_info" {
     block_c2coV_info:
         const _c2coV;
         const 68;
         const 30;
 },
 _c2coZ() //  [R1]
         { []
         }
     {offset
       c2coZ: // global
           R1 = I64[Sp + 8] * I64[Sp + 32] + I64[R1 + 7] + 1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2coZ_info" {
     block_c2coZ_info:
         const _c2coZ;
         const 964;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.701168882 UTC

[section ""data" . GHC.Arr.$fIx(,)_$cunsafeRangeSize_closure" {
     GHC.Arr.$fIx(,)_$cunsafeRangeSize_closure:
         const GHC.Arr.$fIx(,)_$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIx(,)_$cunsafeRangeSize_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2cpX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2cqf; else goto c2cqg;
       c2cqf: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2cqg: // global
           I64[Sp - 24] = block_c2cpU_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2cqo; else goto c2cpV;
       u2cqo: // global
           call _c2cpU(R1) args: 0, res: 0, upd: 0;
       c2cpV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$cunsafeRangeSize_info" {
     GHC.Arr.$fIx(,)_$cunsafeRangeSize_info:
         const GHC.Arr.$fIx(,)_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c2cpU() //  [R1]
         { []
         }
     {offset
       c2cpU: // global
           I64[Sp - 8] = block_c2cq0_info;
           _s2aNa::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aNa::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2cqn; else goto c2cq1;
       u2cqn: // global
           call _c2cq0(R1) args: 0, res: 0, upd: 0;
       c2cq1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cpU_info" {
     block_c2cpU_info:
         const _c2cpU;
         const 2;
         const 30;
 },
 _c2cq0() //  [R1]
         { []
         }
     {offset
       c2cq0: // global
           I64[Sp - 8] = block_c2cq5_info;
           _s2aNc::P64 = P64[R1 + 7];
           _s2aNd::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s2aNd::P64;
           P64[Sp + 8] = _s2aNc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2cqp; else goto c2cq6;
       u2cqp: // global
           call _c2cq5(R1) args: 0, res: 0, upd: 0;
       c2cq6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cq0_info" {
     block_c2cq0_info:
         const _c2cq0;
         const 3;
         const 30;
 },
 _c2cq5() //  [R1]
         { []
         }
     {offset
       c2cq5: // global
           _s2aN6::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_c2cqa_info;
           R6 = P64[R1 + 7];
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 16];
           R3 = _s2aN6::P64;
           R2 = P64[Sp + 24];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp + 24;
           call GHC.Arr.$w$cunsafeRangeSize_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cq5_info" {
     block_c2cq5_info:
         const _c2cq5;
         const 4;
         const 30;
 },
 _c2cqa() //  [R1]
         { []
         }
     {offset
       c2cqa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2cqm; else goto c2cql;
       c2cqm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2cql: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cqa_info" {
     block_c2cqa_info:
         const _c2cqa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.710991019 UTC

[section ""cstring" . GHC.Arr.$tc'STArray3_bytes" {
     GHC.Arr.$tc'STArray3_bytes:
         I8[] [39,83,84,65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.712658831 UTC

[section ""data" . GHC.Arr.$tc'STArray2_closure" {
     GHC.Arr.$tc'STArray2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Arr.$tc'STArray3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.714339744 UTC

[section ""cstring" . GHC.Arr.$tcSTArray3_bytes" {
     GHC.Arr.$tcSTArray3_bytes:
         I8[] [83,84,65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.71594275 UTC

[section ""data" . GHC.Arr.$tcSTArray2_closure" {
     GHC.Arr.$tcSTArray2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Arr.$tcSTArray3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.717705309 UTC

[section ""cstring" . GHC.Arr.$tc'Array3_bytes" {
     GHC.Arr.$tc'Array3_bytes:
         I8[] [39,65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.719388028 UTC

[section ""data" . GHC.Arr.$tc'Array2_closure" {
     GHC.Arr.$tc'Array2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Arr.$tc'Array3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.721148493 UTC

[section ""cstring" . GHC.Arr.$tcArray2_bytes" {
     GHC.Arr.$tcArray2_bytes:
         I8[] [65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.723505947 UTC

[section ""data" . GHC.Arr.$tcArray1_closure" {
     GHC.Arr.$tcArray1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Arr.$tcArray2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.725204476 UTC

[section ""cstring" . GHC.Arr.$tc'C:Ix3_bytes" {
     GHC.Arr.$tc'C:Ix3_bytes:
         I8[] [39,67,58,73,120]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.726905731 UTC

[section ""data" . GHC.Arr.$tc'C:Ix2_closure" {
     GHC.Arr.$tc'C:Ix2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Arr.$tc'C:Ix3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.728572278 UTC

[section ""cstring" . GHC.Arr.$tcIx3_bytes" {
     GHC.Arr.$tcIx3_bytes:
         I8[] [73,120]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.73026947 UTC

[section ""data" . GHC.Arr.$tcIx2_closure" {
     GHC.Arr.$tcIx2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Arr.$tcIx3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.732067786 UTC

[section ""data" . $krep_r1Xux_closure" {
     $krep_r1Xux_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.734249167 UTC

[section ""data" . $krep1_r1Xuy_closure" {
     $krep1_r1Xuy_closure:
         const :_con_info;
         const $krep_r1Xux_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.736066237 UTC

[section ""data" . $krep2_r1Xuz_closure" {
     $krep2_r1Xuz_closure:
         const :_con_info;
         const $krep_r1Xux_closure+2;
         const $krep1_r1Xuy_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.737859189 UTC

[section ""data" . $krep3_r1XuA_closure" {
     $krep3_r1XuA_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep2_r1Xuz_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.739588492 UTC

[section ""data" . $krep4_r1XuB_closure" {
     $krep4_r1XuB_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep1_r1Xuy_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.741326789 UTC

[section ""data" . $krep5_r1XuC_closure" {
     $krep5_r1XuC_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r1XuA_closure+1;
         const $krep4_r1XuB_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.743076743 UTC

[section ""data" . $krep6_r1XuD_closure" {
     $krep6_r1XuD_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Classes.$tcOrd_closure;
         const $krep1_r1Xuy_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.744814502 UTC

[section ""data" . $krep7_r1XuE_closure" {
     $krep7_r1XuE_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.747146099 UTC

[section ""data" . $krep8_r1XuF_closure" {
     $krep8_r1XuF_closure:
         const :_con_info;
         const $krep7_r1XuE_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.748864704 UTC

[section ""data" . $krep9_r1XuG_closure" {
     $krep9_r1XuG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcArray#_closure;
         const $krep8_r1XuF_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.750517215 UTC

[section ""data" . $krep10_r1XuH_closure" {
     $krep10_r1XuH_closure:
         const :_con_info;
         const $krep_r1Xux_closure+2;
         const $krep8_r1XuF_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.752149011 UTC

[section ""data" . $krep11_r1XuI_closure" {
     $krep11_r1XuI_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.754198114 UTC

[section ""data" . $krep12_r1XuJ_closure" {
     $krep12_r1XuJ_closure:
         const :_con_info;
         const $krep11_r1XuI_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.755811337 UTC

[section ""data" . $krep13_r1XuK_closure" {
     $krep13_r1XuK_closure:
         const :_con_info;
         const $krep_r1Xux_closure+2;
         const $krep12_r1XuJ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.757524699 UTC

[section ""data" . $krep14_r1XuL_closure" {
     $krep14_r1XuL_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutableArray#_closure;
         const $krep13_r1XuK_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.759136068 UTC

[section ""data" . $krep15_r1XuM_closure" {
     $krep15_r1XuM_closure:
         const :_con_info;
         const $krep7_r1XuE_closure+2;
         const $krep12_r1XuJ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.760815537 UTC

[section ""data" . $krep16_r1XuN_closure" {
     $krep16_r1XuN_closure:
         const :_con_info;
         const $krep_r1Xux_closure+2;
         const $krep15_r1XuM_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.762990098 UTC

[section ""data" . GHC.Arr.$tcSTArray1_closure" {
     GHC.Arr.$tcSTArray1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const GHC.Types.krep$*->*->*_closure;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.764757663 UTC

[section ""data" . $krep17_r1XuO_closure" {
     $krep17_r1XuO_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.766460452 UTC

[section ""data" . $krep18_r1XuP_closure" {
     $krep18_r1XuP_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r1Xux_closure+2;
         const $krep17_r1XuO_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.768223376 UTC

[section ""data" . $krep19_r1XuQ_closure" {
     $krep19_r1XuQ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r1XuA_closure+1;
         const $krep18_r1XuP_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.770576036 UTC

[section ""data" . $krep20_r1XuR_closure" {
     $krep20_r1XuR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r1XuA_closure+1;
         const $krep17_r1XuO_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.772825616 UTC

[section ""data" . $krep21_r1XuS_closure" {
     $krep21_r1XuS_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.774598729 UTC

[section ""data" . GHC.Arr.$tcIx1_closure" {
     GHC.Arr.$tcIx1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep21_r1XuS_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.776255215 UTC

[section ""data" . $krep22_r1XuT_closure" {
     $krep22_r1XuT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcBool_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.777888596 UTC

[section ""data" . $krep23_r1XuU_closure" {
     $krep23_r1XuU_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r1Xux_closure+2;
         const $krep22_r1XuT_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.779513167 UTC

[section ""data" . $krep24_r1XuV_closure" {
     $krep24_r1XuV_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r1XuA_closure+1;
         const $krep23_r1XuU_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.781159084 UTC

[section ""cstring" . GHC.Arr.$trModule2_bytes" {
     GHC.Arr.$trModule2_bytes:
         I8[] [71,72,67,46,65,114,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.782815447 UTC

[section ""data" . GHC.Arr.$trModule1_closure" {
     GHC.Arr.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Arr.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.784518078 UTC

[section ""cstring" . GHC.Arr.$trModule4_bytes" {
     GHC.Arr.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.786480291 UTC

[section ""data" . GHC.Arr.$trModule3_closure" {
     GHC.Arr.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Arr.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.788238843 UTC

[section ""data" . GHC.Arr.$trModule_closure" {
     GHC.Arr.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Arr.$trModule3_closure+1;
         const GHC.Arr.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.790003382 UTC

[section ""data" . GHC.Arr.$tcIx_closure" {
     GHC.Arr.$tcIx_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Arr.$trModule_closure+1;
         const GHC.Arr.$tcIx2_closure+1;
         const GHC.Arr.$tcIx1_closure+4;
         const 13772232542578256353;
         const 6762827082053304105;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.791862858 UTC

[section ""data" . $krep25_r1XuW_closure" {
     $krep25_r1XuW_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Arr.$tcIx_closure+1;
         const $krep1_r1Xuy_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.793669272 UTC

[section ""data" . $krep26_r1XuX_closure" {
     $krep26_r1XuX_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep20_r1XuR_closure+4;
         const $krep25_r1XuW_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.795395544 UTC

[section ""data" . $krep27_r1XuY_closure" {
     $krep27_r1XuY_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep20_r1XuR_closure+4;
         const $krep26_r1XuX_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.79767298 UTC

[section ""data" . $krep28_r1XuZ_closure" {
     $krep28_r1XuZ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep24_r1XuV_closure+4;
         const $krep27_r1XuY_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.79934032 UTC

[section ""data" . $krep29_r1Xv0_closure" {
     $krep29_r1Xv0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep19_r1XuQ_closure+4;
         const $krep28_r1XuZ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.800890857 UTC

[section ""data" . $krep30_r1Xv1_closure" {
     $krep30_r1Xv1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep19_r1XuQ_closure+4;
         const $krep29_r1Xv0_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.803067475 UTC

[section ""data" . $krep31_r1Xv2_closure" {
     $krep31_r1Xv2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r1XuC_closure+4;
         const $krep30_r1Xv1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.804712534 UTC

[section ""data" . GHC.Arr.$tc'C:Ix1_closure" {
     GHC.Arr.$tc'C:Ix1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_r1XuD_closure+1;
         const $krep31_r1Xv2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.806460616 UTC

[section ""data" . GHC.Arr.$tc'C:Ix_closure" {
     GHC.Arr.$tc'C:Ix_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Arr.$trModule_closure+1;
         const GHC.Arr.$tc'C:Ix2_closure+1;
         const GHC.Arr.$tc'C:Ix1_closure+4;
         const 9761537348743518432;
         const 9936836232101669382;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.808202409 UTC

[section ""data" . GHC.Arr.$tcArray_closure" {
     GHC.Arr.$tcArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Arr.$trModule_closure+1;
         const GHC.Arr.$tcArray1_closure+1;
         const GHC.Types.krep$*->*->*_closure;
         const 10788835947821237041;
         const 14169157647019398948;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.810202412 UTC

[section ""data" . $krep32_r1Xv3_closure" {
     $krep32_r1Xv3_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Arr.$tcArray_closure+1;
         const $krep10_r1XuH_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.811906396 UTC

[section ""data" . $krep33_r1Xv4_closure" {
     $krep33_r1Xv4_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r1XuG_closure+1;
         const $krep32_r1Xv3_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.813609502 UTC

[section ""data" . $krep34_r1Xv5_closure" {
     $krep34_r1Xv5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep17_r1XuO_closure+1;
         const $krep33_r1Xv4_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.815394228 UTC

[section ""data" . $krep35_r1Xv6_closure" {
     $krep35_r1Xv6_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r1Xux_closure+2;
         const $krep34_r1Xv5_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.817107228 UTC

[section ""data" . GHC.Arr.$tc'Array1_closure" {
     GHC.Arr.$tc'Array1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r1Xux_closure+2;
         const $krep35_r1Xv6_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.818866142 UTC

[section ""data" . GHC.Arr.$tc'Array_closure" {
     GHC.Arr.$tc'Array_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Arr.$trModule_closure+1;
         const GHC.Arr.$tc'Array2_closure+1;
         const GHC.Arr.$tc'Array1_closure+4;
         const 3242711757478233377;
         const 12319810478938809147;
         const 2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.821828275 UTC

[section ""data" . GHC.Arr.$tcSTArray_closure" {
     GHC.Arr.$tcSTArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Arr.$trModule_closure+1;
         const GHC.Arr.$tcSTArray2_closure+1;
         const GHC.Arr.$tcSTArray1_closure+4;
         const 345285176724813242;
         const 9254447028624491998;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.82362798 UTC

[section ""data" . $krep36_r1Xv7_closure" {
     $krep36_r1Xv7_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Arr.$tcSTArray_closure+1;
         const $krep16_r1XuN_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.825378388 UTC

[section ""data" . $krep37_r1Xv8_closure" {
     $krep37_r1Xv8_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_r1XuL_closure+1;
         const $krep36_r1Xv7_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.827489408 UTC

[section ""data" . $krep38_r1Xv9_closure" {
     $krep38_r1Xv9_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep17_r1XuO_closure+1;
         const $krep37_r1Xv8_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.830201747 UTC

[section ""data" . $krep39_r1Xva_closure" {
     $krep39_r1Xva_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r1XuE_closure+2;
         const $krep38_r1Xv9_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.832978804 UTC

[section ""data" . GHC.Arr.$tc'STArray1_closure" {
     GHC.Arr.$tc'STArray1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r1XuE_closure+2;
         const $krep39_r1Xva_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.836131391 UTC

[section ""data" . GHC.Arr.$tc'STArray_closure" {
     GHC.Arr.$tc'STArray_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Arr.$trModule_closure+1;
         const GHC.Arr.$tc'STArray2_closure+1;
         const GHC.Arr.$tc'STArray1_closure+4;
         const 804430358013947666;
         const 730912265096030373;
         const 3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.841763192 UTC

[section ""data" . unsafeThawSTArray1_r1Xvb_closure" {
     unsafeThawSTArray1_r1Xvb_closure:
         const unsafeThawSTArray1_r1Xvb_info;
 },
 unsafeThawSTArray1_r1Xvb_entry() //  [R2]
         { []
         }
     {offset
       c2cs4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2csa; else goto c2csb;
       c2csa: // global
           R2 = R2;
           R1 = unsafeThawSTArray1_r1Xvb_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2csb: // global
           I64[Sp - 8] = block_c2cs1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2csg; else goto c2cs2;
       u2csg: // global
           call _c2cs1(R1) args: 0, res: 0, upd: 0;
       c2cs2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . unsafeThawSTArray1_r1Xvb_info" {
     unsafeThawSTArray1_r1Xvb_info:
         const unsafeThawSTArray1_r1Xvb_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c2cs1() //  [R1]
         { []
         }
     {offset
       c2cs1: // global
           I64[Sp - 24] = block_c2cs7_info;
           _s2aNl::P64 = P64[R1 + 7];
           _s2aNm::P64 = P64[R1 + 15];
           _s2aNn::I64 = I64[R1 + 31];
           R1 = P64[R1 + 23];
           P64[Sp - 16] = _s2aNm::P64;
           I64[Sp - 8] = _s2aNn::I64;
           P64[Sp] = _s2aNl::P64;
           Sp = Sp - 24;
           call stg_unsafeThawArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cs1_info" {
     block_c2cs1_info:
         const _c2cs1;
         const 0;
         const 30;
 },
 _c2cs7() //  [R1]
         { []
         }
     {offset
       c2cs7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2csf; else goto c2cse;
       c2csf: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2cse: // global
           I64[Hp - 32] = GHC.Arr.STArray_con_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cs7_info" {
     block_c2cs7_info:
         const _c2cs7;
         const 131;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.852841869 UTC

[section ""data" . GHC.Arr.unsafeThawSTArray_closure" {
     GHC.Arr.unsafeThawSTArray_closure:
         const GHC.Arr.unsafeThawSTArray_info;
 },
 GHC.Arr.unsafeThawSTArray_entry() //  [R2]
         { []
         }
     {offset
       c2csE: // global
           R2 = R2;
           call unsafeThawSTArray1_r1Xvb_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeThawSTArray_info" {
     GHC.Arr.unsafeThawSTArray_info:
         const GHC.Arr.unsafeThawSTArray_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.859411046 UTC

[section ""data" . unsafeFreezeSTArray1_r1Xvc_closure" {
     unsafeFreezeSTArray1_r1Xvc_closure:
         const unsafeFreezeSTArray1_r1Xvc_info;
 },
 unsafeFreezeSTArray1_r1Xvc_entry() //  [R2]
         { []
         }
     {offset
       c2csS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2csW; else goto c2csX;
       c2csW: // global
           R2 = R2;
           R1 = unsafeFreezeSTArray1_r1Xvc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2csX: // global
           I64[Sp - 8] = block_c2csP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2ct1; else goto c2csQ;
       u2ct1: // global
           call _c2csP(R1) args: 0, res: 0, upd: 0;
       c2csQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . unsafeFreezeSTArray1_r1Xvc_info" {
     unsafeFreezeSTArray1_r1Xvc_info:
         const unsafeFreezeSTArray1_r1Xvc_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c2csP() //  [R1]
         { []
         }
     {offset
       c2csP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2ct0; else goto c2csZ;
       c2ct0: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2csZ: // global
           _s2aNw::P64 = P64[R1 + 7];
           _s2aNx::P64 = P64[R1 + 15];
           _s2aNz::P64 = P64[R1 + 23];
           _s2aNy::I64 = I64[R1 + 31];
           I64[_s2aNz::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = _s2aNw::P64;
           P64[Hp - 16] = _s2aNx::P64;
           P64[Hp - 8] = _s2aNz::P64;
           I64[Hp] = _s2aNy::I64;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2csP_info" {
     block_c2csP_info:
         const _c2csP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.869684891 UTC

[section ""data" . GHC.Arr.unsafeFreezeSTArray_closure" {
     GHC.Arr.unsafeFreezeSTArray_closure:
         const GHC.Arr.unsafeFreezeSTArray_info;
 },
 GHC.Arr.unsafeFreezeSTArray_entry() //  [R2]
         { []
         }
     {offset
       c2ctj: // global
           R2 = R2;
           call unsafeFreezeSTArray1_r1Xvc_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeFreezeSTArray_info" {
     GHC.Arr.unsafeFreezeSTArray_info:
         const GHC.Arr.unsafeFreezeSTArray_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.876715821 UTC

[section ""data" . unsafeWriteSTArray1_r1Xvd_closure" {
     unsafeWriteSTArray1_r1Xvd_closure:
         const unsafeWriteSTArray1_r1Xvd_info;
 },
 unsafeWriteSTArray1_r1Xvd_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2ctx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2ctB; else goto c2ctC;
       c2ctB: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = unsafeWriteSTArray1_r1Xvd_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2ctC: // global
           I64[Sp - 24] = block_c2ctu_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2ctK; else goto c2ctv;
       u2ctK: // global
           call _c2ctu(R1) args: 0, res: 0, upd: 0;
       c2ctv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . unsafeWriteSTArray1_r1Xvd_info" {
     unsafeWriteSTArray1_r1Xvd_info:
         const unsafeWriteSTArray1_r1Xvd_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c2ctu() //  [R1]
         { []
         }
     {offset
       c2ctu: // global
           I64[Sp] = block_c2ctA_info;
           _s2aNM::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s2aNM::P64;
           if (R1 & 7 != 0) goto u2ctJ; else goto c2ctE;
       u2ctJ: // global
           call _c2ctA(R1) args: 0, res: 0, upd: 0;
       c2ctE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ctu_info" {
     block_c2ctu_info:
         const _c2ctu;
         const 2;
         const 30;
 },
 _c2ctA() //  [R1]
         { []
         }
     {offset
       c2ctA: // global
           _s2aNG::P64 = P64[Sp + 16];
           _s2aNM::P64 = P64[Sp + 8];
           _s2aNO::I64 = I64[R1 + 7];
           call MO_WriteBarrier();
           P64[(_s2aNM::P64 + 24) + (_s2aNO::I64 << 3)] = _s2aNG::P64;
           I64[_s2aNM::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2aNM::P64 + 24) + ((I64[_s2aNM::P64 + 8] << 3) + (_s2aNO::I64 >> 7))] = 1 :: W8;
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ctA_info" {
     block_c2ctA_info:
         const _c2ctA;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.886082753 UTC

[section ""data" . GHC.Arr.unsafeWriteSTArray_closure" {
     GHC.Arr.unsafeWriteSTArray_closure:
         const GHC.Arr.unsafeWriteSTArray_info;
 },
 GHC.Arr.unsafeWriteSTArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2cub: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call unsafeWriteSTArray1_r1Xvd_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeWriteSTArray_info" {
     GHC.Arr.unsafeWriteSTArray_info:
         const GHC.Arr.unsafeWriteSTArray_entry;
         const 0;
         const 14;
         const 17179869207;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.890370029 UTC

[section ""data" . unsafeReadSTArray1_r1Xve_closure" {
     unsafeReadSTArray1_r1Xve_closure:
         const unsafeReadSTArray1_r1Xve_info;
 },
 unsafeReadSTArray1_r1Xve_entry() //  [R2, R3]
         { []
         }
     {offset
       c2cup: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2cuy; else goto c2cuz;
       c2cuy: // global
           R3 = R3;
           R2 = R2;
           R1 = unsafeReadSTArray1_r1Xve_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2cuz: // global
           I64[Sp - 16] = block_c2cum_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2cuD; else goto c2cun;
       u2cuD: // global
           call _c2cum(R1) args: 0, res: 0, upd: 0;
       c2cun: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . unsafeReadSTArray1_r1Xve_info" {
     unsafeReadSTArray1_r1Xve_info:
         const unsafeReadSTArray1_r1Xve_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c2cum() //  [R1]
         { []
         }
     {offset
       c2cum: // global
           I64[Sp] = block_c2cus_info;
           _s2aNX::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s2aNX::P64;
           if (R1 & 7 != 0) goto u2cuC; else goto c2cut;
       u2cuC: // global
           call _c2cus(R1) args: 0, res: 0, upd: 0;
       c2cut: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cum_info" {
     block_c2cum_info:
         const _c2cum;
         const 1;
         const 30;
 },
 _c2cus() //  [R1]
         { []
         }
     {offset
       c2cus: // global
           R1 = P64[P64[Sp + 8] + ((I64[R1 + 7] << 3) + 24)];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cus_info" {
     block_c2cus_info:
         const _c2cus;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.897874381 UTC

[section ""data" . GHC.Arr.unsafeReadSTArray_closure" {
     GHC.Arr.unsafeReadSTArray_closure:
         const GHC.Arr.unsafeReadSTArray_info;
 },
 GHC.Arr.unsafeReadSTArray_entry() //  [R2, R3]
         { []
         }
     {offset
       c2cv0: // global
           R3 = R3;
           R2 = R2;
           call unsafeReadSTArray1_r1Xve_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeReadSTArray_info" {
     GHC.Arr.unsafeReadSTArray_info:
         const GHC.Arr.unsafeReadSTArray_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.901893895 UTC

[section ""data" . GHC.Arr.numElementsSTArray_closure" {
     GHC.Arr.numElementsSTArray_closure:
         const GHC.Arr.numElementsSTArray_info;
 },
 GHC.Arr.numElementsSTArray_entry() //  [R2]
         { []
         }
     {offset
       c2cve: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2cvi; else goto c2cvj;
       c2cvi: // global
           R2 = R2;
           R1 = GHC.Arr.numElementsSTArray_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2cvj: // global
           I64[Sp - 8] = block_c2cvb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2cvn; else goto c2cvc;
       u2cvn: // global
           call _c2cvb(R1) args: 0, res: 0, upd: 0;
       c2cvc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.numElementsSTArray_info" {
     GHC.Arr.numElementsSTArray_info:
         const GHC.Arr.numElementsSTArray_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2cvb() //  [R1]
         { []
         }
     {offset
       c2cvb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2cvm; else goto c2cvl;
       c2cvm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2cvl: // global
           _s2aO4::I64 = I64[R1 + 31];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2aO4::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cvb_info" {
     block_c2cvb_info:
         const _c2cvb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.907878871 UTC

[section ""data" . GHC.Arr.boundsSTArray_closure" {
     GHC.Arr.boundsSTArray_closure:
         const GHC.Arr.boundsSTArray_info;
 },
 GHC.Arr.boundsSTArray_entry() //  [R2]
         { []
         }
     {offset
       c2cvH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2cvL; else goto c2cvM;
       c2cvL: // global
           R2 = R2;
           R1 = GHC.Arr.boundsSTArray_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2cvM: // global
           I64[Sp - 8] = block_c2cvE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2cvQ; else goto c2cvF;
       u2cvQ: // global
           call _c2cvE(R1) args: 0, res: 0, upd: 0;
       c2cvF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.boundsSTArray_info" {
     GHC.Arr.boundsSTArray_info:
         const GHC.Arr.boundsSTArray_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2cvE() //  [R1]
         { []
         }
     {offset
       c2cvE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2cvP; else goto c2cvO;
       c2cvP: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2cvO: // global
           _s2aO8::P64 = P64[R1 + 7];
           _s2aO9::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2aO8::P64;
           P64[Hp] = _s2aO9::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cvE_info" {
     block_c2cvE_info:
         const _c2cvE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.914814907 UTC

[section ""data" . GHC.Arr.adjust'_closure" {
     GHC.Arr.adjust'_closure:
         const GHC.Arr.adjust'_info;
 },
 GHC.Arr.adjust'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2cwa: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2cwe; else goto c2cwf;
       c2cwe: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.adjust'_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2cwf: // global
           I64[Sp - 32] = block_c2cw7_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2cwq; else goto c2cw8;
       u2cwq: // global
           call _c2cw7(R1) args: 0, res: 0, upd: 0;
       c2cw8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.adjust'_info" {
     GHC.Arr.adjust'_info:
         const GHC.Arr.adjust'_entry;
         const 0;
         const 14;
         const 21474836504;
 },
 _c2cw7() //  [R1]
         { []
         }
     {offset
       c2cw7: // global
           I64[Sp - 8] = block_c2cwd_info;
           _s2aOj::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aOj::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2cwp; else goto c2cwh;
       u2cwp: // global
           call _c2cwd(R1) args: 0, res: 0, upd: 0;
       c2cwh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cw7_info" {
     block_c2cw7_info:
         const _c2cw7;
         const 3;
         const 30;
 },
 _c2cwd() //  [R1]
         { []
         }
     {offset
       c2cwd: // global
           _s2aOj::P64 = P64[Sp + 8];
           _s2aOl::I64 = I64[R1 + 7];
           _s2aOo::P64 = P64[P64[Sp + 24] + ((_s2aOl::I64 << 3) + 24)];
           I64[Sp + 8] = block_c2cwl_info;
           R3 = _s2aOj::P64;
           R2 = _s2aOo::P64;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2aOl::I64;
           Sp = Sp + 8;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cwd_info" {
     block_c2cwd_info:
         const _c2cwd;
         const 4;
         const 30;
 },
 _c2cwl() //  [R1]
         { []
         }
     {offset
       c2cwl: // global
           _s2aOd::P64 = P64[Sp + 16];
           _s2aOf::P64 = P64[Sp + 24];
           _s2aOl::I64 = I64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s2aOd::P64 + 24) + (_s2aOl::I64 << 3)] = R1;
           I64[_s2aOd::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2aOd::P64 + 24) + ((I64[_s2aOd::P64 + 8] << 3) + (_s2aOl::I64 >> 7))] = 1 :: W8;
           R1 = _s2aOf::P64;
           Sp = Sp + 32;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cwl_info" {
     block_c2cwl_info:
         const _c2cwl;
         const 67;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.929149372 UTC

[section ""data" . GHC.Arr.unsafeAccumArray'_closure" {
     GHC.Arr.unsafeAccumArray'_closure:
         const GHC.Arr.unsafeAccumArray'_info;
 },
 sat_s2aOL_entry() //  [R1]
         { []
         }
     {offset
       c2cxk: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2cxl; else goto c2cxm;
       c2cxl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2cxm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c2cxf_info;
           _s2aOy::P64 = P64[R1 + 24];
           _s2aOI::P64 = P64[R1 + 32];
           _s2aOA::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s2aOy::P64;
           I64[Sp - 32] = _s2aOA::I64;
           P64[Sp - 24] = _s2aOI::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aOL_info" {
     sat_s2aOL_info:
         const sat_s2aOL_entry;
         const 4294967299;
         const 15;
 },
 _c2cxf() //  [R1]
         { []
         }
     {offset
       c2cxf: // global
           I64[Sp] = block_c2cxh_info;
           _s2aOJ::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s2aOJ::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c2cxf_info" {
     block_c2cxf_info:
         const _c2cxf;
         const 131;
         const 30;
 },
 _c2cxh() //  [R1]
         { []
         }
     {offset
       c2cxh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2cxq; else goto c2cxp;
       c2cxq: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2cxp: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2cxh_info" {
     block_c2cxh_info:
         const _c2cxh;
         const 131;
         const 30;
 },
 GHC.Arr.unsafeAccumArray'_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2cxr: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2cxs; else goto c2cxt;
       c2cxs: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.unsafeAccumArray'_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2cxt: // global
           I64[Sp - 40] = block_c2cwU_info;
           R1 = R4;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2cyg; else goto c2cwV;
       u2cyg: // global
           call _c2cwU(R1) args: 0, res: 0, upd: 0;
       c2cwV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeAccumArray'_info" {
     GHC.Arr.unsafeAccumArray'_info:
         const GHC.Arr.unsafeAccumArray'_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c2cwU() //  [R1]
         { []
         }
     {offset
       c2cwU: // global
           I64[Sp - 8] = block_c2cwZ_info;
           _s2aOx::P64 = P64[R1 + 7];
           _s2aOy::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _s2aOy::P64;
           P64[Sp + 24] = _s2aOx::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2cye; else goto c2cx0;
       u2cye: // global
           call _c2cwZ(R1) args: 0, res: 0, upd: 0;
       c2cx0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cwU_info" {
     block_c2cwU_info:
         const _c2cwU;
         const 4;
         const 30;
 },
 _c2cwZ() //  [R1]
         { []
         }
     {offset
       c2cwZ: // global
           I64[Sp] = block_c2cx4_info;
           R2 = P64[Sp + 24];
           _s2aOA::I64 = I64[R1 + 7];
           R1 = _s2aOA::I64;
           I64[Sp + 24] = _s2aOA::I64;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cwZ_info" {
     block_c2cwZ_info:
         const _c2cwZ;
         const 5;
         const 30;
 },
 _c2cx4() //  [R1]
         { []
         }
     {offset
       c2cx4: // global
           P64[Sp] = P64[Sp + 40];
           P64[Sp + 40] = R1;
           call _c2cxD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2cx4_info" {
     block_c2cx4_info:
         const _c2cx4;
         const 261;
         const 30;
 },
 _c2cxD() //  []
         { []
         }
     {offset
       c2cxD: // global
           _s2aON::P64 = P64[Sp];
           I64[Sp] = block_c2cxF_info;
           R1 = _s2aON::P64;
           if (R1 & 7 != 0) goto u2cyh; else goto c2cxH;
       u2cyh: // global
           call _c2cxF(R1) args: 0, res: 0, upd: 0;
       c2cxH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2cxF() //  [R1]
         { []
         }
     {offset
       c2cxF: // global
           if (R1 & 7 == 1) goto u2cyi; else goto c2cxX;
       u2cyi: // global
           call _c2cx9() args: 0, res: 0, upd: 0;
       c2cxX: // global
           I64[Sp - 8] = block_c2cxQ_info;
           _s2aOR::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s2aOR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2cyj; else goto c2cxR;
       u2cyj: // global
           call _c2cxQ(R1) args: 0, res: 0, upd: 0;
       c2cxR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cxF_info" {
     block_c2cxF_info:
         const _c2cxF;
         const 261;
         const 30;
 },
 _c2cx9() //  []
         { []
         }
     {offset
       c2cx9: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c2cxz; else goto c2cxy;
       c2cxz: // global
           HpAlloc = 48;
           I64[Sp] = block_c2cx9_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2cxy: // global
           _s2aOD::P64 = P64[Sp + 40];
           I64[_s2aOD::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 40] = sat_s2aOL_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s2aOD::P64;
           I64[Hp] = I64[Sp + 24];
           R1 = (Hp + -40) & (-8);
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cx9_info" {
     block_c2cx9_info:
         const _c2cx9;
         const 389;
         const 30;
 },
 _c2cxQ() //  [R1]
         { []
         }
     {offset
       c2cxQ: // global
           I64[Sp - 8] = block_c2cxV_info;
           _s2aOU::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aOU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2cyk; else goto c2cxZ;
       u2cyk: // global
           call _c2cxV(R1) args: 0, res: 0, upd: 0;
       c2cxZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cxQ_info" {
     block_c2cxQ_info:
         const _c2cxQ;
         const 518;
         const 30;
 },
 _c2cxV() //  [R1]
         { []
         }
     {offset
       c2cxV: // global
           _s2aOW::I64 = I64[R1 + 7];
           _s2aOZ::P64 = P64[P64[Sp + 56] + ((_s2aOW::I64 << 3) + 24)];
           I64[Sp] = block_c2cy3_info;
           R3 = P64[Sp + 8];
           R2 = _s2aOZ::P64;
           R1 = P64[Sp + 32];
           I64[Sp + 8] = _s2aOW::I64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cxV_info" {
     block_c2cxV_info:
         const _c2cxV;
         const 1031;
         const 30;
 },
 _c2cy3() //  [R1]
         { []
         }
     {offset
       c2cy3: // global
           _s2aOD::P64 = P64[Sp + 56];
           _s2aOR::P64 = P64[Sp + 16];
           _s2aOW::I64 = I64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s2aOD::P64 + 24) + (_s2aOW::I64 << 3)] = R1;
           I64[_s2aOD::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2aOD::P64 + 24) + ((I64[_s2aOD::P64 + 8] << 3) + (_s2aOW::I64 >> 7))] = 1 :: W8;
           P64[Sp + 16] = _s2aOR::P64;
           Sp = Sp + 16;
           call _c2cxD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2cy3_info" {
     block_c2cy3_info:
         const _c2cy3;
         const 1095;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.956400552 UTC

[section ""data" . GHC.Arr.unsafeAccumArray_closure" {
     GHC.Arr.unsafeAccumArray_closure:
         const GHC.Arr.unsafeAccumArray_info;
 },
 sat_s2aPp_entry() //  [R1]
         { []
         }
     {offset
       c2cA5: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2cA6; else goto c2cA7;
       c2cA6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2cA7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c2cA0_info;
           _s2aPc::P64 = P64[R1 + 24];
           _s2aPm::P64 = P64[R1 + 32];
           _s2aPe::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s2aPc::P64;
           I64[Sp - 32] = _s2aPe::I64;
           P64[Sp - 24] = _s2aPm::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aPp_info" {
     sat_s2aPp_info:
         const sat_s2aPp_entry;
         const 4294967299;
         const 15;
 },
 _c2cA0() //  [R1]
         { []
         }
     {offset
       c2cA0: // global
           I64[Sp] = block_c2cA2_info;
           _s2aPn::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s2aPn::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c2cA0_info" {
     block_c2cA0_info:
         const _c2cA0;
         const 131;
         const 30;
 },
 _c2cA2() //  [R1]
         { []
         }
     {offset
       c2cA2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2cAb; else goto c2cAa;
       c2cAb: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2cAa: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2cA2_info" {
     block_c2cA2_info:
         const _c2cA2;
         const 131;
         const 30;
 },
 GHC.Arr.unsafeAccumArray_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2cAc: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2cAd; else goto c2cAe;
       c2cAd: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.unsafeAccumArray_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2cAe: // global
           I64[Sp - 40] = block_c2czG_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2cB0; else goto c2czH;
       u2cB0: // global
           call _c2czG(R1) args: 0, res: 0, upd: 0;
       c2czH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeAccumArray_info" {
     GHC.Arr.unsafeAccumArray_info:
         const GHC.Arr.unsafeAccumArray_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c2czG() //  [R1]
         { []
         }
     {offset
       c2czG: // global
           I64[Sp - 8] = block_c2czL_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = R1;
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 24;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2czG_info" {
     block_c2czG_info:
         const _c2czG;
         const 4;
         const 30;
 },
 _c2czL() //  [R1]
         { []
         }
     {offset
       c2czL: // global
           I64[Sp] = block_c2czP_info;
           R2 = P64[Sp + 32];
           _s2aPe::I64 = I64[R1 + 7];
           R1 = _s2aPe::I64;
           I64[Sp + 32] = _s2aPe::I64;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2czL_info" {
     block_c2czL_info:
         const _c2czL;
         const 5;
         const 30;
 },
 _c2czP() //  [R1]
         { []
         }
     {offset
       c2czP: // global
           P64[Sp] = P64[Sp + 40];
           P64[Sp + 40] = R1;
           call _c2cAo() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2czP_info" {
     block_c2czP_info:
         const _c2czP;
         const 517;
         const 30;
 },
 _c2cAo() //  []
         { []
         }
     {offset
       c2cAo: // global
           _s2aPr::P64 = P64[Sp];
           I64[Sp] = block_c2cAq_info;
           R1 = _s2aPr::P64;
           if (R1 & 7 != 0) goto u2cB1; else goto c2cAs;
       u2cB1: // global
           call _c2cAq(R1) args: 0, res: 0, upd: 0;
       c2cAs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2cAq() //  [R1]
         { []
         }
     {offset
       c2cAq: // global
           if (R1 & 7 == 1) goto u2cB2; else goto c2cAI;
       u2cB2: // global
           call _c2czU() args: 0, res: 0, upd: 0;
       c2cAI: // global
           I64[Sp - 8] = block_c2cAB_info;
           _s2aPv::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s2aPv::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2cB3; else goto c2cAC;
       u2cB3: // global
           call _c2cAB(R1) args: 0, res: 0, upd: 0;
       c2cAC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cAq_info" {
     block_c2cAq_info:
         const _c2cAq;
         const 517;
         const 30;
 },
 _c2czU() //  []
         { []
         }
     {offset
       c2czU: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c2cAk; else goto c2cAj;
       c2cAk: // global
           HpAlloc = 48;
           I64[Sp] = block_c2czU_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2cAj: // global
           _s2aPh::P64 = P64[Sp + 40];
           I64[_s2aPh::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 40] = sat_s2aPp_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s2aPh::P64;
           I64[Hp] = I64[Sp + 32];
           R1 = (Hp + -40) & (-8);
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2czU_info" {
     block_c2czU_info:
         const _c2czU;
         const 773;
         const 30;
 },
 _c2cAB() //  [R1]
         { []
         }
     {offset
       c2cAB: // global
           I64[Sp - 8] = block_c2cAG_info;
           _s2aPy::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aPy::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2cB4; else goto c2cAK;
       u2cB4: // global
           call _c2cAG(R1) args: 0, res: 0, upd: 0;
       c2cAK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cAB_info" {
     block_c2cAB_info:
         const _c2cAB;
         const 1030;
         const 30;
 },
 _c2cAG() //  [R1]
         { []
         }
     {offset
       c2cAG: // global
           _s2aPA::I64 = I64[R1 + 7];
           _s2aPD::P64 = P64[P64[Sp + 56] + ((_s2aPA::I64 << 3) + 24)];
           I64[Sp] = block_c2cAO_info;
           R3 = P64[Sp + 8];
           R2 = _s2aPD::P64;
           R1 = P64[Sp + 40];
           I64[Sp + 8] = _s2aPA::I64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cAG_info" {
     block_c2cAG_info:
         const _c2cAG;
         const 2055;
         const 30;
 },
 _c2cAO() //  [R1]
         { []
         }
     {offset
       c2cAO: // global
           _s2aPh::P64 = P64[Sp + 56];
           _s2aPv::P64 = P64[Sp + 16];
           _s2aPA::I64 = I64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s2aPh::P64 + 24) + (_s2aPA::I64 << 3)] = R1;
           I64[_s2aPh::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2aPh::P64 + 24) + ((I64[_s2aPh::P64 + 8] << 3) + (_s2aPA::I64 >> 7))] = 1 :: W8;
           P64[Sp + 16] = _s2aPv::P64;
           Sp = Sp + 16;
           call _c2cAo() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2cAO_info" {
     block_c2cAO_info:
         const _c2cAO;
         const 2119;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.980090475 UTC

[section ""data" . GHC.Arr.adjust_closure" {
     GHC.Arr.adjust_closure:
         const GHC.Arr.adjust_info;
 },
 GHC.Arr.adjust_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2cCv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2cCz; else goto c2cCA;
       c2cCz: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.adjust_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2cCA: // global
           I64[Sp - 32] = block_c2cCs_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2cCL; else goto c2cCt;
       u2cCL: // global
           call _c2cCs(R1) args: 0, res: 0, upd: 0;
       c2cCt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.adjust_info" {
     GHC.Arr.adjust_info:
         const GHC.Arr.adjust_entry;
         const 0;
         const 14;
         const 21474836504;
 },
 _c2cCs() //  [R1]
         { []
         }
     {offset
       c2cCs: // global
           I64[Sp - 8] = block_c2cCy_info;
           _s2aPQ::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aPQ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2cCK; else goto c2cCC;
       u2cCK: // global
           call _c2cCy(R1) args: 0, res: 0, upd: 0;
       c2cCC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cCs_info" {
     block_c2cCs_info:
         const _c2cCs;
         const 3;
         const 30;
 },
 _c2cCy() //  [R1]
         { []
         }
     {offset
       c2cCy: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2cCI; else goto c2cCH;
       c2cCI: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2cCH: // global
           _s2aPK::P64 = P64[Sp + 24];
           _s2aPS::I64 = I64[R1 + 7];
           _s2aPV::P64 = P64[(_s2aPK::P64 + 24) + (_s2aPS::I64 << 3)];
           I64[Hp - 32] = stg_ap_3_upd_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s2aPV::P64;
           P64[Hp] = P64[Sp + 8];
           _s2aPM::P64 = P64[Sp + 32];
           call MO_WriteBarrier();
           P64[(_s2aPK::P64 + 24) + (_s2aPS::I64 << 3)] = Hp - 32;
           I64[_s2aPK::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2aPK::P64 + 24) + ((I64[_s2aPK::P64 + 8] << 3) + (_s2aPS::I64 >> 7))] = 1 :: W8;
           R1 = _s2aPM::P64;
           Sp = Sp + 40;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cCy_info" {
     block_c2cCy_info:
         const _c2cCy;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.988628767 UTC

[section ""data" . GHC.Arr.indices_closure" {
     GHC.Arr.indices_closure:
         const GHC.Arr.indices_info;
 },
 GHC.Arr.indices_entry() //  [R2, R3]
         { []
         }
     {offset
       c2cDh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2cDi; else goto c2cDj;
       c2cDi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.indices_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2cDj: // global
           I64[Sp - 16] = block_c2cDe_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2cDq; else goto c2cDf;
       u2cDq: // global
           call _c2cDe(R1) args: 0, res: 0, upd: 0;
       c2cDf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.indices_info" {
     GHC.Arr.indices_info:
         const GHC.Arr.indices_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2cDe() //  [R1]
         { []
         }
     {offset
       c2cDe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2cDo; else goto c2cDn;
       c2cDo: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2cDn: // global
           _s2aQ1::P64 = P64[R1 + 7];
           _s2aQ2::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2aQ1::P64;
           P64[Hp] = _s2aQ2::P64;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_p_info;
           P64[Sp + 8] = Hp - 15;
           call GHC.Arr.range_entry(R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cDe_info" {
     block_c2cDe_info:
         const _c2cDe;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:57.994927102 UTC

[section ""data" . GHC.Arr.numElements_closure" {
     GHC.Arr.numElements_closure:
         const GHC.Arr.numElements_info;
 },
 GHC.Arr.numElements_entry() //  [R2]
         { []
         }
     {offset
       c2cDL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2cDP; else goto c2cDQ;
       c2cDP: // global
           R2 = R2;
           R1 = GHC.Arr.numElements_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2cDQ: // global
           I64[Sp - 8] = block_c2cDI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2cDU; else goto c2cDJ;
       u2cDU: // global
           call _c2cDI(R1) args: 0, res: 0, upd: 0;
       c2cDJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.numElements_info" {
     GHC.Arr.numElements_info:
         const GHC.Arr.numElements_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2cDI() //  [R1]
         { []
         }
     {offset
       c2cDI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2cDT; else goto c2cDS;
       c2cDT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2cDS: // global
           _s2aQa::I64 = I64[R1 + 31];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2aQa::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cDI_info" {
     block_c2cDI_info:
         const _c2cDI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.000617938 UTC

[section ""data" . GHC.Arr.bounds_closure" {
     GHC.Arr.bounds_closure:
         const GHC.Arr.bounds_info;
 },
 GHC.Arr.bounds_entry() //  [R2]
         { []
         }
     {offset
       c2cEe: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2cEi; else goto c2cEj;
       c2cEi: // global
           R2 = R2;
           R1 = GHC.Arr.bounds_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2cEj: // global
           I64[Sp - 8] = block_c2cEb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2cEn; else goto c2cEc;
       u2cEn: // global
           call _c2cEb(R1) args: 0, res: 0, upd: 0;
       c2cEc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.bounds_info" {
     GHC.Arr.bounds_info:
         const GHC.Arr.bounds_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2cEb() //  [R1]
         { []
         }
     {offset
       c2cEb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2cEm; else goto c2cEl;
       c2cEm: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2cEl: // global
           _s2aQe::P64 = P64[R1 + 7];
           _s2aQf::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2aQe::P64;
           P64[Hp] = _s2aQf::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cEb_info" {
     block_c2cEb_info:
         const _c2cEb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.0125183 UTC

[section ""data" . GHC.Arr.cmpIntArray_closure" {
     GHC.Arr.cmpIntArray_closure:
         const GHC.Arr.cmpIntArray_info;
 },
 sat_s2aQV_entry() //  [R1]
         { []
         }
     {offset
       c2cFF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2cFG; else goto c2cFH;
       c2cFG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2cFH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aQV_info" {
     sat_s2aQV_info:
         const sat_s2aQV_entry;
         const 4294967297;
         const 19;
 },
 sat_s2aQS_entry() //  [R1]
         { []
         }
     {offset
       c2cFM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2cFN; else goto c2cFO;
       c2cFN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2cFO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aQS_info" {
     sat_s2aQS_info:
         const sat_s2aQS_entry;
         const 4294967297;
         const 19;
 },
 GHC.Arr.cmpIntArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2cFP: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c2cFQ; else goto c2cFR;
       c2cFQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.cmpIntArray_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2cFR: // global
           I64[Sp - 24] = block_c2cEE_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2cHp; else goto c2cEF;
       u2cHp: // global
           call _c2cEE(R1) args: 0, res: 0, upd: 0;
       c2cEF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.cmpIntArray_info" {
     GHC.Arr.cmpIntArray_info:
         const GHC.Arr.cmpIntArray_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c2cEE() //  [R1]
         { []
         }
     {offset
       c2cEE: // global
           I64[Sp - 24] = block_c2cEJ_info;
           _s2aQm::P64 = P64[R1 + 7];
           _s2aQp::P64 = P64[R1 + 23];
           _s2aQo::I64 = I64[R1 + 31];
           R1 = P64[R1 + 15];
           I64[Sp - 16] = _s2aQo::I64;
           P64[Sp - 8] = _s2aQp::P64;
           P64[Sp] = _s2aQm::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2cHc; else goto c2cEK;
       u2cHc: // global
           call _c2cEJ(R1) args: 0, res: 0, upd: 0;
       c2cEK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cEE_info" {
     block_c2cEE_info:
         const _c2cEE;
         const 2;
         const 30;
 },
 _c2cEJ() //  [R1]
         { []
         }
     {offset
       c2cEJ: // global
           I64[Sp] = block_c2cEO_info;
           _s2aQr::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s2aQr::I64;
           if (R1 & 7 != 0) goto u2cHd; else goto c2cEP;
       u2cHd: // global
           call _c2cEO(R1) args: 0, res: 0, upd: 0;
       c2cEP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cEJ_info" {
     block_c2cEJ_info:
         const _c2cEJ;
         const 69;
         const 30;
 },
 _c2cEO() //  [R1]
         { []
         }
     {offset
       c2cEO: // global
           I64[Sp] = block_c2cET_info;
           _s2aQt::I64 = I64[R1 + 7];
           R1 = P64[Sp + 40];
           I64[Sp + 40] = _s2aQt::I64;
           if (R1 & 7 != 0) goto u2cHe; else goto c2cEU;
       u2cHe: // global
           call _c2cET(R1) args: 0, res: 0, upd: 0;
       c2cEU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cEO_info" {
     block_c2cEO_info:
         const _c2cEO;
         const 325;
         const 30;
 },
 _c2cET() //  [R1]
         { []
         }
     {offset
       c2cET: // global
           I64[Sp - 24] = block_c2cEY_info;
           _s2aQv::P64 = P64[R1 + 7];
           _s2aQy::P64 = P64[R1 + 23];
           _s2aQx::I64 = I64[R1 + 31];
           R1 = P64[R1 + 15];
           I64[Sp - 16] = _s2aQx::I64;
           P64[Sp - 8] = _s2aQy::P64;
           P64[Sp] = _s2aQv::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2cHf; else goto c2cEZ;
       u2cHf: // global
           call _c2cEY(R1) args: 0, res: 0, upd: 0;
       c2cEZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cET_info" {
     block_c2cET_info:
         const _c2cET;
         const 1349;
         const 30;
 },
 _c2cEY() //  [R1]
         { []
         }
     {offset
       c2cEY: // global
           I64[Sp] = block_c2cF3_info;
           _s2aQA::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s2aQA::I64;
           if (R1 & 7 != 0) goto u2cHg; else goto c2cF4;
       u2cHg: // global
           call _c2cF3(R1) args: 0, res: 0, upd: 0;
       c2cF4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cEY_info" {
     block_c2cEY_info:
         const _c2cEY;
         const 10824;
         const 30;
 },
 _c2cF3() //  [R1]
         { []
         }
     {offset
       c2cF3: // global
           _s2aQx::I64 = I64[Sp + 8];
           _s2aQD::I64 = I64[Sp + 32];
           if (_s2aQD::I64 != 0) goto c2cGP; else goto c2cGV;
       c2cGP: // global
           if (_s2aQx::I64 == 0) goto u2cGZ; else goto c2cGM;
       u2cGZ: // global
           Sp = Sp + 72;
           goto u2cHj;
       c2cGM: // global
           _s2aQt::I64 = I64[Sp + 64];
           _s2aQC::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s2aQt::I64,
                            _s2aQC::I64)) goto c2cGJ; else goto u2cH0;
       c2cGJ: // global
           if (_s2aQt::I64 == _s2aQC::I64) goto c2cGH; else goto u2cH1;
       c2cGH: // global
           if (%MO_S_Gt_W64(_s2aQD::I64,
                            _s2aQx::I64)) goto c2cGF; else goto c2cGG;
       c2cGF: // global
           _s2aQI::I64 = _s2aQx::I64;
           goto s2aQH;
       c2cGG: // global
           _s2aQI::I64 = _s2aQD::I64;
           goto s2aQH;
       s2aQH: // global
           _s2aQJ::I64 = _s2aQI::I64 - 1;
           if (%MO_S_Le_W64(0, _s2aQJ::I64)) goto c2cGA; else goto u2cH2;
       c2cGA: // global
           I64[Sp + 32] = 0;
           I64[Sp + 64] = _s2aQJ::I64;
           Sp = Sp + 16;
           call _c2cFz() args: 0, res: 0, upd: 0;
       u2cH2: // global
           Sp = Sp + 24;
           call _s2aQK() args: 0, res: 0, upd: 0;
       u2cH1: // global
           Sp = Sp + 72;
           goto u2cHj;
       u2cHj: // global
           call _c2cGN() args: 0, res: 0, upd: 0;
       u2cH0: // global
           Sp = Sp + 72;
           goto u2cHn;
       c2cGV: // global
           if (_s2aQx::I64 == 0) goto u2cHa; else goto u2cHb;
       u2cHa: // global
           Sp = Sp + 72;
           call _c2cGU() args: 0, res: 0, upd: 0;
       u2cHb: // global
           Sp = Sp + 72;
           goto u2cHn;
       u2cHn: // global
           call _c2cGT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2cF3_info" {
     block_c2cF3_info:
         const _c2cF3;
         const 11080;
         const 30;
 },
 _c2cFz() //  []
         { []
         }
     {offset
       c2cFz: // global
           Hp = Hp + 64;
           _s2aQP::I64 = I64[Sp + 16];
           if (Hp > HpLim) (likely: False) goto c2cGj; else goto c2cGi;
       c2cGj: // global
           HpAlloc = 64;
           I64[Sp - 8] = block_c2cFy_info;
           R1 = _s2aQP::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2cGi: // global
           I64[Hp - 56] = sat_s2aQV_info;
           P64[Hp - 40] = P64[Sp];
           I64[Hp - 32] = _s2aQP::I64;
           I64[Hp - 24] = sat_s2aQS_info;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = _s2aQP::I64;
           I64[Sp - 8] = block_c2cGg_info;
           R2 = P64[Sp + 40];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = Hp - 56;
           Sp = Sp - 32;
           call GHC.Classes.compare_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c2cFy() //  [R1]
         { []
         }
     {offset
       c2cFy: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _c2cFz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2cFy_info" {
     block_c2cFy_info:
         const _c2cFy;
         const 5511;
         const 30;
 },
 _c2cGg() //  [R1]
         { []
         }
     {offset
       c2cGg: // global
           if (R1 & 7 == 2) goto c2cGy; else goto c2cGp;
       c2cGy: // global
           _s2aQP::I64 = I64[Sp + 24];
           if (_s2aQP::I64 == I64[Sp + 56]) goto u2cH5; else goto c2cGw;
       u2cH5: // global
           Sp = Sp + 16;
           call _s2aQK() args: 0, res: 0, upd: 0;
       c2cGw: // global
           I64[Sp + 24] = _s2aQP::I64 + 1;
           Sp = Sp + 8;
           call _c2cFz() args: 0, res: 0, upd: 0;
       c2cGp: // global
           R1 = R1 & (-8);
           Sp = Sp + 64;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cGg_info" {
     block_c2cGg_info:
         const _c2cGg;
         const 5511;
         const 30;
 },
 _s2aQK() //  []
         { []
         }
     {offset
       s2aQK: // global
           _s2aQr::I64 = I64[Sp + 24];
           _s2aQA::I64 = I64[Sp];
           if (%MO_S_Ge_W64(_s2aQr::I64,
                            _s2aQA::I64)) goto c2cGe; else goto u2cH7;
       c2cGe: // global
           if (_s2aQr::I64 == _s2aQA::I64) goto u2cH8; else goto u2cH9;
       u2cH8: // global
           Sp = Sp + 48;
           call _c2cGU() args: 0, res: 0, upd: 0;
       u2cH9: // global
           Sp = Sp + 48;
           call _c2cGN() args: 0, res: 0, upd: 0;
       u2cH7: // global
           Sp = Sp + 48;
           call _c2cGT() args: 0, res: 0, upd: 0;
     }
 },
 _c2cGN() //  []
         { []
         }
     {offset
       c2cGN: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2cGU() //  []
         { []
         }
     {offset
       c2cGU: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2cGT() //  []
         { []
         }
     {offset
       c2cGT: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.042625176 UTC

[section ""data" . GHC.Arr.$fEqArray_$c/=_closure" {
     GHC.Arr.$fEqArray_$c/=_closure:
         const GHC.Arr.$fEqArray_$c/=_info;
 },
 sat_s2aRt_entry() //  [R1]
         { []
         }
     {offset
       c2cJG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2cJH; else goto c2cJI;
       c2cJH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2cJI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aRt_info" {
     sat_s2aRt_info:
         const sat_s2aRt_entry;
         const 4294967297;
         const 19;
 },
 sat_s2aRq_entry() //  [R1]
         { []
         }
     {offset
       c2cJN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2cJO; else goto c2cJP;
       c2cJO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2cJP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aRq_info" {
     sat_s2aRq_info:
         const sat_s2aRq_entry;
         const 4294967297;
         const 19;
 },
 GHC.Arr.$fEqArray_$c/=_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2cJQ: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c2cJR; else goto c2cJS;
       c2cJR: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fEqArray_$c/=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2cJS: // global
           I64[Sp - 32] = block_c2cIX_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2cL0; else goto c2cIY;
       u2cL0: // global
           call _c2cIX(R1) args: 0, res: 0, upd: 0;
       c2cIY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fEqArray_$c/=_info" {
     GHC.Arr.$fEqArray_$c/=_info:
         const GHC.Arr.$fEqArray_$c/=_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c2cIX() //  [R1]
         { []
         }
     {offset
       c2cIX: // global
           I64[Sp - 24] = block_c2cJ2_info;
           _s2aR6::P64 = P64[R1 + 7];
           _s2aR7::P64 = P64[R1 + 15];
           _s2aR9::P64 = P64[R1 + 23];
           _s2aR8::I64 = I64[R1 + 31];
           R1 = P64[Sp + 24];
           I64[Sp - 16] = _s2aR8::I64;
           P64[Sp - 8] = _s2aR9::P64;
           P64[Sp] = _s2aR7::P64;
           P64[Sp + 24] = _s2aR6::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2cKS; else goto c2cJ3;
       u2cKS: // global
           call _c2cJ2(R1) args: 0, res: 0, upd: 0;
       c2cJ3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cIX_info" {
     block_c2cIX_info:
         const _c2cIX;
         const 3;
         const 30;
 },
 _c2cJ2() //  [R1]
         { []
         }
     {offset
       c2cJ2: // global
           _s2aRf::I64 = I64[Sp + 8];
           if (_s2aRf::I64 != 0) goto c2cJW; else goto c2cKC;
       c2cJW: // global
           I64[Sp - 16] = block_c2cJ9_info;
           R2 = P64[Sp + 32];
           I64[Sp - 8] = _s2aRf::I64;
           P64[Sp] = P64[R1 + 23];
           P64[Sp + 8] = P64[R1 + 15];
           P64[Sp + 32] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 8, res: 8, upd: 8;
       c2cKC: // global
           if (I64[R1 + 31] == 0) goto u2cKQ; else goto u2cKR;
       u2cKQ: // global
           Sp = Sp + 56;
           call _c2cKB() args: 0, res: 0, upd: 0;
       u2cKR: // global
           Sp = Sp + 56;
           call _c2cKA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2cJ2_info" {
     block_c2cJ2_info:
         const _c2cJ2;
         const 70;
         const 30;
 },
 _c2cJ9() //  [R1]
         { []
         }
     {offset
       c2cJ9: // global
           I64[Sp] = block_c2cJd_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cJ9_info" {
     block_c2cJ9_info:
         const _c2cJ9;
         const 72;
         const 30;
 },
 _c2cJd() //  [R1]
         { []
         }
     {offset
       c2cJd: // global
           I64[Sp] = block_c2cJh_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 64];
           P64[Sp - 8] = P64[Sp + 48];
           P64[Sp + 64] = R1;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cJd_info" {
     block_c2cJd_info:
         const _c2cJd;
         const 72;
         const 30;
 },
 _c2cJh() //  [R1]
         { []
         }
     {offset
       c2cJh: // global
           if (R1 & 7 == 1) goto u2cKI; else goto c2cK4;
       u2cKI: // global
           Sp = Sp + 72;
           call _c2cKA() args: 0, res: 0, upd: 0;
       c2cK4: // global
           I64[Sp] = block_c2cJm_info;
           R2 = P64[Sp + 64];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 40];
           P64[Sp - 8] = P64[Sp + 24];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cJh_info" {
     block_c2cJh_info:
         const _c2cJh;
         const 2120;
         const 30;
 },
 _c2cJm() //  [R1]
         { []
         }
     {offset
       c2cJm: // global
           if (R1 & 7 == 1) goto u2cKJ; else goto c2cKw;
       u2cKJ: // global
           Sp = Sp + 72;
           call _c2cKA() args: 0, res: 0, upd: 0;
       c2cKw: // global
           _s2aRk::I64 = I64[Sp + 8] - 1;
           if (%MO_S_Le_W64(0, _s2aRk::I64)) goto c2cKu; else goto u2cKK;
       c2cKu: // global
           I64[Sp + 48] = 0;
           I64[Sp + 64] = _s2aRk::I64;
           Sp = Sp + 16;
           call _c2cJA() args: 0, res: 0, upd: 0;
       u2cKK: // global
           Sp = Sp + 72;
           call _c2cKB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2cJm_info" {
     block_c2cJm_info:
         const _c2cJm;
         const 11592;
         const 30;
 },
 _c2cJA() //  []
         { []
         }
     {offset
       c2cJA: // global
           Hp = Hp + 64;
           _s2aRn::I64 = I64[Sp + 32];
           if (Hp > HpLim) (likely: False) goto c2cKd; else goto c2cKc;
       c2cKd: // global
           HpAlloc = 64;
           I64[Sp - 8] = block_c2cJz_info;
           R1 = _s2aRn::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2cKc: // global
           I64[Hp - 56] = sat_s2aRt_info;
           P64[Hp - 40] = P64[Sp];
           I64[Hp - 32] = _s2aRn::I64;
           I64[Hp - 24] = sat_s2aRq_info;
           P64[Hp - 8] = P64[Sp + 16];
           I64[Hp] = _s2aRn::I64;
           I64[Sp - 8] = block_c2cKa_info;
           R2 = P64[Sp + 40];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = Hp - 56;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c2cJz() //  [R1]
         { []
         }
     {offset
       c2cJz: // global
           I64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _c2cJA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2cJz_info" {
     block_c2cJz_info:
         const _c2cJz;
         const 5767;
         const 30;
 },
 _c2cKa() //  [R1]
         { []
         }
     {offset
       c2cKa: // global
           if (R1 & 7 == 1) goto u2cKN; else goto c2cKs;
       u2cKN: // global
           Sp = Sp + 64;
           call _c2cKA() args: 0, res: 0, upd: 0;
       c2cKs: // global
           _s2aRn::I64 = I64[Sp + 40];
           if (_s2aRn::I64 == I64[Sp + 56]) goto u2cKO; else goto c2cKq;
       u2cKO: // global
           Sp = Sp + 64;
           call _c2cKB() args: 0, res: 0, upd: 0;
       c2cKq: // global
           I64[Sp + 40] = _s2aRn::I64 + 1;
           Sp = Sp + 8;
           call _c2cJA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2cKa_info" {
     block_c2cKa_info:
         const _c2cKa;
         const 5767;
         const 30;
 },
 _c2cKB() //  []
         { []
         }
     {offset
       c2cKB: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2cKA() //  []
         { []
         }
     {offset
       c2cKA: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.070205962 UTC

[section ""data" . GHC.Arr.eqArray_closure" {
     GHC.Arr.eqArray_closure:
         const GHC.Arr.eqArray_info;
 },
 sat_s2aS0_entry() //  [R1]
         { []
         }
     {offset
       c2cNg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2cNh; else goto c2cNi;
       c2cNh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2cNi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aS0_info" {
     sat_s2aS0_info:
         const sat_s2aS0_entry;
         const 4294967297;
         const 19;
 },
 sat_s2aRX_entry() //  [R1]
         { []
         }
     {offset
       c2cNn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2cNo; else goto c2cNp;
       c2cNo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2cNp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aRX_info" {
     sat_s2aRX_info:
         const sat_s2aRX_entry;
         const 4294967297;
         const 19;
 },
 GHC.Arr.eqArray_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2cNq: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c2cNr; else goto c2cNs;
       c2cNr: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.eqArray_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2cNs: // global
           I64[Sp - 32] = block_c2cMx_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2cOA; else goto c2cMy;
       u2cOA: // global
           call _c2cMx(R1) args: 0, res: 0, upd: 0;
       c2cMy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.eqArray_info" {
     GHC.Arr.eqArray_info:
         const GHC.Arr.eqArray_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c2cMx() //  [R1]
         { []
         }
     {offset
       c2cMx: // global
           I64[Sp - 24] = block_c2cMC_info;
           _s2aRD::P64 = P64[R1 + 7];
           _s2aRE::P64 = P64[R1 + 15];
           _s2aRG::P64 = P64[R1 + 23];
           _s2aRF::I64 = I64[R1 + 31];
           R1 = P64[Sp + 24];
           I64[Sp - 16] = _s2aRF::I64;
           P64[Sp - 8] = _s2aRG::P64;
           P64[Sp] = _s2aRE::P64;
           P64[Sp + 24] = _s2aRD::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2cOs; else goto c2cMD;
       u2cOs: // global
           call _c2cMC(R1) args: 0, res: 0, upd: 0;
       c2cMD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cMx_info" {
     block_c2cMx_info:
         const _c2cMx;
         const 3;
         const 30;
 },
 _c2cMC() //  [R1]
         { []
         }
     {offset
       c2cMC: // global
           _s2aRM::I64 = I64[Sp + 8];
           if (_s2aRM::I64 != 0) goto c2cNw; else goto c2cOc;
       c2cNw: // global
           I64[Sp - 16] = block_c2cMJ_info;
           R2 = P64[Sp + 32];
           I64[Sp - 8] = _s2aRM::I64;
           P64[Sp] = P64[R1 + 23];
           P64[Sp + 8] = P64[R1 + 15];
           P64[Sp + 32] = P64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 8, res: 8, upd: 8;
       c2cOc: // global
           if (I64[R1 + 31] == 0) goto u2cOq; else goto u2cOr;
       u2cOq: // global
           Sp = Sp + 56;
           call _c2cOb() args: 0, res: 0, upd: 0;
       u2cOr: // global
           Sp = Sp + 56;
           call _c2cOa() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2cMC_info" {
     block_c2cMC_info:
         const _c2cMC;
         const 70;
         const 30;
 },
 _c2cMJ() //  [R1]
         { []
         }
     {offset
       c2cMJ: // global
           I64[Sp] = block_c2cMN_info;
           R2 = R1;
           call GHC.Classes.$p1Ord_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cMJ_info" {
     block_c2cMJ_info:
         const _c2cMJ;
         const 72;
         const 30;
 },
 _c2cMN() //  [R1]
         { []
         }
     {offset
       c2cMN: // global
           I64[Sp] = block_c2cMR_info;
           R2 = R1;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 64];
           P64[Sp - 8] = P64[Sp + 48];
           P64[Sp + 64] = R1;
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cMN_info" {
     block_c2cMN_info:
         const _c2cMN;
         const 72;
         const 30;
 },
 _c2cMR() //  [R1]
         { []
         }
     {offset
       c2cMR: // global
           if (R1 & 7 == 1) goto u2cOi; else goto c2cNE;
       u2cOi: // global
           Sp = Sp + 72;
           call _c2cOa() args: 0, res: 0, upd: 0;
       c2cNE: // global
           I64[Sp] = block_c2cMW_info;
           R2 = P64[Sp + 64];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 40];
           P64[Sp - 8] = P64[Sp + 24];
           Sp = Sp - 24;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cMR_info" {
     block_c2cMR_info:
         const _c2cMR;
         const 2120;
         const 30;
 },
 _c2cMW() //  [R1]
         { []
         }
     {offset
       c2cMW: // global
           if (R1 & 7 == 1) goto u2cOj; else goto c2cO6;
       u2cOj: // global
           Sp = Sp + 72;
           call _c2cOa() args: 0, res: 0, upd: 0;
       c2cO6: // global
           _s2aRR::I64 = I64[Sp + 8] - 1;
           if (%MO_S_Le_W64(0, _s2aRR::I64)) goto c2cO4; else goto u2cOk;
       c2cO4: // global
           I64[Sp + 48] = 0;
           I64[Sp + 64] = _s2aRR::I64;
           Sp = Sp + 16;
           call _c2cNa() args: 0, res: 0, upd: 0;
       u2cOk: // global
           Sp = Sp + 72;
           call _c2cOb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2cMW_info" {
     block_c2cMW_info:
         const _c2cMW;
         const 11592;
         const 30;
 },
 _c2cNa() //  []
         { []
         }
     {offset
       c2cNa: // global
           Hp = Hp + 64;
           _s2aRU::I64 = I64[Sp + 32];
           if (Hp > HpLim) (likely: False) goto c2cNN; else goto c2cNM;
       c2cNN: // global
           HpAlloc = 64;
           I64[Sp - 8] = block_c2cN9_info;
           R1 = _s2aRU::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2cNM: // global
           I64[Hp - 56] = sat_s2aS0_info;
           P64[Hp - 40] = P64[Sp];
           I64[Hp - 32] = _s2aRU::I64;
           I64[Hp - 24] = sat_s2aRX_info;
           P64[Hp - 8] = P64[Sp + 16];
           I64[Hp] = _s2aRU::I64;
           I64[Sp - 8] = block_c2cNK_info;
           R2 = P64[Sp + 40];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 24;
           P64[Sp - 16] = Hp - 56;
           Sp = Sp - 32;
           call GHC.Classes.==_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 _c2cN9() //  [R1]
         { []
         }
     {offset
       c2cN9: // global
           I64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _c2cNa() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2cN9_info" {
     block_c2cN9_info:
         const _c2cN9;
         const 5767;
         const 30;
 },
 _c2cNK() //  [R1]
         { []
         }
     {offset
       c2cNK: // global
           if (R1 & 7 == 1) goto u2cOn; else goto c2cO2;
       u2cOn: // global
           Sp = Sp + 64;
           call _c2cOa() args: 0, res: 0, upd: 0;
       c2cO2: // global
           _s2aRU::I64 = I64[Sp + 40];
           if (_s2aRU::I64 == I64[Sp + 56]) goto u2cOo; else goto c2cO0;
       u2cOo: // global
           Sp = Sp + 64;
           call _c2cOb() args: 0, res: 0, upd: 0;
       c2cO0: // global
           I64[Sp + 40] = _s2aRU::I64 + 1;
           Sp = Sp + 8;
           call _c2cNa() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2cNK_info" {
     block_c2cNK_info:
         const _c2cNK;
         const 5767;
         const 30;
 },
 _c2cOb() //  []
         { []
         }
     {offset
       c2cOb: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2cOa() //  []
         { []
         }
     {offset
       c2cOa: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.093995048 UTC

[section ""data" . GHC.Arr.$fEqArray_closure" {
     GHC.Arr.$fEqArray_closure:
         const GHC.Arr.$fEqArray_info;
 },
 sat_s2aS8_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2cQc: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fEqArray_$c/=_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2aS8_info" {
     sat_s2aS8_info:
         const sat_s2aS8_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_s2aS7_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2cQk: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.eqArray_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2aS7_info" {
     sat_s2aS7_info:
         const sat_s2aS7_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 GHC.Arr.$fEqArray_entry() //  [R2, R3]
         { []
         }
     {offset
       c2cQo: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c2cQs; else goto c2cQr;
       c2cQs: // global
           HpAlloc = 72;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fEqArray_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2cQr: // global
           I64[Hp - 64] = sat_s2aS8_info;
           P64[Hp - 56] = R2;
           P64[Hp - 48] = R3;
           I64[Hp - 40] = sat_s2aS7_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = Hp - 38;
           P64[Hp] = Hp - 62;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fEqArray_info" {
     GHC.Arr.$fEqArray_info:
         const GHC.Arr.$fEqArray_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.101849321 UTC

[section ""data" . GHC.Arr.$fOrdArray_$cp1Ord_closure" {
     GHC.Arr.$fOrdArray_$cp1Ord_closure:
         const GHC.Arr.$fOrdArray_$cp1Ord_info;
 },
 sat_s2aSb_entry() //  [R1]
         { []
         }
     {offset
       c2cQR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2cQS; else goto c2cQT;
       c2cQS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2cQT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Classes.$p1Ord_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aSb_info" {
     sat_s2aSb_info:
         const sat_s2aSb_entry;
         const 1;
         const 16;
 },
 GHC.Arr.$fOrdArray_$cp1Ord_entry() //  [R2, R3]
         { []
         }
     {offset
       c2cQU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2cQY; else goto c2cQX;
       c2cQY: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fOrdArray_$cp1Ord_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2cQX: // global
           I64[Hp - 16] = sat_s2aSb_info;
           P64[Hp] = R3;
           R3 = Hp - 16;
           R2 = R2;
           call GHC.Arr.$fEqArray_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fOrdArray_$cp1Ord_info" {
     GHC.Arr.$fOrdArray_$cp1Ord_info:
         const GHC.Arr.$fOrdArray_$cp1Ord_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.106692029 UTC

[section ""cstring" . lvl4_r1Xvf_bytes" {
     lvl4_r1Xvf_bytes:
         I8[] [102,111,108,100,114,49,58,32,101,109,112,116,121,32,65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.109131599 UTC

[section ""data" . lvl5_r1Xvg_closure" {
     lvl5_r1Xvg_closure:
         const lvl5_r1Xvg_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r1Xvg_entry() //  [R1]
         { []
         }
     {offset
       c2cRi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2cRj; else goto c2cRk;
       c2cRj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2cRk: // global
           (_c2cRd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2cRd::I64 == 0) goto c2cRf; else goto c2cRe;
       c2cRf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2cRe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2cRd::I64;
           I64[Sp - 24] = block_c2cRg_info;
           R2 = lvl4_r1Xvf_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_r1Xvg_info" {
     lvl5_r1Xvg_info:
         const lvl5_r1Xvg_entry;
         const 0;
         const 4294967317;
         const S2bMd_srt+8;
 },
 _c2cRg() //  [R1]
         { []
         }
     {offset
       c2cRg: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2cRg_info" {
     block_c2cRg_info:
         const _c2cRg;
         const 0;
         const 4294967326;
         const S2bMd_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.116497062 UTC

[section ""data" . GHC.Arr.$wfoldr1Elems_closure" {
     GHC.Arr.$wfoldr1Elems_closure:
         const GHC.Arr.$wfoldr1Elems_info;
         const 0;
 },
 sat_s2aSp_entry() //  [R1]
         { []
         }
     {offset
       c2cRX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2cRY; else goto c2cRZ;
       c2cRY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2cRZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wgo_s2aSi_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aSp_info" {
     sat_s2aSp_info:
         const sat_s2aSp_entry;
         const 4294967297;
         const 19;
 },
 sat_s2aSn_entry() //  [R1]
         { []
         }
     {offset
       c2cS4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2cS5; else goto c2cS6;
       c2cS5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2cS6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aSn_info" {
     sat_s2aSn_info:
         const sat_s2aSn_entry;
         const 4294967297;
         const 19;
 },
 $wgo_s2aSi_entry() //  [R1, R2]
         { []
         }
     {offset
       c2cSa: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c2cSe; else goto c2cSd;
       c2cSe: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2cSd: // global
           _s2aSf::P64 = P64[R1 + 15];
           if (R2 == I64[R1 + 23]) goto c2cS9; else goto c2cS8;
       c2cS9: // global
           Hp = Hp - 64;
           R1 = P64[(_s2aSf::P64 + 24) + (R2 << 3)];
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c2cS8: // global
           _s2aSd::P64 = P64[R1 + 7];
           I64[Hp - 56] = sat_s2aSp_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s2aSn_info;
           P64[Hp - 8] = _s2aSf::P64;
           I64[Hp] = R2;
           R3 = Hp - 56;
           R2 = Hp - 24;
           R1 = _s2aSd::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s2aSi_info" {
     $wgo_s2aSi_info:
         const $wgo_s2aSi_entry;
         const 4294967298;
         const 8;
         const 4294967300;
 },
 GHC.Arr.$wfoldr1Elems_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2cSi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2cSm; else goto c2cSl;
       c2cSm: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$wfoldr1Elems_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2cSl: // global
           if (R3 == 0) goto c2cSh; else goto c2cSg;
       c2cSh: // global
           Hp = Hp - 32;
           R1 = lvl5_r1Xvg_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c2cSg: // global
           I64[Hp - 24] = $wgo_s2aSi_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R4;
           I64[Hp] = R3 - 1;
           R2 = 0;
           R1 = Hp - 23;
           call $wgo_s2aSi_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$wfoldr1Elems_info" {
     GHC.Arr.$wfoldr1Elems_info:
         const GHC.Arr.$wfoldr1Elems_entry;
         const 0;
         const 12884901902;
         const 12884901909;
         const S2bMd_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.126961914 UTC

[section ""data" . GHC.Arr.foldr1Elems_closure" {
     GHC.Arr.foldr1Elems_closure:
         const GHC.Arr.foldr1Elems_info;
         const 0;
 },
 GHC.Arr.foldr1Elems_entry() //  [R2, R3]
         { []
         }
     {offset
       c2cSS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2cST; else goto c2cSU;
       c2cST: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.foldr1Elems_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2cSU: // global
           I64[Sp - 16] = block_c2cSP_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2cSY; else goto c2cSQ;
       u2cSY: // global
           call _c2cSP(R1) args: 0, res: 0, upd: 0;
       c2cSQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.foldr1Elems_info" {
     GHC.Arr.foldr1Elems_info:
         const GHC.Arr.foldr1Elems_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S2bMd_srt+32;
 },
 _c2cSP() //  [R1]
         { []
         }
     {offset
       c2cSP: // global
           R4 = P64[R1 + 23];
           R3 = I64[R1 + 31];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Arr.$wfoldr1Elems_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cSP_info" {
     block_c2cSP_info:
         const _c2cSP;
         const 1;
         const 4294967326;
         const S2bMd_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.131889826 UTC

[section ""cstring" . lvl6_r1Xvh_bytes" {
     lvl6_r1Xvh_bytes:
         I8[] [102,111,108,100,108,49,58,32,101,109,112,116,121,32,65,114,114,97,121]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.134406921 UTC

[section ""data" . lvl7_r1Xvi_closure" {
     lvl7_r1Xvi_closure:
         const lvl7_r1Xvi_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r1Xvi_entry() //  [R1]
         { []
         }
     {offset
       c2cTi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2cTj; else goto c2cTk;
       c2cTj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2cTk: // global
           (_c2cTd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2cTd::I64 == 0) goto c2cTf; else goto c2cTe;
       c2cTf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2cTe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2cTd::I64;
           I64[Sp - 24] = block_c2cTg_info;
           R2 = lvl6_r1Xvh_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_r1Xvi_info" {
     lvl7_r1Xvi_info:
         const lvl7_r1Xvi_entry;
         const 0;
         const 4294967317;
         const S2bMd_srt+8;
 },
 _c2cTg() //  [R1]
         { []
         }
     {offset
       c2cTg: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2cTg_info" {
     block_c2cTg_info:
         const _c2cTg;
         const 0;
         const 4294967326;
         const S2bMd_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.141908404 UTC

[section ""data" . GHC.Arr.$wfoldl1Elems_closure" {
     GHC.Arr.$wfoldl1Elems_closure:
         const GHC.Arr.$wfoldl1Elems_info;
         const 0;
 },
 sat_s2aSL_entry() //  [R1]
         { []
         }
     {offset
       c2cTR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2cTS; else goto c2cTT;
       c2cTS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2cTT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aSL_info" {
     sat_s2aSL_info:
         const sat_s2aSL_entry;
         const 4294967297;
         const 19;
 },
 sat_s2aSI_entry() //  [R1]
         { []
         }
     {offset
       c2cU0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2cU1; else goto c2cU2;
       c2cU1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2cU2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wgo_s2aSE_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aSI_info" {
     sat_s2aSI_info:
         const sat_s2aSI_entry;
         const 4294967297;
         const 19;
 },
 $wgo_s2aSE_entry() //  [R1, R2]
         { []
         }
     {offset
       c2cU6: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c2cUa; else goto c2cU9;
       c2cUa: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2cU9: // global
           _s2aSC::P64 = P64[R1 + 15];
           if (R2 == 0) goto c2cU5; else goto c2cU4;
       c2cU5: // global
           _s2aSN::P64 = P64[_s2aSC::P64 + 24];
           Hp = Hp - 64;
           R1 = _s2aSN::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c2cU4: // global
           _s2aSA::P64 = P64[R1 + 7];
           I64[Hp - 56] = sat_s2aSL_info;
           P64[Hp - 40] = _s2aSC::P64;
           I64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s2aSI_info;
           P64[Hp - 8] = R1;
           I64[Hp] = R2;
           R3 = Hp - 56;
           R2 = Hp - 24;
           R1 = _s2aSA::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s2aSE_info" {
     $wgo_s2aSE_info:
         const $wgo_s2aSE_entry;
         const 2;
         const 11;
         const 4294967300;
 },
 GHC.Arr.$wfoldl1Elems_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2cUe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2cUi; else goto c2cUh;
       c2cUi: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$wfoldl1Elems_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2cUh: // global
           if (R3 == 0) goto c2cUd; else goto c2cUc;
       c2cUd: // global
           Hp = Hp - 24;
           R1 = lvl7_r1Xvi_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c2cUc: // global
           I64[Hp - 16] = $wgo_s2aSE_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R4;
           R2 = R3 - 1;
           R1 = Hp - 15;
           call $wgo_s2aSE_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$wfoldl1Elems_info" {
     GHC.Arr.$wfoldl1Elems_info:
         const GHC.Arr.$wfoldl1Elems_entry;
         const 0;
         const 12884901902;
         const 12884901909;
         const S2bMd_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.152501757 UTC

[section ""data" . GHC.Arr.foldl1Elems_closure" {
     GHC.Arr.foldl1Elems_closure:
         const GHC.Arr.foldl1Elems_info;
         const 0;
 },
 GHC.Arr.foldl1Elems_entry() //  [R2, R3]
         { []
         }
     {offset
       c2cUO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2cUP; else goto c2cUQ;
       c2cUP: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.foldl1Elems_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2cUQ: // global
           I64[Sp - 16] = block_c2cUL_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2cUU; else goto c2cUM;
       u2cUU: // global
           call _c2cUL(R1) args: 0, res: 0, upd: 0;
       c2cUM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.foldl1Elems_info" {
     GHC.Arr.foldl1Elems_info:
         const GHC.Arr.foldl1Elems_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S2bMd_srt+56;
 },
 _c2cUL() //  [R1]
         { []
         }
     {offset
       c2cUL: // global
           R4 = P64[R1 + 23];
           R3 = I64[R1 + 31];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Arr.$wfoldl1Elems_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cUL_info" {
     block_c2cUL_info:
         const _c2cUL;
         const 1;
         const 4294967326;
         const S2bMd_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.159661944 UTC

[section ""data" . GHC.Arr.$wfoldlElems'_closure" {
     GHC.Arr.$wfoldlElems'_closure:
         const GHC.Arr.$wfoldlElems'_info;
 },
 GHC.Arr.$wfoldlElems'_slow() //  [R1]
         { []
         }
     {offset
       c2cV6: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Arr.$wfoldlElems'_entry(R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2aT8_entry() //  [R1]
         { []
         }
     {offset
       c2cVo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2cVp; else goto c2cVq;
       c2cVp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2cVq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aT8_info" {
     sat_s2aT8_info:
         const sat_s2aT8_entry;
         const 4294967297;
         const 19;
 },
 GHC.Arr.$wfoldlElems'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2cVr: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2cVs; else goto c2cVt;
       c2cVs: // global
           R1 = GHC.Arr.$wfoldlElems'_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c2cVt: // global
           P64[Sp - 40] = R2;
           I64[Sp - 32] = R4;
           P64[Sp - 24] = R5;
           I64[Sp - 16] = 0;
           P64[Sp - 8] = R3;
           Sp = Sp - 40;
           call _c2cVc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Arr.$wfoldlElems'_info" {
     GHC.Arr.$wfoldlElems'_info:
         const GHC.Arr.$wfoldlElems'_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 260;
         const GHC.Arr.$wfoldlElems'_slow;
 },
 _c2cVc() //  []
         { []
         }
     {offset
       c2cVc: // global
           _s2aT2::P64 = P64[Sp + 32];
           if (I64[Sp + 24] == I64[Sp + 8]) goto c2cVD; else goto c2cVx;
       c2cVD: // global
           R1 = _s2aT2::P64;
           Sp = Sp + 40;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c2cVx: // global
           I64[Sp - 8] = block_c2cVi_info;
           R1 = _s2aT2::P64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2cVi() //  [R1]
         { []
         }
     {offset
       c2cVi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2cVA; else goto c2cVz;
       c2cVA: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2cVz: // global
           I64[Hp - 24] = sat_s2aT8_info;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 32];
           I64[Sp] = block_c2cVv_info;
           R3 = Hp - 24;
           R2 = R1;
           R1 = P64[Sp + 8];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cVi_info" {
     block_c2cVi_info:
         const _c2cVi;
         const 1669;
         const 30;
 },
 _c2cVv() //  [R1]
         { []
         }
     {offset
       c2cVv: // global
           I64[Sp + 32] = I64[Sp + 32] + 1;
           P64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _c2cVc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2cVv_info" {
     block_c2cVv_info:
         const _c2cVv;
         const 1669;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.170673288 UTC

[section ""data" . GHC.Arr.foldlElems'_closure" {
     GHC.Arr.foldlElems'_closure:
         const GHC.Arr.foldlElems'_info;
 },
 GHC.Arr.foldlElems'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2cWi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2cWj; else goto c2cWk;
       c2cWj: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.foldlElems'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2cWk: // global
           I64[Sp - 24] = block_c2cWf_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2cWo; else goto c2cWg;
       u2cWo: // global
           call _c2cWf(R1) args: 0, res: 0, upd: 0;
       c2cWg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.foldlElems'_info" {
     GHC.Arr.foldlElems'_info:
         const GHC.Arr.foldlElems'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c2cWf() //  [R1]
         { []
         }
     {offset
       c2cWf: // global
           R5 = P64[R1 + 23];
           R4 = I64[R1 + 31];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Arr.$wfoldlElems'_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cWf_info" {
     block_c2cWf_info:
         const _c2cWf;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.178247128 UTC

[section ""data" . GHC.Arr.$wfoldrElems'_closure" {
     GHC.Arr.$wfoldrElems'_closure:
         const GHC.Arr.$wfoldrElems'_info;
 },
 GHC.Arr.$wfoldrElems'_slow() //  [R1]
         { []
         }
     {offset
       c2cWA: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Arr.$wfoldrElems'_entry(R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2aTu_entry() //  [R1]
         { []
         }
     {offset
       c2cWU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2cWV; else goto c2cWW;
       c2cWV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2cWW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aTu_info" {
     sat_s2aTu_info:
         const sat_s2aTu_entry;
         const 4294967297;
         const 19;
 },
 GHC.Arr.$wfoldrElems'_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2cWX: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2cWY; else goto c2cWZ;
       c2cWY: // global
           R1 = GHC.Arr.$wfoldrElems'_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c2cWZ: // global
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R5;
           I64[Sp - 16] = R4 - 1;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           call _c2cWJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Arr.$wfoldrElems'_info" {
     GHC.Arr.$wfoldrElems'_info:
         const GHC.Arr.$wfoldrElems'_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 260;
         const GHC.Arr.$wfoldrElems'_slow;
 },
 _c2cWJ() //  []
         { []
         }
     {offset
       c2cWJ: // global
           _s2aTo::P64 = P64[Sp + 24];
           _s2aTp::I64 = I64[Sp + 16];
           if (_s2aTp::I64 != (-1)) goto c2cX3; else goto c2cX9;
       c2cX3: // global
           I64[Sp - 8] = block_c2cWO_info;
           R1 = _s2aTo::P64;
           I64[Sp + 24] = _s2aTp::I64;
           Sp = Sp - 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
       c2cX9: // global
           R1 = _s2aTo::P64;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2cWO() //  [R1]
         { []
         }
     {offset
       c2cWO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2cX6; else goto c2cX5;
       c2cX6: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2cX5: // global
           I64[Hp - 24] = sat_s2aTu_info;
           P64[Hp - 8] = P64[Sp + 16];
           I64[Hp] = I64[Sp + 32];
           I64[Sp] = block_c2cX1_info;
           R3 = R1;
           R2 = Hp - 24;
           R1 = P64[Sp + 8];
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cWO_info" {
     block_c2cWO_info:
         const _c2cWO;
         const 772;
         const 30;
 },
 _c2cX1() //  [R1]
         { []
         }
     {offset
       c2cX1: // global
           I64[Sp + 24] = I64[Sp + 32] - 1;
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _c2cWJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2cX1_info" {
     block_c2cX1_info:
         const _c2cX1;
         const 772;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.18966343 UTC

[section ""data" . GHC.Arr.foldrElems'_closure" {
     GHC.Arr.foldrElems'_closure:
         const GHC.Arr.foldrElems'_info;
 },
 GHC.Arr.foldrElems'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2cXQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2cXR; else goto c2cXS;
       c2cXR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.foldrElems'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2cXS: // global
           I64[Sp - 24] = block_c2cXN_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2cXW; else goto c2cXO;
       u2cXW: // global
           call _c2cXN(R1) args: 0, res: 0, upd: 0;
       c2cXO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.foldrElems'_info" {
     GHC.Arr.foldrElems'_info:
         const GHC.Arr.foldrElems'_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c2cXN() //  [R1]
         { []
         }
     {offset
       c2cXN: // global
           R5 = P64[R1 + 23];
           R4 = I64[R1 + 31];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Arr.$wfoldrElems'_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cXN_info" {
     block_c2cXN_info:
         const _c2cXN;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.197146852 UTC

[section ""data" . GHC.Arr.$wfoldlElems_closure" {
     GHC.Arr.$wfoldlElems_closure:
         const GHC.Arr.$wfoldlElems_info;
 },
 GHC.Arr.$wfoldlElems_slow() //  [R1]
         { []
         }
     {offset
       c2cY8: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Arr.$wfoldlElems_entry(R5,
                                           R4,
                                           R3,
                                           R2,
                                           R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2aTQ_entry() //  [R1]
         { []
         }
     {offset
       c2cYn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2cYo; else goto c2cYp;
       c2cYo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2cYp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aTQ_info" {
     sat_s2aTQ_info:
         const sat_s2aTQ_entry;
         const 4294967297;
         const 19;
 },
 sat_s2aTN_entry() //  [R1]
         { []
         }
     {offset
       c2cYw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2cYx; else goto c2cYy;
       c2cYx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2cYy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] - 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wgo_s2aTJ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aTN_info" {
     sat_s2aTN_info:
         const sat_s2aTN_entry;
         const 4294967297;
         const 19;
 },
 $wgo_s2aTJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c2cYC: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c2cYG; else goto c2cYF;
       c2cYG: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2cYF: // global
           if (R2 == (-1)) goto c2cYB; else goto c2cYA;
       c2cYB: // global
           _s2aTG::P64 = P64[R1 + 15];
           Hp = Hp - 64;
           R1 = _s2aTG::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c2cYA: // global
           _s2aTF::P64 = P64[R1 + 7];
           _s2aTI::P64 = P64[R1 + 23];
           I64[Hp - 56] = sat_s2aTQ_info;
           P64[Hp - 40] = _s2aTI::P64;
           I64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s2aTN_info;
           P64[Hp - 8] = R1;
           I64[Hp] = R2;
           R3 = Hp - 56;
           R2 = Hp - 24;
           R1 = _s2aTF::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s2aTJ_info" {
     $wgo_s2aTJ_info:
         const $wgo_s2aTJ_entry;
         const 3;
         const 8;
         const 4294967300;
 },
 GHC.Arr.$wfoldlElems_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2cYJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2cYN; else goto c2cYM;
       c2cYN: // global
           HpAlloc = 32;
           R1 = GHC.Arr.$wfoldlElems_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c2cYM: // global
           I64[Hp - 24] = $wgo_s2aTJ_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R5;
           R2 = R4 - 1;
           R1 = Hp - 23;
           call $wgo_s2aTJ_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$wfoldlElems_info" {
     GHC.Arr.$wfoldlElems_info:
         const GHC.Arr.$wfoldlElems_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 260;
         const GHC.Arr.$wfoldlElems_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.208470527 UTC

[section ""data" . GHC.Arr.foldlElems_closure" {
     GHC.Arr.foldlElems_closure:
         const GHC.Arr.foldlElems_info;
 },
 GHC.Arr.foldlElems_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2cZk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2cZl; else goto c2cZm;
       c2cZl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.foldlElems_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2cZm: // global
           I64[Sp - 24] = block_c2cZh_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2cZq; else goto c2cZi;
       u2cZq: // global
           call _c2cZh(R1) args: 0, res: 0, upd: 0;
       c2cZi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.foldlElems_info" {
     GHC.Arr.foldlElems_info:
         const GHC.Arr.foldlElems_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c2cZh() //  [R1]
         { []
         }
     {offset
       c2cZh: // global
           R5 = P64[R1 + 23];
           R4 = I64[R1 + 31];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Arr.$wfoldlElems_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2cZh_info" {
     block_c2cZh_info:
         const _c2cZh;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.215718793 UTC

[section ""data" . GHC.Arr.$wfoldrElems_closure" {
     GHC.Arr.$wfoldrElems_closure:
         const GHC.Arr.$wfoldrElems_info;
 },
 GHC.Arr.$wfoldrElems_slow() //  [R1]
         { []
         }
     {offset
       c2cZC: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Arr.$wfoldrElems_entry(R5,
                                           R4,
                                           R3,
                                           R2,
                                           R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2aUb_entry() //  [R1]
         { []
         }
     {offset
       c2cZU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2cZV; else goto c2cZW;
       c2cZV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2cZW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 24] + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call $wgo_s2aU4_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aUb_info" {
     sat_s2aUb_info:
         const sat_s2aUb_entry;
         const 4294967297;
         const 19;
 },
 sat_s2aU9_entry() //  [R1]
         { []
         }
     {offset
       c2d01: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2d02; else goto c2d03;
       c2d02: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2d03: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aU9_info" {
     sat_s2aU9_info:
         const sat_s2aU9_entry;
         const 4294967297;
         const 19;
 },
 $wgo_s2aU4_entry() //  [R1, R2]
         { []
         }
     {offset
       c2d07: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c2d0b; else goto c2d0a;
       c2d0b: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2d0a: // global
           if (R2 == I64[R1 + 31]) goto c2d06; else goto c2d05;
       c2d06: // global
           _s2aU1::P64 = P64[R1 + 15];
           Hp = Hp - 64;
           R1 = _s2aU1::P64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c2d05: // global
           _s2aU0::P64 = P64[R1 + 7];
           _s2aU3::P64 = P64[R1 + 23];
           I64[Hp - 56] = sat_s2aUb_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = R2;
           I64[Hp - 24] = sat_s2aU9_info;
           P64[Hp - 8] = _s2aU3::P64;
           I64[Hp] = R2;
           R3 = Hp - 56;
           R2 = Hp - 24;
           R1 = _s2aU0::P64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_s2aU4_info" {
     $wgo_s2aU4_info:
         const $wgo_s2aU4_entry;
         const 4294967299;
         const 8;
         const 4294967300;
 },
 GHC.Arr.$wfoldrElems_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2d0c: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2d0g; else goto c2d0f;
       c2d0g: // global
           HpAlloc = 40;
           R1 = GHC.Arr.$wfoldrElems_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c2d0f: // global
           I64[Hp - 32] = $wgo_s2aU4_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R5;
           I64[Hp] = R4;
           R2 = 0;
           R1 = Hp - 31;
           call $wgo_s2aU4_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$wfoldrElems_info" {
     GHC.Arr.$wfoldrElems_info:
         const GHC.Arr.$wfoldrElems_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 260;
         const GHC.Arr.$wfoldrElems_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.226170423 UTC

[section ""data" . GHC.Arr.foldrElems_closure" {
     GHC.Arr.foldrElems_closure:
         const GHC.Arr.foldrElems_info;
 },
 GHC.Arr.foldrElems_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2d0N: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2d0O; else goto c2d0P;
       c2d0O: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.foldrElems_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2d0P: // global
           I64[Sp - 24] = block_c2d0K_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2d0T; else goto c2d0L;
       u2d0T: // global
           call _c2d0K(R1) args: 0, res: 0, upd: 0;
       c2d0L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.foldrElems_info" {
     GHC.Arr.foldrElems_info:
         const GHC.Arr.foldrElems_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c2d0K() //  [R1]
         { []
         }
     {offset
       c2d0K: // global
           R5 = P64[R1 + 23];
           R4 = I64[R1 + 31];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Arr.$wfoldrElems_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2d0K_info" {
     block_c2d0K_info:
         const _c2d0K;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.234116512 UTC

[section ""data" . GHC.Arr.elems_closure" {
     GHC.Arr.elems_closure:
         const GHC.Arr.elems_info;
 },
 sat_s2aUz_entry() //  [R1]
         { []
         }
     {offset
       c2d1x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2d1y; else goto c2d1z;
       c2d1y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2d1z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2aUt::I64 = I64[R1 + 32];
           if (_s2aUt::I64 == I64[R1 + 24]) goto c2d1w; else goto c2d1v;
       c2d1w: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c2d1v: // global
           R2 = _s2aUt::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s2aUs_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aUz_info" {
     sat_s2aUz_info:
         const sat_s2aUz_entry;
         const 8589934593;
         const 15;
 },
 sat_s2aUw_entry() //  [R1]
         { []
         }
     {offset
       c2d1G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2d1H; else goto c2d1I;
       c2d1H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2d1I: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aUw_info" {
     sat_s2aUw_info:
         const sat_s2aUw_entry;
         const 4294967297;
         const 19;
 },
 go_s2aUs_entry() //  [R1, R2]
         { []
         }
     {offset
       c2d1K: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c2d1O; else goto c2d1N;
       c2d1O: // global
           HpAlloc = 96;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2d1N: // global
           _s2aUp::P64 = P64[R1 + 7];
           _s2aUq::I64 = I64[R1 + 15];
           I64[Hp - 88] = sat_s2aUz_info;
           P64[Hp - 72] = R1;
           I64[Hp - 64] = _s2aUq::I64;
           I64[Hp - 56] = R2;
           I64[Hp - 48] = sat_s2aUw_info;
           P64[Hp - 32] = _s2aUp::P64;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s2aUs_info" {
     go_s2aUs_info:
         const go_s2aUs_entry;
         const 4294967297;
         const 12;
         const 4294967300;
 },
 GHC.Arr.elems_entry() //  [R2]
         { []
         }
     {offset
       c2d1P: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2d1Q; else goto c2d1R;
       c2d1Q: // global
           R2 = R2;
           R1 = GHC.Arr.elems_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2d1R: // global
           I64[Sp - 8] = block_c2d18_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2d1Y; else goto c2d19;
       u2d1Y: // global
           call _c2d18(R1) args: 0, res: 0, upd: 0;
       c2d19: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.elems_info" {
     GHC.Arr.elems_info:
         const GHC.Arr.elems_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2d18() //  [R1]
         { []
         }
     {offset
       c2d18: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2d1U; else goto c2d1T;
       c2d1U: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2d1T: // global
           _s2aUq::I64 = I64[R1 + 31] - 1;
           if (%MO_S_Le_W64(0, _s2aUq::I64)) goto c2d1W; else goto c2d1X;
       c2d1W: // global
           _s2aUp::P64 = P64[R1 + 23];
           I64[Hp - 16] = go_s2aUs_info;
           P64[Hp - 8] = _s2aUp::P64;
           I64[Hp] = _s2aUq::I64;
           R2 = 0;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call go_s2aUs_entry(R2, R1) args: 8, res: 0, upd: 8;
       c2d1X: // global
           Hp = Hp - 24;
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2d18_info" {
     block_c2d18_info:
         const _c2d18;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.246433105 UTC

[section ""data" . GHC.Arr.unsafeAt_closure" {
     GHC.Arr.unsafeAt_closure:
         const GHC.Arr.unsafeAt_info;
 },
 GHC.Arr.unsafeAt_entry() //  [R2, R3]
         { []
         }
     {offset
       c2d2H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2d2L; else goto c2d2M;
       c2d2L: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.unsafeAt_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2d2M: // global
           I64[Sp - 16] = block_c2d2E_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2d2U; else goto c2d2F;
       u2d2U: // global
           call _c2d2E(R1) args: 0, res: 0, upd: 0;
       c2d2F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeAt_info" {
     GHC.Arr.unsafeAt_info:
         const GHC.Arr.unsafeAt_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2d2E() //  [R1]
         { []
         }
     {offset
       c2d2E: // global
           I64[Sp] = block_c2d2K_info;
           _s2aUG::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s2aUG::P64;
           if (R1 & 7 != 0) goto u2d2T; else goto c2d2O;
       u2d2T: // global
           call _c2d2K(R1) args: 0, res: 0, upd: 0;
       c2d2O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2d2E_info" {
     block_c2d2E_info:
         const _c2d2E;
         const 1;
         const 30;
 },
 _c2d2K() //  [R1]
         { []
         }
     {offset
       c2d2K: // global
           R1 = P64[P64[Sp + 8] + ((I64[R1 + 7] << 3) + 24)];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2d2K_info" {
     block_c2d2K_info:
         const _c2d2K;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.253586068 UTC

[section ""data" . GHC.Arr.lessSafeIndex_closure" {
     GHC.Arr.lessSafeIndex_closure:
         const GHC.Arr.lessSafeIndex_info;
 },
 GHC.Arr.lessSafeIndex_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2d3j: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2d3k; else goto c2d3l;
       c2d3k: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.lessSafeIndex_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2d3l: // global
           I64[Sp - 24] = block_c2d3g_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R5;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2d3p; else goto c2d3h;
       u2d3p: // global
           call _c2d3g(R1) args: 0, res: 0, upd: 0;
       c2d3h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.lessSafeIndex_info" {
     GHC.Arr.lessSafeIndex_info:
         const GHC.Arr.lessSafeIndex_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c2d3g() //  [R1]
         { []
         }
     {offset
       c2d3g: // global
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pp_info;
           P64[Sp + 8] = R1;
           call GHC.Arr.index_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2d3g_info" {
     block_c2d3g_info:
         const _c2d3g;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.258443196 UTC

[section ""cstring" . lvl8_r1Xvj_bytes" {
     lvl8_r1Xvj_bytes:
         I8[] [78,101,103,97,116,105,118,101,32,114,97,110,103,101,32,115,105,122,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.261022289 UTC

[section ""data" . GHC.Arr.negRange_closure" {
     GHC.Arr.negRange_closure:
         const GHC.Arr.negRange_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Arr.negRange_entry() //  [R1]
         { []
         }
     {offset
       c2d3K: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2d3L; else goto c2d3M;
       c2d3L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2d3M: // global
           (_c2d3F::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2d3F::I64 == 0) goto c2d3H; else goto c2d3G;
       c2d3H: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2d3G: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2d3F::I64;
           I64[Sp - 24] = block_c2d3I_info;
           R2 = lvl8_r1Xvj_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Arr.negRange_info" {
     GHC.Arr.negRange_info:
         const GHC.Arr.negRange_entry;
         const 0;
         const 4294967317;
         const S2bMd_srt+8;
 },
 _c2d3I() //  [R1]
         { []
         }
     {offset
       c2d3I: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2d3I_info" {
     block_c2d3I_info:
         const _c2d3I;
         const 0;
         const 4294967326;
         const S2bMd_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.268532791 UTC

[section ""data" . GHC.Arr.safeRangeSize_closure" {
     GHC.Arr.safeRangeSize_closure:
         const GHC.Arr.safeRangeSize_info;
         const 0;
 },
 GHC.Arr.safeRangeSize_entry() //  [R2, R3]
         { []
         }
     {offset
       c2d49: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2d4d; else goto c2d4e;
       c2d4d: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.safeRangeSize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2d4e: // global
           I64[Sp - 16] = block_c2d46_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2d4p; else goto c2d47;
       u2d4p: // global
           call _c2d46(R1) args: 0, res: 0, upd: 0;
       c2d47: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.safeRangeSize_info" {
     GHC.Arr.safeRangeSize_info:
         const GHC.Arr.safeRangeSize_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S2bMd_srt+80;
 },
 _c2d46() //  [R1]
         { []
         }
     {offset
       c2d46: // global
           _s2aUT::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2d4c_info;
           R2 = _s2aUT::P64;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2d46_info" {
     block_c2d46_info:
         const _c2d46;
         const 1;
         const 4294967326;
         const S2bMd_srt+88;
 },
 _c2d4c() //  [R1]
         { []
         }
     {offset
       c2d4c: // global
           if (%MO_S_Ge_W64(I64[R1 + 7], 0)) goto c2d4n; else goto c2d4o;
       c2d4n: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2d4o: // global
           R1 = GHC.Arr.negRange_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2d4c_info" {
     block_c2d4c_info:
         const _c2d4c;
         const 0;
         const 4294967326;
         const S2bMd_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.278458313 UTC

[section ""data" . $wnewSTArray_r1Xvk_closure" {
     $wnewSTArray_r1Xvk_closure:
         const $wnewSTArray_r1Xvk_info;
         const 0;
 },
 sat_s2aVf_entry() //  [R1]
         { []
         }
     {offset
       c2d55: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2d56; else goto c2d57;
       c2d56: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2d57: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c2d50_info;
           _s2aV3::P64 = P64[R1 + 24];
           _s2aVc::P64 = P64[R1 + 32];
           _s2aV8::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s2aV3::P64;
           I64[Sp - 32] = _s2aV8::I64;
           P64[Sp - 24] = _s2aVc::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aVf_info" {
     sat_s2aVf_info:
         const sat_s2aVf_entry;
         const 4294967299;
         const 15;
 },
 _c2d50() //  [R1]
         { []
         }
     {offset
       c2d50: // global
           I64[Sp] = block_c2d52_info;
           _s2aVd::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s2aVd::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c2d50_info" {
     block_c2d50_info:
         const _c2d50;
         const 131;
         const 30;
 },
 _c2d52() //  [R1]
         { []
         }
     {offset
       c2d52: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2d5b; else goto c2d5a;
       c2d5b: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2d5a: // global
           I64[Hp - 32] = GHC.Arr.STArray_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2d52_info" {
     block_c2d52_info:
         const _c2d52;
         const 131;
         const 30;
 },
 $wnewSTArray_r1Xvk_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2d5c: // global
           _s2aV4::P64 = R5;
           _s2aV3::P64 = R4;
           _s2aV2::P64 = R3;
           _s2aV1::P64 = R2;
           if ((Sp + -48) < SpLim) (likely: False) goto c2d5d; else goto c2d5e;
       c2d5e: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2d5g; else goto c2d5f;
       c2d5g: // global
           HpAlloc = 24;
           goto c2d5d;
       c2d5d: // global
           R5 = _s2aV4::P64;
           R4 = _s2aV3::P64;
           R3 = _s2aV2::P64;
           R2 = _s2aV1::P64;
           R1 = $wnewSTArray_r1Xvk_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2d5f: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2aV2::P64;
           P64[Hp] = _s2aV3::P64;
           I64[Sp - 32] = block_c2d4N_info;
           R2 = _s2aV1::P64;
           I64[Sp - 48] = stg_ap_p_info;
           P64[Sp - 40] = Hp - 15;
           P64[Sp - 24] = _s2aV2::P64;
           P64[Sp - 16] = _s2aV3::P64;
           P64[Sp - 8] = _s2aV4::P64;
           Sp = Sp - 48;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wnewSTArray_r1Xvk_info" {
     $wnewSTArray_r1Xvk_info:
         const $wnewSTArray_r1Xvk_entry;
         const 0;
         const 12884901902;
         const 21474836504;
         const S2bMd_srt+88;
 },
 _c2d4N() //  [R1]
         { []
         }
     {offset
       c2d4N: // global
           _s2aV8::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s2aV8::I64, 0)) goto c2d5j; else goto c2d5n;
       c2d5j: // global
           I64[Sp] = block_c2d4U_info;
           R2 = P64[Sp + 24];
           R1 = _s2aV8::I64;
           I64[Sp + 24] = _s2aV8::I64;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
       c2d5n: // global
           R1 = GHC.Arr.negRange_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2d4N_info" {
     block_c2d4N_info:
         const _c2d4N;
         const 3;
         const 4294967326;
         const S2bMd_srt+88;
 },
 _c2d4U() //  [R1]
         { []
         }
     {offset
       c2d4U: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c2d5m; else goto c2d5l;
       c2d5m: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2d5l: // global
           I64[Hp - 40] = sat_s2aVf_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 40;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2d4U_info" {
     block_c2d4U_info:
         const _c2d4U;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.291138159 UTC

[section ""data" . newSTArray1_r1Xvl_closure" {
     newSTArray1_r1Xvl_closure:
         const newSTArray1_r1Xvl_info;
         const 0;
 },
 newSTArray1_r1Xvl_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2d69: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2d6a; else goto c2d6b;
       c2d6a: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = newSTArray1_r1Xvl_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2d6b: // global
           I64[Sp - 24] = block_c2d66_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2d6f; else goto c2d67;
       u2d6f: // global
           call _c2d66(R1) args: 0, res: 0, upd: 0;
       c2d67: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . newSTArray1_r1Xvl_info" {
     newSTArray1_r1Xvl_info:
         const newSTArray1_r1Xvl_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S2bMd_srt+96;
 },
 _c2d66() //  [R1]
         { []
         }
     {offset
       c2d66: // global
           R5 = P64[Sp + 16];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call $wnewSTArray_r1Xvk_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2d66_info" {
     block_c2d66_info:
         const _c2d66;
         const 2;
         const 4294967326;
         const S2bMd_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.296817165 UTC

[section ""data" . GHC.Arr.newSTArray_closure" {
     GHC.Arr.newSTArray_closure:
         const GHC.Arr.newSTArray_info;
         const 0;
 },
 GHC.Arr.newSTArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2d6u: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call newSTArray1_r1Xvl_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.newSTArray_info" {
     GHC.Arr.newSTArray_info:
         const GHC.Arr.newSTArray_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S2bMd_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.308402326 UTC

[section ""data" . GHC.Arr.done_closure" {
     GHC.Arr.done_closure:
         const GHC.Arr.done_info;
 },
 sat_s2aVA_entry() //  [R1]
         { []
         }
     {offset
       c2d6T: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2d6U; else goto c2d6V;
       c2d6U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2d6V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c2d6O_info;
           _s2aVp::P64 = P64[R1 + 24];
           _s2aVx::P64 = P64[R1 + 32];
           _s2aVu::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s2aVp::P64;
           I64[Sp - 32] = _s2aVu::I64;
           P64[Sp - 24] = _s2aVx::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aVA_info" {
     sat_s2aVA_info:
         const sat_s2aVA_entry;
         const 4294967299;
         const 15;
 },
 _c2d6O() //  [R1]
         { []
         }
     {offset
       c2d6O: // global
           I64[Sp] = block_c2d6Q_info;
           _s2aVy::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s2aVy::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c2d6O_info" {
     block_c2d6O_info:
         const _c2d6O;
         const 131;
         const 30;
 },
 _c2d6Q() //  [R1]
         { []
         }
     {offset
       c2d6Q: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2d6Z; else goto c2d6Y;
       c2d6Z: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2d6Y: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2d6Q_info" {
     block_c2d6Q_info:
         const _c2d6Q;
         const 131;
         const 30;
 },
 GHC.Arr.done_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2d70: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2d71; else goto c2d72;
       c2d71: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.done_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2d72: // global
           I64[Sp - 32] = block_c2d6F_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2d76; else goto c2d6G;
       u2d76: // global
           call _c2d6F(R1) args: 0, res: 0, upd: 0;
       c2d6G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.done_info" {
     GHC.Arr.done_info:
         const GHC.Arr.done_entry;
         const 0;
         const 14;
         const 21474836504;
 },
 _c2d6F() //  [R1]
         { []
         }
     {offset
       c2d6F: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c2d75; else goto c2d74;
       c2d75: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2d74: // global
           _s2aVr::P64 = P64[Sp + 24];
           _s2aVu::I64 = I64[R1 + 7];
           I64[_s2aVr::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 40] = sat_s2aVA_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s2aVr::P64;
           I64[Hp] = _s2aVu::I64;
           R1 = Hp - 40;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2d6F_info" {
     block_c2d6F_info:
         const _c2d6F;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.325513685 UTC

[section ""data" . GHC.Arr.fill_closure" {
     GHC.Arr.fill_closure:
         const GHC.Arr.fill_info;
 },
 GHC.Arr.fill_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2d7L: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2d7P; else goto c2d7Q;
       c2d7P: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.fill_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2d7Q: // global
           I64[Sp - 24] = block_c2d7I_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2d7Y; else goto c2d7J;
       u2d7Y: // global
           call _c2d7I(R1) args: 0, res: 0, upd: 0;
       c2d7J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.fill_info" {
     GHC.Arr.fill_info:
         const GHC.Arr.fill_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c2d7I() //  [R1]
         { []
         }
     {offset
       c2d7I: // global
           I64[Sp - 8] = block_c2d7O_info;
           _s2aVH::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aVH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2d7X; else goto c2d7S;
       u2d7X: // global
           call _c2d7O(R1) args: 0, res: 0, upd: 0;
       c2d7S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2d7I_info" {
     block_c2d7I_info:
         const _c2d7I;
         const 2;
         const 30;
 },
 _c2d7O() //  [R1]
         { []
         }
     {offset
       c2d7O: // global
           _s2aVB::P64 = P64[Sp + 16];
           _s2aVD::P64 = P64[Sp + 24];
           _s2aVH::P64 = P64[Sp + 8];
           _s2aVJ::I64 = I64[R1 + 7];
           call MO_WriteBarrier();
           P64[(_s2aVB::P64 + 24) + (_s2aVJ::I64 << 3)] = _s2aVH::P64;
           I64[_s2aVB::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2aVB::P64 + 24) + ((I64[_s2aVB::P64 + 8] << 3) + (_s2aVJ::I64 >> 7))] = 1 :: W8;
           R1 = _s2aVD::P64;
           Sp = Sp + 32;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2d7O_info" {
     block_c2d7O_info:
         const _c2d7O;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.333354478 UTC

[section ""cstring" . lvl9_r1Xvm_bytes" {
     lvl9_r1Xvm_bytes:
         I8[] [40,65,114,114,97,121,46,33,41,58,32,117,110,100,101,102,105,110,101,100,32,97,114,114,97,121,32,101,108,101,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.335915665 UTC

[section ""data" . GHC.Arr.arrEleBottom_closure" {
     GHC.Arr.arrEleBottom_closure:
         const GHC.Arr.arrEleBottom_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Arr.arrEleBottom_entry() //  [R1]
         { []
         }
     {offset
       c2d8s: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2d8t; else goto c2d8u;
       c2d8t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2d8u: // global
           (_c2d8n::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2d8n::I64 == 0) goto c2d8p; else goto c2d8o;
       c2d8p: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2d8o: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2d8n::I64;
           I64[Sp - 24] = block_c2d8q_info;
           R2 = lvl9_r1Xvm_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Arr.arrEleBottom_info" {
     GHC.Arr.arrEleBottom_info:
         const GHC.Arr.arrEleBottom_entry;
         const 0;
         const 4294967317;
         const S2bMd_srt+8;
 },
 _c2d8q() //  [R1]
         { []
         }
     {offset
       c2d8q: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2d8q_info" {
     block_c2d8q_info:
         const _c2d8q;
         const 0;
         const 4294967326;
         const S2bMd_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.343187466 UTC

[section ""data" . GHC.Arr.freezeSTArray1_closure" {
     GHC.Arr.freezeSTArray1_closure:
         const GHC.Arr.freezeSTArray1_info;
         const 0;
 },
 GHC.Arr.freezeSTArray1_entry() //  [R2]
         { []
         }
     {offset
       c2d8R: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2d8S; else goto c2d8T;
       c2d8S: // global
           R2 = R2;
           R1 = GHC.Arr.freezeSTArray1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2d8T: // global
           I64[Sp - 8] = block_c2d8O_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2d9n; else goto c2d8P;
       u2d9n: // global
           call _c2d8O(R1) args: 0, res: 0, upd: 0;
       c2d8P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.freezeSTArray1_info" {
     GHC.Arr.freezeSTArray1_info:
         const GHC.Arr.freezeSTArray1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const S2bMd_srt+112;
 },
 _c2d8O() //  [R1]
         { []
         }
     {offset
       c2d8O: // global
           I64[Sp - 32] = block_c2d8W_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           _s2aVP::P64 = P64[R1 + 7];
           _s2aVQ::P64 = P64[R1 + 15];
           _s2aVS::P64 = P64[R1 + 23];
           _s2aVR::I64 = I64[R1 + 31];
           R1 = _s2aVR::I64;
           P64[Sp - 24] = _s2aVQ::P64;
           I64[Sp - 16] = _s2aVR::I64;
           P64[Sp - 8] = _s2aVS::P64;
           P64[Sp] = _s2aVP::P64;
           Sp = Sp - 32;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2d8O_info" {
     block_c2d8O_info:
         const _c2d8O;
         const 0;
         const 4294967326;
         const S2bMd_srt+112;
 },
 _c2d8W() //  [R1]
         { []
         }
     {offset
       c2d8W: // global
           _s2aVR::I64 = I64[Sp + 16];
           _s2aVS::P64 = P64[Sp + 24];
           _s2aVV::P64 = R1;
           _s2aW3::I64 = 0;
           goto c2d9c;
       c2d9c: // global
           if (_s2aW3::I64 == _s2aVR::I64) goto u2d9m; else goto c2d9i;
       u2d9m: // global
           P64[Sp + 24] = _s2aVV::P64;
           call _c2d93() args: 0, res: 0, upd: 0;
       c2d9i: // global
           _s2aW8::P64 = P64[(_s2aVS::P64 + 24) + (_s2aW3::I64 << 3)];
           call MO_WriteBarrier();
           P64[(_s2aVV::P64 + 24) + (_s2aW3::I64 << 3)] = _s2aW8::P64;
           I64[_s2aVV::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2aVV::P64 + 24) + ((I64[_s2aVV::P64 + 8] << 3) + (_s2aW3::I64 >> 7))] = 1 :: W8;
           _s2aW3::I64 = _s2aW3::I64 + 1;
           goto c2d9c;
     }
 },
 section ""relreadonly" . block_c2d8W_info" {
     block_c2d8W_info:
         const _c2d8W;
         const 132;
         const 30;
 },
 _c2d93() //  []
         { []
         }
     {offset
       c2d93: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2d98; else goto c2d97;
       c2d98: // global
           HpAlloc = 40;
           I64[Sp] = block_c2d93_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2d97: // global
           _s2aVV::P64 = P64[Sp + 24];
           I64[_s2aVV::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s2aVV::P64;
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2d93_info" {
     block_c2d93_info:
         const _c2d93;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.352221045 UTC

[section ""data" . GHC.Arr.freezeSTArray_closure" {
     GHC.Arr.freezeSTArray_closure:
         const GHC.Arr.freezeSTArray_info;
         const 0;
 },
 GHC.Arr.freezeSTArray_entry() //  [R2]
         { []
         }
     {offset
       c2d9W: // global
           R2 = R2;
           call GHC.Arr.freezeSTArray1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.freezeSTArray_info" {
     GHC.Arr.freezeSTArray_info:
         const GHC.Arr.freezeSTArray_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S2bMd_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.35736991 UTC

[section ""data" . GHC.Arr.thawSTArray1_closure" {
     GHC.Arr.thawSTArray1_closure:
         const GHC.Arr.thawSTArray1_info;
         const 0;
 },
 GHC.Arr.thawSTArray1_entry() //  [R2]
         { []
         }
     {offset
       c2daa: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2dab; else goto c2dac;
       c2dab: // global
           R2 = R2;
           R1 = GHC.Arr.thawSTArray1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2dac: // global
           I64[Sp - 8] = block_c2da7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2daG; else goto c2da8;
       u2daG: // global
           call _c2da7(R1) args: 0, res: 0, upd: 0;
       c2da8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.thawSTArray1_info" {
     GHC.Arr.thawSTArray1_info:
         const GHC.Arr.thawSTArray1_entry;
         const 0;
         const 21474836494;
         const 8589934597;
         const S2bMd_srt+112;
 },
 _c2da7() //  [R1]
         { []
         }
     {offset
       c2da7: // global
           I64[Sp - 32] = block_c2daf_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           _s2aWe::P64 = P64[R1 + 7];
           _s2aWf::P64 = P64[R1 + 15];
           _s2aWh::P64 = P64[R1 + 23];
           _s2aWg::I64 = I64[R1 + 31];
           R1 = _s2aWg::I64;
           P64[Sp - 24] = _s2aWf::P64;
           I64[Sp - 16] = _s2aWg::I64;
           P64[Sp - 8] = _s2aWh::P64;
           P64[Sp] = _s2aWe::P64;
           Sp = Sp - 32;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2da7_info" {
     block_c2da7_info:
         const _c2da7;
         const 0;
         const 4294967326;
         const S2bMd_srt+112;
 },
 _c2daf() //  [R1]
         { []
         }
     {offset
       c2daf: // global
           _s2aWg::I64 = I64[Sp + 16];
           _s2aWh::P64 = P64[Sp + 24];
           _s2aWk::P64 = R1;
           _s2aWp::I64 = 0;
           goto c2dav;
       c2dav: // global
           if (_s2aWp::I64 == _s2aWg::I64) goto u2daF; else goto c2daB;
       u2daF: // global
           P64[Sp + 24] = _s2aWk::P64;
           call _c2dam() args: 0, res: 0, upd: 0;
       c2daB: // global
           _s2aWt::P64 = P64[(_s2aWh::P64 + 24) + (_s2aWp::I64 << 3)];
           call MO_WriteBarrier();
           P64[(_s2aWk::P64 + 24) + (_s2aWp::I64 << 3)] = _s2aWt::P64;
           I64[_s2aWk::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2aWk::P64 + 24) + ((I64[_s2aWk::P64 + 8] << 3) + (_s2aWp::I64 >> 7))] = 1 :: W8;
           _s2aWp::I64 = _s2aWp::I64 + 1;
           goto c2dav;
     }
 },
 section ""relreadonly" . block_c2daf_info" {
     block_c2daf_info:
         const _c2daf;
         const 132;
         const 30;
 },
 _c2dam() //  []
         { []
         }
     {offset
       c2dam: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2dar; else goto c2daq;
       c2dar: // global
           HpAlloc = 40;
           I64[Sp] = block_c2dam_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2daq: // global
           I64[Hp - 32] = GHC.Arr.STArray_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dam_info" {
     block_c2dam_info:
         const _c2dam;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.367100424 UTC

[section ""data" . GHC.Arr.thawSTArray_closure" {
     GHC.Arr.thawSTArray_closure:
         const GHC.Arr.thawSTArray_info;
         const 0;
 },
 GHC.Arr.thawSTArray_entry() //  [R2]
         { []
         }
     {offset
       c2dbf: // global
           R2 = R2;
           call GHC.Arr.thawSTArray1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.thawSTArray_info" {
     GHC.Arr.thawSTArray_info:
         const GHC.Arr.thawSTArray_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const S2bMd_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.373462876 UTC

[section ""data" . GHC.Arr.unsafeReplace_closure" {
     GHC.Arr.unsafeReplace_closure:
         const GHC.Arr.unsafeReplace_info;
         const 0;
 },
 GHC.Arr.unsafeReplace_entry() //  [R2, R3]
         { []
         }
     {offset
       c2dbw: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2dbx; else goto c2dby;
       c2dbx: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.unsafeReplace_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dby: // global
           I64[Sp - 16] = block_c2dbq_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2dcF; else goto c2dbr;
       u2dcF: // global
           call _c2dbq(R1) args: 0, res: 0, upd: 0;
       c2dbr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeReplace_info" {
     GHC.Arr.unsafeReplace_info:
         const GHC.Arr.unsafeReplace_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S2bMd_srt+112;
 },
 _c2dbq() //  [R1]
         { []
         }
     {offset
       c2dbq: // global
           I64[Sp - 32] = block_c2dbB_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           _s2aWz::P64 = P64[R1 + 7];
           _s2aWA::P64 = P64[R1 + 15];
           _s2aWC::P64 = P64[R1 + 23];
           _s2aWB::I64 = I64[R1 + 31];
           R1 = _s2aWB::I64;
           P64[Sp - 24] = _s2aWA::P64;
           I64[Sp - 16] = _s2aWB::I64;
           P64[Sp - 8] = _s2aWC::P64;
           P64[Sp] = _s2aWz::P64;
           Sp = Sp - 32;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dbq_info" {
     block_c2dbq_info:
         const _c2dbq;
         const 1;
         const 4294967326;
         const S2bMd_srt+112;
 },
 _c2dbB() //  [R1]
         { []
         }
     {offset
       c2dbB: // global
           _s2aWx::P64 = P64[Sp + 40];
           _s2aWB::I64 = I64[Sp + 16];
           _s2aWC::P64 = P64[Sp + 24];
           _s2aWF::P64 = R1;
           _s2aX1::I64 = 0;
           goto c2dcq;
       c2dcq: // global
           if (_s2aX1::I64 == _s2aWB::I64) goto c2dcx; else goto c2dcw;
       c2dcx: // global
           P64[Sp + 24] = _s2aWx::P64;
           P64[Sp + 40] = _s2aWF::P64;
           Sp = Sp + 8;
           call _c2dbW() args: 0, res: 0, upd: 0;
       c2dcw: // global
           _s2aX5::P64 = P64[(_s2aWC::P64 + 24) + (_s2aX1::I64 << 3)];
           call MO_WriteBarrier();
           P64[(_s2aWF::P64 + 24) + (_s2aX1::I64 << 3)] = _s2aX5::P64;
           I64[_s2aWF::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2aWF::P64 + 24) + ((I64[_s2aWF::P64 + 8] << 3) + (_s2aX1::I64 >> 7))] = 1 :: W8;
           _s2aX1::I64 = _s2aX1::I64 + 1;
           goto c2dcq;
     }
 },
 section ""relreadonly" . block_c2dbB_info" {
     block_c2dbB_info:
         const _c2dbB;
         const 133;
         const 30;
 },
 _c2dbW() //  []
         { []
         }
     {offset
       c2dbW: // global
           I64[Sp - 8] = block_c2dbY_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dcH; else goto c2dc0;
       u2dcH: // global
           call _c2dbY(R1) args: 0, res: 0, upd: 0;
       c2dc0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2dbY() //  [R1]
         { []
         }
     {offset
       c2dbY: // global
           if (R1 & 7 == 1) goto u2dcI; else goto c2dcg;
       u2dcI: // global
           call _c2dbO() args: 0, res: 0, upd: 0;
       c2dcg: // global
           I64[Sp] = block_c2dc9_info;
           _s2aWT::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _s2aWT::P64;
           if (R1 & 7 != 0) goto u2dcJ; else goto c2dca;
       u2dcJ: // global
           call _c2dc9(R1) args: 0, res: 0, upd: 0;
       c2dca: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dbY_info" {
     block_c2dbY_info:
         const _c2dbY;
         const 389;
         const 30;
 },
 _c2dbO() //  []
         { []
         }
     {offset
       c2dbO: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2dbS; else goto c2dbR;
       c2dbS: // global
           HpAlloc = 40;
           I64[Sp] = block_c2dbO_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2dbR: // global
           _s2aWF::P64 = P64[Sp + 40];
           I64[_s2aWF::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s2aWF::P64;
           I64[Hp] = I64[Sp + 16];
           R1 = (Hp + -31) & (-8);
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dbO_info" {
     block_c2dbO_info:
         const _c2dbO;
         const 389;
         const 30;
 },
 _c2dc9() //  [R1]
         { []
         }
     {offset
       c2dc9: // global
           I64[Sp - 8] = block_c2dce_info;
           _s2aWW::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aWW::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dcK; else goto c2dci;
       u2dcK: // global
           call _c2dce(R1) args: 0, res: 0, upd: 0;
       c2dci: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dc9_info" {
     block_c2dc9_info:
         const _c2dc9;
         const 133;
         const 30;
 },
 _c2dce() //  [R1]
         { []
         }
     {offset
       c2dce: // global
           _s2aWF::P64 = P64[Sp + 48];
           _s2aWT::P64 = P64[Sp + 32];
           _s2aWW::P64 = P64[Sp + 8];
           _s2aWY::I64 = I64[R1 + 7];
           call MO_WriteBarrier();
           P64[(_s2aWF::P64 + 24) + (_s2aWY::I64 << 3)] = _s2aWW::P64;
           I64[_s2aWF::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2aWF::P64 + 24) + ((I64[_s2aWF::P64 + 8] << 3) + (_s2aWY::I64 >> 7))] = 1 :: W8;
           P64[Sp + 32] = _s2aWT::P64;
           Sp = Sp + 16;
           call _c2dbW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2dce_info" {
     block_c2dce_info:
         const _c2dce;
         const 262;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.39286415 UTC

[section ""data" . GHC.Arr.unsafeAccum_closure" {
     GHC.Arr.unsafeAccum_closure:
         const GHC.Arr.unsafeAccum_info;
         const 0;
 },
 GHC.Arr.unsafeAccum_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2ddO: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2ddP; else goto c2ddQ;
       c2ddP: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.unsafeAccum_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2ddQ: // global
           I64[Sp - 24] = block_c2ddI_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2df0; else goto c2ddJ;
       u2df0: // global
           call _c2ddI(R1) args: 0, res: 0, upd: 0;
       c2ddJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeAccum_info" {
     GHC.Arr.unsafeAccum_info:
         const GHC.Arr.unsafeAccum_entry;
         const 0;
         const 73014444046;
         const 12884901911;
         const S2bMd_srt+112;
 },
 _c2ddI() //  [R1]
         { []
         }
     {offset
       c2ddI: // global
           I64[Sp - 32] = block_c2ddT_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           _s2aXf::P64 = P64[R1 + 7];
           _s2aXg::P64 = P64[R1 + 15];
           _s2aXi::P64 = P64[R1 + 23];
           _s2aXh::I64 = I64[R1 + 31];
           R1 = _s2aXh::I64;
           P64[Sp - 24] = _s2aXg::P64;
           I64[Sp - 16] = _s2aXh::I64;
           P64[Sp - 8] = _s2aXi::P64;
           P64[Sp] = _s2aXf::P64;
           Sp = Sp - 32;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ddI_info" {
     block_c2ddI_info:
         const _c2ddI;
         const 2;
         const 4294967326;
         const S2bMd_srt+112;
 },
 _c2ddT() //  [R1]
         { []
         }
     {offset
       c2ddT: // global
           _s2aXd::P64 = P64[Sp + 48];
           _s2aXh::I64 = I64[Sp + 16];
           _s2aXi::P64 = P64[Sp + 24];
           _s2aXl::P64 = R1;
           _s2aXL::I64 = 0;
           goto c2deL;
       c2deL: // global
           if (_s2aXL::I64 == _s2aXh::I64) goto c2deS; else goto c2deR;
       c2deS: // global
           P64[Sp + 24] = _s2aXd::P64;
           P64[Sp + 48] = _s2aXl::P64;
           Sp = Sp + 8;
           call _c2dee() args: 0, res: 0, upd: 0;
       c2deR: // global
           _s2aXP::P64 = P64[(_s2aXi::P64 + 24) + (_s2aXL::I64 << 3)];
           call MO_WriteBarrier();
           P64[(_s2aXl::P64 + 24) + (_s2aXL::I64 << 3)] = _s2aXP::P64;
           I64[_s2aXl::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2aXl::P64 + 24) + ((I64[_s2aXl::P64 + 8] << 3) + (_s2aXL::I64 >> 7))] = 1 :: W8;
           _s2aXL::I64 = _s2aXL::I64 + 1;
           goto c2deL;
     }
 },
 section ""relreadonly" . block_c2ddT_info" {
     block_c2ddT_info:
         const _c2ddT;
         const 134;
         const 30;
 },
 _c2dee() //  []
         { []
         }
     {offset
       c2dee: // global
           I64[Sp - 8] = block_c2deg_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2df2; else goto c2dei;
       u2df2: // global
           call _c2deg(R1) args: 0, res: 0, upd: 0;
       c2dei: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2deg() //  [R1]
         { []
         }
     {offset
       c2deg: // global
           if (R1 & 7 == 1) goto u2df3; else goto c2dey;
       u2df3: // global
           call _c2de6() args: 0, res: 0, upd: 0;
       c2dey: // global
           I64[Sp] = block_c2der_info;
           _s2aXz::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _s2aXz::P64;
           if (R1 & 7 != 0) goto u2df4; else goto c2des;
       u2df4: // global
           call _c2der(R1) args: 0, res: 0, upd: 0;
       c2des: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2deg_info" {
     block_c2deg_info:
         const _c2deg;
         const 390;
         const 30;
 },
 _c2de6() //  []
         { []
         }
     {offset
       c2de6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2dea; else goto c2de9;
       c2dea: // global
           HpAlloc = 40;
           I64[Sp] = block_c2de6_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2de9: // global
           _s2aXl::P64 = P64[Sp + 48];
           I64[_s2aXl::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s2aXl::P64;
           I64[Hp] = I64[Sp + 16];
           R1 = (Hp + -31) & (-8);
           Sp = Sp + 56;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2de6_info" {
     block_c2de6_info:
         const _c2de6;
         const 1414;
         const 30;
 },
 _c2der() //  [R1]
         { []
         }
     {offset
       c2der: // global
           I64[Sp - 8] = block_c2dew_info;
           _s2aXC::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aXC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2df5; else goto c2deA;
       u2df5: // global
           call _c2dew(R1) args: 0, res: 0, upd: 0;
       c2deA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2der_info" {
     block_c2der_info:
         const _c2der;
         const 134;
         const 30;
 },
 _c2dew() //  [R1]
         { []
         }
     {offset
       c2dew: // global
           _s2aXE::I64 = I64[R1 + 7];
           _s2aXH::P64 = P64[P64[Sp + 56] + ((_s2aXE::I64 << 3) + 24)];
           I64[Sp] = block_c2deE_info;
           R3 = P64[Sp + 8];
           R2 = _s2aXH::P64;
           R1 = P64[Sp + 48];
           I64[Sp + 8] = _s2aXE::I64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dew_info" {
     block_c2dew_info:
         const _c2dew;
         const 263;
         const 30;
 },
 _c2deE() //  [R1]
         { []
         }
     {offset
       c2deE: // global
           _s2aXl::P64 = P64[Sp + 56];
           _s2aXz::P64 = P64[Sp + 32];
           _s2aXE::I64 = I64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s2aXl::P64 + 24) + (_s2aXE::I64 << 3)] = R1;
           I64[_s2aXl::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2aXl::P64 + 24) + ((I64[_s2aXl::P64 + 8] << 3) + (_s2aXE::I64 >> 7))] = 1 :: W8;
           P64[Sp + 32] = _s2aXz::P64;
           Sp = Sp + 16;
           call _c2dee() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2deE_info" {
     block_c2deE_info:
         const _c2deE;
         const 327;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.4137003 UTC

[section ""data" . GHC.Arr.unsafeArray'_closure" {
     GHC.Arr.unsafeArray'_closure:
         const GHC.Arr.unsafeArray'_info;
         const 0;
 },
 sat_s2aYd_entry() //  [R1]
         { []
         }
     {offset
       c2dgy: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2dgz; else goto c2dgA;
       c2dgz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2dgA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c2dgt_info;
           _s2aY0::P64 = P64[R1 + 24];
           _s2aYa::P64 = P64[R1 + 32];
           _s2aY2::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s2aY0::P64;
           I64[Sp - 32] = _s2aY2::I64;
           P64[Sp - 24] = _s2aYa::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aYd_info" {
     sat_s2aYd_info:
         const sat_s2aYd_entry;
         const 4294967299;
         const 15;
 },
 _c2dgt() //  [R1]
         { []
         }
     {offset
       c2dgt: // global
           I64[Sp] = block_c2dgv_info;
           _s2aYb::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s2aYb::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c2dgt_info" {
     block_c2dgt_info:
         const _c2dgt;
         const 131;
         const 30;
 },
 _c2dgv() //  [R1]
         { []
         }
     {offset
       c2dgv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2dgE; else goto c2dgD;
       c2dgE: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2dgD: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2dgv_info" {
     block_c2dgv_info:
         const _c2dgv;
         const 131;
         const 30;
 },
 GHC.Arr.unsafeArray'_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2dgF: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2dgG; else goto c2dgH;
       c2dgG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.unsafeArray'_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dgH: // global
           I64[Sp - 24] = block_c2dg8_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2dhr; else goto c2dg9;
       u2dhr: // global
           call _c2dg8(R1) args: 0, res: 0, upd: 0;
       c2dg9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeArray'_info" {
     GHC.Arr.unsafeArray'_info:
         const GHC.Arr.unsafeArray'_entry;
         const 0;
         const 141733920782;
         const 12884901911;
         const S2bMd_srt+112;
 },
 _c2dg8() //  [R1]
         { []
         }
     {offset
       c2dg8: // global
           I64[Sp - 8] = block_c2dgd_info;
           _s2aXZ::P64 = P64[R1 + 7];
           _s2aY0::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s2aY0::P64;
           P64[Sp + 8] = _s2aXZ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dhp; else goto c2dge;
       u2dhp: // global
           call _c2dgd(R1) args: 0, res: 0, upd: 0;
       c2dge: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dg8_info" {
     block_c2dg8_info:
         const _c2dg8;
         const 2;
         const 4294967326;
         const S2bMd_srt+112;
 },
 _c2dgd() //  [R1]
         { []
         }
     {offset
       c2dgd: // global
           I64[Sp - 8] = block_c2dgi_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           _s2aY2::I64 = I64[R1 + 7];
           R1 = _s2aY2::I64;
           I64[Sp] = _s2aY2::I64;
           Sp = Sp - 8;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dgd_info" {
     block_c2dgd_info:
         const _c2dgd;
         const 3;
         const 4294967326;
         const S2bMd_srt+112;
 },
 _c2dgi() //  [R1]
         { []
         }
     {offset
       c2dgi: // global
           P64[Sp] = P64[Sp + 32];
           P64[Sp + 32] = R1;
           call _c2dgR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2dgi_info" {
     block_c2dgi_info:
         const _c2dgi;
         const 68;
         const 30;
 },
 _c2dgR() //  []
         { []
         }
     {offset
       c2dgR: // global
           _s2aYf::P64 = P64[Sp];
           I64[Sp] = block_c2dgT_info;
           R1 = _s2aYf::P64;
           if (R1 & 7 != 0) goto u2dhs; else goto c2dgV;
       u2dhs: // global
           call _c2dgT(R1) args: 0, res: 0, upd: 0;
       c2dgV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2dgT() //  [R1]
         { []
         }
     {offset
       c2dgT: // global
           if (R1 & 7 == 1) goto u2dht; else goto c2dhb;
       u2dht: // global
           call _c2dgn() args: 0, res: 0, upd: 0;
       c2dhb: // global
           I64[Sp - 8] = block_c2dh4_info;
           _s2aYj::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s2aYj::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dhu; else goto c2dh5;
       u2dhu: // global
           call _c2dh4(R1) args: 0, res: 0, upd: 0;
       c2dh5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dgT_info" {
     block_c2dgT_info:
         const _c2dgT;
         const 68;
         const 30;
 },
 _c2dgn() //  []
         { []
         }
     {offset
       c2dgn: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c2dgN; else goto c2dgM;
       c2dgN: // global
           HpAlloc = 48;
           I64[Sp] = block_c2dgn_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2dgM: // global
           _s2aY5::P64 = P64[Sp + 32];
           I64[_s2aY5::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 40] = sat_s2aYd_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s2aY5::P64;
           I64[Hp] = I64[Sp + 8];
           R1 = (Hp + -40) & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dgn_info" {
     block_c2dgn_info:
         const _c2dgn;
         const 68;
         const 30;
 },
 _c2dh4() //  [R1]
         { []
         }
     {offset
       c2dh4: // global
           I64[Sp - 8] = block_c2dh9_info;
           _s2aYm::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aYm::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dhv; else goto c2dhd;
       u2dhv: // global
           call _c2dh9(R1) args: 0, res: 0, upd: 0;
       c2dhd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dh4_info" {
     block_c2dh4_info:
         const _c2dh4;
         const 133;
         const 30;
 },
 _c2dh9() //  [R1]
         { []
         }
     {offset
       c2dh9: // global
           _s2aY5::P64 = P64[Sp + 48];
           _s2aYj::P64 = P64[Sp + 16];
           _s2aYm::P64 = P64[Sp + 8];
           _s2aYo::I64 = I64[R1 + 7];
           call MO_WriteBarrier();
           P64[(_s2aY5::P64 + 24) + (_s2aYo::I64 << 3)] = _s2aYm::P64;
           I64[_s2aY5::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2aY5::P64 + 24) + ((I64[_s2aY5::P64 + 8] << 3) + (_s2aYo::I64 >> 7))] = 1 :: W8;
           P64[Sp + 16] = _s2aYj::P64;
           Sp = Sp + 16;
           call _c2dgR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2dh9_info" {
     block_c2dh9_info:
         const _c2dh9;
         const 262;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.438656105 UTC

[section ""data" . GHC.Arr.unsafeArray_closure" {
     GHC.Arr.unsafeArray_closure:
         const GHC.Arr.unsafeArray_info;
         const 0;
 },
 sat_s2aYL_entry() //  [R1]
         { []
         }
     {offset
       c2djb: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2djc; else goto c2djd;
       c2djc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2djd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c2dj6_info;
           _s2aYy::P64 = P64[R1 + 24];
           _s2aYI::P64 = P64[R1 + 32];
           _s2aYA::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s2aYy::P64;
           I64[Sp - 32] = _s2aYA::I64;
           P64[Sp - 24] = _s2aYI::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aYL_info" {
     sat_s2aYL_info:
         const sat_s2aYL_entry;
         const 4294967299;
         const 15;
 },
 _c2dj6() //  [R1]
         { []
         }
     {offset
       c2dj6: // global
           I64[Sp] = block_c2dj8_info;
           _s2aYJ::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s2aYJ::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c2dj6_info" {
     block_c2dj6_info:
         const _c2dj6;
         const 131;
         const 30;
 },
 _c2dj8() //  [R1]
         { []
         }
     {offset
       c2dj8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2djh; else goto c2djg;
       c2djh: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2djg: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2dj8_info" {
     block_c2dj8_info:
         const _c2dj8;
         const 131;
         const 30;
 },
 GHC.Arr.unsafeArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2dji: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2djj; else goto c2djk;
       c2djj: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.unsafeArray_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2djk: // global
           I64[Sp - 24] = block_c2diM_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2dk3; else goto c2diN;
       u2dk3: // global
           call _c2diM(R1) args: 0, res: 0, upd: 0;
       c2diN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.unsafeArray_info" {
     GHC.Arr.unsafeArray_info:
         const GHC.Arr.unsafeArray_entry;
         const 0;
         const 279172874254;
         const 12884901911;
         const S2bMd_srt+112;
 },
 _c2diM() //  [R1]
         { []
         }
     {offset
       c2diM: // global
           I64[Sp - 8] = block_c2diR_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = R1;
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 24;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2diM_info" {
     block_c2diM_info:
         const _c2diM;
         const 2;
         const 4294967326;
         const S2bMd_srt+112;
 },
 _c2diR() //  [R1]
         { []
         }
     {offset
       c2diR: // global
           I64[Sp - 8] = block_c2diV_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           _s2aYA::I64 = I64[R1 + 7];
           R1 = _s2aYA::I64;
           I64[Sp] = _s2aYA::I64;
           Sp = Sp - 8;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2diR_info" {
     block_c2diR_info:
         const _c2diR;
         const 3;
         const 4294967326;
         const S2bMd_srt+112;
 },
 _c2diV() //  [R1]
         { []
         }
     {offset
       c2diV: // global
           P64[Sp] = P64[Sp + 32];
           P64[Sp + 32] = R1;
           call _c2dju() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2diV_info" {
     block_c2diV_info:
         const _c2diV;
         const 68;
         const 30;
 },
 _c2dju() //  []
         { []
         }
     {offset
       c2dju: // global
           _s2aYN::P64 = P64[Sp];
           I64[Sp] = block_c2djw_info;
           R1 = _s2aYN::P64;
           if (R1 & 7 != 0) goto u2dk4; else goto c2djy;
       u2dk4: // global
           call _c2djw(R1) args: 0, res: 0, upd: 0;
       c2djy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2djw() //  [R1]
         { []
         }
     {offset
       c2djw: // global
           if (R1 & 7 == 1) goto u2dk5; else goto c2djO;
       u2dk5: // global
           call _c2dj0() args: 0, res: 0, upd: 0;
       c2djO: // global
           I64[Sp - 8] = block_c2djH_info;
           _s2aYR::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s2aYR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dk6; else goto c2djI;
       u2dk6: // global
           call _c2djH(R1) args: 0, res: 0, upd: 0;
       c2djI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2djw_info" {
     block_c2djw_info:
         const _c2djw;
         const 68;
         const 30;
 },
 _c2dj0() //  []
         { []
         }
     {offset
       c2dj0: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c2djq; else goto c2djp;
       c2djq: // global
           HpAlloc = 48;
           I64[Sp] = block_c2dj0_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2djp: // global
           _s2aYD::P64 = P64[Sp + 32];
           I64[_s2aYD::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 40] = sat_s2aYL_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s2aYD::P64;
           I64[Hp] = I64[Sp + 8];
           R1 = (Hp + -40) & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dj0_info" {
     block_c2dj0_info:
         const _c2dj0;
         const 68;
         const 30;
 },
 _c2djH() //  [R1]
         { []
         }
     {offset
       c2djH: // global
           I64[Sp - 8] = block_c2djM_info;
           _s2aYU::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2aYU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dk7; else goto c2djQ;
       u2dk7: // global
           call _c2djM(R1) args: 0, res: 0, upd: 0;
       c2djQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2djH_info" {
     block_c2djH_info:
         const _c2djH;
         const 133;
         const 30;
 },
 _c2djM() //  [R1]
         { []
         }
     {offset
       c2djM: // global
           _s2aYD::P64 = P64[Sp + 48];
           _s2aYR::P64 = P64[Sp + 16];
           _s2aYU::P64 = P64[Sp + 8];
           _s2aYW::I64 = I64[R1 + 7];
           call MO_WriteBarrier();
           P64[(_s2aYD::P64 + 24) + (_s2aYW::I64 << 3)] = _s2aYU::P64;
           I64[_s2aYD::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2aYD::P64 + 24) + ((I64[_s2aYD::P64 + 8] << 3) + (_s2aYW::I64 >> 7))] = 1 :: W8;
           P64[Sp + 16] = _s2aYR::P64;
           Sp = Sp + 16;
           call _c2dju() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2djM_info" {
     block_c2djM_info:
         const _c2djM;
         const 262;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.465546558 UTC

[section ""data" . GHC.Arr.listArray_closure" {
     GHC.Arr.listArray_closure:
         const GHC.Arr.listArray_info;
         const 0;
 },
 sat_s2aZl_entry() //  [R1]
         { []
         }
     {offset
       c2dlU: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2dlV; else goto c2dlW;
       c2dlV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2dlW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c2dlP_info;
           _s2aZ6::P64 = P64[R1 + 24];
           _s2aZi::P64 = P64[R1 + 32];
           _s2aZd::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s2aZ6::P64;
           I64[Sp - 32] = _s2aZd::I64;
           P64[Sp - 24] = _s2aZi::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aZl_info" {
     sat_s2aZl_info:
         const sat_s2aZl_entry;
         const 4294967299;
         const 15;
 },
 _c2dlP() //  [R1]
         { []
         }
     {offset
       c2dlP: // global
           I64[Sp] = block_c2dlR_info;
           _s2aZj::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s2aZj::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c2dlP_info" {
     block_c2dlP_info:
         const _c2dlP;
         const 131;
         const 30;
 },
 _c2dlR() //  [R1]
         { []
         }
     {offset
       c2dlR: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2dm0; else goto c2dlZ;
       c2dm0: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2dlZ: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2dlR_info" {
     block_c2dlR_info:
         const _c2dlR;
         const 131;
         const 30;
 },
 sat_s2aZC_entry() //  [R1]
         { []
         }
     {offset
       c2dmb: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2dmc; else goto c2dmd;
       c2dmc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2dmd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c2dm6_info;
           _s2aZ6::P64 = P64[R1 + 24];
           _s2aZz::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _s2aZ6::P64;
           P64[Sp - 24] = _s2aZz::P64;
           Sp = Sp - 40;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2aZC_info" {
     sat_s2aZC_info:
         const sat_s2aZC_entry;
         const 3;
         const 15;
 },
 _c2dm6() //  [R1]
         { []
         }
     {offset
       c2dm6: // global
           I64[Sp] = block_c2dm8_info;
           _s2aZA::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s2aZA::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c2dm6_info" {
     block_c2dm6_info:
         const _c2dm6;
         const 2;
         const 30;
 },
 _c2dm8() //  [R1]
         { []
         }
     {offset
       c2dm8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2dmh; else goto c2dmg;
       c2dmh: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2dmg: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 16];
           I64[Hp] = 0;
           R1 = Hp - 31;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2dm8_info" {
     block_c2dm8_info:
         const _c2dm8;
         const 2;
         const 30;
 },
 GHC.Arr.listArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2dmi: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2dmj; else goto c2dmk;
       c2dmj: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.listArray_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dmk: // global
           I64[Sp - 24] = block_c2dlq_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2dnk; else goto c2dlr;
       u2dnk: // global
           call _c2dlq(R1) args: 0, res: 0, upd: 0;
       c2dlr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.listArray_info" {
     GHC.Arr.listArray_info:
         const GHC.Arr.listArray_entry;
         const 0;
         const 4436701216782;
         const 12884901911;
         const S2bMd_srt+88;
 },
 _c2dlq() //  [R1]
         { []
         }
     {offset
       c2dlq: // global
           I64[Sp - 8] = block_c2dlv_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = R1;
           P64[Sp] = P64[R1 + 15];
           P64[Sp + 8] = P64[R1 + 7];
           Sp = Sp - 24;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dlq_info" {
     block_c2dlq_info:
         const _c2dlq;
         const 2;
         const 38654705694;
         const S2bMd_srt+88;
 },
 _c2dlv() //  [R1]
         { []
         }
     {offset
       c2dlv: // global
           _s2aZ8::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s2aZ8::I64, 0)) goto c2dmo; else goto c2dn0;
       c2dmo: // global
           I64[Sp - 8] = block_c2dlC_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           R1 = _s2aZ8::I64;
           I64[Sp] = _s2aZ8::I64;
           Sp = Sp - 8;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
       c2dn0: // global
           I64[Sp + 24] = block_c2dmZ_info;
           R1 = GHC.Arr.negRange_closure;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u2dng; else goto c2dn1;
       u2dng: // global
           call _c2dmZ(R1) args: 0, res: 0, upd: 0;
       c2dn1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dlv_info" {
     block_c2dlv_info:
         const _c2dlv;
         const 3;
         const 38654705694;
         const S2bMd_srt+88;
 },
 _c2dlC() //  [R1]
         { []
         }
     {offset
       c2dlC: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2dmr; else goto c2dmq;
       c2dmr: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2dmq: // global
           _s2aZd::I64 = I64[Sp + 8];
           if (_s2aZd::I64 == 0) goto c2dmX; else goto c2dmW;
       c2dmX: // global
           I64[R1] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = sat_s2aZC_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = R1;
           P64[Sp + 32] = Hp - 32;
           Sp = Sp + 32;
           call _c2dmn() args: 0, res: 0, upd: 0;
       c2dmW: // global
           Hp = Hp - 40;
           I64[Sp - 8] = 0;
           P64[Sp] = P64[Sp + 32];
           I64[Sp + 8] = _s2aZd::I64;
           P64[Sp + 32] = R1;
           Sp = Sp - 8;
           call _c2dmx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2dlC_info" {
     block_c2dlC_info:
         const _c2dlC;
         const 68;
         const 30;
 },
 _c2dmx() //  []
         { []
         }
     {offset
       c2dmx: // global
           I64[Sp - 8] = block_c2dmA_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dnl; else goto c2dmC;
       u2dnl: // global
           call _c2dmA(R1) args: 0, res: 0, upd: 0;
       c2dmC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2dmA() //  [R1]
         { []
         }
     {offset
       c2dmA: // global
           if (R1 & 7 == 1) goto u2dna; else goto c2dmU;
       u2dna: // global
           Sp = Sp + 16;
           goto u2dnn;
       c2dmU: // global
           _s2aZc::P64 = P64[Sp + 48];
           _s2aZd::I64 = I64[Sp + 24];
           _s2aZo::I64 = I64[Sp + 8];
           _s2aZr::P64 = P64[R1 + 6];
           _s2aZs::P64 = P64[R1 + 14];
           call MO_WriteBarrier();
           P64[(_s2aZc::P64 + 24) + (_s2aZo::I64 << 3)] = _s2aZr::P64;
           I64[_s2aZc::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2aZc::P64 + 24) + ((I64[_s2aZc::P64 + 8] << 3) + (_s2aZo::I64 >> 7))] = 1 :: W8;
           if (_s2aZo::I64 == (_s2aZd::I64 + -1)) goto u2dnb; else goto c2dmS;
       u2dnb: // global
           Sp = Sp + 16;
           goto u2dnn;
       u2dnn: // global
           call _c2dlJ() args: 0, res: 0, upd: 0;
       c2dmS: // global
           P64[Sp + 16] = _s2aZs::P64;
           I64[Sp + 8] = _s2aZo::I64 + 1;
           Sp = Sp + 8;
           call _c2dmx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2dmA_info" {
     block_c2dmA_info:
         const _c2dmA;
         const 454;
         const 30;
 },
 _c2dlJ() //  []
         { []
         }
     {offset
       c2dlJ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c2dmu; else goto c2dmt;
       c2dmu: // global
           HpAlloc = 48;
           I64[Sp] = block_c2dlJ_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2dmt: // global
           _s2aZc::P64 = P64[Sp + 32];
           I64[_s2aZc::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 40] = sat_s2aZl_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s2aZc::P64;
           I64[Hp] = I64[Sp + 8];
           P64[Sp + 32] = Hp - 40;
           Sp = Sp + 32;
           call _c2dmn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2dlJ_info" {
     block_c2dlJ_info:
         const _c2dlJ;
         const 68;
         const 30;
 },
 _c2dmZ() //  [R1]
         { []
         }
     {offset
       c2dmZ: // global
           P64[Sp] = R1;
           call _c2dmn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2dmZ_info" {
     block_c2dmZ_info:
         const _c2dmZ;
         const 0;
         const 30;
 },
 _c2dmn() //  []
         { []
         }
     {offset
       c2dmn: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.494760312 UTC

[section ""data" . GHC.Arr.amap_closure" {
     GHC.Arr.amap_closure:
         const GHC.Arr.amap_info;
         const 0;
 },
 sat_s2b03_entry() //  [R1]
         { []
         }
     {offset
       c2dps: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2dpt; else goto c2dpu;
       c2dpt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2dpu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = P64[P64[R1 + 16] + ((I64[R1 + 24] << 3) + 24)];
           Sp = Sp - 16;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2b03_info" {
     sat_s2b03_info:
         const sat_s2b03_entry;
         const 4294967297;
         const 19;
 },
 sat_s2b04_entry() //  [R1]
         { []
         }
     {offset
       c2dpv: // global
           _s2b04::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2dpw; else goto c2dpx;
       c2dpx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2dpz; else goto c2dpy;
       c2dpz: // global
           HpAlloc = 32;
           goto c2dpw;
       c2dpw: // global
           R1 = _s2b04::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2dpy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2b04::P64;
           _s2aZH::P64 = P64[_s2b04::P64 + 16];
           _s2aZN::P64 = P64[_s2b04::P64 + 24];
           _s2aZY::I64 = I64[_s2b04::P64 + 32];
           I64[Hp - 24] = sat_s2b03_info;
           P64[Hp - 8] = _s2aZN::P64;
           I64[Hp] = _s2aZY::I64;
           R2 = Hp - 24;
           R1 = _s2aZH::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2b04_info" {
     sat_s2b04_info:
         const sat_s2b04_entry;
         const 4294967298;
         const 15;
 },
 GHC.Arr.amap_entry() //  [R2, R3]
         { []
         }
     {offset
       c2dpA: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2dpB; else goto c2dpC;
       c2dpB: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.amap_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dpC: // global
           I64[Sp - 16] = block_c2dp3_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2dq4; else goto c2dp4;
       u2dq4: // global
           call _c2dp3(R1) args: 0, res: 0, upd: 0;
       c2dp4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.amap_info" {
     GHC.Arr.amap_info:
         const GHC.Arr.amap_entry;
         const 0;
         const 1103806595086;
         const 8589934607;
         const S2bMd_srt+112;
 },
 _c2dp3() //  [R1]
         { []
         }
     {offset
       c2dp3: // global
           I64[Sp - 32] = block_c2dp8_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           _s2aZK::P64 = P64[R1 + 7];
           _s2aZL::P64 = P64[R1 + 15];
           _s2aZN::P64 = P64[R1 + 23];
           _s2aZM::I64 = I64[R1 + 31];
           R1 = _s2aZM::I64;
           P64[Sp - 24] = _s2aZL::P64;
           I64[Sp - 16] = _s2aZM::I64;
           P64[Sp - 8] = _s2aZN::P64;
           P64[Sp] = _s2aZK::P64;
           Sp = Sp - 32;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dp3_info" {
     block_c2dp3_info:
         const _c2dp3;
         const 1;
         const 4294967326;
         const S2bMd_srt+112;
 },
 _c2dp8() //  [R1]
         { []
         }
     {offset
       c2dp8: // global
           I64[Sp - 8] = 0;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call _c2dpf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2dp8_info" {
     block_c2dp8_info:
         const _c2dp8;
         const 133;
         const 30;
 },
 _c2dpf() //  []
         { []
         }
     {offset
       c2dpf: // global
           Hp = Hp + 40;
           _s2aZY::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2dpN; else goto c2dpM;
       c2dpN: // global
           HpAlloc = 40;
           I64[Sp] = block_c2dpe_info;
           R1 = _s2aZY::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2dpM: // global
           if (_s2aZY::I64 == I64[Sp + 24]) goto c2dpQ; else goto c2dpP;
       c2dpQ: // global
           Hp = Hp - 40;
           call _c2dpG() args: 0, res: 0, upd: 0;
       c2dpP: // global
           I64[Hp - 32] = sat_s2b04_info;
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 32];
           I64[Hp] = _s2aZY::I64;
           _s2aZQ::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s2aZQ::P64 + 24) + (_s2aZY::I64 << 3)] = Hp - 32;
           I64[_s2aZQ::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2aZQ::P64 + 24) + ((I64[_s2aZQ::P64 + 8] << 3) + (_s2aZY::I64 >> 7))] = 1 :: W8;
           I64[Sp] = _s2aZY::I64 + 1;
           call _c2dpf() args: 0, res: 0, upd: 0;
     }
 },
 _c2dpe() //  [R1]
         { []
         }
     {offset
       c2dpe: // global
           I64[Sp] = R1;
           call _c2dpf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2dpe_info" {
     block_c2dpe_info:
         const _c2dpe;
         const 262;
         const 30;
 },
 _c2dpG() //  []
         { []
         }
     {offset
       c2dpG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2dpK; else goto c2dpJ;
       c2dpK: // global
           HpAlloc = 40;
           I64[Sp] = block_c2dpG_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2dpJ: // global
           _s2aZQ::P64 = P64[Sp + 8];
           I64[_s2aZQ::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s2aZQ::P64;
           I64[Hp] = I64[Sp + 24];
           R1 = (Hp + -31) & (-8);
           Sp = Sp + 56;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dpG_info" {
     block_c2dpG_info:
         const _c2dpG;
         const 2822;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.511580143 UTC

[section ""data" . GHC.Arr.$fFunctorArray_$c<$_closure" {
     GHC.Arr.$fFunctorArray_$c<$_closure:
         const GHC.Arr.$fFunctorArray_$c<$_info;
         const 0;
 },
 GHC.Arr.$fFunctorArray_$c<$_entry() //  [R2, R3]
         { []
         }
     {offset
       c2dr4: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2dr5; else goto c2dr6;
       c2dr5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fFunctorArray_$c<$_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dr6: // global
           I64[Sp - 16] = block_c2dr1_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2drE; else goto c2dr2;
       u2drE: // global
           call _c2dr1(R1) args: 0, res: 0, upd: 0;
       c2dr2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fFunctorArray_$c<$_info" {
     GHC.Arr.$fFunctorArray_$c<$_info:
         const GHC.Arr.$fFunctorArray_$c<$_entry;
         const 0;
         const 2203318222862;
         const 8589934607;
         const S2bMd_srt+112;
 },
 _c2dr1() //  [R1]
         { []
         }
     {offset
       c2dr1: // global
           I64[Sp - 24] = block_c2dr9_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           _s2b0d::P64 = P64[R1 + 7];
           _s2b0e::P64 = P64[R1 + 15];
           _s2b0f::I64 = I64[R1 + 31];
           R1 = _s2b0f::I64;
           P64[Sp - 16] = _s2b0e::P64;
           I64[Sp - 8] = _s2b0f::I64;
           P64[Sp] = _s2b0d::P64;
           Sp = Sp - 24;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dr1_info" {
     block_c2dr1_info:
         const _c2dr1;
         const 1;
         const 4294967326;
         const S2bMd_srt+112;
 },
 _c2dr9() //  [R1]
         { []
         }
     {offset
       c2dr9: // global
           _s2b0a::P64 = P64[Sp + 32];
           _s2b0f::I64 = I64[Sp + 16];
           _s2b0j::P64 = R1;
           _s2b0r::I64 = 0;
           goto c2dro;
       c2dro: // global
           if (_s2b0r::I64 == _s2b0f::I64) goto u2drD; else goto c2dru;
       u2drD: // global
           P64[Sp + 32] = _s2b0j::P64;
           call _c2drg() args: 0, res: 0, upd: 0;
       c2dru: // global
           call MO_WriteBarrier();
           P64[(_s2b0j::P64 + 24) + (_s2b0r::I64 << 3)] = _s2b0a::P64;
           I64[_s2b0j::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2b0j::P64 + 24) + ((I64[_s2b0j::P64 + 8] << 3) + (_s2b0r::I64 >> 7))] = 1 :: W8;
           _s2b0r::I64 = _s2b0r::I64 + 1;
           goto c2dro;
     }
 },
 section ""relreadonly" . block_c2dr9_info" {
     block_c2dr9_info:
         const _c2dr9;
         const 132;
         const 30;
 },
 _c2drg() //  []
         { []
         }
     {offset
       c2drg: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2drk; else goto c2drj;
       c2drk: // global
           HpAlloc = 40;
           I64[Sp] = block_c2drg_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2drj: // global
           _s2b0j::P64 = P64[Sp + 32];
           I64[_s2b0j::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s2b0j::P64;
           I64[Hp] = I64[Sp + 16];
           R1 = (Hp + -31) & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2drg_info" {
     block_c2drg_info:
         const _c2drg;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.520309768 UTC

[section ""data" . GHC.Arr.$fFunctorArray_closure" {
     GHC.Arr.$fFunctorArray_closure:
         const GHC.Base.C:Functor_con_info;
         const GHC.Arr.amap_closure+2;
         const GHC.Arr.$fFunctorArray_$c<$_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.52367598 UTC

[section ""data" . GHC.Arr.$fIxWord_$cunsafeRangeSize_closure" {
     GHC.Arr.$fIxWord_$cunsafeRangeSize_closure:
         const GHC.Arr.$fIxWord_$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIxWord_$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c2dsi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2dsF; else goto c2dsG;
       c2dsF: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxWord_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2dsG: // global
           I64[Sp - 8] = block_c2dsf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dsN; else goto c2dsg;
       u2dsN: // global
           call _c2dsf(R1) args: 0, res: 0, upd: 0;
       c2dsg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxWord_$cunsafeRangeSize_info" {
     GHC.Arr.$fIxWord_$cunsafeRangeSize_info:
         const GHC.Arr.$fIxWord_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2dsf() //  [R1]
         { []
         }
     {offset
       c2dsf: // global
           I64[Sp - 8] = block_c2dsl_info;
           _s2b0B::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s2b0B::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dsM; else goto c2dsm;
       u2dsM: // global
           call _c2dsl(R1) args: 0, res: 0, upd: 0;
       c2dsm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dsf_info" {
     block_c2dsf_info:
         const _c2dsf;
         const 0;
         const 30;
 },
 _c2dsl() //  [R1]
         { []
         }
     {offset
       c2dsl: // global
           I64[Sp] = block_c2dsq_info;
           _s2b0E::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2b0E::I64;
           if (R1 & 7 != 0) goto u2dsO; else goto c2dsr;
       u2dsO: // global
           call _c2dsq(R1) args: 0, res: 0, upd: 0;
       c2dsr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dsl_info" {
     block_c2dsl_info:
         const _c2dsl;
         const 1;
         const 30;
 },
 _c2dsq() //  [R1]
         { []
         }
     {offset
       c2dsq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2dsL; else goto c2dsK;
       c2dsL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2dsK: // global
           _s2b0J::I64 = I64[Sp + 8] - I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2b0J::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dsq_info" {
     block_c2dsq_info:
         const _c2dsq;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.534106607 UTC

[section ""data" . GHC.Arr.$fIxWord_$crangeSize_closure" {
     GHC.Arr.$fIxWord_$crangeSize_closure:
         const GHC.Arr.$fIxWord_$crangeSize_info;
 },
 GHC.Arr.$fIxWord_$crangeSize_entry() //  [R2]
         { []
         }
     {offset
       c2dtl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2dtu; else goto c2dtv;
       c2dtu: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxWord_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2dtv: // global
           I64[Sp - 8] = block_c2dti_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dtX; else goto c2dtj;
       u2dtX: // global
           call _c2dti(R1) args: 0, res: 0, upd: 0;
       c2dtj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxWord_$crangeSize_info" {
     GHC.Arr.$fIxWord_$crangeSize_info:
         const GHC.Arr.$fIxWord_$crangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2dti() //  [R1]
         { []
         }
     {offset
       c2dti: // global
           I64[Sp - 8] = block_c2dto_info;
           _s2b0N::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2b0N::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dtW; else goto c2dtp;
       u2dtW: // global
           call _c2dto(R1) args: 0, res: 0, upd: 0;
       c2dtp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dti_info" {
     block_c2dti_info:
         const _c2dti;
         const 0;
         const 30;
 },
 _c2dto() //  [R1]
         { []
         }
     {offset
       c2dto: // global
           I64[Sp] = block_c2dtt_info;
           _s2b0P::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2b0P::I64;
           if (R1 & 7 != 0) goto u2dtY; else goto c2dty;
       u2dtY: // global
           call _c2dtt(R1) args: 0, res: 0, upd: 0;
       c2dty: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dto_info" {
     block_c2dto_info:
         const _c2dto;
         const 1;
         const 30;
 },
 _c2dtt() //  [R1]
         { []
         }
     {offset
       c2dtt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2dtE; else goto c2dtD;
       c2dtE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2dtD: // global
           _s2b0P::I64 = I64[Sp + 8];
           _s2b0R::I64 = I64[R1 + 7];
           if (_s2b0P::I64 > _s2b0R::I64) goto c2dtI; else goto c2dtV;
       c2dtI: // global
           Hp = Hp - 16;
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2dtV: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2b0R::I64 - _s2b0P::I64 + 1;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dtt_info" {
     block_c2dtt_info:
         const _c2dtt;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.542537974 UTC

[section ""cstring" . lvl10_r1Xvn_bytes" {
     lvl10_r1Xvn_bytes:
         I8[] [69,114,114,111,114,32,105,110,32,97,114,114,97,121,32,105,110,100,101,120]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.545052832 UTC

[section ""data" . GHC.Arr.hopelessIndexError_closure" {
     GHC.Arr.hopelessIndexError_closure:
         const GHC.Arr.hopelessIndexError_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Arr.hopelessIndexError_entry() //  [R1]
         { []
         }
     {offset
       c2duy: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2duz; else goto c2duA;
       c2duz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2duA: // global
           (_c2dut::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2dut::I64 == 0) goto c2duv; else goto c2duu;
       c2duv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2duu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2dut::I64;
           I64[Sp - 24] = block_c2duw_info;
           R2 = lvl10_r1Xvn_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Arr.hopelessIndexError_info" {
     GHC.Arr.hopelessIndexError_info:
         const GHC.Arr.hopelessIndexError_entry;
         const 0;
         const 4294967317;
         const S2bMd_srt+8;
 },
 _c2duw() //  [R1]
         { []
         }
     {offset
       c2duw: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2duw_info" {
     block_c2duw_info:
         const _c2duw;
         const 0;
         const 4294967326;
         const S2bMd_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.551200696 UTC

[section ""data" . GHC.Arr.$dmindex_closure" {
     GHC.Arr.$dmindex_closure:
         const GHC.Arr.$dmindex_info;
         const 0;
 },
 GHC.Arr.$dmindex_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2dv0: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2dv1; else goto c2dv2;
       c2dv1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$dmindex_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dv2: // global
           I64[Sp - 32] = block_c2duU_info;
           _s2b0X::P64 = R2;
           R2 = R2;
           I64[Sp - 56] = stg_ap_pp_info;
           P64[Sp - 48] = R3;
           P64[Sp - 40] = R4;
           P64[Sp - 24] = _s2b0X::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 56;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$dmindex_info" {
     GHC.Arr.$dmindex_info:
         const GHC.Arr.$dmindex_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S2bMd_srt+192;
 },
 _c2duU() //  [R1]
         { []
         }
     {offset
       c2duU: // global
           if (R1 & 7 == 1) goto c2duX; else goto c2duY;
       c2duX: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2duY: // global
           R2 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_pp_info;
           Sp = Sp + 8;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2duU_info" {
     block_c2duU_info:
         const _c2duU;
         const 3;
         const 4294967326;
         const S2bMd_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.559599834 UTC

[section ""data" . GHC.Arr.$fIxWord_$cindex_closure" {
     GHC.Arr.$fIxWord_$cindex_closure:
         const GHC.Arr.$fIxWord_$cindex_info;
         const 0;
 },
 GHC.Arr.$fIxWord_$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2dvu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2dvD; else goto c2dvE;
       c2dvD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxWord_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dvE: // global
           I64[Sp - 16] = block_c2dvr_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2dwg; else goto c2dvs;
       u2dwg: // global
           call _c2dvr(R1) args: 0, res: 0, upd: 0;
       c2dvs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxWord_$cindex_info" {
     GHC.Arr.$fIxWord_$cindex_info:
         const GHC.Arr.$fIxWord_$cindex_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S2bMd_srt+192;
 },
 _c2dvr() //  [R1]
         { []
         }
     {offset
       c2dvr: // global
           I64[Sp - 8] = block_c2dvx_info;
           _s2b15::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2b15::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dwf; else goto c2dvy;
       u2dwf: // global
           call _c2dvx(R1) args: 0, res: 0, upd: 0;
       c2dvy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dvr_info" {
     block_c2dvr_info:
         const _c2dvr;
         const 1;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dvx() //  [R1]
         { []
         }
     {offset
       c2dvx: // global
           I64[Sp] = block_c2dvC_info;
           _s2b17::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2b17::I64;
           if (R1 & 7 != 0) goto u2dwh; else goto c2dvH;
       u2dwh: // global
           call _c2dvC(R1) args: 0, res: 0, upd: 0;
       c2dvH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dvx_info" {
     block_c2dvx_info:
         const _c2dvx;
         const 2;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dvC() //  [R1]
         { []
         }
     {offset
       c2dvC: // global
           _s2b19::I64 = I64[R1 + 7];
           if (I64[Sp + 16] > _s2b19::I64) goto c2dvP; else goto c2dvT;
       c2dvP: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2dvT: // global
           I64[Sp] = block_c2dvS_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2b19::I64;
           if (R1 & 7 != 0) goto u2dwi; else goto c2dvU;
       u2dwi: // global
           call _c2dvS(R1) args: 0, res: 0, upd: 0;
       c2dvU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dvC_info" {
     block_c2dvC_info:
         const _c2dvC;
         const 130;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dvS() //  [R1]
         { []
         }
     {offset
       c2dvS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2dw0; else goto c2dvZ;
       c2dw0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2dvZ: // global
           _s2b19::I64 = I64[Sp + 8];
           if (_s2b19::I64 > I64[R1 + 7]) goto c2dw4; else goto c2dwe;
       c2dw4: // global
           Hp = Hp - 16;
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2dwe: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2b19::I64 - I64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dvS_info" {
     block_c2dvS_info:
         const _c2dvS;
         const 194;
         const 4294967326;
         const S2bMd_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.574311052 UTC

[section ""data" . GHC.Arr.$fIx(,)_$s$cindex_closure" {
     GHC.Arr.$fIx(,)_$s$cindex_closure:
         const GHC.Arr.$fIx(,)_$s$cindex_info;
         const 0;
 },
 GHC.Arr.$fIx(,)_$s$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2dwV: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2dxo; else goto c2dxp;
       c2dxo: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$s$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dxp: // global
           I64[Sp - 16] = block_c2dwS_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2dyH; else goto c2dwT;
       u2dyH: // global
           call _c2dwS(R1) args: 0, res: 0, upd: 0;
       c2dwT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$s$cindex_info" {
     GHC.Arr.$fIx(,)_$s$cindex_info:
         const GHC.Arr.$fIx(,)_$s$cindex_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S2bMd_srt+192;
 },
 _c2dwS() //  [R1]
         { []
         }
     {offset
       c2dwS: // global
           I64[Sp - 8] = block_c2dwY_info;
           _s2b1k::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2b1k::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dyG; else goto c2dwZ;
       u2dyG: // global
           call _c2dwY(R1) args: 0, res: 0, upd: 0;
       c2dwZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dwS_info" {
     block_c2dwS_info:
         const _c2dwS;
         const 1;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dwY() //  [R1]
         { []
         }
     {offset
       c2dwY: // global
           I64[Sp - 8] = block_c2dx3_info;
           _s2b1m::P64 = P64[R1 + 7];
           _s2b1n::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s2b1n::P64;
           P64[Sp + 8] = _s2b1m::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dyI; else goto c2dx4;
       u2dyI: // global
           call _c2dx3(R1) args: 0, res: 0, upd: 0;
       c2dx4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dwY_info" {
     block_c2dwY_info:
         const _c2dwY;
         const 2;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dx3() //  [R1]
         { []
         }
     {offset
       c2dx3: // global
           I64[Sp - 8] = block_c2dx8_info;
           _s2b1p::P64 = P64[R1 + 7];
           _s2b1q::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _s2b1q::P64;
           P64[Sp + 24] = _s2b1p::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dyJ; else goto c2dx9;
       u2dyJ: // global
           call _c2dx8(R1) args: 0, res: 0, upd: 0;
       c2dx9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dx3_info" {
     block_c2dx3_info:
         const _c2dx3;
         const 3;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dx8() //  [R1]
         { []
         }
     {offset
       c2dx8: // global
           I64[Sp - 8] = block_c2dxd_info;
           _s2b1s::P64 = P64[R1 + 7];
           _s2b1t::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _s2b1t::P64;
           P64[Sp + 24] = _s2b1s::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dyK; else goto c2dxe;
       u2dyK: // global
           call _c2dxd(R1) args: 0, res: 0, upd: 0;
       c2dxe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dx8_info" {
     block_c2dx8_info:
         const _c2dx8;
         const 4;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dxd() //  [R1]
         { []
         }
     {offset
       c2dxd: // global
           I64[Sp] = block_c2dxi_info;
           _s2b1v::I64 = I64[R1 + 7];
           R1 = P64[Sp + 40];
           I64[Sp + 40] = _s2b1v::I64;
           if (R1 & 7 != 0) goto u2dyL; else goto c2dxj;
       u2dyL: // global
           call _c2dxi(R1) args: 0, res: 0, upd: 0;
       c2dxj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dxd_info" {
     block_c2dxd_info:
         const _c2dxd;
         const 5;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dxi() //  [R1]
         { []
         }
     {offset
       c2dxi: // global
           I64[Sp] = block_c2dxn_info;
           _s2b1x::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s2b1x::I64;
           if (R1 & 7 != 0) goto u2dyM; else goto c2dxw;
       u2dyM: // global
           call _c2dxn(R1) args: 0, res: 0, upd: 0;
       c2dxw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dxi_info" {
     block_c2dxi_info:
         const _c2dxi;
         const 1029;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dxn() //  [R1]
         { []
         }
     {offset
       c2dxn: // global
           _s2b1z::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(I64[Sp + 40],
                            _s2b1z::I64)) goto c2dxK; else goto c2dyF;
       c2dyF: // global
           if (%MO_S_Gt_W64(_s2b1z::I64,
                            I64[Sp + 32])) goto c2dxK; else goto c2dxY;
       c2dxK: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2dxY: // global
           I64[Sp] = block_c2dxN_info;
           R1 = P64[Sp + 24];
           I64[Sp + 32] = _s2b1z::I64;
           if (R1 & 7 != 0) goto u2dyN; else goto c2dxO;
       u2dyN: // global
           call _c2dxN(R1) args: 0, res: 0, upd: 0;
       c2dxO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dxn_info" {
     block_c2dxn_info:
         const _c2dxn;
         const 1541;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dxN() //  [R1]
         { []
         }
     {offset
       c2dxN: // global
           I64[Sp] = block_c2dxS_info;
           _s2b1D::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 24] = _s2b1D::I64;
           if (R1 & 7 != 0) goto u2dyO; else goto c2dxT;
       u2dyO: // global
           call _c2dxS(R1) args: 0, res: 0, upd: 0;
       c2dxT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dxN_info" {
     block_c2dxN_info:
         const _c2dxN;
         const 1797;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dxS() //  [R1]
         { []
         }
     {offset
       c2dxS: // global
           _s2b1t::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2dxX_info;
           _s2b1F::I64 = I64[R1 + 7];
           R1 = _s2b1t::P64;
           I64[Sp + 16] = _s2b1F::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2dyP; else goto c2dy1;
       u2dyP: // global
           call _c2dxX(R1) args: 0, res: 0, upd: 0;
       c2dy1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dxS_info" {
     block_c2dxS_info:
         const _c2dxS;
         const 1925;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dxX() //  [R1]
         { []
         }
     {offset
       c2dxX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2dy7; else goto c2dy6;
       c2dy7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2dy6: // global
           _s2b1D::I64 = I64[Sp + 16];
           _s2b1H::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s2b1D::I64,
                            _s2b1H::I64)) goto c2dyh; else goto c2dyE;
       c2dyE: // global
           _s2b1F::I64 = I64[Sp + 8];
           if (%MO_S_Gt_W64(_s2b1H::I64,
                            _s2b1F::I64)) goto c2dyh; else goto c2dyD;
       c2dyh: // global
           Hp = Hp - 16;
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2dyD: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = (I64[Sp + 24] - I64[Sp + 32]) * (_s2b1F::I64 + (1 - _s2b1D::I64)) + (_s2b1H::I64 - _s2b1D::I64);
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dxX_info" {
     block_c2dxX_info:
         const _c2dxX;
         const 964;
         const 4294967326;
         const S2bMd_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.598936424 UTC

[section ""data" . GHC.Arr.$fIx(,)_$cindex_closure" {
     GHC.Arr.$fIx(,)_$cindex_closure:
         const GHC.Arr.$fIx(,)_$cindex_info;
         const 0;
 },
 GHC.Arr.$fIx(,)_$cindex_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2dA4: // global
           if ((Sp + -88) < SpLim) (likely: False) goto c2dAi; else goto c2dAj;
       c2dAi: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$cindex_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dAj: // global
           I64[Sp - 32] = block_c2dA1_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2dBn; else goto c2dA2;
       u2dBn: // global
           call _c2dA1(R1) args: 0, res: 0, upd: 0;
       c2dA2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$cindex_info" {
     GHC.Arr.$fIx(,)_$cindex_info:
         const GHC.Arr.$fIx(,)_$cindex_entry;
         const 0;
         const 73014444046;
         const 17179869208;
         const S2bMd_srt+192;
 },
 _c2dA1() //  [R1]
         { []
         }
     {offset
       c2dA1: // global
           I64[Sp - 8] = block_c2dA7_info;
           _s2b1W::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2b1W::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dBm; else goto c2dA8;
       u2dBm: // global
           call _c2dA7(R1) args: 0, res: 0, upd: 0;
       c2dA8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dA1_info" {
     block_c2dA1_info:
         const _c2dA1;
         const 3;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dA7() //  [R1]
         { []
         }
     {offset
       c2dA7: // global
           I64[Sp - 8] = block_c2dAc_info;
           _s2b1Y::P64 = P64[R1 + 7];
           _s2b1Z::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s2b1Z::P64;
           P64[Sp + 8] = _s2b1Y::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dBo; else goto c2dAd;
       u2dBo: // global
           call _c2dAc(R1) args: 0, res: 0, upd: 0;
       c2dAd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dA7_info" {
     block_c2dA7_info:
         const _c2dA7;
         const 4;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dAc() //  [R1]
         { []
         }
     {offset
       c2dAc: // global
           I64[Sp - 8] = block_c2dAh_info;
           _s2b21::P64 = P64[R1 + 7];
           _s2b22::P64 = P64[R1 + 15];
           R1 = P64[Sp + 40];
           P64[Sp] = _s2b22::P64;
           P64[Sp + 40] = _s2b21::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dBp; else goto c2dAn;
       u2dBp: // global
           call _c2dAh(R1) args: 0, res: 0, upd: 0;
       c2dAn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dAc_info" {
     block_c2dAc_info:
         const _c2dAc;
         const 5;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dAh() //  [R1]
         { []
         }
     {offset
       c2dAh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2dAv; else goto c2dAu;
       c2dAv: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2dAu: // global
           _s2b24::P64 = P64[R1 + 7];
           _s2b25::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 48];
           I64[Sp - 8] = block_c2dAs_info;
           R2 = P64[Sp + 32];
           I64[Sp - 32] = stg_ap_pp_info;
           _c2dAr::P64 = Hp - 15;
           P64[Sp - 24] = _c2dAr::P64;
           P64[Sp - 16] = _s2b24::P64;
           P64[Sp] = _s2b25::P64;
           P64[Sp + 24] = _s2b24::P64;
           P64[Sp + 48] = _c2dAr::P64;
           Sp = Sp - 32;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dAh_info" {
     block_c2dAh_info:
         const _c2dAh;
         const 6;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dAs() //  [R1]
         { []
         }
     {offset
       c2dAs: // global
           if (R1 & 7 == 1) goto u2dBk; else goto c2dAG;
       u2dBk: // global
           Sp = Sp + 64;
           call _c2dAP() args: 0, res: 0, upd: 0;
       c2dAG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2dAJ; else goto c2dAI;
       c2dAJ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2dAI: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 16];
           I64[Sp] = block_c2dAF_info;
           R2 = P64[Sp + 48];
           I64[Sp - 24] = stg_ap_pp_info;
           _c2dAE::P64 = Hp - 15;
           P64[Sp - 16] = _c2dAE::P64;
           P64[Sp - 8] = P64[Sp + 8];
           P64[Sp + 24] = _c2dAE::P64;
           Sp = Sp - 24;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dAs_info" {
     block_c2dAs_info:
         const _c2dAs;
         const 7;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dAF() //  [R1]
         { []
         }
     {offset
       c2dAF: // global
           if (R1 & 7 == 1) goto u2dBl; else goto c2dBc;
       u2dBl: // global
           Sp = Sp + 64;
           call _c2dAP() args: 0, res: 0, upd: 0;
       c2dBc: // global
           I64[Sp] = block_c2dAS_info;
           R2 = P64[Sp + 40];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 56];
           P64[Sp - 8] = P64[Sp + 32];
           Sp = Sp - 24;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dAF_info" {
     block_c2dAF_info:
         const _c2dAF;
         const 135;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dAP() //  []
         { []
         }
     {offset
       c2dAP: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2dAS() //  [R1]
         { []
         }
     {offset
       c2dAS: // global
           I64[Sp] = block_c2dAW_info;
           R2 = P64[Sp + 48];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 24];
           I64[Sp + 56] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dAS_info" {
     block_c2dAS_info:
         const _c2dAS;
         const 5767;
         const 30;
 },
 _c2dAW() //  [R1]
         { []
         }
     {offset
       c2dAW: // global
           I64[Sp + 40] = block_c2dB0_info;
           R2 = P64[Sp + 48];
           I64[Sp + 16] = stg_ap_pp_info;
           P64[Sp + 32] = P64[Sp + 8];
           I64[Sp + 48] = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dAW_info" {
     block_c2dAW_info:
         const _c2dAW;
         const 5767;
         const 30;
 },
 _c2dB0() //  [R1]
         { []
         }
     {offset
       c2dB0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2dBh; else goto c2dBg;
       c2dBh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2dBg: // global
           _s2b2k::I64 = I64[Sp + 16] * I64[Sp + 8] + I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2b2k::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dB0_info" {
     block_c2dB0_info:
         const _c2dB0;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.625427011 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$s$cindex_closure" {
     GHC.Arr.$fIx(,,)_$s$cindex_closure:
         const GHC.Arr.$fIx(,,)_$s$cindex_info;
         const 0;
 },
 GHC.Arr.$fIx(,,)_$s$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2dCM: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c2dDf; else goto c2dDg;
       c2dDf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$s$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dDg: // global
           I64[Sp - 16] = block_c2dCJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2dFn; else goto c2dCK;
       u2dFn: // global
           call _c2dCJ(R1) args: 0, res: 0, upd: 0;
       c2dCK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$s$cindex_info" {
     GHC.Arr.$fIx(,,)_$s$cindex_info:
         const GHC.Arr.$fIx(,,)_$s$cindex_entry;
         const 0;
         const 141733920782;
         const 8589934607;
         const S2bMd_srt+192;
 },
 _c2dCJ() //  [R1]
         { []
         }
     {offset
       c2dCJ: // global
           I64[Sp - 8] = block_c2dCP_info;
           _s2b2p::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2b2p::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dFm; else goto c2dCQ;
       u2dFm: // global
           call _c2dCP(R1) args: 0, res: 0, upd: 0;
       c2dCQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dCJ_info" {
     block_c2dCJ_info:
         const _c2dCJ;
         const 1;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dCP() //  [R1]
         { []
         }
     {offset
       c2dCP: // global
           I64[Sp - 16] = block_c2dCU_info;
           _s2b2r::P64 = P64[R1 + 7];
           _s2b2s::P64 = P64[R1 + 15];
           _s2b2t::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s2b2t::P64;
           P64[Sp] = _s2b2s::P64;
           P64[Sp + 8] = _s2b2r::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2dFo; else goto c2dCV;
       u2dFo: // global
           call _c2dCU(R1) args: 0, res: 0, upd: 0;
       c2dCV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dCP_info" {
     block_c2dCP_info:
         const _c2dCP;
         const 2;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dCU() //  [R1]
         { []
         }
     {offset
       c2dCU: // global
           I64[Sp - 16] = block_c2dCZ_info;
           _s2b2v::P64 = P64[R1 + 7];
           _s2b2w::P64 = P64[R1 + 15];
           _s2b2x::P64 = P64[R1 + 23];
           R1 = P64[Sp + 32];
           P64[Sp - 8] = _s2b2x::P64;
           P64[Sp] = _s2b2w::P64;
           P64[Sp + 32] = _s2b2v::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2dFp; else goto c2dD0;
       u2dFp: // global
           call _c2dCZ(R1) args: 0, res: 0, upd: 0;
       c2dD0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dCU_info" {
     block_c2dCU_info:
         const _c2dCU;
         const 4;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dCZ() //  [R1]
         { []
         }
     {offset
       c2dCZ: // global
           I64[Sp - 16] = block_c2dD4_info;
           _s2b2z::P64 = P64[R1 + 7];
           _s2b2A::P64 = P64[R1 + 15];
           _s2b2B::P64 = P64[R1 + 23];
           R1 = P64[Sp + 40];
           P64[Sp - 8] = _s2b2B::P64;
           P64[Sp] = _s2b2A::P64;
           P64[Sp + 40] = _s2b2z::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2dFq; else goto c2dD5;
       u2dFq: // global
           call _c2dD4(R1) args: 0, res: 0, upd: 0;
       c2dD5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dCZ_info" {
     block_c2dCZ_info:
         const _c2dCZ;
         const 6;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dD4() //  [R1]
         { []
         }
     {offset
       c2dD4: // global
           I64[Sp] = block_c2dD9_info;
           _s2b2D::I64 = I64[R1 + 7];
           R1 = P64[Sp + 64];
           I64[Sp + 64] = _s2b2D::I64;
           if (R1 & 7 != 0) goto u2dFr; else goto c2dDa;
       u2dFr: // global
           call _c2dD9(R1) args: 0, res: 0, upd: 0;
       c2dDa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dD4_info" {
     block_c2dD4_info:
         const _c2dD4;
         const 8;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dD9() //  [R1]
         { []
         }
     {offset
       c2dD9: // global
           I64[Sp] = block_c2dDe_info;
           _s2b2F::I64 = I64[R1 + 7];
           R1 = P64[Sp + 56];
           I64[Sp + 56] = _s2b2F::I64;
           if (R1 & 7 != 0) goto u2dFs; else goto c2dDn;
       u2dFs: // global
           call _c2dDe(R1) args: 0, res: 0, upd: 0;
       c2dDn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dD9_info" {
     block_c2dD9_info:
         const _c2dD9;
         const 8200;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dDe() //  [R1]
         { []
         }
     {offset
       c2dDe: // global
           _s2b2H::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(I64[Sp + 64],
                            _s2b2H::I64)) goto u2dFi; else goto c2dFh;
       u2dFi: // global
           Sp = Sp + 72;
           goto u2dFv;
       c2dFh: // global
           if (%MO_S_Gt_W64(_s2b2H::I64,
                            I64[Sp + 56])) goto u2dFj; else goto c2dDP;
       u2dFj: // global
           Sp = Sp + 72;
           goto u2dFv;
       u2dFv: // global
           call _c2dE6() args: 0, res: 0, upd: 0;
       c2dDP: // global
           I64[Sp] = block_c2dDE_info;
           R1 = P64[Sp + 48];
           I64[Sp + 56] = _s2b2H::I64;
           if (R1 & 7 != 0) goto u2dFt; else goto c2dDF;
       u2dFt: // global
           call _c2dDE(R1) args: 0, res: 0, upd: 0;
       c2dDF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dDe_info" {
     block_c2dDe_info:
         const _c2dDe;
         const 12296;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dDE() //  [R1]
         { []
         }
     {offset
       c2dDE: // global
           I64[Sp] = block_c2dDJ_info;
           _s2b2L::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 48] = _s2b2L::I64;
           if (R1 & 7 != 0) goto u2dFw; else goto c2dDK;
       u2dFw: // global
           call _c2dDJ(R1) args: 0, res: 0, upd: 0;
       c2dDK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dDE_info" {
     block_c2dDE_info:
         const _c2dDE;
         const 14344;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dDJ() //  [R1]
         { []
         }
     {offset
       c2dDJ: // global
           I64[Sp] = block_c2dDO_info;
           _s2b2N::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 32] = _s2b2N::I64;
           if (R1 & 7 != 0) goto u2dFx; else goto c2dDS;
       u2dFx: // global
           call _c2dDO(R1) args: 0, res: 0, upd: 0;
       c2dDS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dDJ_info" {
     block_c2dDJ_info:
         const _c2dDJ;
         const 14856;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dDO() //  [R1]
         { []
         }
     {offset
       c2dDO: // global
           _s2b2P::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(I64[Sp + 48],
                            _s2b2P::I64)) goto u2dFk; else goto c2dFg;
       u2dFk: // global
           Sp = Sp + 72;
           goto u2dFA;
       c2dFg: // global
           if (%MO_S_Gt_W64(_s2b2P::I64,
                            I64[Sp + 32])) goto u2dFl; else goto c2dEk;
       u2dFl: // global
           Sp = Sp + 72;
           goto u2dFA;
       u2dFA: // global
           call _c2dE6() args: 0, res: 0, upd: 0;
       c2dEk: // global
           I64[Sp] = block_c2dE9_info;
           R1 = P64[Sp + 40];
           I64[Sp + 40] = _s2b2P::I64;
           if (R1 & 7 != 0) goto u2dFy; else goto c2dEa;
       u2dFy: // global
           call _c2dE9(R1) args: 0, res: 0, upd: 0;
       c2dEa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dDO_info" {
     block_c2dDO_info:
         const _c2dDO;
         const 14984;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dE6() //  []
         { []
         }
     {offset
       c2dE6: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2dE9() //  [R1]
         { []
         }
     {offset
       c2dE9: // global
           I64[Sp] = block_c2dEe_info;
           _s2b2T::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s2b2T::I64;
           if (R1 & 7 != 0) goto u2dFB; else goto c2dEf;
       u2dFB: // global
           call _c2dEe(R1) args: 0, res: 0, upd: 0;
       c2dEf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dE9_info" {
     block_c2dE9_info:
         const _c2dE9;
         const 16008;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dEe() //  [R1]
         { []
         }
     {offset
       c2dEe: // global
           _s2b2B::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2dEj_info;
           _s2b2V::I64 = I64[R1 + 7];
           R1 = _s2b2B::P64;
           I64[Sp + 16] = _s2b2V::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2dFC; else goto c2dEn;
       u2dFC: // global
           call _c2dEj(R1) args: 0, res: 0, upd: 0;
       c2dEn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dEe_info" {
     block_c2dEe_info:
         const _c2dEe;
         const 16264;
         const 4294967326;
         const S2bMd_srt+192;
 },
 _c2dEj() //  [R1]
         { []
         }
     {offset
       c2dEj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2dEt; else goto c2dEs;
       c2dEt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2dEs: // global
           _s2b2T::I64 = I64[Sp + 16];
           _s2b2X::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s2b2T::I64,
                            _s2b2X::I64)) goto c2dED; else goto c2dFf;
       c2dFf: // global
           _s2b2V::I64 = I64[Sp + 8];
           if (%MO_S_Gt_W64(_s2b2X::I64,
                            _s2b2V::I64)) goto c2dED; else goto c2dFe;
       c2dED: // global
           Hp = Hp - 16;
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 64;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2dFe: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           _s2b2L::I64 = I64[Sp + 40];
           I64[Hp] = _s2b2X::I64 + ((_s2b2V::I64 + (1 - _s2b2T::I64)) * (I64[Sp + 32] + ((I64[Sp + 24] + (1 - _s2b2L::I64)) * (I64[Sp + 48] - I64[Sp + 56]) - _s2b2L::I64)) - _s2b2T::I64);
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dEj_info" {
     block_c2dEj_info:
         const _c2dEj;
         const 8135;
         const 4294967326;
         const S2bMd_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.653146173 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$cindex_closure" {
     GHC.Arr.$fIx(,,)_$cindex_closure:
         const GHC.Arr.$fIx(,,)_$cindex_info;
         const 0;
 },
 GHC.Arr.$fIx(,,)_$cindex_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2dHj: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2dHk; else goto c2dHl;
       c2dHk: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$cindex_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dHl: // global
           I64[Sp - 48] = block_c2dHd_info;
           _s2b3f::P64 = R6;
           R6 = R6;
           _s2b3e::P64 = R5;
           R5 = R5;
           _s2b3d::P64 = R4;
           R4 = R4;
           _s2b3c::P64 = R3;
           R3 = R3;
           _s2b3b::P64 = R2;
           R2 = R2;
           P64[Sp - 40] = _s2b3b::P64;
           P64[Sp - 32] = _s2b3c::P64;
           P64[Sp - 24] = _s2b3d::P64;
           P64[Sp - 16] = _s2b3e::P64;
           P64[Sp - 8] = _s2b3f::P64;
           Sp = Sp - 48;
           call GHC.Arr.$fIx(,,)_$cinRange_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$cindex_info" {
     GHC.Arr.$fIx(,,)_$cindex_info:
         const GHC.Arr.$fIx(,,)_$cindex_entry;
         const 0;
         const 279172874254;
         const 21474836505;
         const S2bMd_srt+192;
 },
 _c2dHd() //  [R1]
         { []
         }
     {offset
       c2dHd: // global
           if (R1 & 7 == 1) goto c2dHg; else goto c2dHh;
       c2dHg: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2dHh: // global
           R6 = P64[Sp + 40];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 48;
           call GHC.Arr.$fIx(,,)_$cunsafeIndex_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dHd_info" {
     block_c2dHd_info:
         const _c2dHd;
         const 5;
         const 4294967326;
         const S2bMd_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.658709539 UTC

[section ""cstring" . lvl11_r1Xvo_bytes" {
     lvl11_r1Xvo_bytes:
         I8[] [67,104,97,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.661069912 UTC

[section ""data" . lvl12_r1Xvp_closure" {
     lvl12_r1Xvp_closure:
         const lvl12_r1Xvp_info;
         const 0;
         const 0;
         const 0;
 },
 lvl12_r1Xvp_entry() //  [R1]
         { []
         }
     {offset
       c2dHL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2dHM; else goto c2dHN;
       c2dHM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2dHN: // global
           (_c2dHI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2dHI::I64 == 0) goto c2dHK; else goto c2dHJ;
       c2dHK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2dHJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2dHI::I64;
           R2 = lvl11_r1Xvo_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl12_r1Xvp_info" {
     lvl12_r1Xvp_info:
         const lvl12_r1Xvp_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.666721595 UTC

[section ""data" . GHC.Arr.$fIxChar_$cunsafeRangeSize_closure" {
     GHC.Arr.$fIxChar_$cunsafeRangeSize_closure:
         const GHC.Arr.$fIxChar_$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIxChar_$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c2dI3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2dIt; else goto c2dIu;
       c2dIt: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxChar_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2dIu: // global
           I64[Sp - 8] = block_c2dI0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dIB; else goto c2dI1;
       u2dIB: // global
           call _c2dI0(R1) args: 0, res: 0, upd: 0;
       c2dI1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxChar_$cunsafeRangeSize_info" {
     GHC.Arr.$fIxChar_$cunsafeRangeSize_info:
         const GHC.Arr.$fIxChar_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2dI0() //  [R1]
         { []
         }
     {offset
       c2dI0: // global
           I64[Sp - 8] = block_c2dI6_info;
           _s2b3j::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s2b3j::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dIA; else goto c2dI7;
       u2dIA: // global
           call _c2dI6(R1) args: 0, res: 0, upd: 0;
       c2dI7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dI0_info" {
     block_c2dI0_info:
         const _c2dI0;
         const 0;
         const 30;
 },
 _c2dI6() //  [R1]
         { []
         }
     {offset
       c2dI6: // global
           I64[Sp] = block_c2dIb_info;
           _s2b3m::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2b3m::I64;
           if (R1 & 7 != 0) goto u2dIC; else goto c2dIc;
       u2dIC: // global
           call _c2dIb(R1) args: 0, res: 0, upd: 0;
       c2dIc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dI6_info" {
     block_c2dI6_info:
         const _c2dI6;
         const 1;
         const 30;
 },
 _c2dIb() //  [R1]
         { []
         }
     {offset
       c2dIb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2dIz; else goto c2dIy;
       c2dIz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2dIy: // global
           _s2b3s::I64 = I64[Sp + 8] - I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2b3s::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dIb_info" {
     block_c2dIb_info:
         const _c2dIb;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.676463715 UTC

[section ""data" . GHC.Arr.$fIxChar_$crangeSize_closure" {
     GHC.Arr.$fIxChar_$crangeSize_closure:
         const GHC.Arr.$fIxChar_$crangeSize_info;
 },
 GHC.Arr.$fIxChar_$crangeSize_entry() //  [R2]
         { []
         }
     {offset
       c2dJ9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2dJi; else goto c2dJj;
       c2dJi: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxChar_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2dJj: // global
           I64[Sp - 8] = block_c2dJ6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dJO; else goto c2dJ7;
       u2dJO: // global
           call _c2dJ6(R1) args: 0, res: 0, upd: 0;
       c2dJ7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxChar_$crangeSize_info" {
     GHC.Arr.$fIxChar_$crangeSize_info:
         const GHC.Arr.$fIxChar_$crangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2dJ6() //  [R1]
         { []
         }
     {offset
       c2dJ6: // global
           I64[Sp - 8] = block_c2dJc_info;
           _s2b3w::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2b3w::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dJN; else goto c2dJd;
       u2dJN: // global
           call _c2dJc(R1) args: 0, res: 0, upd: 0;
       c2dJd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dJ6_info" {
     block_c2dJ6_info:
         const _c2dJ6;
         const 0;
         const 30;
 },
 _c2dJc() //  [R1]
         { []
         }
     {offset
       c2dJc: // global
           I64[Sp] = block_c2dJh_info;
           _s2b3y::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2b3y::I64;
           if (R1 & 7 != 0) goto u2dJP; else goto c2dJm;
       u2dJP: // global
           call _c2dJh(R1) args: 0, res: 0, upd: 0;
       c2dJm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dJc_info" {
     block_c2dJc_info:
         const _c2dJc;
         const 1;
         const 30;
 },
 _c2dJh() //  [R1]
         { []
         }
     {offset
       c2dJh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2dJs; else goto c2dJr;
       c2dJs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2dJr: // global
           _s2b3y::I64 = I64[Sp + 8];
           _s2b3A::I64 = I64[R1 + 7];
           if (_s2b3y::I64 > _s2b3A::I64) goto c2dJw; else goto c2dJM;
       c2dJw: // global
           Hp = Hp - 16;
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2dJM: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2b3A::I64 - _s2b3y::I64 + 1;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dJh_info" {
     block_c2dJh_info:
         const _c2dJh;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.684649914 UTC

[section ""cstring" . lvl13_r1Xvq_bytes" {
     lvl13_r1Xvq_bytes:
         I8[] [73,110,116,101,103,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.687042167 UTC

[section ""data" . lvl14_r1Xvr_closure" {
     lvl14_r1Xvr_closure:
         const lvl14_r1Xvr_info;
         const 0;
         const 0;
         const 0;
 },
 lvl14_r1Xvr_entry() //  [R1]
         { []
         }
     {offset
       c2dKn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2dKo; else goto c2dKp;
       c2dKo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2dKp: // global
           (_c2dKk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2dKk::I64 == 0) goto c2dKm; else goto c2dKl;
       c2dKm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2dKl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2dKk::I64;
           R2 = lvl13_r1Xvq_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl14_r1Xvr_info" {
     lvl14_r1Xvr_info:
         const lvl14_r1Xvr_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.692144703 UTC

[section ""data" . GHC.Arr.$fIxInteger_$cunsafeRangeSize_closure" {
     GHC.Arr.$fIxInteger_$cunsafeRangeSize_closure:
         const GHC.Arr.$fIxInteger_$cunsafeRangeSize_info;
         const 0;
 },
 GHC.Arr.$fIxInteger_$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c2dKF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2dKU; else goto c2dKV;
       c2dKU: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxInteger_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2dKV: // global
           I64[Sp - 8] = block_c2dKC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dL1; else goto c2dKD;
       u2dL1: // global
           call _c2dKC(R1) args: 0, res: 0, upd: 0;
       c2dKD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInteger_$cunsafeRangeSize_info" {
     GHC.Arr.$fIxInteger_$cunsafeRangeSize_info:
         const GHC.Arr.$fIxInteger_$cunsafeRangeSize_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2bMd_srt+248;
 },
 _c2dKC() //  [R1]
         { []
         }
     {offset
       c2dKC: // global
           I64[Sp] = block_c2dKI_info;
           R3 = P64[R1 + 7];
           R2 = P64[R1 + 15];
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dKC_info" {
     block_c2dKC_info:
         const _c2dKC;
         const 0;
         const 4294967326;
         const S2bMd_srt+248;
 },
 _c2dKI() //  [R1]
         { []
         }
     {offset
       c2dKI: // global
           I64[Sp] = block_c2dKM_info;
           R2 = R1;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dKI_info" {
     block_c2dKI_info:
         const _c2dKI;
         const 0;
         const 30;
 },
 _c2dKM() //  [R1]
         { []
         }
     {offset
       c2dKM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2dL0; else goto c2dKZ;
       c2dL0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2dKZ: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1 + 1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dKM_info" {
     block_c2dKM_info:
         const _c2dKM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.702195371 UTC

[section ""data" . GHC.Arr.$w$crangeSize2_closure" {
     GHC.Arr.$w$crangeSize2_closure:
         const GHC.Arr.$w$crangeSize2_info;
         const 0;
 },
 GHC.Arr.$w$crangeSize2_entry() //  [R2, R3]
         { []
         }
     {offset
       c2dLw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2dLx; else goto c2dLy;
       c2dLx: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$w$crangeSize2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dLy: // global
           I64[Sp - 24] = block_c2dLr_info;
           _s2b3O::P64 = R3;
           R3 = R3;
           _s2b3N::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s2b3N::P64;
           P64[Sp - 8] = _s2b3O::P64;
           Sp = Sp - 24;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$crangeSize2_info" {
     GHC.Arr.$w$crangeSize2_info:
         const GHC.Arr.$w$crangeSize2_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S2bMd_srt+248;
 },
 _c2dLr() //  [R1]
         { []
         }
     {offset
       c2dLr: // global
           if (R1 == 1) goto c2dLv; else goto u2dM1;
       c2dLv: // global
           I64[Sp] = block_c2dLE_info;
           _s2b3O::P64 = P64[Sp + 16];
           R3 = _s2b3O::P64;
           R2 = _s2b3O::P64;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       u2dM1: // global
           Sp = Sp + 24;
           call _c2dLL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2dLr_info" {
     block_c2dLr_info:
         const _c2dLr;
         const 2;
         const 4294967326;
         const S2bMd_srt+248;
 },
 _c2dLE() //  [R1]
         { []
         }
     {offset
       c2dLE: // global
           if (R1 == 1) goto c2dLY; else goto u2dM2;
       c2dLY: // global
           _s2b3O::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c2dLO_info;
           R3 = P64[Sp + 8];
           R2 = _s2b3O::P64;
           Sp = Sp + 16;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
       u2dM2: // global
           Sp = Sp + 24;
           call _c2dLL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2dLE_info" {
     block_c2dLE_info:
         const _c2dLE;
         const 2;
         const 4294967326;
         const S2bMd_srt+248;
 },
 _c2dLO() //  [R1]
         { []
         }
     {offset
       c2dLO: // global
           I64[Sp] = block_c2dLS_info;
           R2 = R1;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dLO_info" {
     block_c2dLO_info:
         const _c2dLO;
         const 0;
         const 30;
 },
 _c2dLS() //  [R1]
         { []
         }
     {offset
       c2dLS: // global
           R1 = R1 + 1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dLS_info" {
     block_c2dLS_info:
         const _c2dLS;
         const 0;
         const 30;
 },
 _c2dLL() //  []
         { []
         }
     {offset
       c2dLL: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.713185149 UTC

[section ""data" . GHC.Arr.$fIxInteger_$crangeSize_closure" {
     GHC.Arr.$fIxInteger_$crangeSize_closure:
         const GHC.Arr.$fIxInteger_$crangeSize_info;
         const 0;
 },
 GHC.Arr.$fIxInteger_$crangeSize_entry() //  [R2]
         { []
         }
     {offset
       c2dMB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2dMJ; else goto c2dMK;
       c2dMJ: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxInteger_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2dMK: // global
           I64[Sp - 8] = block_c2dMy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dMP; else goto c2dMz;
       u2dMP: // global
           call _c2dMy(R1) args: 0, res: 0, upd: 0;
       c2dMz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInteger_$crangeSize_info" {
     GHC.Arr.$fIxInteger_$crangeSize_info:
         const GHC.Arr.$fIxInteger_$crangeSize_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2bMd_srt+264;
 },
 _c2dMy() //  [R1]
         { []
         }
     {offset
       c2dMy: // global
           I64[Sp] = block_c2dME_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$w$crangeSize2_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dMy_info" {
     block_c2dMy_info:
         const _c2dMy;
         const 0;
         const 4294967326;
         const S2bMd_srt+264;
 },
 _c2dME() //  [R1]
         { []
         }
     {offset
       c2dME: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2dMO; else goto c2dMN;
       c2dMO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2dMN: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dME_info" {
     block_c2dME_info:
         const _c2dME;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.720152635 UTC

[section ""cstring" . lvl15_r1Xvs_bytes" {
     lvl15_r1Xvs_bytes:
         I8[] [66,111,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.723100575 UTC

[section ""data" . lvl16_r1Xvt_closure" {
     lvl16_r1Xvt_closure:
         const lvl16_r1Xvt_info;
         const 0;
         const 0;
         const 0;
 },
 lvl16_r1Xvt_entry() //  [R1]
         { []
         }
     {offset
       c2dNd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2dNe; else goto c2dNf;
       c2dNe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2dNf: // global
           (_c2dNa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2dNa::I64 == 0) goto c2dNc; else goto c2dNb;
       c2dNc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2dNb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2dNa::I64;
           R2 = lvl15_r1Xvs_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl16_r1Xvt_info" {
     lvl16_r1Xvt_info:
         const lvl16_r1Xvt_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.726673725 UTC

[section ""data" . lvl17_r1Xvu_closure" {
     lvl17_r1Xvu_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.728278019 UTC

[section ""data" . lvl18_r1Xvv_closure" {
     lvl18_r1Xvv_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.732047449 UTC

[section ""data" . GHC.Arr.$fIxBool_$cunsafeRangeSize_closure" {
     GHC.Arr.$fIxBool_$cunsafeRangeSize_closure:
         const GHC.Arr.$fIxBool_$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIxBool_$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c2dNx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2dNy; else goto c2dNz;
       c2dNy: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxBool_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2dNz: // global
           I64[Sp - 8] = block_c2dNu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dOj; else goto c2dNv;
       u2dOj: // global
           call _c2dNu(R1) args: 0, res: 0, upd: 0;
       c2dNv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxBool_$cunsafeRangeSize_info" {
     GHC.Arr.$fIxBool_$cunsafeRangeSize_info:
         const GHC.Arr.$fIxBool_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2dNu() //  [R1]
         { []
         }
     {offset
       c2dNu: // global
           I64[Sp - 8] = block_c2dNC_info;
           _s2b40::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s2b40::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dOi; else goto c2dNE;
       u2dOi: // global
           call _c2dNC(R1) args: 0, res: 0, upd: 0;
       c2dNE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dNu_info" {
     block_c2dNu_info:
         const _c2dNu;
         const 0;
         const 30;
 },
 _c2dNC() //  [R1]
         { []
         }
     {offset
       c2dNC: // global
           _s2b40::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c2dNL; else goto c2dO1;
       c2dNL: // global
           I64[Sp + 8] = block_c2dNI_info;
           R1 = _s2b40::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2dOk; else goto c2dNM;
       u2dOk: // global
           call _c2dNI(R1) args: 0, res: 0, upd: 0;
       c2dNM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c2dO1: // global
           I64[Sp + 8] = block_c2dNZ_info;
           R1 = _s2b40::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2dOl; else goto c2dO2;
       u2dOl: // global
           call _c2dNZ(R1) args: 0, res: 0, upd: 0;
       c2dO2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dNC_info" {
     block_c2dNC_info:
         const _c2dNC;
         const 1;
         const 30;
 },
 _c2dNI() //  [R1]
         { []
         }
     {offset
       c2dNI: // global
           if (R1 & 7 == 1) goto u2dOh; else goto c2dNW;
       u2dOh: // global
           Sp = Sp + 8;
           call _c2dOc() args: 0, res: 0, upd: 0;
       c2dNW: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dNI_info" {
     block_c2dNI_info:
         const _c2dNI;
         const 0;
         const 30;
 },
 _c2dNZ() //  [R1]
         { []
         }
     {offset
       c2dNZ: // global
           if (R1 & 7 == 1) goto c2dO8; else goto u2dOg;
       c2dO8: // global
           R1 = lvl18_r1Xvv_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u2dOg: // global
           Sp = Sp + 8;
           call _c2dOc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2dNZ_info" {
     block_c2dNZ_info:
         const _c2dNZ;
         const 0;
         const 30;
 },
 _c2dOc() //  []
         { []
         }
     {offset
       c2dOc: // global
           R1 = lvl17_r1Xvu_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.742810683 UTC

[section ""cstring" . lvl19_r1Xvw_bytes" {
     lvl19_r1Xvw_bytes:
         I8[] [79,114,100,101,114,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.745191994 UTC

[section ""data" . lvl20_r1Xvx_closure" {
     lvl20_r1Xvx_closure:
         const lvl20_r1Xvx_info;
         const 0;
         const 0;
         const 0;
 },
 lvl20_r1Xvx_entry() //  [R1]
         { []
         }
     {offset
       c2dP5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2dP6; else goto c2dP7;
       c2dP6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2dP7: // global
           (_c2dP2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2dP2::I64 == 0) goto c2dP4; else goto c2dP3;
       c2dP4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2dP3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2dP2::I64;
           R2 = lvl19_r1Xvw_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl20_r1Xvx_info" {
     lvl20_r1Xvx_info:
         const lvl20_r1Xvx_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.751809455 UTC

[section ""data" . GHC.Arr.$w$cunsafeRangeSize1_closure" {
     GHC.Arr.$w$cunsafeRangeSize1_closure:
         const GHC.Arr.$w$cunsafeRangeSize1_info;
 },
 GHC.Arr.$w$cunsafeRangeSize1_entry() //  [R2, R3]
         { []
         }
     {offset
       c2dPs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2dPt; else goto c2dPu;
       c2dPt: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$w$cunsafeRangeSize1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dPu: // global
           I64[Sp - 16] = block_c2dPk_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2dQH; else goto c2dPl;
       u2dQH: // global
           call _c2dPk(R1) args: 0, res: 0, upd: 0;
       c2dPl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$cunsafeRangeSize1_info" {
     GHC.Arr.$w$cunsafeRangeSize1_info:
         const GHC.Arr.$w$cunsafeRangeSize1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2dPk() //  [R1]
         { []
         }
     {offset
       c2dPk: // global
           _s2b45::P64 = P64[Sp + 8];
           _c2dPr::P64 = R1 & 7;
           if (_c2dPr::P64 < 3) goto u2dQt; else goto c2dPq;
       u2dQt: // global
           if (_c2dPr::P64 < 2) goto c2dPo; else goto c2dPp;
       c2dPo: // global
           I64[Sp + 8] = block_c2dPx_info;
           R1 = _s2b45::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2dQE; else goto c2dPz;
       u2dQE: // global
           call _c2dPx(R1) args: 0, res: 0, upd: 0;
       c2dPz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c2dPp: // global
           I64[Sp + 8] = block_c2dPQ_info;
           R1 = _s2b45::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2dQF; else goto c2dPS;
       u2dQF: // global
           call _c2dPQ(R1) args: 0, res: 0, upd: 0;
       c2dPS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c2dPq: // global
           I64[Sp + 8] = block_c2dQ9_info;
           R1 = _s2b45::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2dQG; else goto c2dQb;
       u2dQG: // global
           call _c2dQ9(R1) args: 0, res: 0, upd: 0;
       c2dQb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dPk_info" {
     block_c2dPk_info:
         const _c2dPk;
         const 1;
         const 30;
 },
 _c2dPx() //  [R1]
         { []
         }
     {offset
       c2dPx: // global
           _c2dQs::P64 = R1 & 7;
           if (_c2dQs::P64 < 3) goto u2dQu; else goto c2dPN;
       u2dQu: // global
           if (_c2dQs::P64 < 2) goto u2dQy; else goto u2dQx;
       u2dQy: // global
           Sp = Sp + 8;
           call _c2dQp() args: 0, res: 0, upd: 0;
       u2dQx: // global
           Sp = Sp + 8;
           call _c2dQ6() args: 0, res: 0, upd: 0;
       c2dPN: // global
           R1 = (-1);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dPx_info" {
     block_c2dPx_info:
         const _c2dPx;
         const 0;
         const 30;
 },
 _c2dPQ() //  [R1]
         { []
         }
     {offset
       c2dPQ: // global
           _c2dQr::P64 = R1 & 7;
           if (_c2dQr::P64 < 3) goto u2dQv; else goto u2dQz;
       u2dQv: // global
           if (_c2dQr::P64 < 2) goto u2dQB; else goto u2dQA;
       u2dQB: // global
           Sp = Sp + 8;
           call _c2dQl() args: 0, res: 0, upd: 0;
       u2dQA: // global
           Sp = Sp + 8;
           call _c2dQp() args: 0, res: 0, upd: 0;
       u2dQz: // global
           Sp = Sp + 8;
           call _c2dQ6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2dPQ_info" {
     block_c2dPQ_info:
         const _c2dPQ;
         const 0;
         const 30;
 },
 _c2dQ6() //  []
         { []
         }
     {offset
       c2dQ6: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2dQ9() //  [R1]
         { []
         }
     {offset
       c2dQ9: // global
           _c2dQq::P64 = R1 & 7;
           if (_c2dQq::P64 < 3) goto u2dQw; else goto u2dQC;
       u2dQw: // global
           if (_c2dQq::P64 < 2) goto c2dQh; else goto u2dQD;
       c2dQh: // global
           R1 = 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u2dQD: // global
           Sp = Sp + 8;
           call _c2dQl() args: 0, res: 0, upd: 0;
       u2dQC: // global
           Sp = Sp + 8;
           call _c2dQp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2dQ9_info" {
     block_c2dQ9_info:
         const _c2dQ9;
         const 0;
         const 30;
 },
 _c2dQl() //  []
         { []
         }
     {offset
       c2dQl: // global
           R1 = 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2dQp() //  []
         { []
         }
     {offset
       c2dQp: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.765297254 UTC

[section ""data" . GHC.Arr.$fIxOrdering_$cunsafeRangeSize_closure" {
     GHC.Arr.$fIxOrdering_$cunsafeRangeSize_closure:
         const GHC.Arr.$fIxOrdering_$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIxOrdering_$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c2dRA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2dRI; else goto c2dRJ;
       c2dRI: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxOrdering_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2dRJ: // global
           I64[Sp - 8] = block_c2dRx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dRO; else goto c2dRy;
       u2dRO: // global
           call _c2dRx(R1) args: 0, res: 0, upd: 0;
       c2dRy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxOrdering_$cunsafeRangeSize_info" {
     GHC.Arr.$fIxOrdering_$cunsafeRangeSize_info:
         const GHC.Arr.$fIxOrdering_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2dRx() //  [R1]
         { []
         }
     {offset
       c2dRx: // global
           I64[Sp] = block_c2dRD_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$w$cunsafeRangeSize1_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dRx_info" {
     block_c2dRx_info:
         const _c2dRx;
         const 0;
         const 30;
 },
 _c2dRD() //  [R1]
         { []
         }
     {offset
       c2dRD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2dRN; else goto c2dRM;
       c2dRN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2dRM: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dRD_info" {
     block_c2dRD_info:
         const _c2dRD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.772326297 UTC

[section ""data" . GHC.Arr.$dmunsafeIndex_closure" {
     GHC.Arr.$dmunsafeIndex_closure:
         const GHC.Arr.$dmunsafeIndex_info;
 },
 GHC.Arr.$dmunsafeIndex_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2dS9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2dSa; else goto c2dSb;
       c2dSa: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$dmunsafeIndex_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dSb: // global
           R2 = R2;
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Arr.index_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$dmunsafeIndex_info" {
     GHC.Arr.$dmunsafeIndex_info:
         const GHC.Arr.$dmunsafeIndex_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.777835335 UTC

[section ""data" . GHC.Arr.$fIx()_$cunsafeRangeSize_closure" {
     GHC.Arr.$fIx()_$cunsafeRangeSize_closure:
         const GHC.Arr.$fIx()_$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIx()_$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c2dSp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2dSy; else goto c2dSz;
       c2dSy: // global
           R2 = R2;
           R1 = GHC.Arr.$fIx()_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2dSz: // global
           I64[Sp - 8] = block_c2dSm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dSI; else goto c2dSn;
       u2dSI: // global
           call _c2dSm(R1) args: 0, res: 0, upd: 0;
       c2dSn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx()_$cunsafeRangeSize_info" {
     GHC.Arr.$fIx()_$cunsafeRangeSize_info:
         const GHC.Arr.$fIx()_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2dSm() //  [R1]
         { []
         }
     {offset
       c2dSm: // global
           I64[Sp - 8] = block_c2dSs_info;
           _s2b4m::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2b4m::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2dSH; else goto c2dSt;
       u2dSH: // global
           call _c2dSs() args: 0, res: 0, upd: 0;
       c2dSt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dSm_info" {
     block_c2dSm_info:
         const _c2dSm;
         const 0;
         const 30;
 },
 _c2dSs() //  []
         { []
         }
     {offset
       c2dSs: // global
           _s2b4m::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2dSx_info;
           R1 = _s2b4m::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2dSJ; else goto c2dSC;
       u2dSJ: // global
           call _c2dSx() args: 0, res: 0, upd: 0;
       c2dSC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dSs_info" {
     block_c2dSs_info:
         const _c2dSs;
         const 1;
         const 30;
 },
 _c2dSx() //  []
         { []
         }
     {offset
       c2dSx: // global
           R1 = lvl17_r1Xvu_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dSx_info" {
     block_c2dSx_info:
         const _c2dSx;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.787172379 UTC

[section ""data" . GHC.Arr.$dmrangeSize_closure" {
     GHC.Arr.$dmrangeSize_closure:
         const GHC.Arr.$dmrangeSize_info;
 },
 GHC.Arr.$dmrangeSize_entry() //  [R2, R3]
         { []
         }
     {offset
       c2dTc: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2dTd; else goto c2dTe;
       c2dTd: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$dmrangeSize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dTe: // global
           I64[Sp - 16] = block_c2dT9_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2dTF; else goto c2dTa;
       u2dTF: // global
           call _c2dT9(R1) args: 0, res: 0, upd: 0;
       c2dTa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$dmrangeSize_info" {
     GHC.Arr.$dmrangeSize_info:
         const GHC.Arr.$dmrangeSize_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2dT9() //  [R1]
         { []
         }
     {offset
       c2dT9: // global
           I64[Sp - 16] = block_c2dTh_info;
           R2 = P64[Sp + 8];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = R1;
           _s2b4t::P64 = P64[R1 + 15];
           P64[Sp - 24] = _s2b4t::P64;
           P64[Sp - 8] = _s2b4t::P64;
           P64[Sp] = R1;
           Sp = Sp - 40;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dT9_info" {
     block_c2dT9_info:
         const _c2dT9;
         const 1;
         const 30;
 },
 _c2dTh() //  [R1]
         { []
         }
     {offset
       c2dTh: // global
           if (R1 & 7 == 1) goto c2dTo; else goto c2dTA;
       c2dTo: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2dTA: // global
           _s2b4p::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c2dTr_info;
           R2 = _s2b4p::P64;
           I64[Sp] = stg_ap_pp_info;
           _s2b4t::P64 = P64[Sp + 8];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = _s2b4t::P64;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dTh_info" {
     block_c2dTh_info:
         const _c2dTh;
         const 3;
         const 30;
 },
 _c2dTr() //  [R1]
         { []
         }
     {offset
       c2dTr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2dTD; else goto c2dTC;
       c2dTD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2dTC: // global
           _s2b4x::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2b4x::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dTr_info" {
     block_c2dTr_info:
         const _c2dTr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.796952561 UTC

[section ""data" . GHC.Arr.$dmunsafeRangeSize_closure" {
     GHC.Arr.$dmunsafeRangeSize_closure:
         const GHC.Arr.$dmunsafeRangeSize_info;
 },
 GHC.Arr.$dmunsafeRangeSize_entry() //  [R2, R3]
         { []
         }
     {offset
       c2dUe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2dUp; else goto c2dUq;
       c2dUp: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$dmunsafeRangeSize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dUq: // global
           I64[Sp - 16] = block_c2dUb_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2dUv; else goto c2dUc;
       u2dUv: // global
           call _c2dUb(R1) args: 0, res: 0, upd: 0;
       c2dUc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$dmunsafeRangeSize_info" {
     GHC.Arr.$dmunsafeRangeSize_info:
         const GHC.Arr.$dmunsafeRangeSize_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2dUb() //  [R1]
         { []
         }
     {offset
       c2dUb: // global
           _s2b4y::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2dUh_info;
           R2 = _s2b4y::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = R1;
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 16;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dUb_info" {
     block_c2dUb_info:
         const _c2dUb;
         const 1;
         const 30;
 },
 _c2dUh() //  [R1]
         { []
         }
     {offset
       c2dUh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2dUu; else goto c2dUt;
       c2dUu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2dUt: // global
           _s2b4F::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2b4F::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dUh_info" {
     block_c2dUh_info:
         const _c2dUh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.805417837 UTC

[section ""data" . GHC.Arr.$fEqSTArray_$c/=_closure" {
     GHC.Arr.$fEqSTArray_$c/=_closure:
         const GHC.Arr.$fEqSTArray_$c/=_info;
 },
 GHC.Arr.$fEqSTArray_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c2dUW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2dV0; else goto c2dV1;
       c2dV0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fEqSTArray_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dV1: // global
           I64[Sp - 16] = block_c2dUT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2dVo; else goto c2dUU;
       u2dVo: // global
           call _c2dUT(R1) args: 0, res: 0, upd: 0;
       c2dUU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fEqSTArray_$c/=_info" {
     GHC.Arr.$fEqSTArray_$c/=_info:
         const GHC.Arr.$fEqSTArray_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2dUT() //  [R1]
         { []
         }
     {offset
       c2dUT: // global
           I64[Sp] = block_c2dUZ_info;
           _s2b4M::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s2b4M::P64;
           if (R1 & 7 != 0) goto u2dVn; else goto c2dV3;
       u2dVn: // global
           call _c2dUZ(R1) args: 0, res: 0, upd: 0;
       c2dV3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dUT_info" {
     block_c2dUT_info:
         const _c2dUT;
         const 1;
         const 30;
 },
 _c2dUZ() //  [R1]
         { []
         }
     {offset
       c2dUZ: // global
           if (P64[Sp + 8] == P64[R1 + 23]) goto c2dVj; else goto c2dVd;
       c2dVj: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2dVd: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dUZ_info" {
     block_c2dUZ_info:
         const _c2dUZ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.813048622 UTC

[section ""data" . GHC.Arr.$fEqSTArray_$c==_closure" {
     GHC.Arr.$fEqSTArray_$c==_closure:
         const GHC.Arr.$fEqSTArray_$c==_info;
 },
 GHC.Arr.$fEqSTArray_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c2dVQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2dVU; else goto c2dVV;
       c2dVU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fEqSTArray_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dVV: // global
           I64[Sp - 16] = block_c2dVN_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2dW4; else goto c2dVO;
       u2dW4: // global
           call _c2dVN(R1) args: 0, res: 0, upd: 0;
       c2dVO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fEqSTArray_$c==_info" {
     GHC.Arr.$fEqSTArray_$c==_info:
         const GHC.Arr.$fEqSTArray_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2dVN() //  [R1]
         { []
         }
     {offset
       c2dVN: // global
           I64[Sp] = block_c2dVT_info;
           _s2b4Z::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s2b4Z::P64;
           if (R1 & 7 != 0) goto u2dW3; else goto c2dVX;
       u2dW3: // global
           call _c2dVT(R1) args: 0, res: 0, upd: 0;
       c2dVX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dVN_info" {
     block_c2dVN_info:
         const _c2dVN;
         const 1;
         const 30;
 },
 _c2dVT() //  [R1]
         { []
         }
     {offset
       c2dVT: // global
           R1 = I64[((P64[Sp + 8] == P64[R1 + 23]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dVT_info" {
     block_c2dVT_info:
         const _c2dVT;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.819542694 UTC

[section ""data" . GHC.Arr.$fEqSTArray_closure" {
     GHC.Arr.$fEqSTArray_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Arr.$fEqSTArray_$c==_closure+2;
         const GHC.Arr.$fEqSTArray_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.830446905 UTC

[section ""data" . GHC.Arr.$w$cp1Ix1_closure" {
     GHC.Arr.$w$cp1Ix1_closure:
         const GHC.Arr.$w$cp1Ix1_info;
 },
 lvl50_s2b5b_entry() //  [R1]
         { []
         }
     {offset
       c2dWy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2dWz; else goto c2dWA;
       c2dWz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2dWA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl50_s2b5b_info" {
     lvl50_s2b5b_info:
         const lvl50_s2b5b_entry;
         const 1;
         const 16;
 },
 lvl51_s2b5c_entry() //  [R1]
         { []
         }
     {offset
       c2dWF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2dWG; else goto c2dWH;
       c2dWG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2dWH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl51_s2b5c_info" {
     lvl51_s2b5c_info:
         const lvl51_s2b5c_entry;
         const 1;
         const 16;
 },
 lvl52_s2b5d_entry() //  [R1]
         { []
         }
     {offset
       c2dWM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2dWN; else goto c2dWO;
       c2dWN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2dWO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl52_s2b5d_info" {
     lvl52_s2b5d_info:
         const lvl52_s2b5d_entry;
         const 1;
         const 16;
 },
 lvl53_s2b5e_entry() //  [R1]
         { []
         }
     {offset
       c2dWT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2dWU; else goto c2dWV;
       c2dWU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2dWV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl53_s2b5e_info" {
     lvl53_s2b5e_info:
         const lvl53_s2b5e_entry;
         const 1;
         const 16;
 },
 lvl54_s2b5f_entry() //  [R1]
         { []
         }
     {offset
       c2dX0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2dX1; else goto c2dX2;
       c2dX1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2dX2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl54_s2b5f_info" {
     lvl54_s2b5f_info:
         const lvl54_s2b5f_entry;
         const 1;
         const 16;
 },
 sat_s2b5E_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2dXe: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2dXf; else goto c2dXg;
       c2dXf: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dXg: // global
           I64[Sp - 24] = block_c2dX8_info;
           R6 = P64[R1 + 6];
           R5 = P64[R1 + 14];
           R4 = P64[R1 + 22];
           _s2b5C::P64 = R3;
           R3 = P64[R1 + 30];
           _s2b5B::P64 = R2;
           R2 = P64[R1 + 38];
           P64[Sp - 40] = _s2b5C::P64;
           P64[Sp - 32] = _s2b5B::P64;
           P64[Sp - 16] = _s2b5B::P64;
           P64[Sp - 8] = _s2b5C::P64;
           Sp = Sp - 40;
           call GHC.Classes.$fOrd(,,,,)_$c<_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2b5E_info" {
     sat_s2b5E_info:
         const sat_s2b5E_entry;
         const 5;
         const 8;
         const 8589934607;
 },
 _c2dX8() //  [R1]
         { []
         }
     {offset
       c2dX8: // global
           if (R1 & 7 == 1) goto c2dXb; else goto c2dXc;
       c2dXb: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2dXc: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dX8_info" {
     block_c2dX8_info:
         const _c2dX8;
         const 2;
         const 30;
 },
 sat_s2b5A_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2dXy: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2dXz; else goto c2dXA;
       c2dXz: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dXA: // global
           I64[Sp - 24] = block_c2dXs_info;
           R6 = P64[R1 + 6];
           R5 = P64[R1 + 14];
           R4 = P64[R1 + 22];
           _s2b5y::P64 = R3;
           R3 = P64[R1 + 30];
           _s2b5x::P64 = R2;
           R2 = P64[R1 + 38];
           P64[Sp - 40] = _s2b5y::P64;
           P64[Sp - 32] = _s2b5x::P64;
           P64[Sp - 16] = _s2b5x::P64;
           P64[Sp - 8] = _s2b5y::P64;
           Sp = Sp - 40;
           call GHC.Classes.$fOrd(,,,,)_$c<_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2b5A_info" {
     sat_s2b5A_info:
         const sat_s2b5A_entry;
         const 5;
         const 8;
         const 8589934607;
 },
 _c2dXs() //  [R1]
         { []
         }
     {offset
       c2dXs: // global
           if (R1 & 7 == 1) goto c2dXv; else goto c2dXw;
       c2dXv: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2dXw: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dXs_info" {
     block_c2dXs_info:
         const _c2dXs;
         const 2;
         const 30;
 },
 sat_s2b5w_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2dXS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2dXT; else goto c2dXU;
       c2dXT: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dXU: // global
           I64[Sp - 8] = block_c2dXM_info;
           R6 = P64[R1 + 6];
           R5 = P64[R1 + 14];
           R4 = P64[R1 + 22];
           _s2b5u::P64 = R3;
           R3 = P64[R1 + 30];
           _s2b5t::P64 = R2;
           R2 = P64[R1 + 38];
           P64[Sp - 24] = _s2b5t::P64;
           P64[Sp - 16] = _s2b5u::P64;
           Sp = Sp - 24;
           call GHC.Classes.$fOrd(,,,,)_$c<_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2b5w_info" {
     sat_s2b5w_info:
         const sat_s2b5w_entry;
         const 5;
         const 8;
         const 8589934607;
 },
 _c2dXM() //  [R1]
         { []
         }
     {offset
       c2dXM: // global
           if (R1 & 7 == 1) goto c2dXP; else goto c2dXQ;
       c2dXP: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2dXQ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dXM_info" {
     block_c2dXM_info:
         const _c2dXM;
         const 0;
         const 30;
 },
 sat_s2b5s_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2dY6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2dY7; else goto c2dY8;
       c2dY7: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dY8: // global
           R6 = P64[R1 + 6];
           R5 = P64[R1 + 14];
           R4 = P64[R1 + 22];
           _s2b5r::P64 = R3;
           R3 = P64[R1 + 30];
           _s2b5q::P64 = R2;
           R2 = P64[R1 + 38];
           P64[Sp - 16] = _s2b5r::P64;
           P64[Sp - 8] = _s2b5q::P64;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,,,,)_$c<_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2b5s_info" {
     sat_s2b5s_info:
         const sat_s2b5s_entry;
         const 5;
         const 8;
         const 8589934607;
 },
 sat_s2b5p_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2dYk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2dYl; else goto c2dYm;
       c2dYl: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dYm: // global
           I64[Sp - 8] = block_c2dYe_info;
           R6 = P64[R1 + 6];
           R5 = P64[R1 + 14];
           R4 = P64[R1 + 22];
           _s2b5n::P64 = R3;
           R3 = P64[R1 + 30];
           _s2b5m::P64 = R2;
           R2 = P64[R1 + 38];
           P64[Sp - 24] = _s2b5n::P64;
           P64[Sp - 16] = _s2b5m::P64;
           Sp = Sp - 24;
           call GHC.Classes.$fOrd(,,,,)_$c<_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2b5p_info" {
     sat_s2b5p_info:
         const sat_s2b5p_entry;
         const 5;
         const 8;
         const 8589934607;
 },
 _c2dYe() //  [R1]
         { []
         }
     {offset
       c2dYe: // global
           if (R1 & 7 == 1) goto c2dYh; else goto c2dYi;
       c2dYh: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2dYi: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2dYe_info" {
     block_c2dYe_info:
         const _c2dYe;
         const 0;
         const 30;
 },
 sat_s2b5l_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2dYy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2dYz; else goto c2dYA;
       c2dYz: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dYA: // global
           R6 = P64[R1 + 6];
           R5 = P64[R1 + 14];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 30];
           _B2::P64 = R2;
           R2 = P64[R1 + 38];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,,,,)_$c<_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2b5l_info" {
     sat_s2b5l_info:
         const sat_s2b5l_entry;
         const 5;
         const 8;
         const 8589934607;
 },
 sat_s2b5k_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2dYG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2dYH; else goto c2dYI;
       c2dYH: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dYI: // global
           R6 = P64[R1 + 6];
           R5 = P64[R1 + 14];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 30];
           _B2::P64 = R2;
           R2 = P64[R1 + 38];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,,,,)_$ccompare_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2b5k_info" {
     sat_s2b5k_info:
         const sat_s2b5k_entry;
         const 5;
         const 8;
         const 8589934607;
 },
 sat_s2b5j_entry() //  [R1]
         { []
         }
     {offset
       c2dYQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2dYR; else goto c2dYS;
       c2dYR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2dYS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c2dYN_info;
           R6 = P64[R1 + 16];
           R5 = P64[R1 + 24];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 40];
           R2 = P64[R1 + 48];
           Sp = Sp - 24;
           call GHC.Classes.$w$cp1Ord1_entry(R6,
                                             R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2b5j_info" {
     sat_s2b5j_info:
         const sat_s2b5j_entry;
         const 5;
         const 15;
 },
 _c2dYN() //  [R1, R2]
         { []
         }
     {offset
       c2dYN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2dYV; else goto c2dYU;
       c2dYV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c2dYU: // global
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2dYN_info" {
     block_c2dYN_info:
         const _c2dYN;
         const 0;
         const 30;
 },
 GHC.Arr.$w$cp1Ix1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2dYW: // global
           _s2b5a::P64 = R6;
           _s2b59::P64 = R5;
           _s2b58::P64 = R4;
           _s2b57::P64 = R3;
           _s2b56::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c2dYX; else goto c2dYY;
       c2dYY: // global
           Hp = Hp + 512;
           if (Hp > HpLim) (likely: False) goto c2dZ0; else goto c2dYZ;
       c2dZ0: // global
           HpAlloc = 512;
           goto c2dYX;
       c2dYX: // global
           R6 = _s2b5a::P64;
           R5 = _s2b59::P64;
           R4 = _s2b58::P64;
           R3 = _s2b57::P64;
           R2 = _s2b56::P64;
           R1 = GHC.Arr.$w$cp1Ix1_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2dYZ: // global
           I64[Hp - 504] = lvl50_s2b5b_info;
           P64[Hp - 488] = _s2b5a::P64;
           I64[Hp - 480] = lvl51_s2b5c_info;
           P64[Hp - 464] = _s2b59::P64;
           I64[Hp - 456] = lvl52_s2b5d_info;
           P64[Hp - 440] = _s2b58::P64;
           I64[Hp - 432] = lvl53_s2b5e_info;
           P64[Hp - 416] = _s2b57::P64;
           I64[Hp - 408] = lvl54_s2b5f_info;
           P64[Hp - 392] = _s2b56::P64;
           I64[Hp - 384] = sat_s2b5E_info;
           _c2dWu::P64 = Hp - 504;
           P64[Hp - 376] = _c2dWu::P64;
           _c2dWB::P64 = Hp - 480;
           P64[Hp - 368] = _c2dWB::P64;
           _c2dWI::P64 = Hp - 456;
           P64[Hp - 360] = _c2dWI::P64;
           _c2dWP::P64 = Hp - 432;
           P64[Hp - 352] = _c2dWP::P64;
           _c2dWW::P64 = Hp - 408;
           P64[Hp - 344] = _c2dWW::P64;
           I64[Hp - 336] = sat_s2b5A_info;
           P64[Hp - 328] = _c2dWu::P64;
           P64[Hp - 320] = _c2dWB::P64;
           P64[Hp - 312] = _c2dWI::P64;
           P64[Hp - 304] = _c2dWP::P64;
           P64[Hp - 296] = _c2dWW::P64;
           I64[Hp - 288] = sat_s2b5w_info;
           P64[Hp - 280] = _c2dWu::P64;
           P64[Hp - 272] = _c2dWB::P64;
           P64[Hp - 264] = _c2dWI::P64;
           P64[Hp - 256] = _c2dWP::P64;
           P64[Hp - 248] = _c2dWW::P64;
           I64[Hp - 240] = sat_s2b5s_info;
           P64[Hp - 232] = _c2dWu::P64;
           P64[Hp - 224] = _c2dWB::P64;
           P64[Hp - 216] = _c2dWI::P64;
           P64[Hp - 208] = _c2dWP::P64;
           P64[Hp - 200] = _c2dWW::P64;
           I64[Hp - 192] = sat_s2b5p_info;
           P64[Hp - 184] = _c2dWu::P64;
           P64[Hp - 176] = _c2dWB::P64;
           P64[Hp - 168] = _c2dWI::P64;
           P64[Hp - 160] = _c2dWP::P64;
           P64[Hp - 152] = _c2dWW::P64;
           I64[Hp - 144] = sat_s2b5l_info;
           P64[Hp - 136] = _c2dWu::P64;
           P64[Hp - 128] = _c2dWB::P64;
           P64[Hp - 120] = _c2dWI::P64;
           P64[Hp - 112] = _c2dWP::P64;
           P64[Hp - 104] = _c2dWW::P64;
           I64[Hp - 96] = sat_s2b5k_info;
           P64[Hp - 88] = _c2dWu::P64;
           P64[Hp - 80] = _c2dWB::P64;
           P64[Hp - 72] = _c2dWI::P64;
           P64[Hp - 64] = _c2dWP::P64;
           P64[Hp - 56] = _c2dWW::P64;
           I64[Hp - 48] = sat_s2b5j_info;
           P64[Hp - 32] = _c2dWu::P64;
           P64[Hp - 24] = _c2dWB::P64;
           P64[Hp - 16] = _c2dWI::P64;
           P64[Hp - 8] = _c2dWP::P64;
           P64[Hp] = _c2dWW::P64;
           R6 = Hp - 286;
           R5 = Hp - 238;
           R4 = Hp - 190;
           R3 = Hp - 142;
           R2 = Hp - 94;
           R1 = Hp - 48;
           P64[Sp - 16] = Hp - 334;
           P64[Sp - 8] = Hp - 382;
           Sp = Sp - 16;
           call (I64[P64[Sp + 16]])(R6,
                                    R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$cp1Ix1_info" {
     GHC.Arr.$w$cp1Ix1_info:
         const GHC.Arr.$w$cp1Ix1_entry;
         const 0;
         const 14;
         const 21474836505;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.8676422 UTC

[section ""data" . GHC.Arr.$fIx(,,,,)_$cp1Ix_closure" {
     GHC.Arr.$fIx(,,,,)_$cp1Ix_closure:
         const GHC.Arr.$fIx(,,,,)_$cp1Ix_info;
 },
 GHC.Arr.$fIx(,,,,)_$cp1Ix_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2e1b: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c2e1c; else goto c2e1d;
       c2e1c: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,,)_$cp1Ix_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2e1d: // global
           I64[Sp - 8] = block_c2e16_info;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Arr.$w$cp1Ix1_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2) args: 8, res: 24, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,,)_$cp1Ix_info" {
     GHC.Arr.$fIx(,,,,)_$cp1Ix_info:
         const GHC.Arr.$fIx(,,,,)_$cp1Ix_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c2e16() //  [R1, R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2e16: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 16] = R1;
           Sp = Sp - 48;
           call _c2e17() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2e16_info" {
     block_c2e16_info:
         const _c2e16;
         const 0;
         const 30;
 },
 _c2e17() //  []
         { []
         }
     {offset
       c2e17: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c2e1g; else goto c2e1f;
       c2e1g: // global
           HpAlloc = 72;
           I64[Sp] = block_c2e17_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2e1f: // global
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 56];
           R1 = Hp - 63;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e17_info" {
     block_c2e17_info:
         const _c2e17;
         const 8;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.885769435 UTC

[section ""data" . GHC.Arr.$fIx(,,,,)_$crange_closure" {
     GHC.Arr.$fIx(,,,,)_$crange_closure:
         const GHC.Arr.$fIx(,,,,)_$crange_info;
 },
 lvl50_s2b6e_entry() //  [R1]
         { []
         }
     {offset
       c2e24: // global
           _s2b6e::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c2e25; else goto c2e26;
       c2e26: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2e28; else goto c2e27;
       c2e28: // global
           HpAlloc = 24;
           goto c2e25;
       c2e25: // global
           R1 = _s2b6e::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2e27: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2b6e::P64;
           _s2b5X::P64 = P64[_s2b6e::P64 + 16];
           _s2b67::P64 = P64[_s2b6e::P64 + 24];
           _s2b6d::P64 = P64[_s2b6e::P64 + 32];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2b67::P64;
           P64[Hp] = _s2b6d::P64;
           R2 = _s2b5X::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Arr.range_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl50_s2b6e_info" {
     lvl50_s2b6e_info:
         const lvl50_s2b6e_entry;
         const 3;
         const 15;
 },
 lvl51_s2b6g_entry() //  [R1]
         { []
         }
     {offset
       c2e2e: // global
           _s2b6g::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c2e2f; else goto c2e2g;
       c2e2g: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2e2i; else goto c2e2h;
       c2e2i: // global
           HpAlloc = 24;
           goto c2e2f;
       c2e2f: // global
           R1 = _s2b6g::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2e2h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2b6g::P64;
           _s2b5W::P64 = P64[_s2b6g::P64 + 16];
           _s2b66::P64 = P64[_s2b6g::P64 + 24];
           _s2b6c::P64 = P64[_s2b6g::P64 + 32];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2b66::P64;
           P64[Hp] = _s2b6c::P64;
           R2 = _s2b5W::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Arr.range_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl51_s2b6g_info" {
     lvl51_s2b6g_info:
         const lvl51_s2b6g_entry;
         const 3;
         const 15;
 },
 lvl52_s2b6i_entry() //  [R1]
         { []
         }
     {offset
       c2e2o: // global
           _s2b6i::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c2e2p; else goto c2e2q;
       c2e2q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2e2s; else goto c2e2r;
       c2e2s: // global
           HpAlloc = 24;
           goto c2e2p;
       c2e2p: // global
           R1 = _s2b6i::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2e2r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2b6i::P64;
           _s2b5V::P64 = P64[_s2b6i::P64 + 16];
           _s2b65::P64 = P64[_s2b6i::P64 + 24];
           _s2b6b::P64 = P64[_s2b6i::P64 + 32];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2b65::P64;
           P64[Hp] = _s2b6b::P64;
           R2 = _s2b5V::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Arr.range_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl52_s2b6i_info" {
     lvl52_s2b6i_info:
         const lvl52_s2b6i_entry;
         const 3;
         const 15;
 },
 lvl53_s2b6k_entry() //  [R1]
         { []
         }
     {offset
       c2e2y: // global
           _s2b6k::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c2e2z; else goto c2e2A;
       c2e2A: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2e2C; else goto c2e2B;
       c2e2C: // global
           HpAlloc = 24;
           goto c2e2z;
       c2e2z: // global
           R1 = _s2b6k::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2e2B: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2b6k::P64;
           _s2b5U::P64 = P64[_s2b6k::P64 + 16];
           _s2b64::P64 = P64[_s2b6k::P64 + 24];
           _s2b6a::P64 = P64[_s2b6k::P64 + 32];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2b64::P64;
           P64[Hp] = _s2b6a::P64;
           R2 = _s2b5U::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Arr.range_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl53_s2b6k_info" {
     lvl53_s2b6k_info:
         const lvl53_s2b6k_entry;
         const 3;
         const 15;
 },
 go4_s2b6K_entry() //  [R1, R2]
         { []
         }
     {offset
       c2e3B: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2e3C; else goto c2e3D;
       c2e3C: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2e3D: // global
           I64[Sp - 56] = block_c2e3u_info;
           _s2b6K::P64 = R1;
           _s2b6p::P64 = P64[R1 + 7];
           _s2b6v::P64 = P64[R1 + 15];
           _s2b6B::P64 = P64[R1 + 23];
           _s2b6H::P64 = P64[R1 + 31];
           _s2b6J::P64 = P64[R1 + 39];
           R1 = R2;
           P64[Sp - 48] = _s2b6p::P64;
           P64[Sp - 40] = _s2b6v::P64;
           P64[Sp - 32] = _s2b6B::P64;
           P64[Sp - 24] = _s2b6H::P64;
           P64[Sp - 16] = _s2b6J::P64;
           P64[Sp - 8] = _s2b6K::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u2e3P; else goto c2e3v;
       u2e3P: // global
           call _c2e3u(R1) args: 0, res: 0, upd: 0;
       c2e3v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go4_s2b6K_info" {
     go4_s2b6K_info:
         const go4_s2b6K_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 _c2e3u() //  [R1]
         { []
         }
     {offset
       c2e3u: // global
           if (R1 & 7 == 1) goto c2e3y; else goto c2e3z;
       c2e3y: // global
           R1 = P64[Sp + 40] & (-8);
           Sp = Sp + 56;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2e3z: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto c2e3O; else goto c2e3N;
       c2e3O: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2e3N: // global
           _s2b6N::P64 = P64[R1 + 6];
           _s2b6O::P64 = P64[R1 + 14];
           I64[Hp - 96] = stg_ap_2_upd_info;
           P64[Hp - 80] = P64[Sp + 48];
           P64[Hp - 72] = _s2b6O::P64;
           I64[Hp - 64] = (,,,,)_con_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = _s2b6N::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 63;
           P64[Hp] = Hp - 96;
           R1 = Hp - 14;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e3u_info" {
     block_c2e3u_info:
         const _c2e3u;
         const 6;
         const 30;
 },
 go3_s2b6E_entry() //  [R1, R2]
         { []
         }
     {offset
       c2e3U: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2e3V; else goto c2e3W;
       c2e3V: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2e3W: // global
           I64[Sp - 56] = block_c2e3i_info;
           _s2b6E::P64 = R1;
           _s2b6e::P64 = P64[R1 + 7];
           _s2b6p::P64 = P64[R1 + 15];
           _s2b6v::P64 = P64[R1 + 23];
           _s2b6B::P64 = P64[R1 + 31];
           _s2b6D::P64 = P64[R1 + 39];
           R1 = R2;
           P64[Sp - 48] = _s2b6e::P64;
           P64[Sp - 40] = _s2b6p::P64;
           P64[Sp - 32] = _s2b6v::P64;
           P64[Sp - 24] = _s2b6B::P64;
           P64[Sp - 16] = _s2b6D::P64;
           P64[Sp - 8] = _s2b6E::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u2e42; else goto c2e3j;
       u2e42: // global
           call _c2e3i(R1) args: 0, res: 0, upd: 0;
       c2e3j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go3_s2b6E_info" {
     go3_s2b6E_info:
         const go3_s2b6E_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 _c2e3i() //  [R1]
         { []
         }
     {offset
       c2e3i: // global
           if (R1 & 7 == 1) goto c2e3R; else goto c2e3S;
       c2e3R: // global
           R1 = P64[Sp + 40] & (-8);
           Sp = Sp + 56;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2e3S: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c2e41; else goto c2e40;
       c2e41: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2e40: // global
           _s2b6H::P64 = P64[R1 + 6];
           _s2b6I::P64 = P64[R1 + 14];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 48];
           P64[Hp - 48] = _s2b6I::P64;
           I64[Hp - 40] = go4_s2b6K_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = _s2b6H::P64;
           P64[Hp] = Hp - 72;
           R2 = P64[Sp + 8];
           R1 = Hp - 39;
           Sp = Sp + 56;
           call go4_s2b6K_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e3i_info" {
     block_c2e3i_info:
         const _c2e3i;
         const 6;
         const 30;
 },
 go2_s2b6y_entry() //  [R1, R2]
         { []
         }
     {offset
       c2e47: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2e48; else goto c2e49;
       c2e48: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2e49: // global
           I64[Sp - 56] = block_c2e36_info;
           _s2b6y::P64 = R1;
           _s2b6e::P64 = P64[R1 + 7];
           _s2b6g::P64 = P64[R1 + 15];
           _s2b6p::P64 = P64[R1 + 23];
           _s2b6v::P64 = P64[R1 + 31];
           _s2b6x::P64 = P64[R1 + 39];
           R1 = R2;
           P64[Sp - 48] = _s2b6e::P64;
           P64[Sp - 40] = _s2b6g::P64;
           P64[Sp - 32] = _s2b6p::P64;
           P64[Sp - 24] = _s2b6v::P64;
           P64[Sp - 16] = _s2b6x::P64;
           P64[Sp - 8] = _s2b6y::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u2e4f; else goto c2e37;
       u2e4f: // global
           call _c2e36(R1) args: 0, res: 0, upd: 0;
       c2e37: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go2_s2b6y_info" {
     go2_s2b6y_info:
         const go2_s2b6y_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 _c2e36() //  [R1]
         { []
         }
     {offset
       c2e36: // global
           if (R1 & 7 == 1) goto c2e44; else goto c2e45;
       c2e44: // global
           R1 = P64[Sp + 40] & (-8);
           Sp = Sp + 56;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2e45: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c2e4e; else goto c2e4d;
       c2e4e: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2e4d: // global
           _s2b6B::P64 = P64[R1 + 6];
           _s2b6C::P64 = P64[R1 + 14];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 48];
           P64[Hp - 48] = _s2b6C::P64;
           I64[Hp - 40] = go3_s2b6E_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = _s2b6B::P64;
           P64[Hp] = Hp - 72;
           R2 = P64[Sp + 16];
           R1 = Hp - 39;
           Sp = Sp + 56;
           call go3_s2b6E_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e36_info" {
     block_c2e36_info:
         const _c2e36;
         const 6;
         const 30;
 },
 go1_s2b6s_entry() //  [R1, R2]
         { []
         }
     {offset
       c2e4k: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2e4l; else goto c2e4m;
       c2e4l: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2e4m: // global
           I64[Sp - 56] = block_c2e2U_info;
           _s2b6s::P64 = R1;
           _s2b6e::P64 = P64[R1 + 7];
           _s2b6g::P64 = P64[R1 + 15];
           _s2b6i::P64 = P64[R1 + 23];
           _s2b6p::P64 = P64[R1 + 31];
           _s2b6r::P64 = P64[R1 + 39];
           R1 = R2;
           P64[Sp - 48] = _s2b6e::P64;
           P64[Sp - 40] = _s2b6g::P64;
           P64[Sp - 32] = _s2b6i::P64;
           P64[Sp - 24] = _s2b6p::P64;
           P64[Sp - 16] = _s2b6r::P64;
           P64[Sp - 8] = _s2b6s::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u2e4s; else goto c2e2V;
       u2e4s: // global
           call _c2e2U(R1) args: 0, res: 0, upd: 0;
       c2e2V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s2b6s_info" {
     go1_s2b6s_info:
         const go1_s2b6s_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 _c2e2U() //  [R1]
         { []
         }
     {offset
       c2e2U: // global
           if (R1 & 7 == 1) goto c2e4h; else goto c2e4i;
       c2e4h: // global
           R1 = P64[Sp + 40] & (-8);
           Sp = Sp + 56;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2e4i: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c2e4r; else goto c2e4q;
       c2e4r: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2e4q: // global
           _s2b6v::P64 = P64[R1 + 6];
           _s2b6w::P64 = P64[R1 + 14];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 48];
           P64[Hp - 48] = _s2b6w::P64;
           I64[Hp - 40] = go2_s2b6y_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = _s2b6v::P64;
           P64[Hp] = Hp - 72;
           R2 = P64[Sp + 24];
           R1 = Hp - 39;
           Sp = Sp + 56;
           call go2_s2b6y_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e2U_info" {
     block_c2e2U_info:
         const _c2e2U;
         const 6;
         const 30;
 },
 go_s2b6m_entry() //  [R1, R2]
         { []
         }
     {offset
       c2e4x: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2e4y; else goto c2e4z;
       c2e4y: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2e4z: // global
           I64[Sp - 48] = block_c2e2I_info;
           _s2b6m::P64 = R1;
           _s2b6e::P64 = P64[R1 + 7];
           _s2b6g::P64 = P64[R1 + 15];
           _s2b6i::P64 = P64[R1 + 23];
           _s2b6k::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s2b6e::P64;
           P64[Sp - 32] = _s2b6g::P64;
           P64[Sp - 24] = _s2b6i::P64;
           P64[Sp - 16] = _s2b6k::P64;
           P64[Sp - 8] = _s2b6m::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2e4F; else goto c2e2J;
       u2e4F: // global
           call _c2e2I(R1) args: 0, res: 0, upd: 0;
       c2e2J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s2b6m_info" {
     go_s2b6m_info:
         const go_s2b6m_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _c2e2I() //  [R1]
         { []
         }
     {offset
       c2e2I: // global
           if (R1 & 7 == 1) goto c2e4u; else goto c2e4v;
       c2e4u: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2e4v: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c2e4E; else goto c2e4D;
       c2e4E: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2e4D: // global
           _s2b6p::P64 = P64[R1 + 6];
           _s2b6q::P64 = P64[R1 + 14];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 40];
           P64[Hp - 48] = _s2b6q::P64;
           I64[Hp - 40] = go1_s2b6s_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s2b6p::P64;
           P64[Hp] = Hp - 72;
           R2 = P64[Sp + 32];
           R1 = Hp - 39;
           Sp = Sp + 48;
           call go1_s2b6s_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e2I_info" {
     block_c2e2I_info:
         const _c2e2I;
         const 5;
         const 30;
 },
 GHC.Arr.$fIx(,,,,)_$crange_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2e4G: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c2e4J; else goto c2e4K;
       c2e4J: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,,)_$crange_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c2e4K: // global
           I64[Sp - 40] = block_c2e1K_info;
           R1 = P64[Sp];
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2e4W; else goto c2e1L;
       u2e4W: // global
           call _c2e1K(R1) args: 0, res: 0, upd: 0;
       c2e1L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,,)_$crange_info" {
     GHC.Arr.$fIx(,,,,)_$crange_info:
         const GHC.Arr.$fIx(,,,,)_$crange_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _c2e1K() //  [R1]
         { []
         }
     {offset
       c2e1K: // global
           I64[Sp - 8] = block_c2e1P_info;
           _s2b61::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2b61::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2e4U; else goto c2e1Q;
       u2e4U: // global
           call _c2e1P(R1) args: 0, res: 0, upd: 0;
       c2e1Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e1K_info" {
     block_c2e1K_info:
         const _c2e1K;
         const 5;
         const 30;
 },
 _c2e1P() //  [R1]
         { []
         }
     {offset
       c2e1P: // global
           I64[Sp - 32] = block_c2e1U_info;
           _s2b63::P64 = P64[R1 + 7];
           _s2b64::P64 = P64[R1 + 15];
           _s2b65::P64 = P64[R1 + 23];
           _s2b66::P64 = P64[R1 + 31];
           _s2b67::P64 = P64[R1 + 39];
           R1 = P64[Sp + 8];
           P64[Sp - 24] = _s2b65::P64;
           P64[Sp - 16] = _s2b66::P64;
           P64[Sp - 8] = _s2b67::P64;
           P64[Sp] = _s2b64::P64;
           P64[Sp + 8] = _s2b63::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2e4V; else goto c2e1V;
       u2e4V: // global
           call _c2e1U(R1) args: 0, res: 0, upd: 0;
       c2e1V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e1P_info" {
     block_c2e1P_info:
         const _c2e1P;
         const 6;
         const 30;
 },
 _c2e1U() //  [R1]
         { []
         }
     {offset
       c2e1U: // global
           Hp = Hp + 224;
           if (Hp > HpLim) (likely: False) goto c2e4P; else goto c2e4O;
       c2e4P: // global
           HpAlloc = 224;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2e4O: // global
           _s2b69::P64 = P64[R1 + 7];
           _s2b6a::P64 = P64[R1 + 15];
           _s2b6b::P64 = P64[R1 + 23];
           _s2b6c::P64 = P64[R1 + 31];
           _s2b6d::P64 = P64[R1 + 39];
           I64[Hp - 216] = lvl50_s2b6e_info;
           P64[Hp - 200] = P64[Sp + 72];
           P64[Hp - 192] = P64[Sp + 24];
           P64[Hp - 184] = _s2b6d::P64;
           I64[Hp - 176] = lvl51_s2b6g_info;
           P64[Hp - 160] = P64[Sp + 64];
           P64[Hp - 152] = P64[Sp + 16];
           P64[Hp - 144] = _s2b6c::P64;
           I64[Hp - 136] = lvl52_s2b6i_info;
           P64[Hp - 120] = P64[Sp + 56];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = _s2b6b::P64;
           I64[Hp - 96] = lvl53_s2b6k_info;
           P64[Hp - 80] = P64[Sp + 48];
           P64[Hp - 72] = P64[Sp + 32];
           P64[Hp - 64] = _s2b6a::P64;
           I64[Hp - 56] = go_s2b6m_info;
           P64[Hp - 48] = Hp - 216;
           P64[Hp - 40] = Hp - 176;
           P64[Hp - 32] = Hp - 136;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = _s2b69::P64;
           I64[Sp + 72] = block_c2e4I_info;
           R2 = P64[Sp + 80];
           I64[Sp + 56] = stg_ap_p_info;
           P64[Sp + 64] = Hp - 15;
           P64[Sp + 80] = Hp - 55;
           Sp = Sp + 56;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e1U_info" {
     block_c2e1U_info:
         const _c2e1U;
         const 10;
         const 30;
 },
 _c2e4I() //  [R1]
         { []
         }
     {offset
       c2e4I: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s2b6m_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e4I_info" {
     block_c2e4I_info:
         const _c2e4I;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.932397492 UTC

[section ""data" . GHC.Arr.$fIx(,,,,)_$cunsafeIndex_closure" {
     GHC.Arr.$fIx(,,,,)_$cunsafeIndex_closure:
         const GHC.Arr.$fIx(,,,,)_$cunsafeIndex_info;
 },
 GHC.Arr.$fIx(,,,,)_$cunsafeIndex_slow() //  [R1]
         { []
         }
     {offset
       c2e7U: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$fIx(,,,,)_$cunsafeIndex_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2,
                                                       R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.Arr.$fIx(,,,,)_$cunsafeIndex_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2e81: // global
           if ((Sp + -160) < SpLim) (likely: False) goto c2e9n; else goto c2e9o;
       c2e9n: // global
           R1 = GHC.Arr.$fIx(,,,,)_$cunsafeIndex_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c2e9o: // global
           I64[Sp - 40] = block_c2e7Y_info;
           R1 = P64[Sp];
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2e9P; else goto c2e7Z;
       u2e9P: // global
           call _c2e7Y(R1) args: 0, res: 0, upd: 0;
       c2e7Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,,)_$cunsafeIndex_info" {
     GHC.Arr.$fIx(,,,,)_$cunsafeIndex_info:
         const GHC.Arr.$fIx(,,,,)_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const GHC.Arr.$fIx(,,,,)_$cunsafeIndex_slow;
 },
 _c2e7Y() //  [R1]
         { []
         }
     {offset
       c2e7Y: // global
           I64[Sp - 8] = block_c2e84_info;
           _s2b72::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2b72::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2e9O; else goto c2e85;
       u2e9O: // global
           call _c2e84(R1) args: 0, res: 0, upd: 0;
       c2e85: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e7Y_info" {
     block_c2e7Y_info:
         const _c2e7Y;
         const 6;
         const 30;
 },
 _c2e84() //  [R1]
         { []
         }
     {offset
       c2e84: // global
           I64[Sp - 32] = block_c2e89_info;
           _s2b74::P64 = P64[R1 + 7];
           _s2b75::P64 = P64[R1 + 15];
           _s2b76::P64 = P64[R1 + 23];
           _s2b77::P64 = P64[R1 + 31];
           _s2b78::P64 = P64[R1 + 39];
           R1 = P64[Sp + 8];
           P64[Sp - 24] = _s2b76::P64;
           P64[Sp - 16] = _s2b77::P64;
           P64[Sp - 8] = _s2b78::P64;
           P64[Sp] = _s2b75::P64;
           P64[Sp + 8] = _s2b74::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2e9Q; else goto c2e8a;
       u2e9Q: // global
           call _c2e89(R1) args: 0, res: 0, upd: 0;
       c2e8a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e84_info" {
     block_c2e84_info:
         const _c2e84;
         const 7;
         const 30;
 },
 _c2e89() //  [R1]
         { []
         }
     {offset
       c2e89: // global
           I64[Sp - 32] = block_c2e8e_info;
           _s2b7a::P64 = P64[R1 + 7];
           _s2b7b::P64 = P64[R1 + 15];
           _s2b7c::P64 = P64[R1 + 23];
           _s2b7d::P64 = P64[R1 + 31];
           _s2b7e::P64 = P64[R1 + 39];
           R1 = P64[Sp + 88];
           P64[Sp - 24] = _s2b7c::P64;
           P64[Sp - 16] = _s2b7d::P64;
           P64[Sp - 8] = _s2b7e::P64;
           P64[Sp] = _s2b7b::P64;
           P64[Sp + 88] = _s2b7a::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2e9R; else goto c2e8f;
       u2e9R: // global
           call _c2e8e(R1) args: 0, res: 0, upd: 0;
       c2e8f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e89_info" {
     block_c2e89_info:
         const _c2e89;
         const 11;
         const 30;
 },
 _c2e8e() //  [R1]
         { []
         }
     {offset
       c2e8e: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2e9u; else goto c2e9t;
       c2e9u: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2e9t: // global
           _s2b7g::P64 = P64[R1 + 7];
           _s2b7h::P64 = P64[R1 + 15];
           _s2b7i::P64 = P64[R1 + 23];
           _s2b7j::P64 = P64[R1 + 31];
           _s2b7k::P64 = P64[R1 + 39];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 24];
           I64[Sp - 24] = block_c2e8k_info;
           R2 = P64[Sp + 104];
           I64[Sp - 48] = stg_ap_pp_info;
           _c2e8j::P64 = Hp - 15;
           P64[Sp - 40] = _c2e8j::P64;
           P64[Sp - 32] = _s2b7k::P64;
           P64[Sp - 16] = _s2b7i::P64;
           P64[Sp - 8] = _s2b7j::P64;
           P64[Sp] = _s2b7h::P64;
           P64[Sp + 24] = _s2b7g::P64;
           P64[Sp + 56] = _c2e8j::P64;
           Sp = Sp - 48;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e8e_info" {
     block_c2e8e_info:
         const _c2e8e;
         const 15;
         const 30;
 },
 _c2e8k() //  [R1]
         { []
         }
     {offset
       c2e8k: // global
           I64[Sp] = block_c2e8o_info;
           R2 = P64[Sp + 128];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 80];
           I64[Sp + 128] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e8k_info" {
     block_c2e8k_info:
         const _c2e8k;
         const 18;
         const 30;
 },
 _c2e8o() //  [R1]
         { []
         }
     {offset
       c2e8o: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2e9y; else goto c2e9x;
       c2e9y: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2e9x: // global
           _s2b7q::I64 = I64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 72];
           P64[Hp] = P64[Sp + 40];
           I64[Sp] = block_c2e8t_info;
           R2 = P64[Sp + 120];
           I64[Sp - 24] = stg_ap_pp_info;
           _c2e8s::P64 = Hp - 15;
           P64[Sp - 16] = _c2e8s::P64;
           P64[Sp - 8] = P64[Sp + 16];
           I64[Sp + 72] = _s2b7q::I64;
           P64[Sp + 80] = _c2e8s::P64;
           Sp = Sp - 24;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e8o_info" {
     block_c2e8o_info:
         const _c2e8o;
         const 2129938;
         const 30;
 },
 _c2e8t() //  [R1]
         { []
         }
     {offset
       c2e8t: // global
           I64[Sp] = block_c2e8x_info;
           R2 = P64[Sp + 120];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 80];
           I64[Sp + 120] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e8t_info" {
     block_c2e8t_info:
         const _c2e8t;
         const 2114706;
         const 30;
 },
 _c2e8x() //  [R1]
         { []
         }
     {offset
       c2e8x: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2e9C; else goto c2e9B;
       c2e9C: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2e9B: // global
           _s2b7w::I64 = I64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 64];
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 16] = block_c2e8C_info;
           R2 = P64[Sp + 112];
           I64[Sp - 8] = stg_ap_pp_info;
           _c2e8B::P64 = Hp - 15;
           P64[Sp] = _c2e8B::P64;
           I64[Sp + 64] = _s2b7w::I64;
           P64[Sp + 80] = _c2e8B::P64;
           Sp = Sp - 8;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e8x_info" {
     block_c2e8x_info:
         const _c2e8x;
         const 3196050;
         const 30;
 },
 _c2e8C() //  [R1]
         { []
         }
     {offset
       c2e8C: // global
           I64[Sp] = block_c2e8G_info;
           R2 = P64[Sp + 96];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 64];
           I64[Sp + 96] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e8C_info" {
     block_c2e8C_info:
         const _c2e8C;
         const 792976;
         const 30;
 },
 _c2e8G() //  [R1]
         { []
         }
     {offset
       c2e8G: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2e9G; else goto c2e9F;
       c2e9G: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2e9F: // global
           _s2b7C::I64 = I64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 72];
           P64[Hp] = P64[Sp + 40];
           I64[Sp + 24] = block_c2e8L_info;
           R2 = P64[Sp + 88];
           I64[Sp] = stg_ap_pp_info;
           _s2b7h::P64 = P64[Sp + 8];
           _c2e8K::P64 = Hp - 15;
           P64[Sp + 8] = _c2e8K::P64;
           P64[Sp + 16] = _s2b7h::P64;
           I64[Sp + 64] = _s2b7C::I64;
           P64[Sp + 72] = _c2e8K::P64;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e8G_info" {
     block_c2e8G_info:
         const _c2e8G;
         const 932240;
         const 30;
 },
 _c2e8L() //  [R1]
         { []
         }
     {offset
       c2e8L: // global
           I64[Sp] = block_c2e8P_info;
           R2 = P64[Sp + 64];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 48];
           I64[Sp + 64] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e8L_info" {
     block_c2e8L_info:
         const _c2e8L;
         const 116621;
         const 30;
 },
 _c2e8P() //  [R1]
         { []
         }
     {offset
       c2e8P: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2e9K; else goto c2e9J;
       c2e9K: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2e9J: // global
           _s2b7I::I64 = I64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 104];
           I64[Sp + 16] = block_c2e8U_info;
           R2 = P64[Sp + 96];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Hp - 15;
           I64[Sp + 104] = _s2b7I::I64;
           Sp = Sp - 8;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e8P_info" {
     block_c2e8P_info:
         const _c2e8P;
         const 126861;
         const 30;
 },
 _c2e8U() //  [R1]
         { []
         }
     {offset
       c2e8U: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2e9N; else goto c2e9M;
       c2e9N: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2e9M: // global
           _s2b7T::I64 = I64[Sp + 72] + I64[Sp + 16] * (I64[Sp + 64] + I64[Sp + 8] * (I64[Sp + 56] + I64[Sp + 24] * (I64[Sp + 48] + I64[Sp + 88] * I64[R1 + 7])));
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2b7T::I64;
           R1 = Hp - 7;
           Sp = Sp + 96;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2e8U_info" {
     block_c2e8U_info:
         const _c2e8U;
         const 131019;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.96108174 UTC

[section ""data" . GHC.Arr.$fIx(,,,,)_$cunsafeRangeSize_closure" {
     GHC.Arr.$fIx(,,,,)_$cunsafeRangeSize_closure:
         const GHC.Arr.$fIx(,,,,)_$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIx(,,,,)_$cunsafeRangeSize_entry() //  [R2, R3, R4, R5,
                                                   R6]
         { []
         }
     {offset
       c2ebQ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2ec1; else goto c2ec2;
       c2ec1: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,,)_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c2ec2: // global
           I64[Sp - 40] = block_c2ebN_info;
           R1 = P64[Sp];
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2ec7; else goto c2ebO;
       u2ec7: // global
           call _c2ebN(R1) args: 0, res: 0, upd: 0;
       c2ebO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,,)_$cunsafeRangeSize_info" {
     GHC.Arr.$fIx(,,,,)_$cunsafeRangeSize_info:
         const GHC.Arr.$fIx(,,,,)_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _c2ebN() //  [R1]
         { []
         }
     {offset
       c2ebN: // global
           _s2b7U::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_c2ebT_info;
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = _s2b7U::P64;
           P64[Sp + 24] = R1;
           P64[Sp + 32] = P64[R1 + 15];
           Sp = Sp + 24;
           call GHC.Arr.$fIx(,,,,)_$cunsafeIndex_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ebN_info" {
     block_c2ebN_info:
         const _c2ebN;
         const 5;
         const 30;
 },
 _c2ebT() //  [R1]
         { []
         }
     {offset
       c2ebT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2ec6; else goto c2ec5;
       c2ec6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2ec5: // global
           _s2b85::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2b85::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ebT_info" {
     block_c2ebT_info:
         const _c2ebT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.973937243 UTC

[section ""data" . GHC.Arr.$fIx(,,,,)_$cinRange_closure" {
     GHC.Arr.$fIx(,,,,)_$cinRange_closure:
         const GHC.Arr.$fIx(,,,,)_$cinRange_info;
 },
 GHC.Arr.$fIx(,,,,)_$cinRange_slow() //  [R1]
         { []
         }
     {offset
       c2ecr: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$fIx(,,,,)_$cinRange_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.Arr.$fIx(,,,,)_$cinRange_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2ecy: // global
           if ((Sp + -144) < SpLim) (likely: False) goto c2ecM; else goto c2ecN;
       c2ecM: // global
           R1 = GHC.Arr.$fIx(,,,,)_$cinRange_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c2ecN: // global
           I64[Sp - 40] = block_c2ecv_info;
           R1 = P64[Sp];
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2ee2; else goto c2ecw;
       u2ee2: // global
           call _c2ecv(R1) args: 0, res: 0, upd: 0;
       c2ecw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,,)_$cinRange_info" {
     GHC.Arr.$fIx(,,,,)_$cinRange_info:
         const GHC.Arr.$fIx(,,,,)_$cinRange_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const GHC.Arr.$fIx(,,,,)_$cinRange_slow;
 },
 _c2ecv() //  [R1]
         { []
         }
     {offset
       c2ecv: // global
           I64[Sp - 8] = block_c2ecB_info;
           _s2b8f::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2b8f::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2ee1; else goto c2ecC;
       u2ee1: // global
           call _c2ecB(R1) args: 0, res: 0, upd: 0;
       c2ecC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ecv_info" {
     block_c2ecv_info:
         const _c2ecv;
         const 6;
         const 30;
 },
 _c2ecB() //  [R1]
         { []
         }
     {offset
       c2ecB: // global
           I64[Sp - 32] = block_c2ecG_info;
           _s2b8h::P64 = P64[R1 + 7];
           _s2b8i::P64 = P64[R1 + 15];
           _s2b8j::P64 = P64[R1 + 23];
           _s2b8k::P64 = P64[R1 + 31];
           _s2b8l::P64 = P64[R1 + 39];
           R1 = P64[Sp + 8];
           P64[Sp - 24] = _s2b8j::P64;
           P64[Sp - 16] = _s2b8k::P64;
           P64[Sp - 8] = _s2b8l::P64;
           P64[Sp] = _s2b8i::P64;
           P64[Sp + 8] = _s2b8h::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2ee3; else goto c2ecH;
       u2ee3: // global
           call _c2ecG(R1) args: 0, res: 0, upd: 0;
       c2ecH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ecB_info" {
     block_c2ecB_info:
         const _c2ecB;
         const 7;
         const 30;
 },
 _c2ecG() //  [R1]
         { []
         }
     {offset
       c2ecG: // global
           I64[Sp - 32] = block_c2ecL_info;
           _s2b8n::P64 = P64[R1 + 7];
           _s2b8o::P64 = P64[R1 + 15];
           _s2b8p::P64 = P64[R1 + 23];
           _s2b8q::P64 = P64[R1 + 31];
           _s2b8r::P64 = P64[R1 + 39];
           R1 = P64[Sp + 88];
           P64[Sp - 24] = _s2b8p::P64;
           P64[Sp - 16] = _s2b8q::P64;
           P64[Sp - 8] = _s2b8r::P64;
           P64[Sp] = _s2b8o::P64;
           P64[Sp + 88] = _s2b8n::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2ee4; else goto c2ecR;
       u2ee4: // global
           call _c2ecL(R1) args: 0, res: 0, upd: 0;
       c2ecR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ecG_info" {
     block_c2ecG_info:
         const _c2ecG;
         const 11;
         const 30;
 },
 _c2ecL() //  [R1]
         { []
         }
     {offset
       c2ecL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2ecZ; else goto c2ecY;
       c2ecZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2ecY: // global
           _s2b8t::P64 = P64[R1 + 7];
           _s2b8u::P64 = P64[R1 + 15];
           _s2b8v::P64 = P64[R1 + 23];
           _s2b8w::P64 = P64[R1 + 31];
           _s2b8x::P64 = P64[R1 + 39];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 72];
           P64[Hp] = P64[Sp + 120];
           I64[Sp - 8] = block_c2ecW_info;
           R2 = P64[Sp + 112];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = Hp - 15;
           P64[Sp - 16] = _s2b8t::P64;
           P64[Sp] = _s2b8x::P64;
           P64[Sp + 72] = _s2b8w::P64;
           P64[Sp + 112] = _s2b8v::P64;
           P64[Sp + 120] = _s2b8u::P64;
           Sp = Sp - 32;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ecL_info" {
     block_c2ecL_info:
         const _c2ecL;
         const 15;
         const 30;
 },
 _c2ecW() //  [R1]
         { []
         }
     {offset
       c2ecW: // global
           if (R1 & 7 == 1) goto u2edX; else goto c2eda;
       u2edX: // global
           Sp = Sp + 136;
           call _c2edL() args: 0, res: 0, upd: 0;
       c2eda: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2edd; else goto c2edc;
       c2edd: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2edc: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 72];
           P64[Hp] = P64[Sp + 40];
           I64[Sp] = block_c2ed9_info;
           R2 = P64[Sp + 88];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = P64[Sp + 128];
           Sp = Sp - 24;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ecW_info" {
     block_c2ecW_info:
         const _c2ecW;
         const 16;
         const 30;
 },
 _c2ed9() //  [R1]
         { []
         }
     {offset
       c2ed9: // global
           if (R1 & 7 == 1) goto u2edY; else goto c2edo;
       u2edY: // global
           Sp = Sp + 136;
           call _c2edL() args: 0, res: 0, upd: 0;
       c2edo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2edr; else goto c2edq;
       c2edr: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2edq: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 16];
           I64[Sp] = block_c2edn_info;
           R2 = P64[Sp + 96];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = P64[Sp + 120];
           Sp = Sp - 24;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ed9_info" {
     block_c2ed9_info:
         const _c2ed9;
         const 2180112;
         const 30;
 },
 _c2edn() //  [R1]
         { []
         }
     {offset
       c2edn: // global
           if (R1 & 7 == 1) goto u2edZ; else goto c2edC;
       u2edZ: // global
           Sp = Sp + 136;
           call _c2edL() args: 0, res: 0, upd: 0;
       c2edC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2edF; else goto c2edE;
       c2edF: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2edE: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_c2edB_info;
           R2 = P64[Sp + 104];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = P64[Sp + 80];
           Sp = Sp - 24;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2edn_info" {
     block_c2edn_info:
         const _c2edn;
         const 3361936;
         const 30;
 },
 _c2edB() //  [R1]
         { []
         }
     {offset
       c2edB: // global
           if (R1 & 7 == 1) goto u2ee0; else goto c2edM;
       u2ee0: // global
           Sp = Sp + 136;
           call _c2edL() args: 0, res: 0, upd: 0;
       c2edM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2edR; else goto c2edQ;
       c2edR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2edQ: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 64];
           P64[Hp] = P64[Sp + 32];
           R2 = P64[Sp + 112];
           I64[Sp + 112] = stg_ap_pp_info;
           P64[Sp + 120] = Hp - 15;
           P64[Sp + 128] = P64[Sp + 8];
           Sp = Sp + 112;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2edB_info" {
     block_c2edB_info:
         const _c2edB;
         const 3661200;
         const 30;
 },
 _c2edL() //  []
         { []
         }
     {offset
       c2edL: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:58.995496764 UTC

[section ""data" . GHC.Arr.$fIx(,,,,)_$crangeSize_closure" {
     GHC.Arr.$fIx(,,,,)_$crangeSize_closure:
         const GHC.Arr.$fIx(,,,,)_$crangeSize_info;
 },
 GHC.Arr.$fIx(,,,,)_$crangeSize_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2efC: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c2efD; else goto c2efE;
       c2efD: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,,)_$crangeSize_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c2efE: // global
           I64[Sp - 40] = block_c2efz_info;
           R1 = P64[Sp];
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2eg5; else goto c2efA;
       u2eg5: // global
           call _c2efz(R1) args: 0, res: 0, upd: 0;
       c2efA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,,)_$crangeSize_info" {
     GHC.Arr.$fIx(,,,,)_$crangeSize_info:
         const GHC.Arr.$fIx(,,,,)_$crangeSize_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _c2efz() //  [R1]
         { []
         }
     {offset
       c2efz: // global
           I64[Sp - 16] = block_c2efH_info;
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 40];
           P64[Sp - 32] = R1;
           _s2b8P::P64 = P64[R1 + 15];
           P64[Sp - 24] = _s2b8P::P64;
           P64[Sp - 8] = _s2b8P::P64;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call GHC.Arr.$fIx(,,,,)_$cinRange_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2efz_info" {
     block_c2efz_info:
         const _c2efz;
         const 5;
         const 30;
 },
 _c2efH() //  [R1]
         { []
         }
     {offset
       c2efH: // global
           if (R1 & 7 == 1) goto c2efO; else goto c2eg0;
       c2efO: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2eg0: // global
           _s2b8H::P64 = P64[Sp + 56];
           I64[Sp + 56] = block_c2efR_info;
           R6 = P64[Sp + 48];
           R5 = P64[Sp + 40];
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 24];
           R2 = _s2b8H::P64;
           P64[Sp + 40] = P64[Sp + 16];
           P64[Sp + 48] = P64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Arr.$fIx(,,,,)_$cunsafeIndex_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2efH_info" {
     block_c2efH_info:
         const _c2efH;
         const 7;
         const 30;
 },
 _c2efR() //  [R1]
         { []
         }
     {offset
       c2efR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2eg3; else goto c2eg2;
       c2eg3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2eg2: // global
           _s2b8T::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2b8T::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2efR_info" {
     block_c2efR_info:
         const _c2efR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.006073476 UTC

[section ""data" . GHC.Arr.$fIx(,,,,)_$cindex_closure" {
     GHC.Arr.$fIx(,,,,)_$cindex_closure:
         const GHC.Arr.$fIx(,,,,)_$cindex_info;
         const 0;
 },
 GHC.Arr.$fIx(,,,,)_$cindex_slow() //  [R1]
         { []
         }
     {offset
       c2egx: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$fIx(,,,,)_$cindex_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2,
                                                 R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.Arr.$fIx(,,,,)_$cindex_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2egH: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2egI; else goto c2egJ;
       c2egI: // global
           R1 = GHC.Arr.$fIx(,,,,)_$cindex_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c2egJ: // global
           I64[Sp - 48] = block_c2egB_info;
           _s2b8Y::P64 = R6;
           R6 = R6;
           _s2b8X::P64 = R5;
           R5 = R5;
           _s2b8W::P64 = R4;
           R4 = R4;
           _s2b8V::P64 = R3;
           R3 = R3;
           _s2b8U::P64 = R2;
           R2 = R2;
           P64[Sp - 64] = P64[Sp];
           P64[Sp - 56] = P64[Sp + 8];
           P64[Sp - 40] = _s2b8U::P64;
           P64[Sp - 32] = _s2b8V::P64;
           P64[Sp - 24] = _s2b8W::P64;
           P64[Sp - 16] = _s2b8X::P64;
           P64[Sp - 8] = _s2b8Y::P64;
           Sp = Sp - 64;
           call GHC.Arr.$fIx(,,,,)_$cinRange_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,,)_$cindex_info" {
     GHC.Arr.$fIx(,,,,)_$cindex_info:
         const GHC.Arr.$fIx(,,,,)_$cindex_entry;
         const 0;
         const 8800387989518;
         const 30064771072;
         const S2bMd_srt+192;
         const 7;
         const GHC.Arr.$fIx(,,,,)_$cindex_slow;
 },
 _c2egB() //  [R1]
         { []
         }
     {offset
       c2egB: // global
           if (R1 & 7 == 1) goto c2egE; else goto c2egF;
       c2egE: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 64;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2egF: // global
           R6 = P64[Sp + 40];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 48;
           call GHC.Arr.$fIx(,,,,)_$cunsafeIndex_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2egB_info" {
     block_c2egB_info:
         const _c2egB;
         const 7;
         const 4294967326;
         const S2bMd_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.016614404 UTC

[section ""data" . GHC.Arr.$fIx(,,,,)_closure" {
     GHC.Arr.$fIx(,,,,)_closure:
         const GHC.Arr.$fIx(,,,,)_info;
         const 0;
 },
 sat_s2b9d_entry() //  [R1, R2]
         { []
         }
     {offset
       c2ehf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2ehg; else goto c2ehh;
       c2ehg: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2ehh: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Arr.$fIx(,,,,)_$cunsafeRangeSize_entry(R6,
                                                           R5,
                                                           R4,
                                                           R3,
                                                           R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2b9d_info" {
     sat_s2b9d_info:
         const sat_s2b9d_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 sat_s2b9c_entry() //  [R1, R2]
         { []
         }
     {offset
       c2ehn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2eho; else goto c2ehp;
       c2eho: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2ehp: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Arr.$fIx(,,,,)_$crangeSize_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2b9c_info" {
     sat_s2b9c_info:
         const sat_s2b9c_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 sat_s2b9b_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2ehv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ehw; else goto c2ehx;
       c2ehw: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2ehx: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Arr.$fIx(,,,,)_$cinRange_entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2b9b_info" {
     sat_s2b9b_info:
         const sat_s2b9b_entry;
         const 5;
         const 8;
         const 8589934607;
 },
 sat_s2b9a_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2ehD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ehE; else goto c2ehF;
       c2ehE: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2ehF: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Arr.$fIx(,,,,)_$cunsafeIndex_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2b9a_info" {
     sat_s2b9a_info:
         const sat_s2b9a_entry;
         const 5;
         const 8;
         const 8589934607;
 },
 sat_s2b99_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2ehL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ehM; else goto c2ehN;
       c2ehM: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2ehN: // global
           R6 = P64[R1 + 38];
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           _B2::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 16] = _B2::P64;
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 16;
           call GHC.Arr.$fIx(,,,,)_$cindex_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2b99_info" {
     sat_s2b99_info:
         const sat_s2b99_entry;
         const 5;
         const 4294967304;
         const 8589934607;
         const S2bMd_srt+280;
 },
 sat_s2b98_entry() //  [R1, R2]
         { []
         }
     {offset
       c2ehT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2ehU; else goto c2ehV;
       c2ehU: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2ehV: // global
           R6 = P64[R1 + 39];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           _B1::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Arr.$fIx(,,,,)_$crange_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2b98_info" {
     sat_s2b98_info:
         const sat_s2b98_entry;
         const 5;
         const 8;
         const 4294967301;
 },
 sat_s2b97_entry() //  [R1]
         { []
         }
     {offset
       c2ei0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ei1; else goto c2ei2;
       c2ei1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ei2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R6 = P64[R1 + 48];
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$fIx(,,,,)_$cp1Ix_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2b97_info" {
     sat_s2b97_info:
         const sat_s2b97_entry;
         const 5;
         const 15;
 },
 GHC.Arr.$fIx(,,,,)_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2ei4: // global
           Hp = Hp + 408;
           if (Hp > HpLim) (likely: False) goto c2ei8; else goto c2ei7;
       c2ei8: // global
           HpAlloc = 408;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,,)_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2ei7: // global
           I64[Hp - 400] = sat_s2b9d_info;
           P64[Hp - 392] = R2;
           P64[Hp - 384] = R3;
           P64[Hp - 376] = R4;
           P64[Hp - 368] = R5;
           P64[Hp - 360] = R6;
           I64[Hp - 352] = sat_s2b9c_info;
           P64[Hp - 344] = R2;
           P64[Hp - 336] = R3;
           P64[Hp - 328] = R4;
           P64[Hp - 320] = R5;
           P64[Hp - 312] = R6;
           I64[Hp - 304] = sat_s2b9b_info;
           P64[Hp - 296] = R2;
           P64[Hp - 288] = R3;
           P64[Hp - 280] = R4;
           P64[Hp - 272] = R5;
           P64[Hp - 264] = R6;
           I64[Hp - 256] = sat_s2b9a_info;
           P64[Hp - 248] = R2;
           P64[Hp - 240] = R3;
           P64[Hp - 232] = R4;
           P64[Hp - 224] = R5;
           P64[Hp - 216] = R6;
           I64[Hp - 208] = sat_s2b99_info;
           P64[Hp - 200] = R2;
           P64[Hp - 192] = R3;
           P64[Hp - 184] = R4;
           P64[Hp - 176] = R5;
           P64[Hp - 168] = R6;
           I64[Hp - 160] = sat_s2b98_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           P64[Hp - 136] = R4;
           P64[Hp - 128] = R5;
           P64[Hp - 120] = R6;
           I64[Hp - 112] = sat_s2b97_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R5;
           P64[Hp - 64] = R6;
           I64[Hp - 56] = GHC.Arr.C:Ix_con_info;
           P64[Hp - 48] = Hp - 112;
           P64[Hp - 40] = Hp - 159;
           P64[Hp - 32] = Hp - 206;
           P64[Hp - 24] = Hp - 254;
           P64[Hp - 16] = Hp - 302;
           P64[Hp - 8] = Hp - 351;
           P64[Hp] = Hp - 399;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,,)_info" {
     GHC.Arr.$fIx(,,,,)_info:
         const GHC.Arr.$fIx(,,,,)_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const S2bMd_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.041453595 UTC

[section ""data" . GHC.Arr.$w$cp1Ix_closure" {
     GHC.Arr.$w$cp1Ix_closure:
         const GHC.Arr.$w$cp1Ix_info;
 },
 lvl50_s2b9i_entry() //  [R1]
         { []
         }
     {offset
       c2ej4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ej5; else goto c2ej6;
       c2ej5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ej6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl50_s2b9i_info" {
     lvl50_s2b9i_info:
         const lvl50_s2b9i_entry;
         const 1;
         const 16;
 },
 lvl51_s2b9j_entry() //  [R1]
         { []
         }
     {offset
       c2ejb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ejc; else goto c2ejd;
       c2ejc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ejd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl51_s2b9j_info" {
     lvl51_s2b9j_info:
         const lvl51_s2b9j_entry;
         const 1;
         const 16;
 },
 lvl52_s2b9k_entry() //  [R1]
         { []
         }
     {offset
       c2eji: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ejj; else goto c2ejk;
       c2ejj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ejk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl52_s2b9k_info" {
     lvl52_s2b9k_info:
         const lvl52_s2b9k_entry;
         const 1;
         const 16;
 },
 lvl53_s2b9l_entry() //  [R1]
         { []
         }
     {offset
       c2ejp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ejq; else goto c2ejr;
       c2ejq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ejr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl53_s2b9l_info" {
     lvl53_s2b9l_info:
         const lvl53_s2b9l_entry;
         const 1;
         const 16;
 },
 sat_s2b9K_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2ejD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2ejE; else goto c2ejF;
       c2ejE: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2ejF: // global
           I64[Sp - 24] = block_c2ejx_info;
           R6 = R3;
           R5 = P64[R1 + 6];
           R4 = P64[R1 + 14];
           _s2b9I::P64 = R3;
           R3 = P64[R1 + 22];
           _s2b9H::P64 = R2;
           R2 = P64[R1 + 30];
           P64[Sp - 32] = _s2b9H::P64;
           P64[Sp - 16] = _s2b9H::P64;
           P64[Sp - 8] = _s2b9I::P64;
           Sp = Sp - 32;
           call GHC.Classes.$fOrd(,,,)_$c<_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2b9K_info" {
     sat_s2b9K_info:
         const sat_s2b9K_entry;
         const 4;
         const 8;
         const 8589934607;
 },
 _c2ejx() //  [R1]
         { []
         }
     {offset
       c2ejx: // global
           if (R1 & 7 == 1) goto c2ejA; else goto c2ejB;
       c2ejA: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2ejB: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ejx_info" {
     block_c2ejx_info:
         const _c2ejx;
         const 2;
         const 30;
 },
 sat_s2b9G_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2ejX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2ejY; else goto c2ejZ;
       c2ejY: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2ejZ: // global
           I64[Sp - 24] = block_c2ejR_info;
           R6 = R3;
           R5 = P64[R1 + 6];
           R4 = P64[R1 + 14];
           _s2b9E::P64 = R3;
           R3 = P64[R1 + 22];
           _s2b9D::P64 = R2;
           R2 = P64[R1 + 30];
           P64[Sp - 32] = _s2b9D::P64;
           P64[Sp - 16] = _s2b9D::P64;
           P64[Sp - 8] = _s2b9E::P64;
           Sp = Sp - 32;
           call GHC.Classes.$fOrd(,,,)_$c<_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2b9G_info" {
     sat_s2b9G_info:
         const sat_s2b9G_entry;
         const 4;
         const 8;
         const 8589934607;
 },
 _c2ejR() //  [R1]
         { []
         }
     {offset
       c2ejR: // global
           if (R1 & 7 == 1) goto c2ejU; else goto c2ejV;
       c2ejU: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2ejV: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ejR_info" {
     block_c2ejR_info:
         const _c2ejR;
         const 2;
         const 30;
 },
 sat_s2b9C_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2ekh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2eki; else goto c2ekj;
       c2eki: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2ekj: // global
           I64[Sp - 8] = block_c2ekb_info;
           R6 = R2;
           R5 = P64[R1 + 6];
           R4 = P64[R1 + 14];
           _s2b9A::P64 = R3;
           R3 = P64[R1 + 22];
           R2 = P64[R1 + 30];
           P64[Sp - 16] = _s2b9A::P64;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,,,)_$c<_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2b9C_info" {
     sat_s2b9C_info:
         const sat_s2b9C_entry;
         const 4;
         const 8;
         const 8589934607;
 },
 _c2ekb() //  [R1]
         { []
         }
     {offset
       c2ekb: // global
           if (R1 & 7 == 1) goto c2eke; else goto c2ekf;
       c2eke: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2ekf: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ekb_info" {
     block_c2ekb_info:
         const _c2ekb;
         const 0;
         const 30;
 },
 sat_s2b9y_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2ekv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2ekw; else goto c2ekx;
       c2ekw: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2ekx: // global
           R6 = R3;
           R5 = P64[R1 + 6];
           R4 = P64[R1 + 14];
           R3 = P64[R1 + 22];
           _s2b9w::P64 = R2;
           R2 = P64[R1 + 30];
           P64[Sp - 8] = _s2b9w::P64;
           Sp = Sp - 8;
           call GHC.Classes.$fOrd(,,,)_$c<_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2b9y_info" {
     sat_s2b9y_info:
         const sat_s2b9y_entry;
         const 4;
         const 8;
         const 8589934607;
 },
 sat_s2b9v_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2ekJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ekK; else goto c2ekL;
       c2ekK: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2ekL: // global
           I64[Sp - 8] = block_c2ekD_info;
           R6 = R3;
           R5 = P64[R1 + 6];
           R4 = P64[R1 + 14];
           R3 = P64[R1 + 22];
           _s2b9s::P64 = R2;
           R2 = P64[R1 + 30];
           P64[Sp - 16] = _s2b9s::P64;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,,,)_$c<_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2b9v_info" {
     sat_s2b9v_info:
         const sat_s2b9v_entry;
         const 4;
         const 8;
         const 8589934607;
 },
 _c2ekD() //  [R1]
         { []
         }
     {offset
       c2ekD: // global
           if (R1 & 7 == 1) goto c2ekG; else goto c2ekH;
       c2ekG: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2ekH: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ekD_info" {
     block_c2ekD_info:
         const _c2ekD;
         const 0;
         const 30;
 },
 sat_s2b9r_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2ekX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2ekY; else goto c2ekZ;
       c2ekY: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2ekZ: // global
           R6 = R2;
           R5 = P64[R1 + 6];
           R4 = P64[R1 + 14];
           _B1::P64 = R3;
           R3 = P64[R1 + 22];
           R2 = P64[R1 + 30];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Classes.$fOrd(,,,)_$c<_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2b9r_info" {
     sat_s2b9r_info:
         const sat_s2b9r_entry;
         const 4;
         const 8;
         const 8589934607;
 },
 sat_s2b9q_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2el5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2el6; else goto c2el7;
       c2el6: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2el7: // global
           R6 = R2;
           R5 = P64[R1 + 6];
           R4 = P64[R1 + 14];
           _B1::P64 = R3;
           R3 = P64[R1 + 22];
           R2 = P64[R1 + 30];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Classes.$fOrd(,,,)_$ccompare_entry(R6,
                                                       R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2b9q_info" {
     sat_s2b9q_info:
         const sat_s2b9q_entry;
         const 4;
         const 8;
         const 8589934607;
 },
 sat_s2b9p_entry() //  [R1]
         { []
         }
     {offset
       c2elf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2elg; else goto c2elh;
       c2elg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2elh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c2elc_info;
           R5 = P64[R1 + 16];
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 32];
           R2 = P64[R1 + 40];
           Sp = Sp - 24;
           call GHC.Classes.$w$cp1Ord_entry(R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2b9p_info" {
     sat_s2b9p_info:
         const sat_s2b9p_entry;
         const 4;
         const 15;
 },
 _c2elc() //  [R1, R2]
         { []
         }
     {offset
       c2elc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2elk; else goto c2elj;
       c2elk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c2elj: // global
           I64[Hp - 16] = GHC.Classes.C:Eq_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2elc_info" {
     block_c2elc_info:
         const _c2elc;
         const 0;
         const 30;
 },
 GHC.Arr.$w$cp1Ix_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2ell: // global
           _s2b9h::P64 = R5;
           _s2b9g::P64 = R4;
           _s2b9f::P64 = R3;
           _s2b9e::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto c2elm; else goto c2eln;
       c2eln: // global
           Hp = Hp + 424;
           if (Hp > HpLim) (likely: False) goto c2elp; else goto c2elo;
       c2elp: // global
           HpAlloc = 424;
           goto c2elm;
       c2elm: // global
           R5 = _s2b9h::P64;
           R4 = _s2b9g::P64;
           R3 = _s2b9f::P64;
           R2 = _s2b9e::P64;
           R1 = GHC.Arr.$w$cp1Ix_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2elo: // global
           I64[Hp - 416] = lvl50_s2b9i_info;
           P64[Hp - 400] = _s2b9h::P64;
           I64[Hp - 392] = lvl51_s2b9j_info;
           P64[Hp - 376] = _s2b9g::P64;
           I64[Hp - 368] = lvl52_s2b9k_info;
           P64[Hp - 352] = _s2b9f::P64;
           I64[Hp - 344] = lvl53_s2b9l_info;
           P64[Hp - 328] = _s2b9e::P64;
           I64[Hp - 320] = sat_s2b9K_info;
           _c2ej0::P64 = Hp - 416;
           P64[Hp - 312] = _c2ej0::P64;
           _c2ej7::P64 = Hp - 392;
           P64[Hp - 304] = _c2ej7::P64;
           _c2eje::P64 = Hp - 368;
           P64[Hp - 296] = _c2eje::P64;
           _c2ejl::P64 = Hp - 344;
           P64[Hp - 288] = _c2ejl::P64;
           I64[Hp - 280] = sat_s2b9G_info;
           P64[Hp - 272] = _c2ej0::P64;
           P64[Hp - 264] = _c2ej7::P64;
           P64[Hp - 256] = _c2eje::P64;
           P64[Hp - 248] = _c2ejl::P64;
           I64[Hp - 240] = sat_s2b9C_info;
           P64[Hp - 232] = _c2ej0::P64;
           P64[Hp - 224] = _c2ej7::P64;
           P64[Hp - 216] = _c2eje::P64;
           P64[Hp - 208] = _c2ejl::P64;
           I64[Hp - 200] = sat_s2b9y_info;
           P64[Hp - 192] = _c2ej0::P64;
           P64[Hp - 184] = _c2ej7::P64;
           P64[Hp - 176] = _c2eje::P64;
           P64[Hp - 168] = _c2ejl::P64;
           I64[Hp - 160] = sat_s2b9v_info;
           P64[Hp - 152] = _c2ej0::P64;
           P64[Hp - 144] = _c2ej7::P64;
           P64[Hp - 136] = _c2eje::P64;
           P64[Hp - 128] = _c2ejl::P64;
           I64[Hp - 120] = sat_s2b9r_info;
           P64[Hp - 112] = _c2ej0::P64;
           P64[Hp - 104] = _c2ej7::P64;
           P64[Hp - 96] = _c2eje::P64;
           P64[Hp - 88] = _c2ejl::P64;
           I64[Hp - 80] = sat_s2b9q_info;
           P64[Hp - 72] = _c2ej0::P64;
           P64[Hp - 64] = _c2ej7::P64;
           P64[Hp - 56] = _c2eje::P64;
           P64[Hp - 48] = _c2ejl::P64;
           I64[Hp - 40] = sat_s2b9p_info;
           P64[Hp - 24] = _c2ej0::P64;
           P64[Hp - 16] = _c2ej7::P64;
           P64[Hp - 8] = _c2eje::P64;
           P64[Hp] = _c2ejl::P64;
           R6 = Hp - 238;
           R5 = Hp - 198;
           R4 = Hp - 158;
           R3 = Hp - 118;
           R2 = Hp - 78;
           R1 = Hp - 40;
           P64[Sp - 16] = Hp - 278;
           P64[Sp - 8] = Hp - 318;
           Sp = Sp - 16;
           call (I64[P64[Sp + 16]])(R6,
                                    R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$cp1Ix_info" {
     GHC.Arr.$w$cp1Ix_info:
         const GHC.Arr.$w$cp1Ix_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.075638139 UTC

[section ""data" . GHC.Arr.$fIx(,,,)_$cp1Ix_closure" {
     GHC.Arr.$fIx(,,,)_$cp1Ix_closure:
         const GHC.Arr.$fIx(,,,)_$cp1Ix_info;
 },
 GHC.Arr.$fIx(,,,)_$cp1Ix_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2enu: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c2env; else goto c2enw;
       c2env: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,)_$cp1Ix_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2enw: // global
           I64[Sp - 8] = block_c2enp_info;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Arr.$w$cp1Ix_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 24, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,)_$cp1Ix_info" {
     GHC.Arr.$fIx(,,,)_$cp1Ix_info:
         const GHC.Arr.$fIx(,,,)_$cp1Ix_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c2enp() //  [R1, R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2enp: // global
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 16] = R1;
           Sp = Sp - 48;
           call _c2enq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2enp_info" {
     block_c2enp_info:
         const _c2enp;
         const 0;
         const 30;
 },
 _c2enq() //  []
         { []
         }
     {offset
       c2enq: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c2enz; else goto c2eny;
       c2enz: // global
           HpAlloc = 72;
           I64[Sp] = block_c2enq_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2eny: // global
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 56];
           R1 = Hp - 63;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2enq_info" {
     block_c2enq_info:
         const _c2enq;
         const 8;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.091485075 UTC

[section ""data" . GHC.Arr.$fIx(,,,)_$crange_closure" {
     GHC.Arr.$fIx(,,,)_$crange_closure:
         const GHC.Arr.$fIx(,,,)_$crange_info;
 },
 lvl50_s2bag_entry() //  [R1]
         { []
         }
     {offset
       c2eon: // global
           _s2bag::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c2eoo; else goto c2eop;
       c2eop: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2eor; else goto c2eoq;
       c2eor: // global
           HpAlloc = 24;
           goto c2eoo;
       c2eoo: // global
           R1 = _s2bag::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2eoq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2bag::P64;
           _s2ba1::P64 = P64[_s2bag::P64 + 16];
           _s2baa::P64 = P64[_s2bag::P64 + 24];
           _s2baf::P64 = P64[_s2bag::P64 + 32];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2baa::P64;
           P64[Hp] = _s2baf::P64;
           R2 = _s2ba1::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Arr.range_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl50_s2bag_info" {
     lvl50_s2bag_info:
         const lvl50_s2bag_entry;
         const 3;
         const 15;
 },
 lvl51_s2bai_entry() //  [R1]
         { []
         }
     {offset
       c2eox: // global
           _s2bai::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c2eoy; else goto c2eoz;
       c2eoz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2eoB; else goto c2eoA;
       c2eoB: // global
           HpAlloc = 24;
           goto c2eoy;
       c2eoy: // global
           R1 = _s2bai::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2eoA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2bai::P64;
           _s2ba0::P64 = P64[_s2bai::P64 + 16];
           _s2ba9::P64 = P64[_s2bai::P64 + 24];
           _s2bae::P64 = P64[_s2bai::P64 + 32];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2ba9::P64;
           P64[Hp] = _s2bae::P64;
           R2 = _s2ba0::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Arr.range_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl51_s2bai_info" {
     lvl51_s2bai_info:
         const lvl51_s2bai_entry;
         const 3;
         const 15;
 },
 lvl52_s2bak_entry() //  [R1]
         { []
         }
     {offset
       c2eoH: // global
           _s2bak::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c2eoI; else goto c2eoJ;
       c2eoJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2eoL; else goto c2eoK;
       c2eoL: // global
           HpAlloc = 24;
           goto c2eoI;
       c2eoI: // global
           R1 = _s2bak::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2eoK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2bak::P64;
           _s2b9Z::P64 = P64[_s2bak::P64 + 16];
           _s2ba8::P64 = P64[_s2bak::P64 + 24];
           _s2bad::P64 = P64[_s2bak::P64 + 32];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2ba8::P64;
           P64[Hp] = _s2bad::P64;
           R2 = _s2b9Z::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Arr.range_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl52_s2bak_info" {
     lvl52_s2bak_info:
         const lvl52_s2bak_entry;
         const 3;
         const 15;
 },
 go3_s2baE_entry() //  [R1, R2]
         { []
         }
     {offset
       c2epy: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2epz; else goto c2epA;
       c2epz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2epA: // global
           I64[Sp - 48] = block_c2epr_info;
           _s2baE::P64 = R1;
           _s2bap::P64 = P64[R1 + 7];
           _s2bav::P64 = P64[R1 + 15];
           _s2baB::P64 = P64[R1 + 23];
           _s2baD::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s2bap::P64;
           P64[Sp - 32] = _s2bav::P64;
           P64[Sp - 24] = _s2baB::P64;
           P64[Sp - 16] = _s2baD::P64;
           P64[Sp - 8] = _s2baE::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2epM; else goto c2eps;
       u2epM: // global
           call _c2epr(R1) args: 0, res: 0, upd: 0;
       c2eps: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go3_s2baE_info" {
     go3_s2baE_info:
         const go3_s2baE_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _c2epr() //  [R1]
         { []
         }
     {offset
       c2epr: // global
           if (R1 & 7 == 1) goto c2epv; else goto c2epw;
       c2epv: // global
           R1 = P64[Sp + 32] & (-8);
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2epw: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto c2epL; else goto c2epK;
       c2epL: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2epK: // global
           _s2baH::P64 = P64[R1 + 6];
           _s2baI::P64 = P64[R1 + 14];
           I64[Hp - 88] = stg_ap_2_upd_info;
           P64[Hp - 72] = P64[Sp + 40];
           P64[Hp - 64] = _s2baI::P64;
           I64[Hp - 56] = (,,,)_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = _s2baH::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = Hp - 88;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2epr_info" {
     block_c2epr_info:
         const _c2epr;
         const 5;
         const 30;
 },
 go2_s2bay_entry() //  [R1, R2]
         { []
         }
     {offset
       c2epR: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2epS; else goto c2epT;
       c2epS: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2epT: // global
           I64[Sp - 48] = block_c2epf_info;
           _s2bay::P64 = R1;
           _s2bag::P64 = P64[R1 + 7];
           _s2bap::P64 = P64[R1 + 15];
           _s2bav::P64 = P64[R1 + 23];
           _s2bax::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s2bag::P64;
           P64[Sp - 32] = _s2bap::P64;
           P64[Sp - 24] = _s2bav::P64;
           P64[Sp - 16] = _s2bax::P64;
           P64[Sp - 8] = _s2bay::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2epZ; else goto c2epg;
       u2epZ: // global
           call _c2epf(R1) args: 0, res: 0, upd: 0;
       c2epg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go2_s2bay_info" {
     go2_s2bay_info:
         const go2_s2bay_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _c2epf() //  [R1]
         { []
         }
     {offset
       c2epf: // global
           if (R1 & 7 == 1) goto c2epO; else goto c2epP;
       c2epO: // global
           R1 = P64[Sp + 32] & (-8);
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2epP: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c2epY; else goto c2epX;
       c2epY: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2epX: // global
           _s2baB::P64 = P64[R1 + 6];
           _s2baC::P64 = P64[R1 + 14];
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = _s2baC::P64;
           I64[Hp - 32] = go3_s2baE_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s2baB::P64;
           P64[Hp] = Hp - 64;
           R2 = P64[Sp + 8];
           R1 = Hp - 31;
           Sp = Sp + 48;
           call go3_s2baE_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2epf_info" {
     block_c2epf_info:
         const _c2epf;
         const 5;
         const 30;
 },
 go1_s2bas_entry() //  [R1, R2]
         { []
         }
     {offset
       c2eq4: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2eq5; else goto c2eq6;
       c2eq5: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2eq6: // global
           I64[Sp - 48] = block_c2ep3_info;
           _s2bas::P64 = R1;
           _s2bag::P64 = P64[R1 + 7];
           _s2bai::P64 = P64[R1 + 15];
           _s2bap::P64 = P64[R1 + 23];
           _s2bar::P64 = P64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s2bag::P64;
           P64[Sp - 32] = _s2bai::P64;
           P64[Sp - 24] = _s2bap::P64;
           P64[Sp - 16] = _s2bar::P64;
           P64[Sp - 8] = _s2bas::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2eqc; else goto c2ep4;
       u2eqc: // global
           call _c2ep3(R1) args: 0, res: 0, upd: 0;
       c2ep4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s2bas_info" {
     go1_s2bas_info:
         const go1_s2bas_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 _c2ep3() //  [R1]
         { []
         }
     {offset
       c2ep3: // global
           if (R1 & 7 == 1) goto c2eq1; else goto c2eq2;
       c2eq1: // global
           R1 = P64[Sp + 32] & (-8);
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2eq2: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c2eqb; else goto c2eqa;
       c2eqb: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2eqa: // global
           _s2bav::P64 = P64[R1 + 6];
           _s2baw::P64 = P64[R1 + 14];
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = _s2baw::P64;
           I64[Hp - 32] = go2_s2bay_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s2bav::P64;
           P64[Hp] = Hp - 64;
           R2 = P64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 48;
           call go2_s2bay_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ep3_info" {
     block_c2ep3_info:
         const _c2ep3;
         const 5;
         const 30;
 },
 go_s2bam_entry() //  [R1, R2]
         { []
         }
     {offset
       c2eqh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2eqi; else goto c2eqj;
       c2eqi: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2eqj: // global
           I64[Sp - 40] = block_c2eoR_info;
           _s2bam::P64 = R1;
           _s2bag::P64 = P64[R1 + 7];
           _s2bai::P64 = P64[R1 + 15];
           _s2bak::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _s2bag::P64;
           P64[Sp - 24] = _s2bai::P64;
           P64[Sp - 16] = _s2bak::P64;
           P64[Sp - 8] = _s2bam::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2eqp; else goto c2eoS;
       u2eqp: // global
           call _c2eoR(R1) args: 0, res: 0, upd: 0;
       c2eoS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s2bam_info" {
     go_s2bam_info:
         const go_s2bam_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 _c2eoR() //  [R1]
         { []
         }
     {offset
       c2eoR: // global
           if (R1 & 7 == 1) goto c2eqe; else goto c2eqf;
       c2eqe: // global
           R1 = []_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2eqf: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c2eqo; else goto c2eqn;
       c2eqo: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2eqn: // global
           _s2bap::P64 = P64[R1 + 6];
           _s2baq::P64 = P64[R1 + 14];
           I64[Hp - 64] = stg_ap_2_upd_info;
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = _s2baq::P64;
           I64[Hp - 32] = go1_s2bas_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s2bap::P64;
           P64[Hp] = Hp - 64;
           R2 = P64[Sp + 24];
           R1 = Hp - 31;
           Sp = Sp + 40;
           call go1_s2bas_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eoR_info" {
     block_c2eoR_info:
         const _c2eoR;
         const 4;
         const 30;
 },
 GHC.Arr.$fIx(,,,)_$crange_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2eqq: // global
           if ((Sp + -72) < SpLim) (likely: False) goto c2eqt; else goto c2equ;
       c2eqt: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,)_$crange_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2equ: // global
           I64[Sp - 40] = block_c2eo3_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2eqG; else goto c2eo4;
       u2eqG: // global
           call _c2eo3(R1) args: 0, res: 0, upd: 0;
       c2eo4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,)_$crange_info" {
     GHC.Arr.$fIx(,,,)_$crange_info:
         const GHC.Arr.$fIx(,,,)_$crange_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c2eo3() //  [R1]
         { []
         }
     {offset
       c2eo3: // global
           I64[Sp - 8] = block_c2eo8_info;
           _s2ba5::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2ba5::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eqE; else goto c2eo9;
       u2eqE: // global
           call _c2eo8(R1) args: 0, res: 0, upd: 0;
       c2eo9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eo3_info" {
     block_c2eo3_info:
         const _c2eo3;
         const 4;
         const 30;
 },
 _c2eo8() //  [R1]
         { []
         }
     {offset
       c2eo8: // global
           I64[Sp - 24] = block_c2eod_info;
           _s2ba7::P64 = P64[R1 + 7];
           _s2ba8::P64 = P64[R1 + 15];
           _s2ba9::P64 = P64[R1 + 23];
           _s2baa::P64 = P64[R1 + 31];
           R1 = P64[Sp + 8];
           P64[Sp - 16] = _s2ba9::P64;
           P64[Sp - 8] = _s2baa::P64;
           P64[Sp] = _s2ba8::P64;
           P64[Sp + 8] = _s2ba7::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2eqF; else goto c2eoe;
       u2eqF: // global
           call _c2eod(R1) args: 0, res: 0, upd: 0;
       c2eoe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eo8_info" {
     block_c2eo8_info:
         const _c2eo8;
         const 5;
         const 30;
 },
 _c2eod() //  [R1]
         { []
         }
     {offset
       c2eod: // global
           Hp = Hp + 176;
           if (Hp > HpLim) (likely: False) goto c2eqz; else goto c2eqy;
       c2eqz: // global
           HpAlloc = 176;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2eqy: // global
           _s2bac::P64 = P64[R1 + 7];
           _s2bad::P64 = P64[R1 + 15];
           _s2bae::P64 = P64[R1 + 23];
           _s2baf::P64 = P64[R1 + 31];
           I64[Hp - 168] = lvl50_s2bag_info;
           P64[Hp - 152] = P64[Sp + 64];
           P64[Hp - 144] = P64[Sp + 16];
           P64[Hp - 136] = _s2baf::P64;
           I64[Hp - 128] = lvl51_s2bai_info;
           P64[Hp - 112] = P64[Sp + 56];
           P64[Hp - 104] = P64[Sp + 8];
           P64[Hp - 96] = _s2bae::P64;
           I64[Hp - 88] = lvl52_s2bak_info;
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = P64[Sp + 24];
           P64[Hp - 56] = _s2bad::P64;
           I64[Hp - 48] = go_s2bam_info;
           P64[Hp - 40] = Hp - 168;
           P64[Hp - 32] = Hp - 128;
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = _s2bac::P64;
           I64[Sp + 56] = block_c2eqs_info;
           R2 = P64[Sp + 40];
           I64[Sp + 40] = stg_ap_p_info;
           P64[Sp + 48] = Hp - 15;
           P64[Sp + 64] = Hp - 47;
           Sp = Sp + 40;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eod_info" {
     block_c2eod_info:
         const _c2eod;
         const 8;
         const 30;
 },
 _c2eqs() //  [R1]
         { []
         }
     {offset
       c2eqs: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s2bam_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eqs_info" {
     block_c2eqs_info:
         const _c2eqs;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.128768247 UTC

[section ""data" . GHC.Arr.$fIx(,,,)_$cunsafeIndex_closure" {
     GHC.Arr.$fIx(,,,)_$cunsafeIndex_closure:
         const GHC.Arr.$fIx(,,,)_$cunsafeIndex_info;
 },
 GHC.Arr.$fIx(,,,)_$cunsafeIndex_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2eta: // global
           if ((Sp + -136) < SpLim) (likely: False) goto c2euh; else goto c2eui;
       c2euh: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,)_$cunsafeIndex_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c2eui: // global
           I64[Sp - 40] = block_c2et7_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2euF; else goto c2et8;
       u2euF: // global
           call _c2et7(R1) args: 0, res: 0, upd: 0;
       c2et8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,)_$cunsafeIndex_info" {
     GHC.Arr.$fIx(,,,)_$cunsafeIndex_info:
         const GHC.Arr.$fIx(,,,)_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _c2et7() //  [R1]
         { []
         }
     {offset
       c2et7: // global
           I64[Sp - 8] = block_c2etd_info;
           _s2baV::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2baV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2euE; else goto c2ete;
       u2euE: // global
           call _c2etd(R1) args: 0, res: 0, upd: 0;
       c2ete: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2et7_info" {
     block_c2et7_info:
         const _c2et7;
         const 5;
         const 30;
 },
 _c2etd() //  [R1]
         { []
         }
     {offset
       c2etd: // global
           I64[Sp - 24] = block_c2eti_info;
           _s2baX::P64 = P64[R1 + 7];
           _s2baY::P64 = P64[R1 + 15];
           _s2baZ::P64 = P64[R1 + 23];
           _s2bb0::P64 = P64[R1 + 31];
           R1 = P64[Sp + 8];
           P64[Sp - 16] = _s2baZ::P64;
           P64[Sp - 8] = _s2bb0::P64;
           P64[Sp] = _s2baY::P64;
           P64[Sp + 8] = _s2baX::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2euG; else goto c2etj;
       u2euG: // global
           call _c2eti(R1) args: 0, res: 0, upd: 0;
       c2etj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2etd_info" {
     block_c2etd_info:
         const _c2etd;
         const 6;
         const 30;
 },
 _c2eti() //  [R1]
         { []
         }
     {offset
       c2eti: // global
           I64[Sp - 24] = block_c2etn_info;
           _s2bb2::P64 = P64[R1 + 7];
           _s2bb3::P64 = P64[R1 + 15];
           _s2bb4::P64 = P64[R1 + 23];
           _s2bb5::P64 = P64[R1 + 31];
           R1 = P64[Sp + 72];
           P64[Sp - 16] = _s2bb4::P64;
           P64[Sp - 8] = _s2bb5::P64;
           P64[Sp] = _s2bb3::P64;
           P64[Sp + 72] = _s2bb2::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2euH; else goto c2eto;
       u2euH: // global
           call _c2etn(R1) args: 0, res: 0, upd: 0;
       c2eto: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eti_info" {
     block_c2eti_info:
         const _c2eti;
         const 9;
         const 30;
 },
 _c2etn() //  [R1]
         { []
         }
     {offset
       c2etn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2euo; else goto c2eun;
       c2euo: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2eun: // global
           _s2bb7::P64 = P64[R1 + 7];
           _s2bb8::P64 = P64[R1 + 15];
           _s2bb9::P64 = P64[R1 + 23];
           _s2bba::P64 = P64[R1 + 31];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 16];
           I64[Sp - 16] = block_c2ett_info;
           R2 = P64[Sp + 88];
           I64[Sp - 40] = stg_ap_pp_info;
           _c2ets::P64 = Hp - 15;
           P64[Sp - 32] = _c2ets::P64;
           P64[Sp - 24] = _s2bba::P64;
           P64[Sp - 8] = _s2bb9::P64;
           P64[Sp] = _s2bb8::P64;
           P64[Sp + 16] = _s2bb7::P64;
           P64[Sp + 40] = _c2ets::P64;
           Sp = Sp - 40;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2etn_info" {
     block_c2etn_info:
         const _c2etn;
         const 12;
         const 30;
 },
 _c2ett() //  [R1]
         { []
         }
     {offset
       c2ett: // global
           I64[Sp] = block_c2etx_info;
           R2 = P64[Sp + 104];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 56];
           I64[Sp + 104] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ett_info" {
     block_c2ett_info:
         const _c2ett;
         const 14;
         const 30;
 },
 _c2etx() //  [R1]
         { []
         }
     {offset
       c2etx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2eus; else goto c2eur;
       c2eus: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2eur: // global
           _s2bbg::I64 = I64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 24];
           _s2bb9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2etC_info;
           R2 = P64[Sp + 96];
           I64[Sp - 16] = stg_ap_pp_info;
           _c2etB::P64 = Hp - 15;
           P64[Sp - 8] = _c2etB::P64;
           P64[Sp] = _s2bb9::P64;
           I64[Sp + 48] = _s2bbg::I64;
           P64[Sp + 56] = _c2etB::P64;
           Sp = Sp - 16;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2etx_info" {
     block_c2etx_info:
         const _c2etx;
         const 266254;
         const 30;
 },
 _c2etC() //  [R1]
         { []
         }
     {offset
       c2etC: // global
           I64[Sp] = block_c2etG_info;
           R2 = P64[Sp + 88];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 48];
           I64[Sp + 88] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2etC_info" {
     block_c2etC_info:
         const _c2etC;
         const 132237;
         const 30;
 },
 _c2etG() //  [R1]
         { []
         }
     {offset
       c2etG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2euw; else goto c2euv;
       c2euw: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2euv: // global
           _s2bbm::I64 = I64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 32];
           I64[Sp + 16] = block_c2etL_info;
           R2 = P64[Sp + 80];
           I64[Sp - 8] = stg_ap_pp_info;
           _c2etK::P64 = Hp - 15;
           P64[Sp] = _c2etK::P64;
           I64[Sp + 48] = _s2bbm::I64;
           P64[Sp + 56] = _c2etK::P64;
           Sp = Sp - 8;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2etG_info" {
     block_c2etG_info:
         const _c2etG;
         const 199821;
         const 30;
 },
 _c2etL() //  [R1]
         { []
         }
     {offset
       c2etL: // global
           I64[Sp] = block_c2etP_info;
           R2 = P64[Sp + 64];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 40];
           I64[Sp + 64] = I64[R1 + 7];
           Sp = Sp - 16;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2etL_info" {
     block_c2etL_info:
         const _c2etL;
         const 50059;
         const 30;
 },
 _c2etP() //  [R1]
         { []
         }
     {offset
       c2etP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2euA; else goto c2euz;
       c2euA: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2euz: // global
           _s2bbs::I64 = I64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 88];
           I64[Sp + 16] = block_c2etU_info;
           R2 = P64[Sp + 56];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = Hp - 15;
           I64[Sp + 88] = _s2bbs::I64;
           Sp = Sp - 8;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2etP_info" {
     block_c2etP_info:
         const _c2etP;
         const 59275;
         const 30;
 },
 _c2etU() //  [R1]
         { []
         }
     {offset
       c2etU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2euD; else goto c2euC;
       c2euD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2euC: // global
           _s2bbB::I64 = I64[Sp + 64] + I64[Sp + 8] * (I64[Sp + 56] + I64[Sp + 16] * (I64[Sp + 48] + I64[Sp + 72] * I64[R1 + 7]));
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2bbB::I64;
           R1 = Hp - 7;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2etU_info" {
     block_c2etU_info:
         const _c2etU;
         const 32713;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.152912732 UTC

[section ""data" . GHC.Arr.$fIx(,,,)_$cunsafeRangeSize_closure" {
     GHC.Arr.$fIx(,,,)_$cunsafeRangeSize_closure:
         const GHC.Arr.$fIx(,,,)_$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIx(,,,)_$cunsafeRangeSize_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       c2ewk: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2ewv; else goto c2eww;
       c2ewv: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,)_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2eww: // global
           I64[Sp - 40] = block_c2ewh_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2ewB; else goto c2ewi;
       u2ewB: // global
           call _c2ewh(R1) args: 0, res: 0, upd: 0;
       c2ewi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,)_$cunsafeRangeSize_info" {
     GHC.Arr.$fIx(,,,)_$cunsafeRangeSize_info:
         const GHC.Arr.$fIx(,,,)_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c2ewh() //  [R1]
         { []
         }
     {offset
       c2ewh: // global
           _s2bbF::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_c2ewn_info;
           R6 = R1;
           R5 = _s2bbF::P64;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 24] = P64[R1 + 15];
           Sp = Sp + 24;
           call GHC.Arr.$fIx(,,,)_$cunsafeIndex_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ewh_info" {
     block_c2ewh_info:
         const _c2ewh;
         const 4;
         const 30;
 },
 _c2ewn() //  [R1]
         { []
         }
     {offset
       c2ewn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2ewA; else goto c2ewz;
       c2ewA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2ewz: // global
           _s2bbM::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2bbM::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ewn_info" {
     block_c2ewn_info:
         const _c2ewn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.164726561 UTC

[section ""data" . GHC.Arr.$fIx(,,,)_$cinRange_closure" {
     GHC.Arr.$fIx(,,,)_$cinRange_closure:
         const GHC.Arr.$fIx(,,,)_$cinRange_info;
 },
 GHC.Arr.$fIx(,,,)_$cinRange_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2ex1: // global
           if ((Sp + -120) < SpLim) (likely: False) goto c2exf; else goto c2exg;
       c2exf: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,)_$cinRange_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c2exg: // global
           I64[Sp - 40] = block_c2ewY_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2eyf; else goto c2ewZ;
       u2eyf: // global
           call _c2ewY(R1) args: 0, res: 0, upd: 0;
       c2ewZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,)_$cinRange_info" {
     GHC.Arr.$fIx(,,,)_$cinRange_info:
         const GHC.Arr.$fIx(,,,)_$cinRange_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _c2ewY() //  [R1]
         { []
         }
     {offset
       c2ewY: // global
           I64[Sp - 8] = block_c2ex4_info;
           _s2bbV::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bbV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eye; else goto c2ex5;
       u2eye: // global
           call _c2ex4(R1) args: 0, res: 0, upd: 0;
       c2ex5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ewY_info" {
     block_c2ewY_info:
         const _c2ewY;
         const 5;
         const 30;
 },
 _c2ex4() //  [R1]
         { []
         }
     {offset
       c2ex4: // global
           I64[Sp - 24] = block_c2ex9_info;
           _s2bbX::P64 = P64[R1 + 7];
           _s2bbY::P64 = P64[R1 + 15];
           _s2bbZ::P64 = P64[R1 + 23];
           _s2bc0::P64 = P64[R1 + 31];
           R1 = P64[Sp + 8];
           P64[Sp - 16] = _s2bbZ::P64;
           P64[Sp - 8] = _s2bc0::P64;
           P64[Sp] = _s2bbY::P64;
           P64[Sp + 8] = _s2bbX::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2eyg; else goto c2exa;
       u2eyg: // global
           call _c2ex9(R1) args: 0, res: 0, upd: 0;
       c2exa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ex4_info" {
     block_c2ex4_info:
         const _c2ex4;
         const 6;
         const 30;
 },
 _c2ex9() //  [R1]
         { []
         }
     {offset
       c2ex9: // global
           I64[Sp - 24] = block_c2exe_info;
           _s2bc2::P64 = P64[R1 + 7];
           _s2bc3::P64 = P64[R1 + 15];
           _s2bc4::P64 = P64[R1 + 23];
           _s2bc5::P64 = P64[R1 + 31];
           R1 = P64[Sp + 72];
           P64[Sp - 16] = _s2bc4::P64;
           P64[Sp - 8] = _s2bc5::P64;
           P64[Sp] = _s2bc3::P64;
           P64[Sp + 72] = _s2bc2::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2eyh; else goto c2exk;
       u2eyh: // global
           call _c2exe(R1) args: 0, res: 0, upd: 0;
       c2exk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ex9_info" {
     block_c2ex9_info:
         const _c2ex9;
         const 9;
         const 30;
 },
 _c2exe() //  [R1]
         { []
         }
     {offset
       c2exe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2exs; else goto c2exr;
       c2exs: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2exr: // global
           _s2bc7::P64 = P64[R1 + 7];
           _s2bc8::P64 = P64[R1 + 15];
           _s2bc9::P64 = P64[R1 + 23];
           _s2bca::P64 = P64[R1 + 31];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 96];
           I64[Sp] = block_c2exp_info;
           R2 = P64[Sp + 64];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = _s2bc7::P64;
           P64[Sp + 56] = _s2bca::P64;
           P64[Sp + 64] = _s2bc9::P64;
           P64[Sp + 96] = _s2bc8::P64;
           Sp = Sp - 24;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2exe_info" {
     block_c2exe_info:
         const _c2exe;
         const 12;
         const 30;
 },
 _c2exp() //  [R1]
         { []
         }
     {offset
       c2exp: // global
           if (R1 & 7 == 1) goto u2eyb; else goto c2exD;
       u2eyb: // global
           Sp = Sp + 104;
           call _c2ey0() args: 0, res: 0, upd: 0;
       c2exD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2exG; else goto c2exF;
       c2exG: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2exF: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 48];
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_c2exC_info;
           R2 = P64[Sp + 72];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = P64[Sp + 96];
           Sp = Sp - 24;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2exp_info" {
     block_c2exp_info:
         const _c2exp;
         const 12;
         const 30;
 },
 _c2exC() //  [R1]
         { []
         }
     {offset
       c2exC: // global
           if (R1 & 7 == 1) goto u2eyc; else goto c2exR;
       u2eyc: // global
           Sp = Sp + 104;
           call _c2ey0() args: 0, res: 0, upd: 0;
       c2exR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2exU; else goto c2exT;
       c2exU: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2exT: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c2exQ_info;
           R2 = P64[Sp + 80];
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = Hp - 15;
           P64[Sp] = P64[Sp + 64];
           Sp = Sp - 16;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2exC_info" {
     block_c2exC_info:
         const _c2exC;
         const 149772;
         const 30;
 },
 _c2exQ() //  [R1]
         { []
         }
     {offset
       c2exQ: // global
           if (R1 & 7 == 1) goto u2eyd; else goto c2ey1;
       u2eyd: // global
           Sp = Sp + 96;
           call _c2ey0() args: 0, res: 0, upd: 0;
       c2ey1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2ey6; else goto c2ey5;
       c2ey6: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2ey5: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           R2 = P64[Sp + 80];
           I64[Sp + 72] = stg_ap_pp_info;
           P64[Sp + 80] = Hp - 15;
           P64[Sp + 88] = P64[Sp + 48];
           Sp = Sp + 72;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2exQ_info" {
     block_c2exQ_info:
         const _c2exQ;
         const 95627;
         const 30;
 },
 _c2ey0() //  []
         { []
         }
     {offset
       c2ey0: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.192581155 UTC

[section ""data" . GHC.Arr.$fIx(,,,)_$crangeSize_closure" {
     GHC.Arr.$fIx(,,,)_$crangeSize_closure:
         const GHC.Arr.$fIx(,,,)_$crangeSize_info;
 },
 GHC.Arr.$fIx(,,,)_$crangeSize_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2ezA: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2ezB; else goto c2ezC;
       c2ezB: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,)_$crangeSize_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2ezC: // global
           I64[Sp - 40] = block_c2ezx_info;
           R1 = R6;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2eA3; else goto c2ezy;
       u2eA3: // global
           call _c2ezx(R1) args: 0, res: 0, upd: 0;
       c2ezy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,)_$crangeSize_info" {
     GHC.Arr.$fIx(,,,)_$crangeSize_info:
         const GHC.Arr.$fIx(,,,)_$crangeSize_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _c2ezx() //  [R1]
         { []
         }
     {offset
       c2ezx: // global
           I64[Sp - 16] = block_c2ezF_info;
           R6 = R1;
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           _s2bcp::P64 = P64[R1 + 15];
           P64[Sp - 24] = _s2bcp::P64;
           P64[Sp - 8] = _s2bcp::P64;
           P64[Sp] = R1;
           Sp = Sp - 24;
           call GHC.Arr.$fIx(,,,)_$cinRange_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ezx_info" {
     block_c2ezx_info:
         const _c2ezx;
         const 4;
         const 30;
 },
 _c2ezF() //  [R1]
         { []
         }
     {offset
       c2ezF: // global
           if (R1 & 7 == 1) goto c2ezM; else goto c2ezY;
       c2ezM: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2ezY: // global
           _s2bcl::P64 = P64[Sp + 48];
           I64[Sp + 48] = block_c2ezP_info;
           R6 = P64[Sp + 16];
           R5 = _s2bcl::P64;
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 24];
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Arr.$fIx(,,,)_$cunsafeIndex_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ezF_info" {
     block_c2ezF_info:
         const _c2ezF;
         const 6;
         const 30;
 },
 _c2ezP() //  [R1]
         { []
         }
     {offset
       c2ezP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2eA1; else goto c2eA0;
       c2eA1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2eA0: // global
           _s2bct::I64 = I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2bct::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ezP_info" {
     block_c2ezP_info:
         const _c2ezP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.206358178 UTC

[section ""data" . GHC.Arr.$fIx(,,,)_$cindex_closure" {
     GHC.Arr.$fIx(,,,)_$cindex_closure:
         const GHC.Arr.$fIx(,,,)_$cindex_info;
         const 0;
 },
 GHC.Arr.$fIx(,,,)_$cindex_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2eAD: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2eAE; else goto c2eAF;
       c2eAE: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,)_$cindex_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       c2eAF: // global
           I64[Sp - 48] = block_c2eAx_info;
           _s2bcy::P64 = R6;
           R6 = R6;
           _s2bcx::P64 = R5;
           R5 = R5;
           _s2bcw::P64 = R4;
           R4 = R4;
           _s2bcv::P64 = R3;
           R3 = R3;
           _s2bcu::P64 = R2;
           R2 = R2;
           P64[Sp - 56] = P64[Sp];
           P64[Sp - 40] = _s2bcu::P64;
           P64[Sp - 32] = _s2bcv::P64;
           P64[Sp - 24] = _s2bcw::P64;
           P64[Sp - 16] = _s2bcx::P64;
           P64[Sp - 8] = _s2bcy::P64;
           Sp = Sp - 56;
           call GHC.Arr.$fIx(,,,)_$cinRange_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,)_$cindex_info" {
     GHC.Arr.$fIx(,,,)_$cindex_info:
         const GHC.Arr.$fIx(,,,)_$cindex_entry;
         const 0;
         const 35188667056142;
         const 25769803802;
         const S2bMd_srt+192;
 },
 _c2eAx() //  [R1]
         { []
         }
     {offset
       c2eAx: // global
           if (R1 & 7 == 1) goto c2eAA; else goto c2eAB;
       c2eAA: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 56;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2eAB: // global
           R6 = P64[Sp + 40];
           R5 = P64[Sp + 32];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 48;
           call GHC.Arr.$fIx(,,,)_$cunsafeIndex_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eAx_info" {
     block_c2eAx_info:
         const _c2eAx;
         const 6;
         const 4294967326;
         const S2bMd_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.215700337 UTC

[section ""data" . GHC.Arr.$fIx(,,,)_closure" {
     GHC.Arr.$fIx(,,,)_closure:
         const GHC.Arr.$fIx(,,,)_info;
         const 0;
 },
 sat_s2bcL_entry() //  [R1, R2]
         { []
         }
     {offset
       c2eB8: // global
           R6 = R2;
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$fIx(,,,)_$cunsafeRangeSize_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2bcL_info" {
     sat_s2bcL_info:
         const sat_s2bcL_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 sat_s2bcK_entry() //  [R1, R2]
         { []
         }
     {offset
       c2eBg: // global
           R6 = R2;
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$fIx(,,,)_$crangeSize_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2bcK_info" {
     sat_s2bcK_info:
         const sat_s2bcK_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 sat_s2bcJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2eBo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2eBp; else goto c2eBq;
       c2eBp: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2eBq: // global
           R6 = R2;
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Arr.$fIx(,,,)_$cinRange_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2bcJ_info" {
     sat_s2bcJ_info:
         const sat_s2bcJ_entry;
         const 4;
         const 8;
         const 8589934607;
 },
 sat_s2bcI_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2eBw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2eBx; else goto c2eBy;
       c2eBx: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2eBy: // global
           R6 = R2;
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Arr.$fIx(,,,)_$cunsafeIndex_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2bcI_info" {
     sat_s2bcI_info:
         const sat_s2bcI_entry;
         const 4;
         const 8;
         const 8589934607;
 },
 sat_s2bcH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2eBE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2eBF; else goto c2eBG;
       c2eBF: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2eBG: // global
           R6 = R2;
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           _B1::P64 = R3;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _B1::P64;
           Sp = Sp - 8;
           call GHC.Arr.$fIx(,,,)_$cindex_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2bcH_info" {
     sat_s2bcH_info:
         const sat_s2bcH_entry;
         const 4;
         const 4294967304;
         const 8589934607;
         const S2bMd_srt+296;
 },
 sat_s2bcG_entry() //  [R1, R2]
         { []
         }
     {offset
       c2eBM: // global
           R6 = R2;
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$fIx(,,,)_$crange_entry(R6,
                                                R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2bcG_info" {
     sat_s2bcG_info:
         const sat_s2bcG_entry;
         const 4;
         const 8;
         const 4294967301;
 },
 sat_s2bcF_entry() //  [R1]
         { []
         }
     {offset
       c2eBT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2eBU; else goto c2eBV;
       c2eBU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2eBV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R5 = P64[R1 + 40];
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$fIx(,,,)_$cp1Ix_entry(R5,
                                               R4,
                                               R3,
                                               R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bcF_info" {
     sat_s2bcF_info:
         const sat_s2bcF_entry;
         const 4;
         const 15;
 },
 GHC.Arr.$fIx(,,,)_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2eBX: // global
           Hp = Hp + 352;
           if (Hp > HpLim) (likely: False) goto c2eC1; else goto c2eC0;
       c2eC1: // global
           HpAlloc = 352;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,,)_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2eC0: // global
           I64[Hp - 344] = sat_s2bcL_info;
           P64[Hp - 336] = R2;
           P64[Hp - 328] = R3;
           P64[Hp - 320] = R4;
           P64[Hp - 312] = R5;
           I64[Hp - 304] = sat_s2bcK_info;
           P64[Hp - 296] = R2;
           P64[Hp - 288] = R3;
           P64[Hp - 280] = R4;
           P64[Hp - 272] = R5;
           I64[Hp - 264] = sat_s2bcJ_info;
           P64[Hp - 256] = R2;
           P64[Hp - 248] = R3;
           P64[Hp - 240] = R4;
           P64[Hp - 232] = R5;
           I64[Hp - 224] = sat_s2bcI_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           P64[Hp - 200] = R4;
           P64[Hp - 192] = R5;
           I64[Hp - 184] = sat_s2bcH_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           P64[Hp - 160] = R4;
           P64[Hp - 152] = R5;
           I64[Hp - 144] = sat_s2bcG_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           P64[Hp - 120] = R4;
           P64[Hp - 112] = R5;
           I64[Hp - 104] = sat_s2bcF_info;
           P64[Hp - 88] = R2;
           P64[Hp - 80] = R3;
           P64[Hp - 72] = R4;
           P64[Hp - 64] = R5;
           I64[Hp - 56] = GHC.Arr.C:Ix_con_info;
           P64[Hp - 48] = Hp - 104;
           P64[Hp - 40] = Hp - 143;
           P64[Hp - 32] = Hp - 182;
           P64[Hp - 24] = Hp - 222;
           P64[Hp - 16] = Hp - 262;
           P64[Hp - 8] = Hp - 303;
           P64[Hp] = Hp - 343;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,,)_info" {
     GHC.Arr.$fIx(,,,)_info:
         const GHC.Arr.$fIx(,,,)_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S2bMd_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.233640599 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$cp1Ix_closure" {
     GHC.Arr.$fIx(,,)_$cp1Ix_closure:
         const GHC.Arr.$fIx(,,)_$cp1Ix_info;
 },
 sat_s2bcR_entry() //  [R1]
         { []
         }
     {offset
       c2eCU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2eCV; else goto c2eCW;
       c2eCV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2eCW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bcR_info" {
     sat_s2bcR_info:
         const sat_s2bcR_entry;
         const 1;
         const 16;
 },
 sat_s2bcQ_entry() //  [R1]
         { []
         }
     {offset
       c2eD1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2eD2; else goto c2eD3;
       c2eD2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2eD3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bcQ_info" {
     sat_s2bcQ_info:
         const sat_s2bcQ_entry;
         const 1;
         const 16;
 },
 sat_s2bcP_entry() //  [R1]
         { []
         }
     {offset
       c2eD8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2eD9; else goto c2eDa;
       c2eD9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2eDa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bcP_info" {
     sat_s2bcP_info:
         const sat_s2bcP_entry;
         const 1;
         const 16;
 },
 GHC.Arr.$fIx(,,)_$cp1Ix_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2eDb: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c2eDf; else goto c2eDe;
       c2eDf: // global
           HpAlloc = 72;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$cp1Ix_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2eDe: // global
           I64[Hp - 64] = sat_s2bcR_info;
           P64[Hp - 48] = R4;
           I64[Hp - 40] = sat_s2bcQ_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s2bcP_info;
           P64[Hp] = R2;
           R4 = Hp - 64;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call GHC.Classes.$fOrd(,,)_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$cp1Ix_info" {
     GHC.Arr.$fIx(,,)_$cp1Ix_info:
         const GHC.Arr.$fIx(,,)_$cp1Ix_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.24301784 UTC

[section ""data" . GHC.Arr.$fIx(,)_$cp1Ix_closure" {
     GHC.Arr.$fIx(,)_$cp1Ix_closure:
         const GHC.Arr.$fIx(,)_$cp1Ix_info;
 },
 sat_s2bcV_entry() //  [R1]
         { []
         }
     {offset
       c2eDK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2eDL; else goto c2eDM;
       c2eDL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2eDM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bcV_info" {
     sat_s2bcV_info:
         const sat_s2bcV_entry;
         const 1;
         const 16;
 },
 sat_s2bcU_entry() //  [R1]
         { []
         }
     {offset
       c2eDR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2eDS; else goto c2eDT;
       c2eDS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2eDT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bcU_info" {
     sat_s2bcU_info:
         const sat_s2bcU_entry;
         const 1;
         const 16;
 },
 GHC.Arr.$fIx(,)_$cp1Ix_entry() //  [R2, R3]
         { []
         }
     {offset
       c2eDU: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c2eDY; else goto c2eDX;
       c2eDY: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$cp1Ix_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2eDX: // global
           I64[Hp - 40] = sat_s2bcV_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_s2bcU_info;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 16;
           call GHC.Classes.$fOrd(,)_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$cp1Ix_info" {
     GHC.Arr.$fIx(,)_$cp1Ix_info:
         const GHC.Arr.$fIx(,)_$cp1Ix_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.255360426 UTC

[section ""data" . GHC.Arr.$fIx(,)_$s$crange_closure" {
     GHC.Arr.$fIx(,)_$s$crange_closure:
         const GHC.Arr.$fIx(,)_$s$crange_info;
 },
 z_s2bdj_entry() //  [R1]
         { []
         }
     {offset
       c2eFe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2eFf; else goto c2eFg;
       c2eFf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2eFg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2bdh::I64 = I64[R1 + 32];
           if (_s2bdh::I64 == I64[R1 + 24]) goto c2eFd; else goto c2eFc;
       c2eFd: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c2eFc: // global
           R2 = _s2bdh::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s2bdg_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . z_s2bdj_info" {
     z_s2bdj_info:
         const z_s2bdj_entry;
         const 8589934593;
         const 15;
 },
 go1_s2bdm_entry() //  [R1, R2]
         { []
         }
     {offset
       c2eFv: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2eFw; else goto c2eFx;
       c2eFw: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2eFx: // global
           I64[Sp - 32] = block_c2eFo_info;
           _s2bdm::P64 = R1;
           _s2bdi::P64 = P64[R1 + 7];
           _s2bdj::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s2bdi::P64;
           P64[Sp - 16] = _s2bdj::P64;
           P64[Sp - 8] = _s2bdm::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2eFJ; else goto c2eFp;
       u2eFJ: // global
           call _c2eFo(R1) args: 0, res: 0, upd: 0;
       c2eFp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s2bdm_info" {
     go1_s2bdm_info:
         const go1_s2bdm_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c2eFo() //  [R1]
         { []
         }
     {offset
       c2eFo: // global
           if (R1 & 7 == 1) goto c2eFs; else goto c2eFt;
       c2eFs: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2eFt: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c2eFI; else goto c2eFH;
       c2eFI: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2eFH: // global
           _s2bdp::P64 = P64[R1 + 6];
           _s2bdq::P64 = P64[R1 + 14];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = _s2bdq::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s2bdp::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eFo_info" {
     block_c2eFo_info:
         const _c2eFo;
         const 3;
         const 30;
 },
 go_s2bdg_entry() //  [R1, R2]
         { []
         }
     {offset
       c2eFK: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c2eFO; else goto c2eFN;
       c2eFO: // global
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2eFN: // global
           _s2bdf::P64 = P64[R1 + 7];
           _s2bd9::I64 = I64[R1 + 15];
           I64[Hp - 72] = GHC.Types.I#_con_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = z_s2bdj_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = _s2bd9::I64;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = go1_s2bdm_info;
           P64[Hp - 8] = Hp - 71;
           P64[Hp] = Hp - 56;
           R2 = _s2bdf::P64;
           R1 = Hp - 15;
           call go1_s2bdm_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_s2bdg_info" {
     go_s2bdg_info:
         const go_s2bdg_entry;
         const 4294967297;
         const 12;
         const 4294967300;
 },
 GHC.Arr.$fIx(,)_$s$crange_entry() //  [R2]
         { []
         }
     {offset
       c2eFP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2eFQ; else goto c2eFR;
       c2eFQ: // global
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$s$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2eFR: // global
           I64[Sp - 8] = block_c2eEj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eGb; else goto c2eEk;
       u2eGb: // global
           call _c2eEj(R1) args: 0, res: 0, upd: 0;
       c2eEk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$s$crange_info" {
     GHC.Arr.$fIx(,)_$s$crange_info:
         const GHC.Arr.$fIx(,)_$s$crange_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2eEj() //  [R1]
         { []
         }
     {offset
       c2eEj: // global
           I64[Sp - 8] = block_c2eEo_info;
           _s2bcZ::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bcZ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eG5; else goto c2eEp;
       u2eG5: // global
           call _c2eEo(R1) args: 0, res: 0, upd: 0;
       c2eEp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eEj_info" {
     block_c2eEj_info:
         const _c2eEj;
         const 0;
         const 30;
 },
 _c2eEo() //  [R1]
         { []
         }
     {offset
       c2eEo: // global
           I64[Sp - 8] = block_c2eEt_info;
           _s2bd1::P64 = P64[R1 + 7];
           _s2bd2::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s2bd2::P64;
           P64[Sp + 8] = _s2bd1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eG6; else goto c2eEu;
       u2eG6: // global
           call _c2eEt(R1) args: 0, res: 0, upd: 0;
       c2eEu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eEo_info" {
     block_c2eEo_info:
         const _c2eEo;
         const 1;
         const 30;
 },
 _c2eEt() //  [R1]
         { []
         }
     {offset
       c2eEt: // global
           I64[Sp - 8] = block_c2eEy_info;
           _s2bd4::P64 = P64[R1 + 7];
           _s2bd5::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s2bd5::P64;
           P64[Sp + 16] = _s2bd4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eG7; else goto c2eEz;
       u2eG7: // global
           call _c2eEy(R1) args: 0, res: 0, upd: 0;
       c2eEz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eEt_info" {
     block_c2eEt_info:
         const _c2eEt;
         const 2;
         const 30;
 },
 _c2eEy() //  [R1]
         { []
         }
     {offset
       c2eEy: // global
           I64[Sp] = block_c2eED_info;
           _s2bd7::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s2bd7::I64;
           if (R1 & 7 != 0) goto u2eG8; else goto c2eEE;
       u2eG8: // global
           call _c2eED(R1) args: 0, res: 0, upd: 0;
       c2eEE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eEy_info" {
     block_c2eEy_info:
         const _c2eEy;
         const 3;
         const 30;
 },
 _c2eED() //  [R1]
         { []
         }
     {offset
       c2eED: // global
           _s2bd9::I64 = I64[R1 + 7];
           if (%MO_S_Le_W64(I64[Sp + 24],
                            _s2bd9::I64)) goto c2eFY; else goto c2eG4;
       c2eFY: // global
           I64[Sp] = block_c2eEL_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2bd9::I64;
           if (R1 & 7 != 0) goto u2eG9; else goto c2eEM;
       u2eG9: // global
           call _c2eEL(R1) args: 0, res: 0, upd: 0;
       c2eEM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c2eG4: // global
           R1 = []_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eED_info" {
     block_c2eED_info:
         const _c2eED;
         const 259;
         const 30;
 },
 _c2eEL() //  [R1]
         { []
         }
     {offset
       c2eEL: // global
           I64[Sp] = block_c2eEQ_info;
           _s2bdc::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2bdc::I64;
           if (R1 & 7 != 0) goto u2eGa; else goto c2eER;
       u2eGa: // global
           call _c2eEQ(R1) args: 0, res: 0, upd: 0;
       c2eER: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eEL_info" {
     block_c2eEL_info:
         const _c2eEL;
         const 387;
         const 30;
 },
 _c2eEQ() //  [R1]
         { []
         }
     {offset
       c2eEQ: // global
           _s2bdc::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_c2eEV_info;
           R3 = I64[R1 + 7];
           R2 = _s2bdc::I64;
           Sp = Sp + 8;
           call GHC.Enum.eftInt_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eEQ_info" {
     block_c2eEQ_info:
         const _c2eEQ;
         const 451;
         const 30;
 },
 _c2eEV() //  [R1]
         { []
         }
     {offset
       c2eEV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2eG3; else goto c2eG2;
       c2eG3: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2eG2: // global
           I64[Hp - 16] = go_s2bdg_info;
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 8];
           R2 = I64[Sp + 16];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call go_s2bdg_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eEV_info" {
     block_c2eEV_info:
         const _c2eEV;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.285088172 UTC

[section ""data" . GHC.Arr.$fIx(,)_$crange_closure" {
     GHC.Arr.$fIx(,)_$crange_closure:
         const GHC.Arr.$fIx(,)_$crange_info;
 },
 lvl50_s2bdF_entry() //  [R1]
         { []
         }
     {offset
       c2eHW: // global
           _s2bdF::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c2eHX; else goto c2eHY;
       c2eHY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2eI0; else goto c2eHZ;
       c2eI0: // global
           HpAlloc = 24;
           goto c2eHX;
       c2eHX: // global
           R1 = _s2bdF::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2eHZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2bdF::P64;
           _s2bdu::P64 = P64[_s2bdF::P64 + 16];
           _s2bdB::P64 = P64[_s2bdF::P64 + 24];
           _s2bdE::P64 = P64[_s2bdF::P64 + 32];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2bdB::P64;
           P64[Hp] = _s2bdE::P64;
           R2 = _s2bdu::P64;
           I64[Sp - 32] = stg_ap_p_info;
           P64[Sp - 24] = Hp - 15;
           Sp = Sp - 32;
           call GHC.Arr.range_entry(R2) args: 40, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl50_s2bdF_info" {
     lvl50_s2bdF_info:
         const lvl50_s2bdF_entry;
         const 3;
         const 15;
 },
 go1_s2bdN_entry() //  [R1, R2]
         { []
         }
     {offset
       c2eIp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2eIq; else goto c2eIr;
       c2eIq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2eIr: // global
           I64[Sp - 32] = block_c2eIi_info;
           _s2bdN::P64 = R1;
           _s2bdK::P64 = P64[R1 + 7];
           _s2bdM::P64 = P64[R1 + 15];
           R1 = R2;
           P64[Sp - 24] = _s2bdK::P64;
           P64[Sp - 16] = _s2bdM::P64;
           P64[Sp - 8] = _s2bdN::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2eID; else goto c2eIj;
       u2eID: // global
           call _c2eIi(R1) args: 0, res: 0, upd: 0;
       c2eIj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s2bdN_info" {
     go1_s2bdN_info:
         const go1_s2bdN_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _c2eIi() //  [R1]
         { []
         }
     {offset
       c2eIi: // global
           if (R1 & 7 == 1) goto c2eIm; else goto c2eIn;
       c2eIm: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2eIn: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c2eIC; else goto c2eIB;
       c2eIC: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2eIB: // global
           _s2bdQ::P64 = P64[R1 + 6];
           _s2bdR::P64 = P64[R1 + 14];
           I64[Hp - 72] = stg_ap_2_upd_info;
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = _s2bdR::P64;
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _s2bdQ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eIi_info" {
     block_c2eIi_info:
         const _c2eIi;
         const 3;
         const 30;
 },
 go_s2bdH_entry() //  [R1, R2]
         { []
         }
     {offset
       c2eII: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2eIJ; else goto c2eIK;
       c2eIJ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2eIK: // global
           I64[Sp - 24] = block_c2eI6_info;
           _s2bdH::P64 = R1;
           _s2bdF::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _s2bdF::P64;
           P64[Sp - 8] = _s2bdH::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2eIQ; else goto c2eI7;
       u2eIQ: // global
           call _c2eI6(R1) args: 0, res: 0, upd: 0;
       c2eI7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s2bdH_info" {
     go_s2bdH_info:
         const go_s2bdH_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _c2eI6() //  [R1]
         { []
         }
     {offset
       c2eI6: // global
           if (R1 & 7 == 1) goto c2eIF; else goto c2eIG;
       c2eIF: // global
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2eIG: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c2eIP; else goto c2eIO;
       c2eIP: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2eIO: // global
           _s2bdK::P64 = P64[R1 + 6];
           _s2bdL::P64 = P64[R1 + 14];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = _s2bdL::P64;
           I64[Hp - 16] = go1_s2bdN_info;
           P64[Hp - 8] = _s2bdK::P64;
           P64[Hp] = Hp - 48;
           R2 = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call go1_s2bdN_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eI6_info" {
     block_c2eI6_info:
         const _c2eI6;
         const 2;
         const 30;
 },
 GHC.Arr.$fIx(,)_$crange_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2eIR: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2eIU; else goto c2eIV;
       c2eIU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$crange_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2eIV: // global
           I64[Sp - 24] = block_c2eHC_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2eJ7; else goto c2eHD;
       u2eJ7: // global
           call _c2eHC(R1) args: 0, res: 0, upd: 0;
       c2eHD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$crange_info" {
     GHC.Arr.$fIx(,)_$crange_info:
         const GHC.Arr.$fIx(,)_$crange_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c2eHC() //  [R1]
         { []
         }
     {offset
       c2eHC: // global
           I64[Sp - 8] = block_c2eHH_info;
           _s2bdy::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bdy::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eJ5; else goto c2eHI;
       u2eJ5: // global
           call _c2eHH(R1) args: 0, res: 0, upd: 0;
       c2eHI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eHC_info" {
     block_c2eHC_info:
         const _c2eHC;
         const 2;
         const 30;
 },
 _c2eHH() //  [R1]
         { []
         }
     {offset
       c2eHH: // global
           I64[Sp - 8] = block_c2eHM_info;
           _s2bdA::P64 = P64[R1 + 7];
           _s2bdB::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s2bdB::P64;
           P64[Sp + 8] = _s2bdA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eJ6; else goto c2eHN;
       u2eJ6: // global
           call _c2eHM(R1) args: 0, res: 0, upd: 0;
       c2eHN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eHH_info" {
     block_c2eHH_info:
         const _c2eHH;
         const 3;
         const 30;
 },
 _c2eHM() //  [R1]
         { []
         }
     {offset
       c2eHM: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c2eJ0; else goto c2eIZ;
       c2eJ0: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2eIZ: // global
           _s2bdD::P64 = P64[R1 + 7];
           _s2bdE::P64 = P64[R1 + 15];
           I64[Hp - 72] = lvl50_s2bdF_info;
           P64[Hp - 56] = P64[Sp + 32];
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = _s2bdE::P64;
           I64[Hp - 32] = go_s2bdH_info;
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s2bdD::P64;
           _s2bdt::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c2eIT_info;
           R2 = _s2bdt::P64;
           I64[Sp + 8] = stg_ap_p_info;
           P64[Sp + 16] = Hp - 15;
           P64[Sp + 32] = Hp - 31;
           Sp = Sp + 8;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eHM_info" {
     block_c2eHM_info:
         const _c2eHM;
         const 4;
         const 30;
 },
 _c2eIT() //  [R1]
         { []
         }
     {offset
       c2eIT: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s2bdH_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eIT_info" {
     block_c2eIT_info:
         const _c2eIT;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.307883729 UTC

[section ""data" . GHC.Arr.$fIx(,)_$s$cunsafeIndex_closure" {
     GHC.Arr.$fIx(,)_$s$cunsafeIndex_closure:
         const GHC.Arr.$fIx(,)_$s$cunsafeIndex_info;
 },
 GHC.Arr.$fIx(,)_$s$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2eKx: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2eLx; else goto c2eLy;
       c2eLx: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$s$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2eLy: // global
           I64[Sp - 16] = block_c2eKu_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2eLL; else goto c2eKv;
       u2eLL: // global
           call _c2eKu(R1) args: 0, res: 0, upd: 0;
       c2eKv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$s$cunsafeIndex_info" {
     GHC.Arr.$fIx(,)_$s$cunsafeIndex_info:
         const GHC.Arr.$fIx(,)_$s$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2eKu() //  [R1]
         { []
         }
     {offset
       c2eKu: // global
           I64[Sp - 8] = block_c2eKA_info;
           _s2be0::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2be0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eLK; else goto c2eKB;
       u2eLK: // global
           call _c2eKA(R1) args: 0, res: 0, upd: 0;
       c2eKB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eKu_info" {
     block_c2eKu_info:
         const _c2eKu;
         const 1;
         const 30;
 },
 _c2eKA() //  [R1]
         { []
         }
     {offset
       c2eKA: // global
           I64[Sp - 8] = block_c2eKF_info;
           _s2be2::P64 = P64[R1 + 7];
           _s2be3::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s2be3::P64;
           P64[Sp + 8] = _s2be2::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eLM; else goto c2eKG;
       u2eLM: // global
           call _c2eKF(R1) args: 0, res: 0, upd: 0;
       c2eKG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eKA_info" {
     block_c2eKA_info:
         const _c2eKA;
         const 2;
         const 30;
 },
 _c2eKF() //  [R1]
         { []
         }
     {offset
       c2eKF: // global
           I64[Sp] = block_c2eKK_info;
           _s2be6::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _s2be6::P64;
           if (R1 & 7 != 0) goto u2eLN; else goto c2eKL;
       u2eLN: // global
           call _c2eKK(R1) args: 0, res: 0, upd: 0;
       c2eKL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eKF_info" {
     block_c2eKF_info:
         const _c2eKF;
         const 3;
         const 30;
 },
 _c2eKK() //  [R1]
         { []
         }
     {offset
       c2eKK: // global
           I64[Sp - 8] = block_c2eKP_info;
           _s2be9::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2be9::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eLO; else goto c2eKQ;
       u2eLO: // global
           call _c2eKP(R1) args: 0, res: 0, upd: 0;
       c2eKQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eKK_info" {
     block_c2eKK_info:
         const _c2eKK;
         const 3;
         const 30;
 },
 _c2eKP() //  [R1]
         { []
         }
     {offset
       c2eKP: // global
           I64[Sp] = block_c2eKU_info;
           _s2beb::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s2beb::I64;
           if (R1 & 7 != 0) goto u2eLP; else goto c2eKV;
       u2eLP: // global
           call _c2eKU(R1) args: 0, res: 0, upd: 0;
       c2eKV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eKP_info" {
     block_c2eKP_info:
         const _c2eKP;
         const 4;
         const 30;
 },
 _c2eKU() //  [R1]
         { []
         }
     {offset
       c2eKU: // global
           I64[Sp] = block_c2eKZ_info;
           _s2bed::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s2bed::I64;
           if (R1 & 7 != 0) goto u2eLQ; else goto c2eL0;
       u2eLQ: // global
           call _c2eKZ(R1) args: 0, res: 0, upd: 0;
       c2eL0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eKU_info" {
     block_c2eKU_info:
         const _c2eKU;
         const 260;
         const 30;
 },
 _c2eKZ() //  [R1]
         { []
         }
     {offset
       c2eKZ: // global
           I64[Sp] = block_c2eL4_info;
           _s2bef::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2bef::I64;
           if (R1 & 7 != 0) goto u2eLR; else goto c2eL5;
       u2eLR: // global
           call _c2eL4(R1) args: 0, res: 0, upd: 0;
       c2eL5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eKZ_info" {
     block_c2eKZ_info:
         const _c2eKZ;
         const 772;
         const 30;
 },
 _c2eL4() //  [R1]
         { []
         }
     {offset
       c2eL4: // global
           I64[Sp] = block_c2eL9_info;
           _s2beh::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2beh::I64;
           if (R1 & 7 != 0) goto u2eLS; else goto c2eLa;
       u2eLS: // global
           call _c2eL9(R1) args: 0, res: 0, upd: 0;
       c2eLa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eL4_info" {
     block_c2eL4_info:
         const _c2eL4;
         const 900;
         const 30;
 },
 _c2eL9() //  [R1]
         { []
         }
     {offset
       c2eL9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2eLJ; else goto c2eLI;
       c2eLJ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2eLI: // global
           _s2beh::I64 = I64[Sp + 8];
           _s2bep::I64 = (I64[Sp + 24] - I64[Sp + 32]) * (I64[Sp + 16] + (1 - _s2beh::I64)) + (I64[R1 + 7] - _s2beh::I64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2bep::I64;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eL9_info" {
     block_c2eL9_info:
         const _c2eL9;
         const 964;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.329149127 UTC

[section ""data" . GHC.Arr.$fIx(,)_$cunsafeIndex_closure" {
     GHC.Arr.$fIx(,)_$cunsafeIndex_closure:
         const GHC.Arr.$fIx(,)_$cunsafeIndex_info;
 },
 GHC.Arr.$fIx(,)_$cunsafeIndex_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2eMZ: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c2eNC; else goto c2eND;
       c2eNC: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$cunsafeIndex_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2eND: // global
           I64[Sp - 32] = block_c2eMW_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2eNS; else goto c2eMX;
       u2eNS: // global
           call _c2eMW(R1) args: 0, res: 0, upd: 0;
       c2eMX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$cunsafeIndex_info" {
     GHC.Arr.$fIx(,)_$cunsafeIndex_info:
         const GHC.Arr.$fIx(,)_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c2eMW() //  [R1]
         { []
         }
     {offset
       c2eMW: // global
           I64[Sp - 8] = block_c2eN2_info;
           _s2bew::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bew::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eNR; else goto c2eN3;
       u2eNR: // global
           call _c2eN2(R1) args: 0, res: 0, upd: 0;
       c2eN3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eMW_info" {
     block_c2eMW_info:
         const _c2eMW;
         const 3;
         const 30;
 },
 _c2eN2() //  [R1]
         { []
         }
     {offset
       c2eN2: // global
           I64[Sp - 8] = block_c2eN7_info;
           _s2bey::P64 = P64[R1 + 7];
           _s2bez::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s2bez::P64;
           P64[Sp + 8] = _s2bey::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eNT; else goto c2eN8;
       u2eNT: // global
           call _c2eN7(R1) args: 0, res: 0, upd: 0;
       c2eN8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eN2_info" {
     block_c2eN2_info:
         const _c2eN2;
         const 4;
         const 30;
 },
 _c2eN7() //  [R1]
         { []
         }
     {offset
       c2eN7: // global
           I64[Sp - 8] = block_c2eNc_info;
           _s2beB::P64 = P64[R1 + 7];
           _s2beC::P64 = P64[R1 + 15];
           R1 = P64[Sp + 40];
           P64[Sp] = _s2beC::P64;
           P64[Sp + 40] = _s2beB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eNU; else goto c2eNd;
       u2eNU: // global
           call _c2eNc(R1) args: 0, res: 0, upd: 0;
       c2eNd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eN7_info" {
     block_c2eN7_info:
         const _c2eN7;
         const 5;
         const 30;
 },
 _c2eNc() //  [R1]
         { []
         }
     {offset
       c2eNc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2eNJ; else goto c2eNI;
       c2eNJ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2eNI: // global
           _s2beE::P64 = P64[R1 + 7];
           _s2beF::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 48];
           I64[Sp] = block_c2eNi_info;
           R2 = P64[Sp + 32];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = _s2beE::P64;
           P64[Sp + 48] = _s2beF::P64;
           Sp = Sp - 24;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eNc_info" {
     block_c2eNc_info:
         const _c2eNc;
         const 6;
         const 30;
 },
 _c2eNi() //  [R1]
         { []
         }
     {offset
       c2eNi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2eNM; else goto c2eNL;
       c2eNM: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2eNL: // global
           _s2beI::I64 = I64[R1 + 7];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 16] = block_c2eNn_info;
           R2 = P64[Sp + 40];
           I64[Sp] = stg_ap_p_info;
           _c2eNm::P64 = Hp - 15;
           P64[Sp + 8] = _c2eNm::P64;
           I64[Sp + 24] = _s2beI::I64;
           P64[Sp + 32] = _c2eNm::P64;
           call GHC.Arr.unsafeRangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eNi_info" {
     block_c2eNi_info:
         const _c2eNi;
         const 774;
         const 30;
 },
 _c2eNn() //  [R1]
         { []
         }
     {offset
       c2eNn: // global
           I64[Sp] = block_c2eNr_info;
           R2 = P64[Sp + 24];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = P64[Sp + 16];
           P64[Sp - 8] = P64[Sp + 32];
           I64[Sp + 32] = I64[R1 + 7];
           Sp = Sp - 24;
           call GHC.Arr.unsafeIndex_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eNn_info" {
     block_c2eNn_info:
         const _c2eNn;
         const 68;
         const 30;
 },
 _c2eNr() //  [R1]
         { []
         }
     {offset
       c2eNr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2eNQ; else goto c2eNP;
       c2eNQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2eNP: // global
           _s2beQ::I64 = I64[Sp + 8] * I64[Sp + 32] + I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2beQ::I64;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eNr_info" {
     block_c2eNr_info:
         const _c2eNr;
         const 964;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.348872537 UTC

[section ""data" . GHC.Arr.$fIx(,)_$s$cinRange_closure" {
     GHC.Arr.$fIx(,)_$s$cinRange_closure:
         const GHC.Arr.$fIx(,)_$s$cinRange_info;
 },
 GHC.Arr.$fIx(,)_$s$cinRange_entry() //  [R2, R3]
         { []
         }
     {offset
       c2eOV: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2ePo; else goto c2ePp;
       c2ePo: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$s$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2ePp: // global
           I64[Sp - 16] = block_c2eOS_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2eQj; else goto c2eOT;
       u2eQj: // global
           call _c2eOS(R1) args: 0, res: 0, upd: 0;
       c2eOT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$s$cinRange_info" {
     GHC.Arr.$fIx(,)_$s$cinRange_info:
         const GHC.Arr.$fIx(,)_$s$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2eOS() //  [R1]
         { []
         }
     {offset
       c2eOS: // global
           I64[Sp - 8] = block_c2eOY_info;
           _s2beV::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2beV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eQi; else goto c2eOZ;
       u2eQi: // global
           call _c2eOY(R1) args: 0, res: 0, upd: 0;
       c2eOZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eOS_info" {
     block_c2eOS_info:
         const _c2eOS;
         const 1;
         const 30;
 },
 _c2eOY() //  [R1]
         { []
         }
     {offset
       c2eOY: // global
           I64[Sp - 8] = block_c2eP3_info;
           _s2beX::P64 = P64[R1 + 7];
           _s2beY::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s2beY::P64;
           P64[Sp + 8] = _s2beX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eQk; else goto c2eP4;
       u2eQk: // global
           call _c2eP3(R1) args: 0, res: 0, upd: 0;
       c2eP4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eOY_info" {
     block_c2eOY_info:
         const _c2eOY;
         const 2;
         const 30;
 },
 _c2eP3() //  [R1]
         { []
         }
     {offset
       c2eP3: // global
           I64[Sp - 8] = block_c2eP8_info;
           _s2bf0::P64 = P64[R1 + 7];
           _s2bf1::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _s2bf1::P64;
           P64[Sp + 24] = _s2bf0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eQl; else goto c2eP9;
       u2eQl: // global
           call _c2eP8(R1) args: 0, res: 0, upd: 0;
       c2eP9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eP3_info" {
     block_c2eP3_info:
         const _c2eP3;
         const 3;
         const 30;
 },
 _c2eP8() //  [R1]
         { []
         }
     {offset
       c2eP8: // global
           I64[Sp - 8] = block_c2ePd_info;
           _s2bf3::P64 = P64[R1 + 7];
           _s2bf4::P64 = P64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _s2bf4::P64;
           P64[Sp + 24] = _s2bf3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eQm; else goto c2ePe;
       u2eQm: // global
           call _c2ePd(R1) args: 0, res: 0, upd: 0;
       c2ePe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eP8_info" {
     block_c2eP8_info:
         const _c2eP8;
         const 4;
         const 30;
 },
 _c2ePd() //  [R1]
         { []
         }
     {offset
       c2ePd: // global
           I64[Sp] = block_c2ePi_info;
           _s2bf6::I64 = I64[R1 + 7];
           R1 = P64[Sp + 40];
           I64[Sp + 40] = _s2bf6::I64;
           if (R1 & 7 != 0) goto u2eQn; else goto c2ePj;
       u2eQn: // global
           call _c2ePi(R1) args: 0, res: 0, upd: 0;
       c2ePj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ePd_info" {
     block_c2ePd_info:
         const _c2ePd;
         const 5;
         const 30;
 },
 _c2ePi() //  [R1]
         { []
         }
     {offset
       c2ePi: // global
           I64[Sp] = block_c2ePn_info;
           _s2bf8::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s2bf8::I64;
           if (R1 & 7 != 0) goto u2eQo; else goto c2ePw;
       u2eQo: // global
           call _c2ePn(R1) args: 0, res: 0, upd: 0;
       c2ePw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ePi_info" {
     block_c2ePi_info:
         const _c2ePi;
         const 1029;
         const 30;
 },
 _c2ePn() //  [R1]
         { []
         }
     {offset
       c2ePn: // global
           _s2bfa::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(I64[Sp + 40],
                            _s2bfa::I64)) goto u2eQf; else goto c2eQb;
       u2eQf: // global
           Sp = Sp + 48;
           goto u2eQr;
       c2eQb: // global
           if (%MO_S_Gt_W64(_s2bfa::I64,
                            I64[Sp + 32])) goto u2eQg; else goto c2ePY;
       u2eQg: // global
           Sp = Sp + 48;
           goto u2eQr;
       u2eQr: // global
           call _c2eQ9() args: 0, res: 0, upd: 0;
       c2ePY: // global
           I64[Sp] = block_c2ePN_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u2eQp; else goto c2ePO;
       u2eQp: // global
           call _c2ePN(R1) args: 0, res: 0, upd: 0;
       c2ePO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ePn_info" {
     block_c2ePn_info:
         const _c2ePn;
         const 1541;
         const 30;
 },
 _c2ePN() //  [R1]
         { []
         }
     {offset
       c2ePN: // global
           I64[Sp] = block_c2ePS_info;
           _s2bfe::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 40] = _s2bfe::I64;
           if (R1 & 7 != 0) goto u2eQs; else goto c2ePT;
       u2eQs: // global
           call _c2ePS(R1) args: 0, res: 0, upd: 0;
       c2ePT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ePN_info" {
     block_c2ePN_info:
         const _c2ePN;
         const 1797;
         const 30;
 },
 _c2ePS() //  [R1]
         { []
         }
     {offset
       c2ePS: // global
           I64[Sp + 24] = block_c2ePX_info;
           _s2bfg::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 32] = _s2bfg::I64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u2eQt; else goto c2eQ1;
       u2eQt: // global
           call _c2ePX(R1) args: 0, res: 0, upd: 0;
       c2eQ1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ePS_info" {
     block_c2ePS_info:
         const _c2ePS;
         const 1925;
         const 30;
 },
 _c2ePX() //  [R1]
         { []
         }
     {offset
       c2ePX: // global
           _s2bfi::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(I64[Sp + 16],
                            _s2bfi::I64)) goto u2eQh; else goto c2eQa;
       u2eQh: // global
           Sp = Sp + 24;
           call _c2eQ9() args: 0, res: 0, upd: 0;
       c2eQa: // global
           R1 = I64[(%MO_S_Le_W64(_s2bfi::I64,
                                  I64[Sp + 8]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ePX_info" {
     block_c2ePX_info:
         const _c2ePX;
         const 194;
         const 30;
 },
 _c2eQ9() //  []
         { []
         }
     {offset
       c2eQ9: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.372027562 UTC

[section ""data" . GHC.Arr.$fIx(,)_$cinRange_closure" {
     GHC.Arr.$fIx(,)_$cinRange_closure:
         const GHC.Arr.$fIx(,)_$cinRange_info;
 },
 GHC.Arr.$fIx(,)_$cinRange_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2eRD: // global
           if ((Sp + -80) < SpLim) (likely: False) goto c2eRR; else goto c2eRS;
       c2eRR: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$cinRange_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2eRS: // global
           I64[Sp - 32] = block_c2eRA_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2eSk; else goto c2eRB;
       u2eSk: // global
           call _c2eRA(R1) args: 0, res: 0, upd: 0;
       c2eRB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$cinRange_info" {
     GHC.Arr.$fIx(,)_$cinRange_info:
         const GHC.Arr.$fIx(,)_$cinRange_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c2eRA() //  [R1]
         { []
         }
     {offset
       c2eRA: // global
           I64[Sp - 8] = block_c2eRG_info;
           _s2bfr::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bfr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eSj; else goto c2eRH;
       u2eSj: // global
           call _c2eRG(R1) args: 0, res: 0, upd: 0;
       c2eRH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eRA_info" {
     block_c2eRA_info:
         const _c2eRA;
         const 3;
         const 30;
 },
 _c2eRG() //  [R1]
         { []
         }
     {offset
       c2eRG: // global
           I64[Sp - 8] = block_c2eRL_info;
           _s2bft::P64 = P64[R1 + 7];
           _s2bfu::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s2bfu::P64;
           P64[Sp + 8] = _s2bft::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eSl; else goto c2eRM;
       u2eSl: // global
           call _c2eRL(R1) args: 0, res: 0, upd: 0;
       c2eRM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eRG_info" {
     block_c2eRG_info:
         const _c2eRG;
         const 4;
         const 30;
 },
 _c2eRL() //  [R1]
         { []
         }
     {offset
       c2eRL: // global
           I64[Sp - 8] = block_c2eRQ_info;
           _s2bfw::P64 = P64[R1 + 7];
           _s2bfx::P64 = P64[R1 + 15];
           R1 = P64[Sp + 40];
           P64[Sp] = _s2bfx::P64;
           P64[Sp + 40] = _s2bfw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eSm; else goto c2eRW;
       u2eSm: // global
           call _c2eRQ(R1) args: 0, res: 0, upd: 0;
       c2eRW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eRL_info" {
     block_c2eRL_info:
         const _c2eRL;
         const 5;
         const 30;
 },
 _c2eRQ() //  [R1]
         { []
         }
     {offset
       c2eRQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2eS4; else goto c2eS3;
       c2eS4: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2eS3: // global
           _s2bfz::P64 = P64[R1 + 7];
           _s2bfA::P64 = P64[R1 + 15];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 48];
           I64[Sp] = block_c2eS1_info;
           R2 = P64[Sp + 32];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = _s2bfz::P64;
           P64[Sp + 48] = _s2bfA::P64;
           Sp = Sp - 24;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eRQ_info" {
     block_c2eRQ_info:
         const _c2eRQ;
         const 6;
         const 30;
 },
 _c2eS1() //  [R1]
         { []
         }
     {offset
       c2eS1: // global
           if (R1 & 7 == 1) goto c2eSa; else goto c2eSb;
       c2eSa: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2eSb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2eSg; else goto c2eSf;
       c2eSg: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2eSf: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           R2 = P64[Sp + 40];
           I64[Sp + 32] = stg_ap_pp_info;
           P64[Sp + 40] = Hp - 15;
           Sp = Sp + 32;
           call GHC.Arr.inRange_entry(R2) args: 32, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eS1_info" {
     block_c2eS1_info:
         const _c2eS1;
         const 774;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.383953536 UTC

[section ""data" . lvl21_r1Xvy_closure" {
     lvl21_r1Xvy_closure:
         const :_con_info;
         const GHC.Tuple.()_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.386894773 UTC

[section ""data" . GHC.Arr.$fIx()_$crange_closure" {
     GHC.Arr.$fIx()_$crange_closure:
         const GHC.Arr.$fIx()_$crange_info;
 },
 GHC.Arr.$fIx()_$crange_entry() //  [R2]
         { []
         }
     {offset
       c2eTc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2eTl; else goto c2eTm;
       c2eTl: // global
           R2 = R2;
           R1 = GHC.Arr.$fIx()_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2eTm: // global
           I64[Sp - 8] = block_c2eT9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eTv; else goto c2eTa;
       u2eTv: // global
           call _c2eT9(R1) args: 0, res: 0, upd: 0;
       c2eTa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx()_$crange_info" {
     GHC.Arr.$fIx()_$crange_info:
         const GHC.Arr.$fIx()_$crange_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2eT9() //  [R1]
         { []
         }
     {offset
       c2eT9: // global
           I64[Sp - 8] = block_c2eTf_info;
           _s2bfH::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bfH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eTu; else goto c2eTg;
       u2eTu: // global
           call _c2eTf() args: 0, res: 0, upd: 0;
       c2eTg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eT9_info" {
     block_c2eT9_info:
         const _c2eT9;
         const 0;
         const 30;
 },
 _c2eTf() //  []
         { []
         }
     {offset
       c2eTf: // global
           _s2bfH::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2eTk_info;
           R1 = _s2bfH::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2eTw; else goto c2eTp;
       u2eTw: // global
           call _c2eTk() args: 0, res: 0, upd: 0;
       c2eTp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eTf_info" {
     block_c2eTf_info:
         const _c2eTf;
         const 1;
         const 30;
 },
 _c2eTk() //  []
         { []
         }
     {offset
       c2eTk: // global
           R1 = lvl21_r1Xvy_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eTk_info" {
     block_c2eTk_info:
         const _c2eTk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.396793481 UTC

[section ""data" . GHC.Arr.$fIx()_$cunsafeIndex_closure" {
     GHC.Arr.$fIx()_$cunsafeIndex_closure:
         const GHC.Arr.$fIx()_$cunsafeIndex_info;
 },
 GHC.Arr.$fIx()_$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2eTZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2eUd; else goto c2eUe;
       c2eUd: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx()_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2eUe: // global
           I64[Sp - 16] = block_c2eTW_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2eUo; else goto c2eTX;
       u2eUo: // global
           call _c2eTW(R1) args: 0, res: 0, upd: 0;
       c2eTX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx()_$cunsafeIndex_info" {
     GHC.Arr.$fIx()_$cunsafeIndex_info:
         const GHC.Arr.$fIx()_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2eTW() //  [R1]
         { []
         }
     {offset
       c2eTW: // global
           I64[Sp - 8] = block_c2eU2_info;
           _s2bfO::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bfO::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eUn; else goto c2eU3;
       u2eUn: // global
           call _c2eU2() args: 0, res: 0, upd: 0;
       c2eU3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eTW_info" {
     block_c2eTW_info:
         const _c2eTW;
         const 1;
         const 30;
 },
 _c2eU2() //  []
         { []
         }
     {offset
       c2eU2: // global
           _s2bfO::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2eU7_info;
           R1 = _s2bfO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2eUp; else goto c2eU8;
       u2eUp: // global
           call _c2eU7() args: 0, res: 0, upd: 0;
       c2eU8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eU2_info" {
     block_c2eU2_info:
         const _c2eU2;
         const 2;
         const 30;
 },
 _c2eU7() //  []
         { []
         }
     {offset
       c2eU7: // global
           _s2bfL::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2eUc_info;
           R1 = _s2bfL::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2eUq; else goto c2eUi;
       u2eUq: // global
           call _c2eUc() args: 0, res: 0, upd: 0;
       c2eUi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eU7_info" {
     block_c2eU7_info:
         const _c2eU7;
         const 1;
         const 30;
 },
 _c2eUc() //  []
         { []
         }
     {offset
       c2eUc: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eUc_info" {
     block_c2eUc_info:
         const _c2eUc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.406197058 UTC

[section ""data" . GHC.Arr.$fIx()_$cindex_closure" {
     GHC.Arr.$fIx()_$cindex_closure:
         const GHC.Arr.$fIx()_$cindex_info;
 },
 GHC.Arr.$fIx()_$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2eUV: // global
           R3 = R3;
           R2 = R2;
           call GHC.Arr.$fIx()_$cunsafeIndex_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx()_$cindex_info" {
     GHC.Arr.$fIx()_$cindex_info:
         const GHC.Arr.$fIx()_$cindex_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.410466832 UTC

[section ""data" . GHC.Arr.$fIx()_$cinRange_closure" {
     GHC.Arr.$fIx()_$cinRange_closure:
         const GHC.Arr.$fIx()_$cinRange_info;
 },
 GHC.Arr.$fIx()_$cinRange_entry() //  [R2, R3]
         { []
         }
     {offset
       c2eV9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2eVn; else goto c2eVo;
       c2eVn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx()_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2eVo: // global
           I64[Sp - 16] = block_c2eV6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2eVy; else goto c2eV7;
       u2eVy: // global
           call _c2eV6(R1) args: 0, res: 0, upd: 0;
       c2eV7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx()_$cinRange_info" {
     GHC.Arr.$fIx()_$cinRange_info:
         const GHC.Arr.$fIx()_$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2eV6() //  [R1]
         { []
         }
     {offset
       c2eV6: // global
           I64[Sp - 8] = block_c2eVc_info;
           _s2bfW::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bfW::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eVx; else goto c2eVd;
       u2eVx: // global
           call _c2eVc() args: 0, res: 0, upd: 0;
       c2eVd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eV6_info" {
     block_c2eV6_info:
         const _c2eV6;
         const 1;
         const 30;
 },
 _c2eVc() //  []
         { []
         }
     {offset
       c2eVc: // global
           _s2bfW::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2eVh_info;
           R1 = _s2bfW::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2eVz; else goto c2eVi;
       u2eVz: // global
           call _c2eVh() args: 0, res: 0, upd: 0;
       c2eVi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eVc_info" {
     block_c2eVc_info:
         const _c2eVc;
         const 2;
         const 30;
 },
 _c2eVh() //  []
         { []
         }
     {offset
       c2eVh: // global
           _s2bfT::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2eVm_info;
           R1 = _s2bfT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2eVA; else goto c2eVs;
       u2eVA: // global
           call _c2eVm() args: 0, res: 0, upd: 0;
       c2eVs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eVh_info" {
     block_c2eVh_info:
         const _c2eVh;
         const 1;
         const 30;
 },
 _c2eVm() //  []
         { []
         }
     {offset
       c2eVm: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eVm_info" {
     block_c2eVm_info:
         const _c2eVm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.420602824 UTC

[section ""data" . GHC.Arr.$fIx()_closure" {
     GHC.Arr.$fIx()_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Classes.$fOrd()_closure;
         const GHC.Arr.$fIx()_$crange_closure+1;
         const GHC.Arr.$fIx()_$cindex_closure+2;
         const GHC.Arr.$fIx()_$cunsafeIndex_closure+2;
         const GHC.Arr.$fIx()_$cinRange_closure+2;
         const GHC.Arr.$fIx()_$cunsafeRangeSize_closure+1;
         const GHC.Arr.$fIx()_$cunsafeRangeSize_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.423320525 UTC

[section ""data" . GHC.Arr.$fIxOrdering_$crange_closure" {
     GHC.Arr.$fIxOrdering_$crange_closure:
         const GHC.Arr.$fIxOrdering_$crange_info;
         const 0;
 },
 GHC.Arr.$fIxOrdering_$crange_entry() //  [R2]
         { []
         }
     {offset
       c2eWa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2eWb; else goto c2eWc;
       c2eWb: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxOrdering_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2eWc: // global
           I64[Sp - 8] = block_c2eW7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2eWg; else goto c2eW8;
       u2eWg: // global
           call _c2eW7(R1) args: 0, res: 0, upd: 0;
       c2eW8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxOrdering_$crange_info" {
     GHC.Arr.$fIxOrdering_$crange_info:
         const GHC.Arr.$fIxOrdering_$crange_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2bMd_srt+312;
 },
 _c2eW7() //  [R1]
         { []
         }
     {offset
       c2eW7: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.$fEnumOrdering_$cenumFromTo_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eW7_info" {
     block_c2eW7_info:
         const _c2eW7;
         const 0;
         const 4294967326;
         const S2bMd_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.428034856 UTC

[section ""data" . lvl22_r1Xvz_closure" {
     lvl22_r1Xvz_closure:
         const GHC.Types.I#_con_info;
         const (-1);
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.429818782 UTC

[section ""data" . lvl23_r1XvA_closure" {
     lvl23_r1XvA_closure:
         const GHC.Types.I#_con_info;
         const (-2);
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.434355966 UTC

[section ""data" . GHC.Arr.$fIxOrdering_$cunsafeIndex_closure" {
     GHC.Arr.$fIxOrdering_$cunsafeIndex_closure:
         const GHC.Arr.$fIxOrdering_$cunsafeIndex_info;
 },
 GHC.Arr.$fIxOrdering_$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2eWA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2eWB; else goto c2eWC;
       c2eWB: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxOrdering_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2eWC: // global
           I64[Sp - 16] = block_c2eWx_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2eXY; else goto c2eWy;
       u2eXY: // global
           call _c2eWx(R1) args: 0, res: 0, upd: 0;
       c2eWy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxOrdering_$cunsafeIndex_info" {
     GHC.Arr.$fIxOrdering_$cunsafeIndex_info:
         const GHC.Arr.$fIxOrdering_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2eWx() //  [R1]
         { []
         }
     {offset
       c2eWx: // global
           I64[Sp] = block_c2eWF_info;
           _s2bg7::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s2bg7::P64;
           if (R1 & 7 != 0) goto u2eXX; else goto c2eWH;
       u2eXX: // global
           call _c2eWF(R1) args: 0, res: 0, upd: 0;
       c2eWH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eWx_info" {
     block_c2eWx_info:
         const _c2eWx;
         const 1;
         const 30;
 },
 _c2eWF() //  [R1]
         { []
         }
     {offset
       c2eWF: // global
           _s2bg7::P64 = P64[Sp + 8];
           _c2eXI::P64 = R1 & 7;
           if (_c2eXI::P64 < 3) goto u2eXM; else goto c2eXs;
       u2eXM: // global
           if (_c2eXI::P64 < 2) goto c2eWO; else goto c2eX8;
       c2eWO: // global
           I64[Sp + 8] = block_c2eWL_info;
           R1 = _s2bg7::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2eXZ; else goto c2eWP;
       u2eXZ: // global
           call _c2eWL(R1) args: 0, res: 0, upd: 0;
       c2eWP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c2eX8: // global
           I64[Sp + 8] = block_c2eX6_info;
           R1 = _s2bg7::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2eY0; else goto c2eX9;
       u2eY0: // global
           call _c2eX6(R1) args: 0, res: 0, upd: 0;
       c2eX9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c2eXs: // global
           I64[Sp + 8] = block_c2eXq_info;
           R1 = _s2bg7::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2eY1; else goto c2eXt;
       u2eY1: // global
           call _c2eXq(R1) args: 0, res: 0, upd: 0;
       c2eXt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eWF_info" {
     block_c2eWF_info:
         const _c2eWF;
         const 1;
         const 30;
 },
 _c2eWL() //  [R1]
         { []
         }
     {offset
       c2eWL: // global
           _c2eXL::P64 = R1 & 7;
           if (_c2eXL::P64 < 3) goto u2eXN; else goto c2eX3;
       u2eXN: // global
           if (_c2eXL::P64 < 2) goto u2eXR; else goto u2eXQ;
       u2eXR: // global
           Sp = Sp + 8;
           call _c2eXH() args: 0, res: 0, upd: 0;
       u2eXQ: // global
           Sp = Sp + 8;
           call _c2eXn() args: 0, res: 0, upd: 0;
       c2eX3: // global
           R1 = lvl23_r1XvA_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eWL_info" {
     block_c2eWL_info:
         const _c2eWL;
         const 0;
         const 30;
 },
 _c2eX6() //  [R1]
         { []
         }
     {offset
       c2eX6: // global
           _c2eXK::P64 = R1 & 7;
           if (_c2eXK::P64 < 3) goto u2eXO; else goto u2eXS;
       u2eXO: // global
           if (_c2eXK::P64 < 2) goto u2eXU; else goto u2eXT;
       u2eXU: // global
           Sp = Sp + 8;
           call _c2eXD() args: 0, res: 0, upd: 0;
       u2eXT: // global
           Sp = Sp + 8;
           call _c2eXH() args: 0, res: 0, upd: 0;
       u2eXS: // global
           Sp = Sp + 8;
           call _c2eXn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2eX6_info" {
     block_c2eX6_info:
         const _c2eX6;
         const 0;
         const 30;
 },
 _c2eXn() //  []
         { []
         }
     {offset
       c2eXn: // global
           R1 = lvl22_r1Xvz_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2eXq() //  [R1]
         { []
         }
     {offset
       c2eXq: // global
           _c2eXJ::P64 = R1 & 7;
           if (_c2eXJ::P64 < 3) goto u2eXP; else goto u2eXV;
       u2eXP: // global
           if (_c2eXJ::P64 < 2) goto c2eXz; else goto u2eXW;
       c2eXz: // global
           R1 = lvl18_r1Xvv_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u2eXW: // global
           Sp = Sp + 8;
           call _c2eXD() args: 0, res: 0, upd: 0;
       u2eXV: // global
           Sp = Sp + 8;
           call _c2eXH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2eXq_info" {
     block_c2eXq_info:
         const _c2eXq;
         const 0;
         const 30;
 },
 _c2eXD() //  []
         { []
         }
     {offset
       c2eXD: // global
           R1 = lvl17_r1Xvu_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2eXH() //  []
         { []
         }
     {offset
       c2eXH: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.453296756 UTC

[section ""data" . GHC.Arr.$w$cinRange_closure" {
     GHC.Arr.$w$cinRange_closure:
         const GHC.Arr.$w$cinRange_info;
 },
 GHC.Arr.$w$cinRange_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2eZ6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2eZ7; else goto c2eZ8;
       c2eZ7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$w$cinRange_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2eZ8: // global
           I64[Sp - 32] = block_c2eYY_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2f15; else goto c2eYZ;
       u2f15: // global
           call _c2eYY(R1) args: 0, res: 0, upd: 0;
       c2eYZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$cinRange_info" {
     GHC.Arr.$w$cinRange_info:
         const GHC.Arr.$w$cinRange_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c2eYY() //  [R1]
         { []
         }
     {offset
       c2eYY: // global
           _s2bgd::P64 = P64[Sp + 8];
           _c2eZ5::P64 = R1 & 7;
           if (_c2eZ5::P64 < 3) goto u2f0N; else goto c2eZ4;
       u2f0N: // global
           if (_c2eZ5::P64 < 2) goto c2eZ2; else goto c2eZ3;
       c2eZ2: // global
           I64[Sp + 8] = block_c2f03_info;
           R1 = _s2bgd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2f12; else goto c2f05;
       u2f12: // global
           call _c2f03(R1) args: 0, res: 0, upd: 0;
       c2f05: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c2eZ3: // global
           I64[Sp + 8] = block_c2f0m_info;
           R1 = _s2bgd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2f13; else goto c2f0o;
       u2f13: // global
           call _c2f0m(R1) args: 0, res: 0, upd: 0;
       c2f0o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c2eZ4: // global
           I64[Sp + 8] = block_c2f0B_info;
           R1 = _s2bgd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2f14; else goto c2f0D;
       u2f14: // global
           call _c2f0B() args: 0, res: 0, upd: 0;
       c2f0D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eYY_info" {
     block_c2eYY_info:
         const _c2eYY;
         const 3;
         const 30;
 },
 _c2f03() //  [R1]
         { []
         }
     {offset
       c2f03: // global
           _c2f0J::P64 = R1 & 7;
           if (_c2f0J::P64 < 3) goto u2f0Q; else goto u2f0R;
       u2f0Q: // global
           if (_c2f0J::P64 < 2) goto u2f0T; else goto u2f0S;
       u2f0T: // global
           Sp = Sp + 8;
           call _s2bgg() args: 0, res: 0, upd: 0;
       u2f0S: // global
           Sp = Sp + 24;
           goto u2f1f;
       u2f0R: // global
           Sp = Sp + 24;
           goto u2f1f;
       u2f1f: // global
           call _c2f0y() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2f03_info" {
     block_c2f03_info:
         const _c2f03;
         const 2;
         const 30;
 },
 _c2f0m() //  [R1]
         { []
         }
     {offset
       c2f0m: // global
           if (R1 & 7 == 3) goto u2f0U; else goto u2f0V;
       u2f0U: // global
           Sp = Sp + 24;
           call _c2f0y() args: 0, res: 0, upd: 0;
       u2f0V: // global
           Sp = Sp + 8;
           call _s2bgg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2f0m_info" {
     block_c2f0m_info:
         const _c2f0m;
         const 2;
         const 30;
 },
 _c2f0B() //  []
         { []
         }
     {offset
       c2f0B: // global
           Sp = Sp + 8;
           call _s2bgg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2f0B_info" {
     block_c2f0B_info:
         const _c2f0B;
         const 2;
         const 30;
 },
 _s2bgg() //  []
         { []
         }
     {offset
       s2bgg: // global
           I64[Sp - 8] = block_c2eZc_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2f1k; else goto c2eZe;
       u2f1k: // global
           call _c2eZc(R1) args: 0, res: 0, upd: 0;
       c2eZe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2eZc() //  [R1]
         { []
         }
     {offset
       c2eZc: // global
           _s2bge::P64 = P64[Sp + 8];
           _c2f0K::P64 = R1 & 7;
           if (_c2f0K::P64 < 3) goto u2f0O; else goto c2eZP;
       u2f0O: // global
           if (_c2f0K::P64 < 2) goto c2eZl; else goto c2eZv;
       c2eZl: // global
           I64[Sp + 16] = block_c2eZi_info;
           R1 = _s2bge::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u2f16; else goto c2eZm;
       u2f16: // global
           call _c2eZi() args: 0, res: 0, upd: 0;
       c2eZm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c2eZv: // global
           I64[Sp + 16] = block_c2eZt_info;
           R1 = _s2bge::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u2f17; else goto c2eZw;
       u2f17: // global
           call _c2eZt(R1) args: 0, res: 0, upd: 0;
       c2eZw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c2eZP: // global
           I64[Sp + 16] = block_c2eZN_info;
           R1 = _s2bge::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u2f18; else goto c2eZQ;
       u2f18: // global
           call _c2eZN(R1) args: 0, res: 0, upd: 0;
       c2eZQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eZc_info" {
     block_c2eZc_info:
         const _c2eZc;
         const 130;
         const 30;
 },
 _c2eZi() //  []
         { []
         }
     {offset
       c2eZi: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2eZi_info" {
     block_c2eZi_info:
         const _c2eZi;
         const 0;
         const 30;
 },
 _c2eZt() //  [R1]
         { []
         }
     {offset
       c2eZt: // global
           _c2f0M::P64 = R1 & 7;
           if (_c2f0M::P64 < 3) goto u2f0P; else goto u2f0X;
       u2f0P: // global
           if (_c2f0M::P64 < 2) goto u2f0Z; else goto u2f0Y;
       u2f0Z: // global
           Sp = Sp + 8;
           call _c2f0y() args: 0, res: 0, upd: 0;
       u2f0Y: // global
           Sp = Sp + 8;
           goto u2f1a;
       u2f0X: // global
           Sp = Sp + 8;
           goto u2f1a;
       u2f1a: // global
           call _c2f00() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2eZt_info" {
     block_c2eZt_info:
         const _c2eZt;
         const 0;
         const 30;
 },
 _c2eZN() //  [R1]
         { []
         }
     {offset
       c2eZN: // global
           if (R1 & 7 == 3) goto u2f10; else goto u2f11;
       u2f10: // global
           Sp = Sp + 8;
           call _c2f00() args: 0, res: 0, upd: 0;
       u2f11: // global
           Sp = Sp + 8;
           call _c2f0y() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2eZN_info" {
     block_c2eZN_info:
         const _c2eZN;
         const 0;
         const 30;
 },
 _c2f00() //  []
         { []
         }
     {offset
       c2f00: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2f0y() //  []
         { []
         }
     {offset
       c2f0y: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.472438368 UTC

[section ""data" . GHC.Arr.$fIxOrdering_$cinRange_closure" {
     GHC.Arr.$fIxOrdering_$cinRange_closure:
         const GHC.Arr.$fIxOrdering_$cinRange_info;
 },
 GHC.Arr.$fIxOrdering_$cinRange_entry() //  [R2, R3]
         { []
         }
     {offset
       c2f2v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2f2w; else goto c2f2x;
       c2f2w: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxOrdering_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2f2x: // global
           I64[Sp - 16] = block_c2f2s_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2f2B; else goto c2f2t;
       u2f2B: // global
           call _c2f2s(R1) args: 0, res: 0, upd: 0;
       c2f2t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxOrdering_$cinRange_info" {
     GHC.Arr.$fIxOrdering_$cinRange_info:
         const GHC.Arr.$fIxOrdering_$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2f2s() //  [R1]
         { []
         }
     {offset
       c2f2s: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.Arr.$w$cinRange_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2f2s_info" {
     block_c2f2s_info:
         const _c2f2s;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.48067128 UTC

[section ""data" . GHC.Arr.$w$crangeSize3_closure" {
     GHC.Arr.$w$crangeSize3_closure:
         const GHC.Arr.$w$crangeSize3_info;
 },
 GHC.Arr.$w$crangeSize3_entry() //  [R2, R3]
         { []
         }
     {offset
       c2f2W: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2f2X; else goto c2f2Y;
       c2f2X: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$w$crangeSize3_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2f2Y: // global
           I64[Sp - 24] = block_c2f2Q_info;
           R4 = R3;
           _s2bgv::P64 = R3;
           R3 = R3;
           _s2bgu::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s2bgu::P64;
           P64[Sp - 8] = _s2bgv::P64;
           Sp = Sp - 24;
           call GHC.Arr.$w$cinRange_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$crangeSize3_info" {
     GHC.Arr.$w$crangeSize3_info:
         const GHC.Arr.$w$crangeSize3_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2f2Q() //  [R1]
         { []
         }
     {offset
       c2f2Q: // global
           if (R1 & 7 == 1) goto u2f4f; else goto c2f2U;
       u2f4f: // global
           Sp = Sp + 24;
           call _c2f3M() args: 0, res: 0, upd: 0;
       c2f2U: // global
           I64[Sp] = block_c2f34_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u2f4n; else goto c2f36;
       u2f4n: // global
           call _c2f34(R1) args: 0, res: 0, upd: 0;
       c2f36: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2f2Q_info" {
     block_c2f2Q_info:
         const _c2f2Q;
         const 2;
         const 30;
 },
 _c2f34() //  [R1]
         { []
         }
     {offset
       c2f34: // global
           _s2bgu::P64 = P64[Sp + 8];
           _c2f47::P64 = R1 & 7;
           if (_c2f47::P64 < 3) goto u2f4b; else goto c2f3R;
       u2f4b: // global
           if (_c2f47::P64 < 2) goto c2f3d; else goto c2f3x;
       c2f3d: // global
           I64[Sp + 16] = block_c2f3a_info;
           R1 = _s2bgu::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u2f4p; else goto c2f3e;
       u2f4p: // global
           call _c2f3a(R1) args: 0, res: 0, upd: 0;
       c2f3e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c2f3x: // global
           I64[Sp + 16] = block_c2f3v_info;
           R1 = _s2bgu::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u2f4q; else goto c2f3y;
       u2f4q: // global
           call _c2f3v(R1) args: 0, res: 0, upd: 0;
       c2f3y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c2f3R: // global
           I64[Sp + 16] = block_c2f3P_info;
           R1 = _s2bgu::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u2f4r; else goto c2f3S;
       u2f4r: // global
           call _c2f3P(R1) args: 0, res: 0, upd: 0;
       c2f3S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2f34_info" {
     block_c2f34_info:
         const _c2f34;
         const 130;
         const 30;
 },
 _c2f3a() //  [R1]
         { []
         }
     {offset
       c2f3a: // global
           _c2f4a::P64 = R1 & 7;
           if (_c2f4a::P64 < 3) goto u2f4c; else goto c2f3s;
       u2f4c: // global
           if (_c2f4a::P64 < 2) goto u2f4h; else goto u2f4g;
       u2f4h: // global
           Sp = Sp + 8;
           call _c2f46() args: 0, res: 0, upd: 0;
       u2f4g: // global
           Sp = Sp + 8;
           call _c2f3M() args: 0, res: 0, upd: 0;
       c2f3s: // global
           R1 = (-1);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2f3a_info" {
     block_c2f3a_info:
         const _c2f3a;
         const 0;
         const 30;
 },
 _c2f3v() //  [R1]
         { []
         }
     {offset
       c2f3v: // global
           _c2f49::P64 = R1 & 7;
           if (_c2f49::P64 < 3) goto u2f4d; else goto u2f4i;
       u2f4d: // global
           if (_c2f49::P64 < 2) goto u2f4k; else goto u2f4j;
       u2f4k: // global
           Sp = Sp + 8;
           call _c2f42() args: 0, res: 0, upd: 0;
       u2f4j: // global
           Sp = Sp + 8;
           call _c2f46() args: 0, res: 0, upd: 0;
       u2f4i: // global
           Sp = Sp + 8;
           call _c2f3M() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2f3v_info" {
     block_c2f3v_info:
         const _c2f3v;
         const 0;
         const 30;
 },
 _c2f3M() //  []
         { []
         }
     {offset
       c2f3M: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2f3P() //  [R1]
         { []
         }
     {offset
       c2f3P: // global
           _c2f48::P64 = R1 & 7;
           if (_c2f48::P64 < 3) goto u2f4e; else goto u2f4l;
       u2f4e: // global
           if (_c2f48::P64 < 2) goto c2f3Y; else goto u2f4m;
       c2f3Y: // global
           R1 = 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u2f4m: // global
           Sp = Sp + 8;
           call _c2f42() args: 0, res: 0, upd: 0;
       u2f4l: // global
           Sp = Sp + 8;
           call _c2f46() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2f3P_info" {
     block_c2f3P_info:
         const _c2f3P;
         const 0;
         const 30;
 },
 _c2f42() //  []
         { []
         }
     {offset
       c2f42: // global
           R1 = 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2f46() //  []
         { []
         }
     {offset
       c2f46: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.495716797 UTC

[section ""data" . GHC.Arr.$fIxOrdering_$crangeSize_closure" {
     GHC.Arr.$fIxOrdering_$crangeSize_closure:
         const GHC.Arr.$fIxOrdering_$crangeSize_info;
 },
 GHC.Arr.$fIxOrdering_$crangeSize_entry() //  [R2]
         { []
         }
     {offset
       c2f5q: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2f5y; else goto c2f5z;
       c2f5y: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxOrdering_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2f5z: // global
           I64[Sp - 8] = block_c2f5n_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2f5E; else goto c2f5o;
       u2f5E: // global
           call _c2f5n(R1) args: 0, res: 0, upd: 0;
       c2f5o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxOrdering_$crangeSize_info" {
     GHC.Arr.$fIxOrdering_$crangeSize_info:
         const GHC.Arr.$fIxOrdering_$crangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2f5n() //  [R1]
         { []
         }
     {offset
       c2f5n: // global
           I64[Sp] = block_c2f5t_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$w$crangeSize3_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2f5n_info" {
     block_c2f5n_info:
         const _c2f5n;
         const 0;
         const 30;
 },
 _c2f5t() //  [R1]
         { []
         }
     {offset
       c2f5t: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2f5D; else goto c2f5C;
       c2f5D: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2f5C: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2f5t_info" {
     block_c2f5t_info:
         const _c2f5t;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.503694345 UTC

[section ""data" . GHC.Arr.$fIxBool_$crange_closure" {
     GHC.Arr.$fIxBool_$crange_closure:
         const GHC.Arr.$fIxBool_$crange_info;
         const 0;
 },
 GHC.Arr.$fIxBool_$crange_entry() //  [R2]
         { []
         }
     {offset
       c2f62: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2f63; else goto c2f64;
       c2f63: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxBool_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2f64: // global
           I64[Sp - 8] = block_c2f5Z_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2f68; else goto c2f60;
       u2f68: // global
           call _c2f5Z(R1) args: 0, res: 0, upd: 0;
       c2f60: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxBool_$crange_info" {
     GHC.Arr.$fIxBool_$crange_info:
         const GHC.Arr.$fIxBool_$crange_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2bMd_srt+328;
 },
 _c2f5Z() //  [R1]
         { []
         }
     {offset
       c2f5Z: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.$fEnumBool_$cenumFromTo_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2f5Z_info" {
     block_c2f5Z_info:
         const _c2f5Z;
         const 0;
         const 4294967326;
         const S2bMd_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.510845079 UTC

[section ""data" . GHC.Arr.$fIxBool_$cunsafeIndex_closure" {
     GHC.Arr.$fIxBool_$cunsafeIndex_closure:
         const GHC.Arr.$fIxBool_$cunsafeIndex_info;
 },
 GHC.Arr.$fIxBool_$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2f6q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2f6r; else goto c2f6s;
       c2f6r: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxBool_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2f6s: // global
           I64[Sp - 16] = block_c2f6n_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2f7c; else goto c2f6o;
       u2f7c: // global
           call _c2f6n(R1) args: 0, res: 0, upd: 0;
       c2f6o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxBool_$cunsafeIndex_info" {
     GHC.Arr.$fIxBool_$cunsafeIndex_info:
         const GHC.Arr.$fIxBool_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2f6n() //  [R1]
         { []
         }
     {offset
       c2f6n: // global
           I64[Sp] = block_c2f6v_info;
           _s2bgN::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s2bgN::P64;
           if (R1 & 7 != 0) goto u2f7b; else goto c2f6x;
       u2f7b: // global
           call _c2f6v(R1) args: 0, res: 0, upd: 0;
       c2f6x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2f6n_info" {
     block_c2f6n_info:
         const _c2f6n;
         const 1;
         const 30;
 },
 _c2f6v() //  [R1]
         { []
         }
     {offset
       c2f6v: // global
           _s2bgN::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c2f6E; else goto c2f6U;
       c2f6E: // global
           I64[Sp + 8] = block_c2f6B_info;
           R1 = _s2bgN::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2f7d; else goto c2f6F;
       u2f7d: // global
           call _c2f6B(R1) args: 0, res: 0, upd: 0;
       c2f6F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c2f6U: // global
           I64[Sp + 8] = block_c2f6S_info;
           R1 = _s2bgN::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2f7e; else goto c2f6V;
       u2f7e: // global
           call _c2f6S(R1) args: 0, res: 0, upd: 0;
       c2f6V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2f6v_info" {
     block_c2f6v_info:
         const _c2f6v;
         const 1;
         const 30;
 },
 _c2f6B() //  [R1]
         { []
         }
     {offset
       c2f6B: // global
           if (R1 & 7 == 1) goto u2f7a; else goto c2f6P;
       u2f7a: // global
           Sp = Sp + 8;
           call _c2f75() args: 0, res: 0, upd: 0;
       c2f6P: // global
           R1 = lvl22_r1Xvz_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2f6B_info" {
     block_c2f6B_info:
         const _c2f6B;
         const 0;
         const 30;
 },
 _c2f6S() //  [R1]
         { []
         }
     {offset
       c2f6S: // global
           if (R1 & 7 == 1) goto c2f71; else goto u2f79;
       c2f71: // global
           R1 = lvl17_r1Xvu_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u2f79: // global
           Sp = Sp + 8;
           call _c2f75() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2f6S_info" {
     block_c2f6S_info:
         const _c2f6S;
         const 0;
         const 30;
 },
 _c2f75() //  []
         { []
         }
     {offset
       c2f75: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.523291943 UTC

[section ""data" . GHC.Arr.$fIxBool_$cinRange_closure" {
     GHC.Arr.$fIxBool_$cinRange_closure:
         const GHC.Arr.$fIxBool_$cinRange_info;
 },
 GHC.Arr.$fIxBool_$cinRange_entry() //  [R2, R3]
         { []
         }
     {offset
       c2f7Y: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2f7Z; else goto c2f80;
       c2f7Z: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxBool_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2f80: // global
           I64[Sp - 16] = block_c2f7V_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2f8H; else goto c2f7W;
       u2f8H: // global
           call _c2f7V(R1) args: 0, res: 0, upd: 0;
       c2f7W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxBool_$cinRange_info" {
     GHC.Arr.$fIxBool_$cinRange_info:
         const GHC.Arr.$fIxBool_$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2f7V() //  [R1]
         { []
         }
     {offset
       c2f7V: // global
           I64[Sp - 8] = block_c2f83_info;
           _s2bgV::P64 = P64[R1 + 7];
           _s2bgW::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s2bgW::P64;
           P64[Sp + 8] = _s2bgV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2f8G; else goto c2f85;
       u2f8G: // global
           call _c2f83(R1) args: 0, res: 0, upd: 0;
       c2f85: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2f7V_info" {
     block_c2f7V_info:
         const _c2f7V;
         const 1;
         const 30;
 },
 _c2f83() //  [R1]
         { []
         }
     {offset
       c2f83: // global
           _s2bgV::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c2f8c; else goto c2f8y;
       c2f8c: // global
           I64[Sp] = block_c2f89_info;
           R1 = _s2bgV::P64;
           if (R1 & 7 != 0) goto u2f8I; else goto c2f8d;
       u2f8I: // global
           call _c2f89(R1) args: 0, res: 0, upd: 0;
       c2f8d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c2f8y: // global
           I64[Sp] = block_c2f8w_info;
           R1 = _s2bgV::P64;
           if (R1 & 7 != 0) goto u2f8J; else goto c2f8z;
       u2f8J: // global
           call _c2f8w() args: 0, res: 0, upd: 0;
       c2f8z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2f83_info" {
     block_c2f83_info:
         const _c2f83;
         const 2;
         const 30;
 },
 _c2f89() //  [R1]
         { []
         }
     {offset
       c2f89: // global
           if (R1 & 7 == 1) goto c2f8k; else goto c2f8t;
       c2f8k: // global
           I64[Sp + 16] = block_c2f8h_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u2f8K; else goto c2f8l;
       u2f8K: // global
           call _c2f8h() args: 0, res: 0, upd: 0;
       c2f8l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c2f8t: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2f89_info" {
     block_c2f89_info:
         const _c2f89;
         const 130;
         const 30;
 },
 _c2f8h() //  []
         { []
         }
     {offset
       c2f8h: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2f8h_info" {
     block_c2f8h_info:
         const _c2f8h;
         const 0;
         const 30;
 },
 _c2f8w() //  []
         { []
         }
     {offset
       c2f8w: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2f8w_info" {
     block_c2f8w_info:
         const _c2f8w;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.535893092 UTC

[section ""data" . GHC.Arr.$fIxInteger_$crange_closure" {
     GHC.Arr.$fIxInteger_$crange_closure:
         const GHC.Arr.$fIxInteger_$crange_info;
         const 0;
 },
 GHC.Arr.$fIxInteger_$crange_entry() //  [R2]
         { []
         }
     {offset
       c2f9w: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2f9x; else goto c2f9y;
       c2f9x: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxInteger_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2f9y: // global
           I64[Sp - 8] = block_c2f9t_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2f9C; else goto c2f9u;
       u2f9C: // global
           call _c2f9t(R1) args: 0, res: 0, upd: 0;
       c2f9u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInteger_$crange_info" {
     GHC.Arr.$fIxInteger_$crange_info:
         const GHC.Arr.$fIxInteger_$crange_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S2bMd_srt+344;
 },
 _c2f9t() //  [R1]
         { []
         }
     {offset
       c2f9t: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.$fEnumInteger_$cenumFromTo_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2f9t_info" {
     block_c2f9t_info:
         const _c2f9t;
         const 0;
         const 4294967326;
         const S2bMd_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.542191891 UTC

[section ""data" . GHC.Arr.$fIxInteger_$cunsafeIndex_closure" {
     GHC.Arr.$fIxInteger_$cunsafeIndex_closure:
         const GHC.Arr.$fIxInteger_$cunsafeIndex_info;
         const 0;
 },
 GHC.Arr.$fIxInteger_$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2f9U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2fa6; else goto c2fa7;
       c2fa6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxInteger_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fa7: // global
           I64[Sp - 16] = block_c2f9R_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fad; else goto c2f9S;
       u2fad: // global
           call _c2f9R(R1) args: 0, res: 0, upd: 0;
       c2f9S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInteger_$cunsafeIndex_info" {
     GHC.Arr.$fIxInteger_$cunsafeIndex_info:
         const GHC.Arr.$fIxInteger_$cunsafeIndex_entry;
         const 0;
         const 70373039144974;
         const 8589934607;
         const S2bMd_srt+248;
 },
 _c2f9R() //  [R1]
         { []
         }
     {offset
       c2f9R: // global
           _s2bh6::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2f9X_info;
           R3 = P64[R1 + 7];
           R2 = _s2bh6::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2f9R_info" {
     block_c2f9R_info:
         const _c2f9R;
         const 1;
         const 4294967326;
         const S2bMd_srt+248;
 },
 _c2f9X() //  [R1]
         { []
         }
     {offset
       c2f9X: // global
           I64[Sp] = block_c2fa1_info;
           R2 = R1;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2f9X_info" {
     block_c2f9X_info:
         const _c2f9X;
         const 0;
         const 30;
 },
 _c2fa1() //  [R1]
         { []
         }
     {offset
       c2fa1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2fac; else goto c2fab;
       c2fac: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2fab: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fa1_info" {
     block_c2fa1_info:
         const _c2fa1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.551233553 UTC

[section ""data" . GHC.Arr.$fIxInteger_$cinRange_closure" {
     GHC.Arr.$fIxInteger_$cinRange_closure:
         const GHC.Arr.$fIxInteger_$cinRange_info;
 },
 GHC.Arr.$fIxInteger_$cinRange_entry() //  [R2, R3]
         { []
         }
     {offset
       c2faF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2faG; else goto c2faH;
       c2faG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxInteger_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2faH: // global
           I64[Sp - 16] = block_c2faC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2faW; else goto c2faD;
       u2faW: // global
           call _c2faC(R1) args: 0, res: 0, upd: 0;
       c2faD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInteger_$cinRange_info" {
     GHC.Arr.$fIxInteger_$cinRange_info:
         const GHC.Arr.$fIxInteger_$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2faC() //  [R1]
         { []
         }
     {offset
       c2faC: // global
           I64[Sp - 8] = block_c2faK_info;
           R3 = P64[Sp + 8];
           R2 = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2faC_info" {
     block_c2faC_info:
         const _c2faC;
         const 1;
         const 30;
 },
 _c2faK() //  [R1]
         { []
         }
     {offset
       c2faK: // global
           if (R1 == 1) goto c2faV; else goto c2faR;
       c2faV: // global
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Integer.Type.leInteger_entry(R3,
                                                 R2) args: 8, res: 0, upd: 8;
       c2faR: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2faK_info" {
     block_c2faK_info:
         const _c2faK;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.559201099 UTC

[section ""data" . GHC.Arr.$fIxWord_$crange_closure" {
     GHC.Arr.$fIxWord_$crange_closure:
         const GHC.Arr.$fIxWord_$crange_info;
 },
 GHC.Arr.$fIxWord_$crange_entry() //  [R2]
         { []
         }
     {offset
       c2fbl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2fbm; else goto c2fbn;
       c2fbm: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxWord_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2fbn: // global
           I64[Sp - 8] = block_c2fbi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2fbr; else goto c2fbj;
       u2fbr: // global
           call _c2fbi(R1) args: 0, res: 0, upd: 0;
       c2fbj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxWord_$crange_info" {
     GHC.Arr.$fIxWord_$crange_info:
         const GHC.Arr.$fIxWord_$crange_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2fbi() //  [R1]
         { []
         }
     {offset
       c2fbi: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.$fEnumWord_$cenumFromTo_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fbi_info" {
     block_c2fbi_info:
         const _c2fbi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.565578272 UTC

[section ""data" . GHC.Arr.$fIxWord_$cunsafeIndex_closure" {
     GHC.Arr.$fIxWord_$cunsafeIndex_closure:
         const GHC.Arr.$fIxWord_$cunsafeIndex_info;
 },
 GHC.Arr.$fIxWord_$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2fbJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2fc3; else goto c2fc4;
       c2fc3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxWord_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fc4: // global
           I64[Sp - 16] = block_c2fbG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fcb; else goto c2fbH;
       u2fcb: // global
           call _c2fbG(R1) args: 0, res: 0, upd: 0;
       c2fbH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxWord_$cunsafeIndex_info" {
     GHC.Arr.$fIxWord_$cunsafeIndex_info:
         const GHC.Arr.$fIxWord_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2fbG() //  [R1]
         { []
         }
     {offset
       c2fbG: // global
           I64[Sp] = block_c2fbM_info;
           _s2bhp::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s2bhp::P64;
           if (R1 & 7 != 0) goto u2fca; else goto c2fbN;
       u2fca: // global
           call _c2fbM(R1) args: 0, res: 0, upd: 0;
       c2fbN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fbG_info" {
     block_c2fbG_info:
         const _c2fbG;
         const 1;
         const 30;
 },
 _c2fbM() //  [R1]
         { []
         }
     {offset
       c2fbM: // global
           I64[Sp] = block_c2fbR_info;
           _s2bhs::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2bhs::I64;
           if (R1 & 7 != 0) goto u2fcc; else goto c2fbS;
       u2fcc: // global
           call _c2fbR(R1) args: 0, res: 0, upd: 0;
       c2fbS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fbM_info" {
     block_c2fbM_info:
         const _c2fbM;
         const 1;
         const 30;
 },
 _c2fbR() //  [R1]
         { []
         }
     {offset
       c2fbR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2fc9; else goto c2fc8;
       c2fc9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2fc8: // global
           _s2bhw::I64 = I64[Sp + 8] - I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2bhw::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fbR_info" {
     block_c2fbR_info:
         const _c2fbR;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.575254124 UTC

[section ""data" . GHC.Arr.$fIxWord_$cinRange_closure" {
     GHC.Arr.$fIxWord_$cinRange_closure:
         const GHC.Arr.$fIxWord_$cinRange_info;
 },
 GHC.Arr.$fIxWord_$cinRange_entry() //  [R2, R3]
         { []
         }
     {offset
       c2fcI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2fcR; else goto c2fcS;
       c2fcR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxWord_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fcS: // global
           I64[Sp - 16] = block_c2fcF_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fdf; else goto c2fcG;
       u2fdf: // global
           call _c2fcF(R1) args: 0, res: 0, upd: 0;
       c2fcG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxWord_$cinRange_info" {
     GHC.Arr.$fIxWord_$cinRange_info:
         const GHC.Arr.$fIxWord_$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2fcF() //  [R1]
         { []
         }
     {offset
       c2fcF: // global
           I64[Sp - 8] = block_c2fcL_info;
           _s2bhB::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bhB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2fde; else goto c2fcM;
       u2fde: // global
           call _c2fcL(R1) args: 0, res: 0, upd: 0;
       c2fcM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fcF_info" {
     block_c2fcF_info:
         const _c2fcF;
         const 1;
         const 30;
 },
 _c2fcL() //  [R1]
         { []
         }
     {offset
       c2fcL: // global
           I64[Sp] = block_c2fcQ_info;
           _s2bhD::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2bhD::I64;
           if (R1 & 7 != 0) goto u2fdg; else goto c2fcV;
       u2fdg: // global
           call _c2fcQ(R1) args: 0, res: 0, upd: 0;
       c2fcV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fcL_info" {
     block_c2fcL_info:
         const _c2fcL;
         const 2;
         const 30;
 },
 _c2fcQ() //  [R1]
         { []
         }
     {offset
       c2fcQ: // global
           _s2bhF::I64 = I64[R1 + 7];
           if (I64[Sp + 16] > _s2bhF::I64) goto c2fd3; else goto c2fd7;
       c2fd3: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2fd7: // global
           _s2bhB::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2fd6_info;
           R1 = _s2bhB::P64;
           I64[Sp + 16] = _s2bhF::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2fdh; else goto c2fd8;
       u2fdh: // global
           call _c2fd6(R1) args: 0, res: 0, upd: 0;
       c2fd8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fcQ_info" {
     block_c2fcQ_info:
         const _c2fcQ;
         const 130;
         const 30;
 },
 _c2fd6() //  [R1]
         { []
         }
     {offset
       c2fd6: // global
           R1 = I64[((I64[Sp + 8] <= I64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fd6_info" {
     block_c2fd6_info:
         const _c2fd6;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.585871139 UTC

[section ""data" . GHC.Arr.$fIxWord_closure" {
     GHC.Arr.$fIxWord_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Classes.$fOrdWord_closure;
         const GHC.Arr.$fIxWord_$crange_closure+1;
         const GHC.Arr.$fIxWord_$cindex_closure+2;
         const GHC.Arr.$fIxWord_$cunsafeIndex_closure+2;
         const GHC.Arr.$fIxWord_$cinRange_closure+2;
         const GHC.Arr.$fIxWord_$crangeSize_closure+1;
         const GHC.Arr.$fIxWord_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.588452447 UTC

[section ""data" . GHC.Arr.$fIxInt_$crange_closure" {
     GHC.Arr.$fIxInt_$crange_closure:
         const GHC.Arr.$fIxInt_$crange_info;
 },
 GHC.Arr.$fIxInt_$crange_entry() //  [R2]
         { []
         }
     {offset
       c2fdW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2fdX; else goto c2fdY;
       c2fdX: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxInt_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2fdY: // global
           I64[Sp - 8] = block_c2fdT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2fe2; else goto c2fdU;
       u2fe2: // global
           call _c2fdT(R1) args: 0, res: 0, upd: 0;
       c2fdU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInt_$crange_info" {
     GHC.Arr.$fIxInt_$crange_info:
         const GHC.Arr.$fIxInt_$crange_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2fdT() //  [R1]
         { []
         }
     {offset
       c2fdT: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.$fEnumInt_$cenumFromTo_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fdT_info" {
     block_c2fdT_info:
         const _c2fdT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.593208998 UTC

[section ""cstring" . lvl24_r1XvB_bytes" {
     lvl24_r1XvB_bytes:
         I8[] [73,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.595771599 UTC

[section ""data" . lvl25_r1XvC_closure" {
     lvl25_r1XvC_closure:
         const lvl25_r1XvC_info;
         const 0;
         const 0;
         const 0;
 },
 lvl25_r1XvC_entry() //  [R1]
         { []
         }
     {offset
       c2fek: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2fel; else goto c2fem;
       c2fel: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2fem: // global
           (_c2feh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2feh::I64 == 0) goto c2fej; else goto c2fei;
       c2fej: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2fei: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2feh::I64;
           R2 = lvl24_r1XvB_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl25_r1XvC_info" {
     lvl25_r1XvC_info:
         const lvl25_r1XvC_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.600028989 UTC

[section ""data" . GHC.Arr.$fIxInt_$cunsafeIndex_closure" {
     GHC.Arr.$fIxInt_$cunsafeIndex_closure:
         const GHC.Arr.$fIxInt_$cunsafeIndex_info;
 },
 GHC.Arr.$fIxInt_$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2feC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2feD; else goto c2feE;
       c2feD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxInt_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2feE: // global
           I64[Sp - 16] = block_c2fez_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2feI; else goto c2feA;
       u2feI: // global
           call _c2fez(R1) args: 0, res: 0, upd: 0;
       c2feA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInt_$cunsafeIndex_info" {
     GHC.Arr.$fIxInt_$cunsafeIndex_info:
         const GHC.Arr.$fIxInt_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2fez() //  [R1]
         { []
         }
     {offset
       c2fez: // global
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Num.$fNumInt_$c-_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fez_info" {
     block_c2fez_info:
         const _c2fez;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.60693299 UTC

[section ""data" . GHC.Arr.$fIxInt_$cinRange_closure" {
     GHC.Arr.$fIxInt_$cinRange_closure:
         const GHC.Arr.$fIxInt_$cinRange_info;
 },
 GHC.Arr.$fIxInt_$cinRange_entry() //  [R2, R3]
         { []
         }
     {offset
       c2ff0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2ffe; else goto c2fff;
       c2ffe: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxInt_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fff: // global
           I64[Sp - 16] = block_c2feX_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2ffx; else goto c2feY;
       u2ffx: // global
           call _c2feX(R1) args: 0, res: 0, upd: 0;
       c2feY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInt_$cinRange_info" {
     GHC.Arr.$fIxInt_$cinRange_info:
         const GHC.Arr.$fIxInt_$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2feX() //  [R1]
         { []
         }
     {offset
       c2feX: // global
           I64[Sp - 8] = block_c2ff3_info;
           _s2bhX::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bhX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2ffw; else goto c2ff4;
       u2ffw: // global
           call _c2ff3(R1) args: 0, res: 0, upd: 0;
       c2ff4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2feX_info" {
     block_c2feX_info:
         const _c2feX;
         const 1;
         const 30;
 },
 _c2ff3() //  [R1]
         { []
         }
     {offset
       c2ff3: // global
           I64[Sp] = block_c2ff8_info;
           _s2bhZ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2bhZ::I64;
           if (R1 & 7 != 0) goto u2ffy; else goto c2ff9;
       u2ffy: // global
           call _c2ff8(R1) args: 0, res: 0, upd: 0;
       c2ff9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ff3_info" {
     block_c2ff3_info:
         const _c2ff3;
         const 2;
         const 30;
 },
 _c2ff8() //  [R1]
         { []
         }
     {offset
       c2ff8: // global
           I64[Sp] = block_c2ffd_info;
           _s2bi1::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2bi1::I64;
           if (R1 & 7 != 0) goto u2ffz; else goto c2ffj;
       u2ffz: // global
           call _c2ffd(R1) args: 0, res: 0, upd: 0;
       c2ffj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ff8_info" {
     block_c2ff8_info:
         const _c2ff8;
         const 66;
         const 30;
 },
 _c2ffd() //  [R1]
         { []
         }
     {offset
       c2ffd: // global
           _s2bi3::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(I64[Sp + 8],
                            _s2bi3::I64)) goto c2ffr; else goto c2ffs;
       c2ffr: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2ffs: // global
           R1 = I64[(%MO_S_Le_W64(_s2bi3::I64,
                                  I64[Sp + 16]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ffd_info" {
     block_c2ffd_info:
         const _c2ffd;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.618495658 UTC

[section ""data" . GHC.Arr.$fIxChar_$crange_closure" {
     GHC.Arr.$fIxChar_$crange_closure:
         const GHC.Arr.$fIxChar_$crange_info;
 },
 GHC.Arr.$fIxChar_$crange_entry() //  [R2]
         { []
         }
     {offset
       c2fgc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2fgd; else goto c2fge;
       c2fgd: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxChar_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2fge: // global
           I64[Sp - 8] = block_c2fg9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2fgi; else goto c2fga;
       u2fgi: // global
           call _c2fg9(R1) args: 0, res: 0, upd: 0;
       c2fga: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxChar_$crange_info" {
     GHC.Arr.$fIxChar_$crange_info:
         const GHC.Arr.$fIxChar_$crange_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2fg9() //  [R1]
         { []
         }
     {offset
       c2fg9: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Enum.$fEnumChar_$cenumFromTo_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fg9_info" {
     block_c2fg9_info:
         const _c2fg9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.624602176 UTC

[section ""data" . GHC.Arr.$fIxChar_$cunsafeIndex_closure" {
     GHC.Arr.$fIxChar_$cunsafeIndex_closure:
         const GHC.Arr.$fIxChar_$cunsafeIndex_info;
 },
 GHC.Arr.$fIxChar_$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2fgA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2fgX; else goto c2fgY;
       c2fgX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxChar_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fgY: // global
           I64[Sp - 16] = block_c2fgx_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fh5; else goto c2fgy;
       u2fh5: // global
           call _c2fgx(R1) args: 0, res: 0, upd: 0;
       c2fgy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxChar_$cunsafeIndex_info" {
     GHC.Arr.$fIxChar_$cunsafeIndex_info:
         const GHC.Arr.$fIxChar_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2fgx() //  [R1]
         { []
         }
     {offset
       c2fgx: // global
           I64[Sp] = block_c2fgD_info;
           _s2bid::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s2bid::P64;
           if (R1 & 7 != 0) goto u2fh4; else goto c2fgE;
       u2fh4: // global
           call _c2fgD(R1) args: 0, res: 0, upd: 0;
       c2fgE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fgx_info" {
     block_c2fgx_info:
         const _c2fgx;
         const 1;
         const 30;
 },
 _c2fgD() //  [R1]
         { []
         }
     {offset
       c2fgD: // global
           I64[Sp] = block_c2fgI_info;
           _s2big::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2big::I64;
           if (R1 & 7 != 0) goto u2fh6; else goto c2fgJ;
       u2fh6: // global
           call _c2fgI(R1) args: 0, res: 0, upd: 0;
       c2fgJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fgD_info" {
     block_c2fgD_info:
         const _c2fgD;
         const 1;
         const 30;
 },
 _c2fgI() //  [R1]
         { []
         }
     {offset
       c2fgI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2fh3; else goto c2fh2;
       c2fh3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2fh2: // global
           _s2bil::I64 = I64[Sp + 8] - I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2bil::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fgI_info" {
     block_c2fgI_info:
         const _c2fgI;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.63471463 UTC

[section ""data" . GHC.Arr.$fIxChar_$cinRange_closure" {
     GHC.Arr.$fIxChar_$cinRange_closure:
         const GHC.Arr.$fIxChar_$cinRange_info;
 },
 GHC.Arr.$fIxChar_$cinRange_entry() //  [R2, R3]
         { []
         }
     {offset
       c2fhC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2fhL; else goto c2fhM;
       c2fhL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxChar_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fhM: // global
           I64[Sp - 16] = block_c2fhz_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fi9; else goto c2fhA;
       u2fi9: // global
           call _c2fhz(R1) args: 0, res: 0, upd: 0;
       c2fhA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxChar_$cinRange_info" {
     GHC.Arr.$fIxChar_$cinRange_info:
         const GHC.Arr.$fIxChar_$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2fhz() //  [R1]
         { []
         }
     {offset
       c2fhz: // global
           I64[Sp - 8] = block_c2fhF_info;
           _s2biq::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2biq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2fi8; else goto c2fhG;
       u2fi8: // global
           call _c2fhF(R1) args: 0, res: 0, upd: 0;
       c2fhG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fhz_info" {
     block_c2fhz_info:
         const _c2fhz;
         const 1;
         const 30;
 },
 _c2fhF() //  [R1]
         { []
         }
     {offset
       c2fhF: // global
           I64[Sp] = block_c2fhK_info;
           _s2bis::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2bis::I64;
           if (R1 & 7 != 0) goto u2fia; else goto c2fhP;
       u2fia: // global
           call _c2fhK(R1) args: 0, res: 0, upd: 0;
       c2fhP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fhF_info" {
     block_c2fhF_info:
         const _c2fhF;
         const 2;
         const 30;
 },
 _c2fhK() //  [R1]
         { []
         }
     {offset
       c2fhK: // global
           _s2biu::I64 = I64[R1 + 7];
           if (I64[Sp + 16] > _s2biu::I64) goto c2fhX; else goto c2fi1;
       c2fhX: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2fi1: // global
           _s2biq::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2fi0_info;
           R1 = _s2biq::P64;
           I64[Sp + 16] = _s2biu::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2fib; else goto c2fi2;
       u2fib: // global
           call _c2fi0(R1) args: 0, res: 0, upd: 0;
       c2fi2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fhK_info" {
     block_c2fhK_info:
         const _c2fhK;
         const 130;
         const 30;
 },
 _c2fi0() //  [R1]
         { []
         }
     {offset
       c2fi0: // global
           R1 = I64[((I64[Sp + 8] <= I64[R1 + 7]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fi0_info" {
     block_c2fi0_info:
         const _c2fi0;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.646688719 UTC

[section ""data" . GHC.Arr.$fIxInt_$cunsafeRangeSize_closure" {
     GHC.Arr.$fIxInt_$cunsafeRangeSize_closure:
         const GHC.Arr.$fIxInt_$cunsafeRangeSize_info;
 },
 GHC.Arr.$fIxInt_$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c2fiP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2fj9; else goto c2fja;
       c2fj9: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxInt_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2fja: // global
           I64[Sp - 8] = block_c2fiM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2fjh; else goto c2fiN;
       u2fjh: // global
           call _c2fiM(R1) args: 0, res: 0, upd: 0;
       c2fiN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInt_$cunsafeRangeSize_info" {
     GHC.Arr.$fIxInt_$cunsafeRangeSize_info:
         const GHC.Arr.$fIxInt_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2fiM() //  [R1]
         { []
         }
     {offset
       c2fiM: // global
           I64[Sp - 8] = block_c2fiS_info;
           _s2biB::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp] = _s2biB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2fjg; else goto c2fiT;
       u2fjg: // global
           call _c2fiS(R1) args: 0, res: 0, upd: 0;
       c2fiT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fiM_info" {
     block_c2fiM_info:
         const _c2fiM;
         const 0;
         const 30;
 },
 _c2fiS() //  [R1]
         { []
         }
     {offset
       c2fiS: // global
           I64[Sp] = block_c2fiX_info;
           _s2biE::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2biE::I64;
           if (R1 & 7 != 0) goto u2fji; else goto c2fiY;
       u2fji: // global
           call _c2fiX(R1) args: 0, res: 0, upd: 0;
       c2fiY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fiS_info" {
     block_c2fiS_info:
         const _c2fiS;
         const 1;
         const 30;
 },
 _c2fiX() //  [R1]
         { []
         }
     {offset
       c2fiX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2fjf; else goto c2fje;
       c2fjf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2fje: // global
           _s2biI::I64 = I64[Sp + 8] - I64[R1 + 7] + 1;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2biI::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fiX_info" {
     block_c2fiX_info:
         const _c2fiX;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.656727667 UTC

[section ""data" . GHC.Arr.$fIxInt_$crangeSize_closure" {
     GHC.Arr.$fIxInt_$crangeSize_closure:
         const GHC.Arr.$fIxInt_$crangeSize_info;
 },
 GHC.Arr.$fIxInt_$crangeSize_entry() //  [R2]
         { []
         }
     {offset
       c2fjP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2fjY; else goto c2fjZ;
       c2fjY: // global
           R2 = R2;
           R1 = GHC.Arr.$fIxInt_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2fjZ: // global
           I64[Sp - 8] = block_c2fjM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2fko; else goto c2fjN;
       u2fko: // global
           call _c2fjM(R1) args: 0, res: 0, upd: 0;
       c2fjN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInt_$crangeSize_info" {
     GHC.Arr.$fIxInt_$crangeSize_info:
         const GHC.Arr.$fIxInt_$crangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c2fjM() //  [R1]
         { []
         }
     {offset
       c2fjM: // global
           I64[Sp - 8] = block_c2fjS_info;
           _s2biM::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2biM::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2fkn; else goto c2fjT;
       u2fkn: // global
           call _c2fjS(R1) args: 0, res: 0, upd: 0;
       c2fjT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fjM_info" {
     block_c2fjM_info:
         const _c2fjM;
         const 0;
         const 30;
 },
 _c2fjS() //  [R1]
         { []
         }
     {offset
       c2fjS: // global
           I64[Sp] = block_c2fjX_info;
           _s2biO::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2biO::I64;
           if (R1 & 7 != 0) goto u2fkp; else goto c2fk2;
       u2fkp: // global
           call _c2fjX(R1) args: 0, res: 0, upd: 0;
       c2fk2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fjS_info" {
     block_c2fjS_info:
         const _c2fjS;
         const 1;
         const 30;
 },
 _c2fjX() //  [R1]
         { []
         }
     {offset
       c2fjX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2fk8; else goto c2fk7;
       c2fk8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2fk7: // global
           _s2biO::I64 = I64[Sp + 8];
           _s2biQ::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s2biO::I64,
                            _s2biQ::I64)) goto c2fkc; else goto c2fkm;
       c2fkc: // global
           Hp = Hp - 16;
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2fkm: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2biQ::I64 - _s2biO::I64 + 1;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fjX_info" {
     block_c2fjX_info:
         const _c2fjX;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.665412821 UTC

[section ""data" . lvl26_r1XvD_closure" {
     lvl26_r1XvD_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)2_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.667570475 UTC

[section ""cstring" . lvl27_r1XvE_bytes" {
     lvl27_r1XvE_bytes:
         I8[] [73,120,123]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.66917859 UTC

[section ""cstring" . lvl28_r1XvF_bytes" {
     lvl28_r1XvF_bytes:
         I8[] [125,46,105,110,100,101,120,58,32,73,110,100,101,120,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.670778524 UTC

[section ""cstring" . lvl29_r1XvG_bytes" {
     lvl29_r1XvG_bytes:
         I8[] [32,111,117,116,32,111,102,32,114,97,110,103,101,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.67241546 UTC

[section ""data" . lvl30_r1XvH_closure" {
     lvl30_r1XvH_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)2_closure;
         const lvl26_r1XvD_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.679117424 UTC

[section ""data" . GHC.Arr.$windexError_closure" {
     GHC.Arr.$windexError_closure:
         const GHC.Arr.$windexError_info;
         const 0;
 },
 sat_s2bj0_entry() //  [R1]
         { []
         }
     {offset
       c2fln: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2flo; else goto c2flp;
       c2flo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2flp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bj0_info" {
     sat_s2bj0_info:
         const sat_s2bj0_entry;
         const 2;
         const 18;
 },
 sat_s2biZ_entry() //  [R1]
         { []
         }
     {offset
       c2flv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2flw; else goto c2flx;
       c2flw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2flx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2biZ_info" {
     sat_s2biZ_info:
         const sat_s2biZ_entry;
         const 2;
         const 18;
 },
 sat_s2bj3_entry() //  [R1]
         { []
         }
     {offset
       c2flz: // global
           _s2bj3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2flA; else goto c2flB;
       c2flB: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto c2flD; else goto c2flC;
       c2flD: // global
           HpAlloc = 112;
           goto c2flA;
       c2flA: // global
           R1 = _s2bj3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2flC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2bj3::P64;
           _s2biU::P64 = P64[_s2bj3::P64 + 16];
           _s2biV::P64 = P64[_s2bj3::P64 + 24];
           _s2biW::P64 = P64[_s2bj3::P64 + 32];
           I64[Hp - 104] = sat_s2bj0_info;
           P64[Hp - 88] = _s2biU::P64;
           P64[Hp - 80] = _s2biW::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = GHC.Types.[]_closure+1;
           I64[Hp - 48] = sat_s2biZ_info;
           P64[Hp - 32] = _s2biU::P64;
           P64[Hp - 24] = _s2biV::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = lvl30_r1XvH_closure+2;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bj3_info" {
     sat_s2bj3_info:
         const sat_s2bj3_entry;
         const 3;
         const 4294967311;
         const S2bMd_srt+368;
 },
 sat_s2bj6_entry() //  [R1]
         { []
         }
     {offset
       c2flG: // global
           _s2bj6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2flH; else goto c2flI;
       c2flI: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2flK; else goto c2flJ;
       c2flK: // global
           HpAlloc = 88;
           goto c2flH;
       c2flH: // global
           R1 = _s2bj6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2flJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2bj6::P64;
           _s2biU::P64 = P64[_s2bj6::P64 + 16];
           _s2biV::P64 = P64[_s2bj6::P64 + 24];
           _s2biW::P64 = P64[_s2bj6::P64 + 32];
           I64[Hp - 80] = sat_s2bj3_info;
           P64[Hp - 64] = _s2biU::P64;
           P64[Hp - 56] = _s2biV::P64;
           P64[Hp - 48] = _s2biW::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = GHC.Show.$fShow(,)4_closure;
           P64[Hp - 24] = Hp - 80;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 38;
           R3 = Hp - 14;
           R2 = lvl29_r1XvG_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bj6_info" {
     sat_s2bj6_info:
         const sat_s2bj6_entry;
         const 3;
         const 4294967311;
         const S2bMd_srt+368;
 },
 sat_s2bj8_entry() //  [R1]
         { []
         }
     {offset
       c2flM: // global
           _s2bj8::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto c2flN; else goto c2flO;
       c2flO: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c2flQ; else goto c2flP;
       c2flQ: // global
           HpAlloc = 64;
           goto c2flN;
       c2flN: // global
           R1 = _s2bj8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2flP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2bj8::P64;
           _s2biU::P64 = P64[_s2bj8::P64 + 16];
           _s2biV::P64 = P64[_s2bj8::P64 + 24];
           _s2biW::P64 = P64[_s2bj8::P64 + 32];
           _s2biX::P64 = P64[_s2bj8::P64 + 40];
           I64[Hp - 56] = sat_s2bj6_info;
           P64[Hp - 40] = _s2biU::P64;
           P64[Hp - 32] = _s2biV::P64;
           P64[Hp - 24] = _s2biW::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = Hp - 56;
           R2 = _s2biU::P64;
           I64[Sp - 48] = stg_ap_ppp_info;
           P64[Sp - 40] = GHC.Arr.$fIxInt1_closure+1;
           P64[Sp - 32] = _s2biX::P64;
           P64[Sp - 24] = Hp - 14;
           Sp = Sp - 48;
           call GHC.Show.showsPrec_entry(R2) args: 56, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bj8_info" {
     sat_s2bj8_info:
         const sat_s2bj8_entry;
         const 4;
         const 4294967311;
         const S2bMd_srt+368;
 },
 sat_s2bja_entry() //  [R1]
         { []
         }
     {offset
       c2flS: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c2flW; else goto c2flV;
       c2flW: // global
           HpAlloc = 72;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2flV: // global
           _s2biU::P64 = P64[R1 + 16];
           _s2biV::P64 = P64[R1 + 24];
           _s2biW::P64 = P64[R1 + 32];
           _s2biX::P64 = P64[R1 + 40];
           I64[Hp - 64] = sat_s2bj8_info;
           P64[Hp - 48] = _s2biU::P64;
           P64[Hp - 40] = _s2biV::P64;
           P64[Hp - 32] = _s2biW::P64;
           P64[Hp - 24] = _s2biX::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 64;
           R3 = Hp - 14;
           R2 = lvl28_r1XvF_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2bja_info" {
     sat_s2bja_info:
         const sat_s2bja_entry;
         const 4;
         const 4294967311;
         const S2bMd_srt+368;
 },
 sat_s2bjb_entry() //  [R1]
         { []
         }
     {offset
       c2flX: // global
           _s2bjb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2flY; else goto c2flZ;
       c2flZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c2fm1; else goto c2fm0;
       c2fm1: // global
           HpAlloc = 48;
           goto c2flY;
       c2flY: // global
           R1 = _s2bjb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2fm0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2bjb::P64;
           _s2biU::P64 = P64[_s2bjb::P64 + 16];
           _s2biV::P64 = P64[_s2bjb::P64 + 24];
           _s2biW::P64 = P64[_s2bjb::P64 + 32];
           _s2biX::P64 = P64[_s2bjb::P64 + 40];
           _s2biY::P64 = P64[_s2bjb::P64 + 48];
           I64[Hp - 40] = sat_s2bja_info;
           P64[Hp - 24] = _s2biU::P64;
           P64[Hp - 16] = _s2biV::P64;
           P64[Hp - 8] = _s2biW::P64;
           P64[Hp] = _s2biX::P64;
           R3 = Hp - 40;
           R2 = _s2biY::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bjb_info" {
     sat_s2bjb_info:
         const sat_s2bjb_entry;
         const 5;
         const 4294967311;
         const S2bMd_srt+368;
 },
 section ""relreadonly" . u2fmc_srtd" {
     u2fmc_srtd:
         const S2bMd_srt+8;
         const 47;
         const 105553116266497;
 },
 GHC.Arr.$windexError_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2fm4: // global
           _s2biY::P64 = R6;
           _s2biX::P64 = R5;
           _s2biW::P64 = R4;
           _s2biV::P64 = R3;
           _s2biU::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c2fm5; else goto c2fm6;
       c2fm6: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c2fm8; else goto c2fm7;
       c2fm8: // global
           HpAlloc = 56;
           goto c2fm5;
       c2fm5: // global
           R6 = _s2biY::P64;
           R5 = _s2biX::P64;
           R4 = _s2biW::P64;
           R3 = _s2biV::P64;
           R2 = _s2biU::P64;
           R1 = GHC.Arr.$windexError_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fm7: // global
           I64[Hp - 48] = sat_s2bjb_info;
           P64[Hp - 32] = _s2biU::P64;
           P64[Hp - 24] = _s2biV::P64;
           P64[Hp - 16] = _s2biW::P64;
           P64[Hp - 8] = _s2biX::P64;
           P64[Hp] = _s2biY::P64;
           I64[Sp - 8] = block_c2fm2_info;
           R3 = Hp - 48;
           R2 = lvl27_r1XvE_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$windexError_info" {
     GHC.Arr.$windexError_info:
         const GHC.Arr.$windexError_entry;
         const 0;
         const 18446744069414584334;
         const 21474836505;
         const u2fmc_srtd;
 },
 _c2fm2() //  [R1]
         { []
         }
     {offset
       c2fm2: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fm2_info" {
     block_c2fm2_info:
         const _c2fm2;
         const 0;
         const 4294967326;
         const S2bMd_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.700382001 UTC

[section ""data" . GHC.Arr.indexError_closure" {
     GHC.Arr.indexError_closure:
         const GHC.Arr.indexError_info;
         const 0;
 },
 GHC.Arr.indexError_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2fnA: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2fnB; else goto c2fnC;
       c2fnB: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.indexError_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fnC: // global
           I64[Sp - 32] = block_c2fnx_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2fnG; else goto c2fny;
       u2fnG: // global
           call _c2fnx(R1) args: 0, res: 0, upd: 0;
       c2fny: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.indexError_info" {
     GHC.Arr.indexError_info:
         const GHC.Arr.indexError_entry;
         const 0;
         const 21474836494;
         const 17179869208;
         const S2bMd_srt+376;
 },
 _c2fnx() //  [R1]
         { []
         }
     {offset
       c2fnx: // global
           R6 = P64[Sp + 24];
           R5 = P64[Sp + 16];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fnx_info" {
     block_c2fnx_info:
         const _c2fnx;
         const 3;
         const 4294967326;
         const S2bMd_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.706061102 UTC

[section ""data" . $wlvl_r1XvI_closure" {
     $wlvl_r1XvI_closure:
         const $wlvl_r1XvI_info;
         const 0;
 },
 $wlvl_r1XvI_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2fnV: // global
           R6 = lvl25_r1XvC_closure;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowInt_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl_r1XvI_info" {
     $wlvl_r1XvI_info:
         const $wlvl_r1XvI_entry;
         const 0;
         const 38654705678;
         const 12884901911;
         const S2bMd_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.71150584 UTC

[section ""data" . GHC.Arr.$fIxInt_$cindex_closure" {
     GHC.Arr.$fIxInt_$cindex_closure:
         const GHC.Arr.$fIxInt_$cindex_info;
         const 0;
 },
 GHC.Arr.$fIxInt_$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2fo9: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2fon; else goto c2foo;
       c2fon: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxInt_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2foo: // global
           I64[Sp - 16] = block_c2fo6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2foS; else goto c2fo7;
       u2foS: // global
           call _c2fo6(R1) args: 0, res: 0, upd: 0;
       c2fo7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInt_$cindex_info" {
     GHC.Arr.$fIxInt_$cindex_info:
         const GHC.Arr.$fIxInt_$cindex_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S2bMd_srt+408;
 },
 _c2fo6() //  [R1]
         { []
         }
     {offset
       c2fo6: // global
           I64[Sp - 8] = block_c2foc_info;
           _s2bjr::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bjr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2foR; else goto c2fod;
       u2foR: // global
           call _c2foc(R1) args: 0, res: 0, upd: 0;
       c2fod: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fo6_info" {
     block_c2fo6_info:
         const _c2fo6;
         const 1;
         const 4294967326;
         const S2bMd_srt+416;
 },
 _c2foc() //  [R1]
         { []
         }
     {offset
       c2foc: // global
           I64[Sp - 8] = block_c2foh_info;
           _s2bjs::P64 = R1;
           _s2bjt::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _s2bjt::I64;
           P64[Sp + 8] = _s2bjs::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2foT; else goto c2foi;
       u2foT: // global
           call _c2foh(R1) args: 0, res: 0, upd: 0;
       c2foi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2foc_info" {
     block_c2foc_info:
         const _c2foc;
         const 2;
         const 4294967326;
         const S2bMd_srt+416;
 },
 _c2foh() //  [R1]
         { []
         }
     {offset
       c2foh: // global
           I64[Sp - 8] = block_c2fom_info;
           _s2bju::P64 = R1;
           _s2bjv::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp] = _s2bjv::I64;
           P64[Sp + 24] = _s2bju::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2foU; else goto c2fos;
       u2foU: // global
           call _c2fom(R1) args: 0, res: 0, upd: 0;
       c2fos: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2foh_info" {
     block_c2foh_info:
         const _c2foh;
         const 67;
         const 4294967326;
         const S2bMd_srt+416;
 },
 _c2fom() //  [R1]
         { []
         }
     {offset
       c2fom: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2foy; else goto c2fox;
       c2foy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2fox: // global
           _s2bjs::P64 = P64[Sp + 24];
           _s2bjt::I64 = I64[Sp + 16];
           _s2bju::P64 = P64[Sp + 32];
           _s2bjw::P64 = R1;
           _s2bjx::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_s2bjt::I64,
                            _s2bjx::I64)) goto c2foI; else goto c2foQ;
       c2foQ: // global
           if (%MO_S_Gt_W64(_s2bjx::I64,
                            I64[Sp + 8])) goto c2foI; else goto c2foP;
       c2foI: // global
           Hp = Hp - 16;
           R4 = _s2bjw::P64;
           R3 = _s2bju::P64;
           R2 = _s2bjs::P64;
           Sp = Sp + 40;
           call $wlvl_r1XvI_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c2foP: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2bjx::I64 - _s2bjt::I64;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fom_info" {
     block_c2fom_info:
         const _c2fom;
         const 196;
         const 4294967326;
         const S2bMd_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.72273978 UTC

[section ""data" . GHC.Arr.$fIxInt_closure" {
     GHC.Arr.$fIxInt_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Classes.$fOrdInt_closure;
         const GHC.Arr.$fIxInt_$crange_closure+1;
         const GHC.Arr.$fIxInt_$cindex_closure+2;
         const GHC.Arr.$fIxInt_$cunsafeIndex_closure+2;
         const GHC.Arr.$fIxInt_$cinRange_closure+2;
         const GHC.Arr.$fIxInt_$crangeSize_closure+1;
         const GHC.Arr.$fIxInt_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.725003012 UTC

[section ""data" . $wlvl1_r1XvJ_closure" {
     $wlvl1_r1XvJ_closure:
         const $wlvl1_r1XvJ_info;
         const 0;
 },
 $wlvl1_r1XvJ_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2fpt: // global
           R6 = lvl20_r1Xvx_closure;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowOrdering_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl1_r1XvJ_info" {
     $wlvl1_r1XvJ_info:
         const $wlvl1_r1XvJ_entry;
         const 0;
         const 828928688142;
         const 12884901911;
         const S2bMd_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.731518146 UTC

[section ""data" . GHC.Arr.$fIxOrdering_$cindex_closure" {
     GHC.Arr.$fIxOrdering_$cindex_closure:
         const GHC.Arr.$fIxOrdering_$cindex_info;
         const 0;
 },
 GHC.Arr.$fIxOrdering_$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2fpH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2fpI; else goto c2fpJ;
       c2fpI: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxOrdering_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fpJ: // global
           I64[Sp - 16] = block_c2fpE_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2frg; else goto c2fpF;
       u2frg: // global
           call _c2fpE(R1) args: 0, res: 0, upd: 0;
       c2fpF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxOrdering_$cindex_info" {
     GHC.Arr.$fIxOrdering_$cindex_info:
         const GHC.Arr.$fIxOrdering_$cindex_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S2bMd_srt+440;
 },
 _c2fpE() //  [R1]
         { []
         }
     {offset
       c2fpE: // global
           I64[Sp - 16] = block_c2fpM_info;
           R4 = P64[Sp + 8];
           _s2bjI::P64 = P64[R1 + 15];
           R3 = _s2bjI::P64;
           _s2bjH::P64 = P64[R1 + 7];
           R2 = _s2bjH::P64;
           P64[Sp - 8] = _s2bjI::P64;
           P64[Sp] = _s2bjH::P64;
           Sp = Sp - 16;
           call GHC.Arr.$w$cinRange_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fpE_info" {
     block_c2fpE_info:
         const _c2fpE;
         const 1;
         const 4294967326;
         const S2bMd_srt+448;
 },
 _c2fpM() //  [R1]
         { []
         }
     {offset
       c2fpM: // global
           _s2bjF::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c2fpT; else goto c2fpY;
       c2fpT: // global
           R4 = _s2bjF::P64;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call $wlvl1_r1XvJ_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c2fpY: // global
           I64[Sp + 8] = block_c2fpW_info;
           R1 = _s2bjF::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2frh; else goto c2fpZ;
       u2frh: // global
           call _c2fpW(R1) args: 0, res: 0, upd: 0;
       c2fpZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fpM_info" {
     block_c2fpM_info:
         const _c2fpM;
         const 3;
         const 4294967326;
         const S2bMd_srt+448;
 },
 _c2fpW() //  [R1]
         { []
         }
     {offset
       c2fpW: // global
           _s2bjH::P64 = P64[Sp + 8];
           _c2fr1::P64 = R1 & 7;
           if (_c2fr1::P64 < 3) goto u2fr5; else goto c2fqK;
       u2fr5: // global
           if (_c2fr1::P64 < 2) goto c2fq6; else goto c2fqq;
       c2fq6: // global
           I64[Sp + 16] = block_c2fq3_info;
           R1 = _s2bjH::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u2fri; else goto c2fq7;
       u2fri: // global
           call _c2fq3(R1) args: 0, res: 0, upd: 0;
       c2fq7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c2fqq: // global
           I64[Sp + 16] = block_c2fqo_info;
           R1 = _s2bjH::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u2frj; else goto c2fqr;
       u2frj: // global
           call _c2fqo(R1) args: 0, res: 0, upd: 0;
       c2fqr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c2fqK: // global
           I64[Sp + 16] = block_c2fqI_info;
           R1 = _s2bjH::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u2frk; else goto c2fqL;
       u2frk: // global
           call _c2fqI(R1) args: 0, res: 0, upd: 0;
       c2fqL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fpW_info" {
     block_c2fpW_info:
         const _c2fpW;
         const 130;
         const 30;
 },
 _c2fq3() //  [R1]
         { []
         }
     {offset
       c2fq3: // global
           _c2fr4::P64 = R1 & 7;
           if (_c2fr4::P64 < 3) goto u2fr6; else goto c2fql;
       u2fr6: // global
           if (_c2fr4::P64 < 2) goto u2fra; else goto u2fr9;
       u2fra: // global
           Sp = Sp + 8;
           call _c2fqZ() args: 0, res: 0, upd: 0;
       u2fr9: // global
           Sp = Sp + 8;
           call _c2fqF() args: 0, res: 0, upd: 0;
       c2fql: // global
           R1 = lvl23_r1XvA_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fq3_info" {
     block_c2fq3_info:
         const _c2fq3;
         const 0;
         const 30;
 },
 _c2fqo() //  [R1]
         { []
         }
     {offset
       c2fqo: // global
           _c2fr3::P64 = R1 & 7;
           if (_c2fr3::P64 < 3) goto u2fr7; else goto u2frb;
       u2fr7: // global
           if (_c2fr3::P64 < 2) goto u2frd; else goto u2frc;
       u2frd: // global
           Sp = Sp + 8;
           call _c2fqV() args: 0, res: 0, upd: 0;
       u2frc: // global
           Sp = Sp + 8;
           call _c2fqZ() args: 0, res: 0, upd: 0;
       u2frb: // global
           Sp = Sp + 8;
           call _c2fqF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fqo_info" {
     block_c2fqo_info:
         const _c2fqo;
         const 0;
         const 30;
 },
 _c2fqF() //  []
         { []
         }
     {offset
       c2fqF: // global
           R1 = lvl22_r1Xvz_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2fqI() //  [R1]
         { []
         }
     {offset
       c2fqI: // global
           _c2fr2::P64 = R1 & 7;
           if (_c2fr2::P64 < 3) goto u2fr8; else goto u2fre;
       u2fr8: // global
           if (_c2fr2::P64 < 2) goto c2fqR; else goto u2frf;
       c2fqR: // global
           R1 = lvl18_r1Xvv_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u2frf: // global
           Sp = Sp + 8;
           call _c2fqV() args: 0, res: 0, upd: 0;
       u2fre: // global
           Sp = Sp + 8;
           call _c2fqZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fqI_info" {
     block_c2fqI_info:
         const _c2fqI;
         const 0;
         const 30;
 },
 _c2fqV() //  []
         { []
         }
     {offset
       c2fqV: // global
           R1 = lvl17_r1Xvu_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2fqZ() //  []
         { []
         }
     {offset
       c2fqZ: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.747728949 UTC

[section ""data" . GHC.Arr.$fIxOrdering_closure" {
     GHC.Arr.$fIxOrdering_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Classes.$fOrdOrdering_closure;
         const GHC.Arr.$fIxOrdering_$crange_closure+1;
         const GHC.Arr.$fIxOrdering_$cindex_closure+2;
         const GHC.Arr.$fIxOrdering_$cunsafeIndex_closure+2;
         const GHC.Arr.$fIxOrdering_$cinRange_closure+2;
         const GHC.Arr.$fIxOrdering_$crangeSize_closure+1;
         const GHC.Arr.$fIxOrdering_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.750601669 UTC

[section ""data" . $wlvl2_r1XvK_closure" {
     $wlvl2_r1XvK_closure:
         const $wlvl2_r1XvK_info;
         const 0;
 },
 $wlvl2_r1XvK_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2fsm: // global
           R6 = lvl16_r1Xvt_closure;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowBool_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl2_r1XvK_info" {
     $wlvl2_r1XvK_info:
         const $wlvl2_r1XvK_entry;
         const 0;
         const 13198434500622;
         const 12884901911;
         const S2bMd_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.753946432 UTC

[section ""data" . lvl31_r1XvL_closure" {
     lvl31_r1XvL_closure:
         const lvl31_r1XvL_info;
         const 0;
 },
 lvl31_r1XvL_entry() //  [R2]
         { []
         }
     {offset
       c2fsx: // global
           R4 = GHC.Types.False_closure+1;
           R3 = R2;
           R2 = GHC.Types.True_closure+2;
           call $wlvl2_r1XvK_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl31_r1XvL_info" {
     lvl31_r1XvL_info:
         const lvl31_r1XvL_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S2bMd_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.757209064 UTC

[section ""data" . lvl32_r1XvM_closure" {
     lvl32_r1XvM_closure:
         const lvl32_r1XvM_info;
         const 0;
 },
 lvl32_r1XvM_entry() //  [R2]
         { []
         }
     {offset
       c2fsK: // global
           R4 = GHC.Types.True_closure+2;
           R3 = GHC.Types.False_closure+1;
           R2 = R2;
           call $wlvl2_r1XvK_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl32_r1XvM_info" {
     lvl32_r1XvM_info:
         const lvl32_r1XvM_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S2bMd_srt+472;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.763279151 UTC

[section ""data" . GHC.Arr.$fIxBool_$cindex_closure" {
     GHC.Arr.$fIxBool_$cindex_closure:
         const GHC.Arr.$fIxBool_$cindex_info;
         const 0;
 },
 GHC.Arr.$fIxBool_$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2ft0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2ft1; else goto c2ft2;
       c2ft1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxBool_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2ft2: // global
           I64[Sp - 16] = block_c2fsX_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fu9; else goto c2fsY;
       u2fu9: // global
           call _c2fsX(R1) args: 0, res: 0, upd: 0;
       c2fsY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxBool_$cindex_info" {
     GHC.Arr.$fIxBool_$cindex_info:
         const GHC.Arr.$fIxBool_$cindex_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S2bMd_srt+480;
 },
 _c2fsX() //  [R1]
         { []
         }
     {offset
       c2fsX: // global
           I64[Sp - 8] = block_c2ft5_info;
           _s2bjW::P64 = P64[R1 + 7];
           _s2bjX::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s2bjX::P64;
           P64[Sp + 8] = _s2bjW::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2fu8; else goto c2ft7;
       u2fu8: // global
           call _c2ft5(R1) args: 0, res: 0, upd: 0;
       c2ft7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fsX_info" {
     block_c2fsX_info:
         const _c2fsX;
         const 1;
         const 12884901918;
         const S2bMd_srt+488;
 },
 _c2ft5() //  [R1]
         { []
         }
     {offset
       c2ft5: // global
           _s2bjW::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c2fte; else goto c2ftA;
       c2fte: // global
           I64[Sp] = block_c2ftb_info;
           R1 = _s2bjW::P64;
           if (R1 & 7 != 0) goto u2fua; else goto c2ftf;
       u2fua: // global
           call _c2ftb(R1) args: 0, res: 0, upd: 0;
       c2ftf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c2ftA: // global
           I64[Sp] = block_c2fty_info;
           R1 = _s2bjW::P64;
           if (R1 & 7 != 0) goto u2fub; else goto c2ftB;
       u2fub: // global
           call _c2fty(R1) args: 0, res: 0, upd: 0;
       c2ftB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ft5_info" {
     block_c2ft5_info:
         const _c2ft5;
         const 2;
         const 12884901918;
         const S2bMd_srt+488;
 },
 _c2ftb() //  [R1]
         { []
         }
     {offset
       c2ftb: // global
           _s2bjX::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c2ftm; else goto c2ftv;
       c2ftm: // global
           I64[Sp + 16] = block_c2ftj_info;
           R1 = _s2bjX::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u2fuc; else goto c2ftn;
       u2fuc: // global
           call _c2ftj() args: 0, res: 0, upd: 0;
       c2ftn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c2ftv: // global
           R2 = _s2bjX::P64;
           Sp = Sp + 24;
           call lvl31_r1XvL_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ftb_info" {
     block_c2ftb_info:
         const _c2ftb;
         const 130;
         const 4294967326;
         const S2bMd_srt+488;
 },
 _c2ftj() //  []
         { []
         }
     {offset
       c2ftj: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ftj_info" {
     block_c2ftj_info:
         const _c2ftj;
         const 0;
         const 30;
 },
 _c2fty() //  [R1]
         { []
         }
     {offset
       c2fty: // global
           _s2bjX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2ftF_info;
           _s2bk1::P64 = R1;
           R1 = _s2bjX::P64;
           P64[Sp + 16] = _s2bk1::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2fud; else goto c2ftH;
       u2fud: // global
           call _c2ftF(R1) args: 0, res: 0, upd: 0;
       c2ftH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fty_info" {
     block_c2fty_info:
         const _c2fty;
         const 130;
         const 4294967326;
         const S2bMd_srt+496;
 },
 _c2ftF() //  [R1]
         { []
         }
     {offset
       c2ftF: // global
           _s2bk1::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c2ftN; else goto c2ftS;
       c2ftN: // global
           R2 = _s2bk1::P64;
           Sp = Sp + 16;
           call lvl32_r1XvM_entry(R2) args: 8, res: 0, upd: 8;
       c2ftS: // global
           I64[Sp + 8] = block_c2ftQ_info;
           R1 = _s2bk1::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2fue; else goto c2ftT;
       u2fue: // global
           call _c2ftQ(R1) args: 0, res: 0, upd: 0;
       c2ftT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ftF_info" {
     block_c2ftF_info:
         const _c2ftF;
         const 1;
         const 4294967326;
         const S2bMd_srt+496;
 },
 _c2ftQ() //  [R1]
         { []
         }
     {offset
       c2ftQ: // global
           if (R1 & 7 == 1) goto c2ftZ; else goto c2fu3;
       c2ftZ: // global
           R1 = lvl17_r1Xvu_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2fu3: // global
           R1 = GHC.Arr.$fIxInt1_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ftQ_info" {
     block_c2ftQ_info:
         const _c2ftQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.778888324 UTC

[section ""data" . GHC.Arr.$fIxBool_closure" {
     GHC.Arr.$fIxBool_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Classes.$fOrdBool_closure;
         const GHC.Arr.$fIxBool_$crange_closure+1;
         const GHC.Arr.$fIxBool_$cindex_closure+2;
         const GHC.Arr.$fIxBool_$cunsafeIndex_closure+2;
         const GHC.Arr.$fIxBool_$cinRange_closure+2;
         const GHC.Arr.$fIxBool_$cunsafeRangeSize_closure+1;
         const GHC.Arr.$fIxBool_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.781173984 UTC

[section ""data" . $wlvl3_r1XvN_closure" {
     $wlvl3_r1XvN_closure:
         const $wlvl3_r1XvN_info;
         const 0;
 },
 $wlvl3_r1XvN_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2fv9: // global
           R6 = lvl14_r1Xvr_closure;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowInteger_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl3_r1XvN_info" {
     $wlvl3_r1XvN_info:
         const $wlvl3_r1XvN_entry;
         const 0;
         const 844429225099278;
         const 12884901911;
         const S2bMd_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.786637859 UTC

[section ""data" . GHC.Arr.$fIxInteger_$cindex_closure" {
     GHC.Arr.$fIxInteger_$cindex_closure:
         const GHC.Arr.$fIxInteger_$cindex_info;
         const 0;
 },
 GHC.Arr.$fIxInteger_$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2fvn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2fvo; else goto c2fvp;
       c2fvo: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxInteger_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fvp: // global
           I64[Sp - 16] = block_c2fvk_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fw4; else goto c2fvl;
       u2fw4: // global
           call _c2fvk(R1) args: 0, res: 0, upd: 0;
       c2fvl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxInteger_$cindex_info" {
     GHC.Arr.$fIxInteger_$cindex_info:
         const GHC.Arr.$fIxInteger_$cindex_entry;
         const 0;
         const 30064771086;
         const 8589934607;
         const S2bMd_srt+520;
 },
 _c2fvk() //  [R1]
         { []
         }
     {offset
       c2fvk: // global
           I64[Sp - 16] = block_c2fvs_info;
           R3 = P64[Sp + 8];
           _s2bka::P64 = P64[R1 + 7];
           R2 = _s2bka::P64;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = _s2bka::P64;
           Sp = Sp - 16;
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fvk_info" {
     block_c2fvk_info:
         const _c2fvk;
         const 1;
         const 12884901918;
         const S2bMd_srt+528;
 },
 _c2fvs() //  [R1]
         { []
         }
     {offset
       c2fvs: // global
           if (R1 == 1) goto c2fvE; else goto u2fw2;
       c2fvE: // global
           I64[Sp] = block_c2fvC_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 24];
           call GHC.Integer.Type.leInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
       u2fw2: // global
           Sp = Sp + 8;
           call _c2fvK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fvs_info" {
     block_c2fvs_info:
         const _c2fvs;
         const 3;
         const 12884901918;
         const S2bMd_srt+528;
 },
 _c2fvC() //  [R1]
         { []
         }
     {offset
       c2fvC: // global
           if (R1 == 1) goto c2fvX; else goto u2fw3;
       c2fvX: // global
           _s2bk8::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_c2fvN_info;
           R3 = P64[Sp + 16];
           R2 = _s2bk8::P64;
           Sp = Sp + 24;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
       u2fw3: // global
           Sp = Sp + 8;
           call _c2fvK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fvC_info" {
     block_c2fvC_info:
         const _c2fvC;
         const 3;
         const 12884901918;
         const S2bMd_srt+528;
 },
 _c2fvN() //  [R1]
         { []
         }
     {offset
       c2fvN: // global
           I64[Sp] = block_c2fvR_info;
           R2 = R1;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fvN_info" {
     block_c2fvN_info:
         const _c2fvN;
         const 0;
         const 30;
 },
 _c2fvR() //  [R1]
         { []
         }
     {offset
       c2fvR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2fw1; else goto c2fw0;
       c2fw1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2fw0: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fvR_info" {
     block_c2fvR_info:
         const _c2fvR;
         const 0;
         const 30;
 },
 _c2fvK() //  []
         { []
         }
     {offset
       c2fvK: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call $wlvl3_r1XvN_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.798535434 UTC

[section ""data" . GHC.Arr.$fIxInteger_closure" {
     GHC.Arr.$fIxInteger_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Integer.Type.$fOrdInteger_closure;
         const GHC.Arr.$fIxInteger_$crange_closure+1;
         const GHC.Arr.$fIxInteger_$cindex_closure+2;
         const GHC.Arr.$fIxInteger_$cunsafeIndex_closure+2;
         const GHC.Arr.$fIxInteger_$cinRange_closure+2;
         const GHC.Arr.$fIxInteger_$crangeSize_closure+1;
         const GHC.Arr.$fIxInteger_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.800859941 UTC

[section ""data" . $wlvl4_r1XvO_closure" {
     $wlvl4_r1XvO_closure:
         const $wlvl4_r1XvO_info;
         const 0;
 },
 $wlvl4_r1XvO_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2fwH: // global
           R6 = lvl12_r1Xvp_closure;
           R5 = R4;
           R4 = R3;
           R3 = R2;
           R2 = GHC.Show.$fShowChar_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl4_r1XvO_info" {
     $wlvl4_r1XvO_info:
         const $wlvl4_r1XvO_entry;
         const 0;
         const 27021602059190286;
         const 12884901911;
         const S2bMd_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.807092406 UTC

[section ""data" . GHC.Arr.$fIxChar_$cindex_closure" {
     GHC.Arr.$fIxChar_$cindex_closure:
         const GHC.Arr.$fIxChar_$cindex_info;
         const 0;
 },
 GHC.Arr.$fIxChar_$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c2fwV: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2fx4; else goto c2fx5;
       c2fx4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIxChar_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fx5: // global
           I64[Sp - 16] = block_c2fwS_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fxK; else goto c2fwT;
       u2fxK: // global
           call _c2fwS(R1) args: 0, res: 0, upd: 0;
       c2fwT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIxChar_$cindex_info" {
     GHC.Arr.$fIxChar_$cindex_info:
         const GHC.Arr.$fIxChar_$cindex_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S2bMd_srt+560;
 },
 _c2fwS() //  [R1]
         { []
         }
     {offset
       c2fwS: // global
           I64[Sp - 8] = block_c2fwY_info;
           _s2bkn::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bkn::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2fxJ; else goto c2fwZ;
       u2fxJ: // global
           call _c2fwY(R1) args: 0, res: 0, upd: 0;
       c2fwZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fwS_info" {
     block_c2fwS_info:
         const _c2fwS;
         const 1;
         const 4294967326;
         const S2bMd_srt+568;
 },
 _c2fwY() //  [R1]
         { []
         }
     {offset
       c2fwY: // global
           I64[Sp - 8] = block_c2fx3_info;
           _s2bko::P64 = R1;
           _s2bkp::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _s2bkp::I64;
           P64[Sp + 16] = _s2bko::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2fxL; else goto c2fx8;
       u2fxL: // global
           call _c2fx3(R1) args: 0, res: 0, upd: 0;
       c2fx8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fwY_info" {
     block_c2fwY_info:
         const _c2fwY;
         const 2;
         const 4294967326;
         const S2bMd_srt+568;
 },
 _c2fx3() //  [R1]
         { []
         }
     {offset
       c2fx3: // global
           _s2bkn::P64 = P64[Sp + 16];
           _s2bkr::I64 = I64[R1 + 7];
           if (I64[Sp + 8] > _s2bkr::I64) goto c2fxg; else goto c2fxk;
       c2fxg: // global
           R4 = R1;
           R3 = _s2bkn::P64;
           R2 = P64[Sp + 24];
           Sp = Sp + 32;
           call $wlvl4_r1XvO_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c2fxk: // global
           I64[Sp - 8] = block_c2fxj_info;
           _s2bkq::P64 = R1;
           R1 = _s2bkn::P64;
           I64[Sp] = _s2bkr::I64;
           P64[Sp + 16] = _s2bkq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2fxM; else goto c2fxl;
       u2fxM: // global
           call _c2fxj(R1) args: 0, res: 0, upd: 0;
       c2fxl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fx3_info" {
     block_c2fx3_info:
         const _c2fx3;
         const 67;
         const 4294967326;
         const S2bMd_srt+568;
 },
 _c2fxj() //  [R1]
         { []
         }
     {offset
       c2fxj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2fxr; else goto c2fxq;
       c2fxr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2fxq: // global
           _s2bkr::I64 = I64[Sp + 8];
           if (_s2bkr::I64 > I64[R1 + 7]) goto c2fxv; else goto c2fxI;
       c2fxv: // global
           Hp = Hp - 16;
           R4 = P64[Sp + 24];
           R3 = R1;
           R2 = P64[Sp + 32];
           Sp = Sp + 40;
           call $wlvl4_r1XvO_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       c2fxI: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2bkr::I64 - I64[Sp + 16];
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fxj_info" {
     block_c2fxj_info:
         const _c2fxj;
         const 196;
         const 4294967326;
         const S2bMd_srt+568;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.817368463 UTC

[section ""data" . GHC.Arr.$fIxChar_closure" {
     GHC.Arr.$fIxChar_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Classes.$fOrdChar_closure;
         const GHC.Arr.$fIxChar_$crange_closure+1;
         const GHC.Arr.$fIxChar_$cindex_closure+2;
         const GHC.Arr.$fIxChar_$cunsafeIndex_closure+2;
         const GHC.Arr.$fIxChar_$cinRange_closure+2;
         const GHC.Arr.$fIxChar_$crangeSize_closure+1;
         const GHC.Arr.$fIxChar_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.821032559 UTC

[section ""data" . $wlvl5_r1XvP_closure" {
     $wlvl5_r1XvP_closure:
         const $wlvl5_r1XvP_info;
 },
 $wlvl5_r1XvP_slow() //  [R1]
         { []
         }
     {offset
       c2fyi: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call $wlvl5_r1XvP_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 16, res: 0, upd: 8;
     }
 },
 $wlvl5_r1XvP_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2fyr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2fys; else goto c2fyt;
       c2fys: // global
           R1 = $wlvl5_r1XvP_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c2fyt: // global
           if (R2 == R5) goto c2fyq; else goto u2fyN;
       c2fyq: // global
           I64[Sp - 24] = block_c2fyw_info;
           R1 = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2fyP; else goto c2fyx;
       u2fyP: // global
           call _c2fyw(R1) args: 0, res: 0, upd: 0;
       c2fyx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2fyN: // global
           Sp = Sp + 8;
           call _c2fyL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wlvl5_r1XvP_info" {
     $wlvl5_r1XvP_info:
         const $wlvl5_r1XvP_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 582;
         const $wlvl5_r1XvP_slow;
 },
 _c2fyw() //  [R1]
         { []
         }
     {offset
       c2fyw: // global
           I64[Sp] = block_c2fyB_info;
           _s2bkH::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2bkH::I64;
           if (R1 & 7 != 0) goto u2fyR; else goto c2fyD;
       u2fyR: // global
           call _c2fyB(R1) args: 0, res: 0, upd: 0;
       c2fyD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fyw_info" {
     block_c2fyw_info:
         const _c2fyw;
         const 3;
         const 30;
 },
 _c2fyB() //  [R1]
         { []
         }
     {offset
       c2fyB: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto c2fyM; else goto u2fyO;
       c2fyM: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Classes.eqInt_entry(R3, R2) args: 8, res: 0, upd: 8;
       u2fyO: // global
           Sp = Sp + 32;
           call _c2fyL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fyB_info" {
     block_c2fyB_info:
         const _c2fyB;
         const 131;
         const 30;
 },
 _c2fyL() //  []
         { []
         }
     {offset
       c2fyL: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.831955152 UTC

[section ""data" . lvl33_r1XvQ_closure" {
     lvl33_r1XvQ_closure:
         const lvl33_r1XvQ_info;
 },
 lvl33_r1XvQ_entry() //  [R2, R3]
         { []
         }
     {offset
       c2fzm: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2fzA; else goto c2fzB;
       c2fzA: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl33_r1XvQ_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fzB: // global
           I64[Sp - 16] = block_c2fzj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fzL; else goto c2fzk;
       u2fzL: // global
           call _c2fzj(R1) args: 0, res: 0, upd: 0;
       c2fzk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl33_r1XvQ_info" {
     lvl33_r1XvQ_info:
         const lvl33_r1XvQ_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2fzj() //  [R1]
         { []
         }
     {offset
       c2fzj: // global
           I64[Sp - 16] = block_c2fzp_info;
           _s2bkP::P64 = P64[R1 + 15];
           _s2bkQ::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2bkQ::P64;
           P64[Sp] = _s2bkP::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fzK; else goto c2fzq;
       u2fzK: // global
           call _c2fzp(R1) args: 0, res: 0, upd: 0;
       c2fzq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fzj_info" {
     block_c2fzj_info:
         const _c2fzj;
         const 1;
         const 30;
 },
 _c2fzp() //  [R1]
         { []
         }
     {offset
       c2fzp: // global
           I64[Sp] = block_c2fzu_info;
           _s2bkS::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s2bkS::I64;
           if (R1 & 7 != 0) goto u2fzM; else goto c2fzv;
       u2fzM: // global
           call _c2fzu(R1) args: 0, res: 0, upd: 0;
       c2fzv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fzp_info" {
     block_c2fzp_info:
         const _c2fzp;
         const 3;
         const 30;
 },
 _c2fzu() //  [R1]
         { []
         }
     {offset
       c2fzu: // global
           I64[Sp - 16] = block_c2fzz_info;
           _s2bkV::P64 = P64[R1 + 15];
           _s2bkW::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2bkW::P64;
           P64[Sp] = _s2bkV::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fzN; else goto c2fzF;
       u2fzN: // global
           call _c2fzz(R1) args: 0, res: 0, upd: 0;
       c2fzF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fzu_info" {
     block_c2fzu_info:
         const _c2fzu;
         const 259;
         const 30;
 },
 _c2fzz() //  [R1]
         { []
         }
     {offset
       c2fzz: // global
           R6 = P64[Sp + 16];
           R5 = I64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 40;
           call $wlvl5_r1XvP_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fzz_info" {
     block_c2fzz_info:
         const _c2fzz;
         const 1029;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.844579096 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$s$fEq(,,)_$c/=_closure" {
     GHC.Arr.$fIx(,,)_$s$fEq(,,)_$c/=_closure:
         const GHC.Arr.$fIx(,,)_$s$fEq(,,)_$c/=_info;
 },
 GHC.Arr.$fIx(,,)_$s$fEq(,,)_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c2fAl: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2fAz; else goto c2fAA;
       c2fAz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_$s$fEq(,,)_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fAA: // global
           I64[Sp - 16] = block_c2fAi_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fBu; else goto c2fAj;
       u2fBu: // global
           call _c2fAi(R1) args: 0, res: 0, upd: 0;
       c2fAj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_$s$fEq(,,)_$c/=_info" {
     GHC.Arr.$fIx(,,)_$s$fEq(,,)_$c/=_info:
         const GHC.Arr.$fIx(,,)_$s$fEq(,,)_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2fAi() //  [R1]
         { []
         }
     {offset
       c2fAi: // global
           I64[Sp - 16] = block_c2fAo_info;
           _s2bl2::P64 = P64[R1 + 7];
           _s2bl3::P64 = P64[R1 + 15];
           _s2bl4::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s2bl4::P64;
           P64[Sp] = _s2bl3::P64;
           P64[Sp + 8] = _s2bl2::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fBt; else goto c2fAp;
       u2fBt: // global
           call _c2fAo(R1) args: 0, res: 0, upd: 0;
       c2fAp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fAi_info" {
     block_c2fAi_info:
         const _c2fAi;
         const 1;
         const 30;
 },
 _c2fAo() //  [R1]
         { []
         }
     {offset
       c2fAo: // global
           I64[Sp - 16] = block_c2fAt_info;
           _s2bl6::P64 = P64[R1 + 7];
           _s2bl7::P64 = P64[R1 + 15];
           _s2bl8::P64 = P64[R1 + 23];
           R1 = P64[Sp + 24];
           P64[Sp - 8] = _s2bl8::P64;
           P64[Sp] = _s2bl7::P64;
           P64[Sp + 24] = _s2bl6::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fBv; else goto c2fAu;
       u2fBv: // global
           call _c2fAt(R1) args: 0, res: 0, upd: 0;
       c2fAu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fAo_info" {
     block_c2fAo_info:
         const _c2fAo;
         const 3;
         const 30;
 },
 _c2fAt() //  [R1]
         { []
         }
     {offset
       c2fAt: // global
           I64[Sp] = block_c2fAy_info;
           _s2bla::I64 = I64[R1 + 7];
           R1 = P64[Sp + 40];
           I64[Sp + 40] = _s2bla::I64;
           if (R1 & 7 != 0) goto u2fBw; else goto c2fAE;
       u2fBw: // global
           call _c2fAy(R1) args: 0, res: 0, upd: 0;
       c2fAE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fAt_info" {
     block_c2fAt_info:
         const _c2fAt;
         const 5;
         const 30;
 },
 _c2fAy() //  [R1]
         { []
         }
     {offset
       c2fAy: // global
           if (I64[Sp + 40] == I64[R1 + 7]) goto c2fAV; else goto u2fBq;
       c2fAV: // global
           I64[Sp] = block_c2fAP_info;
           R1 = P64[Sp + 32];
           if (R1 & 7 != 0) goto u2fBx; else goto c2fAQ;
       u2fBx: // global
           call _c2fAP(R1) args: 0, res: 0, upd: 0;
       c2fAQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2fBq: // global
           Sp = Sp + 48;
           call _c2fBo() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fAy_info" {
     block_c2fAy_info:
         const _c2fAy;
         const 1029;
         const 30;
 },
 _c2fAP() //  [R1]
         { []
         }
     {offset
       c2fAP: // global
           I64[Sp] = block_c2fAU_info;
           _s2blf::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 40] = _s2blf::I64;
           if (R1 & 7 != 0) goto u2fBz; else goto c2fAX;
       u2fBz: // global
           call _c2fAU(R1) args: 0, res: 0, upd: 0;
       c2fAX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fAP_info" {
     block_c2fAP_info:
         const _c2fAP;
         const 1541;
         const 30;
 },
 _c2fAU() //  [R1]
         { []
         }
     {offset
       c2fAU: // global
           if (I64[Sp + 40] == I64[R1 + 7]) goto c2fBe; else goto u2fBr;
       c2fBe: // global
           I64[Sp] = block_c2fB8_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u2fBA; else goto c2fB9;
       u2fBA: // global
           call _c2fB8(R1) args: 0, res: 0, upd: 0;
       c2fB9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2fBr: // global
           Sp = Sp + 48;
           call _c2fBo() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fAU_info" {
     block_c2fAU_info:
         const _c2fAU;
         const 1669;
         const 30;
 },
 _c2fB8() //  [R1]
         { []
         }
     {offset
       c2fB8: // global
           I64[Sp + 32] = block_c2fBd_info;
           _s2blk::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 40] = _s2blk::I64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u2fBC; else goto c2fBg;
       u2fBC: // global
           call _c2fBd(R1) args: 0, res: 0, upd: 0;
       c2fBg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fB8_info" {
     block_c2fB8_info:
         const _c2fB8;
         const 1925;
         const 30;
 },
 _c2fBd() //  [R1]
         { []
         }
     {offset
       c2fBd: // global
           if (I64[Sp + 8] == I64[R1 + 7]) goto c2fBp; else goto u2fBs;
       c2fBp: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u2fBs: // global
           Sp = Sp + 16;
           call _c2fBo() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fBd_info" {
     block_c2fBd_info:
         const _c2fBd;
         const 65;
         const 30;
 },
 _c2fBo() //  []
         { []
         }
     {offset
       c2fBo: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.862300376 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$s$fEq(,,)_closure" {
     GHC.Arr.$fIx(,,)_$s$fEq(,,)_closure:
         const GHC.Classes.C:Eq_con_info;
         const lvl33_r1XvQ_closure+2;
         const GHC.Arr.$fIx(,,)_$s$fEq(,,)_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.866252355 UTC

[section ""data" . $wlvl6_r1XvR_closure" {
     $wlvl6_r1XvR_closure:
         const $wlvl6_r1XvR_info;
 },
 $wlvl6_r1XvR_slow() //  [R1]
         { []
         }
     {offset
       c2fCy: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call $wlvl6_r1XvR_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 16, res: 0, upd: 8;
     }
 },
 $wlvl6_r1XvR_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2fCH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2fCI; else goto c2fCJ;
       c2fCI: // global
           R1 = $wlvl6_r1XvR_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c2fCJ: // global
           if (%MO_S_Ge_W64(R2, R5)) goto c2fCF; else goto u2fDf;
       c2fCF: // global
           if (R2 == R5) goto c2fCX; else goto u2fDg;
       c2fCX: // global
           I64[Sp - 24] = block_c2fCR_info;
           R1 = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2fDj; else goto c2fCS;
       u2fDj: // global
           call _c2fCR(R1) args: 0, res: 0, upd: 0;
       c2fCS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2fDg: // global
           Sp = Sp + 8;
           call _c2fDa() args: 0, res: 0, upd: 0;
       u2fDf: // global
           Sp = Sp + 8;
           call _c2fCG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wlvl6_r1XvR_info" {
     $wlvl6_r1XvR_info:
         const $wlvl6_r1XvR_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 582;
         const $wlvl6_r1XvR_slow;
 },
 _c2fCR() //  [R1]
         { []
         }
     {offset
       c2fCR: // global
           I64[Sp] = block_c2fCW_info;
           _s2blx::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2blx::I64;
           if (R1 & 7 != 0) goto u2fDm; else goto c2fCZ;
       u2fDm: // global
           call _c2fCW(R1) args: 0, res: 0, upd: 0;
       c2fCZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fCR_info" {
     block_c2fCR_info:
         const _c2fCR;
         const 3;
         const 30;
 },
 _c2fCW() //  [R1]
         { []
         }
     {offset
       c2fCW: // global
           _s2blx::I64 = I64[Sp + 16];
           _s2blz::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s2blx::I64,
                            _s2blz::I64)) goto c2fDd; else goto u2fDh;
       c2fDd: // global
           if (_s2blx::I64 == _s2blz::I64) goto c2fDb; else goto u2fDi;
       c2fDb: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Classes.compareInt_entry(R3, R2) args: 8, res: 0, upd: 8;
       u2fDi: // global
           Sp = Sp + 32;
           call _c2fDa() args: 0, res: 0, upd: 0;
       u2fDh: // global
           Sp = Sp + 32;
           call _c2fCG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fCW_info" {
     block_c2fCW_info:
         const _c2fCW;
         const 131;
         const 30;
 },
 _c2fDa() //  []
         { []
         }
     {offset
       c2fDa: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2fCG() //  []
         { []
         }
     {offset
       c2fCG: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.876993865 UTC

[section ""data" . lvl34_r1XvS_closure" {
     lvl34_r1XvS_closure:
         const lvl34_r1XvS_info;
 },
 lvl34_r1XvS_entry() //  [R2, R3]
         { []
         }
     {offset
       c2fDV: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2fE9; else goto c2fEa;
       c2fE9: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl34_r1XvS_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fEa: // global
           I64[Sp - 16] = block_c2fDS_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fEk; else goto c2fDT;
       u2fEk: // global
           call _c2fDS(R1) args: 0, res: 0, upd: 0;
       c2fDT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl34_r1XvS_info" {
     lvl34_r1XvS_info:
         const lvl34_r1XvS_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2fDS() //  [R1]
         { []
         }
     {offset
       c2fDS: // global
           I64[Sp - 16] = block_c2fDY_info;
           _s2blG::P64 = P64[R1 + 15];
           _s2blH::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2blH::P64;
           P64[Sp] = _s2blG::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fEj; else goto c2fDZ;
       u2fEj: // global
           call _c2fDY(R1) args: 0, res: 0, upd: 0;
       c2fDZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fDS_info" {
     block_c2fDS_info:
         const _c2fDS;
         const 1;
         const 30;
 },
 _c2fDY() //  [R1]
         { []
         }
     {offset
       c2fDY: // global
           I64[Sp] = block_c2fE3_info;
           _s2blJ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s2blJ::I64;
           if (R1 & 7 != 0) goto u2fEl; else goto c2fE4;
       u2fEl: // global
           call _c2fE3(R1) args: 0, res: 0, upd: 0;
       c2fE4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fDY_info" {
     block_c2fDY_info:
         const _c2fDY;
         const 3;
         const 30;
 },
 _c2fE3() //  [R1]
         { []
         }
     {offset
       c2fE3: // global
           I64[Sp - 16] = block_c2fE8_info;
           _s2blM::P64 = P64[R1 + 15];
           _s2blN::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2blN::P64;
           P64[Sp] = _s2blM::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fEm; else goto c2fEe;
       u2fEm: // global
           call _c2fE8(R1) args: 0, res: 0, upd: 0;
       c2fEe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fE3_info" {
     block_c2fE3_info:
         const _c2fE3;
         const 259;
         const 30;
 },
 _c2fE8() //  [R1]
         { []
         }
     {offset
       c2fE8: // global
           R6 = P64[Sp + 16];
           R5 = I64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 40;
           call $wlvl6_r1XvR_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fE8_info" {
     block_c2fE8_info:
         const _c2fE8;
         const 1029;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.889660074 UTC

[section ""data" . $wlvl7_r1XvT_closure" {
     $wlvl7_r1XvT_closure:
         const $wlvl7_r1XvT_info;
 },
 $wlvl7_r1XvT_slow() //  [R1]
         { []
         }
     {offset
       c2fEO: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call $wlvl7_r1XvT_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 16, res: 0, upd: 8;
     }
 },
 $wlvl7_r1XvT_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2fEX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2fEY; else goto c2fEZ;
       c2fEY: // global
           R1 = $wlvl7_r1XvT_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c2fEZ: // global
           if (%MO_S_Ge_W64(R2, R5)) goto c2fEV; else goto u2fFv;
       c2fEV: // global
           if (R2 == R5) goto c2fFd; else goto u2fFw;
       c2fFd: // global
           I64[Sp - 24] = block_c2fF7_info;
           R1 = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2fFz; else goto c2fF8;
       u2fFz: // global
           call _c2fF7(R1) args: 0, res: 0, upd: 0;
       c2fF8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2fFw: // global
           Sp = Sp + 8;
           call _c2fFq() args: 0, res: 0, upd: 0;
       u2fFv: // global
           Sp = Sp + 8;
           call _c2fEW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wlvl7_r1XvT_info" {
     $wlvl7_r1XvT_info:
         const $wlvl7_r1XvT_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 582;
         const $wlvl7_r1XvT_slow;
 },
 _c2fF7() //  [R1]
         { []
         }
     {offset
       c2fF7: // global
           I64[Sp] = block_c2fFc_info;
           _s2blZ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2blZ::I64;
           if (R1 & 7 != 0) goto u2fFC; else goto c2fFf;
       u2fFC: // global
           call _c2fFc(R1) args: 0, res: 0, upd: 0;
       c2fFf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fF7_info" {
     block_c2fF7_info:
         const _c2fF7;
         const 3;
         const 30;
 },
 _c2fFc() //  [R1]
         { []
         }
     {offset
       c2fFc: // global
           _s2blZ::I64 = I64[Sp + 16];
           _s2bm1::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s2blZ::I64,
                            _s2bm1::I64)) goto c2fFt; else goto u2fFx;
       c2fFt: // global
           if (_s2blZ::I64 == _s2bm1::I64) goto c2fFr; else goto u2fFy;
       c2fFr: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 8];
           Sp = Sp + 32;
           call GHC.Classes.ltInt_entry(R3, R2) args: 8, res: 0, upd: 8;
       u2fFy: // global
           Sp = Sp + 32;
           call _c2fFq() args: 0, res: 0, upd: 0;
       u2fFx: // global
           Sp = Sp + 32;
           call _c2fEW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fFc_info" {
     block_c2fFc_info:
         const _c2fFc;
         const 131;
         const 30;
 },
 _c2fFq() //  []
         { []
         }
     {offset
       c2fFq: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2fEW() //  []
         { []
         }
     {offset
       c2fEW: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.900343428 UTC

[section ""data" . lvl35_r1XvU_closure" {
     lvl35_r1XvU_closure:
         const lvl35_r1XvU_info;
 },
 lvl35_r1XvU_entry() //  [R2, R3]
         { []
         }
     {offset
       c2fGb: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2fGp; else goto c2fGq;
       c2fGp: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl35_r1XvU_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fGq: // global
           I64[Sp - 16] = block_c2fG8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fGA; else goto c2fG9;
       u2fGA: // global
           call _c2fG8(R1) args: 0, res: 0, upd: 0;
       c2fG9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl35_r1XvU_info" {
     lvl35_r1XvU_info:
         const lvl35_r1XvU_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2fG8() //  [R1]
         { []
         }
     {offset
       c2fG8: // global
           I64[Sp - 16] = block_c2fGe_info;
           _s2bm8::P64 = P64[R1 + 15];
           _s2bm9::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2bm9::P64;
           P64[Sp] = _s2bm8::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fGz; else goto c2fGf;
       u2fGz: // global
           call _c2fGe(R1) args: 0, res: 0, upd: 0;
       c2fGf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fG8_info" {
     block_c2fG8_info:
         const _c2fG8;
         const 1;
         const 30;
 },
 _c2fGe() //  [R1]
         { []
         }
     {offset
       c2fGe: // global
           I64[Sp] = block_c2fGj_info;
           _s2bmb::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s2bmb::I64;
           if (R1 & 7 != 0) goto u2fGB; else goto c2fGk;
       u2fGB: // global
           call _c2fGj(R1) args: 0, res: 0, upd: 0;
       c2fGk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fGe_info" {
     block_c2fGe_info:
         const _c2fGe;
         const 3;
         const 30;
 },
 _c2fGj() //  [R1]
         { []
         }
     {offset
       c2fGj: // global
           I64[Sp - 16] = block_c2fGo_info;
           _s2bme::P64 = P64[R1 + 15];
           _s2bmf::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2bmf::P64;
           P64[Sp] = _s2bme::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fGC; else goto c2fGu;
       u2fGC: // global
           call _c2fGo(R1) args: 0, res: 0, upd: 0;
       c2fGu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fGj_info" {
     block_c2fGj_info:
         const _c2fGj;
         const 259;
         const 30;
 },
 _c2fGo() //  [R1]
         { []
         }
     {offset
       c2fGo: // global
           R6 = P64[Sp + 16];
           R5 = I64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 40;
           call $wlvl7_r1XvT_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fGo_info" {
     block_c2fGo_info:
         const _c2fGo;
         const 1029;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.913619049 UTC

[section ""data" . $wlvl8_r1XvV_closure" {
     $wlvl8_r1XvV_closure:
         const $wlvl8_r1XvV_info;
 },
 $wlvl8_r1XvV_slow() //  [R1]
         { []
         }
     {offset
       c2fH4: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call $wlvl8_r1XvV_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 16, res: 0, upd: 8;
     }
 },
 $wlvl8_r1XvV_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2fHd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2fHe; else goto c2fHf;
       c2fHe: // global
           R1 = $wlvl8_r1XvV_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c2fHf: // global
           if (%MO_S_Ge_W64(R5, R2)) goto c2fHb; else goto u2fI4;
       c2fHb: // global
           if (R5 == R2) goto c2fHt; else goto u2fI5;
       c2fHt: // global
           I64[Sp - 24] = block_c2fHn_info;
           R1 = R6;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2fIa; else goto c2fHo;
       u2fIa: // global
           call _c2fHn(R1) args: 0, res: 0, upd: 0;
       c2fHo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2fI5: // global
           Sp = Sp + 8;
           call _c2fHZ() args: 0, res: 0, upd: 0;
       u2fI4: // global
           Sp = Sp + 8;
           call _c2fHc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wlvl8_r1XvV_info" {
     $wlvl8_r1XvV_info:
         const $wlvl8_r1XvV_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 582;
         const $wlvl8_r1XvV_slow;
 },
 _c2fHn() //  [R1]
         { []
         }
     {offset
       c2fHn: // global
           I64[Sp] = block_c2fHs_info;
           _s2bmr::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2bmr::I64;
           if (R1 & 7 != 0) goto u2fId; else goto c2fHv;
       u2fId: // global
           call _c2fHs(R1) args: 0, res: 0, upd: 0;
       c2fHv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fHn_info" {
     block_c2fHn_info:
         const _c2fHn;
         const 3;
         const 30;
 },
 _c2fHs() //  [R1]
         { []
         }
     {offset
       c2fHs: // global
           _s2bmr::I64 = I64[Sp + 8];
           _s2bmt::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s2bmr::I64,
                            _s2bmt::I64)) goto c2fI2; else goto u2fI6;
       c2fI2: // global
           if (_s2bmr::I64 == _s2bmt::I64) goto c2fHP; else goto u2fI7;
       c2fHP: // global
           I64[Sp + 8] = block_c2fHJ_info;
           R1 = P64[Sp + 24];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2fIe; else goto c2fHK;
       u2fIe: // global
           call _c2fHJ(R1) args: 0, res: 0, upd: 0;
       c2fHK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2fI7: // global
           Sp = Sp + 32;
           call _c2fHZ() args: 0, res: 0, upd: 0;
       u2fI6: // global
           Sp = Sp + 32;
           call _c2fHc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fHs_info" {
     block_c2fHs_info:
         const _c2fHs;
         const 67;
         const 30;
 },
 _c2fHJ() //  [R1]
         { []
         }
     {offset
       c2fHJ: // global
           _s2bmk::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2fHO_info;
           _s2bmx::I64 = I64[R1 + 7];
           R1 = _s2bmk::P64;
           I64[Sp + 16] = _s2bmx::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2fIh; else goto c2fHR;
       u2fIh: // global
           call _c2fHO(R1) args: 0, res: 0, upd: 0;
       c2fHR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fHJ_info" {
     block_c2fHJ_info:
         const _c2fHJ;
         const 130;
         const 30;
 },
 _c2fHO() //  [R1]
         { []
         }
     {offset
       c2fHO: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u2fI9; else goto u2fI8;
       u2fI9: // global
           Sp = Sp + 16;
           call _c2fHZ() args: 0, res: 0, upd: 0;
       u2fI8: // global
           Sp = Sp + 16;
           call _c2fHc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fHO_info" {
     block_c2fHO_info:
         const _c2fHO;
         const 65;
         const 30;
 },
 _c2fHZ() //  []
         { []
         }
     {offset
       c2fHZ: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2fHc() //  []
         { []
         }
     {offset
       c2fHc: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.927658283 UTC

[section ""data" . lvl36_r1XvW_closure" {
     lvl36_r1XvW_closure:
         const lvl36_r1XvW_info;
 },
 lvl36_r1XvW_entry() //  [R2, R3]
         { []
         }
     {offset
       c2fJ1: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2fJf; else goto c2fJg;
       c2fJf: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl36_r1XvW_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fJg: // global
           I64[Sp - 16] = block_c2fIY_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fJq; else goto c2fIZ;
       u2fJq: // global
           call _c2fIY(R1) args: 0, res: 0, upd: 0;
       c2fIZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl36_r1XvW_info" {
     lvl36_r1XvW_info:
         const lvl36_r1XvW_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2fIY() //  [R1]
         { []
         }
     {offset
       c2fIY: // global
           I64[Sp - 16] = block_c2fJ4_info;
           _s2bmF::P64 = P64[R1 + 15];
           _s2bmG::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2bmG::P64;
           P64[Sp] = _s2bmF::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fJp; else goto c2fJ5;
       u2fJp: // global
           call _c2fJ4(R1) args: 0, res: 0, upd: 0;
       c2fJ5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fIY_info" {
     block_c2fIY_info:
         const _c2fIY;
         const 1;
         const 30;
 },
 _c2fJ4() //  [R1]
         { []
         }
     {offset
       c2fJ4: // global
           I64[Sp] = block_c2fJ9_info;
           _s2bmI::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s2bmI::I64;
           if (R1 & 7 != 0) goto u2fJr; else goto c2fJa;
       u2fJr: // global
           call _c2fJ9(R1) args: 0, res: 0, upd: 0;
       c2fJa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fJ4_info" {
     block_c2fJ4_info:
         const _c2fJ4;
         const 3;
         const 30;
 },
 _c2fJ9() //  [R1]
         { []
         }
     {offset
       c2fJ9: // global
           I64[Sp - 16] = block_c2fJe_info;
           _s2bmL::P64 = P64[R1 + 15];
           _s2bmM::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2bmM::P64;
           P64[Sp] = _s2bmL::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fJs; else goto c2fJk;
       u2fJs: // global
           call _c2fJe(R1) args: 0, res: 0, upd: 0;
       c2fJk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fJ9_info" {
     block_c2fJ9_info:
         const _c2fJ9;
         const 259;
         const 30;
 },
 _c2fJe() //  [R1]
         { []
         }
     {offset
       c2fJe: // global
           R6 = P64[Sp + 16];
           R5 = I64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 40;
           call $wlvl8_r1XvV_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fJe_info" {
     block_c2fJe_info:
         const _c2fJe;
         const 1029;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.940466857 UTC

[section ""data" . $wlvl9_r1XvX_closure" {
     $wlvl9_r1XvX_closure:
         const $wlvl9_r1XvX_info;
 },
 $wlvl9_r1XvX_slow() //  [R1]
         { []
         }
     {offset
       c2fJU: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call $wlvl9_r1XvX_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 16, res: 0, upd: 8;
     }
 },
 $wlvl9_r1XvX_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2fK3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2fK4; else goto c2fK5;
       c2fK4: // global
           R1 = $wlvl9_r1XvX_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c2fK5: // global
           if (%MO_S_Ge_W64(R5, R2)) goto c2fK1; else goto u2fKB;
       c2fK1: // global
           if (R5 == R2) goto c2fKj; else goto u2fKC;
       c2fKj: // global
           I64[Sp - 24] = block_c2fKd_info;
           R1 = R6;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2fKF; else goto c2fKe;
       u2fKF: // global
           call _c2fKd(R1) args: 0, res: 0, upd: 0;
       c2fKe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2fKC: // global
           Sp = Sp + 8;
           call _c2fKw() args: 0, res: 0, upd: 0;
       u2fKB: // global
           Sp = Sp + 8;
           call _c2fK2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wlvl9_r1XvX_info" {
     $wlvl9_r1XvX_info:
         const $wlvl9_r1XvX_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 582;
         const $wlvl9_r1XvX_slow;
 },
 _c2fKd() //  [R1]
         { []
         }
     {offset
       c2fKd: // global
           I64[Sp] = block_c2fKi_info;
           _s2bmY::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2bmY::I64;
           if (R1 & 7 != 0) goto u2fKI; else goto c2fKl;
       u2fKI: // global
           call _c2fKi(R1) args: 0, res: 0, upd: 0;
       c2fKl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fKd_info" {
     block_c2fKd_info:
         const _c2fKd;
         const 3;
         const 30;
 },
 _c2fKi() //  [R1]
         { []
         }
     {offset
       c2fKi: // global
           _s2bmY::I64 = I64[Sp + 8];
           _s2bn0::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s2bmY::I64,
                            _s2bn0::I64)) goto c2fKz; else goto u2fKD;
       c2fKz: // global
           if (_s2bmY::I64 == _s2bn0::I64) goto c2fKx; else goto u2fKE;
       c2fKx: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 24];
           Sp = Sp + 32;
           call GHC.Classes.ltInt_entry(R3, R2) args: 8, res: 0, upd: 8;
       u2fKE: // global
           Sp = Sp + 32;
           call _c2fKw() args: 0, res: 0, upd: 0;
       u2fKD: // global
           Sp = Sp + 32;
           call _c2fK2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fKi_info" {
     block_c2fKi_info:
         const _c2fKi;
         const 67;
         const 30;
 },
 _c2fKw() //  []
         { []
         }
     {offset
       c2fKw: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2fK2() //  []
         { []
         }
     {offset
       c2fK2: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.951514075 UTC

[section ""data" . lvl37_r1XvY_closure" {
     lvl37_r1XvY_closure:
         const lvl37_r1XvY_info;
 },
 lvl37_r1XvY_entry() //  [R2, R3]
         { []
         }
     {offset
       c2fLh: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2fLv; else goto c2fLw;
       c2fLv: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl37_r1XvY_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fLw: // global
           I64[Sp - 16] = block_c2fLe_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fLG; else goto c2fLf;
       u2fLG: // global
           call _c2fLe(R1) args: 0, res: 0, upd: 0;
       c2fLf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl37_r1XvY_info" {
     lvl37_r1XvY_info:
         const lvl37_r1XvY_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2fLe() //  [R1]
         { []
         }
     {offset
       c2fLe: // global
           I64[Sp - 16] = block_c2fLk_info;
           _s2bn7::P64 = P64[R1 + 15];
           _s2bn8::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2bn8::P64;
           P64[Sp] = _s2bn7::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fLF; else goto c2fLl;
       u2fLF: // global
           call _c2fLk(R1) args: 0, res: 0, upd: 0;
       c2fLl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fLe_info" {
     block_c2fLe_info:
         const _c2fLe;
         const 1;
         const 30;
 },
 _c2fLk() //  [R1]
         { []
         }
     {offset
       c2fLk: // global
           I64[Sp] = block_c2fLp_info;
           _s2bna::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s2bna::I64;
           if (R1 & 7 != 0) goto u2fLH; else goto c2fLq;
       u2fLH: // global
           call _c2fLp(R1) args: 0, res: 0, upd: 0;
       c2fLq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fLk_info" {
     block_c2fLk_info:
         const _c2fLk;
         const 3;
         const 30;
 },
 _c2fLp() //  [R1]
         { []
         }
     {offset
       c2fLp: // global
           I64[Sp - 16] = block_c2fLu_info;
           _s2bnd::P64 = P64[R1 + 15];
           _s2bne::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2bne::P64;
           P64[Sp] = _s2bnd::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fLI; else goto c2fLA;
       u2fLI: // global
           call _c2fLu(R1) args: 0, res: 0, upd: 0;
       c2fLA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fLp_info" {
     block_c2fLp_info:
         const _c2fLp;
         const 259;
         const 30;
 },
 _c2fLu() //  [R1]
         { []
         }
     {offset
       c2fLu: // global
           R6 = P64[Sp + 16];
           R5 = I64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 40;
           call $wlvl9_r1XvX_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fLu_info" {
     block_c2fLu_info:
         const _c2fLu;
         const 1029;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.963912783 UTC

[section ""data" . $wlvl10_r1XvZ_closure" {
     $wlvl10_r1XvZ_closure:
         const $wlvl10_r1XvZ_info;
 },
 $wlvl10_r1XvZ_slow() //  [R1]
         { []
         }
     {offset
       c2fMa: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call $wlvl10_r1XvZ_entry(R6,
                                    R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 16, res: 0, upd: 8;
     }
 },
 $wlvl10_r1XvZ_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2fMj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2fMk; else goto c2fMl;
       c2fMk: // global
           R1 = $wlvl10_r1XvZ_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c2fMl: // global
           if (%MO_S_Ge_W64(R2, R5)) goto c2fMh; else goto u2fNa;
       c2fMh: // global
           if (R2 == R5) goto c2fMz; else goto u2fNb;
       c2fMz: // global
           I64[Sp - 24] = block_c2fMt_info;
           R1 = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2fNg; else goto c2fMu;
       u2fNg: // global
           call _c2fMt(R1) args: 0, res: 0, upd: 0;
       c2fMu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2fNb: // global
           Sp = Sp + 8;
           call _c2fN5() args: 0, res: 0, upd: 0;
       u2fNa: // global
           Sp = Sp + 8;
           call _c2fMi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wlvl10_r1XvZ_info" {
     $wlvl10_r1XvZ_info:
         const $wlvl10_r1XvZ_entry;
         const 0;
         const 14;
         const 25769803776;
         const 0;
         const 582;
         const $wlvl10_r1XvZ_slow;
 },
 _c2fMt() //  [R1]
         { []
         }
     {offset
       c2fMt: // global
           I64[Sp] = block_c2fMy_info;
           _s2bnq::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2bnq::I64;
           if (R1 & 7 != 0) goto u2fNj; else goto c2fMB;
       u2fNj: // global
           call _c2fMy(R1) args: 0, res: 0, upd: 0;
       c2fMB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fMt_info" {
     block_c2fMt_info:
         const _c2fMt;
         const 3;
         const 30;
 },
 _c2fMy() //  [R1]
         { []
         }
     {offset
       c2fMy: // global
           _s2bnq::I64 = I64[Sp + 16];
           _s2bns::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s2bnq::I64,
                            _s2bns::I64)) goto c2fN8; else goto u2fNc;
       c2fN8: // global
           if (_s2bnq::I64 == _s2bns::I64) goto c2fMV; else goto u2fNd;
       c2fMV: // global
           I64[Sp + 16] = block_c2fMP_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u2fNk; else goto c2fMQ;
       u2fNk: // global
           call _c2fMP(R1) args: 0, res: 0, upd: 0;
       c2fMQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2fNd: // global
           Sp = Sp + 32;
           call _c2fN5() args: 0, res: 0, upd: 0;
       u2fNc: // global
           Sp = Sp + 32;
           call _c2fMi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fMy_info" {
     block_c2fMy_info:
         const _c2fMy;
         const 131;
         const 30;
 },
 _c2fMP() //  [R1]
         { []
         }
     {offset
       c2fMP: // global
           I64[Sp] = block_c2fMU_info;
           _s2bnw::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2bnw::I64;
           if (R1 & 7 != 0) goto u2fNn; else goto c2fMX;
       u2fNn: // global
           call _c2fMU(R1) args: 0, res: 0, upd: 0;
       c2fMX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fMP_info" {
     block_c2fMP_info:
         const _c2fMP;
         const 1;
         const 30;
 },
 _c2fMU() //  [R1]
         { []
         }
     {offset
       c2fMU: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u2fNf; else goto u2fNe;
       u2fNf: // global
           Sp = Sp + 16;
           call _c2fN5() args: 0, res: 0, upd: 0;
       u2fNe: // global
           Sp = Sp + 16;
           call _c2fMi() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fMU_info" {
     block_c2fMU_info:
         const _c2fMU;
         const 65;
         const 30;
 },
 _c2fN5() //  []
         { []
         }
     {offset
       c2fN5: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2fMi() //  []
         { []
         }
     {offset
       c2fMi: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.978725856 UTC

[section ""data" . lvl38_r1Xw0_closure" {
     lvl38_r1Xw0_closure:
         const lvl38_r1Xw0_info;
 },
 lvl38_r1Xw0_entry() //  [R2, R3]
         { []
         }
     {offset
       c2fO7: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2fOl; else goto c2fOm;
       c2fOl: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl38_r1Xw0_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fOm: // global
           I64[Sp - 16] = block_c2fO4_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fOw; else goto c2fO5;
       u2fOw: // global
           call _c2fO4(R1) args: 0, res: 0, upd: 0;
       c2fO5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl38_r1Xw0_info" {
     lvl38_r1Xw0_info:
         const lvl38_r1Xw0_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2fO4() //  [R1]
         { []
         }
     {offset
       c2fO4: // global
           I64[Sp - 16] = block_c2fOa_info;
           _s2bnE::P64 = P64[R1 + 15];
           _s2bnF::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2bnF::P64;
           P64[Sp] = _s2bnE::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fOv; else goto c2fOb;
       u2fOv: // global
           call _c2fOa(R1) args: 0, res: 0, upd: 0;
       c2fOb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fO4_info" {
     block_c2fO4_info:
         const _c2fO4;
         const 1;
         const 30;
 },
 _c2fOa() //  [R1]
         { []
         }
     {offset
       c2fOa: // global
           I64[Sp] = block_c2fOf_info;
           _s2bnH::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s2bnH::I64;
           if (R1 & 7 != 0) goto u2fOx; else goto c2fOg;
       u2fOx: // global
           call _c2fOf(R1) args: 0, res: 0, upd: 0;
       c2fOg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fOa_info" {
     block_c2fOa_info:
         const _c2fOa;
         const 3;
         const 30;
 },
 _c2fOf() //  [R1]
         { []
         }
     {offset
       c2fOf: // global
           I64[Sp - 16] = block_c2fOk_info;
           _s2bnK::P64 = P64[R1 + 15];
           _s2bnL::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2bnL::P64;
           P64[Sp] = _s2bnK::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fOy; else goto c2fOq;
       u2fOy: // global
           call _c2fOk(R1) args: 0, res: 0, upd: 0;
       c2fOq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fOf_info" {
     block_c2fOf_info:
         const _c2fOf;
         const 259;
         const 30;
 },
 _c2fOk() //  [R1]
         { []
         }
     {offset
       c2fOk: // global
           R6 = P64[Sp + 16];
           R5 = I64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 32];
           R2 = I64[Sp + 40];
           P64[Sp + 40] = P64[Sp + 8];
           Sp = Sp + 40;
           call $wlvl10_r1XvZ_entry(R6,
                                    R5,
                                    R4,
                                    R3,
                                    R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fOk_info" {
     block_c2fOk_info:
         const _c2fOk;
         const 1029;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:56:59.991633237 UTC

[section ""data" . lvl39_r1Xw1_closure" {
     lvl39_r1Xw1_closure:
         const lvl39_r1Xw1_info;
 },
 lvl39_r1Xw1_entry() //  [R2, R3]
         { []
         }
     {offset
       c2fP6: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2fPk; else goto c2fPl;
       c2fPk: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl39_r1Xw1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fPl: // global
           I64[Sp - 16] = block_c2fP3_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fQu; else goto c2fP4;
       u2fQu: // global
           call _c2fP3(R1) args: 0, res: 0, upd: 0;
       c2fP4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl39_r1Xw1_info" {
     lvl39_r1Xw1_info:
         const lvl39_r1Xw1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2fP3() //  [R1]
         { []
         }
     {offset
       c2fP3: // global
           I64[Sp - 24] = block_c2fP9_info;
           _s2bnQ::P64 = R1;
           _s2bnS::P64 = P64[R1 + 15];
           _s2bnT::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s2bnS::P64;
           P64[Sp - 8] = _s2bnT::P64;
           P64[Sp] = _s2bnQ::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2fQt; else goto c2fPa;
       u2fQt: // global
           call _c2fP9(R1) args: 0, res: 0, upd: 0;
       c2fPa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fP3_info" {
     block_c2fP3_info:
         const _c2fP3;
         const 1;
         const 30;
 },
 _c2fP9() //  [R1]
         { []
         }
     {offset
       c2fP9: // global
           I64[Sp] = block_c2fPe_info;
           _s2bnV::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s2bnV::I64;
           if (R1 & 7 != 0) goto u2fQv; else goto c2fPf;
       u2fQv: // global
           call _c2fPe(R1) args: 0, res: 0, upd: 0;
       c2fPf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fP9_info" {
     block_c2fP9_info:
         const _c2fP9;
         const 4;
         const 30;
 },
 _c2fPe() //  [R1]
         { []
         }
     {offset
       c2fPe: // global
           I64[Sp - 24] = block_c2fPj_info;
           _s2bnW::P64 = R1;
           _s2bnY::P64 = P64[R1 + 15];
           _s2bnZ::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s2bnY::P64;
           P64[Sp - 8] = _s2bnZ::P64;
           P64[Sp] = _s2bnW::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2fQw; else goto c2fPp;
       u2fQw: // global
           call _c2fPj(R1) args: 0, res: 0, upd: 0;
       c2fPp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fPe_info" {
     block_c2fPe_info:
         const _c2fPe;
         const 516;
         const 30;
 },
 _c2fPj() //  [R1]
         { []
         }
     {offset
       c2fPj: // global
           _s2bnV::I64 = I64[Sp + 56];
           _s2bo1::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s2bo1::I64,
                            _s2bnV::I64)) goto c2fQl; else goto u2fQn;
       c2fQl: // global
           if (_s2bo1::I64 == _s2bnV::I64) goto c2fPJ; else goto u2fQo;
       c2fPJ: // global
           _s2bnY::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2fPD_info;
           R1 = _s2bnY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2fQx; else goto c2fPE;
       u2fQx: // global
           call _c2fPD(R1) args: 0, res: 0, upd: 0;
       c2fPE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2fQo: // global
           Sp = Sp + 24;
           call _c2fQf() args: 0, res: 0, upd: 0;
       u2fQn: // global
           Sp = Sp + 48;
           call _c2fQm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fPj_info" {
     block_c2fPj_info:
         const _c2fPj;
         const 4103;
         const 30;
 },
 _c2fPD() //  [R1]
         { []
         }
     {offset
       c2fPD: // global
           I64[Sp] = block_c2fPI_info;
           _s2bo5::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 48] = _s2bo5::I64;
           if (R1 & 7 != 0) goto u2fQA; else goto c2fPL;
       u2fQA: // global
           call _c2fPI(R1) args: 0, res: 0, upd: 0;
       c2fPL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fPD_info" {
     block_c2fPD_info:
         const _c2fPD;
         const 2054;
         const 30;
 },
 _c2fPI() //  [R1]
         { []
         }
     {offset
       c2fPI: // global
           _s2bo5::I64 = I64[Sp + 48];
           _s2bo7::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s2bo5::I64,
                            _s2bo7::I64)) goto c2fQi; else goto u2fQp;
       c2fQi: // global
           if (_s2bo5::I64 == _s2bo7::I64) goto c2fQ5; else goto u2fQq;
       c2fQ5: // global
           _s2bnZ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2fPZ_info;
           R1 = _s2bnZ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2fQB; else goto c2fQ0;
       u2fQB: // global
           call _c2fPZ(R1) args: 0, res: 0, upd: 0;
       c2fQ0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2fQq: // global
           Sp = Sp + 16;
           call _c2fQf() args: 0, res: 0, upd: 0;
       u2fQp: // global
           Sp = Sp + 40;
           call _c2fQm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fPI_info" {
     block_c2fPI_info:
         const _c2fPI;
         const 2310;
         const 30;
 },
 _c2fPZ() //  [R1]
         { []
         }
     {offset
       c2fPZ: // global
           I64[Sp] = block_c2fQ4_info;
           _s2bob::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 40] = _s2bob::I64;
           if (R1 & 7 != 0) goto u2fQE; else goto c2fQ7;
       u2fQE: // global
           call _c2fQ4(R1) args: 0, res: 0, upd: 0;
       c2fQ7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fPZ_info" {
     block_c2fPZ_info:
         const _c2fPZ;
         const 1157;
         const 30;
 },
 _c2fQ4() //  [R1]
         { []
         }
     {offset
       c2fQ4: // global
           if (%MO_S_Ge_W64(I64[Sp + 40],
                            I64[R1 + 7])) goto u2fQs; else goto u2fQr;
       u2fQs: // global
           Sp = Sp + 8;
           call _c2fQf() args: 0, res: 0, upd: 0;
       u2fQr: // global
           Sp = Sp + 32;
           call _c2fQm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fQ4_info" {
     block_c2fQ4_info:
         const _c2fQ4;
         const 1413;
         const 30;
 },
 _c2fQf() //  []
         { []
         }
     {offset
       c2fQf: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2fQm() //  []
         { []
         }
     {offset
       c2fQm: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.012836533 UTC

[section ""data" . lvl40_r1Xw2_closure" {
     lvl40_r1Xw2_closure:
         const lvl40_r1Xw2_info;
 },
 lvl40_r1Xw2_entry() //  [R2, R3]
         { []
         }
     {offset
       c2fRG: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2fRU; else goto c2fRV;
       c2fRU: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl40_r1Xw2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fRV: // global
           I64[Sp - 16] = block_c2fRD_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fT4; else goto c2fRE;
       u2fT4: // global
           call _c2fRD(R1) args: 0, res: 0, upd: 0;
       c2fRE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl40_r1Xw2_info" {
     lvl40_r1Xw2_info:
         const lvl40_r1Xw2_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2fRD() //  [R1]
         { []
         }
     {offset
       c2fRD: // global
           I64[Sp - 24] = block_c2fRJ_info;
           _s2boh::P64 = R1;
           _s2boj::P64 = P64[R1 + 15];
           _s2bok::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s2boj::P64;
           P64[Sp - 8] = _s2bok::P64;
           P64[Sp] = _s2boh::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2fT3; else goto c2fRK;
       u2fT3: // global
           call _c2fRJ(R1) args: 0, res: 0, upd: 0;
       c2fRK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fRD_info" {
     block_c2fRD_info:
         const _c2fRD;
         const 1;
         const 30;
 },
 _c2fRJ() //  [R1]
         { []
         }
     {offset
       c2fRJ: // global
           I64[Sp] = block_c2fRO_info;
           _s2bom::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s2bom::I64;
           if (R1 & 7 != 0) goto u2fT5; else goto c2fRP;
       u2fT5: // global
           call _c2fRO(R1) args: 0, res: 0, upd: 0;
       c2fRP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fRJ_info" {
     block_c2fRJ_info:
         const _c2fRJ;
         const 4;
         const 30;
 },
 _c2fRO() //  [R1]
         { []
         }
     {offset
       c2fRO: // global
           I64[Sp - 24] = block_c2fRT_info;
           _s2bon::P64 = R1;
           _s2bop::P64 = P64[R1 + 15];
           _s2boq::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 16] = _s2bop::P64;
           P64[Sp - 8] = _s2boq::P64;
           P64[Sp] = _s2bon::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2fT6; else goto c2fRZ;
       u2fT6: // global
           call _c2fRT(R1) args: 0, res: 0, upd: 0;
       c2fRZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fRO_info" {
     block_c2fRO_info:
         const _c2fRO;
         const 516;
         const 30;
 },
 _c2fRT() //  [R1]
         { []
         }
     {offset
       c2fRT: // global
           _s2bom::I64 = I64[Sp + 56];
           _s2bos::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s2bos::I64,
                            _s2bom::I64)) goto c2fSV; else goto u2fSX;
       c2fSV: // global
           if (_s2bos::I64 == _s2bom::I64) goto c2fSj; else goto u2fSY;
       c2fSj: // global
           _s2bop::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2fSd_info;
           R1 = _s2bop::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2fT7; else goto c2fSe;
       u2fT7: // global
           call _c2fSd(R1) args: 0, res: 0, upd: 0;
       c2fSe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2fSY: // global
           Sp = Sp + 48;
           call _c2fSP() args: 0, res: 0, upd: 0;
       u2fSX: // global
           Sp = Sp + 24;
           call _c2fSW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fRT_info" {
     block_c2fRT_info:
         const _c2fRT;
         const 4103;
         const 30;
 },
 _c2fSd() //  [R1]
         { []
         }
     {offset
       c2fSd: // global
           I64[Sp] = block_c2fSi_info;
           _s2bow::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 48] = _s2bow::I64;
           if (R1 & 7 != 0) goto u2fTa; else goto c2fSl;
       u2fTa: // global
           call _c2fSi(R1) args: 0, res: 0, upd: 0;
       c2fSl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fSd_info" {
     block_c2fSd_info:
         const _c2fSd;
         const 2054;
         const 30;
 },
 _c2fSi() //  [R1]
         { []
         }
     {offset
       c2fSi: // global
           _s2bow::I64 = I64[Sp + 48];
           _s2boy::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s2bow::I64,
                            _s2boy::I64)) goto c2fSS; else goto u2fSZ;
       c2fSS: // global
           if (_s2bow::I64 == _s2boy::I64) goto c2fSF; else goto u2fT0;
       c2fSF: // global
           _s2boq::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2fSz_info;
           R1 = _s2boq::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2fTb; else goto c2fSA;
       u2fTb: // global
           call _c2fSz(R1) args: 0, res: 0, upd: 0;
       c2fSA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2fT0: // global
           Sp = Sp + 40;
           call _c2fSP() args: 0, res: 0, upd: 0;
       u2fSZ: // global
           Sp = Sp + 16;
           call _c2fSW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fSi_info" {
     block_c2fSi_info:
         const _c2fSi;
         const 2310;
         const 30;
 },
 _c2fSz() //  [R1]
         { []
         }
     {offset
       c2fSz: // global
           I64[Sp] = block_c2fSE_info;
           _s2boC::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 40] = _s2boC::I64;
           if (R1 & 7 != 0) goto u2fTe; else goto c2fSH;
       u2fTe: // global
           call _c2fSE(R1) args: 0, res: 0, upd: 0;
       c2fSH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fSz_info" {
     block_c2fSz_info:
         const _c2fSz;
         const 1157;
         const 30;
 },
 _c2fSE() //  [R1]
         { []
         }
     {offset
       c2fSE: // global
           if (%MO_S_Ge_W64(I64[Sp + 40],
                            I64[R1 + 7])) goto u2fT2; else goto u2fT1;
       u2fT2: // global
           Sp = Sp + 32;
           call _c2fSP() args: 0, res: 0, upd: 0;
       u2fT1: // global
           Sp = Sp + 8;
           call _c2fSW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fSE_info" {
     block_c2fSE_info:
         const _c2fSE;
         const 1413;
         const 30;
 },
 _c2fSP() //  []
         { []
         }
     {offset
       c2fSP: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2fSW() //  []
         { []
         }
     {offset
       c2fSW: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.031490287 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$s$fOrd(,,)_closure" {
     GHC.Arr.$fIx(,,)_$s$fOrd(,,)_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Arr.$fIx(,,)_$s$fEq(,,)_closure+1;
         const lvl34_r1XvS_closure+2;
         const lvl35_r1XvU_closure+2;
         const lvl36_r1XvW_closure+2;
         const lvl37_r1XvY_closure+2;
         const lvl38_r1Xw0_closure+2;
         const lvl39_r1Xw1_closure+2;
         const lvl40_r1Xw2_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.033228568 UTC

[section ""data" . GHC.Arr.$fIx(,,)_$s$fIx(,,)_closure" {
     GHC.Arr.$fIx(,,)_$s$fIx(,,)_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Arr.$fIx(,,)_$s$fOrd(,,)_closure+1;
         const GHC.Arr.$fIx(,,)_$s$crange_closure+1;
         const GHC.Arr.$fIx(,,)_$s$cindex_closure+2;
         const GHC.Arr.$fIx(,,)_$s$cunsafeIndex_closure+2;
         const GHC.Arr.$fIx(,,)1_closure+2;
         const GHC.Arr.$fIx(,,)_$s$crangeSize_closure+1;
         const GHC.Arr.$fIx(,,)_$s$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.038508608 UTC

[section ""data" . GHC.Arr.$fIx(,,)_closure" {
     GHC.Arr.$fIx(,,)_closure:
         const GHC.Arr.$fIx(,,)_info;
         const 0;
 },
 sat_s2boP_entry() //  [R1, R2]
         { []
         }
     {offset
       c2fUk: // global
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$fIx(,,)_$cunsafeRangeSize_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2boP_info" {
     sat_s2boP_info:
         const sat_s2boP_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s2boO_entry() //  [R1, R2]
         { []
         }
     {offset
       c2fUs: // global
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$fIx(,,)_$crangeSize_entry(R5,
                                                   R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2boO_info" {
     sat_s2boO_info:
         const sat_s2boO_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s2boN_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2fUA: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fIx(,,)_$cinRange_entry(R6,
                                                 R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2boN_info" {
     sat_s2boN_info:
         const sat_s2boN_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_s2boM_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2fUI: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fIx(,,)_$cunsafeIndex_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2boM_info" {
     sat_s2boM_info:
         const sat_s2boM_entry;
         const 3;
         const 8;
         const 8589934607;
 },
 sat_s2boL_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2fUQ: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fIx(,,)_$cindex_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2boL_info" {
     sat_s2boL_info:
         const sat_s2boL_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const S2bMd_srt+576;
 },
 sat_s2boK_entry() //  [R1, R2]
         { []
         }
     {offset
       c2fUY: // global
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$fIx(,,)_$crange_entry(R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2boK_info" {
     sat_s2boK_info:
         const sat_s2boK_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s2boJ_entry() //  [R1]
         { []
         }
     {offset
       c2fV5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2fV6; else goto c2fV7;
       c2fV6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2fV7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 32];
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$fIx(,,)_$cp1Ix_entry(R4,
                                              R3,
                                              R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2boJ_info" {
     sat_s2boJ_info:
         const sat_s2boJ_entry;
         const 3;
         const 15;
 },
 GHC.Arr.$fIx(,,)_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2fV9: // global
           Hp = Hp + 296;
           if (Hp > HpLim) (likely: False) goto c2fVd; else goto c2fVc;
       c2fVd: // global
           HpAlloc = 296;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,,)_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fVc: // global
           I64[Hp - 288] = sat_s2boP_info;
           P64[Hp - 280] = R2;
           P64[Hp - 272] = R3;
           P64[Hp - 264] = R4;
           I64[Hp - 256] = sat_s2boO_info;
           P64[Hp - 248] = R2;
           P64[Hp - 240] = R3;
           P64[Hp - 232] = R4;
           I64[Hp - 224] = sat_s2boN_info;
           P64[Hp - 216] = R2;
           P64[Hp - 208] = R3;
           P64[Hp - 200] = R4;
           I64[Hp - 192] = sat_s2boM_info;
           P64[Hp - 184] = R2;
           P64[Hp - 176] = R3;
           P64[Hp - 168] = R4;
           I64[Hp - 160] = sat_s2boL_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           P64[Hp - 136] = R4;
           I64[Hp - 128] = sat_s2boK_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           I64[Hp - 96] = sat_s2boJ_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = GHC.Arr.C:Ix_con_info;
           P64[Hp - 48] = Hp - 96;
           P64[Hp - 40] = Hp - 127;
           P64[Hp - 32] = Hp - 158;
           P64[Hp - 24] = Hp - 190;
           P64[Hp - 16] = Hp - 222;
           P64[Hp - 8] = Hp - 255;
           P64[Hp] = Hp - 287;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,,)_info" {
     GHC.Arr.$fIx(,,)_info:
         const GHC.Arr.$fIx(,,)_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S2bMd_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.054441957 UTC

[section ""data" . $wlvl11_r1Xw3_closure" {
     $wlvl11_r1Xw3_closure:
         const $wlvl11_r1Xw3_info;
 },
 $wlvl11_r1Xw3_slow() //  [R1]
         { []
         }
     {offset
       c2fVW: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call $wlvl11_r1Xw3_entry(R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlvl11_r1Xw3_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2fW5: // global
           if (R2 == R4) goto c2fW4; else goto c2fW3;
       c2fW4: // global
           _s2boR::P64 = R3;
           R3 = R5;
           R2 = _s2boR::P64;
           call GHC.Classes.eqInt_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2fW3: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl11_r1Xw3_info" {
     $wlvl11_r1Xw3_info:
         const $wlvl11_r1Xw3_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 324;
         const $wlvl11_r1Xw3_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.060202235 UTC

[section ""data" . lvl41_r1Xw4_closure" {
     lvl41_r1Xw4_closure:
         const lvl41_r1Xw4_info;
 },
 lvl41_r1Xw4_entry() //  [R2, R3]
         { []
         }
     {offset
       c2fWn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2fWB; else goto c2fWC;
       c2fWB: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl41_r1Xw4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fWC: // global
           I64[Sp - 16] = block_c2fWk_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fWM; else goto c2fWl;
       u2fWM: // global
           call _c2fWk(R1) args: 0, res: 0, upd: 0;
       c2fWl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl41_r1Xw4_info" {
     lvl41_r1Xw4_info:
         const lvl41_r1Xw4_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2fWk() //  [R1]
         { []
         }
     {offset
       c2fWk: // global
           I64[Sp - 8] = block_c2fWq_info;
           _s2boZ::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2boZ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2fWL; else goto c2fWr;
       u2fWL: // global
           call _c2fWq(R1) args: 0, res: 0, upd: 0;
       c2fWr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fWk_info" {
     block_c2fWk_info:
         const _c2fWk;
         const 1;
         const 30;
 },
 _c2fWq() //  [R1]
         { []
         }
     {offset
       c2fWq: // global
           I64[Sp] = block_c2fWv_info;
           _s2bp1::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2bp1::I64;
           if (R1 & 7 != 0) goto u2fWN; else goto c2fWw;
       u2fWN: // global
           call _c2fWv(R1) args: 0, res: 0, upd: 0;
       c2fWw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fWq_info" {
     block_c2fWq_info:
         const _c2fWq;
         const 2;
         const 30;
 },
 _c2fWv() //  [R1]
         { []
         }
     {offset
       c2fWv: // global
           I64[Sp - 8] = block_c2fWA_info;
           _s2bp4::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bp4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2fWO; else goto c2fWG;
       u2fWO: // global
           call _c2fWA(R1) args: 0, res: 0, upd: 0;
       c2fWG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fWv_info" {
     block_c2fWv_info:
         const _c2fWv;
         const 130;
         const 30;
 },
 _c2fWA() //  [R1]
         { []
         }
     {offset
       c2fWA: // global
           R5 = P64[Sp + 8];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = I64[Sp + 24];
           Sp = Sp + 32;
           call $wlvl11_r1Xw3_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fWA_info" {
     block_c2fWA_info:
         const _c2fWA;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.071863763 UTC

[section ""data" . GHC.Arr.$fIx(,)_$s$fEq(,)_$c/=_closure" {
     GHC.Arr.$fIx(,)_$s$fEq(,)_$c/=_closure:
         const GHC.Arr.$fIx(,)_$s$fEq(,)_$c/=_info;
 },
 GHC.Arr.$fIx(,)_$s$fEq(,)_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c2fXl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2fXz; else goto c2fXA;
       c2fXz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_$s$fEq(,)_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fXA: // global
           I64[Sp - 16] = block_c2fXi_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fYa; else goto c2fXj;
       u2fYa: // global
           call _c2fXi(R1) args: 0, res: 0, upd: 0;
       c2fXj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_$s$fEq(,)_$c/=_info" {
     GHC.Arr.$fIx(,)_$s$fEq(,)_$c/=_info:
         const GHC.Arr.$fIx(,)_$s$fEq(,)_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2fXi() //  [R1]
         { []
         }
     {offset
       c2fXi: // global
           I64[Sp - 8] = block_c2fXo_info;
           _s2bpa::P64 = P64[R1 + 7];
           _s2bpb::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s2bpb::P64;
           P64[Sp + 8] = _s2bpa::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2fY9; else goto c2fXp;
       u2fY9: // global
           call _c2fXo(R1) args: 0, res: 0, upd: 0;
       c2fXp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fXi_info" {
     block_c2fXi_info:
         const _c2fXi;
         const 1;
         const 30;
 },
 _c2fXo() //  [R1]
         { []
         }
     {offset
       c2fXo: // global
           I64[Sp - 8] = block_c2fXt_info;
           _s2bpd::P64 = P64[R1 + 7];
           _s2bpe::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s2bpe::P64;
           P64[Sp + 16] = _s2bpd::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2fYb; else goto c2fXu;
       u2fYb: // global
           call _c2fXt(R1) args: 0, res: 0, upd: 0;
       c2fXu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fXo_info" {
     block_c2fXo_info:
         const _c2fXo;
         const 2;
         const 30;
 },
 _c2fXt() //  [R1]
         { []
         }
     {offset
       c2fXt: // global
           I64[Sp] = block_c2fXy_info;
           _s2bpg::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s2bpg::I64;
           if (R1 & 7 != 0) goto u2fYc; else goto c2fXE;
       u2fYc: // global
           call _c2fXy(R1) args: 0, res: 0, upd: 0;
       c2fXE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fXt_info" {
     block_c2fXt_info:
         const _c2fXt;
         const 3;
         const 30;
 },
 _c2fXy() //  [R1]
         { []
         }
     {offset
       c2fXy: // global
           if (I64[Sp + 24] == I64[R1 + 7]) goto c2fXV; else goto u2fY7;
       c2fXV: // global
           I64[Sp] = block_c2fXP_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u2fYd; else goto c2fXQ;
       u2fYd: // global
           call _c2fXP(R1) args: 0, res: 0, upd: 0;
       c2fXQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2fY7: // global
           Sp = Sp + 32;
           call _c2fY5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fXy_info" {
     block_c2fXy_info:
         const _c2fXy;
         const 259;
         const 30;
 },
 _c2fXP() //  [R1]
         { []
         }
     {offset
       c2fXP: // global
           I64[Sp + 16] = block_c2fXU_info;
           _s2bpl::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 24] = _s2bpl::I64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u2fYf; else goto c2fXX;
       u2fYf: // global
           call _c2fXU(R1) args: 0, res: 0, upd: 0;
       c2fXX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fXP_info" {
     block_c2fXP_info:
         const _c2fXP;
         const 387;
         const 30;
 },
 _c2fXU() //  [R1]
         { []
         }
     {offset
       c2fXU: // global
           if (I64[Sp + 8] == I64[R1 + 7]) goto c2fY6; else goto u2fY8;
       c2fY6: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u2fY8: // global
           Sp = Sp + 16;
           call _c2fY5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2fXU_info" {
     block_c2fXU_info:
         const _c2fXU;
         const 65;
         const 30;
 },
 _c2fY5() //  []
         { []
         }
     {offset
       c2fY5: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.086219164 UTC

[section ""data" . GHC.Arr.$fIx(,)_$s$fEq(,)_closure" {
     GHC.Arr.$fIx(,)_$s$fEq(,)_closure:
         const GHC.Classes.C:Eq_con_info;
         const lvl41_r1Xw4_closure+2;
         const GHC.Arr.$fIx(,)_$s$fEq(,)_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.088827812 UTC

[section ""data" . $wlvl12_r1Xw5_closure" {
     $wlvl12_r1Xw5_closure:
         const $wlvl12_r1Xw5_info;
 },
 $wlvl12_r1Xw5_slow() //  [R1]
         { []
         }
     {offset
       c2fZ0: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call $wlvl12_r1Xw5_entry(R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlvl12_r1Xw5_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2fZ9: // global
           if (%MO_S_Ge_W64(R2, R4)) goto c2fZ7; else goto c2fZ8;
       c2fZ7: // global
           if (R2 == R4) goto c2fZh; else goto c2fZg;
       c2fZh: // global
           _s2bpq::P64 = R3;
           R3 = R5;
           R2 = _s2bpq::P64;
           call GHC.Classes.compareInt_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2fZg: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2fZ8: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl12_r1Xw5_info" {
     $wlvl12_r1Xw5_info:
         const $wlvl12_r1Xw5_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 324;
         const $wlvl12_r1Xw5_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.094674004 UTC

[section ""data" . lvl42_r1Xw6_closure" {
     lvl42_r1Xw6_closure:
         const lvl42_r1Xw6_info;
 },
 lvl42_r1Xw6_entry() //  [R2, R3]
         { []
         }
     {offset
       c2fZz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2fZN; else goto c2fZO;
       c2fZN: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl42_r1Xw6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2fZO: // global
           I64[Sp - 16] = block_c2fZw_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2fZY; else goto c2fZx;
       u2fZY: // global
           call _c2fZw(R1) args: 0, res: 0, upd: 0;
       c2fZx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl42_r1Xw6_info" {
     lvl42_r1Xw6_info:
         const lvl42_r1Xw6_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2fZw() //  [R1]
         { []
         }
     {offset
       c2fZw: // global
           I64[Sp - 8] = block_c2fZC_info;
           _s2bpz::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bpz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2fZX; else goto c2fZD;
       u2fZX: // global
           call _c2fZC(R1) args: 0, res: 0, upd: 0;
       c2fZD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fZw_info" {
     block_c2fZw_info:
         const _c2fZw;
         const 1;
         const 30;
 },
 _c2fZC() //  [R1]
         { []
         }
     {offset
       c2fZC: // global
           I64[Sp] = block_c2fZH_info;
           _s2bpB::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2bpB::I64;
           if (R1 & 7 != 0) goto u2fZZ; else goto c2fZI;
       u2fZZ: // global
           call _c2fZH(R1) args: 0, res: 0, upd: 0;
       c2fZI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fZC_info" {
     block_c2fZC_info:
         const _c2fZC;
         const 2;
         const 30;
 },
 _c2fZH() //  [R1]
         { []
         }
     {offset
       c2fZH: // global
           I64[Sp - 8] = block_c2fZM_info;
           _s2bpE::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bpE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2g00; else goto c2fZS;
       u2g00: // global
           call _c2fZM(R1) args: 0, res: 0, upd: 0;
       c2fZS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fZH_info" {
     block_c2fZH_info:
         const _c2fZH;
         const 130;
         const 30;
 },
 _c2fZM() //  [R1]
         { []
         }
     {offset
       c2fZM: // global
           R5 = P64[Sp + 8];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = I64[Sp + 24];
           Sp = Sp + 32;
           call $wlvl12_r1Xw5_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2fZM_info" {
     block_c2fZM_info:
         const _c2fZM;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.104658115 UTC

[section ""data" . $wlvl13_r1Xw7_closure" {
     $wlvl13_r1Xw7_closure:
         const $wlvl13_r1Xw7_info;
 },
 $wlvl13_r1Xw7_slow() //  [R1]
         { []
         }
     {offset
       c2g0r: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call $wlvl13_r1Xw7_entry(R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlvl13_r1Xw7_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2g0A: // global
           if (%MO_S_Ge_W64(R2, R4)) goto c2g0y; else goto c2g0z;
       c2g0y: // global
           if (R2 == R4) goto c2g0I; else goto c2g0H;
       c2g0I: // global
           _s2bpI::P64 = R3;
           R3 = R5;
           R2 = _s2bpI::P64;
           call GHC.Classes.ltInt_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2g0H: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2g0z: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl13_r1Xw7_info" {
     $wlvl13_r1Xw7_info:
         const $wlvl13_r1Xw7_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 324;
         const $wlvl13_r1Xw7_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.111443028 UTC

[section ""data" . lvl43_r1Xw8_closure" {
     lvl43_r1Xw8_closure:
         const lvl43_r1Xw8_info;
 },
 lvl43_r1Xw8_entry() //  [R2, R3]
         { []
         }
     {offset
       c2g10: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2g1e; else goto c2g1f;
       c2g1e: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl43_r1Xw8_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2g1f: // global
           I64[Sp - 16] = block_c2g0X_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2g1p; else goto c2g0Y;
       u2g1p: // global
           call _c2g0X(R1) args: 0, res: 0, upd: 0;
       c2g0Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl43_r1Xw8_info" {
     lvl43_r1Xw8_info:
         const lvl43_r1Xw8_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2g0X() //  [R1]
         { []
         }
     {offset
       c2g0X: // global
           I64[Sp - 8] = block_c2g13_info;
           _s2bpR::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bpR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2g1o; else goto c2g14;
       u2g1o: // global
           call _c2g13(R1) args: 0, res: 0, upd: 0;
       c2g14: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g0X_info" {
     block_c2g0X_info:
         const _c2g0X;
         const 1;
         const 30;
 },
 _c2g13() //  [R1]
         { []
         }
     {offset
       c2g13: // global
           I64[Sp] = block_c2g18_info;
           _s2bpT::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2bpT::I64;
           if (R1 & 7 != 0) goto u2g1q; else goto c2g19;
       u2g1q: // global
           call _c2g18(R1) args: 0, res: 0, upd: 0;
       c2g19: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g13_info" {
     block_c2g13_info:
         const _c2g13;
         const 2;
         const 30;
 },
 _c2g18() //  [R1]
         { []
         }
     {offset
       c2g18: // global
           I64[Sp - 8] = block_c2g1d_info;
           _s2bpW::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bpW::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2g1r; else goto c2g1j;
       u2g1r: // global
           call _c2g1d(R1) args: 0, res: 0, upd: 0;
       c2g1j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g18_info" {
     block_c2g18_info:
         const _c2g18;
         const 130;
         const 30;
 },
 _c2g1d() //  [R1]
         { []
         }
     {offset
       c2g1d: // global
           R5 = P64[Sp + 8];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = I64[Sp + 24];
           Sp = Sp + 32;
           call $wlvl13_r1Xw7_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g1d_info" {
     block_c2g1d_info:
         const _c2g1d;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.122909339 UTC

[section ""data" . $wlvl14_r1Xw9_closure" {
     $wlvl14_r1Xw9_closure:
         const $wlvl14_r1Xw9_info;
 },
 $wlvl14_r1Xw9_slow() //  [R1]
         { []
         }
     {offset
       c2g1S: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call $wlvl14_r1Xw9_entry(R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlvl14_r1Xw9_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2g21: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2g22; else goto c2g23;
       c2g22: // global
           R1 = $wlvl14_r1Xw9_closure;
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c2g23: // global
           if (%MO_S_Ge_W64(R4, R2)) goto c2g1Z; else goto u2g2w;
       c2g1Z: // global
           if (R4 == R2) goto c2g2h; else goto u2g2v;
       c2g2h: // global
           I64[Sp - 16] = block_c2g2b_info;
           R1 = R5;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2g2x; else goto c2g2c;
       u2g2x: // global
           call _c2g2b(R1) args: 0, res: 0, upd: 0;
       c2g2c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2g2v: // global
           call _c2g2r() args: 0, res: 0, upd: 0;
       u2g2w: // global
           call _c2g20() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wlvl14_r1Xw9_info" {
     $wlvl14_r1Xw9_info:
         const $wlvl14_r1Xw9_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 324;
         const $wlvl14_r1Xw9_slow;
 },
 _c2g2b() //  [R1]
         { []
         }
     {offset
       c2g2b: // global
           I64[Sp] = block_c2g2g_info;
           _s2bq6::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2bq6::I64;
           if (R1 & 7 != 0) goto u2g2y; else goto c2g2j;
       u2g2y: // global
           call _c2g2g(R1) args: 0, res: 0, upd: 0;
       c2g2j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g2b_info" {
     block_c2g2b_info:
         const _c2g2b;
         const 1;
         const 30;
 },
 _c2g2g() //  [R1]
         { []
         }
     {offset
       c2g2g: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u2g2u; else goto u2g2t;
       u2g2u: // global
           Sp = Sp + 16;
           call _c2g2r() args: 0, res: 0, upd: 0;
       u2g2t: // global
           Sp = Sp + 16;
           call _c2g20() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2g2g_info" {
     block_c2g2g_info:
         const _c2g2g;
         const 65;
         const 30;
 },
 _c2g2r() //  []
         { []
         }
     {offset
       c2g2r: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2g20() //  []
         { []
         }
     {offset
       c2g20: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.133336401 UTC

[section ""data" . lvl44_r1Xwa_closure" {
     lvl44_r1Xwa_closure:
         const lvl44_r1Xwa_info;
 },
 lvl44_r1Xwa_entry() //  [R2, R3]
         { []
         }
     {offset
       c2g38: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2g3m; else goto c2g3n;
       c2g3m: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl44_r1Xwa_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2g3n: // global
           I64[Sp - 16] = block_c2g35_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2g3x; else goto c2g36;
       u2g3x: // global
           call _c2g35(R1) args: 0, res: 0, upd: 0;
       c2g36: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl44_r1Xwa_info" {
     lvl44_r1Xwa_info:
         const lvl44_r1Xwa_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2g35() //  [R1]
         { []
         }
     {offset
       c2g35: // global
           I64[Sp - 8] = block_c2g3b_info;
           _s2bqe::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bqe::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2g3w; else goto c2g3c;
       u2g3w: // global
           call _c2g3b(R1) args: 0, res: 0, upd: 0;
       c2g3c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g35_info" {
     block_c2g35_info:
         const _c2g35;
         const 1;
         const 30;
 },
 _c2g3b() //  [R1]
         { []
         }
     {offset
       c2g3b: // global
           I64[Sp] = block_c2g3g_info;
           _s2bqg::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2bqg::I64;
           if (R1 & 7 != 0) goto u2g3y; else goto c2g3h;
       u2g3y: // global
           call _c2g3g(R1) args: 0, res: 0, upd: 0;
       c2g3h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g3b_info" {
     block_c2g3b_info:
         const _c2g3b;
         const 2;
         const 30;
 },
 _c2g3g() //  [R1]
         { []
         }
     {offset
       c2g3g: // global
           I64[Sp - 8] = block_c2g3l_info;
           _s2bqj::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bqj::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2g3z; else goto c2g3r;
       u2g3z: // global
           call _c2g3l(R1) args: 0, res: 0, upd: 0;
       c2g3r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g3g_info" {
     block_c2g3g_info:
         const _c2g3g;
         const 130;
         const 30;
 },
 _c2g3l() //  [R1]
         { []
         }
     {offset
       c2g3l: // global
           R5 = P64[Sp + 8];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = I64[Sp + 24];
           Sp = Sp + 32;
           call $wlvl14_r1Xw9_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g3l_info" {
     block_c2g3l_info:
         const _c2g3l;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.144251329 UTC

[section ""data" . $wlvl15_r1Xwb_closure" {
     $wlvl15_r1Xwb_closure:
         const $wlvl15_r1Xwb_info;
 },
 $wlvl15_r1Xwb_slow() //  [R1]
         { []
         }
     {offset
       c2g40: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call $wlvl15_r1Xwb_entry(R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlvl15_r1Xwb_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2g49: // global
           if (%MO_S_Ge_W64(R4, R2)) goto c2g47; else goto c2g48;
       c2g47: // global
           if (R4 == R2) goto c2g4h; else goto c2g4g;
       c2g4h: // global
           R3 = R3;
           R2 = R5;
           call GHC.Classes.ltInt_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2g4g: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2g48: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl15_r1Xwb_info" {
     $wlvl15_r1Xwb_info:
         const $wlvl15_r1Xwb_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 324;
         const $wlvl15_r1Xwb_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.150087555 UTC

[section ""data" . lvl45_r1Xwc_closure" {
     lvl45_r1Xwc_closure:
         const lvl45_r1Xwc_info;
 },
 lvl45_r1Xwc_entry() //  [R2, R3]
         { []
         }
     {offset
       c2g4z: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2g4N; else goto c2g4O;
       c2g4N: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl45_r1Xwc_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2g4O: // global
           I64[Sp - 16] = block_c2g4w_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2g4Y; else goto c2g4x;
       u2g4Y: // global
           call _c2g4w(R1) args: 0, res: 0, upd: 0;
       c2g4x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl45_r1Xwc_info" {
     lvl45_r1Xwc_info:
         const lvl45_r1Xwc_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2g4w() //  [R1]
         { []
         }
     {offset
       c2g4w: // global
           I64[Sp - 8] = block_c2g4C_info;
           _s2bqw::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bqw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2g4X; else goto c2g4D;
       u2g4X: // global
           call _c2g4C(R1) args: 0, res: 0, upd: 0;
       c2g4D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g4w_info" {
     block_c2g4w_info:
         const _c2g4w;
         const 1;
         const 30;
 },
 _c2g4C() //  [R1]
         { []
         }
     {offset
       c2g4C: // global
           I64[Sp] = block_c2g4H_info;
           _s2bqy::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2bqy::I64;
           if (R1 & 7 != 0) goto u2g4Z; else goto c2g4I;
       u2g4Z: // global
           call _c2g4H(R1) args: 0, res: 0, upd: 0;
       c2g4I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g4C_info" {
     block_c2g4C_info:
         const _c2g4C;
         const 2;
         const 30;
 },
 _c2g4H() //  [R1]
         { []
         }
     {offset
       c2g4H: // global
           I64[Sp - 8] = block_c2g4M_info;
           _s2bqB::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bqB::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2g50; else goto c2g4S;
       u2g50: // global
           call _c2g4M(R1) args: 0, res: 0, upd: 0;
       c2g4S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g4H_info" {
     block_c2g4H_info:
         const _c2g4H;
         const 130;
         const 30;
 },
 _c2g4M() //  [R1]
         { []
         }
     {offset
       c2g4M: // global
           R5 = P64[Sp + 8];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = I64[Sp + 24];
           Sp = Sp + 32;
           call $wlvl15_r1Xwb_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g4M_info" {
     block_c2g4M_info:
         const _c2g4M;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.161297346 UTC

[section ""data" . $wlvl16_r1Xwd_closure" {
     $wlvl16_r1Xwd_closure:
         const $wlvl16_r1Xwd_info;
 },
 $wlvl16_r1Xwd_slow() //  [R1]
         { []
         }
     {offset
       c2g5r: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call $wlvl16_r1Xwd_entry(R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 $wlvl16_r1Xwd_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2g5A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2g5B; else goto c2g5C;
       c2g5B: // global
           R1 = $wlvl16_r1Xwd_closure;
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c2g5C: // global
           if (%MO_S_Ge_W64(R2, R4)) goto c2g5y; else goto u2g65;
       c2g5y: // global
           if (R2 == R4) goto c2g5Q; else goto u2g64;
       c2g5Q: // global
           I64[Sp - 16] = block_c2g5K_info;
           R1 = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2g66; else goto c2g5L;
       u2g66: // global
           call _c2g5K(R1) args: 0, res: 0, upd: 0;
       c2g5L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2g64: // global
           call _c2g60() args: 0, res: 0, upd: 0;
       u2g65: // global
           call _c2g5z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wlvl16_r1Xwd_info" {
     $wlvl16_r1Xwd_info:
         const $wlvl16_r1Xwd_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 324;
         const $wlvl16_r1Xwd_slow;
 },
 _c2g5K() //  [R1]
         { []
         }
     {offset
       c2g5K: // global
           I64[Sp] = block_c2g5P_info;
           _s2bqL::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2bqL::I64;
           if (R1 & 7 != 0) goto u2g67; else goto c2g5S;
       u2g67: // global
           call _c2g5P(R1) args: 0, res: 0, upd: 0;
       c2g5S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g5K_info" {
     block_c2g5K_info:
         const _c2g5K;
         const 1;
         const 30;
 },
 _c2g5P() //  [R1]
         { []
         }
     {offset
       c2g5P: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u2g63; else goto u2g62;
       u2g63: // global
           Sp = Sp + 16;
           call _c2g60() args: 0, res: 0, upd: 0;
       u2g62: // global
           Sp = Sp + 16;
           call _c2g5z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2g5P_info" {
     block_c2g5P_info:
         const _c2g5P;
         const 65;
         const 30;
 },
 _c2g60() //  []
         { []
         }
     {offset
       c2g60: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2g5z() //  []
         { []
         }
     {offset
       c2g5z: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.17218444 UTC

[section ""data" . lvl46_r1Xwe_closure" {
     lvl46_r1Xwe_closure:
         const lvl46_r1Xwe_info;
 },
 lvl46_r1Xwe_entry() //  [R2, R3]
         { []
         }
     {offset
       c2g6H: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2g6V; else goto c2g6W;
       c2g6V: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl46_r1Xwe_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2g6W: // global
           I64[Sp - 16] = block_c2g6E_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2g76; else goto c2g6F;
       u2g76: // global
           call _c2g6E(R1) args: 0, res: 0, upd: 0;
       c2g6F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl46_r1Xwe_info" {
     lvl46_r1Xwe_info:
         const lvl46_r1Xwe_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2g6E() //  [R1]
         { []
         }
     {offset
       c2g6E: // global
           I64[Sp - 8] = block_c2g6K_info;
           _s2bqT::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bqT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2g75; else goto c2g6L;
       u2g75: // global
           call _c2g6K(R1) args: 0, res: 0, upd: 0;
       c2g6L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g6E_info" {
     block_c2g6E_info:
         const _c2g6E;
         const 1;
         const 30;
 },
 _c2g6K() //  [R1]
         { []
         }
     {offset
       c2g6K: // global
           I64[Sp] = block_c2g6P_info;
           _s2bqV::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2bqV::I64;
           if (R1 & 7 != 0) goto u2g77; else goto c2g6Q;
       u2g77: // global
           call _c2g6P(R1) args: 0, res: 0, upd: 0;
       c2g6Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g6K_info" {
     block_c2g6K_info:
         const _c2g6K;
         const 2;
         const 30;
 },
 _c2g6P() //  [R1]
         { []
         }
     {offset
       c2g6P: // global
           I64[Sp - 8] = block_c2g6U_info;
           _s2bqY::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2bqY::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2g78; else goto c2g70;
       u2g78: // global
           call _c2g6U(R1) args: 0, res: 0, upd: 0;
       c2g70: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g6P_info" {
     block_c2g6P_info:
         const _c2g6P;
         const 130;
         const 30;
 },
 _c2g6U() //  [R1]
         { []
         }
     {offset
       c2g6U: // global
           R5 = P64[Sp + 8];
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = I64[Sp + 24];
           Sp = Sp + 32;
           call $wlvl16_r1Xwd_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g6U_info" {
     block_c2g6U_info:
         const _c2g6U;
         const 259;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.18419573 UTC

[section ""data" . lvl47_r1Xwf_closure" {
     lvl47_r1Xwf_closure:
         const lvl47_r1Xwf_info;
 },
 lvl47_r1Xwf_entry() //  [R2, R3]
         { []
         }
     {offset
       c2g7F: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2g7T; else goto c2g7U;
       c2g7T: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl47_r1Xwf_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2g7U: // global
           I64[Sp - 16] = block_c2g7C_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2g8C; else goto c2g7D;
       u2g8C: // global
           call _c2g7C(R1) args: 0, res: 0, upd: 0;
       c2g7D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl47_r1Xwf_info" {
     lvl47_r1Xwf_info:
         const lvl47_r1Xwf_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2g7C() //  [R1]
         { []
         }
     {offset
       c2g7C: // global
           I64[Sp - 16] = block_c2g7I_info;
           _s2br3::P64 = R1;
           _s2br5::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2br5::P64;
           P64[Sp] = _s2br3::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2g8B; else goto c2g7J;
       u2g8B: // global
           call _c2g7I(R1) args: 0, res: 0, upd: 0;
       c2g7J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g7C_info" {
     block_c2g7C_info:
         const _c2g7C;
         const 1;
         const 30;
 },
 _c2g7I() //  [R1]
         { []
         }
     {offset
       c2g7I: // global
           I64[Sp] = block_c2g7N_info;
           _s2br7::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s2br7::I64;
           if (R1 & 7 != 0) goto u2g8D; else goto c2g7O;
       u2g8D: // global
           call _c2g7N(R1) args: 0, res: 0, upd: 0;
       c2g7O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g7I_info" {
     block_c2g7I_info:
         const _c2g7I;
         const 3;
         const 30;
 },
 _c2g7N() //  [R1]
         { []
         }
     {offset
       c2g7N: // global
           I64[Sp - 16] = block_c2g7S_info;
           _s2br8::P64 = R1;
           _s2bra::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2bra::P64;
           P64[Sp] = _s2br8::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2g8E; else goto c2g7Y;
       u2g8E: // global
           call _c2g7S(R1) args: 0, res: 0, upd: 0;
       c2g7Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g7N_info" {
     block_c2g7N_info:
         const _c2g7N;
         const 259;
         const 30;
 },
 _c2g7S() //  [R1]
         { []
         }
     {offset
       c2g7S: // global
           _s2br7::I64 = I64[Sp + 40];
           _s2brc::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s2brc::I64,
                            _s2br7::I64)) goto c2g8v; else goto u2g8x;
       c2g8v: // global
           if (_s2brc::I64 == _s2br7::I64) goto c2g8i; else goto u2g8y;
       c2g8i: // global
           _s2bra::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2g8c_info;
           R1 = _s2bra::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2g8F; else goto c2g8d;
       u2g8F: // global
           call _c2g8c(R1) args: 0, res: 0, upd: 0;
       c2g8d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2g8y: // global
           Sp = Sp + 16;
           call _c2g8s() args: 0, res: 0, upd: 0;
       u2g8x: // global
           Sp = Sp + 32;
           call _c2g8w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2g7S_info" {
     block_c2g7S_info:
         const _c2g7S;
         const 1029;
         const 30;
 },
 _c2g8c() //  [R1]
         { []
         }
     {offset
       c2g8c: // global
           I64[Sp] = block_c2g8h_info;
           _s2brg::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 32] = _s2brg::I64;
           if (R1 & 7 != 0) goto u2g8I; else goto c2g8k;
       u2g8I: // global
           call _c2g8h(R1) args: 0, res: 0, upd: 0;
       c2g8k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g8c_info" {
     block_c2g8c_info:
         const _c2g8c;
         const 516;
         const 30;
 },
 _c2g8h() //  [R1]
         { []
         }
     {offset
       c2g8h: // global
           if (%MO_S_Ge_W64(I64[Sp + 32],
                            I64[R1 + 7])) goto u2g8A; else goto u2g8z;
       u2g8A: // global
           Sp = Sp + 8;
           call _c2g8s() args: 0, res: 0, upd: 0;
       u2g8z: // global
           Sp = Sp + 24;
           call _c2g8w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2g8h_info" {
     block_c2g8h_info:
         const _c2g8h;
         const 644;
         const 30;
 },
 _c2g8s() //  []
         { []
         }
     {offset
       c2g8s: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2g8w() //  []
         { []
         }
     {offset
       c2g8w: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.201864758 UTC

[section ""data" . lvl48_r1Xwg_closure" {
     lvl48_r1Xwg_closure:
         const lvl48_r1Xwg_info;
 },
 lvl48_r1Xwg_entry() //  [R2, R3]
         { []
         }
     {offset
       c2g9A: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2g9O; else goto c2g9P;
       c2g9O: // global
           R3 = R3;
           R2 = R2;
           R1 = lvl48_r1Xwg_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2g9P: // global
           I64[Sp - 16] = block_c2g9x_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2gax; else goto c2g9y;
       u2gax: // global
           call _c2g9x(R1) args: 0, res: 0, upd: 0;
       c2g9y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl48_r1Xwg_info" {
     lvl48_r1Xwg_info:
         const lvl48_r1Xwg_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c2g9x() //  [R1]
         { []
         }
     {offset
       c2g9x: // global
           I64[Sp - 16] = block_c2g9D_info;
           _s2brm::P64 = R1;
           _s2bro::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2bro::P64;
           P64[Sp] = _s2brm::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2gaw; else goto c2g9E;
       u2gaw: // global
           call _c2g9D(R1) args: 0, res: 0, upd: 0;
       c2g9E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g9x_info" {
     block_c2g9x_info:
         const _c2g9x;
         const 1;
         const 30;
 },
 _c2g9D() //  [R1]
         { []
         }
     {offset
       c2g9D: // global
           I64[Sp] = block_c2g9I_info;
           _s2brq::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _s2brq::I64;
           if (R1 & 7 != 0) goto u2gay; else goto c2g9J;
       u2gay: // global
           call _c2g9I(R1) args: 0, res: 0, upd: 0;
       c2g9J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g9D_info" {
     block_c2g9D_info:
         const _c2g9D;
         const 3;
         const 30;
 },
 _c2g9I() //  [R1]
         { []
         }
     {offset
       c2g9I: // global
           I64[Sp - 16] = block_c2g9N_info;
           _s2brr::P64 = R1;
           _s2brt::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _s2brt::P64;
           P64[Sp] = _s2brr::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2gaz; else goto c2g9T;
       u2gaz: // global
           call _c2g9N(R1) args: 0, res: 0, upd: 0;
       c2g9T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2g9I_info" {
     block_c2g9I_info:
         const _c2g9I;
         const 259;
         const 30;
 },
 _c2g9N() //  [R1]
         { []
         }
     {offset
       c2g9N: // global
           _s2brq::I64 = I64[Sp + 40];
           _s2brv::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s2brv::I64,
                            _s2brq::I64)) goto c2gaq; else goto u2gas;
       c2gaq: // global
           if (_s2brv::I64 == _s2brq::I64) goto c2gad; else goto u2gat;
       c2gad: // global
           _s2brt::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2ga7_info;
           R1 = _s2brt::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u2gaA; else goto c2ga8;
       u2gaA: // global
           call _c2ga7(R1) args: 0, res: 0, upd: 0;
       c2ga8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u2gat: // global
           Sp = Sp + 32;
           call _c2gan() args: 0, res: 0, upd: 0;
       u2gas: // global
           Sp = Sp + 16;
           call _c2gar() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2g9N_info" {
     block_c2g9N_info:
         const _c2g9N;
         const 1029;
         const 30;
 },
 _c2ga7() //  [R1]
         { []
         }
     {offset
       c2ga7: // global
           I64[Sp] = block_c2gac_info;
           _s2brz::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 32] = _s2brz::I64;
           if (R1 & 7 != 0) goto u2gaD; else goto c2gaf;
       u2gaD: // global
           call _c2gac(R1) args: 0, res: 0, upd: 0;
       c2gaf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ga7_info" {
     block_c2ga7_info:
         const _c2ga7;
         const 516;
         const 30;
 },
 _c2gac() //  [R1]
         { []
         }
     {offset
       c2gac: // global
           if (%MO_S_Ge_W64(I64[Sp + 32],
                            I64[R1 + 7])) goto u2gav; else goto u2gau;
       u2gav: // global
           Sp = Sp + 24;
           call _c2gan() args: 0, res: 0, upd: 0;
       u2gau: // global
           Sp = Sp + 8;
           call _c2gar() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2gac_info" {
     block_c2gac_info:
         const _c2gac;
         const 644;
         const 30;
 },
 _c2gan() //  []
         { []
         }
     {offset
       c2gan: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2gar() //  []
         { []
         }
     {offset
       c2gar: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.216060193 UTC

[section ""data" . GHC.Arr.$fIx(,)_$s$fOrd(,)_closure" {
     GHC.Arr.$fIx(,)_$s$fOrd(,)_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Arr.$fIx(,)_$s$fEq(,)_closure+1;
         const lvl42_r1Xw6_closure+2;
         const lvl43_r1Xw8_closure+2;
         const lvl44_r1Xwa_closure+2;
         const lvl45_r1Xwc_closure+2;
         const lvl46_r1Xwe_closure+2;
         const lvl47_r1Xwf_closure+2;
         const lvl48_r1Xwg_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.217937178 UTC

[section ""data" . GHC.Arr.$fIx(,)_$s$fIx(,)_closure" {
     GHC.Arr.$fIx(,)_$s$fIx(,)_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Arr.$fIx(,)_$s$fOrd(,)_closure+1;
         const GHC.Arr.$fIx(,)_$s$crange_closure+1;
         const GHC.Arr.$fIx(,)_$s$cindex_closure+2;
         const GHC.Arr.$fIx(,)_$s$cunsafeIndex_closure+2;
         const GHC.Arr.$fIx(,)_$s$cinRange_closure+2;
         const GHC.Arr.$fIx(,)_$s$crangeSize_closure+1;
         const GHC.Arr.$fIx(,)_$s$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.223615538 UTC

[section ""data" . GHC.Arr.$fIx(,)_closure" {
     GHC.Arr.$fIx(,)_closure:
         const GHC.Arr.$fIx(,)_info;
         const 0;
 },
 sat_s2brL_entry() //  [R1, R2]
         { []
         }
     {offset
       c2gbz: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$fIx(,)_$cunsafeRangeSize_entry(R4,
                                                        R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2brL_info" {
     sat_s2brL_info:
         const sat_s2brL_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s2brK_entry() //  [R1, R2]
         { []
         }
     {offset
       c2gbH: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$fIx(,)_$crangeSize_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2brK_info" {
     sat_s2brK_info:
         const sat_s2brK_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s2brJ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2gbP: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fIx(,)_$cinRange_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2brJ_info" {
     sat_s2brJ_info:
         const sat_s2brJ_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_s2brI_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2gbX: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fIx(,)_$cunsafeIndex_entry(R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2brI_info" {
     sat_s2brI_info:
         const sat_s2brI_entry;
         const 2;
         const 11;
         const 8589934607;
 },
 sat_s2brH_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2gc5: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fIx(,)_$cindex_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2brH_info" {
     sat_s2brH_info:
         const sat_s2brH_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S2bMd_srt+592;
 },
 sat_s2brG_entry() //  [R1, R2]
         { []
         }
     {offset
       c2gcd: // global
           R4 = R2;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$fIx(,)_$crange_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2brG_info" {
     sat_s2brG_info:
         const sat_s2brG_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 sat_s2brF_entry() //  [R1]
         { []
         }
     {offset
       c2gck: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2gcl; else goto c2gcm;
       c2gcl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gcm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$fIx(,)_$cp1Ix_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2brF_info" {
     sat_s2brF_info:
         const sat_s2brF_entry;
         const 2;
         const 18;
 },
 GHC.Arr.$fIx(,)_entry() //  [R2, R3]
         { []
         }
     {offset
       c2gco: // global
           Hp = Hp + 240;
           if (Hp > HpLim) (likely: False) goto c2gcs; else goto c2gcr;
       c2gcs: // global
           HpAlloc = 240;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fIx(,)_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2gcr: // global
           I64[Hp - 232] = sat_s2brL_info;
           P64[Hp - 224] = R2;
           P64[Hp - 216] = R3;
           I64[Hp - 208] = sat_s2brK_info;
           P64[Hp - 200] = R2;
           P64[Hp - 192] = R3;
           I64[Hp - 184] = sat_s2brJ_info;
           P64[Hp - 176] = R2;
           P64[Hp - 168] = R3;
           I64[Hp - 160] = sat_s2brI_info;
           P64[Hp - 152] = R2;
           P64[Hp - 144] = R3;
           I64[Hp - 136] = sat_s2brH_info;
           P64[Hp - 128] = R2;
           P64[Hp - 120] = R3;
           I64[Hp - 112] = sat_s2brG_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           I64[Hp - 88] = sat_s2brF_info;
           P64[Hp - 72] = R2;
           P64[Hp - 64] = R3;
           I64[Hp - 56] = GHC.Arr.C:Ix_con_info;
           P64[Hp - 48] = Hp - 88;
           P64[Hp - 40] = Hp - 111;
           P64[Hp - 32] = Hp - 134;
           P64[Hp - 24] = Hp - 158;
           P64[Hp - 16] = Hp - 182;
           P64[Hp - 8] = Hp - 207;
           P64[Hp] = Hp - 231;
           R1 = Hp - 55;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fIx(,)_info" {
     GHC.Arr.$fIx(,)_info:
         const GHC.Arr.$fIx(,)_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S2bMd_srt+592;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.239285714 UTC

[section ""data" . GHC.Arr.safeIndex_closure" {
     GHC.Arr.safeIndex_closure:
         const GHC.Arr.safeIndex_info;
         const 0;
 },
 GHC.Arr.safeIndex_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2gdh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2gdq; else goto c2gdr;
       c2gdq: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.safeIndex_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2gdr: // global
           I64[Sp - 32] = block_c2gde_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2gdL; else goto c2gdf;
       u2gdL: // global
           call _c2gde(R1) args: 0, res: 0, upd: 0;
       c2gdf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.safeIndex_info" {
     GHC.Arr.safeIndex_info:
         const GHC.Arr.safeIndex_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S2bMd_srt+608;
 },
 _c2gde() //  [R1]
         { []
         }
     {offset
       c2gde: // global
           I64[Sp] = block_c2gdk_info;
           _s2brQ::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s2brQ::P64;
           if (R1 & 7 != 0) goto u2gdK; else goto c2gdl;
       u2gdK: // global
           call _c2gdk(R1) args: 0, res: 0, upd: 0;
       c2gdl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gde_info" {
     block_c2gde_info:
         const _c2gde;
         const 3;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2gdk() //  [R1]
         { []
         }
     {offset
       c2gdk: // global
           _s2brQ::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c2gdp_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_pp_info;
           P64[Sp] = _s2brQ::P64;
           P64[Sp + 8] = P64[Sp + 24];
           I64[Sp + 24] = I64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gdk_info" {
     block_c2gdk_info:
         const _c2gdk;
         const 3;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2gdp() //  [R1]
         { []
         }
     {offset
       c2gdp: // global
           _s2brU::I64 = I64[Sp + 8];
           _s2brW::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2brW::I64)) goto c2gdH; else goto c2gdJ;
       c2gdJ: // global
           if (%MO_S_Ge_W64(_s2brW::I64,
                            _s2brU::I64)) goto c2gdH; else goto c2gdI;
       c2gdH: // global
           R3 = _s2brU::I64;
           R2 = _s2brW::I64;
           Sp = Sp + 16;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2gdI: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gdp_info" {
     block_c2gdp_info:
         const _c2gdp;
         const 65;
         const 4294967326;
         const S2bMd_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.249880695 UTC

[section ""data" . $wreadSTArray_r1Xwh_closure" {
     $wreadSTArray_r1Xwh_closure:
         const $wreadSTArray_r1Xwh_info;
         const 0;
 },
 $wreadSTArray_r1Xwh_slow() //  [R1]
         { []
         }
     {offset
       c2geb: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call $wreadSTArray_r1Xwh_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2,
                                          R1) args: 16, res: 0, upd: 8;
     }
 },
 $wreadSTArray_r1Xwh_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2gei: // global
           _s2bs3::P64 = R6;
           _s2bs2::I64 = R5;
           _s2bs1::P64 = R4;
           _s2bs0::P64 = R3;
           _s2brZ::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c2gej; else goto c2gek;
       c2gek: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2gem; else goto c2gel;
       c2gem: // global
           HpAlloc = 24;
           goto c2gej;
       c2gej: // global
           R1 = $wreadSTArray_r1Xwh_closure;
           P64[Sp - 40] = _s2brZ::P64;
           P64[Sp - 32] = _s2bs0::P64;
           P64[Sp - 24] = _s2bs1::P64;
           I64[Sp - 16] = _s2bs2::I64;
           P64[Sp - 8] = _s2bs3::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       c2gel: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2bs0::P64;
           P64[Hp] = _s2bs1::P64;
           I64[Sp - 16] = block_c2geg_info;
           R2 = _s2brZ::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 15;
           P64[Sp - 24] = P64[Sp];
           P64[Sp - 8] = _s2bs3::P64;
           I64[Sp] = _s2bs2::I64;
           Sp = Sp - 40;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wreadSTArray_r1Xwh_info" {
     $wreadSTArray_r1Xwh_info:
         const $wreadSTArray_r1Xwh_entry;
         const 0;
         const 12884901902;
         const 30064771072;
         const S2bMd_srt+616;
         const 518;
         const $wreadSTArray_r1Xwh_slow;
 },
 _c2geg() //  [R1]
         { []
         }
     {offset
       c2geg: // global
           _s2bs2::I64 = I64[Sp + 16];
           _s2bs8::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2bs8::I64)) goto c2gez; else goto c2geE;
       c2geE: // global
           if (%MO_S_Ge_W64(_s2bs8::I64,
                            _s2bs2::I64)) goto c2gez; else goto c2geD;
       c2gez: // global
           R3 = _s2bs2::I64;
           R2 = _s2bs8::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2geD: // global
           R1 = P64[P64[Sp + 8] + ((_s2bs8::I64 << 3) + 24)];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2geg_info" {
     block_c2geg_info:
         const _c2geg;
         const 130;
         const 4294967326;
         const S2bMd_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.257295716 UTC

[section ""data" . readSTArray1_r1Xwi_closure" {
     readSTArray1_r1Xwi_closure:
         const readSTArray1_r1Xwi_info;
         const 0;
 },
 readSTArray1_r1Xwi_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2gf3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2gf4; else goto c2gf5;
       c2gf4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = readSTArray1_r1Xwi_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2gf5: // global
           I64[Sp - 24] = block_c2gf0_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2gf9; else goto c2gf1;
       u2gf9: // global
           call _c2gf0(R1) args: 0, res: 0, upd: 0;
       c2gf1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . readSTArray1_r1Xwi_info" {
     readSTArray1_r1Xwi_info:
         const readSTArray1_r1Xwi_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const S2bMd_srt+624;
 },
 _c2gf0() //  [R1]
         { []
         }
     {offset
       c2gf0: // global
           R6 = P64[R1 + 23];
           R5 = I64[R1 + 31];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wreadSTArray_r1Xwh_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gf0_info" {
     block_c2gf0_info:
         const _c2gf0;
         const 2;
         const 4294967326;
         const S2bMd_srt+624;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.262292427 UTC

[section ""data" . GHC.Arr.readSTArray_closure" {
     GHC.Arr.readSTArray_closure:
         const GHC.Arr.readSTArray_info;
         const 0;
 },
 GHC.Arr.readSTArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2gfo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call readSTArray1_r1Xwi_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.readSTArray_info" {
     GHC.Arr.readSTArray_info:
         const GHC.Arr.readSTArray_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S2bMd_srt+632;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.267045498 UTC

[section ""data" . $wwriteSTArray_r1Xwj_closure" {
     $wwriteSTArray_r1Xwj_closure:
         const $wwriteSTArray_r1Xwj_info;
         const 0;
 },
 $wwriteSTArray_r1Xwj_slow() //  [R1]
         { []
         }
     {offset
       c2gfw: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call $wwriteSTArray_r1Xwj_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2,
                                           R1) args: 24, res: 0, upd: 8;
     }
 },
 $wwriteSTArray_r1Xwj_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2gfD: // global
           _s2bsq::P64 = R6;
           _s2bsp::I64 = R5;
           _s2bso::P64 = R4;
           _s2bsn::P64 = R3;
           _s2bsm::P64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto c2gfE; else goto c2gfF;
       c2gfF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2gfH; else goto c2gfG;
       c2gfH: // global
           HpAlloc = 24;
           goto c2gfE;
       c2gfE: // global
           R1 = $wwriteSTArray_r1Xwj_closure;
           P64[Sp - 40] = _s2bsm::P64;
           P64[Sp - 32] = _s2bsn::P64;
           P64[Sp - 24] = _s2bso::P64;
           I64[Sp - 16] = _s2bsp::I64;
           P64[Sp - 8] = _s2bsq::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c2gfG: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2bsn::P64;
           P64[Hp] = _s2bso::P64;
           I64[Sp - 16] = block_c2gfB_info;
           R2 = _s2bsm::P64;
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = Hp - 15;
           P64[Sp - 24] = P64[Sp];
           P64[Sp - 8] = _s2bsq::P64;
           I64[Sp] = _s2bsp::I64;
           Sp = Sp - 40;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wwriteSTArray_r1Xwj_info" {
     $wwriteSTArray_r1Xwj_info:
         const $wwriteSTArray_r1Xwj_entry;
         const 0;
         const 38654705678;
         const 34359738368;
         const S2bMd_srt+616;
         const 519;
         const $wwriteSTArray_r1Xwj_slow;
 },
 _c2gfB() //  [R1]
         { []
         }
     {offset
       c2gfB: // global
           _s2bsp::I64 = I64[Sp + 16];
           _s2bsw::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2bsw::I64)) goto c2gfU; else goto c2gfW;
       c2gfW: // global
           if (%MO_S_Ge_W64(_s2bsw::I64,
                            _s2bsp::I64)) goto c2gfU; else goto c2gfV;
       c2gfU: // global
           R3 = _s2bsp::I64;
           R2 = _s2bsw::I64;
           Sp = Sp + 32;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2gfV: // global
           _s2bsq::P64 = P64[Sp + 8];
           _s2bss::P64 = P64[Sp + 24];
           call MO_WriteBarrier();
           P64[(_s2bsq::P64 + 24) + (_s2bsw::I64 << 3)] = _s2bss::P64;
           I64[_s2bsq::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2bsq::P64 + 24) + ((I64[_s2bsq::P64 + 8] << 3) + (_s2bsw::I64 >> 7))] = 1 :: W8;
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gfB_info" {
     block_c2gfB_info:
         const _c2gfB;
         const 131;
         const 4294967326;
         const S2bMd_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.274867566 UTC

[section ""data" . writeSTArray1_r1Xwk_closure" {
     writeSTArray1_r1Xwk_closure:
         const writeSTArray1_r1Xwk_info;
         const 0;
 },
 writeSTArray1_r1Xwk_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2ggq: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2ggr; else goto c2ggs;
       c2ggr: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = writeSTArray1_r1Xwk_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2ggs: // global
           I64[Sp - 32] = block_c2ggn_info;
           R1 = R3;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2ggw; else goto c2ggo;
       u2ggw: // global
           call _c2ggn(R1) args: 0, res: 0, upd: 0;
       c2ggo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . writeSTArray1_r1Xwk_info" {
     writeSTArray1_r1Xwk_info:
         const writeSTArray1_r1Xwk_entry;
         const 0;
         const 12884901902;
         const 21474836504;
         const S2bMd_srt+640;
 },
 _c2ggn() //  [R1]
         { []
         }
     {offset
       c2ggn: // global
           R6 = P64[R1 + 23];
           R5 = I64[R1 + 31];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wwriteSTArray_r1Xwj_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ggn_info" {
     block_c2ggn_info:
         const _c2ggn;
         const 3;
         const 4294967326;
         const S2bMd_srt+640;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.280756344 UTC

[section ""data" . GHC.Arr.writeSTArray_closure" {
     GHC.Arr.writeSTArray_closure:
         const GHC.Arr.writeSTArray_info;
         const 0;
 },
 GHC.Arr.writeSTArray_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2ggL: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call writeSTArray1_r1Xwk_entry(R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.writeSTArray_info" {
     GHC.Arr.writeSTArray_info:
         const GHC.Arr.writeSTArray_entry;
         const 0;
         const 4294967310;
         const 21474836504;
         const S2bMd_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.28570366 UTC

[section ""data" . GHC.Arr.!_closure" {
     GHC.Arr.!_closure:
         const GHC.Arr.!_info;
         const 0;
 },
 GHC.Arr.!_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2ggZ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2gh4; else goto c2gh5;
       c2gh4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.!_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2gh5: // global
           I64[Sp - 24] = block_c2ggW_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2ghp; else goto c2ggX;
       u2ghp: // global
           call _c2ggW(R1) args: 0, res: 0, upd: 0;
       c2ggX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.!_info" {
     GHC.Arr.!_info:
         const GHC.Arr.!_entry;
         const 0;
         const 141733920782;
         const 12884901911;
         const S2bMd_srt+616;
 },
 _c2ggW() //  [R1]
         { []
         }
     {offset
       c2ggW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2gh8; else goto c2gh7;
       c2gh8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2gh7: // global
           _s2bsQ::P64 = P64[R1 + 7];
           _s2bsR::P64 = P64[R1 + 15];
           _s2bsT::P64 = P64[R1 + 23];
           _s2bsS::I64 = I64[R1 + 31];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2bsQ::P64;
           P64[Hp] = _s2bsR::P64;
           I64[Sp] = block_c2gh3_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pp_info;
           P64[Sp - 16] = Hp - 15;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp + 8] = _s2bsT::P64;
           I64[Sp + 16] = _s2bsS::I64;
           Sp = Sp - 24;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ggW_info" {
     block_c2ggW_info:
         const _c2ggW;
         const 2;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2gh3() //  [R1]
         { []
         }
     {offset
       c2gh3: // global
           _s2bsS::I64 = I64[Sp + 16];
           _s2bsW::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2bsW::I64)) goto c2ghm; else goto c2gho;
       c2gho: // global
           if (%MO_S_Ge_W64(_s2bsW::I64,
                            _s2bsS::I64)) goto c2ghm; else goto c2ghn;
       c2ghm: // global
           R3 = _s2bsS::I64;
           R2 = _s2bsW::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2ghn: // global
           R1 = P64[P64[Sp + 8] + ((_s2bsW::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gh3_info" {
     block_c2gh3_info:
         const _c2gh3;
         const 130;
         const 4294967326;
         const S2bMd_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.296395409 UTC

[section ""data" . GHC.Arr.assocs_closure" {
     GHC.Arr.assocs_closure:
         const GHC.Arr.assocs_info;
         const 0;
 },
 sat_s2bto_entry() //  [R1]
         { []
         }
     {offset
       c2gib: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2gic; else goto c2gid;
       c2gic: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gid: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c2gi9_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bto_info" {
     sat_s2bto_info:
         const sat_s2bto_entry;
         const 4294967300;
         const 4294967311;
         const S2bMd_srt+616;
 },
 _c2gi9() //  [R1]
         { []
         }
     {offset
       c2gi9: // global
           _s2bt8::I64 = I64[Sp + 8];
           _s2bth::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2bth::I64)) goto c2giq; else goto c2gis;
       c2gis: // global
           if (%MO_S_Ge_W64(_s2bth::I64,
                            _s2bt8::I64)) goto c2giq; else goto c2gir;
       c2giq: // global
           R3 = _s2bt8::I64;
           R2 = _s2bth::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2gir: // global
           R1 = P64[P64[Sp + 16] + ((_s2bth::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2gi9_info" {
     block_c2gi9_info:
         const _c2gi9;
         const 66;
         const 4294967326;
         const S2bMd_srt+616;
 },
 go_s2btb_entry() //  [R1, R2]
         { []
         }
     {offset
       c2gix: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2giy; else goto c2giz;
       c2giy: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2giz: // global
           I64[Sp - 48] = block_c2ghY_info;
           _s2btb::P64 = R1;
           _s2bt3::P64 = P64[R1 + 7];
           _s2bt9::P64 = P64[R1 + 15];
           _s2bta::P64 = P64[R1 + 23];
           _s2bt8::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s2bt3::P64;
           I64[Sp - 32] = _s2bt8::I64;
           P64[Sp - 24] = _s2bt9::P64;
           P64[Sp - 16] = _s2bta::P64;
           P64[Sp - 8] = _s2btb::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2giH; else goto c2ghZ;
       u2giH: // global
           call _c2ghY(R1) args: 0, res: 0, upd: 0;
       c2ghZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s2btb_info" {
     go_s2btb_info:
         const go_s2btb_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S2bMd_srt+616;
 },
 _c2ghY() //  [R1]
         { []
         }
     {offset
       c2ghY: // global
           if (R1 & 7 == 1) goto c2giu; else goto c2giv;
       c2giu: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2giv: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c2giG; else goto c2giF;
       c2giG: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2giF: // global
           _s2bte::P64 = P64[R1 + 6];
           _s2btf::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s2btf::P64;
           I64[Hp - 96] = sat_s2bto_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s2bte::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s2bte::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ghY_info" {
     block_c2ghY_info:
         const _c2ghY;
         const 133;
         const 4294967326;
         const S2bMd_srt+616;
 },
 GHC.Arr.assocs_entry() //  [R2, R3]
         { []
         }
     {offset
       c2giI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2giK; else goto c2giL;
       c2giK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.assocs_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2giL: // global
           I64[Sp - 16] = block_c2ghN_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2giT; else goto c2ghO;
       u2giT: // global
           call _c2ghN(R1) args: 0, res: 0, upd: 0;
       c2ghO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.assocs_info" {
     GHC.Arr.assocs_info:
         const GHC.Arr.assocs_entry;
         const 0;
         const 279172874254;
         const 8589934607;
         const S2bMd_srt+616;
 },
 _c2ghN() //  [R1]
         { []
         }
     {offset
       c2ghN: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c2giO; else goto c2giN;
       c2giO: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2giN: // global
           _s2bt6::P64 = P64[R1 + 7];
           _s2bt7::P64 = P64[R1 + 15];
           _s2bt9::P64 = P64[R1 + 23];
           _s2bt8::I64 = I64[R1 + 31];
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = _s2bt6::P64;
           P64[Hp - 40] = _s2bt7::P64;
           I64[Hp - 32] = go_s2btb_info;
           _s2bt3::P64 = P64[Sp + 8];
           P64[Hp - 24] = _s2bt3::P64;
           P64[Hp - 16] = _s2bt9::P64;
           _c2ghS::P64 = Hp - 55;
           P64[Hp - 8] = _c2ghS::P64;
           I64[Hp] = _s2bt8::I64;
           I64[Sp] = block_c2giJ_info;
           R2 = _s2bt3::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _c2ghS::P64;
           P64[Sp + 8] = Hp - 31;
           Sp = Sp - 16;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2ghN_info" {
     block_c2ghN_info:
         const _c2ghN;
         const 1;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2giJ() //  [R1]
         { []
         }
     {offset
       c2giJ: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s2btb_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2giJ_info" {
     block_c2giJ_info:
         const _c2giJ;
         const 1;
         const 4294967326;
         const S2bMd_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.320006216 UTC

[section ""data" . GHC.Arr.cmpArray_closure" {
     GHC.Arr.cmpArray_closure:
         const GHC.Arr.cmpArray_info;
         const 0;
 },
 sat_s2btU_entry() //  [R1]
         { []
         }
     {offset
       c2gko: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2gkp; else goto c2gkq;
       c2gkp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gkq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c2gkm_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2btU_info" {
     sat_s2btU_info:
         const sat_s2btU_entry;
         const 4294967300;
         const 4294967311;
         const S2bMd_srt+616;
 },
 _c2gkm() //  [R1]
         { []
         }
     {offset
       c2gkm: // global
           _s2btz::I64 = I64[Sp + 8];
           _s2btN::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2btN::I64)) goto c2gkD; else goto c2gkF;
       c2gkF: // global
           if (%MO_S_Ge_W64(_s2btN::I64,
                            _s2btz::I64)) goto c2gkD; else goto c2gkE;
       c2gkD: // global
           R3 = _s2btz::I64;
           R2 = _s2btN::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2gkE: // global
           R1 = P64[P64[Sp + 16] + ((_s2btN::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2gkm_info" {
     block_c2gkm_info:
         const _c2gkm;
         const 66;
         const 4294967326;
         const S2bMd_srt+616;
 },
 go_s2btH_entry() //  [R1, R2]
         { []
         }
     {offset
       c2gkK: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2gkL; else goto c2gkM;
       c2gkL: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2gkM: // global
           I64[Sp - 48] = block_c2gkb_info;
           _s2btH::P64 = R1;
           _s2bts::P64 = P64[R1 + 7];
           _s2btA::P64 = P64[R1 + 15];
           _s2btG::P64 = P64[R1 + 23];
           _s2btz::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s2bts::P64;
           I64[Sp - 32] = _s2btz::I64;
           P64[Sp - 24] = _s2btA::P64;
           P64[Sp - 16] = _s2btG::P64;
           P64[Sp - 8] = _s2btH::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2gkU; else goto c2gkc;
       u2gkU: // global
           call _c2gkb(R1) args: 0, res: 0, upd: 0;
       c2gkc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s2btH_info" {
     go_s2btH_info:
         const go_s2btH_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S2bMd_srt+616;
 },
 _c2gkb() //  [R1]
         { []
         }
     {offset
       c2gkb: // global
           if (R1 & 7 == 1) goto c2gkH; else goto c2gkI;
       c2gkH: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2gkI: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c2gkT; else goto c2gkS;
       c2gkT: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2gkS: // global
           _s2btK::P64 = P64[R1 + 6];
           _s2btL::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s2btL::P64;
           I64[Hp - 96] = sat_s2btU_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s2btK::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s2btK::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gkb_info" {
     block_c2gkb_info:
         const _c2gkb;
         const 133;
         const 4294967326;
         const S2bMd_srt+616;
 },
 sat_s2bub_entry() //  [R1]
         { []
         }
     {offset
       c2gle: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2glf; else goto c2glg;
       c2glf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2glg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c2glc_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bub_info" {
     sat_s2bub_info:
         const sat_s2bub_entry;
         const 4294967300;
         const 4294967311;
         const S2bMd_srt+616;
 },
 _c2glc() //  [R1]
         { []
         }
     {offset
       c2glc: // global
           _s2btE::I64 = I64[Sp + 8];
           _s2bu4::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2bu4::I64)) goto c2glt; else goto c2glv;
       c2glv: // global
           if (%MO_S_Ge_W64(_s2bu4::I64,
                            _s2btE::I64)) goto c2glt; else goto c2glu;
       c2glt: // global
           R3 = _s2btE::I64;
           R2 = _s2bu4::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2glu: // global
           R1 = P64[P64[Sp + 16] + ((_s2bu4::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2glc_info" {
     block_c2glc_info:
         const _c2glc;
         const 66;
         const 4294967326;
         const S2bMd_srt+616;
 },
 go1_s2btY_entry() //  [R1, R2]
         { []
         }
     {offset
       c2glA: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2glB; else goto c2glC;
       c2glB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2glC: // global
           I64[Sp - 48] = block_c2gl1_info;
           _s2btY::P64 = R1;
           _s2bts::P64 = P64[R1 + 7];
           _s2btF::P64 = P64[R1 + 15];
           _s2btX::P64 = P64[R1 + 23];
           _s2btE::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s2bts::P64;
           I64[Sp - 32] = _s2btE::I64;
           P64[Sp - 24] = _s2btF::P64;
           P64[Sp - 16] = _s2btX::P64;
           P64[Sp - 8] = _s2btY::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2glK; else goto c2gl2;
       u2glK: // global
           call _c2gl1(R1) args: 0, res: 0, upd: 0;
       c2gl2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s2btY_info" {
     go1_s2btY_info:
         const go1_s2btY_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S2bMd_srt+616;
 },
 _c2gl1() //  [R1]
         { []
         }
     {offset
       c2gl1: // global
           if (R1 & 7 == 1) goto c2glx; else goto c2gly;
       c2glx: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2gly: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c2glJ; else goto c2glI;
       c2glJ: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2glI: // global
           _s2bu1::P64 = P64[R1 + 6];
           _s2bu2::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s2bu2::P64;
           I64[Hp - 96] = sat_s2bub_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s2bu1::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s2bu1::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gl1_info" {
     block_c2gl1_info:
         const _c2gl1;
         const 133;
         const 4294967326;
         const S2bMd_srt+616;
 },
 sat_s2bue_entry() //  [R1]
         { []
         }
     {offset
       c2gm9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2gma; else goto c2gmb;
       c2gma: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gmb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bue_info" {
     sat_s2bue_info:
         const sat_s2bue_entry;
         const 1;
         const 16;
 },
 sat_s2buf_entry() //  [R1]
         { []
         }
     {offset
       c2gmc: // global
           _s2buf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2gmd; else goto c2gme;
       c2gme: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2gmg; else goto c2gmf;
       c2gmg: // global
           HpAlloc = 24;
           goto c2gmd;
       c2gmd: // global
           R1 = _s2buf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gmf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2buf::P64;
           _s2bts::P64 = P64[_s2buf::P64 + 16];
           _s2btt::P64 = P64[_s2buf::P64 + 24];
           I64[Hp - 16] = sat_s2bue_info;
           P64[Hp] = _s2bts::P64;
           R3 = _s2btt::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,)_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2buf_info" {
     sat_s2buf_info:
         const sat_s2buf_entry;
         const 2;
         const 18;
 },
 GHC.Arr.cmpArray_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2gmh: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2gmi; else goto c2gmj;
       c2gmi: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.cmpArray_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2gmj: // global
           I64[Sp - 32] = block_c2gjV_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2gmv; else goto c2gjW;
       u2gmv: // global
           call _c2gjV(R1) args: 0, res: 0, upd: 0;
       c2gjW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.cmpArray_info" {
     GHC.Arr.cmpArray_info:
         const GHC.Arr.cmpArray_entry;
         const 0;
         const 554050781198;
         const 17179869208;
         const S2bMd_srt+616;
 },
 _c2gjV() //  [R1]
         { []
         }
     {offset
       c2gjV: // global
           I64[Sp - 24] = block_c2gk0_info;
           _s2btx::P64 = P64[R1 + 7];
           _s2bty::P64 = P64[R1 + 15];
           _s2btA::P64 = P64[R1 + 23];
           _s2btz::I64 = I64[R1 + 31];
           R1 = P64[Sp + 24];
           I64[Sp - 16] = _s2btz::I64;
           P64[Sp - 8] = _s2btA::P64;
           P64[Sp] = _s2bty::P64;
           P64[Sp + 24] = _s2btx::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2gmu; else goto c2gk1;
       u2gmu: // global
           call _c2gk0(R1) args: 0, res: 0, upd: 0;
       c2gk1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gjV_info" {
     block_c2gjV_info:
         const _c2gjV;
         const 3;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2gk0() //  [R1]
         { []
         }
     {offset
       c2gk0: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c2gmn; else goto c2gmm;
       c2gmn: // global
           HpAlloc = 128;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2gmm: // global
           _s2btC::P64 = P64[R1 + 7];
           _s2btD::P64 = P64[R1 + 15];
           _s2btF::P64 = P64[R1 + 23];
           _s2btE::I64 = I64[R1 + 31];
           I64[Hp - 120] = (,)_con_info;
           P64[Hp - 112] = P64[Sp + 48];
           P64[Hp - 104] = P64[Sp + 24];
           I64[Hp - 96] = go_s2btH_info;
           _s2bts::P64 = P64[Sp + 32];
           P64[Hp - 88] = _s2bts::P64;
           P64[Hp - 80] = P64[Sp + 16];
           _c2gk5::P64 = Hp - 119;
           P64[Hp - 72] = _c2gk5::P64;
           I64[Hp - 64] = I64[Sp + 8];
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = _s2btC::P64;
           P64[Hp - 40] = _s2btD::P64;
           I64[Hp - 32] = go1_s2btY_info;
           P64[Hp - 24] = _s2bts::P64;
           P64[Hp - 16] = _s2btF::P64;
           _c2gkV::P64 = Hp - 55;
           P64[Hp - 8] = _c2gkV::P64;
           I64[Hp] = _s2btE::I64;
           I64[Sp + 8] = block_c2glL_info;
           R2 = _s2bts::P64;
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = _c2gkV::P64;
           P64[Sp + 16] = Hp - 31;
           P64[Sp + 24] = Hp - 95;
           P64[Sp + 48] = _c2gk5::P64;
           Sp = Sp - 8;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gk0_info" {
     block_c2gk0_info:
         const _c2gk0;
         const 70;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2glL() //  [R1]
         { []
         }
     {offset
       c2glL: // global
           _c2gkW::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2glP_info;
           R2 = R1;
           R1 = _c2gkW::P64;
           Sp = Sp + 8;
           call go1_s2btY_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2glL_info" {
     block_c2glL_info:
         const _c2glL;
         const 5;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2glP() //  [R1]
         { []
         }
     {offset
       c2glP: // global
           I64[Sp] = block_c2glT_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 32];
           P64[Sp + 32] = R1;
           Sp = Sp - 16;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2glP_info" {
     block_c2glP_info:
         const _c2glP;
         const 4;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2glT() //  [R1]
         { []
         }
     {offset
       c2glT: // global
           _c2gk6::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2glX_info;
           R2 = R1;
           R1 = _c2gk6::P64;
           Sp = Sp + 8;
           call go_s2btH_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2glT_info" {
     block_c2glT_info:
         const _c2glT;
         const 4;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2glX() //  [R1]
         { []
         }
     {offset
       c2glX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2gmt; else goto c2gms;
       c2gmt: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2gms: // global
           I64[Hp - 24] = sat_s2buf_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R4 = P64[Sp + 24];
           R3 = R1;
           R2 = Hp - 24;
           Sp = Sp + 32;
           call GHC.Classes.$fOrd[]_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2glX_info" {
     block_c2glX_info:
         const _c2glX;
         const 3;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.362416694 UTC

[section ""data" . GHC.Arr.$w$c<_closure" {
     GHC.Arr.$w$c<_closure:
         const GHC.Arr.$w$c<_info;
         const 0;
 },
 GHC.Arr.$w$c<_slow() //  [R1]
         { []
         }
     {offset
       c2goN: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$w$c<_entry(R6,
                                    R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s2buI_entry() //  [R1]
         { []
         }
     {offset
       c2gpa: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2gpb; else goto c2gpc;
       c2gpb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gpc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c2gp8_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2buI_info" {
     sat_s2buI_info:
         const sat_s2buI_entry;
         const 4294967300;
         const 4294967311;
         const S2bMd_srt+616;
 },
 _c2gp8() //  [R1]
         { []
         }
     {offset
       c2gp8: // global
           _s2buo::I64 = I64[Sp + 8];
           _s2buB::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2buB::I64)) goto c2gpp; else goto c2gpr;
       c2gpr: // global
           if (%MO_S_Ge_W64(_s2buB::I64,
                            _s2buo::I64)) goto c2gpp; else goto c2gpq;
       c2gpp: // global
           R3 = _s2buo::I64;
           R2 = _s2buB::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2gpq: // global
           R1 = P64[P64[Sp + 16] + ((_s2buB::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2gp8_info" {
     block_c2gp8_info:
         const _c2gp8;
         const 66;
         const 4294967326;
         const S2bMd_srt+616;
 },
 go_s2buv_entry() //  [R1, R2]
         { []
         }
     {offset
       c2gpw: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2gpx; else goto c2gpy;
       c2gpx: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2gpy: // global
           I64[Sp - 48] = block_c2goX_info;
           _s2buv::P64 = R1;
           _s2buk::P64 = P64[R1 + 7];
           _s2bup::P64 = P64[R1 + 15];
           _s2buu::P64 = P64[R1 + 23];
           _s2buo::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s2buk::P64;
           I64[Sp - 32] = _s2buo::I64;
           P64[Sp - 24] = _s2bup::P64;
           P64[Sp - 16] = _s2buu::P64;
           P64[Sp - 8] = _s2buv::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2gpG; else goto c2goY;
       u2gpG: // global
           call _c2goX(R1) args: 0, res: 0, upd: 0;
       c2goY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s2buv_info" {
     go_s2buv_info:
         const go_s2buv_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S2bMd_srt+616;
 },
 _c2goX() //  [R1]
         { []
         }
     {offset
       c2goX: // global
           if (R1 & 7 == 1) goto c2gpt; else goto c2gpu;
       c2gpt: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2gpu: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c2gpF; else goto c2gpE;
       c2gpF: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2gpE: // global
           _s2buy::P64 = P64[R1 + 6];
           _s2buz::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s2buz::P64;
           I64[Hp - 96] = sat_s2buI_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s2buy::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s2buy::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2goX_info" {
     block_c2goX_info:
         const _c2goX;
         const 133;
         const 4294967326;
         const S2bMd_srt+616;
 },
 sat_s2buZ_entry() //  [R1]
         { []
         }
     {offset
       c2gq0: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2gq1; else goto c2gq2;
       c2gq1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gq2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c2gpY_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2buZ_info" {
     sat_s2buZ_info:
         const sat_s2buZ_entry;
         const 4294967300;
         const 4294967311;
         const S2bMd_srt+616;
 },
 _c2gpY() //  [R1]
         { []
         }
     {offset
       c2gpY: // global
           _s2bus::I64 = I64[Sp + 8];
           _s2buS::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2buS::I64)) goto c2gqf; else goto c2gqh;
       c2gqh: // global
           if (%MO_S_Ge_W64(_s2buS::I64,
                            _s2bus::I64)) goto c2gqf; else goto c2gqg;
       c2gqf: // global
           R3 = _s2bus::I64;
           R2 = _s2buS::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2gqg: // global
           R1 = P64[P64[Sp + 16] + ((_s2buS::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2gpY_info" {
     block_c2gpY_info:
         const _c2gpY;
         const 66;
         const 4294967326;
         const S2bMd_srt+616;
 },
 go1_s2buM_entry() //  [R1, R2]
         { []
         }
     {offset
       c2gqm: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2gqn; else goto c2gqo;
       c2gqn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2gqo: // global
           I64[Sp - 48] = block_c2gpN_info;
           _s2buM::P64 = R1;
           _s2buk::P64 = P64[R1 + 7];
           _s2but::P64 = P64[R1 + 15];
           _s2buL::P64 = P64[R1 + 23];
           _s2bus::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s2buk::P64;
           I64[Sp - 32] = _s2bus::I64;
           P64[Sp - 24] = _s2but::P64;
           P64[Sp - 16] = _s2buL::P64;
           P64[Sp - 8] = _s2buM::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2gqw; else goto c2gpO;
       u2gqw: // global
           call _c2gpN(R1) args: 0, res: 0, upd: 0;
       c2gpO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s2buM_info" {
     go1_s2buM_info:
         const go1_s2buM_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S2bMd_srt+616;
 },
 _c2gpN() //  [R1]
         { []
         }
     {offset
       c2gpN: // global
           if (R1 & 7 == 1) goto c2gqj; else goto c2gqk;
       c2gqj: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2gqk: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c2gqv; else goto c2gqu;
       c2gqv: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2gqu: // global
           _s2buP::P64 = P64[R1 + 6];
           _s2buQ::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s2buQ::P64;
           I64[Hp - 96] = sat_s2buZ_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s2buP::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s2buP::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gpN_info" {
     block_c2gpN_info:
         const _c2gpN;
         const 133;
         const 4294967326;
         const S2bMd_srt+616;
 },
 sat_s2bv2_entry() //  [R1]
         { []
         }
     {offset
       c2gqV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2gqW; else goto c2gqX;
       c2gqW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gqX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bv2_info" {
     sat_s2bv2_info:
         const sat_s2bv2_entry;
         const 1;
         const 16;
 },
 sat_s2bv3_entry() //  [R1]
         { []
         }
     {offset
       c2gqY: // global
           _s2bv3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2gqZ; else goto c2gr0;
       c2gr0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2gr2; else goto c2gr1;
       c2gr2: // global
           HpAlloc = 24;
           goto c2gqZ;
       c2gqZ: // global
           R1 = _s2bv3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gr1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2bv3::P64;
           _s2buk::P64 = P64[_s2bv3::P64 + 16];
           _s2bul::P64 = P64[_s2bv3::P64 + 24];
           I64[Hp - 16] = sat_s2bv2_info;
           P64[Hp] = _s2buk::P64;
           R3 = _s2bul::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,)_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bv3_info" {
     sat_s2bv3_info:
         const sat_s2bv3_entry;
         const 2;
         const 18;
 },
 GHC.Arr.$w$c<_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2gr3: // global
           _s2buo::I64 = R6;
           _s2bun::P64 = R5;
           _s2bum::P64 = R4;
           _s2bul::P64 = R3;
           _s2buk::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c2gr4; else goto c2gr5;
       c2gr5: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c2gr7; else goto c2gr6;
       c2gr7: // global
           HpAlloc = 128;
           goto c2gr4;
       c2gr4: // global
           R1 = GHC.Arr.$w$c<_closure;
           P64[Sp - 40] = _s2buk::P64;
           P64[Sp - 32] = _s2bul::P64;
           P64[Sp - 24] = _s2bum::P64;
           P64[Sp - 16] = _s2bun::P64;
           I64[Sp - 8] = _s2buo::I64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c2gr6: // global
           I64[Hp - 120] = (,)_con_info;
           P64[Hp - 112] = _s2bum::P64;
           P64[Hp - 104] = _s2bun::P64;
           I64[Hp - 96] = go_s2buv_info;
           P64[Hp - 88] = _s2buk::P64;
           P64[Hp - 80] = P64[Sp];
           _c2goR::P64 = Hp - 119;
           P64[Hp - 72] = _c2goR::P64;
           I64[Hp - 64] = _s2buo::I64;
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = go1_s2buM_info;
           P64[Hp - 24] = _s2buk::P64;
           P64[Hp - 16] = P64[Sp + 32];
           _c2gpH::P64 = Hp - 55;
           P64[Hp - 8] = _c2gpH::P64;
           I64[Hp] = I64[Sp + 24];
           I64[Sp - 8] = block_c2gqx_info;
           R2 = _s2buk::P64;
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = _c2gpH::P64;
           P64[Sp] = _s2bul::P64;
           P64[Sp + 8] = _s2buk::P64;
           P64[Sp + 16] = Hp - 31;
           P64[Sp + 24] = Hp - 95;
           P64[Sp + 32] = _c2goR::P64;
           Sp = Sp - 24;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$c<_info" {
     GHC.Arr.$w$c<_info:
         const GHC.Arr.$w$c<_entry;
         const 0;
         const 1103806595086;
         const 42949672960;
         const S2bMd_srt+616;
         const 17418;
         const GHC.Arr.$w$c<_slow;
 },
 _c2gqx() //  [R1]
         { []
         }
     {offset
       c2gqx: // global
           I64[Sp] = block_c2gqB_info;
           R2 = R1;
           R1 = P64[Sp + 24];
           call go1_s2buM_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gqx_info" {
     block_c2gqx_info:
         const _c2gqx;
         const 5;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2gqB() //  [R1]
         { []
         }
     {offset
       c2gqB: // global
           I64[Sp] = block_c2gqF_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 40];
           P64[Sp + 40] = R1;
           Sp = Sp - 16;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gqB_info" {
     block_c2gqB_info:
         const _c2gqB;
         const 261;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2gqF() //  [R1]
         { []
         }
     {offset
       c2gqF: // global
           I64[Sp] = block_c2gqJ_info;
           R2 = R1;
           R1 = P64[Sp + 32];
           call go_s2buv_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gqF_info" {
     block_c2gqF_info:
         const _c2gqF;
         const 261;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2gqJ() //  [R1]
         { []
         }
     {offset
       c2gqJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2gre; else goto c2grd;
       c2gre: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2grd: // global
           I64[Hp - 24] = sat_s2bv3_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _s2bv7::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_c2grb_info;
           R4 = _s2bv7::P64;
           R3 = R1;
           R2 = Hp - 24;
           Sp = Sp + 40;
           call GHC.Classes.$fOrd[]_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gqJ_info" {
     block_c2gqJ_info:
         const _c2gqJ;
         const 773;
         const 30;
 },
 _c2grb() //  [R1]
         { []
         }
     {offset
       c2grb: // global
           if (R1 & 7 == 1) goto c2gro; else goto c2grk;
       c2gro: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2grk: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2grb_info" {
     block_c2grb_info:
         const _c2grb;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.395795039 UTC

[section ""data" . GHC.Arr.$fOrdArray_$c<_closure" {
     GHC.Arr.$fOrdArray_$c<_closure:
         const GHC.Arr.$fOrdArray_$c<_info;
         const 0;
 },
 GHC.Arr.$fOrdArray_$c<_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2gtQ: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2gtU; else goto c2gtV;
       c2gtU: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fOrdArray_$c<_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2gtV: // global
           I64[Sp - 32] = block_c2gtN_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2gu3; else goto c2gtO;
       u2gu3: // global
           call _c2gtN(R1) args: 0, res: 0, upd: 0;
       c2gtO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fOrdArray_$c<_info" {
     GHC.Arr.$fOrdArray_$c<_info:
         const GHC.Arr.$fOrdArray_$c<_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S2bMd_srt+680;
 },
 _c2gtN() //  [R1]
         { []
         }
     {offset
       c2gtN: // global
           I64[Sp - 24] = block_c2gtT_info;
           _s2bve::P64 = P64[R1 + 7];
           _s2bvf::P64 = P64[R1 + 15];
           _s2bvh::P64 = P64[R1 + 23];
           _s2bvg::I64 = I64[R1 + 31];
           R1 = P64[Sp + 24];
           I64[Sp - 16] = _s2bvg::I64;
           P64[Sp - 8] = _s2bvh::P64;
           P64[Sp] = _s2bvf::P64;
           P64[Sp + 24] = _s2bve::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2gu2; else goto c2gtX;
       u2gu2: // global
           call _c2gtT(R1) args: 0, res: 0, upd: 0;
       c2gtX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gtN_info" {
     block_c2gtN_info:
         const _c2gtN;
         const 3;
         const 4294967326;
         const S2bMd_srt+680;
 },
 _c2gtT() //  [R1]
         { []
         }
     {offset
       c2gtT: // global
           R6 = I64[Sp + 8];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           P64[Sp + 24] = P64[R1 + 7];
           P64[Sp + 32] = P64[R1 + 15];
           I64[Sp + 40] = I64[R1 + 31];
           P64[Sp + 48] = P64[R1 + 23];
           Sp = Sp + 16;
           call GHC.Arr.$w$c<_entry(R6,
                                    R5,
                                    R4,
                                    R3,
                                    R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gtT_info" {
     block_c2gtT_info:
         const _c2gtT;
         const 70;
         const 4294967326;
         const S2bMd_srt+680;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.411598217 UTC

[section ""data" . GHC.Arr.$w$c>=_closure" {
     GHC.Arr.$w$c>=_closure:
         const GHC.Arr.$w$c>=_info;
         const 0;
 },
 GHC.Arr.$w$c>=_slow() //  [R1]
         { []
         }
     {offset
       c2guo: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$w$c>=_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2,
                                     R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s2bvL_entry() //  [R1]
         { []
         }
     {offset
       c2guL: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2guM; else goto c2guN;
       c2guM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2guN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c2guJ_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bvL_info" {
     sat_s2bvL_info:
         const sat_s2bvL_entry;
         const 4294967300;
         const 4294967311;
         const S2bMd_srt+616;
 },
 _c2guJ() //  [R1]
         { []
         }
     {offset
       c2guJ: // global
           _s2bvr::I64 = I64[Sp + 8];
           _s2bvE::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2bvE::I64)) goto c2gv0; else goto c2gv2;
       c2gv2: // global
           if (%MO_S_Ge_W64(_s2bvE::I64,
                            _s2bvr::I64)) goto c2gv0; else goto c2gv1;
       c2gv0: // global
           R3 = _s2bvr::I64;
           R2 = _s2bvE::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2gv1: // global
           R1 = P64[P64[Sp + 16] + ((_s2bvE::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2guJ_info" {
     block_c2guJ_info:
         const _c2guJ;
         const 66;
         const 4294967326;
         const S2bMd_srt+616;
 },
 go_s2bvy_entry() //  [R1, R2]
         { []
         }
     {offset
       c2gv7: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2gv8; else goto c2gv9;
       c2gv8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2gv9: // global
           I64[Sp - 48] = block_c2guy_info;
           _s2bvy::P64 = R1;
           _s2bvn::P64 = P64[R1 + 7];
           _s2bvs::P64 = P64[R1 + 15];
           _s2bvx::P64 = P64[R1 + 23];
           _s2bvr::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s2bvn::P64;
           I64[Sp - 32] = _s2bvr::I64;
           P64[Sp - 24] = _s2bvs::P64;
           P64[Sp - 16] = _s2bvx::P64;
           P64[Sp - 8] = _s2bvy::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2gvh; else goto c2guz;
       u2gvh: // global
           call _c2guy(R1) args: 0, res: 0, upd: 0;
       c2guz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s2bvy_info" {
     go_s2bvy_info:
         const go_s2bvy_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S2bMd_srt+616;
 },
 _c2guy() //  [R1]
         { []
         }
     {offset
       c2guy: // global
           if (R1 & 7 == 1) goto c2gv4; else goto c2gv5;
       c2gv4: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2gv5: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c2gvg; else goto c2gvf;
       c2gvg: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2gvf: // global
           _s2bvB::P64 = P64[R1 + 6];
           _s2bvC::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s2bvC::P64;
           I64[Hp - 96] = sat_s2bvL_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s2bvB::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s2bvB::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2guy_info" {
     block_c2guy_info:
         const _c2guy;
         const 133;
         const 4294967326;
         const S2bMd_srt+616;
 },
 sat_s2bw2_entry() //  [R1]
         { []
         }
     {offset
       c2gvB: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2gvC; else goto c2gvD;
       c2gvC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gvD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c2gvz_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bw2_info" {
     sat_s2bw2_info:
         const sat_s2bw2_entry;
         const 4294967300;
         const 4294967311;
         const S2bMd_srt+616;
 },
 _c2gvz() //  [R1]
         { []
         }
     {offset
       c2gvz: // global
           _s2bvv::I64 = I64[Sp + 8];
           _s2bvV::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2bvV::I64)) goto c2gvQ; else goto c2gvS;
       c2gvS: // global
           if (%MO_S_Ge_W64(_s2bvV::I64,
                            _s2bvv::I64)) goto c2gvQ; else goto c2gvR;
       c2gvQ: // global
           R3 = _s2bvv::I64;
           R2 = _s2bvV::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2gvR: // global
           R1 = P64[P64[Sp + 16] + ((_s2bvV::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2gvz_info" {
     block_c2gvz_info:
         const _c2gvz;
         const 66;
         const 4294967326;
         const S2bMd_srt+616;
 },
 go1_s2bvP_entry() //  [R1, R2]
         { []
         }
     {offset
       c2gvX: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2gvY; else goto c2gvZ;
       c2gvY: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2gvZ: // global
           I64[Sp - 48] = block_c2gvo_info;
           _s2bvP::P64 = R1;
           _s2bvn::P64 = P64[R1 + 7];
           _s2bvw::P64 = P64[R1 + 15];
           _s2bvO::P64 = P64[R1 + 23];
           _s2bvv::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s2bvn::P64;
           I64[Sp - 32] = _s2bvv::I64;
           P64[Sp - 24] = _s2bvw::P64;
           P64[Sp - 16] = _s2bvO::P64;
           P64[Sp - 8] = _s2bvP::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2gw7; else goto c2gvp;
       u2gw7: // global
           call _c2gvo(R1) args: 0, res: 0, upd: 0;
       c2gvp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s2bvP_info" {
     go1_s2bvP_info:
         const go1_s2bvP_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S2bMd_srt+616;
 },
 _c2gvo() //  [R1]
         { []
         }
     {offset
       c2gvo: // global
           if (R1 & 7 == 1) goto c2gvU; else goto c2gvV;
       c2gvU: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2gvV: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c2gw6; else goto c2gw5;
       c2gw6: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2gw5: // global
           _s2bvS::P64 = P64[R1 + 6];
           _s2bvT::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s2bvT::P64;
           I64[Hp - 96] = sat_s2bw2_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s2bvS::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s2bvS::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gvo_info" {
     block_c2gvo_info:
         const _c2gvo;
         const 133;
         const 4294967326;
         const S2bMd_srt+616;
 },
 sat_s2bw5_entry() //  [R1]
         { []
         }
     {offset
       c2gww: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2gwx; else goto c2gwy;
       c2gwx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gwy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bw5_info" {
     sat_s2bw5_info:
         const sat_s2bw5_entry;
         const 1;
         const 16;
 },
 sat_s2bw6_entry() //  [R1]
         { []
         }
     {offset
       c2gwz: // global
           _s2bw6::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2gwA; else goto c2gwB;
       c2gwB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2gwD; else goto c2gwC;
       c2gwD: // global
           HpAlloc = 24;
           goto c2gwA;
       c2gwA: // global
           R1 = _s2bw6::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gwC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2bw6::P64;
           _s2bvn::P64 = P64[_s2bw6::P64 + 16];
           _s2bvo::P64 = P64[_s2bw6::P64 + 24];
           I64[Hp - 16] = sat_s2bw5_info;
           P64[Hp] = _s2bvn::P64;
           R3 = _s2bvo::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,)_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bw6_info" {
     sat_s2bw6_info:
         const sat_s2bw6_entry;
         const 2;
         const 18;
 },
 GHC.Arr.$w$c>=_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2gwE: // global
           _s2bvr::I64 = R6;
           _s2bvq::P64 = R5;
           _s2bvp::P64 = R4;
           _s2bvo::P64 = R3;
           _s2bvn::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c2gwF; else goto c2gwG;
       c2gwG: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c2gwI; else goto c2gwH;
       c2gwI: // global
           HpAlloc = 128;
           goto c2gwF;
       c2gwF: // global
           R1 = GHC.Arr.$w$c>=_closure;
           P64[Sp - 40] = _s2bvn::P64;
           P64[Sp - 32] = _s2bvo::P64;
           P64[Sp - 24] = _s2bvp::P64;
           P64[Sp - 16] = _s2bvq::P64;
           I64[Sp - 8] = _s2bvr::I64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c2gwH: // global
           I64[Hp - 120] = (,)_con_info;
           P64[Hp - 112] = _s2bvp::P64;
           P64[Hp - 104] = _s2bvq::P64;
           I64[Hp - 96] = go_s2bvy_info;
           P64[Hp - 88] = _s2bvn::P64;
           P64[Hp - 80] = P64[Sp];
           _c2gus::P64 = Hp - 119;
           P64[Hp - 72] = _c2gus::P64;
           I64[Hp - 64] = _s2bvr::I64;
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = go1_s2bvP_info;
           P64[Hp - 24] = _s2bvn::P64;
           P64[Hp - 16] = P64[Sp + 32];
           _c2gvi::P64 = Hp - 55;
           P64[Hp - 8] = _c2gvi::P64;
           I64[Hp] = I64[Sp + 24];
           I64[Sp - 8] = block_c2gw8_info;
           R2 = _s2bvn::P64;
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = _c2gvi::P64;
           P64[Sp] = _s2bvo::P64;
           P64[Sp + 8] = _s2bvn::P64;
           P64[Sp + 16] = Hp - 31;
           P64[Sp + 24] = Hp - 95;
           P64[Sp + 32] = _c2gus::P64;
           Sp = Sp - 24;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$c>=_info" {
     GHC.Arr.$w$c>=_info:
         const GHC.Arr.$w$c>=_entry;
         const 0;
         const 4402341478414;
         const 42949672960;
         const S2bMd_srt+616;
         const 17418;
         const GHC.Arr.$w$c>=_slow;
 },
 _c2gw8() //  [R1]
         { []
         }
     {offset
       c2gw8: // global
           I64[Sp] = block_c2gwc_info;
           R2 = R1;
           R1 = P64[Sp + 24];
           call go1_s2bvP_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gw8_info" {
     block_c2gw8_info:
         const _c2gw8;
         const 5;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2gwc() //  [R1]
         { []
         }
     {offset
       c2gwc: // global
           I64[Sp] = block_c2gwg_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 40];
           P64[Sp + 40] = R1;
           Sp = Sp - 16;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gwc_info" {
     block_c2gwc_info:
         const _c2gwc;
         const 261;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2gwg() //  [R1]
         { []
         }
     {offset
       c2gwg: // global
           I64[Sp] = block_c2gwk_info;
           R2 = R1;
           R1 = P64[Sp + 32];
           call go_s2bvy_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gwg_info" {
     block_c2gwg_info:
         const _c2gwg;
         const 261;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2gwk() //  [R1]
         { []
         }
     {offset
       c2gwk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2gwP; else goto c2gwO;
       c2gwP: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2gwO: // global
           I64[Hp - 24] = sat_s2bw6_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _s2bwa::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_c2gwM_info;
           R4 = _s2bwa::P64;
           R3 = R1;
           R2 = Hp - 24;
           Sp = Sp + 40;
           call GHC.Classes.$fOrd[]_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gwk_info" {
     block_c2gwk_info:
         const _c2gwk;
         const 773;
         const 30;
 },
 _c2gwM() //  [R1]
         { []
         }
     {offset
       c2gwM: // global
           if (R1 & 7 == 1) goto c2gwZ; else goto c2gwV;
       c2gwZ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2gwV: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gwM_info" {
     block_c2gwM_info:
         const _c2gwM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.445414521 UTC

[section ""data" . GHC.Arr.$fOrdArray_$c>=_closure" {
     GHC.Arr.$fOrdArray_$c>=_closure:
         const GHC.Arr.$fOrdArray_$c>=_info;
         const 0;
 },
 GHC.Arr.$fOrdArray_$c>=_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2gzr: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2gzv; else goto c2gzw;
       c2gzv: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fOrdArray_$c>=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2gzw: // global
           I64[Sp - 32] = block_c2gzo_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2gzE; else goto c2gzp;
       u2gzE: // global
           call _c2gzo(R1) args: 0, res: 0, upd: 0;
       c2gzp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fOrdArray_$c>=_info" {
     GHC.Arr.$fOrdArray_$c>=_info:
         const GHC.Arr.$fOrdArray_$c>=_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S2bMd_srt+696;
 },
 _c2gzo() //  [R1]
         { []
         }
     {offset
       c2gzo: // global
           I64[Sp - 24] = block_c2gzu_info;
           _s2bwh::P64 = P64[R1 + 7];
           _s2bwi::P64 = P64[R1 + 15];
           _s2bwk::P64 = P64[R1 + 23];
           _s2bwj::I64 = I64[R1 + 31];
           R1 = P64[Sp + 24];
           I64[Sp - 16] = _s2bwj::I64;
           P64[Sp - 8] = _s2bwk::P64;
           P64[Sp] = _s2bwi::P64;
           P64[Sp + 24] = _s2bwh::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2gzD; else goto c2gzy;
       u2gzD: // global
           call _c2gzu(R1) args: 0, res: 0, upd: 0;
       c2gzy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gzo_info" {
     block_c2gzo_info:
         const _c2gzo;
         const 3;
         const 4294967326;
         const S2bMd_srt+696;
 },
 _c2gzu() //  [R1]
         { []
         }
     {offset
       c2gzu: // global
           R6 = I64[Sp + 8];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           P64[Sp + 24] = P64[R1 + 7];
           P64[Sp + 32] = P64[R1 + 15];
           I64[Sp + 40] = I64[R1 + 31];
           P64[Sp + 48] = P64[R1 + 23];
           Sp = Sp + 16;
           call GHC.Arr.$w$c>=_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gzu_info" {
     block_c2gzu_info:
         const _c2gzu;
         const 70;
         const 4294967326;
         const S2bMd_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.460663194 UTC

[section ""data" . GHC.Arr.$w$c>_closure" {
     GHC.Arr.$w$c>_closure:
         const GHC.Arr.$w$c>_info;
         const 0;
 },
 GHC.Arr.$w$c>_slow() //  [R1]
         { []
         }
     {offset
       c2gzZ: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$w$c>_entry(R6,
                                    R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s2bwO_entry() //  [R1]
         { []
         }
     {offset
       c2gAm: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2gAn; else goto c2gAo;
       c2gAn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gAo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c2gAk_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bwO_info" {
     sat_s2bwO_info:
         const sat_s2bwO_entry;
         const 4294967300;
         const 4294967311;
         const S2bMd_srt+616;
 },
 _c2gAk() //  [R1]
         { []
         }
     {offset
       c2gAk: // global
           _s2bwu::I64 = I64[Sp + 8];
           _s2bwH::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2bwH::I64)) goto c2gAB; else goto c2gAD;
       c2gAD: // global
           if (%MO_S_Ge_W64(_s2bwH::I64,
                            _s2bwu::I64)) goto c2gAB; else goto c2gAC;
       c2gAB: // global
           R3 = _s2bwu::I64;
           R2 = _s2bwH::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2gAC: // global
           R1 = P64[P64[Sp + 16] + ((_s2bwH::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2gAk_info" {
     block_c2gAk_info:
         const _c2gAk;
         const 66;
         const 4294967326;
         const S2bMd_srt+616;
 },
 go_s2bwB_entry() //  [R1, R2]
         { []
         }
     {offset
       c2gAI: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2gAJ; else goto c2gAK;
       c2gAJ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2gAK: // global
           I64[Sp - 48] = block_c2gA9_info;
           _s2bwB::P64 = R1;
           _s2bwq::P64 = P64[R1 + 7];
           _s2bwv::P64 = P64[R1 + 15];
           _s2bwA::P64 = P64[R1 + 23];
           _s2bwu::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s2bwq::P64;
           I64[Sp - 32] = _s2bwu::I64;
           P64[Sp - 24] = _s2bwv::P64;
           P64[Sp - 16] = _s2bwA::P64;
           P64[Sp - 8] = _s2bwB::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2gAS; else goto c2gAa;
       u2gAS: // global
           call _c2gA9(R1) args: 0, res: 0, upd: 0;
       c2gAa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s2bwB_info" {
     go_s2bwB_info:
         const go_s2bwB_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S2bMd_srt+616;
 },
 _c2gA9() //  [R1]
         { []
         }
     {offset
       c2gA9: // global
           if (R1 & 7 == 1) goto c2gAF; else goto c2gAG;
       c2gAF: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2gAG: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c2gAR; else goto c2gAQ;
       c2gAR: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2gAQ: // global
           _s2bwE::P64 = P64[R1 + 6];
           _s2bwF::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s2bwF::P64;
           I64[Hp - 96] = sat_s2bwO_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s2bwE::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s2bwE::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gA9_info" {
     block_c2gA9_info:
         const _c2gA9;
         const 133;
         const 4294967326;
         const S2bMd_srt+616;
 },
 sat_s2bx5_entry() //  [R1]
         { []
         }
     {offset
       c2gBc: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2gBd; else goto c2gBe;
       c2gBd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gBe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c2gBa_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bx5_info" {
     sat_s2bx5_info:
         const sat_s2bx5_entry;
         const 4294967300;
         const 4294967311;
         const S2bMd_srt+616;
 },
 _c2gBa() //  [R1]
         { []
         }
     {offset
       c2gBa: // global
           _s2bwy::I64 = I64[Sp + 8];
           _s2bwY::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2bwY::I64)) goto c2gBr; else goto c2gBt;
       c2gBt: // global
           if (%MO_S_Ge_W64(_s2bwY::I64,
                            _s2bwy::I64)) goto c2gBr; else goto c2gBs;
       c2gBr: // global
           R3 = _s2bwy::I64;
           R2 = _s2bwY::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2gBs: // global
           R1 = P64[P64[Sp + 16] + ((_s2bwY::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2gBa_info" {
     block_c2gBa_info:
         const _c2gBa;
         const 66;
         const 4294967326;
         const S2bMd_srt+616;
 },
 go1_s2bwS_entry() //  [R1, R2]
         { []
         }
     {offset
       c2gBy: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2gBz; else goto c2gBA;
       c2gBz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2gBA: // global
           I64[Sp - 48] = block_c2gAZ_info;
           _s2bwS::P64 = R1;
           _s2bwq::P64 = P64[R1 + 7];
           _s2bwz::P64 = P64[R1 + 15];
           _s2bwR::P64 = P64[R1 + 23];
           _s2bwy::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s2bwq::P64;
           I64[Sp - 32] = _s2bwy::I64;
           P64[Sp - 24] = _s2bwz::P64;
           P64[Sp - 16] = _s2bwR::P64;
           P64[Sp - 8] = _s2bwS::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2gBI; else goto c2gB0;
       u2gBI: // global
           call _c2gAZ(R1) args: 0, res: 0, upd: 0;
       c2gB0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s2bwS_info" {
     go1_s2bwS_info:
         const go1_s2bwS_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S2bMd_srt+616;
 },
 _c2gAZ() //  [R1]
         { []
         }
     {offset
       c2gAZ: // global
           if (R1 & 7 == 1) goto c2gBv; else goto c2gBw;
       c2gBv: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2gBw: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c2gBH; else goto c2gBG;
       c2gBH: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2gBG: // global
           _s2bwV::P64 = P64[R1 + 6];
           _s2bwW::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s2bwW::P64;
           I64[Hp - 96] = sat_s2bx5_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s2bwV::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s2bwV::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gAZ_info" {
     block_c2gAZ_info:
         const _c2gAZ;
         const 133;
         const 4294967326;
         const S2bMd_srt+616;
 },
 sat_s2bx8_entry() //  [R1]
         { []
         }
     {offset
       c2gC7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2gC8; else goto c2gC9;
       c2gC8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gC9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bx8_info" {
     sat_s2bx8_info:
         const sat_s2bx8_entry;
         const 1;
         const 16;
 },
 sat_s2bx9_entry() //  [R1]
         { []
         }
     {offset
       c2gCa: // global
           _s2bx9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2gCb; else goto c2gCc;
       c2gCc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2gCe; else goto c2gCd;
       c2gCe: // global
           HpAlloc = 24;
           goto c2gCb;
       c2gCb: // global
           R1 = _s2bx9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gCd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2bx9::P64;
           _s2bwq::P64 = P64[_s2bx9::P64 + 16];
           _s2bwr::P64 = P64[_s2bx9::P64 + 24];
           I64[Hp - 16] = sat_s2bx8_info;
           P64[Hp] = _s2bwq::P64;
           R3 = _s2bwr::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,)_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bx9_info" {
     sat_s2bx9_info:
         const sat_s2bx9_entry;
         const 2;
         const 18;
 },
 GHC.Arr.$w$c>_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2gCf: // global
           _s2bwu::I64 = R6;
           _s2bwt::P64 = R5;
           _s2bws::P64 = R4;
           _s2bwr::P64 = R3;
           _s2bwq::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c2gCg; else goto c2gCh;
       c2gCh: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c2gCj; else goto c2gCi;
       c2gCj: // global
           HpAlloc = 128;
           goto c2gCg;
       c2gCg: // global
           R1 = GHC.Arr.$w$c>_closure;
           P64[Sp - 40] = _s2bwq::P64;
           P64[Sp - 32] = _s2bwr::P64;
           P64[Sp - 24] = _s2bws::P64;
           P64[Sp - 16] = _s2bwt::P64;
           I64[Sp - 8] = _s2bwu::I64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c2gCi: // global
           I64[Hp - 120] = (,)_con_info;
           P64[Hp - 112] = _s2bws::P64;
           P64[Hp - 104] = _s2bwt::P64;
           I64[Hp - 96] = go_s2bwB_info;
           P64[Hp - 88] = _s2bwq::P64;
           P64[Hp - 80] = P64[Sp];
           _c2gA3::P64 = Hp - 119;
           P64[Hp - 72] = _c2gA3::P64;
           I64[Hp - 64] = _s2bwu::I64;
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = go1_s2bwS_info;
           P64[Hp - 24] = _s2bwq::P64;
           P64[Hp - 16] = P64[Sp + 32];
           _c2gAT::P64 = Hp - 55;
           P64[Hp - 8] = _c2gAT::P64;
           I64[Hp] = I64[Sp + 24];
           I64[Sp - 8] = block_c2gBJ_info;
           R2 = _s2bwq::P64;
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = _c2gAT::P64;
           P64[Sp] = _s2bwr::P64;
           P64[Sp + 8] = _s2bwq::P64;
           P64[Sp + 16] = Hp - 31;
           P64[Sp + 24] = Hp - 95;
           P64[Sp + 32] = _c2gA3::P64;
           Sp = Sp - 24;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$c>_info" {
     GHC.Arr.$w$c>_info:
         const GHC.Arr.$w$c>_entry;
         const 0;
         const 17596481011726;
         const 42949672960;
         const S2bMd_srt+616;
         const 17418;
         const GHC.Arr.$w$c>_slow;
 },
 _c2gBJ() //  [R1]
         { []
         }
     {offset
       c2gBJ: // global
           I64[Sp] = block_c2gBN_info;
           R2 = R1;
           R1 = P64[Sp + 24];
           call go1_s2bwS_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gBJ_info" {
     block_c2gBJ_info:
         const _c2gBJ;
         const 5;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2gBN() //  [R1]
         { []
         }
     {offset
       c2gBN: // global
           I64[Sp] = block_c2gBR_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 40];
           P64[Sp + 40] = R1;
           Sp = Sp - 16;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gBN_info" {
     block_c2gBN_info:
         const _c2gBN;
         const 261;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2gBR() //  [R1]
         { []
         }
     {offset
       c2gBR: // global
           I64[Sp] = block_c2gBV_info;
           R2 = R1;
           R1 = P64[Sp + 32];
           call go_s2bwB_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gBR_info" {
     block_c2gBR_info:
         const _c2gBR;
         const 261;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2gBV() //  [R1]
         { []
         }
     {offset
       c2gBV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2gCq; else goto c2gCp;
       c2gCq: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2gCp: // global
           I64[Hp - 24] = sat_s2bx9_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _s2bxd::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_c2gCn_info;
           R4 = _s2bxd::P64;
           R3 = R1;
           R2 = Hp - 24;
           Sp = Sp + 40;
           call GHC.Classes.$fOrd[]_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gBV_info" {
     block_c2gBV_info:
         const _c2gBV;
         const 773;
         const 30;
 },
 _c2gCn() //  [R1]
         { []
         }
     {offset
       c2gCn: // global
           if (R1 & 7 == 3) goto c2gCA; else goto c2gCw;
       c2gCA: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2gCw: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gCn_info" {
     block_c2gCn_info:
         const _c2gCn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.494087874 UTC

[section ""data" . GHC.Arr.$fOrdArray_$c>_closure" {
     GHC.Arr.$fOrdArray_$c>_closure:
         const GHC.Arr.$fOrdArray_$c>_info;
         const 0;
 },
 GHC.Arr.$fOrdArray_$c>_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2gF2: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2gF6; else goto c2gF7;
       c2gF6: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fOrdArray_$c>_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2gF7: // global
           I64[Sp - 32] = block_c2gEZ_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2gFf; else goto c2gF0;
       u2gFf: // global
           call _c2gEZ(R1) args: 0, res: 0, upd: 0;
       c2gF0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fOrdArray_$c>_info" {
     GHC.Arr.$fOrdArray_$c>_info:
         const GHC.Arr.$fOrdArray_$c>_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S2bMd_srt+712;
 },
 _c2gEZ() //  [R1]
         { []
         }
     {offset
       c2gEZ: // global
           I64[Sp - 24] = block_c2gF5_info;
           _s2bxk::P64 = P64[R1 + 7];
           _s2bxl::P64 = P64[R1 + 15];
           _s2bxn::P64 = P64[R1 + 23];
           _s2bxm::I64 = I64[R1 + 31];
           R1 = P64[Sp + 24];
           I64[Sp - 16] = _s2bxm::I64;
           P64[Sp - 8] = _s2bxn::P64;
           P64[Sp] = _s2bxl::P64;
           P64[Sp + 24] = _s2bxk::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2gFe; else goto c2gF9;
       u2gFe: // global
           call _c2gF5(R1) args: 0, res: 0, upd: 0;
       c2gF9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gEZ_info" {
     block_c2gEZ_info:
         const _c2gEZ;
         const 3;
         const 4294967326;
         const S2bMd_srt+712;
 },
 _c2gF5() //  [R1]
         { []
         }
     {offset
       c2gF5: // global
           R6 = I64[Sp + 8];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           P64[Sp + 24] = P64[R1 + 7];
           P64[Sp + 32] = P64[R1 + 15];
           I64[Sp + 40] = I64[R1 + 31];
           P64[Sp + 48] = P64[R1 + 23];
           Sp = Sp + 16;
           call GHC.Arr.$w$c>_entry(R6,
                                    R5,
                                    R4,
                                    R3,
                                    R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gF5_info" {
     block_c2gF5_info:
         const _c2gF5;
         const 70;
         const 4294967326;
         const S2bMd_srt+712;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.50974186 UTC

[section ""data" . GHC.Arr.$w$c<=_closure" {
     GHC.Arr.$w$c<=_closure:
         const GHC.Arr.$w$c<=_info;
         const 0;
 },
 GHC.Arr.$w$c<=_slow() //  [R1]
         { []
         }
     {offset
       c2gFA: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$w$c<=_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2,
                                     R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s2bxR_entry() //  [R1]
         { []
         }
     {offset
       c2gFX: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2gFY; else goto c2gFZ;
       c2gFY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gFZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c2gFV_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bxR_info" {
     sat_s2bxR_info:
         const sat_s2bxR_entry;
         const 4294967300;
         const 4294967311;
         const S2bMd_srt+616;
 },
 _c2gFV() //  [R1]
         { []
         }
     {offset
       c2gFV: // global
           _s2bxx::I64 = I64[Sp + 8];
           _s2bxK::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2bxK::I64)) goto c2gGc; else goto c2gGe;
       c2gGe: // global
           if (%MO_S_Ge_W64(_s2bxK::I64,
                            _s2bxx::I64)) goto c2gGc; else goto c2gGd;
       c2gGc: // global
           R3 = _s2bxx::I64;
           R2 = _s2bxK::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2gGd: // global
           R1 = P64[P64[Sp + 16] + ((_s2bxK::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2gFV_info" {
     block_c2gFV_info:
         const _c2gFV;
         const 66;
         const 4294967326;
         const S2bMd_srt+616;
 },
 go_s2bxE_entry() //  [R1, R2]
         { []
         }
     {offset
       c2gGj: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2gGk; else goto c2gGl;
       c2gGk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2gGl: // global
           I64[Sp - 48] = block_c2gFK_info;
           _s2bxE::P64 = R1;
           _s2bxt::P64 = P64[R1 + 7];
           _s2bxy::P64 = P64[R1 + 15];
           _s2bxD::P64 = P64[R1 + 23];
           _s2bxx::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s2bxt::P64;
           I64[Sp - 32] = _s2bxx::I64;
           P64[Sp - 24] = _s2bxy::P64;
           P64[Sp - 16] = _s2bxD::P64;
           P64[Sp - 8] = _s2bxE::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2gGt; else goto c2gFL;
       u2gGt: // global
           call _c2gFK(R1) args: 0, res: 0, upd: 0;
       c2gFL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s2bxE_info" {
     go_s2bxE_info:
         const go_s2bxE_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S2bMd_srt+616;
 },
 _c2gFK() //  [R1]
         { []
         }
     {offset
       c2gFK: // global
           if (R1 & 7 == 1) goto c2gGg; else goto c2gGh;
       c2gGg: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2gGh: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c2gGs; else goto c2gGr;
       c2gGs: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2gGr: // global
           _s2bxH::P64 = P64[R1 + 6];
           _s2bxI::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s2bxI::P64;
           I64[Hp - 96] = sat_s2bxR_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s2bxH::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s2bxH::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gFK_info" {
     block_c2gFK_info:
         const _c2gFK;
         const 133;
         const 4294967326;
         const S2bMd_srt+616;
 },
 sat_s2by8_entry() //  [R1]
         { []
         }
     {offset
       c2gGN: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2gGO; else goto c2gGP;
       c2gGO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gGP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c2gGL_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2by8_info" {
     sat_s2by8_info:
         const sat_s2by8_entry;
         const 4294967300;
         const 4294967311;
         const S2bMd_srt+616;
 },
 _c2gGL() //  [R1]
         { []
         }
     {offset
       c2gGL: // global
           _s2bxB::I64 = I64[Sp + 8];
           _s2by1::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2by1::I64)) goto c2gH2; else goto c2gH4;
       c2gH4: // global
           if (%MO_S_Ge_W64(_s2by1::I64,
                            _s2bxB::I64)) goto c2gH2; else goto c2gH3;
       c2gH2: // global
           R3 = _s2bxB::I64;
           R2 = _s2by1::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2gH3: // global
           R1 = P64[P64[Sp + 16] + ((_s2by1::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2gGL_info" {
     block_c2gGL_info:
         const _c2gGL;
         const 66;
         const 4294967326;
         const S2bMd_srt+616;
 },
 go1_s2bxV_entry() //  [R1, R2]
         { []
         }
     {offset
       c2gH9: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2gHa; else goto c2gHb;
       c2gHa: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2gHb: // global
           I64[Sp - 48] = block_c2gGA_info;
           _s2bxV::P64 = R1;
           _s2bxt::P64 = P64[R1 + 7];
           _s2bxC::P64 = P64[R1 + 15];
           _s2bxU::P64 = P64[R1 + 23];
           _s2bxB::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s2bxt::P64;
           I64[Sp - 32] = _s2bxB::I64;
           P64[Sp - 24] = _s2bxC::P64;
           P64[Sp - 16] = _s2bxU::P64;
           P64[Sp - 8] = _s2bxV::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2gHj; else goto c2gGB;
       u2gHj: // global
           call _c2gGA(R1) args: 0, res: 0, upd: 0;
       c2gGB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s2bxV_info" {
     go1_s2bxV_info:
         const go1_s2bxV_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S2bMd_srt+616;
 },
 _c2gGA() //  [R1]
         { []
         }
     {offset
       c2gGA: // global
           if (R1 & 7 == 1) goto c2gH6; else goto c2gH7;
       c2gH6: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2gH7: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c2gHi; else goto c2gHh;
       c2gHi: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2gHh: // global
           _s2bxY::P64 = P64[R1 + 6];
           _s2bxZ::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s2bxZ::P64;
           I64[Hp - 96] = sat_s2by8_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s2bxY::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s2bxY::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gGA_info" {
     block_c2gGA_info:
         const _c2gGA;
         const 133;
         const 4294967326;
         const S2bMd_srt+616;
 },
 sat_s2byb_entry() //  [R1]
         { []
         }
     {offset
       c2gHI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2gHJ; else goto c2gHK;
       c2gHJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gHK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2byb_info" {
     sat_s2byb_info:
         const sat_s2byb_entry;
         const 1;
         const 16;
 },
 sat_s2byc_entry() //  [R1]
         { []
         }
     {offset
       c2gHL: // global
           _s2byc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2gHM; else goto c2gHN;
       c2gHN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2gHP; else goto c2gHO;
       c2gHP: // global
           HpAlloc = 24;
           goto c2gHM;
       c2gHM: // global
           R1 = _s2byc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gHO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2byc::P64;
           _s2bxt::P64 = P64[_s2byc::P64 + 16];
           _s2bxu::P64 = P64[_s2byc::P64 + 24];
           I64[Hp - 16] = sat_s2byb_info;
           P64[Hp] = _s2bxt::P64;
           R3 = _s2bxu::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,)_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2byc_info" {
     sat_s2byc_info:
         const sat_s2byc_entry;
         const 2;
         const 18;
 },
 GHC.Arr.$w$c<=_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2gHQ: // global
           _s2bxx::I64 = R6;
           _s2bxw::P64 = R5;
           _s2bxv::P64 = R4;
           _s2bxu::P64 = R3;
           _s2bxt::P64 = R2;
           if ((Sp + -24) < SpLim) (likely: False) goto c2gHR; else goto c2gHS;
       c2gHS: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c2gHU; else goto c2gHT;
       c2gHU: // global
           HpAlloc = 128;
           goto c2gHR;
       c2gHR: // global
           R1 = GHC.Arr.$w$c<=_closure;
           P64[Sp - 40] = _s2bxt::P64;
           P64[Sp - 32] = _s2bxu::P64;
           P64[Sp - 24] = _s2bxv::P64;
           P64[Sp - 16] = _s2bxw::P64;
           I64[Sp - 8] = _s2bxx::I64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c2gHT: // global
           I64[Hp - 120] = (,)_con_info;
           P64[Hp - 112] = _s2bxv::P64;
           P64[Hp - 104] = _s2bxw::P64;
           I64[Hp - 96] = go_s2bxE_info;
           P64[Hp - 88] = _s2bxt::P64;
           P64[Hp - 80] = P64[Sp];
           _c2gFE::P64 = Hp - 119;
           P64[Hp - 72] = _c2gFE::P64;
           I64[Hp - 64] = _s2bxx::I64;
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = go1_s2bxV_info;
           P64[Hp - 24] = _s2bxt::P64;
           P64[Hp - 16] = P64[Sp + 32];
           _c2gGu::P64 = Hp - 55;
           P64[Hp - 8] = _c2gGu::P64;
           I64[Hp] = I64[Sp + 24];
           I64[Sp - 8] = block_c2gHk_info;
           R2 = _s2bxt::P64;
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = _c2gGu::P64;
           P64[Sp] = _s2bxu::P64;
           P64[Sp + 8] = _s2bxt::P64;
           P64[Sp + 16] = Hp - 31;
           P64[Sp + 24] = Hp - 95;
           P64[Sp + 32] = _c2gFE::P64;
           Sp = Sp - 24;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$c<=_info" {
     GHC.Arr.$w$c<=_info:
         const GHC.Arr.$w$c<=_entry;
         const 0;
         const 70373039144974;
         const 42949672960;
         const S2bMd_srt+616;
         const 17418;
         const GHC.Arr.$w$c<=_slow;
 },
 _c2gHk() //  [R1]
         { []
         }
     {offset
       c2gHk: // global
           I64[Sp] = block_c2gHo_info;
           R2 = R1;
           R1 = P64[Sp + 24];
           call go1_s2bxV_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gHk_info" {
     block_c2gHk_info:
         const _c2gHk;
         const 5;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2gHo() //  [R1]
         { []
         }
     {offset
       c2gHo: // global
           I64[Sp] = block_c2gHs_info;
           R2 = P64[Sp + 16];
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = P64[Sp + 40];
           P64[Sp + 40] = R1;
           Sp = Sp - 16;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gHo_info" {
     block_c2gHo_info:
         const _c2gHo;
         const 261;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2gHs() //  [R1]
         { []
         }
     {offset
       c2gHs: // global
           I64[Sp] = block_c2gHw_info;
           R2 = R1;
           R1 = P64[Sp + 32];
           call go_s2bxE_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gHs_info" {
     block_c2gHs_info:
         const _c2gHs;
         const 261;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2gHw() //  [R1]
         { []
         }
     {offset
       c2gHw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2gI1; else goto c2gI0;
       c2gI1: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2gI0: // global
           I64[Hp - 24] = sat_s2byc_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _s2byg::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_c2gHY_info;
           R4 = _s2byg::P64;
           R3 = R1;
           R2 = Hp - 24;
           Sp = Sp + 40;
           call GHC.Classes.$fOrd[]_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gHw_info" {
     block_c2gHw_info:
         const _c2gHw;
         const 773;
         const 30;
 },
 _c2gHY() //  [R1]
         { []
         }
     {offset
       c2gHY: // global
           if (R1 & 7 == 3) goto c2gIb; else goto c2gI7;
       c2gIb: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2gI7: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gHY_info" {
     block_c2gHY_info:
         const _c2gHY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.5433783 UTC

[section ""data" . GHC.Arr.$fOrdArray_$c<=_closure" {
     GHC.Arr.$fOrdArray_$c<=_closure:
         const GHC.Arr.$fOrdArray_$c<=_info;
         const 0;
 },
 GHC.Arr.$fOrdArray_$c<=_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2gKD: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2gKH; else goto c2gKI;
       c2gKH: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fOrdArray_$c<=_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2gKI: // global
           I64[Sp - 32] = block_c2gKA_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2gKQ; else goto c2gKB;
       u2gKQ: // global
           call _c2gKA(R1) args: 0, res: 0, upd: 0;
       c2gKB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fOrdArray_$c<=_info" {
     GHC.Arr.$fOrdArray_$c<=_info:
         const GHC.Arr.$fOrdArray_$c<=_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S2bMd_srt+728;
 },
 _c2gKA() //  [R1]
         { []
         }
     {offset
       c2gKA: // global
           I64[Sp - 24] = block_c2gKG_info;
           _s2byn::P64 = P64[R1 + 7];
           _s2byo::P64 = P64[R1 + 15];
           _s2byq::P64 = P64[R1 + 23];
           _s2byp::I64 = I64[R1 + 31];
           R1 = P64[Sp + 24];
           I64[Sp - 16] = _s2byp::I64;
           P64[Sp - 8] = _s2byq::P64;
           P64[Sp] = _s2byo::P64;
           P64[Sp + 24] = _s2byn::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2gKP; else goto c2gKK;
       u2gKP: // global
           call _c2gKG(R1) args: 0, res: 0, upd: 0;
       c2gKK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gKA_info" {
     block_c2gKA_info:
         const _c2gKA;
         const 3;
         const 4294967326;
         const S2bMd_srt+728;
 },
 _c2gKG() //  [R1]
         { []
         }
     {offset
       c2gKG: // global
           R6 = I64[Sp + 8];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 48];
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           P64[Sp + 24] = P64[R1 + 7];
           P64[Sp + 32] = P64[R1 + 15];
           I64[Sp + 40] = I64[R1 + 31];
           P64[Sp + 48] = P64[R1 + 23];
           Sp = Sp + 16;
           call GHC.Arr.$w$c<=_entry(R6,
                                     R5,
                                     R4,
                                     R3,
                                     R2) args: 48, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gKG_info" {
     block_c2gKG_info:
         const _c2gKG;
         const 70;
         const 4294967326;
         const S2bMd_srt+728;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.55992413 UTC

[section ""data" . GHC.Arr.$w$cmax_closure" {
     GHC.Arr.$w$cmax_closure:
         const GHC.Arr.$w$cmax_info;
         const 0;
 },
 GHC.Arr.$w$cmax_slow() //  [R1]
         { []
         }
     {offset
       c2gLb: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$w$cmax_entry(R6,
                                      R5,
                                      R4,
                                      R3,
                                      R2,
                                      R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s2byU_entry() //  [R1]
         { []
         }
     {offset
       c2gLy: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2gLz; else goto c2gLA;
       c2gLz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gLA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c2gLw_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2byU_info" {
     sat_s2byU_info:
         const sat_s2byU_entry;
         const 4294967300;
         const 4294967311;
         const S2bMd_srt+616;
 },
 _c2gLw() //  [R1]
         { []
         }
     {offset
       c2gLw: // global
           _s2byA::I64 = I64[Sp + 8];
           _s2byN::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2byN::I64)) goto c2gLN; else goto c2gLP;
       c2gLP: // global
           if (%MO_S_Ge_W64(_s2byN::I64,
                            _s2byA::I64)) goto c2gLN; else goto c2gLO;
       c2gLN: // global
           R3 = _s2byA::I64;
           R2 = _s2byN::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2gLO: // global
           R1 = P64[P64[Sp + 16] + ((_s2byN::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2gLw_info" {
     block_c2gLw_info:
         const _c2gLw;
         const 66;
         const 4294967326;
         const S2bMd_srt+616;
 },
 go_s2byH_entry() //  [R1, R2]
         { []
         }
     {offset
       c2gLU: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2gLV; else goto c2gLW;
       c2gLV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2gLW: // global
           I64[Sp - 48] = block_c2gLl_info;
           _s2byH::P64 = R1;
           _s2byw::P64 = P64[R1 + 7];
           _s2byB::P64 = P64[R1 + 15];
           _s2byG::P64 = P64[R1 + 23];
           _s2byA::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s2byw::P64;
           I64[Sp - 32] = _s2byA::I64;
           P64[Sp - 24] = _s2byB::P64;
           P64[Sp - 16] = _s2byG::P64;
           P64[Sp - 8] = _s2byH::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2gM4; else goto c2gLm;
       u2gM4: // global
           call _c2gLl(R1) args: 0, res: 0, upd: 0;
       c2gLm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s2byH_info" {
     go_s2byH_info:
         const go_s2byH_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S2bMd_srt+616;
 },
 _c2gLl() //  [R1]
         { []
         }
     {offset
       c2gLl: // global
           if (R1 & 7 == 1) goto c2gLR; else goto c2gLS;
       c2gLR: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2gLS: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c2gM3; else goto c2gM2;
       c2gM3: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2gM2: // global
           _s2byK::P64 = P64[R1 + 6];
           _s2byL::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s2byL::P64;
           I64[Hp - 96] = sat_s2byU_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s2byK::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s2byK::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gLl_info" {
     block_c2gLl_info:
         const _c2gLl;
         const 133;
         const 4294967326;
         const S2bMd_srt+616;
 },
 sat_s2bzb_entry() //  [R1]
         { []
         }
     {offset
       c2gMo: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2gMp; else goto c2gMq;
       c2gMp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gMq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c2gMm_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bzb_info" {
     sat_s2bzb_info:
         const sat_s2bzb_entry;
         const 4294967300;
         const 4294967311;
         const S2bMd_srt+616;
 },
 _c2gMm() //  [R1]
         { []
         }
     {offset
       c2gMm: // global
           _s2byE::I64 = I64[Sp + 8];
           _s2bz4::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2bz4::I64)) goto c2gMD; else goto c2gMF;
       c2gMF: // global
           if (%MO_S_Ge_W64(_s2bz4::I64,
                            _s2byE::I64)) goto c2gMD; else goto c2gME;
       c2gMD: // global
           R3 = _s2byE::I64;
           R2 = _s2bz4::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2gME: // global
           R1 = P64[P64[Sp + 16] + ((_s2bz4::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2gMm_info" {
     block_c2gMm_info:
         const _c2gMm;
         const 66;
         const 4294967326;
         const S2bMd_srt+616;
 },
 go1_s2byY_entry() //  [R1, R2]
         { []
         }
     {offset
       c2gMK: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2gML; else goto c2gMM;
       c2gML: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2gMM: // global
           I64[Sp - 48] = block_c2gMb_info;
           _s2byY::P64 = R1;
           _s2byw::P64 = P64[R1 + 7];
           _s2byF::P64 = P64[R1 + 15];
           _s2byX::P64 = P64[R1 + 23];
           _s2byE::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s2byw::P64;
           I64[Sp - 32] = _s2byE::I64;
           P64[Sp - 24] = _s2byF::P64;
           P64[Sp - 16] = _s2byX::P64;
           P64[Sp - 8] = _s2byY::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2gMU; else goto c2gMc;
       u2gMU: // global
           call _c2gMb(R1) args: 0, res: 0, upd: 0;
       c2gMc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s2byY_info" {
     go1_s2byY_info:
         const go1_s2byY_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S2bMd_srt+616;
 },
 _c2gMb() //  [R1]
         { []
         }
     {offset
       c2gMb: // global
           if (R1 & 7 == 1) goto c2gMH; else goto c2gMI;
       c2gMH: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2gMI: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c2gMT; else goto c2gMS;
       c2gMT: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2gMS: // global
           _s2bz1::P64 = P64[R1 + 6];
           _s2bz2::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s2bz2::P64;
           I64[Hp - 96] = sat_s2bzb_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s2bz1::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s2bz1::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gMb_info" {
     block_c2gMb_info:
         const _c2gMb;
         const 133;
         const 4294967326;
         const S2bMd_srt+616;
 },
 sat_s2bze_entry() //  [R1]
         { []
         }
     {offset
       c2gNj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2gNk; else goto c2gNl;
       c2gNk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gNl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bze_info" {
     sat_s2bze_info:
         const sat_s2bze_entry;
         const 1;
         const 16;
 },
 sat_s2bzf_entry() //  [R1]
         { []
         }
     {offset
       c2gNm: // global
           _s2bzf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2gNn; else goto c2gNo;
       c2gNo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2gNq; else goto c2gNp;
       c2gNq: // global
           HpAlloc = 24;
           goto c2gNn;
       c2gNn: // global
           R1 = _s2bzf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gNp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2bzf::P64;
           _s2byw::P64 = P64[_s2bzf::P64 + 16];
           _s2byx::P64 = P64[_s2bzf::P64 + 24];
           I64[Hp - 16] = sat_s2bze_info;
           P64[Hp] = _s2byw::P64;
           R3 = _s2byx::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,)_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bzf_info" {
     sat_s2bzf_info:
         const sat_s2bzf_entry;
         const 2;
         const 18;
 },
 GHC.Arr.$w$cmax_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2gNr: // global
           _s2byA::I64 = R6;
           _s2byz::P64 = R5;
           _s2byy::P64 = R4;
           _s2byx::P64 = R3;
           _s2byw::P64 = R2;
           if ((Sp + -88) < SpLim) (likely: False) goto c2gNs; else goto c2gNt;
       c2gNt: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c2gNv; else goto c2gNu;
       c2gNv: // global
           HpAlloc = 128;
           goto c2gNs;
       c2gNs: // global
           R1 = GHC.Arr.$w$cmax_closure;
           P64[Sp - 40] = _s2byw::P64;
           P64[Sp - 32] = _s2byx::P64;
           P64[Sp - 24] = _s2byy::P64;
           P64[Sp - 16] = _s2byz::P64;
           I64[Sp - 8] = _s2byA::I64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c2gNu: // global
           I64[Hp - 120] = (,)_con_info;
           P64[Hp - 112] = _s2byy::P64;
           P64[Hp - 104] = _s2byz::P64;
           I64[Hp - 96] = go_s2byH_info;
           P64[Hp - 88] = _s2byw::P64;
           P64[Hp - 80] = P64[Sp];
           _c2gLf::P64 = Hp - 119;
           P64[Hp - 72] = _c2gLf::P64;
           I64[Hp - 64] = _s2byA::I64;
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = go1_s2byY_info;
           P64[Hp - 24] = _s2byw::P64;
           P64[Hp - 16] = P64[Sp + 32];
           _c2gM5::P64 = Hp - 55;
           P64[Hp - 8] = _c2gM5::P64;
           I64[Hp] = I64[Sp + 24];
           I64[Sp - 72] = block_c2gMV_info;
           R2 = _s2byw::P64;
           I64[Sp - 88] = stg_ap_p_info;
           P64[Sp - 80] = _c2gM5::P64;
           P64[Sp - 64] = _c2gLf::P64;
           P64[Sp - 56] = Hp - 95;
           P64[Sp - 48] = Hp - 31;
           P64[Sp - 40] = _s2byw::P64;
           P64[Sp - 32] = _s2byx::P64;
           P64[Sp - 24] = _s2byy::P64;
           P64[Sp - 16] = _s2byz::P64;
           I64[Sp - 8] = _s2byA::I64;
           Sp = Sp - 88;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$cmax_info" {
     GHC.Arr.$w$cmax_info:
         const GHC.Arr.$w$cmax_entry;
         const 0;
         const 281479271677966;
         const 42949672960;
         const S2bMd_srt+616;
         const 17418;
         const GHC.Arr.$w$cmax_slow;
 },
 _c2gMV() //  [R1]
         { []
         }
     {offset
       c2gMV: // global
           I64[Sp] = block_c2gMZ_info;
           R2 = R1;
           R1 = P64[Sp + 24];
           call go1_s2byY_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gMV_info" {
     block_c2gMV_info:
         const _c2gMV;
         const 139277;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2gMZ() //  [R1]
         { []
         }
     {offset
       c2gMZ: // global
           _c2gLf::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2gN3_info;
           R2 = P64[Sp + 32];
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = _c2gLf::P64;
           P64[Sp + 24] = R1;
           Sp = Sp - 8;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gMZ_info" {
     block_c2gMZ_info:
         const _c2gMZ;
         const 139533;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2gN3() //  [R1]
         { []
         }
     {offset
       c2gN3: // global
           _c2gLg::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2gN7_info;
           R2 = R1;
           R1 = _c2gLg::P64;
           Sp = Sp + 8;
           call go_s2byH_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gN3_info" {
     block_c2gN3_info:
         const _c2gN3;
         const 69644;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2gN7() //  [R1]
         { []
         }
     {offset
       c2gN7: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2gNC; else goto c2gNB;
       c2gNC: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2gNB: // global
           I64[Hp - 24] = sat_s2bzf_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_c2gNz_info;
           R4 = P64[Sp + 8];
           R3 = R1;
           R2 = Hp - 24;
           Sp = Sp + 24;
           call GHC.Classes.$fOrd[]_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gN7_info" {
     block_c2gN7_info:
         const _c2gN7;
         const 34827;
         const 30;
 },
 _c2gNz() //  [R1]
         { []
         }
     {offset
       c2gNz: // global
           if (R1 & 7 == 3) goto c2gNM; else goto c2gNI;
       c2gNM: // global
           R4 = P64[Sp + 32];
           R3 = I64[Sp + 24];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2gNI: // global
           R4 = P64[Sp + 64];
           R3 = I64[Sp + 56];
           R2 = P64[Sp + 48];
           R1 = P64[Sp + 40];
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gNz_info" {
     block_c2gNz_info:
         const _c2gNz;
         const 4360;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.594494101 UTC

[section ""data" . GHC.Arr.$fOrdArray_$cmax_closure" {
     GHC.Arr.$fOrdArray_$cmax_closure:
         const GHC.Arr.$fOrdArray_$cmax_info;
         const 0;
 },
 GHC.Arr.$fOrdArray_$cmax_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2gQb: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2gQo; else goto c2gQp;
       c2gQo: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fOrdArray_$cmax_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2gQp: // global
           I64[Sp - 32] = block_c2gQ8_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2gQx; else goto c2gQ9;
       u2gQx: // global
           call _c2gQ8(R1) args: 0, res: 0, upd: 0;
       c2gQ9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fOrdArray_$cmax_info" {
     GHC.Arr.$fOrdArray_$cmax_info:
         const GHC.Arr.$fOrdArray_$cmax_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S2bMd_srt+744;
 },
 _c2gQ8() //  [R1]
         { []
         }
     {offset
       c2gQ8: // global
           I64[Sp - 24] = block_c2gQe_info;
           _s2bzq::P64 = P64[R1 + 7];
           _s2bzr::P64 = P64[R1 + 15];
           _s2bzt::P64 = P64[R1 + 23];
           _s2bzs::I64 = I64[R1 + 31];
           R1 = P64[Sp + 24];
           I64[Sp - 16] = _s2bzs::I64;
           P64[Sp - 8] = _s2bzt::P64;
           P64[Sp] = _s2bzr::P64;
           P64[Sp + 24] = _s2bzq::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2gQw; else goto c2gQf;
       u2gQw: // global
           call _c2gQe(R1) args: 0, res: 0, upd: 0;
       c2gQf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gQ8_info" {
     block_c2gQ8_info:
         const _c2gQ8;
         const 3;
         const 4294967326;
         const S2bMd_srt+744;
 },
 _c2gQe() //  [R1]
         { []
         }
     {offset
       c2gQe: // global
           _s2bzq::P64 = P64[Sp + 48];
           I64[Sp + 48] = block_c2gQj_info;
           R6 = I64[Sp + 8];
           R5 = P64[Sp + 24];
           R4 = _s2bzq::P64;
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 7];
           P64[Sp + 24] = P64[R1 + 15];
           I64[Sp + 32] = I64[R1 + 31];
           P64[Sp + 40] = P64[R1 + 23];
           Sp = Sp + 8;
           call GHC.Arr.$w$cmax_entry(R6,
                                      R5,
                                      R4,
                                      R3,
                                      R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gQe_info" {
     block_c2gQe_info:
         const _c2gQe;
         const 70;
         const 4294967326;
         const S2bMd_srt+744;
 },
 _c2gQj() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c2gQj: // global
           P64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call _c2gQk() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2gQj_info" {
     block_c2gQj_info:
         const _c2gQj;
         const 0;
         const 30;
 },
 _c2gQk() //  []
         { []
         }
     {offset
       c2gQk: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2gQu; else goto c2gQt;
       c2gQu: // global
           HpAlloc = 40;
           I64[Sp] = block_c2gQk_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2gQt: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gQk_info" {
     block_c2gQk_info:
         const _c2gQk;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.61404347 UTC

[section ""data" . GHC.Arr.$w$cmin_closure" {
     GHC.Arr.$w$cmin_closure:
         const GHC.Arr.$w$cmin_info;
         const 0;
 },
 GHC.Arr.$w$cmin_slow() //  [R1]
         { []
         }
     {offset
       c2gR8: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$w$cmin_entry(R6,
                                      R5,
                                      R4,
                                      R3,
                                      R2,
                                      R1) args: 48, res: 0, upd: 8;
     }
 },
 sat_s2bA2_entry() //  [R1]
         { []
         }
     {offset
       c2gRv: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2gRw; else goto c2gRx;
       c2gRw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gRx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c2gRt_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bA2_info" {
     sat_s2bA2_info:
         const sat_s2bA2_entry;
         const 4294967300;
         const 4294967311;
         const S2bMd_srt+616;
 },
 _c2gRt() //  [R1]
         { []
         }
     {offset
       c2gRt: // global
           _s2bzI::I64 = I64[Sp + 8];
           _s2bzV::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2bzV::I64)) goto c2gRK; else goto c2gRM;
       c2gRM: // global
           if (%MO_S_Ge_W64(_s2bzV::I64,
                            _s2bzI::I64)) goto c2gRK; else goto c2gRL;
       c2gRK: // global
           R3 = _s2bzI::I64;
           R2 = _s2bzV::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2gRL: // global
           R1 = P64[P64[Sp + 16] + ((_s2bzV::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2gRt_info" {
     block_c2gRt_info:
         const _c2gRt;
         const 66;
         const 4294967326;
         const S2bMd_srt+616;
 },
 go_s2bzP_entry() //  [R1, R2]
         { []
         }
     {offset
       c2gRR: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2gRS; else goto c2gRT;
       c2gRS: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2gRT: // global
           I64[Sp - 48] = block_c2gRi_info;
           _s2bzP::P64 = R1;
           _s2bzE::P64 = P64[R1 + 7];
           _s2bzJ::P64 = P64[R1 + 15];
           _s2bzO::P64 = P64[R1 + 23];
           _s2bzI::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s2bzE::P64;
           I64[Sp - 32] = _s2bzI::I64;
           P64[Sp - 24] = _s2bzJ::P64;
           P64[Sp - 16] = _s2bzO::P64;
           P64[Sp - 8] = _s2bzP::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2gS1; else goto c2gRj;
       u2gS1: // global
           call _c2gRi(R1) args: 0, res: 0, upd: 0;
       c2gRj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s2bzP_info" {
     go_s2bzP_info:
         const go_s2bzP_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S2bMd_srt+616;
 },
 _c2gRi() //  [R1]
         { []
         }
     {offset
       c2gRi: // global
           if (R1 & 7 == 1) goto c2gRO; else goto c2gRP;
       c2gRO: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2gRP: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c2gS0; else goto c2gRZ;
       c2gS0: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2gRZ: // global
           _s2bzS::P64 = P64[R1 + 6];
           _s2bzT::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s2bzT::P64;
           I64[Hp - 96] = sat_s2bA2_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s2bzS::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s2bzS::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gRi_info" {
     block_c2gRi_info:
         const _c2gRi;
         const 133;
         const 4294967326;
         const S2bMd_srt+616;
 },
 sat_s2bAj_entry() //  [R1]
         { []
         }
     {offset
       c2gSl: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2gSm; else goto c2gSn;
       c2gSm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gSn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c2gSj_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bAj_info" {
     sat_s2bAj_info:
         const sat_s2bAj_entry;
         const 4294967300;
         const 4294967311;
         const S2bMd_srt+616;
 },
 _c2gSj() //  [R1]
         { []
         }
     {offset
       c2gSj: // global
           _s2bzM::I64 = I64[Sp + 8];
           _s2bAc::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2bAc::I64)) goto c2gSA; else goto c2gSC;
       c2gSC: // global
           if (%MO_S_Ge_W64(_s2bAc::I64,
                            _s2bzM::I64)) goto c2gSA; else goto c2gSB;
       c2gSA: // global
           R3 = _s2bzM::I64;
           R2 = _s2bAc::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2gSB: // global
           R1 = P64[P64[Sp + 16] + ((_s2bAc::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2gSj_info" {
     block_c2gSj_info:
         const _c2gSj;
         const 66;
         const 4294967326;
         const S2bMd_srt+616;
 },
 go1_s2bA6_entry() //  [R1, R2]
         { []
         }
     {offset
       c2gSH: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2gSI; else goto c2gSJ;
       c2gSI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2gSJ: // global
           I64[Sp - 48] = block_c2gS8_info;
           _s2bA6::P64 = R1;
           _s2bzE::P64 = P64[R1 + 7];
           _s2bzN::P64 = P64[R1 + 15];
           _s2bA5::P64 = P64[R1 + 23];
           _s2bzM::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s2bzE::P64;
           I64[Sp - 32] = _s2bzM::I64;
           P64[Sp - 24] = _s2bzN::P64;
           P64[Sp - 16] = _s2bA5::P64;
           P64[Sp - 8] = _s2bA6::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2gSR; else goto c2gS9;
       u2gSR: // global
           call _c2gS8(R1) args: 0, res: 0, upd: 0;
       c2gS9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_s2bA6_info" {
     go1_s2bA6_info:
         const go1_s2bA6_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S2bMd_srt+616;
 },
 _c2gS8() //  [R1]
         { []
         }
     {offset
       c2gS8: // global
           if (R1 & 7 == 1) goto c2gSE; else goto c2gSF;
       c2gSE: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2gSF: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c2gSQ; else goto c2gSP;
       c2gSQ: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2gSP: // global
           _s2bA9::P64 = P64[R1 + 6];
           _s2bAa::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s2bAa::P64;
           I64[Hp - 96] = sat_s2bAj_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s2bA9::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s2bA9::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gS8_info" {
     block_c2gS8_info:
         const _c2gS8;
         const 133;
         const 4294967326;
         const S2bMd_srt+616;
 },
 sat_s2bAm_entry() //  [R1]
         { []
         }
     {offset
       c2gTg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2gTh; else goto c2gTi;
       c2gTh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gTi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$p1Ix_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bAm_info" {
     sat_s2bAm_info:
         const sat_s2bAm_entry;
         const 1;
         const 16;
 },
 sat_s2bAn_entry() //  [R1]
         { []
         }
     {offset
       c2gTj: // global
           _s2bAn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2gTk; else goto c2gTl;
       c2gTl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2gTn; else goto c2gTm;
       c2gTn: // global
           HpAlloc = 24;
           goto c2gTk;
       c2gTk: // global
           R1 = _s2bAn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gTm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2bAn::P64;
           _s2bzE::P64 = P64[_s2bAn::P64 + 16];
           _s2bzF::P64 = P64[_s2bAn::P64 + 24];
           I64[Hp - 16] = sat_s2bAm_info;
           P64[Hp] = _s2bzE::P64;
           R3 = _s2bzF::P64;
           R2 = Hp - 16;
           Sp = Sp - 16;
           call GHC.Classes.$fOrd(,)_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bAn_info" {
     sat_s2bAn_info:
         const sat_s2bAn_entry;
         const 2;
         const 18;
 },
 GHC.Arr.$w$cmin_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2gTo: // global
           _s2bzI::I64 = R6;
           _s2bzH::P64 = R5;
           _s2bzG::P64 = R4;
           _s2bzF::P64 = R3;
           _s2bzE::P64 = R2;
           if ((Sp + -88) < SpLim) (likely: False) goto c2gTp; else goto c2gTq;
       c2gTq: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c2gTs; else goto c2gTr;
       c2gTs: // global
           HpAlloc = 128;
           goto c2gTp;
       c2gTp: // global
           R1 = GHC.Arr.$w$cmin_closure;
           P64[Sp - 40] = _s2bzE::P64;
           P64[Sp - 32] = _s2bzF::P64;
           P64[Sp - 24] = _s2bzG::P64;
           P64[Sp - 16] = _s2bzH::P64;
           I64[Sp - 8] = _s2bzI::I64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 88, res: 0, upd: 8;
       c2gTr: // global
           I64[Hp - 120] = (,)_con_info;
           P64[Hp - 112] = _s2bzG::P64;
           P64[Hp - 104] = _s2bzH::P64;
           I64[Hp - 96] = go_s2bzP_info;
           P64[Hp - 88] = _s2bzE::P64;
           P64[Hp - 80] = P64[Sp];
           _c2gRc::P64 = Hp - 119;
           P64[Hp - 72] = _c2gRc::P64;
           I64[Hp - 64] = _s2bzI::I64;
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = P64[Sp + 16];
           I64[Hp - 32] = go1_s2bA6_info;
           P64[Hp - 24] = _s2bzE::P64;
           P64[Hp - 16] = P64[Sp + 32];
           _c2gS2::P64 = Hp - 55;
           P64[Hp - 8] = _c2gS2::P64;
           I64[Hp] = I64[Sp + 24];
           I64[Sp - 72] = block_c2gSS_info;
           R2 = _s2bzE::P64;
           I64[Sp - 88] = stg_ap_p_info;
           P64[Sp - 80] = _c2gS2::P64;
           P64[Sp - 64] = _c2gRc::P64;
           P64[Sp - 56] = Hp - 95;
           P64[Sp - 48] = Hp - 31;
           P64[Sp - 40] = _s2bzE::P64;
           P64[Sp - 32] = _s2bzF::P64;
           P64[Sp - 24] = _s2bzG::P64;
           P64[Sp - 16] = _s2bzH::P64;
           I64[Sp - 8] = _s2bzI::I64;
           Sp = Sp - 88;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$cmin_info" {
     GHC.Arr.$w$cmin_info:
         const GHC.Arr.$w$cmin_entry;
         const 0;
         const 1125904201809934;
         const 42949672960;
         const S2bMd_srt+616;
         const 17418;
         const GHC.Arr.$w$cmin_slow;
 },
 _c2gSS() //  [R1]
         { []
         }
     {offset
       c2gSS: // global
           I64[Sp] = block_c2gSW_info;
           R2 = R1;
           R1 = P64[Sp + 24];
           call go1_s2bA6_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gSS_info" {
     block_c2gSS_info:
         const _c2gSS;
         const 139277;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2gSW() //  [R1]
         { []
         }
     {offset
       c2gSW: // global
           _c2gRc::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2gT0_info;
           R2 = P64[Sp + 32];
           I64[Sp - 8] = stg_ap_p_info;
           P64[Sp] = _c2gRc::P64;
           P64[Sp + 24] = R1;
           Sp = Sp - 8;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gSW_info" {
     block_c2gSW_info:
         const _c2gSW;
         const 139533;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2gT0() //  [R1]
         { []
         }
     {offset
       c2gT0: // global
           _c2gRd::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2gT4_info;
           R2 = R1;
           R1 = _c2gRd::P64;
           Sp = Sp + 8;
           call go_s2bzP_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gT0_info" {
     block_c2gT0_info:
         const _c2gT0;
         const 69644;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2gT4() //  [R1]
         { []
         }
     {offset
       c2gT4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2gTz; else goto c2gTy;
       c2gTz: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2gTy: // global
           I64[Hp - 24] = sat_s2bAn_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_c2gTw_info;
           R4 = P64[Sp + 8];
           R3 = R1;
           R2 = Hp - 24;
           Sp = Sp + 24;
           call GHC.Classes.$fOrd[]_$ccompare_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gT4_info" {
     block_c2gT4_info:
         const _c2gT4;
         const 34827;
         const 30;
 },
 _c2gTw() //  [R1]
         { []
         }
     {offset
       c2gTw: // global
           if (R1 & 7 == 3) goto c2gTJ; else goto c2gTF;
       c2gTJ: // global
           R4 = P64[Sp + 64];
           R3 = I64[Sp + 56];
           R2 = P64[Sp + 48];
           R1 = P64[Sp + 40];
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2gTF: // global
           R4 = P64[Sp + 32];
           R3 = I64[Sp + 24];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gTw_info" {
     block_c2gTw_info:
         const _c2gTw;
         const 4360;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.648496695 UTC

[section ""data" . GHC.Arr.$fOrdArray_$cmin_closure" {
     GHC.Arr.$fOrdArray_$cmin_closure:
         const GHC.Arr.$fOrdArray_$cmin_info;
         const 0;
 },
 GHC.Arr.$fOrdArray_$cmin_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2gW8: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2gWl; else goto c2gWm;
       c2gWl: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fOrdArray_$cmin_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2gWm: // global
           I64[Sp - 32] = block_c2gW5_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2gWu; else goto c2gW6;
       u2gWu: // global
           call _c2gW5(R1) args: 0, res: 0, upd: 0;
       c2gW6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fOrdArray_$cmin_info" {
     GHC.Arr.$fOrdArray_$cmin_info:
         const GHC.Arr.$fOrdArray_$cmin_entry;
         const 0;
         const 12884901902;
         const 17179869208;
         const S2bMd_srt+760;
 },
 _c2gW5() //  [R1]
         { []
         }
     {offset
       c2gW5: // global
           I64[Sp - 24] = block_c2gWb_info;
           _s2bAy::P64 = P64[R1 + 7];
           _s2bAz::P64 = P64[R1 + 15];
           _s2bAB::P64 = P64[R1 + 23];
           _s2bAA::I64 = I64[R1 + 31];
           R1 = P64[Sp + 24];
           I64[Sp - 16] = _s2bAA::I64;
           P64[Sp - 8] = _s2bAB::P64;
           P64[Sp] = _s2bAz::P64;
           P64[Sp + 24] = _s2bAy::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2gWt; else goto c2gWc;
       u2gWt: // global
           call _c2gWb(R1) args: 0, res: 0, upd: 0;
       c2gWc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gW5_info" {
     block_c2gW5_info:
         const _c2gW5;
         const 3;
         const 4294967326;
         const S2bMd_srt+760;
 },
 _c2gWb() //  [R1]
         { []
         }
     {offset
       c2gWb: // global
           _s2bAy::P64 = P64[Sp + 48];
           I64[Sp + 48] = block_c2gWg_info;
           R6 = I64[Sp + 8];
           R5 = P64[Sp + 24];
           R4 = _s2bAy::P64;
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 32];
           P64[Sp + 8] = P64[Sp + 16];
           P64[Sp + 16] = P64[R1 + 7];
           P64[Sp + 24] = P64[R1 + 15];
           I64[Sp + 32] = I64[R1 + 31];
           P64[Sp + 40] = P64[R1 + 23];
           Sp = Sp + 8;
           call GHC.Arr.$w$cmin_entry(R6,
                                      R5,
                                      R4,
                                      R3,
                                      R2) args: 48, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gWb_info" {
     block_c2gWb_info:
         const _c2gWb;
         const 70;
         const 4294967326;
         const S2bMd_srt+760;
 },
 _c2gWg() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       c2gWg: // global
           P64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           P64[Sp] = R1;
           Sp = Sp - 32;
           call _c2gWh() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2gWg_info" {
     block_c2gWg_info:
         const _c2gWg;
         const 0;
         const 30;
 },
 _c2gWh() //  []
         { []
         }
     {offset
       c2gWh: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2gWr; else goto c2gWq;
       c2gWr: // global
           HpAlloc = 40;
           I64[Sp] = block_c2gWh_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2gWq: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gWh_info" {
     block_c2gWh_info:
         const _c2gWh;
         const 132;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.663078104 UTC

[section ""data" . GHC.Arr.$fOrdArray_closure" {
     GHC.Arr.$fOrdArray_closure:
         const GHC.Arr.$fOrdArray_info;
         const 0;
 },
 sat_s2bAV_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2gXd: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fOrdArray_$cmin_entry(R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2bAV_info" {
     sat_s2bAV_info:
         const sat_s2bAV_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S2bMd_srt+768;
 },
 sat_s2bAU_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2gXl: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fOrdArray_$cmax_entry(R5,
                                               R4,
                                               R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2bAU_info" {
     sat_s2bAU_info:
         const sat_s2bAU_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S2bMd_srt+752;
 },
 sat_s2bAT_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2gXt: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fOrdArray_$c>=_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2bAT_info" {
     sat_s2bAT_info:
         const sat_s2bAT_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S2bMd_srt+704;
 },
 sat_s2bAS_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2gXB: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fOrdArray_$c>_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2bAS_info" {
     sat_s2bAS_info:
         const sat_s2bAS_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S2bMd_srt+720;
 },
 sat_s2bAR_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2gXJ: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fOrdArray_$c<=_entry(R5,
                                              R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2bAR_info" {
     sat_s2bAR_info:
         const sat_s2bAR_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S2bMd_srt+736;
 },
 sat_s2bAQ_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2gXR: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fOrdArray_$c<_entry(R5,
                                             R4,
                                             R3,
                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2bAQ_info" {
     sat_s2bAQ_info:
         const sat_s2bAQ_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S2bMd_srt+688;
 },
 sat_s2bAP_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2gXZ: // global
           R5 = R3;
           R4 = R2;
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.cmpArray_entry(R5,
                                       R4,
                                       R3,
                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2bAP_info" {
     sat_s2bAP_info:
         const sat_s2bAP_entry;
         const 2;
         const 4294967307;
         const 8589934607;
         const S2bMd_srt+672;
 },
 sat_s2bAO_entry() //  [R1]
         { []
         }
     {offset
       c2gY6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2gY7; else goto c2gY8;
       c2gY7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gY8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Arr.$fOrdArray_$cp1Ord_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bAO_info" {
     sat_s2bAO_info:
         const sat_s2bAO_entry;
         const 2;
         const 18;
 },
 GHC.Arr.$fOrdArray_entry() //  [R2, R3]
         { []
         }
     {offset
       c2gYa: // global
           Hp = Hp + 272;
           if (Hp > HpLim) (likely: False) goto c2gYe; else goto c2gYd;
       c2gYe: // global
           HpAlloc = 272;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fOrdArray_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2gYd: // global
           I64[Hp - 264] = sat_s2bAV_info;
           P64[Hp - 256] = R2;
           P64[Hp - 248] = R3;
           I64[Hp - 240] = sat_s2bAU_info;
           P64[Hp - 232] = R2;
           P64[Hp - 224] = R3;
           I64[Hp - 216] = sat_s2bAT_info;
           P64[Hp - 208] = R2;
           P64[Hp - 200] = R3;
           I64[Hp - 192] = sat_s2bAS_info;
           P64[Hp - 184] = R2;
           P64[Hp - 176] = R3;
           I64[Hp - 168] = sat_s2bAR_info;
           P64[Hp - 160] = R2;
           P64[Hp - 152] = R3;
           I64[Hp - 144] = sat_s2bAQ_info;
           P64[Hp - 136] = R2;
           P64[Hp - 128] = R3;
           I64[Hp - 120] = sat_s2bAP_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           I64[Hp - 96] = sat_s2bAO_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           I64[Hp - 64] = GHC.Classes.C:Ord_con_info;
           P64[Hp - 56] = Hp - 96;
           P64[Hp - 48] = Hp - 118;
           P64[Hp - 40] = Hp - 142;
           P64[Hp - 32] = Hp - 166;
           P64[Hp - 24] = Hp - 190;
           P64[Hp - 16] = Hp - 214;
           P64[Hp - 8] = Hp - 238;
           P64[Hp] = Hp - 262;
           R1 = Hp - 63;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fOrdArray_info" {
     GHC.Arr.$fOrdArray_info:
         const GHC.Arr.$fOrdArray_entry;
         const 0;
         const 58639188492302;
         const 8589934607;
         const S2bMd_srt+672;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.678255116 UTC

[section ""cstring" . lvl49_r1Xwl_bytes" {
     lvl49_r1Xwl_bytes:
         I8[] [97,114,114,97,121,32]
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.699015609 UTC

[section ""data" . GHC.Arr.$w$cshowsPrec_closure" {
     GHC.Arr.$w$cshowsPrec_closure:
         const GHC.Arr.$w$cshowsPrec_info;
         const 0;
 },
 GHC.Arr.$w$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       c2gZ3: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.$w$cshowsPrec_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2,
                                            R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2bBl_entry() //  [R1]
         { []
         }
     {offset
       c2gZz: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2gZA; else goto c2gZB;
       c2gZA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2gZB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_c2gZx_info;
           R2 = P64[R1 + 16];
           I64[Sp - 64] = stg_ap_pp_info;
           P64[Sp - 56] = P64[R1 + 32];
           P64[Sp - 48] = P64[R1 + 40];
           I64[Sp - 32] = I64[R1 + 48];
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 64;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bBl_info" {
     sat_s2bBl_info:
         const sat_s2bBl_entry;
         const 4294967300;
         const 4294967311;
         const S2bMd_srt+616;
 },
 _c2gZx() //  [R1]
         { []
         }
     {offset
       c2gZx: // global
           _s2bB5::I64 = I64[Sp + 8];
           _s2bBe::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2bBe::I64)) goto c2gZO; else goto c2gZQ;
       c2gZQ: // global
           if (%MO_S_Ge_W64(_s2bBe::I64,
                            _s2bB5::I64)) goto c2gZO; else goto c2gZP;
       c2gZO: // global
           R3 = _s2bB5::I64;
           R2 = _s2bBe::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2gZP: // global
           R1 = P64[P64[Sp + 16] + ((_s2bBe::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2gZx_info" {
     block_c2gZx_info:
         const _c2gZx;
         const 66;
         const 4294967326;
         const S2bMd_srt+616;
 },
 go_s2bB8_entry() //  [R1, R2]
         { []
         }
     {offset
       c2gZV: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2gZW; else goto c2gZX;
       c2gZW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2gZX: // global
           I64[Sp - 48] = block_c2gZm_info;
           _s2bB8::P64 = R1;
           _s2bAW::P64 = P64[R1 + 7];
           _s2bB6::P64 = P64[R1 + 15];
           _s2bB7::P64 = P64[R1 + 23];
           _s2bB5::I64 = I64[R1 + 31];
           R1 = R2;
           P64[Sp - 40] = _s2bAW::P64;
           I64[Sp - 32] = _s2bB5::I64;
           P64[Sp - 24] = _s2bB6::P64;
           P64[Sp - 16] = _s2bB7::P64;
           P64[Sp - 8] = _s2bB8::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2h05; else goto c2gZn;
       u2h05: // global
           call _c2gZm(R1) args: 0, res: 0, upd: 0;
       c2gZn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_s2bB8_info" {
     go_s2bB8_info:
         const go_s2bB8_entry;
         const 4294967299;
         const 4294967304;
         const 4294967301;
         const S2bMd_srt+616;
 },
 _c2gZm() //  [R1]
         { []
         }
     {offset
       c2gZm: // global
           if (R1 & 7 == 1) goto c2gZS; else goto c2gZT;
       c2gZS: // global
           R1 = []_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2gZT: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c2h04; else goto c2h03;
       c2h04: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2h03: // global
           _s2bBb::P64 = P64[R1 + 6];
           _s2bBc::P64 = P64[R1 + 14];
           I64[Hp - 128] = stg_ap_2_upd_info;
           P64[Hp - 112] = P64[Sp + 40];
           P64[Hp - 104] = _s2bBc::P64;
           I64[Hp - 96] = sat_s2bBl_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = P64[Sp + 24];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = _s2bBb::P64;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = _s2bBb::P64;
           P64[Hp - 24] = Hp - 96;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 128;
           R1 = Hp - 14;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2gZm_info" {
     block_c2gZm_info:
         const _c2gZm;
         const 133;
         const 4294967326;
         const S2bMd_srt+616;
 },
 ls_s2bB1_entry() //  [R1]
         { []
         }
     {offset
       c2h06: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2h08; else goto c2h09;
       c2h08: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2h09: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c2gZb_info;
           _s2bAW::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _s2bAW::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2h0h; else goto c2gZc;
       u2h0h: // global
           call _c2gZb(R1) args: 0, res: 0, upd: 0;
       c2gZc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ls_s2bB1_info" {
     ls_s2bB1_info:
         const ls_s2bB1_entry;
         const 2;
         const 4294967314;
         const S2bMd_srt+616;
 },
 _c2gZb() //  [R1]
         { []
         }
     {offset
       c2gZb: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c2h0c; else goto c2h0b;
       c2h0c: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2h0b: // global
           _s2bB3::P64 = P64[R1 + 7];
           _s2bB4::P64 = P64[R1 + 15];
           _s2bB6::P64 = P64[R1 + 23];
           _s2bB5::I64 = I64[R1 + 31];
           I64[Hp - 56] = (,)_con_info;
           P64[Hp - 48] = _s2bB3::P64;
           P64[Hp - 40] = _s2bB4::P64;
           I64[Hp - 32] = go_s2bB8_info;
           _s2bAW::P64 = P64[Sp + 8];
           P64[Hp - 24] = _s2bAW::P64;
           P64[Hp - 16] = _s2bB6::P64;
           _c2gZg::P64 = Hp - 55;
           P64[Hp - 8] = _c2gZg::P64;
           I64[Hp] = _s2bB5::I64;
           I64[Sp] = block_c2h07_info;
           R2 = _s2bAW::P64;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = _c2gZg::P64;
           P64[Sp + 8] = Hp - 31;
           Sp = Sp - 16;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c2gZb_info" {
     block_c2gZb_info:
         const _c2gZb;
         const 1;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2h07() //  [R1]
         { []
         }
     {offset
       c2h07: // global
           R2 = R1;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call go_s2bB8_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2h07_info" {
     block_c2h07_info:
         const _c2h07;
         const 1;
         const 4294967326;
         const S2bMd_srt+616;
 },
 sat_s2bBU_entry() //  [R1]
         { []
         }
     {offset
       c2h1w: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2h1x; else goto c2h1y;
       c2h1x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2h1y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bBU_info" {
     sat_s2bBU_info:
         const sat_s2bBU_entry;
         const 2;
         const 18;
 },
 sat_s2bBT_entry() //  [R1]
         { []
         }
     {offset
       c2h1E: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2h1F; else goto c2h1G;
       c2h1F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2h1G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bBT_info" {
     sat_s2bBT_info:
         const sat_s2bBT_entry;
         const 2;
         const 18;
 },
 sat_s2bBZ_entry() //  [R1]
         { []
         }
     {offset
       c2h1I: // global
           _s2bBZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2h1J; else goto c2h1K;
       c2h1K: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto c2h1M; else goto c2h1L;
       c2h1M: // global
           HpAlloc = 168;
           goto c2h1J;
       c2h1J: // global
           R1 = _s2bBZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2h1L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2bBZ::P64;
           _s2bAX::P64 = P64[_s2bBZ::P64 + 16];
           _s2bAY::P64 = P64[_s2bBZ::P64 + 24];
           _s2bBL::P64 = P64[_s2bBZ::P64 + 32];
           _s2bBP::P64 = P64[_s2bBZ::P64 + 40];
           _s2bBR::P64 = P64[_s2bBZ::P64 + 48];
           _s2bBS::P64 = P64[_s2bBZ::P64 + 56];
           I64[Hp - 160] = stg_ap_2_upd_info;
           P64[Hp - 144] = _s2bBL::P64;
           P64[Hp - 136] = _s2bBP::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 112] = Hp - 160;
           I64[Hp - 104] = sat_s2bBU_info;
           P64[Hp - 88] = _s2bAY::P64;
           P64[Hp - 80] = _s2bBS::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = GHC.Types.[]_closure+1;
           I64[Hp - 48] = sat_s2bBT_info;
           P64[Hp - 32] = _s2bAX::P64;
           P64[Hp - 24] = _s2bBR::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 126;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bBZ_info" {
     sat_s2bBZ_info:
         const sat_s2bBZ_entry;
         const 6;
         const 4294967311;
         const S2bMd_srt+784;
 },
 sat_s2bC0_entry() //  [R1]
         { []
         }
     {offset
       c2h1N: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2h1P; else goto c2h1Q;
       c2h1P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2h1Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_c2h1h_info;
           _s2bAX::P64 = P64[R1 + 16];
           _s2bAY::P64 = P64[R1 + 24];
           _s2bBL::P64 = P64[R1 + 32];
           _s2bBP::P64 = P64[R1 + 48];
           R1 = P64[R1 + 40];
           P64[Sp - 48] = _s2bAX::P64;
           P64[Sp - 40] = _s2bAY::P64;
           P64[Sp - 32] = _s2bBL::P64;
           P64[Sp - 24] = _s2bBP::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u2h1U; else goto c2h1i;
       u2h1U: // global
           call _c2h1h(R1) args: 0, res: 0, upd: 0;
       c2h1i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bC0_info" {
     sat_s2bC0_info:
         const sat_s2bC0_entry;
         const 5;
         const 4294967311;
         const S2bMd_srt+784;
 },
 _c2h1h() //  [R1]
         { []
         }
     {offset
       c2h1h: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2h1T; else goto c2h1S;
       c2h1T: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2h1S: // global
           _s2bBR::P64 = P64[R1 + 7];
           _s2bBS::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_s2bBZ_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _s2bBR::P64;
           P64[Hp - 24] = _s2bBS::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2h1h_info" {
     block_c2h1h_info:
         const _c2h1h;
         const 4;
         const 4294967326;
         const S2bMd_srt+784;
 },
 showl_s2bBL_entry() //  [R1, R2]
         { []
         }
     {offset
       c2h1Z: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2h20; else goto c2h21;
       c2h20: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2h21: // global
           I64[Sp - 40] = block_c2h17_info;
           _s2bBL::P64 = R1;
           _s2bAX::P64 = P64[R1 + 7];
           _s2bAY::P64 = P64[R1 + 15];
           _s2bBK::P64 = P64[R1 + 23];
           R1 = R2;
           P64[Sp - 32] = _s2bAX::P64;
           P64[Sp - 24] = _s2bAY::P64;
           P64[Sp - 16] = _s2bBK::P64;
           P64[Sp - 8] = _s2bBL::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2h28; else goto c2h18;
       u2h28: // global
           call _c2h17(R1) args: 0, res: 0, upd: 0;
       c2h18: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . showl_s2bBL_info" {
     showl_s2bBL_info:
         const showl_s2bBL_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S2bMd_srt+784;
 },
 _c2h17() //  [R1]
         { []
         }
     {offset
       c2h17: // global
           if (R1 & 7 == 1) goto c2h1W; else goto c2h1X;
       c2h1W: // global
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2h1X: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c2h27; else goto c2h26;
       c2h27: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2h26: // global
           _s2bBO::P64 = P64[R1 + 6];
           _s2bBP::P64 = P64[R1 + 14];
           I64[Hp - 72] = sat_s2bC0_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _s2bBO::P64;
           P64[Hp - 24] = _s2bBP::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__1_closure;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2h17_info" {
     block_c2h17_info:
         const _c2h17;
         const 4;
         const 4294967326;
         const S2bMd_srt+784;
 },
 sat_s2bC1_entry() //  [R1]
         { []
         }
     {offset
       c2h29: // global
           _s2bC1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2h2a; else goto c2h2b;
       c2h2b: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c2h2d; else goto c2h2c;
       c2h2d: // global
           HpAlloc = 56;
           goto c2h2a;
       c2h2a: // global
           R1 = _s2bC1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2h2c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2bC1::P64;
           _s2bAX::P64 = P64[_s2bC1::P64 + 16];
           _s2bAY::P64 = P64[_s2bC1::P64 + 24];
           _s2bBq::P64 = P64[_s2bC1::P64 + 32];
           _s2bBC::P64 = P64[_s2bC1::P64 + 40];
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = GHC.Show.showList__2_closure;
           P64[Hp - 32] = _s2bBq::P64;
           I64[Hp - 24] = showl_s2bBL_info;
           P64[Hp - 16] = _s2bAX::P64;
           P64[Hp - 8] = _s2bAY::P64;
           P64[Hp] = Hp - 46;
           R2 = _s2bBC::P64;
           R1 = Hp - 23;
           Sp = Sp - 16;
           call showl_s2bBL_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bC1_info" {
     sat_s2bC1_info:
         const sat_s2bC1_entry;
         const 4;
         const 4294967311;
         const S2bMd_srt+784;
 },
 sat_s2bBH_entry() //  [R1]
         { []
         }
     {offset
       c2h2j: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2h2k; else goto c2h2l;
       c2h2k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2h2l: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bBH_info" {
     sat_s2bBH_info:
         const sat_s2bBH_entry;
         const 2;
         const 18;
 },
 sat_s2bBG_entry() //  [R1]
         { []
         }
     {offset
       c2h2r: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2h2s; else goto c2h2t;
       c2h2s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2h2t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bBG_info" {
     sat_s2bBG_info:
         const sat_s2bBG_entry;
         const 2;
         const 18;
 },
 sat_s2bC3_entry() //  [R1]
         { []
         }
     {offset
       c2h2v: // global
           _s2bC3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2h2w; else goto c2h2x;
       c2h2x: // global
           Hp = Hp + 184;
           if (Hp > HpLim) (likely: False) goto c2h2z; else goto c2h2y;
       c2h2z: // global
           HpAlloc = 184;
           goto c2h2w;
       c2h2w: // global
           R1 = _s2bC3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2h2y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2bC3::P64;
           _s2bAX::P64 = P64[_s2bC3::P64 + 16];
           _s2bAY::P64 = P64[_s2bC3::P64 + 24];
           _s2bBq::P64 = P64[_s2bC3::P64 + 32];
           _s2bBC::P64 = P64[_s2bC3::P64 + 40];
           _s2bBE::P64 = P64[_s2bC3::P64 + 48];
           _s2bBF::P64 = P64[_s2bC3::P64 + 56];
           I64[Hp - 176] = sat_s2bC1_info;
           P64[Hp - 160] = _s2bAX::P64;
           P64[Hp - 152] = _s2bAY::P64;
           P64[Hp - 144] = _s2bBq::P64;
           P64[Hp - 136] = _s2bBC::P64;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 112] = Hp - 176;
           I64[Hp - 104] = sat_s2bBH_info;
           P64[Hp - 88] = _s2bAY::P64;
           P64[Hp - 80] = _s2bBF::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = GHC.Types.[]_closure+1;
           I64[Hp - 48] = sat_s2bBG_info;
           P64[Hp - 32] = _s2bAX::P64;
           P64[Hp - 24] = _s2bBE::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 126;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bC3_info" {
     sat_s2bC3_info:
         const sat_s2bC3_entry;
         const 6;
         const 4294967311;
         const S2bMd_srt+784;
 },
 sat_s2bC4_entry() //  [R1]
         { []
         }
     {offset
       c2h2A: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2h2C; else goto c2h2D;
       c2h2C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2h2D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_c2h0O_info;
           _s2bAX::P64 = P64[R1 + 16];
           _s2bAY::P64 = P64[R1 + 24];
           _s2bBq::P64 = P64[R1 + 32];
           _s2bBC::P64 = P64[R1 + 48];
           R1 = P64[R1 + 40];
           P64[Sp - 48] = _s2bAX::P64;
           P64[Sp - 40] = _s2bAY::P64;
           P64[Sp - 32] = _s2bBq::P64;
           P64[Sp - 24] = _s2bBC::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u2h2H; else goto c2h0P;
       u2h2H: // global
           call _c2h0O(R1) args: 0, res: 0, upd: 0;
       c2h0P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bC4_info" {
     sat_s2bC4_info:
         const sat_s2bC4_entry;
         const 5;
         const 4294967311;
         const S2bMd_srt+784;
 },
 _c2h0O() //  [R1]
         { []
         }
     {offset
       c2h0O: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2h2G; else goto c2h2F;
       c2h2G: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2h2F: // global
           _s2bBE::P64 = P64[R1 + 7];
           _s2bBF::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_s2bC3_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _s2bBE::P64;
           P64[Hp - 24] = _s2bBF::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2h0O_info" {
     block_c2h0O_info:
         const _c2h0O;
         const 4;
         const 4294967326;
         const S2bMd_srt+784;
 },
 sat_s2bC5_entry() //  [R1]
         { []
         }
     {offset
       c2h2M: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2h2N; else goto c2h2O;
       c2h2N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2h2O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c2h0E_info;
           _s2bAX::P64 = P64[R1 + 16];
           _s2bAY::P64 = P64[R1 + 24];
           _s2bBq::P64 = P64[R1 + 40];
           R1 = P64[R1 + 32];
           P64[Sp - 40] = _s2bAX::P64;
           P64[Sp - 32] = _s2bAY::P64;
           P64[Sp - 24] = _s2bBq::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2h2V; else goto c2h0F;
       u2h2V: // global
           call _c2h0E(R1) args: 0, res: 0, upd: 0;
       c2h0F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bC5_info" {
     sat_s2bC5_info:
         const sat_s2bC5_entry;
         const 4;
         const 4294967311;
         const S2bMd_srt+784;
 },
 _c2h0E() //  [R1]
         { []
         }
     {offset
       c2h0E: // global
           _s2bBq::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c2h2J; else goto c2h2K;
       c2h2J: // global
           R3 = _s2bBq::P64;
           R2 = GHC.Show.showList__4_bytes;
           Sp = Sp + 32;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
       c2h2K: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c2h2U; else goto c2h2T;
       c2h2U: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2h2T: // global
           _s2bBB::P64 = P64[R1 + 6];
           _s2bBC::P64 = P64[R1 + 14];
           I64[Hp - 72] = sat_s2bC4_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = _s2bBq::P64;
           P64[Hp - 32] = _s2bBB::P64;
           P64[Hp - 24] = _s2bBC::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.showList__3_closure;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2h0E_info" {
     block_c2h0E_info:
         const _c2h0E;
         const 3;
         const 4294967326;
         const S2bMd_srt+784;
 },
 sat_s2bBx_entry() //  [R1]
         { []
         }
     {offset
       c2h32: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2h33; else goto c2h34;
       c2h33: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2h34: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bBx_info" {
     sat_s2bBx_info:
         const sat_s2bBx_entry;
         const 2;
         const 18;
 },
 sat_s2bBw_entry() //  [R1]
         { []
         }
     {offset
       c2h3a: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2h3b; else goto c2h3c;
       c2h3b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2h3c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = GHC.Show.$fShow(,)1_closure;
           P64[Sp - 24] = P64[R1 + 24];
           Sp = Sp - 40;
           call GHC.Show.showsPrec_entry(R2) args: 48, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bBw_info" {
     sat_s2bBw_info:
         const sat_s2bBw_entry;
         const 2;
         const 18;
 },
 sat_s2bC8_entry() //  [R1]
         { []
         }
     {offset
       c2h3e: // global
           _s2bC8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2h3f; else goto c2h3g;
       c2h3g: // global
           Hp = Hp + 208;
           if (Hp > HpLim) (likely: False) goto c2h3i; else goto c2h3h;
       c2h3i: // global
           HpAlloc = 208;
           goto c2h3f;
       c2h3f: // global
           R1 = _s2bC8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2h3h: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2bC8::P64;
           _s2bAX::P64 = P64[_s2bC8::P64 + 16];
           _s2bAY::P64 = P64[_s2bC8::P64 + 24];
           _s2bB1::P64 = P64[_s2bC8::P64 + 32];
           _s2bBq::P64 = P64[_s2bC8::P64 + 40];
           _s2bBs::P64 = P64[_s2bC8::P64 + 48];
           _s2bBt::P64 = P64[_s2bC8::P64 + 56];
           I64[Hp - 200] = sat_s2bC5_info;
           P64[Hp - 184] = _s2bAX::P64;
           P64[Hp - 176] = _s2bAY::P64;
           P64[Hp - 168] = _s2bB1::P64;
           P64[Hp - 160] = _s2bBq::P64;
           I64[Hp - 152] = :_con_info;
           P64[Hp - 144] = f_r1Xus_closure+1;
           P64[Hp - 136] = Hp - 200;
           I64[Hp - 128] = :_con_info;
           P64[Hp - 120] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 112] = Hp - 150;
           I64[Hp - 104] = sat_s2bBx_info;
           P64[Hp - 88] = _s2bAX::P64;
           P64[Hp - 80] = _s2bBt::P64;
           I64[Hp - 72] = :_con_info;
           P64[Hp - 64] = Hp - 104;
           P64[Hp - 56] = GHC.Types.[]_closure+1;
           I64[Hp - 48] = sat_s2bBw_info;
           P64[Hp - 32] = _s2bAX::P64;
           P64[Hp - 24] = _s2bBs::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = Hp - 70;
           R3 = Hp - 126;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bC8_info" {
     sat_s2bC8_info:
         const sat_s2bC8_entry;
         const 6;
         const 4294967311;
         const S2bMd_srt+784;
 },
 sat_s2bC9_entry() //  [R1]
         { []
         }
     {offset
       c2h3j: // global
           if ((Sp + -56) < SpLim) (likely: False) goto c2h3l; else goto c2h3m;
       c2h3l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2h3m: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_c2h0r_info;
           _s2bAX::P64 = P64[R1 + 16];
           _s2bAY::P64 = P64[R1 + 24];
           _s2bB1::P64 = P64[R1 + 40];
           _s2bBq::P64 = P64[R1 + 48];
           R1 = P64[R1 + 32];
           P64[Sp - 48] = _s2bAX::P64;
           P64[Sp - 40] = _s2bAY::P64;
           P64[Sp - 32] = _s2bB1::P64;
           P64[Sp - 24] = _s2bBq::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto u2h3q; else goto c2h0s;
       u2h3q: // global
           call _c2h0r(R1) args: 0, res: 0, upd: 0;
       c2h0s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bC9_info" {
     sat_s2bC9_info:
         const sat_s2bC9_entry;
         const 5;
         const 4294967311;
         const S2bMd_srt+784;
 },
 _c2h0r() //  [R1]
         { []
         }
     {offset
       c2h0r: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2h3p; else goto c2h3o;
       c2h3p: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2h3o: // global
           _s2bBs::P64 = P64[R1 + 7];
           _s2bBt::P64 = P64[R1 + 15];
           I64[Hp - 80] = sat_s2bC8_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _s2bBs::P64;
           P64[Hp - 24] = _s2bBt::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2h0r_info" {
     block_c2h0r_info:
         const _c2h0r;
         const 4;
         const 4294967326;
         const S2bMd_srt+784;
 },
 p_s2bBp_entry() //  [R1, R2]
         { []
         }
     {offset
       c2h3r: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c2h3v; else goto c2h3u;
       c2h3v: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2h3u: // global
           _s2bAX::P64 = P64[R1 + 7];
           _s2bAY::P64 = P64[R1 + 15];
           _s2bB0::P64 = P64[R1 + 23];
           _s2bB1::P64 = P64[R1 + 31];
           I64[Hp - 48] = sat_s2bC9_info;
           P64[Hp - 32] = _s2bAX::P64;
           P64[Hp - 24] = _s2bAY::P64;
           P64[Hp - 16] = _s2bB0::P64;
           P64[Hp - 8] = _s2bB1::P64;
           P64[Hp] = R2;
           R3 = Hp - 48;
           R2 = lvl49_r1Xwl_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s2bBp_info" {
     p_s2bBp_info:
         const p_s2bBp_entry;
         const 4;
         const 4294967304;
         const 4294967301;
         const S2bMd_srt+784;
 },
 sat_s2bCd_entry() //  [R1]
         { []
         }
     {offset
       c2h3K: // global
           _s2bCd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2h3L; else goto c2h3M;
       c2h3M: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2h3O; else goto c2h3N;
       c2h3O: // global
           HpAlloc = 24;
           goto c2h3L;
       c2h3L: // global
           R1 = _s2bCd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2h3N: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2bCd::P64;
           _s2bBp::P64 = P64[_s2bCd::P64 + 16];
           _s2bCb::P64 = P64[_s2bCd::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s2bCb::P64;
           R2 = Hp - 14;
           R1 = _s2bBp::P64;
           Sp = Sp - 16;
           call p_s2bBp_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bCd_info" {
     sat_s2bCd_info:
         const sat_s2bCd_entry;
         const 2;
         const 4294967314;
         const S2bMd_srt+784;
 },
 sat_s2bCe_entry() //  [R1, R2]
         { []
         }
     {offset
       c2h3Q: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c2h3U; else goto c2h3T;
       c2h3U: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2h3T: // global
           _s2bBp::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s2bCd_info;
           P64[Hp - 32] = _s2bBp::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2bCe_info" {
     sat_s2bCe_info:
         const sat_s2bCe_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S2bMd_srt+784;
 },
 GHC.Arr.$w$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2h3Y: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2h42; else goto c2h41;
       c2h42: // global
           HpAlloc = 88;
           R1 = GHC.Arr.$w$cshowsPrec_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       c2h41: // global
           I64[Hp - 80] = ls_s2bB1_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R6;
           I64[Hp - 48] = p_s2bBp_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R6;
           P64[Hp - 16] = Hp - 80;
           _c2h0i::P64 = Hp - 47;
           if (%MO_S_Le_W64(R5, 10)) goto c2h3W; else goto c2h3X;
       c2h3W: // global
           Hp = Hp - 16;
           R1 = _c2h0i::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2h3X: // global
           I64[Hp - 8] = sat_s2bCe_info;
           P64[Hp] = _c2h0i::P64;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$w$cshowsPrec_info" {
     GHC.Arr.$w$cshowsPrec_info:
         const GHC.Arr.$w$cshowsPrec_entry;
         const 0;
         const 27021602059190286;
         const 21474836480;
         const S2bMd_srt+616;
         const 517;
         const GHC.Arr.$w$cshowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.762854496 UTC

[section ""data" . GHC.Arr.$fShowArray_$cshowsPrec_closure" {
     GHC.Arr.$fShowArray_$cshowsPrec_closure:
         const GHC.Arr.$fShowArray_$cshowsPrec_info;
         const 0;
 },
 GHC.Arr.$fShowArray_$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2h90: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c2h91; else goto c2h92;
       c2h91: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fShowArray_$cshowsPrec_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2h92: // global
           I64[Sp - 40] = block_c2h8X_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2h96; else goto c2h8Y;
       u2h96: // global
           call _c2h8X(R1) args: 0, res: 0, upd: 0;
       c2h8Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fShowArray_$cshowsPrec_info" {
     GHC.Arr.$fShowArray_$cshowsPrec_info:
         const GHC.Arr.$fShowArray_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 21474836505;
         const S2bMd_srt+792;
 },
 _c2h8X() //  [R1]
         { []
         }
     {offset
       c2h8X: // global
           R6 = P64[Sp + 32];
           R5 = I64[R1 + 7];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 40;
           call GHC.Arr.$w$cshowsPrec_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2h8X_info" {
     block_c2h8X_info:
         const _c2h8X;
         const 4;
         const 4294967326;
         const S2bMd_srt+792;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.769364063 UTC

[section ""data" . GHC.Arr.$fShowArray_$cshow_closure" {
     GHC.Arr.$fShowArray_$cshow_closure:
         const GHC.Arr.$fShowArray_$cshow_info;
         const 0;
 },
 GHC.Arr.$fShowArray_$cshow_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2h9l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2h9m; else goto c2h9n;
       c2h9m: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fShowArray_$cshow_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2h9n: // global
           R6 = R5;
           R5 = 0;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           I64[Sp - 16] = stg_ap_p_info;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 16;
           call GHC.Arr.$w$cshowsPrec_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fShowArray_$cshow_info" {
     GHC.Arr.$fShowArray_$cshow_info:
         const GHC.Arr.$fShowArray_$cshow_entry;
         const 0;
         const 21474836494;
         const 17179869208;
         const S2bMd_srt+792;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.77395753 UTC

[section ""data" . GHC.Arr.$fShowArray_$cshowList_closure" {
     GHC.Arr.$fShowArray_$cshowList_closure:
         const GHC.Arr.$fShowArray_$cshowList_info;
         const 0;
 },
 sat_s2bCw_entry() //  [R1, R2]
         { []
         }
     {offset
       c2h9F: // global
           R6 = R2;
           R5 = 0;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$w$cshowsPrec_entry(R6,
                                            R5,
                                            R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2bCw_info" {
     sat_s2bCw_info:
         const sat_s2bCw_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S2bMd_srt+792;
 },
 GHC.Arr.$fShowArray_$cshowList_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2h9I: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2h9M; else goto c2h9L;
       c2h9M: // global
           HpAlloc = 32;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fShowArray_$cshowList_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2h9L: // global
           I64[Hp - 24] = sat_s2bCw_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R4 = R6;
           R3 = R5;
           R2 = Hp - 23;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fShowArray_$cshowList_info" {
     GHC.Arr.$fShowArray_$cshowList_info:
         const GHC.Arr.$fShowArray_$cshowList_entry;
         const 0;
         const 38654705678;
         const 21474836505;
         const S2bMd_srt+792;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.780488018 UTC

[section ""data" . GHC.Arr.$fShowArray_closure" {
     GHC.Arr.$fShowArray_closure:
         const GHC.Arr.$fShowArray_info;
         const 0;
 },
 sat_s2bCC_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2ha4: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fShowArray_$cshowList_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2bCC_info" {
     sat_s2bCC_info:
         const sat_s2bCC_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const S2bMd_srt+816;
 },
 sat_s2bCB_entry() //  [R1, R2]
         { []
         }
     {offset
       c2hac: // global
           R5 = R2;
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.Arr.$fShowArray_$cshow_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2bCB_info" {
     sat_s2bCB_info:
         const sat_s2bCB_entry;
         const 3;
         const 4294967304;
         const 4294967301;
         const S2bMd_srt+808;
 },
 sat_s2bCA_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       c2hak: // global
           R6 = R3;
           R5 = R2;
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 14];
           R2 = P64[R1 + 6];
           call GHC.Arr.$fShowArray_$cshowsPrec_entry(R6,
                                                      R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s2bCA_info" {
     sat_s2bCA_info:
         const sat_s2bCA_entry;
         const 3;
         const 4294967304;
         const 8589934607;
         const S2bMd_srt+800;
 },
 GHC.Arr.$fShowArray_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2hao: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto c2has; else goto c2har;
       c2has: // global
           HpAlloc = 128;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.$fShowArray_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2har: // global
           I64[Hp - 120] = sat_s2bCC_info;
           P64[Hp - 112] = R2;
           P64[Hp - 104] = R3;
           P64[Hp - 96] = R4;
           I64[Hp - 88] = sat_s2bCB_info;
           P64[Hp - 80] = R2;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = sat_s2bCA_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           I64[Hp - 24] = GHC.Show.C:Show_con_info;
           P64[Hp - 16] = Hp - 54;
           P64[Hp - 8] = Hp - 87;
           P64[Hp] = Hp - 118;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.$fShowArray_info" {
     GHC.Arr.$fShowArray_info:
         const GHC.Arr.$fShowArray_entry;
         const 0;
         const 64424509454;
         const 12884901911;
         const S2bMd_srt+800;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.794799571 UTC

[section ""data" . GHC.Arr.accumArray_closure" {
     GHC.Arr.accumArray_closure:
         const GHC.Arr.accumArray_info;
         const 0;
 },
 sat_s2bD4_entry() //  [R1]
         { []
         }
     {offset
       c2hbo: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2hbp; else goto c2hbq;
       c2hbp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2hbq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c2hbj_info;
           _s2bCK::P64 = P64[R1 + 24];
           _s2bD1::P64 = P64[R1 + 32];
           _s2bCM::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s2bCK::P64;
           I64[Sp - 32] = _s2bCM::I64;
           P64[Sp - 24] = _s2bD1::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bD4_info" {
     sat_s2bD4_info:
         const sat_s2bD4_entry;
         const 4294967299;
         const 15;
 },
 _c2hbj() //  [R1]
         { []
         }
     {offset
       c2hbj: // global
           I64[Sp] = block_c2hbl_info;
           _s2bD2::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s2bD2::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c2hbj_info" {
     block_c2hbj_info:
         const _c2hbj;
         const 131;
         const 30;
 },
 _c2hbl() //  [R1]
         { []
         }
     {offset
       c2hbl: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2hbu; else goto c2hbt;
       c2hbu: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2hbt: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2hbl_info" {
     block_c2hbl_info:
         const _c2hbl;
         const 131;
         const 30;
 },
 section ""relreadonly" . u2hcS_srtd" {
     u2hcS_srtd:
         const S2bMd_srt+88;
         const 94;
         const 1;
         const 536870916;
 },
 GHC.Arr.accumArray_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2hbv: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c2hbw; else goto c2hbx;
       c2hbw: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.accumArray_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2hbx: // global
           I64[Sp - 40] = block_c2haS_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2hcM; else goto c2haT;
       u2hcM: // global
           call _c2haS(R1) args: 0, res: 0, upd: 0;
       c2haT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.accumArray_info" {
     GHC.Arr.accumArray_info:
         const GHC.Arr.accumArray_entry;
         const 0;
         const 18446744069414584334;
         const 21474836505;
         const u2hcS_srtd;
 },
 section ""relreadonly" . u2hcT_srtd" {
     u2hcT_srtd:
         const S2bMd_srt+88;
         const 67;
         const 1;
         const 4;
 },
 _c2haS() //  [R1]
         { []
         }
     {offset
       c2haS: // global
           I64[Sp - 24] = block_c2haX_info;
           R2 = P64[Sp + 8];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R1;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 40;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2haS_info" {
     block_c2haS_info:
         const _c2haS;
         const 4;
         const 18446744069414584350;
         const u2hcT_srtd;
 },
 section ""relreadonly" . u2hcU_srtd" {
     u2hcU_srtd:
         const S2bMd_srt+88;
         const 67;
         const 1;
         const 4;
 },
 _c2haX() //  [R1]
         { []
         }
     {offset
       c2haX: // global
           _s2bCM::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s2bCM::I64, 0)) goto c2hbB; else goto c2hcE;
       c2hbB: // global
           I64[Sp] = block_c2hb4_info;
           R2 = P64[Sp + 48];
           R1 = _s2bCM::I64;
           I64[Sp + 48] = _s2bCM::I64;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
       c2hcE: // global
           R1 = GHC.Arr.negRange_closure;
           Sp = Sp + 64;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2haX_info" {
     block_c2haX_info:
         const _c2haX;
         const 7;
         const 18446744069414584350;
         const u2hcU_srtd;
 },
 _c2hb4() //  [R1]
         { []
         }
     {offset
       c2hb4: // global
           P64[Sp] = P64[Sp + 56];
           P64[Sp + 56] = R1;
           call _c2hbT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2hb4_info" {
     block_c2hb4_info:
         const _c2hb4;
         const 2055;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2hbT() //  []
         { []
         }
     {offset
       c2hbT: // global
           _s2bD6::P64 = P64[Sp];
           I64[Sp] = block_c2hbV_info;
           R1 = _s2bD6::P64;
           if (R1 & 7 != 0) goto u2hcO; else goto c2hbX;
       u2hcO: // global
           call _c2hbV(R1) args: 0, res: 0, upd: 0;
       c2hbX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2hbV() //  [R1]
         { []
         }
     {offset
       c2hbV: // global
           if (R1 & 7 == 1) goto u2hcP; else goto c2hcd;
       u2hcP: // global
           call _c2hbd() args: 0, res: 0, upd: 0;
       c2hcd: // global
           I64[Sp - 8] = block_c2hc6_info;
           _s2bDa::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s2bDa::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2hcQ; else goto c2hc7;
       u2hcQ: // global
           call _c2hc6(R1) args: 0, res: 0, upd: 0;
       c2hc7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2hbV_info" {
     block_c2hbV_info:
         const _c2hbV;
         const 2055;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2hbd() //  []
         { []
         }
     {offset
       c2hbd: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c2hbP; else goto c2hbO;
       c2hbP: // global
           HpAlloc = 48;
           I64[Sp] = block_c2hbd_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2hbO: // global
           _s2bCQ::P64 = P64[Sp + 56];
           I64[_s2bCQ::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 40] = sat_s2bD4_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _s2bCQ::P64;
           I64[Hp] = I64[Sp + 48];
           P64[Sp + 56] = Hp - 40;
           Sp = Sp + 56;
           call _c2hb6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2hbd_info" {
     block_c2hbd_info:
         const _c2hbd;
         const 3847;
         const 30;
 },
 _c2hc6() //  [R1]
         { []
         }
     {offset
       c2hc6: // global
           I64[Sp - 8] = block_c2hcb_info;
           R2 = P64[Sp + 40];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 32];
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 32;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2hc6_info" {
     block_c2hc6_info:
         const _c2hc6;
         const 4104;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2hcb() //  [R1]
         { []
         }
     {offset
       c2hcb: // global
           _s2bCM::I64 = I64[Sp + 64];
           _s2bDf::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2bDf::I64)) goto c2hcm; else goto c2hcz;
       c2hcm: // global
           I64[Sp + 72] = block_c2hbL_info;
           R3 = _s2bCM::I64;
           R2 = _s2bDf::I64;
           Sp = Sp + 72;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 8, upd: 8;
       c2hcz: // global
           if (%MO_S_Ge_W64(_s2bDf::I64,
                            _s2bCM::I64)) goto c2hcs; else goto c2hcw;
       c2hcs: // global
           I64[Sp + 72] = block_c2hbL_info;
           R3 = _s2bCM::I64;
           R2 = _s2bDf::I64;
           Sp = Sp + 72;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 8, upd: 8;
       c2hcw: // global
           _s2bDk::P64 = P64[P64[Sp + 72] + ((_s2bDf::I64 << 3) + 24)];
           I64[Sp] = block_c2hcv_info;
           R3 = P64[Sp + 8];
           R2 = _s2bDk::P64;
           R1 = P64[Sp + 56];
           I64[Sp + 8] = _s2bDf::I64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2hcb_info" {
     block_c2hcb_info:
         const _c2hcb;
         const 8201;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2hbL() //  [R1]
         { []
         }
     {offset
       c2hbL: // global
           P64[Sp] = R1;
           call _c2hb6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2hbL_info" {
     block_c2hbL_info:
         const _c2hbL;
         const 0;
         const 30;
 },
 _c2hb6() //  []
         { []
         }
     {offset
       c2hb6: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2hcv() //  [R1]
         { []
         }
     {offset
       c2hcv: // global
           _s2bCQ::P64 = P64[Sp + 72];
           _s2bDa::P64 = P64[Sp + 16];
           _s2bDf::I64 = I64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s2bCQ::P64 + 24) + (_s2bDf::I64 << 3)] = R1;
           I64[_s2bCQ::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2bCQ::P64 + 24) + ((I64[_s2bCQ::P64 + 8] << 3) + (_s2bDf::I64 >> 7))] = 1 :: W8;
           P64[Sp + 16] = _s2bDa::P64;
           Sp = Sp + 16;
           call _c2hbT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2hcv_info" {
     block_c2hcv_info:
         const _c2hcv;
         const 8265;
         const 4294967326;
         const S2bMd_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.827997342 UTC

[section ""data" . GHC.Arr.array_closure" {
     GHC.Arr.array_closure:
         const GHC.Arr.array_info;
         const 0;
 },
 sat_s2bDQ_entry() //  [R1]
         { []
         }
     {offset
       c2hf2: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2hf3; else goto c2hf4;
       c2hf3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2hf4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c2heX_info;
           _s2bDw::P64 = P64[R1 + 24];
           _s2bDN::P64 = P64[R1 + 32];
           _s2bDy::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s2bDw::P64;
           I64[Sp - 32] = _s2bDy::I64;
           P64[Sp - 24] = _s2bDN::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bDQ_info" {
     sat_s2bDQ_info:
         const sat_s2bDQ_entry;
         const 4294967299;
         const 15;
 },
 _c2heX() //  [R1]
         { []
         }
     {offset
       c2heX: // global
           I64[Sp] = block_c2heZ_info;
           _s2bDO::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s2bDO::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c2heX_info" {
     block_c2heX_info:
         const _c2heX;
         const 131;
         const 30;
 },
 _c2heZ() //  [R1]
         { []
         }
     {offset
       c2heZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2hf8; else goto c2hf7;
       c2hf8: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2hf7: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2heZ_info" {
     block_c2heZ_info:
         const _c2heZ;
         const 131;
         const 30;
 },
 section ""relreadonly" . u2hgr_srtd" {
     u2hgr_srtd:
         const S2bMd_srt+88;
         const 95;
         const 9;
         const 1073741828;
 },
 GHC.Arr.array_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2hf9: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c2hfa; else goto c2hfb;
       c2hfa: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.array_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2hfb: // global
           I64[Sp - 24] = block_c2hew_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2hgl; else goto c2hex;
       u2hgl: // global
           call _c2hew(R1) args: 0, res: 0, upd: 0;
       c2hex: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.array_info" {
     GHC.Arr.array_info:
         const GHC.Arr.array_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u2hgr_srtd;
 },
 section ""relreadonly" . u2hgs_srtd" {
     u2hgs_srtd:
         const S2bMd_srt+88;
         const 67;
         const 9;
         const 4;
 },
 _c2hew() //  [R1]
         { []
         }
     {offset
       c2hew: // global
           I64[Sp - 24] = block_c2heB_info;
           R2 = P64[Sp + 8];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R1;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 40;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2hew_info" {
     block_c2hew_info:
         const _c2hew;
         const 2;
         const 18446744069414584350;
         const u2hgs_srtd;
 },
 section ""relreadonly" . u2hgt_srtd" {
     u2hgt_srtd:
         const S2bMd_srt+88;
         const 67;
         const 9;
         const 4;
 },
 _c2heB() //  [R1]
         { []
         }
     {offset
       c2heB: // global
           _s2bDy::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s2bDy::I64, 0)) goto c2hff; else goto c2hgd;
       c2hff: // global
           I64[Sp - 8] = block_c2heI_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           R1 = _s2bDy::I64;
           I64[Sp] = _s2bDy::I64;
           Sp = Sp - 8;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
       c2hgd: // global
           R1 = GHC.Arr.negRange_closure;
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2heB_info" {
     block_c2heB_info:
         const _c2heB;
         const 5;
         const 18446744069414584350;
         const u2hgt_srtd;
 },
 _c2heI() //  [R1]
         { []
         }
     {offset
       c2heI: // global
           P64[Sp] = P64[Sp + 48];
           P64[Sp + 48] = R1;
           call _c2hfx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2heI_info" {
     block_c2heI_info:
         const _c2heI;
         const 70;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2hfx() //  []
         { []
         }
     {offset
       c2hfx: // global
           _s2bDS::P64 = P64[Sp];
           I64[Sp] = block_c2hfz_info;
           R1 = _s2bDS::P64;
           if (R1 & 7 != 0) goto u2hgn; else goto c2hfB;
       u2hgn: // global
           call _c2hfz(R1) args: 0, res: 0, upd: 0;
       c2hfB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2hfz() //  [R1]
         { []
         }
     {offset
       c2hfz: // global
           if (R1 & 7 == 1) goto u2hgo; else goto c2hfR;
       u2hgo: // global
           call _c2heR() args: 0, res: 0, upd: 0;
       c2hfR: // global
           I64[Sp - 8] = block_c2hfK_info;
           _s2bDW::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s2bDW::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2hgp; else goto c2hfL;
       u2hgp: // global
           call _c2hfK(R1) args: 0, res: 0, upd: 0;
       c2hfL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2hfz_info" {
     block_c2hfz_info:
         const _c2hfz;
         const 70;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2heR() //  []
         { []
         }
     {offset
       c2heR: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c2hft; else goto c2hfs;
       c2hft: // global
           HpAlloc = 48;
           I64[Sp] = block_c2heR_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2hfs: // global
           _s2bDC::P64 = P64[Sp + 48];
           I64[_s2bDC::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 40] = sat_s2bDQ_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = _s2bDC::P64;
           I64[Hp] = I64[Sp + 8];
           P64[Sp + 48] = Hp - 40;
           Sp = Sp + 48;
           call _c2heK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2heR_info" {
     block_c2heR_info:
         const _c2heR;
         const 1606;
         const 30;
 },
 _c2hfK() //  [R1]
         { []
         }
     {offset
       c2hfK: // global
           I64[Sp - 8] = block_c2hfP_info;
           R2 = P64[Sp + 48];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 40];
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 32;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2hfK_info" {
     block_c2hfK_info:
         const _c2hfK;
         const 135;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2hfP() //  [R1]
         { []
         }
     {offset
       c2hfP: // global
           _s2bDy::I64 = I64[Sp + 24];
           _s2bE1::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2bE1::I64)) goto c2hg0; else goto c2hg8;
       c2hg0: // global
           I64[Sp + 64] = block_c2hfp_info;
           R3 = _s2bDy::I64;
           R2 = _s2bE1::I64;
           Sp = Sp + 64;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 8, upd: 8;
       c2hg8: // global
           if (%MO_S_Ge_W64(_s2bE1::I64,
                            _s2bDy::I64)) goto c2hg6; else goto c2hg7;
       c2hg6: // global
           I64[Sp + 64] = block_c2hfp_info;
           R3 = _s2bDy::I64;
           R2 = _s2bE1::I64;
           Sp = Sp + 64;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 8, upd: 8;
       c2hg7: // global
           _s2bDC::P64 = P64[Sp + 64];
           _s2bDW::P64 = P64[Sp + 16];
           _s2bDZ::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s2bDC::P64 + 24) + (_s2bE1::I64 << 3)] = _s2bDZ::P64;
           I64[_s2bDC::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2bDC::P64 + 24) + ((I64[_s2bDC::P64 + 8] << 3) + (_s2bE1::I64 >> 7))] = 1 :: W8;
           P64[Sp + 16] = _s2bDW::P64;
           Sp = Sp + 16;
           call _c2hfx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2hfP_info" {
     block_c2hfP_info:
         const _c2hfP;
         const 264;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2hfp() //  [R1]
         { []
         }
     {offset
       c2hfp: // global
           P64[Sp] = R1;
           call _c2heK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2hfp_info" {
     block_c2hfp_info:
         const _c2hfp;
         const 0;
         const 30;
 },
 _c2heK() //  []
         { []
         }
     {offset
       c2heK: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.860505816 UTC

[section ""data" . GHC.Arr.ixmap_closure" {
     GHC.Arr.ixmap_closure:
         const GHC.Arr.ixmap_info;
         const 0;
 },
 sat_s2bEA_entry() //  [R1]
         { []
         }
     {offset
       c2hiA: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c2hiB; else goto c2hiC;
       c2hiB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2hiC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c2hiv_info;
           _s2bEg::P64 = P64[R1 + 24];
           _s2bEx::P64 = P64[R1 + 32];
           _s2bEi::I64 = I64[R1 + 40];
           R1 = P64[R1 + 16];
           P64[Sp - 40] = _s2bEg::P64;
           I64[Sp - 32] = _s2bEi::I64;
           P64[Sp - 24] = _s2bEx::P64;
           Sp = Sp - 48;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bEA_info" {
     sat_s2bEA_info:
         const sat_s2bEA_entry;
         const 4294967299;
         const 15;
 },
 _c2hiv() //  [R1]
         { []
         }
     {offset
       c2hiv: // global
           I64[Sp] = block_c2hix_info;
           _s2bEy::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s2bEy::P64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c2hiv_info" {
     block_c2hiv_info:
         const _c2hiv;
         const 131;
         const 30;
 },
 _c2hix() //  [R1]
         { []
         }
     {offset
       c2hix: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2hiG; else goto c2hiF;
       c2hiG: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2hiF: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           P64[Hp - 8] = P64[Sp + 24];
           I64[Hp] = I64[Sp + 16];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2hix_info" {
     block_c2hix_info:
         const _c2hix;
         const 131;
         const 30;
 },
 sat_s2bF0_entry() //  [R1]
         { []
         }
     {offset
       c2hjb: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c2hjh; else goto c2hji;
       c2hjh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2hji: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 48] = block_c2hj8_info;
           _s2bEa::P64 = P64[R1 + 16];
           _s2bEc::P64 = P64[R1 + 24];
           _s2bEF::P64 = P64[R1 + 40];
           R1 = P64[R1 + 32];
           P64[Sp - 40] = _s2bEa::P64;
           P64[Sp - 32] = _s2bEc::P64;
           P64[Sp - 24] = _s2bEF::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto u2hjC; else goto c2hj9;
       u2hjC: // global
           call _c2hj8(R1) args: 0, res: 0, upd: 0;
       c2hj9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s2bF0_info" {
     sat_s2bF0_info:
         const sat_s2bF0_entry;
         const 4;
         const 4294967311;
         const S2bMd_srt+616;
 },
 _c2hj8() //  [R1]
         { []
         }
     {offset
       c2hj8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c2hjl; else goto c2hjk;
       c2hjl: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2hjk: // global
           _s2bEM::P64 = P64[R1 + 7];
           _s2bEN::P64 = P64[R1 + 15];
           _s2bEP::P64 = P64[R1 + 23];
           _s2bEO::I64 = I64[R1 + 31];
           I64[Hp - 48] = stg_ap_2_upd_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s2bEM::P64;
           P64[Hp] = _s2bEN::P64;
           _s2bEa::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c2hjg_info;
           R2 = _s2bEa::P64;
           I64[Sp - 16] = stg_ap_pp_info;
           P64[Sp - 8] = Hp - 15;
           P64[Sp] = Hp - 48;
           P64[Sp + 16] = _s2bEP::P64;
           I64[Sp + 24] = _s2bEO::I64;
           Sp = Sp - 16;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c2hj8_info" {
     block_c2hj8_info:
         const _c2hj8;
         const 3;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2hjg() //  [R1]
         { []
         }
     {offset
       c2hjg: // global
           _s2bEO::I64 = I64[Sp + 16];
           _s2bET::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2bET::I64)) goto c2hjz; else goto c2hjB;
       c2hjB: // global
           if (%MO_S_Ge_W64(_s2bET::I64,
                            _s2bEO::I64)) goto c2hjz; else goto c2hjA;
       c2hjz: // global
           R3 = _s2bEO::I64;
           R2 = _s2bET::I64;
           Sp = Sp + 24;
           call GHC.Arr.$wbadSafeIndex_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
       c2hjA: // global
           R1 = P64[P64[Sp + 8] + ((_s2bET::I64 << 3) + 24)];
           Sp = Sp + 24;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c2hjg_info" {
     block_c2hjg_info:
         const _c2hjg;
         const 130;
         const 4294967326;
         const S2bMd_srt+616;
 },
 section ""relreadonly" . u2hkw_srtd" {
     u2hkw_srtd:
         const S2bMd_srt+88;
         const 96;
         const 9;
         const 2147483652;
 },
 GHC.Arr.ixmap_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2hjD: // global
           if ((Sp + -120) < SpLim) (likely: False) goto c2hjE; else goto c2hjF;
       c2hjE: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.ixmap_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2hjF: // global
           I64[Sp - 40] = block_c2hi0_info;
           R1 = R4;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto u2hku; else goto c2hi1;
       u2hku: // global
           call _c2hi0(R1) args: 0, res: 0, upd: 0;
       c2hi1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.ixmap_info" {
     GHC.Arr.ixmap_info:
         const GHC.Arr.ixmap_entry;
         const 0;
         const 18446744069414584334;
         const 21474836505;
         const u2hkw_srtd;
 },
 section ""relreadonly" . u2hkx_srtd" {
     u2hkx_srtd:
         const S2bMd_srt+88;
         const 67;
         const 9;
         const 4;
 },
 _c2hi0() //  [R1]
         { []
         }
     {offset
       c2hi0: // global
           I64[Sp - 24] = block_c2hi5_info;
           R2 = P64[Sp + 8];
           I64[Sp - 40] = stg_ap_p_info;
           P64[Sp - 32] = R1;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 40;
           call GHC.Arr.rangeSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2hi0_info" {
     block_c2hi0_info:
         const _c2hi0;
         const 4;
         const 18446744069414584350;
         const u2hkx_srtd;
 },
 section ""relreadonly" . u2hky_srtd" {
     u2hky_srtd:
         const S2bMd_srt+88;
         const 67;
         const 9;
         const 4;
 },
 _c2hi5() //  [R1]
         { []
         }
     {offset
       c2hi5: // global
           _s2bEi::I64 = I64[R1 + 7];
           if (%MO_S_Ge_W64(_s2bEi::I64, 0)) goto c2hjJ; else goto c2hkj;
       c2hjJ: // global
           I64[Sp - 8] = block_c2hic_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           R1 = _s2bEi::I64;
           I64[Sp] = _s2bEi::I64;
           Sp = Sp - 8;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
       c2hkj: // global
           R1 = GHC.Arr.negRange_closure;
           Sp = Sp + 64;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c2hi5_info" {
     block_c2hi5_info:
         const _c2hi5;
         const 7;
         const 18446744069414584350;
         const u2hky_srtd;
 },
 _c2hic() //  [R1]
         { []
         }
     {offset
       c2hic: // global
           I64[Sp - 8] = block_c2hie_info;
           R2 = P64[Sp + 40];
           I64[Sp - 24] = stg_ap_p_info;
           P64[Sp - 16] = P64[Sp + 32];
           P64[Sp] = R1;
           Sp = Sp - 24;
           call GHC.Arr.range_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2hic_info" {
     block_c2hic_info:
         const _c2hic;
         const 72;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2hie() //  [R1]
         { []
         }
     {offset
       c2hie: // global
           P64[Sp] = R1;
           call _c2hiK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2hie_info" {
     block_c2hie_info:
         const _c2hie;
         const 137;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2hiK() //  []
         { []
         }
     {offset
       c2hiK: // global
           _s2bEC::P64 = P64[Sp];
           I64[Sp] = block_c2hiM_info;
           R1 = _s2bEC::P64;
           if (R1 & 7 != 0) goto u2hkr; else goto c2hiN;
       u2hkr: // global
           call _c2hiM(R1) args: 0, res: 0, upd: 0;
       c2hiN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2hiM() //  [R1]
         { []
         }
     {offset
       c2hiM: // global
           if (R1 & 7 == 1) goto u2hks; else goto c2hk5;
       u2hks: // global
           call _c2hip() args: 0, res: 0, upd: 0;
       c2hk5: // global
           I64[Sp - 16] = block_c2hiS_info;
           R2 = P64[Sp + 48];
           I64[Sp - 40] = stg_ap_pp_info;
           P64[Sp - 32] = P64[Sp + 40];
           _s2bEF::P64 = P64[R1 + 6];
           P64[Sp - 24] = _s2bEF::P64;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = _s2bEF::P64;
           Sp = Sp - 40;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2hiM_info" {
     block_c2hiM_info:
         const _c2hiM;
         const 137;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2hip() //  []
         { []
         }
     {offset
       c2hip: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c2hjY; else goto c2hjX;
       c2hjY: // global
           HpAlloc = 48;
           I64[Sp] = block_c2hip_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2hjX: // global
           _s2bEm::P64 = P64[Sp + 8];
           I64[_s2bEm::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 40] = sat_s2bEA_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = _s2bEm::P64;
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 72] = Hp - 40;
           Sp = Sp + 72;
           call _c2hii() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2hip_info" {
     block_c2hip_info:
         const _c2hip;
         const 31881;
         const 30;
 },
 _c2hiS() //  [R1]
         { []
         }
     {offset
       c2hiS: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c2hk8; else goto c2hk7;
       c2hk8: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2hk7: // global
           _s2bEi::I64 = I64[Sp + 32];
           _s2bEI::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2bEI::I64)) goto c2hka; else goto c2hke;
       c2hka: // global
           Hp = Hp - 48;
           I64[Sp + 88] = block_c2hjU_info;
           R3 = _s2bEi::I64;
           R2 = _s2bEI::I64;
           Sp = Sp + 88;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 8, upd: 8;
       c2hke: // global
           if (%MO_S_Ge_W64(_s2bEI::I64,
                            _s2bEi::I64)) goto c2hkc; else goto c2hkd;
       c2hkc: // global
           Hp = Hp - 48;
           I64[Sp + 88] = block_c2hjU_info;
           R3 = _s2bEi::I64;
           R2 = _s2bEI::I64;
           Sp = Sp + 88;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 8, upd: 8;
       c2hkd: // global
           I64[Hp - 40] = sat_s2bF0_info;
           P64[Hp - 24] = P64[Sp + 72];
           P64[Hp - 16] = P64[Sp + 80];
           P64[Hp - 8] = P64[Sp + 88];
           P64[Hp] = P64[Sp + 16];
           _s2bEm::P64 = P64[Sp + 24];
           _s2bEG::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s2bEm::P64 + 24) + (_s2bEI::I64 << 3)] = Hp - 40;
           I64[_s2bEm::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2bEm::P64 + 24) + ((I64[_s2bEm::P64 + 8] << 3) + (_s2bEI::I64 >> 7))] = 1 :: W8;
           P64[Sp + 16] = _s2bEG::P64;
           Sp = Sp + 16;
           call _c2hiK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2hiS_info" {
     block_c2hiS_info:
         const _c2hiS;
         const 523;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2hjU() //  [R1]
         { []
         }
     {offset
       c2hjU: // global
           P64[Sp] = R1;
           call _c2hii() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2hjU_info" {
     block_c2hjU_info:
         const _c2hjU;
         const 0;
         const 30;
 },
 _c2hii() //  []
         { []
         }
     {offset
       c2hii: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.896562771 UTC

[section ""data" . GHC.Arr.//_closure" {
     GHC.Arr.//_closure:
         const GHC.Arr.//_info;
         const 0;
 },
 section ""relreadonly" . u2hop_srtd" {
     u2hop_srtd:
         const S2bMd_srt+112;
         const 94;
         const 9223372036854775809;
         const 536870912;
 },
 GHC.Arr.//_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c2hmz: // global
           if ((Sp + -96) < SpLim) (likely: False) goto c2hmA; else goto c2hmB;
       c2hmA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.//_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2hmB: // global
           I64[Sp - 24] = block_c2hmw_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2hog; else goto c2hmx;
       u2hog: // global
           call _c2hmw(R1) args: 0, res: 0, upd: 0;
       c2hmx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.//_info" {
     GHC.Arr.//_info:
         const GHC.Arr.//_entry;
         const 0;
         const 18446744069414584334;
         const 12884901911;
         const u2hop_srtd;
 },
 section ""relreadonly" . u2hoq_srtd" {
     u2hoq_srtd:
         const S2bMd_srt+112;
         const 64;
         const 9223372036854775809;
 },
 _c2hmw() //  [R1]
         { []
         }
     {offset
       c2hmw: // global
           I64[Sp - 32] = block_c2hmE_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           _s2bFb::P64 = P64[R1 + 7];
           _s2bFc::P64 = P64[R1 + 15];
           _s2bFe::P64 = P64[R1 + 23];
           _s2bFd::I64 = I64[R1 + 31];
           R1 = _s2bFd::I64;
           P64[Sp - 24] = _s2bFc::P64;
           I64[Sp - 16] = _s2bFd::I64;
           P64[Sp - 8] = _s2bFe::P64;
           P64[Sp] = _s2bFb::P64;
           Sp = Sp - 32;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2hmw_info" {
     block_c2hmw_info:
         const _c2hmw;
         const 2;
         const 18446744069414584350;
         const u2hoq_srtd;
 },
 _c2hmE() //  [R1]
         { []
         }
     {offset
       c2hmE: // global
           _s2bFd::I64 = I64[Sp + 16];
           _s2bFe::P64 = P64[Sp + 24];
           _s2bFh::P64 = R1;
           _s2bFM::I64 = 0;
           goto c2hnV;
       c2hnV: // global
           if (_s2bFM::I64 == _s2bFd::I64) goto u2hob; else goto c2ho1;
       u2hob: // global
           P64[Sp + 24] = _s2bFh::P64;
           call _c2hmL() args: 0, res: 0, upd: 0;
       c2ho1: // global
           _s2bFQ::P64 = P64[(_s2bFe::P64 + 24) + (_s2bFM::I64 << 3)];
           call MO_WriteBarrier();
           P64[(_s2bFh::P64 + 24) + (_s2bFM::I64 << 3)] = _s2bFQ::P64;
           I64[_s2bFh::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2bFh::P64 + 24) + ((I64[_s2bFh::P64 + 8] << 3) + (_s2bFM::I64 >> 7))] = 1 :: W8;
           _s2bFM::I64 = _s2bFM::I64 + 1;
           goto c2hnV;
     }
 },
 section ""relreadonly" . block_c2hmE_info" {
     block_c2hmE_info:
         const _c2hmE;
         const 134;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2hmL() //  []
         { []
         }
     {offset
       c2hmL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2hmP; else goto c2hmO;
       c2hmP: // global
           HpAlloc = 24;
           I64[Sp] = block_c2hmL_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2hmO: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           P64[Sp] = P64[Sp + 48];
           P64[Sp + 48] = Hp - 15;
           call _c2hng() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2hmL_info" {
     block_c2hmL_info:
         const _c2hmL;
         const 134;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2hng() //  []
         { []
         }
     {offset
       c2hng: // global
           _s2bFy::P64 = P64[Sp];
           I64[Sp] = block_c2hni_info;
           R1 = _s2bFy::P64;
           if (R1 & 7 != 0) goto u2hol; else goto c2hnk;
       u2hol: // global
           call _c2hni(R1) args: 0, res: 0, upd: 0;
       c2hnk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2hni() //  [R1]
         { []
         }
     {offset
       c2hni: // global
           if (R1 & 7 == 1) goto u2hom; else goto c2hnA;
       u2hom: // global
           call _c2hn8() args: 0, res: 0, upd: 0;
       c2hnA: // global
           I64[Sp - 8] = block_c2hnt_info;
           _s2bFC::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s2bFC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2hon; else goto c2hnu;
       u2hon: // global
           call _c2hnt(R1) args: 0, res: 0, upd: 0;
       c2hnu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2hni_info" {
     block_c2hni_info:
         const _c2hni;
         const 134;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2hn8() //  []
         { []
         }
     {offset
       c2hn8: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2hnc; else goto c2hnb;
       c2hnc: // global
           HpAlloc = 40;
           I64[Sp] = block_c2hn8_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2hnb: // global
           _s2bFh::P64 = P64[Sp + 24];
           I64[_s2bFh::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s2bFh::P64;
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 48] = Hp - 31;
           Sp = Sp + 48;
           call _c2hmR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2hn8_info" {
     block_c2hn8_info:
         const _c2hn8;
         const 3206;
         const 30;
 },
 _c2hnt() //  [R1]
         { []
         }
     {offset
       c2hnt: // global
           I64[Sp - 8] = block_c2hny_info;
           R2 = P64[Sp + 48];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 56];
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 32;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2hnt_info" {
     block_c2hnt_info:
         const _c2hnt;
         const 263;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2hny() //  [R1]
         { []
         }
     {offset
       c2hny: // global
           _s2bFd::I64 = I64[Sp + 32];
           _s2bFH::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2bFH::I64)) goto c2hnJ; else goto c2hnR;
       c2hnJ: // global
           I64[Sp + 64] = block_c2hn3_info;
           R3 = _s2bFd::I64;
           R2 = _s2bFH::I64;
           Sp = Sp + 64;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 8, upd: 8;
       c2hnR: // global
           if (%MO_S_Ge_W64(_s2bFH::I64,
                            _s2bFd::I64)) goto c2hnP; else goto c2hnQ;
       c2hnP: // global
           I64[Sp + 64] = block_c2hn3_info;
           R3 = _s2bFd::I64;
           R2 = _s2bFH::I64;
           Sp = Sp + 64;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 8, upd: 8;
       c2hnQ: // global
           _s2bFh::P64 = P64[Sp + 40];
           _s2bFC::P64 = P64[Sp + 16];
           _s2bFF::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s2bFh::P64 + 24) + (_s2bFH::I64 << 3)] = _s2bFF::P64;
           I64[_s2bFh::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2bFh::P64 + 24) + ((I64[_s2bFh::P64 + 8] << 3) + (_s2bFH::I64 >> 7))] = 1 :: W8;
           P64[Sp + 16] = _s2bFC::P64;
           Sp = Sp + 16;
           call _c2hng() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2hny_info" {
     block_c2hny_info:
         const _c2hny;
         const 520;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2hn3() //  [R1]
         { []
         }
     {offset
       c2hn3: // global
           P64[Sp] = R1;
           call _c2hmR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2hn3_info" {
     block_c2hn3_info:
         const _c2hn3;
         const 0;
         const 30;
 },
 _c2hmR() //  []
         { []
         }
     {offset
       c2hmR: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.925628282 UTC

[section ""data" . GHC.Arr.accum_closure" {
     GHC.Arr.accum_closure:
         const GHC.Arr.accum_info;
         const 0;
 },
 section ""relreadonly" . u2hrH_srtd" {
     u2hrH_srtd:
         const S2bMd_srt+112;
         const 95;
         const 9223372036854775809;
         const 1073741824;
 },
 GHC.Arr.accum_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2hpM: // global
           if ((Sp + -104) < SpLim) (likely: False) goto c2hpN; else goto c2hpO;
       c2hpN: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Arr.accum_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2hpO: // global
           I64[Sp - 32] = block_c2hpJ_info;
           R1 = R4;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u2hry; else goto c2hpK;
       u2hry: // global
           call _c2hpJ(R1) args: 0, res: 0, upd: 0;
       c2hpK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.accum_info" {
     GHC.Arr.accum_info:
         const GHC.Arr.accum_entry;
         const 0;
         const 18446744069414584334;
         const 17179869208;
         const u2hrH_srtd;
 },
 section ""relreadonly" . u2hrI_srtd" {
     u2hrI_srtd:
         const S2bMd_srt+112;
         const 64;
         const 9223372036854775809;
 },
 _c2hpJ() //  [R1]
         { []
         }
     {offset
       c2hpJ: // global
           I64[Sp - 32] = block_c2hpR_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           _s2bG1::P64 = P64[R1 + 7];
           _s2bG2::P64 = P64[R1 + 15];
           _s2bG4::P64 = P64[R1 + 23];
           _s2bG3::I64 = I64[R1 + 31];
           R1 = _s2bG3::I64;
           P64[Sp - 24] = _s2bG2::P64;
           I64[Sp - 16] = _s2bG3::I64;
           P64[Sp - 8] = _s2bG4::P64;
           P64[Sp] = _s2bG1::P64;
           Sp = Sp - 32;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2hpJ_info" {
     block_c2hpJ_info:
         const _c2hpJ;
         const 3;
         const 18446744069414584350;
         const u2hrI_srtd;
 },
 _c2hpR() //  [R1]
         { []
         }
     {offset
       c2hpR: // global
           _s2bG3::I64 = I64[Sp + 16];
           _s2bG4::P64 = P64[Sp + 24];
           _s2bG7::P64 = R1;
           _s2bGG::I64 = 0;
           goto c2hrd;
       c2hrd: // global
           if (_s2bGG::I64 == _s2bG3::I64) goto u2hrt; else goto c2hrj;
       u2hrt: // global
           P64[Sp + 24] = _s2bG7::P64;
           call _c2hpY() args: 0, res: 0, upd: 0;
       c2hrj: // global
           _s2bGK::P64 = P64[(_s2bG4::P64 + 24) + (_s2bGG::I64 << 3)];
           call MO_WriteBarrier();
           P64[(_s2bG7::P64 + 24) + (_s2bGG::I64 << 3)] = _s2bGK::P64;
           I64[_s2bG7::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2bG7::P64 + 24) + ((I64[_s2bG7::P64 + 8] << 3) + (_s2bGG::I64 >> 7))] = 1 :: W8;
           _s2bGG::I64 = _s2bGG::I64 + 1;
           goto c2hrd;
     }
 },
 section ""relreadonly" . block_c2hpR_info" {
     block_c2hpR_info:
         const _c2hpR;
         const 135;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2hpY() //  []
         { []
         }
     {offset
       c2hpY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2hq2; else goto c2hq1;
       c2hq2: // global
           HpAlloc = 24;
           I64[Sp] = block_c2hpY_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2hq1: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           P64[Sp] = P64[Sp + 56];
           P64[Sp + 56] = Hp - 15;
           call _c2hqt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2hpY_info" {
     block_c2hpY_info:
         const _c2hpY;
         const 135;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2hqt() //  []
         { []
         }
     {offset
       c2hqt: // global
           _s2bGo::P64 = P64[Sp];
           I64[Sp] = block_c2hqv_info;
           R1 = _s2bGo::P64;
           if (R1 & 7 != 0) goto u2hrD; else goto c2hqx;
       u2hrD: // global
           call _c2hqv(R1) args: 0, res: 0, upd: 0;
       c2hqx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2hqv() //  [R1]
         { []
         }
     {offset
       c2hqv: // global
           if (R1 & 7 == 1) goto u2hrE; else goto c2hqN;
       u2hrE: // global
           call _c2hql() args: 0, res: 0, upd: 0;
       c2hqN: // global
           I64[Sp - 8] = block_c2hqG_info;
           _s2bGs::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s2bGs::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2hrF; else goto c2hqH;
       u2hrF: // global
           call _c2hqG(R1) args: 0, res: 0, upd: 0;
       c2hqH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2hqv_info" {
     block_c2hqv_info:
         const _c2hqv;
         const 135;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2hql() //  []
         { []
         }
     {offset
       c2hql: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2hqp; else goto c2hqo;
       c2hqp: // global
           HpAlloc = 40;
           I64[Sp] = block_c2hql_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       c2hqo: // global
           _s2bG7::P64 = P64[Sp + 24];
           I64[_s2bG7::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _s2bG7::P64;
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 56] = Hp - 31;
           Sp = Sp + 56;
           call _c2hq4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2hql_info" {
     block_c2hql_info:
         const _c2hql;
         const 7303;
         const 30;
 },
 _c2hqG() //  [R1]
         { []
         }
     {offset
       c2hqG: // global
           I64[Sp - 8] = block_c2hqL_info;
           R2 = P64[Sp + 48];
           I64[Sp - 32] = stg_ap_pp_info;
           P64[Sp - 24] = P64[Sp + 64];
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 32;
           call GHC.Arr.index_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2hqG_info" {
     block_c2hqG_info:
         const _c2hqG;
         const 264;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2hqL() //  [R1]
         { []
         }
     {offset
       c2hqL: // global
           _s2bG3::I64 = I64[Sp + 32];
           _s2bGx::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(0, _s2bGx::I64)) goto c2hqW; else goto c2hr9;
       c2hqW: // global
           I64[Sp + 72] = block_c2hqg_info;
           R3 = _s2bG3::I64;
           R2 = _s2bGx::I64;
           Sp = Sp + 72;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 8, upd: 8;
       c2hr9: // global
           if (%MO_S_Ge_W64(_s2bGx::I64,
                            _s2bG3::I64)) goto c2hr2; else goto c2hr6;
       c2hr2: // global
           I64[Sp + 72] = block_c2hqg_info;
           R3 = _s2bG3::I64;
           R2 = _s2bGx::I64;
           Sp = Sp + 72;
           call GHC.Arr.$wbadSafeIndex_entry(R3, R2) args: 8, res: 8, upd: 8;
       c2hr6: // global
           _s2bGC::P64 = P64[P64[Sp + 40] + ((_s2bGx::I64 << 3) + 24)];
           I64[Sp] = block_c2hr5_info;
           R3 = P64[Sp + 8];
           R2 = _s2bGC::P64;
           R1 = P64[Sp + 64];
           I64[Sp + 8] = _s2bGx::I64;
           call stg_ap_pp_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c2hqL_info" {
     block_c2hqL_info:
         const _c2hqL;
         const 521;
         const 4294967326;
         const S2bMd_srt+616;
 },
 _c2hqg() //  [R1]
         { []
         }
     {offset
       c2hqg: // global
           P64[Sp] = R1;
           call _c2hq4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2hqg_info" {
     block_c2hqg_info:
         const _c2hqg;
         const 0;
         const 30;
 },
 _c2hq4() //  []
         { []
         }
     {offset
       c2hq4: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2hr5() //  [R1]
         { []
         }
     {offset
       c2hr5: // global
           _s2bG7::P64 = P64[Sp + 40];
           _s2bGs::P64 = P64[Sp + 16];
           _s2bGx::I64 = I64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_s2bG7::P64 + 24) + (_s2bGx::I64 << 3)] = R1;
           I64[_s2bG7::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_s2bG7::P64 + 24) + ((I64[_s2bG7::P64 + 8] << 3) + (_s2bGx::I64 >> 7))] = 1 :: W8;
           P64[Sp + 16] = _s2bGs::P64;
           Sp = Sp + 16;
           call _c2hqt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c2hr5_info" {
     block_c2hr5_info:
         const _c2hr5;
         const 585;
         const 4294967326;
         const S2bMd_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.948702015 UTC

[section ""data" . GHC.Arr.C:Ix_closure" {
     GHC.Arr.C:Ix_closure:
         const GHC.Arr.C:Ix_info;
 },
 GHC.Arr.C:Ix_slow() //  [R1]
         { []
         }
     {offset
       c2ht3: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Arr.C:Ix_entry(R6,
                                   R5,
                                   R4,
                                   R3,
                                   R2,
                                   R1) args: 24, res: 0, upd: 8;
     }
 },
 GHC.Arr.C:Ix_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c2ht8: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c2htc; else goto c2htb;
       c2htc: // global
           HpAlloc = 64;
           R1 = GHC.Arr.C:Ix_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       c2htb: // global
           I64[Hp - 56] = GHC.Arr.C:Ix_con_info;
           P64[Hp - 48] = R2;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           P64[Hp - 16] = R6;
           P64[Hp - 8] = P64[Sp];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 55;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.C:Ix_info" {
     GHC.Arr.C:Ix_info:
         const GHC.Arr.C:Ix_entry;
         const 0;
         const 14;
         const 30064771072;
         const 0;
         const 7;
         const GHC.Arr.C:Ix_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.953916616 UTC

[section ""data" . GHC.Arr.STArray_closure" {
     GHC.Arr.STArray_closure:
         const GHC.Arr.STArray_info;
 },
 GHC.Arr.STArray_slow() //  [R1]
         { []
         }
     {offset
       c2hto: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Arr.STArray_entry(R5,
                                      R4,
                                      R3,
                                      R2,
                                      R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Arr.STArray_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2htt: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2htx; else goto c2htw;
       c2htx: // global
           HpAlloc = 40;
           R1 = GHC.Arr.STArray_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c2htw: // global
           I64[Hp - 32] = GHC.Arr.STArray_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R5;
           I64[Hp] = R4;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.STArray_info" {
     GHC.Arr.STArray_info:
         const GHC.Arr.STArray_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 260;
         const GHC.Arr.STArray_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.959255111 UTC

[section ""data" . GHC.Arr.Array_closure" {
     GHC.Arr.Array_closure:
         const GHC.Arr.Array_info;
 },
 GHC.Arr.Array_slow() //  [R1]
         { []
         }
     {offset
       c2htH: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Arr.Array_entry(R5,
                                    R4,
                                    R3,
                                    R2,
                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Arr.Array_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c2htM: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c2htQ; else goto c2htP;
       c2htQ: // global
           HpAlloc = 40;
           R1 = GHC.Arr.Array_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c2htP: // global
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R5;
           I64[Hp] = R4;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.Array_info" {
     GHC.Arr.Array_info:
         const GHC.Arr.Array_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 260;
         const GHC.Arr.Array_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.964448898 UTC

[section ""cstring" . i2hu0_str" {
     i2hu0_str:
         I8[] [98,97,115,101,58,71,72,67,46,65,114,114,46,67,58,73,120]
 },
 GHC.Arr.C:Ix_con_entry() //  [R1]
         { []
         }
     {offset
       c2htZ: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.C:Ix_con_info" {
     GHC.Arr.C:Ix_con_info:
         const GHC.Arr.C:Ix_con_entry;
         const 7;
         const 1;
         const i2hu0_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.967601407 UTC

[section ""cstring" . i2hu7_str" {
     i2hu7_str:
         I8[] [98,97,115,101,58,71,72,67,46,65,114,114,46,83,84,65,114,114,97,121]
 },
 GHC.Arr.STArray_con_entry() //  [R1]
         { []
         }
     {offset
       c2hu6: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.STArray_con_info" {
     GHC.Arr.STArray_con_info:
         const GHC.Arr.STArray_con_entry;
         const 4294967299;
         const 1;
         const i2hu7_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.970568201 UTC

[section ""cstring" . i2hue_str" {
     i2hue_str:
         I8[] [98,97,115,101,58,71,72,67,46,65,114,114,46,65,114,114,97,121]
 },
 GHC.Arr.Array_con_entry() //  [R1]
         { []
         }
     {offset
       c2hud: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Arr.Array_con_info" {
     GHC.Arr.Array_con_info:
         const GHC.Arr.Array_con_entry;
         const 4294967299;
         const 1;
         const i2hue_str;
 }]


==================== Raw Cmm ====================
2018-03-16 15:57:00.974355234 UTC

[section ""relreadonly" . S2bMd_srt" {
     S2bMd_srt:
         const lvl3_r1Xuw_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Arr.$wbadSafeIndex_closure;
         const GHC.Arr.badSafeIndex_closure;
         const GHC.Arr.$wfoldr1Elems_closure;
         const lvl5_r1Xvg_closure;
         const GHC.Arr.foldr1Elems_closure;
         const GHC.Arr.$wfoldl1Elems_closure;
         const lvl7_r1Xvi_closure;
         const GHC.Arr.foldl1Elems_closure;
         const GHC.Arr.safeRangeSize_closure;
         const GHC.Arr.negRange_closure;
         const $wnewSTArray_r1Xvk_closure;
         const newSTArray1_r1Xvl_closure;
         const GHC.Arr.arrEleBottom_closure;
         const GHC.Arr.freezeSTArray1_closure;
         const GHC.Arr.thawSTArray1_closure;
         const GHC.Arr.unsafeReplace_closure;
         const GHC.Arr.unsafeAccum_closure;
         const GHC.Arr.unsafeArray'_closure;
         const GHC.Arr.unsafeArray_closure;
         const GHC.Arr.listArray_closure;
         const GHC.Arr.amap_closure;
         const GHC.Arr.$fFunctorArray_$c<$_closure;
         const GHC.Arr.hopelessIndexError_closure;
         const GHC.Arr.$dmindex_closure;
         const GHC.Arr.$fIxWord_$cindex_closure;
         const GHC.Arr.$fIx(,)_$s$cindex_closure;
         const GHC.Arr.$fIx(,)_$cindex_closure;
         const GHC.Arr.$fIx(,,)_$s$cindex_closure;
         const GHC.Arr.$fIx(,,)_$cindex_closure;
         const GHC.Integer.Type.minusInteger_closure;
         const GHC.Arr.$fIxInteger_$cunsafeRangeSize_closure;
         const GHC.Arr.$w$crangeSize2_closure;
         const GHC.Arr.$fIxInteger_$crangeSize_closure;
         const GHC.Arr.$fIx(,,,,)_$cindex_closure;
         const GHC.Arr.$fIx(,,,,)_closure;
         const GHC.Arr.$fIx(,,,)_$cindex_closure;
         const GHC.Arr.$fIx(,,,)_closure;
         const GHC.Enum.$fEnumOrdering_$cenumFromTo_closure;
         const GHC.Arr.$fIxOrdering_$crange_closure;
         const GHC.Enum.$fEnumBool_$cenumFromTo_closure;
         const GHC.Arr.$fIxBool_$crange_closure;
         const GHC.Enum.$fEnumInteger_$cenumFromTo_closure;
         const GHC.Arr.$fIxInteger_$crange_closure;
         const GHC.Arr.$fIxInteger_$cunsafeIndex_closure;
         const GHC.Show.$fShow(,)_go1_closure;
         const GHC.Arr.$windexError_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Arr.indexError_closure;
         const lvl25_r1XvC_closure;
         const GHC.Arr.$fIxInt_$cindex_closure;
         const $wlvl_r1XvI_closure;
         const GHC.Show.$fShowOrdering_closure;
         const lvl20_r1Xvx_closure;
         const GHC.Arr.$fIxOrdering_$cindex_closure;
         const $wlvl1_r1XvJ_closure;
         const GHC.Show.$fShowBool_closure;
         const lvl16_r1Xvt_closure;
         const $wlvl2_r1XvK_closure;
         const GHC.Arr.$fIxBool_$cindex_closure;
         const lvl31_r1XvL_closure;
         const lvl32_r1XvM_closure;
         const GHC.Show.$fShowInteger_closure;
         const lvl14_r1Xvr_closure;
         const GHC.Arr.$fIxInteger_$cindex_closure;
         const $wlvl3_r1XvN_closure;
         const GHC.Integer.Type.minusInteger_closure;
         const GHC.Show.$fShowChar_closure;
         const lvl12_r1Xvp_closure;
         const GHC.Arr.$fIxChar_$cindex_closure;
         const $wlvl4_r1XvO_closure;
         const GHC.Arr.$fIx(,,)_$cindex_closure;
         const GHC.Arr.$fIx(,,)_closure;
         const GHC.Arr.$fIx(,)_$cindex_closure;
         const GHC.Arr.$fIx(,)_closure;
         const GHC.Arr.safeIndex_closure;
         const GHC.Arr.$wbadSafeIndex_closure;
         const $wreadSTArray_r1Xwh_closure;
         const readSTArray1_r1Xwi_closure;
         const $wwriteSTArray_r1Xwj_closure;
         const writeSTArray1_r1Xwk_closure;
         const GHC.Arr.!_closure;
         const GHC.Arr.assocs_closure;
         const GHC.Arr.cmpArray_closure;
         const GHC.Arr.$w$c<_closure;
         const GHC.Arr.$fOrdArray_$c<_closure;
         const GHC.Arr.$w$c>=_closure;
         const GHC.Arr.$fOrdArray_$c>=_closure;
         const GHC.Arr.$w$c>_closure;
         const GHC.Arr.$fOrdArray_$c>_closure;
         const GHC.Arr.$w$c<=_closure;
         const GHC.Arr.$fOrdArray_$c<=_closure;
         const GHC.Arr.$w$cmax_closure;
         const GHC.Arr.$fOrdArray_$cmax_closure;
         const GHC.Arr.$w$cmin_closure;
         const GHC.Arr.$fOrdArray_$cmin_closure;
         const GHC.Arr.$fOrdArray_closure;
         const GHC.Show.$fShow(,)_go1_closure;
         const GHC.Arr.$w$cshowsPrec_closure;
         const GHC.Arr.$fShowArray_$cshowsPrec_closure;
         const GHC.Arr.$fShowArray_$cshow_closure;
         const GHC.Arr.$fShowArray_$cshowList_closure;
         const GHC.Arr.$fShowArray_closure;
         const GHC.Arr.accumArray_closure;
         const GHC.Arr.array_closure;
         const GHC.Arr.ixmap_closure;
         const GHC.Arr.//_closure;
         const GHC.Arr.accum_closure;
 }]

