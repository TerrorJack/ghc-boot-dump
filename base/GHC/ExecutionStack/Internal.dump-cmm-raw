
==================== Raw Cmm ====================
2018-03-16 16:08:32.494371206 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:08:32.500373824 UTC

[section ""data" . GHC.ExecutionStack.Internal.$WChunk_closure" {
     GHC.ExecutionStack.Internal.$WChunk_closure:
         const GHC.ExecutionStack.Internal.$WChunk_info;
 },
 GHC.ExecutionStack.Internal.$WChunk_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdmGF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdmGT; else goto cdmGU;
       cdmGT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.$WChunk_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmGU: // global
           I64[Sp - 24] = block_cdmGC_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udmH1; else goto cdmGD;
       udmH1: // global
           call _cdmGC(R1) args: 0, res: 0, upd: 0;
       cdmGD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.$WChunk_info" {
     GHC.ExecutionStack.Internal.$WChunk_info:
         const GHC.ExecutionStack.Internal.$WChunk_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cdmGC() //  [R1]
         { []
         }
     {offset
       cdmGC: // global
           I64[Sp] = block_cdmGI_info;
           _sdm9Z::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sdm9Z::I64;
           if (R1 & 7 != 0) goto udmH0; else goto cdmGJ;
       udmH0: // global
           call _cdmGI(R1) args: 0, res: 0, upd: 0;
       cdmGJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmGC_info" {
     block_cdmGC_info:
         const _cdmGC;
         const 2;
         const 30;
 },
 _cdmGI() //  [R1]
         { []
         }
     {offset
       cdmGI: // global
           I64[Sp] = block_cdmGN_info;
           _sdma1::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sdma1::I64;
           if (R1 & 7 != 0) goto udmH2; else goto cdmGO;
       udmH2: // global
           call _cdmGN(R1) args: 0, res: 0, upd: 0;
       cdmGO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmGI_info" {
     block_cdmGI_info:
         const _cdmGI;
         const 66;
         const 30;
 },
 _cdmGN() //  [R1]
         { []
         }
     {offset
       cdmGN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmGZ; else goto cdmGY;
       cdmGZ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmGY: // global
           _sdma3::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.ExecutionStack.Internal.Chunk_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _sdma3::I64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmGN_info" {
     block_cdmGN_info:
         const _cdmGN;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.514373245 UTC

[section ""data" . GHC.ExecutionStack.Internal.sourceColumn_closure" {
     GHC.ExecutionStack.Internal.sourceColumn_closure:
         const GHC.ExecutionStack.Internal.sourceColumn_info;
 },
 GHC.ExecutionStack.Internal.sourceColumn_entry() //  [R2]
         { []
         }
     {offset
       cdmHu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmHv; else goto cdmHw;
       cdmHv: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.sourceColumn_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmHw: // global
           I64[Sp - 8] = block_cdmHr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmHA; else goto cdmHs;
       udmHA: // global
           call _cdmHr(R1) args: 0, res: 0, upd: 0;
       cdmHs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.sourceColumn_info" {
     GHC.ExecutionStack.Internal.sourceColumn_info:
         const GHC.ExecutionStack.Internal.sourceColumn_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdmHr() //  [R1]
         { []
         }
     {offset
       cdmHr: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmHr_info" {
     block_cdmHr_info:
         const _cdmHr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.523084482 UTC

[section ""data" . GHC.ExecutionStack.Internal.sourceLine_closure" {
     GHC.ExecutionStack.Internal.sourceLine_closure:
         const GHC.ExecutionStack.Internal.sourceLine_info;
 },
 GHC.ExecutionStack.Internal.sourceLine_entry() //  [R2]
         { []
         }
     {offset
       cdmHT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmHU; else goto cdmHV;
       cdmHU: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.sourceLine_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmHV: // global
           I64[Sp - 8] = block_cdmHQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmHZ; else goto cdmHR;
       udmHZ: // global
           call _cdmHQ(R1) args: 0, res: 0, upd: 0;
       cdmHR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.sourceLine_info" {
     GHC.ExecutionStack.Internal.sourceLine_info:
         const GHC.ExecutionStack.Internal.sourceLine_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdmHQ() //  [R1]
         { []
         }
     {offset
       cdmHQ: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmHQ_info" {
     block_cdmHQ_info:
         const _cdmHQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.53065843 UTC

[section ""data" . GHC.ExecutionStack.Internal.sourceFile_closure" {
     GHC.ExecutionStack.Internal.sourceFile_closure:
         const GHC.ExecutionStack.Internal.sourceFile_info;
 },
 GHC.ExecutionStack.Internal.sourceFile_entry() //  [R2]
         { []
         }
     {offset
       cdmIi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmIj; else goto cdmIk;
       cdmIj: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.sourceFile_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmIk: // global
           I64[Sp - 8] = block_cdmIf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmIo; else goto cdmIg;
       udmIo: // global
           call _cdmIf(R1) args: 0, res: 0, upd: 0;
       cdmIg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.sourceFile_info" {
     GHC.ExecutionStack.Internal.sourceFile_info:
         const GHC.ExecutionStack.Internal.sourceFile_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdmIf() //  [R1]
         { []
         }
     {offset
       cdmIf: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmIf_info" {
     block_cdmIf_info:
         const _cdmIf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.539854012 UTC

[section ""data" . GHC.ExecutionStack.Internal.srcLoc_closure" {
     GHC.ExecutionStack.Internal.srcLoc_closure:
         const GHC.ExecutionStack.Internal.srcLoc_info;
 },
 GHC.ExecutionStack.Internal.srcLoc_entry() //  [R2]
         { []
         }
     {offset
       cdmIH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmII; else goto cdmIJ;
       cdmII: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.srcLoc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmIJ: // global
           I64[Sp - 8] = block_cdmIE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmIN; else goto cdmIF;
       udmIN: // global
           call _cdmIE(R1) args: 0, res: 0, upd: 0;
       cdmIF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.srcLoc_info" {
     GHC.ExecutionStack.Internal.srcLoc_info:
         const GHC.ExecutionStack.Internal.srcLoc_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdmIE() //  [R1]
         { []
         }
     {offset
       cdmIE: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmIE_info" {
     block_cdmIE_info:
         const _cdmIE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.548767706 UTC

[section ""data" . GHC.ExecutionStack.Internal.functionName_closure" {
     GHC.ExecutionStack.Internal.functionName_closure:
         const GHC.ExecutionStack.Internal.functionName_info;
 },
 GHC.ExecutionStack.Internal.functionName_entry() //  [R2]
         { []
         }
     {offset
       cdmJ6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmJ7; else goto cdmJ8;
       cdmJ7: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.functionName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmJ8: // global
           I64[Sp - 8] = block_cdmJ3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmJc; else goto cdmJ4;
       udmJc: // global
           call _cdmJ3(R1) args: 0, res: 0, upd: 0;
       cdmJ4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.functionName_info" {
     GHC.ExecutionStack.Internal.functionName_info:
         const GHC.ExecutionStack.Internal.functionName_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdmJ3() //  [R1]
         { []
         }
     {offset
       cdmJ3: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmJ3_info" {
     block_cdmJ3_info:
         const _cdmJ3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.559559909 UTC

[section ""data" . GHC.ExecutionStack.Internal.objectName_closure" {
     GHC.ExecutionStack.Internal.objectName_closure:
         const GHC.ExecutionStack.Internal.objectName_info;
 },
 GHC.ExecutionStack.Internal.objectName_entry() //  [R2]
         { []
         }
     {offset
       cdmJv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmJw; else goto cdmJx;
       cdmJw: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.objectName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmJx: // global
           I64[Sp - 8] = block_cdmJs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmJB; else goto cdmJt;
       udmJB: // global
           call _cdmJs(R1) args: 0, res: 0, upd: 0;
       cdmJt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.objectName_info" {
     GHC.ExecutionStack.Internal.objectName_info:
         const GHC.ExecutionStack.Internal.objectName_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdmJs() //  [R1]
         { []
         }
     {offset
       cdmJs: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmJs_info" {
     block_cdmJs_info:
         const _cdmJs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.567634716 UTC

[section ""data" . GHC.ExecutionStack.Internal.chunkFirstFrame_closure" {
     GHC.ExecutionStack.Internal.chunkFirstFrame_closure:
         const GHC.ExecutionStack.Internal.chunkFirstFrame_info;
 },
 GHC.ExecutionStack.Internal.chunkFirstFrame_entry() //  [R2]
         { []
         }
     {offset
       cdmJU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmJY; else goto cdmJZ;
       cdmJY: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.chunkFirstFrame_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmJZ: // global
           I64[Sp - 8] = block_cdmJR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmK3; else goto cdmJS;
       udmK3: // global
           call _cdmJR(R1) args: 0, res: 0, upd: 0;
       cdmJS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.chunkFirstFrame_info" {
     GHC.ExecutionStack.Internal.chunkFirstFrame_info:
         const GHC.ExecutionStack.Internal.chunkFirstFrame_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdmJR() //  [R1]
         { []
         }
     {offset
       cdmJR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmK2; else goto cdmK1;
       cdmK2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmK1: // global
           _sdmaC::I64 = I64[R1 + 23];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sdmaC::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmJR_info" {
     block_cdmJR_info:
         const _cdmJR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.573972736 UTC

[section ""data" . GHC.ExecutionStack.Internal.chunkNext_closure" {
     GHC.ExecutionStack.Internal.chunkNext_closure:
         const GHC.ExecutionStack.Internal.chunkNext_info;
 },
 GHC.ExecutionStack.Internal.chunkNext_entry() //  [R2]
         { []
         }
     {offset
       cdmKl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmKp; else goto cdmKq;
       cdmKp: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.chunkNext_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmKq: // global
           I64[Sp - 8] = block_cdmKi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmKu; else goto cdmKj;
       udmKu: // global
           call _cdmKi(R1) args: 0, res: 0, upd: 0;
       cdmKj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.chunkNext_info" {
     GHC.ExecutionStack.Internal.chunkNext_info:
         const GHC.ExecutionStack.Internal.chunkNext_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdmKi() //  [R1]
         { []
         }
     {offset
       cdmKi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmKt; else goto cdmKs;
       cdmKt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmKs: // global
           _sdmaG::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sdmaG::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmKi_info" {
     block_cdmKi_info:
         const _cdmKi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.580637587 UTC

[section ""data" . GHC.ExecutionStack.Internal.chunkFrames_closure" {
     GHC.ExecutionStack.Internal.chunkFrames_closure:
         const GHC.ExecutionStack.Internal.chunkFrames_info;
 },
 GHC.ExecutionStack.Internal.chunkFrames_entry() //  [R2]
         { []
         }
     {offset
       cdmKM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmKQ; else goto cdmKR;
       cdmKQ: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.chunkFrames_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmKR: // global
           I64[Sp - 8] = block_cdmKJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmKV; else goto cdmKK;
       udmKV: // global
           call _cdmKJ(R1) args: 0, res: 0, upd: 0;
       cdmKK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.chunkFrames_info" {
     GHC.ExecutionStack.Internal.chunkFrames_info:
         const GHC.ExecutionStack.Internal.chunkFrames_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdmKJ() //  [R1]
         { []
         }
     {offset
       cdmKJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmKU; else goto cdmKT;
       cdmKU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmKT: // global
           _sdmaK::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _sdmaK::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmKJ_info" {
     block_cdmKJ_info:
         const _cdmKJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.586667593 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$trModule4_bytes" {
     GHC.ExecutionStack.Internal.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.588561917 UTC

[section ""data" . GHC.ExecutionStack.Internal.$trModule3_closure" {
     GHC.ExecutionStack.Internal.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.590437369 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$trModule2_bytes" {
     GHC.ExecutionStack.Internal.$trModule2_bytes:
         I8[] [71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.592434778 UTC

[section ""data" . GHC.ExecutionStack.Internal.$trModule1_closure" {
     GHC.ExecutionStack.Internal.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.595472946 UTC

[section ""data" . GHC.ExecutionStack.Internal.$trModule_closure" {
     GHC.ExecutionStack.Internal.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ExecutionStack.Internal.$trModule3_closure+1;
         const GHC.ExecutionStack.Internal.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.597469716 UTC

[section ""data" . $krep_rdm9l_closure" {
     $krep_rdm9l_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.599339289 UTC

[section ""data" . $krep1_rdm9m_closure" {
     $krep1_rdm9m_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.601094234 UTC

[section ""data" . $krep2_rdm9n_closure" {
     $krep2_rdm9n_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.605872927 UTC

[section ""data" . $krep3_rdm9o_closure" {
     $krep3_rdm9o_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWord_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.608278083 UTC

[section ""data" . $krep4_rdm9p_closure" {
     $krep4_rdm9p_closure:
         const :_con_info;
         const $krep1_rdm9m_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.61096198 UTC

[section ""data" . $krep5_rdm9q_closure" {
     $krep5_rdm9q_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep4_rdm9p_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.613211114 UTC

[section ""data" . $krep6_rdm9r_closure" {
     $krep6_rdm9r_closure:
         const :_con_info;
         const $krep2_rdm9n_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.615433671 UTC

[section ""data" . $krep7_rdm9s_closure" {
     $krep7_rdm9s_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep6_rdm9r_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.617708854 UTC

[section ""data" . $krep8_rdm9t_closure" {
     $krep8_rdm9t_closure:
         const :_con_info;
         const $krep7_rdm9s_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.619990539 UTC

[section ""data" . $krep9_rdm9u_closure" {
     $krep9_rdm9u_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep8_rdm9t_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.622149746 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcSrcLoc2_bytes" {
     GHC.ExecutionStack.Internal.$tcSrcLoc2_bytes:
         I8[] [83,114,99,76,111,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.624232425 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSrcLoc1_closure" {
     GHC.ExecutionStack.Internal.$tcSrcLoc1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcSrcLoc2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.626843564 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSrcLoc_closure" {
     GHC.ExecutionStack.Internal.$tcSrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcSrcLoc1_closure+1;
         const GHC.Types.krep$*_closure;
         const 8235067574311587288;
         const 11106182367596705879;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.629714659 UTC

[section ""data" . $krep10_rdm9v_closure" {
     $krep10_rdm9v_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcSrcLoc_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.631996773 UTC

[section ""data" . $krep11_rdm9w_closure" {
     $krep11_rdm9w_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rdm9l_closure+1;
         const $krep10_rdm9v_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.634152996 UTC

[section ""data" . $krep12_rdm9x_closure" {
     $krep12_rdm9x_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rdm9l_closure+1;
         const $krep11_rdm9w_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.636292887 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'SrcLoc1_closure" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rdm9q_closure+1;
         const $krep12_rdm9x_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.638490144 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'SrcLoc3_bytes" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc3_bytes:
         I8[] [39,83,114,99,76,111,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.640293562 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'SrcLoc2_closure" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'SrcLoc3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.642246158 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'SrcLoc_closure" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'SrcLoc2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'SrcLoc1_closure+4;
         const 11095721805058681290;
         const 15266549541595723377;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.644177482 UTC

[section ""data" . $krep13_rdm9y_closure" {
     $krep13_rdm9y_closure:
         const :_con_info;
         const $krep10_rdm9v_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.646043117 UTC

[section ""data" . $krep14_rdm9z_closure" {
     $krep14_rdm9z_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep13_rdm9y_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.647844703 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcLocation2_bytes" {
     GHC.ExecutionStack.Internal.$tcLocation2_bytes:
         I8[] [76,111,99,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.649735371 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcLocation1_closure" {
     GHC.ExecutionStack.Internal.$tcLocation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcLocation2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.651562408 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcLocation_closure" {
     GHC.ExecutionStack.Internal.$tcLocation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcLocation1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11638758687983955592;
         const 6940671496618727587;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.65359186 UTC

[section ""data" . $krep15_rdm9A_closure" {
     $krep15_rdm9A_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcLocation_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.655481042 UTC

[section ""data" . $krep16_rdm9B_closure" {
     $krep16_rdm9B_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_rdm9z_closure+1;
         const $krep15_rdm9A_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.657923859 UTC

[section ""data" . $krep17_rdm9C_closure" {
     $krep17_rdm9C_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rdm9q_closure+1;
         const $krep16_rdm9B_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.659875775 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Location1_closure" {
     GHC.ExecutionStack.Internal.$tc'Location1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rdm9q_closure+1;
         const $krep17_rdm9C_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.661644494 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'Location3_bytes" {
     GHC.ExecutionStack.Internal.$tc'Location3_bytes:
         I8[] [39,76,111,99,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.66337677 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Location2_closure" {
     GHC.ExecutionStack.Internal.$tc'Location2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'Location3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.665191256 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Location_closure" {
     GHC.ExecutionStack.Internal.$tc'Location_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Location2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Location1_closure+4;
         const 12834480788254682335;
         const 10467761170474242090;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.66757195 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcStackTrace2_bytes" {
     GHC.ExecutionStack.Internal.$tcStackTrace2_bytes:
         I8[] [83,116,97,99,107,84,114,97,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.669203472 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcStackTrace1_closure" {
     GHC.ExecutionStack.Internal.$tcStackTrace1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcStackTrace2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.671045962 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcStackTrace_closure" {
     GHC.ExecutionStack.Internal.$tcStackTrace_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcStackTrace1_closure+1;
         const GHC.Types.krep$*_closure;
         const 156026104294967557;
         const 17600277320898304892;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.672868082 UTC

[section ""data" . $krep18_rdm9D_closure" {
     $krep18_rdm9D_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcStackTrace_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.674755185 UTC

[section ""data" . $krep19_rdm9E_closure" {
     $krep19_rdm9E_closure:
         const :_con_info;
         const $krep18_rdm9D_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.676554141 UTC

[section ""data" . $krep20_rdm9F_closure" {
     $krep20_rdm9F_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure;
         const $krep19_rdm9E_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.678484904 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'StackTrace1_closure" {
     GHC.ExecutionStack.Internal.$tc'StackTrace1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep20_rdm9F_closure+1;
         const $krep18_rdm9D_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.68032911 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'StackTrace3_bytes" {
     GHC.ExecutionStack.Internal.$tc'StackTrace3_bytes:
         I8[] [39,83,116,97,99,107,84,114,97,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.682324825 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'StackTrace2_closure" {
     GHC.ExecutionStack.Internal.$tc'StackTrace2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'StackTrace3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.684144299 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'StackTrace_closure" {
     GHC.ExecutionStack.Internal.$tc'StackTrace_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'StackTrace2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'StackTrace1_closure+4;
         const 8151790971853785814;
         const 7394195233358636505;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.686745905 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcChunk2_bytes" {
     GHC.ExecutionStack.Internal.$tcChunk2_bytes:
         I8[] [67,104,117,110,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.688531101 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcChunk1_closure" {
     GHC.ExecutionStack.Internal.$tcChunk1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcChunk2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.690436367 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcChunk_closure" {
     GHC.ExecutionStack.Internal.$tcChunk_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcChunk1_closure+1;
         const GHC.Types.krep$*_closure;
         const 1813577326074213410;
         const 3256155729866972563;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.692376772 UTC

[section ""data" . $krep21_rdm9G_closure" {
     $krep21_rdm9G_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcChunk_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.694217119 UTC

[section ""data" . $krep22_rdm9H_closure" {
     $krep22_rdm9H_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_rdm9u_closure+1;
         const $krep21_rdm9G_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.696019139 UTC

[section ""data" . $krep23_rdm9I_closure" {
     $krep23_rdm9I_closure:
         const :_con_info;
         const $krep21_rdm9G_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.697790441 UTC

[section ""data" . $krep24_rdm9J_closure" {
     $krep24_rdm9J_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep23_rdm9I_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.699551404 UTC

[section ""data" . $krep25_rdm9K_closure" {
     $krep25_rdm9K_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep24_rdm9J_closure+1;
         const $krep22_rdm9H_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.701363662 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Chunk1_closure" {
     GHC.ExecutionStack.Internal.$tc'Chunk1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rdm9o_closure+1;
         const $krep25_rdm9K_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.703183327 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'Chunk3_bytes" {
     GHC.ExecutionStack.Internal.$tc'Chunk3_bytes:
         I8[] [39,67,104,117,110,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.704955962 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Chunk2_closure" {
     GHC.ExecutionStack.Internal.$tc'Chunk2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'Chunk3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.706912403 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Chunk_closure" {
     GHC.ExecutionStack.Internal.$tc'Chunk_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Chunk2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Chunk1_closure+4;
         const 16594405016023301875;
         const 5381929581673016432;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.708843238 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcSession2_bytes" {
     GHC.ExecutionStack.Internal.$tcSession2_bytes:
         I8[] [83,101,115,115,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.710723365 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSession1_closure" {
     GHC.ExecutionStack.Internal.$tcSession1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcSession2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.713400598 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSession_closure" {
     GHC.ExecutionStack.Internal.$tcSession_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcSession1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11168382530978838993;
         const 7144139957235519240;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.715847812 UTC

[section ""data" . libdw_pool_clear_rdm9L_closure" {
     libdw_pool_clear_rdm9L_closure:
         const libdw_pool_clear_rdm9L_info;
 },
 libdw_pool_clear_rdm9L_entry() //  []
         { []
         }
     {offset
       cdmMb: // global
           call "ccall" arg hints:  []  result hints:  [] libdwPoolClear();
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . libdw_pool_clear_rdm9L_info" {
     libdw_pool_clear_rdm9L_info:
         const libdw_pool_clear_rdm9L_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.719988004 UTC

[section ""data" . GHC.ExecutionStack.Internal.invalidateDebugCache_closure" {
     GHC.ExecutionStack.Internal.invalidateDebugCache_closure:
         const GHC.ExecutionStack.Internal.invalidateDebugCache_info;
 },
 GHC.ExecutionStack.Internal.invalidateDebugCache_entry() //  []
         { []
         }
     {offset
       cdmMn: // global
           call libdw_pool_clear_rdm9L_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.invalidateDebugCache_info" {
     GHC.ExecutionStack.Internal.invalidateDebugCache_info:
         const GHC.ExecutionStack.Internal.invalidateDebugCache_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.724698332 UTC

[section ""data" . GHC.ExecutionStack.Internal.stackDepth_closure" {
     GHC.ExecutionStack.Internal.stackDepth_closure:
         const GHC.ExecutionStack.Internal.stackDepth_info;
 },
 GHC.ExecutionStack.Internal.stackDepth_entry() //  [R2]
         { []
         }
     {offset
       cdmMG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdmMH; else goto cdmMI;
       cdmMH: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.stackDepth_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmMI: // global
           I64[Sp - 16] = block_cdmMy_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.stackDepth_info" {
     GHC.ExecutionStack.Internal.stackDepth_info:
         const GHC.ExecutionStack.Internal.stackDepth_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdmMy() //  []
         { []
         }
     {offset
       cdmMy: // global
           _sdmaR::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdmMA_info;
           R1 = _sdmaR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udmMV; else goto cdmMB;
       udmMV: // global
           call _cdmMA(R1) args: 0, res: 0, upd: 0;
       cdmMB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmMy_info" {
     block_cdmMy_info:
         const _cdmMy;
         const 1;
         const 30;
 },
 _cdmMA() //  [R1]
         { []
         }
     {offset
       cdmMA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmMO; else goto cdmMN;
       cdmMO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmMN: // global
           _sdmaY::I64 = I64[I64[R1 + 15]];
           call MO_Touch(P64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sdmaY::I64;
           R1 = (Hp + -7) & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmMA_info" {
     block_cdmMA_info:
         const _cdmMA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.734660427 UTC

[section ""data" . GHC.ExecutionStack.Internal.collectStackTrace1_closure" {
     GHC.ExecutionStack.Internal.collectStackTrace1_closure:
         const GHC.ExecutionStack.Internal.collectStackTrace1_info;
         const 0;
 },
 GHC.ExecutionStack.Internal.collectStackTrace1_entry() //  []
         { []
         }
     {offset
       cdmNl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmNm; else goto cdmNn;
       cdmNm: // global
           R1 = GHC.ExecutionStack.Internal.collectStackTrace1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdmNn: // global
           (_sdmb9::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] libdwPoolTake();
           if (_sdmb9::I64 == 0) goto udmNT; else goto cdmNj;
       udmNT: // global
           call _cdmNk() args: 0, res: 0, upd: 0;
       cdmNj: // global
           I64[Sp - 16] = block_cdmNp_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 8] = _sdmb9::I64;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.collectStackTrace1_info" {
     GHC.ExecutionStack.Internal.collectStackTrace1_info:
         const GHC.ExecutionStack.Internal.collectStackTrace1_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const Sdmj7_srt;
 },
 _cdmNp() //  [R1]
         { []
         }
     {offset
       cdmNp: // global
           I64[Sp - 8] = block_cdmNr_info;
           R6 = I64[Sp + 8];
           R5 = 0;
           R4 = 0;
           R3 = libdwPoolRelease;
           R2 = R1;
           P64[Sp - 16] = GHC.Tuple.()_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmNp_info" {
     block_cdmNp_info:
         const _cdmNp;
         const 65;
         const 4294967326;
         const Sdmj7_srt;
 },
 _cdmNr() //  [R1]
         { []
         }
     {offset
       cdmNr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmNw; else goto cdmNv;
       cdmNw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmNv: // global
           _sdmbd::P64 = P64[Sp + 8];
           (_sdmbk::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] libdwGetBacktrace(I64[Sp + 16]);
           I64[Hp - 8] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp] = _sdmbd::P64;
           call MO_Touch(Hp - 7);
           if (_sdmbk::I64 == 0) goto udmNS; else goto cdmNM;
       udmNS: // global
           Sp = Sp + 24;
           call _cdmNk() args: 0, res: 0, upd: 0;
       cdmNM: // global
           I64[Sp + 8] = block_cdmNE_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp + 16] = _sdmbk::I64;
           Sp = Sp + 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmNr_info" {
     block_cdmNr_info:
         const _cdmNr;
         const 130;
         const 4294967326;
         const Sdmj7_srt;
 },
 _cdmNk() //  []
         { []
         }
     {offset
       cdmNk: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cdmNE() //  [R1]
         { []
         }
     {offset
       cdmNE: // global
           I64[Sp - 8] = block_cdmNG_info;
           R6 = I64[Sp + 8];
           R5 = 0;
           R4 = 0;
           R3 = backtraceFree;
           R2 = R1;
           P64[Sp - 16] = GHC.Tuple.()_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmNE_info" {
     block_cdmNE_info:
         const _cdmNE;
         const 65;
         const 4294967326;
         const Sdmj7_srt;
 },
 _cdmNG() //  [R1]
         { []
         }
     {offset
       cdmNG: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdmNQ; else goto cdmNP;
       cdmNQ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmNP: // global
           I64[Hp - 48] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           I64[Hp - 32] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 24] = Hp - 47;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmNG_info" {
     block_cdmNG_info:
         const _cdmNG;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.747501227 UTC

[section ""data" . GHC.ExecutionStack.Internal.collectStackTrace_closure" {
     GHC.ExecutionStack.Internal.collectStackTrace_closure:
         const GHC.ExecutionStack.Internal.collectStackTrace_info;
         const 0;
 },
 GHC.ExecutionStack.Internal.collectStackTrace_entry() //  []
         { []
         }
     {offset
       cdmOo: // global
           call GHC.ExecutionStack.Internal.collectStackTrace1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.collectStackTrace_info" {
     GHC.ExecutionStack.Internal.collectStackTrace_info:
         const GHC.ExecutionStack.Internal.collectStackTrace_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const Sdmj7_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.753075728 UTC

[section ""data" . $wgo_rdm9M_closure" {
     $wgo_rdm9M_closure:
         const $wgo_rdm9M_info;
 },
 $wgo_rdm9M_entry() //  [R2, R3]
         { []
         }
     {offset
       cdmON: // global
           _sdmby::I64 = R3;
           _sdmbx::P64 = R2;
           goto cdmOw;
       cdmOw: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdmOR; else goto cdmOQ;
       cdmOR: // global
           HpAlloc = 56;
           R3 = _sdmby::I64;
           R2 = _sdmbx::P64;
           R1 = $wgo_rdm9M_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmOQ: // global
           if (_sdmby::I64 == 0) goto cdmOM; else goto cdmOL;
       cdmOM: // global
           Hp = Hp - 56;
           R1 = _sdmbx::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdmOL: // global
           _sdmbD::I64 = I64[_sdmby::I64];
           _sdmbH::I64 = I64[_sdmby::I64 + 8];
           I64[Hp - 48] = GHC.ExecutionStack.Internal.Chunk_con_info;
           I64[Hp - 40] = _sdmbD::I64;
           I64[Hp - 32] = _sdmbH::I64;
           I64[Hp - 24] = _sdmby::I64 + 16;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = _sdmbx::P64;
           _sdmby::I64 = _sdmbH::I64;
           _sdmbx::P64 = Hp - 14;
           goto cdmOw;
     }
 },
 section ""relreadonly" . $wgo_rdm9M_info" {
     $wgo_rdm9M_info:
         const $wgo_rdm9M_entry;
         const 0;
         const 14;
         const 12884901902;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.772947364 UTC

[section ""data" . GHC.ExecutionStack.Internal.stackFrames_closure" {
     GHC.ExecutionStack.Internal.stackFrames_closure:
         const GHC.ExecutionStack.Internal.stackFrames_info;
         const 0;
 },
 sat_sdmcR_entry() //  [R1]
         { []
         }
     {offset
       cdmQn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmQq; else goto cdmQr;
       cdmQq: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdmQr: // global
           I64[Sp - 32] = block_cdmQj_info;
           P64[Sp - 24] = P64[R1 + 7];
           I64[Sp - 16] = I64[R1 + 15];
           I64[Sp - 8] = I64[R1 + 23];
           Sp = Sp - 32;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdmcR_info" {
     sat_sdmcR_info:
         const sat_sdmcR_entry;
         const 8589934593;
         const 12884901896;
         const 4294967299;
         const Sdmj7_srt+16;
 },
 _cdmQj() //  []
         { []
         }
     {offset
       cdmQj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmQu; else goto cdmQt;
       cdmQu: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdmQt: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 24] + 8;
           R3 = Hp - 7;
           R2 = I64[Sp + 16] - 1;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call $witerFrames_sdmck_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmQj_info" {
     block_cdmQj_info:
         const _cdmQj;
         const 387;
         const 12884901918;
         const Sdmj7_srt+16;
 },
 sat_sdmdr_entry() //  [R1]
         { []
         }
     {offset
       cdmRc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmRf; else goto cdmRg;
       cdmRf: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdmRg: // global
           I64[Sp - 32] = block_cdmR8_info;
           P64[Sp - 24] = P64[R1 + 7];
           I64[Sp - 16] = I64[R1 + 15];
           I64[Sp - 8] = I64[R1 + 23];
           Sp = Sp - 32;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdmdr_info" {
     sat_sdmdr_info:
         const sat_sdmdr_entry;
         const 8589934593;
         const 12884901896;
         const 4294967299;
         const Sdmj7_srt+16;
 },
 _cdmR8() //  []
         { []
         }
     {offset
       cdmR8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmRj; else goto cdmRi;
       cdmRj: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdmRi: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 24] + 8;
           R3 = Hp - 7;
           R2 = I64[Sp + 16] - 1;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call $witerFrames_sdmck_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmR8_info" {
     block_cdmR8_info:
         const _cdmR8;
         const 387;
         const 12884901918;
         const Sdmj7_srt+16;
 },
 sat_sdmdD_entry() //  [R1]
         { []
         }
     {offset
       cdmRy: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdmRz; else goto cdmRA;
       cdmRz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmRA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdmRr_info;
           _sdmdf::I64 = I64[R1 + 24];
           _sdmdj::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           I64[Sp - 32] = _sdmdf::I64;
           I64[Sp - 24] = _sdmdj::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udmRT; else goto cdmRs;
       udmRT: // global
           call _cdmRr(R1) args: 0, res: 0, upd: 0;
       cdmRs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdmdD_info" {
     sat_sdmdD_info:
         const sat_sdmdD_entry;
         const 8589934593;
         const 15;
 },
 _cdmRr() //  [R1]
         { []
         }
     {offset
       cdmRr: // global
           if (R1 & 7 == 1) goto cdmRv; else goto cdmRw;
       cdmRv: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdmRw: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdmRS; else goto cdmRR;
       cdmRS: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdmRR: // global
           I64[Hp - 72] = GHC.Types.I#_con_info;
           I64[Hp - 64] = I64[Sp + 16];
           I64[Hp - 56] = GHC.Types.I#_con_info;
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = GHC.ExecutionStack.Internal.SrcLoc_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = Hp - 55;
           P64[Hp - 16] = Hp - 71;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdmRr_info" {
     block_cdmRr_info:
         const _cdmRr;
         const 194;
         const 30;
 },
 $witerFrames_sdmck_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdmRX: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cdmRY; else goto cdmRZ;
       cdmRY: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmRZ: // global
           if (R2 == 0) goto cdmRW; else goto cdmRV;
       cdmRW: // global
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdmRV: // global
           I64[Sp - 40] = block_cdmPM_info;
           _sdmck::P64 = R1;
           _sdmc0::P64 = P64[R1 + 5];
           _sdmca::P64 = P64[R1 + 13];
           R1 = R3;
           P64[Sp - 32] = _sdmc0::P64;
           P64[Sp - 24] = _sdmca::P64;
           P64[Sp - 16] = _sdmck::P64;
           I64[Sp - 8] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udmT8; else goto cdmPN;
       udmT8: // global
           call _cdmPM(R1) args: 0, res: 0, upd: 0;
       cdmPN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $witerFrames_sdmck_info" {
     $witerFrames_sdmck_info:
         const $witerFrames_sdmck_entry;
         const 2;
         const 12884901899;
         const 12884901901;
         const Sdmj7_srt+16;
 },
 _cdmPM() //  [R1]
         { []
         }
     {offset
       cdmPM: // global
           _sdmcq::I64 = I64[R1 + 7];
           _sdmct::I64 = I64[_sdmcq::I64];
           I64[Sp - 16] = block_cdmPR_info;
           R1 = 32;
           I64[Sp - 8] = _sdmct::I64;
           I64[Sp] = _sdmcq::I64;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmPM_info" {
     block_cdmPM_info:
         const _cdmPM;
         const 516;
         const 12884901918;
         const Sdmj7_srt+16;
 },
 _cdmPR() //  [R1]
         { []
         }
     {offset
       cdmPR: // global
           I64[Sp] = block_cdmPT_info;
           _sdmcz::P64 = R1;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = _sdmcz::P64;
           if (R1 & 7 != 0) goto udmT3; else goto cdmPU;
       udmT3: // global
           call _cdmPT(R1) args: 0, res: 0, upd: 0;
       cdmPU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmPR_info" {
     block_cdmPR_info:
         const _cdmPR;
         const 2246;
         const 12884901918;
         const Sdmj7_srt+16;
 },
 _cdmPT() //  [R1]
         { []
         }
     {offset
       cdmPT: // global
           _sdmcC::P64 = P64[R1 + 7];
           _sdmcD::I64 = P64[Sp + 32] + 16;
           (_sdmcH::I64) = call "ccall" arg hints:  [PtrHint, PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] libdwLookupLocation(I64[R1 + 15], _sdmcD::I64, I64[Sp + 8]);
           call MO_Touch(_sdmcC::P64);
           _sdmcJ::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sdmcH::I64));
           if (_sdmcJ::I64 != 0) goto udmSU; else goto cdmS8;
       udmSU: // global
           I64[Sp + 8] = _sdmcJ::I64;
           Sp = Sp + 8;
           call _cdmQa() args: 0, res: 0, upd: 0;
       cdmS8: // global
           _sdmcU::I64 = I64[_sdmcD::I64];
           if (_sdmcU::I64 == 0) goto cdmST; else goto cdmSP;
       cdmST: // global
           I64[Sp + 8] = _sdmcD::I64;
           P64[Sp] = GHC.Types.[]_closure+1;
           call _sdmcV() args: 0, res: 0, upd: 0;
       cdmSP: // global
           I64[Sp - 8] = block_cdmSL_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp] = _sdmcU::I64;
           I64[Sp + 8] = _sdmcD::I64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmPT_info" {
     block_cdmPT_info:
         const _cdmPT;
         const 2246;
         const 12884901918;
         const Sdmj7_srt+16;
 },
 _cdmQa() //  []
         { []
         }
     {offset
       cdmQa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmS7; else goto cdmS6;
       cdmS7: // global
           HpAlloc = 32;
           _sdmcJ::I64 = I64[Sp];
           I64[Sp] = block_cdmQ9_info;
           R1 = _sdmcJ::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdmS6: // global
           _sdmc0::P64 = P64[Sp + 16];
           _sdmck::P64 = P64[Sp + 32];
           _sdmco::I64 = I64[Sp + 40];
           _sdmcq::I64 = I64[Sp + 8];
           call MO_Touch(P64[Sp + 24]);
           call MO_Touch(_sdmc0::P64);
           I64[Hp - 24] = sat_sdmcR_info;
           P64[Hp - 16] = _sdmck::P64;
           I64[Hp - 8] = _sdmco::I64;
           I64[Hp] = _sdmcq::I64;
           R2 = Hp - 23;
           Sp = Sp + 48;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _cdmQ9() //  [R1]
         { []
         }
     {offset
       cdmQ9: // global
           I64[Sp] = R1;
           call _cdmQa() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdmQ9_info" {
     block_cdmQ9_info:
         const _cdmQ9;
         const 1093;
         const 12884901918;
         const Sdmj7_srt+16;
 },
 _cdmSL() //  [R1]
         { []
         }
     {offset
       cdmSL: // global
           _sdmcU::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdmSN_info;
           R3 = _sdmcU::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmSL_info" {
     block_cdmSL_info:
         const _cdmSL;
         const 4551;
         const 12884901918;
         const Sdmj7_srt+16;
 },
 _cdmSN() //  [R1]
         { []
         }
     {offset
       cdmSN: // global
           P64[Sp] = R1;
           call _sdmcV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdmSN_info" {
     block_cdmSN_info:
         const _cdmSN;
         const 2246;
         const 12884901918;
         const Sdmj7_srt+16;
 },
 _sdmcV() //  []
         { []
         }
     {offset
       sdmcV: // global
           _sdmd1::I64 = I64[I64[Sp + 8] + 8];
           if (_sdmd1::I64 == 0) goto cdmSH; else goto cdmSD;
       cdmSH: // global
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call _sdmd2() args: 0, res: 0, upd: 0;
       cdmSD: // global
           I64[Sp - 16] = block_cdmSz_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 8] = _sdmd1::I64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmSz() //  [R1]
         { []
         }
     {offset
       cdmSz: // global
           _sdmd1::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdmSB_info;
           R3 = _sdmd1::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmSz_info" {
     block_cdmSz_info:
         const _cdmSz;
         const 9032;
         const 12884901918;
         const Sdmj7_srt+16;
 },
 _cdmSB() //  [R1]
         { []
         }
     {offset
       cdmSB: // global
           P64[Sp] = R1;
           call _sdmd2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdmSB_info" {
     block_cdmSB_info:
         const _cdmSB;
         const 4487;
         const 12884901918;
         const Sdmj7_srt+16;
 },
 _sdmd2() //  []
         { []
         }
     {offset
       sdmd2: // global
           _sdmd8::I64 = I64[I64[Sp + 16] + 16];
           if (_sdmd8::I64 == 0) goto cdmSv; else goto cdmSr;
       cdmSv: // global
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call _cdmQT() args: 0, res: 0, upd: 0;
       cdmSr: // global
           I64[Sp - 16] = block_cdmSn_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 8] = _sdmd8::I64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmSn() //  [R1]
         { []
         }
     {offset
       cdmSn: // global
           _sdmd8::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdmSp_info;
           R3 = _sdmd8::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmSn_info" {
     block_cdmSn_info:
         const _cdmSn;
         const 17993;
         const 12884901918;
         const Sdmj7_srt+16;
 },
 _cdmSp() //  [R1]
         { []
         }
     {offset
       cdmSp: // global
           P64[Sp] = R1;
           call _cdmQT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdmSp_info" {
     block_cdmSp_info:
         const _cdmSp;
         const 8968;
         const 12884901918;
         const Sdmj7_srt+16;
 },
 _cdmQT() //  []
         { []
         }
     {offset
       cdmQT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmSg; else goto cdmSf;
       cdmSg: // global
           HpAlloc = 32;
           _sdmdb::P64 = P64[Sp];
           I64[Sp] = block_cdmQS_info;
           R1 = _sdmdb::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmSf: // global
           _sdmc0::P64 = P64[Sp + 40];
           _sdmck::P64 = P64[Sp + 56];
           _sdmco::I64 = I64[Sp + 64];
           _sdmcq::I64 = I64[Sp + 32];
           _sdmcD::I64 = I64[Sp + 24];
           _sdmdf::I64 = %MO_UU_Conv_W32_W64(I32[_sdmcD::I64 + 24]);
           _sdmdj::I64 = %MO_UU_Conv_W32_W64(I32[_sdmcD::I64 + 28]);
           call MO_Touch(P64[Sp + 48]);
           call MO_Touch(_sdmc0::P64);
           I64[Hp - 24] = sat_sdmdr_info;
           P64[Hp - 16] = _sdmck::P64;
           I64[Hp - 8] = _sdmco::I64;
           I64[Hp] = _sdmcq::I64;
           I64[Sp - 8] = block_cdmRl_info;
           R2 = Hp - 23;
           I64[Sp + 56] = _sdmdj::I64;
           I64[Sp + 64] = _sdmdf::I64;
           Sp = Sp - 8;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdmQS() //  [R1]
         { []
         }
     {offset
       cdmQS: // global
           P64[Sp] = R1;
           call _cdmQT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdmQS_info" {
     block_cdmQS_info:
         const _cdmQS;
         const 8968;
         const 12884901918;
         const Sdmj7_srt+16;
 },
 _cdmRl() //  [R1]
         { []
         }
     {offset
       cdmRl: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdmSj; else goto cdmSi;
       cdmSj: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmSi: // global
           I64[Hp - 88] = sat_sdmdD_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = I64[Sp + 72];
           I64[Hp - 56] = I64[Sp + 64];
           I64[Hp - 48] = GHC.ExecutionStack.Internal.Location_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmRl_info" {
     block_cdmRl_info:
         const _cdmRl;
         const 32265;
         const 30;
 },
 sat_sdme7_entry() //  [R1]
         { []
         }
     {offset
       cdmTo: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmTp; else goto cdmTq;
       cdmTp: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdmTq: // global
           I64[Sp - 32] = block_cdmTm_info;
           P64[Sp - 24] = P64[R1 + 7];
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = P64[R1 + 23];
           Sp = Sp - 32;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdme7_info" {
     sat_sdme7_info:
         const sat_sdme7_entry;
         const 3;
         const 12884901896;
         const 4294967299;
         const Sdmj7_srt+16;
 },
 _cdmTm() //  []
         { []
         }
     {offset
       cdmTm: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call go_sdmc9_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmTm_info" {
     block_cdmTm_info:
         const _cdmTm;
         const 3;
         const 12884901918;
         const Sdmj7_srt+16;
 },
 sat_sdmeb_entry() //  [R1]
         { []
         }
     {offset
       cdmTy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdmTz; else goto cdmTA;
       cdmTz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmTA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdmeb_info" {
     sat_sdmeb_info:
         const sat_sdmeb_entry;
         const 2;
         const 18;
 },
 go_sdmc9_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdmTF: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdmTG; else goto cdmTH;
       cdmTG: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmTH: // global
           I64[Sp - 32] = block_cdmPu_info;
           _sdmc9::P64 = R1;
           _sdmc0::P64 = P64[R1 + 5];
           R1 = R3;
           P64[Sp - 24] = _sdmc0::P64;
           P64[Sp - 16] = _sdmc9::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udmTV; else goto cdmPv;
       udmTV: // global
           call _cdmPu(R1) args: 0, res: 0, upd: 0;
       cdmPv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sdmc9_info" {
     go_sdmc9_info:
         const go_sdmc9_entry;
         const 1;
         const 12884901897;
         const 12884901903;
         const Sdmj7_srt+16;
 },
 _cdmPu() //  [R1]
         { []
         }
     {offset
       cdmPu: // global
           if (R1 & 7 == 1) goto cdmTC; else goto cdmTD;
       cdmTC: // global
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdmTD: // global
           I64[Sp - 8] = block_cdmPA_info;
           _sdmcf::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sdmcf::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmTU; else goto cdmPB;
       udmTU: // global
           call _cdmPA(R1) args: 0, res: 0, upd: 0;
       cdmPB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmPu_info" {
     block_cdmPu_info:
         const _cdmPu;
         const 3;
         const 12884901918;
         const Sdmj7_srt+16;
 },
 _cdmPA() //  [R1]
         { []
         }
     {offset
       cdmPA: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmTN; else goto cdmTM;
       cdmTN: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmTM: // global
           _sdmch::I64 = I64[R1 + 7];
           _sdmcj::I64 = I64[R1 + 23];
           I64[Hp - 32] = $witerFrames_sdmck_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sdmcj::I64;
           I64[Sp] = block_cdmTf_info;
           R3 = Hp - 7;
           R2 = _sdmch::I64;
           R1 = Hp - 29;
           call $witerFrames_sdmck_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmPA_info" {
     block_cdmPA_info:
         const _cdmPA;
         const 4;
         const 12884901918;
         const Sdmj7_srt+16;
 },
 _cdmTf() //  [R1]
         { []
         }
     {offset
       cdmTf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmTQ; else goto cdmTP;
       cdmTQ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmTP: // global
           I64[Hp - 24] = sat_sdme7_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 24] = block_cdmTs_info;
           R2 = Hp - 23;
           P64[Sp + 32] = R1;
           Sp = Sp + 24;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmTf_info" {
     block_cdmTf_info:
         const _cdmTf;
         const 132;
         const 12884901918;
         const Sdmj7_srt+16;
 },
 _cdmTs() //  [R1]
         { []
         }
     {offset
       cdmTs: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmTT; else goto cdmTS;
       cdmTT: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmTS: // global
           I64[Hp - 24] = sat_sdmeb_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmTs_info" {
     block_cdmTs_info:
         const _cdmTs;
         const 1;
         const 30;
 },
 GHC.ExecutionStack.Internal.stackFrames_entry() //  [R2]
         { []
         }
     {offset
       cdmU2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdmU3; else goto cdmU4;
       cdmU3: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.stackFrames_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmU4: // global
           I64[Sp - 16] = block_cdmP4_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.stackFrames_info" {
     GHC.ExecutionStack.Internal.stackFrames_info:
         const GHC.ExecutionStack.Internal.stackFrames_entry;
         const 0;
         const 124554051598;
         const 4294967301;
         const Sdmj7_srt;
 },
 _cdmP4() //  []
         { []
         }
     {offset
       cdmP4: // global
           (_sdmbQ::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] libdwPoolTake();
           if (_sdmbQ::I64 == 0) goto cdmTY; else goto cdmTX;
       cdmTY: // global
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call _cdmTW() args: 0, res: 0, upd: 0;
       cdmTX: // global
           I64[Sp - 8] = block_cdmPa_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _sdmbQ::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmP4_info" {
     block_cdmP4_info:
         const _cdmP4;
         const 1;
         const 55834574878;
         const Sdmj7_srt;
 },
 _cdmPa() //  [R1]
         { []
         }
     {offset
       cdmPa: // global
           I64[Sp - 8] = block_cdmPc_info;
           R6 = I64[Sp + 8];
           R5 = 0;
           R4 = 0;
           R3 = libdwPoolRelease;
           R2 = R1;
           P64[Sp - 16] = GHC.Tuple.()_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmPa_info" {
     block_cdmPa_info:
         const _cdmPa;
         const 66;
         const 55834574878;
         const Sdmj7_srt;
 },
 _cdmPc() //  []
         { []
         }
     {offset
       cdmPc: // global
           I64[Sp] = block_cdmPe_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto udmUv; else goto cdmPf;
       udmUv: // global
           call _cdmPe(R1) args: 0, res: 0, upd: 0;
       cdmPf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmPc_info" {
     block_cdmPc_info:
         const _cdmPc;
         const 131;
         const 12884901918;
         const Sdmj7_srt+16;
 },
 _cdmPe() //  [R1]
         { []
         }
     {offset
       cdmPe: // global
           _sdmc4::I64 = I64[I64[R1 + 15] + 8];
           I64[Sp] = block_cdmPm_info;
           R3 = _sdmc4::I64;
           R2 = GHC.Types.[]_closure+1;
           P64[Sp + 24] = P64[R1 + 7];
           call $wgo_rdm9M_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmPe_info" {
     block_cdmPe_info:
         const _cdmPe;
         const 387;
         const 12884901918;
         const Sdmj7_srt+16;
 },
 _cdmPm() //  [R1]
         { []
         }
     {offset
       cdmPm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmUc; else goto cdmUb;
       cdmUc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmUb: // global
           _sdmc0::P64 = P64[Sp + 24];
           call MO_Touch(_sdmc0::P64);
           I64[Hp - 8] = go_sdmc9_info;
           P64[Hp] = _sdmc0::P64;
           I64[Sp] = block_cdmU6_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = R1;
           P64[Sp + 24] = Hp - 5;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmPm_info" {
     block_cdmPm_info:
         const _cdmPm;
         const 131;
         const 12884901918;
         const Sdmj7_srt+16;
 },
 _cdmU6() //  [R1]
         { []
         }
     {offset
       cdmU6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmUl; else goto cdmUk;
       cdmUl: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmUk: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 16];
           _cdmPp::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cdmUi_info;
           R3 = R1;
           R2 = Hp - 15;
           R1 = _cdmPp::P64;
           Sp = Sp + 24;
           call go_sdmc9_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmU6_info" {
     block_cdmU6_info:
         const _cdmU6;
         const 131;
         const 12884901918;
         const Sdmj7_srt+16;
 },
 _cdmUi() //  [R1]
         { []
         }
     {offset
       cdmUi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmUp; else goto cdmUo;
       cdmUp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmUo: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp] = Hp - 6;
           call _cdmTW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdmUi_info" {
     block_cdmUi_info:
         const _cdmUi;
         const 0;
         const 30;
 },
 _cdmTW() //  []
         { []
         }
     {offset
       cdmTW: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.84874076 UTC

[section ""data" . g_rdm9N_closure" {
     g_rdm9N_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.850822813 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.showStackFrames1_bytes" {
     GHC.ExecutionStack.Internal.showStackFrames1_bytes:
         I8[] [83,116,97,99,107,32,116,114,97,99,101,58,10]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.852727693 UTC

[section ""cstring" . lvl_rdm9O_bytes" {
     lvl_rdm9O_bytes:
         I8[] [41]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.854583737 UTC

[section ""cstring" . lvl1_rdm9P_bytes" {
     lvl1_rdm9P_bytes:
         I8[] [46]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.856261892 UTC

[section ""cstring" . lvl2_rdm9Q_bytes" {
     lvl2_rdm9Q_bytes:
         I8[] [58]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.858289863 UTC

[section ""cstring" . lvl3_rdm9R_bytes" {
     lvl3_rdm9R_bytes:
         I8[] [32,40]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.860073727 UTC

[section ""cstring" . lvl4_rdm9S_bytes" {
     lvl4_rdm9S_bytes:
         I8[] [32,105,110,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.861834896 UTC

[section ""cstring" . lvl5_rdm9T_bytes" {
     lvl5_rdm9T_bytes:
         I8[] [32,32,32,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.874299074 UTC

[section ""data" . GHC.ExecutionStack.Internal.showStackFrames_go_closure" {
     GHC.ExecutionStack.Internal.showStackFrames_go_closure:
         const GHC.ExecutionStack.Internal.showStackFrames_go_info;
 },
 sat_sdmew_entry() //  [R1]
         { []
         }
     {offset
       cdmYd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdmYe; else goto cdmYf;
       cdmYe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmYf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.ExecutionStack.Internal.showStackFrames_go_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdmew_info" {
     sat_sdmew_info:
         const sat_sdmew_entry;
         const 2;
         const 18;
 },
 sat_sdmey_entry() //  [R1]
         { []
         }
     {offset
       cdmYh: // global
           _sdmey::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdmYi; else goto cdmYj;
       cdmYj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdmYl; else goto cdmYk;
       cdmYl: // global
           HpAlloc = 56;
           goto cdmYi;
       cdmYi: // global
           R1 = _sdmey::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmYk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdmey::P64;
           _sdmen::P64 = P64[_sdmey::P64 + 16];
           _sdmeq::P64 = P64[_sdmey::P64 + 24];
           _sdmes::P64 = P64[_sdmey::P64 + 32];
           I64[Hp - 48] = sat_sdmew_info;
           P64[Hp - 32] = _sdmen::P64;
           P64[Hp - 24] = _sdmeq::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = g_rdm9N_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sdmes::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdmey_info" {
     sat_sdmey_info:
         const sat_sdmey_entry;
         const 3;
         const 15;
 },
 karg_sdmev_entry() //  [R1]
         { []
         }
     {offset
       cdmYm: // global
           _sdmev::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdmYn; else goto cdmYo;
       cdmYo: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmYq; else goto cdmYp;
       cdmYq: // global
           HpAlloc = 40;
           goto cdmYn;
       cdmYn: // global
           R1 = _sdmev::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmYp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdmev::P64;
           _sdmen::P64 = P64[_sdmev::P64 + 16];
           _sdmeq::P64 = P64[_sdmev::P64 + 24];
           _sdmes::P64 = P64[_sdmev::P64 + 32];
           I64[Hp - 32] = sat_sdmey_info;
           P64[Hp - 16] = _sdmen::P64;
           P64[Hp - 8] = _sdmeq::P64;
           P64[Hp] = _sdmes::P64;
           R3 = Hp - 32;
           R2 = lvl4_rdm9S_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . karg_sdmev_info" {
     karg_sdmev_info:
         const karg_sdmev_entry;
         const 3;
         const 15;
 },
 sat_sdmeJ_entry() //  [R1]
         { []
         }
     {offset
       cdmZa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdmZb; else goto cdmZc;
       cdmZb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmZc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl_rdm9O_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdmeJ_info" {
     sat_sdmeJ_info:
         const sat_sdmeJ_entry;
         const 1;
         const 16;
 },
 sat_sdmeN_entry() //  [R1]
         { []
         }
     {offset
       cdmZd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmZh; else goto cdmZi;
       cdmZh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmZi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdmZ1_info;
           _sdmev::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdmev::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udmZp; else goto cdmZ2;
       udmZp: // global
           call _cdmZ1(R1) args: 0, res: 0, upd: 0;
       cdmZ2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdmeN_info" {
     sat_sdmeN_info:
         const sat_sdmeN_entry;
         const 2;
         const 18;
 },
 _cdmZ1() //  [R1]
         { []
         }
     {offset
       cdmZ1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdmZl; else goto cdmZk;
       cdmZl: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdmZk: // global
           _sdmeI::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sdmeJ_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cdmZe_info;
           R4 = Hp - 16;
           R3 = _sdmeI::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdmZ1_info" {
     block_cdmZ1_info:
         const _cdmZ1;
         const 1;
         const 30;
 },
 _cdmZe() //  [R1, R2]
         { []
         }
     {offset
       cdmZe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdmZo; else goto cdmZn;
       cdmZo: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdmZn: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdmZe_info" {
     block_cdmZe_info:
         const _cdmZe;
         const 0;
         const 30;
 },
 sat_sdmeO_entry() //  [R1]
         { []
         }
     {offset
       cdmZq: // global
           _sdmeO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdmZr; else goto cdmZs;
       cdmZs: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmZu; else goto cdmZt;
       cdmZu: // global
           HpAlloc = 32;
           goto cdmZr;
       cdmZr: // global
           R1 = _sdmeO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmZt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdmeO::P64;
           _sdmev::P64 = P64[_sdmeO::P64 + 16];
           _sdmeE::P64 = P64[_sdmeO::P64 + 24];
           I64[Hp - 24] = sat_sdmeN_info;
           P64[Hp - 8] = _sdmev::P64;
           P64[Hp] = _sdmeE::P64;
           R3 = Hp - 24;
           R2 = lvl1_rdm9P_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdmeO_info" {
     sat_sdmeO_info:
         const sat_sdmeO_entry;
         const 2;
         const 18;
 },
 sat_sdmeS_entry() //  [R1]
         { []
         }
     {offset
       cdmZv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdmZz; else goto cdmZA;
       cdmZz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmZA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdmYO_info;
           _sdmev::P64 = P64[R1 + 16];
           _sdmeE::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sdmev::P64;
           P64[Sp - 24] = _sdmeE::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udmZH; else goto cdmYP;
       udmZH: // global
           call _cdmYO(R1) args: 0, res: 0, upd: 0;
       cdmYP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdmeS_info" {
     sat_sdmeS_info:
         const sat_sdmeS_entry;
         const 3;
         const 15;
 },
 _cdmYO() //  [R1]
         { []
         }
     {offset
       cdmYO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmZD; else goto cdmZC;
       cdmZD: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdmZC: // global
           _sdmeG::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_sdmeO_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cdmZw_info;
           R4 = Hp - 24;
           R3 = _sdmeG::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdmYO_info" {
     block_cdmYO_info:
         const _cdmYO;
         const 2;
         const 30;
 },
 _cdmZw() //  [R1, R2]
         { []
         }
     {offset
       cdmZw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdmZG; else goto cdmZF;
       cdmZG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdmZF: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdmZw_info" {
     block_cdmZw_info:
         const _cdmZw;
         const 0;
         const 30;
 },
 sat_sdmeT_entry() //  [R1]
         { []
         }
     {offset
       cdmZI: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmZM; else goto cdmZL;
       cdmZM: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmZL: // global
           _sdmev::P64 = P64[R1 + 16];
           _sdmeD::P64 = P64[R1 + 24];
           _sdmeE::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdmeS_info;
           P64[Hp - 16] = _sdmev::P64;
           P64[Hp - 8] = _sdmeD::P64;
           P64[Hp] = _sdmeE::P64;
           R3 = Hp - 32;
           R2 = lvl2_rdm9Q_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdmeT_info" {
     sat_sdmeT_info:
         const sat_sdmeT_entry;
         const 3;
         const 15;
 },
 sat_sdmeU_entry() //  [R1]
         { []
         }
     {offset
       cdmZN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmZO; else goto cdmZP;
       cdmZO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmZP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdmYB_info;
           _sdmev::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdmev::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udmZT; else goto cdmYC;
       udmZT: // global
           call _cdmYB(R1) args: 0, res: 0, upd: 0;
       cdmYC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdmeU_info" {
     sat_sdmeU_info:
         const sat_sdmeU_entry;
         const 2;
         const 18;
 },
 _cdmYB() //  [R1]
         { []
         }
     {offset
       cdmYB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmZS; else goto cdmZR;
       cdmZS: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdmZR: // global
           _sdmeC::P64 = P64[R1 + 7];
           _sdmeD::P64 = P64[R1 + 15];
           _sdmeE::P64 = P64[R1 + 23];
           I64[Hp - 32] = sat_sdmeT_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _sdmeD::P64;
           P64[Hp] = _sdmeE::P64;
           R3 = Hp - 32;
           R2 = _sdmeC::P64;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdmYB_info" {
     block_cdmYB_info:
         const _cdmYB;
         const 1;
         const 30;
 },
 sat_sdmeV_entry() //  [R1]
         { []
         }
     {offset
       cdmZY: // global
           _sdmeV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdmZZ; else goto cdn00;
       cdn00: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdn02; else goto cdn01;
       cdn02: // global
           HpAlloc = 40;
           goto cdmZZ;
       cdmZZ: // global
           R1 = _sdmeV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdn01: // global
           _sdmen::P64 = P64[_sdmeV::P64 + 16];
           _sdmeq::P64 = P64[_sdmeV::P64 + 24];
           _sdmes::P64 = P64[_sdmeV::P64 + 32];
           _sdmeu::P64 = P64[_sdmeV::P64 + 40];
           I64[Hp - 32] = karg_sdmev_info;
           P64[Hp - 16] = _sdmen::P64;
           P64[Hp - 8] = _sdmeq::P64;
           P64[Hp] = _sdmes::P64;
           I64[Sp - 16] = block_cdmYr_info;
           R1 = _sdmeu::P64;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udn08; else goto cdmYs;
       udn08: // global
           call _cdmYr(R1) args: 0, res: 0, upd: 0;
       cdmYs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdmeV_info" {
     sat_sdmeV_info:
         const sat_sdmeV_entry;
         const 4;
         const 15;
 },
 _cdmYr() //  [R1]
         { []
         }
     {offset
       cdmYr: // global
           _cdmY1::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdmZV; else goto cdmZW;
       cdmZV: // global
           R1 = _cdmY1::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdmZW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdn07; else goto cdn06;
       cdn07: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdn06: // global
           _sdmeA::P64 = P64[R1 + 6];
           I64[Hp - 24] = sat_sdmeU_info;
           P64[Hp - 8] = _cdmY1::P64;
           P64[Hp] = _sdmeA::P64;
           R3 = Hp - 24;
           R2 = lvl3_rdm9R_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmYr_info" {
     block_cdmYr_info:
         const _cdmYr;
         const 1;
         const 30;
 },
 sat_sdmeW_entry() //  [R1]
         { []
         }
     {offset
       cdn09: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdn0a; else goto cdn0b;
       cdn0a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdn0b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdmXS_info;
           _sdmen::P64 = P64[R1 + 16];
           _sdmeq::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sdmen::P64;
           P64[Sp - 24] = _sdmeq::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udn0f; else goto cdmXT;
       udn0f: // global
           call _cdmXS(R1) args: 0, res: 0, upd: 0;
       cdmXT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdmeW_info" {
     sat_sdmeW_info:
         const sat_sdmeW_entry;
         const 3;
         const 15;
 },
 _cdmXS() //  [R1]
         { []
         }
     {offset
       cdmXS: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdn0e; else goto cdn0d;
       cdn0e: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdn0d: // global
           _sdmes::P64 = P64[R1 + 7];
           _sdmet::P64 = P64[R1 + 15];
           _sdmeu::P64 = P64[R1 + 23];
           I64[Hp - 40] = sat_sdmeV_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _sdmes::P64;
           P64[Hp] = _sdmeu::P64;
           R3 = Hp - 40;
           R2 = _sdmet::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdmXS_info" {
     block_cdmXS_info:
         const _cdmXS;
         const 2;
         const 30;
 },
 GHC.ExecutionStack.Internal.showStackFrames_go_entry() //  [R2, R3]
         { []
         }
     {offset
       cdn0k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdn0l; else goto cdn0m;
       cdn0l: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.showStackFrames_go_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdn0m: // global
           I64[Sp - 16] = block_cdmXI_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udn0s; else goto cdmXJ;
       udn0s: // global
           call _cdmXI(R1) args: 0, res: 0, upd: 0;
       cdmXJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.showStackFrames_go_info" {
     GHC.ExecutionStack.Internal.showStackFrames_go_info:
         const GHC.ExecutionStack.Internal.showStackFrames_go_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdmXI() //  [R1]
         { []
         }
     {offset
       cdmXI: // global
           _sdmen::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdn0h; else goto cdn0i;
       cdn0h: // global
           R1 = _sdmen::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdn0i: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdn0r; else goto cdn0q;
       cdn0r: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdn0q: // global
           _sdmep::P64 = P64[R1 + 6];
           _sdmeq::P64 = P64[R1 + 14];
           I64[Hp - 32] = sat_sdmeW_info;
           P64[Hp - 16] = _sdmen::P64;
           P64[Hp - 8] = _sdmep::P64;
           P64[Hp] = _sdmeq::P64;
           R3 = Hp - 32;
           R2 = lvl5_rdm9T_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdmXI_info" {
     block_cdmXI_info:
         const _cdmXI;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.915692338 UTC

[section ""data" . GHC.ExecutionStack.Internal.showStackFrames_closure" {
     GHC.ExecutionStack.Internal.showStackFrames_closure:
         const GHC.ExecutionStack.Internal.showStackFrames_info;
 },
 sat_sdmeZ_entry() //  [R1]
         { []
         }
     {offset
       cdn29: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdn2a; else goto cdn2b;
       cdn2a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdn2b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ExecutionStack.Internal.showStackFrames_go_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdmeZ_info" {
     sat_sdmeZ_info:
         const sat_sdmeZ_entry;
         const 2;
         const 18;
 },
 GHC.ExecutionStack.Internal.showStackFrames_entry() //  [R2, R3]
         { []
         }
     {offset
       cdn2c: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdn2g; else goto cdn2f;
       cdn2g: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.showStackFrames_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdn2f: // global
           I64[Hp - 24] = sat_sdmeZ_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = GHC.ExecutionStack.Internal.showStackFrames1_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.showStackFrames_info" {
     GHC.ExecutionStack.Internal.showStackFrames_info:
         const GHC.ExecutionStack.Internal.showStackFrames_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.921625819 UTC

[section ""data" . GHC.ExecutionStack.Internal.Chunk_closure" {
     GHC.ExecutionStack.Internal.Chunk_closure:
         const GHC.ExecutionStack.Internal.Chunk_info;
 },
 GHC.ExecutionStack.Internal.Chunk_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdn2u: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdn2y; else goto cdn2x;
       cdn2y: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.Chunk_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdn2x: // global
           I64[Hp - 24] = GHC.ExecutionStack.Internal.Chunk_con_info;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.Chunk_info" {
     GHC.ExecutionStack.Internal.Chunk_info:
         const GHC.ExecutionStack.Internal.Chunk_entry;
         const 0;
         const 14;
         const 12884901904;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.92576144 UTC

[section ""data" . GHC.ExecutionStack.Internal.Location_closure" {
     GHC.ExecutionStack.Internal.Location_closure:
         const GHC.ExecutionStack.Internal.Location_info;
 },
 GHC.ExecutionStack.Internal.Location_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdn2J: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdn2N; else goto cdn2M;
       cdn2N: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.Location_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdn2M: // global
           I64[Hp - 24] = GHC.ExecutionStack.Internal.Location_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.Location_info" {
     GHC.ExecutionStack.Internal.Location_info:
         const GHC.ExecutionStack.Internal.Location_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.930344264 UTC

[section ""data" . GHC.ExecutionStack.Internal.SrcLoc_closure" {
     GHC.ExecutionStack.Internal.SrcLoc_closure:
         const GHC.ExecutionStack.Internal.SrcLoc_info;
 },
 GHC.ExecutionStack.Internal.SrcLoc_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdn2Y: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdn32; else goto cdn31;
       cdn32: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.SrcLoc_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdn31: // global
           I64[Hp - 24] = GHC.ExecutionStack.Internal.SrcLoc_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.SrcLoc_info" {
     GHC.ExecutionStack.Internal.SrcLoc_info:
         const GHC.ExecutionStack.Internal.SrcLoc_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.934207017 UTC

[section ""cstring" . idmGt_str" {
     idmGt_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108,46,67,104,117,110,107]
 },
 GHC.ExecutionStack.Internal.Chunk_con_entry() //  [R1]
         { []
         }
     {offset
       cdn38: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.Chunk_con_info" {
     GHC.ExecutionStack.Internal.Chunk_con_info:
         const GHC.ExecutionStack.Internal.Chunk_con_entry;
         const 12884901888;
         const 7;
         const idmGt_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.937848843 UTC

[section ""cstring" . idmGv_str" {
     idmGv_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108,46,76,111,99,97,116,105,111,110]
 },
 GHC.ExecutionStack.Internal.Location_con_entry() //  [R1]
         { []
         }
     {offset
       cdn3e: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.Location_con_info" {
     GHC.ExecutionStack.Internal.Location_con_info:
         const GHC.ExecutionStack.Internal.Location_con_entry;
         const 3;
         const 1;
         const idmGv_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.941958223 UTC

[section ""cstring" . idmGx_str" {
     idmGx_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108,46,83,114,99,76,111,99]
 },
 GHC.ExecutionStack.Internal.SrcLoc_con_entry() //  [R1]
         { []
         }
     {offset
       cdn3k: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.SrcLoc_con_info" {
     GHC.ExecutionStack.Internal.SrcLoc_con_info:
         const GHC.ExecutionStack.Internal.SrcLoc_con_entry;
         const 3;
         const 1;
         const idmGx_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:32.945112516 UTC

[section ""relreadonly" . Sdmj7_srt" {
     Sdmj7_srt:
         const GHC.ForeignPtr.$winsertCFinalizer_closure;
         const GHC.ExecutionStack.Internal.collectStackTrace1_closure;
         const GHC.IO.Encoding.getForeignEncoding_closure;
         const GHC.Foreign.$wpeekCString_closure;
         const GHC.ExecutionStack.Internal.stackFrames_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.22471305 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:08:34.227523593 UTC

[section ""data" . GHC.ExecutionStack.Internal.$WChunk_closure" {
     GHC.ExecutionStack.Internal.$WChunk_closure:
         const GHC.ExecutionStack.Internal.$WChunk_info;
 },
 GHC.ExecutionStack.Internal.$WChunk_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdn8D: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdn8R; else goto cdn8S;
       cdn8R: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.$WChunk_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdn8S: // global
           I64[Sp - 24] = block_cdn8A_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udn8Z; else goto cdn8B;
       udn8Z: // global
           call _cdn8A(R1) args: 0, res: 0, upd: 0;
       cdn8B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.$WChunk_info" {
     GHC.ExecutionStack.Internal.$WChunk_info:
         const GHC.ExecutionStack.Internal.$WChunk_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cdn8A() //  [R1]
         { []
         }
     {offset
       cdn8A: // global
           I64[Sp] = block_cdn8G_info;
           _sdn3v::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sdn3v::I64;
           if (R1 & 7 != 0) goto udn8Y; else goto cdn8H;
       udn8Y: // global
           call _cdn8G(R1) args: 0, res: 0, upd: 0;
       cdn8H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdn8A_info" {
     block_cdn8A_info:
         const _cdn8A;
         const 2;
         const 30;
 },
 _cdn8G() //  [R1]
         { []
         }
     {offset
       cdn8G: // global
           I64[Sp] = block_cdn8L_info;
           _sdn3x::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sdn3x::I64;
           if (R1 & 7 != 0) goto udn90; else goto cdn8M;
       udn90: // global
           call _cdn8L(R1) args: 0, res: 0, upd: 0;
       cdn8M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdn8G_info" {
     block_cdn8G_info:
         const _cdn8G;
         const 66;
         const 30;
 },
 _cdn8L() //  [R1]
         { []
         }
     {offset
       cdn8L: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdn8X; else goto cdn8W;
       cdn8X: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdn8W: // global
           _sdn3z::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.ExecutionStack.Internal.Chunk_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _sdn3z::I64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdn8L_info" {
     block_cdn8L_info:
         const _cdn8L;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.236565663 UTC

[section ""data" . GHC.ExecutionStack.Internal.sourceColumn_closure" {
     GHC.ExecutionStack.Internal.sourceColumn_closure:
         const GHC.ExecutionStack.Internal.sourceColumn_info;
 },
 GHC.ExecutionStack.Internal.sourceColumn_entry() //  [R2]
         { []
         }
     {offset
       cdn9w: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdn9x; else goto cdn9y;
       cdn9x: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.sourceColumn_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdn9y: // global
           I64[Sp - 8] = block_cdn9t_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udn9C; else goto cdn9u;
       udn9C: // global
           call _cdn9t(R1) args: 0, res: 0, upd: 0;
       cdn9u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.sourceColumn_info" {
     GHC.ExecutionStack.Internal.sourceColumn_info:
         const GHC.ExecutionStack.Internal.sourceColumn_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdn9t() //  [R1]
         { []
         }
     {offset
       cdn9t: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdn9t_info" {
     block_cdn9t_info:
         const _cdn9t;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.241982711 UTC

[section ""data" . GHC.ExecutionStack.Internal.sourceLine_closure" {
     GHC.ExecutionStack.Internal.sourceLine_closure:
         const GHC.ExecutionStack.Internal.sourceLine_info;
 },
 GHC.ExecutionStack.Internal.sourceLine_entry() //  [R2]
         { []
         }
     {offset
       cdn9W: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdn9X; else goto cdn9Y;
       cdn9X: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.sourceLine_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdn9Y: // global
           I64[Sp - 8] = block_cdn9T_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udna2; else goto cdn9U;
       udna2: // global
           call _cdn9T(R1) args: 0, res: 0, upd: 0;
       cdn9U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.sourceLine_info" {
     GHC.ExecutionStack.Internal.sourceLine_info:
         const GHC.ExecutionStack.Internal.sourceLine_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdn9T() //  [R1]
         { []
         }
     {offset
       cdn9T: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdn9T_info" {
     block_cdn9T_info:
         const _cdn9T;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.247700467 UTC

[section ""data" . GHC.ExecutionStack.Internal.sourceFile_closure" {
     GHC.ExecutionStack.Internal.sourceFile_closure:
         const GHC.ExecutionStack.Internal.sourceFile_info;
 },
 GHC.ExecutionStack.Internal.sourceFile_entry() //  [R2]
         { []
         }
     {offset
       cdnam: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnan; else goto cdnao;
       cdnan: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.sourceFile_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdnao: // global
           I64[Sp - 8] = block_cdnaj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udnas; else goto cdnak;
       udnas: // global
           call _cdnaj(R1) args: 0, res: 0, upd: 0;
       cdnak: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.sourceFile_info" {
     GHC.ExecutionStack.Internal.sourceFile_info:
         const GHC.ExecutionStack.Internal.sourceFile_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdnaj() //  [R1]
         { []
         }
     {offset
       cdnaj: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnaj_info" {
     block_cdnaj_info:
         const _cdnaj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.253002549 UTC

[section ""data" . GHC.ExecutionStack.Internal.srcLoc_closure" {
     GHC.ExecutionStack.Internal.srcLoc_closure:
         const GHC.ExecutionStack.Internal.srcLoc_info;
 },
 GHC.ExecutionStack.Internal.srcLoc_entry() //  [R2]
         { []
         }
     {offset
       cdnaM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnaN; else goto cdnaO;
       cdnaN: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.srcLoc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdnaO: // global
           I64[Sp - 8] = block_cdnaJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udnaS; else goto cdnaK;
       udnaS: // global
           call _cdnaJ(R1) args: 0, res: 0, upd: 0;
       cdnaK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.srcLoc_info" {
     GHC.ExecutionStack.Internal.srcLoc_info:
         const GHC.ExecutionStack.Internal.srcLoc_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdnaJ() //  [R1]
         { []
         }
     {offset
       cdnaJ: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnaJ_info" {
     block_cdnaJ_info:
         const _cdnaJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.26287272 UTC

[section ""data" . GHC.ExecutionStack.Internal.functionName_closure" {
     GHC.ExecutionStack.Internal.functionName_closure:
         const GHC.ExecutionStack.Internal.functionName_info;
 },
 GHC.ExecutionStack.Internal.functionName_entry() //  [R2]
         { []
         }
     {offset
       cdnbc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnbd; else goto cdnbe;
       cdnbd: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.functionName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdnbe: // global
           I64[Sp - 8] = block_cdnb9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udnbi; else goto cdnba;
       udnbi: // global
           call _cdnb9(R1) args: 0, res: 0, upd: 0;
       cdnba: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.functionName_info" {
     GHC.ExecutionStack.Internal.functionName_info:
         const GHC.ExecutionStack.Internal.functionName_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdnb9() //  [R1]
         { []
         }
     {offset
       cdnb9: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnb9_info" {
     block_cdnb9_info:
         const _cdnb9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.269207713 UTC

[section ""data" . GHC.ExecutionStack.Internal.objectName_closure" {
     GHC.ExecutionStack.Internal.objectName_closure:
         const GHC.ExecutionStack.Internal.objectName_info;
 },
 GHC.ExecutionStack.Internal.objectName_entry() //  [R2]
         { []
         }
     {offset
       cdnbC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnbD; else goto cdnbE;
       cdnbD: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.objectName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdnbE: // global
           I64[Sp - 8] = block_cdnbz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udnbI; else goto cdnbA;
       udnbI: // global
           call _cdnbz(R1) args: 0, res: 0, upd: 0;
       cdnbA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.objectName_info" {
     GHC.ExecutionStack.Internal.objectName_info:
         const GHC.ExecutionStack.Internal.objectName_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdnbz() //  [R1]
         { []
         }
     {offset
       cdnbz: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnbz_info" {
     block_cdnbz_info:
         const _cdnbz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.275310665 UTC

[section ""data" . GHC.ExecutionStack.Internal.chunkFirstFrame_closure" {
     GHC.ExecutionStack.Internal.chunkFirstFrame_closure:
         const GHC.ExecutionStack.Internal.chunkFirstFrame_info;
 },
 GHC.ExecutionStack.Internal.chunkFirstFrame_entry() //  [R2]
         { []
         }
     {offset
       cdnc2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnc6; else goto cdnc7;
       cdnc6: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.chunkFirstFrame_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdnc7: // global
           I64[Sp - 8] = block_cdnbZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udncb; else goto cdnc0;
       udncb: // global
           call _cdnbZ(R1) args: 0, res: 0, upd: 0;
       cdnc0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.chunkFirstFrame_info" {
     GHC.ExecutionStack.Internal.chunkFirstFrame_info:
         const GHC.ExecutionStack.Internal.chunkFirstFrame_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdnbZ() //  [R1]
         { []
         }
     {offset
       cdnbZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdnca; else goto cdnc9;
       cdnca: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnc9: // global
           _sdn48::I64 = I64[R1 + 23];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sdn48::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnbZ_info" {
     block_cdnbZ_info:
         const _cdnbZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.281844078 UTC

[section ""data" . GHC.ExecutionStack.Internal.chunkNext_closure" {
     GHC.ExecutionStack.Internal.chunkNext_closure:
         const GHC.ExecutionStack.Internal.chunkNext_info;
 },
 GHC.ExecutionStack.Internal.chunkNext_entry() //  [R2]
         { []
         }
     {offset
       cdncv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdncz; else goto cdncA;
       cdncz: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.chunkNext_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdncA: // global
           I64[Sp - 8] = block_cdncs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udncE; else goto cdnct;
       udncE: // global
           call _cdncs(R1) args: 0, res: 0, upd: 0;
       cdnct: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.chunkNext_info" {
     GHC.ExecutionStack.Internal.chunkNext_info:
         const GHC.ExecutionStack.Internal.chunkNext_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdncs() //  [R1]
         { []
         }
     {offset
       cdncs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdncD; else goto cdncC;
       cdncD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdncC: // global
           _sdn4c::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sdn4c::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdncs_info" {
     block_cdncs_info:
         const _cdncs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.287952605 UTC

[section ""data" . GHC.ExecutionStack.Internal.chunkFrames_closure" {
     GHC.ExecutionStack.Internal.chunkFrames_closure:
         const GHC.ExecutionStack.Internal.chunkFrames_info;
 },
 GHC.ExecutionStack.Internal.chunkFrames_entry() //  [R2]
         { []
         }
     {offset
       cdncY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnd2; else goto cdnd3;
       cdnd2: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.chunkFrames_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdnd3: // global
           I64[Sp - 8] = block_cdncV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udnd7; else goto cdncW;
       udnd7: // global
           call _cdncV(R1) args: 0, res: 0, upd: 0;
       cdncW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.chunkFrames_info" {
     GHC.ExecutionStack.Internal.chunkFrames_info:
         const GHC.ExecutionStack.Internal.chunkFrames_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdncV() //  [R1]
         { []
         }
     {offset
       cdncV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdnd6; else goto cdnd5;
       cdnd6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnd5: // global
           _sdn4g::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _sdn4g::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdncV_info" {
     block_cdncV_info:
         const _cdncV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.293556229 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$trModule4_bytes" {
     GHC.ExecutionStack.Internal.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.295527016 UTC

[section ""data" . GHC.ExecutionStack.Internal.$trModule3_closure" {
     GHC.ExecutionStack.Internal.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.298368981 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$trModule2_bytes" {
     GHC.ExecutionStack.Internal.$trModule2_bytes:
         I8[] [71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.300086597 UTC

[section ""data" . GHC.ExecutionStack.Internal.$trModule1_closure" {
     GHC.ExecutionStack.Internal.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.301786106 UTC

[section ""data" . GHC.ExecutionStack.Internal.$trModule_closure" {
     GHC.ExecutionStack.Internal.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ExecutionStack.Internal.$trModule3_closure+1;
         const GHC.ExecutionStack.Internal.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.303490384 UTC

[section ""data" . $krep_rdm9l_closure" {
     $krep_rdm9l_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.305183771 UTC

[section ""data" . $krep1_rdm9m_closure" {
     $krep1_rdm9m_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.307010969 UTC

[section ""data" . $krep2_rdm9n_closure" {
     $krep2_rdm9n_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.308728931 UTC

[section ""data" . $krep3_rdm9o_closure" {
     $krep3_rdm9o_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWord_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.310951208 UTC

[section ""data" . $krep4_rdm9p_closure" {
     $krep4_rdm9p_closure:
         const :_con_info;
         const $krep1_rdm9m_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.312672274 UTC

[section ""data" . $krep5_rdm9q_closure" {
     $krep5_rdm9q_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep4_rdm9p_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.314400989 UTC

[section ""data" . $krep6_rdm9r_closure" {
     $krep6_rdm9r_closure:
         const :_con_info;
         const $krep2_rdm9n_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.316082887 UTC

[section ""data" . $krep7_rdm9s_closure" {
     $krep7_rdm9s_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep6_rdm9r_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.317883381 UTC

[section ""data" . $krep8_rdm9t_closure" {
     $krep8_rdm9t_closure:
         const :_con_info;
         const $krep7_rdm9s_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.319588959 UTC

[section ""data" . $krep9_rdm9u_closure" {
     $krep9_rdm9u_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep8_rdm9t_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.321295217 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcSrcLoc2_bytes" {
     GHC.ExecutionStack.Internal.$tcSrcLoc2_bytes:
         I8[] [83,114,99,76,111,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.322957427 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSrcLoc1_closure" {
     GHC.ExecutionStack.Internal.$tcSrcLoc1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcSrcLoc2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.325734438 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSrcLoc_closure" {
     GHC.ExecutionStack.Internal.$tcSrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcSrcLoc1_closure+1;
         const GHC.Types.krep$*_closure;
         const 8235067574311587288;
         const 11106182367596705879;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.327538994 UTC

[section ""data" . $krep10_rdm9v_closure" {
     $krep10_rdm9v_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcSrcLoc_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.329286676 UTC

[section ""data" . $krep11_rdm9w_closure" {
     $krep11_rdm9w_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rdm9l_closure+1;
         const $krep10_rdm9v_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.330961546 UTC

[section ""data" . $krep12_rdm9x_closure" {
     $krep12_rdm9x_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rdm9l_closure+1;
         const $krep11_rdm9w_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.332611434 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'SrcLoc1_closure" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rdm9q_closure+1;
         const $krep12_rdm9x_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.334273107 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'SrcLoc3_bytes" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc3_bytes:
         I8[] [39,83,114,99,76,111,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.335927183 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'SrcLoc2_closure" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'SrcLoc3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.337699409 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'SrcLoc_closure" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'SrcLoc2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'SrcLoc1_closure+4;
         const 11095721805058681290;
         const 15266549541595723377;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.339529209 UTC

[section ""data" . $krep13_rdm9y_closure" {
     $krep13_rdm9y_closure:
         const :_con_info;
         const $krep10_rdm9v_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.341274189 UTC

[section ""data" . $krep14_rdm9z_closure" {
     $krep14_rdm9z_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep13_rdm9y_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.343003422 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcLocation2_bytes" {
     GHC.ExecutionStack.Internal.$tcLocation2_bytes:
         I8[] [76,111,99,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.34463021 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcLocation1_closure" {
     GHC.ExecutionStack.Internal.$tcLocation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcLocation2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.347027237 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcLocation_closure" {
     GHC.ExecutionStack.Internal.$tcLocation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcLocation1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11638758687983955592;
         const 6940671496618727587;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.348885505 UTC

[section ""data" . $krep15_rdm9A_closure" {
     $krep15_rdm9A_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcLocation_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.351199407 UTC

[section ""data" . $krep16_rdm9B_closure" {
     $krep16_rdm9B_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_rdm9z_closure+1;
         const $krep15_rdm9A_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.352978651 UTC

[section ""data" . $krep17_rdm9C_closure" {
     $krep17_rdm9C_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rdm9q_closure+1;
         const $krep16_rdm9B_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.354758655 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Location1_closure" {
     GHC.ExecutionStack.Internal.$tc'Location1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rdm9q_closure+1;
         const $krep17_rdm9C_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.356468449 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'Location3_bytes" {
     GHC.ExecutionStack.Internal.$tc'Location3_bytes:
         I8[] [39,76,111,99,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.358206923 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Location2_closure" {
     GHC.ExecutionStack.Internal.$tc'Location2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'Location3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.360003241 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Location_closure" {
     GHC.ExecutionStack.Internal.$tc'Location_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Location2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Location1_closure+4;
         const 12834480788254682335;
         const 10467761170474242090;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.361860394 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcStackTrace2_bytes" {
     GHC.ExecutionStack.Internal.$tcStackTrace2_bytes:
         I8[] [83,116,97,99,107,84,114,97,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.363551179 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcStackTrace1_closure" {
     GHC.ExecutionStack.Internal.$tcStackTrace1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcStackTrace2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.365919542 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcStackTrace_closure" {
     GHC.ExecutionStack.Internal.$tcStackTrace_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcStackTrace1_closure+1;
         const GHC.Types.krep$*_closure;
         const 156026104294967557;
         const 17600277320898304892;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.367705129 UTC

[section ""data" . $krep18_rdm9D_closure" {
     $krep18_rdm9D_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcStackTrace_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.369504226 UTC

[section ""data" . $krep19_rdm9E_closure" {
     $krep19_rdm9E_closure:
         const :_con_info;
         const $krep18_rdm9D_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.371282728 UTC

[section ""data" . $krep20_rdm9F_closure" {
     $krep20_rdm9F_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure;
         const $krep19_rdm9E_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.373003158 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'StackTrace1_closure" {
     GHC.ExecutionStack.Internal.$tc'StackTrace1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep20_rdm9F_closure+1;
         const $krep18_rdm9D_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.374786934 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'StackTrace3_bytes" {
     GHC.ExecutionStack.Internal.$tc'StackTrace3_bytes:
         I8[] [39,83,116,97,99,107,84,114,97,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.377029082 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'StackTrace2_closure" {
     GHC.ExecutionStack.Internal.$tc'StackTrace2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'StackTrace3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.378850542 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'StackTrace_closure" {
     GHC.ExecutionStack.Internal.$tc'StackTrace_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'StackTrace2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'StackTrace1_closure+4;
         const 8151790971853785814;
         const 7394195233358636505;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.380640237 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcChunk2_bytes" {
     GHC.ExecutionStack.Internal.$tcChunk2_bytes:
         I8[] [67,104,117,110,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.382881712 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcChunk1_closure" {
     GHC.ExecutionStack.Internal.$tcChunk1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcChunk2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.384738903 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcChunk_closure" {
     GHC.ExecutionStack.Internal.$tcChunk_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcChunk1_closure+1;
         const GHC.Types.krep$*_closure;
         const 1813577326074213410;
         const 3256155729866972563;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.386673358 UTC

[section ""data" . $krep21_rdm9G_closure" {
     $krep21_rdm9G_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcChunk_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.388441609 UTC

[section ""data" . $krep22_rdm9H_closure" {
     $krep22_rdm9H_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_rdm9u_closure+1;
         const $krep21_rdm9G_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.390254324 UTC

[section ""data" . $krep23_rdm9I_closure" {
     $krep23_rdm9I_closure:
         const :_con_info;
         const $krep21_rdm9G_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.391907181 UTC

[section ""data" . $krep24_rdm9J_closure" {
     $krep24_rdm9J_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep23_rdm9I_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.393661729 UTC

[section ""data" . $krep25_rdm9K_closure" {
     $krep25_rdm9K_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep24_rdm9J_closure+1;
         const $krep22_rdm9H_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.395419428 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Chunk1_closure" {
     GHC.ExecutionStack.Internal.$tc'Chunk1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rdm9o_closure+1;
         const $krep25_rdm9K_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.397115687 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'Chunk3_bytes" {
     GHC.ExecutionStack.Internal.$tc'Chunk3_bytes:
         I8[] [39,67,104,117,110,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.399338076 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Chunk2_closure" {
     GHC.ExecutionStack.Internal.$tc'Chunk2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'Chunk3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.401047394 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Chunk_closure" {
     GHC.ExecutionStack.Internal.$tc'Chunk_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Chunk2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Chunk1_closure+4;
         const 16594405016023301875;
         const 5381929581673016432;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.403406062 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcSession2_bytes" {
     GHC.ExecutionStack.Internal.$tcSession2_bytes:
         I8[] [83,101,115,115,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.405233127 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSession1_closure" {
     GHC.ExecutionStack.Internal.$tcSession1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcSession2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.406996292 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSession_closure" {
     GHC.ExecutionStack.Internal.$tcSession_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcSession1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11168382530978838993;
         const 7144139957235519240;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.409751199 UTC

[section ""data" . libdw_pool_clear_rdm9L_closure" {
     libdw_pool_clear_rdm9L_closure:
         const libdw_pool_clear_rdm9L_info;
 },
 libdw_pool_clear_rdm9L_entry() //  []
         { []
         }
     {offset
       cdnep: // global
           call "ccall" arg hints:  []  result hints:  [] libdwPoolClear();
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . libdw_pool_clear_rdm9L_info" {
     libdw_pool_clear_rdm9L_info:
         const libdw_pool_clear_rdm9L_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.413144911 UTC

[section ""data" . GHC.ExecutionStack.Internal.invalidateDebugCache_closure" {
     GHC.ExecutionStack.Internal.invalidateDebugCache_closure:
         const GHC.ExecutionStack.Internal.invalidateDebugCache_info;
 },
 GHC.ExecutionStack.Internal.invalidateDebugCache_entry() //  []
         { []
         }
     {offset
       cdneC: // global
           call libdw_pool_clear_rdm9L_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.invalidateDebugCache_info" {
     GHC.ExecutionStack.Internal.invalidateDebugCache_info:
         const GHC.ExecutionStack.Internal.invalidateDebugCache_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.417724763 UTC

[section ""data" . GHC.ExecutionStack.Internal.stackDepth_closure" {
     GHC.ExecutionStack.Internal.stackDepth_closure:
         const GHC.ExecutionStack.Internal.stackDepth_info;
 },
 GHC.ExecutionStack.Internal.stackDepth_entry() //  [R2]
         { []
         }
     {offset
       cdneV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdneW; else goto cdneX;
       cdneW: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.stackDepth_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdneX: // global
           I64[Sp - 16] = block_cdneN_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.stackDepth_info" {
     GHC.ExecutionStack.Internal.stackDepth_info:
         const GHC.ExecutionStack.Internal.stackDepth_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cdneN() //  []
         { []
         }
     {offset
       cdneN: // global
           _sdn4n::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdneP_info;
           R1 = _sdn4n::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udnfa; else goto cdneQ;
       udnfa: // global
           call _cdneP(R1) args: 0, res: 0, upd: 0;
       cdneQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdneN_info" {
     block_cdneN_info:
         const _cdneN;
         const 1;
         const 30;
 },
 _cdneP() //  [R1]
         { []
         }
     {offset
       cdneP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdnf3; else goto cdnf2;
       cdnf3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnf2: // global
           _sdn4u::I64 = I64[I64[R1 + 15]];
           call MO_Touch(P64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sdn4u::I64;
           R1 = (Hp + -7) & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdneP_info" {
     block_cdneP_info:
         const _cdneP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.426480557 UTC

[section ""data" . GHC.ExecutionStack.Internal.collectStackTrace1_closure" {
     GHC.ExecutionStack.Internal.collectStackTrace1_closure:
         const GHC.ExecutionStack.Internal.collectStackTrace1_info;
         const 0;
 },
 GHC.ExecutionStack.Internal.collectStackTrace1_entry() //  []
         { []
         }
     {offset
       cdnfD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdnfE; else goto cdnfF;
       cdnfE: // global
           R1 = GHC.ExecutionStack.Internal.collectStackTrace1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdnfF: // global
           (_sdn4F::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] libdwPoolTake();
           if (_sdn4F::I64 == 0) goto udngb; else goto cdnfB;
       udngb: // global
           call _cdnfC() args: 0, res: 0, upd: 0;
       cdnfB: // global
           I64[Sp - 16] = block_cdnfH_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 8] = _sdn4F::I64;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.collectStackTrace1_info" {
     GHC.ExecutionStack.Internal.collectStackTrace1_info:
         const GHC.ExecutionStack.Internal.collectStackTrace1_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const Sdngd_srt;
 },
 _cdnfH() //  [R1]
         { []
         }
     {offset
       cdnfH: // global
           I64[Sp - 8] = block_cdnfJ_info;
           R6 = I64[Sp + 8];
           R5 = 0;
           R4 = 0;
           R3 = libdwPoolRelease;
           R2 = R1;
           P64[Sp - 16] = GHC.Tuple.()_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnfH_info" {
     block_cdnfH_info:
         const _cdnfH;
         const 65;
         const 4294967326;
         const Sdngd_srt;
 },
 _cdnfJ() //  [R1]
         { []
         }
     {offset
       cdnfJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdnfO; else goto cdnfN;
       cdnfO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnfN: // global
           _sdn4J::P64 = P64[Sp + 8];
           (_sdn4Q::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] libdwGetBacktrace(I64[Sp + 16]);
           I64[Hp - 8] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp] = _sdn4J::P64;
           call MO_Touch(Hp - 7);
           if (_sdn4Q::I64 == 0) goto udnga; else goto cdng4;
       udnga: // global
           Sp = Sp + 24;
           call _cdnfC() args: 0, res: 0, upd: 0;
       cdng4: // global
           I64[Sp + 8] = block_cdnfW_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp + 16] = _sdn4Q::I64;
           Sp = Sp + 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnfJ_info" {
     block_cdnfJ_info:
         const _cdnfJ;
         const 130;
         const 4294967326;
         const Sdngd_srt;
 },
 _cdnfC() //  []
         { []
         }
     {offset
       cdnfC: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cdnfW() //  [R1]
         { []
         }
     {offset
       cdnfW: // global
           I64[Sp - 8] = block_cdnfY_info;
           R6 = I64[Sp + 8];
           R5 = 0;
           R4 = 0;
           R3 = backtraceFree;
           R2 = R1;
           P64[Sp - 16] = GHC.Tuple.()_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnfW_info" {
     block_cdnfW_info:
         const _cdnfW;
         const 65;
         const 4294967326;
         const Sdngd_srt;
 },
 _cdnfY() //  [R1]
         { []
         }
     {offset
       cdnfY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdng8; else goto cdng7;
       cdng8: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdng7: // global
           I64[Hp - 48] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           I64[Hp - 32] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 24] = Hp - 47;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnfY_info" {
     block_cdnfY_info:
         const _cdnfY;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.438398208 UTC

[section ""data" . GHC.ExecutionStack.Internal.collectStackTrace_closure" {
     GHC.ExecutionStack.Internal.collectStackTrace_closure:
         const GHC.ExecutionStack.Internal.collectStackTrace_info;
         const 0;
 },
 GHC.ExecutionStack.Internal.collectStackTrace_entry() //  []
         { []
         }
     {offset
       cdngW: // global
           call GHC.ExecutionStack.Internal.collectStackTrace1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.collectStackTrace_info" {
     GHC.ExecutionStack.Internal.collectStackTrace_info:
         const GHC.ExecutionStack.Internal.collectStackTrace_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const Sdngd_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.442864481 UTC

[section ""data" . $wgo_rdm9M_closure" {
     $wgo_rdm9M_closure:
         const $wgo_rdm9M_info;
 },
 $wgo_rdm9M_entry() //  [R2, R3]
         { []
         }
     {offset
       cdnhl: // global
           _sdn54::I64 = R3;
           _sdn53::P64 = R2;
           goto cdnh4;
       cdnh4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdnhp; else goto cdnho;
       cdnhp: // global
           HpAlloc = 56;
           R3 = _sdn54::I64;
           R2 = _sdn53::P64;
           R1 = $wgo_rdm9M_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdnho: // global
           if (_sdn54::I64 == 0) goto cdnhk; else goto cdnhj;
       cdnhk: // global
           Hp = Hp - 56;
           R1 = _sdn53::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdnhj: // global
           _sdn59::I64 = I64[_sdn54::I64];
           _sdn5d::I64 = I64[_sdn54::I64 + 8];
           I64[Hp - 48] = GHC.ExecutionStack.Internal.Chunk_con_info;
           I64[Hp - 40] = _sdn59::I64;
           I64[Hp - 32] = _sdn5d::I64;
           I64[Hp - 24] = _sdn54::I64 + 16;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = _sdn53::P64;
           _sdn54::I64 = _sdn5d::I64;
           _sdn53::P64 = Hp - 14;
           goto cdnh4;
     }
 },
 section ""relreadonly" . $wgo_rdm9M_info" {
     $wgo_rdm9M_info:
         const $wgo_rdm9M_entry;
         const 0;
         const 14;
         const 12884901902;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.461197928 UTC

[section ""data" . GHC.ExecutionStack.Internal.stackFrames_closure" {
     GHC.ExecutionStack.Internal.stackFrames_closure:
         const GHC.ExecutionStack.Internal.stackFrames_info;
         const 0;
 },
 sat_sdn6n_entry() //  [R1]
         { []
         }
     {offset
       cdniX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdnj0; else goto cdnj1;
       cdnj0: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdnj1: // global
           I64[Sp - 32] = block_cdniT_info;
           P64[Sp - 24] = P64[R1 + 7];
           I64[Sp - 16] = I64[R1 + 15];
           I64[Sp - 8] = I64[R1 + 23];
           Sp = Sp - 32;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdn6n_info" {
     sat_sdn6n_info:
         const sat_sdn6n_entry;
         const 8589934593;
         const 12884901896;
         const 4294967299;
         const Sdngd_srt+16;
 },
 _cdniT() //  []
         { []
         }
     {offset
       cdniT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdnj4; else goto cdnj3;
       cdnj4: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdnj3: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 24] + 8;
           R3 = Hp - 7;
           R2 = I64[Sp + 16] - 1;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call $witerFrames_sdn5Q_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdniT_info" {
     block_cdniT_info:
         const _cdniT;
         const 387;
         const 12884901918;
         const Sdngd_srt+16;
 },
 sat_sdn6X_entry() //  [R1]
         { []
         }
     {offset
       cdnjM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdnjP; else goto cdnjQ;
       cdnjP: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdnjQ: // global
           I64[Sp - 32] = block_cdnjI_info;
           P64[Sp - 24] = P64[R1 + 7];
           I64[Sp - 16] = I64[R1 + 15];
           I64[Sp - 8] = I64[R1 + 23];
           Sp = Sp - 32;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdn6X_info" {
     sat_sdn6X_info:
         const sat_sdn6X_entry;
         const 8589934593;
         const 12884901896;
         const 4294967299;
         const Sdngd_srt+16;
 },
 _cdnjI() //  []
         { []
         }
     {offset
       cdnjI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdnjT; else goto cdnjS;
       cdnjT: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdnjS: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 24] + 8;
           R3 = Hp - 7;
           R2 = I64[Sp + 16] - 1;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call $witerFrames_sdn5Q_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnjI_info" {
     block_cdnjI_info:
         const _cdnjI;
         const 387;
         const 12884901918;
         const Sdngd_srt+16;
 },
 sat_sdn79_entry() //  [R1]
         { []
         }
     {offset
       cdnk8: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdnk9; else goto cdnka;
       cdnk9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnka: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdnk1_info;
           _sdn6L::I64 = I64[R1 + 24];
           _sdn6P::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           I64[Sp - 32] = _sdn6L::I64;
           I64[Sp - 24] = _sdn6P::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udnkt; else goto cdnk2;
       udnkt: // global
           call _cdnk1(R1) args: 0, res: 0, upd: 0;
       cdnk2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdn79_info" {
     sat_sdn79_info:
         const sat_sdn79_entry;
         const 8589934593;
         const 15;
 },
 _cdnk1() //  [R1]
         { []
         }
     {offset
       cdnk1: // global
           if (R1 & 7 == 1) goto cdnk5; else goto cdnk6;
       cdnk5: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdnk6: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdnks; else goto cdnkr;
       cdnks: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdnkr: // global
           I64[Hp - 72] = GHC.Types.I#_con_info;
           I64[Hp - 64] = I64[Sp + 16];
           I64[Hp - 56] = GHC.Types.I#_con_info;
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = GHC.ExecutionStack.Internal.SrcLoc_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = Hp - 55;
           P64[Hp - 16] = Hp - 71;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdnk1_info" {
     block_cdnk1_info:
         const _cdnk1;
         const 194;
         const 30;
 },
 $witerFrames_sdn5Q_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdnkx: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cdnky; else goto cdnkz;
       cdnky: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdnkz: // global
           if (R2 == 0) goto cdnkw; else goto cdnkv;
       cdnkw: // global
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdnkv: // global
           I64[Sp - 40] = block_cdnim_info;
           _sdn5Q::P64 = R1;
           _sdn5w::P64 = P64[R1 + 5];
           _sdn5G::P64 = P64[R1 + 13];
           R1 = R3;
           P64[Sp - 32] = _sdn5w::P64;
           P64[Sp - 24] = _sdn5G::P64;
           P64[Sp - 16] = _sdn5Q::P64;
           I64[Sp - 8] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udnlI; else goto cdnin;
       udnlI: // global
           call _cdnim(R1) args: 0, res: 0, upd: 0;
       cdnin: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $witerFrames_sdn5Q_info" {
     $witerFrames_sdn5Q_info:
         const $witerFrames_sdn5Q_entry;
         const 2;
         const 12884901899;
         const 12884901901;
         const Sdngd_srt+16;
 },
 _cdnim() //  [R1]
         { []
         }
     {offset
       cdnim: // global
           _sdn5W::I64 = I64[R1 + 7];
           _sdn5Z::I64 = I64[_sdn5W::I64];
           I64[Sp - 16] = block_cdnir_info;
           R1 = 32;
           I64[Sp - 8] = _sdn5Z::I64;
           I64[Sp] = _sdn5W::I64;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnim_info" {
     block_cdnim_info:
         const _cdnim;
         const 516;
         const 12884901918;
         const Sdngd_srt+16;
 },
 _cdnir() //  [R1]
         { []
         }
     {offset
       cdnir: // global
           I64[Sp] = block_cdnit_info;
           _sdn65::P64 = R1;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = _sdn65::P64;
           if (R1 & 7 != 0) goto udnlD; else goto cdniu;
       udnlD: // global
           call _cdnit(R1) args: 0, res: 0, upd: 0;
       cdniu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnir_info" {
     block_cdnir_info:
         const _cdnir;
         const 2246;
         const 12884901918;
         const Sdngd_srt+16;
 },
 _cdnit() //  [R1]
         { []
         }
     {offset
       cdnit: // global
           _sdn68::P64 = P64[R1 + 7];
           _sdn69::I64 = P64[Sp + 32] + 16;
           (_sdn6d::I64) = call "ccall" arg hints:  [PtrHint, PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] libdwLookupLocation(I64[R1 + 15], _sdn69::I64, I64[Sp + 8]);
           call MO_Touch(_sdn68::P64);
           _sdn6f::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sdn6d::I64));
           if (_sdn6f::I64 != 0) goto udnlu; else goto cdnkI;
       udnlu: // global
           I64[Sp + 8] = _sdn6f::I64;
           Sp = Sp + 8;
           call _cdniK() args: 0, res: 0, upd: 0;
       cdnkI: // global
           _sdn6q::I64 = I64[_sdn69::I64];
           if (_sdn6q::I64 == 0) goto cdnlt; else goto cdnlp;
       cdnlt: // global
           I64[Sp + 8] = _sdn69::I64;
           P64[Sp] = GHC.Types.[]_closure+1;
           call _sdn6r() args: 0, res: 0, upd: 0;
       cdnlp: // global
           I64[Sp - 8] = block_cdnll_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp] = _sdn6q::I64;
           I64[Sp + 8] = _sdn69::I64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnit_info" {
     block_cdnit_info:
         const _cdnit;
         const 2246;
         const 12884901918;
         const Sdngd_srt+16;
 },
 _cdniK() //  []
         { []
         }
     {offset
       cdniK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdnkH; else goto cdnkG;
       cdnkH: // global
           HpAlloc = 32;
           _sdn6f::I64 = I64[Sp];
           I64[Sp] = block_cdniJ_info;
           R1 = _sdn6f::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdnkG: // global
           _sdn5w::P64 = P64[Sp + 16];
           _sdn5Q::P64 = P64[Sp + 32];
           _sdn5U::I64 = I64[Sp + 40];
           _sdn5W::I64 = I64[Sp + 8];
           call MO_Touch(P64[Sp + 24]);
           call MO_Touch(_sdn5w::P64);
           I64[Hp - 24] = sat_sdn6n_info;
           P64[Hp - 16] = _sdn5Q::P64;
           I64[Hp - 8] = _sdn5U::I64;
           I64[Hp] = _sdn5W::I64;
           R2 = Hp - 23;
           Sp = Sp + 48;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _cdniJ() //  [R1]
         { []
         }
     {offset
       cdniJ: // global
           I64[Sp] = R1;
           call _cdniK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdniJ_info" {
     block_cdniJ_info:
         const _cdniJ;
         const 1093;
         const 12884901918;
         const Sdngd_srt+16;
 },
 _cdnll() //  [R1]
         { []
         }
     {offset
       cdnll: // global
           _sdn6q::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdnln_info;
           R3 = _sdn6q::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnll_info" {
     block_cdnll_info:
         const _cdnll;
         const 4551;
         const 12884901918;
         const Sdngd_srt+16;
 },
 _cdnln() //  [R1]
         { []
         }
     {offset
       cdnln: // global
           P64[Sp] = R1;
           call _sdn6r() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdnln_info" {
     block_cdnln_info:
         const _cdnln;
         const 2246;
         const 12884901918;
         const Sdngd_srt+16;
 },
 _sdn6r() //  []
         { []
         }
     {offset
       sdn6r: // global
           _sdn6x::I64 = I64[I64[Sp + 8] + 8];
           if (_sdn6x::I64 == 0) goto cdnlh; else goto cdnld;
       cdnlh: // global
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call _sdn6y() args: 0, res: 0, upd: 0;
       cdnld: // global
           I64[Sp - 16] = block_cdnl9_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 8] = _sdn6x::I64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdnl9() //  [R1]
         { []
         }
     {offset
       cdnl9: // global
           _sdn6x::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdnlb_info;
           R3 = _sdn6x::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnl9_info" {
     block_cdnl9_info:
         const _cdnl9;
         const 9032;
         const 12884901918;
         const Sdngd_srt+16;
 },
 _cdnlb() //  [R1]
         { []
         }
     {offset
       cdnlb: // global
           P64[Sp] = R1;
           call _sdn6y() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdnlb_info" {
     block_cdnlb_info:
         const _cdnlb;
         const 4487;
         const 12884901918;
         const Sdngd_srt+16;
 },
 _sdn6y() //  []
         { []
         }
     {offset
       sdn6y: // global
           _sdn6E::I64 = I64[I64[Sp + 16] + 16];
           if (_sdn6E::I64 == 0) goto cdnl5; else goto cdnl1;
       cdnl5: // global
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call _cdnjt() args: 0, res: 0, upd: 0;
       cdnl1: // global
           I64[Sp - 16] = block_cdnkX_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 8] = _sdn6E::I64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdnkX() //  [R1]
         { []
         }
     {offset
       cdnkX: // global
           _sdn6E::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdnkZ_info;
           R3 = _sdn6E::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnkX_info" {
     block_cdnkX_info:
         const _cdnkX;
         const 17993;
         const 12884901918;
         const Sdngd_srt+16;
 },
 _cdnkZ() //  [R1]
         { []
         }
     {offset
       cdnkZ: // global
           P64[Sp] = R1;
           call _cdnjt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdnkZ_info" {
     block_cdnkZ_info:
         const _cdnkZ;
         const 8968;
         const 12884901918;
         const Sdngd_srt+16;
 },
 _cdnjt() //  []
         { []
         }
     {offset
       cdnjt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdnkQ; else goto cdnkP;
       cdnkQ: // global
           HpAlloc = 32;
           _sdn6H::P64 = P64[Sp];
           I64[Sp] = block_cdnjs_info;
           R1 = _sdn6H::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnkP: // global
           _sdn5w::P64 = P64[Sp + 40];
           _sdn5Q::P64 = P64[Sp + 56];
           _sdn5U::I64 = I64[Sp + 64];
           _sdn5W::I64 = I64[Sp + 32];
           _sdn69::I64 = I64[Sp + 24];
           _sdn6L::I64 = %MO_UU_Conv_W32_W64(I32[_sdn69::I64 + 24]);
           _sdn6P::I64 = %MO_UU_Conv_W32_W64(I32[_sdn69::I64 + 28]);
           call MO_Touch(P64[Sp + 48]);
           call MO_Touch(_sdn5w::P64);
           I64[Hp - 24] = sat_sdn6X_info;
           P64[Hp - 16] = _sdn5Q::P64;
           I64[Hp - 8] = _sdn5U::I64;
           I64[Hp] = _sdn5W::I64;
           I64[Sp - 8] = block_cdnjV_info;
           R2 = Hp - 23;
           I64[Sp + 56] = _sdn6P::I64;
           I64[Sp + 64] = _sdn6L::I64;
           Sp = Sp - 8;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdnjs() //  [R1]
         { []
         }
     {offset
       cdnjs: // global
           P64[Sp] = R1;
           call _cdnjt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdnjs_info" {
     block_cdnjs_info:
         const _cdnjs;
         const 8968;
         const 12884901918;
         const Sdngd_srt+16;
 },
 _cdnjV() //  [R1]
         { []
         }
     {offset
       cdnjV: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdnkT; else goto cdnkS;
       cdnkT: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnkS: // global
           I64[Hp - 88] = sat_sdn79_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = I64[Sp + 72];
           I64[Hp - 56] = I64[Sp + 64];
           I64[Hp - 48] = GHC.ExecutionStack.Internal.Location_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnjV_info" {
     block_cdnjV_info:
         const _cdnjV;
         const 32265;
         const 30;
 },
 sat_sdn7D_entry() //  [R1]
         { []
         }
     {offset
       cdnlY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdnlZ; else goto cdnm0;
       cdnlZ: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdnm0: // global
           I64[Sp - 32] = block_cdnlW_info;
           P64[Sp - 24] = P64[R1 + 7];
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = P64[R1 + 23];
           Sp = Sp - 32;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdn7D_info" {
     sat_sdn7D_info:
         const sat_sdn7D_entry;
         const 3;
         const 12884901896;
         const 4294967299;
         const Sdngd_srt+16;
 },
 _cdnlW() //  []
         { []
         }
     {offset
       cdnlW: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call go_sdn5F_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnlW_info" {
     block_cdnlW_info:
         const _cdnlW;
         const 3;
         const 12884901918;
         const Sdngd_srt+16;
 },
 sat_sdn7H_entry() //  [R1]
         { []
         }
     {offset
       cdnm8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdnm9; else goto cdnma;
       cdnm9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnma: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdn7H_info" {
     sat_sdn7H_info:
         const sat_sdn7H_entry;
         const 2;
         const 18;
 },
 go_sdn5F_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cdnmf: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdnmg; else goto cdnmh;
       cdnmg: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdnmh: // global
           I64[Sp - 32] = block_cdni4_info;
           _sdn5F::P64 = R1;
           _sdn5w::P64 = P64[R1 + 5];
           R1 = R3;
           P64[Sp - 24] = _sdn5w::P64;
           P64[Sp - 16] = _sdn5F::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udnmv; else goto cdni5;
       udnmv: // global
           call _cdni4(R1) args: 0, res: 0, upd: 0;
       cdni5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_sdn5F_info" {
     go_sdn5F_info:
         const go_sdn5F_entry;
         const 1;
         const 12884901897;
         const 12884901903;
         const Sdngd_srt+16;
 },
 _cdni4() //  [R1]
         { []
         }
     {offset
       cdni4: // global
           if (R1 & 7 == 1) goto cdnmc; else goto cdnmd;
       cdnmc: // global
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdnmd: // global
           I64[Sp - 8] = block_cdnia_info;
           _sdn5L::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sdn5L::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udnmu; else goto cdnib;
       udnmu: // global
           call _cdnia(R1) args: 0, res: 0, upd: 0;
       cdnib: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdni4_info" {
     block_cdni4_info:
         const _cdni4;
         const 3;
         const 12884901918;
         const Sdngd_srt+16;
 },
 _cdnia() //  [R1]
         { []
         }
     {offset
       cdnia: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdnmn; else goto cdnmm;
       cdnmn: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnmm: // global
           _sdn5N::I64 = I64[R1 + 7];
           _sdn5P::I64 = I64[R1 + 23];
           I64[Hp - 32] = $witerFrames_sdn5Q_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sdn5P::I64;
           I64[Sp] = block_cdnlP_info;
           R3 = Hp - 7;
           R2 = _sdn5N::I64;
           R1 = Hp - 29;
           call $witerFrames_sdn5Q_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnia_info" {
     block_cdnia_info:
         const _cdnia;
         const 4;
         const 12884901918;
         const Sdngd_srt+16;
 },
 _cdnlP() //  [R1]
         { []
         }
     {offset
       cdnlP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdnmq; else goto cdnmp;
       cdnmq: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnmp: // global
           I64[Hp - 24] = sat_sdn7D_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 24] = block_cdnm2_info;
           R2 = Hp - 23;
           P64[Sp + 32] = R1;
           Sp = Sp + 24;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnlP_info" {
     block_cdnlP_info:
         const _cdnlP;
         const 132;
         const 12884901918;
         const Sdngd_srt+16;
 },
 _cdnm2() //  [R1]
         { []
         }
     {offset
       cdnm2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdnmt; else goto cdnms;
       cdnmt: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnms: // global
           I64[Hp - 24] = sat_sdn7H_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnm2_info" {
     block_cdnm2_info:
         const _cdnm2;
         const 1;
         const 30;
 },
 GHC.ExecutionStack.Internal.stackFrames_entry() //  [R2]
         { []
         }
     {offset
       cdnmC: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdnmD; else goto cdnmE;
       cdnmD: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.stackFrames_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdnmE: // global
           I64[Sp - 16] = block_cdnhE_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.stackFrames_info" {
     GHC.ExecutionStack.Internal.stackFrames_info:
         const GHC.ExecutionStack.Internal.stackFrames_entry;
         const 0;
         const 124554051598;
         const 4294967301;
         const Sdngd_srt;
 },
 _cdnhE() //  []
         { []
         }
     {offset
       cdnhE: // global
           (_sdn5m::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] libdwPoolTake();
           if (_sdn5m::I64 == 0) goto cdnmy; else goto cdnmx;
       cdnmy: // global
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call _cdnmw() args: 0, res: 0, upd: 0;
       cdnmx: // global
           I64[Sp - 8] = block_cdnhK_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _sdn5m::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnhE_info" {
     block_cdnhE_info:
         const _cdnhE;
         const 1;
         const 55834574878;
         const Sdngd_srt;
 },
 _cdnhK() //  [R1]
         { []
         }
     {offset
       cdnhK: // global
           I64[Sp - 8] = block_cdnhM_info;
           R6 = I64[Sp + 8];
           R5 = 0;
           R4 = 0;
           R3 = libdwPoolRelease;
           R2 = R1;
           P64[Sp - 16] = GHC.Tuple.()_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnhK_info" {
     block_cdnhK_info:
         const _cdnhK;
         const 66;
         const 55834574878;
         const Sdngd_srt;
 },
 _cdnhM() //  []
         { []
         }
     {offset
       cdnhM: // global
           I64[Sp] = block_cdnhO_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto udnn5; else goto cdnhP;
       udnn5: // global
           call _cdnhO(R1) args: 0, res: 0, upd: 0;
       cdnhP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnhM_info" {
     block_cdnhM_info:
         const _cdnhM;
         const 131;
         const 12884901918;
         const Sdngd_srt+16;
 },
 _cdnhO() //  [R1]
         { []
         }
     {offset
       cdnhO: // global
           _sdn5A::I64 = I64[I64[R1 + 15] + 8];
           I64[Sp] = block_cdnhW_info;
           R3 = _sdn5A::I64;
           R2 = GHC.Types.[]_closure+1;
           P64[Sp + 24] = P64[R1 + 7];
           call $wgo_rdm9M_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnhO_info" {
     block_cdnhO_info:
         const _cdnhO;
         const 387;
         const 12884901918;
         const Sdngd_srt+16;
 },
 _cdnhW() //  [R1]
         { []
         }
     {offset
       cdnhW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdnmM; else goto cdnmL;
       cdnmM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnmL: // global
           _sdn5w::P64 = P64[Sp + 24];
           call MO_Touch(_sdn5w::P64);
           I64[Hp - 8] = go_sdn5F_info;
           P64[Hp] = _sdn5w::P64;
           I64[Sp] = block_cdnmG_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = R1;
           P64[Sp + 24] = Hp - 5;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnhW_info" {
     block_cdnhW_info:
         const _cdnhW;
         const 131;
         const 12884901918;
         const Sdngd_srt+16;
 },
 _cdnmG() //  [R1]
         { []
         }
     {offset
       cdnmG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdnmV; else goto cdnmU;
       cdnmV: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnmU: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 16];
           _cdnhZ::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cdnmS_info;
           R3 = R1;
           R2 = Hp - 15;
           R1 = _cdnhZ::P64;
           Sp = Sp + 24;
           call go_sdn5F_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnmG_info" {
     block_cdnmG_info:
         const _cdnmG;
         const 131;
         const 12884901918;
         const Sdngd_srt+16;
 },
 _cdnmS() //  [R1]
         { []
         }
     {offset
       cdnmS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdnmZ; else goto cdnmY;
       cdnmZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnmY: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp] = Hp - 6;
           call _cdnmw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cdnmS_info" {
     block_cdnmS_info:
         const _cdnmS;
         const 0;
         const 30;
 },
 _cdnmw() //  []
         { []
         }
     {offset
       cdnmw: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.53267743 UTC

[section ""data" . g_rdm9N_closure" {
     g_rdm9N_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.534697003 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.showStackFrames1_bytes" {
     GHC.ExecutionStack.Internal.showStackFrames1_bytes:
         I8[] [83,116,97,99,107,32,116,114,97,99,101,58,10]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.536812744 UTC

[section ""cstring" . lvl_rdm9O_bytes" {
     lvl_rdm9O_bytes:
         I8[] [41]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.538449696 UTC

[section ""cstring" . lvl1_rdm9P_bytes" {
     lvl1_rdm9P_bytes:
         I8[] [46]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.540276981 UTC

[section ""cstring" . lvl2_rdm9Q_bytes" {
     lvl2_rdm9Q_bytes:
         I8[] [58]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.542531403 UTC

[section ""cstring" . lvl3_rdm9R_bytes" {
     lvl3_rdm9R_bytes:
         I8[] [32,40]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.544527429 UTC

[section ""cstring" . lvl4_rdm9S_bytes" {
     lvl4_rdm9S_bytes:
         I8[] [32,105,110,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.546390993 UTC

[section ""cstring" . lvl5_rdm9T_bytes" {
     lvl5_rdm9T_bytes:
         I8[] [32,32,32,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.558609369 UTC

[section ""data" . GHC.ExecutionStack.Internal.showStackFrames_go_closure" {
     GHC.ExecutionStack.Internal.showStackFrames_go_closure:
         const GHC.ExecutionStack.Internal.showStackFrames_go_info;
 },
 sat_sdn82_entry() //  [R1]
         { []
         }
     {offset
       cdnrP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdnrQ; else goto cdnrR;
       cdnrQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnrR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.ExecutionStack.Internal.showStackFrames_go_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdn82_info" {
     sat_sdn82_info:
         const sat_sdn82_entry;
         const 2;
         const 18;
 },
 sat_sdn84_entry() //  [R1]
         { []
         }
     {offset
       cdnrT: // global
           _sdn84::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdnrU; else goto cdnrV;
       cdnrV: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdnrX; else goto cdnrW;
       cdnrX: // global
           HpAlloc = 56;
           goto cdnrU;
       cdnrU: // global
           R1 = _sdn84::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnrW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdn84::P64;
           _sdn7T::P64 = P64[_sdn84::P64 + 16];
           _sdn7W::P64 = P64[_sdn84::P64 + 24];
           _sdn7Y::P64 = P64[_sdn84::P64 + 32];
           I64[Hp - 48] = sat_sdn82_info;
           P64[Hp - 32] = _sdn7T::P64;
           P64[Hp - 24] = _sdn7W::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = g_rdm9N_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sdn7Y::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdn84_info" {
     sat_sdn84_info:
         const sat_sdn84_entry;
         const 3;
         const 15;
 },
 karg_sdn81_entry() //  [R1]
         { []
         }
     {offset
       cdnrY: // global
           _sdn81::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdnrZ; else goto cdns0;
       cdns0: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdns2; else goto cdns1;
       cdns2: // global
           HpAlloc = 40;
           goto cdnrZ;
       cdnrZ: // global
           R1 = _sdn81::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdns1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdn81::P64;
           _sdn7T::P64 = P64[_sdn81::P64 + 16];
           _sdn7W::P64 = P64[_sdn81::P64 + 24];
           _sdn7Y::P64 = P64[_sdn81::P64 + 32];
           I64[Hp - 32] = sat_sdn84_info;
           P64[Hp - 16] = _sdn7T::P64;
           P64[Hp - 8] = _sdn7W::P64;
           P64[Hp] = _sdn7Y::P64;
           R3 = Hp - 32;
           R2 = lvl4_rdm9S_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . karg_sdn81_info" {
     karg_sdn81_info:
         const karg_sdn81_entry;
         const 3;
         const 15;
 },
 sat_sdn8f_entry() //  [R1]
         { []
         }
     {offset
       cdnsM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdnsN; else goto cdnsO;
       cdnsN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnsO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl_rdm9O_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdn8f_info" {
     sat_sdn8f_info:
         const sat_sdn8f_entry;
         const 1;
         const 16;
 },
 sat_sdn8j_entry() //  [R1]
         { []
         }
     {offset
       cdnsP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdnsT; else goto cdnsU;
       cdnsT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnsU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdnsD_info;
           _sdn81::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdn81::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udnt1; else goto cdnsE;
       udnt1: // global
           call _cdnsD(R1) args: 0, res: 0, upd: 0;
       cdnsE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdn8j_info" {
     sat_sdn8j_info:
         const sat_sdn8j_entry;
         const 2;
         const 18;
 },
 _cdnsD() //  [R1]
         { []
         }
     {offset
       cdnsD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnsX; else goto cdnsW;
       cdnsX: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdnsW: // global
           _sdn8e::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sdn8f_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cdnsQ_info;
           R4 = Hp - 16;
           R3 = _sdn8e::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdnsD_info" {
     block_cdnsD_info:
         const _cdnsD;
         const 1;
         const 30;
 },
 _cdnsQ() //  [R1, R2]
         { []
         }
     {offset
       cdnsQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnt0; else goto cdnsZ;
       cdnt0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdnsZ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdnsQ_info" {
     block_cdnsQ_info:
         const _cdnsQ;
         const 0;
         const 30;
 },
 sat_sdn8k_entry() //  [R1]
         { []
         }
     {offset
       cdnt2: // global
           _sdn8k::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdnt3; else goto cdnt4;
       cdnt4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdnt6; else goto cdnt5;
       cdnt6: // global
           HpAlloc = 32;
           goto cdnt3;
       cdnt3: // global
           R1 = _sdn8k::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnt5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdn8k::P64;
           _sdn81::P64 = P64[_sdn8k::P64 + 16];
           _sdn8a::P64 = P64[_sdn8k::P64 + 24];
           I64[Hp - 24] = sat_sdn8j_info;
           P64[Hp - 8] = _sdn81::P64;
           P64[Hp] = _sdn8a::P64;
           R3 = Hp - 24;
           R2 = lvl1_rdm9P_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdn8k_info" {
     sat_sdn8k_info:
         const sat_sdn8k_entry;
         const 2;
         const 18;
 },
 sat_sdn8o_entry() //  [R1]
         { []
         }
     {offset
       cdnt7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdntb; else goto cdntc;
       cdntb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdntc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdnsq_info;
           _sdn81::P64 = P64[R1 + 16];
           _sdn8a::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sdn81::P64;
           P64[Sp - 24] = _sdn8a::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udntj; else goto cdnsr;
       udntj: // global
           call _cdnsq(R1) args: 0, res: 0, upd: 0;
       cdnsr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdn8o_info" {
     sat_sdn8o_info:
         const sat_sdn8o_entry;
         const 3;
         const 15;
 },
 _cdnsq() //  [R1]
         { []
         }
     {offset
       cdnsq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdntf; else goto cdnte;
       cdntf: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdnte: // global
           _sdn8c::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_sdn8k_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cdnt8_info;
           R4 = Hp - 24;
           R3 = _sdn8c::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cdnsq_info" {
     block_cdnsq_info:
         const _cdnsq;
         const 2;
         const 30;
 },
 _cdnt8() //  [R1, R2]
         { []
         }
     {offset
       cdnt8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnti; else goto cdnth;
       cdnti: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdnth: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdnt8_info" {
     block_cdnt8_info:
         const _cdnt8;
         const 0;
         const 30;
 },
 sat_sdn8p_entry() //  [R1]
         { []
         }
     {offset
       cdntk: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdnto; else goto cdntn;
       cdnto: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdntn: // global
           _sdn81::P64 = P64[R1 + 16];
           _sdn89::P64 = P64[R1 + 24];
           _sdn8a::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdn8o_info;
           P64[Hp - 16] = _sdn81::P64;
           P64[Hp - 8] = _sdn89::P64;
           P64[Hp] = _sdn8a::P64;
           R3 = Hp - 32;
           R2 = lvl2_rdm9Q_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdn8p_info" {
     sat_sdn8p_info:
         const sat_sdn8p_entry;
         const 3;
         const 15;
 },
 sat_sdn8q_entry() //  [R1]
         { []
         }
     {offset
       cdntp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdntq; else goto cdntr;
       cdntq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdntr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdnsd_info;
           _sdn81::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdn81::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udntv; else goto cdnse;
       udntv: // global
           call _cdnsd(R1) args: 0, res: 0, upd: 0;
       cdnse: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdn8q_info" {
     sat_sdn8q_info:
         const sat_sdn8q_entry;
         const 2;
         const 18;
 },
 _cdnsd() //  [R1]
         { []
         }
     {offset
       cdnsd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdntu; else goto cdntt;
       cdntu: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdntt: // global
           _sdn88::P64 = P64[R1 + 7];
           _sdn89::P64 = P64[R1 + 15];
           _sdn8a::P64 = P64[R1 + 23];
           I64[Hp - 32] = sat_sdn8p_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _sdn89::P64;
           P64[Hp] = _sdn8a::P64;
           R3 = Hp - 32;
           R2 = _sdn88::P64;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdnsd_info" {
     block_cdnsd_info:
         const _cdnsd;
         const 1;
         const 30;
 },
 sat_sdn8r_entry() //  [R1]
         { []
         }
     {offset
       cdntA: // global
           _sdn8r::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdntB; else goto cdntC;
       cdntC: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdntE; else goto cdntD;
       cdntE: // global
           HpAlloc = 40;
           goto cdntB;
       cdntB: // global
           R1 = _sdn8r::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdntD: // global
           _sdn7T::P64 = P64[_sdn8r::P64 + 16];
           _sdn7W::P64 = P64[_sdn8r::P64 + 24];
           _sdn7Y::P64 = P64[_sdn8r::P64 + 32];
           _sdn80::P64 = P64[_sdn8r::P64 + 40];
           I64[Hp - 32] = karg_sdn81_info;
           P64[Hp - 16] = _sdn7T::P64;
           P64[Hp - 8] = _sdn7W::P64;
           P64[Hp] = _sdn7Y::P64;
           I64[Sp - 16] = block_cdns3_info;
           R1 = _sdn80::P64;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udntK; else goto cdns4;
       udntK: // global
           call _cdns3(R1) args: 0, res: 0, upd: 0;
       cdns4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sdn8r_info" {
     sat_sdn8r_info:
         const sat_sdn8r_entry;
         const 4;
         const 15;
 },
 _cdns3() //  [R1]
         { []
         }
     {offset
       cdns3: // global
           _cdnrD::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdntx; else goto cdnty;
       cdntx: // global
           R1 = _cdnrD::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdnty: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdntJ; else goto cdntI;
       cdntJ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdntI: // global
           _sdn86::P64 = P64[R1 + 6];
           I64[Hp - 24] = sat_sdn8q_info;
           P64[Hp - 8] = _cdnrD::P64;
           P64[Hp] = _sdn86::P64;
           R3 = Hp - 24;
           R2 = lvl3_rdm9R_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdns3_info" {
     block_cdns3_info:
         const _cdns3;
         const 1;
         const 30;
 },
 sat_sdn8s_entry() //  [R1]
         { []
         }
     {offset
       cdntL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdntM; else goto cdntN;
       cdntM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdntN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdnru_info;
           _sdn7T::P64 = P64[R1 + 16];
           _sdn7W::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sdn7T::P64;
           P64[Sp - 24] = _sdn7W::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udntR; else goto cdnrv;
       udntR: // global
           call _cdnru(R1) args: 0, res: 0, upd: 0;
       cdnrv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdn8s_info" {
     sat_sdn8s_info:
         const sat_sdn8s_entry;
         const 3;
         const 15;
 },
 _cdnru() //  [R1]
         { []
         }
     {offset
       cdnru: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdntQ; else goto cdntP;
       cdntQ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdntP: // global
           _sdn7Y::P64 = P64[R1 + 7];
           _sdn7Z::P64 = P64[R1 + 15];
           _sdn80::P64 = P64[R1 + 23];
           I64[Hp - 40] = sat_sdn8r_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _sdn7Y::P64;
           P64[Hp] = _sdn80::P64;
           R3 = Hp - 40;
           R2 = _sdn7Z::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cdnru_info" {
     block_cdnru_info:
         const _cdnru;
         const 2;
         const 30;
 },
 GHC.ExecutionStack.Internal.showStackFrames_go_entry() //  [R2, R3]
         { []
         }
     {offset
       cdntW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdntX; else goto cdntY;
       cdntX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.showStackFrames_go_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdntY: // global
           I64[Sp - 16] = block_cdnrk_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udnu4; else goto cdnrl;
       udnu4: // global
           call _cdnrk(R1) args: 0, res: 0, upd: 0;
       cdnrl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.showStackFrames_go_info" {
     GHC.ExecutionStack.Internal.showStackFrames_go_info:
         const GHC.ExecutionStack.Internal.showStackFrames_go_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cdnrk() //  [R1]
         { []
         }
     {offset
       cdnrk: // global
           _sdn7T::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdntT; else goto cdntU;
       cdntT: // global
           R1 = _sdn7T::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdntU: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdnu3; else goto cdnu2;
       cdnu3: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnu2: // global
           _sdn7V::P64 = P64[R1 + 6];
           _sdn7W::P64 = P64[R1 + 14];
           I64[Hp - 32] = sat_sdn8s_info;
           P64[Hp - 16] = _sdn7T::P64;
           P64[Hp - 8] = _sdn7V::P64;
           P64[Hp] = _sdn7W::P64;
           R3 = Hp - 32;
           R2 = lvl5_rdm9T_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cdnrk_info" {
     block_cdnrk_info:
         const _cdnrk;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.598797256 UTC

[section ""data" . GHC.ExecutionStack.Internal.showStackFrames_closure" {
     GHC.ExecutionStack.Internal.showStackFrames_closure:
         const GHC.ExecutionStack.Internal.showStackFrames_info;
 },
 sat_sdn8v_entry() //  [R1]
         { []
         }
     {offset
       cdnwh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdnwi; else goto cdnwj;
       cdnwi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnwj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ExecutionStack.Internal.showStackFrames_go_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sdn8v_info" {
     sat_sdn8v_info:
         const sat_sdn8v_entry;
         const 2;
         const 18;
 },
 GHC.ExecutionStack.Internal.showStackFrames_entry() //  [R2, R3]
         { []
         }
     {offset
       cdnwk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdnwo; else goto cdnwn;
       cdnwo: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.showStackFrames_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdnwn: // global
           I64[Hp - 24] = sat_sdn8v_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = GHC.ExecutionStack.Internal.showStackFrames1_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.showStackFrames_info" {
     GHC.ExecutionStack.Internal.showStackFrames_info:
         const GHC.ExecutionStack.Internal.showStackFrames_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.604315819 UTC

[section ""data" . GHC.ExecutionStack.Internal.Chunk_closure" {
     GHC.ExecutionStack.Internal.Chunk_closure:
         const GHC.ExecutionStack.Internal.Chunk_info;
 },
 GHC.ExecutionStack.Internal.Chunk_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdnwE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdnwI; else goto cdnwH;
       cdnwI: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.Chunk_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdnwH: // global
           I64[Hp - 24] = GHC.ExecutionStack.Internal.Chunk_con_info;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.Chunk_info" {
     GHC.ExecutionStack.Internal.Chunk_info:
         const GHC.ExecutionStack.Internal.Chunk_entry;
         const 0;
         const 14;
         const 12884901904;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.608497887 UTC

[section ""data" . GHC.ExecutionStack.Internal.Location_closure" {
     GHC.ExecutionStack.Internal.Location_closure:
         const GHC.ExecutionStack.Internal.Location_info;
 },
 GHC.ExecutionStack.Internal.Location_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdnwU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdnwY; else goto cdnwX;
       cdnwY: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.Location_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdnwX: // global
           I64[Hp - 24] = GHC.ExecutionStack.Internal.Location_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.Location_info" {
     GHC.ExecutionStack.Internal.Location_info:
         const GHC.ExecutionStack.Internal.Location_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.613034935 UTC

[section ""data" . GHC.ExecutionStack.Internal.SrcLoc_closure" {
     GHC.ExecutionStack.Internal.SrcLoc_closure:
         const GHC.ExecutionStack.Internal.SrcLoc_info;
 },
 GHC.ExecutionStack.Internal.SrcLoc_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cdnxa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdnxe; else goto cdnxd;
       cdnxe: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.SrcLoc_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdnxd: // global
           I64[Hp - 24] = GHC.ExecutionStack.Internal.SrcLoc_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.SrcLoc_info" {
     GHC.ExecutionStack.Internal.SrcLoc_info:
         const GHC.ExecutionStack.Internal.SrcLoc_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.616605875 UTC

[section ""cstring" . idnxm_str" {
     idnxm_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108,46,67,104,117,110,107]
 },
 GHC.ExecutionStack.Internal.Chunk_con_entry() //  [R1]
         { []
         }
     {offset
       cdnxl: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.Chunk_con_info" {
     GHC.ExecutionStack.Internal.Chunk_con_info:
         const GHC.ExecutionStack.Internal.Chunk_con_entry;
         const 12884901888;
         const 7;
         const idnxm_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.620215289 UTC

[section ""cstring" . idnxt_str" {
     idnxt_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108,46,76,111,99,97,116,105,111,110]
 },
 GHC.ExecutionStack.Internal.Location_con_entry() //  [R1]
         { []
         }
     {offset
       cdnxs: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.Location_con_info" {
     GHC.ExecutionStack.Internal.Location_con_info:
         const GHC.ExecutionStack.Internal.Location_con_entry;
         const 3;
         const 1;
         const idnxt_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.623595918 UTC

[section ""cstring" . idnxA_str" {
     idnxA_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108,46,83,114,99,76,111,99]
 },
 GHC.ExecutionStack.Internal.SrcLoc_con_entry() //  [R1]
         { []
         }
     {offset
       cdnxz: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.ExecutionStack.Internal.SrcLoc_con_info" {
     GHC.ExecutionStack.Internal.SrcLoc_con_info:
         const GHC.ExecutionStack.Internal.SrcLoc_con_entry;
         const 3;
         const 1;
         const idnxA_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:08:34.62666919 UTC

[section ""relreadonly" . Sdngd_srt" {
     Sdngd_srt:
         const GHC.ForeignPtr.$winsertCFinalizer_closure;
         const GHC.ExecutionStack.Internal.collectStackTrace1_closure;
         const GHC.IO.Encoding.getForeignEncoding_closure;
         const GHC.Foreign.$wpeekCString_closure;
         const GHC.ExecutionStack.Internal.stackFrames_closure;
 }]

