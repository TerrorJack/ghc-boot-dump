
==================== Output Cmm ====================
2018-03-16 16:08:32.265361565 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:08:32.266665645 UTC

[section ""data" . GHC.ExecutionStack.Internal.$WChunk_closure" {
     GHC.ExecutionStack.Internal.$WChunk_closure:
         const GHC.ExecutionStack.Internal.$WChunk_info;
 },
 GHC.ExecutionStack.Internal.$WChunk_entry() //  [R2, R3, R4]
         { info_tbl: [(cdmf7,
                       label: GHC.ExecutionStack.Internal.$WChunk_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmf7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdmfl; else goto cdmfm;
       cdmfl: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.$WChunk_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmfm: // global
           I64[Sp - 24] = block_cdmf4_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udmft; else goto cdmf5;
       udmft: // global
           call _cdmf4(R1) args: 0, res: 0, upd: 0;
       cdmf5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmf4() //  [R1]
         { info_tbl: [(cdmf4,
                       label: block_cdmf4_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmf4: // global
           I64[Sp] = block_cdmfa_info;
           _sdm9Z::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sdm9Z::I64;
           if (R1 & 7 != 0) goto udmfs; else goto cdmfb;
       udmfs: // global
           call _cdmfa(R1) args: 0, res: 0, upd: 0;
       cdmfb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmfa() //  [R1]
         { info_tbl: [(cdmfa,
                       label: block_cdmfa_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmfa: // global
           I64[Sp] = block_cdmff_info;
           _sdma1::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sdma1::I64;
           if (R1 & 7 != 0) goto udmfu; else goto cdmfg;
       udmfu: // global
           call _cdmff(R1) args: 0, res: 0, upd: 0;
       cdmfg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmff() //  [R1]
         { info_tbl: [(cdmff,
                       label: block_cdmff_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmff: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmfr; else goto cdmfq;
       cdmfr: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmfq: // global
           _sdma3::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.ExecutionStack.Internal.Chunk_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _sdma3::I64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.26848817 UTC

[section ""data" . GHC.ExecutionStack.Internal.sourceColumn_closure" {
     GHC.ExecutionStack.Internal.sourceColumn_closure:
         const GHC.ExecutionStack.Internal.sourceColumn_info;
 },
 GHC.ExecutionStack.Internal.sourceColumn_entry() //  [R2]
         { info_tbl: [(cdmfC,
                       label: GHC.ExecutionStack.Internal.sourceColumn_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmfC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmfD; else goto cdmfE;
       cdmfD: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.sourceColumn_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmfE: // global
           I64[Sp - 8] = block_cdmfz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmfI; else goto cdmfA;
       udmfI: // global
           call _cdmfz(R1) args: 0, res: 0, upd: 0;
       cdmfA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmfz() //  [R1]
         { info_tbl: [(cdmfz,
                       label: block_cdmfz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmfz: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.269789981 UTC

[section ""data" . GHC.ExecutionStack.Internal.sourceLine_closure" {
     GHC.ExecutionStack.Internal.sourceLine_closure:
         const GHC.ExecutionStack.Internal.sourceLine_info;
 },
 GHC.ExecutionStack.Internal.sourceLine_entry() //  [R2]
         { info_tbl: [(cdmfQ,
                       label: GHC.ExecutionStack.Internal.sourceLine_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmfQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmfR; else goto cdmfS;
       cdmfR: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.sourceLine_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmfS: // global
           I64[Sp - 8] = block_cdmfN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmfW; else goto cdmfO;
       udmfW: // global
           call _cdmfN(R1) args: 0, res: 0, upd: 0;
       cdmfO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmfN() //  [R1]
         { info_tbl: [(cdmfN,
                       label: block_cdmfN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmfN: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.270996742 UTC

[section ""data" . GHC.ExecutionStack.Internal.sourceFile_closure" {
     GHC.ExecutionStack.Internal.sourceFile_closure:
         const GHC.ExecutionStack.Internal.sourceFile_info;
 },
 GHC.ExecutionStack.Internal.sourceFile_entry() //  [R2]
         { info_tbl: [(cdmg4,
                       label: GHC.ExecutionStack.Internal.sourceFile_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmg4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmg5; else goto cdmg6;
       cdmg5: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.sourceFile_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmg6: // global
           I64[Sp - 8] = block_cdmg1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmga; else goto cdmg2;
       udmga: // global
           call _cdmg1(R1) args: 0, res: 0, upd: 0;
       cdmg2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmg1() //  [R1]
         { info_tbl: [(cdmg1,
                       label: block_cdmg1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmg1: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.272238334 UTC

[section ""data" . GHC.ExecutionStack.Internal.srcLoc_closure" {
     GHC.ExecutionStack.Internal.srcLoc_closure:
         const GHC.ExecutionStack.Internal.srcLoc_info;
 },
 GHC.ExecutionStack.Internal.srcLoc_entry() //  [R2]
         { info_tbl: [(cdmgi,
                       label: GHC.ExecutionStack.Internal.srcLoc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmgi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmgj; else goto cdmgk;
       cdmgj: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.srcLoc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmgk: // global
           I64[Sp - 8] = block_cdmgf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmgo; else goto cdmgg;
       udmgo: // global
           call _cdmgf(R1) args: 0, res: 0, upd: 0;
       cdmgg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmgf() //  [R1]
         { info_tbl: [(cdmgf,
                       label: block_cdmgf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmgf: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.273512119 UTC

[section ""data" . GHC.ExecutionStack.Internal.functionName_closure" {
     GHC.ExecutionStack.Internal.functionName_closure:
         const GHC.ExecutionStack.Internal.functionName_info;
 },
 GHC.ExecutionStack.Internal.functionName_entry() //  [R2]
         { info_tbl: [(cdmgw,
                       label: GHC.ExecutionStack.Internal.functionName_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmgw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmgx; else goto cdmgy;
       cdmgx: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.functionName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmgy: // global
           I64[Sp - 8] = block_cdmgt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmgC; else goto cdmgu;
       udmgC: // global
           call _cdmgt(R1) args: 0, res: 0, upd: 0;
       cdmgu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmgt() //  [R1]
         { info_tbl: [(cdmgt,
                       label: block_cdmgt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmgt: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.27474469 UTC

[section ""data" . GHC.ExecutionStack.Internal.objectName_closure" {
     GHC.ExecutionStack.Internal.objectName_closure:
         const GHC.ExecutionStack.Internal.objectName_info;
 },
 GHC.ExecutionStack.Internal.objectName_entry() //  [R2]
         { info_tbl: [(cdmgK,
                       label: GHC.ExecutionStack.Internal.objectName_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmgK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmgL; else goto cdmgM;
       cdmgL: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.objectName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmgM: // global
           I64[Sp - 8] = block_cdmgH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmgQ; else goto cdmgI;
       udmgQ: // global
           call _cdmgH(R1) args: 0, res: 0, upd: 0;
       cdmgI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmgH() //  [R1]
         { info_tbl: [(cdmgH,
                       label: block_cdmgH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmgH: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.276057508 UTC

[section ""data" . GHC.ExecutionStack.Internal.chunkFirstFrame_closure" {
     GHC.ExecutionStack.Internal.chunkFirstFrame_closure:
         const GHC.ExecutionStack.Internal.chunkFirstFrame_info;
 },
 GHC.ExecutionStack.Internal.chunkFirstFrame_entry() //  [R2]
         { info_tbl: [(cdmgY,
                       label: GHC.ExecutionStack.Internal.chunkFirstFrame_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmgY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmh2; else goto cdmh3;
       cdmh2: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.chunkFirstFrame_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmh3: // global
           I64[Sp - 8] = block_cdmgV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmh7; else goto cdmgW;
       udmh7: // global
           call _cdmgV(R1) args: 0, res: 0, upd: 0;
       cdmgW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmgV() //  [R1]
         { info_tbl: [(cdmgV,
                       label: block_cdmgV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmgV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmh6; else goto cdmh5;
       cdmh6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmh5: // global
           _sdmaC::I64 = I64[R1 + 23];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sdmaC::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.277486816 UTC

[section ""data" . GHC.ExecutionStack.Internal.chunkNext_closure" {
     GHC.ExecutionStack.Internal.chunkNext_closure:
         const GHC.ExecutionStack.Internal.chunkNext_info;
 },
 GHC.ExecutionStack.Internal.chunkNext_entry() //  [R2]
         { info_tbl: [(cdmhf,
                       label: GHC.ExecutionStack.Internal.chunkNext_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmhf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmhj; else goto cdmhk;
       cdmhj: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.chunkNext_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmhk: // global
           I64[Sp - 8] = block_cdmhc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmho; else goto cdmhd;
       udmho: // global
           call _cdmhc(R1) args: 0, res: 0, upd: 0;
       cdmhd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmhc() //  [R1]
         { info_tbl: [(cdmhc,
                       label: block_cdmhc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmhc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmhn; else goto cdmhm;
       cdmhn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmhm: // global
           _sdmaG::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sdmaG::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.278830134 UTC

[section ""data" . GHC.ExecutionStack.Internal.chunkFrames_closure" {
     GHC.ExecutionStack.Internal.chunkFrames_closure:
         const GHC.ExecutionStack.Internal.chunkFrames_info;
 },
 GHC.ExecutionStack.Internal.chunkFrames_entry() //  [R2]
         { info_tbl: [(cdmhw,
                       label: GHC.ExecutionStack.Internal.chunkFrames_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmhw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmhA; else goto cdmhB;
       cdmhA: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.chunkFrames_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmhB: // global
           I64[Sp - 8] = block_cdmht_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmhF; else goto cdmhu;
       udmhF: // global
           call _cdmht(R1) args: 0, res: 0, upd: 0;
       cdmhu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmht() //  [R1]
         { info_tbl: [(cdmht,
                       label: block_cdmht_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmht: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmhE; else goto cdmhD;
       cdmhE: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmhD: // global
           _sdmaK::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _sdmaK::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.279963212 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$trModule4_bytes" {
     GHC.ExecutionStack.Internal.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.280560388 UTC

[section ""data" . GHC.ExecutionStack.Internal.$trModule3_closure" {
     GHC.ExecutionStack.Internal.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.281172084 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$trModule2_bytes" {
     GHC.ExecutionStack.Internal.$trModule2_bytes:
         I8[] [71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.281763576 UTC

[section ""data" . GHC.ExecutionStack.Internal.$trModule1_closure" {
     GHC.ExecutionStack.Internal.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.28235043 UTC

[section ""data" . GHC.ExecutionStack.Internal.$trModule_closure" {
     GHC.ExecutionStack.Internal.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ExecutionStack.Internal.$trModule3_closure+1;
         const GHC.ExecutionStack.Internal.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.282996154 UTC

[section ""data" . $krep_rdm9l_closure" {
     $krep_rdm9l_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.28362693 UTC

[section ""data" . $krep1_rdm9m_closure" {
     $krep1_rdm9m_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.284259981 UTC

[section ""data" . $krep2_rdm9n_closure" {
     $krep2_rdm9n_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.284910875 UTC

[section ""data" . $krep3_rdm9o_closure" {
     $krep3_rdm9o_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWord_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.285544601 UTC

[section ""data" . $krep4_rdm9p_closure" {
     $krep4_rdm9p_closure:
         const :_con_info;
         const $krep1_rdm9m_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.286175236 UTC

[section ""data" . $krep5_rdm9q_closure" {
     $krep5_rdm9q_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep4_rdm9p_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.286758172 UTC

[section ""data" . $krep6_rdm9r_closure" {
     $krep6_rdm9r_closure:
         const :_con_info;
         const $krep2_rdm9n_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.287343128 UTC

[section ""data" . $krep7_rdm9s_closure" {
     $krep7_rdm9s_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep6_rdm9r_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.287961751 UTC

[section ""data" . $krep8_rdm9t_closure" {
     $krep8_rdm9t_closure:
         const :_con_info;
         const $krep7_rdm9s_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.288609705 UTC

[section ""data" . $krep9_rdm9u_closure" {
     $krep9_rdm9u_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep8_rdm9t_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.289329168 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcSrcLoc2_bytes" {
     GHC.ExecutionStack.Internal.$tcSrcLoc2_bytes:
         I8[] [83,114,99,76,111,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.291031038 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSrcLoc1_closure" {
     GHC.ExecutionStack.Internal.$tcSrcLoc1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcSrcLoc2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.291677859 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSrcLoc_closure" {
     GHC.ExecutionStack.Internal.$tcSrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcSrcLoc1_closure+1;
         const GHC.Types.krep$*_closure;
         const 8235067574311587288;
         const 11106182367596705879;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.292380777 UTC

[section ""data" . $krep10_rdm9v_closure" {
     $krep10_rdm9v_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcSrcLoc_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.293188602 UTC

[section ""data" . $krep11_rdm9w_closure" {
     $krep11_rdm9w_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rdm9l_closure+1;
         const $krep10_rdm9v_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.294295323 UTC

[section ""data" . $krep12_rdm9x_closure" {
     $krep12_rdm9x_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rdm9l_closure+1;
         const $krep11_rdm9w_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.29491781 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'SrcLoc1_closure" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rdm9q_closure+1;
         const $krep12_rdm9x_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.295522269 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'SrcLoc3_bytes" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc3_bytes:
         I8[] [39,83,114,99,76,111,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.296077764 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'SrcLoc2_closure" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'SrcLoc3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.296664464 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'SrcLoc_closure" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'SrcLoc2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'SrcLoc1_closure+4;
         const 11095721805058681290;
         const 15266549541595723377;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.29730216 UTC

[section ""data" . $krep13_rdm9y_closure" {
     $krep13_rdm9y_closure:
         const :_con_info;
         const $krep10_rdm9v_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.297875592 UTC

[section ""data" . $krep14_rdm9z_closure" {
     $krep14_rdm9z_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep13_rdm9y_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.298400983 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcLocation2_bytes" {
     GHC.ExecutionStack.Internal.$tcLocation2_bytes:
         I8[] [76,111,99,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.298965217 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcLocation1_closure" {
     GHC.ExecutionStack.Internal.$tcLocation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcLocation2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.299530713 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcLocation_closure" {
     GHC.ExecutionStack.Internal.$tcLocation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcLocation1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11638758687983955592;
         const 6940671496618727587;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.300188471 UTC

[section ""data" . $krep15_rdm9A_closure" {
     $krep15_rdm9A_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcLocation_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.300777277 UTC

[section ""data" . $krep16_rdm9B_closure" {
     $krep16_rdm9B_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_rdm9z_closure+1;
         const $krep15_rdm9A_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.30138143 UTC

[section ""data" . $krep17_rdm9C_closure" {
     $krep17_rdm9C_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rdm9q_closure+1;
         const $krep16_rdm9B_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.301975905 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Location1_closure" {
     GHC.ExecutionStack.Internal.$tc'Location1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rdm9q_closure+1;
         const $krep17_rdm9C_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.30257246 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'Location3_bytes" {
     GHC.ExecutionStack.Internal.$tc'Location3_bytes:
         I8[] [39,76,111,99,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.303165521 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Location2_closure" {
     GHC.ExecutionStack.Internal.$tc'Location2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'Location3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.303789514 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Location_closure" {
     GHC.ExecutionStack.Internal.$tc'Location_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Location2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Location1_closure+4;
         const 12834480788254682335;
         const 10467761170474242090;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.304417842 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcStackTrace2_bytes" {
     GHC.ExecutionStack.Internal.$tcStackTrace2_bytes:
         I8[] [83,116,97,99,107,84,114,97,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.305011559 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcStackTrace1_closure" {
     GHC.ExecutionStack.Internal.$tcStackTrace1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcStackTrace2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.306149211 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcStackTrace_closure" {
     GHC.ExecutionStack.Internal.$tcStackTrace_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcStackTrace1_closure+1;
         const GHC.Types.krep$*_closure;
         const 156026104294967557;
         const 17600277320898304892;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.30676018 UTC

[section ""data" . $krep18_rdm9D_closure" {
     $krep18_rdm9D_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcStackTrace_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.307342643 UTC

[section ""data" . $krep19_rdm9E_closure" {
     $krep19_rdm9E_closure:
         const :_con_info;
         const $krep18_rdm9D_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.307951407 UTC

[section ""data" . $krep20_rdm9F_closure" {
     $krep20_rdm9F_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure;
         const $krep19_rdm9E_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.308579515 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'StackTrace1_closure" {
     GHC.ExecutionStack.Internal.$tc'StackTrace1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep20_rdm9F_closure+1;
         const $krep18_rdm9D_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.309168867 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'StackTrace3_bytes" {
     GHC.ExecutionStack.Internal.$tc'StackTrace3_bytes:
         I8[] [39,83,116,97,99,107,84,114,97,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.30978416 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'StackTrace2_closure" {
     GHC.ExecutionStack.Internal.$tc'StackTrace2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'StackTrace3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.310356192 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'StackTrace_closure" {
     GHC.ExecutionStack.Internal.$tc'StackTrace_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'StackTrace2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'StackTrace1_closure+4;
         const 8151790971853785814;
         const 7394195233358636505;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.310950394 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcChunk2_bytes" {
     GHC.ExecutionStack.Internal.$tcChunk2_bytes:
         I8[] [67,104,117,110,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.311521886 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcChunk1_closure" {
     GHC.ExecutionStack.Internal.$tcChunk1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcChunk2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.312115536 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcChunk_closure" {
     GHC.ExecutionStack.Internal.$tcChunk_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcChunk1_closure+1;
         const GHC.Types.krep$*_closure;
         const 1813577326074213410;
         const 3256155729866972563;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.31272243 UTC

[section ""data" . $krep21_rdm9G_closure" {
     $krep21_rdm9G_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcChunk_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.313379476 UTC

[section ""data" . $krep22_rdm9H_closure" {
     $krep22_rdm9H_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_rdm9u_closure+1;
         const $krep21_rdm9G_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.314004784 UTC

[section ""data" . $krep23_rdm9I_closure" {
     $krep23_rdm9I_closure:
         const :_con_info;
         const $krep21_rdm9G_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.314632178 UTC

[section ""data" . $krep24_rdm9J_closure" {
     $krep24_rdm9J_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep23_rdm9I_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.315257363 UTC

[section ""data" . $krep25_rdm9K_closure" {
     $krep25_rdm9K_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep24_rdm9J_closure+1;
         const $krep22_rdm9H_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.315868553 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Chunk1_closure" {
     GHC.ExecutionStack.Internal.$tc'Chunk1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rdm9o_closure+1;
         const $krep25_rdm9K_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.316479838 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'Chunk3_bytes" {
     GHC.ExecutionStack.Internal.$tc'Chunk3_bytes:
         I8[] [39,67,104,117,110,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.317045597 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Chunk2_closure" {
     GHC.ExecutionStack.Internal.$tc'Chunk2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'Chunk3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.318430834 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Chunk_closure" {
     GHC.ExecutionStack.Internal.$tc'Chunk_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Chunk2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Chunk1_closure+4;
         const 16594405016023301875;
         const 5381929581673016432;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.319055622 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcSession2_bytes" {
     GHC.ExecutionStack.Internal.$tcSession2_bytes:
         I8[] [83,101,115,115,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.319683107 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSession1_closure" {
     GHC.ExecutionStack.Internal.$tcSession1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcSession2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.320323152 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSession_closure" {
     GHC.ExecutionStack.Internal.$tcSession_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcSession1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11168382530978838993;
         const 7144139957235519240;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.321168385 UTC

[section ""data" . libdw_pool_clear_rdm9L_closure" {
     libdw_pool_clear_rdm9L_closure:
         const libdw_pool_clear_rdm9L_info;
 },
 libdw_pool_clear_rdm9L_entry() //  []
         { info_tbl: [(cdmhL,
                       label: libdw_pool_clear_rdm9L_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmhL: // global
           call "ccall" arg hints:  []  result hints:  [] libdwPoolClear();
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.322511175 UTC

[section ""data" . GHC.ExecutionStack.Internal.invalidateDebugCache_closure" {
     GHC.ExecutionStack.Internal.invalidateDebugCache_closure:
         const GHC.ExecutionStack.Internal.invalidateDebugCache_info;
 },
 GHC.ExecutionStack.Internal.invalidateDebugCache_entry() //  []
         { info_tbl: [(cdmhS,
                       label: GHC.ExecutionStack.Internal.invalidateDebugCache_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmhS: // global
           call libdw_pool_clear_rdm9L_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.323637884 UTC

[section ""data" . GHC.ExecutionStack.Internal.stackDepth_closure" {
     GHC.ExecutionStack.Internal.stackDepth_closure:
         const GHC.ExecutionStack.Internal.stackDepth_info;
 },
 GHC.ExecutionStack.Internal.stackDepth_entry() //  [R2]
         { info_tbl: [(cdmi7,
                       label: GHC.ExecutionStack.Internal.stackDepth_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmi7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdmi8; else goto cdmi9;
       cdmi8: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.stackDepth_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmi9: // global
           I64[Sp - 16] = block_cdmhZ_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _cdmhZ() //  []
         { info_tbl: [(cdmhZ,
                       label: block_cdmhZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmhZ: // global
           _sdmaR::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdmi1_info;
           R1 = _sdmaR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udmim; else goto cdmi2;
       udmim: // global
           call _cdmi1(R1) args: 0, res: 0, upd: 0;
       cdmi2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmi1() //  [R1]
         { info_tbl: [(cdmi1,
                       label: block_cdmi1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmi1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmif; else goto cdmie;
       cdmif: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmie: // global
           _sdmaY::I64 = I64[I64[R1 + 15]];
           call MO_Touch(P64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sdmaY::I64;
           R1 = (Hp + -7) & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.325731005 UTC

[section ""data" . GHC.ExecutionStack.Internal.collectStackTrace1_closure" {
     GHC.ExecutionStack.Internal.collectStackTrace1_closure:
         const GHC.ExecutionStack.Internal.collectStackTrace1_info;
         const 0;
 },
 GHC.ExecutionStack.Internal.collectStackTrace1_entry() //  []
         { info_tbl: [(cdmix,
                       label: GHC.ExecutionStack.Internal.collectStackTrace1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmix: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmiy; else goto cdmiz;
       cdmiy: // global
           R1 = GHC.ExecutionStack.Internal.collectStackTrace1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdmiz: // global
           (_sdmb9::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] libdwPoolTake();
           if (_sdmb9::I64 == 0) goto udmj5; else goto cdmiv;
       udmj5: // global
           call _cdmiw() args: 0, res: 0, upd: 0;
       cdmiv: // global
           I64[Sp - 16] = block_cdmiB_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 8] = _sdmb9::I64;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmiB() //  [R1]
         { info_tbl: [(cdmiB,
                       label: block_cdmiB_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmiB: // global
           I64[Sp - 8] = block_cdmiD_info;
           R6 = I64[Sp + 8];
           R5 = 0;
           R4 = 0;
           R3 = libdwPoolRelease;
           R2 = R1;
           P64[Sp - 16] = GHC.Tuple.()_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 _cdmiD() //  [R1]
         { info_tbl: [(cdmiD,
                       label: block_cdmiD_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmiD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmiI; else goto cdmiH;
       cdmiI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmiH: // global
           _sdmbd::P64 = P64[Sp + 8];
           (_sdmbk::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] libdwGetBacktrace(I64[Sp + 16]);
           I64[Hp - 8] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp] = _sdmbd::P64;
           call MO_Touch(Hp - 7);
           if (_sdmbk::I64 == 0) goto udmj4; else goto cdmiY;
       udmj4: // global
           Sp = Sp + 24;
           call _cdmiw() args: 0, res: 0, upd: 0;
       cdmiY: // global
           I64[Sp + 8] = block_cdmiQ_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp + 16] = _sdmbk::I64;
           Sp = Sp + 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmiw() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmiw: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cdmiQ() //  [R1]
         { info_tbl: [(cdmiQ,
                       label: block_cdmiQ_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmiQ: // global
           I64[Sp - 8] = block_cdmiS_info;
           R6 = I64[Sp + 8];
           R5 = 0;
           R4 = 0;
           R3 = backtraceFree;
           R2 = R1;
           P64[Sp - 16] = GHC.Tuple.()_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 _cdmiS() //  [R1]
         { info_tbl: [(cdmiS,
                       label: block_cdmiS_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmiS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdmj2; else goto cdmj1;
       cdmj2: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmj1: // global
           I64[Hp - 48] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           I64[Hp - 32] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 24] = Hp - 47;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.327965277 UTC

[section ""data" . GHC.ExecutionStack.Internal.collectStackTrace_closure" {
     GHC.ExecutionStack.Internal.collectStackTrace_closure:
         const GHC.ExecutionStack.Internal.collectStackTrace_info;
         const 0;
 },
 GHC.ExecutionStack.Internal.collectStackTrace_entry() //  []
         { info_tbl: [(cdmjc,
                       label: GHC.ExecutionStack.Internal.collectStackTrace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmjc: // global
           call GHC.ExecutionStack.Internal.collectStackTrace1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.329045479 UTC

[section ""data" . $wgo_rdm9M_closure" {
     $wgo_rdm9M_closure:
         const $wgo_rdm9M_info;
 },
 $wgo_rdm9M_entry() //  [R2, R3]
         { info_tbl: [(cdmjx,
                       label: $wgo_rdm9M_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 14} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmjx: // global
           _sdmby::I64 = R3;
           _sdmbx::P64 = R2;
           goto cdmjg;
       cdmjg: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdmjB; else goto cdmjA;
       cdmjB: // global
           HpAlloc = 56;
           R3 = _sdmby::I64;
           R2 = _sdmbx::P64;
           R1 = $wgo_rdm9M_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmjA: // global
           if (_sdmby::I64 == 0) goto cdmjw; else goto cdmjv;
       cdmjw: // global
           Hp = Hp - 56;
           R1 = _sdmbx::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdmjv: // global
           _sdmbD::I64 = I64[_sdmby::I64];
           _sdmbH::I64 = I64[_sdmby::I64 + 8];
           I64[Hp - 48] = GHC.ExecutionStack.Internal.Chunk_con_info;
           I64[Hp - 40] = _sdmbD::I64;
           I64[Hp - 32] = _sdmbH::I64;
           I64[Hp - 24] = _sdmby::I64 + 16;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = _sdmbx::P64;
           _sdmby::I64 = _sdmbH::I64;
           _sdmbx::P64 = Hp - 14;
           goto cdmjg;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.334941591 UTC

[section ""data" . GHC.ExecutionStack.Internal.stackFrames_closure" {
     GHC.ExecutionStack.Internal.stackFrames_closure:
         const GHC.ExecutionStack.Internal.stackFrames_info;
         const 0;
 },
 sat_sdmcR_entry() //  [R1]
         { info_tbl: [(cdmkZ,
                       label: sat_sdmcR_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmkZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdml2; else goto cdml3;
       cdml2: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdml3: // global
           I64[Sp - 32] = block_cdmkV_info;
           P64[Sp - 24] = P64[R1 + 7];
           I64[Sp - 16] = I64[R1 + 15];
           I64[Sp - 8] = I64[R1 + 23];
           Sp = Sp - 32;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _cdmkV() //  []
         { info_tbl: [(cdmkV,
                       label: block_cdmkV_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmkV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdml6; else goto cdml5;
       cdml6: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdml5: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 24] + 8;
           R3 = Hp - 7;
           R2 = I64[Sp + 16] - 1;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call $witerFrames_sdmck_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdmdr_entry() //  [R1]
         { info_tbl: [(cdmlO,
                       label: sat_sdmdr_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmlO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmlR; else goto cdmlS;
       cdmlR: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdmlS: // global
           I64[Sp - 32] = block_cdmlK_info;
           P64[Sp - 24] = P64[R1 + 7];
           I64[Sp - 16] = I64[R1 + 15];
           I64[Sp - 8] = I64[R1 + 23];
           Sp = Sp - 32;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _cdmlK() //  []
         { info_tbl: [(cdmlK,
                       label: block_cdmlK_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmlK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmlV; else goto cdmlU;
       cdmlV: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdmlU: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 24] + 8;
           R3 = Hp - 7;
           R2 = I64[Sp + 16] - 1;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call $witerFrames_sdmck_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdmdD_entry() //  [R1]
         { info_tbl: [(cdmma,
                       label: sat_sdmdD_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmma: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdmmb; else goto cdmmc;
       cdmmb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmmc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdmm3_info;
           _sdmdf::I64 = I64[R1 + 24];
           _sdmdj::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           I64[Sp - 32] = _sdmdf::I64;
           I64[Sp - 24] = _sdmdj::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udmmv; else goto cdmm4;
       udmmv: // global
           call _cdmm3(R1) args: 0, res: 0, upd: 0;
       cdmm4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdmm3() //  [R1]
         { info_tbl: [(cdmm3,
                       label: block_cdmm3_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmm3: // global
           if (R1 & 7 == 1) goto cdmm7; else goto cdmm8;
       cdmm7: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdmm8: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdmmu; else goto cdmmt;
       cdmmu: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdmmt: // global
           I64[Hp - 72] = GHC.Types.I#_con_info;
           I64[Hp - 64] = I64[Sp + 16];
           I64[Hp - 56] = GHC.Types.I#_con_info;
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = GHC.ExecutionStack.Internal.SrcLoc_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = Hp - 55;
           P64[Hp - 16] = Hp - 71;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 $witerFrames_sdmck_entry() //  [R1, R2, R3]
         { info_tbl: [(cdmmz,
                       label: $witerFrames_sdmck_info
                       rep:HeapRep 2 ptrs { Fun {arity: 3 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmmz: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cdmmA; else goto cdmmB;
       cdmmA: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmmB: // global
           if (R2 == 0) goto cdmmy; else goto cdmmx;
       cdmmy: // global
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdmmx: // global
           I64[Sp - 40] = block_cdmko_info;
           _sdmck::P64 = R1;
           _sdmc0::P64 = P64[R1 + 5];
           _sdmca::P64 = P64[R1 + 13];
           R1 = R3;
           P64[Sp - 32] = _sdmc0::P64;
           P64[Sp - 24] = _sdmca::P64;
           P64[Sp - 16] = _sdmck::P64;
           I64[Sp - 8] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udmnK; else goto cdmkp;
       udmnK: // global
           call _cdmko(R1) args: 0, res: 0, upd: 0;
       cdmkp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmko() //  [R1]
         { info_tbl: [(cdmko,
                       label: block_cdmko_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmko: // global
           _sdmcq::I64 = I64[R1 + 7];
           _sdmct::I64 = I64[_sdmcq::I64];
           I64[Sp - 16] = block_cdmkt_info;
           R1 = 32;
           I64[Sp - 8] = _sdmct::I64;
           I64[Sp] = _sdmcq::I64;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmkt() //  [R1]
         { info_tbl: [(cdmkt,
                       label: block_cdmkt_info
                       rep:StackRep [True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmkt: // global
           I64[Sp] = block_cdmkv_info;
           _sdmcz::P64 = R1;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = _sdmcz::P64;
           if (R1 & 7 != 0) goto udmnF; else goto cdmkw;
       udmnF: // global
           call _cdmkv(R1) args: 0, res: 0, upd: 0;
       cdmkw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmkv() //  [R1]
         { info_tbl: [(cdmkv,
                       label: block_cdmkv_info
                       rep:StackRep [True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmkv: // global
           _sdmcC::P64 = P64[R1 + 7];
           _sdmcD::I64 = P64[Sp + 32] + 16;
           (_sdmcH::I64) = call "ccall" arg hints:  [PtrHint, PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] libdwLookupLocation(I64[R1 + 15], _sdmcD::I64, I64[Sp + 8]);
           call MO_Touch(_sdmcC::P64);
           _sdmcJ::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sdmcH::I64));
           if (_sdmcJ::I64 != 0) goto udmnw; else goto cdmmK;
       udmnw: // global
           I64[Sp + 8] = _sdmcJ::I64;
           Sp = Sp + 8;
           call _cdmkM() args: 0, res: 0, upd: 0;
       cdmmK: // global
           _sdmcU::I64 = I64[_sdmcD::I64];
           if (_sdmcU::I64 == 0) goto cdmnv; else goto cdmnr;
       cdmnv: // global
           I64[Sp + 8] = _sdmcD::I64;
           P64[Sp] = GHC.Types.[]_closure+1;
           call _sdmcV() args: 0, res: 0, upd: 0;
       cdmnr: // global
           I64[Sp - 8] = block_cdmnn_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp] = _sdmcU::I64;
           I64[Sp + 8] = _sdmcD::I64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmkM() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmkM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmmJ; else goto cdmmI;
       cdmmJ: // global
           HpAlloc = 32;
           _sdmcJ::I64 = I64[Sp];
           I64[Sp] = block_cdmkL_info;
           R1 = _sdmcJ::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdmmI: // global
           _sdmc0::P64 = P64[Sp + 16];
           _sdmck::P64 = P64[Sp + 32];
           _sdmco::I64 = I64[Sp + 40];
           _sdmcq::I64 = I64[Sp + 8];
           call MO_Touch(P64[Sp + 24]);
           call MO_Touch(_sdmc0::P64);
           I64[Hp - 24] = sat_sdmcR_info;
           P64[Hp - 16] = _sdmck::P64;
           I64[Hp - 8] = _sdmco::I64;
           I64[Hp] = _sdmcq::I64;
           R2 = Hp - 23;
           Sp = Sp + 48;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _cdmkL() //  [R1]
         { info_tbl: [(cdmkL,
                       label: block_cdmkL_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmkL: // global
           I64[Sp] = R1;
           call _cdmkM() args: 0, res: 0, upd: 0;
     }
 },
 _cdmnn() //  [R1]
         { info_tbl: [(cdmnn,
                       label: block_cdmnn_info
                       rep:StackRep [True, True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmnn: // global
           _sdmcU::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdmnp_info;
           R3 = _sdmcU::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdmnp() //  [R1]
         { info_tbl: [(cdmnp,
                       label: block_cdmnp_info
                       rep:StackRep [True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmnp: // global
           P64[Sp] = R1;
           call _sdmcV() args: 0, res: 0, upd: 0;
     }
 },
 _sdmcV() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       sdmcV: // global
           _sdmd1::I64 = I64[I64[Sp + 8] + 8];
           if (_sdmd1::I64 == 0) goto cdmnj; else goto cdmnf;
       cdmnj: // global
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call _sdmd2() args: 0, res: 0, upd: 0;
       cdmnf: // global
           I64[Sp - 16] = block_cdmnb_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 8] = _sdmd1::I64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmnb() //  [R1]
         { info_tbl: [(cdmnb,
                       label: block_cdmnb_info
                       rep:StackRep [True, False, True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmnb: // global
           _sdmd1::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdmnd_info;
           R3 = _sdmd1::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdmnd() //  [R1]
         { info_tbl: [(cdmnd,
                       label: block_cdmnd_info
                       rep:StackRep [False, True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmnd: // global
           P64[Sp] = R1;
           call _sdmd2() args: 0, res: 0, upd: 0;
     }
 },
 _sdmd2() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       sdmd2: // global
           _sdmd8::I64 = I64[I64[Sp + 16] + 16];
           if (_sdmd8::I64 == 0) goto cdmn7; else goto cdmn3;
       cdmn7: // global
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call _cdmlv() args: 0, res: 0, upd: 0;
       cdmn3: // global
           I64[Sp - 16] = block_cdmmZ_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 8] = _sdmd8::I64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmmZ() //  [R1]
         { info_tbl: [(cdmmZ,
                       label: block_cdmmZ_info
                       rep:StackRep [True, False, False, True, True, False, False, False,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmmZ: // global
           _sdmd8::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdmn1_info;
           R3 = _sdmd8::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdmn1() //  [R1]
         { info_tbl: [(cdmn1,
                       label: block_cdmn1_info
                       rep:StackRep [False, False, True, True, False, False, False,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmn1: // global
           P64[Sp] = R1;
           call _cdmlv() args: 0, res: 0, upd: 0;
     }
 },
 _cdmlv() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmlv: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmmS; else goto cdmmR;
       cdmmS: // global
           HpAlloc = 32;
           _sdmdb::P64 = P64[Sp];
           I64[Sp] = block_cdmlu_info;
           R1 = _sdmdb::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmmR: // global
           _sdmc0::P64 = P64[Sp + 40];
           _sdmck::P64 = P64[Sp + 56];
           _sdmco::I64 = I64[Sp + 64];
           _sdmcq::I64 = I64[Sp + 32];
           _sdmcD::I64 = I64[Sp + 24];
           _sdmdf::I64 = %MO_UU_Conv_W32_W64(I32[_sdmcD::I64 + 24]);
           _sdmdj::I64 = %MO_UU_Conv_W32_W64(I32[_sdmcD::I64 + 28]);
           call MO_Touch(P64[Sp + 48]);
           call MO_Touch(_sdmc0::P64);
           I64[Hp - 24] = sat_sdmdr_info;
           P64[Hp - 16] = _sdmck::P64;
           I64[Hp - 8] = _sdmco::I64;
           I64[Hp] = _sdmcq::I64;
           I64[Sp - 8] = block_cdmlX_info;
           R2 = Hp - 23;
           I64[Sp + 56] = _sdmdj::I64;
           I64[Sp + 64] = _sdmdf::I64;
           Sp = Sp - 8;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdmlu() //  [R1]
         { info_tbl: [(cdmlu,
                       label: block_cdmlu_info
                       rep:StackRep [False, False, True, True, False, False, False,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmlu: // global
           P64[Sp] = R1;
           call _cdmlv() args: 0, res: 0, upd: 0;
     }
 },
 _cdmlX() //  [R1]
         { info_tbl: [(cdmlX,
                       label: block_cdmlX_info
                       rep:StackRep [False, False, False, True, True, True, True, True,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmlX: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdmmV; else goto cdmmU;
       cdmmV: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmmU: // global
           I64[Hp - 88] = sat_sdmdD_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = I64[Sp + 72];
           I64[Hp - 56] = I64[Sp + 64];
           I64[Hp - 48] = GHC.ExecutionStack.Internal.Location_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdme7_entry() //  [R1]
         { info_tbl: [(cdmo0,
                       label: sat_sdme7_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmo0: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmo1; else goto cdmo2;
       cdmo1: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdmo2: // global
           I64[Sp - 32] = block_cdmnY_info;
           P64[Sp - 24] = P64[R1 + 7];
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = P64[R1 + 23];
           Sp = Sp - 32;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _cdmnY() //  []
         { info_tbl: [(cdmnY,
                       label: block_cdmnY_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmnY: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call go_sdmc9_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdmeb_entry() //  [R1]
         { info_tbl: [(cdmoa,
                       label: sat_sdmeb_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmoa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdmob; else goto cdmoc;
       cdmob: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmoc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 go_sdmc9_entry() //  [R1, R2, R3]
         { info_tbl: [(cdmoh,
                       label: go_sdmc9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmoh: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdmoi; else goto cdmoj;
       cdmoi: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmoj: // global
           I64[Sp - 32] = block_cdmk6_info;
           _sdmc9::P64 = R1;
           _sdmc0::P64 = P64[R1 + 5];
           R1 = R3;
           P64[Sp - 24] = _sdmc0::P64;
           P64[Sp - 16] = _sdmc9::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udmox; else goto cdmk7;
       udmox: // global
           call _cdmk6(R1) args: 0, res: 0, upd: 0;
       cdmk7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmk6() //  [R1]
         { info_tbl: [(cdmk6,
                       label: block_cdmk6_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmk6: // global
           if (R1 & 7 == 1) goto cdmoe; else goto cdmof;
       cdmoe: // global
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdmof: // global
           I64[Sp - 8] = block_cdmkc_info;
           _sdmcf::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sdmcf::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmow; else goto cdmkd;
       udmow: // global
           call _cdmkc(R1) args: 0, res: 0, upd: 0;
       cdmkd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmkc() //  [R1]
         { info_tbl: [(cdmkc,
                       label: block_cdmkc_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmkc: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmop; else goto cdmoo;
       cdmop: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmoo: // global
           _sdmch::I64 = I64[R1 + 7];
           _sdmcj::I64 = I64[R1 + 23];
           I64[Hp - 32] = $witerFrames_sdmck_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sdmcj::I64;
           I64[Sp] = block_cdmnR_info;
           R3 = Hp - 7;
           R2 = _sdmch::I64;
           R1 = Hp - 29;
           call $witerFrames_sdmck_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmnR() //  [R1]
         { info_tbl: [(cdmnR,
                       label: block_cdmnR_info
                       rep:StackRep [False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmnR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmos; else goto cdmor;
       cdmos: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmor: // global
           I64[Hp - 24] = sat_sdme7_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 24] = block_cdmo4_info;
           R2 = Hp - 23;
           P64[Sp + 32] = R1;
           Sp = Sp + 24;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdmo4() //  [R1]
         { info_tbl: [(cdmo4,
                       label: block_cdmo4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmo4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmov; else goto cdmou;
       cdmov: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmou: // global
           I64[Hp - 24] = sat_sdmeb_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ExecutionStack.Internal.stackFrames_entry() //  [R2]
         { info_tbl: [(cdmoE,
                       label: GHC.ExecutionStack.Internal.stackFrames_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmoE: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdmoF; else goto cdmoG;
       cdmoF: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.stackFrames_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmoG: // global
           I64[Sp - 16] = block_cdmjG_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _cdmjG() //  []
         { info_tbl: [(cdmjG,
                       label: block_cdmjG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmjG: // global
           (_sdmbQ::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] libdwPoolTake();
           if (_sdmbQ::I64 == 0) goto cdmoA; else goto cdmoz;
       cdmoA: // global
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call _cdmoy() args: 0, res: 0, upd: 0;
       cdmoz: // global
           I64[Sp - 8] = block_cdmjM_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _sdmbQ::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmjM() //  [R1]
         { info_tbl: [(cdmjM,
                       label: block_cdmjM_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmjM: // global
           I64[Sp - 8] = block_cdmjO_info;
           R6 = I64[Sp + 8];
           R5 = 0;
           R4 = 0;
           R3 = libdwPoolRelease;
           R2 = R1;
           P64[Sp - 16] = GHC.Tuple.()_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 _cdmjO() //  []
         { info_tbl: [(cdmjO,
                       label: block_cdmjO_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmjO: // global
           I64[Sp] = block_cdmjQ_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto udmp7; else goto cdmjR;
       udmp7: // global
           call _cdmjQ(R1) args: 0, res: 0, upd: 0;
       cdmjR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmjQ() //  [R1]
         { info_tbl: [(cdmjQ,
                       label: block_cdmjQ_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmjQ: // global
           _sdmc4::I64 = I64[I64[R1 + 15] + 8];
           I64[Sp] = block_cdmjY_info;
           R3 = _sdmc4::I64;
           R2 = GHC.Types.[]_closure+1;
           P64[Sp + 24] = P64[R1 + 7];
           call $wgo_rdm9M_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdmjY() //  [R1]
         { info_tbl: [(cdmjY,
                       label: block_cdmjY_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmjY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmoO; else goto cdmoN;
       cdmoO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmoN: // global
           _sdmc0::P64 = P64[Sp + 24];
           call MO_Touch(_sdmc0::P64);
           I64[Hp - 8] = go_sdmc9_info;
           P64[Hp] = _sdmc0::P64;
           I64[Sp] = block_cdmoI_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = R1;
           P64[Sp + 24] = Hp - 5;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdmoI() //  [R1]
         { info_tbl: [(cdmoI,
                       label: block_cdmoI_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmoI: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmoX; else goto cdmoW;
       cdmoX: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmoW: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 16];
           _cdmk1::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cdmoU_info;
           R3 = R1;
           R2 = Hp - 15;
           R1 = _cdmk1::P64;
           Sp = Sp + 24;
           call go_sdmc9_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmoU() //  [R1]
         { info_tbl: [(cdmoU,
                       label: block_cdmoU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmoU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmp1; else goto cdmp0;
       cdmp1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmp0: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp] = Hp - 6;
           call _cdmoy() args: 0, res: 0, upd: 0;
     }
 },
 _cdmoy() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmoy: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.346078195 UTC

[section ""data" . g_rdm9N_closure" {
     g_rdm9N_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.346708747 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.showStackFrames1_bytes" {
     GHC.ExecutionStack.Internal.showStackFrames1_bytes:
         I8[] [83,116,97,99,107,32,116,114,97,99,101,58,10]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.347274011 UTC

[section ""cstring" . lvl_rdm9O_bytes" {
     lvl_rdm9O_bytes:
         I8[] [41]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.347835923 UTC

[section ""cstring" . lvl1_rdm9P_bytes" {
     lvl1_rdm9P_bytes:
         I8[] [46]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.348400663 UTC

[section ""cstring" . lvl2_rdm9Q_bytes" {
     lvl2_rdm9Q_bytes:
         I8[] [58]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.349003922 UTC

[section ""cstring" . lvl3_rdm9R_bytes" {
     lvl3_rdm9R_bytes:
         I8[] [32,40]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.349772225 UTC

[section ""cstring" . lvl4_rdm9S_bytes" {
     lvl4_rdm9S_bytes:
         I8[] [32,105,110,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.350347343 UTC

[section ""cstring" . lvl5_rdm9T_bytes" {
     lvl5_rdm9T_bytes:
         I8[] [32,32,32,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.354023783 UTC

[section ""data" . GHC.ExecutionStack.Internal.showStackFrames_go_closure" {
     GHC.ExecutionStack.Internal.showStackFrames_go_closure:
         const GHC.ExecutionStack.Internal.showStackFrames_go_info;
 },
 sat_sdmew_entry() //  [R1]
         { info_tbl: [(cdmpI,
                       label: sat_sdmew_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmpI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdmpJ; else goto cdmpK;
       cdmpJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmpK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.ExecutionStack.Internal.showStackFrames_go_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdmey_entry() //  [R1]
         { info_tbl: [(cdmpM,
                       label: sat_sdmey_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmpM: // global
           _sdmey::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdmpN; else goto cdmpO;
       cdmpO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdmpQ; else goto cdmpP;
       cdmpQ: // global
           HpAlloc = 56;
           goto cdmpN;
       cdmpN: // global
           R1 = _sdmey::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmpP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdmey::P64;
           _sdmen::P64 = P64[_sdmey::P64 + 16];
           _sdmeq::P64 = P64[_sdmey::P64 + 24];
           _sdmes::P64 = P64[_sdmey::P64 + 32];
           I64[Hp - 48] = sat_sdmew_info;
           P64[Hp - 32] = _sdmen::P64;
           P64[Hp - 24] = _sdmeq::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = g_rdm9N_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sdmes::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 karg_sdmev_entry() //  [R1]
         { info_tbl: [(cdmpR,
                       label: karg_sdmev_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmpR: // global
           _sdmev::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdmpS; else goto cdmpT;
       cdmpT: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmpV; else goto cdmpU;
       cdmpV: // global
           HpAlloc = 40;
           goto cdmpS;
       cdmpS: // global
           R1 = _sdmev::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmpU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdmev::P64;
           _sdmen::P64 = P64[_sdmev::P64 + 16];
           _sdmeq::P64 = P64[_sdmev::P64 + 24];
           _sdmes::P64 = P64[_sdmev::P64 + 32];
           I64[Hp - 32] = sat_sdmey_info;
           P64[Hp - 16] = _sdmen::P64;
           P64[Hp - 8] = _sdmeq::P64;
           P64[Hp] = _sdmes::P64;
           R3 = Hp - 32;
           R2 = lvl4_rdm9S_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdmeJ_entry() //  [R1]
         { info_tbl: [(cdmqF,
                       label: sat_sdmeJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmqF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdmqG; else goto cdmqH;
       cdmqG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmqH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl_rdm9O_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdmeN_entry() //  [R1]
         { info_tbl: [(cdmqI,
                       label: sat_sdmeN_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmqI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmqM; else goto cdmqN;
       cdmqM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmqN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdmqw_info;
           _sdmev::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdmev::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udmqU; else goto cdmqx;
       udmqU: // global
           call _cdmqw(R1) args: 0, res: 0, upd: 0;
       cdmqx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdmqw() //  [R1]
         { info_tbl: [(cdmqw,
                       label: block_cdmqw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmqw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdmqQ; else goto cdmqP;
       cdmqQ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdmqP: // global
           _sdmeI::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sdmeJ_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cdmqJ_info;
           R4 = Hp - 16;
           R3 = _sdmeI::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _cdmqJ() //  [R1, R2]
         { info_tbl: [(cdmqJ,
                       label: block_cdmqJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmqJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdmqT; else goto cdmqS;
       cdmqT: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdmqS: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdmeO_entry() //  [R1]
         { info_tbl: [(cdmqV,
                       label: sat_sdmeO_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmqV: // global
           _sdmeO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdmqW; else goto cdmqX;
       cdmqX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmqZ; else goto cdmqY;
       cdmqZ: // global
           HpAlloc = 32;
           goto cdmqW;
       cdmqW: // global
           R1 = _sdmeO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmqY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdmeO::P64;
           _sdmev::P64 = P64[_sdmeO::P64 + 16];
           _sdmeE::P64 = P64[_sdmeO::P64 + 24];
           I64[Hp - 24] = sat_sdmeN_info;
           P64[Hp - 8] = _sdmev::P64;
           P64[Hp] = _sdmeE::P64;
           R3 = Hp - 24;
           R2 = lvl1_rdm9P_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdmeS_entry() //  [R1]
         { info_tbl: [(cdmr0,
                       label: sat_sdmeS_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmr0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdmr4; else goto cdmr5;
       cdmr4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmr5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdmqj_info;
           _sdmev::P64 = P64[R1 + 16];
           _sdmeE::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sdmev::P64;
           P64[Sp - 24] = _sdmeE::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udmrc; else goto cdmqk;
       udmrc: // global
           call _cdmqj(R1) args: 0, res: 0, upd: 0;
       cdmqk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdmqj() //  [R1]
         { info_tbl: [(cdmqj,
                       label: block_cdmqj_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmqj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmr8; else goto cdmr7;
       cdmr8: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdmr7: // global
           _sdmeG::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_sdmeO_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cdmr1_info;
           R4 = Hp - 24;
           R3 = _sdmeG::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _cdmr1() //  [R1, R2]
         { info_tbl: [(cdmr1,
                       label: block_cdmr1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmr1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdmrb; else goto cdmra;
       cdmrb: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdmra: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdmeT_entry() //  [R1]
         { info_tbl: [(cdmrd,
                       label: sat_sdmeT_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmrd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmrh; else goto cdmrg;
       cdmrh: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmrg: // global
           _sdmev::P64 = P64[R1 + 16];
           _sdmeD::P64 = P64[R1 + 24];
           _sdmeE::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdmeS_info;
           P64[Hp - 16] = _sdmev::P64;
           P64[Hp - 8] = _sdmeD::P64;
           P64[Hp] = _sdmeE::P64;
           R3 = Hp - 32;
           R2 = lvl2_rdm9Q_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdmeU_entry() //  [R1]
         { info_tbl: [(cdmri,
                       label: sat_sdmeU_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmri: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmrj; else goto cdmrk;
       cdmrj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmrk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdmq6_info;
           _sdmev::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdmev::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udmro; else goto cdmq7;
       udmro: // global
           call _cdmq6(R1) args: 0, res: 0, upd: 0;
       cdmq7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdmq6() //  [R1]
         { info_tbl: [(cdmq6,
                       label: block_cdmq6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmq6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmrn; else goto cdmrm;
       cdmrn: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdmrm: // global
           _sdmeC::P64 = P64[R1 + 7];
           _sdmeD::P64 = P64[R1 + 15];
           _sdmeE::P64 = P64[R1 + 23];
           I64[Hp - 32] = sat_sdmeT_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _sdmeD::P64;
           P64[Hp] = _sdmeE::P64;
           R3 = Hp - 32;
           R2 = _sdmeC::P64;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdmeV_entry() //  [R1]
         { info_tbl: [(cdmrt,
                       label: sat_sdmeV_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmrt: // global
           _sdmeV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdmru; else goto cdmrv;
       cdmrv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmrx; else goto cdmrw;
       cdmrx: // global
           HpAlloc = 40;
           goto cdmru;
       cdmru: // global
           R1 = _sdmeV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmrw: // global
           _sdmen::P64 = P64[_sdmeV::P64 + 16];
           _sdmeq::P64 = P64[_sdmeV::P64 + 24];
           _sdmes::P64 = P64[_sdmeV::P64 + 32];
           _sdmeu::P64 = P64[_sdmeV::P64 + 40];
           I64[Hp - 32] = karg_sdmev_info;
           P64[Hp - 16] = _sdmen::P64;
           P64[Hp - 8] = _sdmeq::P64;
           P64[Hp] = _sdmes::P64;
           I64[Sp - 16] = block_cdmpW_info;
           R1 = _sdmeu::P64;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udmrD; else goto cdmpX;
       udmrD: // global
           call _cdmpW(R1) args: 0, res: 0, upd: 0;
       cdmpX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmpW() //  [R1]
         { info_tbl: [(cdmpW,
                       label: block_cdmpW_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmpW: // global
           _cdmpw::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdmrq; else goto cdmrr;
       cdmrq: // global
           R1 = _cdmpw::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdmrr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmrC; else goto cdmrB;
       cdmrC: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmrB: // global
           _sdmeA::P64 = P64[R1 + 6];
           I64[Hp - 24] = sat_sdmeU_info;
           P64[Hp - 8] = _cdmpw::P64;
           P64[Hp] = _sdmeA::P64;
           R3 = Hp - 24;
           R2 = lvl3_rdm9R_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdmeW_entry() //  [R1]
         { info_tbl: [(cdmrE,
                       label: sat_sdmeW_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmrE: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdmrF; else goto cdmrG;
       cdmrF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmrG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdmpn_info;
           _sdmen::P64 = P64[R1 + 16];
           _sdmeq::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sdmen::P64;
           P64[Sp - 24] = _sdmeq::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udmrK; else goto cdmpo;
       udmrK: // global
           call _cdmpn(R1) args: 0, res: 0, upd: 0;
       cdmpo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdmpn() //  [R1]
         { info_tbl: [(cdmpn,
                       label: block_cdmpn_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmpn: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdmrJ; else goto cdmrI;
       cdmrJ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdmrI: // global
           _sdmes::P64 = P64[R1 + 7];
           _sdmet::P64 = P64[R1 + 15];
           _sdmeu::P64 = P64[R1 + 23];
           I64[Hp - 40] = sat_sdmeV_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _sdmes::P64;
           P64[Hp] = _sdmeu::P64;
           R3 = Hp - 40;
           R2 = _sdmet::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ExecutionStack.Internal.showStackFrames_go_entry() //  [R2, R3]
         { info_tbl: [(cdmrP,
                       label: GHC.ExecutionStack.Internal.showStackFrames_go_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmrP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdmrQ; else goto cdmrR;
       cdmrQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.showStackFrames_go_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmrR: // global
           I64[Sp - 16] = block_cdmpd_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udmrX; else goto cdmpe;
       udmrX: // global
           call _cdmpd(R1) args: 0, res: 0, upd: 0;
       cdmpe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmpd() //  [R1]
         { info_tbl: [(cdmpd,
                       label: block_cdmpd_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmpd: // global
           _sdmen::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdmrM; else goto cdmrN;
       cdmrM: // global
           R1 = _sdmen::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdmrN: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmrW; else goto cdmrV;
       cdmrW: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmrV: // global
           _sdmep::P64 = P64[R1 + 6];
           _sdmeq::P64 = P64[R1 + 14];
           I64[Hp - 32] = sat_sdmeW_info;
           P64[Hp - 16] = _sdmen::P64;
           P64[Hp - 8] = _sdmep::P64;
           P64[Hp] = _sdmeq::P64;
           R3 = Hp - 32;
           R2 = lvl5_rdm9T_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.361910157 UTC

[section ""data" . GHC.ExecutionStack.Internal.showStackFrames_closure" {
     GHC.ExecutionStack.Internal.showStackFrames_closure:
         const GHC.ExecutionStack.Internal.showStackFrames_info;
 },
 sat_sdmeZ_entry() //  [R1]
         { info_tbl: [(cdms6,
                       label: sat_sdmeZ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdms6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdms7; else goto cdms8;
       cdms7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdms8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ExecutionStack.Internal.showStackFrames_go_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ExecutionStack.Internal.showStackFrames_entry() //  [R2, R3]
         { info_tbl: [(cdms9,
                       label: GHC.ExecutionStack.Internal.showStackFrames_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdms9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmsd; else goto cdmsc;
       cdmsd: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.showStackFrames_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmsc: // global
           I64[Hp - 24] = sat_sdmeZ_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = GHC.ExecutionStack.Internal.showStackFrames1_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.36485703 UTC

[section ""data" . GHC.ExecutionStack.Internal.Chunk_closure" {
     GHC.ExecutionStack.Internal.Chunk_closure:
         const GHC.ExecutionStack.Internal.Chunk_info;
 },
 GHC.ExecutionStack.Internal.Chunk_entry() //  [R2, R3, R4]
         { info_tbl: [(cdmsj,
                       label: GHC.ExecutionStack.Internal.Chunk_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 16} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmsj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmsn; else goto cdmsm;
       cdmsn: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.Chunk_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmsm: // global
           I64[Hp - 24] = GHC.ExecutionStack.Internal.Chunk_con_info;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.366160887 UTC

[section ""data" . GHC.ExecutionStack.Internal.Location_closure" {
     GHC.ExecutionStack.Internal.Location_closure:
         const GHC.ExecutionStack.Internal.Location_info;
 },
 GHC.ExecutionStack.Internal.Location_entry() //  [R2, R3, R4]
         { info_tbl: [(cdmst,
                       label: GHC.ExecutionStack.Internal.Location_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmst: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmsx; else goto cdmsw;
       cdmsx: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.Location_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmsw: // global
           I64[Hp - 24] = GHC.ExecutionStack.Internal.Location_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.367250415 UTC

[section ""data" . GHC.ExecutionStack.Internal.SrcLoc_closure" {
     GHC.ExecutionStack.Internal.SrcLoc_closure:
         const GHC.ExecutionStack.Internal.SrcLoc_info;
 },
 GHC.ExecutionStack.Internal.SrcLoc_entry() //  [R2, R3, R4]
         { info_tbl: [(cdmsD,
                       label: GHC.ExecutionStack.Internal.SrcLoc_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmsD: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmsH; else goto cdmsG;
       cdmsH: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.SrcLoc_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmsG: // global
           I64[Hp - 24] = GHC.ExecutionStack.Internal.SrcLoc_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.368211462 UTC

[GHC.ExecutionStack.Internal.Chunk_con_entry() //  [R1]
         { info_tbl: [(cdmsI,
                       label: GHC.ExecutionStack.Internal.Chunk_con_info
                       rep:HeapRep 3 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108,46,67,104,117,110,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmsI: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.368952361 UTC

[GHC.ExecutionStack.Internal.Location_con_entry() //  [R1]
         { info_tbl: [(cdmsJ,
                       label: GHC.ExecutionStack.Internal.Location_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108,46,76,111,99,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmsJ: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.369760728 UTC

[GHC.ExecutionStack.Internal.SrcLoc_con_entry() //  [R1]
         { info_tbl: [(cdmsK,
                       label: GHC.ExecutionStack.Internal.SrcLoc_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108,46,83,114,99,76,111,99]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmsK: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.370491409 UTC

[section ""relreadonly" . Sdmj7_srt" {
     Sdmj7_srt:
         const GHC.ForeignPtr.$winsertCFinalizer_closure;
         const GHC.ExecutionStack.Internal.collectStackTrace1_closure;
         const GHC.IO.Encoding.getForeignEncoding_closure;
         const GHC.Foreign.$wpeekCString_closure;
         const GHC.ExecutionStack.Internal.stackFrames_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.371105146 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:08:32.372140112 UTC

[section ""data" . GHC.ExecutionStack.Internal.$WChunk_closure" {
     GHC.ExecutionStack.Internal.$WChunk_closure:
         const GHC.ExecutionStack.Internal.$WChunk_info;
 },
 GHC.ExecutionStack.Internal.$WChunk_entry() //  [R2, R3, R4]
         { info_tbl: [(cdmsS,
                       label: GHC.ExecutionStack.Internal.$WChunk_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmsS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdmt6; else goto cdmt7;
       cdmt6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.$WChunk_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmt7: // global
           I64[Sp - 24] = block_cdmsP_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udmte; else goto cdmsQ;
       udmte: // global
           call _cdmsP(R1) args: 0, res: 0, upd: 0;
       cdmsQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmsP() //  [R1]
         { info_tbl: [(cdmsP,
                       label: block_cdmsP_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmsP: // global
           I64[Sp] = block_cdmsV_info;
           _sdm9Z::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sdm9Z::I64;
           if (R1 & 7 != 0) goto udmtd; else goto cdmsW;
       udmtd: // global
           call _cdmsV(R1) args: 0, res: 0, upd: 0;
       cdmsW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmsV() //  [R1]
         { info_tbl: [(cdmsV,
                       label: block_cdmsV_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmsV: // global
           I64[Sp] = block_cdmt0_info;
           _sdma1::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sdma1::I64;
           if (R1 & 7 != 0) goto udmtf; else goto cdmt1;
       udmtf: // global
           call _cdmt0(R1) args: 0, res: 0, upd: 0;
       cdmt1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmt0() //  [R1]
         { info_tbl: [(cdmt0,
                       label: block_cdmt0_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmt0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmtc; else goto cdmtb;
       cdmtc: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmtb: // global
           _sdma3::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.ExecutionStack.Internal.Chunk_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _sdma3::I64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.373958981 UTC

[section ""data" . GHC.ExecutionStack.Internal.sourceColumn_closure" {
     GHC.ExecutionStack.Internal.sourceColumn_closure:
         const GHC.ExecutionStack.Internal.sourceColumn_info;
 },
 GHC.ExecutionStack.Internal.sourceColumn_entry() //  [R2]
         { info_tbl: [(cdmtn,
                       label: GHC.ExecutionStack.Internal.sourceColumn_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmtn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmto; else goto cdmtp;
       cdmto: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.sourceColumn_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmtp: // global
           I64[Sp - 8] = block_cdmtk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmtt; else goto cdmtl;
       udmtt: // global
           call _cdmtk(R1) args: 0, res: 0, upd: 0;
       cdmtl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmtk() //  [R1]
         { info_tbl: [(cdmtk,
                       label: block_cdmtk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmtk: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.375176811 UTC

[section ""data" . GHC.ExecutionStack.Internal.sourceLine_closure" {
     GHC.ExecutionStack.Internal.sourceLine_closure:
         const GHC.ExecutionStack.Internal.sourceLine_info;
 },
 GHC.ExecutionStack.Internal.sourceLine_entry() //  [R2]
         { info_tbl: [(cdmtB,
                       label: GHC.ExecutionStack.Internal.sourceLine_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmtB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmtC; else goto cdmtD;
       cdmtC: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.sourceLine_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmtD: // global
           I64[Sp - 8] = block_cdmty_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmtH; else goto cdmtz;
       udmtH: // global
           call _cdmty(R1) args: 0, res: 0, upd: 0;
       cdmtz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmty() //  [R1]
         { info_tbl: [(cdmty,
                       label: block_cdmty_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmty: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.37639201 UTC

[section ""data" . GHC.ExecutionStack.Internal.sourceFile_closure" {
     GHC.ExecutionStack.Internal.sourceFile_closure:
         const GHC.ExecutionStack.Internal.sourceFile_info;
 },
 GHC.ExecutionStack.Internal.sourceFile_entry() //  [R2]
         { info_tbl: [(cdmtP,
                       label: GHC.ExecutionStack.Internal.sourceFile_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmtP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmtQ; else goto cdmtR;
       cdmtQ: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.sourceFile_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmtR: // global
           I64[Sp - 8] = block_cdmtM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmtV; else goto cdmtN;
       udmtV: // global
           call _cdmtM(R1) args: 0, res: 0, upd: 0;
       cdmtN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmtM() //  [R1]
         { info_tbl: [(cdmtM,
                       label: block_cdmtM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmtM: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.377603729 UTC

[section ""data" . GHC.ExecutionStack.Internal.srcLoc_closure" {
     GHC.ExecutionStack.Internal.srcLoc_closure:
         const GHC.ExecutionStack.Internal.srcLoc_info;
 },
 GHC.ExecutionStack.Internal.srcLoc_entry() //  [R2]
         { info_tbl: [(cdmu3,
                       label: GHC.ExecutionStack.Internal.srcLoc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmu3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmu4; else goto cdmu5;
       cdmu4: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.srcLoc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmu5: // global
           I64[Sp - 8] = block_cdmu0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmu9; else goto cdmu1;
       udmu9: // global
           call _cdmu0(R1) args: 0, res: 0, upd: 0;
       cdmu1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmu0() //  [R1]
         { info_tbl: [(cdmu0,
                       label: block_cdmu0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmu0: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.378818392 UTC

[section ""data" . GHC.ExecutionStack.Internal.functionName_closure" {
     GHC.ExecutionStack.Internal.functionName_closure:
         const GHC.ExecutionStack.Internal.functionName_info;
 },
 GHC.ExecutionStack.Internal.functionName_entry() //  [R2]
         { info_tbl: [(cdmuh,
                       label: GHC.ExecutionStack.Internal.functionName_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmuh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmui; else goto cdmuj;
       cdmui: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.functionName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmuj: // global
           I64[Sp - 8] = block_cdmue_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmun; else goto cdmuf;
       udmun: // global
           call _cdmue(R1) args: 0, res: 0, upd: 0;
       cdmuf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmue() //  [R1]
         { info_tbl: [(cdmue,
                       label: block_cdmue_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmue: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.380002342 UTC

[section ""data" . GHC.ExecutionStack.Internal.objectName_closure" {
     GHC.ExecutionStack.Internal.objectName_closure:
         const GHC.ExecutionStack.Internal.objectName_info;
 },
 GHC.ExecutionStack.Internal.objectName_entry() //  [R2]
         { info_tbl: [(cdmuv,
                       label: GHC.ExecutionStack.Internal.objectName_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmuv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmuw; else goto cdmux;
       cdmuw: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.objectName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmux: // global
           I64[Sp - 8] = block_cdmus_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmuB; else goto cdmut;
       udmuB: // global
           call _cdmus(R1) args: 0, res: 0, upd: 0;
       cdmut: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmus() //  [R1]
         { info_tbl: [(cdmus,
                       label: block_cdmus_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmus: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.381296907 UTC

[section ""data" . GHC.ExecutionStack.Internal.chunkFirstFrame_closure" {
     GHC.ExecutionStack.Internal.chunkFirstFrame_closure:
         const GHC.ExecutionStack.Internal.chunkFirstFrame_info;
 },
 GHC.ExecutionStack.Internal.chunkFirstFrame_entry() //  [R2]
         { info_tbl: [(cdmuJ,
                       label: GHC.ExecutionStack.Internal.chunkFirstFrame_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmuJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmuN; else goto cdmuO;
       cdmuN: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.chunkFirstFrame_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmuO: // global
           I64[Sp - 8] = block_cdmuG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmuS; else goto cdmuH;
       udmuS: // global
           call _cdmuG(R1) args: 0, res: 0, upd: 0;
       cdmuH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmuG() //  [R1]
         { info_tbl: [(cdmuG,
                       label: block_cdmuG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmuG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmuR; else goto cdmuQ;
       cdmuR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmuQ: // global
           _sdmaC::I64 = I64[R1 + 23];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sdmaC::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.382711726 UTC

[section ""data" . GHC.ExecutionStack.Internal.chunkNext_closure" {
     GHC.ExecutionStack.Internal.chunkNext_closure:
         const GHC.ExecutionStack.Internal.chunkNext_info;
 },
 GHC.ExecutionStack.Internal.chunkNext_entry() //  [R2]
         { info_tbl: [(cdmv0,
                       label: GHC.ExecutionStack.Internal.chunkNext_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmv0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmv4; else goto cdmv5;
       cdmv4: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.chunkNext_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmv5: // global
           I64[Sp - 8] = block_cdmuX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmv9; else goto cdmuY;
       udmv9: // global
           call _cdmuX(R1) args: 0, res: 0, upd: 0;
       cdmuY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmuX() //  [R1]
         { info_tbl: [(cdmuX,
                       label: block_cdmuX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmuX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmv8; else goto cdmv7;
       cdmv8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmv7: // global
           _sdmaG::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sdmaG::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.384095487 UTC

[section ""data" . GHC.ExecutionStack.Internal.chunkFrames_closure" {
     GHC.ExecutionStack.Internal.chunkFrames_closure:
         const GHC.ExecutionStack.Internal.chunkFrames_info;
 },
 GHC.ExecutionStack.Internal.chunkFrames_entry() //  [R2]
         { info_tbl: [(cdmvh,
                       label: GHC.ExecutionStack.Internal.chunkFrames_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmvh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmvl; else goto cdmvm;
       cdmvl: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.chunkFrames_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmvm: // global
           I64[Sp - 8] = block_cdmve_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmvq; else goto cdmvf;
       udmvq: // global
           call _cdmve(R1) args: 0, res: 0, upd: 0;
       cdmvf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmve() //  [R1]
         { info_tbl: [(cdmve,
                       label: block_cdmve_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmve: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmvp; else goto cdmvo;
       cdmvp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmvo: // global
           _sdmaK::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _sdmaK::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.385405629 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$trModule4_bytes" {
     GHC.ExecutionStack.Internal.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.386009522 UTC

[section ""data" . GHC.ExecutionStack.Internal.$trModule3_closure" {
     GHC.ExecutionStack.Internal.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.386630217 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$trModule2_bytes" {
     GHC.ExecutionStack.Internal.$trModule2_bytes:
         I8[] [71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.387259396 UTC

[section ""data" . GHC.ExecutionStack.Internal.$trModule1_closure" {
     GHC.ExecutionStack.Internal.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.387880485 UTC

[section ""data" . GHC.ExecutionStack.Internal.$trModule_closure" {
     GHC.ExecutionStack.Internal.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ExecutionStack.Internal.$trModule3_closure+1;
         const GHC.ExecutionStack.Internal.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.388530456 UTC

[section ""data" . $krep_rdm9l_closure" {
     $krep_rdm9l_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.389153831 UTC

[section ""data" . $krep1_rdm9m_closure" {
     $krep1_rdm9m_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.389856197 UTC

[section ""data" . $krep2_rdm9n_closure" {
     $krep2_rdm9n_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.390501428 UTC

[section ""data" . $krep3_rdm9o_closure" {
     $krep3_rdm9o_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWord_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.391110766 UTC

[section ""data" . $krep4_rdm9p_closure" {
     $krep4_rdm9p_closure:
         const :_con_info;
         const $krep1_rdm9m_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.391738325 UTC

[section ""data" . $krep5_rdm9q_closure" {
     $krep5_rdm9q_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep4_rdm9p_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.392327011 UTC

[section ""data" . $krep6_rdm9r_closure" {
     $krep6_rdm9r_closure:
         const :_con_info;
         const $krep2_rdm9n_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.392985031 UTC

[section ""data" . $krep7_rdm9s_closure" {
     $krep7_rdm9s_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep6_rdm9r_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.396416915 UTC

[section ""data" . $krep8_rdm9t_closure" {
     $krep8_rdm9t_closure:
         const :_con_info;
         const $krep7_rdm9s_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.39732517 UTC

[section ""data" . $krep9_rdm9u_closure" {
     $krep9_rdm9u_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep8_rdm9t_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.398159586 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcSrcLoc2_bytes" {
     GHC.ExecutionStack.Internal.$tcSrcLoc2_bytes:
         I8[] [83,114,99,76,111,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.3990962 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSrcLoc1_closure" {
     GHC.ExecutionStack.Internal.$tcSrcLoc1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcSrcLoc2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.399990468 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSrcLoc_closure" {
     GHC.ExecutionStack.Internal.$tcSrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcSrcLoc1_closure+1;
         const GHC.Types.krep$*_closure;
         const 8235067574311587288;
         const 11106182367596705879;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.400895933 UTC

[section ""data" . $krep10_rdm9v_closure" {
     $krep10_rdm9v_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcSrcLoc_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.402215309 UTC

[section ""data" . $krep11_rdm9w_closure" {
     $krep11_rdm9w_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rdm9l_closure+1;
         const $krep10_rdm9v_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.403148209 UTC

[section ""data" . $krep12_rdm9x_closure" {
     $krep12_rdm9x_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rdm9l_closure+1;
         const $krep11_rdm9w_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.404063754 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'SrcLoc1_closure" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rdm9q_closure+1;
         const $krep12_rdm9x_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.404935031 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'SrcLoc3_bytes" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc3_bytes:
         I8[] [39,83,114,99,76,111,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.405872387 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'SrcLoc2_closure" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'SrcLoc3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.408480782 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'SrcLoc_closure" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'SrcLoc2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'SrcLoc1_closure+4;
         const 11095721805058681290;
         const 15266549541595723377;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.409397058 UTC

[section ""data" . $krep13_rdm9y_closure" {
     $krep13_rdm9y_closure:
         const :_con_info;
         const $krep10_rdm9v_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.410273267 UTC

[section ""data" . $krep14_rdm9z_closure" {
     $krep14_rdm9z_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep13_rdm9y_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.411049127 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcLocation2_bytes" {
     GHC.ExecutionStack.Internal.$tcLocation2_bytes:
         I8[] [76,111,99,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.41178072 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcLocation1_closure" {
     GHC.ExecutionStack.Internal.$tcLocation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcLocation2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.41251104 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcLocation_closure" {
     GHC.ExecutionStack.Internal.$tcLocation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcLocation1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11638758687983955592;
         const 6940671496618727587;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.413319479 UTC

[section ""data" . $krep15_rdm9A_closure" {
     $krep15_rdm9A_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcLocation_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.414108112 UTC

[section ""data" . $krep16_rdm9B_closure" {
     $krep16_rdm9B_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_rdm9z_closure+1;
         const $krep15_rdm9A_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.414850791 UTC

[section ""data" . $krep17_rdm9C_closure" {
     $krep17_rdm9C_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rdm9q_closure+1;
         const $krep16_rdm9B_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.415654552 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Location1_closure" {
     GHC.ExecutionStack.Internal.$tc'Location1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rdm9q_closure+1;
         const $krep17_rdm9C_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.416375296 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'Location3_bytes" {
     GHC.ExecutionStack.Internal.$tc'Location3_bytes:
         I8[] [39,76,111,99,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.417041777 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Location2_closure" {
     GHC.ExecutionStack.Internal.$tc'Location2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'Location3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.418187341 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Location_closure" {
     GHC.ExecutionStack.Internal.$tc'Location_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Location2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Location1_closure+4;
         const 12834480788254682335;
         const 10467761170474242090;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.419039272 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcStackTrace2_bytes" {
     GHC.ExecutionStack.Internal.$tcStackTrace2_bytes:
         I8[] [83,116,97,99,107,84,114,97,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.41970516 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcStackTrace1_closure" {
     GHC.ExecutionStack.Internal.$tcStackTrace1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcStackTrace2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.420426205 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcStackTrace_closure" {
     GHC.ExecutionStack.Internal.$tcStackTrace_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcStackTrace1_closure+1;
         const GHC.Types.krep$*_closure;
         const 156026104294967557;
         const 17600277320898304892;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.421316354 UTC

[section ""data" . $krep18_rdm9D_closure" {
     $krep18_rdm9D_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcStackTrace_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.422031446 UTC

[section ""data" . $krep19_rdm9E_closure" {
     $krep19_rdm9E_closure:
         const :_con_info;
         const $krep18_rdm9D_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.422849532 UTC

[section ""data" . $krep20_rdm9F_closure" {
     $krep20_rdm9F_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure;
         const $krep19_rdm9E_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.423622032 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'StackTrace1_closure" {
     GHC.ExecutionStack.Internal.$tc'StackTrace1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep20_rdm9F_closure+1;
         const $krep18_rdm9D_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.424337953 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'StackTrace3_bytes" {
     GHC.ExecutionStack.Internal.$tc'StackTrace3_bytes:
         I8[] [39,83,116,97,99,107,84,114,97,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.424997947 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'StackTrace2_closure" {
     GHC.ExecutionStack.Internal.$tc'StackTrace2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'StackTrace3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.425822195 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'StackTrace_closure" {
     GHC.ExecutionStack.Internal.$tc'StackTrace_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'StackTrace2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'StackTrace1_closure+4;
         const 8151790971853785814;
         const 7394195233358636505;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.426585666 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcChunk2_bytes" {
     GHC.ExecutionStack.Internal.$tcChunk2_bytes:
         I8[] [67,104,117,110,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.427282601 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcChunk1_closure" {
     GHC.ExecutionStack.Internal.$tcChunk1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcChunk2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.428074601 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcChunk_closure" {
     GHC.ExecutionStack.Internal.$tcChunk_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcChunk1_closure+1;
         const GHC.Types.krep$*_closure;
         const 1813577326074213410;
         const 3256155729866972563;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.428932668 UTC

[section ""data" . $krep21_rdm9G_closure" {
     $krep21_rdm9G_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcChunk_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.429802987 UTC

[section ""data" . $krep22_rdm9H_closure" {
     $krep22_rdm9H_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_rdm9u_closure+1;
         const $krep21_rdm9G_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.430540986 UTC

[section ""data" . $krep23_rdm9I_closure" {
     $krep23_rdm9I_closure:
         const :_con_info;
         const $krep21_rdm9G_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.431300408 UTC

[section ""data" . $krep24_rdm9J_closure" {
     $krep24_rdm9J_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep23_rdm9I_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.432044721 UTC

[section ""data" . $krep25_rdm9K_closure" {
     $krep25_rdm9K_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep24_rdm9J_closure+1;
         const $krep22_rdm9H_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.432847587 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Chunk1_closure" {
     GHC.ExecutionStack.Internal.$tc'Chunk1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rdm9o_closure+1;
         const $krep25_rdm9K_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.433704552 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'Chunk3_bytes" {
     GHC.ExecutionStack.Internal.$tc'Chunk3_bytes:
         I8[] [39,67,104,117,110,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.434449952 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Chunk2_closure" {
     GHC.ExecutionStack.Internal.$tc'Chunk2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'Chunk3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.435196427 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Chunk_closure" {
     GHC.ExecutionStack.Internal.$tc'Chunk_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Chunk2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Chunk1_closure+4;
         const 16594405016023301875;
         const 5381929581673016432;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.436048617 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcSession2_bytes" {
     GHC.ExecutionStack.Internal.$tcSession2_bytes:
         I8[] [83,101,115,115,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.436861492 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSession1_closure" {
     GHC.ExecutionStack.Internal.$tcSession1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcSession2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.438103554 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSession_closure" {
     GHC.ExecutionStack.Internal.$tcSession_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcSession1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11168382530978838993;
         const 7144139957235519240;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.43922073 UTC

[section ""data" . libdw_pool_clear_rdm9L_closure" {
     libdw_pool_clear_rdm9L_closure:
         const libdw_pool_clear_rdm9L_info;
 },
 libdw_pool_clear_rdm9L_entry() //  []
         { info_tbl: [(cdmvw,
                       label: libdw_pool_clear_rdm9L_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmvw: // global
           call "ccall" arg hints:  []  result hints:  [] libdwPoolClear();
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.44039007 UTC

[section ""data" . GHC.ExecutionStack.Internal.invalidateDebugCache_closure" {
     GHC.ExecutionStack.Internal.invalidateDebugCache_closure:
         const GHC.ExecutionStack.Internal.invalidateDebugCache_info;
 },
 GHC.ExecutionStack.Internal.invalidateDebugCache_entry() //  []
         { info_tbl: [(cdmvD,
                       label: GHC.ExecutionStack.Internal.invalidateDebugCache_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmvD: // global
           call libdw_pool_clear_rdm9L_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.441874349 UTC

[section ""data" . GHC.ExecutionStack.Internal.stackDepth_closure" {
     GHC.ExecutionStack.Internal.stackDepth_closure:
         const GHC.ExecutionStack.Internal.stackDepth_info;
 },
 GHC.ExecutionStack.Internal.stackDepth_entry() //  [R2]
         { info_tbl: [(cdmvS,
                       label: GHC.ExecutionStack.Internal.stackDepth_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmvS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdmvT; else goto cdmvU;
       cdmvT: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.stackDepth_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmvU: // global
           I64[Sp - 16] = block_cdmvK_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _cdmvK() //  []
         { info_tbl: [(cdmvK,
                       label: block_cdmvK_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmvK: // global
           _sdmaR::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdmvM_info;
           R1 = _sdmaR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udmw7; else goto cdmvN;
       udmw7: // global
           call _cdmvM(R1) args: 0, res: 0, upd: 0;
       cdmvN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmvM() //  [R1]
         { info_tbl: [(cdmvM,
                       label: block_cdmvM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmvM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmw0; else goto cdmvZ;
       cdmw0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmvZ: // global
           _sdmaY::I64 = I64[I64[R1 + 15]];
           call MO_Touch(P64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sdmaY::I64;
           R1 = (Hp + -7) & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.444255952 UTC

[section ""data" . GHC.ExecutionStack.Internal.collectStackTrace1_closure" {
     GHC.ExecutionStack.Internal.collectStackTrace1_closure:
         const GHC.ExecutionStack.Internal.collectStackTrace1_info;
         const 0;
 },
 GHC.ExecutionStack.Internal.collectStackTrace1_entry() //  []
         { info_tbl: [(cdmwi,
                       label: GHC.ExecutionStack.Internal.collectStackTrace1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmwi: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmwj; else goto cdmwk;
       cdmwj: // global
           R1 = GHC.ExecutionStack.Internal.collectStackTrace1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdmwk: // global
           (_sdmb9::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] libdwPoolTake();
           if (_sdmb9::I64 == 0) goto udmwQ; else goto cdmwg;
       udmwQ: // global
           call _cdmwh() args: 0, res: 0, upd: 0;
       cdmwg: // global
           I64[Sp - 16] = block_cdmwm_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 8] = _sdmb9::I64;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmwm() //  [R1]
         { info_tbl: [(cdmwm,
                       label: block_cdmwm_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmwm: // global
           I64[Sp - 8] = block_cdmwo_info;
           R6 = I64[Sp + 8];
           R5 = 0;
           R4 = 0;
           R3 = libdwPoolRelease;
           R2 = R1;
           P64[Sp - 16] = GHC.Tuple.()_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 _cdmwo() //  [R1]
         { info_tbl: [(cdmwo,
                       label: block_cdmwo_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmwo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmwt; else goto cdmws;
       cdmwt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmws: // global
           _sdmbd::P64 = P64[Sp + 8];
           (_sdmbk::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] libdwGetBacktrace(I64[Sp + 16]);
           I64[Hp - 8] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp] = _sdmbd::P64;
           call MO_Touch(Hp - 7);
           if (_sdmbk::I64 == 0) goto udmwP; else goto cdmwJ;
       udmwP: // global
           Sp = Sp + 24;
           call _cdmwh() args: 0, res: 0, upd: 0;
       cdmwJ: // global
           I64[Sp + 8] = block_cdmwB_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp + 16] = _sdmbk::I64;
           Sp = Sp + 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmwh() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmwh: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cdmwB() //  [R1]
         { info_tbl: [(cdmwB,
                       label: block_cdmwB_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmwB: // global
           I64[Sp - 8] = block_cdmwD_info;
           R6 = I64[Sp + 8];
           R5 = 0;
           R4 = 0;
           R3 = backtraceFree;
           R2 = R1;
           P64[Sp - 16] = GHC.Tuple.()_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 _cdmwD() //  [R1]
         { info_tbl: [(cdmwD,
                       label: block_cdmwD_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmwD: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdmwN; else goto cdmwM;
       cdmwN: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmwM: // global
           I64[Hp - 48] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           I64[Hp - 32] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 24] = Hp - 47;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.446609643 UTC

[section ""data" . GHC.ExecutionStack.Internal.collectStackTrace_closure" {
     GHC.ExecutionStack.Internal.collectStackTrace_closure:
         const GHC.ExecutionStack.Internal.collectStackTrace_info;
         const 0;
 },
 GHC.ExecutionStack.Internal.collectStackTrace_entry() //  []
         { info_tbl: [(cdmwW,
                       label: GHC.ExecutionStack.Internal.collectStackTrace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmwW: // global
           call GHC.ExecutionStack.Internal.collectStackTrace1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.448786714 UTC

[section ""data" . $wgo_rdm9M_closure" {
     $wgo_rdm9M_closure:
         const $wgo_rdm9M_info;
 },
 $wgo_rdm9M_entry() //  [R2, R3]
         { info_tbl: [(cdmxh,
                       label: $wgo_rdm9M_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 14} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmxh: // global
           _sdmby::I64 = R3;
           _sdmbx::P64 = R2;
           goto cdmx0;
       cdmx0: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdmxl; else goto cdmxk;
       cdmxl: // global
           HpAlloc = 56;
           R3 = _sdmby::I64;
           R2 = _sdmbx::P64;
           R1 = $wgo_rdm9M_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmxk: // global
           if (_sdmby::I64 == 0) goto cdmxg; else goto cdmxf;
       cdmxg: // global
           Hp = Hp - 56;
           R1 = _sdmbx::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdmxf: // global
           _sdmbD::I64 = I64[_sdmby::I64];
           _sdmbH::I64 = I64[_sdmby::I64 + 8];
           I64[Hp - 48] = GHC.ExecutionStack.Internal.Chunk_con_info;
           I64[Hp - 40] = _sdmbD::I64;
           I64[Hp - 32] = _sdmbH::I64;
           I64[Hp - 24] = _sdmby::I64 + 16;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = _sdmbx::P64;
           _sdmby::I64 = _sdmbH::I64;
           _sdmbx::P64 = Hp - 14;
           goto cdmx0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.455032349 UTC

[section ""data" . GHC.ExecutionStack.Internal.stackFrames_closure" {
     GHC.ExecutionStack.Internal.stackFrames_closure:
         const GHC.ExecutionStack.Internal.stackFrames_info;
         const 0;
 },
 sat_sdmcR_entry() //  [R1]
         { info_tbl: [(cdmyJ,
                       label: sat_sdmcR_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmyJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmyM; else goto cdmyN;
       cdmyM: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdmyN: // global
           I64[Sp - 32] = block_cdmyF_info;
           P64[Sp - 24] = P64[R1 + 7];
           I64[Sp - 16] = I64[R1 + 15];
           I64[Sp - 8] = I64[R1 + 23];
           Sp = Sp - 32;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _cdmyF() //  []
         { info_tbl: [(cdmyF,
                       label: block_cdmyF_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmyF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmyQ; else goto cdmyP;
       cdmyQ: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdmyP: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 24] + 8;
           R3 = Hp - 7;
           R2 = I64[Sp + 16] - 1;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call $witerFrames_sdmck_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdmdr_entry() //  [R1]
         { info_tbl: [(cdmzy,
                       label: sat_sdmdr_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmzy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmzB; else goto cdmzC;
       cdmzB: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdmzC: // global
           I64[Sp - 32] = block_cdmzu_info;
           P64[Sp - 24] = P64[R1 + 7];
           I64[Sp - 16] = I64[R1 + 15];
           I64[Sp - 8] = I64[R1 + 23];
           Sp = Sp - 32;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _cdmzu() //  []
         { info_tbl: [(cdmzu,
                       label: block_cdmzu_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmzu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmzF; else goto cdmzE;
       cdmzF: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdmzE: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 24] + 8;
           R3 = Hp - 7;
           R2 = I64[Sp + 16] - 1;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call $witerFrames_sdmck_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdmdD_entry() //  [R1]
         { info_tbl: [(cdmzU,
                       label: sat_sdmdD_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmzU: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdmzV; else goto cdmzW;
       cdmzV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmzW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdmzN_info;
           _sdmdf::I64 = I64[R1 + 24];
           _sdmdj::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           I64[Sp - 32] = _sdmdf::I64;
           I64[Sp - 24] = _sdmdj::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udmAf; else goto cdmzO;
       udmAf: // global
           call _cdmzN(R1) args: 0, res: 0, upd: 0;
       cdmzO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdmzN() //  [R1]
         { info_tbl: [(cdmzN,
                       label: block_cdmzN_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmzN: // global
           if (R1 & 7 == 1) goto cdmzR; else goto cdmzS;
       cdmzR: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdmzS: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdmAe; else goto cdmAd;
       cdmAe: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdmAd: // global
           I64[Hp - 72] = GHC.Types.I#_con_info;
           I64[Hp - 64] = I64[Sp + 16];
           I64[Hp - 56] = GHC.Types.I#_con_info;
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = GHC.ExecutionStack.Internal.SrcLoc_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = Hp - 55;
           P64[Hp - 16] = Hp - 71;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 $witerFrames_sdmck_entry() //  [R1, R2, R3]
         { info_tbl: [(cdmAj,
                       label: $witerFrames_sdmck_info
                       rep:HeapRep 2 ptrs { Fun {arity: 3 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmAj: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cdmAk; else goto cdmAl;
       cdmAk: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmAl: // global
           if (R2 == 0) goto cdmAi; else goto cdmAh;
       cdmAi: // global
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdmAh: // global
           I64[Sp - 40] = block_cdmy8_info;
           _sdmck::P64 = R1;
           _sdmc0::P64 = P64[R1 + 5];
           _sdmca::P64 = P64[R1 + 13];
           R1 = R3;
           P64[Sp - 32] = _sdmc0::P64;
           P64[Sp - 24] = _sdmca::P64;
           P64[Sp - 16] = _sdmck::P64;
           I64[Sp - 8] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udmBu; else goto cdmy9;
       udmBu: // global
           call _cdmy8(R1) args: 0, res: 0, upd: 0;
       cdmy9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmy8() //  [R1]
         { info_tbl: [(cdmy8,
                       label: block_cdmy8_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmy8: // global
           _sdmcq::I64 = I64[R1 + 7];
           _sdmct::I64 = I64[_sdmcq::I64];
           I64[Sp - 16] = block_cdmyd_info;
           R1 = 32;
           I64[Sp - 8] = _sdmct::I64;
           I64[Sp] = _sdmcq::I64;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmyd() //  [R1]
         { info_tbl: [(cdmyd,
                       label: block_cdmyd_info
                       rep:StackRep [True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmyd: // global
           I64[Sp] = block_cdmyf_info;
           _sdmcz::P64 = R1;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = _sdmcz::P64;
           if (R1 & 7 != 0) goto udmBp; else goto cdmyg;
       udmBp: // global
           call _cdmyf(R1) args: 0, res: 0, upd: 0;
       cdmyg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmyf() //  [R1]
         { info_tbl: [(cdmyf,
                       label: block_cdmyf_info
                       rep:StackRep [True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmyf: // global
           _sdmcC::P64 = P64[R1 + 7];
           _sdmcD::I64 = P64[Sp + 32] + 16;
           (_sdmcH::I64) = call "ccall" arg hints:  [PtrHint, PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] libdwLookupLocation(I64[R1 + 15], _sdmcD::I64, I64[Sp + 8]);
           call MO_Touch(_sdmcC::P64);
           _sdmcJ::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sdmcH::I64));
           if (_sdmcJ::I64 != 0) goto udmBg; else goto cdmAu;
       udmBg: // global
           I64[Sp + 8] = _sdmcJ::I64;
           Sp = Sp + 8;
           call _cdmyw() args: 0, res: 0, upd: 0;
       cdmAu: // global
           _sdmcU::I64 = I64[_sdmcD::I64];
           if (_sdmcU::I64 == 0) goto cdmBf; else goto cdmBb;
       cdmBf: // global
           I64[Sp + 8] = _sdmcD::I64;
           P64[Sp] = GHC.Types.[]_closure+1;
           call _sdmcV() args: 0, res: 0, upd: 0;
       cdmBb: // global
           I64[Sp - 8] = block_cdmB7_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp] = _sdmcU::I64;
           I64[Sp + 8] = _sdmcD::I64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmyw() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmyw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmAt; else goto cdmAs;
       cdmAt: // global
           HpAlloc = 32;
           _sdmcJ::I64 = I64[Sp];
           I64[Sp] = block_cdmyv_info;
           R1 = _sdmcJ::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdmAs: // global
           _sdmc0::P64 = P64[Sp + 16];
           _sdmck::P64 = P64[Sp + 32];
           _sdmco::I64 = I64[Sp + 40];
           _sdmcq::I64 = I64[Sp + 8];
           call MO_Touch(P64[Sp + 24]);
           call MO_Touch(_sdmc0::P64);
           I64[Hp - 24] = sat_sdmcR_info;
           P64[Hp - 16] = _sdmck::P64;
           I64[Hp - 8] = _sdmco::I64;
           I64[Hp] = _sdmcq::I64;
           R2 = Hp - 23;
           Sp = Sp + 48;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _cdmyv() //  [R1]
         { info_tbl: [(cdmyv,
                       label: block_cdmyv_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmyv: // global
           I64[Sp] = R1;
           call _cdmyw() args: 0, res: 0, upd: 0;
     }
 },
 _cdmB7() //  [R1]
         { info_tbl: [(cdmB7,
                       label: block_cdmB7_info
                       rep:StackRep [True, True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmB7: // global
           _sdmcU::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdmB9_info;
           R3 = _sdmcU::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdmB9() //  [R1]
         { info_tbl: [(cdmB9,
                       label: block_cdmB9_info
                       rep:StackRep [True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmB9: // global
           P64[Sp] = R1;
           call _sdmcV() args: 0, res: 0, upd: 0;
     }
 },
 _sdmcV() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       sdmcV: // global
           _sdmd1::I64 = I64[I64[Sp + 8] + 8];
           if (_sdmd1::I64 == 0) goto cdmB3; else goto cdmAZ;
       cdmB3: // global
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call _sdmd2() args: 0, res: 0, upd: 0;
       cdmAZ: // global
           I64[Sp - 16] = block_cdmAV_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 8] = _sdmd1::I64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmAV() //  [R1]
         { info_tbl: [(cdmAV,
                       label: block_cdmAV_info
                       rep:StackRep [True, False, True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmAV: // global
           _sdmd1::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdmAX_info;
           R3 = _sdmd1::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdmAX() //  [R1]
         { info_tbl: [(cdmAX,
                       label: block_cdmAX_info
                       rep:StackRep [False, True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmAX: // global
           P64[Sp] = R1;
           call _sdmd2() args: 0, res: 0, upd: 0;
     }
 },
 _sdmd2() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       sdmd2: // global
           _sdmd8::I64 = I64[I64[Sp + 16] + 16];
           if (_sdmd8::I64 == 0) goto cdmAR; else goto cdmAN;
       cdmAR: // global
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call _cdmzf() args: 0, res: 0, upd: 0;
       cdmAN: // global
           I64[Sp - 16] = block_cdmAJ_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 8] = _sdmd8::I64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmAJ() //  [R1]
         { info_tbl: [(cdmAJ,
                       label: block_cdmAJ_info
                       rep:StackRep [True, False, False, True, True, False, False, False,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmAJ: // global
           _sdmd8::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdmAL_info;
           R3 = _sdmd8::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdmAL() //  [R1]
         { info_tbl: [(cdmAL,
                       label: block_cdmAL_info
                       rep:StackRep [False, False, True, True, False, False, False,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmAL: // global
           P64[Sp] = R1;
           call _cdmzf() args: 0, res: 0, upd: 0;
     }
 },
 _cdmzf() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmzf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmAC; else goto cdmAB;
       cdmAC: // global
           HpAlloc = 32;
           _sdmdb::P64 = P64[Sp];
           I64[Sp] = block_cdmze_info;
           R1 = _sdmdb::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmAB: // global
           _sdmc0::P64 = P64[Sp + 40];
           _sdmck::P64 = P64[Sp + 56];
           _sdmco::I64 = I64[Sp + 64];
           _sdmcq::I64 = I64[Sp + 32];
           _sdmcD::I64 = I64[Sp + 24];
           _sdmdf::I64 = %MO_UU_Conv_W32_W64(I32[_sdmcD::I64 + 24]);
           _sdmdj::I64 = %MO_UU_Conv_W32_W64(I32[_sdmcD::I64 + 28]);
           call MO_Touch(P64[Sp + 48]);
           call MO_Touch(_sdmc0::P64);
           I64[Hp - 24] = sat_sdmdr_info;
           P64[Hp - 16] = _sdmck::P64;
           I64[Hp - 8] = _sdmco::I64;
           I64[Hp] = _sdmcq::I64;
           I64[Sp - 8] = block_cdmzH_info;
           R2 = Hp - 23;
           I64[Sp + 56] = _sdmdj::I64;
           I64[Sp + 64] = _sdmdf::I64;
           Sp = Sp - 8;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdmze() //  [R1]
         { info_tbl: [(cdmze,
                       label: block_cdmze_info
                       rep:StackRep [False, False, True, True, False, False, False,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmze: // global
           P64[Sp] = R1;
           call _cdmzf() args: 0, res: 0, upd: 0;
     }
 },
 _cdmzH() //  [R1]
         { info_tbl: [(cdmzH,
                       label: block_cdmzH_info
                       rep:StackRep [False, False, False, True, True, True, True, True,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmzH: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdmAF; else goto cdmAE;
       cdmAF: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmAE: // global
           I64[Hp - 88] = sat_sdmdD_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = I64[Sp + 72];
           I64[Hp - 56] = I64[Sp + 64];
           I64[Hp - 48] = GHC.ExecutionStack.Internal.Location_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdme7_entry() //  [R1]
         { info_tbl: [(cdmBK,
                       label: sat_sdme7_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmBK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmBL; else goto cdmBM;
       cdmBL: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdmBM: // global
           I64[Sp - 32] = block_cdmBI_info;
           P64[Sp - 24] = P64[R1 + 7];
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = P64[R1 + 23];
           Sp = Sp - 32;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _cdmBI() //  []
         { info_tbl: [(cdmBI,
                       label: block_cdmBI_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmBI: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call go_sdmc9_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdmeb_entry() //  [R1]
         { info_tbl: [(cdmBU,
                       label: sat_sdmeb_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmBU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdmBV; else goto cdmBW;
       cdmBV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmBW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 go_sdmc9_entry() //  [R1, R2, R3]
         { info_tbl: [(cdmC1,
                       label: go_sdmc9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmC1: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdmC2; else goto cdmC3;
       cdmC2: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmC3: // global
           I64[Sp - 32] = block_cdmxQ_info;
           _sdmc9::P64 = R1;
           _sdmc0::P64 = P64[R1 + 5];
           R1 = R3;
           P64[Sp - 24] = _sdmc0::P64;
           P64[Sp - 16] = _sdmc9::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udmCh; else goto cdmxR;
       udmCh: // global
           call _cdmxQ(R1) args: 0, res: 0, upd: 0;
       cdmxR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmxQ() //  [R1]
         { info_tbl: [(cdmxQ,
                       label: block_cdmxQ_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmxQ: // global
           if (R1 & 7 == 1) goto cdmBY; else goto cdmBZ;
       cdmBY: // global
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdmBZ: // global
           I64[Sp - 8] = block_cdmxW_info;
           _sdmcf::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sdmcf::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmCg; else goto cdmxX;
       udmCg: // global
           call _cdmxW(R1) args: 0, res: 0, upd: 0;
       cdmxX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmxW() //  [R1]
         { info_tbl: [(cdmxW,
                       label: block_cdmxW_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmxW: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmC9; else goto cdmC8;
       cdmC9: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmC8: // global
           _sdmch::I64 = I64[R1 + 7];
           _sdmcj::I64 = I64[R1 + 23];
           I64[Hp - 32] = $witerFrames_sdmck_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sdmcj::I64;
           I64[Sp] = block_cdmBB_info;
           R3 = Hp - 7;
           R2 = _sdmch::I64;
           R1 = Hp - 29;
           call $witerFrames_sdmck_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmBB() //  [R1]
         { info_tbl: [(cdmBB,
                       label: block_cdmBB_info
                       rep:StackRep [False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmBB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmCc; else goto cdmCb;
       cdmCc: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmCb: // global
           I64[Hp - 24] = sat_sdme7_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 24] = block_cdmBO_info;
           R2 = Hp - 23;
           P64[Sp + 32] = R1;
           Sp = Sp + 24;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdmBO() //  [R1]
         { info_tbl: [(cdmBO,
                       label: block_cdmBO_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmBO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmCf; else goto cdmCe;
       cdmCf: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmCe: // global
           I64[Hp - 24] = sat_sdmeb_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ExecutionStack.Internal.stackFrames_entry() //  [R2]
         { info_tbl: [(cdmCo,
                       label: GHC.ExecutionStack.Internal.stackFrames_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmCo: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdmCp; else goto cdmCq;
       cdmCp: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.stackFrames_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmCq: // global
           I64[Sp - 16] = block_cdmxq_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _cdmxq() //  []
         { info_tbl: [(cdmxq,
                       label: block_cdmxq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmxq: // global
           (_sdmbQ::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] libdwPoolTake();
           if (_sdmbQ::I64 == 0) goto cdmCk; else goto cdmCj;
       cdmCk: // global
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call _cdmCi() args: 0, res: 0, upd: 0;
       cdmCj: // global
           I64[Sp - 8] = block_cdmxw_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _sdmbQ::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmxw() //  [R1]
         { info_tbl: [(cdmxw,
                       label: block_cdmxw_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmxw: // global
           I64[Sp - 8] = block_cdmxy_info;
           R6 = I64[Sp + 8];
           R5 = 0;
           R4 = 0;
           R3 = libdwPoolRelease;
           R2 = R1;
           P64[Sp - 16] = GHC.Tuple.()_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 _cdmxy() //  []
         { info_tbl: [(cdmxy,
                       label: block_cdmxy_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmxy: // global
           I64[Sp] = block_cdmxA_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto udmCR; else goto cdmxB;
       udmCR: // global
           call _cdmxA(R1) args: 0, res: 0, upd: 0;
       cdmxB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmxA() //  [R1]
         { info_tbl: [(cdmxA,
                       label: block_cdmxA_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmxA: // global
           _sdmc4::I64 = I64[I64[R1 + 15] + 8];
           I64[Sp] = block_cdmxI_info;
           R3 = _sdmc4::I64;
           R2 = GHC.Types.[]_closure+1;
           P64[Sp + 24] = P64[R1 + 7];
           call $wgo_rdm9M_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdmxI() //  [R1]
         { info_tbl: [(cdmxI,
                       label: block_cdmxI_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmxI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmCy; else goto cdmCx;
       cdmCy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmCx: // global
           _sdmc0::P64 = P64[Sp + 24];
           call MO_Touch(_sdmc0::P64);
           I64[Hp - 8] = go_sdmc9_info;
           P64[Hp] = _sdmc0::P64;
           I64[Sp] = block_cdmCs_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = R1;
           P64[Sp + 24] = Hp - 5;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdmCs() //  [R1]
         { info_tbl: [(cdmCs,
                       label: block_cdmCs_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmCs: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmCH; else goto cdmCG;
       cdmCH: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmCG: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 16];
           _cdmxL::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cdmCE_info;
           R3 = R1;
           R2 = Hp - 15;
           R1 = _cdmxL::P64;
           Sp = Sp + 24;
           call go_sdmc9_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmCE() //  [R1]
         { info_tbl: [(cdmCE,
                       label: block_cdmCE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmCE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmCL; else goto cdmCK;
       cdmCL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmCK: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp] = Hp - 6;
           call _cdmCi() args: 0, res: 0, upd: 0;
     }
 },
 _cdmCi() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmCi: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.466131513 UTC

[section ""data" . g_rdm9N_closure" {
     g_rdm9N_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.466777187 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.showStackFrames1_bytes" {
     GHC.ExecutionStack.Internal.showStackFrames1_bytes:
         I8[] [83,116,97,99,107,32,116,114,97,99,101,58,10]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.467372989 UTC

[section ""cstring" . lvl_rdm9O_bytes" {
     lvl_rdm9O_bytes:
         I8[] [41]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.467983488 UTC

[section ""cstring" . lvl1_rdm9P_bytes" {
     lvl1_rdm9P_bytes:
         I8[] [46]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.468516214 UTC

[section ""cstring" . lvl2_rdm9Q_bytes" {
     lvl2_rdm9Q_bytes:
         I8[] [58]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.469073593 UTC

[section ""cstring" . lvl3_rdm9R_bytes" {
     lvl3_rdm9R_bytes:
         I8[] [32,40]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.469727499 UTC

[section ""cstring" . lvl4_rdm9S_bytes" {
     lvl4_rdm9S_bytes:
         I8[] [32,105,110,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.470357828 UTC

[section ""cstring" . lvl5_rdm9T_bytes" {
     lvl5_rdm9T_bytes:
         I8[] [32,32,32,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.475232451 UTC

[section ""data" . GHC.ExecutionStack.Internal.showStackFrames_go_closure" {
     GHC.ExecutionStack.Internal.showStackFrames_go_closure:
         const GHC.ExecutionStack.Internal.showStackFrames_go_info;
 },
 sat_sdmew_entry() //  [R1]
         { info_tbl: [(cdmDs,
                       label: sat_sdmew_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmDs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdmDt; else goto cdmDu;
       cdmDt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmDu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.ExecutionStack.Internal.showStackFrames_go_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdmey_entry() //  [R1]
         { info_tbl: [(cdmDw,
                       label: sat_sdmey_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmDw: // global
           _sdmey::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdmDx; else goto cdmDy;
       cdmDy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdmDA; else goto cdmDz;
       cdmDA: // global
           HpAlloc = 56;
           goto cdmDx;
       cdmDx: // global
           R1 = _sdmey::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmDz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdmey::P64;
           _sdmen::P64 = P64[_sdmey::P64 + 16];
           _sdmeq::P64 = P64[_sdmey::P64 + 24];
           _sdmes::P64 = P64[_sdmey::P64 + 32];
           I64[Hp - 48] = sat_sdmew_info;
           P64[Hp - 32] = _sdmen::P64;
           P64[Hp - 24] = _sdmeq::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = g_rdm9N_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sdmes::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 karg_sdmev_entry() //  [R1]
         { info_tbl: [(cdmDB,
                       label: karg_sdmev_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmDB: // global
           _sdmev::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdmDC; else goto cdmDD;
       cdmDD: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmDF; else goto cdmDE;
       cdmDF: // global
           HpAlloc = 40;
           goto cdmDC;
       cdmDC: // global
           R1 = _sdmev::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmDE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdmev::P64;
           _sdmen::P64 = P64[_sdmev::P64 + 16];
           _sdmeq::P64 = P64[_sdmev::P64 + 24];
           _sdmes::P64 = P64[_sdmev::P64 + 32];
           I64[Hp - 32] = sat_sdmey_info;
           P64[Hp - 16] = _sdmen::P64;
           P64[Hp - 8] = _sdmeq::P64;
           P64[Hp] = _sdmes::P64;
           R3 = Hp - 32;
           R2 = lvl4_rdm9S_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdmeJ_entry() //  [R1]
         { info_tbl: [(cdmEp,
                       label: sat_sdmeJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmEp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdmEq; else goto cdmEr;
       cdmEq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmEr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl_rdm9O_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdmeN_entry() //  [R1]
         { info_tbl: [(cdmEs,
                       label: sat_sdmeN_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmEs: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmEw; else goto cdmEx;
       cdmEw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmEx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdmEg_info;
           _sdmev::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdmev::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udmEE; else goto cdmEh;
       udmEE: // global
           call _cdmEg(R1) args: 0, res: 0, upd: 0;
       cdmEh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdmEg() //  [R1]
         { info_tbl: [(cdmEg,
                       label: block_cdmEg_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmEg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdmEA; else goto cdmEz;
       cdmEA: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdmEz: // global
           _sdmeI::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sdmeJ_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cdmEt_info;
           R4 = Hp - 16;
           R3 = _sdmeI::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _cdmEt() //  [R1, R2]
         { info_tbl: [(cdmEt,
                       label: block_cdmEt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmEt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdmED; else goto cdmEC;
       cdmED: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdmEC: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdmeO_entry() //  [R1]
         { info_tbl: [(cdmEF,
                       label: sat_sdmeO_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmEF: // global
           _sdmeO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdmEG; else goto cdmEH;
       cdmEH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmEJ; else goto cdmEI;
       cdmEJ: // global
           HpAlloc = 32;
           goto cdmEG;
       cdmEG: // global
           R1 = _sdmeO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmEI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdmeO::P64;
           _sdmev::P64 = P64[_sdmeO::P64 + 16];
           _sdmeE::P64 = P64[_sdmeO::P64 + 24];
           I64[Hp - 24] = sat_sdmeN_info;
           P64[Hp - 8] = _sdmev::P64;
           P64[Hp] = _sdmeE::P64;
           R3 = Hp - 24;
           R2 = lvl1_rdm9P_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdmeS_entry() //  [R1]
         { info_tbl: [(cdmEK,
                       label: sat_sdmeS_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmEK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdmEO; else goto cdmEP;
       cdmEO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmEP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdmE3_info;
           _sdmev::P64 = P64[R1 + 16];
           _sdmeE::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sdmev::P64;
           P64[Sp - 24] = _sdmeE::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udmEW; else goto cdmE4;
       udmEW: // global
           call _cdmE3(R1) args: 0, res: 0, upd: 0;
       cdmE4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdmE3() //  [R1]
         { info_tbl: [(cdmE3,
                       label: block_cdmE3_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmE3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmES; else goto cdmER;
       cdmES: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdmER: // global
           _sdmeG::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_sdmeO_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cdmEL_info;
           R4 = Hp - 24;
           R3 = _sdmeG::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _cdmEL() //  [R1, R2]
         { info_tbl: [(cdmEL,
                       label: block_cdmEL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmEL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdmEV; else goto cdmEU;
       cdmEV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdmEU: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdmeT_entry() //  [R1]
         { info_tbl: [(cdmEX,
                       label: sat_sdmeT_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmEX: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmF1; else goto cdmF0;
       cdmF1: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmF0: // global
           _sdmev::P64 = P64[R1 + 16];
           _sdmeD::P64 = P64[R1 + 24];
           _sdmeE::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdmeS_info;
           P64[Hp - 16] = _sdmev::P64;
           P64[Hp - 8] = _sdmeD::P64;
           P64[Hp] = _sdmeE::P64;
           R3 = Hp - 32;
           R2 = lvl2_rdm9Q_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdmeU_entry() //  [R1]
         { info_tbl: [(cdmF2,
                       label: sat_sdmeU_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmF2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmF3; else goto cdmF4;
       cdmF3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmF4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdmDQ_info;
           _sdmev::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdmev::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udmF8; else goto cdmDR;
       udmF8: // global
           call _cdmDQ(R1) args: 0, res: 0, upd: 0;
       cdmDR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdmDQ() //  [R1]
         { info_tbl: [(cdmDQ,
                       label: block_cdmDQ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmDQ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmF7; else goto cdmF6;
       cdmF7: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdmF6: // global
           _sdmeC::P64 = P64[R1 + 7];
           _sdmeD::P64 = P64[R1 + 15];
           _sdmeE::P64 = P64[R1 + 23];
           I64[Hp - 32] = sat_sdmeT_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _sdmeD::P64;
           P64[Hp] = _sdmeE::P64;
           R3 = Hp - 32;
           R2 = _sdmeC::P64;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdmeV_entry() //  [R1]
         { info_tbl: [(cdmFd,
                       label: sat_sdmeV_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmFd: // global
           _sdmeV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdmFe; else goto cdmFf;
       cdmFf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmFh; else goto cdmFg;
       cdmFh: // global
           HpAlloc = 40;
           goto cdmFe;
       cdmFe: // global
           R1 = _sdmeV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmFg: // global
           _sdmen::P64 = P64[_sdmeV::P64 + 16];
           _sdmeq::P64 = P64[_sdmeV::P64 + 24];
           _sdmes::P64 = P64[_sdmeV::P64 + 32];
           _sdmeu::P64 = P64[_sdmeV::P64 + 40];
           I64[Hp - 32] = karg_sdmev_info;
           P64[Hp - 16] = _sdmen::P64;
           P64[Hp - 8] = _sdmeq::P64;
           P64[Hp] = _sdmes::P64;
           I64[Sp - 16] = block_cdmDG_info;
           R1 = _sdmeu::P64;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udmFn; else goto cdmDH;
       udmFn: // global
           call _cdmDG(R1) args: 0, res: 0, upd: 0;
       cdmDH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmDG() //  [R1]
         { info_tbl: [(cdmDG,
                       label: block_cdmDG_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmDG: // global
           _cdmDg::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdmFa; else goto cdmFb;
       cdmFa: // global
           R1 = _cdmDg::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdmFb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmFm; else goto cdmFl;
       cdmFm: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmFl: // global
           _sdmeA::P64 = P64[R1 + 6];
           I64[Hp - 24] = sat_sdmeU_info;
           P64[Hp - 8] = _cdmDg::P64;
           P64[Hp] = _sdmeA::P64;
           R3 = Hp - 24;
           R2 = lvl3_rdm9R_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdmeW_entry() //  [R1]
         { info_tbl: [(cdmFo,
                       label: sat_sdmeW_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmFo: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdmFp; else goto cdmFq;
       cdmFp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmFq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdmD7_info;
           _sdmen::P64 = P64[R1 + 16];
           _sdmeq::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sdmen::P64;
           P64[Sp - 24] = _sdmeq::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udmFu; else goto cdmD8;
       udmFu: // global
           call _cdmD7(R1) args: 0, res: 0, upd: 0;
       cdmD8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdmD7() //  [R1]
         { info_tbl: [(cdmD7,
                       label: block_cdmD7_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmD7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdmFt; else goto cdmFs;
       cdmFt: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdmFs: // global
           _sdmes::P64 = P64[R1 + 7];
           _sdmet::P64 = P64[R1 + 15];
           _sdmeu::P64 = P64[R1 + 23];
           I64[Hp - 40] = sat_sdmeV_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _sdmes::P64;
           P64[Hp] = _sdmeu::P64;
           R3 = Hp - 40;
           R2 = _sdmet::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ExecutionStack.Internal.showStackFrames_go_entry() //  [R2, R3]
         { info_tbl: [(cdmFz,
                       label: GHC.ExecutionStack.Internal.showStackFrames_go_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmFz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdmFA; else goto cdmFB;
       cdmFA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.showStackFrames_go_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmFB: // global
           I64[Sp - 16] = block_cdmCX_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udmFH; else goto cdmCY;
       udmFH: // global
           call _cdmCX(R1) args: 0, res: 0, upd: 0;
       cdmCY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmCX() //  [R1]
         { info_tbl: [(cdmCX,
                       label: block_cdmCX_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmCX: // global
           _sdmen::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdmFw; else goto cdmFx;
       cdmFw: // global
           R1 = _sdmen::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdmFx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmFG; else goto cdmFF;
       cdmFG: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmFF: // global
           _sdmep::P64 = P64[R1 + 6];
           _sdmeq::P64 = P64[R1 + 14];
           I64[Hp - 32] = sat_sdmeW_info;
           P64[Hp - 16] = _sdmen::P64;
           P64[Hp - 8] = _sdmep::P64;
           P64[Hp] = _sdmeq::P64;
           R3 = Hp - 32;
           R2 = lvl5_rdm9T_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.483484717 UTC

[section ""data" . GHC.ExecutionStack.Internal.showStackFrames_closure" {
     GHC.ExecutionStack.Internal.showStackFrames_closure:
         const GHC.ExecutionStack.Internal.showStackFrames_info;
 },
 sat_sdmeZ_entry() //  [R1]
         { info_tbl: [(cdmFQ,
                       label: sat_sdmeZ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmFQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdmFR; else goto cdmFS;
       cdmFR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmFS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ExecutionStack.Internal.showStackFrames_go_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ExecutionStack.Internal.showStackFrames_entry() //  [R2, R3]
         { info_tbl: [(cdmFT,
                       label: GHC.ExecutionStack.Internal.showStackFrames_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmFT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmFX; else goto cdmFW;
       cdmFX: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.showStackFrames_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmFW: // global
           I64[Hp - 24] = sat_sdmeZ_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = GHC.ExecutionStack.Internal.showStackFrames1_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.484981703 UTC

[section ""data" . GHC.ExecutionStack.Internal.Chunk_closure" {
     GHC.ExecutionStack.Internal.Chunk_closure:
         const GHC.ExecutionStack.Internal.Chunk_info;
 },
 GHC.ExecutionStack.Internal.Chunk_entry() //  [R2, R3, R4]
         { info_tbl: [(cdmG3,
                       label: GHC.ExecutionStack.Internal.Chunk_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 16} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmG3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmG7; else goto cdmG6;
       cdmG7: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.Chunk_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmG6: // global
           I64[Hp - 24] = GHC.ExecutionStack.Internal.Chunk_con_info;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.48670359 UTC

[section ""data" . GHC.ExecutionStack.Internal.Location_closure" {
     GHC.ExecutionStack.Internal.Location_closure:
         const GHC.ExecutionStack.Internal.Location_info;
 },
 GHC.ExecutionStack.Internal.Location_entry() //  [R2, R3, R4]
         { info_tbl: [(cdmGd,
                       label: GHC.ExecutionStack.Internal.Location_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmGd: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmGh; else goto cdmGg;
       cdmGh: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.Location_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmGg: // global
           I64[Hp - 24] = GHC.ExecutionStack.Internal.Location_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.488503768 UTC

[section ""data" . GHC.ExecutionStack.Internal.SrcLoc_closure" {
     GHC.ExecutionStack.Internal.SrcLoc_closure:
         const GHC.ExecutionStack.Internal.SrcLoc_info;
 },
 GHC.ExecutionStack.Internal.SrcLoc_entry() //  [R2, R3, R4]
         { info_tbl: [(cdmGn,
                       label: GHC.ExecutionStack.Internal.SrcLoc_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmGn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmGr; else goto cdmGq;
       cdmGr: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.SrcLoc_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmGq: // global
           I64[Hp - 24] = GHC.ExecutionStack.Internal.SrcLoc_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.490040181 UTC

[GHC.ExecutionStack.Internal.Chunk_con_entry() //  [R1]
         { info_tbl: [(cdmGs,
                       label: GHC.ExecutionStack.Internal.Chunk_con_info
                       rep:HeapRep 3 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108,46,67,104,117,110,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmGs: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.491203102 UTC

[GHC.ExecutionStack.Internal.Location_con_entry() //  [R1]
         { info_tbl: [(cdmGu,
                       label: GHC.ExecutionStack.Internal.Location_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108,46,76,111,99,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmGu: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.492047138 UTC

[GHC.ExecutionStack.Internal.SrcLoc_con_entry() //  [R1]
         { info_tbl: [(cdmGw,
                       label: GHC.ExecutionStack.Internal.SrcLoc_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108,46,83,114,99,76,111,99]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmGw: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.49279781 UTC

[section ""relreadonly" . Sdmj7_srt" {
     Sdmj7_srt:
         const GHC.ForeignPtr.$winsertCFinalizer_closure;
         const GHC.ExecutionStack.Internal.collectStackTrace1_closure;
         const GHC.IO.Encoding.getForeignEncoding_closure;
         const GHC.Foreign.$wpeekCString_closure;
         const GHC.ExecutionStack.Internal.stackFrames_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.493759515 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:08:32.495660676 UTC

[section ""data" . GHC.ExecutionStack.Internal.$WChunk_closure" {
     GHC.ExecutionStack.Internal.$WChunk_closure:
         const GHC.ExecutionStack.Internal.$WChunk_info;
 },
 GHC.ExecutionStack.Internal.$WChunk_entry() //  [R2, R3, R4]
         { info_tbl: [(cdmGF,
                       label: GHC.ExecutionStack.Internal.$WChunk_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmGF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdmGT; else goto cdmGU;
       cdmGT: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.$WChunk_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmGU: // global
           I64[Sp - 24] = block_cdmGC_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udmH1; else goto cdmGD;
       udmH1: // global
           call _cdmGC(R1) args: 0, res: 0, upd: 0;
       cdmGD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmGC() //  [R1]
         { info_tbl: [(cdmGC,
                       label: block_cdmGC_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmGC: // global
           I64[Sp] = block_cdmGI_info;
           _sdm9Z::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sdm9Z::I64;
           if (R1 & 7 != 0) goto udmH0; else goto cdmGJ;
       udmH0: // global
           call _cdmGI(R1) args: 0, res: 0, upd: 0;
       cdmGJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmGI() //  [R1]
         { info_tbl: [(cdmGI,
                       label: block_cdmGI_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmGI: // global
           I64[Sp] = block_cdmGN_info;
           _sdma1::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sdma1::I64;
           if (R1 & 7 != 0) goto udmH2; else goto cdmGO;
       udmH2: // global
           call _cdmGN(R1) args: 0, res: 0, upd: 0;
       cdmGO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmGN() //  [R1]
         { info_tbl: [(cdmGN,
                       label: block_cdmGN_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmGN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmGZ; else goto cdmGY;
       cdmGZ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmGY: // global
           _sdma3::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.ExecutionStack.Internal.Chunk_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _sdma3::I64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.512748705 UTC

[section ""data" . GHC.ExecutionStack.Internal.sourceColumn_closure" {
     GHC.ExecutionStack.Internal.sourceColumn_closure:
         const GHC.ExecutionStack.Internal.sourceColumn_info;
 },
 GHC.ExecutionStack.Internal.sourceColumn_entry() //  [R2]
         { info_tbl: [(cdmHu,
                       label: GHC.ExecutionStack.Internal.sourceColumn_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmHu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmHv; else goto cdmHw;
       cdmHv: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.sourceColumn_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmHw: // global
           I64[Sp - 8] = block_cdmHr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmHA; else goto cdmHs;
       udmHA: // global
           call _cdmHr(R1) args: 0, res: 0, upd: 0;
       cdmHs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmHr() //  [R1]
         { info_tbl: [(cdmHr,
                       label: block_cdmHr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmHr: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.521394071 UTC

[section ""data" . GHC.ExecutionStack.Internal.sourceLine_closure" {
     GHC.ExecutionStack.Internal.sourceLine_closure:
         const GHC.ExecutionStack.Internal.sourceLine_info;
 },
 GHC.ExecutionStack.Internal.sourceLine_entry() //  [R2]
         { info_tbl: [(cdmHT,
                       label: GHC.ExecutionStack.Internal.sourceLine_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmHT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmHU; else goto cdmHV;
       cdmHU: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.sourceLine_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmHV: // global
           I64[Sp - 8] = block_cdmHQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmHZ; else goto cdmHR;
       udmHZ: // global
           call _cdmHQ(R1) args: 0, res: 0, upd: 0;
       cdmHR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmHQ() //  [R1]
         { info_tbl: [(cdmHQ,
                       label: block_cdmHQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmHQ: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.529077724 UTC

[section ""data" . GHC.ExecutionStack.Internal.sourceFile_closure" {
     GHC.ExecutionStack.Internal.sourceFile_closure:
         const GHC.ExecutionStack.Internal.sourceFile_info;
 },
 GHC.ExecutionStack.Internal.sourceFile_entry() //  [R2]
         { info_tbl: [(cdmIi,
                       label: GHC.ExecutionStack.Internal.sourceFile_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmIi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmIj; else goto cdmIk;
       cdmIj: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.sourceFile_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmIk: // global
           I64[Sp - 8] = block_cdmIf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmIo; else goto cdmIg;
       udmIo: // global
           call _cdmIf(R1) args: 0, res: 0, upd: 0;
       cdmIg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmIf() //  [R1]
         { info_tbl: [(cdmIf,
                       label: block_cdmIf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmIf: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.538248303 UTC

[section ""data" . GHC.ExecutionStack.Internal.srcLoc_closure" {
     GHC.ExecutionStack.Internal.srcLoc_closure:
         const GHC.ExecutionStack.Internal.srcLoc_info;
 },
 GHC.ExecutionStack.Internal.srcLoc_entry() //  [R2]
         { info_tbl: [(cdmIH,
                       label: GHC.ExecutionStack.Internal.srcLoc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmIH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmII; else goto cdmIJ;
       cdmII: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.srcLoc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmIJ: // global
           I64[Sp - 8] = block_cdmIE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmIN; else goto cdmIF;
       udmIN: // global
           call _cdmIE(R1) args: 0, res: 0, upd: 0;
       cdmIF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmIE() //  [R1]
         { info_tbl: [(cdmIE,
                       label: block_cdmIE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmIE: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.547074314 UTC

[section ""data" . GHC.ExecutionStack.Internal.functionName_closure" {
     GHC.ExecutionStack.Internal.functionName_closure:
         const GHC.ExecutionStack.Internal.functionName_info;
 },
 GHC.ExecutionStack.Internal.functionName_entry() //  [R2]
         { info_tbl: [(cdmJ6,
                       label: GHC.ExecutionStack.Internal.functionName_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmJ6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmJ7; else goto cdmJ8;
       cdmJ7: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.functionName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmJ8: // global
           I64[Sp - 8] = block_cdmJ3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmJc; else goto cdmJ4;
       udmJc: // global
           call _cdmJ3(R1) args: 0, res: 0, upd: 0;
       cdmJ4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmJ3() //  [R1]
         { info_tbl: [(cdmJ3,
                       label: block_cdmJ3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmJ3: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.558025265 UTC

[section ""data" . GHC.ExecutionStack.Internal.objectName_closure" {
     GHC.ExecutionStack.Internal.objectName_closure:
         const GHC.ExecutionStack.Internal.objectName_info;
 },
 GHC.ExecutionStack.Internal.objectName_entry() //  [R2]
         { info_tbl: [(cdmJv,
                       label: GHC.ExecutionStack.Internal.objectName_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmJv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmJw; else goto cdmJx;
       cdmJw: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.objectName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmJx: // global
           I64[Sp - 8] = block_cdmJs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmJB; else goto cdmJt;
       udmJB: // global
           call _cdmJs(R1) args: 0, res: 0, upd: 0;
       cdmJt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmJs() //  [R1]
         { info_tbl: [(cdmJs,
                       label: block_cdmJs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmJs: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.566427428 UTC

[section ""data" . GHC.ExecutionStack.Internal.chunkFirstFrame_closure" {
     GHC.ExecutionStack.Internal.chunkFirstFrame_closure:
         const GHC.ExecutionStack.Internal.chunkFirstFrame_info;
 },
 GHC.ExecutionStack.Internal.chunkFirstFrame_entry() //  [R2]
         { info_tbl: [(cdmJU,
                       label: GHC.ExecutionStack.Internal.chunkFirstFrame_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmJU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmJY; else goto cdmJZ;
       cdmJY: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.chunkFirstFrame_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmJZ: // global
           I64[Sp - 8] = block_cdmJR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmK3; else goto cdmJS;
       udmK3: // global
           call _cdmJR(R1) args: 0, res: 0, upd: 0;
       cdmJS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmJR() //  [R1]
         { info_tbl: [(cdmJR,
                       label: block_cdmJR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmJR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmK2; else goto cdmK1;
       cdmK2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmK1: // global
           _sdmaC::I64 = I64[R1 + 23];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sdmaC::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.572759278 UTC

[section ""data" . GHC.ExecutionStack.Internal.chunkNext_closure" {
     GHC.ExecutionStack.Internal.chunkNext_closure:
         const GHC.ExecutionStack.Internal.chunkNext_info;
 },
 GHC.ExecutionStack.Internal.chunkNext_entry() //  [R2]
         { info_tbl: [(cdmKl,
                       label: GHC.ExecutionStack.Internal.chunkNext_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmKl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmKp; else goto cdmKq;
       cdmKp: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.chunkNext_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmKq: // global
           I64[Sp - 8] = block_cdmKi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmKu; else goto cdmKj;
       udmKu: // global
           call _cdmKi(R1) args: 0, res: 0, upd: 0;
       cdmKj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmKi() //  [R1]
         { info_tbl: [(cdmKi,
                       label: block_cdmKi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmKi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmKt; else goto cdmKs;
       cdmKt: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmKs: // global
           _sdmaG::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sdmaG::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.579379772 UTC

[section ""data" . GHC.ExecutionStack.Internal.chunkFrames_closure" {
     GHC.ExecutionStack.Internal.chunkFrames_closure:
         const GHC.ExecutionStack.Internal.chunkFrames_info;
 },
 GHC.ExecutionStack.Internal.chunkFrames_entry() //  [R2]
         { info_tbl: [(cdmKM,
                       label: GHC.ExecutionStack.Internal.chunkFrames_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmKM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdmKQ; else goto cdmKR;
       cdmKQ: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.chunkFrames_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmKR: // global
           I64[Sp - 8] = block_cdmKJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmKV; else goto cdmKK;
       udmKV: // global
           call _cdmKJ(R1) args: 0, res: 0, upd: 0;
       cdmKK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmKJ() //  [R1]
         { info_tbl: [(cdmKJ,
                       label: block_cdmKJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmKJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmKU; else goto cdmKT;
       cdmKU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmKT: // global
           _sdmaK::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _sdmaK::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.586117298 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$trModule4_bytes" {
     GHC.ExecutionStack.Internal.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.587969272 UTC

[section ""data" . GHC.ExecutionStack.Internal.$trModule3_closure" {
     GHC.ExecutionStack.Internal.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.589833458 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$trModule2_bytes" {
     GHC.ExecutionStack.Internal.$trModule2_bytes:
         I8[] [71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.591817259 UTC

[section ""data" . GHC.ExecutionStack.Internal.$trModule1_closure" {
     GHC.ExecutionStack.Internal.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.594775618 UTC

[section ""data" . GHC.ExecutionStack.Internal.$trModule_closure" {
     GHC.ExecutionStack.Internal.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ExecutionStack.Internal.$trModule3_closure+1;
         const GHC.ExecutionStack.Internal.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.596792394 UTC

[section ""data" . $krep_rdm9l_closure" {
     $krep_rdm9l_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.598737306 UTC

[section ""data" . $krep1_rdm9m_closure" {
     $krep1_rdm9m_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.600495671 UTC

[section ""data" . $krep2_rdm9n_closure" {
     $krep2_rdm9n_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.605071643 UTC

[section ""data" . $krep3_rdm9o_closure" {
     $krep3_rdm9o_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWord_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.607486386 UTC

[section ""data" . $krep4_rdm9p_closure" {
     $krep4_rdm9p_closure:
         const :_con_info;
         const $krep1_rdm9m_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.610254066 UTC

[section ""data" . $krep5_rdm9q_closure" {
     $krep5_rdm9q_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep4_rdm9p_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.612426825 UTC

[section ""data" . $krep6_rdm9r_closure" {
     $krep6_rdm9r_closure:
         const :_con_info;
         const $krep2_rdm9n_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.614730616 UTC

[section ""data" . $krep7_rdm9s_closure" {
     $krep7_rdm9s_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep6_rdm9r_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.61694362 UTC

[section ""data" . $krep8_rdm9t_closure" {
     $krep8_rdm9t_closure:
         const :_con_info;
         const $krep7_rdm9s_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.619291741 UTC

[section ""data" . $krep9_rdm9u_closure" {
     $krep9_rdm9u_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep8_rdm9t_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.621426691 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcSrcLoc2_bytes" {
     GHC.ExecutionStack.Internal.$tcSrcLoc2_bytes:
         I8[] [83,114,99,76,111,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.623546387 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSrcLoc1_closure" {
     GHC.ExecutionStack.Internal.$tcSrcLoc1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcSrcLoc2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.626031443 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSrcLoc_closure" {
     GHC.ExecutionStack.Internal.$tcSrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcSrcLoc1_closure+1;
         const GHC.Types.krep$*_closure;
         const 8235067574311587288;
         const 11106182367596705879;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.628385433 UTC

[section ""data" . $krep10_rdm9v_closure" {
     $krep10_rdm9v_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcSrcLoc_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.631255893 UTC

[section ""data" . $krep11_rdm9w_closure" {
     $krep11_rdm9w_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rdm9l_closure+1;
         const $krep10_rdm9v_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.633426604 UTC

[section ""data" . $krep12_rdm9x_closure" {
     $krep12_rdm9x_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rdm9l_closure+1;
         const $krep11_rdm9w_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.635583459 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'SrcLoc1_closure" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rdm9q_closure+1;
         const $krep12_rdm9x_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.637892469 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'SrcLoc3_bytes" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc3_bytes:
         I8[] [39,83,114,99,76,111,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.639670769 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'SrcLoc2_closure" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'SrcLoc3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.64160159 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'SrcLoc_closure" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'SrcLoc2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'SrcLoc1_closure+4;
         const 11095721805058681290;
         const 15266549541595723377;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.643544253 UTC

[section ""data" . $krep13_rdm9y_closure" {
     $krep13_rdm9y_closure:
         const :_con_info;
         const $krep10_rdm9v_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.645435521 UTC

[section ""data" . $krep14_rdm9z_closure" {
     $krep14_rdm9z_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep13_rdm9y_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.647258938 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcLocation2_bytes" {
     GHC.ExecutionStack.Internal.$tcLocation2_bytes:
         I8[] [76,111,99,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.649079976 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcLocation1_closure" {
     GHC.ExecutionStack.Internal.$tcLocation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcLocation2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.650941976 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcLocation_closure" {
     GHC.ExecutionStack.Internal.$tcLocation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcLocation1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11638758687983955592;
         const 6940671496618727587;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.652862154 UTC

[section ""data" . $krep15_rdm9A_closure" {
     $krep15_rdm9A_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcLocation_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.654877436 UTC

[section ""data" . $krep16_rdm9B_closure" {
     $krep16_rdm9B_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_rdm9z_closure+1;
         const $krep15_rdm9A_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.656721611 UTC

[section ""data" . $krep17_rdm9C_closure" {
     $krep17_rdm9C_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rdm9q_closure+1;
         const $krep16_rdm9B_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.659260435 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Location1_closure" {
     GHC.ExecutionStack.Internal.$tc'Location1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rdm9q_closure+1;
         const $krep17_rdm9C_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.661052442 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'Location3_bytes" {
     GHC.ExecutionStack.Internal.$tc'Location3_bytes:
         I8[] [39,76,111,99,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.662776047 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Location2_closure" {
     GHC.ExecutionStack.Internal.$tc'Location2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'Location3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.664579298 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Location_closure" {
     GHC.ExecutionStack.Internal.$tc'Location_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Location2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Location1_closure+4;
         const 12834480788254682335;
         const 10467761170474242090;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.667005317 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcStackTrace2_bytes" {
     GHC.ExecutionStack.Internal.$tcStackTrace2_bytes:
         I8[] [83,116,97,99,107,84,114,97,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.66865587 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcStackTrace1_closure" {
     GHC.ExecutionStack.Internal.$tcStackTrace1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcStackTrace2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.670417442 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcStackTrace_closure" {
     GHC.ExecutionStack.Internal.$tcStackTrace_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcStackTrace1_closure+1;
         const GHC.Types.krep$*_closure;
         const 156026104294967557;
         const 17600277320898304892;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.672236411 UTC

[section ""data" . $krep18_rdm9D_closure" {
     $krep18_rdm9D_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcStackTrace_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.674165421 UTC

[section ""data" . $krep19_rdm9E_closure" {
     $krep19_rdm9E_closure:
         const :_con_info;
         const $krep18_rdm9D_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.676001556 UTC

[section ""data" . $krep20_rdm9F_closure" {
     $krep20_rdm9F_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure;
         const $krep19_rdm9E_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.677869298 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'StackTrace1_closure" {
     GHC.ExecutionStack.Internal.$tc'StackTrace1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep20_rdm9F_closure+1;
         const $krep18_rdm9D_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.679760403 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'StackTrace3_bytes" {
     GHC.ExecutionStack.Internal.$tc'StackTrace3_bytes:
         I8[] [39,83,116,97,99,107,84,114,97,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.681756179 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'StackTrace2_closure" {
     GHC.ExecutionStack.Internal.$tc'StackTrace2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'StackTrace3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.683490971 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'StackTrace_closure" {
     GHC.ExecutionStack.Internal.$tc'StackTrace_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'StackTrace2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'StackTrace1_closure+4;
         const 8151790971853785814;
         const 7394195233358636505;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.686126337 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcChunk2_bytes" {
     GHC.ExecutionStack.Internal.$tcChunk2_bytes:
         I8[] [67,104,117,110,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.687948445 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcChunk1_closure" {
     GHC.ExecutionStack.Internal.$tcChunk1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcChunk2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.689825689 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcChunk_closure" {
     GHC.ExecutionStack.Internal.$tcChunk_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcChunk1_closure+1;
         const GHC.Types.krep$*_closure;
         const 1813577326074213410;
         const 3256155729866972563;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.691779169 UTC

[section ""data" . $krep21_rdm9G_closure" {
     $krep21_rdm9G_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcChunk_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.693604484 UTC

[section ""data" . $krep22_rdm9H_closure" {
     $krep22_rdm9H_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_rdm9u_closure+1;
         const $krep21_rdm9G_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.695432072 UTC

[section ""data" . $krep23_rdm9I_closure" {
     $krep23_rdm9I_closure:
         const :_con_info;
         const $krep21_rdm9G_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.69717983 UTC

[section ""data" . $krep24_rdm9J_closure" {
     $krep24_rdm9J_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep23_rdm9I_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.698976554 UTC

[section ""data" . $krep25_rdm9K_closure" {
     $krep25_rdm9K_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep24_rdm9J_closure+1;
         const $krep22_rdm9H_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.700690588 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Chunk1_closure" {
     GHC.ExecutionStack.Internal.$tc'Chunk1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rdm9o_closure+1;
         const $krep25_rdm9K_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.702591722 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'Chunk3_bytes" {
     GHC.ExecutionStack.Internal.$tc'Chunk3_bytes:
         I8[] [39,67,104,117,110,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.704394565 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Chunk2_closure" {
     GHC.ExecutionStack.Internal.$tc'Chunk2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'Chunk3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.706263698 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Chunk_closure" {
     GHC.ExecutionStack.Internal.$tc'Chunk_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Chunk2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Chunk1_closure+4;
         const 16594405016023301875;
         const 5381929581673016432;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.708262212 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcSession2_bytes" {
     GHC.ExecutionStack.Internal.$tcSession2_bytes:
         I8[] [83,101,115,115,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.710119349 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSession1_closure" {
     GHC.ExecutionStack.Internal.$tcSession1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcSession2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.712691928 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSession_closure" {
     GHC.ExecutionStack.Internal.$tcSession_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcSession1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11168382530978838993;
         const 7144139957235519240;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.715017365 UTC

[section ""data" . libdw_pool_clear_rdm9L_closure" {
     libdw_pool_clear_rdm9L_closure:
         const libdw_pool_clear_rdm9L_info;
 },
 libdw_pool_clear_rdm9L_entry() //  []
         { info_tbl: [(cdmMb,
                       label: libdw_pool_clear_rdm9L_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmMb: // global
           call "ccall" arg hints:  []  result hints:  [] libdwPoolClear();
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.719224364 UTC

[section ""data" . GHC.ExecutionStack.Internal.invalidateDebugCache_closure" {
     GHC.ExecutionStack.Internal.invalidateDebugCache_closure:
         const GHC.ExecutionStack.Internal.invalidateDebugCache_info;
 },
 GHC.ExecutionStack.Internal.invalidateDebugCache_entry() //  []
         { info_tbl: [(cdmMn,
                       label: GHC.ExecutionStack.Internal.invalidateDebugCache_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmMn: // global
           call libdw_pool_clear_rdm9L_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.723298799 UTC

[section ""data" . GHC.ExecutionStack.Internal.stackDepth_closure" {
     GHC.ExecutionStack.Internal.stackDepth_closure:
         const GHC.ExecutionStack.Internal.stackDepth_info;
 },
 GHC.ExecutionStack.Internal.stackDepth_entry() //  [R2]
         { info_tbl: [(cdmMG,
                       label: GHC.ExecutionStack.Internal.stackDepth_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmMG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdmMH; else goto cdmMI;
       cdmMH: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.stackDepth_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmMI: // global
           I64[Sp - 16] = block_cdmMy_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _cdmMy() //  []
         { info_tbl: [(cdmMy,
                       label: block_cdmMy_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmMy: // global
           _sdmaR::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdmMA_info;
           R1 = _sdmaR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udmMV; else goto cdmMB;
       udmMV: // global
           call _cdmMA(R1) args: 0, res: 0, upd: 0;
       cdmMB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmMA() //  [R1]
         { info_tbl: [(cdmMA,
                       label: block_cdmMA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmMA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmMO; else goto cdmMN;
       cdmMO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmMN: // global
           _sdmaY::I64 = I64[I64[R1 + 15]];
           call MO_Touch(P64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sdmaY::I64;
           R1 = (Hp + -7) & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.7323684 UTC

[section ""data" . GHC.ExecutionStack.Internal.collectStackTrace1_closure" {
     GHC.ExecutionStack.Internal.collectStackTrace1_closure:
         const GHC.ExecutionStack.Internal.collectStackTrace1_info;
         const 0;
 },
 GHC.ExecutionStack.Internal.collectStackTrace1_entry() //  []
         { info_tbl: [(cdmNl,
                       label: GHC.ExecutionStack.Internal.collectStackTrace1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmNl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmNm; else goto cdmNn;
       cdmNm: // global
           R1 = GHC.ExecutionStack.Internal.collectStackTrace1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdmNn: // global
           (_sdmb9::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] libdwPoolTake();
           if (_sdmb9::I64 == 0) goto udmNT; else goto cdmNj;
       udmNT: // global
           call _cdmNk() args: 0, res: 0, upd: 0;
       cdmNj: // global
           I64[Sp - 16] = block_cdmNp_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 8] = _sdmb9::I64;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmNp() //  [R1]
         { info_tbl: [(cdmNp,
                       label: block_cdmNp_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmNp: // global
           I64[Sp - 8] = block_cdmNr_info;
           R6 = I64[Sp + 8];
           R5 = 0;
           R4 = 0;
           R3 = libdwPoolRelease;
           R2 = R1;
           P64[Sp - 16] = GHC.Tuple.()_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 _cdmNr() //  [R1]
         { info_tbl: [(cdmNr,
                       label: block_cdmNr_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmNr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmNw; else goto cdmNv;
       cdmNw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmNv: // global
           _sdmbd::P64 = P64[Sp + 8];
           (_sdmbk::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] libdwGetBacktrace(I64[Sp + 16]);
           I64[Hp - 8] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp] = _sdmbd::P64;
           call MO_Touch(Hp - 7);
           if (_sdmbk::I64 == 0) goto udmNS; else goto cdmNM;
       udmNS: // global
           Sp = Sp + 24;
           call _cdmNk() args: 0, res: 0, upd: 0;
       cdmNM: // global
           I64[Sp + 8] = block_cdmNE_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp + 16] = _sdmbk::I64;
           Sp = Sp + 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmNk() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmNk: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cdmNE() //  [R1]
         { info_tbl: [(cdmNE,
                       label: block_cdmNE_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmNE: // global
           I64[Sp - 8] = block_cdmNG_info;
           R6 = I64[Sp + 8];
           R5 = 0;
           R4 = 0;
           R3 = backtraceFree;
           R2 = R1;
           P64[Sp - 16] = GHC.Tuple.()_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 _cdmNG() //  [R1]
         { info_tbl: [(cdmNG,
                       label: block_cdmNG_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmNG: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdmNQ; else goto cdmNP;
       cdmNQ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmNP: // global
           I64[Hp - 48] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           I64[Hp - 32] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 24] = Hp - 47;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.74659884 UTC

[section ""data" . GHC.ExecutionStack.Internal.collectStackTrace_closure" {
     GHC.ExecutionStack.Internal.collectStackTrace_closure:
         const GHC.ExecutionStack.Internal.collectStackTrace_info;
         const 0;
 },
 GHC.ExecutionStack.Internal.collectStackTrace_entry() //  []
         { info_tbl: [(cdmOo,
                       label: GHC.ExecutionStack.Internal.collectStackTrace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmOo: // global
           call GHC.ExecutionStack.Internal.collectStackTrace1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.751185224 UTC

[section ""data" . $wgo_rdm9M_closure" {
     $wgo_rdm9M_closure:
         const $wgo_rdm9M_info;
 },
 $wgo_rdm9M_entry() //  [R2, R3]
         { info_tbl: [(cdmON,
                       label: $wgo_rdm9M_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 14} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmON: // global
           _sdmby::I64 = R3;
           _sdmbx::P64 = R2;
           goto cdmOw;
       cdmOw: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdmOR; else goto cdmOQ;
       cdmOR: // global
           HpAlloc = 56;
           R3 = _sdmby::I64;
           R2 = _sdmbx::P64;
           R1 = $wgo_rdm9M_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmOQ: // global
           if (_sdmby::I64 == 0) goto cdmOM; else goto cdmOL;
       cdmOM: // global
           Hp = Hp - 56;
           R1 = _sdmbx::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdmOL: // global
           _sdmbD::I64 = I64[_sdmby::I64];
           _sdmbH::I64 = I64[_sdmby::I64 + 8];
           I64[Hp - 48] = GHC.ExecutionStack.Internal.Chunk_con_info;
           I64[Hp - 40] = _sdmbD::I64;
           I64[Hp - 32] = _sdmbH::I64;
           I64[Hp - 24] = _sdmby::I64 + 16;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = _sdmbx::P64;
           _sdmby::I64 = _sdmbH::I64;
           _sdmbx::P64 = Hp - 14;
           goto cdmOw;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.762126924 UTC

[section ""data" . GHC.ExecutionStack.Internal.stackFrames_closure" {
     GHC.ExecutionStack.Internal.stackFrames_closure:
         const GHC.ExecutionStack.Internal.stackFrames_info;
         const 0;
 },
 sat_sdmcR_entry() //  [R1]
         { info_tbl: [(cdmQn,
                       label: sat_sdmcR_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmQn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmQq; else goto cdmQr;
       cdmQq: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdmQr: // global
           I64[Sp - 32] = block_cdmQj_info;
           P64[Sp - 24] = P64[R1 + 7];
           I64[Sp - 16] = I64[R1 + 15];
           I64[Sp - 8] = I64[R1 + 23];
           Sp = Sp - 32;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _cdmQj() //  []
         { info_tbl: [(cdmQj,
                       label: block_cdmQj_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmQj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmQu; else goto cdmQt;
       cdmQu: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdmQt: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 24] + 8;
           R3 = Hp - 7;
           R2 = I64[Sp + 16] - 1;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call $witerFrames_sdmck_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdmdr_entry() //  [R1]
         { info_tbl: [(cdmRc,
                       label: sat_sdmdr_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmRc: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmRf; else goto cdmRg;
       cdmRf: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdmRg: // global
           I64[Sp - 32] = block_cdmR8_info;
           P64[Sp - 24] = P64[R1 + 7];
           I64[Sp - 16] = I64[R1 + 15];
           I64[Sp - 8] = I64[R1 + 23];
           Sp = Sp - 32;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _cdmR8() //  []
         { info_tbl: [(cdmR8,
                       label: block_cdmR8_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmR8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmRj; else goto cdmRi;
       cdmRj: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdmRi: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 24] + 8;
           R3 = Hp - 7;
           R2 = I64[Sp + 16] - 1;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call $witerFrames_sdmck_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdmdD_entry() //  [R1]
         { info_tbl: [(cdmRy,
                       label: sat_sdmdD_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmRy: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdmRz; else goto cdmRA;
       cdmRz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmRA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdmRr_info;
           _sdmdf::I64 = I64[R1 + 24];
           _sdmdj::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           I64[Sp - 32] = _sdmdf::I64;
           I64[Sp - 24] = _sdmdj::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udmRT; else goto cdmRs;
       udmRT: // global
           call _cdmRr(R1) args: 0, res: 0, upd: 0;
       cdmRs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdmRr() //  [R1]
         { info_tbl: [(cdmRr,
                       label: block_cdmRr_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmRr: // global
           if (R1 & 7 == 1) goto cdmRv; else goto cdmRw;
       cdmRv: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdmRw: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdmRS; else goto cdmRR;
       cdmRS: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdmRR: // global
           I64[Hp - 72] = GHC.Types.I#_con_info;
           I64[Hp - 64] = I64[Sp + 16];
           I64[Hp - 56] = GHC.Types.I#_con_info;
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = GHC.ExecutionStack.Internal.SrcLoc_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = Hp - 55;
           P64[Hp - 16] = Hp - 71;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 $witerFrames_sdmck_entry() //  [R1, R2, R3]
         { info_tbl: [(cdmRX,
                       label: $witerFrames_sdmck_info
                       rep:HeapRep 2 ptrs { Fun {arity: 3 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmRX: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cdmRY; else goto cdmRZ;
       cdmRY: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmRZ: // global
           if (R2 == 0) goto cdmRW; else goto cdmRV;
       cdmRW: // global
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdmRV: // global
           I64[Sp - 40] = block_cdmPM_info;
           _sdmck::P64 = R1;
           _sdmc0::P64 = P64[R1 + 5];
           _sdmca::P64 = P64[R1 + 13];
           R1 = R3;
           P64[Sp - 32] = _sdmc0::P64;
           P64[Sp - 24] = _sdmca::P64;
           P64[Sp - 16] = _sdmck::P64;
           I64[Sp - 8] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udmT8; else goto cdmPN;
       udmT8: // global
           call _cdmPM(R1) args: 0, res: 0, upd: 0;
       cdmPN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmPM() //  [R1]
         { info_tbl: [(cdmPM,
                       label: block_cdmPM_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmPM: // global
           _sdmcq::I64 = I64[R1 + 7];
           _sdmct::I64 = I64[_sdmcq::I64];
           I64[Sp - 16] = block_cdmPR_info;
           R1 = 32;
           I64[Sp - 8] = _sdmct::I64;
           I64[Sp] = _sdmcq::I64;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmPR() //  [R1]
         { info_tbl: [(cdmPR,
                       label: block_cdmPR_info
                       rep:StackRep [True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmPR: // global
           I64[Sp] = block_cdmPT_info;
           _sdmcz::P64 = R1;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = _sdmcz::P64;
           if (R1 & 7 != 0) goto udmT3; else goto cdmPU;
       udmT3: // global
           call _cdmPT(R1) args: 0, res: 0, upd: 0;
       cdmPU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmPT() //  [R1]
         { info_tbl: [(cdmPT,
                       label: block_cdmPT_info
                       rep:StackRep [True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmPT: // global
           _sdmcC::P64 = P64[R1 + 7];
           _sdmcD::I64 = P64[Sp + 32] + 16;
           (_sdmcH::I64) = call "ccall" arg hints:  [PtrHint, PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] libdwLookupLocation(I64[R1 + 15], _sdmcD::I64, I64[Sp + 8]);
           call MO_Touch(_sdmcC::P64);
           _sdmcJ::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sdmcH::I64));
           if (_sdmcJ::I64 != 0) goto udmSU; else goto cdmS8;
       udmSU: // global
           I64[Sp + 8] = _sdmcJ::I64;
           Sp = Sp + 8;
           call _cdmQa() args: 0, res: 0, upd: 0;
       cdmS8: // global
           _sdmcU::I64 = I64[_sdmcD::I64];
           if (_sdmcU::I64 == 0) goto cdmST; else goto cdmSP;
       cdmST: // global
           I64[Sp + 8] = _sdmcD::I64;
           P64[Sp] = GHC.Types.[]_closure+1;
           call _sdmcV() args: 0, res: 0, upd: 0;
       cdmSP: // global
           I64[Sp - 8] = block_cdmSL_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp] = _sdmcU::I64;
           I64[Sp + 8] = _sdmcD::I64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmQa() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmQa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmS7; else goto cdmS6;
       cdmS7: // global
           HpAlloc = 32;
           _sdmcJ::I64 = I64[Sp];
           I64[Sp] = block_cdmQ9_info;
           R1 = _sdmcJ::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdmS6: // global
           _sdmc0::P64 = P64[Sp + 16];
           _sdmck::P64 = P64[Sp + 32];
           _sdmco::I64 = I64[Sp + 40];
           _sdmcq::I64 = I64[Sp + 8];
           call MO_Touch(P64[Sp + 24]);
           call MO_Touch(_sdmc0::P64);
           I64[Hp - 24] = sat_sdmcR_info;
           P64[Hp - 16] = _sdmck::P64;
           I64[Hp - 8] = _sdmco::I64;
           I64[Hp] = _sdmcq::I64;
           R2 = Hp - 23;
           Sp = Sp + 48;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _cdmQ9() //  [R1]
         { info_tbl: [(cdmQ9,
                       label: block_cdmQ9_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmQ9: // global
           I64[Sp] = R1;
           call _cdmQa() args: 0, res: 0, upd: 0;
     }
 },
 _cdmSL() //  [R1]
         { info_tbl: [(cdmSL,
                       label: block_cdmSL_info
                       rep:StackRep [True, True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmSL: // global
           _sdmcU::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdmSN_info;
           R3 = _sdmcU::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdmSN() //  [R1]
         { info_tbl: [(cdmSN,
                       label: block_cdmSN_info
                       rep:StackRep [True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmSN: // global
           P64[Sp] = R1;
           call _sdmcV() args: 0, res: 0, upd: 0;
     }
 },
 _sdmcV() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       sdmcV: // global
           _sdmd1::I64 = I64[I64[Sp + 8] + 8];
           if (_sdmd1::I64 == 0) goto cdmSH; else goto cdmSD;
       cdmSH: // global
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call _sdmd2() args: 0, res: 0, upd: 0;
       cdmSD: // global
           I64[Sp - 16] = block_cdmSz_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 8] = _sdmd1::I64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmSz() //  [R1]
         { info_tbl: [(cdmSz,
                       label: block_cdmSz_info
                       rep:StackRep [True, False, True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmSz: // global
           _sdmd1::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdmSB_info;
           R3 = _sdmd1::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdmSB() //  [R1]
         { info_tbl: [(cdmSB,
                       label: block_cdmSB_info
                       rep:StackRep [False, True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmSB: // global
           P64[Sp] = R1;
           call _sdmd2() args: 0, res: 0, upd: 0;
     }
 },
 _sdmd2() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       sdmd2: // global
           _sdmd8::I64 = I64[I64[Sp + 16] + 16];
           if (_sdmd8::I64 == 0) goto cdmSv; else goto cdmSr;
       cdmSv: // global
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call _cdmQT() args: 0, res: 0, upd: 0;
       cdmSr: // global
           I64[Sp - 16] = block_cdmSn_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 8] = _sdmd8::I64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmSn() //  [R1]
         { info_tbl: [(cdmSn,
                       label: block_cdmSn_info
                       rep:StackRep [True, False, False, True, True, False, False, False,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmSn: // global
           _sdmd8::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdmSp_info;
           R3 = _sdmd8::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdmSp() //  [R1]
         { info_tbl: [(cdmSp,
                       label: block_cdmSp_info
                       rep:StackRep [False, False, True, True, False, False, False,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmSp: // global
           P64[Sp] = R1;
           call _cdmQT() args: 0, res: 0, upd: 0;
     }
 },
 _cdmQT() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmQT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmSg; else goto cdmSf;
       cdmSg: // global
           HpAlloc = 32;
           _sdmdb::P64 = P64[Sp];
           I64[Sp] = block_cdmQS_info;
           R1 = _sdmdb::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmSf: // global
           _sdmc0::P64 = P64[Sp + 40];
           _sdmck::P64 = P64[Sp + 56];
           _sdmco::I64 = I64[Sp + 64];
           _sdmcq::I64 = I64[Sp + 32];
           _sdmcD::I64 = I64[Sp + 24];
           _sdmdf::I64 = %MO_UU_Conv_W32_W64(I32[_sdmcD::I64 + 24]);
           _sdmdj::I64 = %MO_UU_Conv_W32_W64(I32[_sdmcD::I64 + 28]);
           call MO_Touch(P64[Sp + 48]);
           call MO_Touch(_sdmc0::P64);
           I64[Hp - 24] = sat_sdmdr_info;
           P64[Hp - 16] = _sdmck::P64;
           I64[Hp - 8] = _sdmco::I64;
           I64[Hp] = _sdmcq::I64;
           I64[Sp - 8] = block_cdmRl_info;
           R2 = Hp - 23;
           I64[Sp + 56] = _sdmdj::I64;
           I64[Sp + 64] = _sdmdf::I64;
           Sp = Sp - 8;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdmQS() //  [R1]
         { info_tbl: [(cdmQS,
                       label: block_cdmQS_info
                       rep:StackRep [False, False, True, True, False, False, False,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmQS: // global
           P64[Sp] = R1;
           call _cdmQT() args: 0, res: 0, upd: 0;
     }
 },
 _cdmRl() //  [R1]
         { info_tbl: [(cdmRl,
                       label: block_cdmRl_info
                       rep:StackRep [False, False, False, True, True, True, True, True,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmRl: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdmSj; else goto cdmSi;
       cdmSj: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmSi: // global
           I64[Hp - 88] = sat_sdmdD_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = I64[Sp + 72];
           I64[Hp - 56] = I64[Sp + 64];
           I64[Hp - 48] = GHC.ExecutionStack.Internal.Location_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdme7_entry() //  [R1]
         { info_tbl: [(cdmTo,
                       label: sat_sdme7_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmTo: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmTp; else goto cdmTq;
       cdmTp: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdmTq: // global
           I64[Sp - 32] = block_cdmTm_info;
           P64[Sp - 24] = P64[R1 + 7];
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = P64[R1 + 23];
           Sp = Sp - 32;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _cdmTm() //  []
         { info_tbl: [(cdmTm,
                       label: block_cdmTm_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmTm: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call go_sdmc9_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdmeb_entry() //  [R1]
         { info_tbl: [(cdmTy,
                       label: sat_sdmeb_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmTy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdmTz; else goto cdmTA;
       cdmTz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmTA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 go_sdmc9_entry() //  [R1, R2, R3]
         { info_tbl: [(cdmTF,
                       label: go_sdmc9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmTF: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdmTG; else goto cdmTH;
       cdmTG: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdmTH: // global
           I64[Sp - 32] = block_cdmPu_info;
           _sdmc9::P64 = R1;
           _sdmc0::P64 = P64[R1 + 5];
           R1 = R3;
           P64[Sp - 24] = _sdmc0::P64;
           P64[Sp - 16] = _sdmc9::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udmTV; else goto cdmPv;
       udmTV: // global
           call _cdmPu(R1) args: 0, res: 0, upd: 0;
       cdmPv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmPu() //  [R1]
         { info_tbl: [(cdmPu,
                       label: block_cdmPu_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmPu: // global
           if (R1 & 7 == 1) goto cdmTC; else goto cdmTD;
       cdmTC: // global
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdmTD: // global
           I64[Sp - 8] = block_cdmPA_info;
           _sdmcf::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sdmcf::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udmTU; else goto cdmPB;
       udmTU: // global
           call _cdmPA(R1) args: 0, res: 0, upd: 0;
       cdmPB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmPA() //  [R1]
         { info_tbl: [(cdmPA,
                       label: block_cdmPA_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmPA: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmTN; else goto cdmTM;
       cdmTN: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmTM: // global
           _sdmch::I64 = I64[R1 + 7];
           _sdmcj::I64 = I64[R1 + 23];
           I64[Hp - 32] = $witerFrames_sdmck_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sdmcj::I64;
           I64[Sp] = block_cdmTf_info;
           R3 = Hp - 7;
           R2 = _sdmch::I64;
           R1 = Hp - 29;
           call $witerFrames_sdmck_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmTf() //  [R1]
         { info_tbl: [(cdmTf,
                       label: block_cdmTf_info
                       rep:StackRep [False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmTf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmTQ; else goto cdmTP;
       cdmTQ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmTP: // global
           I64[Hp - 24] = sat_sdme7_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 24] = block_cdmTs_info;
           R2 = Hp - 23;
           P64[Sp + 32] = R1;
           Sp = Sp + 24;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdmTs() //  [R1]
         { info_tbl: [(cdmTs,
                       label: block_cdmTs_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmTs: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmTT; else goto cdmTS;
       cdmTT: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmTS: // global
           I64[Hp - 24] = sat_sdmeb_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ExecutionStack.Internal.stackFrames_entry() //  [R2]
         { info_tbl: [(cdmU2,
                       label: GHC.ExecutionStack.Internal.stackFrames_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmU2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdmU3; else goto cdmU4;
       cdmU3: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.stackFrames_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdmU4: // global
           I64[Sp - 16] = block_cdmP4_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _cdmP4() //  []
         { info_tbl: [(cdmP4,
                       label: block_cdmP4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmP4: // global
           (_sdmbQ::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] libdwPoolTake();
           if (_sdmbQ::I64 == 0) goto cdmTY; else goto cdmTX;
       cdmTY: // global
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call _cdmTW() args: 0, res: 0, upd: 0;
       cdmTX: // global
           I64[Sp - 8] = block_cdmPa_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _sdmbQ::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmPa() //  [R1]
         { info_tbl: [(cdmPa,
                       label: block_cdmPa_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmPa: // global
           I64[Sp - 8] = block_cdmPc_info;
           R6 = I64[Sp + 8];
           R5 = 0;
           R4 = 0;
           R3 = libdwPoolRelease;
           R2 = R1;
           P64[Sp - 16] = GHC.Tuple.()_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 _cdmPc() //  []
         { info_tbl: [(cdmPc,
                       label: block_cdmPc_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmPc: // global
           I64[Sp] = block_cdmPe_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto udmUv; else goto cdmPf;
       udmUv: // global
           call _cdmPe(R1) args: 0, res: 0, upd: 0;
       cdmPf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmPe() //  [R1]
         { info_tbl: [(cdmPe,
                       label: block_cdmPe_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmPe: // global
           _sdmc4::I64 = I64[I64[R1 + 15] + 8];
           I64[Sp] = block_cdmPm_info;
           R3 = _sdmc4::I64;
           R2 = GHC.Types.[]_closure+1;
           P64[Sp + 24] = P64[R1 + 7];
           call $wgo_rdm9M_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdmPm() //  [R1]
         { info_tbl: [(cdmPm,
                       label: block_cdmPm_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmPm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmUc; else goto cdmUb;
       cdmUc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmUb: // global
           _sdmc0::P64 = P64[Sp + 24];
           call MO_Touch(_sdmc0::P64);
           I64[Hp - 8] = go_sdmc9_info;
           P64[Hp] = _sdmc0::P64;
           I64[Sp] = block_cdmU6_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = R1;
           P64[Sp + 24] = Hp - 5;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdmU6() //  [R1]
         { info_tbl: [(cdmU6,
                       label: block_cdmU6_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmU6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmUl; else goto cdmUk;
       cdmUl: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmUk: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 16];
           _cdmPp::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cdmUi_info;
           R3 = R1;
           R2 = Hp - 15;
           R1 = _cdmPp::P64;
           Sp = Sp + 24;
           call go_sdmc9_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmUi() //  [R1]
         { info_tbl: [(cdmUi,
                       label: block_cdmUi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmUi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdmUp; else goto cdmUo;
       cdmUp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdmUo: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp] = Hp - 6;
           call _cdmTW() args: 0, res: 0, upd: 0;
     }
 },
 _cdmTW() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmTW: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.848036921 UTC

[section ""data" . g_rdm9N_closure" {
     g_rdm9N_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.850118128 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.showStackFrames1_bytes" {
     GHC.ExecutionStack.Internal.showStackFrames1_bytes:
         I8[] [83,116,97,99,107,32,116,114,97,99,101,58,10]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.852133556 UTC

[section ""cstring" . lvl_rdm9O_bytes" {
     lvl_rdm9O_bytes:
         I8[] [41]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.853980414 UTC

[section ""cstring" . lvl1_rdm9P_bytes" {
     lvl1_rdm9P_bytes:
         I8[] [46]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.855702425 UTC

[section ""cstring" . lvl2_rdm9Q_bytes" {
     lvl2_rdm9Q_bytes:
         I8[] [58]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.857715303 UTC

[section ""cstring" . lvl3_rdm9R_bytes" {
     lvl3_rdm9R_bytes:
         I8[] [32,40]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.859493581 UTC

[section ""cstring" . lvl4_rdm9S_bytes" {
     lvl4_rdm9S_bytes:
         I8[] [32,105,110,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.861195914 UTC

[section ""cstring" . lvl5_rdm9T_bytes" {
     lvl5_rdm9T_bytes:
         I8[] [32,32,32,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.867000889 UTC

[section ""data" . GHC.ExecutionStack.Internal.showStackFrames_go_closure" {
     GHC.ExecutionStack.Internal.showStackFrames_go_closure:
         const GHC.ExecutionStack.Internal.showStackFrames_go_info;
 },
 sat_sdmew_entry() //  [R1]
         { info_tbl: [(cdmYd,
                       label: sat_sdmew_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmYd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdmYe; else goto cdmYf;
       cdmYe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmYf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.ExecutionStack.Internal.showStackFrames_go_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdmey_entry() //  [R1]
         { info_tbl: [(cdmYh,
                       label: sat_sdmey_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmYh: // global
           _sdmey::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdmYi; else goto cdmYj;
       cdmYj: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdmYl; else goto cdmYk;
       cdmYl: // global
           HpAlloc = 56;
           goto cdmYi;
       cdmYi: // global
           R1 = _sdmey::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmYk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdmey::P64;
           _sdmen::P64 = P64[_sdmey::P64 + 16];
           _sdmeq::P64 = P64[_sdmey::P64 + 24];
           _sdmes::P64 = P64[_sdmey::P64 + 32];
           I64[Hp - 48] = sat_sdmew_info;
           P64[Hp - 32] = _sdmen::P64;
           P64[Hp - 24] = _sdmeq::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = g_rdm9N_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sdmes::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 karg_sdmev_entry() //  [R1]
         { info_tbl: [(cdmYm,
                       label: karg_sdmev_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmYm: // global
           _sdmev::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdmYn; else goto cdmYo;
       cdmYo: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmYq; else goto cdmYp;
       cdmYq: // global
           HpAlloc = 40;
           goto cdmYn;
       cdmYn: // global
           R1 = _sdmev::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmYp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdmev::P64;
           _sdmen::P64 = P64[_sdmev::P64 + 16];
           _sdmeq::P64 = P64[_sdmev::P64 + 24];
           _sdmes::P64 = P64[_sdmev::P64 + 32];
           I64[Hp - 32] = sat_sdmey_info;
           P64[Hp - 16] = _sdmen::P64;
           P64[Hp - 8] = _sdmeq::P64;
           P64[Hp] = _sdmes::P64;
           R3 = Hp - 32;
           R2 = lvl4_rdm9S_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdmeJ_entry() //  [R1]
         { info_tbl: [(cdmZa,
                       label: sat_sdmeJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmZa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdmZb; else goto cdmZc;
       cdmZb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmZc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl_rdm9O_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdmeN_entry() //  [R1]
         { info_tbl: [(cdmZd,
                       label: sat_sdmeN_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmZd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmZh; else goto cdmZi;
       cdmZh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmZi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdmZ1_info;
           _sdmev::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdmev::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udmZp; else goto cdmZ2;
       udmZp: // global
           call _cdmZ1(R1) args: 0, res: 0, upd: 0;
       cdmZ2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdmZ1() //  [R1]
         { info_tbl: [(cdmZ1,
                       label: block_cdmZ1_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmZ1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdmZl; else goto cdmZk;
       cdmZl: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdmZk: // global
           _sdmeI::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sdmeJ_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cdmZe_info;
           R4 = Hp - 16;
           R3 = _sdmeI::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _cdmZe() //  [R1, R2]
         { info_tbl: [(cdmZe,
                       label: block_cdmZe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmZe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdmZo; else goto cdmZn;
       cdmZo: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdmZn: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdmeO_entry() //  [R1]
         { info_tbl: [(cdmZq,
                       label: sat_sdmeO_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmZq: // global
           _sdmeO::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdmZr; else goto cdmZs;
       cdmZs: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmZu; else goto cdmZt;
       cdmZu: // global
           HpAlloc = 32;
           goto cdmZr;
       cdmZr: // global
           R1 = _sdmeO::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmZt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdmeO::P64;
           _sdmev::P64 = P64[_sdmeO::P64 + 16];
           _sdmeE::P64 = P64[_sdmeO::P64 + 24];
           I64[Hp - 24] = sat_sdmeN_info;
           P64[Hp - 8] = _sdmev::P64;
           P64[Hp] = _sdmeE::P64;
           R3 = Hp - 24;
           R2 = lvl1_rdm9P_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdmeS_entry() //  [R1]
         { info_tbl: [(cdmZv,
                       label: sat_sdmeS_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmZv: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdmZz; else goto cdmZA;
       cdmZz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmZA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdmYO_info;
           _sdmev::P64 = P64[R1 + 16];
           _sdmeE::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sdmev::P64;
           P64[Sp - 24] = _sdmeE::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udmZH; else goto cdmYP;
       udmZH: // global
           call _cdmYO(R1) args: 0, res: 0, upd: 0;
       cdmYP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdmYO() //  [R1]
         { info_tbl: [(cdmYO,
                       label: block_cdmYO_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmYO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdmZD; else goto cdmZC;
       cdmZD: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdmZC: // global
           _sdmeG::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_sdmeO_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cdmZw_info;
           R4 = Hp - 24;
           R3 = _sdmeG::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _cdmZw() //  [R1, R2]
         { info_tbl: [(cdmZw,
                       label: block_cdmZw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmZw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdmZG; else goto cdmZF;
       cdmZG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdmZF: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdmeT_entry() //  [R1]
         { info_tbl: [(cdmZI,
                       label: sat_sdmeT_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmZI: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmZM; else goto cdmZL;
       cdmZM: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmZL: // global
           _sdmev::P64 = P64[R1 + 16];
           _sdmeD::P64 = P64[R1 + 24];
           _sdmeE::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdmeS_info;
           P64[Hp - 16] = _sdmev::P64;
           P64[Hp - 8] = _sdmeD::P64;
           P64[Hp] = _sdmeE::P64;
           R3 = Hp - 32;
           R2 = lvl2_rdm9Q_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdmeU_entry() //  [R1]
         { info_tbl: [(cdmZN,
                       label: sat_sdmeU_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmZN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdmZO; else goto cdmZP;
       cdmZO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdmZP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdmYB_info;
           _sdmev::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdmev::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udmZT; else goto cdmYC;
       udmZT: // global
           call _cdmYB(R1) args: 0, res: 0, upd: 0;
       cdmYC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdmYB() //  [R1]
         { info_tbl: [(cdmYB,
                       label: block_cdmYB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmYB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdmZS; else goto cdmZR;
       cdmZS: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdmZR: // global
           _sdmeC::P64 = P64[R1 + 7];
           _sdmeD::P64 = P64[R1 + 15];
           _sdmeE::P64 = P64[R1 + 23];
           I64[Hp - 32] = sat_sdmeT_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _sdmeD::P64;
           P64[Hp] = _sdmeE::P64;
           R3 = Hp - 32;
           R2 = _sdmeC::P64;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdmeV_entry() //  [R1]
         { info_tbl: [(cdmZY,
                       label: sat_sdmeV_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmZY: // global
           _sdmeV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdmZZ; else goto cdn00;
       cdn00: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdn02; else goto cdn01;
       cdn02: // global
           HpAlloc = 40;
           goto cdmZZ;
       cdmZZ: // global
           R1 = _sdmeV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdn01: // global
           _sdmen::P64 = P64[_sdmeV::P64 + 16];
           _sdmeq::P64 = P64[_sdmeV::P64 + 24];
           _sdmes::P64 = P64[_sdmeV::P64 + 32];
           _sdmeu::P64 = P64[_sdmeV::P64 + 40];
           I64[Hp - 32] = karg_sdmev_info;
           P64[Hp - 16] = _sdmen::P64;
           P64[Hp - 8] = _sdmeq::P64;
           P64[Hp] = _sdmes::P64;
           I64[Sp - 16] = block_cdmYr_info;
           R1 = _sdmeu::P64;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udn08; else goto cdmYs;
       udn08: // global
           call _cdmYr(R1) args: 0, res: 0, upd: 0;
       cdmYs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmYr() //  [R1]
         { info_tbl: [(cdmYr,
                       label: block_cdmYr_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmYr: // global
           _cdmY1::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdmZV; else goto cdmZW;
       cdmZV: // global
           R1 = _cdmY1::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdmZW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdn07; else goto cdn06;
       cdn07: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdn06: // global
           _sdmeA::P64 = P64[R1 + 6];
           I64[Hp - 24] = sat_sdmeU_info;
           P64[Hp - 8] = _cdmY1::P64;
           P64[Hp] = _sdmeA::P64;
           R3 = Hp - 24;
           R2 = lvl3_rdm9R_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdmeW_entry() //  [R1]
         { info_tbl: [(cdn09,
                       label: sat_sdmeW_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdn09: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdn0a; else goto cdn0b;
       cdn0a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdn0b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdmXS_info;
           _sdmen::P64 = P64[R1 + 16];
           _sdmeq::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sdmen::P64;
           P64[Sp - 24] = _sdmeq::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udn0f; else goto cdmXT;
       udn0f: // global
           call _cdmXS(R1) args: 0, res: 0, upd: 0;
       cdmXT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdmXS() //  [R1]
         { info_tbl: [(cdmXS,
                       label: block_cdmXS_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmXS: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdn0e; else goto cdn0d;
       cdn0e: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdn0d: // global
           _sdmes::P64 = P64[R1 + 7];
           _sdmet::P64 = P64[R1 + 15];
           _sdmeu::P64 = P64[R1 + 23];
           I64[Hp - 40] = sat_sdmeV_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _sdmes::P64;
           P64[Hp] = _sdmeu::P64;
           R3 = Hp - 40;
           R2 = _sdmet::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ExecutionStack.Internal.showStackFrames_go_entry() //  [R2, R3]
         { info_tbl: [(cdn0k,
                       label: GHC.ExecutionStack.Internal.showStackFrames_go_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdn0k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdn0l; else goto cdn0m;
       cdn0l: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.showStackFrames_go_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdn0m: // global
           I64[Sp - 16] = block_cdmXI_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udn0s; else goto cdmXJ;
       udn0s: // global
           call _cdmXI(R1) args: 0, res: 0, upd: 0;
       cdmXJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdmXI() //  [R1]
         { info_tbl: [(cdmXI,
                       label: block_cdmXI_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdmXI: // global
           _sdmen::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdn0h; else goto cdn0i;
       cdn0h: // global
           R1 = _sdmen::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdn0i: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdn0r; else goto cdn0q;
       cdn0r: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdn0q: // global
           _sdmep::P64 = P64[R1 + 6];
           _sdmeq::P64 = P64[R1 + 14];
           I64[Hp - 32] = sat_sdmeW_info;
           P64[Hp - 16] = _sdmen::P64;
           P64[Hp - 8] = _sdmep::P64;
           P64[Hp] = _sdmeq::P64;
           R3 = Hp - 32;
           R2 = lvl5_rdm9T_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.91445867 UTC

[section ""data" . GHC.ExecutionStack.Internal.showStackFrames_closure" {
     GHC.ExecutionStack.Internal.showStackFrames_closure:
         const GHC.ExecutionStack.Internal.showStackFrames_info;
 },
 sat_sdmeZ_entry() //  [R1]
         { info_tbl: [(cdn29,
                       label: sat_sdmeZ_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdn29: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdn2a; else goto cdn2b;
       cdn2a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdn2b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ExecutionStack.Internal.showStackFrames_go_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ExecutionStack.Internal.showStackFrames_entry() //  [R2, R3]
         { info_tbl: [(cdn2c,
                       label: GHC.ExecutionStack.Internal.showStackFrames_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdn2c: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdn2g; else goto cdn2f;
       cdn2g: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.showStackFrames_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdn2f: // global
           I64[Hp - 24] = sat_sdmeZ_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = GHC.ExecutionStack.Internal.showStackFrames1_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.920661771 UTC

[section ""data" . GHC.ExecutionStack.Internal.Chunk_closure" {
     GHC.ExecutionStack.Internal.Chunk_closure:
         const GHC.ExecutionStack.Internal.Chunk_info;
 },
 GHC.ExecutionStack.Internal.Chunk_entry() //  [R2, R3, R4]
         { info_tbl: [(cdn2u,
                       label: GHC.ExecutionStack.Internal.Chunk_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 16} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdn2u: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdn2y; else goto cdn2x;
       cdn2y: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.Chunk_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdn2x: // global
           I64[Hp - 24] = GHC.ExecutionStack.Internal.Chunk_con_info;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.924788046 UTC

[section ""data" . GHC.ExecutionStack.Internal.Location_closure" {
     GHC.ExecutionStack.Internal.Location_closure:
         const GHC.ExecutionStack.Internal.Location_info;
 },
 GHC.ExecutionStack.Internal.Location_entry() //  [R2, R3, R4]
         { info_tbl: [(cdn2J,
                       label: GHC.ExecutionStack.Internal.Location_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdn2J: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdn2N; else goto cdn2M;
       cdn2N: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.Location_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdn2M: // global
           I64[Hp - 24] = GHC.ExecutionStack.Internal.Location_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.928912493 UTC

[section ""data" . GHC.ExecutionStack.Internal.SrcLoc_closure" {
     GHC.ExecutionStack.Internal.SrcLoc_closure:
         const GHC.ExecutionStack.Internal.SrcLoc_info;
 },
 GHC.ExecutionStack.Internal.SrcLoc_entry() //  [R2, R3, R4]
         { info_tbl: [(cdn2Y,
                       label: GHC.ExecutionStack.Internal.SrcLoc_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdn2Y: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdn32; else goto cdn31;
       cdn32: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.SrcLoc_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdn31: // global
           I64[Hp - 24] = GHC.ExecutionStack.Internal.SrcLoc_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.933463091 UTC

[GHC.ExecutionStack.Internal.Chunk_con_entry() //  [R1]
         { info_tbl: [(cdn38,
                       label: GHC.ExecutionStack.Internal.Chunk_con_info
                       rep:HeapRep 3 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108,46,67,104,117,110,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdn38: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.937000177 UTC

[GHC.ExecutionStack.Internal.Location_con_entry() //  [R1]
         { info_tbl: [(cdn3e,
                       label: GHC.ExecutionStack.Internal.Location_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108,46,76,111,99,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdn3e: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.941284753 UTC

[GHC.ExecutionStack.Internal.SrcLoc_con_entry() //  [R1]
         { info_tbl: [(cdn3k,
                       label: GHC.ExecutionStack.Internal.SrcLoc_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108,46,83,114,99,76,111,99]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdn3k: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:32.944505287 UTC

[section ""relreadonly" . Sdmj7_srt" {
     Sdmj7_srt:
         const GHC.ForeignPtr.$winsertCFinalizer_closure;
         const GHC.ExecutionStack.Internal.collectStackTrace1_closure;
         const GHC.IO.Encoding.getForeignEncoding_closure;
         const GHC.Foreign.$wpeekCString_closure;
         const GHC.ExecutionStack.Internal.stackFrames_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.224113046 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:08:34.225879291 UTC

[section ""data" . GHC.ExecutionStack.Internal.$WChunk_closure" {
     GHC.ExecutionStack.Internal.$WChunk_closure:
         const GHC.ExecutionStack.Internal.$WChunk_info;
 },
 GHC.ExecutionStack.Internal.$WChunk_entry() //  [R2, R3, R4]
         { info_tbl: [(cdn8D,
                       label: GHC.ExecutionStack.Internal.$WChunk_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdn8D: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdn8R; else goto cdn8S;
       cdn8R: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.$WChunk_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdn8S: // global
           I64[Sp - 24] = block_cdn8A_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udn8Z; else goto cdn8B;
       udn8Z: // global
           call _cdn8A(R1) args: 0, res: 0, upd: 0;
       cdn8B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdn8A() //  [R1]
         { info_tbl: [(cdn8A,
                       label: block_cdn8A_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdn8A: // global
           I64[Sp] = block_cdn8G_info;
           _sdn3v::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sdn3v::I64;
           if (R1 & 7 != 0) goto udn8Y; else goto cdn8H;
       udn8Y: // global
           call _cdn8G(R1) args: 0, res: 0, upd: 0;
       cdn8H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdn8G() //  [R1]
         { info_tbl: [(cdn8G,
                       label: block_cdn8G_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdn8G: // global
           I64[Sp] = block_cdn8L_info;
           _sdn3x::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sdn3x::I64;
           if (R1 & 7 != 0) goto udn90; else goto cdn8M;
       udn90: // global
           call _cdn8L(R1) args: 0, res: 0, upd: 0;
       cdn8M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdn8L() //  [R1]
         { info_tbl: [(cdn8L,
                       label: block_cdn8L_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdn8L: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdn8X; else goto cdn8W;
       cdn8X: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdn8W: // global
           _sdn3z::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.ExecutionStack.Internal.Chunk_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _sdn3z::I64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.235592744 UTC

[section ""data" . GHC.ExecutionStack.Internal.sourceColumn_closure" {
     GHC.ExecutionStack.Internal.sourceColumn_closure:
         const GHC.ExecutionStack.Internal.sourceColumn_info;
 },
 GHC.ExecutionStack.Internal.sourceColumn_entry() //  [R2]
         { info_tbl: [(cdn9w,
                       label: GHC.ExecutionStack.Internal.sourceColumn_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdn9w: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdn9x; else goto cdn9y;
       cdn9x: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.sourceColumn_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdn9y: // global
           I64[Sp - 8] = block_cdn9t_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udn9C; else goto cdn9u;
       udn9C: // global
           call _cdn9t(R1) args: 0, res: 0, upd: 0;
       cdn9u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdn9t() //  [R1]
         { info_tbl: [(cdn9t,
                       label: block_cdn9t_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdn9t: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.240980159 UTC

[section ""data" . GHC.ExecutionStack.Internal.sourceLine_closure" {
     GHC.ExecutionStack.Internal.sourceLine_closure:
         const GHC.ExecutionStack.Internal.sourceLine_info;
 },
 GHC.ExecutionStack.Internal.sourceLine_entry() //  [R2]
         { info_tbl: [(cdn9W,
                       label: GHC.ExecutionStack.Internal.sourceLine_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdn9W: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdn9X; else goto cdn9Y;
       cdn9X: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.sourceLine_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdn9Y: // global
           I64[Sp - 8] = block_cdn9T_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udna2; else goto cdn9U;
       udna2: // global
           call _cdn9T(R1) args: 0, res: 0, upd: 0;
       cdn9U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdn9T() //  [R1]
         { info_tbl: [(cdn9T,
                       label: block_cdn9T_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdn9T: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.246741276 UTC

[section ""data" . GHC.ExecutionStack.Internal.sourceFile_closure" {
     GHC.ExecutionStack.Internal.sourceFile_closure:
         const GHC.ExecutionStack.Internal.sourceFile_info;
 },
 GHC.ExecutionStack.Internal.sourceFile_entry() //  [R2]
         { info_tbl: [(cdnam,
                       label: GHC.ExecutionStack.Internal.sourceFile_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnam: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnan; else goto cdnao;
       cdnan: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.sourceFile_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdnao: // global
           I64[Sp - 8] = block_cdnaj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udnas; else goto cdnak;
       udnas: // global
           call _cdnaj(R1) args: 0, res: 0, upd: 0;
       cdnak: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdnaj() //  [R1]
         { info_tbl: [(cdnaj,
                       label: block_cdnaj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnaj: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.252023812 UTC

[section ""data" . GHC.ExecutionStack.Internal.srcLoc_closure" {
     GHC.ExecutionStack.Internal.srcLoc_closure:
         const GHC.ExecutionStack.Internal.srcLoc_info;
 },
 GHC.ExecutionStack.Internal.srcLoc_entry() //  [R2]
         { info_tbl: [(cdnaM,
                       label: GHC.ExecutionStack.Internal.srcLoc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnaM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnaN; else goto cdnaO;
       cdnaN: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.srcLoc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdnaO: // global
           I64[Sp - 8] = block_cdnaJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udnaS; else goto cdnaK;
       udnaS: // global
           call _cdnaJ(R1) args: 0, res: 0, upd: 0;
       cdnaK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdnaJ() //  [R1]
         { info_tbl: [(cdnaJ,
                       label: block_cdnaJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnaJ: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.261392737 UTC

[section ""data" . GHC.ExecutionStack.Internal.functionName_closure" {
     GHC.ExecutionStack.Internal.functionName_closure:
         const GHC.ExecutionStack.Internal.functionName_info;
 },
 GHC.ExecutionStack.Internal.functionName_entry() //  [R2]
         { info_tbl: [(cdnbc,
                       label: GHC.ExecutionStack.Internal.functionName_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnbc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnbd; else goto cdnbe;
       cdnbd: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.functionName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdnbe: // global
           I64[Sp - 8] = block_cdnb9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udnbi; else goto cdnba;
       udnbi: // global
           call _cdnb9(R1) args: 0, res: 0, upd: 0;
       cdnba: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdnb9() //  [R1]
         { info_tbl: [(cdnb9,
                       label: block_cdnb9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnb9: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.268194397 UTC

[section ""data" . GHC.ExecutionStack.Internal.objectName_closure" {
     GHC.ExecutionStack.Internal.objectName_closure:
         const GHC.ExecutionStack.Internal.objectName_info;
 },
 GHC.ExecutionStack.Internal.objectName_entry() //  [R2]
         { info_tbl: [(cdnbC,
                       label: GHC.ExecutionStack.Internal.objectName_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnbC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnbD; else goto cdnbE;
       cdnbD: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.objectName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdnbE: // global
           I64[Sp - 8] = block_cdnbz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udnbI; else goto cdnbA;
       udnbI: // global
           call _cdnbz(R1) args: 0, res: 0, upd: 0;
       cdnbA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdnbz() //  [R1]
         { info_tbl: [(cdnbz,
                       label: block_cdnbz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnbz: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.274099145 UTC

[section ""data" . GHC.ExecutionStack.Internal.chunkFirstFrame_closure" {
     GHC.ExecutionStack.Internal.chunkFirstFrame_closure:
         const GHC.ExecutionStack.Internal.chunkFirstFrame_info;
 },
 GHC.ExecutionStack.Internal.chunkFirstFrame_entry() //  [R2]
         { info_tbl: [(cdnc2,
                       label: GHC.ExecutionStack.Internal.chunkFirstFrame_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnc2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnc6; else goto cdnc7;
       cdnc6: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.chunkFirstFrame_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdnc7: // global
           I64[Sp - 8] = block_cdnbZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udncb; else goto cdnc0;
       udncb: // global
           call _cdnbZ(R1) args: 0, res: 0, upd: 0;
       cdnc0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdnbZ() //  [R1]
         { info_tbl: [(cdnbZ,
                       label: block_cdnbZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnbZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdnca; else goto cdnc9;
       cdnca: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnc9: // global
           _sdn48::I64 = I64[R1 + 23];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sdn48::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.28040965 UTC

[section ""data" . GHC.ExecutionStack.Internal.chunkNext_closure" {
     GHC.ExecutionStack.Internal.chunkNext_closure:
         const GHC.ExecutionStack.Internal.chunkNext_info;
 },
 GHC.ExecutionStack.Internal.chunkNext_entry() //  [R2]
         { info_tbl: [(cdncv,
                       label: GHC.ExecutionStack.Internal.chunkNext_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdncv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdncz; else goto cdncA;
       cdncz: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.chunkNext_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdncA: // global
           I64[Sp - 8] = block_cdncs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udncE; else goto cdnct;
       udncE: // global
           call _cdncs(R1) args: 0, res: 0, upd: 0;
       cdnct: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdncs() //  [R1]
         { info_tbl: [(cdncs,
                       label: block_cdncs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdncs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdncD; else goto cdncC;
       cdncD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdncC: // global
           _sdn4c::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sdn4c::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.286815807 UTC

[section ""data" . GHC.ExecutionStack.Internal.chunkFrames_closure" {
     GHC.ExecutionStack.Internal.chunkFrames_closure:
         const GHC.ExecutionStack.Internal.chunkFrames_info;
 },
 GHC.ExecutionStack.Internal.chunkFrames_entry() //  [R2]
         { info_tbl: [(cdncY,
                       label: GHC.ExecutionStack.Internal.chunkFrames_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdncY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnd2; else goto cdnd3;
       cdnd2: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.chunkFrames_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdnd3: // global
           I64[Sp - 8] = block_cdncV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udnd7; else goto cdncW;
       udnd7: // global
           call _cdncV(R1) args: 0, res: 0, upd: 0;
       cdncW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdncV() //  [R1]
         { info_tbl: [(cdncV,
                       label: block_cdncV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdncV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdnd6; else goto cdnd5;
       cdnd6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnd5: // global
           _sdn4g::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Types.W#_con_info;
           I64[Hp] = _sdn4g::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.292913884 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$trModule4_bytes" {
     GHC.ExecutionStack.Internal.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.294853453 UTC

[section ""data" . GHC.ExecutionStack.Internal.$trModule3_closure" {
     GHC.ExecutionStack.Internal.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.296816232 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$trModule2_bytes" {
     GHC.ExecutionStack.Internal.$trModule2_bytes:
         I8[] [71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.299518011 UTC

[section ""data" . GHC.ExecutionStack.Internal.$trModule1_closure" {
     GHC.ExecutionStack.Internal.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.301211097 UTC

[section ""data" . GHC.ExecutionStack.Internal.$trModule_closure" {
     GHC.ExecutionStack.Internal.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ExecutionStack.Internal.$trModule3_closure+1;
         const GHC.ExecutionStack.Internal.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.302942176 UTC

[section ""data" . $krep_rdm9l_closure" {
     $krep_rdm9l_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.304608504 UTC

[section ""data" . $krep1_rdm9m_closure" {
     $krep1_rdm9m_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.306433952 UTC

[section ""data" . $krep2_rdm9n_closure" {
     $krep2_rdm9n_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.308157156 UTC

[section ""data" . $krep3_rdm9o_closure" {
     $krep3_rdm9o_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWord_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.310397867 UTC

[section ""data" . $krep4_rdm9p_closure" {
     $krep4_rdm9p_closure:
         const :_con_info;
         const $krep1_rdm9m_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.312083629 UTC

[section ""data" . $krep5_rdm9q_closure" {
     $krep5_rdm9q_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep4_rdm9p_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.313827106 UTC

[section ""data" . $krep6_rdm9r_closure" {
     $krep6_rdm9r_closure:
         const :_con_info;
         const $krep2_rdm9n_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.315531923 UTC

[section ""data" . $krep7_rdm9s_closure" {
     $krep7_rdm9s_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep6_rdm9r_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.317318449 UTC

[section ""data" . $krep8_rdm9t_closure" {
     $krep8_rdm9t_closure:
         const :_con_info;
         const $krep7_rdm9s_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.319024126 UTC

[section ""data" . $krep9_rdm9u_closure" {
     $krep9_rdm9u_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep8_rdm9t_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.320723288 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcSrcLoc2_bytes" {
     GHC.ExecutionStack.Internal.$tcSrcLoc2_bytes:
         I8[] [83,114,99,76,111,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.322374653 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSrcLoc1_closure" {
     GHC.ExecutionStack.Internal.$tcSrcLoc1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcSrcLoc2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.324627498 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSrcLoc_closure" {
     GHC.ExecutionStack.Internal.$tcSrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcSrcLoc1_closure+1;
         const GHC.Types.krep$*_closure;
         const 8235067574311587288;
         const 11106182367596705879;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.326968159 UTC

[section ""data" . $krep10_rdm9v_closure" {
     $krep10_rdm9v_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcSrcLoc_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.328681355 UTC

[section ""data" . $krep11_rdm9w_closure" {
     $krep11_rdm9w_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rdm9l_closure+1;
         const $krep10_rdm9v_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.330446368 UTC

[section ""data" . $krep12_rdm9x_closure" {
     $krep12_rdm9x_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rdm9l_closure+1;
         const $krep11_rdm9w_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.332060674 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'SrcLoc1_closure" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rdm9q_closure+1;
         const $krep12_rdm9x_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.333748248 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'SrcLoc3_bytes" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc3_bytes:
         I8[] [39,83,114,99,76,111,99]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.335387252 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'SrcLoc2_closure" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'SrcLoc3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.337071226 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'SrcLoc_closure" {
     GHC.ExecutionStack.Internal.$tc'SrcLoc_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'SrcLoc2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'SrcLoc1_closure+4;
         const 11095721805058681290;
         const 15266549541595723377;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.338958012 UTC

[section ""data" . $krep13_rdm9y_closure" {
     $krep13_rdm9y_closure:
         const :_con_info;
         const $krep10_rdm9v_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.340672225 UTC

[section ""data" . $krep14_rdm9z_closure" {
     $krep14_rdm9z_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep13_rdm9y_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.342444918 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcLocation2_bytes" {
     GHC.ExecutionStack.Internal.$tcLocation2_bytes:
         I8[] [76,111,99,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.344116716 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcLocation1_closure" {
     GHC.ExecutionStack.Internal.$tcLocation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcLocation2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.346373671 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcLocation_closure" {
     GHC.ExecutionStack.Internal.$tcLocation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcLocation1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11638758687983955592;
         const 6940671496618727587;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.348291576 UTC

[section ""data" . $krep15_rdm9A_closure" {
     $krep15_rdm9A_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcLocation_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.350589446 UTC

[section ""data" . $krep16_rdm9B_closure" {
     $krep16_rdm9B_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_rdm9z_closure+1;
         const $krep15_rdm9A_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.352393987 UTC

[section ""data" . $krep17_rdm9C_closure" {
     $krep17_rdm9C_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rdm9q_closure+1;
         const $krep16_rdm9B_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.354184587 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Location1_closure" {
     GHC.ExecutionStack.Internal.$tc'Location1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_rdm9q_closure+1;
         const $krep17_rdm9C_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.355936398 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'Location3_bytes" {
     GHC.ExecutionStack.Internal.$tc'Location3_bytes:
         I8[] [39,76,111,99,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.357628714 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Location2_closure" {
     GHC.ExecutionStack.Internal.$tc'Location2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'Location3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.359353021 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Location_closure" {
     GHC.ExecutionStack.Internal.$tc'Location_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Location2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Location1_closure+4;
         const 12834480788254682335;
         const 10467761170474242090;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.361285917 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcStackTrace2_bytes" {
     GHC.ExecutionStack.Internal.$tcStackTrace2_bytes:
         I8[] [83,116,97,99,107,84,114,97,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.363027185 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcStackTrace1_closure" {
     GHC.ExecutionStack.Internal.$tcStackTrace1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcStackTrace2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.364683017 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcStackTrace_closure" {
     GHC.ExecutionStack.Internal.$tcStackTrace_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcStackTrace1_closure+1;
         const GHC.Types.krep$*_closure;
         const 156026104294967557;
         const 17600277320898304892;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.36714963 UTC

[section ""data" . $krep18_rdm9D_closure" {
     $krep18_rdm9D_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcStackTrace_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.368897833 UTC

[section ""data" . $krep19_rdm9E_closure" {
     $krep19_rdm9E_closure:
         const :_con_info;
         const $krep18_rdm9D_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.370684181 UTC

[section ""data" . $krep20_rdm9F_closure" {
     $krep20_rdm9F_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure;
         const $krep19_rdm9E_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.372415843 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'StackTrace1_closure" {
     GHC.ExecutionStack.Internal.$tc'StackTrace1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep20_rdm9F_closure+1;
         const $krep18_rdm9D_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.374246488 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'StackTrace3_bytes" {
     GHC.ExecutionStack.Internal.$tc'StackTrace3_bytes:
         I8[] [39,83,116,97,99,107,84,114,97,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.376407681 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'StackTrace2_closure" {
     GHC.ExecutionStack.Internal.$tc'StackTrace2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'StackTrace3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.378221173 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'StackTrace_closure" {
     GHC.ExecutionStack.Internal.$tc'StackTrace_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'StackTrace2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'StackTrace1_closure+4;
         const 8151790971853785814;
         const 7394195233358636505;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.380090678 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcChunk2_bytes" {
     GHC.ExecutionStack.Internal.$tcChunk2_bytes:
         I8[] [67,104,117,110,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.382343488 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcChunk1_closure" {
     GHC.ExecutionStack.Internal.$tcChunk1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcChunk2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.384093412 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcChunk_closure" {
     GHC.ExecutionStack.Internal.$tcChunk_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcChunk1_closure+1;
         const GHC.Types.krep$*_closure;
         const 1813577326074213410;
         const 3256155729866972563;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.386039299 UTC

[section ""data" . $krep21_rdm9G_closure" {
     $krep21_rdm9G_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ExecutionStack.Internal.$tcChunk_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.387832404 UTC

[section ""data" . $krep22_rdm9H_closure" {
     $krep22_rdm9H_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_rdm9u_closure+1;
         const $krep21_rdm9G_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.389673443 UTC

[section ""data" . $krep23_rdm9I_closure" {
     $krep23_rdm9I_closure:
         const :_con_info;
         const $krep21_rdm9G_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.391370586 UTC

[section ""data" . $krep24_rdm9J_closure" {
     $krep24_rdm9J_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep23_rdm9I_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.39305237 UTC

[section ""data" . $krep25_rdm9K_closure" {
     $krep25_rdm9K_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep24_rdm9J_closure+1;
         const $krep22_rdm9H_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.394823053 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Chunk1_closure" {
     GHC.ExecutionStack.Internal.$tc'Chunk1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_rdm9o_closure+1;
         const $krep25_rdm9K_closure+4;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.396574385 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tc'Chunk3_bytes" {
     GHC.ExecutionStack.Internal.$tc'Chunk3_bytes:
         I8[] [39,67,104,117,110,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.398775701 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Chunk2_closure" {
     GHC.ExecutionStack.Internal.$tc'Chunk2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tc'Chunk3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.400446921 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tc'Chunk_closure" {
     GHC.ExecutionStack.Internal.$tc'Chunk_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Chunk2_closure+1;
         const GHC.ExecutionStack.Internal.$tc'Chunk1_closure+4;
         const 16594405016023301875;
         const 5381929581673016432;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.402347696 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.$tcSession2_bytes" {
     GHC.ExecutionStack.Internal.$tcSession2_bytes:
         I8[] [83,101,115,115,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.404646269 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSession1_closure" {
     GHC.ExecutionStack.Internal.$tcSession1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.Internal.$tcSession2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.406422036 UTC

[section ""data" . GHC.ExecutionStack.Internal.$tcSession_closure" {
     GHC.ExecutionStack.Internal.$tcSession_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.ExecutionStack.Internal.$trModule_closure+1;
         const GHC.ExecutionStack.Internal.$tcSession1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11168382530978838993;
         const 7144139957235519240;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.408485576 UTC

[section ""data" . libdw_pool_clear_rdm9L_closure" {
     libdw_pool_clear_rdm9L_closure:
         const libdw_pool_clear_rdm9L_info;
 },
 libdw_pool_clear_rdm9L_entry() //  []
         { info_tbl: [(cdnep,
                       label: libdw_pool_clear_rdm9L_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnep: // global
           call "ccall" arg hints:  []  result hints:  [] libdwPoolClear();
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.412480859 UTC

[section ""data" . GHC.ExecutionStack.Internal.invalidateDebugCache_closure" {
     GHC.ExecutionStack.Internal.invalidateDebugCache_closure:
         const GHC.ExecutionStack.Internal.invalidateDebugCache_info;
 },
 GHC.ExecutionStack.Internal.invalidateDebugCache_entry() //  []
         { info_tbl: [(cdneC,
                       label: GHC.ExecutionStack.Internal.invalidateDebugCache_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdneC: // global
           call libdw_pool_clear_rdm9L_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.416175178 UTC

[section ""data" . GHC.ExecutionStack.Internal.stackDepth_closure" {
     GHC.ExecutionStack.Internal.stackDepth_closure:
         const GHC.ExecutionStack.Internal.stackDepth_info;
 },
 GHC.ExecutionStack.Internal.stackDepth_entry() //  [R2]
         { info_tbl: [(cdneV,
                       label: GHC.ExecutionStack.Internal.stackDepth_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdneV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdneW; else goto cdneX;
       cdneW: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.stackDepth_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdneX: // global
           I64[Sp - 16] = block_cdneN_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _cdneN() //  []
         { info_tbl: [(cdneN,
                       label: block_cdneN_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdneN: // global
           _sdn4n::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cdneP_info;
           R1 = _sdn4n::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto udnfa; else goto cdneQ;
       udnfa: // global
           call _cdneP(R1) args: 0, res: 0, upd: 0;
       cdneQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdneP() //  [R1]
         { info_tbl: [(cdneP,
                       label: block_cdneP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdneP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdnf3; else goto cdnf2;
       cdnf3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnf2: // global
           _sdn4u::I64 = I64[I64[R1 + 15]];
           call MO_Touch(P64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sdn4u::I64;
           R1 = (Hp + -7) & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.424401942 UTC

[section ""data" . GHC.ExecutionStack.Internal.collectStackTrace1_closure" {
     GHC.ExecutionStack.Internal.collectStackTrace1_closure:
         const GHC.ExecutionStack.Internal.collectStackTrace1_info;
         const 0;
 },
 GHC.ExecutionStack.Internal.collectStackTrace1_entry() //  []
         { info_tbl: [(cdnfD,
                       label: GHC.ExecutionStack.Internal.collectStackTrace1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnfD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdnfE; else goto cdnfF;
       cdnfE: // global
           R1 = GHC.ExecutionStack.Internal.collectStackTrace1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdnfF: // global
           (_sdn4F::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] libdwPoolTake();
           if (_sdn4F::I64 == 0) goto udngb; else goto cdnfB;
       udngb: // global
           call _cdnfC() args: 0, res: 0, upd: 0;
       cdnfB: // global
           I64[Sp - 16] = block_cdnfH_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 8] = _sdn4F::I64;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdnfH() //  [R1]
         { info_tbl: [(cdnfH,
                       label: block_cdnfH_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnfH: // global
           I64[Sp - 8] = block_cdnfJ_info;
           R6 = I64[Sp + 8];
           R5 = 0;
           R4 = 0;
           R3 = libdwPoolRelease;
           R2 = R1;
           P64[Sp - 16] = GHC.Tuple.()_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 _cdnfJ() //  [R1]
         { info_tbl: [(cdnfJ,
                       label: block_cdnfJ_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnfJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdnfO; else goto cdnfN;
       cdnfO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnfN: // global
           _sdn4J::P64 = P64[Sp + 8];
           (_sdn4Q::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] libdwGetBacktrace(I64[Sp + 16]);
           I64[Hp - 8] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp] = _sdn4J::P64;
           call MO_Touch(Hp - 7);
           if (_sdn4Q::I64 == 0) goto udnga; else goto cdng4;
       udnga: // global
           Sp = Sp + 24;
           call _cdnfC() args: 0, res: 0, upd: 0;
       cdng4: // global
           I64[Sp + 8] = block_cdnfW_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp + 16] = _sdn4Q::I64;
           Sp = Sp + 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdnfC() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnfC: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cdnfW() //  [R1]
         { info_tbl: [(cdnfW,
                       label: block_cdnfW_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnfW: // global
           I64[Sp - 8] = block_cdnfY_info;
           R6 = I64[Sp + 8];
           R5 = 0;
           R4 = 0;
           R3 = backtraceFree;
           R2 = R1;
           P64[Sp - 16] = GHC.Tuple.()_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 _cdnfY() //  [R1]
         { info_tbl: [(cdnfY,
                       label: block_cdnfY_info
                       rep:StackRep [False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnfY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdng8; else goto cdng7;
       cdng8: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdng7: // global
           I64[Hp - 48] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           I64[Hp - 32] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 24] = Hp - 47;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.437591791 UTC

[section ""data" . GHC.ExecutionStack.Internal.collectStackTrace_closure" {
     GHC.ExecutionStack.Internal.collectStackTrace_closure:
         const GHC.ExecutionStack.Internal.collectStackTrace_info;
         const 0;
 },
 GHC.ExecutionStack.Internal.collectStackTrace_entry() //  []
         { info_tbl: [(cdngW,
                       label: GHC.ExecutionStack.Internal.collectStackTrace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdngW: // global
           call GHC.ExecutionStack.Internal.collectStackTrace1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.441834244 UTC

[section ""data" . $wgo_rdm9M_closure" {
     $wgo_rdm9M_closure:
         const $wgo_rdm9M_info;
 },
 $wgo_rdm9M_entry() //  [R2, R3]
         { info_tbl: [(cdnhl,
                       label: $wgo_rdm9M_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 14} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnhl: // global
           _sdn54::I64 = R3;
           _sdn53::P64 = R2;
           goto cdnh4;
       cdnh4: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdnhp; else goto cdnho;
       cdnhp: // global
           HpAlloc = 56;
           R3 = _sdn54::I64;
           R2 = _sdn53::P64;
           R1 = $wgo_rdm9M_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdnho: // global
           if (_sdn54::I64 == 0) goto cdnhk; else goto cdnhj;
       cdnhk: // global
           Hp = Hp - 56;
           R1 = _sdn53::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdnhj: // global
           _sdn59::I64 = I64[_sdn54::I64];
           _sdn5d::I64 = I64[_sdn54::I64 + 8];
           I64[Hp - 48] = GHC.ExecutionStack.Internal.Chunk_con_info;
           I64[Hp - 40] = _sdn59::I64;
           I64[Hp - 32] = _sdn5d::I64;
           I64[Hp - 24] = _sdn54::I64 + 16;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = _sdn53::P64;
           _sdn54::I64 = _sdn5d::I64;
           _sdn53::P64 = Hp - 14;
           goto cdnh4;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.451024544 UTC

[section ""data" . GHC.ExecutionStack.Internal.stackFrames_closure" {
     GHC.ExecutionStack.Internal.stackFrames_closure:
         const GHC.ExecutionStack.Internal.stackFrames_info;
         const 0;
 },
 sat_sdn6n_entry() //  [R1]
         { info_tbl: [(cdniX,
                       label: sat_sdn6n_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdniX: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdnj0; else goto cdnj1;
       cdnj0: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdnj1: // global
           I64[Sp - 32] = block_cdniT_info;
           P64[Sp - 24] = P64[R1 + 7];
           I64[Sp - 16] = I64[R1 + 15];
           I64[Sp - 8] = I64[R1 + 23];
           Sp = Sp - 32;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _cdniT() //  []
         { info_tbl: [(cdniT,
                       label: block_cdniT_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdniT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdnj4; else goto cdnj3;
       cdnj4: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdnj3: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 24] + 8;
           R3 = Hp - 7;
           R2 = I64[Sp + 16] - 1;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call $witerFrames_sdn5Q_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdn6X_entry() //  [R1]
         { info_tbl: [(cdnjM,
                       label: sat_sdn6X_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnjM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdnjP; else goto cdnjQ;
       cdnjP: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdnjQ: // global
           I64[Sp - 32] = block_cdnjI_info;
           P64[Sp - 24] = P64[R1 + 7];
           I64[Sp - 16] = I64[R1 + 15];
           I64[Sp - 8] = I64[R1 + 23];
           Sp = Sp - 32;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _cdnjI() //  []
         { info_tbl: [(cdnjI,
                       label: block_cdnjI_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnjI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdnjT; else goto cdnjS;
       cdnjT: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cdnjS: // global
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = I64[Sp + 24] + 8;
           R3 = Hp - 7;
           R2 = I64[Sp + 16] - 1;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call $witerFrames_sdn5Q_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdn79_entry() //  [R1]
         { info_tbl: [(cdnk8,
                       label: sat_sdn79_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnk8: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdnk9; else goto cdnka;
       cdnk9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnka: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdnk1_info;
           _sdn6L::I64 = I64[R1 + 24];
           _sdn6P::I64 = I64[R1 + 32];
           R1 = P64[R1 + 16];
           I64[Sp - 32] = _sdn6L::I64;
           I64[Sp - 24] = _sdn6P::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udnkt; else goto cdnk2;
       udnkt: // global
           call _cdnk1(R1) args: 0, res: 0, upd: 0;
       cdnk2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdnk1() //  [R1]
         { info_tbl: [(cdnk1,
                       label: block_cdnk1_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnk1: // global
           if (R1 & 7 == 1) goto cdnk5; else goto cdnk6;
       cdnk5: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdnk6: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cdnks; else goto cdnkr;
       cdnks: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdnkr: // global
           I64[Hp - 72] = GHC.Types.I#_con_info;
           I64[Hp - 64] = I64[Sp + 16];
           I64[Hp - 56] = GHC.Types.I#_con_info;
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = GHC.ExecutionStack.Internal.SrcLoc_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = Hp - 55;
           P64[Hp - 16] = Hp - 71;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 39;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 $witerFrames_sdn5Q_entry() //  [R1, R2, R3]
         { info_tbl: [(cdnkx,
                       label: $witerFrames_sdn5Q_info
                       rep:HeapRep 2 ptrs { Fun {arity: 3 fun_type: ArgSpec 13} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnkx: // global
           if ((Sp + -80) < SpLim) (likely: False) goto cdnky; else goto cdnkz;
       cdnky: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdnkz: // global
           if (R2 == 0) goto cdnkw; else goto cdnkv;
       cdnkw: // global
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdnkv: // global
           I64[Sp - 40] = block_cdnim_info;
           _sdn5Q::P64 = R1;
           _sdn5w::P64 = P64[R1 + 5];
           _sdn5G::P64 = P64[R1 + 13];
           R1 = R3;
           P64[Sp - 32] = _sdn5w::P64;
           P64[Sp - 24] = _sdn5G::P64;
           P64[Sp - 16] = _sdn5Q::P64;
           I64[Sp - 8] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udnlI; else goto cdnin;
       udnlI: // global
           call _cdnim(R1) args: 0, res: 0, upd: 0;
       cdnin: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdnim() //  [R1]
         { info_tbl: [(cdnim,
                       label: block_cdnim_info
                       rep:StackRep [False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnim: // global
           _sdn5W::I64 = I64[R1 + 7];
           _sdn5Z::I64 = I64[_sdn5W::I64];
           I64[Sp - 16] = block_cdnir_info;
           R1 = 32;
           I64[Sp - 8] = _sdn5Z::I64;
           I64[Sp] = _sdn5W::I64;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdnir() //  [R1]
         { info_tbl: [(cdnir,
                       label: block_cdnir_info
                       rep:StackRep [True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnir: // global
           I64[Sp] = block_cdnit_info;
           _sdn65::P64 = R1;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = _sdn65::P64;
           if (R1 & 7 != 0) goto udnlD; else goto cdniu;
       udnlD: // global
           call _cdnit(R1) args: 0, res: 0, upd: 0;
       cdniu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdnit() //  [R1]
         { info_tbl: [(cdnit,
                       label: block_cdnit_info
                       rep:StackRep [True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnit: // global
           _sdn68::P64 = P64[R1 + 7];
           _sdn69::I64 = P64[Sp + 32] + 16;
           (_sdn6d::I64) = call "ccall" arg hints:  [PtrHint, PtrHint,
                                                     PtrHint]  result hints:  [‘signed’] libdwLookupLocation(I64[R1 + 15], _sdn69::I64, I64[Sp + 8]);
           call MO_Touch(_sdn68::P64);
           _sdn6f::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sdn6d::I64));
           if (_sdn6f::I64 != 0) goto udnlu; else goto cdnkI;
       udnlu: // global
           I64[Sp + 8] = _sdn6f::I64;
           Sp = Sp + 8;
           call _cdniK() args: 0, res: 0, upd: 0;
       cdnkI: // global
           _sdn6q::I64 = I64[_sdn69::I64];
           if (_sdn6q::I64 == 0) goto cdnlt; else goto cdnlp;
       cdnlt: // global
           I64[Sp + 8] = _sdn69::I64;
           P64[Sp] = GHC.Types.[]_closure+1;
           call _sdn6r() args: 0, res: 0, upd: 0;
       cdnlp: // global
           I64[Sp - 8] = block_cdnll_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp] = _sdn6q::I64;
           I64[Sp + 8] = _sdn69::I64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdniK() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdniK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdnkH; else goto cdnkG;
       cdnkH: // global
           HpAlloc = 32;
           _sdn6f::I64 = I64[Sp];
           I64[Sp] = block_cdniJ_info;
           R1 = _sdn6f::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cdnkG: // global
           _sdn5w::P64 = P64[Sp + 16];
           _sdn5Q::P64 = P64[Sp + 32];
           _sdn5U::I64 = I64[Sp + 40];
           _sdn5W::I64 = I64[Sp + 8];
           call MO_Touch(P64[Sp + 24]);
           call MO_Touch(_sdn5w::P64);
           I64[Hp - 24] = sat_sdn6n_info;
           P64[Hp - 16] = _sdn5Q::P64;
           I64[Hp - 8] = _sdn5U::I64;
           I64[Hp] = _sdn5W::I64;
           R2 = Hp - 23;
           Sp = Sp + 48;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _cdniJ() //  [R1]
         { info_tbl: [(cdniJ,
                       label: block_cdniJ_info
                       rep:StackRep [True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdniJ: // global
           I64[Sp] = R1;
           call _cdniK() args: 0, res: 0, upd: 0;
     }
 },
 _cdnll() //  [R1]
         { info_tbl: [(cdnll,
                       label: block_cdnll_info
                       rep:StackRep [True, True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnll: // global
           _sdn6q::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdnln_info;
           R3 = _sdn6q::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdnln() //  [R1]
         { info_tbl: [(cdnln,
                       label: block_cdnln_info
                       rep:StackRep [True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnln: // global
           P64[Sp] = R1;
           call _sdn6r() args: 0, res: 0, upd: 0;
     }
 },
 _sdn6r() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       sdn6r: // global
           _sdn6x::I64 = I64[I64[Sp + 8] + 8];
           if (_sdn6x::I64 == 0) goto cdnlh; else goto cdnld;
       cdnlh: // global
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call _sdn6y() args: 0, res: 0, upd: 0;
       cdnld: // global
           I64[Sp - 16] = block_cdnl9_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 8] = _sdn6x::I64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdnl9() //  [R1]
         { info_tbl: [(cdnl9,
                       label: block_cdnl9_info
                       rep:StackRep [True, False, True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnl9: // global
           _sdn6x::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdnlb_info;
           R3 = _sdn6x::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdnlb() //  [R1]
         { info_tbl: [(cdnlb,
                       label: block_cdnlb_info
                       rep:StackRep [False, True, True, False, False, False, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnlb: // global
           P64[Sp] = R1;
           call _sdn6y() args: 0, res: 0, upd: 0;
     }
 },
 _sdn6y() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       sdn6y: // global
           _sdn6E::I64 = I64[I64[Sp + 16] + 16];
           if (_sdn6E::I64 == 0) goto cdnl5; else goto cdnl1;
       cdnl5: // global
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           Sp = Sp - 8;
           call _cdnjt() args: 0, res: 0, upd: 0;
       cdnl1: // global
           I64[Sp - 16] = block_cdnkX_info;
           R1 = GHC.IO.Encoding.getForeignEncoding_closure;
           I64[Sp - 8] = _sdn6E::I64;
           Sp = Sp - 16;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdnkX() //  [R1]
         { info_tbl: [(cdnkX,
                       label: block_cdnkX_info
                       rep:StackRep [True, False, False, True, True, False, False, False,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnkX: // global
           _sdn6E::I64 = I64[Sp + 8];
           I64[Sp + 8] = block_cdnkZ_info;
           R3 = _sdn6E::I64;
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdnkZ() //  [R1]
         { info_tbl: [(cdnkZ,
                       label: block_cdnkZ_info
                       rep:StackRep [False, False, True, True, False, False, False,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnkZ: // global
           P64[Sp] = R1;
           call _cdnjt() args: 0, res: 0, upd: 0;
     }
 },
 _cdnjt() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnjt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdnkQ; else goto cdnkP;
       cdnkQ: // global
           HpAlloc = 32;
           _sdn6H::P64 = P64[Sp];
           I64[Sp] = block_cdnjs_info;
           R1 = _sdn6H::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnkP: // global
           _sdn5w::P64 = P64[Sp + 40];
           _sdn5Q::P64 = P64[Sp + 56];
           _sdn5U::I64 = I64[Sp + 64];
           _sdn5W::I64 = I64[Sp + 32];
           _sdn69::I64 = I64[Sp + 24];
           _sdn6L::I64 = %MO_UU_Conv_W32_W64(I32[_sdn69::I64 + 24]);
           _sdn6P::I64 = %MO_UU_Conv_W32_W64(I32[_sdn69::I64 + 28]);
           call MO_Touch(P64[Sp + 48]);
           call MO_Touch(_sdn5w::P64);
           I64[Hp - 24] = sat_sdn6X_info;
           P64[Hp - 16] = _sdn5Q::P64;
           I64[Hp - 8] = _sdn5U::I64;
           I64[Hp] = _sdn5W::I64;
           I64[Sp - 8] = block_cdnjV_info;
           R2 = Hp - 23;
           I64[Sp + 56] = _sdn6P::I64;
           I64[Sp + 64] = _sdn6L::I64;
           Sp = Sp - 8;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdnjs() //  [R1]
         { info_tbl: [(cdnjs,
                       label: block_cdnjs_info
                       rep:StackRep [False, False, True, True, False, False, False,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnjs: // global
           P64[Sp] = R1;
           call _cdnjt() args: 0, res: 0, upd: 0;
     }
 },
 _cdnjV() //  [R1]
         { info_tbl: [(cdnjV,
                       label: block_cdnjV_info
                       rep:StackRep [False, False, False, True, True, True, True, True,
                                     True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnjV: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto cdnkT; else goto cdnkS;
       cdnkT: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnkS: // global
           I64[Hp - 88] = sat_sdn79_info;
           P64[Hp - 72] = P64[Sp + 8];
           I64[Hp - 64] = I64[Sp + 72];
           I64[Hp - 56] = I64[Sp + 64];
           I64[Hp - 48] = GHC.ExecutionStack.Internal.Location_con_info;
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = Hp - 88;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 47;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdn7D_entry() //  [R1]
         { info_tbl: [(cdnlY,
                       label: sat_sdn7D_info
                       rep:HeapRep 3 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnlY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdnlZ; else goto cdnm0;
       cdnlZ: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdnm0: // global
           I64[Sp - 32] = block_cdnlW_info;
           P64[Sp - 24] = P64[R1 + 7];
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = P64[R1 + 23];
           Sp = Sp - 32;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _cdnlW() //  []
         { info_tbl: [(cdnlW,
                       label: block_cdnlW_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnlW: // global
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call go_sdn5F_entry(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdn7H_entry() //  [R1]
         { info_tbl: [(cdnm8,
                       label: sat_sdn7H_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnm8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdnm9; else goto cdnma;
       cdnm9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnma: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 go_sdn5F_entry() //  [R1, R2, R3]
         { info_tbl: [(cdnmf,
                       label: go_sdn5F_info
                       rep:HeapRep 1 ptrs { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnmf: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdnmg; else goto cdnmh;
       cdnmg: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdnmh: // global
           I64[Sp - 32] = block_cdni4_info;
           _sdn5F::P64 = R1;
           _sdn5w::P64 = P64[R1 + 5];
           R1 = R3;
           P64[Sp - 24] = _sdn5w::P64;
           P64[Sp - 16] = _sdn5F::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udnmv; else goto cdni5;
       udnmv: // global
           call _cdni4(R1) args: 0, res: 0, upd: 0;
       cdni5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdni4() //  [R1]
         { info_tbl: [(cdni4,
                       label: block_cdni4_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdni4: // global
           if (R1 & 7 == 1) goto cdnmc; else goto cdnmd;
       cdnmc: // global
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cdnmd: // global
           I64[Sp - 8] = block_cdnia_info;
           _sdn5L::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sdn5L::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto udnmu; else goto cdnib;
       udnmu: // global
           call _cdnia(R1) args: 0, res: 0, upd: 0;
       cdnib: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdnia() //  [R1]
         { info_tbl: [(cdnia,
                       label: block_cdnia_info
                       rep:StackRep [False, False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnia: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdnmn; else goto cdnmm;
       cdnmn: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnmm: // global
           _sdn5N::I64 = I64[R1 + 7];
           _sdn5P::I64 = I64[R1 + 23];
           I64[Hp - 32] = $witerFrames_sdn5Q_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = P64[Sp + 32];
           I64[Hp - 8] = GHC.Ptr.Ptr_con_info;
           I64[Hp] = _sdn5P::I64;
           I64[Sp] = block_cdnlP_info;
           R3 = Hp - 7;
           R2 = _sdn5N::I64;
           R1 = Hp - 29;
           call $witerFrames_sdn5Q_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdnlP() //  [R1]
         { info_tbl: [(cdnlP,
                       label: block_cdnlP_info
                       rep:StackRep [False, True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnlP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdnmq; else goto cdnmp;
       cdnmq: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnmp: // global
           I64[Hp - 24] = sat_sdn7D_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 24] = block_cdnm2_info;
           R2 = Hp - 23;
           P64[Sp + 32] = R1;
           Sp = Sp + 24;
           call GHC.IO.Unsafe.unsafeDupableInterleaveIO_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdnm2() //  [R1]
         { info_tbl: [(cdnm2,
                       label: block_cdnm2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnm2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdnmt; else goto cdnms;
       cdnmt: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnms: // global
           I64[Hp - 24] = sat_sdn7H_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 24;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.ExecutionStack.Internal.stackFrames_entry() //  [R2]
         { info_tbl: [(cdnmC,
                       label: GHC.ExecutionStack.Internal.stackFrames_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnmC: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdnmD; else goto cdnmE;
       cdnmD: // global
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.stackFrames_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cdnmE: // global
           I64[Sp - 16] = block_cdnhE_info;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _cdnhE() //  []
         { info_tbl: [(cdnhE,
                       label: block_cdnhE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnhE: // global
           (_sdn5m::I64) = call "ccall" arg hints:  []  result hints:  [PtrHint] libdwPoolTake();
           if (_sdn5m::I64 == 0) goto cdnmy; else goto cdnmx;
       cdnmy: // global
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call _cdnmw() args: 0, res: 0, upd: 0;
       cdnmx: // global
           I64[Sp - 8] = block_cdnhK_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp] = _sdn5m::I64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdnhK() //  [R1]
         { info_tbl: [(cdnhK,
                       label: block_cdnhK_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnhK: // global
           I64[Sp - 8] = block_cdnhM_info;
           R6 = I64[Sp + 8];
           R5 = 0;
           R4 = 0;
           R3 = libdwPoolRelease;
           R2 = R1;
           P64[Sp - 16] = GHC.Tuple.()_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.ForeignPtr.$winsertCFinalizer_entry(R6,
                                                        R5,
                                                        R4,
                                                        R3,
                                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 _cdnhM() //  []
         { info_tbl: [(cdnhM,
                       label: block_cdnhM_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnhM: // global
           I64[Sp] = block_cdnhO_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto udnn5; else goto cdnhP;
       udnn5: // global
           call _cdnhO(R1) args: 0, res: 0, upd: 0;
       cdnhP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdnhO() //  [R1]
         { info_tbl: [(cdnhO,
                       label: block_cdnhO_info
                       rep:StackRep [False, True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnhO: // global
           _sdn5A::I64 = I64[I64[R1 + 15] + 8];
           I64[Sp] = block_cdnhW_info;
           R3 = _sdn5A::I64;
           R2 = GHC.Types.[]_closure+1;
           P64[Sp + 24] = P64[R1 + 7];
           call $wgo_rdm9M_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdnhW() //  [R1]
         { info_tbl: [(cdnhW,
                       label: block_cdnhW_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnhW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdnmM; else goto cdnmL;
       cdnmM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnmL: // global
           _sdn5w::P64 = P64[Sp + 24];
           call MO_Touch(_sdn5w::P64);
           I64[Hp - 8] = go_sdn5F_info;
           P64[Hp] = _sdn5w::P64;
           I64[Sp] = block_cdnmG_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = R1;
           P64[Sp + 24] = Hp - 5;
           call GHC.List.reverse1_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _cdnmG() //  [R1]
         { info_tbl: [(cdnmG,
                       label: block_cdnmG_info
                       rep:StackRep [False, True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnmG: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdnmV; else goto cdnmU;
       cdnmV: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnmU: // global
           I64[Hp - 32] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = I64[Sp + 16];
           _cdnhZ::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cdnmS_info;
           R3 = R1;
           R2 = Hp - 15;
           R1 = _cdnhZ::P64;
           Sp = Sp + 24;
           call go_sdn5F_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdnmS() //  [R1]
         { info_tbl: [(cdnmS,
                       label: block_cdnmS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnmS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cdnmZ; else goto cdnmY;
       cdnmZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnmY: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp] = Hp - 6;
           call _cdnmw() args: 0, res: 0, upd: 0;
     }
 },
 _cdnmw() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnmw: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.532065039 UTC

[section ""data" . g_rdm9N_closure" {
     g_rdm9N_closure:
         const GHC.Types.C#_con_info;
         const 10;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.5339361 UTC

[section ""cstring" . GHC.ExecutionStack.Internal.showStackFrames1_bytes" {
     GHC.ExecutionStack.Internal.showStackFrames1_bytes:
         I8[] [83,116,97,99,107,32,116,114,97,99,101,58,10]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.536068786 UTC

[section ""cstring" . lvl_rdm9O_bytes" {
     lvl_rdm9O_bytes:
         I8[] [41]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.537952064 UTC

[section ""cstring" . lvl1_rdm9P_bytes" {
     lvl1_rdm9P_bytes:
         I8[] [46]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.539626706 UTC

[section ""cstring" . lvl2_rdm9Q_bytes" {
     lvl2_rdm9Q_bytes:
         I8[] [58]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.54177847 UTC

[section ""cstring" . lvl3_rdm9R_bytes" {
     lvl3_rdm9R_bytes:
         I8[] [32,40]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.543961469 UTC

[section ""cstring" . lvl4_rdm9S_bytes" {
     lvl4_rdm9S_bytes:
         I8[] [32,105,110,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.545828732 UTC

[section ""cstring" . lvl5_rdm9T_bytes" {
     lvl5_rdm9T_bytes:
         I8[] [32,32,32,32]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.551063084 UTC

[section ""data" . GHC.ExecutionStack.Internal.showStackFrames_go_closure" {
     GHC.ExecutionStack.Internal.showStackFrames_go_closure:
         const GHC.ExecutionStack.Internal.showStackFrames_go_info;
 },
 sat_sdn82_entry() //  [R1]
         { info_tbl: [(cdnrP,
                       label: sat_sdn82_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnrP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdnrQ; else goto cdnrR;
       cdnrQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnrR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.ExecutionStack.Internal.showStackFrames_go_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdn84_entry() //  [R1]
         { info_tbl: [(cdnrT,
                       label: sat_sdn84_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnrT: // global
           _sdn84::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdnrU; else goto cdnrV;
       cdnrV: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cdnrX; else goto cdnrW;
       cdnrX: // global
           HpAlloc = 56;
           goto cdnrU;
       cdnrU: // global
           R1 = _sdn84::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnrW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdn84::P64;
           _sdn7T::P64 = P64[_sdn84::P64 + 16];
           _sdn7W::P64 = P64[_sdn84::P64 + 24];
           _sdn7Y::P64 = P64[_sdn84::P64 + 32];
           I64[Hp - 48] = sat_sdn82_info;
           P64[Hp - 32] = _sdn7T::P64;
           P64[Hp - 24] = _sdn7W::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = g_rdm9N_closure+1;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sdn7Y::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 karg_sdn81_entry() //  [R1]
         { info_tbl: [(cdnrY,
                       label: karg_sdn81_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnrY: // global
           _sdn81::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdnrZ; else goto cdns0;
       cdns0: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdns2; else goto cdns1;
       cdns2: // global
           HpAlloc = 40;
           goto cdnrZ;
       cdnrZ: // global
           R1 = _sdn81::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdns1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdn81::P64;
           _sdn7T::P64 = P64[_sdn81::P64 + 16];
           _sdn7W::P64 = P64[_sdn81::P64 + 24];
           _sdn7Y::P64 = P64[_sdn81::P64 + 32];
           I64[Hp - 32] = sat_sdn84_info;
           P64[Hp - 16] = _sdn7T::P64;
           P64[Hp - 8] = _sdn7W::P64;
           P64[Hp] = _sdn7Y::P64;
           R3 = Hp - 32;
           R2 = lvl4_rdm9S_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdn8f_entry() //  [R1]
         { info_tbl: [(cdnsM,
                       label: sat_sdn8f_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnsM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdnsN; else goto cdnsO;
       cdnsN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnsO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl_rdm9O_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdn8j_entry() //  [R1]
         { info_tbl: [(cdnsP,
                       label: sat_sdn8j_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnsP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdnsT; else goto cdnsU;
       cdnsT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnsU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdnsD_info;
           _sdn81::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdn81::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udnt1; else goto cdnsE;
       udnt1: // global
           call _cdnsD(R1) args: 0, res: 0, upd: 0;
       cdnsE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdnsD() //  [R1]
         { info_tbl: [(cdnsD,
                       label: block_cdnsD_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnsD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnsX; else goto cdnsW;
       cdnsX: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdnsW: // global
           _sdn8e::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_sdn8f_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cdnsQ_info;
           R4 = Hp - 16;
           R3 = _sdn8e::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _cdnsQ() //  [R1, R2]
         { info_tbl: [(cdnsQ,
                       label: block_cdnsQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnsQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnt0; else goto cdnsZ;
       cdnt0: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdnsZ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdn8k_entry() //  [R1]
         { info_tbl: [(cdnt2,
                       label: sat_sdn8k_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnt2: // global
           _sdn8k::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdnt3; else goto cdnt4;
       cdnt4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdnt6; else goto cdnt5;
       cdnt6: // global
           HpAlloc = 32;
           goto cdnt3;
       cdnt3: // global
           R1 = _sdn8k::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnt5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdn8k::P64;
           _sdn81::P64 = P64[_sdn8k::P64 + 16];
           _sdn8a::P64 = P64[_sdn8k::P64 + 24];
           I64[Hp - 24] = sat_sdn8j_info;
           P64[Hp - 8] = _sdn81::P64;
           P64[Hp] = _sdn8a::P64;
           R3 = Hp - 24;
           R2 = lvl1_rdm9P_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdn8o_entry() //  [R1]
         { info_tbl: [(cdnt7,
                       label: sat_sdn8o_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnt7: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdntb; else goto cdntc;
       cdntb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdntc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdnsq_info;
           _sdn81::P64 = P64[R1 + 16];
           _sdn8a::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sdn81::P64;
           P64[Sp - 24] = _sdn8a::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udntj; else goto cdnsr;
       udntj: // global
           call _cdnsq(R1) args: 0, res: 0, upd: 0;
       cdnsr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdnsq() //  [R1]
         { info_tbl: [(cdnsq,
                       label: block_cdnsq_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnsq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdntf; else goto cdnte;
       cdntf: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdnte: // global
           _sdn8c::I64 = I64[R1 + 7];
           I64[Hp - 24] = sat_sdn8k_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           I64[Sp + 16] = block_cdnt8_info;
           R4 = Hp - 24;
           R3 = _sdn8c::I64;
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _cdnt8() //  [R1, R2]
         { info_tbl: [(cdnt8,
                       label: block_cdnt8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnt8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnti; else goto cdnth;
       cdnti: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cdnth: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdn8p_entry() //  [R1]
         { info_tbl: [(cdntk,
                       label: sat_sdn8p_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdntk: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdnto; else goto cdntn;
       cdnto: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdntn: // global
           _sdn81::P64 = P64[R1 + 16];
           _sdn89::P64 = P64[R1 + 24];
           _sdn8a::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_sdn8o_info;
           P64[Hp - 16] = _sdn81::P64;
           P64[Hp - 8] = _sdn89::P64;
           P64[Hp] = _sdn8a::P64;
           R3 = Hp - 32;
           R2 = lvl2_rdm9Q_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdn8q_entry() //  [R1]
         { info_tbl: [(cdntp,
                       label: sat_sdn8q_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdntp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cdntq; else goto cdntr;
       cdntq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdntr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cdnsd_info;
           _sdn81::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sdn81::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto udntv; else goto cdnse;
       udntv: // global
           call _cdnsd(R1) args: 0, res: 0, upd: 0;
       cdnse: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdnsd() //  [R1]
         { info_tbl: [(cdnsd,
                       label: block_cdnsd_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnsd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdntu; else goto cdntt;
       cdntu: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdntt: // global
           _sdn88::P64 = P64[R1 + 7];
           _sdn89::P64 = P64[R1 + 15];
           _sdn8a::P64 = P64[R1 + 23];
           I64[Hp - 32] = sat_sdn8p_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _sdn89::P64;
           P64[Hp] = _sdn8a::P64;
           R3 = Hp - 32;
           R2 = _sdn88::P64;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdn8r_entry() //  [R1]
         { info_tbl: [(cdntA,
                       label: sat_sdn8r_info
                       rep:HeapRep 4 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdntA: // global
           _sdn8r::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdntB; else goto cdntC;
       cdntC: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdntE; else goto cdntD;
       cdntE: // global
           HpAlloc = 40;
           goto cdntB;
       cdntB: // global
           R1 = _sdn8r::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdntD: // global
           _sdn7T::P64 = P64[_sdn8r::P64 + 16];
           _sdn7W::P64 = P64[_sdn8r::P64 + 24];
           _sdn7Y::P64 = P64[_sdn8r::P64 + 32];
           _sdn80::P64 = P64[_sdn8r::P64 + 40];
           I64[Hp - 32] = karg_sdn81_info;
           P64[Hp - 16] = _sdn7T::P64;
           P64[Hp - 8] = _sdn7W::P64;
           P64[Hp] = _sdn7Y::P64;
           I64[Sp - 16] = block_cdns3_info;
           R1 = _sdn80::P64;
           P64[Sp - 8] = Hp - 32;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udntK; else goto cdns4;
       udntK: // global
           call _cdns3(R1) args: 0, res: 0, upd: 0;
       cdns4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdns3() //  [R1]
         { info_tbl: [(cdns3,
                       label: block_cdns3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdns3: // global
           _cdnrD::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdntx; else goto cdnty;
       cdntx: // global
           R1 = _cdnrD::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdnty: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdntJ; else goto cdntI;
       cdntJ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdntI: // global
           _sdn86::P64 = P64[R1 + 6];
           I64[Hp - 24] = sat_sdn8q_info;
           P64[Hp - 8] = _cdnrD::P64;
           P64[Hp] = _sdn86::P64;
           R3 = Hp - 24;
           R2 = lvl3_rdm9R_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 sat_sdn8s_entry() //  [R1]
         { info_tbl: [(cdntL,
                       label: sat_sdn8s_info
                       rep:HeapRep 3 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdntL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cdntM; else goto cdntN;
       cdntM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdntN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cdnru_info;
           _sdn7T::P64 = P64[R1 + 16];
           _sdn7W::P64 = P64[R1 + 32];
           R1 = P64[R1 + 24];
           P64[Sp - 32] = _sdn7T::P64;
           P64[Sp - 24] = _sdn7W::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto udntR; else goto cdnrv;
       udntR: // global
           call _cdnru(R1) args: 0, res: 0, upd: 0;
       cdnrv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdnru() //  [R1]
         { info_tbl: [(cdnru,
                       label: block_cdnru_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnru: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cdntQ; else goto cdntP;
       cdntQ: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdntP: // global
           _sdn7Y::P64 = P64[R1 + 7];
           _sdn7Z::P64 = P64[R1 + 15];
           _sdn80::P64 = P64[R1 + 23];
           I64[Hp - 40] = sat_sdn8r_info;
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = _sdn7Y::P64;
           P64[Hp] = _sdn80::P64;
           R3 = Hp - 40;
           R2 = _sdn7Z::P64;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ExecutionStack.Internal.showStackFrames_go_entry() //  [R2, R3]
         { info_tbl: [(cdntW,
                       label: GHC.ExecutionStack.Internal.showStackFrames_go_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdntW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdntX; else goto cdntY;
       cdntX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.showStackFrames_go_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdntY: // global
           I64[Sp - 16] = block_cdnrk_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto udnu4; else goto cdnrl;
       udnu4: // global
           call _cdnrk(R1) args: 0, res: 0, upd: 0;
       cdnrl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cdnrk() //  [R1]
         { info_tbl: [(cdnrk,
                       label: block_cdnrk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnrk: // global
           _sdn7T::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cdntT; else goto cdntU;
       cdntT: // global
           R1 = _sdn7T::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cdntU: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdnu3; else goto cdnu2;
       cdnu3: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnu2: // global
           _sdn7V::P64 = P64[R1 + 6];
           _sdn7W::P64 = P64[R1 + 14];
           I64[Hp - 32] = sat_sdn8s_info;
           P64[Hp - 16] = _sdn7T::P64;
           P64[Hp - 8] = _sdn7V::P64;
           P64[Hp] = _sdn7W::P64;
           R3 = Hp - 32;
           R2 = lvl5_rdm9T_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.597615956 UTC

[section ""data" . GHC.ExecutionStack.Internal.showStackFrames_closure" {
     GHC.ExecutionStack.Internal.showStackFrames_closure:
         const GHC.ExecutionStack.Internal.showStackFrames_info;
 },
 sat_sdn8v_entry() //  [R1]
         { info_tbl: [(cdnwh,
                       label: sat_sdn8v_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnwh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdnwi; else goto cdnwj;
       cdnwi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnwj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 24];
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ExecutionStack.Internal.showStackFrames_go_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ExecutionStack.Internal.showStackFrames_entry() //  [R2, R3]
         { info_tbl: [(cdnwk,
                       label: GHC.ExecutionStack.Internal.showStackFrames_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnwk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdnwo; else goto cdnwn;
       cdnwo: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.showStackFrames_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cdnwn: // global
           I64[Hp - 24] = sat_sdn8v_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = GHC.ExecutionStack.Internal.showStackFrames1_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.603401201 UTC

[section ""data" . GHC.ExecutionStack.Internal.Chunk_closure" {
     GHC.ExecutionStack.Internal.Chunk_closure:
         const GHC.ExecutionStack.Internal.Chunk_info;
 },
 GHC.ExecutionStack.Internal.Chunk_entry() //  [R2, R3, R4]
         { info_tbl: [(cdnwE,
                       label: GHC.ExecutionStack.Internal.Chunk_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 16} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnwE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdnwI; else goto cdnwH;
       cdnwI: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.Chunk_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdnwH: // global
           I64[Hp - 24] = GHC.ExecutionStack.Internal.Chunk_con_info;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.6076446 UTC

[section ""data" . GHC.ExecutionStack.Internal.Location_closure" {
     GHC.ExecutionStack.Internal.Location_closure:
         const GHC.ExecutionStack.Internal.Location_info;
 },
 GHC.ExecutionStack.Internal.Location_entry() //  [R2, R3, R4]
         { info_tbl: [(cdnwU,
                       label: GHC.ExecutionStack.Internal.Location_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnwU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdnwY; else goto cdnwX;
       cdnwY: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.Location_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdnwX: // global
           I64[Hp - 24] = GHC.ExecutionStack.Internal.Location_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.612128464 UTC

[section ""data" . GHC.ExecutionStack.Internal.SrcLoc_closure" {
     GHC.ExecutionStack.Internal.SrcLoc_closure:
         const GHC.ExecutionStack.Internal.SrcLoc_info;
 },
 GHC.ExecutionStack.Internal.SrcLoc_entry() //  [R2, R3, R4]
         { info_tbl: [(cdnxa,
                       label: GHC.ExecutionStack.Internal.SrcLoc_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnxa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cdnxe; else goto cdnxd;
       cdnxe: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.ExecutionStack.Internal.SrcLoc_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cdnxd: // global
           I64[Hp - 24] = GHC.ExecutionStack.Internal.SrcLoc_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.615908785 UTC

[GHC.ExecutionStack.Internal.Chunk_con_entry() //  [R1]
         { info_tbl: [(cdnxl,
                       label: GHC.ExecutionStack.Internal.Chunk_con_info
                       rep:HeapRep 3 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108,46,67,104,117,110,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnxl: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.619524876 UTC

[GHC.ExecutionStack.Internal.Location_con_entry() //  [R1]
         { info_tbl: [(cdnxs,
                       label: GHC.ExecutionStack.Internal.Location_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108,46,76,111,99,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnxs: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.622854471 UTC

[GHC.ExecutionStack.Internal.SrcLoc_con_entry() //  [R1]
         { info_tbl: [(cdnxz,
                       label: GHC.ExecutionStack.Internal.SrcLoc_con_info
                       rep:HeapRep 3 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107,46,73,110,116,101,114,110,97,108,46,83,114,99,76,111,99]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnxz: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.626060912 UTC

[section ""relreadonly" . Sdngd_srt" {
     Sdngd_srt:
         const GHC.ForeignPtr.$winsertCFinalizer_closure;
         const GHC.ExecutionStack.Internal.collectStackTrace1_closure;
         const GHC.IO.Encoding.getForeignEncoding_closure;
         const GHC.Foreign.$wpeekCString_closure;
         const GHC.ExecutionStack.Internal.stackFrames_closure;
 }]

