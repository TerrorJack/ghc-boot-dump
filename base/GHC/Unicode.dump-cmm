
==================== Output Cmm ====================
2018-03-16 15:57:01.601883211 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:57:01.602853264 UTC

[section ""data" . GHC.Unicode.$fBoundedGeneralCategory_closure" {
     GHC.Unicode.$fBoundedGeneralCategory_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Unicode.UppercaseLetter_closure+1;
         const GHC.Unicode.NotAssigned_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.603740179 UTC

[section ""cstring" . lvl_r2j62_bytes" {
     lvl_r2j62_bytes:
         I8[] [85,112,112,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.604984742 UTC

[section ""data" . lvl1_r2j63_closure" {
     lvl1_r2j63_closure:
         const lvl1_r2j63_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r2j63_entry() //  [R1]
         { info_tbl: [(c2jfK,
                       label: lvl1_r2j63_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jfK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jfL; else goto c2jfM;
       c2jfL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jfM: // global
           (_c2jfH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jfH::I64 == 0) goto c2jfJ; else goto c2jfI;
       c2jfJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jfI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jfH::I64;
           R2 = lvl_r2j62_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.606519012 UTC

[section ""cstring" . lvl2_r2j64_bytes" {
     lvl2_r2j64_bytes:
         I8[] [76,111,119,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.607576706 UTC

[section ""data" . lvl3_r2j65_closure" {
     lvl3_r2j65_closure:
         const lvl3_r2j65_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r2j65_entry() //  [R1]
         { info_tbl: [(c2jfT,
                       label: lvl3_r2j65_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jfT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jfU; else goto c2jfV;
       c2jfU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jfV: // global
           (_c2jfQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jfQ::I64 == 0) goto c2jfS; else goto c2jfR;
       c2jfS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jfR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jfQ::I64;
           R2 = lvl2_r2j64_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.609032062 UTC

[section ""cstring" . lvl4_r2j66_bytes" {
     lvl4_r2j66_bytes:
         I8[] [84,105,116,108,101,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.610179749 UTC

[section ""data" . lvl5_r2j67_closure" {
     lvl5_r2j67_closure:
         const lvl5_r2j67_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r2j67_entry() //  [R1]
         { info_tbl: [(c2jg2,
                       label: lvl5_r2j67_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jg2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jg3; else goto c2jg4;
       c2jg3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jg4: // global
           (_c2jfZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jfZ::I64 == 0) goto c2jg1; else goto c2jg0;
       c2jg1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jg0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jfZ::I64;
           R2 = lvl4_r2j66_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.611678005 UTC

[section ""cstring" . lvl6_r2j68_bytes" {
     lvl6_r2j68_bytes:
         I8[] [77,111,100,105,102,105,101,114,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.612771577 UTC

[section ""data" . lvl7_r2j69_closure" {
     lvl7_r2j69_closure:
         const lvl7_r2j69_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r2j69_entry() //  [R1]
         { info_tbl: [(c2jgb,
                       label: lvl7_r2j69_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jgb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jgc; else goto c2jgd;
       c2jgc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jgd: // global
           (_c2jg8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jg8::I64 == 0) goto c2jga; else goto c2jg9;
       c2jga: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jg9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jg8::I64;
           R2 = lvl6_r2j68_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.614203931 UTC

[section ""cstring" . lvl8_r2j6a_bytes" {
     lvl8_r2j6a_bytes:
         I8[] [79,116,104,101,114,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.615370796 UTC

[section ""data" . lvl9_r2j6b_closure" {
     lvl9_r2j6b_closure:
         const lvl9_r2j6b_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_r2j6b_entry() //  [R1]
         { info_tbl: [(c2jgk,
                       label: lvl9_r2j6b_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jgk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jgl; else goto c2jgm;
       c2jgl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jgm: // global
           (_c2jgh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jgh::I64 == 0) goto c2jgj; else goto c2jgi;
       c2jgj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jgi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jgh::I64;
           R2 = lvl8_r2j6a_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.616691379 UTC

[section ""cstring" . lvl10_r2j6c_bytes" {
     lvl10_r2j6c_bytes:
         I8[] [78,111,110,83,112,97,99,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.617834447 UTC

[section ""data" . lvl11_r2j6d_closure" {
     lvl11_r2j6d_closure:
         const lvl11_r2j6d_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_r2j6d_entry() //  [R1]
         { info_tbl: [(c2jgt,
                       label: lvl11_r2j6d_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jgt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jgu; else goto c2jgv;
       c2jgu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jgv: // global
           (_c2jgq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jgq::I64 == 0) goto c2jgs; else goto c2jgr;
       c2jgs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jgr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jgq::I64;
           R2 = lvl10_r2j6c_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.619203719 UTC

[section ""cstring" . lvl12_r2j6e_bytes" {
     lvl12_r2j6e_bytes:
         I8[] [83,112,97,99,105,110,103,67,111,109,98,105,110,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.620295782 UTC

[section ""data" . lvl13_r2j6f_closure" {
     lvl13_r2j6f_closure:
         const lvl13_r2j6f_info;
         const 0;
         const 0;
         const 0;
 },
 lvl13_r2j6f_entry() //  [R1]
         { info_tbl: [(c2jgC,
                       label: lvl13_r2j6f_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jgC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jgD; else goto c2jgE;
       c2jgD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jgE: // global
           (_c2jgz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jgz::I64 == 0) goto c2jgB; else goto c2jgA;
       c2jgB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jgA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jgz::I64;
           R2 = lvl12_r2j6e_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.621790218 UTC

[section ""cstring" . lvl14_r2j6g_bytes" {
     lvl14_r2j6g_bytes:
         I8[] [69,110,99,108,111,115,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.622885244 UTC

[section ""data" . lvl15_r2j6h_closure" {
     lvl15_r2j6h_closure:
         const lvl15_r2j6h_info;
         const 0;
         const 0;
         const 0;
 },
 lvl15_r2j6h_entry() //  [R1]
         { info_tbl: [(c2jgL,
                       label: lvl15_r2j6h_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jgL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jgM; else goto c2jgN;
       c2jgM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jgN: // global
           (_c2jgI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jgI::I64 == 0) goto c2jgK; else goto c2jgJ;
       c2jgK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jgJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jgI::I64;
           R2 = lvl14_r2j6g_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.62430628 UTC

[section ""cstring" . lvl16_r2j6i_bytes" {
     lvl16_r2j6i_bytes:
         I8[] [68,101,99,105,109,97,108,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.625442198 UTC

[section ""data" . lvl17_r2j6j_closure" {
     lvl17_r2j6j_closure:
         const lvl17_r2j6j_info;
         const 0;
         const 0;
         const 0;
 },
 lvl17_r2j6j_entry() //  [R1]
         { info_tbl: [(c2jgU,
                       label: lvl17_r2j6j_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jgU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jgV; else goto c2jgW;
       c2jgV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jgW: // global
           (_c2jgR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jgR::I64 == 0) goto c2jgT; else goto c2jgS;
       c2jgT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jgS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jgR::I64;
           R2 = lvl16_r2j6i_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.626827225 UTC

[section ""cstring" . lvl18_r2j6k_bytes" {
     lvl18_r2j6k_bytes:
         I8[] [76,101,116,116,101,114,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.627851162 UTC

[section ""data" . lvl19_r2j6l_closure" {
     lvl19_r2j6l_closure:
         const lvl19_r2j6l_info;
         const 0;
         const 0;
         const 0;
 },
 lvl19_r2j6l_entry() //  [R1]
         { info_tbl: [(c2jh3,
                       label: lvl19_r2j6l_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jh3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jh4; else goto c2jh5;
       c2jh4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jh5: // global
           (_c2jh0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jh0::I64 == 0) goto c2jh2; else goto c2jh1;
       c2jh2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jh1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jh0::I64;
           R2 = lvl18_r2j6k_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.629224069 UTC

[section ""cstring" . lvl20_r2j6m_bytes" {
     lvl20_r2j6m_bytes:
         I8[] [79,116,104,101,114,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.630428982 UTC

[section ""data" . lvl21_r2j6n_closure" {
     lvl21_r2j6n_closure:
         const lvl21_r2j6n_info;
         const 0;
         const 0;
         const 0;
 },
 lvl21_r2j6n_entry() //  [R1]
         { info_tbl: [(c2jhc,
                       label: lvl21_r2j6n_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jhc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jhd; else goto c2jhe;
       c2jhd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jhe: // global
           (_c2jh9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jh9::I64 == 0) goto c2jhb; else goto c2jha;
       c2jhb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jha: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jh9::I64;
           R2 = lvl20_r2j6m_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.636916178 UTC

[section ""cstring" . lvl22_r2j6o_bytes" {
     lvl22_r2j6o_bytes:
         I8[] [67,111,110,110,101,99,116,111,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.638195837 UTC

[section ""data" . lvl23_r2j6p_closure" {
     lvl23_r2j6p_closure:
         const lvl23_r2j6p_info;
         const 0;
         const 0;
         const 0;
 },
 lvl23_r2j6p_entry() //  [R1]
         { info_tbl: [(c2jhl,
                       label: lvl23_r2j6p_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jhl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jhm; else goto c2jhn;
       c2jhm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jhn: // global
           (_c2jhi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jhi::I64 == 0) goto c2jhk; else goto c2jhj;
       c2jhk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jhj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jhi::I64;
           R2 = lvl22_r2j6o_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.639636102 UTC

[section ""cstring" . lvl24_r2j6q_bytes" {
     lvl24_r2j6q_bytes:
         I8[] [68,97,115,104,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.640747706 UTC

[section ""data" . lvl25_r2j6r_closure" {
     lvl25_r2j6r_closure:
         const lvl25_r2j6r_info;
         const 0;
         const 0;
         const 0;
 },
 lvl25_r2j6r_entry() //  [R1]
         { info_tbl: [(c2jhu,
                       label: lvl25_r2j6r_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jhu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jhv; else goto c2jhw;
       c2jhv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jhw: // global
           (_c2jhr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jhr::I64 == 0) goto c2jht; else goto c2jhs;
       c2jht: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jhs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jhr::I64;
           R2 = lvl24_r2j6q_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.642164594 UTC

[section ""cstring" . lvl26_r2j6s_bytes" {
     lvl26_r2j6s_bytes:
         I8[] [79,112,101,110,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.643283539 UTC

[section ""data" . lvl27_r2j6t_closure" {
     lvl27_r2j6t_closure:
         const lvl27_r2j6t_info;
         const 0;
         const 0;
         const 0;
 },
 lvl27_r2j6t_entry() //  [R1]
         { info_tbl: [(c2jhD,
                       label: lvl27_r2j6t_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jhD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jhE; else goto c2jhF;
       c2jhE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jhF: // global
           (_c2jhA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jhA::I64 == 0) goto c2jhC; else goto c2jhB;
       c2jhC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jhB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jhA::I64;
           R2 = lvl26_r2j6s_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.644651636 UTC

[section ""cstring" . lvl28_r2j6u_bytes" {
     lvl28_r2j6u_bytes:
         I8[] [67,108,111,115,101,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.645944396 UTC

[section ""data" . lvl29_r2j6v_closure" {
     lvl29_r2j6v_closure:
         const lvl29_r2j6v_info;
         const 0;
         const 0;
         const 0;
 },
 lvl29_r2j6v_entry() //  [R1]
         { info_tbl: [(c2jhM,
                       label: lvl29_r2j6v_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jhM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jhN; else goto c2jhO;
       c2jhN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jhO: // global
           (_c2jhJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jhJ::I64 == 0) goto c2jhL; else goto c2jhK;
       c2jhL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jhK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jhJ::I64;
           R2 = lvl28_r2j6u_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.647386477 UTC

[section ""cstring" . lvl30_r2j6w_bytes" {
     lvl30_r2j6w_bytes:
         I8[] [73,110,105,116,105,97,108,81,117,111,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.648574891 UTC

[section ""data" . lvl31_r2j6x_closure" {
     lvl31_r2j6x_closure:
         const lvl31_r2j6x_info;
         const 0;
         const 0;
         const 0;
 },
 lvl31_r2j6x_entry() //  [R1]
         { info_tbl: [(c2jhV,
                       label: lvl31_r2j6x_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jhV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jhW; else goto c2jhX;
       c2jhW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jhX: // global
           (_c2jhS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jhS::I64 == 0) goto c2jhU; else goto c2jhT;
       c2jhU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jhT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jhS::I64;
           R2 = lvl30_r2j6w_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.650071532 UTC

[section ""cstring" . lvl32_r2j6y_bytes" {
     lvl32_r2j6y_bytes:
         I8[] [70,105,110,97,108,81,117,111,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.651128484 UTC

[section ""data" . lvl33_r2j6z_closure" {
     lvl33_r2j6z_closure:
         const lvl33_r2j6z_info;
         const 0;
         const 0;
         const 0;
 },
 lvl33_r2j6z_entry() //  [R1]
         { info_tbl: [(c2ji4,
                       label: lvl33_r2j6z_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ji4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ji5; else goto c2ji6;
       c2ji5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ji6: // global
           (_c2ji1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2ji1::I64 == 0) goto c2ji3; else goto c2ji2;
       c2ji3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2ji2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2ji1::I64;
           R2 = lvl32_r2j6y_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.652580178 UTC

[section ""cstring" . lvl34_r2j6A_bytes" {
     lvl34_r2j6A_bytes:
         I8[] [79,116,104,101,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.653680933 UTC

[section ""data" . lvl35_r2j6B_closure" {
     lvl35_r2j6B_closure:
         const lvl35_r2j6B_info;
         const 0;
         const 0;
         const 0;
 },
 lvl35_r2j6B_entry() //  [R1]
         { info_tbl: [(c2jid,
                       label: lvl35_r2j6B_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jid: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jie; else goto c2jif;
       c2jie: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jif: // global
           (_c2jia::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jia::I64 == 0) goto c2jic; else goto c2jib;
       c2jic: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jib: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jia::I64;
           R2 = lvl34_r2j6A_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.655144174 UTC

[section ""cstring" . lvl36_r2j6C_bytes" {
     lvl36_r2j6C_bytes:
         I8[] [77,97,116,104,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.656179438 UTC

[section ""data" . lvl37_r2j6D_closure" {
     lvl37_r2j6D_closure:
         const lvl37_r2j6D_info;
         const 0;
         const 0;
         const 0;
 },
 lvl37_r2j6D_entry() //  [R1]
         { info_tbl: [(c2jim,
                       label: lvl37_r2j6D_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jim: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jin; else goto c2jio;
       c2jin: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jio: // global
           (_c2jij::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jij::I64 == 0) goto c2jil; else goto c2jik;
       c2jil: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jik: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jij::I64;
           R2 = lvl36_r2j6C_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.657667076 UTC

[section ""cstring" . lvl38_r2j6E_bytes" {
     lvl38_r2j6E_bytes:
         I8[] [67,117,114,114,101,110,99,121,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.658714825 UTC

[section ""data" . lvl39_r2j6F_closure" {
     lvl39_r2j6F_closure:
         const lvl39_r2j6F_info;
         const 0;
         const 0;
         const 0;
 },
 lvl39_r2j6F_entry() //  [R1]
         { info_tbl: [(c2jiv,
                       label: lvl39_r2j6F_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jiv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jiw; else goto c2jix;
       c2jiw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jix: // global
           (_c2jis::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jis::I64 == 0) goto c2jiu; else goto c2jit;
       c2jiu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jit: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jis::I64;
           R2 = lvl38_r2j6E_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.660048819 UTC

[section ""cstring" . lvl40_r2j6G_bytes" {
     lvl40_r2j6G_bytes:
         I8[] [77,111,100,105,102,105,101,114,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.661022311 UTC

[section ""data" . lvl41_r2j6H_closure" {
     lvl41_r2j6H_closure:
         const lvl41_r2j6H_info;
         const 0;
         const 0;
         const 0;
 },
 lvl41_r2j6H_entry() //  [R1]
         { info_tbl: [(c2jiE,
                       label: lvl41_r2j6H_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jiE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jiF; else goto c2jiG;
       c2jiF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jiG: // global
           (_c2jiB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jiB::I64 == 0) goto c2jiD; else goto c2jiC;
       c2jiD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jiC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jiB::I64;
           R2 = lvl40_r2j6G_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.662097242 UTC

[section ""cstring" . lvl42_r2j6I_bytes" {
     lvl42_r2j6I_bytes:
         I8[] [79,116,104,101,114,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.662903752 UTC

[section ""data" . lvl43_r2j6J_closure" {
     lvl43_r2j6J_closure:
         const lvl43_r2j6J_info;
         const 0;
         const 0;
         const 0;
 },
 lvl43_r2j6J_entry() //  [R1]
         { info_tbl: [(c2jiN,
                       label: lvl43_r2j6J_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jiN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jiO; else goto c2jiP;
       c2jiO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jiP: // global
           (_c2jiK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jiK::I64 == 0) goto c2jiM; else goto c2jiL;
       c2jiM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jiL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jiK::I64;
           R2 = lvl42_r2j6I_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.663756397 UTC

[section ""cstring" . lvl44_r2j6K_bytes" {
     lvl44_r2j6K_bytes:
         I8[] [83,112,97,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.664466266 UTC

[section ""data" . lvl45_r2j6L_closure" {
     lvl45_r2j6L_closure:
         const lvl45_r2j6L_info;
         const 0;
         const 0;
         const 0;
 },
 lvl45_r2j6L_entry() //  [R1]
         { info_tbl: [(c2jiW,
                       label: lvl45_r2j6L_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jiW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jiX; else goto c2jiY;
       c2jiX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jiY: // global
           (_c2jiT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jiT::I64 == 0) goto c2jiV; else goto c2jiU;
       c2jiV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jiU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jiT::I64;
           R2 = lvl44_r2j6K_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.665423768 UTC

[section ""cstring" . lvl46_r2j6M_bytes" {
     lvl46_r2j6M_bytes:
         I8[] [76,105,110,101,83,101,112,97,114,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.666142675 UTC

[section ""data" . lvl47_r2j6N_closure" {
     lvl47_r2j6N_closure:
         const lvl47_r2j6N_info;
         const 0;
         const 0;
         const 0;
 },
 lvl47_r2j6N_entry() //  [R1]
         { info_tbl: [(c2jj5,
                       label: lvl47_r2j6N_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jj5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jj6; else goto c2jj7;
       c2jj6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jj7: // global
           (_c2jj2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jj2::I64 == 0) goto c2jj4; else goto c2jj3;
       c2jj4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jj3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jj2::I64;
           R2 = lvl46_r2j6M_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.667029516 UTC

[section ""cstring" . lvl48_r2j6O_bytes" {
     lvl48_r2j6O_bytes:
         I8[] [80,97,114,97,103,114,97,112,104,83,101,112,97,114,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.667768422 UTC

[section ""data" . lvl49_r2j6P_closure" {
     lvl49_r2j6P_closure:
         const lvl49_r2j6P_info;
         const 0;
         const 0;
         const 0;
 },
 lvl49_r2j6P_entry() //  [R1]
         { info_tbl: [(c2jje,
                       label: lvl49_r2j6P_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jje: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jjf; else goto c2jjg;
       c2jjf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jjg: // global
           (_c2jjb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jjb::I64 == 0) goto c2jjd; else goto c2jjc;
       c2jjd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jjc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jjb::I64;
           R2 = lvl48_r2j6O_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.669524862 UTC

[section ""cstring" . lvl50_r2j6Q_bytes" {
     lvl50_r2j6Q_bytes:
         I8[] [67,111,110,116,114,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.670304836 UTC

[section ""data" . lvl51_r2j6R_closure" {
     lvl51_r2j6R_closure:
         const lvl51_r2j6R_info;
         const 0;
         const 0;
         const 0;
 },
 lvl51_r2j6R_entry() //  [R1]
         { info_tbl: [(c2jjn,
                       label: lvl51_r2j6R_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jjn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jjo; else goto c2jjp;
       c2jjo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jjp: // global
           (_c2jjk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jjk::I64 == 0) goto c2jjm; else goto c2jjl;
       c2jjm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jjl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jjk::I64;
           R2 = lvl50_r2j6Q_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.67115262 UTC

[section ""cstring" . lvl52_r2j6S_bytes" {
     lvl52_r2j6S_bytes:
         I8[] [70,111,114,109,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.671872289 UTC

[section ""data" . lvl53_r2j6T_closure" {
     lvl53_r2j6T_closure:
         const lvl53_r2j6T_info;
         const 0;
         const 0;
         const 0;
 },
 lvl53_r2j6T_entry() //  [R1]
         { info_tbl: [(c2jjw,
                       label: lvl53_r2j6T_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jjw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jjx; else goto c2jjy;
       c2jjx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jjy: // global
           (_c2jjt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jjt::I64 == 0) goto c2jjv; else goto c2jju;
       c2jjv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jju: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jjt::I64;
           R2 = lvl52_r2j6S_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.672716202 UTC

[section ""cstring" . lvl54_r2j6U_bytes" {
     lvl54_r2j6U_bytes:
         I8[] [83,117,114,114,111,103,97,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.673510311 UTC

[section ""data" . lvl55_r2j6V_closure" {
     lvl55_r2j6V_closure:
         const lvl55_r2j6V_info;
         const 0;
         const 0;
         const 0;
 },
 lvl55_r2j6V_entry() //  [R1]
         { info_tbl: [(c2jjF,
                       label: lvl55_r2j6V_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jjF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jjG; else goto c2jjH;
       c2jjG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jjH: // global
           (_c2jjC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jjC::I64 == 0) goto c2jjE; else goto c2jjD;
       c2jjE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jjD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jjC::I64;
           R2 = lvl54_r2j6U_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.674410545 UTC

[section ""cstring" . lvl56_r2j6W_bytes" {
     lvl56_r2j6W_bytes:
         I8[] [80,114,105,118,97,116,101,85,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.675075998 UTC

[section ""data" . lvl57_r2j6X_closure" {
     lvl57_r2j6X_closure:
         const lvl57_r2j6X_info;
         const 0;
         const 0;
         const 0;
 },
 lvl57_r2j6X_entry() //  [R1]
         { info_tbl: [(c2jjO,
                       label: lvl57_r2j6X_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jjO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jjP; else goto c2jjQ;
       c2jjP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jjQ: // global
           (_c2jjL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jjL::I64 == 0) goto c2jjN; else goto c2jjM;
       c2jjN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jjM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jjL::I64;
           R2 = lvl56_r2j6W_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.675958983 UTC

[section ""cstring" . lvl58_r2j6Y_bytes" {
     lvl58_r2j6Y_bytes:
         I8[] [78,111,116,65,115,115,105,103,110,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.67663565 UTC

[section ""data" . lvl59_r2j6Z_closure" {
     lvl59_r2j6Z_closure:
         const lvl59_r2j6Z_info;
         const 0;
         const 0;
         const 0;
 },
 lvl59_r2j6Z_entry() //  [R1]
         { info_tbl: [(c2jjX,
                       label: lvl59_r2j6Z_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jjX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jjY; else goto c2jjZ;
       c2jjY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jjZ: // global
           (_c2jjU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jjU::I64 == 0) goto c2jjW; else goto c2jjV;
       c2jjW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jjV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jjU::I64;
           R2 = lvl58_r2j6Y_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.678534977 UTC

[section ""data" . GHC.Unicode.$w$cshowsPrec_closure" {
     GHC.Unicode.$w$cshowsPrec_closure:
         const GHC.Unicode.$w$cshowsPrec_info;
         const 0;
 },
 GHC.Unicode.$w$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c2jkD,
                       label: GHC.Unicode.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jkD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jkE; else goto c2jkF;
       c2jkE: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2jkF: // global
           I64[Sp - 16] = block_c2jk4_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2jm8; else goto c2jk5;
       u2jm8: // global
           call _c2jk4(R1) args: 0, res: 0, upd: 0;
       c2jk5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jk4() //  [R1]
         { info_tbl: [(c2jk4,
                       label: block_c2jk4_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jk4: // global
           _s2j7l::P64 = P64[Sp + 8];
           switch [0 .. 29] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto c2jk8;
               case 1 : goto c2jk9;
               case 2 : goto c2jka;
               case 3 : goto c2jkb;
               case 4 : goto c2jkc;
               case 5 : goto c2jkd;
               case 6 : goto c2jke;
               case 7 : goto c2jkf;
               case 8 : goto c2jkg;
               case 9 : goto c2jkh;
               case 10 : goto c2jki;
               case 11 : goto c2jkj;
               case 12 : goto c2jkk;
               case 13 : goto c2jkl;
               case 14 : goto c2jkm;
               case 15 : goto c2jkn;
               case 16 : goto c2jko;
               case 17 : goto c2jkp;
               case 18 : goto c2jkq;
               case 19 : goto c2jkr;
               case 20 : goto c2jks;
               case 21 : goto c2jkt;
               case 22 : goto c2jku;
               case 23 : goto c2jkv;
               case 24 : goto c2jkw;
               case 25 : goto c2jkx;
               case 26 : goto c2jky;
               case 27 : goto c2jkz;
               case 28 : goto c2jkA;
               case 29 : goto c2jkB;
           }
       c2jkB: // global
           R3 = _s2j7l::P64;
           R2 = lvl59_r2j6Z_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jkA: // global
           R3 = _s2j7l::P64;
           R2 = lvl57_r2j6X_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jkz: // global
           R3 = _s2j7l::P64;
           R2 = lvl55_r2j6V_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jky: // global
           R3 = _s2j7l::P64;
           R2 = lvl53_r2j6T_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jkx: // global
           R3 = _s2j7l::P64;
           R2 = lvl51_r2j6R_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jkw: // global
           R3 = _s2j7l::P64;
           R2 = lvl49_r2j6P_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jkv: // global
           R3 = _s2j7l::P64;
           R2 = lvl47_r2j6N_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jku: // global
           R3 = _s2j7l::P64;
           R2 = lvl45_r2j6L_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jkt: // global
           R3 = _s2j7l::P64;
           R2 = lvl43_r2j6J_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jks: // global
           R3 = _s2j7l::P64;
           R2 = lvl41_r2j6H_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jkr: // global
           R3 = _s2j7l::P64;
           R2 = lvl39_r2j6F_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jkq: // global
           R3 = _s2j7l::P64;
           R2 = lvl37_r2j6D_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jkp: // global
           R3 = _s2j7l::P64;
           R2 = lvl35_r2j6B_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jko: // global
           R3 = _s2j7l::P64;
           R2 = lvl33_r2j6z_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jkn: // global
           R3 = _s2j7l::P64;
           R2 = lvl31_r2j6x_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jkm: // global
           R3 = _s2j7l::P64;
           R2 = lvl29_r2j6v_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jkl: // global
           R3 = _s2j7l::P64;
           R2 = lvl27_r2j6t_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jkk: // global
           R3 = _s2j7l::P64;
           R2 = lvl25_r2j6r_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jkj: // global
           R3 = _s2j7l::P64;
           R2 = lvl23_r2j6p_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jki: // global
           R3 = _s2j7l::P64;
           R2 = lvl21_r2j6n_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jkh: // global
           R3 = _s2j7l::P64;
           R2 = lvl19_r2j6l_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jkg: // global
           R3 = _s2j7l::P64;
           R2 = lvl17_r2j6j_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jkf: // global
           R3 = _s2j7l::P64;
           R2 = lvl15_r2j6h_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jke: // global
           R3 = _s2j7l::P64;
           R2 = lvl13_r2j6f_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jkd: // global
           R3 = _s2j7l::P64;
           R2 = lvl11_r2j6d_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jkc: // global
           R3 = _s2j7l::P64;
           R2 = lvl9_r2j6b_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jkb: // global
           R3 = _s2j7l::P64;
           R2 = lvl7_r2j69_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jka: // global
           R3 = _s2j7l::P64;
           R2 = lvl5_r2j67_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jk9: // global
           R3 = _s2j7l::P64;
           R2 = lvl3_r2j65_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2jk8: // global
           R3 = _s2j7l::P64;
           R2 = lvl1_r2j63_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.681485706 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_closure" {
     GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_closure:
         const GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_info;
         const 0;
 },
 GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_entry() //  [R3, R4]
         { info_tbl: [(c2jme,
                       label: GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jme: // global
           _s2j7o::P64 = R3;
           R3 = R4;
           R2 = _s2j7o::P64;
           call GHC.Unicode.$w$cshowsPrec_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.682262667 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory1_closure" {
     GHC.Unicode.$fShowGeneralCategory1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.682959923 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_$cshow_closure" {
     GHC.Unicode.$fShowGeneralCategory_$cshow_closure:
         const GHC.Unicode.$fShowGeneralCategory_$cshow_info;
         const 0;
 },
 GHC.Unicode.$fShowGeneralCategory_$cshow_entry() //  [R2]
         { info_tbl: [(c2jml,
                       label: GHC.Unicode.$fShowGeneralCategory_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jml: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = R2;
           call GHC.Unicode.$w$cshowsPrec_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.683806974 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_$cshowList_closure" {
     GHC.Unicode.$fShowGeneralCategory_$cshowList_closure:
         const GHC.Unicode.$fShowGeneralCategory_$cshowList_info;
         const 0;
 },
 GHC.Unicode.$fShowGeneralCategory_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c2jms,
                       label: GHC.Unicode.$fShowGeneralCategory_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jms: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Unicode.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.684564179 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_closure" {
     GHC.Unicode.$fShowGeneralCategory_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_closure+3;
         const GHC.Unicode.$fShowGeneralCategory_$cshow_closure+1;
         const GHC.Unicode.$fShowGeneralCategory_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.685664612 UTC

[section ""data" . GHC.Unicode.$fEqGeneralCategory_$c==_closure" {
     GHC.Unicode.$fEqGeneralCategory_$c==_closure:
         const GHC.Unicode.$fEqGeneralCategory_$c==_info;
 },
 GHC.Unicode.$fEqGeneralCategory_$c==_entry() //  [R2, R3]
         { info_tbl: [(c2jmD,
                       label: GHC.Unicode.$fEqGeneralCategory_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jmD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jmJ; else goto c2jmK;
       c2jmJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEqGeneralCategory_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2jmK: // global
           I64[Sp - 16] = block_c2jmz_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2jn4; else goto c2jmA;
       u2jn4: // global
           call _c2jmz(R1) args: 0, res: 0, upd: 0;
       c2jmA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jmz() //  [R1]
         { info_tbl: [(c2jmz,
                       label: block_c2jmz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jmz: // global
           _s2j7w::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2jmI_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j7w::I64;
           if (R1 & 7 != 0) goto u2jn3; else goto c2jmP;
       u2jn3: // global
           call _c2jmI(R1) args: 0, res: 0, upd: 0;
       c2jmP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jmI() //  [R1]
         { info_tbl: [(c2jmI,
                       label: block_c2jmI_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jmI: // global
           R1 = I64[((I64[Sp + 8] == %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.687301568 UTC

[section ""data" . GHC.Unicode.$fEqGeneralCategory_$c/=_closure" {
     GHC.Unicode.$fEqGeneralCategory_$c/=_closure:
         const GHC.Unicode.$fEqGeneralCategory_$c/=_info;
 },
 GHC.Unicode.$fEqGeneralCategory_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c2jnd,
                       label: GHC.Unicode.$fEqGeneralCategory_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jnd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jnj; else goto c2jnk;
       c2jnj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEqGeneralCategory_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2jnk: // global
           I64[Sp - 16] = block_c2jn9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2jnI; else goto c2jna;
       u2jnI: // global
           call _c2jn9(R1) args: 0, res: 0, upd: 0;
       c2jna: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jn9() //  [R1]
         { info_tbl: [(c2jn9,
                       label: block_c2jn9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jn9: // global
           _s2j7D::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2jni_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j7D::I64;
           if (R1 & 7 != 0) goto u2jnH; else goto c2jnp;
       u2jnH: // global
           call _c2jni(R1) args: 0, res: 0, upd: 0;
       c2jnp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jni() //  [R1]
         { info_tbl: [(c2jni,
                       label: block_c2jni_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jni: // global
           if (I64[Sp + 8] == %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) goto c2jnE; else goto c2jnD;
       c2jnE: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jnD: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.688560836 UTC

[section ""data" . GHC.Unicode.$fEqGeneralCategory_closure" {
     GHC.Unicode.$fEqGeneralCategory_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Unicode.$fEqGeneralCategory_$c==_closure+2;
         const GHC.Unicode.$fEqGeneralCategory_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.689689519 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$ccompare_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c2jnR,
                       label: GHC.Unicode.$fOrdGeneralCategory_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jnR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jnX; else goto c2jnY;
       c2jnX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2jnY: // global
           I64[Sp - 16] = block_c2jnN_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2jos; else goto c2jnO;
       u2jos: // global
           call _c2jnN(R1) args: 0, res: 0, upd: 0;
       c2jnO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jnN() //  [R1]
         { info_tbl: [(c2jnN,
                       label: block_c2jnN_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jnN: // global
           _s2j7K::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2jnW_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j7K::I64;
           if (R1 & 7 != 0) goto u2jor; else goto c2jo3;
       u2jor: // global
           call _c2jnW(R1) args: 0, res: 0, upd: 0;
       c2jo3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jnW() //  [R1]
         { info_tbl: [(c2jnW,
                       label: block_c2jnW_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jnW: // global
           _s2j7K::I64 = I64[Sp + 8];
           _s2j7M::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           if (%MO_S_Ge_W64(_s2j7K::I64,
                            _s2j7M::I64)) goto c2jon; else goto c2joo;
       c2jon: // global
           if (_s2j7K::I64 == _s2j7M::I64) goto c2jol; else goto c2jok;
       c2jol: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jok: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2joo: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.691459496 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c<_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c<_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c<_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c<_entry() //  [R2, R3]
         { info_tbl: [(c2joB,
                       label: GHC.Unicode.$fOrdGeneralCategory_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2joB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2joH; else goto c2joI;
       c2joH: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2joI: // global
           I64[Sp - 16] = block_c2jox_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2jp2; else goto c2joy;
       u2jp2: // global
           call _c2jox(R1) args: 0, res: 0, upd: 0;
       c2joy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jox() //  [R1]
         { info_tbl: [(c2jox,
                       label: block_c2jox_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jox: // global
           _s2j7S::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2joG_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j7S::I64;
           if (R1 & 7 != 0) goto u2jp1; else goto c2joN;
       u2jp1: // global
           call _c2joG(R1) args: 0, res: 0, upd: 0;
       c2joN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2joG() //  [R1]
         { info_tbl: [(c2joG,
                       label: block_c2joG_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2joG: // global
           R1 = I64[(%MO_S_Lt_W64(I64[Sp + 8],
                                  %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.694128866 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c<=_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c<=_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c<=_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c2jpb,
                       label: GHC.Unicode.$fOrdGeneralCategory_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jpb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jph; else goto c2jpi;
       c2jph: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2jpi: // global
           I64[Sp - 16] = block_c2jp7_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2jpG; else goto c2jp8;
       u2jpG: // global
           call _c2jp7(R1) args: 0, res: 0, upd: 0;
       c2jp8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jp7() //  [R1]
         { info_tbl: [(c2jp7,
                       label: block_c2jp7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jp7: // global
           _s2j7Z::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2jpg_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j7Z::I64;
           if (R1 & 7 != 0) goto u2jpF; else goto c2jpn;
       u2jpF: // global
           call _c2jpg(R1) args: 0, res: 0, upd: 0;
       c2jpn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jpg() //  [R1]
         { info_tbl: [(c2jpg,
                       label: block_c2jpg_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jpg: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2jpB; else goto c2jpC;
       c2jpB: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jpC: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.696950722 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$cmax_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$cmax_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$cmax_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c2jpP,
                       label: GHC.Unicode.$fOrdGeneralCategory_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jpP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2jpV; else goto c2jpW;
       c2jpV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2jpW: // global
           I64[Sp - 24] = block_c2jpL_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2jqk; else goto c2jpM;
       u2jqk: // global
           call _c2jpL(R1) args: 0, res: 0, upd: 0;
       c2jpM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jpL() //  [R1]
         { info_tbl: [(c2jpL,
                       label: block_c2jpL_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jpL: // global
           _s2j86::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp - 8] = block_c2jpU_info;
           R1 = P64[Sp + 8];
           I64[Sp] = _s2j86::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jqj; else goto c2jq1;
       u2jqj: // global
           call _c2jpU(R1) args: 0, res: 0, upd: 0;
       c2jq1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jpU() //  [R1]
         { info_tbl: [(c2jpU,
                       label: block_c2jpU_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jpU: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2jqf; else goto c2jqg;
       c2jqf: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2jqg: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.698994208 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c>=_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c>=_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c>=_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c2jqt,
                       label: GHC.Unicode.$fOrdGeneralCategory_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jqt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jqz; else goto c2jqA;
       c2jqz: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2jqA: // global
           I64[Sp - 16] = block_c2jqp_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2jqY; else goto c2jqq;
       u2jqY: // global
           call _c2jqp(R1) args: 0, res: 0, upd: 0;
       c2jqq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jqp() //  [R1]
         { info_tbl: [(c2jqp,
                       label: block_c2jqp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jqp: // global
           _s2j8d::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2jqy_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j8d::I64;
           if (R1 & 7 != 0) goto u2jqX; else goto c2jqF;
       u2jqX: // global
           call _c2jqy(R1) args: 0, res: 0, upd: 0;
       c2jqF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jqy() //  [R1]
         { info_tbl: [(c2jqy,
                       label: block_c2jqy_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jqy: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2jqT; else goto c2jqU;
       c2jqT: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jqU: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.70061702 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c>_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c>_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c>_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c>_entry() //  [R2, R3]
         { info_tbl: [(c2jr7,
                       label: GHC.Unicode.$fOrdGeneralCategory_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jr7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jrd; else goto c2jre;
       c2jrd: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2jre: // global
           I64[Sp - 16] = block_c2jr3_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2jry; else goto c2jr4;
       u2jry: // global
           call _c2jr3(R1) args: 0, res: 0, upd: 0;
       c2jr4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jr3() //  [R1]
         { info_tbl: [(c2jr3,
                       label: block_c2jr3_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jr3: // global
           _s2j8k::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2jrc_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j8k::I64;
           if (R1 & 7 != 0) goto u2jrx; else goto c2jrj;
       u2jrx: // global
           call _c2jrc(R1) args: 0, res: 0, upd: 0;
       c2jrj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jrc() //  [R1]
         { info_tbl: [(c2jrc,
                       label: block_c2jrc_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jrc: // global
           R1 = I64[(%MO_S_Lt_W64(I64[Sp + 8],
                                  %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.702323508 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$cmin_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$cmin_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$cmin_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c2jrH,
                       label: GHC.Unicode.$fOrdGeneralCategory_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jrH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2jrN; else goto c2jrO;
       c2jrN: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2jrO: // global
           I64[Sp - 24] = block_c2jrD_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2jsc; else goto c2jrE;
       u2jsc: // global
           call _c2jrD(R1) args: 0, res: 0, upd: 0;
       c2jrE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jrD() //  [R1]
         { info_tbl: [(c2jrD,
                       label: block_c2jrD_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jrD: // global
           _s2j8r::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp - 8] = block_c2jrM_info;
           R1 = P64[Sp + 8];
           I64[Sp] = _s2j8r::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jsb; else goto c2jrT;
       u2jsb: // global
           call _c2jrM(R1) args: 0, res: 0, upd: 0;
       c2jrT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jrM() //  [R1]
         { info_tbl: [(c2jrM,
                       label: block_c2jrM_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jrM: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2js7; else goto c2js8;
       c2js7: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2js8: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.703685058 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_closure" {
     GHC.Unicode.$fOrdGeneralCategory_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Unicode.$fEqGeneralCategory_closure+1;
         const GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c<_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c<=_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c>_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c>=_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$cmax_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.704659381 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_info;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_entry() //  [R2]
         { info_tbl: [(c2jsl,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jsl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jsr; else goto c2jss;
       c2jsr: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jss: // global
           I64[Sp - 8] = block_c2jsh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jsD; else goto c2jsi;
       u2jsD: // global
           call _c2jsh(R1) args: 0, res: 0, upd: 0;
       c2jsi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jsh() //  [R1]
         { info_tbl: [(c2jsh,
                       label: block_c2jsh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jsh: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2jso() args: 0, res: 0, upd: 0;
     }
 },
 _c2jso() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jso: // global
           Hp = Hp + 16;
           _s2j8x::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2jsy; else goto c2jsx;
       c2jsy: // global
           HpAlloc = 16;
           I64[Sp] = block_c2jsn_info;
           R1 = _s2j8x::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2jsx: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2j8x::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2jsn() //  [R1]
         { info_tbl: [(c2jsn,
                       label: block_c2jsn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jsn: // global
           I64[Sp] = R1;
           call _c2jso() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.706536082 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_entry() //  [R2, R3]
         { info_tbl: [(c2jsM,
                       label: GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jsM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jt9; else goto c2jta;
       c2jt9: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2jta: // global
           I64[Sp - 16] = block_c2jsJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2jtr; else goto c2jsK;
       u2jtr: // global
           call _c2jsJ(R1) args: 0, res: 0, upd: 0;
       c2jsK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jsJ() //  [R1]
         { info_tbl: [(c2jsJ,
                       label: block_c2jsJ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jsJ: // global
           I64[Sp] = block_c2jsP_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u2jtq; else goto c2jsQ;
       u2jtq: // global
           call _c2jsP(R1) args: 0, res: 0, upd: 0;
       c2jsQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jsP() //  [R1]
         { info_tbl: [(c2jsP,
                       label: block_c2jsP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jsP: // global
           _s2j8E::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2jsX_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j8E::I64;
           if (R1 & 7 != 0) goto u2jts; else goto c2jsY;
       u2jts: // global
           call _c2jsX(R1) args: 0, res: 0, upd: 0;
       c2jsY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jsX() //  [R1]
         { info_tbl: [(c2jsX,
                       label: block_c2jsX_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jsX: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2jt3() args: 0, res: 0, upd: 0;
     }
 },
 _c2jt3() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jt3: // global
           Hp = Hp + 16;
           _s2j8G::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2jtl; else goto c2jtk;
       c2jtl: // global
           HpAlloc = 16;
           I64[Sp] = block_c2jt2_info;
           R1 = _s2j8G::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2jtk: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2j8G::I64 - I64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2jt2() //  [R1]
         { info_tbl: [(c2jt2,
                       label: block_c2jt2_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jt2: // global
           I64[Sp] = R1;
           call _c2jt3() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.708776494 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cinRange_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cinRange_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cinRange_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$cinRange_entry() //  [R2, R3]
         { info_tbl: [(c2jtC,
                       label: GHC.Unicode.$fIxGeneralCategory_$cinRange_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jtC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2jtW; else goto c2jtX;
       c2jtW: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2jtX: // global
           I64[Sp - 16] = block_c2jtz_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2juu; else goto c2jtA;
       u2juu: // global
           call _c2jtz(R1) args: 0, res: 0, upd: 0;
       c2jtA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jtz() //  [R1]
         { info_tbl: [(c2jtz,
                       label: block_c2jtz_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jtz: // global
           I64[Sp - 8] = block_c2jtF_info;
           _s2j8M::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2j8M::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jut; else goto c2jtG;
       u2jut: // global
           call _c2jtF(R1) args: 0, res: 0, upd: 0;
       c2jtG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jtF() //  [R1]
         { info_tbl: [(c2jtF,
                       label: block_c2jtF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jtF: // global
           _s2j8O::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2jtN_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j8O::I64;
           if (R1 & 7 != 0) goto u2juv; else goto c2jtO;
       u2juv: // global
           call _c2jtN(R1) args: 0, res: 0, upd: 0;
       c2jtO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jtN() //  [R1]
         { info_tbl: [(c2jtN,
                       label: block_c2jtN_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jtN: // global
           _s2j8Q::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2jtV_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2j8Q::I64;
           if (R1 & 7 != 0) goto u2juw; else goto c2ju7;
       u2juw: // global
           call _c2jtV(R1) args: 0, res: 0, upd: 0;
       c2ju7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jtV() //  [R1]
         { info_tbl: [(c2jtV,
                       label: block_c2jtV_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jtV: // global
           _s2j8S::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           if (%MO_S_Lt_W64(_s2j8S::I64,
                            I64[Sp + 8])) goto c2jul; else goto c2jum;
       c2jul: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jum: // global
           R1 = I64[(%MO_S_Le_W64(_s2j8S::I64,
                                  I64[Sp + 16]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.711574335 UTC

[section ""data" . GHC.Unicode.$w$crange_closure" {
     GHC.Unicode.$w$crange_closure:
         const GHC.Unicode.$w$crange_info;
 },
 sat_s2j97_entry() //  [R1]
         { info_tbl: [(c2jv8,
                       label: sat_s2j97_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jv8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jv9; else goto c2jva;
       c2jv9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jva: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2j93::I64 = I64[R1 + 32];
           if (_s2j93::I64 == I64[R1 + 24]) goto c2jv7; else goto c2jv6;
       c2jv7: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c2jv6: // global
           R2 = _s2j93::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s2j92_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2j94_entry() //  [R1]
         { info_tbl: [(c2jvh,
                       label: sat_s2j94_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jvh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jvi; else goto c2jvj;
       c2jvi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jvj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_s2j92_entry() //  [R1, R2]
         { info_tbl: [(c2jvl,
                       label: go_s2j92_info
                       rep:HeapRep 1 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jvl: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2jvp; else goto c2jvo;
       c2jvp: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jvo: // global
           _s2j90::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2j97_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2j90::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2j94_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Unicode.$w$crange_entry() //  [R2, R3]
         { info_tbl: [(c2jvq,
                       label: GHC.Unicode.$w$crange_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jvq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jvr; else goto c2jvs;
       c2jvr: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$w$crange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2jvs: // global
           I64[Sp - 16] = block_c2juB_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2jvN; else goto c2juC;
       u2jvN: // global
           call _c2juB(R1) args: 0, res: 0, upd: 0;
       c2juC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2juB() //  [R1]
         { info_tbl: [(c2juB,
                       label: block_c2juB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2juB: // global
           _s2j8Y::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2juJ_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j8Y::I64;
           if (R1 & 7 != 0) goto u2jvK; else goto c2juK;
       u2jvK: // global
           call _c2juJ(R1) args: 0, res: 0, upd: 0;
       c2juK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2juJ() //  [R1]
         { info_tbl: [(c2juJ,
                       label: block_c2juJ_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2juJ: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2juP() args: 0, res: 0, upd: 0;
     }
 },
 _c2juP() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2juP: // global
           Hp = Hp + 16;
           _s2j90::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2jvC; else goto c2jvB;
       c2jvC: // global
           HpAlloc = 16;
           I64[Sp] = block_c2juO_info;
           R1 = _s2j90::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2jvB: // global
           _s2j8Y::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s2j8Y::I64,
                            _s2j90::I64)) goto c2jvE; else goto c2jvF;
       c2jvE: // global
           I64[Hp - 8] = go_s2j92_info;
           I64[Hp] = _s2j90::I64;
           R2 = _s2j8Y::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call go_s2j92_entry(R2, R1) args: 8, res: 0, upd: 8;
       c2jvF: // global
           Hp = Hp - 16;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2juO() //  [R1]
         { info_tbl: [(c2juO,
                       label: block_c2juO_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2juO: // global
           I64[Sp] = R1;
           call _c2juP() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.714537599 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$crange_closure" {
     GHC.Unicode.$fIxGeneralCategory_$crange_closure:
         const GHC.Unicode.$fIxGeneralCategory_$crange_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$crange_entry() //  [R2]
         { info_tbl: [(c2jvV,
                       label: GHC.Unicode.$fIxGeneralCategory_$crange_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jvV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jvW; else goto c2jvX;
       c2jvW: // global
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jvX: // global
           I64[Sp - 8] = block_c2jvS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jw1; else goto c2jvT;
       u2jw1: // global
           call _c2jvS(R1) args: 0, res: 0, upd: 0;
       c2jvT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jvS() //  [R1]
         { info_tbl: [(c2jvS,
                       label: block_c2jvS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jvS: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$w$crange_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.716129606 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure" {
     GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure:
         const GHC.Unicode.$fIxGeneralCategory_$crangeSize_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$crangeSize_entry() //  [R2]
         { info_tbl: [(c2jw9,
                       label: GHC.Unicode.$fIxGeneralCategory_$crangeSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jw9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jwl; else goto c2jwm;
       c2jwl: // global
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jwm: // global
           I64[Sp - 8] = block_c2jw6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jwY; else goto c2jw7;
       u2jwY: // global
           call _c2jw6(R1) args: 0, res: 0, upd: 0;
       c2jw7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jw6() //  [R1]
         { info_tbl: [(c2jw6,
                       label: block_c2jw6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jw6: // global
           I64[Sp - 8] = block_c2jwc_info;
           _s2j9f::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2j9f::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jwX; else goto c2jwd;
       u2jwX: // global
           call _c2jwc(R1) args: 0, res: 0, upd: 0;
       c2jwd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jwc() //  [R1]
         { info_tbl: [(c2jwc,
                       label: block_c2jwc_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jwc: // global
           _s2j9h::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2jwk_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j9h::I64;
           if (R1 & 7 != 0) goto u2jwZ; else goto c2jws;
       u2jwZ: // global
           call _c2jwk(R1) args: 0, res: 0, upd: 0;
       c2jws: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jwk() //  [R1]
         { info_tbl: [(c2jwk,
                       label: block_c2jwk_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jwk: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2jwA() args: 0, res: 0, upd: 0;
     }
 },
 _c2jwA() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jwA: // global
           Hp = Hp + 16;
           _s2j9j::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2jwE; else goto c2jwD;
       c2jwE: // global
           HpAlloc = 16;
           I64[Sp] = block_c2jwz_info;
           R1 = _s2j9j::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2jwD: // global
           _s2j9h::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(_s2j9j::I64,
                            _s2j9h::I64)) goto c2jwI; else goto c2jwS;
       c2jwI: // global
           Hp = Hp - 16;
           R1 = GHC.Unicode.$fShowGeneralCategory1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jwS: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2j9j::I64 - _s2j9h::I64 + 1;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2jwz() //  [R1]
         { info_tbl: [(c2jwz,
                       label: block_c2jwz_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jwz: // global
           I64[Sp] = R1;
           call _c2jwA() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.718642142 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_entry() //  [R2]
         { info_tbl: [(c2jx9,
                       label: GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jx9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jxz; else goto c2jxA;
       c2jxz: // global
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jxA: // global
           I64[Sp - 8] = block_c2jx6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jxR; else goto c2jx7;
       u2jxR: // global
           call _c2jx6(R1) args: 0, res: 0, upd: 0;
       c2jx7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jx6() //  [R1]
         { info_tbl: [(c2jx6,
                       label: block_c2jx6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jx6: // global
           I64[Sp - 8] = block_c2jxc_info;
           _s2j9q::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2j9q::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jxQ; else goto c2jxd;
       u2jxQ: // global
           call _c2jxc(R1) args: 0, res: 0, upd: 0;
       c2jxd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jxc() //  [R1]
         { info_tbl: [(c2jxc,
                       label: block_c2jxc_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jxc: // global
           _s2j9s::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2jxk_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j9s::I64;
           if (R1 & 7 != 0) goto u2jxS; else goto c2jxl;
       u2jxS: // global
           call _c2jxk(R1) args: 0, res: 0, upd: 0;
       c2jxl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jxk() //  [R1]
         { info_tbl: [(c2jxk,
                       label: block_c2jxk_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jxk: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2jxq() args: 0, res: 0, upd: 0;
     }
 },
 _c2jxq() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jxq: // global
           Hp = Hp + 16;
           _s2j9u::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2jxL; else goto c2jxK;
       c2jxL: // global
           HpAlloc = 16;
           I64[Sp] = block_c2jxp_info;
           R1 = _s2j9u::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2jxK: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2j9u::I64 - I64[Sp + 8] + 1;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2jxp() //  [R1]
         { info_tbl: [(c2jxp,
                       label: block_c2jxp_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jxp: // global
           I64[Sp] = R1;
           call _c2jxq() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.721297927 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cindex_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cindex_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cindex_info;
         const 0;
 },
 GHC.Unicode.$fIxGeneralCategory_$cindex_entry() //  [R2, R3]
         { info_tbl: [(c2jy2,
                       label: GHC.Unicode.$fIxGeneralCategory_$cindex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jy2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2jym; else goto c2jyn;
       c2jym: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2jyn: // global
           I64[Sp - 16] = block_c2jxZ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2jz8; else goto c2jy0;
       u2jz8: // global
           call _c2jxZ(R1) args: 0, res: 0, upd: 0;
       c2jy0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jxZ() //  [R1]
         { info_tbl: [(c2jxZ,
                       label: block_c2jxZ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jxZ: // global
           I64[Sp - 8] = block_c2jy5_info;
           _s2j9B::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2j9B::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jz7; else goto c2jy6;
       u2jz7: // global
           call _c2jy5(R1) args: 0, res: 0, upd: 0;
       c2jy6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jy5() //  [R1]
         { info_tbl: [(c2jy5,
                       label: block_c2jy5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jy5: // global
           _s2j9D::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2jyd_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j9D::I64;
           if (R1 & 7 != 0) goto u2jz9; else goto c2jye;
       u2jz9: // global
           call _c2jyd(R1) args: 0, res: 0, upd: 0;
       c2jye: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jyd() //  [R1]
         { info_tbl: [(c2jyd,
                       label: block_c2jyd_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jyd: // global
           _s2j9F::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2jyl_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2j9F::I64;
           if (R1 & 7 != 0) goto u2jza; else goto c2jyx;
       u2jza: // global
           call _c2jyl(R1) args: 0, res: 0, upd: 0;
       c2jyx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jyl() //  [R1]
         { info_tbl: [(c2jyl,
                       label: block_c2jyl_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jyl: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2jyF() args: 0, res: 0, upd: 0;
     }
 },
 _c2jyF() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jyF: // global
           Hp = Hp + 16;
           _s2j9H::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2jyJ; else goto c2jyI;
       c2jyJ: // global
           HpAlloc = 16;
           I64[Sp] = block_c2jyE_info;
           R1 = _s2j9H::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2jyI: // global
           _s2j9D::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(_s2j9H::I64,
                            _s2j9D::I64)) goto c2jyT; else goto c2jz1;
       c2jz1: // global
           if (%MO_S_Gt_W64(_s2j9H::I64,
                            I64[Sp + 16])) goto c2jyT; else goto c2jz0;
       c2jyT: // global
           Hp = Hp - 16;
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2jz0: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2j9H::I64 - _s2j9D::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2jyE() //  [R1]
         { info_tbl: [(c2jyE,
                       label: block_c2jyE_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jyE: // global
           I64[Sp] = R1;
           call _c2jyF() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.724643642 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_closure" {
     GHC.Unicode.$fIxGeneralCategory_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Unicode.$fOrdGeneralCategory_closure+1;
         const GHC.Unicode.$fIxGeneralCategory_$crange_closure+1;
         const GHC.Unicode.$fIxGeneralCategory_$cindex_closure+2;
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure+2;
         const GHC.Unicode.$fIxGeneralCategory_$cinRange_closure+2;
         const GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure+1;
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.725465298 UTC

[section ""cstring" . GHC.Unicode.$trModule4_bytes" {
     GHC.Unicode.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.726270276 UTC

[section ""data" . loc_r2j70_closure" {
     loc_r2j70_closure:
         const loc_r2j70_info;
         const 0;
         const 0;
         const 0;
 },
 loc_r2j70_entry() //  [R1]
         { info_tbl: [(c2jzj,
                       label: loc_r2j70_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jzj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jzk; else goto c2jzl;
       c2jzk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jzl: // global
           (_c2jzg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jzg::I64 == 0) goto c2jzi; else goto c2jzh;
       c2jzi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jzh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jzg::I64;
           R2 = GHC.Unicode.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.727150789 UTC

[section ""cstring" . GHC.Unicode.$trModule2_bytes" {
     GHC.Unicode.$trModule2_bytes:
         I8[] [71,72,67,46,85,110,105,99,111,100,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.727851306 UTC

[section ""data" . loc1_r2j71_closure" {
     loc1_r2j71_closure:
         const loc1_r2j71_info;
         const 0;
         const 0;
         const 0;
 },
 loc1_r2j71_entry() //  [R1]
         { info_tbl: [(c2jzs,
                       label: loc1_r2j71_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jzs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jzt; else goto c2jzu;
       c2jzt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jzu: // global
           (_c2jzp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jzp::I64 == 0) goto c2jzr; else goto c2jzq;
       c2jzr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jzq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jzp::I64;
           R2 = GHC.Unicode.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.728762943 UTC

[section ""cstring" . loc2_r2j72_bytes" {
     loc2_r2j72_bytes:
         I8[] [46,47,71,72,67,47,85,110,105,99,111,100,101,46,104,115]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.729533227 UTC

[section ""data" . loc3_r2j73_closure" {
     loc3_r2j73_closure:
         const loc3_r2j73_info;
         const 0;
         const 0;
         const 0;
 },
 loc3_r2j73_entry() //  [R1]
         { info_tbl: [(c2jzB,
                       label: loc3_r2j73_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jzB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jzC; else goto c2jzD;
       c2jzC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jzD: // global
           (_c2jzy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jzy::I64 == 0) goto c2jzA; else goto c2jzz;
       c2jzA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jzz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jzy::I64;
           R2 = loc2_r2j72_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.730450396 UTC

[section ""data" . loc4_r2j74_closure" {
     loc4_r2j74_closure:
         const GHC.Types.I#_con_info;
         const 135;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.731005391 UTC

[section ""data" . loc5_r2j75_closure" {
     loc5_r2j75_closure:
         const GHC.Types.I#_con_info;
         const 20;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.731551647 UTC

[section ""data" . loc6_r2j76_closure" {
     loc6_r2j76_closure:
         const GHC.Types.I#_con_info;
         const 24;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.732103636 UTC

[section ""cstring" . $dIP_r2j77_bytes" {
     $dIP_r2j77_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.732912279 UTC

[section ""data" . $dIP1_r2j78_closure" {
     $dIP1_r2j78_closure:
         const $dIP1_r2j78_info;
         const 0;
         const 0;
         const 0;
 },
 $dIP1_r2j78_entry() //  [R1]
         { info_tbl: [(c2jzK,
                       label: $dIP1_r2j78_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jzK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jzL; else goto c2jzM;
       c2jzL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jzM: // global
           (_c2jzH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jzH::I64 == 0) goto c2jzJ; else goto c2jzI;
       c2jzJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jzI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jzH::I64;
           R2 = $dIP_r2j77_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.73388699 UTC

[section ""data" . $dIP2_r2j79_closure" {
     $dIP2_r2j79_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const loc_r2j70_closure;
         const loc1_r2j71_closure;
         const loc3_r2j73_closure;
         const loc4_r2j74_closure+1;
         const loc5_r2j75_closure+1;
         const loc4_r2j74_closure+1;
         const loc6_r2j76_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.734522071 UTC

[section ""data" . $dIP3_r2j7a_closure" {
     $dIP3_r2j7a_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const $dIP1_r2j78_closure;
         const $dIP2_r2j79_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.735105357 UTC

[section ""cstring" . lvl60_r2j7b_bytes" {
     lvl60_r2j7b_bytes:
         I8[] [41,32,105,115,32,111,117,116,115,105,100,101,32,111,102,32,101,110,117,109,101,114,97,116,105,111,110,39,115,32,114,97,110,103,101,32,40,48,44]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.735659689 UTC

[section ""cstring" . lvl61_r2j7c_bytes" {
     lvl61_r2j7c_bytes:
         I8[] [41]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.736409486 UTC

[section ""data" . lvl62_r2j7d_closure" {
     lvl62_r2j7d_closure:
         const lvl62_r2j7d_info;
         const 0;
         const 0;
         const 0;
 },
 lvl62_r2j7d_entry() //  [R1]
         { info_tbl: [(c2jzT,
                       label: lvl62_r2j7d_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jzT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jzU; else goto c2jzV;
       c2jzU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jzV: // global
           (_c2jzQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jzQ::I64 == 0) goto c2jzS; else goto c2jzR;
       c2jzS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jzR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jzQ::I64;
           R2 = lvl61_r2j7c_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.737907023 UTC

[section ""data" . lvl63_r2j7e_closure" {
     lvl63_r2j7e_closure:
         const lvl63_r2j7e_info;
         const 0;
         const 0;
         const 0;
 },
 lvl63_r2j7e_entry() //  [R1]
         { info_tbl: [(c2jA5,
                       label: lvl63_r2j7e_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jA5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2jA6; else goto c2jA7;
       c2jA6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jA7: // global
           (_c2jzZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jzZ::I64 == 0) goto c2jA1; else goto c2jA0;
       c2jA1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jA0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jzZ::I64;
           I64[Sp - 24] = block_c2jA2_info;
           R4 = lvl62_r2j7d_closure;
           R3 = 29;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c2jA2() //  [R1, R2]
         { info_tbl: [(c2jA2,
                       label: block_c2jA2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jA2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2jAa; else goto c2jA9;
       c2jAa: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c2jA9: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.739296082 UTC

[section ""data" . lvl64_r2j7f_closure" {
     lvl64_r2j7f_closure:
         const lvl64_r2j7f_info;
         const 0;
         const 0;
         const 0;
 },
 lvl64_r2j7f_entry() //  [R1]
         { info_tbl: [(c2jAh,
                       label: lvl64_r2j7f_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jAh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jAi; else goto c2jAj;
       c2jAi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jAj: // global
           (_c2jAe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jAe::I64 == 0) goto c2jAg; else goto c2jAf;
       c2jAg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jAf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jAe::I64;
           R3 = lvl63_r2j7e_closure;
           R2 = lvl60_r2j7b_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.740171846 UTC

[section ""cstring" . lvl65_r2j7g_bytes" {
     lvl65_r2j7g_bytes:
         I8[] [116,111,69,110,117,109,123,71,101,110,101,114,97,108,67,97,116,101,103,111,114,121,125,58,32,116,97,103,32,40]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.741191665 UTC

[section ""data" . GHC.Unicode.$wlvl_closure" {
     GHC.Unicode.$wlvl_closure:
         const GHC.Unicode.$wlvl_info;
         const 0;
 },
 sat_s2j9S_entry() //  [R1]
         { info_tbl: [(c2jAv,
                       label: sat_s2j9S_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jAv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2jAw; else goto c2jAx;
       c2jAw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jAx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c2jAs_info;
           R4 = lvl64_r2j7f_closure;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c2jAs() //  [R1, R2]
         { info_tbl: [(c2jAs,
                       label: block_c2jAs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jAs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2jAA; else goto c2jAz;
       c2jAA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c2jAz: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Unicode.$wlvl_entry() //  [R2]
         { info_tbl: [(c2jAD,
                       label: GHC.Unicode.$wlvl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jAD: // global
           _s2j9O::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c2jAE; else goto c2jAF;
       c2jAF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2jAH; else goto c2jAG;
       c2jAH: // global
           HpAlloc = 24;
           goto c2jAE;
       c2jAE: // global
           R2 = _s2j9O::I64;
           R1 = GHC.Unicode.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jAG: // global
           I64[Hp - 16] = sat_s2j9S_info;
           I64[Hp] = _s2j9O::I64;
           I64[Sp - 8] = block_c2jAB_info;
           R3 = Hp - 16;
           R2 = lvl65_r2j7g_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c2jAB() //  [R1]
         { info_tbl: [(c2jAB,
                       label: block_c2jAB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jAB: // global
           R3 = R1;
           R2 = $dIP3_r2j7a_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.743061597 UTC

[section ""data" . GHC.Unicode.$w$ctoEnum_closure" {
     GHC.Unicode.$w$ctoEnum_closure:
         const GHC.Unicode.$w$ctoEnum_info;
         const 0;
 },
 GHC.Unicode.$w$ctoEnum_entry() //  [R2]
         { info_tbl: [(c2jAU,
                       label: GHC.Unicode.$w$ctoEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jAU: // global
           _s2j9U::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto c2jB2; else goto c2jAT;
       c2jAT: // global
           if (%MO_S_Gt_W64(_s2j9U::I64, 29)) goto c2jB2; else goto c2jB3;
       c2jB2: // global
           R2 = _s2j9U::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2jB3: // global
           R1 = I64[(_s2j9U::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.744136816 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_info;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_entry() //  [R2]
         { info_tbl: [(c2jBb,
                       label: GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jBb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jBc; else goto c2jBd;
       c2jBc: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jBd: // global
           I64[Sp - 8] = block_c2jB8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jBh; else goto c2jB9;
       u2jBh: // global
           call _c2jB8(R1) args: 0, res: 0, upd: 0;
       c2jB9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jB8() //  [R1]
         { info_tbl: [(c2jB8,
                       label: block_c2jB8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jB8: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$w$ctoEnum_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.746596084 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_go_closure" {
     GHC.Unicode.$fEnumGeneralCategory_go_closure:
         const GHC.Unicode.$fEnumGeneralCategory_go_info;
 },
 sat_s2ja4_entry() //  [R1]
         { info_tbl: [(c2jBu,
                       label: sat_s2ja4_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jBu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jBv; else goto c2jBw;
       c2jBv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jBw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2ja2::I64 = I64[R1 + 16];
           if (_s2ja2::I64 != 29) goto c2jBs; else goto c2jBt;
       c2jBs: // global
           R2 = _s2ja2::I64 + 1;
           Sp = Sp - 16;
           call GHC.Unicode.$fEnumGeneralCategory_go_entry(R2) args: 24, res: 0, upd: 24;
       c2jBt: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2ja1_entry() //  [R1]
         { info_tbl: [(c2jBD,
                       label: sat_s2ja1_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jBD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jBE; else goto c2jBF;
       c2jBE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jBF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Unicode.$fEnumGeneralCategory_go_entry() //  [R2]
         { info_tbl: [(c2jBH,
                       label: GHC.Unicode.$fEnumGeneralCategory_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jBH: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c2jBL; else goto c2jBK;
       c2jBL: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jBK: // global
           I64[Hp - 64] = sat_s2ja4_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2ja1_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.748311082 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_info;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_entry() //  [R2]
         { info_tbl: [(c2jBU,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jBU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jBV; else goto c2jBW;
       c2jBV: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jBW: // global
           I64[Sp - 8] = block_c2jBQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jCb; else goto c2jBR;
       u2jCb: // global
           call _c2jBQ(R1) args: 0, res: 0, upd: 0;
       c2jBR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jBQ() //  [R1]
         { info_tbl: [(c2jBQ,
                       label: block_c2jBQ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jBQ: // global
           _s2ja7::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           if (%MO_S_Le_W64(_s2ja7::I64, 29)) goto c2jC8; else goto c2jC9;
       c2jC8: // global
           R2 = _s2ja7::I64;
           Sp = Sp + 8;
           call GHC.Unicode.$fEnumGeneralCategory_go_entry(R2) args: 8, res: 0, upd: 8;
       c2jC9: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.754546651 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_info;
 },
 sat_s2jaq_entry() //  [R1]
         { info_tbl: [(c2jD3,
                       label: sat_s2jaq_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jD3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jD4; else goto c2jD5;
       c2jD4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jD5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s2jal_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jao_entry() //  [R1]
         { info_tbl: [(c2jDa,
                       label: sat_s2jao_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jDa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jDb; else goto c2jDc;
       c2jDb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jDc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jar_entry() //  [R1]
         { info_tbl: [(c2jDi,
                       label: sat_s2jar_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jDi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jDj; else goto c2jDk;
       c2jDj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jDk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s2jal_entry() //  [R1, R2]
         { info_tbl: [(c2jDo,
                       label: go_dn_s2jal_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jDo: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2jDs; else goto c2jDr;
       c2jDs: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jDr: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c2jDm; else goto c2jDn;
       c2jDm: // global
           _s2jaj::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jaq_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jaj::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jao_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jDn: // global
           I64[Hp - 80] = sat_s2jar_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2jDu::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2jDu::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2jas_entry() //  [R1]
         { info_tbl: [(c2jDv,
                       label: sat_s2jas_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jDv: // global
           _s2jas::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2jDw; else goto c2jDx;
       c2jDx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2jDz; else goto c2jDy;
       c2jDz: // global
           HpAlloc = 24;
           goto c2jDw;
       c2jDw: // global
           R1 = _s2jas::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jDy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jas::P64;
           _s2jae::I64 = I64[_s2jas::P64 + 24];
           _s2jaj::I64 = _s2jae::I64 - I64[_s2jas::P64 + 16];
           I64[Hp - 16] = go_dn_s2jal_info;
           I64[Hp - 8] = _s2jaj::I64;
           I64[Hp] = 29 - _s2jaj::I64;
           R2 = _s2jae::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s2jal_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jai_entry() //  [R1]
         { info_tbl: [(c2jDE,
                       label: sat_s2jai_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jDE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jDF; else goto c2jDG;
       c2jDF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jDG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jau_entry() //  [R1]
         { info_tbl: [(c2jDP,
                       label: sat_s2jau_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jDP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jDQ; else goto c2jDR;
       c2jDQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jDR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaE_entry() //  [R1]
         { info_tbl: [(c2jEk,
                       label: sat_s2jaE_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jEk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jEl; else goto c2jEm;
       c2jEl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jEm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s2jaz_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaC_entry() //  [R1]
         { info_tbl: [(c2jEr,
                       label: sat_s2jaC_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jEr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jEs; else goto c2jEt;
       c2jEs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jEt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaF_entry() //  [R1]
         { info_tbl: [(c2jEz,
                       label: sat_s2jaF_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jEz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jEA; else goto c2jEB;
       c2jEA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jEB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s2jaz_entry() //  [R1, R2]
         { info_tbl: [(c2jEF,
                       label: go_up_s2jaz_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jEF: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2jEJ; else goto c2jEI;
       c2jEJ: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jEI: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c2jED; else goto c2jEE;
       c2jED: // global
           _s2jax::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jaE_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jax::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jaC_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jEE: // global
           I64[Hp - 80] = sat_s2jaF_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2jEL::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2jEL::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2jaG_entry() //  [R1]
         { info_tbl: [(c2jEM,
                       label: sat_s2jaG_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jEM: // global
           _s2jaG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2jEN; else goto c2jEO;
       c2jEO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2jEQ; else goto c2jEP;
       c2jEQ: // global
           HpAlloc = 24;
           goto c2jEN;
       c2jEN: // global
           R1 = _s2jaG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jEP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jaG::P64;
           _s2jae::I64 = I64[_s2jaG::P64 + 24];
           _s2jax::I64 = _s2jae::I64 - I64[_s2jaG::P64 + 16];
           I64[Hp - 16] = go_up_s2jaz_info;
           I64[Hp - 8] = _s2jax::I64;
           I64[Hp] = 29 - _s2jax::I64;
           R2 = _s2jae::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s2jaz_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaw_entry() //  [R1]
         { info_tbl: [(c2jEV,
                       label: sat_s2jaw_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jEV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jEW; else goto c2jEX;
       c2jEW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jEX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaI_entry() //  [R1]
         { info_tbl: [(c2jF6,
                       label: sat_s2jaI_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jF6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jF7; else goto c2jF8;
       c2jF7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jF8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaT_entry() //  [R1]
         { info_tbl: [(c2jFE,
                       label: sat_s2jaT_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jFE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jFF; else goto c2jFG;
       c2jFF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jFG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s2jaO_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaR_entry() //  [R1]
         { info_tbl: [(c2jFL,
                       label: sat_s2jaR_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jFL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jFM; else goto c2jFN;
       c2jFM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jFN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaU_entry() //  [R1]
         { info_tbl: [(c2jFT,
                       label: sat_s2jaU_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jFT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jFU; else goto c2jFV;
       c2jFU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jFV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s2jaO_entry() //  [R1, R2]
         { info_tbl: [(c2jFZ,
                       label: go_dn_s2jaO_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jFZ: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2jG3; else goto c2jG2;
       c2jG3: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jG2: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c2jFX; else goto c2jFY;
       c2jFX: // global
           _s2jaM::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jaT_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jaM::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jaR_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jFY: // global
           I64[Hp - 80] = sat_s2jaU_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2jG5::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2jG5::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2jaV_entry() //  [R1]
         { info_tbl: [(c2jG6,
                       label: sat_s2jaV_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jG6: // global
           _s2jaV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2jG7; else goto c2jG8;
       c2jG8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2jGa; else goto c2jG9;
       c2jGa: // global
           HpAlloc = 24;
           goto c2jG7;
       c2jG7: // global
           R1 = _s2jaV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jG9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jaV::P64;
           _s2jae::I64 = I64[_s2jaV::P64 + 24];
           _s2jaM::I64 = _s2jae::I64 - I64[_s2jaV::P64 + 16];
           I64[Hp - 16] = go_dn_s2jaO_info;
           I64[Hp - 8] = _s2jaM::I64;
           I64[Hp] = 0 - _s2jaM::I64;
           R2 = _s2jae::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s2jaO_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaL_entry() //  [R1]
         { info_tbl: [(c2jGf,
                       label: sat_s2jaL_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jGf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jGg; else goto c2jGh;
       c2jGg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jGh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaX_entry() //  [R1]
         { info_tbl: [(c2jGq,
                       label: sat_s2jaX_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jGq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jGr; else goto c2jGs;
       c2jGr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jGs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jb7_entry() //  [R1]
         { info_tbl: [(c2jGV,
                       label: sat_s2jb7_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jGV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jGW; else goto c2jGX;
       c2jGW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jGX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s2jb2_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jb5_entry() //  [R1]
         { info_tbl: [(c2jH2,
                       label: sat_s2jb5_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jH2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jH3; else goto c2jH4;
       c2jH3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jH4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jb8_entry() //  [R1]
         { info_tbl: [(c2jHa,
                       label: sat_s2jb8_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jHa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jHb; else goto c2jHc;
       c2jHb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jHc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s2jb2_entry() //  [R1, R2]
         { info_tbl: [(c2jHg,
                       label: go_up_s2jb2_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jHg: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2jHk; else goto c2jHj;
       c2jHk: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jHj: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c2jHe; else goto c2jHf;
       c2jHe: // global
           _s2jb0::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jb7_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jb0::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jb5_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jHf: // global
           I64[Hp - 80] = sat_s2jb8_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2jHm::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2jHm::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2jb9_entry() //  [R1]
         { info_tbl: [(c2jHn,
                       label: sat_s2jb9_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jHn: // global
           _s2jb9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2jHo; else goto c2jHp;
       c2jHp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2jHr; else goto c2jHq;
       c2jHr: // global
           HpAlloc = 24;
           goto c2jHo;
       c2jHo: // global
           R1 = _s2jb9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jHq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jb9::P64;
           _s2jae::I64 = I64[_s2jb9::P64 + 24];
           _s2jb0::I64 = _s2jae::I64 - I64[_s2jb9::P64 + 16];
           I64[Hp - 16] = go_up_s2jb2_info;
           I64[Hp - 8] = _s2jb0::I64;
           I64[Hp] = 0 - _s2jb0::I64;
           R2 = _s2jae::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s2jb2_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaZ_entry() //  [R1]
         { info_tbl: [(c2jHw,
                       label: sat_s2jaZ_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jHw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jHx; else goto c2jHy;
       c2jHx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jHy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jbb_entry() //  [R1]
         { info_tbl: [(c2jHH,
                       label: sat_s2jbb_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jHH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jHI; else goto c2jHJ;
       c2jHI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jHJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c2jHK,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jHK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jHL; else goto c2jHM;
       c2jHL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2jHM: // global
           I64[Sp - 16] = block_c2jCg_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2jIJ; else goto c2jCh;
       u2jIJ: // global
           call _c2jCg(R1) args: 0, res: 0, upd: 0;
       c2jCh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jCg() //  [R1]
         { info_tbl: [(c2jCg,
                       label: block_c2jCg_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jCg: // global
           _s2jac::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2jCo_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2jac::I64;
           if (R1 & 7 != 0) goto u2jIG; else goto c2jCp;
       u2jIG: // global
           call _c2jCo(R1) args: 0, res: 0, upd: 0;
       c2jCp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jCo() //  [R1]
         { info_tbl: [(c2jCo,
                       label: block_c2jCo_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jCo: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2jCu() args: 0, res: 0, upd: 0;
     }
 },
 _c2jCu() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jCu: // global
           Hp = Hp + 80;
           _s2jae::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2jHW; else goto c2jHV;
       c2jHW: // global
           HpAlloc = 80;
           I64[Sp] = block_c2jCt_info;
           R1 = _s2jae::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2jHV: // global
           _s2jac::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s2jac::I64,
                            _s2jae::I64)) goto c2jIh; else goto c2jIB;
       c2jIh: // global
           if (%MO_S_Lt_W64(_s2jae::I64,
                            _s2jac::I64)) goto c2jI6; else goto c2jIf;
       c2jI6: // global
           if (%MO_S_Le_W64(29, _s2jae::I64)) goto c2jHZ; else goto c2jI4;
       c2jHZ: // global
           I64[Hp - 72] = sat_s2jas_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = _s2jae::I64;
           I64[Hp - 40] = sat_s2jai_info;
           I64[Hp - 24] = _s2jac::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jI4: // global
           if (%MO_S_Gt_W64(29, _s2jac::I64)) goto c2jIy; else goto c2jI2;
       c2jI2: // global
           I64[Hp - 72] = sat_s2jau_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2jI0::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2jI0::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jIf: // global
           if (%MO_S_Ge_W64(29, _s2jae::I64)) goto c2jI9; else goto c2jIe;
       c2jI9: // global
           I64[Hp - 72] = sat_s2jaG_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = _s2jae::I64;
           I64[Hp - 40] = sat_s2jaw_info;
           I64[Hp - 24] = _s2jac::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jIe: // global
           if (%MO_S_Lt_W64(29, _s2jac::I64)) goto c2jIy; else goto c2jIc;
       c2jIc: // global
           I64[Hp - 72] = sat_s2jaI_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2jIa::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2jIa::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jIB: // global
           if (%MO_S_Lt_W64(_s2jae::I64,
                            _s2jac::I64)) goto c2jIr; else goto c2jIA;
       c2jIr: // global
           if (%MO_S_Le_W64(0, _s2jae::I64)) goto c2jIk; else goto c2jIp;
       c2jIk: // global
           I64[Hp - 72] = sat_s2jaV_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = _s2jae::I64;
           I64[Hp - 40] = sat_s2jaL_info;
           I64[Hp - 24] = _s2jac::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jIp: // global
           if (%MO_S_Gt_W64(0, _s2jac::I64)) goto c2jIy; else goto c2jIn;
       c2jIn: // global
           I64[Hp - 72] = sat_s2jaX_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2jIl::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2jIl::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jIA: // global
           if (%MO_S_Ge_W64(0, _s2jae::I64)) goto c2jIu; else goto c2jIz;
       c2jIu: // global
           I64[Hp - 72] = sat_s2jb9_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = _s2jae::I64;
           I64[Hp - 40] = sat_s2jaZ_info;
           I64[Hp - 24] = _s2jac::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jIz: // global
           if (%MO_S_Lt_W64(0, _s2jac::I64)) goto c2jIy; else goto c2jIx;
       c2jIy: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jIx: // global
           I64[Hp - 72] = sat_s2jbb_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2jIv::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2jIv::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2jCt() //  [R1]
         { info_tbl: [(c2jCt,
                       label: block_c2jCt_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jCt: // global
           I64[Sp] = R1;
           call _c2jCu() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.766018702 UTC

[section ""data" . GHC.Unicode.$trModule3_closure" {
     GHC.Unicode.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.766647333 UTC

[section ""data" . GHC.Unicode.$trModule1_closure" {
     GHC.Unicode.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.767189685 UTC

[section ""data" . GHC.Unicode.$trModule_closure" {
     GHC.Unicode.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Unicode.$trModule3_closure+1;
         const GHC.Unicode.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.767774665 UTC

[section ""cstring" . GHC.Unicode.$tcGeneralCategory2_bytes" {
     GHC.Unicode.$tcGeneralCategory2_bytes:
         I8[] [71,101,110,101,114,97,108,67,97,116,101,103,111,114,121]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.768330889 UTC

[section ""data" . GHC.Unicode.$tcGeneralCategory1_closure" {
     GHC.Unicode.$tcGeneralCategory1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tcGeneralCategory2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.768920011 UTC

[section ""data" . GHC.Unicode.$tcGeneralCategory_closure" {
     GHC.Unicode.$tcGeneralCategory_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tcGeneralCategory1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10145990250269206894;
         const 14660269375011335890;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.769582191 UTC

[section ""data" . GHC.Unicode.$tc'ClosePunctuation1_closure" {
     GHC.Unicode.$tc'ClosePunctuation1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Unicode.$tcGeneralCategory_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.770168514 UTC

[section ""cstring" . GHC.Unicode.$tc'UppercaseLetter2_bytes" {
     GHC.Unicode.$tc'UppercaseLetter2_bytes:
         I8[] [39,85,112,112,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.770761883 UTC

[section ""data" . GHC.Unicode.$tc'UppercaseLetter1_closure" {
     GHC.Unicode.$tc'UppercaseLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'UppercaseLetter2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.772343126 UTC

[section ""data" . GHC.Unicode.$tc'UppercaseLetter_closure" {
     GHC.Unicode.$tc'UppercaseLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'UppercaseLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 14647285109492872061;
         const 14425225614845259385;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.772976843 UTC

[section ""cstring" . GHC.Unicode.$tc'LowercaseLetter2_bytes" {
     GHC.Unicode.$tc'LowercaseLetter2_bytes:
         I8[] [39,76,111,119,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.773582219 UTC

[section ""data" . GHC.Unicode.$tc'LowercaseLetter1_closure" {
     GHC.Unicode.$tc'LowercaseLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'LowercaseLetter2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.774084993 UTC

[section ""data" . GHC.Unicode.$tc'LowercaseLetter_closure" {
     GHC.Unicode.$tc'LowercaseLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'LowercaseLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 6843638521722139917;
         const 11845029203120951590;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.774701723 UTC

[section ""cstring" . GHC.Unicode.$tc'TitlecaseLetter2_bytes" {
     GHC.Unicode.$tc'TitlecaseLetter2_bytes:
         I8[] [39,84,105,116,108,101,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.775224492 UTC

[section ""data" . GHC.Unicode.$tc'TitlecaseLetter1_closure" {
     GHC.Unicode.$tc'TitlecaseLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'TitlecaseLetter2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.775785757 UTC

[section ""data" . GHC.Unicode.$tc'TitlecaseLetter_closure" {
     GHC.Unicode.$tc'TitlecaseLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'TitlecaseLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11035134207864173010;
         const 10162510539839760824;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.776353957 UTC

[section ""cstring" . GHC.Unicode.$tc'ModifierLetter2_bytes" {
     GHC.Unicode.$tc'ModifierLetter2_bytes:
         I8[] [39,77,111,100,105,102,105,101,114,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.77692073 UTC

[section ""data" . GHC.Unicode.$tc'ModifierLetter1_closure" {
     GHC.Unicode.$tc'ModifierLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ModifierLetter2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.777536043 UTC

[section ""data" . GHC.Unicode.$tc'ModifierLetter_closure" {
     GHC.Unicode.$tc'ModifierLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ModifierLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 9531845544999081993;
         const 15142721146394159202;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.778140794 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherLetter2_bytes" {
     GHC.Unicode.$tc'OtherLetter2_bytes:
         I8[] [39,79,116,104,101,114,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.778715366 UTC

[section ""data" . GHC.Unicode.$tc'OtherLetter1_closure" {
     GHC.Unicode.$tc'OtherLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherLetter2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.779289864 UTC

[section ""data" . GHC.Unicode.$tc'OtherLetter_closure" {
     GHC.Unicode.$tc'OtherLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 4852466454551376074;
         const 478150797319163725;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.779881254 UTC

[section ""cstring" . GHC.Unicode.$tc'NonSpacingMark2_bytes" {
     GHC.Unicode.$tc'NonSpacingMark2_bytes:
         I8[] [39,78,111,110,83,112,97,99,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.780421544 UTC

[section ""data" . GHC.Unicode.$tc'NonSpacingMark1_closure" {
     GHC.Unicode.$tc'NonSpacingMark1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'NonSpacingMark2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.78093521 UTC

[section ""data" . GHC.Unicode.$tc'NonSpacingMark_closure" {
     GHC.Unicode.$tc'NonSpacingMark_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'NonSpacingMark1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11798799283128539890;
         const 8595267121230037978;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.781617403 UTC

[section ""cstring" . GHC.Unicode.$tc'SpacingCombiningMark2_bytes" {
     GHC.Unicode.$tc'SpacingCombiningMark2_bytes:
         I8[] [39,83,112,97,99,105,110,103,67,111,109,98,105,110,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.782204466 UTC

[section ""data" . GHC.Unicode.$tc'SpacingCombiningMark1_closure" {
     GHC.Unicode.$tc'SpacingCombiningMark1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'SpacingCombiningMark2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.782776228 UTC

[section ""data" . GHC.Unicode.$tc'SpacingCombiningMark_closure" {
     GHC.Unicode.$tc'SpacingCombiningMark_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'SpacingCombiningMark1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 161806050746895686;
         const 6274417789988196957;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.783385705 UTC

[section ""cstring" . GHC.Unicode.$tc'EnclosingMark2_bytes" {
     GHC.Unicode.$tc'EnclosingMark2_bytes:
         I8[] [39,69,110,99,108,111,115,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.783956102 UTC

[section ""data" . GHC.Unicode.$tc'EnclosingMark1_closure" {
     GHC.Unicode.$tc'EnclosingMark1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'EnclosingMark2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.784529445 UTC

[section ""data" . GHC.Unicode.$tc'EnclosingMark_closure" {
     GHC.Unicode.$tc'EnclosingMark_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'EnclosingMark1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 18110486507519489617;
         const 1830565827398073667;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.785140303 UTC

[section ""cstring" . GHC.Unicode.$tc'DecimalNumber2_bytes" {
     GHC.Unicode.$tc'DecimalNumber2_bytes:
         I8[] [39,68,101,99,105,109,97,108,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.785738128 UTC

[section ""data" . GHC.Unicode.$tc'DecimalNumber1_closure" {
     GHC.Unicode.$tc'DecimalNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'DecimalNumber2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.786282984 UTC

[section ""data" . GHC.Unicode.$tc'DecimalNumber_closure" {
     GHC.Unicode.$tc'DecimalNumber_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'DecimalNumber1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 7339032513903136575;
         const 4295356444207098462;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.786878969 UTC

[section ""cstring" . GHC.Unicode.$tc'LetterNumber2_bytes" {
     GHC.Unicode.$tc'LetterNumber2_bytes:
         I8[] [39,76,101,116,116,101,114,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.78742821 UTC

[section ""data" . GHC.Unicode.$tc'LetterNumber1_closure" {
     GHC.Unicode.$tc'LetterNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'LetterNumber2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.788044413 UTC

[section ""data" . GHC.Unicode.$tc'LetterNumber_closure" {
     GHC.Unicode.$tc'LetterNumber_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'LetterNumber1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 10629256336866531923;
         const 16896950428492761972;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.788672255 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherNumber2_bytes" {
     GHC.Unicode.$tc'OtherNumber2_bytes:
         I8[] [39,79,116,104,101,114,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.789233895 UTC

[section ""data" . GHC.Unicode.$tc'OtherNumber1_closure" {
     GHC.Unicode.$tc'OtherNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherNumber2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.790048015 UTC

[section ""data" . GHC.Unicode.$tc'OtherNumber_closure" {
     GHC.Unicode.$tc'OtherNumber_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherNumber1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 10187389108931559810;
         const 2377339607923931442;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.790635331 UTC

[section ""cstring" . GHC.Unicode.$tc'ConnectorPunctuation2_bytes" {
     GHC.Unicode.$tc'ConnectorPunctuation2_bytes:
         I8[] [39,67,111,110,110,101,99,116,111,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.791214577 UTC

[section ""data" . GHC.Unicode.$tc'ConnectorPunctuation1_closure" {
     GHC.Unicode.$tc'ConnectorPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ConnectorPunctuation2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.792592929 UTC

[section ""data" . GHC.Unicode.$tc'ConnectorPunctuation_closure" {
     GHC.Unicode.$tc'ConnectorPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ConnectorPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 4917643529853318260;
         const 11665519332165151523;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.79349361 UTC

[section ""cstring" . GHC.Unicode.$tc'DashPunctuation2_bytes" {
     GHC.Unicode.$tc'DashPunctuation2_bytes:
         I8[] [39,68,97,115,104,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.794100246 UTC

[section ""data" . GHC.Unicode.$tc'DashPunctuation1_closure" {
     GHC.Unicode.$tc'DashPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'DashPunctuation2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.794722353 UTC

[section ""data" . GHC.Unicode.$tc'DashPunctuation_closure" {
     GHC.Unicode.$tc'DashPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'DashPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 10309144240368445329;
         const 13155144127162508040;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.795370014 UTC

[section ""cstring" . GHC.Unicode.$tc'OpenPunctuation2_bytes" {
     GHC.Unicode.$tc'OpenPunctuation2_bytes:
         I8[] [39,79,112,101,110,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.795947525 UTC

[section ""data" . GHC.Unicode.$tc'OpenPunctuation1_closure" {
     GHC.Unicode.$tc'OpenPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OpenPunctuation2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.79654068 UTC

[section ""data" . GHC.Unicode.$tc'OpenPunctuation_closure" {
     GHC.Unicode.$tc'OpenPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OpenPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11156540492509602203;
         const 14579738194966332373;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.797147492 UTC

[section ""cstring" . GHC.Unicode.$tc'ClosePunctuation3_bytes" {
     GHC.Unicode.$tc'ClosePunctuation3_bytes:
         I8[] [39,67,108,111,115,101,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.797772749 UTC

[section ""data" . GHC.Unicode.$tc'ClosePunctuation2_closure" {
     GHC.Unicode.$tc'ClosePunctuation2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ClosePunctuation3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.798436671 UTC

[section ""data" . GHC.Unicode.$tc'ClosePunctuation_closure" {
     GHC.Unicode.$tc'ClosePunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation2_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 2732552725164352280;
         const 2123618155201944931;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.79910743 UTC

[section ""cstring" . GHC.Unicode.$tc'InitialQuote2_bytes" {
     GHC.Unicode.$tc'InitialQuote2_bytes:
         I8[] [39,73,110,105,116,105,97,108,81,117,111,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.799686235 UTC

[section ""data" . GHC.Unicode.$tc'InitialQuote1_closure" {
     GHC.Unicode.$tc'InitialQuote1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'InitialQuote2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.800289907 UTC

[section ""data" . GHC.Unicode.$tc'InitialQuote_closure" {
     GHC.Unicode.$tc'InitialQuote_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'InitialQuote1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 15372309041196331722;
         const 15030215702152843543;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.800922383 UTC

[section ""cstring" . GHC.Unicode.$tc'FinalQuote2_bytes" {
     GHC.Unicode.$tc'FinalQuote2_bytes:
         I8[] [39,70,105,110,97,108,81,117,111,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.801517816 UTC

[section ""data" . GHC.Unicode.$tc'FinalQuote1_closure" {
     GHC.Unicode.$tc'FinalQuote1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'FinalQuote2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.802085113 UTC

[section ""data" . GHC.Unicode.$tc'FinalQuote_closure" {
     GHC.Unicode.$tc'FinalQuote_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'FinalQuote1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 7492133048483711520;
         const 4486297505861009288;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.802738929 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherPunctuation2_bytes" {
     GHC.Unicode.$tc'OtherPunctuation2_bytes:
         I8[] [39,79,116,104,101,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.80334976 UTC

[section ""data" . GHC.Unicode.$tc'OtherPunctuation1_closure" {
     GHC.Unicode.$tc'OtherPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherPunctuation2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.803914701 UTC

[section ""data" . GHC.Unicode.$tc'OtherPunctuation_closure" {
     GHC.Unicode.$tc'OtherPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 17526727746027692027;
         const 9970963912577062569;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.804549457 UTC

[section ""cstring" . GHC.Unicode.$tc'MathSymbol2_bytes" {
     GHC.Unicode.$tc'MathSymbol2_bytes:
         I8[] [39,77,97,116,104,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.805116061 UTC

[section ""data" . GHC.Unicode.$tc'MathSymbol1_closure" {
     GHC.Unicode.$tc'MathSymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'MathSymbol2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.805788906 UTC

[section ""data" . GHC.Unicode.$tc'MathSymbol_closure" {
     GHC.Unicode.$tc'MathSymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'MathSymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 4306295684901311676;
         const 14195098983421669147;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.806404848 UTC

[section ""cstring" . GHC.Unicode.$tc'CurrencySymbol2_bytes" {
     GHC.Unicode.$tc'CurrencySymbol2_bytes:
         I8[] [39,67,117,114,114,101,110,99,121,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.806946855 UTC

[section ""data" . GHC.Unicode.$tc'CurrencySymbol1_closure" {
     GHC.Unicode.$tc'CurrencySymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'CurrencySymbol2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.807545373 UTC

[section ""data" . GHC.Unicode.$tc'CurrencySymbol_closure" {
     GHC.Unicode.$tc'CurrencySymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'CurrencySymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 150101909358894799;
         const 4247883766619991310;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.80817623 UTC

[section ""cstring" . GHC.Unicode.$tc'ModifierSymbol2_bytes" {
     GHC.Unicode.$tc'ModifierSymbol2_bytes:
         I8[] [39,77,111,100,105,102,105,101,114,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.808729769 UTC

[section ""data" . GHC.Unicode.$tc'ModifierSymbol1_closure" {
     GHC.Unicode.$tc'ModifierSymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ModifierSymbol2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.809365396 UTC

[section ""data" . GHC.Unicode.$tc'ModifierSymbol_closure" {
     GHC.Unicode.$tc'ModifierSymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ModifierSymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 17930136738185325280;
         const 9680003641195432205;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.810029514 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherSymbol2_bytes" {
     GHC.Unicode.$tc'OtherSymbol2_bytes:
         I8[] [39,79,116,104,101,114,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.810662113 UTC

[section ""data" . GHC.Unicode.$tc'OtherSymbol1_closure" {
     GHC.Unicode.$tc'OtherSymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherSymbol2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.811287919 UTC

[section ""data" . GHC.Unicode.$tc'OtherSymbol_closure" {
     GHC.Unicode.$tc'OtherSymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherSymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11720563220218392367;
         const 765393478666748433;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.811924233 UTC

[section ""cstring" . GHC.Unicode.$tc'Space2_bytes" {
     GHC.Unicode.$tc'Space2_bytes:
         I8[] [39,83,112,97,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.812530484 UTC

[section ""data" . GHC.Unicode.$tc'Space1_closure" {
     GHC.Unicode.$tc'Space1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Space2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.8131476 UTC

[section ""data" . GHC.Unicode.$tc'Space_closure" {
     GHC.Unicode.$tc'Space_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Space1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 13451262004661357021;
         const 7623263649021992415;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.813874199 UTC

[section ""cstring" . GHC.Unicode.$tc'LineSeparator2_bytes" {
     GHC.Unicode.$tc'LineSeparator2_bytes:
         I8[] [39,76,105,110,101,83,101,112,97,114,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.815388572 UTC

[section ""data" . GHC.Unicode.$tc'LineSeparator1_closure" {
     GHC.Unicode.$tc'LineSeparator1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'LineSeparator2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.816051442 UTC

[section ""data" . GHC.Unicode.$tc'LineSeparator_closure" {
     GHC.Unicode.$tc'LineSeparator_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'LineSeparator1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 3777504190602031786;
         const 16534792546094157357;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.816705276 UTC

[section ""cstring" . GHC.Unicode.$tc'ParagraphSeparator2_bytes" {
     GHC.Unicode.$tc'ParagraphSeparator2_bytes:
         I8[] [39,80,97,114,97,103,114,97,112,104,83,101,112,97,114,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.81731025 UTC

[section ""data" . GHC.Unicode.$tc'ParagraphSeparator1_closure" {
     GHC.Unicode.$tc'ParagraphSeparator1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ParagraphSeparator2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.817856345 UTC

[section ""data" . GHC.Unicode.$tc'ParagraphSeparator_closure" {
     GHC.Unicode.$tc'ParagraphSeparator_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ParagraphSeparator1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 1259977240315406014;
         const 6836752952671088565;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.818410437 UTC

[section ""cstring" . GHC.Unicode.$tc'Control2_bytes" {
     GHC.Unicode.$tc'Control2_bytes:
         I8[] [39,67,111,110,116,114,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.818996529 UTC

[section ""data" . GHC.Unicode.$tc'Control1_closure" {
     GHC.Unicode.$tc'Control1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Control2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.819584853 UTC

[section ""data" . GHC.Unicode.$tc'Control_closure" {
     GHC.Unicode.$tc'Control_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Control1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 3769799789009110362;
         const 7129109849289868145;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.82022699 UTC

[section ""cstring" . GHC.Unicode.$tc'Format2_bytes" {
     GHC.Unicode.$tc'Format2_bytes:
         I8[] [39,70,111,114,109,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.820790591 UTC

[section ""data" . GHC.Unicode.$tc'Format1_closure" {
     GHC.Unicode.$tc'Format1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Format2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.821740477 UTC

[section ""data" . GHC.Unicode.$tc'Format_closure" {
     GHC.Unicode.$tc'Format_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Format1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 15516392160505082493;
         const 8582194312248021938;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.82236175 UTC

[section ""cstring" . GHC.Unicode.$tc'Surrogate2_bytes" {
     GHC.Unicode.$tc'Surrogate2_bytes:
         I8[] [39,83,117,114,114,111,103,97,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.822937397 UTC

[section ""data" . GHC.Unicode.$tc'Surrogate1_closure" {
     GHC.Unicode.$tc'Surrogate1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Surrogate2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.823553973 UTC

[section ""data" . GHC.Unicode.$tc'Surrogate_closure" {
     GHC.Unicode.$tc'Surrogate_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Surrogate1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 8891432866311764671;
         const 15154926068870472193;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.82418873 UTC

[section ""cstring" . GHC.Unicode.$tc'PrivateUse2_bytes" {
     GHC.Unicode.$tc'PrivateUse2_bytes:
         I8[] [39,80,114,105,118,97,116,101,85,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.824811994 UTC

[section ""data" . GHC.Unicode.$tc'PrivateUse1_closure" {
     GHC.Unicode.$tc'PrivateUse1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'PrivateUse2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.825542215 UTC

[section ""data" . GHC.Unicode.$tc'PrivateUse_closure" {
     GHC.Unicode.$tc'PrivateUse_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'PrivateUse1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 9277443220957795657;
         const 16819524490051355354;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.826218762 UTC

[section ""cstring" . GHC.Unicode.$tc'NotAssigned2_bytes" {
     GHC.Unicode.$tc'NotAssigned2_bytes:
         I8[] [39,78,111,116,65,115,115,105,103,110,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.826789687 UTC

[section ""data" . GHC.Unicode.$tc'NotAssigned1_closure" {
     GHC.Unicode.$tc'NotAssigned1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'NotAssigned2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.827408515 UTC

[section ""data" . GHC.Unicode.$tc'NotAssigned_closure" {
     GHC.Unicode.$tc'NotAssigned_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'NotAssigned1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 6894305772705953782;
         const 14217837899895516928;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.828780945 UTC

[section ""data" . GHC.Unicode.toLower_closure" {
     GHC.Unicode.toLower_closure:
         const GHC.Unicode.toLower_info;
         const 0;
 },
 GHC.Unicode.toLower_entry() //  [R2]
         { info_tbl: [(c2jIR,
                       label: GHC.Unicode.toLower_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jIR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jIS; else goto c2jIT;
       c2jIS: // global
           R2 = R2;
           R1 = GHC.Unicode.toLower_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jIT: // global
           I64[Sp - 8] = block_c2jIO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jJi; else goto c2jIP;
       u2jJi: // global
           call _c2jIO(R1) args: 0, res: 0, upd: 0;
       c2jIP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jIO() //  [R1]
         { info_tbl: [(c2jIO,
                       label: block_c2jIO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jIO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2jIY; else goto c2jIX;
       c2jIY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2jIX: // global
           (_s2jbj::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towlower(I64[R1 + 7]);
           if (_s2jbj::I64 > 1114111) goto c2jJa; else goto c2jJh;
       c2jJa: // global
           Hp = Hp - 16;
           R2 = _s2jbj::I64;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2jJh: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s2jbj::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.830742031 UTC

[section ""data" . GHC.Unicode.toUpper_closure" {
     GHC.Unicode.toUpper_closure:
         const GHC.Unicode.toUpper_info;
         const 0;
 },
 GHC.Unicode.toUpper_entry() //  [R2]
         { info_tbl: [(c2jJq,
                       label: GHC.Unicode.toUpper_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jJq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jJr; else goto c2jJs;
       c2jJr: // global
           R2 = R2;
           R1 = GHC.Unicode.toUpper_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jJs: // global
           I64[Sp - 8] = block_c2jJn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jJR; else goto c2jJo;
       u2jJR: // global
           call _c2jJn(R1) args: 0, res: 0, upd: 0;
       c2jJo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jJn() //  [R1]
         { info_tbl: [(c2jJn,
                       label: block_c2jJn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jJn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2jJx; else goto c2jJw;
       c2jJx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2jJw: // global
           (_s2jbu::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towupper(I64[R1 + 7]);
           if (_s2jbu::I64 > 1114111) goto c2jJJ; else goto c2jJQ;
       c2jJJ: // global
           Hp = Hp - 16;
           R2 = _s2jbu::I64;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2jJQ: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s2jbu::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.832464943 UTC

[section ""data" . GHC.Unicode.toTitle_closure" {
     GHC.Unicode.toTitle_closure:
         const GHC.Unicode.toTitle_info;
         const 0;
 },
 GHC.Unicode.toTitle_entry() //  [R2]
         { info_tbl: [(c2jJZ,
                       label: GHC.Unicode.toTitle_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jJZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jK0; else goto c2jK1;
       c2jK0: // global
           R2 = R2;
           R1 = GHC.Unicode.toTitle_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jK1: // global
           I64[Sp - 8] = block_c2jJW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jKq; else goto c2jJX;
       u2jKq: // global
           call _c2jJW(R1) args: 0, res: 0, upd: 0;
       c2jJX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jJW() //  [R1]
         { info_tbl: [(c2jJW,
                       label: block_c2jJW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jJW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2jK6; else goto c2jK5;
       c2jK6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2jK5: // global
           (_s2jbF::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towtitle(I64[R1 + 7]);
           if (_s2jbF::I64 > 1114111) goto c2jKi; else goto c2jKp;
       c2jKi: // global
           Hp = Hp - 16;
           R2 = _s2jbF::I64;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2jKp: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s2jbF::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.834326015 UTC

[section ""data" . GHC.Unicode.wgencat_closure" {
     GHC.Unicode.wgencat_closure:
         const GHC.Unicode.wgencat_info;
 },
 GHC.Unicode.wgencat_entry() //  [R2]
         { info_tbl: [(c2jKy,
                       label: GHC.Unicode.wgencat_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jKy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jKE; else goto c2jKF;
       c2jKE: // global
           R2 = R2;
           R1 = GHC.Unicode.wgencat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jKF: // global
           I64[Sp - 8] = block_c2jKv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jKJ; else goto c2jKw;
       u2jKJ: // global
           call _c2jKv(R1) args: 0, res: 0, upd: 0;
       c2jKw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jKv() //  [R1]
         { info_tbl: [(c2jKv,
                       label: block_c2jKv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jKv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2jKI; else goto c2jKH;
       c2jKI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2jKH: // global
           (_s2jbP::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2jbP::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.835797498 UTC

[section ""data" . GHC.Unicode.isAsciiUpper_closure" {
     GHC.Unicode.isAsciiUpper_closure:
         const GHC.Unicode.isAsciiUpper_info;
 },
 GHC.Unicode.isAsciiUpper_entry() //  [R2]
         { info_tbl: [(c2jKR,
                       label: GHC.Unicode.isAsciiUpper_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jKR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jKS; else goto c2jKT;
       c2jKS: // global
           R2 = R2;
           R1 = GHC.Unicode.isAsciiUpper_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jKT: // global
           I64[Sp - 8] = block_c2jKO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jL5; else goto c2jKP;
       u2jL5: // global
           call _c2jKO(R1) args: 0, res: 0, upd: 0;
       c2jKP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jKO() //  [R1]
         { info_tbl: [(c2jKO,
                       label: block_c2jKO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jKO: // global
           _s2jbS::I64 = I64[R1 + 7];
           if (_s2jbS::I64 < 65) goto c2jL0; else goto c2jL1;
       c2jL0: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jL1: // global
           R1 = I64[((_s2jbS::I64 <= 90) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.837360228 UTC

[section ""data" . GHC.Unicode.isAsciiLower_closure" {
     GHC.Unicode.isAsciiLower_closure:
         const GHC.Unicode.isAsciiLower_info;
 },
 GHC.Unicode.isAsciiLower_entry() //  [R2]
         { info_tbl: [(c2jLd,
                       label: GHC.Unicode.isAsciiLower_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jLd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jLe; else goto c2jLf;
       c2jLe: // global
           R2 = R2;
           R1 = GHC.Unicode.isAsciiLower_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jLf: // global
           I64[Sp - 8] = block_c2jLa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jLr; else goto c2jLb;
       u2jLr: // global
           call _c2jLa(R1) args: 0, res: 0, upd: 0;
       c2jLb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jLa() //  [R1]
         { info_tbl: [(c2jLa,
                       label: block_c2jLa_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jLa: // global
           _s2jbX::I64 = I64[R1 + 7];
           if (_s2jbX::I64 < 97) goto c2jLm; else goto c2jLn;
       c2jLm: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jLn: // global
           R1 = I64[((_s2jbX::I64 <= 122) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.838832733 UTC

[section ""data" . GHC.Unicode.isLatin1_closure" {
     GHC.Unicode.isLatin1_closure:
         const GHC.Unicode.isLatin1_info;
 },
 GHC.Unicode.isLatin1_entry() //  [R2]
         { info_tbl: [(c2jLz,
                       label: GHC.Unicode.isLatin1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jLz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jLA; else goto c2jLB;
       c2jLA: // global
           R2 = R2;
           R1 = GHC.Unicode.isLatin1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jLB: // global
           I64[Sp - 8] = block_c2jLw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jLG; else goto c2jLx;
       u2jLG: // global
           call _c2jLw(R1) args: 0, res: 0, upd: 0;
       c2jLx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jLw() //  [R1]
         { info_tbl: [(c2jLw,
                       label: block_c2jLw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jLw: // global
           R1 = I64[((I64[R1 + 7] <= 255) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.840238125 UTC

[section ""data" . GHC.Unicode.isAscii_closure" {
     GHC.Unicode.isAscii_closure:
         const GHC.Unicode.isAscii_info;
 },
 GHC.Unicode.isAscii_entry() //  [R2]
         { info_tbl: [(c2jLO,
                       label: GHC.Unicode.isAscii_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jLO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jLP; else goto c2jLQ;
       c2jLP: // global
           R2 = R2;
           R1 = GHC.Unicode.isAscii_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jLQ: // global
           I64[Sp - 8] = block_c2jLL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jLV; else goto c2jLM;
       u2jLV: // global
           call _c2jLL(R1) args: 0, res: 0, upd: 0;
       c2jLM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jLL() //  [R1]
         { info_tbl: [(c2jLL,
                       label: block_c2jLL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jLL: // global
           R1 = I64[((I64[R1 + 7] < 128) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.843692291 UTC

[section ""data" . GHC.Unicode.isOctDigit_closure" {
     GHC.Unicode.isOctDigit_closure:
         const GHC.Unicode.isOctDigit_info;
 },
 GHC.Unicode.isOctDigit_entry() //  [R2]
         { info_tbl: [(c2jM3,
                       label: GHC.Unicode.isOctDigit_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jM3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jM4; else goto c2jM5;
       c2jM4: // global
           R2 = R2;
           R1 = GHC.Unicode.isOctDigit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jM5: // global
           I64[Sp - 8] = block_c2jM0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jMj; else goto c2jM1;
       u2jMj: // global
           call _c2jM0(R1) args: 0, res: 0, upd: 0;
       c2jM1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jM0() //  [R1]
         { info_tbl: [(c2jM0,
                       label: block_c2jM0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jM0: // global
           R1 = I64[((I64[R1 + 7] - 48 <= 7) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.845743914 UTC

[section ""data" . GHC.Unicode.isDigit_closure" {
     GHC.Unicode.isDigit_closure:
         const GHC.Unicode.isDigit_info;
 },
 GHC.Unicode.isDigit_entry() //  [R2]
         { info_tbl: [(c2jMr,
                       label: GHC.Unicode.isDigit_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jMr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jMs; else goto c2jMt;
       c2jMs: // global
           R2 = R2;
           R1 = GHC.Unicode.isDigit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jMt: // global
           I64[Sp - 8] = block_c2jMo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jMH; else goto c2jMp;
       u2jMH: // global
           call _c2jMo(R1) args: 0, res: 0, upd: 0;
       c2jMp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jMo() //  [R1]
         { info_tbl: [(c2jMo,
                       label: block_c2jMo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jMo: // global
           R1 = I64[((I64[R1 + 7] - 48 <= 9) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.84794395 UTC

[section ""data" . GHC.Unicode.isHexDigit_closure" {
     GHC.Unicode.isHexDigit_closure:
         const GHC.Unicode.isHexDigit_info;
 },
 GHC.Unicode.isHexDigit_entry() //  [R2]
         { info_tbl: [(c2jMP,
                       label: GHC.Unicode.isHexDigit_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jMP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jMQ; else goto c2jMR;
       c2jMQ: // global
           R2 = R2;
           R1 = GHC.Unicode.isHexDigit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jMR: // global
           I64[Sp - 8] = block_c2jMM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jNz; else goto c2jMN;
       u2jNz: // global
           call _c2jMM(R1) args: 0, res: 0, upd: 0;
       c2jMN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jMM() //  [R1]
         { info_tbl: [(c2jMM,
                       label: block_c2jMM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jMM: // global
           _s2jco::I64 = I64[R1 + 7];
           if ((_s2jco::I64 + -48) <= 9) goto c2jNn; else goto c2jNm;
       c2jNm: // global
           if ((_s2jco::I64 + -65) <= 5) goto c2jNn; else goto c2jNj;
       c2jNn: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jNj: // global
           R1 = I64[(((_s2jco::I64 + -97) <= 5) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.850223352 UTC

[section ""data" . GHC.Unicode.isLower_closure" {
     GHC.Unicode.isLower_closure:
         const GHC.Unicode.isLower_info;
 },
 GHC.Unicode.isLower_entry() //  [R2]
         { info_tbl: [(c2jNH,
                       label: GHC.Unicode.isLower_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jNH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jNI; else goto c2jNJ;
       c2jNI: // global
           R2 = R2;
           R1 = GHC.Unicode.isLower_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jNJ: // global
           I64[Sp - 8] = block_c2jNE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jNW; else goto c2jNF;
       u2jNW: // global
           call _c2jNE(R1) args: 0, res: 0, upd: 0;
       c2jNF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jNE() //  [R1]
         { info_tbl: [(c2jNE,
                       label: block_c2jNE_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jNE: // global
           (_s2jcI::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswlower(I64[R1 + 7]);
           if (_s2jcI::I64 == 0) goto c2jNV; else goto c2jNU;
       c2jNV: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jNU: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.851953137 UTC

[section ""cstring" . lvl66_r2j7h_bytes" {
     lvl66_r2j7h_bytes:
         I8[] [115,117,99,99,123,71,101,110,101,114,97,108,67,97,116,101,103,111,114,121,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,115,117,99,99,39,32,111,102,32,108,97,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.853153706 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory2_closure" {
     GHC.Unicode.$fEnumGeneralCategory2_closure:
         const GHC.Unicode.$fEnumGeneralCategory2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory2_entry() //  [R1]
         { info_tbl: [(c2jO5,
                       label: GHC.Unicode.$fEnumGeneralCategory2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jO5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2jO6; else goto c2jO7;
       c2jO6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jO7: // global
           (_c2jO0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jO0::I64 == 0) goto c2jO2; else goto c2jO1;
       c2jO2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jO1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jO0::I64;
           I64[Sp - 24] = block_c2jO3_info;
           R2 = lvl66_r2j7h_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c2jO3() //  [R1]
         { info_tbl: [(c2jO3,
                       label: block_c2jO3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jO3: // global
           R3 = R1;
           R2 = $dIP3_r2j7a_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.855335521 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$csucc_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$csucc_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$csucc_info;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory_$csucc_entry() //  [R2]
         { info_tbl: [(c2jOm,
                       label: GHC.Unicode.$fEnumGeneralCategory_$csucc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jOm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jOn; else goto c2jOo;
       c2jOn: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jOo: // global
           I64[Sp - 8] = block_c2jOf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jOz; else goto c2jOg;
       u2jOz: // global
           call _c2jOf(R1) args: 0, res: 0, upd: 0;
       c2jOg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jOf() //  [R1]
         { info_tbl: [(c2jOf,
                       label: block_c2jOf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jOf: // global
           if (I32[I64[R1 - 1] + 20] == 29 :: W32) goto c2jOk; else goto c2jOj;
       c2jOk: // global
           R1 = GHC.Unicode.$fEnumGeneralCategory2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2jOj: // global
           R1 = I64[(%MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]) + 1 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.857159681 UTC

[section ""cstring" . lvl67_r2j7i_bytes" {
     lvl67_r2j7i_bytes:
         I8[] [112,114,101,100,123,71,101,110,101,114,97,108,67,97,116,101,103,111,114,121,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,112,114,101,100,39,32,111,102,32,102,105,114,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.858348534 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory1_closure" {
     GHC.Unicode.$fEnumGeneralCategory1_closure:
         const GHC.Unicode.$fEnumGeneralCategory1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory1_entry() //  [R1]
         { info_tbl: [(c2jOI,
                       label: GHC.Unicode.$fEnumGeneralCategory1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jOI: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2jOJ; else goto c2jOK;
       c2jOJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jOK: // global
           (_c2jOD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2jOD::I64 == 0) goto c2jOF; else goto c2jOE;
       c2jOF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2jOE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2jOD::I64;
           I64[Sp - 24] = block_c2jOG_info;
           R2 = lvl67_r2j7i_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c2jOG() //  [R1]
         { info_tbl: [(c2jOG,
                       label: block_c2jOG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jOG: // global
           R3 = R1;
           R2 = $dIP3_r2j7a_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.860400472 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cpred_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cpred_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cpred_info;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cpred_entry() //  [R2]
         { info_tbl: [(c2jOZ,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cpred_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jOZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jP0; else goto c2jP1;
       c2jP0: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jP1: // global
           I64[Sp - 8] = block_c2jOS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jPc; else goto c2jOT;
       u2jPc: // global
           call _c2jOS(R1) args: 0, res: 0, upd: 0;
       c2jOT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jOS() //  [R1]
         { info_tbl: [(c2jOS,
                       label: block_c2jOS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jOS: // global
           if (I32[I64[R1 - 1] + 20] == 0 :: W32) goto c2jOX; else goto c2jOW;
       c2jOX: // global
           R1 = GHC.Unicode.$fEnumGeneralCategory1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2jOW: // global
           R1 = I64[(%MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]) - 1 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.864018073 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_info;
         const 0;
 },
 sat_s2jd8_entry() //  [R1]
         { info_tbl: [(c2jPO,
                       label: sat_s2jd8_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jPO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jPP; else goto c2jPQ;
       c2jPP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jPQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jd2::I64 = I64[R1 + 32];
           if (_s2jd2::I64 == I64[R1 + 24]) goto c2jPN; else goto c2jPM;
       c2jPN: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c2jPM: // global
           R2 = _s2jd2::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s2jd1_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jd5_entry() //  [R1]
         { info_tbl: [(c2jQ2,
                       label: sat_s2jd5_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jQ2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jQ3; else goto c2jQb;
       c2jQ3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jQb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jd2::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jd2::I64, 0)) goto c2jQ9; else goto c2jQ1;
       c2jQ1: // global
           if (%MO_S_Gt_W64(_s2jd2::I64, 29)) goto c2jQ9; else goto c2jQa;
       c2jQ9: // global
           R2 = _s2jd2::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2jQa: // global
           R1 = I64[(_s2jd2::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_s2jd1_entry() //  [R1, R2]
         { info_tbl: [(c2jQd,
                       label: go_s2jd1_info
                       rep:HeapRep 1 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jQd: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2jQh; else goto c2jQg;
       c2jQh: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jQg: // global
           _s2jcZ::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jd8_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jcZ::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jd5_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_entry() //  [R2, R3]
         { info_tbl: [(c2jQi,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jQi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jQj; else goto c2jQk;
       c2jQj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2jQk: // global
           I64[Sp - 16] = block_c2jPh_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2jQF; else goto c2jPi;
       u2jQF: // global
           call _c2jPh(R1) args: 0, res: 0, upd: 0;
       c2jPi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jPh() //  [R1]
         { info_tbl: [(c2jPh,
                       label: block_c2jPh_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jPh: // global
           _s2jcX::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2jPp_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2jcX::I64;
           if (R1 & 7 != 0) goto u2jQC; else goto c2jPq;
       u2jQC: // global
           call _c2jPp(R1) args: 0, res: 0, upd: 0;
       c2jPq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jPp() //  [R1]
         { info_tbl: [(c2jPp,
                       label: block_c2jPp_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jPp: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2jPv() args: 0, res: 0, upd: 0;
     }
 },
 _c2jPv() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jPv: // global
           Hp = Hp + 16;
           _s2jcZ::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2jQu; else goto c2jQt;
       c2jQu: // global
           HpAlloc = 16;
           I64[Sp] = block_c2jPu_info;
           R1 = _s2jcZ::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2jQt: // global
           _s2jcX::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s2jcX::I64,
                            _s2jcZ::I64)) goto c2jQw; else goto c2jQx;
       c2jQw: // global
           I64[Hp - 8] = go_s2jd1_info;
           I64[Hp] = _s2jcZ::I64;
           R2 = _s2jcX::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call go_s2jd1_entry(R2, R1) args: 8, res: 0, upd: 8;
       c2jQx: // global
           Hp = Hp - 16;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2jPu() //  [R1]
         { info_tbl: [(c2jPu,
                       label: block_c2jPu_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jPu: // global
           I64[Sp] = R1;
           call _c2jPv() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.875065973 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_info;
         const 0;
 },
 sat_s2jdw_entry() //  [R1]
         { info_tbl: [(c2jRC,
                       label: sat_s2jdw_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jRC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jRD; else goto c2jRE;
       c2jRD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jRE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s2jdp_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdu_entry() //  [R1]
         { info_tbl: [(c2jRO,
                       label: sat_s2jdu_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jRO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jRP; else goto c2jRX;
       c2jRP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jRX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdq::I64, 0)) goto c2jRV; else goto c2jRN;
       c2jRN: // global
           if (%MO_S_Gt_W64(_s2jdq::I64, 29)) goto c2jRV; else goto c2jRW;
       c2jRV: // global
           R2 = _s2jdq::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2jRW: // global
           R1 = I64[(_s2jdq::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdz_entry() //  [R1]
         { info_tbl: [(c2jS8,
                       label: sat_s2jdz_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jS8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jS9; else goto c2jSh;
       c2jS9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jSh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdq::I64, 0)) goto c2jSf; else goto c2jS7;
       c2jS7: // global
           if (%MO_S_Gt_W64(_s2jdq::I64, 29)) goto c2jSf; else goto c2jSg;
       c2jSf: // global
           R2 = _s2jdq::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2jSg: // global
           R1 = I64[(_s2jdq::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s2jdp_entry() //  [R1, R2]
         { info_tbl: [(c2jSl,
                       label: go_dn_s2jdp_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jSl: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2jSp; else goto c2jSo;
       c2jSp: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jSo: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c2jSj; else goto c2jSk;
       c2jSj: // global
           _s2jdn::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jdw_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jdn::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jdu_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jSk: // global
           I64[Hp - 80] = sat_s2jdz_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2jSr::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2jSr::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2jdA_entry() //  [R1]
         { info_tbl: [(c2jSs,
                       label: sat_s2jdA_info
                       rep:HeapRep 3 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jSs: // global
           _s2jdA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2jSt; else goto c2jSu;
       c2jSu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2jSw; else goto c2jSv;
       c2jSw: // global
           HpAlloc = 24;
           goto c2jSt;
       c2jSt: // global
           R1 = _s2jdA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jSv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jdA::P64;
           _s2jdf::I64 = I64[_s2jdA::P64 + 24];
           _s2jdn::I64 = _s2jdf::I64 - I64[_s2jdA::P64 + 16];
           _s2jdo::I64 = I64[_s2jdA::P64 + 32] - _s2jdn::I64;
           I64[Hp - 16] = go_dn_s2jdp_info;
           I64[Hp - 8] = _s2jdn::I64;
           I64[Hp] = _s2jdo::I64;
           R2 = _s2jdf::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s2jdp_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdm_entry() //  [R1]
         { info_tbl: [(c2jSG,
                       label: sat_s2jdm_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jSG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jSH; else goto c2jSP;
       c2jSH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jSP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdd::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdd::I64, 0)) goto c2jSN; else goto c2jSF;
       c2jSF: // global
           if (%MO_S_Gt_W64(_s2jdd::I64, 29)) goto c2jSN; else goto c2jSO;
       c2jSN: // global
           R2 = _s2jdd::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2jSO: // global
           R1 = I64[(_s2jdd::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdE_entry() //  [R1]
         { info_tbl: [(c2jT3,
                       label: sat_s2jdE_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jT3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jT4; else goto c2jTc;
       c2jT4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jTc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdd::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdd::I64, 0)) goto c2jTa; else goto c2jT2;
       c2jT2: // global
           if (%MO_S_Gt_W64(_s2jdd::I64, 29)) goto c2jTa; else goto c2jTb;
       c2jTa: // global
           R2 = _s2jdd::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2jTb: // global
           R1 = I64[(_s2jdd::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdS_entry() //  [R1]
         { info_tbl: [(c2jTF,
                       label: sat_s2jdS_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jTF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jTG; else goto c2jTH;
       c2jTG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jTH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s2jdL_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdQ_entry() //  [R1]
         { info_tbl: [(c2jTR,
                       label: sat_s2jdQ_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jTR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jTS; else goto c2jU0;
       c2jTS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jU0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdM::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdM::I64, 0)) goto c2jTY; else goto c2jTQ;
       c2jTQ: // global
           if (%MO_S_Gt_W64(_s2jdM::I64, 29)) goto c2jTY; else goto c2jTZ;
       c2jTY: // global
           R2 = _s2jdM::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2jTZ: // global
           R1 = I64[(_s2jdM::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdV_entry() //  [R1]
         { info_tbl: [(c2jUb,
                       label: sat_s2jdV_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jUb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jUc; else goto c2jUk;
       c2jUc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jUk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdM::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdM::I64, 0)) goto c2jUi; else goto c2jUa;
       c2jUa: // global
           if (%MO_S_Gt_W64(_s2jdM::I64, 29)) goto c2jUi; else goto c2jUj;
       c2jUi: // global
           R2 = _s2jdM::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2jUj: // global
           R1 = I64[(_s2jdM::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s2jdL_entry() //  [R1, R2]
         { info_tbl: [(c2jUo,
                       label: go_up_s2jdL_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jUo: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2jUs; else goto c2jUr;
       c2jUs: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jUr: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c2jUm; else goto c2jUn;
       c2jUm: // global
           _s2jdJ::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jdS_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jdJ::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jdQ_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jUn: // global
           I64[Hp - 80] = sat_s2jdV_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2jUu::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2jUu::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2jdW_entry() //  [R1]
         { info_tbl: [(c2jUv,
                       label: sat_s2jdW_info
                       rep:HeapRep 3 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jUv: // global
           _s2jdW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2jUw; else goto c2jUx;
       c2jUx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2jUz; else goto c2jUy;
       c2jUz: // global
           HpAlloc = 24;
           goto c2jUw;
       c2jUw: // global
           R1 = _s2jdW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jUy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jdW::P64;
           _s2jdf::I64 = I64[_s2jdW::P64 + 24];
           _s2jdJ::I64 = _s2jdf::I64 - I64[_s2jdW::P64 + 16];
           _s2jdK::I64 = I64[_s2jdW::P64 + 32] - _s2jdJ::I64;
           I64[Hp - 16] = go_up_s2jdL_info;
           I64[Hp - 8] = _s2jdJ::I64;
           I64[Hp] = _s2jdK::I64;
           R2 = _s2jdf::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s2jdL_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdI_entry() //  [R1]
         { info_tbl: [(c2jUJ,
                       label: sat_s2jdI_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jUJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jUK; else goto c2jUS;
       c2jUK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jUS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdd::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdd::I64, 0)) goto c2jUQ; else goto c2jUI;
       c2jUI: // global
           if (%MO_S_Gt_W64(_s2jdd::I64, 29)) goto c2jUQ; else goto c2jUR;
       c2jUQ: // global
           R2 = _s2jdd::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2jUR: // global
           R1 = I64[(_s2jdd::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2je0_entry() //  [R1]
         { info_tbl: [(c2jV6,
                       label: sat_s2je0_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jV6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2jV7; else goto c2jVf;
       c2jV7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2jVf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdd::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdd::I64, 0)) goto c2jVd; else goto c2jV5;
       c2jV5: // global
           if (%MO_S_Gt_W64(_s2jdd::I64, 29)) goto c2jVd; else goto c2jVe;
       c2jVd: // global
           R2 = _s2jdd::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2jVe: // global
           R1 = I64[(_s2jdd::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_entry() //  [R2,
                                                                 R3, R4]
         { info_tbl: [(c2jVg,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jVg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2jVh; else goto c2jVi;
       c2jVh: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2jVi: // global
           I64[Sp - 24] = block_c2jQK_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2jVZ; else goto c2jQL;
       u2jVZ: // global
           call _c2jQK(R1) args: 0, res: 0, upd: 0;
       c2jQL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jQK() //  [R1]
         { info_tbl: [(c2jQK,
                       label: block_c2jQK_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jQK: // global
           _s2jdd::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2jQS_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2jdd::I64;
           if (R1 & 7 != 0) goto u2jVV; else goto c2jQT;
       u2jVV: // global
           call _c2jQS(R1) args: 0, res: 0, upd: 0;
       c2jQT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jQS() //  [R1]
         { info_tbl: [(c2jQS,
                       label: block_c2jQS_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jQS: // global
           _s2jdf::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2jR0_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2jdf::I64;
           if (R1 & 7 != 0) goto u2jVW; else goto c2jR1;
       u2jVW: // global
           call _c2jR0(R1) args: 0, res: 0, upd: 0;
       c2jR1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jR0() //  [R1]
         { info_tbl: [(c2jR0,
                       label: block_c2jR0_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jR0: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2jR6() args: 0, res: 0, upd: 0;
     }
 },
 _c2jR6() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jR6: // global
           Hp = Hp + 88;
           _s2jdh::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2jVw; else goto c2jVv;
       c2jVw: // global
           HpAlloc = 88;
           I64[Sp] = block_c2jR5_info;
           R1 = _s2jdh::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2jVv: // global
           _s2jdd::I64 = I64[Sp + 8];
           _s2jdf::I64 = I64[Sp + 16];
           if (%MO_S_Lt_W64(_s2jdf::I64,
                            _s2jdd::I64)) goto c2jVG; else goto c2jVP;
       c2jVG: // global
           if (%MO_S_Le_W64(_s2jdh::I64,
                            _s2jdf::I64)) goto c2jVz; else goto c2jVE;
       c2jVz: // global
           I64[Hp - 80] = sat_s2jdA_info;
           I64[Hp - 64] = _s2jdd::I64;
           I64[Hp - 56] = _s2jdf::I64;
           I64[Hp - 48] = _s2jdh::I64;
           I64[Hp - 40] = sat_s2jdm_info;
           I64[Hp - 24] = _s2jdd::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jVE: // global
           if (%MO_S_Gt_W64(_s2jdh::I64,
                            _s2jdd::I64)) goto c2jVN; else goto c2jVC;
       c2jVC: // global
           I64[Hp - 80] = sat_s2jdE_info;
           I64[Hp - 64] = _s2jdd::I64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2jVA::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2jVA::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jVP: // global
           if (%MO_S_Ge_W64(_s2jdh::I64,
                            _s2jdf::I64)) goto c2jVJ; else goto c2jVO;
       c2jVJ: // global
           I64[Hp - 80] = sat_s2jdW_info;
           I64[Hp - 64] = _s2jdd::I64;
           I64[Hp - 56] = _s2jdf::I64;
           I64[Hp - 48] = _s2jdh::I64;
           I64[Hp - 40] = sat_s2jdI_info;
           I64[Hp - 24] = _s2jdd::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jVO: // global
           if (%MO_S_Lt_W64(_s2jdh::I64,
                            _s2jdd::I64)) goto c2jVN; else goto c2jVM;
       c2jVN: // global
           Hp = Hp - 88;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jVM: // global
           I64[Hp - 80] = sat_s2je0_info;
           I64[Hp - 64] = _s2jdd::I64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2jVK::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2jVK::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2jR5() //  [R1]
         { info_tbl: [(c2jR5,
                       label: block_c2jR5_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jR5: // global
           I64[Sp] = R1;
           call _c2jR6() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.890019206 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_closure" {
     GHC.Unicode.$fEnumGeneralCategory_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Unicode.$fEnumGeneralCategory_$csucc_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cpred_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure+2;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure+2;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.891537246 UTC

[section ""data" . GHC.Unicode.$wgeneralCategory_closure" {
     GHC.Unicode.$wgeneralCategory_closure:
         const GHC.Unicode.$wgeneralCategory_info;
         const 0;
 },
 GHC.Unicode.$wgeneralCategory_entry() //  [R2]
         { info_tbl: [(c2jW6,
                       label: GHC.Unicode.$wgeneralCategory_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jW6: // global
           (_s2je6::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(R2);
           if (%MO_S_Lt_W64(_s2je6::I64, 0)) goto c2jWl; else goto c2jWn;
       c2jWn: // global
           if (%MO_S_Gt_W64(_s2je6::I64, 29)) goto c2jWl; else goto c2jWm;
       c2jWl: // global
           R2 = _s2je6::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2jWm: // global
           R1 = I64[(_s2je6::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.893485618 UTC

[section ""data" . GHC.Unicode.generalCategory_closure" {
     GHC.Unicode.generalCategory_closure:
         const GHC.Unicode.generalCategory_info;
         const 0;
 },
 GHC.Unicode.generalCategory_entry() //  [R2]
         { info_tbl: [(c2jWv,
                       label: GHC.Unicode.generalCategory_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jWv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jWw; else goto c2jWx;
       c2jWw: // global
           R2 = R2;
           R1 = GHC.Unicode.generalCategory_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jWx: // global
           I64[Sp - 8] = block_c2jWs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jWB; else goto c2jWt;
       u2jWB: // global
           call _c2jWs(R1) args: 0, res: 0, upd: 0;
       c2jWt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jWs() //  [R1]
         { info_tbl: [(c2jWs,
                       label: block_c2jWs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jWs: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.895605996 UTC

[section ""data" . GHC.Unicode.$wisPunctuation_closure" {
     GHC.Unicode.$wisPunctuation_closure:
         const GHC.Unicode.$wisPunctuation_info;
         const 0;
 },
 GHC.Unicode.$wisPunctuation_entry() //  [R2]
         { info_tbl: [(c2jWI,
                       label: GHC.Unicode.$wisPunctuation_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jWI: // global
           (_s2jeh::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(R2);
           if (%MO_S_Lt_W64(_s2jeh::I64, 0)) goto c2jWX; else goto c2jXb;
       c2jXb: // global
           if (%MO_S_Gt_W64(_s2jeh::I64, 29)) goto c2jWX; else goto c2jXa;
       c2jWX: // global
           R2 = _s2jeh::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2jXa: // global
           if (%MO_S_Ge_W64(_s2jeh::I64, 18)) goto c2jX2; else goto u2jXc;
       u2jXc: // global
           if (%MO_S_Lt_W64(_s2jeh::I64, 11)) goto c2jX2; else goto u2jXd;
       c2jX2: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u2jXd: // global
           switch [11 .. 17] _s2jeh::I64 {
               case 11, 12, 13, 14, 15, 16, 17 : goto c2jX9;
           }
       c2jX9: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.897498954 UTC

[section ""data" . GHC.Unicode.isPunctuation_closure" {
     GHC.Unicode.isPunctuation_closure:
         const GHC.Unicode.isPunctuation_info;
         const 0;
 },
 GHC.Unicode.isPunctuation_entry() //  [R2]
         { info_tbl: [(c2jXl,
                       label: GHC.Unicode.isPunctuation_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jXl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jXm; else goto c2jXn;
       c2jXm: // global
           R2 = R2;
           R1 = GHC.Unicode.isPunctuation_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jXn: // global
           I64[Sp - 8] = block_c2jXi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jXr; else goto c2jXj;
       u2jXr: // global
           call _c2jXi(R1) args: 0, res: 0, upd: 0;
       c2jXj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jXi() //  [R1]
         { info_tbl: [(c2jXi,
                       label: block_c2jXi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jXi: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wisPunctuation_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.8988694 UTC

[section ""data" . GHC.Unicode.$wisSymbol_closure" {
     GHC.Unicode.$wisSymbol_closure:
         const GHC.Unicode.$wisSymbol_info;
         const 0;
 },
 GHC.Unicode.$wisSymbol_entry() //  [R2]
         { info_tbl: [(c2jXy,
                       label: GHC.Unicode.$wisSymbol_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jXy: // global
           (_s2jev::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(R2);
           if (%MO_S_Lt_W64(_s2jev::I64, 0)) goto c2jXN; else goto c2jXY;
       c2jXY: // global
           if (%MO_S_Gt_W64(_s2jev::I64, 29)) goto c2jXN; else goto c2jXX;
       c2jXN: // global
           R2 = _s2jev::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2jXX: // global
           if (%MO_S_Lt_W64(_s2jev::I64, 21)) goto u2jXZ; else goto u2jY1;
       u2jXZ: // global
           if (%MO_S_Lt_W64(_s2jev::I64, 18)) goto c2jXS; else goto u2jY0;
       u2jY0: // global
           if (_s2jev::I64 == 19) goto c2jXW; else goto c2jXW;
       u2jY1: // global
           if (%MO_S_Lt_W64(_s2jev::I64, 22)) goto c2jXW; else goto c2jXS;
       c2jXW: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jXS: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.900036822 UTC

[section ""data" . GHC.Unicode.isSymbol_closure" {
     GHC.Unicode.isSymbol_closure:
         const GHC.Unicode.isSymbol_info;
         const 0;
 },
 GHC.Unicode.isSymbol_entry() //  [R2]
         { info_tbl: [(c2jY9,
                       label: GHC.Unicode.isSymbol_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jY9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jYa; else goto c2jYb;
       c2jYa: // global
           R2 = R2;
           R1 = GHC.Unicode.isSymbol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jYb: // global
           I64[Sp - 8] = block_c2jY6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jYf; else goto c2jY7;
       u2jYf: // global
           call _c2jY6(R1) args: 0, res: 0, upd: 0;
       c2jY7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jY6() //  [R1]
         { info_tbl: [(c2jY6,
                       label: block_c2jY6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jY6: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wisSymbol_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.901307185 UTC

[section ""data" . GHC.Unicode.isUpper_closure" {
     GHC.Unicode.isUpper_closure:
         const GHC.Unicode.isUpper_info;
 },
 GHC.Unicode.isUpper_entry() //  [R2]
         { info_tbl: [(c2jYn,
                       label: GHC.Unicode.isUpper_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jYn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jYo; else goto c2jYp;
       c2jYo: // global
           R2 = R2;
           R1 = GHC.Unicode.isUpper_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jYp: // global
           I64[Sp - 8] = block_c2jYk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jYC; else goto c2jYl;
       u2jYC: // global
           call _c2jYk(R1) args: 0, res: 0, upd: 0;
       c2jYl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jYk() //  [R1]
         { info_tbl: [(c2jYk,
                       label: block_c2jYk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jYk: // global
           (_s2jeL::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswupper(I64[R1 + 7]);
           if (_s2jeL::I64 == 0) goto c2jYB; else goto c2jYA;
       c2jYB: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jYA: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.90268915 UTC

[section ""data" . GHC.Unicode.isPrint_closure" {
     GHC.Unicode.isPrint_closure:
         const GHC.Unicode.isPrint_info;
 },
 GHC.Unicode.isPrint_entry() //  [R2]
         { info_tbl: [(c2jYK,
                       label: GHC.Unicode.isPrint_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jYK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jYL; else goto c2jYM;
       c2jYL: // global
           R2 = R2;
           R1 = GHC.Unicode.isPrint_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jYM: // global
           I64[Sp - 8] = block_c2jYH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jYZ; else goto c2jYI;
       u2jYZ: // global
           call _c2jYH(R1) args: 0, res: 0, upd: 0;
       c2jYI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jYH() //  [R1]
         { info_tbl: [(c2jYH,
                       label: block_c2jYH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jYH: // global
           (_s2jeU::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswprint(I64[R1 + 7]);
           if (_s2jeU::I64 == 0) goto c2jYY; else goto c2jYX;
       c2jYY: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jYX: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.904011171 UTC

[section ""data" . GHC.Unicode.isControl_closure" {
     GHC.Unicode.isControl_closure:
         const GHC.Unicode.isControl_info;
 },
 GHC.Unicode.isControl_entry() //  [R2]
         { info_tbl: [(c2jZ7,
                       label: GHC.Unicode.isControl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jZ7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jZ8; else goto c2jZ9;
       c2jZ8: // global
           R2 = R2;
           R1 = GHC.Unicode.isControl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jZ9: // global
           I64[Sp - 8] = block_c2jZ4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jZm; else goto c2jZ5;
       u2jZm: // global
           call _c2jZ4(R1) args: 0, res: 0, upd: 0;
       c2jZ5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jZ4() //  [R1]
         { info_tbl: [(c2jZ4,
                       label: block_c2jZ4_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jZ4: // global
           (_s2jf3::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswcntrl(I64[R1 + 7]);
           if (_s2jf3::I64 == 0) goto c2jZl; else goto c2jZk;
       c2jZl: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jZk: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.905394142 UTC

[section ""data" . GHC.Unicode.isAlphaNum_closure" {
     GHC.Unicode.isAlphaNum_closure:
         const GHC.Unicode.isAlphaNum_info;
 },
 GHC.Unicode.isAlphaNum_entry() //  [R2]
         { info_tbl: [(c2jZu,
                       label: GHC.Unicode.isAlphaNum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jZu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jZv; else goto c2jZw;
       c2jZv: // global
           R2 = R2;
           R1 = GHC.Unicode.isAlphaNum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jZw: // global
           I64[Sp - 8] = block_c2jZr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2jZJ; else goto c2jZs;
       u2jZJ: // global
           call _c2jZr(R1) args: 0, res: 0, upd: 0;
       c2jZs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jZr() //  [R1]
         { info_tbl: [(c2jZr,
                       label: block_c2jZr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jZr: // global
           (_s2jfc::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalnum(I64[R1 + 7]);
           if (_s2jfc::I64 == 0) goto c2jZI; else goto c2jZH;
       c2jZI: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2jZH: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.906741975 UTC

[section ""data" . GHC.Unicode.isAlpha_closure" {
     GHC.Unicode.isAlpha_closure:
         const GHC.Unicode.isAlpha_info;
 },
 GHC.Unicode.isAlpha_entry() //  [R2]
         { info_tbl: [(c2jZR,
                       label: GHC.Unicode.isAlpha_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jZR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2jZS; else goto c2jZT;
       c2jZS: // global
           R2 = R2;
           R1 = GHC.Unicode.isAlpha_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2jZT: // global
           I64[Sp - 8] = block_c2jZO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2k06; else goto c2jZP;
       u2k06: // global
           call _c2jZO(R1) args: 0, res: 0, upd: 0;
       c2jZP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2jZO() //  [R1]
         { info_tbl: [(c2jZO,
                       label: block_c2jZO_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2jZO: // global
           (_s2jfl::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalpha(I64[R1 + 7]);
           if (_s2jfl::I64 == 0) goto c2k05; else goto c2k04;
       c2k05: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2k04: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.908176271 UTC

[section ""data" . GHC.Unicode.$wisSpace_closure" {
     GHC.Unicode.$wisSpace_closure:
         const GHC.Unicode.$wisSpace_info;
 },
 GHC.Unicode.$wisSpace_entry() //  [R2]
         { info_tbl: [(c2k0d,
                       label: GHC.Unicode.$wisSpace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k0d: // global
           if (R2 > 887) goto c2k0x; else goto c2k0R;
       c2k0x: // global
           (_s2jfv::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswspace(R2);
           if (_s2jfv::I64 == 0) goto c2k0J; else goto c2k0Q;
       c2k0R: // global
           if (R2 == 32) goto c2k0Q; else goto c2k0P;
       c2k0P: // global
           if ((R2 + -9) <= 4) goto c2k0Q; else goto c2k0M;
       c2k0M: // global
           if (R2 == 160) goto c2k0Q; else goto c2k0J;
       c2k0Q: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2k0J: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.909328711 UTC

[section ""data" . GHC.Unicode.isSpace_closure" {
     GHC.Unicode.isSpace_closure:
         const GHC.Unicode.isSpace_info;
 },
 GHC.Unicode.isSpace_entry() //  [R2]
         { info_tbl: [(c2k0Z,
                       label: GHC.Unicode.isSpace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k0Z: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2k10; else goto c2k11;
       c2k10: // global
           R2 = R2;
           R1 = GHC.Unicode.isSpace_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2k11: // global
           I64[Sp - 8] = block_c2k0W_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2k15; else goto c2k0X;
       u2k15: // global
           call _c2k0W(R1) args: 0, res: 0, upd: 0;
       c2k0X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2k0W() //  [R1]
         { info_tbl: [(c2k0W,
                       label: block_c2k0W_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k0W: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wisSpace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.910226273 UTC

[section ""data" . GHC.Unicode.UppercaseLetter_closure" {
     GHC.Unicode.UppercaseLetter_closure:
         const GHC.Unicode.UppercaseLetter_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.910793295 UTC

[section ""data" . GHC.Unicode.LowercaseLetter_closure" {
     GHC.Unicode.LowercaseLetter_closure:
         const GHC.Unicode.LowercaseLetter_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.911323733 UTC

[section ""data" . GHC.Unicode.TitlecaseLetter_closure" {
     GHC.Unicode.TitlecaseLetter_closure:
         const GHC.Unicode.TitlecaseLetter_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.911887407 UTC

[section ""data" . GHC.Unicode.ModifierLetter_closure" {
     GHC.Unicode.ModifierLetter_closure:
         const GHC.Unicode.ModifierLetter_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.91247285 UTC

[section ""data" . GHC.Unicode.OtherLetter_closure" {
     GHC.Unicode.OtherLetter_closure:
         const GHC.Unicode.OtherLetter_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.913008909 UTC

[section ""data" . GHC.Unicode.NonSpacingMark_closure" {
     GHC.Unicode.NonSpacingMark_closure:
         const GHC.Unicode.NonSpacingMark_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.914633695 UTC

[section ""data" . GHC.Unicode.SpacingCombiningMark_closure" {
     GHC.Unicode.SpacingCombiningMark_closure:
         const GHC.Unicode.SpacingCombiningMark_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.91555866 UTC

[section ""data" . GHC.Unicode.EnclosingMark_closure" {
     GHC.Unicode.EnclosingMark_closure:
         const GHC.Unicode.EnclosingMark_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.916248114 UTC

[section ""data" . GHC.Unicode.DecimalNumber_closure" {
     GHC.Unicode.DecimalNumber_closure:
         const GHC.Unicode.DecimalNumber_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.916856376 UTC

[section ""data" . GHC.Unicode.LetterNumber_closure" {
     GHC.Unicode.LetterNumber_closure:
         const GHC.Unicode.LetterNumber_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.917583327 UTC

[section ""data" . GHC.Unicode.OtherNumber_closure" {
     GHC.Unicode.OtherNumber_closure:
         const GHC.Unicode.OtherNumber_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.918236499 UTC

[section ""data" . GHC.Unicode.ConnectorPunctuation_closure" {
     GHC.Unicode.ConnectorPunctuation_closure:
         const GHC.Unicode.ConnectorPunctuation_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.918959743 UTC

[section ""data" . GHC.Unicode.DashPunctuation_closure" {
     GHC.Unicode.DashPunctuation_closure:
         const GHC.Unicode.DashPunctuation_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.919648526 UTC

[section ""data" . GHC.Unicode.OpenPunctuation_closure" {
     GHC.Unicode.OpenPunctuation_closure:
         const GHC.Unicode.OpenPunctuation_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.920381315 UTC

[section ""data" . GHC.Unicode.ClosePunctuation_closure" {
     GHC.Unicode.ClosePunctuation_closure:
         const GHC.Unicode.ClosePunctuation_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.921053765 UTC

[section ""data" . GHC.Unicode.InitialQuote_closure" {
     GHC.Unicode.InitialQuote_closure:
         const GHC.Unicode.InitialQuote_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.921817188 UTC

[section ""data" . GHC.Unicode.FinalQuote_closure" {
     GHC.Unicode.FinalQuote_closure:
         const GHC.Unicode.FinalQuote_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.922446145 UTC

[section ""data" . GHC.Unicode.OtherPunctuation_closure" {
     GHC.Unicode.OtherPunctuation_closure:
         const GHC.Unicode.OtherPunctuation_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.923128188 UTC

[section ""data" . GHC.Unicode.MathSymbol_closure" {
     GHC.Unicode.MathSymbol_closure:
         const GHC.Unicode.MathSymbol_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.923766961 UTC

[section ""data" . GHC.Unicode.CurrencySymbol_closure" {
     GHC.Unicode.CurrencySymbol_closure:
         const GHC.Unicode.CurrencySymbol_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.924447351 UTC

[section ""data" . GHC.Unicode.ModifierSymbol_closure" {
     GHC.Unicode.ModifierSymbol_closure:
         const GHC.Unicode.ModifierSymbol_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.925126077 UTC

[section ""data" . GHC.Unicode.OtherSymbol_closure" {
     GHC.Unicode.OtherSymbol_closure:
         const GHC.Unicode.OtherSymbol_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.925920737 UTC

[section ""data" . GHC.Unicode.Space_closure" {
     GHC.Unicode.Space_closure:
         const GHC.Unicode.Space_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.926574002 UTC

[section ""data" . GHC.Unicode.LineSeparator_closure" {
     GHC.Unicode.LineSeparator_closure:
         const GHC.Unicode.LineSeparator_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.927314978 UTC

[section ""data" . GHC.Unicode.ParagraphSeparator_closure" {
     GHC.Unicode.ParagraphSeparator_closure:
         const GHC.Unicode.ParagraphSeparator_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.928097154 UTC

[section ""data" . GHC.Unicode.Control_closure" {
     GHC.Unicode.Control_closure:
         const GHC.Unicode.Control_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.928787372 UTC

[section ""data" . GHC.Unicode.Format_closure" {
     GHC.Unicode.Format_closure:
         const GHC.Unicode.Format_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.92948059 UTC

[section ""data" . GHC.Unicode.Surrogate_closure" {
     GHC.Unicode.Surrogate_closure:
         const GHC.Unicode.Surrogate_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.930200508 UTC

[section ""data" . GHC.Unicode.PrivateUse_closure" {
     GHC.Unicode.PrivateUse_closure:
         const GHC.Unicode.PrivateUse_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.93092888 UTC

[section ""data" . GHC.Unicode.NotAssigned_closure" {
     GHC.Unicode.NotAssigned_closure:
         const GHC.Unicode.NotAssigned_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.931578897 UTC

[section ""relreadonly" . GHC.Unicode.GeneralCategory_closure_tbl" {
     GHC.Unicode.GeneralCategory_closure_tbl:
         const GHC.Unicode.UppercaseLetter_closure+1;
         const GHC.Unicode.LowercaseLetter_closure+1;
         const GHC.Unicode.TitlecaseLetter_closure+1;
         const GHC.Unicode.ModifierLetter_closure+1;
         const GHC.Unicode.OtherLetter_closure+1;
         const GHC.Unicode.NonSpacingMark_closure+1;
         const GHC.Unicode.SpacingCombiningMark_closure+1;
         const GHC.Unicode.EnclosingMark_closure+1;
         const GHC.Unicode.DecimalNumber_closure+1;
         const GHC.Unicode.LetterNumber_closure+1;
         const GHC.Unicode.OtherNumber_closure+1;
         const GHC.Unicode.ConnectorPunctuation_closure+1;
         const GHC.Unicode.DashPunctuation_closure+1;
         const GHC.Unicode.OpenPunctuation_closure+1;
         const GHC.Unicode.ClosePunctuation_closure+1;
         const GHC.Unicode.InitialQuote_closure+1;
         const GHC.Unicode.FinalQuote_closure+1;
         const GHC.Unicode.OtherPunctuation_closure+1;
         const GHC.Unicode.MathSymbol_closure+1;
         const GHC.Unicode.CurrencySymbol_closure+1;
         const GHC.Unicode.ModifierSymbol_closure+1;
         const GHC.Unicode.OtherSymbol_closure+1;
         const GHC.Unicode.Space_closure+1;
         const GHC.Unicode.LineSeparator_closure+1;
         const GHC.Unicode.ParagraphSeparator_closure+1;
         const GHC.Unicode.Control_closure+1;
         const GHC.Unicode.Format_closure+1;
         const GHC.Unicode.Surrogate_closure+1;
         const GHC.Unicode.PrivateUse_closure+1;
         const GHC.Unicode.NotAssigned_closure+1;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.932823696 UTC

[GHC.Unicode.UppercaseLetter_con_entry() //  [R1]
         { info_tbl: [(c2k16,
                       label: GHC.Unicode.UppercaseLetter_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,85,112,112,101,114,99,97,115,101,76,101,116,116,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k16: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.933892068 UTC

[GHC.Unicode.LowercaseLetter_con_entry() //  [R1]
         { info_tbl: [(c2k17,
                       label: GHC.Unicode.LowercaseLetter_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,76,111,119,101,114,99,97,115,101,76,101,116,116,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k17: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.934771984 UTC

[GHC.Unicode.TitlecaseLetter_con_entry() //  [R1]
         { info_tbl: [(c2k18,
                       label: GHC.Unicode.TitlecaseLetter_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,84,105,116,108,101,99,97,115,101,76,101,116,116,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k18: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.935634466 UTC

[GHC.Unicode.ModifierLetter_con_entry() //  [R1]
         { info_tbl: [(c2k19,
                       label: GHC.Unicode.ModifierLetter_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,77,111,100,105,102,105,101,114,76,101,116,116,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k19: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.936656179 UTC

[GHC.Unicode.OtherLetter_con_entry() //  [R1]
         { info_tbl: [(c2k1a,
                       label: GHC.Unicode.OtherLetter_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 4
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,76,101,116,116,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1a: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.93754653 UTC

[GHC.Unicode.NonSpacingMark_con_entry() //  [R1]
         { info_tbl: [(c2k1b,
                       label: GHC.Unicode.NonSpacingMark_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 5
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,78,111,110,83,112,97,99,105,110,103,77,97,114,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1b: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.938448929 UTC

[GHC.Unicode.SpacingCombiningMark_con_entry() //  [R1]
         { info_tbl: [(c2k1c,
                       label: GHC.Unicode.SpacingCombiningMark_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 6
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,83,112,97,99,105,110,103,67,111,109,98,105,110,105,110,103,77,97,114,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1c: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.939389156 UTC

[GHC.Unicode.EnclosingMark_con_entry() //  [R1]
         { info_tbl: [(c2k1d,
                       label: GHC.Unicode.EnclosingMark_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 7
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,69,110,99,108,111,115,105,110,103,77,97,114,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1d: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.940305146 UTC

[GHC.Unicode.DecimalNumber_con_entry() //  [R1]
         { info_tbl: [(c2k1e,
                       label: GHC.Unicode.DecimalNumber_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 8
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,68,101,99,105,109,97,108,78,117,109,98,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1e: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.941210714 UTC

[GHC.Unicode.LetterNumber_con_entry() //  [R1]
         { info_tbl: [(c2k1f,
                       label: GHC.Unicode.LetterNumber_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 9
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,76,101,116,116,101,114,78,117,109,98,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1f: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.943253138 UTC

[GHC.Unicode.OtherNumber_con_entry() //  [R1]
         { info_tbl: [(c2k1g,
                       label: GHC.Unicode.OtherNumber_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 10
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,78,117,109,98,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1g: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.944060725 UTC

[GHC.Unicode.ConnectorPunctuation_con_entry() //  [R1]
         { info_tbl: [(c2k1h,
                       label: GHC.Unicode.ConnectorPunctuation_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 11
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,111,110,110,101,99,116,111,114,80,117,110,99,116,117,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1h: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.944741955 UTC

[GHC.Unicode.DashPunctuation_con_entry() //  [R1]
         { info_tbl: [(c2k1i,
                       label: GHC.Unicode.DashPunctuation_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 12
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,68,97,115,104,80,117,110,99,116,117,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1i: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.945485301 UTC

[GHC.Unicode.OpenPunctuation_con_entry() //  [R1]
         { info_tbl: [(c2k1j,
                       label: GHC.Unicode.OpenPunctuation_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 13
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,112,101,110,80,117,110,99,116,117,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1j: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.946149148 UTC

[GHC.Unicode.ClosePunctuation_con_entry() //  [R1]
         { info_tbl: [(c2k1k,
                       label: GHC.Unicode.ClosePunctuation_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 14
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,108,111,115,101,80,117,110,99,116,117,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1k: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.946862487 UTC

[GHC.Unicode.InitialQuote_con_entry() //  [R1]
         { info_tbl: [(c2k1l,
                       label: GHC.Unicode.InitialQuote_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 15
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,73,110,105,116,105,97,108,81,117,111,116,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1l: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.947545572 UTC

[GHC.Unicode.FinalQuote_con_entry() //  [R1]
         { info_tbl: [(c2k1m,
                       label: GHC.Unicode.FinalQuote_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 16
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,70,105,110,97,108,81,117,111,116,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1m: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.948242785 UTC

[GHC.Unicode.OtherPunctuation_con_entry() //  [R1]
         { info_tbl: [(c2k1n,
                       label: GHC.Unicode.OtherPunctuation_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 17
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,80,117,110,99,116,117,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1n: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.948929624 UTC

[GHC.Unicode.MathSymbol_con_entry() //  [R1]
         { info_tbl: [(c2k1o,
                       label: GHC.Unicode.MathSymbol_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 18
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,77,97,116,104,83,121,109,98,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1o: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.949696523 UTC

[GHC.Unicode.CurrencySymbol_con_entry() //  [R1]
         { info_tbl: [(c2k1p,
                       label: GHC.Unicode.CurrencySymbol_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 19
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,117,114,114,101,110,99,121,83,121,109,98,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1p: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.950407362 UTC

[GHC.Unicode.ModifierSymbol_con_entry() //  [R1]
         { info_tbl: [(c2k1q,
                       label: GHC.Unicode.ModifierSymbol_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 20
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,77,111,100,105,102,105,101,114,83,121,109,98,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1q: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.951090926 UTC

[GHC.Unicode.OtherSymbol_con_entry() //  [R1]
         { info_tbl: [(c2k1r,
                       label: GHC.Unicode.OtherSymbol_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 21
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,83,121,109,98,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1r: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.951808164 UTC

[GHC.Unicode.Space_con_entry() //  [R1]
         { info_tbl: [(c2k1s,
                       label: GHC.Unicode.Space_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 22
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,83,112,97,99,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1s: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.952479723 UTC

[GHC.Unicode.LineSeparator_con_entry() //  [R1]
         { info_tbl: [(c2k1t,
                       label: GHC.Unicode.LineSeparator_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 23
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,76,105,110,101,83,101,112,97,114,97,116,111,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1t: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.953189775 UTC

[GHC.Unicode.ParagraphSeparator_con_entry() //  [R1]
         { info_tbl: [(c2k1u,
                       label: GHC.Unicode.ParagraphSeparator_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 24
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,80,97,114,97,103,114,97,112,104,83,101,112,97,114,97,116,111,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1u: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.953949264 UTC

[GHC.Unicode.Control_con_entry() //  [R1]
         { info_tbl: [(c2k1v,
                       label: GHC.Unicode.Control_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 25
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,111,110,116,114,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1v: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.954778096 UTC

[GHC.Unicode.Format_con_entry() //  [R1]
         { info_tbl: [(c2k1w,
                       label: GHC.Unicode.Format_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 26
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,70,111,114,109,97,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1w: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.95546059 UTC

[GHC.Unicode.Surrogate_con_entry() //  [R1]
         { info_tbl: [(c2k1x,
                       label: GHC.Unicode.Surrogate_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 27
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,83,117,114,114,111,103,97,116,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1x: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.956178369 UTC

[GHC.Unicode.PrivateUse_con_entry() //  [R1]
         { info_tbl: [(c2k1y,
                       label: GHC.Unicode.PrivateUse_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 28
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,80,114,105,118,97,116,101,85,115,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1y: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.95688763 UTC

[GHC.Unicode.NotAssigned_con_entry() //  [R1]
         { info_tbl: [(c2k1z,
                       label: GHC.Unicode.NotAssigned_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 29
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,78,111,116,65,115,115,105,103,110,101,100]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1z: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.957567412 UTC

[section ""relreadonly" . S2jm9_srt" {
     S2jm9_srt:
         const GHC.Unicode.$w$cshowsPrec_closure;
         const lvl1_r2j63_closure;
         const lvl3_r2j65_closure;
         const lvl5_r2j67_closure;
         const lvl7_r2j69_closure;
         const lvl9_r2j6b_closure;
         const lvl11_r2j6d_closure;
         const lvl13_r2j6f_closure;
         const lvl15_r2j6h_closure;
         const lvl17_r2j6j_closure;
         const lvl19_r2j6l_closure;
         const lvl21_r2j6n_closure;
         const lvl23_r2j6p_closure;
         const lvl25_r2j6r_closure;
         const lvl27_r2j6t_closure;
         const lvl29_r2j6v_closure;
         const lvl31_r2j6x_closure;
         const lvl33_r2j6z_closure;
         const lvl35_r2j6B_closure;
         const lvl37_r2j6D_closure;
         const lvl39_r2j6F_closure;
         const lvl41_r2j6H_closure;
         const lvl43_r2j6J_closure;
         const lvl45_r2j6L_closure;
         const lvl47_r2j6N_closure;
         const lvl49_r2j6P_closure;
         const lvl51_r2j6R_closure;
         const lvl53_r2j6T_closure;
         const lvl55_r2j6V_closure;
         const lvl57_r2j6X_closure;
         const lvl59_r2j6Z_closure;
         const GHC.Arr.hopelessIndexError_closure;
         const GHC.Unicode.$fIxGeneralCategory_$cindex_closure;
         const lvl62_r2j7d_closure;
         const lvl63_r2j7e_closure;
         const lvl64_r2j7f_closure;
         const GHC.Err.error_closure;
         const GHC.Unicode.$wlvl_closure;
         const $dIP3_r2j7a_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure;
         const GHC.Unicode.$w$ctoEnum_closure;
         const GHC.Char.$wlvl_closure;
         const GHC.Unicode.toLower_closure;
         const GHC.Unicode.toUpper_closure;
         const GHC.Unicode.toTitle_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$csucc_closure;
         const GHC.Unicode.$fEnumGeneralCategory2_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$cpred_closure;
         const GHC.Unicode.$fEnumGeneralCategory1_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure;
         const GHC.Unicode.generalCategory_closure;
         const GHC.Unicode.$wgeneralCategory_closure;
         const GHC.Unicode.isPunctuation_closure;
         const GHC.Unicode.$wisPunctuation_closure;
         const GHC.Unicode.isSymbol_closure;
         const GHC.Unicode.$wisSymbol_closure;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.958478818 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:57:01.958987674 UTC

[section ""data" . GHC.Unicode.$fBoundedGeneralCategory_closure" {
     GHC.Unicode.$fBoundedGeneralCategory_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Unicode.UppercaseLetter_closure+1;
         const GHC.Unicode.NotAssigned_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.959597337 UTC

[section ""cstring" . lvl_r2j62_bytes" {
     lvl_r2j62_bytes:
         I8[] [85,112,112,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.96044604 UTC

[section ""data" . lvl1_r2j63_closure" {
     lvl1_r2j63_closure:
         const lvl1_r2j63_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r2j63_entry() //  [R1]
         { info_tbl: [(c2k1G,
                       label: lvl1_r2j63_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k1H; else goto c2k1I;
       c2k1H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k1I: // global
           (_c2k1D::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k1D::I64 == 0) goto c2k1F; else goto c2k1E;
       c2k1F: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k1E: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k1D::I64;
           R2 = lvl_r2j62_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.961418861 UTC

[section ""cstring" . lvl2_r2j64_bytes" {
     lvl2_r2j64_bytes:
         I8[] [76,111,119,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.962171223 UTC

[section ""data" . lvl3_r2j65_closure" {
     lvl3_r2j65_closure:
         const lvl3_r2j65_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r2j65_entry() //  [R1]
         { info_tbl: [(c2k1P,
                       label: lvl3_r2j65_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k1Q; else goto c2k1R;
       c2k1Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k1R: // global
           (_c2k1M::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k1M::I64 == 0) goto c2k1O; else goto c2k1N;
       c2k1O: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k1N: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k1M::I64;
           R2 = lvl2_r2j64_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.963124366 UTC

[section ""cstring" . lvl4_r2j66_bytes" {
     lvl4_r2j66_bytes:
         I8[] [84,105,116,108,101,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.963872643 UTC

[section ""data" . lvl5_r2j67_closure" {
     lvl5_r2j67_closure:
         const lvl5_r2j67_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r2j67_entry() //  [R1]
         { info_tbl: [(c2k1Y,
                       label: lvl5_r2j67_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k1Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k1Z; else goto c2k20;
       c2k1Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k20: // global
           (_c2k1V::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k1V::I64 == 0) goto c2k1X; else goto c2k1W;
       c2k1X: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k1W: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k1V::I64;
           R2 = lvl4_r2j66_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.964795404 UTC

[section ""cstring" . lvl6_r2j68_bytes" {
     lvl6_r2j68_bytes:
         I8[] [77,111,100,105,102,105,101,114,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.966291963 UTC

[section ""data" . lvl7_r2j69_closure" {
     lvl7_r2j69_closure:
         const lvl7_r2j69_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r2j69_entry() //  [R1]
         { info_tbl: [(c2k27,
                       label: lvl7_r2j69_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k27: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k28; else goto c2k29;
       c2k28: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k29: // global
           (_c2k24::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k24::I64 == 0) goto c2k26; else goto c2k25;
       c2k26: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k25: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k24::I64;
           R2 = lvl6_r2j68_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.967462752 UTC

[section ""cstring" . lvl8_r2j6a_bytes" {
     lvl8_r2j6a_bytes:
         I8[] [79,116,104,101,114,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.968256489 UTC

[section ""data" . lvl9_r2j6b_closure" {
     lvl9_r2j6b_closure:
         const lvl9_r2j6b_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_r2j6b_entry() //  [R1]
         { info_tbl: [(c2k2g,
                       label: lvl9_r2j6b_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k2g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k2h; else goto c2k2i;
       c2k2h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k2i: // global
           (_c2k2d::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k2d::I64 == 0) goto c2k2f; else goto c2k2e;
       c2k2f: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k2e: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k2d::I64;
           R2 = lvl8_r2j6a_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.969158869 UTC

[section ""cstring" . lvl10_r2j6c_bytes" {
     lvl10_r2j6c_bytes:
         I8[] [78,111,110,83,112,97,99,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.969986404 UTC

[section ""data" . lvl11_r2j6d_closure" {
     lvl11_r2j6d_closure:
         const lvl11_r2j6d_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_r2j6d_entry() //  [R1]
         { info_tbl: [(c2k2p,
                       label: lvl11_r2j6d_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k2p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k2q; else goto c2k2r;
       c2k2q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k2r: // global
           (_c2k2m::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k2m::I64 == 0) goto c2k2o; else goto c2k2n;
       c2k2o: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k2n: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k2m::I64;
           R2 = lvl10_r2j6c_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.970907708 UTC

[section ""cstring" . lvl12_r2j6e_bytes" {
     lvl12_r2j6e_bytes:
         I8[] [83,112,97,99,105,110,103,67,111,109,98,105,110,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.971663995 UTC

[section ""data" . lvl13_r2j6f_closure" {
     lvl13_r2j6f_closure:
         const lvl13_r2j6f_info;
         const 0;
         const 0;
         const 0;
 },
 lvl13_r2j6f_entry() //  [R1]
         { info_tbl: [(c2k2y,
                       label: lvl13_r2j6f_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k2y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k2z; else goto c2k2A;
       c2k2z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k2A: // global
           (_c2k2v::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k2v::I64 == 0) goto c2k2x; else goto c2k2w;
       c2k2x: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k2w: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k2v::I64;
           R2 = lvl12_r2j6e_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.972600016 UTC

[section ""cstring" . lvl14_r2j6g_bytes" {
     lvl14_r2j6g_bytes:
         I8[] [69,110,99,108,111,115,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.973422486 UTC

[section ""data" . lvl15_r2j6h_closure" {
     lvl15_r2j6h_closure:
         const lvl15_r2j6h_info;
         const 0;
         const 0;
         const 0;
 },
 lvl15_r2j6h_entry() //  [R1]
         { info_tbl: [(c2k2H,
                       label: lvl15_r2j6h_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k2H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k2I; else goto c2k2J;
       c2k2I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k2J: // global
           (_c2k2E::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k2E::I64 == 0) goto c2k2G; else goto c2k2F;
       c2k2G: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k2F: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k2E::I64;
           R2 = lvl14_r2j6g_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.974366988 UTC

[section ""cstring" . lvl16_r2j6i_bytes" {
     lvl16_r2j6i_bytes:
         I8[] [68,101,99,105,109,97,108,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.975057067 UTC

[section ""data" . lvl17_r2j6j_closure" {
     lvl17_r2j6j_closure:
         const lvl17_r2j6j_info;
         const 0;
         const 0;
         const 0;
 },
 lvl17_r2j6j_entry() //  [R1]
         { info_tbl: [(c2k2Q,
                       label: lvl17_r2j6j_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k2Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k2R; else goto c2k2S;
       c2k2R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k2S: // global
           (_c2k2N::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k2N::I64 == 0) goto c2k2P; else goto c2k2O;
       c2k2P: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k2O: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k2N::I64;
           R2 = lvl16_r2j6i_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.975956448 UTC

[section ""cstring" . lvl18_r2j6k_bytes" {
     lvl18_r2j6k_bytes:
         I8[] [76,101,116,116,101,114,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.976679849 UTC

[section ""data" . lvl19_r2j6l_closure" {
     lvl19_r2j6l_closure:
         const lvl19_r2j6l_info;
         const 0;
         const 0;
         const 0;
 },
 lvl19_r2j6l_entry() //  [R1]
         { info_tbl: [(c2k2Z,
                       label: lvl19_r2j6l_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k2Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k30; else goto c2k31;
       c2k30: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k31: // global
           (_c2k2W::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k2W::I64 == 0) goto c2k2Y; else goto c2k2X;
       c2k2Y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k2X: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k2W::I64;
           R2 = lvl18_r2j6k_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.97772627 UTC

[section ""cstring" . lvl20_r2j6m_bytes" {
     lvl20_r2j6m_bytes:
         I8[] [79,116,104,101,114,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.978473992 UTC

[section ""data" . lvl21_r2j6n_closure" {
     lvl21_r2j6n_closure:
         const lvl21_r2j6n_info;
         const 0;
         const 0;
         const 0;
 },
 lvl21_r2j6n_entry() //  [R1]
         { info_tbl: [(c2k38,
                       label: lvl21_r2j6n_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k38: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k39; else goto c2k3a;
       c2k39: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k3a: // global
           (_c2k35::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k35::I64 == 0) goto c2k37; else goto c2k36;
       c2k37: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k36: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k35::I64;
           R2 = lvl20_r2j6m_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.979412132 UTC

[section ""cstring" . lvl22_r2j6o_bytes" {
     lvl22_r2j6o_bytes:
         I8[] [67,111,110,110,101,99,116,111,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.980173822 UTC

[section ""data" . lvl23_r2j6p_closure" {
     lvl23_r2j6p_closure:
         const lvl23_r2j6p_info;
         const 0;
         const 0;
         const 0;
 },
 lvl23_r2j6p_entry() //  [R1]
         { info_tbl: [(c2k3h,
                       label: lvl23_r2j6p_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k3h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k3i; else goto c2k3j;
       c2k3i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k3j: // global
           (_c2k3e::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k3e::I64 == 0) goto c2k3g; else goto c2k3f;
       c2k3g: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k3f: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k3e::I64;
           R2 = lvl22_r2j6o_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.981176389 UTC

[section ""cstring" . lvl24_r2j6q_bytes" {
     lvl24_r2j6q_bytes:
         I8[] [68,97,115,104,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.982011379 UTC

[section ""data" . lvl25_r2j6r_closure" {
     lvl25_r2j6r_closure:
         const lvl25_r2j6r_info;
         const 0;
         const 0;
         const 0;
 },
 lvl25_r2j6r_entry() //  [R1]
         { info_tbl: [(c2k3q,
                       label: lvl25_r2j6r_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k3q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k3r; else goto c2k3s;
       c2k3r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k3s: // global
           (_c2k3n::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k3n::I64 == 0) goto c2k3p; else goto c2k3o;
       c2k3p: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k3o: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k3n::I64;
           R2 = lvl24_r2j6q_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.982970375 UTC

[section ""cstring" . lvl26_r2j6s_bytes" {
     lvl26_r2j6s_bytes:
         I8[] [79,112,101,110,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.983727267 UTC

[section ""data" . lvl27_r2j6t_closure" {
     lvl27_r2j6t_closure:
         const lvl27_r2j6t_info;
         const 0;
         const 0;
         const 0;
 },
 lvl27_r2j6t_entry() //  [R1]
         { info_tbl: [(c2k3z,
                       label: lvl27_r2j6t_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k3z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k3A; else goto c2k3B;
       c2k3A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k3B: // global
           (_c2k3w::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k3w::I64 == 0) goto c2k3y; else goto c2k3x;
       c2k3y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k3x: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k3w::I64;
           R2 = lvl26_r2j6s_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.984691076 UTC

[section ""cstring" . lvl28_r2j6u_bytes" {
     lvl28_r2j6u_bytes:
         I8[] [67,108,111,115,101,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.98550626 UTC

[section ""data" . lvl29_r2j6v_closure" {
     lvl29_r2j6v_closure:
         const lvl29_r2j6v_info;
         const 0;
         const 0;
         const 0;
 },
 lvl29_r2j6v_entry() //  [R1]
         { info_tbl: [(c2k3I,
                       label: lvl29_r2j6v_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k3I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k3J; else goto c2k3K;
       c2k3J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k3K: // global
           (_c2k3F::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k3F::I64 == 0) goto c2k3H; else goto c2k3G;
       c2k3H: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k3G: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k3F::I64;
           R2 = lvl28_r2j6u_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.986435847 UTC

[section ""cstring" . lvl30_r2j6w_bytes" {
     lvl30_r2j6w_bytes:
         I8[] [73,110,105,116,105,97,108,81,117,111,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.987211716 UTC

[section ""data" . lvl31_r2j6x_closure" {
     lvl31_r2j6x_closure:
         const lvl31_r2j6x_info;
         const 0;
         const 0;
         const 0;
 },
 lvl31_r2j6x_entry() //  [R1]
         { info_tbl: [(c2k3R,
                       label: lvl31_r2j6x_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k3R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k3S; else goto c2k3T;
       c2k3S: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k3T: // global
           (_c2k3O::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k3O::I64 == 0) goto c2k3Q; else goto c2k3P;
       c2k3Q: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k3P: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k3O::I64;
           R2 = lvl30_r2j6w_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.988162118 UTC

[section ""cstring" . lvl32_r2j6y_bytes" {
     lvl32_r2j6y_bytes:
         I8[] [70,105,110,97,108,81,117,111,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.988943628 UTC

[section ""data" . lvl33_r2j6z_closure" {
     lvl33_r2j6z_closure:
         const lvl33_r2j6z_info;
         const 0;
         const 0;
         const 0;
 },
 lvl33_r2j6z_entry() //  [R1]
         { info_tbl: [(c2k40,
                       label: lvl33_r2j6z_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k40: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k41; else goto c2k42;
       c2k41: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k42: // global
           (_c2k3X::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k3X::I64 == 0) goto c2k3Z; else goto c2k3Y;
       c2k3Z: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k3Y: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k3X::I64;
           R2 = lvl32_r2j6y_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.990013758 UTC

[section ""cstring" . lvl34_r2j6A_bytes" {
     lvl34_r2j6A_bytes:
         I8[] [79,116,104,101,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.992010546 UTC

[section ""data" . lvl35_r2j6B_closure" {
     lvl35_r2j6B_closure:
         const lvl35_r2j6B_info;
         const 0;
         const 0;
         const 0;
 },
 lvl35_r2j6B_entry() //  [R1]
         { info_tbl: [(c2k49,
                       label: lvl35_r2j6B_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k49: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k4a; else goto c2k4b;
       c2k4a: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k4b: // global
           (_c2k46::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k46::I64 == 0) goto c2k48; else goto c2k47;
       c2k48: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k47: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k46::I64;
           R2 = lvl34_r2j6A_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.992990025 UTC

[section ""cstring" . lvl36_r2j6C_bytes" {
     lvl36_r2j6C_bytes:
         I8[] [77,97,116,104,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.993740069 UTC

[section ""data" . lvl37_r2j6D_closure" {
     lvl37_r2j6D_closure:
         const lvl37_r2j6D_info;
         const 0;
         const 0;
         const 0;
 },
 lvl37_r2j6D_entry() //  [R1]
         { info_tbl: [(c2k4i,
                       label: lvl37_r2j6D_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k4i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k4j; else goto c2k4k;
       c2k4j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k4k: // global
           (_c2k4f::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k4f::I64 == 0) goto c2k4h; else goto c2k4g;
       c2k4h: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k4g: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k4f::I64;
           R2 = lvl36_r2j6C_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.994645464 UTC

[section ""cstring" . lvl38_r2j6E_bytes" {
     lvl38_r2j6E_bytes:
         I8[] [67,117,114,114,101,110,99,121,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.99532134 UTC

[section ""data" . lvl39_r2j6F_closure" {
     lvl39_r2j6F_closure:
         const lvl39_r2j6F_info;
         const 0;
         const 0;
         const 0;
 },
 lvl39_r2j6F_entry() //  [R1]
         { info_tbl: [(c2k4r,
                       label: lvl39_r2j6F_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k4r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k4s; else goto c2k4t;
       c2k4s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k4t: // global
           (_c2k4o::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k4o::I64 == 0) goto c2k4q; else goto c2k4p;
       c2k4q: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k4p: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k4o::I64;
           R2 = lvl38_r2j6E_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.996180158 UTC

[section ""cstring" . lvl40_r2j6G_bytes" {
     lvl40_r2j6G_bytes:
         I8[] [77,111,100,105,102,105,101,114,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.996873535 UTC

[section ""data" . lvl41_r2j6H_closure" {
     lvl41_r2j6H_closure:
         const lvl41_r2j6H_info;
         const 0;
         const 0;
         const 0;
 },
 lvl41_r2j6H_entry() //  [R1]
         { info_tbl: [(c2k4A,
                       label: lvl41_r2j6H_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k4A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k4B; else goto c2k4C;
       c2k4B: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k4C: // global
           (_c2k4x::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k4x::I64 == 0) goto c2k4z; else goto c2k4y;
       c2k4z: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k4y: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k4x::I64;
           R2 = lvl40_r2j6G_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.997750845 UTC

[section ""cstring" . lvl42_r2j6I_bytes" {
     lvl42_r2j6I_bytes:
         I8[] [79,116,104,101,114,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.998475976 UTC

[section ""data" . lvl43_r2j6J_closure" {
     lvl43_r2j6J_closure:
         const lvl43_r2j6J_info;
         const 0;
         const 0;
         const 0;
 },
 lvl43_r2j6J_entry() //  [R1]
         { info_tbl: [(c2k4J,
                       label: lvl43_r2j6J_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k4J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k4K; else goto c2k4L;
       c2k4K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k4L: // global
           (_c2k4G::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k4G::I64 == 0) goto c2k4I; else goto c2k4H;
       c2k4I: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k4H: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k4G::I64;
           R2 = lvl42_r2j6I_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.999297261 UTC

[section ""cstring" . lvl44_r2j6K_bytes" {
     lvl44_r2j6K_bytes:
         I8[] [83,112,97,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:01.999981757 UTC

[section ""data" . lvl45_r2j6L_closure" {
     lvl45_r2j6L_closure:
         const lvl45_r2j6L_info;
         const 0;
         const 0;
         const 0;
 },
 lvl45_r2j6L_entry() //  [R1]
         { info_tbl: [(c2k4S,
                       label: lvl45_r2j6L_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k4S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k4T; else goto c2k4U;
       c2k4T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k4U: // global
           (_c2k4P::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k4P::I64 == 0) goto c2k4R; else goto c2k4Q;
       c2k4R: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k4Q: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k4P::I64;
           R2 = lvl44_r2j6K_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.000783339 UTC

[section ""cstring" . lvl46_r2j6M_bytes" {
     lvl46_r2j6M_bytes:
         I8[] [76,105,110,101,83,101,112,97,114,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.001561715 UTC

[section ""data" . lvl47_r2j6N_closure" {
     lvl47_r2j6N_closure:
         const lvl47_r2j6N_info;
         const 0;
         const 0;
         const 0;
 },
 lvl47_r2j6N_entry() //  [R1]
         { info_tbl: [(c2k51,
                       label: lvl47_r2j6N_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k51: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k52; else goto c2k53;
       c2k52: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k53: // global
           (_c2k4Y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k4Y::I64 == 0) goto c2k50; else goto c2k4Z;
       c2k50: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k4Z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k4Y::I64;
           R2 = lvl46_r2j6M_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.002423156 UTC

[section ""cstring" . lvl48_r2j6O_bytes" {
     lvl48_r2j6O_bytes:
         I8[] [80,97,114,97,103,114,97,112,104,83,101,112,97,114,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.003115757 UTC

[section ""data" . lvl49_r2j6P_closure" {
     lvl49_r2j6P_closure:
         const lvl49_r2j6P_info;
         const 0;
         const 0;
         const 0;
 },
 lvl49_r2j6P_entry() //  [R1]
         { info_tbl: [(c2k5a,
                       label: lvl49_r2j6P_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k5a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k5b; else goto c2k5c;
       c2k5b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k5c: // global
           (_c2k57::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k57::I64 == 0) goto c2k59; else goto c2k58;
       c2k59: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k58: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k57::I64;
           R2 = lvl48_r2j6O_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.003962205 UTC

[section ""cstring" . lvl50_r2j6Q_bytes" {
     lvl50_r2j6Q_bytes:
         I8[] [67,111,110,116,114,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.004642931 UTC

[section ""data" . lvl51_r2j6R_closure" {
     lvl51_r2j6R_closure:
         const lvl51_r2j6R_info;
         const 0;
         const 0;
         const 0;
 },
 lvl51_r2j6R_entry() //  [R1]
         { info_tbl: [(c2k5j,
                       label: lvl51_r2j6R_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k5j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k5k; else goto c2k5l;
       c2k5k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k5l: // global
           (_c2k5g::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k5g::I64 == 0) goto c2k5i; else goto c2k5h;
       c2k5i: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k5h: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k5g::I64;
           R2 = lvl50_r2j6Q_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.005571275 UTC

[section ""cstring" . lvl52_r2j6S_bytes" {
     lvl52_r2j6S_bytes:
         I8[] [70,111,114,109,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.006209027 UTC

[section ""data" . lvl53_r2j6T_closure" {
     lvl53_r2j6T_closure:
         const lvl53_r2j6T_info;
         const 0;
         const 0;
         const 0;
 },
 lvl53_r2j6T_entry() //  [R1]
         { info_tbl: [(c2k5s,
                       label: lvl53_r2j6T_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k5s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k5t; else goto c2k5u;
       c2k5t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k5u: // global
           (_c2k5p::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k5p::I64 == 0) goto c2k5r; else goto c2k5q;
       c2k5r: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k5q: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k5p::I64;
           R2 = lvl52_r2j6S_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.007062716 UTC

[section ""cstring" . lvl54_r2j6U_bytes" {
     lvl54_r2j6U_bytes:
         I8[] [83,117,114,114,111,103,97,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.00775746 UTC

[section ""data" . lvl55_r2j6V_closure" {
     lvl55_r2j6V_closure:
         const lvl55_r2j6V_info;
         const 0;
         const 0;
         const 0;
 },
 lvl55_r2j6V_entry() //  [R1]
         { info_tbl: [(c2k5B,
                       label: lvl55_r2j6V_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k5B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k5C; else goto c2k5D;
       c2k5C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k5D: // global
           (_c2k5y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k5y::I64 == 0) goto c2k5A; else goto c2k5z;
       c2k5A: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k5z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k5y::I64;
           R2 = lvl54_r2j6U_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.00859611 UTC

[section ""cstring" . lvl56_r2j6W_bytes" {
     lvl56_r2j6W_bytes:
         I8[] [80,114,105,118,97,116,101,85,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.009350602 UTC

[section ""data" . lvl57_r2j6X_closure" {
     lvl57_r2j6X_closure:
         const lvl57_r2j6X_info;
         const 0;
         const 0;
         const 0;
 },
 lvl57_r2j6X_entry() //  [R1]
         { info_tbl: [(c2k5K,
                       label: lvl57_r2j6X_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k5K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k5L; else goto c2k5M;
       c2k5L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k5M: // global
           (_c2k5H::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k5H::I64 == 0) goto c2k5J; else goto c2k5I;
       c2k5J: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k5I: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k5H::I64;
           R2 = lvl56_r2j6W_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.010220413 UTC

[section ""cstring" . lvl58_r2j6Y_bytes" {
     lvl58_r2j6Y_bytes:
         I8[] [78,111,116,65,115,115,105,103,110,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.010983449 UTC

[section ""data" . lvl59_r2j6Z_closure" {
     lvl59_r2j6Z_closure:
         const lvl59_r2j6Z_info;
         const 0;
         const 0;
         const 0;
 },
 lvl59_r2j6Z_entry() //  [R1]
         { info_tbl: [(c2k5T,
                       label: lvl59_r2j6Z_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k5T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k5U; else goto c2k5V;
       c2k5U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2k5V: // global
           (_c2k5Q::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2k5Q::I64 == 0) goto c2k5S; else goto c2k5R;
       c2k5S: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2k5R: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2k5Q::I64;
           R2 = lvl58_r2j6Y_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.012847376 UTC

[section ""data" . GHC.Unicode.$w$cshowsPrec_closure" {
     GHC.Unicode.$w$cshowsPrec_closure:
         const GHC.Unicode.$w$cshowsPrec_info;
         const 0;
 },
 GHC.Unicode.$w$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c2k6z,
                       label: GHC.Unicode.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k6z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k6A; else goto c2k6B;
       c2k6A: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2k6B: // global
           I64[Sp - 16] = block_c2k60_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2k84; else goto c2k61;
       u2k84: // global
           call _c2k60(R1) args: 0, res: 0, upd: 0;
       c2k61: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2k60() //  [R1]
         { info_tbl: [(c2k60,
                       label: block_c2k60_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k60: // global
           _s2j7l::P64 = P64[Sp + 8];
           switch [0 .. 29] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto c2k64;
               case 1 : goto c2k65;
               case 2 : goto c2k66;
               case 3 : goto c2k67;
               case 4 : goto c2k68;
               case 5 : goto c2k69;
               case 6 : goto c2k6a;
               case 7 : goto c2k6b;
               case 8 : goto c2k6c;
               case 9 : goto c2k6d;
               case 10 : goto c2k6e;
               case 11 : goto c2k6f;
               case 12 : goto c2k6g;
               case 13 : goto c2k6h;
               case 14 : goto c2k6i;
               case 15 : goto c2k6j;
               case 16 : goto c2k6k;
               case 17 : goto c2k6l;
               case 18 : goto c2k6m;
               case 19 : goto c2k6n;
               case 20 : goto c2k6o;
               case 21 : goto c2k6p;
               case 22 : goto c2k6q;
               case 23 : goto c2k6r;
               case 24 : goto c2k6s;
               case 25 : goto c2k6t;
               case 26 : goto c2k6u;
               case 27 : goto c2k6v;
               case 28 : goto c2k6w;
               case 29 : goto c2k6x;
           }
       c2k6x: // global
           R3 = _s2j7l::P64;
           R2 = lvl59_r2j6Z_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6w: // global
           R3 = _s2j7l::P64;
           R2 = lvl57_r2j6X_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6v: // global
           R3 = _s2j7l::P64;
           R2 = lvl55_r2j6V_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6u: // global
           R3 = _s2j7l::P64;
           R2 = lvl53_r2j6T_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6t: // global
           R3 = _s2j7l::P64;
           R2 = lvl51_r2j6R_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6s: // global
           R3 = _s2j7l::P64;
           R2 = lvl49_r2j6P_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6r: // global
           R3 = _s2j7l::P64;
           R2 = lvl47_r2j6N_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6q: // global
           R3 = _s2j7l::P64;
           R2 = lvl45_r2j6L_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6p: // global
           R3 = _s2j7l::P64;
           R2 = lvl43_r2j6J_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6o: // global
           R3 = _s2j7l::P64;
           R2 = lvl41_r2j6H_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6n: // global
           R3 = _s2j7l::P64;
           R2 = lvl39_r2j6F_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6m: // global
           R3 = _s2j7l::P64;
           R2 = lvl37_r2j6D_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6l: // global
           R3 = _s2j7l::P64;
           R2 = lvl35_r2j6B_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6k: // global
           R3 = _s2j7l::P64;
           R2 = lvl33_r2j6z_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6j: // global
           R3 = _s2j7l::P64;
           R2 = lvl31_r2j6x_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6i: // global
           R3 = _s2j7l::P64;
           R2 = lvl29_r2j6v_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6h: // global
           R3 = _s2j7l::P64;
           R2 = lvl27_r2j6t_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6g: // global
           R3 = _s2j7l::P64;
           R2 = lvl25_r2j6r_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6f: // global
           R3 = _s2j7l::P64;
           R2 = lvl23_r2j6p_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6e: // global
           R3 = _s2j7l::P64;
           R2 = lvl21_r2j6n_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6d: // global
           R3 = _s2j7l::P64;
           R2 = lvl19_r2j6l_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6c: // global
           R3 = _s2j7l::P64;
           R2 = lvl17_r2j6j_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6b: // global
           R3 = _s2j7l::P64;
           R2 = lvl15_r2j6h_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k6a: // global
           R3 = _s2j7l::P64;
           R2 = lvl13_r2j6f_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k69: // global
           R3 = _s2j7l::P64;
           R2 = lvl11_r2j6d_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k68: // global
           R3 = _s2j7l::P64;
           R2 = lvl9_r2j6b_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k67: // global
           R3 = _s2j7l::P64;
           R2 = lvl7_r2j69_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k66: // global
           R3 = _s2j7l::P64;
           R2 = lvl5_r2j67_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k65: // global
           R3 = _s2j7l::P64;
           R2 = lvl3_r2j65_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2k64: // global
           R3 = _s2j7l::P64;
           R2 = lvl1_r2j63_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.01713491 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_closure" {
     GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_closure:
         const GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_info;
         const 0;
 },
 GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_entry() //  [R3, R4]
         { info_tbl: [(c2k89,
                       label: GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k89: // global
           _s2j7o::P64 = R3;
           R3 = R4;
           R2 = _s2j7o::P64;
           call GHC.Unicode.$w$cshowsPrec_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.017959175 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory1_closure" {
     GHC.Unicode.$fShowGeneralCategory1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.018590051 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_$cshow_closure" {
     GHC.Unicode.$fShowGeneralCategory_$cshow_closure:
         const GHC.Unicode.$fShowGeneralCategory_$cshow_info;
         const 0;
 },
 GHC.Unicode.$fShowGeneralCategory_$cshow_entry() //  [R2]
         { info_tbl: [(c2k8g,
                       label: GHC.Unicode.$fShowGeneralCategory_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k8g: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = R2;
           call GHC.Unicode.$w$cshowsPrec_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.019480049 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_$cshowList_closure" {
     GHC.Unicode.$fShowGeneralCategory_$cshowList_closure:
         const GHC.Unicode.$fShowGeneralCategory_$cshowList_info;
         const 0;
 },
 GHC.Unicode.$fShowGeneralCategory_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c2k8n,
                       label: GHC.Unicode.$fShowGeneralCategory_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k8n: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Unicode.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.020251655 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_closure" {
     GHC.Unicode.$fShowGeneralCategory_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_closure+3;
         const GHC.Unicode.$fShowGeneralCategory_$cshow_closure+1;
         const GHC.Unicode.$fShowGeneralCategory_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.021621795 UTC

[section ""data" . GHC.Unicode.$fEqGeneralCategory_$c==_closure" {
     GHC.Unicode.$fEqGeneralCategory_$c==_closure:
         const GHC.Unicode.$fEqGeneralCategory_$c==_info;
 },
 GHC.Unicode.$fEqGeneralCategory_$c==_entry() //  [R2, R3]
         { info_tbl: [(c2k8y,
                       label: GHC.Unicode.$fEqGeneralCategory_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k8y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k8E; else goto c2k8F;
       c2k8E: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEqGeneralCategory_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2k8F: // global
           I64[Sp - 16] = block_c2k8u_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2k8Z; else goto c2k8v;
       u2k8Z: // global
           call _c2k8u(R1) args: 0, res: 0, upd: 0;
       c2k8v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2k8u() //  [R1]
         { info_tbl: [(c2k8u,
                       label: block_c2k8u_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k8u: // global
           _s2j7w::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2k8D_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j7w::I64;
           if (R1 & 7 != 0) goto u2k8Y; else goto c2k8K;
       u2k8Y: // global
           call _c2k8D(R1) args: 0, res: 0, upd: 0;
       c2k8K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2k8D() //  [R1]
         { info_tbl: [(c2k8D,
                       label: block_c2k8D_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k8D: // global
           R1 = I64[((I64[Sp + 8] == %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.02327532 UTC

[section ""data" . GHC.Unicode.$fEqGeneralCategory_$c/=_closure" {
     GHC.Unicode.$fEqGeneralCategory_$c/=_closure:
         const GHC.Unicode.$fEqGeneralCategory_$c/=_info;
 },
 GHC.Unicode.$fEqGeneralCategory_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c2k98,
                       label: GHC.Unicode.$fEqGeneralCategory_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k98: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k9e; else goto c2k9f;
       c2k9e: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEqGeneralCategory_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2k9f: // global
           I64[Sp - 16] = block_c2k94_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2k9D; else goto c2k95;
       u2k9D: // global
           call _c2k94(R1) args: 0, res: 0, upd: 0;
       c2k95: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2k94() //  [R1]
         { info_tbl: [(c2k94,
                       label: block_c2k94_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k94: // global
           _s2j7D::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2k9d_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j7D::I64;
           if (R1 & 7 != 0) goto u2k9C; else goto c2k9k;
       u2k9C: // global
           call _c2k9d(R1) args: 0, res: 0, upd: 0;
       c2k9k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2k9d() //  [R1]
         { info_tbl: [(c2k9d,
                       label: block_c2k9d_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k9d: // global
           if (I64[Sp + 8] == %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) goto c2k9z; else goto c2k9y;
       c2k9z: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2k9y: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.024521865 UTC

[section ""data" . GHC.Unicode.$fEqGeneralCategory_closure" {
     GHC.Unicode.$fEqGeneralCategory_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Unicode.$fEqGeneralCategory_$c==_closure+2;
         const GHC.Unicode.$fEqGeneralCategory_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.025554197 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$ccompare_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c2k9M,
                       label: GHC.Unicode.$fOrdGeneralCategory_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k9M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2k9S; else goto c2k9T;
       c2k9S: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2k9T: // global
           I64[Sp - 16] = block_c2k9I_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2kan; else goto c2k9J;
       u2kan: // global
           call _c2k9I(R1) args: 0, res: 0, upd: 0;
       c2k9J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2k9I() //  [R1]
         { info_tbl: [(c2k9I,
                       label: block_c2k9I_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k9I: // global
           _s2j7K::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2k9R_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j7K::I64;
           if (R1 & 7 != 0) goto u2kam; else goto c2k9Y;
       u2kam: // global
           call _c2k9R(R1) args: 0, res: 0, upd: 0;
       c2k9Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2k9R() //  [R1]
         { info_tbl: [(c2k9R,
                       label: block_c2k9R_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2k9R: // global
           _s2j7K::I64 = I64[Sp + 8];
           _s2j7M::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           if (%MO_S_Ge_W64(_s2j7K::I64,
                            _s2j7M::I64)) goto c2kai; else goto c2kaj;
       c2kai: // global
           if (_s2j7K::I64 == _s2j7M::I64) goto c2kag; else goto c2kaf;
       c2kag: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kaf: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kaj: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.027312199 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c<_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c<_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c<_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c<_entry() //  [R2, R3]
         { info_tbl: [(c2kaw,
                       label: GHC.Unicode.$fOrdGeneralCategory_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kaw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kaC; else goto c2kaD;
       c2kaC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2kaD: // global
           I64[Sp - 16] = block_c2kas_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2kaX; else goto c2kat;
       u2kaX: // global
           call _c2kas(R1) args: 0, res: 0, upd: 0;
       c2kat: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kas() //  [R1]
         { info_tbl: [(c2kas,
                       label: block_c2kas_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kas: // global
           _s2j7S::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2kaB_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j7S::I64;
           if (R1 & 7 != 0) goto u2kaW; else goto c2kaI;
       u2kaW: // global
           call _c2kaB(R1) args: 0, res: 0, upd: 0;
       c2kaI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kaB() //  [R1]
         { info_tbl: [(c2kaB,
                       label: block_c2kaB_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kaB: // global
           R1 = I64[(%MO_S_Lt_W64(I64[Sp + 8],
                                  %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.028933671 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c<=_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c<=_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c<=_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c2kb6,
                       label: GHC.Unicode.$fOrdGeneralCategory_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kb6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kbc; else goto c2kbd;
       c2kbc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2kbd: // global
           I64[Sp - 16] = block_c2kb2_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2kbB; else goto c2kb3;
       u2kbB: // global
           call _c2kb2(R1) args: 0, res: 0, upd: 0;
       c2kb3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kb2() //  [R1]
         { info_tbl: [(c2kb2,
                       label: block_c2kb2_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kb2: // global
           _s2j7Z::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2kbb_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j7Z::I64;
           if (R1 & 7 != 0) goto u2kbA; else goto c2kbi;
       u2kbA: // global
           call _c2kbb(R1) args: 0, res: 0, upd: 0;
       c2kbi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kbb() //  [R1]
         { info_tbl: [(c2kbb,
                       label: block_c2kbb_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kbb: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2kbw; else goto c2kbx;
       c2kbw: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kbx: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.030972134 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$cmax_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$cmax_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$cmax_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c2kbK,
                       label: GHC.Unicode.$fOrdGeneralCategory_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kbK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2kbQ; else goto c2kbR;
       c2kbQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2kbR: // global
           I64[Sp - 24] = block_c2kbG_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2kcf; else goto c2kbH;
       u2kcf: // global
           call _c2kbG(R1) args: 0, res: 0, upd: 0;
       c2kbH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kbG() //  [R1]
         { info_tbl: [(c2kbG,
                       label: block_c2kbG_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kbG: // global
           _s2j86::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp - 8] = block_c2kbP_info;
           R1 = P64[Sp + 8];
           I64[Sp] = _s2j86::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kce; else goto c2kbW;
       u2kce: // global
           call _c2kbP(R1) args: 0, res: 0, upd: 0;
       c2kbW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kbP() //  [R1]
         { info_tbl: [(c2kbP,
                       label: block_c2kbP_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kbP: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2kca; else goto c2kcb;
       c2kca: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2kcb: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.032694388 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c>=_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c>=_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c>=_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c2kco,
                       label: GHC.Unicode.$fOrdGeneralCategory_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kco: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kcu; else goto c2kcv;
       c2kcu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2kcv: // global
           I64[Sp - 16] = block_c2kck_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2kcT; else goto c2kcl;
       u2kcT: // global
           call _c2kck(R1) args: 0, res: 0, upd: 0;
       c2kcl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kck() //  [R1]
         { info_tbl: [(c2kck,
                       label: block_c2kck_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kck: // global
           _s2j8d::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2kct_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j8d::I64;
           if (R1 & 7 != 0) goto u2kcS; else goto c2kcA;
       u2kcS: // global
           call _c2kct(R1) args: 0, res: 0, upd: 0;
       c2kcA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kct() //  [R1]
         { info_tbl: [(c2kct,
                       label: block_c2kct_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kct: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2kcO; else goto c2kcP;
       c2kcO: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kcP: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.034388507 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c>_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c>_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c>_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c>_entry() //  [R2, R3]
         { info_tbl: [(c2kd2,
                       label: GHC.Unicode.$fOrdGeneralCategory_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kd2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kd8; else goto c2kd9;
       c2kd8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2kd9: // global
           I64[Sp - 16] = block_c2kcY_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2kdt; else goto c2kcZ;
       u2kdt: // global
           call _c2kcY(R1) args: 0, res: 0, upd: 0;
       c2kcZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kcY() //  [R1]
         { info_tbl: [(c2kcY,
                       label: block_c2kcY_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kcY: // global
           _s2j8k::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2kd7_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j8k::I64;
           if (R1 & 7 != 0) goto u2kds; else goto c2kde;
       u2kds: // global
           call _c2kd7(R1) args: 0, res: 0, upd: 0;
       c2kde: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kd7() //  [R1]
         { info_tbl: [(c2kd7,
                       label: block_c2kd7_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kd7: // global
           R1 = I64[(%MO_S_Lt_W64(I64[Sp + 8],
                                  %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.036039318 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$cmin_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$cmin_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$cmin_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c2kdC,
                       label: GHC.Unicode.$fOrdGeneralCategory_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kdC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2kdI; else goto c2kdJ;
       c2kdI: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2kdJ: // global
           I64[Sp - 24] = block_c2kdy_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2ke7; else goto c2kdz;
       u2ke7: // global
           call _c2kdy(R1) args: 0, res: 0, upd: 0;
       c2kdz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kdy() //  [R1]
         { info_tbl: [(c2kdy,
                       label: block_c2kdy_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kdy: // global
           _s2j8r::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp - 8] = block_c2kdH_info;
           R1 = P64[Sp + 8];
           I64[Sp] = _s2j8r::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2ke6; else goto c2kdO;
       u2ke6: // global
           call _c2kdH(R1) args: 0, res: 0, upd: 0;
       c2kdO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kdH() //  [R1]
         { info_tbl: [(c2kdH,
                       label: block_c2kdH_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kdH: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2ke2; else goto c2ke3;
       c2ke2: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2ke3: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.037457509 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_closure" {
     GHC.Unicode.$fOrdGeneralCategory_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Unicode.$fEqGeneralCategory_closure+1;
         const GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c<_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c<=_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c>_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c>=_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$cmax_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.038456152 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_info;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_entry() //  [R2]
         { info_tbl: [(c2keg,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2keg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kem; else goto c2ken;
       c2kem: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2ken: // global
           I64[Sp - 8] = block_c2kec_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2key; else goto c2ked;
       u2key: // global
           call _c2kec(R1) args: 0, res: 0, upd: 0;
       c2ked: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kec() //  [R1]
         { info_tbl: [(c2kec,
                       label: block_c2kec_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kec: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2kej() args: 0, res: 0, upd: 0;
     }
 },
 _c2kej() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kej: // global
           Hp = Hp + 16;
           _s2j8x::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2ket; else goto c2kes;
       c2ket: // global
           HpAlloc = 16;
           I64[Sp] = block_c2kei_info;
           R1 = _s2j8x::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2kes: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2j8x::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2kei() //  [R1]
         { info_tbl: [(c2kei,
                       label: block_c2kei_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kei: // global
           I64[Sp] = R1;
           call _c2kej() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.040250602 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_entry() //  [R2, R3]
         { info_tbl: [(c2keH,
                       label: GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2keH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kf4; else goto c2kf5;
       c2kf4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2kf5: // global
           I64[Sp - 16] = block_c2keE_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2kfm; else goto c2keF;
       u2kfm: // global
           call _c2keE(R1) args: 0, res: 0, upd: 0;
       c2keF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2keE() //  [R1]
         { info_tbl: [(c2keE,
                       label: block_c2keE_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2keE: // global
           I64[Sp] = block_c2keK_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u2kfl; else goto c2keL;
       u2kfl: // global
           call _c2keK(R1) args: 0, res: 0, upd: 0;
       c2keL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2keK() //  [R1]
         { info_tbl: [(c2keK,
                       label: block_c2keK_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2keK: // global
           _s2j8E::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2keS_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j8E::I64;
           if (R1 & 7 != 0) goto u2kfn; else goto c2keT;
       u2kfn: // global
           call _c2keS(R1) args: 0, res: 0, upd: 0;
       c2keT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2keS() //  [R1]
         { info_tbl: [(c2keS,
                       label: block_c2keS_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2keS: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2keY() args: 0, res: 0, upd: 0;
     }
 },
 _c2keY() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2keY: // global
           Hp = Hp + 16;
           _s2j8G::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2kfg; else goto c2kff;
       c2kfg: // global
           HpAlloc = 16;
           I64[Sp] = block_c2keX_info;
           R1 = _s2j8G::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2kff: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2j8G::I64 - I64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2keX() //  [R1]
         { info_tbl: [(c2keX,
                       label: block_c2keX_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2keX: // global
           I64[Sp] = R1;
           call _c2keY() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.043656358 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cinRange_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cinRange_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cinRange_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$cinRange_entry() //  [R2, R3]
         { info_tbl: [(c2kfx,
                       label: GHC.Unicode.$fIxGeneralCategory_$cinRange_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kfx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2kfR; else goto c2kfS;
       c2kfR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2kfS: // global
           I64[Sp - 16] = block_c2kfu_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2kgp; else goto c2kfv;
       u2kgp: // global
           call _c2kfu(R1) args: 0, res: 0, upd: 0;
       c2kfv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kfu() //  [R1]
         { info_tbl: [(c2kfu,
                       label: block_c2kfu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kfu: // global
           I64[Sp - 8] = block_c2kfA_info;
           _s2j8M::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2j8M::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kgo; else goto c2kfB;
       u2kgo: // global
           call _c2kfA(R1) args: 0, res: 0, upd: 0;
       c2kfB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kfA() //  [R1]
         { info_tbl: [(c2kfA,
                       label: block_c2kfA_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kfA: // global
           _s2j8O::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2kfI_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j8O::I64;
           if (R1 & 7 != 0) goto u2kgq; else goto c2kfJ;
       u2kgq: // global
           call _c2kfI(R1) args: 0, res: 0, upd: 0;
       c2kfJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kfI() //  [R1]
         { info_tbl: [(c2kfI,
                       label: block_c2kfI_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kfI: // global
           _s2j8Q::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2kfQ_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2j8Q::I64;
           if (R1 & 7 != 0) goto u2kgr; else goto c2kg2;
       u2kgr: // global
           call _c2kfQ(R1) args: 0, res: 0, upd: 0;
       c2kg2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kfQ() //  [R1]
         { info_tbl: [(c2kfQ,
                       label: block_c2kfQ_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kfQ: // global
           _s2j8S::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           if (%MO_S_Lt_W64(_s2j8S::I64,
                            I64[Sp + 8])) goto c2kgg; else goto c2kgh;
       c2kgg: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kgh: // global
           R1 = I64[(%MO_S_Le_W64(_s2j8S::I64,
                                  I64[Sp + 16]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.046486206 UTC

[section ""data" . GHC.Unicode.$w$crange_closure" {
     GHC.Unicode.$w$crange_closure:
         const GHC.Unicode.$w$crange_info;
 },
 sat_s2j97_entry() //  [R1]
         { info_tbl: [(c2kh3,
                       label: sat_s2j97_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kh3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kh4; else goto c2kh5;
       c2kh4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kh5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2j93::I64 = I64[R1 + 32];
           if (_s2j93::I64 == I64[R1 + 24]) goto c2kh2; else goto c2kh1;
       c2kh2: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c2kh1: // global
           R2 = _s2j93::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s2j92_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2j94_entry() //  [R1]
         { info_tbl: [(c2khc,
                       label: sat_s2j94_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2khc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2khd; else goto c2khe;
       c2khd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2khe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_s2j92_entry() //  [R1, R2]
         { info_tbl: [(c2khg,
                       label: go_s2j92_info
                       rep:HeapRep 1 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2khg: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2khk; else goto c2khj;
       c2khk: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2khj: // global
           _s2j90::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2j97_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2j90::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2j94_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Unicode.$w$crange_entry() //  [R2, R3]
         { info_tbl: [(c2khl,
                       label: GHC.Unicode.$w$crange_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2khl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2khm; else goto c2khn;
       c2khm: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$w$crange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2khn: // global
           I64[Sp - 16] = block_c2kgw_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2khI; else goto c2kgx;
       u2khI: // global
           call _c2kgw(R1) args: 0, res: 0, upd: 0;
       c2kgx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kgw() //  [R1]
         { info_tbl: [(c2kgw,
                       label: block_c2kgw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kgw: // global
           _s2j8Y::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2kgE_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j8Y::I64;
           if (R1 & 7 != 0) goto u2khF; else goto c2kgF;
       u2khF: // global
           call _c2kgE(R1) args: 0, res: 0, upd: 0;
       c2kgF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kgE() //  [R1]
         { info_tbl: [(c2kgE,
                       label: block_c2kgE_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kgE: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2kgK() args: 0, res: 0, upd: 0;
     }
 },
 _c2kgK() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kgK: // global
           Hp = Hp + 16;
           _s2j90::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2khx; else goto c2khw;
       c2khx: // global
           HpAlloc = 16;
           I64[Sp] = block_c2kgJ_info;
           R1 = _s2j90::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2khw: // global
           _s2j8Y::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s2j8Y::I64,
                            _s2j90::I64)) goto c2khz; else goto c2khA;
       c2khz: // global
           I64[Hp - 8] = go_s2j92_info;
           I64[Hp] = _s2j90::I64;
           R2 = _s2j8Y::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call go_s2j92_entry(R2, R1) args: 8, res: 0, upd: 8;
       c2khA: // global
           Hp = Hp - 16;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2kgJ() //  [R1]
         { info_tbl: [(c2kgJ,
                       label: block_c2kgJ_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kgJ: // global
           I64[Sp] = R1;
           call _c2kgK() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.049164599 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$crange_closure" {
     GHC.Unicode.$fIxGeneralCategory_$crange_closure:
         const GHC.Unicode.$fIxGeneralCategory_$crange_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$crange_entry() //  [R2]
         { info_tbl: [(c2khQ,
                       label: GHC.Unicode.$fIxGeneralCategory_$crange_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2khQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2khR; else goto c2khS;
       c2khR: // global
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2khS: // global
           I64[Sp - 8] = block_c2khN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2khW; else goto c2khO;
       u2khW: // global
           call _c2khN(R1) args: 0, res: 0, upd: 0;
       c2khO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2khN() //  [R1]
         { info_tbl: [(c2khN,
                       label: block_c2khN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2khN: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$w$crange_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.053022676 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure" {
     GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure:
         const GHC.Unicode.$fIxGeneralCategory_$crangeSize_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$crangeSize_entry() //  [R2]
         { info_tbl: [(c2ki4,
                       label: GHC.Unicode.$fIxGeneralCategory_$crangeSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ki4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kig; else goto c2kih;
       c2kig: // global
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kih: // global
           I64[Sp - 8] = block_c2ki1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kiT; else goto c2ki2;
       u2kiT: // global
           call _c2ki1(R1) args: 0, res: 0, upd: 0;
       c2ki2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2ki1() //  [R1]
         { info_tbl: [(c2ki1,
                       label: block_c2ki1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ki1: // global
           I64[Sp - 8] = block_c2ki7_info;
           _s2j9f::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2j9f::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kiS; else goto c2ki8;
       u2kiS: // global
           call _c2ki7(R1) args: 0, res: 0, upd: 0;
       c2ki8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2ki7() //  [R1]
         { info_tbl: [(c2ki7,
                       label: block_c2ki7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ki7: // global
           _s2j9h::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2kif_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j9h::I64;
           if (R1 & 7 != 0) goto u2kiU; else goto c2kin;
       u2kiU: // global
           call _c2kif(R1) args: 0, res: 0, upd: 0;
       c2kin: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kif() //  [R1]
         { info_tbl: [(c2kif,
                       label: block_c2kif_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kif: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2kiv() args: 0, res: 0, upd: 0;
     }
 },
 _c2kiv() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kiv: // global
           Hp = Hp + 16;
           _s2j9j::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2kiz; else goto c2kiy;
       c2kiz: // global
           HpAlloc = 16;
           I64[Sp] = block_c2kiu_info;
           R1 = _s2j9j::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2kiy: // global
           _s2j9h::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(_s2j9j::I64,
                            _s2j9h::I64)) goto c2kiD; else goto c2kiN;
       c2kiD: // global
           Hp = Hp - 16;
           R1 = GHC.Unicode.$fShowGeneralCategory1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kiN: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2j9j::I64 - _s2j9h::I64 + 1;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2kiu() //  [R1]
         { info_tbl: [(c2kiu,
                       label: block_c2kiu_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kiu: // global
           I64[Sp] = R1;
           call _c2kiv() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.05648731 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_entry() //  [R2]
         { info_tbl: [(c2kj4,
                       label: GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kj4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kju; else goto c2kjv;
       c2kju: // global
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kjv: // global
           I64[Sp - 8] = block_c2kj1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kjM; else goto c2kj2;
       u2kjM: // global
           call _c2kj1(R1) args: 0, res: 0, upd: 0;
       c2kj2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kj1() //  [R1]
         { info_tbl: [(c2kj1,
                       label: block_c2kj1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kj1: // global
           I64[Sp - 8] = block_c2kj7_info;
           _s2j9q::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2j9q::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kjL; else goto c2kj8;
       u2kjL: // global
           call _c2kj7(R1) args: 0, res: 0, upd: 0;
       c2kj8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kj7() //  [R1]
         { info_tbl: [(c2kj7,
                       label: block_c2kj7_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kj7: // global
           _s2j9s::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2kjf_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j9s::I64;
           if (R1 & 7 != 0) goto u2kjN; else goto c2kjg;
       u2kjN: // global
           call _c2kjf(R1) args: 0, res: 0, upd: 0;
       c2kjg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kjf() //  [R1]
         { info_tbl: [(c2kjf,
                       label: block_c2kjf_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kjf: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2kjl() args: 0, res: 0, upd: 0;
     }
 },
 _c2kjl() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kjl: // global
           Hp = Hp + 16;
           _s2j9u::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2kjG; else goto c2kjF;
       c2kjG: // global
           HpAlloc = 16;
           I64[Sp] = block_c2kjk_info;
           R1 = _s2j9u::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2kjF: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2j9u::I64 - I64[Sp + 8] + 1;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2kjk() //  [R1]
         { info_tbl: [(c2kjk,
                       label: block_c2kjk_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kjk: // global
           I64[Sp] = R1;
           call _c2kjl() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.060081725 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cindex_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cindex_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cindex_info;
         const 0;
 },
 GHC.Unicode.$fIxGeneralCategory_$cindex_entry() //  [R2, R3]
         { info_tbl: [(c2kjX,
                       label: GHC.Unicode.$fIxGeneralCategory_$cindex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kjX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2kkh; else goto c2kki;
       c2kkh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2kki: // global
           I64[Sp - 16] = block_c2kjU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2kl3; else goto c2kjV;
       u2kl3: // global
           call _c2kjU(R1) args: 0, res: 0, upd: 0;
       c2kjV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kjU() //  [R1]
         { info_tbl: [(c2kjU,
                       label: block_c2kjU_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kjU: // global
           I64[Sp - 8] = block_c2kk0_info;
           _s2j9B::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2j9B::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kl2; else goto c2kk1;
       u2kl2: // global
           call _c2kk0(R1) args: 0, res: 0, upd: 0;
       c2kk1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kk0() //  [R1]
         { info_tbl: [(c2kk0,
                       label: block_c2kk0_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kk0: // global
           _s2j9D::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2kk8_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j9D::I64;
           if (R1 & 7 != 0) goto u2kl4; else goto c2kk9;
       u2kl4: // global
           call _c2kk8(R1) args: 0, res: 0, upd: 0;
       c2kk9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kk8() //  [R1]
         { info_tbl: [(c2kk8,
                       label: block_c2kk8_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kk8: // global
           _s2j9F::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2kkg_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2j9F::I64;
           if (R1 & 7 != 0) goto u2kl5; else goto c2kks;
       u2kl5: // global
           call _c2kkg(R1) args: 0, res: 0, upd: 0;
       c2kks: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kkg() //  [R1]
         { info_tbl: [(c2kkg,
                       label: block_c2kkg_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kkg: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2kkA() args: 0, res: 0, upd: 0;
     }
 },
 _c2kkA() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kkA: // global
           Hp = Hp + 16;
           _s2j9H::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2kkE; else goto c2kkD;
       c2kkE: // global
           HpAlloc = 16;
           I64[Sp] = block_c2kkz_info;
           R1 = _s2j9H::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2kkD: // global
           _s2j9D::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(_s2j9H::I64,
                            _s2j9D::I64)) goto c2kkO; else goto c2kkW;
       c2kkW: // global
           if (%MO_S_Gt_W64(_s2j9H::I64,
                            I64[Sp + 16])) goto c2kkO; else goto c2kkV;
       c2kkO: // global
           Hp = Hp - 16;
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2kkV: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2j9H::I64 - _s2j9D::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2kkz() //  [R1]
         { info_tbl: [(c2kkz,
                       label: block_c2kkz_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kkz: // global
           I64[Sp] = R1;
           call _c2kkA() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.063265953 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_closure" {
     GHC.Unicode.$fIxGeneralCategory_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Unicode.$fOrdGeneralCategory_closure+1;
         const GHC.Unicode.$fIxGeneralCategory_$crange_closure+1;
         const GHC.Unicode.$fIxGeneralCategory_$cindex_closure+2;
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure+2;
         const GHC.Unicode.$fIxGeneralCategory_$cinRange_closure+2;
         const GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure+1;
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.064226558 UTC

[section ""cstring" . GHC.Unicode.$trModule4_bytes" {
     GHC.Unicode.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.065472703 UTC

[section ""data" . loc_r2j70_closure" {
     loc_r2j70_closure:
         const loc_r2j70_info;
         const 0;
         const 0;
         const 0;
 },
 loc_r2j70_entry() //  [R1]
         { info_tbl: [(c2kle,
                       label: loc_r2j70_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kle: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2klf; else goto c2klg;
       c2klf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2klg: // global
           (_c2klb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2klb::I64 == 0) goto c2kld; else goto c2klc;
       c2kld: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2klc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2klb::I64;
           R2 = GHC.Unicode.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.066783582 UTC

[section ""cstring" . GHC.Unicode.$trModule2_bytes" {
     GHC.Unicode.$trModule2_bytes:
         I8[] [71,72,67,46,85,110,105,99,111,100,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.067744485 UTC

[section ""data" . loc1_r2j71_closure" {
     loc1_r2j71_closure:
         const loc1_r2j71_info;
         const 0;
         const 0;
         const 0;
 },
 loc1_r2j71_entry() //  [R1]
         { info_tbl: [(c2kln,
                       label: loc1_r2j71_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kln: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2klo; else goto c2klp;
       c2klo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2klp: // global
           (_c2klk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2klk::I64 == 0) goto c2klm; else goto c2kll;
       c2klm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kll: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2klk::I64;
           R2 = GHC.Unicode.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.06900977 UTC

[section ""cstring" . loc2_r2j72_bytes" {
     loc2_r2j72_bytes:
         I8[] [46,47,71,72,67,47,85,110,105,99,111,100,101,46,104,115]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.070025328 UTC

[section ""data" . loc3_r2j73_closure" {
     loc3_r2j73_closure:
         const loc3_r2j73_info;
         const 0;
         const 0;
         const 0;
 },
 loc3_r2j73_entry() //  [R1]
         { info_tbl: [(c2klw,
                       label: loc3_r2j73_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2klw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2klx; else goto c2kly;
       c2klx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kly: // global
           (_c2klt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2klt::I64 == 0) goto c2klv; else goto c2klu;
       c2klv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2klu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2klt::I64;
           R2 = loc2_r2j72_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.071325577 UTC

[section ""data" . loc4_r2j74_closure" {
     loc4_r2j74_closure:
         const GHC.Types.I#_con_info;
         const 135;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.07214466 UTC

[section ""data" . loc5_r2j75_closure" {
     loc5_r2j75_closure:
         const GHC.Types.I#_con_info;
         const 20;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.073003267 UTC

[section ""data" . loc6_r2j76_closure" {
     loc6_r2j76_closure:
         const GHC.Types.I#_con_info;
         const 24;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.073951646 UTC

[section ""cstring" . $dIP_r2j77_bytes" {
     $dIP_r2j77_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.076428293 UTC

[section ""data" . $dIP1_r2j78_closure" {
     $dIP1_r2j78_closure:
         const $dIP1_r2j78_info;
         const 0;
         const 0;
         const 0;
 },
 $dIP1_r2j78_entry() //  [R1]
         { info_tbl: [(c2klF,
                       label: $dIP1_r2j78_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2klF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2klG; else goto c2klH;
       c2klG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2klH: // global
           (_c2klC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2klC::I64 == 0) goto c2klE; else goto c2klD;
       c2klE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2klD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2klC::I64;
           R2 = $dIP_r2j77_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.077989462 UTC

[section ""data" . $dIP2_r2j79_closure" {
     $dIP2_r2j79_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const loc_r2j70_closure;
         const loc1_r2j71_closure;
         const loc3_r2j73_closure;
         const loc4_r2j74_closure+1;
         const loc5_r2j75_closure+1;
         const loc4_r2j74_closure+1;
         const loc6_r2j76_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.07883478 UTC

[section ""data" . $dIP3_r2j7a_closure" {
     $dIP3_r2j7a_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const $dIP1_r2j78_closure;
         const $dIP2_r2j79_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.079639093 UTC

[section ""cstring" . lvl60_r2j7b_bytes" {
     lvl60_r2j7b_bytes:
         I8[] [41,32,105,115,32,111,117,116,115,105,100,101,32,111,102,32,101,110,117,109,101,114,97,116,105,111,110,39,115,32,114,97,110,103,101,32,40,48,44]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.08041126 UTC

[section ""cstring" . lvl61_r2j7c_bytes" {
     lvl61_r2j7c_bytes:
         I8[] [41]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.081509474 UTC

[section ""data" . lvl62_r2j7d_closure" {
     lvl62_r2j7d_closure:
         const lvl62_r2j7d_info;
         const 0;
         const 0;
         const 0;
 },
 lvl62_r2j7d_entry() //  [R1]
         { info_tbl: [(c2klO,
                       label: lvl62_r2j7d_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2klO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2klP; else goto c2klQ;
       c2klP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2klQ: // global
           (_c2klL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2klL::I64 == 0) goto c2klN; else goto c2klM;
       c2klN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2klM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2klL::I64;
           R2 = lvl61_r2j7c_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.083316346 UTC

[section ""data" . lvl63_r2j7e_closure" {
     lvl63_r2j7e_closure:
         const lvl63_r2j7e_info;
         const 0;
         const 0;
         const 0;
 },
 lvl63_r2j7e_entry() //  [R1]
         { info_tbl: [(c2km0,
                       label: lvl63_r2j7e_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2km0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2km1; else goto c2km2;
       c2km1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2km2: // global
           (_c2klU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2klU::I64 == 0) goto c2klW; else goto c2klV;
       c2klW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2klV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2klU::I64;
           I64[Sp - 24] = block_c2klX_info;
           R4 = lvl62_r2j7d_closure;
           R3 = 29;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c2klX() //  [R1, R2]
         { info_tbl: [(c2klX,
                       label: block_c2klX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2klX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2km5; else goto c2km4;
       c2km5: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c2km4: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.085370188 UTC

[section ""data" . lvl64_r2j7f_closure" {
     lvl64_r2j7f_closure:
         const lvl64_r2j7f_info;
         const 0;
         const 0;
         const 0;
 },
 lvl64_r2j7f_entry() //  [R1]
         { info_tbl: [(c2kmc,
                       label: lvl64_r2j7f_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kmc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kmd; else goto c2kme;
       c2kmd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kme: // global
           (_c2km9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2km9::I64 == 0) goto c2kmb; else goto c2kma;
       c2kmb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kma: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2km9::I64;
           R3 = lvl63_r2j7e_closure;
           R2 = lvl60_r2j7b_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.086496737 UTC

[section ""cstring" . lvl65_r2j7g_bytes" {
     lvl65_r2j7g_bytes:
         I8[] [116,111,69,110,117,109,123,71,101,110,101,114,97,108,67,97,116,101,103,111,114,121,125,58,32,116,97,103,32,40]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.087615209 UTC

[section ""data" . GHC.Unicode.$wlvl_closure" {
     GHC.Unicode.$wlvl_closure:
         const GHC.Unicode.$wlvl_info;
         const 0;
 },
 sat_s2j9S_entry() //  [R1]
         { info_tbl: [(c2kmq,
                       label: sat_s2j9S_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kmq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2kmr; else goto c2kms;
       c2kmr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kms: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c2kmn_info;
           R4 = lvl64_r2j7f_closure;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c2kmn() //  [R1, R2]
         { info_tbl: [(c2kmn,
                       label: block_c2kmn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kmn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2kmv; else goto c2kmu;
       c2kmv: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c2kmu: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Unicode.$wlvl_entry() //  [R2]
         { info_tbl: [(c2kmy,
                       label: GHC.Unicode.$wlvl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kmy: // global
           _s2j9O::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c2kmz; else goto c2kmA;
       c2kmA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2kmC; else goto c2kmB;
       c2kmC: // global
           HpAlloc = 24;
           goto c2kmz;
       c2kmz: // global
           R2 = _s2j9O::I64;
           R1 = GHC.Unicode.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kmB: // global
           I64[Hp - 16] = sat_s2j9S_info;
           I64[Hp] = _s2j9O::I64;
           I64[Sp - 8] = block_c2kmw_info;
           R3 = Hp - 16;
           R2 = lvl65_r2j7g_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c2kmw() //  [R1]
         { info_tbl: [(c2kmw,
                       label: block_c2kmw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kmw: // global
           R3 = R1;
           R2 = $dIP3_r2j7a_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.089647143 UTC

[section ""data" . GHC.Unicode.$w$ctoEnum_closure" {
     GHC.Unicode.$w$ctoEnum_closure:
         const GHC.Unicode.$w$ctoEnum_info;
         const 0;
 },
 GHC.Unicode.$w$ctoEnum_entry() //  [R2]
         { info_tbl: [(c2kmP,
                       label: GHC.Unicode.$w$ctoEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kmP: // global
           _s2j9U::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto c2kmX; else goto c2kmO;
       c2kmO: // global
           if (%MO_S_Gt_W64(_s2j9U::I64, 29)) goto c2kmX; else goto c2kmY;
       c2kmX: // global
           R2 = _s2j9U::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2kmY: // global
           R1 = I64[(_s2j9U::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.090777891 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_info;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_entry() //  [R2]
         { info_tbl: [(c2kn6,
                       label: GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kn6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kn7; else goto c2kn8;
       c2kn7: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kn8: // global
           I64[Sp - 8] = block_c2kn3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2knc; else goto c2kn4;
       u2knc: // global
           call _c2kn3(R1) args: 0, res: 0, upd: 0;
       c2kn4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kn3() //  [R1]
         { info_tbl: [(c2kn3,
                       label: block_c2kn3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kn3: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$w$ctoEnum_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.09230802 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_go_closure" {
     GHC.Unicode.$fEnumGeneralCategory_go_closure:
         const GHC.Unicode.$fEnumGeneralCategory_go_info;
 },
 sat_s2ja4_entry() //  [R1]
         { info_tbl: [(c2knp,
                       label: sat_s2ja4_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2knp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2knq; else goto c2knr;
       c2knq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2knr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2ja2::I64 = I64[R1 + 16];
           if (_s2ja2::I64 != 29) goto c2knn; else goto c2kno;
       c2knn: // global
           R2 = _s2ja2::I64 + 1;
           Sp = Sp - 16;
           call GHC.Unicode.$fEnumGeneralCategory_go_entry(R2) args: 24, res: 0, upd: 24;
       c2kno: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2ja1_entry() //  [R1]
         { info_tbl: [(c2kny,
                       label: sat_s2ja1_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kny: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2knz; else goto c2knA;
       c2knz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2knA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Unicode.$fEnumGeneralCategory_go_entry() //  [R2]
         { info_tbl: [(c2knC,
                       label: GHC.Unicode.$fEnumGeneralCategory_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2knC: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c2knG; else goto c2knF;
       c2knG: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2knF: // global
           I64[Hp - 64] = sat_s2ja4_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2ja1_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.09411028 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_info;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_entry() //  [R2]
         { info_tbl: [(c2knP,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2knP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2knQ; else goto c2knR;
       c2knQ: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2knR: // global
           I64[Sp - 8] = block_c2knL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2ko6; else goto c2knM;
       u2ko6: // global
           call _c2knL(R1) args: 0, res: 0, upd: 0;
       c2knM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2knL() //  [R1]
         { info_tbl: [(c2knL,
                       label: block_c2knL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2knL: // global
           _s2ja7::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           if (%MO_S_Le_W64(_s2ja7::I64, 29)) goto c2ko3; else goto c2ko4;
       c2ko3: // global
           R2 = _s2ja7::I64;
           Sp = Sp + 8;
           call GHC.Unicode.$fEnumGeneralCategory_go_entry(R2) args: 8, res: 0, upd: 8;
       c2ko4: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.100759606 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_info;
 },
 sat_s2jaq_entry() //  [R1]
         { info_tbl: [(c2koY,
                       label: sat_s2jaq_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2koY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2koZ; else goto c2kp0;
       c2koZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kp0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s2jal_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jao_entry() //  [R1]
         { info_tbl: [(c2kp5,
                       label: sat_s2jao_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kp5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kp6; else goto c2kp7;
       c2kp6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kp7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jar_entry() //  [R1]
         { info_tbl: [(c2kpd,
                       label: sat_s2jar_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kpd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kpe; else goto c2kpf;
       c2kpe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kpf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s2jal_entry() //  [R1, R2]
         { info_tbl: [(c2kpj,
                       label: go_dn_s2jal_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kpj: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2kpn; else goto c2kpm;
       c2kpn: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kpm: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c2kph; else goto c2kpi;
       c2kph: // global
           _s2jaj::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jaq_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jaj::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jao_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kpi: // global
           I64[Hp - 80] = sat_s2jar_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2kpp::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2kpp::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2jas_entry() //  [R1]
         { info_tbl: [(c2kpq,
                       label: sat_s2jas_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kpq: // global
           _s2jas::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2kpr; else goto c2kps;
       c2kps: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2kpu; else goto c2kpt;
       c2kpu: // global
           HpAlloc = 24;
           goto c2kpr;
       c2kpr: // global
           R1 = _s2jas::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kpt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jas::P64;
           _s2jae::I64 = I64[_s2jas::P64 + 24];
           _s2jaj::I64 = _s2jae::I64 - I64[_s2jas::P64 + 16];
           I64[Hp - 16] = go_dn_s2jal_info;
           I64[Hp - 8] = _s2jaj::I64;
           I64[Hp] = 29 - _s2jaj::I64;
           R2 = _s2jae::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s2jal_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jai_entry() //  [R1]
         { info_tbl: [(c2kpz,
                       label: sat_s2jai_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kpz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kpA; else goto c2kpB;
       c2kpA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kpB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jau_entry() //  [R1]
         { info_tbl: [(c2kpK,
                       label: sat_s2jau_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kpK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kpL; else goto c2kpM;
       c2kpL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kpM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaE_entry() //  [R1]
         { info_tbl: [(c2kqf,
                       label: sat_s2jaE_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kqf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kqg; else goto c2kqh;
       c2kqg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kqh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s2jaz_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaC_entry() //  [R1]
         { info_tbl: [(c2kqm,
                       label: sat_s2jaC_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kqm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kqn; else goto c2kqo;
       c2kqn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kqo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaF_entry() //  [R1]
         { info_tbl: [(c2kqu,
                       label: sat_s2jaF_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kqu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kqv; else goto c2kqw;
       c2kqv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kqw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s2jaz_entry() //  [R1, R2]
         { info_tbl: [(c2kqA,
                       label: go_up_s2jaz_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kqA: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2kqE; else goto c2kqD;
       c2kqE: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kqD: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c2kqy; else goto c2kqz;
       c2kqy: // global
           _s2jax::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jaE_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jax::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jaC_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kqz: // global
           I64[Hp - 80] = sat_s2jaF_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2kqG::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2kqG::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2jaG_entry() //  [R1]
         { info_tbl: [(c2kqH,
                       label: sat_s2jaG_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kqH: // global
           _s2jaG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2kqI; else goto c2kqJ;
       c2kqJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2kqL; else goto c2kqK;
       c2kqL: // global
           HpAlloc = 24;
           goto c2kqI;
       c2kqI: // global
           R1 = _s2jaG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kqK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jaG::P64;
           _s2jae::I64 = I64[_s2jaG::P64 + 24];
           _s2jax::I64 = _s2jae::I64 - I64[_s2jaG::P64 + 16];
           I64[Hp - 16] = go_up_s2jaz_info;
           I64[Hp - 8] = _s2jax::I64;
           I64[Hp] = 29 - _s2jax::I64;
           R2 = _s2jae::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s2jaz_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaw_entry() //  [R1]
         { info_tbl: [(c2kqQ,
                       label: sat_s2jaw_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kqQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kqR; else goto c2kqS;
       c2kqR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kqS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaI_entry() //  [R1]
         { info_tbl: [(c2kr1,
                       label: sat_s2jaI_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kr1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kr2; else goto c2kr3;
       c2kr2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kr3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaT_entry() //  [R1]
         { info_tbl: [(c2krz,
                       label: sat_s2jaT_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2krz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2krA; else goto c2krB;
       c2krA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2krB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s2jaO_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaR_entry() //  [R1]
         { info_tbl: [(c2krG,
                       label: sat_s2jaR_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2krG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2krH; else goto c2krI;
       c2krH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2krI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaU_entry() //  [R1]
         { info_tbl: [(c2krO,
                       label: sat_s2jaU_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2krO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2krP; else goto c2krQ;
       c2krP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2krQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s2jaO_entry() //  [R1, R2]
         { info_tbl: [(c2krU,
                       label: go_dn_s2jaO_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2krU: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2krY; else goto c2krX;
       c2krY: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2krX: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c2krS; else goto c2krT;
       c2krS: // global
           _s2jaM::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jaT_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jaM::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jaR_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2krT: // global
           I64[Hp - 80] = sat_s2jaU_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2ks0::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2ks0::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2jaV_entry() //  [R1]
         { info_tbl: [(c2ks1,
                       label: sat_s2jaV_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ks1: // global
           _s2jaV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2ks2; else goto c2ks3;
       c2ks3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2ks5; else goto c2ks4;
       c2ks5: // global
           HpAlloc = 24;
           goto c2ks2;
       c2ks2: // global
           R1 = _s2jaV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ks4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jaV::P64;
           _s2jae::I64 = I64[_s2jaV::P64 + 24];
           _s2jaM::I64 = _s2jae::I64 - I64[_s2jaV::P64 + 16];
           I64[Hp - 16] = go_dn_s2jaO_info;
           I64[Hp - 8] = _s2jaM::I64;
           I64[Hp] = 0 - _s2jaM::I64;
           R2 = _s2jae::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s2jaO_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaL_entry() //  [R1]
         { info_tbl: [(c2ksa,
                       label: sat_s2jaL_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ksa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ksb; else goto c2ksc;
       c2ksb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ksc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaX_entry() //  [R1]
         { info_tbl: [(c2ksl,
                       label: sat_s2jaX_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ksl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ksm; else goto c2ksn;
       c2ksm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ksn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jb7_entry() //  [R1]
         { info_tbl: [(c2ksQ,
                       label: sat_s2jb7_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ksQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ksR; else goto c2ksS;
       c2ksR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ksS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s2jb2_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jb5_entry() //  [R1]
         { info_tbl: [(c2ksX,
                       label: sat_s2jb5_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ksX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ksY; else goto c2ksZ;
       c2ksY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ksZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jb8_entry() //  [R1]
         { info_tbl: [(c2kt5,
                       label: sat_s2jb8_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kt5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kt6; else goto c2kt7;
       c2kt6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kt7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s2jb2_entry() //  [R1, R2]
         { info_tbl: [(c2ktb,
                       label: go_up_s2jb2_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ktb: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2ktf; else goto c2kte;
       c2ktf: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kte: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c2kt9; else goto c2kta;
       c2kt9: // global
           _s2jb0::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jb7_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jb0::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jb5_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kta: // global
           I64[Hp - 80] = sat_s2jb8_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2kth::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2kth::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2jb9_entry() //  [R1]
         { info_tbl: [(c2kti,
                       label: sat_s2jb9_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kti: // global
           _s2jb9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2ktj; else goto c2ktk;
       c2ktk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2ktm; else goto c2ktl;
       c2ktm: // global
           HpAlloc = 24;
           goto c2ktj;
       c2ktj: // global
           R1 = _s2jb9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ktl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jb9::P64;
           _s2jae::I64 = I64[_s2jb9::P64 + 24];
           _s2jb0::I64 = _s2jae::I64 - I64[_s2jb9::P64 + 16];
           I64[Hp - 16] = go_up_s2jb2_info;
           I64[Hp - 8] = _s2jb0::I64;
           I64[Hp] = 0 - _s2jb0::I64;
           R2 = _s2jae::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s2jb2_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaZ_entry() //  [R1]
         { info_tbl: [(c2ktr,
                       label: sat_s2jaZ_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ktr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kts; else goto c2ktt;
       c2kts: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ktt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jbb_entry() //  [R1]
         { info_tbl: [(c2ktC,
                       label: sat_s2jbb_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ktC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ktD; else goto c2ktE;
       c2ktD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ktE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c2ktF,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ktF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ktG; else goto c2ktH;
       c2ktG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2ktH: // global
           I64[Sp - 16] = block_c2kob_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2kuE; else goto c2koc;
       u2kuE: // global
           call _c2kob(R1) args: 0, res: 0, upd: 0;
       c2koc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kob() //  [R1]
         { info_tbl: [(c2kob,
                       label: block_c2kob_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kob: // global
           _s2jac::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2koj_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2jac::I64;
           if (R1 & 7 != 0) goto u2kuB; else goto c2kok;
       u2kuB: // global
           call _c2koj(R1) args: 0, res: 0, upd: 0;
       c2kok: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2koj() //  [R1]
         { info_tbl: [(c2koj,
                       label: block_c2koj_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2koj: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2kop() args: 0, res: 0, upd: 0;
     }
 },
 _c2kop() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kop: // global
           Hp = Hp + 80;
           _s2jae::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2ktR; else goto c2ktQ;
       c2ktR: // global
           HpAlloc = 80;
           I64[Sp] = block_c2koo_info;
           R1 = _s2jae::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2ktQ: // global
           _s2jac::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s2jac::I64,
                            _s2jae::I64)) goto c2kuc; else goto c2kuw;
       c2kuc: // global
           if (%MO_S_Lt_W64(_s2jae::I64,
                            _s2jac::I64)) goto c2ku1; else goto c2kua;
       c2ku1: // global
           if (%MO_S_Le_W64(29, _s2jae::I64)) goto c2ktU; else goto c2ktZ;
       c2ktU: // global
           I64[Hp - 72] = sat_s2jas_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = _s2jae::I64;
           I64[Hp - 40] = sat_s2jai_info;
           I64[Hp - 24] = _s2jac::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2ktZ: // global
           if (%MO_S_Gt_W64(29, _s2jac::I64)) goto c2kut; else goto c2ktX;
       c2ktX: // global
           I64[Hp - 72] = sat_s2jau_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2ktV::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2ktV::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kua: // global
           if (%MO_S_Ge_W64(29, _s2jae::I64)) goto c2ku4; else goto c2ku9;
       c2ku4: // global
           I64[Hp - 72] = sat_s2jaG_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = _s2jae::I64;
           I64[Hp - 40] = sat_s2jaw_info;
           I64[Hp - 24] = _s2jac::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2ku9: // global
           if (%MO_S_Lt_W64(29, _s2jac::I64)) goto c2kut; else goto c2ku7;
       c2ku7: // global
           I64[Hp - 72] = sat_s2jaI_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2ku5::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2ku5::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kuw: // global
           if (%MO_S_Lt_W64(_s2jae::I64,
                            _s2jac::I64)) goto c2kum; else goto c2kuv;
       c2kum: // global
           if (%MO_S_Le_W64(0, _s2jae::I64)) goto c2kuf; else goto c2kuk;
       c2kuf: // global
           I64[Hp - 72] = sat_s2jaV_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = _s2jae::I64;
           I64[Hp - 40] = sat_s2jaL_info;
           I64[Hp - 24] = _s2jac::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kuk: // global
           if (%MO_S_Gt_W64(0, _s2jac::I64)) goto c2kut; else goto c2kui;
       c2kui: // global
           I64[Hp - 72] = sat_s2jaX_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2kug::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2kug::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kuv: // global
           if (%MO_S_Ge_W64(0, _s2jae::I64)) goto c2kup; else goto c2kuu;
       c2kup: // global
           I64[Hp - 72] = sat_s2jb9_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = _s2jae::I64;
           I64[Hp - 40] = sat_s2jaZ_info;
           I64[Hp - 24] = _s2jac::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kuu: // global
           if (%MO_S_Lt_W64(0, _s2jac::I64)) goto c2kut; else goto c2kus;
       c2kut: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kus: // global
           I64[Hp - 72] = sat_s2jbb_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2kuq::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2kuq::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2koo() //  [R1]
         { info_tbl: [(c2koo,
                       label: block_c2koo_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2koo: // global
           I64[Sp] = R1;
           call _c2kop() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.114532381 UTC

[section ""data" . GHC.Unicode.$trModule3_closure" {
     GHC.Unicode.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.115166637 UTC

[section ""data" . GHC.Unicode.$trModule1_closure" {
     GHC.Unicode.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.115749156 UTC

[section ""data" . GHC.Unicode.$trModule_closure" {
     GHC.Unicode.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Unicode.$trModule3_closure+1;
         const GHC.Unicode.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.116371084 UTC

[section ""cstring" . GHC.Unicode.$tcGeneralCategory2_bytes" {
     GHC.Unicode.$tcGeneralCategory2_bytes:
         I8[] [71,101,110,101,114,97,108,67,97,116,101,103,111,114,121]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.116937527 UTC

[section ""data" . GHC.Unicode.$tcGeneralCategory1_closure" {
     GHC.Unicode.$tcGeneralCategory1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tcGeneralCategory2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.117656735 UTC

[section ""data" . GHC.Unicode.$tcGeneralCategory_closure" {
     GHC.Unicode.$tcGeneralCategory_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tcGeneralCategory1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10145990250269206894;
         const 14660269375011335890;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.118286136 UTC

[section ""data" . GHC.Unicode.$tc'ClosePunctuation1_closure" {
     GHC.Unicode.$tc'ClosePunctuation1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Unicode.$tcGeneralCategory_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.118903869 UTC

[section ""cstring" . GHC.Unicode.$tc'UppercaseLetter2_bytes" {
     GHC.Unicode.$tc'UppercaseLetter2_bytes:
         I8[] [39,85,112,112,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.119513762 UTC

[section ""data" . GHC.Unicode.$tc'UppercaseLetter1_closure" {
     GHC.Unicode.$tc'UppercaseLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'UppercaseLetter2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.120142358 UTC

[section ""data" . GHC.Unicode.$tc'UppercaseLetter_closure" {
     GHC.Unicode.$tc'UppercaseLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'UppercaseLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 14647285109492872061;
         const 14425225614845259385;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.120791345 UTC

[section ""cstring" . GHC.Unicode.$tc'LowercaseLetter2_bytes" {
     GHC.Unicode.$tc'LowercaseLetter2_bytes:
         I8[] [39,76,111,119,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.121450387 UTC

[section ""data" . GHC.Unicode.$tc'LowercaseLetter1_closure" {
     GHC.Unicode.$tc'LowercaseLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'LowercaseLetter2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.122063406 UTC

[section ""data" . GHC.Unicode.$tc'LowercaseLetter_closure" {
     GHC.Unicode.$tc'LowercaseLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'LowercaseLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 6843638521722139917;
         const 11845029203120951590;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.122690395 UTC

[section ""cstring" . GHC.Unicode.$tc'TitlecaseLetter2_bytes" {
     GHC.Unicode.$tc'TitlecaseLetter2_bytes:
         I8[] [39,84,105,116,108,101,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.123289597 UTC

[section ""data" . GHC.Unicode.$tc'TitlecaseLetter1_closure" {
     GHC.Unicode.$tc'TitlecaseLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'TitlecaseLetter2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.123848778 UTC

[section ""data" . GHC.Unicode.$tc'TitlecaseLetter_closure" {
     GHC.Unicode.$tc'TitlecaseLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'TitlecaseLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11035134207864173010;
         const 10162510539839760824;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.124501286 UTC

[section ""cstring" . GHC.Unicode.$tc'ModifierLetter2_bytes" {
     GHC.Unicode.$tc'ModifierLetter2_bytes:
         I8[] [39,77,111,100,105,102,105,101,114,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.125058272 UTC

[section ""data" . GHC.Unicode.$tc'ModifierLetter1_closure" {
     GHC.Unicode.$tc'ModifierLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ModifierLetter2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.125743227 UTC

[section ""data" . GHC.Unicode.$tc'ModifierLetter_closure" {
     GHC.Unicode.$tc'ModifierLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ModifierLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 9531845544999081993;
         const 15142721146394159202;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.126420404 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherLetter2_bytes" {
     GHC.Unicode.$tc'OtherLetter2_bytes:
         I8[] [39,79,116,104,101,114,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.127038114 UTC

[section ""data" . GHC.Unicode.$tc'OtherLetter1_closure" {
     GHC.Unicode.$tc'OtherLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherLetter2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.127621664 UTC

[section ""data" . GHC.Unicode.$tc'OtherLetter_closure" {
     GHC.Unicode.$tc'OtherLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 4852466454551376074;
         const 478150797319163725;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.128270787 UTC

[section ""cstring" . GHC.Unicode.$tc'NonSpacingMark2_bytes" {
     GHC.Unicode.$tc'NonSpacingMark2_bytes:
         I8[] [39,78,111,110,83,112,97,99,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.12895205 UTC

[section ""data" . GHC.Unicode.$tc'NonSpacingMark1_closure" {
     GHC.Unicode.$tc'NonSpacingMark1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'NonSpacingMark2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.13064184 UTC

[section ""data" . GHC.Unicode.$tc'NonSpacingMark_closure" {
     GHC.Unicode.$tc'NonSpacingMark_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'NonSpacingMark1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11798799283128539890;
         const 8595267121230037978;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.131274295 UTC

[section ""cstring" . GHC.Unicode.$tc'SpacingCombiningMark2_bytes" {
     GHC.Unicode.$tc'SpacingCombiningMark2_bytes:
         I8[] [39,83,112,97,99,105,110,103,67,111,109,98,105,110,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.131816787 UTC

[section ""data" . GHC.Unicode.$tc'SpacingCombiningMark1_closure" {
     GHC.Unicode.$tc'SpacingCombiningMark1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'SpacingCombiningMark2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.132433722 UTC

[section ""data" . GHC.Unicode.$tc'SpacingCombiningMark_closure" {
     GHC.Unicode.$tc'SpacingCombiningMark_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'SpacingCombiningMark1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 161806050746895686;
         const 6274417789988196957;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.133065218 UTC

[section ""cstring" . GHC.Unicode.$tc'EnclosingMark2_bytes" {
     GHC.Unicode.$tc'EnclosingMark2_bytes:
         I8[] [39,69,110,99,108,111,115,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.133653867 UTC

[section ""data" . GHC.Unicode.$tc'EnclosingMark1_closure" {
     GHC.Unicode.$tc'EnclosingMark1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'EnclosingMark2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.134255407 UTC

[section ""data" . GHC.Unicode.$tc'EnclosingMark_closure" {
     GHC.Unicode.$tc'EnclosingMark_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'EnclosingMark1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 18110486507519489617;
         const 1830565827398073667;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.134887393 UTC

[section ""cstring" . GHC.Unicode.$tc'DecimalNumber2_bytes" {
     GHC.Unicode.$tc'DecimalNumber2_bytes:
         I8[] [39,68,101,99,105,109,97,108,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.135478973 UTC

[section ""data" . GHC.Unicode.$tc'DecimalNumber1_closure" {
     GHC.Unicode.$tc'DecimalNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'DecimalNumber2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.136100714 UTC

[section ""data" . GHC.Unicode.$tc'DecimalNumber_closure" {
     GHC.Unicode.$tc'DecimalNumber_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'DecimalNumber1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 7339032513903136575;
         const 4295356444207098462;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.136698748 UTC

[section ""cstring" . GHC.Unicode.$tc'LetterNumber2_bytes" {
     GHC.Unicode.$tc'LetterNumber2_bytes:
         I8[] [39,76,101,116,116,101,114,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.137318417 UTC

[section ""data" . GHC.Unicode.$tc'LetterNumber1_closure" {
     GHC.Unicode.$tc'LetterNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'LetterNumber2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.137932603 UTC

[section ""data" . GHC.Unicode.$tc'LetterNumber_closure" {
     GHC.Unicode.$tc'LetterNumber_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'LetterNumber1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 10629256336866531923;
         const 16896950428492761972;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.138536552 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherNumber2_bytes" {
     GHC.Unicode.$tc'OtherNumber2_bytes:
         I8[] [39,79,116,104,101,114,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.139121139 UTC

[section ""data" . GHC.Unicode.$tc'OtherNumber1_closure" {
     GHC.Unicode.$tc'OtherNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherNumber2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.13970112 UTC

[section ""data" . GHC.Unicode.$tc'OtherNumber_closure" {
     GHC.Unicode.$tc'OtherNumber_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherNumber1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 10187389108931559810;
         const 2377339607923931442;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.140286172 UTC

[section ""cstring" . GHC.Unicode.$tc'ConnectorPunctuation2_bytes" {
     GHC.Unicode.$tc'ConnectorPunctuation2_bytes:
         I8[] [39,67,111,110,110,101,99,116,111,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.140873358 UTC

[section ""data" . GHC.Unicode.$tc'ConnectorPunctuation1_closure" {
     GHC.Unicode.$tc'ConnectorPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ConnectorPunctuation2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.141527531 UTC

[section ""data" . GHC.Unicode.$tc'ConnectorPunctuation_closure" {
     GHC.Unicode.$tc'ConnectorPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ConnectorPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 4917643529853318260;
         const 11665519332165151523;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.142165428 UTC

[section ""cstring" . GHC.Unicode.$tc'DashPunctuation2_bytes" {
     GHC.Unicode.$tc'DashPunctuation2_bytes:
         I8[] [39,68,97,115,104,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.142760654 UTC

[section ""data" . GHC.Unicode.$tc'DashPunctuation1_closure" {
     GHC.Unicode.$tc'DashPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'DashPunctuation2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.143310217 UTC

[section ""data" . GHC.Unicode.$tc'DashPunctuation_closure" {
     GHC.Unicode.$tc'DashPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'DashPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 10309144240368445329;
         const 13155144127162508040;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.143930995 UTC

[section ""cstring" . GHC.Unicode.$tc'OpenPunctuation2_bytes" {
     GHC.Unicode.$tc'OpenPunctuation2_bytes:
         I8[] [39,79,112,101,110,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.14450716 UTC

[section ""data" . GHC.Unicode.$tc'OpenPunctuation1_closure" {
     GHC.Unicode.$tc'OpenPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OpenPunctuation2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.145093888 UTC

[section ""data" . GHC.Unicode.$tc'OpenPunctuation_closure" {
     GHC.Unicode.$tc'OpenPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OpenPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11156540492509602203;
         const 14579738194966332373;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.145705098 UTC

[section ""cstring" . GHC.Unicode.$tc'ClosePunctuation3_bytes" {
     GHC.Unicode.$tc'ClosePunctuation3_bytes:
         I8[] [39,67,108,111,115,101,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.146323733 UTC

[section ""data" . GHC.Unicode.$tc'ClosePunctuation2_closure" {
     GHC.Unicode.$tc'ClosePunctuation2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ClosePunctuation3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.146936207 UTC

[section ""data" . GHC.Unicode.$tc'ClosePunctuation_closure" {
     GHC.Unicode.$tc'ClosePunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation2_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 2732552725164352280;
         const 2123618155201944931;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.147593869 UTC

[section ""cstring" . GHC.Unicode.$tc'InitialQuote2_bytes" {
     GHC.Unicode.$tc'InitialQuote2_bytes:
         I8[] [39,73,110,105,116,105,97,108,81,117,111,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.148199017 UTC

[section ""data" . GHC.Unicode.$tc'InitialQuote1_closure" {
     GHC.Unicode.$tc'InitialQuote1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'InitialQuote2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.148820512 UTC

[section ""data" . GHC.Unicode.$tc'InitialQuote_closure" {
     GHC.Unicode.$tc'InitialQuote_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'InitialQuote1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 15372309041196331722;
         const 15030215702152843543;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.149539715 UTC

[section ""cstring" . GHC.Unicode.$tc'FinalQuote2_bytes" {
     GHC.Unicode.$tc'FinalQuote2_bytes:
         I8[] [39,70,105,110,97,108,81,117,111,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.150134554 UTC

[section ""data" . GHC.Unicode.$tc'FinalQuote1_closure" {
     GHC.Unicode.$tc'FinalQuote1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'FinalQuote2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.150790685 UTC

[section ""data" . GHC.Unicode.$tc'FinalQuote_closure" {
     GHC.Unicode.$tc'FinalQuote_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'FinalQuote1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 7492133048483711520;
         const 4486297505861009288;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.15147174 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherPunctuation2_bytes" {
     GHC.Unicode.$tc'OtherPunctuation2_bytes:
         I8[] [39,79,116,104,101,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.152914201 UTC

[section ""data" . GHC.Unicode.$tc'OtherPunctuation1_closure" {
     GHC.Unicode.$tc'OtherPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherPunctuation2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.153593683 UTC

[section ""data" . GHC.Unicode.$tc'OtherPunctuation_closure" {
     GHC.Unicode.$tc'OtherPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 17526727746027692027;
         const 9970963912577062569;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.154232309 UTC

[section ""cstring" . GHC.Unicode.$tc'MathSymbol2_bytes" {
     GHC.Unicode.$tc'MathSymbol2_bytes:
         I8[] [39,77,97,116,104,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.154856797 UTC

[section ""data" . GHC.Unicode.$tc'MathSymbol1_closure" {
     GHC.Unicode.$tc'MathSymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'MathSymbol2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.155497651 UTC

[section ""data" . GHC.Unicode.$tc'MathSymbol_closure" {
     GHC.Unicode.$tc'MathSymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'MathSymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 4306295684901311676;
         const 14195098983421669147;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.156141711 UTC

[section ""cstring" . GHC.Unicode.$tc'CurrencySymbol2_bytes" {
     GHC.Unicode.$tc'CurrencySymbol2_bytes:
         I8[] [39,67,117,114,114,101,110,99,121,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.15679111 UTC

[section ""data" . GHC.Unicode.$tc'CurrencySymbol1_closure" {
     GHC.Unicode.$tc'CurrencySymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'CurrencySymbol2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.157458073 UTC

[section ""data" . GHC.Unicode.$tc'CurrencySymbol_closure" {
     GHC.Unicode.$tc'CurrencySymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'CurrencySymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 150101909358894799;
         const 4247883766619991310;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.158132397 UTC

[section ""cstring" . GHC.Unicode.$tc'ModifierSymbol2_bytes" {
     GHC.Unicode.$tc'ModifierSymbol2_bytes:
         I8[] [39,77,111,100,105,102,105,101,114,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.158714445 UTC

[section ""data" . GHC.Unicode.$tc'ModifierSymbol1_closure" {
     GHC.Unicode.$tc'ModifierSymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ModifierSymbol2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.159330892 UTC

[section ""data" . GHC.Unicode.$tc'ModifierSymbol_closure" {
     GHC.Unicode.$tc'ModifierSymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ModifierSymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 17930136738185325280;
         const 9680003641195432205;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.159986733 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherSymbol2_bytes" {
     GHC.Unicode.$tc'OtherSymbol2_bytes:
         I8[] [39,79,116,104,101,114,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.160571968 UTC

[section ""data" . GHC.Unicode.$tc'OtherSymbol1_closure" {
     GHC.Unicode.$tc'OtherSymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherSymbol2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.161148741 UTC

[section ""data" . GHC.Unicode.$tc'OtherSymbol_closure" {
     GHC.Unicode.$tc'OtherSymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherSymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11720563220218392367;
         const 765393478666748433;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.161855295 UTC

[section ""cstring" . GHC.Unicode.$tc'Space2_bytes" {
     GHC.Unicode.$tc'Space2_bytes:
         I8[] [39,83,112,97,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.162467755 UTC

[section ""data" . GHC.Unicode.$tc'Space1_closure" {
     GHC.Unicode.$tc'Space1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Space2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.163053346 UTC

[section ""data" . GHC.Unicode.$tc'Space_closure" {
     GHC.Unicode.$tc'Space_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Space1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 13451262004661357021;
         const 7623263649021992415;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.163707267 UTC

[section ""cstring" . GHC.Unicode.$tc'LineSeparator2_bytes" {
     GHC.Unicode.$tc'LineSeparator2_bytes:
         I8[] [39,76,105,110,101,83,101,112,97,114,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.16431462 UTC

[section ""data" . GHC.Unicode.$tc'LineSeparator1_closure" {
     GHC.Unicode.$tc'LineSeparator1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'LineSeparator2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.1649408 UTC

[section ""data" . GHC.Unicode.$tc'LineSeparator_closure" {
     GHC.Unicode.$tc'LineSeparator_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'LineSeparator1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 3777504190602031786;
         const 16534792546094157357;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.165555017 UTC

[section ""cstring" . GHC.Unicode.$tc'ParagraphSeparator2_bytes" {
     GHC.Unicode.$tc'ParagraphSeparator2_bytes:
         I8[] [39,80,97,114,97,103,114,97,112,104,83,101,112,97,114,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.166146324 UTC

[section ""data" . GHC.Unicode.$tc'ParagraphSeparator1_closure" {
     GHC.Unicode.$tc'ParagraphSeparator1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ParagraphSeparator2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.166787923 UTC

[section ""data" . GHC.Unicode.$tc'ParagraphSeparator_closure" {
     GHC.Unicode.$tc'ParagraphSeparator_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ParagraphSeparator1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 1259977240315406014;
         const 6836752952671088565;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.167406758 UTC

[section ""cstring" . GHC.Unicode.$tc'Control2_bytes" {
     GHC.Unicode.$tc'Control2_bytes:
         I8[] [39,67,111,110,116,114,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.167998376 UTC

[section ""data" . GHC.Unicode.$tc'Control1_closure" {
     GHC.Unicode.$tc'Control1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Control2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.16858235 UTC

[section ""data" . GHC.Unicode.$tc'Control_closure" {
     GHC.Unicode.$tc'Control_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Control1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 3769799789009110362;
         const 7129109849289868145;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.169186609 UTC

[section ""cstring" . GHC.Unicode.$tc'Format2_bytes" {
     GHC.Unicode.$tc'Format2_bytes:
         I8[] [39,70,111,114,109,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.170133554 UTC

[section ""data" . GHC.Unicode.$tc'Format1_closure" {
     GHC.Unicode.$tc'Format1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Format2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.170767019 UTC

[section ""data" . GHC.Unicode.$tc'Format_closure" {
     GHC.Unicode.$tc'Format_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Format1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 15516392160505082493;
         const 8582194312248021938;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.171381308 UTC

[section ""cstring" . GHC.Unicode.$tc'Surrogate2_bytes" {
     GHC.Unicode.$tc'Surrogate2_bytes:
         I8[] [39,83,117,114,114,111,103,97,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.171961502 UTC

[section ""data" . GHC.Unicode.$tc'Surrogate1_closure" {
     GHC.Unicode.$tc'Surrogate1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Surrogate2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.17260717 UTC

[section ""data" . GHC.Unicode.$tc'Surrogate_closure" {
     GHC.Unicode.$tc'Surrogate_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Surrogate1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 8891432866311764671;
         const 15154926068870472193;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.173363757 UTC

[section ""cstring" . GHC.Unicode.$tc'PrivateUse2_bytes" {
     GHC.Unicode.$tc'PrivateUse2_bytes:
         I8[] [39,80,114,105,118,97,116,101,85,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.174806493 UTC

[section ""data" . GHC.Unicode.$tc'PrivateUse1_closure" {
     GHC.Unicode.$tc'PrivateUse1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'PrivateUse2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.175478703 UTC

[section ""data" . GHC.Unicode.$tc'PrivateUse_closure" {
     GHC.Unicode.$tc'PrivateUse_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'PrivateUse1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 9277443220957795657;
         const 16819524490051355354;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.176163529 UTC

[section ""cstring" . GHC.Unicode.$tc'NotAssigned2_bytes" {
     GHC.Unicode.$tc'NotAssigned2_bytes:
         I8[] [39,78,111,116,65,115,115,105,103,110,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.176740662 UTC

[section ""data" . GHC.Unicode.$tc'NotAssigned1_closure" {
     GHC.Unicode.$tc'NotAssigned1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'NotAssigned2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.178023716 UTC

[section ""data" . GHC.Unicode.$tc'NotAssigned_closure" {
     GHC.Unicode.$tc'NotAssigned_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'NotAssigned1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 6894305772705953782;
         const 14217837899895516928;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.179428536 UTC

[section ""data" . GHC.Unicode.toLower_closure" {
     GHC.Unicode.toLower_closure:
         const GHC.Unicode.toLower_info;
         const 0;
 },
 GHC.Unicode.toLower_entry() //  [R2]
         { info_tbl: [(c2kuM,
                       label: GHC.Unicode.toLower_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kuM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kuN; else goto c2kuO;
       c2kuN: // global
           R2 = R2;
           R1 = GHC.Unicode.toLower_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kuO: // global
           I64[Sp - 8] = block_c2kuJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kvd; else goto c2kuK;
       u2kvd: // global
           call _c2kuJ(R1) args: 0, res: 0, upd: 0;
       c2kuK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kuJ() //  [R1]
         { info_tbl: [(c2kuJ,
                       label: block_c2kuJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kuJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2kuT; else goto c2kuS;
       c2kuT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2kuS: // global
           (_s2jbj::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towlower(I64[R1 + 7]);
           if (_s2jbj::I64 > 1114111) goto c2kv5; else goto c2kvc;
       c2kv5: // global
           Hp = Hp - 16;
           R2 = _s2jbj::I64;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2kvc: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s2jbj::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.181289088 UTC

[section ""data" . GHC.Unicode.toUpper_closure" {
     GHC.Unicode.toUpper_closure:
         const GHC.Unicode.toUpper_info;
         const 0;
 },
 GHC.Unicode.toUpper_entry() //  [R2]
         { info_tbl: [(c2kvl,
                       label: GHC.Unicode.toUpper_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kvl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kvm; else goto c2kvn;
       c2kvm: // global
           R2 = R2;
           R1 = GHC.Unicode.toUpper_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kvn: // global
           I64[Sp - 8] = block_c2kvi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kvM; else goto c2kvj;
       u2kvM: // global
           call _c2kvi(R1) args: 0, res: 0, upd: 0;
       c2kvj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kvi() //  [R1]
         { info_tbl: [(c2kvi,
                       label: block_c2kvi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kvi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2kvs; else goto c2kvr;
       c2kvs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2kvr: // global
           (_s2jbu::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towupper(I64[R1 + 7]);
           if (_s2jbu::I64 > 1114111) goto c2kvE; else goto c2kvL;
       c2kvE: // global
           Hp = Hp - 16;
           R2 = _s2jbu::I64;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2kvL: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s2jbu::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.182884365 UTC

[section ""data" . GHC.Unicode.toTitle_closure" {
     GHC.Unicode.toTitle_closure:
         const GHC.Unicode.toTitle_info;
         const 0;
 },
 GHC.Unicode.toTitle_entry() //  [R2]
         { info_tbl: [(c2kvU,
                       label: GHC.Unicode.toTitle_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kvU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kvV; else goto c2kvW;
       c2kvV: // global
           R2 = R2;
           R1 = GHC.Unicode.toTitle_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kvW: // global
           I64[Sp - 8] = block_c2kvR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kwl; else goto c2kvS;
       u2kwl: // global
           call _c2kvR(R1) args: 0, res: 0, upd: 0;
       c2kvS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kvR() //  [R1]
         { info_tbl: [(c2kvR,
                       label: block_c2kvR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kvR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2kw1; else goto c2kw0;
       c2kw1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2kw0: // global
           (_s2jbF::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towtitle(I64[R1 + 7]);
           if (_s2jbF::I64 > 1114111) goto c2kwd; else goto c2kwk;
       c2kwd: // global
           Hp = Hp - 16;
           R2 = _s2jbF::I64;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2kwk: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s2jbF::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.184450639 UTC

[section ""data" . GHC.Unicode.wgencat_closure" {
     GHC.Unicode.wgencat_closure:
         const GHC.Unicode.wgencat_info;
 },
 GHC.Unicode.wgencat_entry() //  [R2]
         { info_tbl: [(c2kwt,
                       label: GHC.Unicode.wgencat_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kwt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kwz; else goto c2kwA;
       c2kwz: // global
           R2 = R2;
           R1 = GHC.Unicode.wgencat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kwA: // global
           I64[Sp - 8] = block_c2kwq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kwE; else goto c2kwr;
       u2kwE: // global
           call _c2kwq(R1) args: 0, res: 0, upd: 0;
       c2kwr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kwq() //  [R1]
         { info_tbl: [(c2kwq,
                       label: block_c2kwq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kwq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2kwD; else goto c2kwC;
       c2kwD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2kwC: // global
           (_s2jbP::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2jbP::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.185950733 UTC

[section ""data" . GHC.Unicode.isAsciiUpper_closure" {
     GHC.Unicode.isAsciiUpper_closure:
         const GHC.Unicode.isAsciiUpper_info;
 },
 GHC.Unicode.isAsciiUpper_entry() //  [R2]
         { info_tbl: [(c2kwM,
                       label: GHC.Unicode.isAsciiUpper_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kwM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kwN; else goto c2kwO;
       c2kwN: // global
           R2 = R2;
           R1 = GHC.Unicode.isAsciiUpper_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kwO: // global
           I64[Sp - 8] = block_c2kwJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kx0; else goto c2kwK;
       u2kx0: // global
           call _c2kwJ(R1) args: 0, res: 0, upd: 0;
       c2kwK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kwJ() //  [R1]
         { info_tbl: [(c2kwJ,
                       label: block_c2kwJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kwJ: // global
           _s2jbS::I64 = I64[R1 + 7];
           if (_s2jbS::I64 < 65) goto c2kwV; else goto c2kwW;
       c2kwV: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kwW: // global
           R1 = I64[((_s2jbS::I64 <= 90) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.187390702 UTC

[section ""data" . GHC.Unicode.isAsciiLower_closure" {
     GHC.Unicode.isAsciiLower_closure:
         const GHC.Unicode.isAsciiLower_info;
 },
 GHC.Unicode.isAsciiLower_entry() //  [R2]
         { info_tbl: [(c2kx8,
                       label: GHC.Unicode.isAsciiLower_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kx8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kx9; else goto c2kxa;
       c2kx9: // global
           R2 = R2;
           R1 = GHC.Unicode.isAsciiLower_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kxa: // global
           I64[Sp - 8] = block_c2kx5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kxm; else goto c2kx6;
       u2kxm: // global
           call _c2kx5(R1) args: 0, res: 0, upd: 0;
       c2kx6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kx5() //  [R1]
         { info_tbl: [(c2kx5,
                       label: block_c2kx5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kx5: // global
           _s2jbX::I64 = I64[R1 + 7];
           if (_s2jbX::I64 < 97) goto c2kxh; else goto c2kxi;
       c2kxh: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kxi: // global
           R1 = I64[((_s2jbX::I64 <= 122) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.188728723 UTC

[section ""data" . GHC.Unicode.isLatin1_closure" {
     GHC.Unicode.isLatin1_closure:
         const GHC.Unicode.isLatin1_info;
 },
 GHC.Unicode.isLatin1_entry() //  [R2]
         { info_tbl: [(c2kxu,
                       label: GHC.Unicode.isLatin1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kxu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kxv; else goto c2kxw;
       c2kxv: // global
           R2 = R2;
           R1 = GHC.Unicode.isLatin1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kxw: // global
           I64[Sp - 8] = block_c2kxr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kxB; else goto c2kxs;
       u2kxB: // global
           call _c2kxr(R1) args: 0, res: 0, upd: 0;
       c2kxs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kxr() //  [R1]
         { info_tbl: [(c2kxr,
                       label: block_c2kxr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kxr: // global
           R1 = I64[((I64[R1 + 7] <= 255) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.190521188 UTC

[section ""data" . GHC.Unicode.isAscii_closure" {
     GHC.Unicode.isAscii_closure:
         const GHC.Unicode.isAscii_info;
 },
 GHC.Unicode.isAscii_entry() //  [R2]
         { info_tbl: [(c2kxJ,
                       label: GHC.Unicode.isAscii_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kxJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kxK; else goto c2kxL;
       c2kxK: // global
           R2 = R2;
           R1 = GHC.Unicode.isAscii_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kxL: // global
           I64[Sp - 8] = block_c2kxG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kxQ; else goto c2kxH;
       u2kxQ: // global
           call _c2kxG(R1) args: 0, res: 0, upd: 0;
       c2kxH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kxG() //  [R1]
         { info_tbl: [(c2kxG,
                       label: block_c2kxG_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kxG: // global
           R1 = I64[((I64[R1 + 7] < 128) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.191839168 UTC

[section ""data" . GHC.Unicode.isOctDigit_closure" {
     GHC.Unicode.isOctDigit_closure:
         const GHC.Unicode.isOctDigit_info;
 },
 GHC.Unicode.isOctDigit_entry() //  [R2]
         { info_tbl: [(c2kxY,
                       label: GHC.Unicode.isOctDigit_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kxY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kxZ; else goto c2ky0;
       c2kxZ: // global
           R2 = R2;
           R1 = GHC.Unicode.isOctDigit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2ky0: // global
           I64[Sp - 8] = block_c2kxV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kye; else goto c2kxW;
       u2kye: // global
           call _c2kxV(R1) args: 0, res: 0, upd: 0;
       c2kxW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kxV() //  [R1]
         { info_tbl: [(c2kxV,
                       label: block_c2kxV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kxV: // global
           R1 = I64[((I64[R1 + 7] - 48 <= 7) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.19310948 UTC

[section ""data" . GHC.Unicode.isDigit_closure" {
     GHC.Unicode.isDigit_closure:
         const GHC.Unicode.isDigit_info;
 },
 GHC.Unicode.isDigit_entry() //  [R2]
         { info_tbl: [(c2kym,
                       label: GHC.Unicode.isDigit_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kym: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kyn; else goto c2kyo;
       c2kyn: // global
           R2 = R2;
           R1 = GHC.Unicode.isDigit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kyo: // global
           I64[Sp - 8] = block_c2kyj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kyC; else goto c2kyk;
       u2kyC: // global
           call _c2kyj(R1) args: 0, res: 0, upd: 0;
       c2kyk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kyj() //  [R1]
         { info_tbl: [(c2kyj,
                       label: block_c2kyj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kyj: // global
           R1 = I64[((I64[R1 + 7] - 48 <= 9) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.19464598 UTC

[section ""data" . GHC.Unicode.isHexDigit_closure" {
     GHC.Unicode.isHexDigit_closure:
         const GHC.Unicode.isHexDigit_info;
 },
 GHC.Unicode.isHexDigit_entry() //  [R2]
         { info_tbl: [(c2kyK,
                       label: GHC.Unicode.isHexDigit_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kyK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kyL; else goto c2kyM;
       c2kyL: // global
           R2 = R2;
           R1 = GHC.Unicode.isHexDigit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kyM: // global
           I64[Sp - 8] = block_c2kyH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kzu; else goto c2kyI;
       u2kzu: // global
           call _c2kyH(R1) args: 0, res: 0, upd: 0;
       c2kyI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kyH() //  [R1]
         { info_tbl: [(c2kyH,
                       label: block_c2kyH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kyH: // global
           _s2jco::I64 = I64[R1 + 7];
           if ((_s2jco::I64 + -48) <= 9) goto c2kzi; else goto c2kzh;
       c2kzh: // global
           if ((_s2jco::I64 + -65) <= 5) goto c2kzi; else goto c2kze;
       c2kzi: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kze: // global
           R1 = I64[(((_s2jco::I64 + -97) <= 5) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.196130914 UTC

[section ""data" . GHC.Unicode.isLower_closure" {
     GHC.Unicode.isLower_closure:
         const GHC.Unicode.isLower_info;
 },
 GHC.Unicode.isLower_entry() //  [R2]
         { info_tbl: [(c2kzC,
                       label: GHC.Unicode.isLower_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kzC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kzD; else goto c2kzE;
       c2kzD: // global
           R2 = R2;
           R1 = GHC.Unicode.isLower_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kzE: // global
           I64[Sp - 8] = block_c2kzz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kzR; else goto c2kzA;
       u2kzR: // global
           call _c2kzz(R1) args: 0, res: 0, upd: 0;
       c2kzA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kzz() //  [R1]
         { info_tbl: [(c2kzz,
                       label: block_c2kzz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kzz: // global
           (_s2jcI::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswlower(I64[R1 + 7]);
           if (_s2jcI::I64 == 0) goto c2kzQ; else goto c2kzP;
       c2kzQ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kzP: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.197331838 UTC

[section ""cstring" . lvl66_r2j7h_bytes" {
     lvl66_r2j7h_bytes:
         I8[] [115,117,99,99,123,71,101,110,101,114,97,108,67,97,116,101,103,111,114,121,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,115,117,99,99,39,32,111,102,32,108,97,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.19826892 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory2_closure" {
     GHC.Unicode.$fEnumGeneralCategory2_closure:
         const GHC.Unicode.$fEnumGeneralCategory2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory2_entry() //  [R1]
         { info_tbl: [(c2kA0,
                       label: GHC.Unicode.$fEnumGeneralCategory2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kA0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2kA1; else goto c2kA2;
       c2kA1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kA2: // global
           (_c2kzV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kzV::I64 == 0) goto c2kzX; else goto c2kzW;
       c2kzX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kzW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kzV::I64;
           I64[Sp - 24] = block_c2kzY_info;
           R2 = lvl66_r2j7h_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c2kzY() //  [R1]
         { info_tbl: [(c2kzY,
                       label: block_c2kzY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kzY: // global
           R3 = R1;
           R2 = $dIP3_r2j7a_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.199799655 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$csucc_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$csucc_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$csucc_info;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory_$csucc_entry() //  [R2]
         { info_tbl: [(c2kAh,
                       label: GHC.Unicode.$fEnumGeneralCategory_$csucc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kAh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kAi; else goto c2kAj;
       c2kAi: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kAj: // global
           I64[Sp - 8] = block_c2kAa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kAu; else goto c2kAb;
       u2kAu: // global
           call _c2kAa(R1) args: 0, res: 0, upd: 0;
       c2kAb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kAa() //  [R1]
         { info_tbl: [(c2kAa,
                       label: block_c2kAa_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kAa: // global
           if (I32[I64[R1 - 1] + 20] == 29 :: W32) goto c2kAf; else goto c2kAe;
       c2kAf: // global
           R1 = GHC.Unicode.$fEnumGeneralCategory2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2kAe: // global
           R1 = I64[(%MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]) + 1 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.201122789 UTC

[section ""cstring" . lvl67_r2j7i_bytes" {
     lvl67_r2j7i_bytes:
         I8[] [112,114,101,100,123,71,101,110,101,114,97,108,67,97,116,101,103,111,114,121,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,112,114,101,100,39,32,111,102,32,102,105,114,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.203734378 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory1_closure" {
     GHC.Unicode.$fEnumGeneralCategory1_closure:
         const GHC.Unicode.$fEnumGeneralCategory1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory1_entry() //  [R1]
         { info_tbl: [(c2kAD,
                       label: GHC.Unicode.$fEnumGeneralCategory1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kAD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2kAE; else goto c2kAF;
       c2kAE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kAF: // global
           (_c2kAy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kAy::I64 == 0) goto c2kAA; else goto c2kAz;
       c2kAA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kAz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kAy::I64;
           I64[Sp - 24] = block_c2kAB_info;
           R2 = lvl67_r2j7i_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c2kAB() //  [R1]
         { info_tbl: [(c2kAB,
                       label: block_c2kAB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kAB: // global
           R3 = R1;
           R2 = $dIP3_r2j7a_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.205295229 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cpred_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cpred_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cpred_info;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cpred_entry() //  [R2]
         { info_tbl: [(c2kAU,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cpred_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kAU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kAV; else goto c2kAW;
       c2kAV: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kAW: // global
           I64[Sp - 8] = block_c2kAN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kB7; else goto c2kAO;
       u2kB7: // global
           call _c2kAN(R1) args: 0, res: 0, upd: 0;
       c2kAO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kAN() //  [R1]
         { info_tbl: [(c2kAN,
                       label: block_c2kAN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kAN: // global
           if (I32[I64[R1 - 1] + 20] == 0 :: W32) goto c2kAS; else goto c2kAR;
       c2kAS: // global
           R1 = GHC.Unicode.$fEnumGeneralCategory1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2kAR: // global
           R1 = I64[(%MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]) - 1 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.207751539 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_info;
         const 0;
 },
 sat_s2jd8_entry() //  [R1]
         { info_tbl: [(c2kBJ,
                       label: sat_s2jd8_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kBJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kBK; else goto c2kBL;
       c2kBK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kBL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jd2::I64 = I64[R1 + 32];
           if (_s2jd2::I64 == I64[R1 + 24]) goto c2kBI; else goto c2kBH;
       c2kBI: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c2kBH: // global
           R2 = _s2jd2::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s2jd1_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jd5_entry() //  [R1]
         { info_tbl: [(c2kBX,
                       label: sat_s2jd5_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kBX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kBY; else goto c2kC6;
       c2kBY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kC6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jd2::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jd2::I64, 0)) goto c2kC4; else goto c2kBW;
       c2kBW: // global
           if (%MO_S_Gt_W64(_s2jd2::I64, 29)) goto c2kC4; else goto c2kC5;
       c2kC4: // global
           R2 = _s2jd2::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2kC5: // global
           R1 = I64[(_s2jd2::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_s2jd1_entry() //  [R1, R2]
         { info_tbl: [(c2kC8,
                       label: go_s2jd1_info
                       rep:HeapRep 1 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kC8: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2kCc; else goto c2kCb;
       c2kCc: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kCb: // global
           _s2jcZ::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jd8_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jcZ::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jd5_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_entry() //  [R2, R3]
         { info_tbl: [(c2kCd,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kCd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kCe; else goto c2kCf;
       c2kCe: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2kCf: // global
           I64[Sp - 16] = block_c2kBc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2kCA; else goto c2kBd;
       u2kCA: // global
           call _c2kBc(R1) args: 0, res: 0, upd: 0;
       c2kBd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kBc() //  [R1]
         { info_tbl: [(c2kBc,
                       label: block_c2kBc_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kBc: // global
           _s2jcX::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2kBk_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2jcX::I64;
           if (R1 & 7 != 0) goto u2kCx; else goto c2kBl;
       u2kCx: // global
           call _c2kBk(R1) args: 0, res: 0, upd: 0;
       c2kBl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kBk() //  [R1]
         { info_tbl: [(c2kBk,
                       label: block_c2kBk_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kBk: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2kBq() args: 0, res: 0, upd: 0;
     }
 },
 _c2kBq() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kBq: // global
           Hp = Hp + 16;
           _s2jcZ::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2kCp; else goto c2kCo;
       c2kCp: // global
           HpAlloc = 16;
           I64[Sp] = block_c2kBp_info;
           R1 = _s2jcZ::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2kCo: // global
           _s2jcX::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s2jcX::I64,
                            _s2jcZ::I64)) goto c2kCr; else goto c2kCs;
       c2kCr: // global
           I64[Hp - 8] = go_s2jd1_info;
           I64[Hp] = _s2jcZ::I64;
           R2 = _s2jcX::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call go_s2jd1_entry(R2, R1) args: 8, res: 0, upd: 8;
       c2kCs: // global
           Hp = Hp - 16;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2kBp() //  [R1]
         { info_tbl: [(c2kBp,
                       label: block_c2kBp_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kBp: // global
           I64[Sp] = R1;
           call _c2kBq() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.214781976 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_info;
         const 0;
 },
 sat_s2jdw_entry() //  [R1]
         { info_tbl: [(c2kDx,
                       label: sat_s2jdw_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kDx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kDy; else goto c2kDz;
       c2kDy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kDz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s2jdp_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdu_entry() //  [R1]
         { info_tbl: [(c2kDJ,
                       label: sat_s2jdu_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kDJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kDK; else goto c2kDS;
       c2kDK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kDS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdq::I64, 0)) goto c2kDQ; else goto c2kDI;
       c2kDI: // global
           if (%MO_S_Gt_W64(_s2jdq::I64, 29)) goto c2kDQ; else goto c2kDR;
       c2kDQ: // global
           R2 = _s2jdq::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2kDR: // global
           R1 = I64[(_s2jdq::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdz_entry() //  [R1]
         { info_tbl: [(c2kE3,
                       label: sat_s2jdz_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kE3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kE4; else goto c2kEc;
       c2kE4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kEc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdq::I64, 0)) goto c2kEa; else goto c2kE2;
       c2kE2: // global
           if (%MO_S_Gt_W64(_s2jdq::I64, 29)) goto c2kEa; else goto c2kEb;
       c2kEa: // global
           R2 = _s2jdq::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2kEb: // global
           R1 = I64[(_s2jdq::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s2jdp_entry() //  [R1, R2]
         { info_tbl: [(c2kEg,
                       label: go_dn_s2jdp_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kEg: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2kEk; else goto c2kEj;
       c2kEk: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kEj: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c2kEe; else goto c2kEf;
       c2kEe: // global
           _s2jdn::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jdw_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jdn::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jdu_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kEf: // global
           I64[Hp - 80] = sat_s2jdz_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2kEm::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2kEm::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2jdA_entry() //  [R1]
         { info_tbl: [(c2kEn,
                       label: sat_s2jdA_info
                       rep:HeapRep 3 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kEn: // global
           _s2jdA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2kEo; else goto c2kEp;
       c2kEp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2kEr; else goto c2kEq;
       c2kEr: // global
           HpAlloc = 24;
           goto c2kEo;
       c2kEo: // global
           R1 = _s2jdA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kEq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jdA::P64;
           _s2jdf::I64 = I64[_s2jdA::P64 + 24];
           _s2jdn::I64 = _s2jdf::I64 - I64[_s2jdA::P64 + 16];
           _s2jdo::I64 = I64[_s2jdA::P64 + 32] - _s2jdn::I64;
           I64[Hp - 16] = go_dn_s2jdp_info;
           I64[Hp - 8] = _s2jdn::I64;
           I64[Hp] = _s2jdo::I64;
           R2 = _s2jdf::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s2jdp_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdm_entry() //  [R1]
         { info_tbl: [(c2kEB,
                       label: sat_s2jdm_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kEB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kEC; else goto c2kEK;
       c2kEC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kEK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdd::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdd::I64, 0)) goto c2kEI; else goto c2kEA;
       c2kEA: // global
           if (%MO_S_Gt_W64(_s2jdd::I64, 29)) goto c2kEI; else goto c2kEJ;
       c2kEI: // global
           R2 = _s2jdd::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2kEJ: // global
           R1 = I64[(_s2jdd::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdE_entry() //  [R1]
         { info_tbl: [(c2kEY,
                       label: sat_s2jdE_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kEY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kEZ; else goto c2kF7;
       c2kEZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kF7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdd::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdd::I64, 0)) goto c2kF5; else goto c2kEX;
       c2kEX: // global
           if (%MO_S_Gt_W64(_s2jdd::I64, 29)) goto c2kF5; else goto c2kF6;
       c2kF5: // global
           R2 = _s2jdd::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2kF6: // global
           R1 = I64[(_s2jdd::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdS_entry() //  [R1]
         { info_tbl: [(c2kFA,
                       label: sat_s2jdS_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kFA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kFB; else goto c2kFC;
       c2kFB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kFC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s2jdL_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdQ_entry() //  [R1]
         { info_tbl: [(c2kFM,
                       label: sat_s2jdQ_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kFM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kFN; else goto c2kFV;
       c2kFN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kFV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdM::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdM::I64, 0)) goto c2kFT; else goto c2kFL;
       c2kFL: // global
           if (%MO_S_Gt_W64(_s2jdM::I64, 29)) goto c2kFT; else goto c2kFU;
       c2kFT: // global
           R2 = _s2jdM::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2kFU: // global
           R1 = I64[(_s2jdM::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdV_entry() //  [R1]
         { info_tbl: [(c2kG6,
                       label: sat_s2jdV_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kG6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kG7; else goto c2kGf;
       c2kG7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kGf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdM::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdM::I64, 0)) goto c2kGd; else goto c2kG5;
       c2kG5: // global
           if (%MO_S_Gt_W64(_s2jdM::I64, 29)) goto c2kGd; else goto c2kGe;
       c2kGd: // global
           R2 = _s2jdM::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2kGe: // global
           R1 = I64[(_s2jdM::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s2jdL_entry() //  [R1, R2]
         { info_tbl: [(c2kGj,
                       label: go_up_s2jdL_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kGj: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2kGn; else goto c2kGm;
       c2kGn: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kGm: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c2kGh; else goto c2kGi;
       c2kGh: // global
           _s2jdJ::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jdS_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jdJ::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jdQ_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kGi: // global
           I64[Hp - 80] = sat_s2jdV_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2kGp::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2kGp::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2jdW_entry() //  [R1]
         { info_tbl: [(c2kGq,
                       label: sat_s2jdW_info
                       rep:HeapRep 3 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kGq: // global
           _s2jdW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2kGr; else goto c2kGs;
       c2kGs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2kGu; else goto c2kGt;
       c2kGu: // global
           HpAlloc = 24;
           goto c2kGr;
       c2kGr: // global
           R1 = _s2jdW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kGt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jdW::P64;
           _s2jdf::I64 = I64[_s2jdW::P64 + 24];
           _s2jdJ::I64 = _s2jdf::I64 - I64[_s2jdW::P64 + 16];
           _s2jdK::I64 = I64[_s2jdW::P64 + 32] - _s2jdJ::I64;
           I64[Hp - 16] = go_up_s2jdL_info;
           I64[Hp - 8] = _s2jdJ::I64;
           I64[Hp] = _s2jdK::I64;
           R2 = _s2jdf::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s2jdL_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdI_entry() //  [R1]
         { info_tbl: [(c2kGE,
                       label: sat_s2jdI_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kGE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kGF; else goto c2kGN;
       c2kGF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kGN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdd::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdd::I64, 0)) goto c2kGL; else goto c2kGD;
       c2kGD: // global
           if (%MO_S_Gt_W64(_s2jdd::I64, 29)) goto c2kGL; else goto c2kGM;
       c2kGL: // global
           R2 = _s2jdd::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2kGM: // global
           R1 = I64[(_s2jdd::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2je0_entry() //  [R1]
         { info_tbl: [(c2kH1,
                       label: sat_s2je0_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kH1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kH2; else goto c2kHa;
       c2kH2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kHa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdd::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdd::I64, 0)) goto c2kH8; else goto c2kH0;
       c2kH0: // global
           if (%MO_S_Gt_W64(_s2jdd::I64, 29)) goto c2kH8; else goto c2kH9;
       c2kH8: // global
           R2 = _s2jdd::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2kH9: // global
           R1 = I64[(_s2jdd::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_entry() //  [R2,
                                                                 R3, R4]
         { info_tbl: [(c2kHb,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kHb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2kHc; else goto c2kHd;
       c2kHc: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2kHd: // global
           I64[Sp - 24] = block_c2kCF_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2kHU; else goto c2kCG;
       u2kHU: // global
           call _c2kCF(R1) args: 0, res: 0, upd: 0;
       c2kCG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kCF() //  [R1]
         { info_tbl: [(c2kCF,
                       label: block_c2kCF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kCF: // global
           _s2jdd::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2kCN_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2jdd::I64;
           if (R1 & 7 != 0) goto u2kHQ; else goto c2kCO;
       u2kHQ: // global
           call _c2kCN(R1) args: 0, res: 0, upd: 0;
       c2kCO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kCN() //  [R1]
         { info_tbl: [(c2kCN,
                       label: block_c2kCN_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kCN: // global
           _s2jdf::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2kCV_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2jdf::I64;
           if (R1 & 7 != 0) goto u2kHR; else goto c2kCW;
       u2kHR: // global
           call _c2kCV(R1) args: 0, res: 0, upd: 0;
       c2kCW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kCV() //  [R1]
         { info_tbl: [(c2kCV,
                       label: block_c2kCV_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kCV: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2kD1() args: 0, res: 0, upd: 0;
     }
 },
 _c2kD1() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kD1: // global
           Hp = Hp + 88;
           _s2jdh::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2kHr; else goto c2kHq;
       c2kHr: // global
           HpAlloc = 88;
           I64[Sp] = block_c2kD0_info;
           R1 = _s2jdh::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2kHq: // global
           _s2jdd::I64 = I64[Sp + 8];
           _s2jdf::I64 = I64[Sp + 16];
           if (%MO_S_Lt_W64(_s2jdf::I64,
                            _s2jdd::I64)) goto c2kHB; else goto c2kHK;
       c2kHB: // global
           if (%MO_S_Le_W64(_s2jdh::I64,
                            _s2jdf::I64)) goto c2kHu; else goto c2kHz;
       c2kHu: // global
           I64[Hp - 80] = sat_s2jdA_info;
           I64[Hp - 64] = _s2jdd::I64;
           I64[Hp - 56] = _s2jdf::I64;
           I64[Hp - 48] = _s2jdh::I64;
           I64[Hp - 40] = sat_s2jdm_info;
           I64[Hp - 24] = _s2jdd::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kHz: // global
           if (%MO_S_Gt_W64(_s2jdh::I64,
                            _s2jdd::I64)) goto c2kHI; else goto c2kHx;
       c2kHx: // global
           I64[Hp - 80] = sat_s2jdE_info;
           I64[Hp - 64] = _s2jdd::I64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2kHv::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2kHv::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kHK: // global
           if (%MO_S_Ge_W64(_s2jdh::I64,
                            _s2jdf::I64)) goto c2kHE; else goto c2kHJ;
       c2kHE: // global
           I64[Hp - 80] = sat_s2jdW_info;
           I64[Hp - 64] = _s2jdd::I64;
           I64[Hp - 56] = _s2jdf::I64;
           I64[Hp - 48] = _s2jdh::I64;
           I64[Hp - 40] = sat_s2jdI_info;
           I64[Hp - 24] = _s2jdd::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kHJ: // global
           if (%MO_S_Lt_W64(_s2jdh::I64,
                            _s2jdd::I64)) goto c2kHI; else goto c2kHH;
       c2kHI: // global
           Hp = Hp - 88;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kHH: // global
           I64[Hp - 80] = sat_s2je0_info;
           I64[Hp - 64] = _s2jdd::I64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2kHF::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2kHF::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2kD0() //  [R1]
         { info_tbl: [(c2kD0,
                       label: block_c2kD0_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kD0: // global
           I64[Sp] = R1;
           call _c2kD1() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.223446955 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_closure" {
     GHC.Unicode.$fEnumGeneralCategory_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Unicode.$fEnumGeneralCategory_$csucc_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cpred_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure+2;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure+2;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.224680858 UTC

[section ""data" . GHC.Unicode.$wgeneralCategory_closure" {
     GHC.Unicode.$wgeneralCategory_closure:
         const GHC.Unicode.$wgeneralCategory_info;
         const 0;
 },
 GHC.Unicode.$wgeneralCategory_entry() //  [R2]
         { info_tbl: [(c2kI1,
                       label: GHC.Unicode.$wgeneralCategory_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kI1: // global
           (_s2je6::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(R2);
           if (%MO_S_Lt_W64(_s2je6::I64, 0)) goto c2kIg; else goto c2kIi;
       c2kIi: // global
           if (%MO_S_Gt_W64(_s2je6::I64, 29)) goto c2kIg; else goto c2kIh;
       c2kIg: // global
           R2 = _s2je6::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2kIh: // global
           R1 = I64[(_s2je6::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.225947549 UTC

[section ""data" . GHC.Unicode.generalCategory_closure" {
     GHC.Unicode.generalCategory_closure:
         const GHC.Unicode.generalCategory_info;
         const 0;
 },
 GHC.Unicode.generalCategory_entry() //  [R2]
         { info_tbl: [(c2kIq,
                       label: GHC.Unicode.generalCategory_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kIq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kIr; else goto c2kIs;
       c2kIr: // global
           R2 = R2;
           R1 = GHC.Unicode.generalCategory_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kIs: // global
           I64[Sp - 8] = block_c2kIn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kIw; else goto c2kIo;
       u2kIw: // global
           call _c2kIn(R1) args: 0, res: 0, upd: 0;
       c2kIo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kIn() //  [R1]
         { info_tbl: [(c2kIn,
                       label: block_c2kIn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kIn: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.227522102 UTC

[section ""data" . GHC.Unicode.$wisPunctuation_closure" {
     GHC.Unicode.$wisPunctuation_closure:
         const GHC.Unicode.$wisPunctuation_info;
         const 0;
 },
 GHC.Unicode.$wisPunctuation_entry() //  [R2]
         { info_tbl: [(c2kID,
                       label: GHC.Unicode.$wisPunctuation_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kID: // global
           (_s2jeh::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(R2);
           if (%MO_S_Lt_W64(_s2jeh::I64, 0)) goto c2kIS; else goto c2kJ6;
       c2kJ6: // global
           if (%MO_S_Gt_W64(_s2jeh::I64, 29)) goto c2kIS; else goto c2kJ5;
       c2kIS: // global
           R2 = _s2jeh::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2kJ5: // global
           if (%MO_S_Ge_W64(_s2jeh::I64, 18)) goto c2kIX; else goto u2kJ7;
       u2kJ7: // global
           if (%MO_S_Lt_W64(_s2jeh::I64, 11)) goto c2kIX; else goto u2kJ8;
       c2kIX: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u2kJ8: // global
           switch [11 .. 17] _s2jeh::I64 {
               case 11, 12, 13, 14, 15, 16, 17 : goto c2kJ4;
           }
       c2kJ4: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.228954552 UTC

[section ""data" . GHC.Unicode.isPunctuation_closure" {
     GHC.Unicode.isPunctuation_closure:
         const GHC.Unicode.isPunctuation_info;
         const 0;
 },
 GHC.Unicode.isPunctuation_entry() //  [R2]
         { info_tbl: [(c2kJg,
                       label: GHC.Unicode.isPunctuation_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kJg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kJh; else goto c2kJi;
       c2kJh: // global
           R2 = R2;
           R1 = GHC.Unicode.isPunctuation_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kJi: // global
           I64[Sp - 8] = block_c2kJd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kJm; else goto c2kJe;
       u2kJm: // global
           call _c2kJd(R1) args: 0, res: 0, upd: 0;
       c2kJe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kJd() //  [R1]
         { info_tbl: [(c2kJd,
                       label: block_c2kJd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kJd: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wisPunctuation_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.230559059 UTC

[section ""data" . GHC.Unicode.$wisSymbol_closure" {
     GHC.Unicode.$wisSymbol_closure:
         const GHC.Unicode.$wisSymbol_info;
         const 0;
 },
 GHC.Unicode.$wisSymbol_entry() //  [R2]
         { info_tbl: [(c2kJt,
                       label: GHC.Unicode.$wisSymbol_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kJt: // global
           (_s2jev::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(R2);
           if (%MO_S_Lt_W64(_s2jev::I64, 0)) goto c2kJI; else goto c2kJT;
       c2kJT: // global
           if (%MO_S_Gt_W64(_s2jev::I64, 29)) goto c2kJI; else goto c2kJS;
       c2kJI: // global
           R2 = _s2jev::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2kJS: // global
           if (%MO_S_Lt_W64(_s2jev::I64, 21)) goto u2kJU; else goto u2kJW;
       u2kJU: // global
           if (%MO_S_Lt_W64(_s2jev::I64, 18)) goto c2kJN; else goto u2kJV;
       u2kJV: // global
           if (_s2jev::I64 == 19) goto c2kJR; else goto c2kJR;
       u2kJW: // global
           if (%MO_S_Lt_W64(_s2jev::I64, 22)) goto c2kJR; else goto c2kJN;
       c2kJR: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kJN: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.23355879 UTC

[section ""data" . GHC.Unicode.isSymbol_closure" {
     GHC.Unicode.isSymbol_closure:
         const GHC.Unicode.isSymbol_info;
         const 0;
 },
 GHC.Unicode.isSymbol_entry() //  [R2]
         { info_tbl: [(c2kK4,
                       label: GHC.Unicode.isSymbol_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kK4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kK5; else goto c2kK6;
       c2kK5: // global
           R2 = R2;
           R1 = GHC.Unicode.isSymbol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kK6: // global
           I64[Sp - 8] = block_c2kK1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kKa; else goto c2kK2;
       u2kKa: // global
           call _c2kK1(R1) args: 0, res: 0, upd: 0;
       c2kK2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kK1() //  [R1]
         { info_tbl: [(c2kK1,
                       label: block_c2kK1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kK1: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wisSymbol_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.234932933 UTC

[section ""data" . GHC.Unicode.isUpper_closure" {
     GHC.Unicode.isUpper_closure:
         const GHC.Unicode.isUpper_info;
 },
 GHC.Unicode.isUpper_entry() //  [R2]
         { info_tbl: [(c2kKi,
                       label: GHC.Unicode.isUpper_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kKi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kKj; else goto c2kKk;
       c2kKj: // global
           R2 = R2;
           R1 = GHC.Unicode.isUpper_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kKk: // global
           I64[Sp - 8] = block_c2kKf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kKx; else goto c2kKg;
       u2kKx: // global
           call _c2kKf(R1) args: 0, res: 0, upd: 0;
       c2kKg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kKf() //  [R1]
         { info_tbl: [(c2kKf,
                       label: block_c2kKf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kKf: // global
           (_s2jeL::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswupper(I64[R1 + 7]);
           if (_s2jeL::I64 == 0) goto c2kKw; else goto c2kKv;
       c2kKw: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kKv: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.236412827 UTC

[section ""data" . GHC.Unicode.isPrint_closure" {
     GHC.Unicode.isPrint_closure:
         const GHC.Unicode.isPrint_info;
 },
 GHC.Unicode.isPrint_entry() //  [R2]
         { info_tbl: [(c2kKF,
                       label: GHC.Unicode.isPrint_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kKF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kKG; else goto c2kKH;
       c2kKG: // global
           R2 = R2;
           R1 = GHC.Unicode.isPrint_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kKH: // global
           I64[Sp - 8] = block_c2kKC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kKU; else goto c2kKD;
       u2kKU: // global
           call _c2kKC(R1) args: 0, res: 0, upd: 0;
       c2kKD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kKC() //  [R1]
         { info_tbl: [(c2kKC,
                       label: block_c2kKC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kKC: // global
           (_s2jeU::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswprint(I64[R1 + 7]);
           if (_s2jeU::I64 == 0) goto c2kKT; else goto c2kKS;
       c2kKT: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kKS: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.237877725 UTC

[section ""data" . GHC.Unicode.isControl_closure" {
     GHC.Unicode.isControl_closure:
         const GHC.Unicode.isControl_info;
 },
 GHC.Unicode.isControl_entry() //  [R2]
         { info_tbl: [(c2kL2,
                       label: GHC.Unicode.isControl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kL2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kL3; else goto c2kL4;
       c2kL3: // global
           R2 = R2;
           R1 = GHC.Unicode.isControl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kL4: // global
           I64[Sp - 8] = block_c2kKZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kLh; else goto c2kL0;
       u2kLh: // global
           call _c2kKZ(R1) args: 0, res: 0, upd: 0;
       c2kL0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kKZ() //  [R1]
         { info_tbl: [(c2kKZ,
                       label: block_c2kKZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kKZ: // global
           (_s2jf3::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswcntrl(I64[R1 + 7]);
           if (_s2jf3::I64 == 0) goto c2kLg; else goto c2kLf;
       c2kLg: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kLf: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.239285201 UTC

[section ""data" . GHC.Unicode.isAlphaNum_closure" {
     GHC.Unicode.isAlphaNum_closure:
         const GHC.Unicode.isAlphaNum_info;
 },
 GHC.Unicode.isAlphaNum_entry() //  [R2]
         { info_tbl: [(c2kLp,
                       label: GHC.Unicode.isAlphaNum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kLp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kLq; else goto c2kLr;
       c2kLq: // global
           R2 = R2;
           R1 = GHC.Unicode.isAlphaNum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kLr: // global
           I64[Sp - 8] = block_c2kLm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kLE; else goto c2kLn;
       u2kLE: // global
           call _c2kLm(R1) args: 0, res: 0, upd: 0;
       c2kLn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kLm() //  [R1]
         { info_tbl: [(c2kLm,
                       label: block_c2kLm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kLm: // global
           (_s2jfc::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalnum(I64[R1 + 7]);
           if (_s2jfc::I64 == 0) goto c2kLD; else goto c2kLC;
       c2kLD: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kLC: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.240728602 UTC

[section ""data" . GHC.Unicode.isAlpha_closure" {
     GHC.Unicode.isAlpha_closure:
         const GHC.Unicode.isAlpha_info;
 },
 GHC.Unicode.isAlpha_entry() //  [R2]
         { info_tbl: [(c2kLM,
                       label: GHC.Unicode.isAlpha_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kLM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kLN; else goto c2kLO;
       c2kLN: // global
           R2 = R2;
           R1 = GHC.Unicode.isAlpha_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kLO: // global
           I64[Sp - 8] = block_c2kLJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kM1; else goto c2kLK;
       u2kM1: // global
           call _c2kLJ(R1) args: 0, res: 0, upd: 0;
       c2kLK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kLJ() //  [R1]
         { info_tbl: [(c2kLJ,
                       label: block_c2kLJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kLJ: // global
           (_s2jfl::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalpha(I64[R1 + 7]);
           if (_s2jfl::I64 == 0) goto c2kM0; else goto c2kLZ;
       c2kM0: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kLZ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.242618065 UTC

[section ""data" . GHC.Unicode.$wisSpace_closure" {
     GHC.Unicode.$wisSpace_closure:
         const GHC.Unicode.$wisSpace_info;
 },
 GHC.Unicode.$wisSpace_entry() //  [R2]
         { info_tbl: [(c2kM8,
                       label: GHC.Unicode.$wisSpace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kM8: // global
           if (R2 > 887) goto c2kMs; else goto c2kMM;
       c2kMs: // global
           (_s2jfv::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswspace(R2);
           if (_s2jfv::I64 == 0) goto c2kME; else goto c2kML;
       c2kMM: // global
           if (R2 == 32) goto c2kML; else goto c2kMK;
       c2kMK: // global
           if ((R2 + -9) <= 4) goto c2kML; else goto c2kMH;
       c2kMH: // global
           if (R2 == 160) goto c2kML; else goto c2kME;
       c2kML: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2kME: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.243920355 UTC

[section ""data" . GHC.Unicode.isSpace_closure" {
     GHC.Unicode.isSpace_closure:
         const GHC.Unicode.isSpace_info;
 },
 GHC.Unicode.isSpace_entry() //  [R2]
         { info_tbl: [(c2kMU,
                       label: GHC.Unicode.isSpace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kMU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2kMV; else goto c2kMW;
       c2kMV: // global
           R2 = R2;
           R1 = GHC.Unicode.isSpace_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2kMW: // global
           I64[Sp - 8] = block_c2kMR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2kN0; else goto c2kMS;
       u2kN0: // global
           call _c2kMR(R1) args: 0, res: 0, upd: 0;
       c2kMS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kMR() //  [R1]
         { info_tbl: [(c2kMR,
                       label: block_c2kMR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kMR: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wisSpace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.244867791 UTC

[section ""data" . GHC.Unicode.UppercaseLetter_closure" {
     GHC.Unicode.UppercaseLetter_closure:
         const GHC.Unicode.UppercaseLetter_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.24546592 UTC

[section ""data" . GHC.Unicode.LowercaseLetter_closure" {
     GHC.Unicode.LowercaseLetter_closure:
         const GHC.Unicode.LowercaseLetter_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.24596819 UTC

[section ""data" . GHC.Unicode.TitlecaseLetter_closure" {
     GHC.Unicode.TitlecaseLetter_closure:
         const GHC.Unicode.TitlecaseLetter_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.246497977 UTC

[section ""data" . GHC.Unicode.ModifierLetter_closure" {
     GHC.Unicode.ModifierLetter_closure:
         const GHC.Unicode.ModifierLetter_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.247028817 UTC

[section ""data" . GHC.Unicode.OtherLetter_closure" {
     GHC.Unicode.OtherLetter_closure:
         const GHC.Unicode.OtherLetter_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.247586413 UTC

[section ""data" . GHC.Unicode.NonSpacingMark_closure" {
     GHC.Unicode.NonSpacingMark_closure:
         const GHC.Unicode.NonSpacingMark_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.248136482 UTC

[section ""data" . GHC.Unicode.SpacingCombiningMark_closure" {
     GHC.Unicode.SpacingCombiningMark_closure:
         const GHC.Unicode.SpacingCombiningMark_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.24865485 UTC

[section ""data" . GHC.Unicode.EnclosingMark_closure" {
     GHC.Unicode.EnclosingMark_closure:
         const GHC.Unicode.EnclosingMark_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.249193107 UTC

[section ""data" . GHC.Unicode.DecimalNumber_closure" {
     GHC.Unicode.DecimalNumber_closure:
         const GHC.Unicode.DecimalNumber_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.249790881 UTC

[section ""data" . GHC.Unicode.LetterNumber_closure" {
     GHC.Unicode.LetterNumber_closure:
         const GHC.Unicode.LetterNumber_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.250340625 UTC

[section ""data" . GHC.Unicode.OtherNumber_closure" {
     GHC.Unicode.OtherNumber_closure:
         const GHC.Unicode.OtherNumber_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.250826694 UTC

[section ""data" . GHC.Unicode.ConnectorPunctuation_closure" {
     GHC.Unicode.ConnectorPunctuation_closure:
         const GHC.Unicode.ConnectorPunctuation_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.251383751 UTC

[section ""data" . GHC.Unicode.DashPunctuation_closure" {
     GHC.Unicode.DashPunctuation_closure:
         const GHC.Unicode.DashPunctuation_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.251951318 UTC

[section ""data" . GHC.Unicode.OpenPunctuation_closure" {
     GHC.Unicode.OpenPunctuation_closure:
         const GHC.Unicode.OpenPunctuation_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.252502254 UTC

[section ""data" . GHC.Unicode.ClosePunctuation_closure" {
     GHC.Unicode.ClosePunctuation_closure:
         const GHC.Unicode.ClosePunctuation_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.25305053 UTC

[section ""data" . GHC.Unicode.InitialQuote_closure" {
     GHC.Unicode.InitialQuote_closure:
         const GHC.Unicode.InitialQuote_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.253657854 UTC

[section ""data" . GHC.Unicode.FinalQuote_closure" {
     GHC.Unicode.FinalQuote_closure:
         const GHC.Unicode.FinalQuote_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.254189895 UTC

[section ""data" . GHC.Unicode.OtherPunctuation_closure" {
     GHC.Unicode.OtherPunctuation_closure:
         const GHC.Unicode.OtherPunctuation_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.254740762 UTC

[section ""data" . GHC.Unicode.MathSymbol_closure" {
     GHC.Unicode.MathSymbol_closure:
         const GHC.Unicode.MathSymbol_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.25628623 UTC

[section ""data" . GHC.Unicode.CurrencySymbol_closure" {
     GHC.Unicode.CurrencySymbol_closure:
         const GHC.Unicode.CurrencySymbol_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.257077188 UTC

[section ""data" . GHC.Unicode.ModifierSymbol_closure" {
     GHC.Unicode.ModifierSymbol_closure:
         const GHC.Unicode.ModifierSymbol_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.257688844 UTC

[section ""data" . GHC.Unicode.OtherSymbol_closure" {
     GHC.Unicode.OtherSymbol_closure:
         const GHC.Unicode.OtherSymbol_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.258290618 UTC

[section ""data" . GHC.Unicode.Space_closure" {
     GHC.Unicode.Space_closure:
         const GHC.Unicode.Space_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.258900496 UTC

[section ""data" . GHC.Unicode.LineSeparator_closure" {
     GHC.Unicode.LineSeparator_closure:
         const GHC.Unicode.LineSeparator_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.259481275 UTC

[section ""data" . GHC.Unicode.ParagraphSeparator_closure" {
     GHC.Unicode.ParagraphSeparator_closure:
         const GHC.Unicode.ParagraphSeparator_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.259993264 UTC

[section ""data" . GHC.Unicode.Control_closure" {
     GHC.Unicode.Control_closure:
         const GHC.Unicode.Control_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.260757966 UTC

[section ""data" . GHC.Unicode.Format_closure" {
     GHC.Unicode.Format_closure:
         const GHC.Unicode.Format_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.261395983 UTC

[section ""data" . GHC.Unicode.Surrogate_closure" {
     GHC.Unicode.Surrogate_closure:
         const GHC.Unicode.Surrogate_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.262006114 UTC

[section ""data" . GHC.Unicode.PrivateUse_closure" {
     GHC.Unicode.PrivateUse_closure:
         const GHC.Unicode.PrivateUse_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.262588815 UTC

[section ""data" . GHC.Unicode.NotAssigned_closure" {
     GHC.Unicode.NotAssigned_closure:
         const GHC.Unicode.NotAssigned_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.263183291 UTC

[section ""relreadonly" . GHC.Unicode.GeneralCategory_closure_tbl" {
     GHC.Unicode.GeneralCategory_closure_tbl:
         const GHC.Unicode.UppercaseLetter_closure+1;
         const GHC.Unicode.LowercaseLetter_closure+1;
         const GHC.Unicode.TitlecaseLetter_closure+1;
         const GHC.Unicode.ModifierLetter_closure+1;
         const GHC.Unicode.OtherLetter_closure+1;
         const GHC.Unicode.NonSpacingMark_closure+1;
         const GHC.Unicode.SpacingCombiningMark_closure+1;
         const GHC.Unicode.EnclosingMark_closure+1;
         const GHC.Unicode.DecimalNumber_closure+1;
         const GHC.Unicode.LetterNumber_closure+1;
         const GHC.Unicode.OtherNumber_closure+1;
         const GHC.Unicode.ConnectorPunctuation_closure+1;
         const GHC.Unicode.DashPunctuation_closure+1;
         const GHC.Unicode.OpenPunctuation_closure+1;
         const GHC.Unicode.ClosePunctuation_closure+1;
         const GHC.Unicode.InitialQuote_closure+1;
         const GHC.Unicode.FinalQuote_closure+1;
         const GHC.Unicode.OtherPunctuation_closure+1;
         const GHC.Unicode.MathSymbol_closure+1;
         const GHC.Unicode.CurrencySymbol_closure+1;
         const GHC.Unicode.ModifierSymbol_closure+1;
         const GHC.Unicode.OtherSymbol_closure+1;
         const GHC.Unicode.Space_closure+1;
         const GHC.Unicode.LineSeparator_closure+1;
         const GHC.Unicode.ParagraphSeparator_closure+1;
         const GHC.Unicode.Control_closure+1;
         const GHC.Unicode.Format_closure+1;
         const GHC.Unicode.Surrogate_closure+1;
         const GHC.Unicode.PrivateUse_closure+1;
         const GHC.Unicode.NotAssigned_closure+1;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.264292572 UTC

[GHC.Unicode.UppercaseLetter_con_entry() //  [R1]
         { info_tbl: [(c2kN1,
                       label: GHC.Unicode.UppercaseLetter_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,85,112,112,101,114,99,97,115,101,76,101,116,116,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kN1: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.26512727 UTC

[GHC.Unicode.LowercaseLetter_con_entry() //  [R1]
         { info_tbl: [(c2kN3,
                       label: GHC.Unicode.LowercaseLetter_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,76,111,119,101,114,99,97,115,101,76,101,116,116,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kN3: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.265982522 UTC

[GHC.Unicode.TitlecaseLetter_con_entry() //  [R1]
         { info_tbl: [(c2kN5,
                       label: GHC.Unicode.TitlecaseLetter_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,84,105,116,108,101,99,97,115,101,76,101,116,116,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kN5: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.266764583 UTC

[GHC.Unicode.ModifierLetter_con_entry() //  [R1]
         { info_tbl: [(c2kN7,
                       label: GHC.Unicode.ModifierLetter_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,77,111,100,105,102,105,101,114,76,101,116,116,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kN7: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.267537019 UTC

[GHC.Unicode.OtherLetter_con_entry() //  [R1]
         { info_tbl: [(c2kN9,
                       label: GHC.Unicode.OtherLetter_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 4
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,76,101,116,116,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kN9: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.268305686 UTC

[GHC.Unicode.NonSpacingMark_con_entry() //  [R1]
         { info_tbl: [(c2kNb,
                       label: GHC.Unicode.NonSpacingMark_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 5
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,78,111,110,83,112,97,99,105,110,103,77,97,114,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNb: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.269047925 UTC

[GHC.Unicode.SpacingCombiningMark_con_entry() //  [R1]
         { info_tbl: [(c2kNd,
                       label: GHC.Unicode.SpacingCombiningMark_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 6
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,83,112,97,99,105,110,103,67,111,109,98,105,110,105,110,103,77,97,114,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNd: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.269799684 UTC

[GHC.Unicode.EnclosingMark_con_entry() //  [R1]
         { info_tbl: [(c2kNf,
                       label: GHC.Unicode.EnclosingMark_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 7
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,69,110,99,108,111,115,105,110,103,77,97,114,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNf: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.270563447 UTC

[GHC.Unicode.DecimalNumber_con_entry() //  [R1]
         { info_tbl: [(c2kNh,
                       label: GHC.Unicode.DecimalNumber_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 8
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,68,101,99,105,109,97,108,78,117,109,98,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNh: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.271359354 UTC

[GHC.Unicode.LetterNumber_con_entry() //  [R1]
         { info_tbl: [(c2kNj,
                       label: GHC.Unicode.LetterNumber_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 9
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,76,101,116,116,101,114,78,117,109,98,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNj: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.272335651 UTC

[GHC.Unicode.OtherNumber_con_entry() //  [R1]
         { info_tbl: [(c2kNl,
                       label: GHC.Unicode.OtherNumber_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 10
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,78,117,109,98,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNl: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.27312678 UTC

[GHC.Unicode.ConnectorPunctuation_con_entry() //  [R1]
         { info_tbl: [(c2kNn,
                       label: GHC.Unicode.ConnectorPunctuation_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 11
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,111,110,110,101,99,116,111,114,80,117,110,99,116,117,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNn: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.27393641 UTC

[GHC.Unicode.DashPunctuation_con_entry() //  [R1]
         { info_tbl: [(c2kNp,
                       label: GHC.Unicode.DashPunctuation_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 12
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,68,97,115,104,80,117,110,99,116,117,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNp: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.274688784 UTC

[GHC.Unicode.OpenPunctuation_con_entry() //  [R1]
         { info_tbl: [(c2kNr,
                       label: GHC.Unicode.OpenPunctuation_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 13
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,112,101,110,80,117,110,99,116,117,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNr: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.275542597 UTC

[GHC.Unicode.ClosePunctuation_con_entry() //  [R1]
         { info_tbl: [(c2kNt,
                       label: GHC.Unicode.ClosePunctuation_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 14
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,108,111,115,101,80,117,110,99,116,117,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNt: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.27632771 UTC

[GHC.Unicode.InitialQuote_con_entry() //  [R1]
         { info_tbl: [(c2kNv,
                       label: GHC.Unicode.InitialQuote_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 15
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,73,110,105,116,105,97,108,81,117,111,116,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNv: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.277151548 UTC

[GHC.Unicode.FinalQuote_con_entry() //  [R1]
         { info_tbl: [(c2kNx,
                       label: GHC.Unicode.FinalQuote_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 16
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,70,105,110,97,108,81,117,111,116,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNx: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.278417452 UTC

[GHC.Unicode.OtherPunctuation_con_entry() //  [R1]
         { info_tbl: [(c2kNz,
                       label: GHC.Unicode.OtherPunctuation_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 17
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,80,117,110,99,116,117,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNz: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.27928305 UTC

[GHC.Unicode.MathSymbol_con_entry() //  [R1]
         { info_tbl: [(c2kNB,
                       label: GHC.Unicode.MathSymbol_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 18
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,77,97,116,104,83,121,109,98,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNB: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.280809407 UTC

[GHC.Unicode.CurrencySymbol_con_entry() //  [R1]
         { info_tbl: [(c2kND,
                       label: GHC.Unicode.CurrencySymbol_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 19
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,117,114,114,101,110,99,121,83,121,109,98,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kND: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.281624338 UTC

[GHC.Unicode.ModifierSymbol_con_entry() //  [R1]
         { info_tbl: [(c2kNF,
                       label: GHC.Unicode.ModifierSymbol_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 20
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,77,111,100,105,102,105,101,114,83,121,109,98,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNF: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.282532616 UTC

[GHC.Unicode.OtherSymbol_con_entry() //  [R1]
         { info_tbl: [(c2kNH,
                       label: GHC.Unicode.OtherSymbol_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 21
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,83,121,109,98,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNH: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.28330003 UTC

[GHC.Unicode.Space_con_entry() //  [R1]
         { info_tbl: [(c2kNJ,
                       label: GHC.Unicode.Space_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 22
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,83,112,97,99,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNJ: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.284043898 UTC

[GHC.Unicode.LineSeparator_con_entry() //  [R1]
         { info_tbl: [(c2kNL,
                       label: GHC.Unicode.LineSeparator_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 23
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,76,105,110,101,83,101,112,97,114,97,116,111,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNL: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.284824211 UTC

[GHC.Unicode.ParagraphSeparator_con_entry() //  [R1]
         { info_tbl: [(c2kNN,
                       label: GHC.Unicode.ParagraphSeparator_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 24
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,80,97,114,97,103,114,97,112,104,83,101,112,97,114,97,116,111,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNN: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.285912986 UTC

[GHC.Unicode.Control_con_entry() //  [R1]
         { info_tbl: [(c2kNP,
                       label: GHC.Unicode.Control_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 25
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,111,110,116,114,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNP: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.286674366 UTC

[GHC.Unicode.Format_con_entry() //  [R1]
         { info_tbl: [(c2kNR,
                       label: GHC.Unicode.Format_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 26
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,70,111,114,109,97,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNR: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.2874303 UTC

[GHC.Unicode.Surrogate_con_entry() //  [R1]
         { info_tbl: [(c2kNT,
                       label: GHC.Unicode.Surrogate_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 27
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,83,117,114,114,111,103,97,116,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNT: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.288171333 UTC

[GHC.Unicode.PrivateUse_con_entry() //  [R1]
         { info_tbl: [(c2kNV,
                       label: GHC.Unicode.PrivateUse_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 28
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,80,114,105,118,97,116,101,85,115,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNV: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.289085539 UTC

[GHC.Unicode.NotAssigned_con_entry() //  [R1]
         { info_tbl: [(c2kNX,
                       label: GHC.Unicode.NotAssigned_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 29
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,78,111,116,65,115,115,105,103,110,101,100]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kNX: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.289786354 UTC

[section ""relreadonly" . S2jm9_srt" {
     S2jm9_srt:
         const GHC.Unicode.$w$cshowsPrec_closure;
         const lvl1_r2j63_closure;
         const lvl3_r2j65_closure;
         const lvl5_r2j67_closure;
         const lvl7_r2j69_closure;
         const lvl9_r2j6b_closure;
         const lvl11_r2j6d_closure;
         const lvl13_r2j6f_closure;
         const lvl15_r2j6h_closure;
         const lvl17_r2j6j_closure;
         const lvl19_r2j6l_closure;
         const lvl21_r2j6n_closure;
         const lvl23_r2j6p_closure;
         const lvl25_r2j6r_closure;
         const lvl27_r2j6t_closure;
         const lvl29_r2j6v_closure;
         const lvl31_r2j6x_closure;
         const lvl33_r2j6z_closure;
         const lvl35_r2j6B_closure;
         const lvl37_r2j6D_closure;
         const lvl39_r2j6F_closure;
         const lvl41_r2j6H_closure;
         const lvl43_r2j6J_closure;
         const lvl45_r2j6L_closure;
         const lvl47_r2j6N_closure;
         const lvl49_r2j6P_closure;
         const lvl51_r2j6R_closure;
         const lvl53_r2j6T_closure;
         const lvl55_r2j6V_closure;
         const lvl57_r2j6X_closure;
         const lvl59_r2j6Z_closure;
         const GHC.Arr.hopelessIndexError_closure;
         const GHC.Unicode.$fIxGeneralCategory_$cindex_closure;
         const lvl62_r2j7d_closure;
         const lvl63_r2j7e_closure;
         const lvl64_r2j7f_closure;
         const GHC.Err.error_closure;
         const GHC.Unicode.$wlvl_closure;
         const $dIP3_r2j7a_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure;
         const GHC.Unicode.$w$ctoEnum_closure;
         const GHC.Char.$wlvl_closure;
         const GHC.Unicode.toLower_closure;
         const GHC.Unicode.toUpper_closure;
         const GHC.Unicode.toTitle_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$csucc_closure;
         const GHC.Unicode.$fEnumGeneralCategory2_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$cpred_closure;
         const GHC.Unicode.$fEnumGeneralCategory1_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure;
         const GHC.Unicode.generalCategory_closure;
         const GHC.Unicode.$wgeneralCategory_closure;
         const GHC.Unicode.isPunctuation_closure;
         const GHC.Unicode.$wisPunctuation_closure;
         const GHC.Unicode.isSymbol_closure;
         const GHC.Unicode.$wisSymbol_closure;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.291478047 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:57:02.29279211 UTC

[section ""data" . GHC.Unicode.$fBoundedGeneralCategory_closure" {
     GHC.Unicode.$fBoundedGeneralCategory_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Unicode.UppercaseLetter_closure+1;
         const GHC.Unicode.NotAssigned_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.348640213 UTC

[section ""cstring" . lvl_r2j62_bytes" {
     lvl_r2j62_bytes:
         I8[] [85,112,112,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.351025207 UTC

[section ""data" . lvl1_r2j63_closure" {
     lvl1_r2j63_closure:
         const lvl1_r2j63_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r2j63_entry() //  [R1]
         { info_tbl: [(c2kO7,
                       label: lvl1_r2j63_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kO7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kO8; else goto c2kO9;
       c2kO8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kO9: // global
           (_c2kO4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kO4::I64 == 0) goto c2kO6; else goto c2kO5;
       c2kO6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kO5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kO4::I64;
           R2 = lvl_r2j62_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.355138704 UTC

[section ""cstring" . lvl2_r2j64_bytes" {
     lvl2_r2j64_bytes:
         I8[] [76,111,119,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.356988482 UTC

[section ""data" . lvl3_r2j65_closure" {
     lvl3_r2j65_closure:
         const lvl3_r2j65_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r2j65_entry() //  [R1]
         { info_tbl: [(c2kOo,
                       label: lvl3_r2j65_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kOo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kOp; else goto c2kOq;
       c2kOp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kOq: // global
           (_c2kOl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kOl::I64 == 0) goto c2kOn; else goto c2kOm;
       c2kOn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kOm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kOl::I64;
           R2 = lvl2_r2j64_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.362378314 UTC

[section ""cstring" . lvl4_r2j66_bytes" {
     lvl4_r2j66_bytes:
         I8[] [84,105,116,108,101,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.364849896 UTC

[section ""data" . lvl5_r2j67_closure" {
     lvl5_r2j67_closure:
         const lvl5_r2j67_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r2j67_entry() //  [R1]
         { info_tbl: [(c2kOF,
                       label: lvl5_r2j67_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kOF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kOG; else goto c2kOH;
       c2kOG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kOH: // global
           (_c2kOC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kOC::I64 == 0) goto c2kOE; else goto c2kOD;
       c2kOE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kOD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kOC::I64;
           R2 = lvl4_r2j66_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.369296268 UTC

[section ""cstring" . lvl6_r2j68_bytes" {
     lvl6_r2j68_bytes:
         I8[] [77,111,100,105,102,105,101,114,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.371429323 UTC

[section ""data" . lvl7_r2j69_closure" {
     lvl7_r2j69_closure:
         const lvl7_r2j69_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r2j69_entry() //  [R1]
         { info_tbl: [(c2kOW,
                       label: lvl7_r2j69_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kOW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kOX; else goto c2kOY;
       c2kOX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kOY: // global
           (_c2kOT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kOT::I64 == 0) goto c2kOV; else goto c2kOU;
       c2kOV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kOU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kOT::I64;
           R2 = lvl6_r2j68_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.375650363 UTC

[section ""cstring" . lvl8_r2j6a_bytes" {
     lvl8_r2j6a_bytes:
         I8[] [79,116,104,101,114,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.377653257 UTC

[section ""data" . lvl9_r2j6b_closure" {
     lvl9_r2j6b_closure:
         const lvl9_r2j6b_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_r2j6b_entry() //  [R1]
         { info_tbl: [(c2kPd,
                       label: lvl9_r2j6b_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kPd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kPe; else goto c2kPf;
       c2kPe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kPf: // global
           (_c2kPa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kPa::I64 == 0) goto c2kPc; else goto c2kPb;
       c2kPc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kPb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kPa::I64;
           R2 = lvl8_r2j6a_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.382175322 UTC

[section ""cstring" . lvl10_r2j6c_bytes" {
     lvl10_r2j6c_bytes:
         I8[] [78,111,110,83,112,97,99,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.385063796 UTC

[section ""data" . lvl11_r2j6d_closure" {
     lvl11_r2j6d_closure:
         const lvl11_r2j6d_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_r2j6d_entry() //  [R1]
         { info_tbl: [(c2kPu,
                       label: lvl11_r2j6d_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kPu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kPv; else goto c2kPw;
       c2kPv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kPw: // global
           (_c2kPr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kPr::I64 == 0) goto c2kPt; else goto c2kPs;
       c2kPt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kPs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kPr::I64;
           R2 = lvl10_r2j6c_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.389539382 UTC

[section ""cstring" . lvl12_r2j6e_bytes" {
     lvl12_r2j6e_bytes:
         I8[] [83,112,97,99,105,110,103,67,111,109,98,105,110,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.391781604 UTC

[section ""data" . lvl13_r2j6f_closure" {
     lvl13_r2j6f_closure:
         const lvl13_r2j6f_info;
         const 0;
         const 0;
         const 0;
 },
 lvl13_r2j6f_entry() //  [R1]
         { info_tbl: [(c2kPL,
                       label: lvl13_r2j6f_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kPL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kPM; else goto c2kPN;
       c2kPM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kPN: // global
           (_c2kPI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kPI::I64 == 0) goto c2kPK; else goto c2kPJ;
       c2kPK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kPJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kPI::I64;
           R2 = lvl12_r2j6e_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.396517748 UTC

[section ""cstring" . lvl14_r2j6g_bytes" {
     lvl14_r2j6g_bytes:
         I8[] [69,110,99,108,111,115,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.398674981 UTC

[section ""data" . lvl15_r2j6h_closure" {
     lvl15_r2j6h_closure:
         const lvl15_r2j6h_info;
         const 0;
         const 0;
         const 0;
 },
 lvl15_r2j6h_entry() //  [R1]
         { info_tbl: [(c2kQ2,
                       label: lvl15_r2j6h_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kQ2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kQ3; else goto c2kQ4;
       c2kQ3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kQ4: // global
           (_c2kPZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kPZ::I64 == 0) goto c2kQ1; else goto c2kQ0;
       c2kQ1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kQ0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kPZ::I64;
           R2 = lvl14_r2j6g_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.40343609 UTC

[section ""cstring" . lvl16_r2j6i_bytes" {
     lvl16_r2j6i_bytes:
         I8[] [68,101,99,105,109,97,108,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.405687929 UTC

[section ""data" . lvl17_r2j6j_closure" {
     lvl17_r2j6j_closure:
         const lvl17_r2j6j_info;
         const 0;
         const 0;
         const 0;
 },
 lvl17_r2j6j_entry() //  [R1]
         { info_tbl: [(c2kQj,
                       label: lvl17_r2j6j_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kQj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kQk; else goto c2kQl;
       c2kQk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kQl: // global
           (_c2kQg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kQg::I64 == 0) goto c2kQi; else goto c2kQh;
       c2kQi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kQh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kQg::I64;
           R2 = lvl16_r2j6i_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.411299321 UTC

[section ""cstring" . lvl18_r2j6k_bytes" {
     lvl18_r2j6k_bytes:
         I8[] [76,101,116,116,101,114,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.41347148 UTC

[section ""data" . lvl19_r2j6l_closure" {
     lvl19_r2j6l_closure:
         const lvl19_r2j6l_info;
         const 0;
         const 0;
         const 0;
 },
 lvl19_r2j6l_entry() //  [R1]
         { info_tbl: [(c2kQA,
                       label: lvl19_r2j6l_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kQA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kQB; else goto c2kQC;
       c2kQB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kQC: // global
           (_c2kQx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kQx::I64 == 0) goto c2kQz; else goto c2kQy;
       c2kQz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kQy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kQx::I64;
           R2 = lvl18_r2j6k_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.417870146 UTC

[section ""cstring" . lvl20_r2j6m_bytes" {
     lvl20_r2j6m_bytes:
         I8[] [79,116,104,101,114,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.420045453 UTC

[section ""data" . lvl21_r2j6n_closure" {
     lvl21_r2j6n_closure:
         const lvl21_r2j6n_info;
         const 0;
         const 0;
         const 0;
 },
 lvl21_r2j6n_entry() //  [R1]
         { info_tbl: [(c2kQR,
                       label: lvl21_r2j6n_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kQR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kQS; else goto c2kQT;
       c2kQS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kQT: // global
           (_c2kQO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kQO::I64 == 0) goto c2kQQ; else goto c2kQP;
       c2kQQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kQP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kQO::I64;
           R2 = lvl20_r2j6m_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.424899765 UTC

[section ""cstring" . lvl22_r2j6o_bytes" {
     lvl22_r2j6o_bytes:
         I8[] [67,111,110,110,101,99,116,111,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.42711994 UTC

[section ""data" . lvl23_r2j6p_closure" {
     lvl23_r2j6p_closure:
         const lvl23_r2j6p_info;
         const 0;
         const 0;
         const 0;
 },
 lvl23_r2j6p_entry() //  [R1]
         { info_tbl: [(c2kR8,
                       label: lvl23_r2j6p_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kR8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kR9; else goto c2kRa;
       c2kR9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kRa: // global
           (_c2kR5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kR5::I64 == 0) goto c2kR7; else goto c2kR6;
       c2kR7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kR6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kR5::I64;
           R2 = lvl22_r2j6o_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.431355637 UTC

[section ""cstring" . lvl24_r2j6q_bytes" {
     lvl24_r2j6q_bytes:
         I8[] [68,97,115,104,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.433887903 UTC

[section ""data" . lvl25_r2j6r_closure" {
     lvl25_r2j6r_closure:
         const lvl25_r2j6r_info;
         const 0;
         const 0;
         const 0;
 },
 lvl25_r2j6r_entry() //  [R1]
         { info_tbl: [(c2kRp,
                       label: lvl25_r2j6r_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kRp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kRq; else goto c2kRr;
       c2kRq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kRr: // global
           (_c2kRm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kRm::I64 == 0) goto c2kRo; else goto c2kRn;
       c2kRo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kRn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kRm::I64;
           R2 = lvl24_r2j6q_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.439169014 UTC

[section ""cstring" . lvl26_r2j6s_bytes" {
     lvl26_r2j6s_bytes:
         I8[] [79,112,101,110,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.441392521 UTC

[section ""data" . lvl27_r2j6t_closure" {
     lvl27_r2j6t_closure:
         const lvl27_r2j6t_info;
         const 0;
         const 0;
         const 0;
 },
 lvl27_r2j6t_entry() //  [R1]
         { info_tbl: [(c2kRG,
                       label: lvl27_r2j6t_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kRG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kRH; else goto c2kRI;
       c2kRH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kRI: // global
           (_c2kRD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kRD::I64 == 0) goto c2kRF; else goto c2kRE;
       c2kRF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kRE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kRD::I64;
           R2 = lvl26_r2j6s_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.446042517 UTC

[section ""cstring" . lvl28_r2j6u_bytes" {
     lvl28_r2j6u_bytes:
         I8[] [67,108,111,115,101,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.448156594 UTC

[section ""data" . lvl29_r2j6v_closure" {
     lvl29_r2j6v_closure:
         const lvl29_r2j6v_info;
         const 0;
         const 0;
         const 0;
 },
 lvl29_r2j6v_entry() //  [R1]
         { info_tbl: [(c2kRX,
                       label: lvl29_r2j6v_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kRX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kRY; else goto c2kRZ;
       c2kRY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kRZ: // global
           (_c2kRU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kRU::I64 == 0) goto c2kRW; else goto c2kRV;
       c2kRW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kRV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kRU::I64;
           R2 = lvl28_r2j6u_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.452578801 UTC

[section ""cstring" . lvl30_r2j6w_bytes" {
     lvl30_r2j6w_bytes:
         I8[] [73,110,105,116,105,97,108,81,117,111,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.454861617 UTC

[section ""data" . lvl31_r2j6x_closure" {
     lvl31_r2j6x_closure:
         const lvl31_r2j6x_info;
         const 0;
         const 0;
         const 0;
 },
 lvl31_r2j6x_entry() //  [R1]
         { info_tbl: [(c2kSe,
                       label: lvl31_r2j6x_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kSe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kSf; else goto c2kSg;
       c2kSf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kSg: // global
           (_c2kSb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kSb::I64 == 0) goto c2kSd; else goto c2kSc;
       c2kSd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kSc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kSb::I64;
           R2 = lvl30_r2j6w_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.459279834 UTC

[section ""cstring" . lvl32_r2j6y_bytes" {
     lvl32_r2j6y_bytes:
         I8[] [70,105,110,97,108,81,117,111,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.462531221 UTC

[section ""data" . lvl33_r2j6z_closure" {
     lvl33_r2j6z_closure:
         const lvl33_r2j6z_info;
         const 0;
         const 0;
         const 0;
 },
 lvl33_r2j6z_entry() //  [R1]
         { info_tbl: [(c2kSv,
                       label: lvl33_r2j6z_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kSv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kSw; else goto c2kSx;
       c2kSw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kSx: // global
           (_c2kSs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kSs::I64 == 0) goto c2kSu; else goto c2kSt;
       c2kSu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kSt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kSs::I64;
           R2 = lvl32_r2j6y_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.466763862 UTC

[section ""cstring" . lvl34_r2j6A_bytes" {
     lvl34_r2j6A_bytes:
         I8[] [79,116,104,101,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.468813263 UTC

[section ""data" . lvl35_r2j6B_closure" {
     lvl35_r2j6B_closure:
         const lvl35_r2j6B_info;
         const 0;
         const 0;
         const 0;
 },
 lvl35_r2j6B_entry() //  [R1]
         { info_tbl: [(c2kSM,
                       label: lvl35_r2j6B_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kSM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kSN; else goto c2kSO;
       c2kSN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kSO: // global
           (_c2kSJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kSJ::I64 == 0) goto c2kSL; else goto c2kSK;
       c2kSL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kSK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kSJ::I64;
           R2 = lvl34_r2j6A_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.472995105 UTC

[section ""cstring" . lvl36_r2j6C_bytes" {
     lvl36_r2j6C_bytes:
         I8[] [77,97,116,104,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.475509524 UTC

[section ""data" . lvl37_r2j6D_closure" {
     lvl37_r2j6D_closure:
         const lvl37_r2j6D_info;
         const 0;
         const 0;
         const 0;
 },
 lvl37_r2j6D_entry() //  [R1]
         { info_tbl: [(c2kT3,
                       label: lvl37_r2j6D_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kT3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kT4; else goto c2kT5;
       c2kT4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kT5: // global
           (_c2kT0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kT0::I64 == 0) goto c2kT2; else goto c2kT1;
       c2kT2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kT1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kT0::I64;
           R2 = lvl36_r2j6C_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.479783088 UTC

[section ""cstring" . lvl38_r2j6E_bytes" {
     lvl38_r2j6E_bytes:
         I8[] [67,117,114,114,101,110,99,121,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.481964898 UTC

[section ""data" . lvl39_r2j6F_closure" {
     lvl39_r2j6F_closure:
         const lvl39_r2j6F_info;
         const 0;
         const 0;
         const 0;
 },
 lvl39_r2j6F_entry() //  [R1]
         { info_tbl: [(c2kTk,
                       label: lvl39_r2j6F_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kTk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kTl; else goto c2kTm;
       c2kTl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kTm: // global
           (_c2kTh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kTh::I64 == 0) goto c2kTj; else goto c2kTi;
       c2kTj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kTi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kTh::I64;
           R2 = lvl38_r2j6E_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.487180603 UTC

[section ""cstring" . lvl40_r2j6G_bytes" {
     lvl40_r2j6G_bytes:
         I8[] [77,111,100,105,102,105,101,114,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.489331954 UTC

[section ""data" . lvl41_r2j6H_closure" {
     lvl41_r2j6H_closure:
         const lvl41_r2j6H_info;
         const 0;
         const 0;
         const 0;
 },
 lvl41_r2j6H_entry() //  [R1]
         { info_tbl: [(c2kTB,
                       label: lvl41_r2j6H_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kTB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kTC; else goto c2kTD;
       c2kTC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kTD: // global
           (_c2kTy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kTy::I64 == 0) goto c2kTA; else goto c2kTz;
       c2kTA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kTz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kTy::I64;
           R2 = lvl40_r2j6G_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.493585948 UTC

[section ""cstring" . lvl42_r2j6I_bytes" {
     lvl42_r2j6I_bytes:
         I8[] [79,116,104,101,114,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.496594168 UTC

[section ""data" . lvl43_r2j6J_closure" {
     lvl43_r2j6J_closure:
         const lvl43_r2j6J_info;
         const 0;
         const 0;
         const 0;
 },
 lvl43_r2j6J_entry() //  [R1]
         { info_tbl: [(c2kTS,
                       label: lvl43_r2j6J_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kTS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kTT; else goto c2kTU;
       c2kTT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kTU: // global
           (_c2kTP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kTP::I64 == 0) goto c2kTR; else goto c2kTQ;
       c2kTR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kTQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kTP::I64;
           R2 = lvl42_r2j6I_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.502575567 UTC

[section ""cstring" . lvl44_r2j6K_bytes" {
     lvl44_r2j6K_bytes:
         I8[] [83,112,97,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.505322247 UTC

[section ""data" . lvl45_r2j6L_closure" {
     lvl45_r2j6L_closure:
         const lvl45_r2j6L_info;
         const 0;
         const 0;
         const 0;
 },
 lvl45_r2j6L_entry() //  [R1]
         { info_tbl: [(c2kU9,
                       label: lvl45_r2j6L_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kU9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kUa; else goto c2kUb;
       c2kUa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kUb: // global
           (_c2kU6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kU6::I64 == 0) goto c2kU8; else goto c2kU7;
       c2kU8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kU7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kU6::I64;
           R2 = lvl44_r2j6K_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.511250802 UTC

[section ""cstring" . lvl46_r2j6M_bytes" {
     lvl46_r2j6M_bytes:
         I8[] [76,105,110,101,83,101,112,97,114,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.514012696 UTC

[section ""data" . lvl47_r2j6N_closure" {
     lvl47_r2j6N_closure:
         const lvl47_r2j6N_info;
         const 0;
         const 0;
         const 0;
 },
 lvl47_r2j6N_entry() //  [R1]
         { info_tbl: [(c2kUq,
                       label: lvl47_r2j6N_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kUq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kUr; else goto c2kUs;
       c2kUr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kUs: // global
           (_c2kUn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kUn::I64 == 0) goto c2kUp; else goto c2kUo;
       c2kUp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kUo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kUn::I64;
           R2 = lvl46_r2j6M_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.518841545 UTC

[section ""cstring" . lvl48_r2j6O_bytes" {
     lvl48_r2j6O_bytes:
         I8[] [80,97,114,97,103,114,97,112,104,83,101,112,97,114,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.520965044 UTC

[section ""data" . lvl49_r2j6P_closure" {
     lvl49_r2j6P_closure:
         const lvl49_r2j6P_info;
         const 0;
         const 0;
         const 0;
 },
 lvl49_r2j6P_entry() //  [R1]
         { info_tbl: [(c2kUH,
                       label: lvl49_r2j6P_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kUH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kUI; else goto c2kUJ;
       c2kUI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kUJ: // global
           (_c2kUE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kUE::I64 == 0) goto c2kUG; else goto c2kUF;
       c2kUG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kUF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kUE::I64;
           R2 = lvl48_r2j6O_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.525343145 UTC

[section ""cstring" . lvl50_r2j6Q_bytes" {
     lvl50_r2j6Q_bytes:
         I8[] [67,111,110,116,114,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.528331831 UTC

[section ""data" . lvl51_r2j6R_closure" {
     lvl51_r2j6R_closure:
         const lvl51_r2j6R_info;
         const 0;
         const 0;
         const 0;
 },
 lvl51_r2j6R_entry() //  [R1]
         { info_tbl: [(c2kUY,
                       label: lvl51_r2j6R_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kUY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kUZ; else goto c2kV0;
       c2kUZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kV0: // global
           (_c2kUV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kUV::I64 == 0) goto c2kUX; else goto c2kUW;
       c2kUX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kUW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kUV::I64;
           R2 = lvl50_r2j6Q_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.534711909 UTC

[section ""cstring" . lvl52_r2j6S_bytes" {
     lvl52_r2j6S_bytes:
         I8[] [70,111,114,109,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.537722585 UTC

[section ""data" . lvl53_r2j6T_closure" {
     lvl53_r2j6T_closure:
         const lvl53_r2j6T_info;
         const 0;
         const 0;
         const 0;
 },
 lvl53_r2j6T_entry() //  [R1]
         { info_tbl: [(c2kVf,
                       label: lvl53_r2j6T_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kVf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kVg; else goto c2kVh;
       c2kVg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kVh: // global
           (_c2kVc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kVc::I64 == 0) goto c2kVe; else goto c2kVd;
       c2kVe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kVd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kVc::I64;
           R2 = lvl52_r2j6S_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.543921985 UTC

[section ""cstring" . lvl54_r2j6U_bytes" {
     lvl54_r2j6U_bytes:
         I8[] [83,117,114,114,111,103,97,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.547644244 UTC

[section ""data" . lvl55_r2j6V_closure" {
     lvl55_r2j6V_closure:
         const lvl55_r2j6V_info;
         const 0;
         const 0;
         const 0;
 },
 lvl55_r2j6V_entry() //  [R1]
         { info_tbl: [(c2kVw,
                       label: lvl55_r2j6V_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kVw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kVx; else goto c2kVy;
       c2kVx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kVy: // global
           (_c2kVt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kVt::I64 == 0) goto c2kVv; else goto c2kVu;
       c2kVv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kVu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kVt::I64;
           R2 = lvl54_r2j6U_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.552368804 UTC

[section ""cstring" . lvl56_r2j6W_bytes" {
     lvl56_r2j6W_bytes:
         I8[] [80,114,105,118,97,116,101,85,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.554408873 UTC

[section ""data" . lvl57_r2j6X_closure" {
     lvl57_r2j6X_closure:
         const lvl57_r2j6X_info;
         const 0;
         const 0;
         const 0;
 },
 lvl57_r2j6X_entry() //  [R1]
         { info_tbl: [(c2kVN,
                       label: lvl57_r2j6X_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kVN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kVO; else goto c2kVP;
       c2kVO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kVP: // global
           (_c2kVK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kVK::I64 == 0) goto c2kVM; else goto c2kVL;
       c2kVM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kVL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kVK::I64;
           R2 = lvl56_r2j6W_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.558262081 UTC

[section ""cstring" . lvl58_r2j6Y_bytes" {
     lvl58_r2j6Y_bytes:
         I8[] [78,111,116,65,115,115,105,103,110,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.560024867 UTC

[section ""data" . lvl59_r2j6Z_closure" {
     lvl59_r2j6Z_closure:
         const lvl59_r2j6Z_info;
         const 0;
         const 0;
         const 0;
 },
 lvl59_r2j6Z_entry() //  [R1]
         { info_tbl: [(c2kW4,
                       label: lvl59_r2j6Z_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kW4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kW5; else goto c2kW6;
       c2kW5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2kW6: // global
           (_c2kW1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2kW1::I64 == 0) goto c2kW3; else goto c2kW2;
       c2kW3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2kW2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2kW1::I64;
           R2 = lvl58_r2j6Y_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.565031128 UTC

[section ""data" . GHC.Unicode.$w$cshowsPrec_closure" {
     GHC.Unicode.$w$cshowsPrec_closure:
         const GHC.Unicode.$w$cshowsPrec_info;
         const 0;
 },
 GHC.Unicode.$w$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c2kWR,
                       label: GHC.Unicode.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kWR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kWS; else goto c2kWT;
       c2kWS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2kWT: // global
           I64[Sp - 16] = block_c2kWi_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2kYm; else goto c2kWj;
       u2kYm: // global
           call _c2kWi(R1) args: 0, res: 0, upd: 0;
       c2kWj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kWi() //  [R1]
         { info_tbl: [(c2kWi,
                       label: block_c2kWi_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kWi: // global
           _s2j7l::P64 = P64[Sp + 8];
           switch [0 .. 29] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto c2kWm;
               case 1 : goto c2kWn;
               case 2 : goto c2kWo;
               case 3 : goto c2kWp;
               case 4 : goto c2kWq;
               case 5 : goto c2kWr;
               case 6 : goto c2kWs;
               case 7 : goto c2kWt;
               case 8 : goto c2kWu;
               case 9 : goto c2kWv;
               case 10 : goto c2kWw;
               case 11 : goto c2kWx;
               case 12 : goto c2kWy;
               case 13 : goto c2kWz;
               case 14 : goto c2kWA;
               case 15 : goto c2kWB;
               case 16 : goto c2kWC;
               case 17 : goto c2kWD;
               case 18 : goto c2kWE;
               case 19 : goto c2kWF;
               case 20 : goto c2kWG;
               case 21 : goto c2kWH;
               case 22 : goto c2kWI;
               case 23 : goto c2kWJ;
               case 24 : goto c2kWK;
               case 25 : goto c2kWL;
               case 26 : goto c2kWM;
               case 27 : goto c2kWN;
               case 28 : goto c2kWO;
               case 29 : goto c2kWP;
           }
       c2kWP: // global
           R3 = _s2j7l::P64;
           R2 = lvl59_r2j6Z_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWO: // global
           R3 = _s2j7l::P64;
           R2 = lvl57_r2j6X_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWN: // global
           R3 = _s2j7l::P64;
           R2 = lvl55_r2j6V_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWM: // global
           R3 = _s2j7l::P64;
           R2 = lvl53_r2j6T_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWL: // global
           R3 = _s2j7l::P64;
           R2 = lvl51_r2j6R_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWK: // global
           R3 = _s2j7l::P64;
           R2 = lvl49_r2j6P_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWJ: // global
           R3 = _s2j7l::P64;
           R2 = lvl47_r2j6N_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWI: // global
           R3 = _s2j7l::P64;
           R2 = lvl45_r2j6L_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWH: // global
           R3 = _s2j7l::P64;
           R2 = lvl43_r2j6J_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWG: // global
           R3 = _s2j7l::P64;
           R2 = lvl41_r2j6H_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWF: // global
           R3 = _s2j7l::P64;
           R2 = lvl39_r2j6F_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWE: // global
           R3 = _s2j7l::P64;
           R2 = lvl37_r2j6D_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWD: // global
           R3 = _s2j7l::P64;
           R2 = lvl35_r2j6B_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWC: // global
           R3 = _s2j7l::P64;
           R2 = lvl33_r2j6z_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWB: // global
           R3 = _s2j7l::P64;
           R2 = lvl31_r2j6x_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWA: // global
           R3 = _s2j7l::P64;
           R2 = lvl29_r2j6v_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWz: // global
           R3 = _s2j7l::P64;
           R2 = lvl27_r2j6t_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWy: // global
           R3 = _s2j7l::P64;
           R2 = lvl25_r2j6r_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWx: // global
           R3 = _s2j7l::P64;
           R2 = lvl23_r2j6p_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWw: // global
           R3 = _s2j7l::P64;
           R2 = lvl21_r2j6n_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWv: // global
           R3 = _s2j7l::P64;
           R2 = lvl19_r2j6l_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWu: // global
           R3 = _s2j7l::P64;
           R2 = lvl17_r2j6j_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWt: // global
           R3 = _s2j7l::P64;
           R2 = lvl15_r2j6h_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWs: // global
           R3 = _s2j7l::P64;
           R2 = lvl13_r2j6f_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWr: // global
           R3 = _s2j7l::P64;
           R2 = lvl11_r2j6d_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWq: // global
           R3 = _s2j7l::P64;
           R2 = lvl9_r2j6b_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWp: // global
           R3 = _s2j7l::P64;
           R2 = lvl7_r2j69_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWo: // global
           R3 = _s2j7l::P64;
           R2 = lvl5_r2j67_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWn: // global
           R3 = _s2j7l::P64;
           R2 = lvl3_r2j65_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2kWm: // global
           R3 = _s2j7l::P64;
           R2 = lvl1_r2j63_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.57647736 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_closure" {
     GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_closure:
         const GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_info;
         const 0;
 },
 GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_entry() //  [R3, R4]
         { info_tbl: [(c2kYD,
                       label: GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kYD: // global
           _s2j7o::P64 = R3;
           R3 = R4;
           R2 = _s2j7o::P64;
           call GHC.Unicode.$w$cshowsPrec_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.579876028 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory1_closure" {
     GHC.Unicode.$fShowGeneralCategory1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.581963796 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_$cshow_closure" {
     GHC.Unicode.$fShowGeneralCategory_$cshow_closure:
         const GHC.Unicode.$fShowGeneralCategory_$cshow_info;
         const 0;
 },
 GHC.Unicode.$fShowGeneralCategory_$cshow_entry() //  [R2]
         { info_tbl: [(c2kYP,
                       label: GHC.Unicode.$fShowGeneralCategory_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kYP: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = R2;
           call GHC.Unicode.$w$cshowsPrec_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.585482868 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_$cshowList_closure" {
     GHC.Unicode.$fShowGeneralCategory_$cshowList_closure:
         const GHC.Unicode.$fShowGeneralCategory_$cshowList_info;
         const 0;
 },
 GHC.Unicode.$fShowGeneralCategory_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c2kZ0,
                       label: GHC.Unicode.$fShowGeneralCategory_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kZ0: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Unicode.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.588845533 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_closure" {
     GHC.Unicode.$fShowGeneralCategory_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_closure+3;
         const GHC.Unicode.$fShowGeneralCategory_$cshow_closure+1;
         const GHC.Unicode.$fShowGeneralCategory_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.59176804 UTC

[section ""data" . GHC.Unicode.$fEqGeneralCategory_$c==_closure" {
     GHC.Unicode.$fEqGeneralCategory_$c==_closure:
         const GHC.Unicode.$fEqGeneralCategory_$c==_info;
 },
 GHC.Unicode.$fEqGeneralCategory_$c==_entry() //  [R2, R3]
         { info_tbl: [(c2kZg,
                       label: GHC.Unicode.$fEqGeneralCategory_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kZg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2kZm; else goto c2kZn;
       c2kZm: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEqGeneralCategory_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2kZn: // global
           I64[Sp - 16] = block_c2kZc_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2kZH; else goto c2kZd;
       u2kZH: // global
           call _c2kZc(R1) args: 0, res: 0, upd: 0;
       c2kZd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kZc() //  [R1]
         { info_tbl: [(c2kZc,
                       label: block_c2kZc_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kZc: // global
           _s2j7w::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2kZl_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j7w::I64;
           if (R1 & 7 != 0) goto u2kZG; else goto c2kZs;
       u2kZG: // global
           call _c2kZl(R1) args: 0, res: 0, upd: 0;
       c2kZs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2kZl() //  [R1]
         { info_tbl: [(c2kZl,
                       label: block_c2kZl_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2kZl: // global
           R1 = I64[((I64[Sp + 8] == %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.599576151 UTC

[section ""data" . GHC.Unicode.$fEqGeneralCategory_$c/=_closure" {
     GHC.Unicode.$fEqGeneralCategory_$c/=_closure:
         const GHC.Unicode.$fEqGeneralCategory_$c/=_info;
 },
 GHC.Unicode.$fEqGeneralCategory_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c2l0d,
                       label: GHC.Unicode.$fEqGeneralCategory_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l0d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2l0j; else goto c2l0k;
       c2l0j: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEqGeneralCategory_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2l0k: // global
           I64[Sp - 16] = block_c2l09_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2l0I; else goto c2l0a;
       u2l0I: // global
           call _c2l09(R1) args: 0, res: 0, upd: 0;
       c2l0a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2l09() //  [R1]
         { info_tbl: [(c2l09,
                       label: block_c2l09_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l09: // global
           _s2j7D::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2l0i_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j7D::I64;
           if (R1 & 7 != 0) goto u2l0H; else goto c2l0p;
       u2l0H: // global
           call _c2l0i(R1) args: 0, res: 0, upd: 0;
       c2l0p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2l0i() //  [R1]
         { info_tbl: [(c2l0i,
                       label: block_c2l0i_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l0i: // global
           if (I64[Sp + 8] == %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) goto c2l0E; else goto c2l0D;
       c2l0E: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2l0D: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.606920048 UTC

[section ""data" . GHC.Unicode.$fEqGeneralCategory_closure" {
     GHC.Unicode.$fEqGeneralCategory_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Unicode.$fEqGeneralCategory_$c==_closure+2;
         const GHC.Unicode.$fEqGeneralCategory_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.609297358 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$ccompare_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c2l1e,
                       label: GHC.Unicode.$fOrdGeneralCategory_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l1e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2l1k; else goto c2l1l;
       c2l1k: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2l1l: // global
           I64[Sp - 16] = block_c2l1a_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2l1P; else goto c2l1b;
       u2l1P: // global
           call _c2l1a(R1) args: 0, res: 0, upd: 0;
       c2l1b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2l1a() //  [R1]
         { info_tbl: [(c2l1a,
                       label: block_c2l1a_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l1a: // global
           _s2j7K::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2l1j_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j7K::I64;
           if (R1 & 7 != 0) goto u2l1O; else goto c2l1q;
       u2l1O: // global
           call _c2l1j(R1) args: 0, res: 0, upd: 0;
       c2l1q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2l1j() //  [R1]
         { info_tbl: [(c2l1j,
                       label: block_c2l1j_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l1j: // global
           _s2j7K::I64 = I64[Sp + 8];
           _s2j7M::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           if (%MO_S_Ge_W64(_s2j7K::I64,
                            _s2j7M::I64)) goto c2l1K; else goto c2l1L;
       c2l1K: // global
           if (_s2j7K::I64 == _s2j7M::I64) goto c2l1I; else goto c2l1H;
       c2l1I: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2l1H: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2l1L: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.619109202 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c<_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c<_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c<_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c<_entry() //  [R2, R3]
         { info_tbl: [(c2l2k,
                       label: GHC.Unicode.$fOrdGeneralCategory_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l2k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2l2q; else goto c2l2r;
       c2l2q: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2l2r: // global
           I64[Sp - 16] = block_c2l2g_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2l2L; else goto c2l2h;
       u2l2L: // global
           call _c2l2g(R1) args: 0, res: 0, upd: 0;
       c2l2h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2l2g() //  [R1]
         { info_tbl: [(c2l2g,
                       label: block_c2l2g_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l2g: // global
           _s2j7S::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2l2p_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j7S::I64;
           if (R1 & 7 != 0) goto u2l2K; else goto c2l2w;
       u2l2K: // global
           call _c2l2p(R1) args: 0, res: 0, upd: 0;
       c2l2w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2l2p() //  [R1]
         { info_tbl: [(c2l2p,
                       label: block_c2l2p_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l2p: // global
           R1 = I64[(%MO_S_Lt_W64(I64[Sp + 8],
                                  %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.627844066 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c<=_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c<=_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c<=_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c2l3h,
                       label: GHC.Unicode.$fOrdGeneralCategory_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l3h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2l3n; else goto c2l3o;
       c2l3n: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2l3o: // global
           I64[Sp - 16] = block_c2l3d_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2l3M; else goto c2l3e;
       u2l3M: // global
           call _c2l3d(R1) args: 0, res: 0, upd: 0;
       c2l3e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2l3d() //  [R1]
         { info_tbl: [(c2l3d,
                       label: block_c2l3d_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l3d: // global
           _s2j7Z::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2l3m_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j7Z::I64;
           if (R1 & 7 != 0) goto u2l3L; else goto c2l3t;
       u2l3L: // global
           call _c2l3m(R1) args: 0, res: 0, upd: 0;
       c2l3t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2l3m() //  [R1]
         { info_tbl: [(c2l3m,
                       label: block_c2l3m_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l3m: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2l3H; else goto c2l3I;
       c2l3H: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2l3I: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.636062601 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$cmax_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$cmax_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$cmax_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c2l4h,
                       label: GHC.Unicode.$fOrdGeneralCategory_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l4h: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2l4n; else goto c2l4o;
       c2l4n: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2l4o: // global
           I64[Sp - 24] = block_c2l4d_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2l4M; else goto c2l4e;
       u2l4M: // global
           call _c2l4d(R1) args: 0, res: 0, upd: 0;
       c2l4e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2l4d() //  [R1]
         { info_tbl: [(c2l4d,
                       label: block_c2l4d_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l4d: // global
           _s2j86::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp - 8] = block_c2l4m_info;
           R1 = P64[Sp + 8];
           I64[Sp] = _s2j86::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2l4L; else goto c2l4t;
       u2l4L: // global
           call _c2l4m(R1) args: 0, res: 0, upd: 0;
       c2l4t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2l4m() //  [R1]
         { info_tbl: [(c2l4m,
                       label: block_c2l4m_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l4m: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2l4H; else goto c2l4I;
       c2l4H: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2l4I: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.645538721 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c>=_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c>=_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c>=_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c2l5j,
                       label: GHC.Unicode.$fOrdGeneralCategory_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l5j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2l5p; else goto c2l5q;
       c2l5p: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2l5q: // global
           I64[Sp - 16] = block_c2l5f_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2l5O; else goto c2l5g;
       u2l5O: // global
           call _c2l5f(R1) args: 0, res: 0, upd: 0;
       c2l5g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2l5f() //  [R1]
         { info_tbl: [(c2l5f,
                       label: block_c2l5f_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l5f: // global
           _s2j8d::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2l5o_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j8d::I64;
           if (R1 & 7 != 0) goto u2l5N; else goto c2l5v;
       u2l5N: // global
           call _c2l5o(R1) args: 0, res: 0, upd: 0;
       c2l5v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2l5o() //  [R1]
         { info_tbl: [(c2l5o,
                       label: block_c2l5o_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l5o: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2l5J; else goto c2l5K;
       c2l5J: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2l5K: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.653463294 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c>_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c>_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c>_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c>_entry() //  [R2, R3]
         { info_tbl: [(c2l6j,
                       label: GHC.Unicode.$fOrdGeneralCategory_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l6j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2l6p; else goto c2l6q;
       c2l6p: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2l6q: // global
           I64[Sp - 16] = block_c2l6f_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2l6K; else goto c2l6g;
       u2l6K: // global
           call _c2l6f(R1) args: 0, res: 0, upd: 0;
       c2l6g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2l6f() //  [R1]
         { info_tbl: [(c2l6f,
                       label: block_c2l6f_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l6f: // global
           _s2j8k::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2l6o_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j8k::I64;
           if (R1 & 7 != 0) goto u2l6J; else goto c2l6v;
       u2l6J: // global
           call _c2l6o(R1) args: 0, res: 0, upd: 0;
       c2l6v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2l6o() //  [R1]
         { info_tbl: [(c2l6o,
                       label: block_c2l6o_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l6o: // global
           R1 = I64[(%MO_S_Lt_W64(I64[Sp + 8],
                                  %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.661516464 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$cmin_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$cmin_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$cmin_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c2l7g,
                       label: GHC.Unicode.$fOrdGeneralCategory_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l7g: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2l7m; else goto c2l7n;
       c2l7m: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2l7n: // global
           I64[Sp - 24] = block_c2l7c_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2l7L; else goto c2l7d;
       u2l7L: // global
           call _c2l7c(R1) args: 0, res: 0, upd: 0;
       c2l7d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2l7c() //  [R1]
         { info_tbl: [(c2l7c,
                       label: block_c2l7c_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l7c: // global
           _s2j8r::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp - 8] = block_c2l7l_info;
           R1 = P64[Sp + 8];
           I64[Sp] = _s2j8r::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2l7K; else goto c2l7s;
       u2l7K: // global
           call _c2l7l(R1) args: 0, res: 0, upd: 0;
       c2l7s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2l7l() //  [R1]
         { info_tbl: [(c2l7l,
                       label: block_c2l7l_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l7l: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2l7G; else goto c2l7H;
       c2l7G: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2l7H: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.669594259 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_closure" {
     GHC.Unicode.$fOrdGeneralCategory_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Unicode.$fEqGeneralCategory_closure+1;
         const GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c<_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c<=_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c>_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c>=_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$cmax_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.671985621 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_info;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_entry() //  [R2]
         { info_tbl: [(c2l8j,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l8j: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2l8p; else goto c2l8q;
       c2l8p: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2l8q: // global
           I64[Sp - 8] = block_c2l8f_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2l8B; else goto c2l8g;
       u2l8B: // global
           call _c2l8f(R1) args: 0, res: 0, upd: 0;
       c2l8g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2l8f() //  [R1]
         { info_tbl: [(c2l8f,
                       label: block_c2l8f_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l8f: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2l8m() args: 0, res: 0, upd: 0;
     }
 },
 _c2l8m() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l8m: // global
           Hp = Hp + 16;
           _s2j8x::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2l8w; else goto c2l8v;
       c2l8w: // global
           HpAlloc = 16;
           I64[Sp] = block_c2l8l_info;
           R1 = _s2j8x::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2l8v: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2j8x::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2l8l() //  [R1]
         { info_tbl: [(c2l8l,
                       label: block_c2l8l_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l8l: // global
           I64[Sp] = R1;
           call _c2l8m() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.680468646 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_entry() //  [R2, R3]
         { info_tbl: [(c2l93,
                       label: GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l93: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2l9q; else goto c2l9r;
       c2l9q: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2l9r: // global
           I64[Sp - 16] = block_c2l90_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2l9I; else goto c2l91;
       u2l9I: // global
           call _c2l90(R1) args: 0, res: 0, upd: 0;
       c2l91: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2l90() //  [R1]
         { info_tbl: [(c2l90,
                       label: block_c2l90_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l90: // global
           I64[Sp] = block_c2l96_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u2l9H; else goto c2l97;
       u2l9H: // global
           call _c2l96(R1) args: 0, res: 0, upd: 0;
       c2l97: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2l96() //  [R1]
         { info_tbl: [(c2l96,
                       label: block_c2l96_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l96: // global
           _s2j8E::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2l9e_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j8E::I64;
           if (R1 & 7 != 0) goto u2l9J; else goto c2l9f;
       u2l9J: // global
           call _c2l9e(R1) args: 0, res: 0, upd: 0;
       c2l9f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2l9e() //  [R1]
         { info_tbl: [(c2l9e,
                       label: block_c2l9e_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l9e: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2l9k() args: 0, res: 0, upd: 0;
     }
 },
 _c2l9k() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l9k: // global
           Hp = Hp + 16;
           _s2j8G::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2l9C; else goto c2l9B;
       c2l9C: // global
           HpAlloc = 16;
           I64[Sp] = block_c2l9j_info;
           R1 = _s2j8G::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2l9B: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2j8G::I64 - I64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2l9j() //  [R1]
         { info_tbl: [(c2l9j,
                       label: block_c2l9j_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2l9j: // global
           I64[Sp] = R1;
           call _c2l9k() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.694359243 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cinRange_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cinRange_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cinRange_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$cinRange_entry() //  [R2, R3]
         { info_tbl: [(c2lap,
                       label: GHC.Unicode.$fIxGeneralCategory_$cinRange_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lap: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2laJ; else goto c2laK;
       c2laJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2laK: // global
           I64[Sp - 16] = block_c2lam_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2lbh; else goto c2lan;
       u2lbh: // global
           call _c2lam(R1) args: 0, res: 0, upd: 0;
       c2lan: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lam() //  [R1]
         { info_tbl: [(c2lam,
                       label: block_c2lam_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lam: // global
           I64[Sp - 8] = block_c2las_info;
           _s2j8M::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2j8M::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lbg; else goto c2lat;
       u2lbg: // global
           call _c2las(R1) args: 0, res: 0, upd: 0;
       c2lat: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2las() //  [R1]
         { info_tbl: [(c2las,
                       label: block_c2las_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2las: // global
           _s2j8O::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2laA_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j8O::I64;
           if (R1 & 7 != 0) goto u2lbi; else goto c2laB;
       u2lbi: // global
           call _c2laA(R1) args: 0, res: 0, upd: 0;
       c2laB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2laA() //  [R1]
         { info_tbl: [(c2laA,
                       label: block_c2laA_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2laA: // global
           _s2j8Q::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2laI_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2j8Q::I64;
           if (R1 & 7 != 0) goto u2lbj; else goto c2laU;
       u2lbj: // global
           call _c2laI(R1) args: 0, res: 0, upd: 0;
       c2laU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2laI() //  [R1]
         { info_tbl: [(c2laI,
                       label: block_c2laI_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2laI: // global
           _s2j8S::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           if (%MO_S_Lt_W64(_s2j8S::I64,
                            I64[Sp + 8])) goto c2lb8; else goto c2lb9;
       c2lb8: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lb9: // global
           R1 = I64[(%MO_S_Le_W64(_s2j8S::I64,
                                  I64[Sp + 16]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.708083914 UTC

[section ""data" . GHC.Unicode.$w$crange_closure" {
     GHC.Unicode.$w$crange_closure:
         const GHC.Unicode.$w$crange_info;
 },
 sat_s2j97_entry() //  [R1]
         { info_tbl: [(c2lct,
                       label: sat_s2j97_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lct: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lcu; else goto c2lcv;
       c2lcu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lcv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2j93::I64 = I64[R1 + 32];
           if (_s2j93::I64 == I64[R1 + 24]) goto c2lcs; else goto c2lcr;
       c2lcs: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c2lcr: // global
           R2 = _s2j93::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s2j92_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2j94_entry() //  [R1]
         { info_tbl: [(c2lcC,
                       label: sat_s2j94_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lcC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lcD; else goto c2lcE;
       c2lcD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lcE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_s2j92_entry() //  [R1, R2]
         { info_tbl: [(c2lcG,
                       label: go_s2j92_info
                       rep:HeapRep 1 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lcG: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2lcK; else goto c2lcJ;
       c2lcK: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lcJ: // global
           _s2j90::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2j97_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2j90::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2j94_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Unicode.$w$crange_entry() //  [R2, R3]
         { info_tbl: [(c2lcL,
                       label: GHC.Unicode.$w$crange_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lcL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lcM; else goto c2lcN;
       c2lcM: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$w$crange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2lcN: // global
           I64[Sp - 16] = block_c2lbW_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2ld8; else goto c2lbX;
       u2ld8: // global
           call _c2lbW(R1) args: 0, res: 0, upd: 0;
       c2lbX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lbW() //  [R1]
         { info_tbl: [(c2lbW,
                       label: block_c2lbW_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lbW: // global
           _s2j8Y::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2lc4_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j8Y::I64;
           if (R1 & 7 != 0) goto u2ld5; else goto c2lc5;
       u2ld5: // global
           call _c2lc4(R1) args: 0, res: 0, upd: 0;
       c2lc5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lc4() //  [R1]
         { info_tbl: [(c2lc4,
                       label: block_c2lc4_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lc4: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2lca() args: 0, res: 0, upd: 0;
     }
 },
 _c2lca() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lca: // global
           Hp = Hp + 16;
           _s2j90::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2lcX; else goto c2lcW;
       c2lcX: // global
           HpAlloc = 16;
           I64[Sp] = block_c2lc9_info;
           R1 = _s2j90::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2lcW: // global
           _s2j8Y::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s2j8Y::I64,
                            _s2j90::I64)) goto c2lcZ; else goto c2ld0;
       c2lcZ: // global
           I64[Hp - 8] = go_s2j92_info;
           I64[Hp] = _s2j90::I64;
           R2 = _s2j8Y::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call go_s2j92_entry(R2, R1) args: 8, res: 0, upd: 8;
       c2ld0: // global
           Hp = Hp - 16;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2lc9() //  [R1]
         { info_tbl: [(c2lc9,
                       label: block_c2lc9_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lc9: // global
           I64[Sp] = R1;
           call _c2lca() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.725421919 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$crange_closure" {
     GHC.Unicode.$fIxGeneralCategory_$crange_closure:
         const GHC.Unicode.$fIxGeneralCategory_$crange_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$crange_entry() //  [R2]
         { info_tbl: [(c2ldX,
                       label: GHC.Unicode.$fIxGeneralCategory_$crange_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ldX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2ldY; else goto c2ldZ;
       c2ldY: // global
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2ldZ: // global
           I64[Sp - 8] = block_c2ldU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2le3; else goto c2ldV;
       u2le3: // global
           call _c2ldU(R1) args: 0, res: 0, upd: 0;
       c2ldV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2ldU() //  [R1]
         { info_tbl: [(c2ldU,
                       label: block_c2ldU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ldU: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$w$crange_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.731370704 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure" {
     GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure:
         const GHC.Unicode.$fIxGeneralCategory_$crangeSize_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$crangeSize_entry() //  [R2]
         { info_tbl: [(c2lek,
                       label: GHC.Unicode.$fIxGeneralCategory_$crangeSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lek: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lew; else goto c2lex;
       c2lew: // global
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lex: // global
           I64[Sp - 8] = block_c2leh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lf9; else goto c2lei;
       u2lf9: // global
           call _c2leh(R1) args: 0, res: 0, upd: 0;
       c2lei: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2leh() //  [R1]
         { info_tbl: [(c2leh,
                       label: block_c2leh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2leh: // global
           I64[Sp - 8] = block_c2len_info;
           _s2j9f::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2j9f::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lf8; else goto c2leo;
       u2lf8: // global
           call _c2len(R1) args: 0, res: 0, upd: 0;
       c2leo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2len() //  [R1]
         { info_tbl: [(c2len,
                       label: block_c2len_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2len: // global
           _s2j9h::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2lev_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j9h::I64;
           if (R1 & 7 != 0) goto u2lfa; else goto c2leD;
       u2lfa: // global
           call _c2lev(R1) args: 0, res: 0, upd: 0;
       c2leD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lev() //  [R1]
         { info_tbl: [(c2lev,
                       label: block_c2lev_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lev: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2leL() args: 0, res: 0, upd: 0;
     }
 },
 _c2leL() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2leL: // global
           Hp = Hp + 16;
           _s2j9j::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2leP; else goto c2leO;
       c2leP: // global
           HpAlloc = 16;
           I64[Sp] = block_c2leK_info;
           R1 = _s2j9j::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2leO: // global
           _s2j9h::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(_s2j9j::I64,
                            _s2j9h::I64)) goto c2leT; else goto c2lf3;
       c2leT: // global
           Hp = Hp - 16;
           R1 = GHC.Unicode.$fShowGeneralCategory1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lf3: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2j9j::I64 - _s2j9h::I64 + 1;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2leK() //  [R1]
         { info_tbl: [(c2leK,
                       label: block_c2leK_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2leK: // global
           I64[Sp] = R1;
           call _c2leL() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.745520346 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_entry() //  [R2]
         { info_tbl: [(c2lfS,
                       label: GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lfS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lgi; else goto c2lgj;
       c2lgi: // global
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lgj: // global
           I64[Sp - 8] = block_c2lfP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lgA; else goto c2lfQ;
       u2lgA: // global
           call _c2lfP(R1) args: 0, res: 0, upd: 0;
       c2lfQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lfP() //  [R1]
         { info_tbl: [(c2lfP,
                       label: block_c2lfP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lfP: // global
           I64[Sp - 8] = block_c2lfV_info;
           _s2j9q::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2j9q::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lgz; else goto c2lfW;
       u2lgz: // global
           call _c2lfV(R1) args: 0, res: 0, upd: 0;
       c2lfW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lfV() //  [R1]
         { info_tbl: [(c2lfV,
                       label: block_c2lfV_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lfV: // global
           _s2j9s::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2lg3_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j9s::I64;
           if (R1 & 7 != 0) goto u2lgB; else goto c2lg4;
       u2lgB: // global
           call _c2lg3(R1) args: 0, res: 0, upd: 0;
       c2lg4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lg3() //  [R1]
         { info_tbl: [(c2lg3,
                       label: block_c2lg3_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lg3: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2lg9() args: 0, res: 0, upd: 0;
     }
 },
 _c2lg9() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lg9: // global
           Hp = Hp + 16;
           _s2j9u::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2lgu; else goto c2lgt;
       c2lgu: // global
           HpAlloc = 16;
           I64[Sp] = block_c2lg8_info;
           R1 = _s2j9u::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2lgt: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2j9u::I64 - I64[Sp + 8] + 1;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2lg8() //  [R1]
         { info_tbl: [(c2lg8,
                       label: block_c2lg8_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lg8: // global
           I64[Sp] = R1;
           call _c2lg9() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.758477982 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cindex_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cindex_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cindex_info;
         const 0;
 },
 GHC.Unicode.$fIxGeneralCategory_$cindex_entry() //  [R2, R3]
         { info_tbl: [(c2lhi,
                       label: GHC.Unicode.$fIxGeneralCategory_$cindex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lhi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2lhC; else goto c2lhD;
       c2lhC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2lhD: // global
           I64[Sp - 16] = block_c2lhf_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2lio; else goto c2lhg;
       u2lio: // global
           call _c2lhf(R1) args: 0, res: 0, upd: 0;
       c2lhg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lhf() //  [R1]
         { info_tbl: [(c2lhf,
                       label: block_c2lhf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lhf: // global
           I64[Sp - 8] = block_c2lhl_info;
           _s2j9B::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2j9B::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lin; else goto c2lhm;
       u2lin: // global
           call _c2lhl(R1) args: 0, res: 0, upd: 0;
       c2lhm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lhl() //  [R1]
         { info_tbl: [(c2lhl,
                       label: block_c2lhl_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lhl: // global
           _s2j9D::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2lht_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2j9D::I64;
           if (R1 & 7 != 0) goto u2lip; else goto c2lhu;
       u2lip: // global
           call _c2lht(R1) args: 0, res: 0, upd: 0;
       c2lhu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lht() //  [R1]
         { info_tbl: [(c2lht,
                       label: block_c2lht_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lht: // global
           _s2j9F::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2lhB_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2j9F::I64;
           if (R1 & 7 != 0) goto u2liq; else goto c2lhN;
       u2liq: // global
           call _c2lhB(R1) args: 0, res: 0, upd: 0;
       c2lhN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lhB() //  [R1]
         { info_tbl: [(c2lhB,
                       label: block_c2lhB_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lhB: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2lhV() args: 0, res: 0, upd: 0;
     }
 },
 _c2lhV() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lhV: // global
           Hp = Hp + 16;
           _s2j9H::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2lhZ; else goto c2lhY;
       c2lhZ: // global
           HpAlloc = 16;
           I64[Sp] = block_c2lhU_info;
           R1 = _s2j9H::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2lhY: // global
           _s2j9D::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(_s2j9H::I64,
                            _s2j9D::I64)) goto c2li9; else goto c2lih;
       c2lih: // global
           if (%MO_S_Gt_W64(_s2j9H::I64,
                            I64[Sp + 16])) goto c2li9; else goto c2lig;
       c2li9: // global
           Hp = Hp - 16;
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2lig: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2j9H::I64 - _s2j9D::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2lhU() //  [R1]
         { info_tbl: [(c2lhU,
                       label: block_c2lhU_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lhU: // global
           I64[Sp] = R1;
           call _c2lhV() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.774101117 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_closure" {
     GHC.Unicode.$fIxGeneralCategory_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Unicode.$fOrdGeneralCategory_closure+1;
         const GHC.Unicode.$fIxGeneralCategory_$crange_closure+1;
         const GHC.Unicode.$fIxGeneralCategory_$cindex_closure+2;
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure+2;
         const GHC.Unicode.$fIxGeneralCategory_$cinRange_closure+2;
         const GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure+1;
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.776373555 UTC

[section ""cstring" . GHC.Unicode.$trModule4_bytes" {
     GHC.Unicode.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.77843192 UTC

[section ""data" . loc_r2j70_closure" {
     loc_r2j70_closure:
         const loc_r2j70_info;
         const 0;
         const 0;
         const 0;
 },
 loc_r2j70_entry() //  [R1]
         { info_tbl: [(c2ljf,
                       label: loc_r2j70_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ljf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ljg; else goto c2ljh;
       c2ljg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ljh: // global
           (_c2ljc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2ljc::I64 == 0) goto c2lje; else goto c2ljd;
       c2lje: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2ljd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2ljc::I64;
           R2 = GHC.Unicode.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.783353855 UTC

[section ""cstring" . GHC.Unicode.$trModule2_bytes" {
     GHC.Unicode.$trModule2_bytes:
         I8[] [71,72,67,46,85,110,105,99,111,100,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.785671669 UTC

[section ""data" . loc1_r2j71_closure" {
     loc1_r2j71_closure:
         const loc1_r2j71_info;
         const 0;
         const 0;
         const 0;
 },
 loc1_r2j71_entry() //  [R1]
         { info_tbl: [(c2ljw,
                       label: loc1_r2j71_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ljw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ljx; else goto c2ljy;
       c2ljx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ljy: // global
           (_c2ljt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2ljt::I64 == 0) goto c2ljv; else goto c2lju;
       c2ljv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2lju: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2ljt::I64;
           R2 = GHC.Unicode.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.789946415 UTC

[section ""cstring" . loc2_r2j72_bytes" {
     loc2_r2j72_bytes:
         I8[] [46,47,71,72,67,47,85,110,105,99,111,100,101,46,104,115]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.791975279 UTC

[section ""data" . loc3_r2j73_closure" {
     loc3_r2j73_closure:
         const loc3_r2j73_info;
         const 0;
         const 0;
         const 0;
 },
 loc3_r2j73_entry() //  [R1]
         { info_tbl: [(c2ljN,
                       label: loc3_r2j73_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ljN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ljO; else goto c2ljP;
       c2ljO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ljP: // global
           (_c2ljK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2ljK::I64 == 0) goto c2ljM; else goto c2ljL;
       c2ljM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2ljL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2ljK::I64;
           R2 = loc2_r2j72_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.796215463 UTC

[section ""data" . loc4_r2j74_closure" {
     loc4_r2j74_closure:
         const GHC.Types.I#_con_info;
         const 135;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.798219658 UTC

[section ""data" . loc5_r2j75_closure" {
     loc5_r2j75_closure:
         const GHC.Types.I#_con_info;
         const 20;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.799949252 UTC

[section ""data" . loc6_r2j76_closure" {
     loc6_r2j76_closure:
         const GHC.Types.I#_con_info;
         const 24;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.80166454 UTC

[section ""cstring" . $dIP_r2j77_bytes" {
     $dIP_r2j77_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.804089676 UTC

[section ""data" . $dIP1_r2j78_closure" {
     $dIP1_r2j78_closure:
         const $dIP1_r2j78_info;
         const 0;
         const 0;
         const 0;
 },
 $dIP1_r2j78_entry() //  [R1]
         { info_tbl: [(c2lk7,
                       label: $dIP1_r2j78_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lk7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lk8; else goto c2lk9;
       c2lk8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lk9: // global
           (_c2lk4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2lk4::I64 == 0) goto c2lk6; else goto c2lk5;
       c2lk6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2lk5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2lk4::I64;
           R2 = $dIP_r2j77_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.808689857 UTC

[section ""data" . $dIP2_r2j79_closure" {
     $dIP2_r2j79_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const loc_r2j70_closure;
         const loc1_r2j71_closure;
         const loc3_r2j73_closure;
         const loc4_r2j74_closure+1;
         const loc5_r2j75_closure+1;
         const loc4_r2j74_closure+1;
         const loc6_r2j76_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.810913749 UTC

[section ""data" . $dIP3_r2j7a_closure" {
     $dIP3_r2j7a_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const $dIP1_r2j78_closure;
         const $dIP2_r2j79_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.812667607 UTC

[section ""cstring" . lvl60_r2j7b_bytes" {
     lvl60_r2j7b_bytes:
         I8[] [41,32,105,115,32,111,117,116,115,105,100,101,32,111,102,32,101,110,117,109,101,114,97,116,105,111,110,39,115,32,114,97,110,103,101,32,40,48,44]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.814387866 UTC

[section ""cstring" . lvl61_r2j7c_bytes" {
     lvl61_r2j7c_bytes:
         I8[] [41]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.816355741 UTC

[section ""data" . lvl62_r2j7d_closure" {
     lvl62_r2j7d_closure:
         const lvl62_r2j7d_info;
         const 0;
         const 0;
         const 0;
 },
 lvl62_r2j7d_entry() //  [R1]
         { info_tbl: [(c2lkr,
                       label: lvl62_r2j7d_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lkr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lks; else goto c2lkt;
       c2lks: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lkt: // global
           (_c2lko::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2lko::I64 == 0) goto c2lkq; else goto c2lkp;
       c2lkq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2lkp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2lko::I64;
           R2 = lvl61_r2j7c_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.820681049 UTC

[section ""data" . lvl63_r2j7e_closure" {
     lvl63_r2j7e_closure:
         const lvl63_r2j7e_info;
         const 0;
         const 0;
         const 0;
 },
 lvl63_r2j7e_entry() //  [R1]
         { info_tbl: [(c2lkK,
                       label: lvl63_r2j7e_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lkK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2lkL; else goto c2lkM;
       c2lkL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lkM: // global
           (_c2lkE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2lkE::I64 == 0) goto c2lkG; else goto c2lkF;
       c2lkG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2lkF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2lkE::I64;
           I64[Sp - 24] = block_c2lkH_info;
           R4 = lvl62_r2j7d_closure;
           R3 = 29;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c2lkH() //  [R1, R2]
         { info_tbl: [(c2lkH,
                       label: block_c2lkH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lkH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2lkP; else goto c2lkO;
       c2lkP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c2lkO: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.828057082 UTC

[section ""data" . lvl64_r2j7f_closure" {
     lvl64_r2j7f_closure:
         const lvl64_r2j7f_info;
         const 0;
         const 0;
         const 0;
 },
 lvl64_r2j7f_entry() //  [R1]
         { info_tbl: [(c2ll7,
                       label: lvl64_r2j7f_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ll7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ll8; else goto c2ll9;
       c2ll8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ll9: // global
           (_c2ll4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2ll4::I64 == 0) goto c2ll6; else goto c2ll5;
       c2ll6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2ll5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2ll4::I64;
           R3 = lvl63_r2j7e_closure;
           R2 = lvl60_r2j7b_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.832396207 UTC

[section ""cstring" . lvl65_r2j7g_bytes" {
     lvl65_r2j7g_bytes:
         I8[] [116,111,69,110,117,109,123,71,101,110,101,114,97,108,67,97,116,101,103,111,114,121,125,58,32,116,97,103,32,40]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.834974619 UTC

[section ""data" . GHC.Unicode.$wlvl_closure" {
     GHC.Unicode.$wlvl_closure:
         const GHC.Unicode.$wlvl_info;
         const 0;
 },
 sat_s2j9S_entry() //  [R1]
         { info_tbl: [(c2llt,
                       label: sat_s2j9S_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2llt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2llu; else goto c2llv;
       c2llu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2llv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c2llq_info;
           R4 = lvl64_r2j7f_closure;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c2llq() //  [R1, R2]
         { info_tbl: [(c2llq,
                       label: block_c2llq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2llq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2lly; else goto c2llx;
       c2lly: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c2llx: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Unicode.$wlvl_entry() //  [R2]
         { info_tbl: [(c2llB,
                       label: GHC.Unicode.$wlvl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2llB: // global
           _s2j9O::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c2llC; else goto c2llD;
       c2llD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2llF; else goto c2llE;
       c2llF: // global
           HpAlloc = 24;
           goto c2llC;
       c2llC: // global
           R2 = _s2j9O::I64;
           R1 = GHC.Unicode.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2llE: // global
           I64[Hp - 16] = sat_s2j9S_info;
           I64[Hp] = _s2j9O::I64;
           I64[Sp - 8] = block_c2llz_info;
           R3 = Hp - 16;
           R2 = lvl65_r2j7g_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c2llz() //  [R1]
         { info_tbl: [(c2llz,
                       label: block_c2llz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2llz: // global
           R3 = R1;
           R2 = $dIP3_r2j7a_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.845056654 UTC

[section ""data" . GHC.Unicode.$w$ctoEnum_closure" {
     GHC.Unicode.$w$ctoEnum_closure:
         const GHC.Unicode.$w$ctoEnum_info;
         const 0;
 },
 GHC.Unicode.$w$ctoEnum_entry() //  [R2]
         { info_tbl: [(c2lm8,
                       label: GHC.Unicode.$w$ctoEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lm8: // global
           _s2j9U::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto c2lmg; else goto c2lm7;
       c2lm7: // global
           if (%MO_S_Gt_W64(_s2j9U::I64, 29)) goto c2lmg; else goto c2lmh;
       c2lmg: // global
           R2 = _s2j9U::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2lmh: // global
           R1 = I64[(_s2j9U::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.849140456 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_info;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_entry() //  [R2]
         { info_tbl: [(c2lmv,
                       label: GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lmv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lmw; else goto c2lmx;
       c2lmw: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lmx: // global
           I64[Sp - 8] = block_c2lms_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lmB; else goto c2lmt;
       u2lmB: // global
           call _c2lms(R1) args: 0, res: 0, upd: 0;
       c2lmt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lms() //  [R1]
         { info_tbl: [(c2lms,
                       label: block_c2lms_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lms: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$w$ctoEnum_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.856194476 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_go_closure" {
     GHC.Unicode.$fEnumGeneralCategory_go_closure:
         const GHC.Unicode.$fEnumGeneralCategory_go_info;
 },
 sat_s2ja4_entry() //  [R1]
         { info_tbl: [(c2lmX,
                       label: sat_s2ja4_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lmX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lmY; else goto c2lmZ;
       c2lmY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lmZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2ja2::I64 = I64[R1 + 16];
           if (_s2ja2::I64 != 29) goto c2lmV; else goto c2lmW;
       c2lmV: // global
           R2 = _s2ja2::I64 + 1;
           Sp = Sp - 16;
           call GHC.Unicode.$fEnumGeneralCategory_go_entry(R2) args: 24, res: 0, upd: 24;
       c2lmW: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2ja1_entry() //  [R1]
         { info_tbl: [(c2ln6,
                       label: sat_s2ja1_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ln6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ln7; else goto c2ln8;
       c2ln7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ln8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Unicode.$fEnumGeneralCategory_go_entry() //  [R2]
         { info_tbl: [(c2lna,
                       label: GHC.Unicode.$fEnumGeneralCategory_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lna: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c2lne; else goto c2lnd;
       c2lne: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lnd: // global
           I64[Hp - 64] = sat_s2ja4_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2ja1_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.864945672 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_info;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_entry() //  [R2]
         { info_tbl: [(c2lnF,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lnF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lnG; else goto c2lnH;
       c2lnG: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lnH: // global
           I64[Sp - 8] = block_c2lnB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lnW; else goto c2lnC;
       u2lnW: // global
           call _c2lnB(R1) args: 0, res: 0, upd: 0;
       c2lnC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lnB() //  [R1]
         { info_tbl: [(c2lnB,
                       label: block_c2lnB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lnB: // global
           _s2ja7::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           if (%MO_S_Le_W64(_s2ja7::I64, 29)) goto c2lnT; else goto c2lnU;
       c2lnT: // global
           R2 = _s2ja7::I64;
           Sp = Sp + 8;
           call GHC.Unicode.$fEnumGeneralCategory_go_entry(R2) args: 8, res: 0, upd: 8;
       c2lnU: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.877906207 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_info;
 },
 sat_s2jaq_entry() //  [R1]
         { info_tbl: [(c2lp1,
                       label: sat_s2jaq_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lp1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lp2; else goto c2lp3;
       c2lp2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lp3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s2jal_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jao_entry() //  [R1]
         { info_tbl: [(c2lp8,
                       label: sat_s2jao_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lp8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lp9; else goto c2lpa;
       c2lp9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lpa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jar_entry() //  [R1]
         { info_tbl: [(c2lpg,
                       label: sat_s2jar_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lpg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lph; else goto c2lpi;
       c2lph: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lpi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s2jal_entry() //  [R1, R2]
         { info_tbl: [(c2lpm,
                       label: go_dn_s2jal_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lpm: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2lpq; else goto c2lpp;
       c2lpq: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lpp: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c2lpk; else goto c2lpl;
       c2lpk: // global
           _s2jaj::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jaq_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jaj::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jao_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lpl: // global
           I64[Hp - 80] = sat_s2jar_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2lps::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2lps::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2jas_entry() //  [R1]
         { info_tbl: [(c2lpt,
                       label: sat_s2jas_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lpt: // global
           _s2jas::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2lpu; else goto c2lpv;
       c2lpv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2lpx; else goto c2lpw;
       c2lpx: // global
           HpAlloc = 24;
           goto c2lpu;
       c2lpu: // global
           R1 = _s2jas::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lpw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jas::P64;
           _s2jae::I64 = I64[_s2jas::P64 + 24];
           _s2jaj::I64 = _s2jae::I64 - I64[_s2jas::P64 + 16];
           I64[Hp - 16] = go_dn_s2jal_info;
           I64[Hp - 8] = _s2jaj::I64;
           I64[Hp] = 29 - _s2jaj::I64;
           R2 = _s2jae::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s2jal_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jai_entry() //  [R1]
         { info_tbl: [(c2lpC,
                       label: sat_s2jai_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lpC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lpD; else goto c2lpE;
       c2lpD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lpE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jau_entry() //  [R1]
         { info_tbl: [(c2lpN,
                       label: sat_s2jau_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lpN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lpO; else goto c2lpP;
       c2lpO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lpP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaE_entry() //  [R1]
         { info_tbl: [(c2lqi,
                       label: sat_s2jaE_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lqi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lqj; else goto c2lqk;
       c2lqj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lqk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s2jaz_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaC_entry() //  [R1]
         { info_tbl: [(c2lqp,
                       label: sat_s2jaC_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lqp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lqq; else goto c2lqr;
       c2lqq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lqr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaF_entry() //  [R1]
         { info_tbl: [(c2lqx,
                       label: sat_s2jaF_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lqx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lqy; else goto c2lqz;
       c2lqy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lqz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s2jaz_entry() //  [R1, R2]
         { info_tbl: [(c2lqD,
                       label: go_up_s2jaz_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lqD: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2lqH; else goto c2lqG;
       c2lqH: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lqG: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c2lqB; else goto c2lqC;
       c2lqB: // global
           _s2jax::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jaE_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jax::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jaC_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lqC: // global
           I64[Hp - 80] = sat_s2jaF_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2lqJ::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2lqJ::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2jaG_entry() //  [R1]
         { info_tbl: [(c2lqK,
                       label: sat_s2jaG_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lqK: // global
           _s2jaG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2lqL; else goto c2lqM;
       c2lqM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2lqO; else goto c2lqN;
       c2lqO: // global
           HpAlloc = 24;
           goto c2lqL;
       c2lqL: // global
           R1 = _s2jaG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lqN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jaG::P64;
           _s2jae::I64 = I64[_s2jaG::P64 + 24];
           _s2jax::I64 = _s2jae::I64 - I64[_s2jaG::P64 + 16];
           I64[Hp - 16] = go_up_s2jaz_info;
           I64[Hp - 8] = _s2jax::I64;
           I64[Hp] = 29 - _s2jax::I64;
           R2 = _s2jae::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s2jaz_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaw_entry() //  [R1]
         { info_tbl: [(c2lqT,
                       label: sat_s2jaw_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lqT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lqU; else goto c2lqV;
       c2lqU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lqV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaI_entry() //  [R1]
         { info_tbl: [(c2lr4,
                       label: sat_s2jaI_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lr4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lr5; else goto c2lr6;
       c2lr5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lr6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaT_entry() //  [R1]
         { info_tbl: [(c2lrC,
                       label: sat_s2jaT_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lrC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lrD; else goto c2lrE;
       c2lrD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lrE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s2jaO_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaR_entry() //  [R1]
         { info_tbl: [(c2lrJ,
                       label: sat_s2jaR_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lrJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lrK; else goto c2lrL;
       c2lrK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lrL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaU_entry() //  [R1]
         { info_tbl: [(c2lrR,
                       label: sat_s2jaU_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lrR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lrS; else goto c2lrT;
       c2lrS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lrT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s2jaO_entry() //  [R1, R2]
         { info_tbl: [(c2lrX,
                       label: go_dn_s2jaO_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lrX: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2ls1; else goto c2ls0;
       c2ls1: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2ls0: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c2lrV; else goto c2lrW;
       c2lrV: // global
           _s2jaM::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jaT_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jaM::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jaR_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lrW: // global
           I64[Hp - 80] = sat_s2jaU_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2ls3::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2ls3::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2jaV_entry() //  [R1]
         { info_tbl: [(c2ls4,
                       label: sat_s2jaV_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ls4: // global
           _s2jaV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2ls5; else goto c2ls6;
       c2ls6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2ls8; else goto c2ls7;
       c2ls8: // global
           HpAlloc = 24;
           goto c2ls5;
       c2ls5: // global
           R1 = _s2jaV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ls7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jaV::P64;
           _s2jae::I64 = I64[_s2jaV::P64 + 24];
           _s2jaM::I64 = _s2jae::I64 - I64[_s2jaV::P64 + 16];
           I64[Hp - 16] = go_dn_s2jaO_info;
           I64[Hp - 8] = _s2jaM::I64;
           I64[Hp] = 0 - _s2jaM::I64;
           R2 = _s2jae::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s2jaO_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaL_entry() //  [R1]
         { info_tbl: [(c2lsd,
                       label: sat_s2jaL_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lsd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lse; else goto c2lsf;
       c2lse: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lsf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaX_entry() //  [R1]
         { info_tbl: [(c2lso,
                       label: sat_s2jaX_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lso: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lsp; else goto c2lsq;
       c2lsp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lsq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jb7_entry() //  [R1]
         { info_tbl: [(c2lsT,
                       label: sat_s2jb7_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lsT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lsU; else goto c2lsV;
       c2lsU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lsV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s2jb2_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jb5_entry() //  [R1]
         { info_tbl: [(c2lt0,
                       label: sat_s2jb5_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lt0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lt1; else goto c2lt2;
       c2lt1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lt2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jb8_entry() //  [R1]
         { info_tbl: [(c2lt8,
                       label: sat_s2jb8_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lt8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lt9; else goto c2lta;
       c2lt9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lta: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s2jb2_entry() //  [R1, R2]
         { info_tbl: [(c2lte,
                       label: go_up_s2jb2_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lte: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2lti; else goto c2lth;
       c2lti: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lth: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c2ltc; else goto c2ltd;
       c2ltc: // global
           _s2jb0::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jb7_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jb0::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jb5_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2ltd: // global
           I64[Hp - 80] = sat_s2jb8_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2ltk::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2ltk::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2jb9_entry() //  [R1]
         { info_tbl: [(c2ltl,
                       label: sat_s2jb9_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ltl: // global
           _s2jb9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2ltm; else goto c2ltn;
       c2ltn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2ltp; else goto c2lto;
       c2ltp: // global
           HpAlloc = 24;
           goto c2ltm;
       c2ltm: // global
           R1 = _s2jb9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lto: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jb9::P64;
           _s2jae::I64 = I64[_s2jb9::P64 + 24];
           _s2jb0::I64 = _s2jae::I64 - I64[_s2jb9::P64 + 16];
           I64[Hp - 16] = go_up_s2jb2_info;
           I64[Hp - 8] = _s2jb0::I64;
           I64[Hp] = 0 - _s2jb0::I64;
           R2 = _s2jae::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s2jb2_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jaZ_entry() //  [R1]
         { info_tbl: [(c2ltu,
                       label: sat_s2jaZ_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ltu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ltv; else goto c2ltw;
       c2ltv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ltw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jbb_entry() //  [R1]
         { info_tbl: [(c2ltF,
                       label: sat_s2jbb_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ltF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ltG; else goto c2ltH;
       c2ltG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ltH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c2ltI,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ltI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ltJ; else goto c2ltK;
       c2ltJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2ltK: // global
           I64[Sp - 16] = block_c2loe_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2luH; else goto c2lof;
       u2luH: // global
           call _c2loe(R1) args: 0, res: 0, upd: 0;
       c2lof: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2loe() //  [R1]
         { info_tbl: [(c2loe,
                       label: block_c2loe_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2loe: // global
           _s2jac::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2lom_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2jac::I64;
           if (R1 & 7 != 0) goto u2luE; else goto c2lon;
       u2luE: // global
           call _c2lom(R1) args: 0, res: 0, upd: 0;
       c2lon: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lom() //  [R1]
         { info_tbl: [(c2lom,
                       label: block_c2lom_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lom: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2los() args: 0, res: 0, upd: 0;
     }
 },
 _c2los() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2los: // global
           Hp = Hp + 80;
           _s2jae::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2ltU; else goto c2ltT;
       c2ltU: // global
           HpAlloc = 80;
           I64[Sp] = block_c2lor_info;
           R1 = _s2jae::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2ltT: // global
           _s2jac::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s2jac::I64,
                            _s2jae::I64)) goto c2luf; else goto c2luz;
       c2luf: // global
           if (%MO_S_Lt_W64(_s2jae::I64,
                            _s2jac::I64)) goto c2lu4; else goto c2lud;
       c2lu4: // global
           if (%MO_S_Le_W64(29, _s2jae::I64)) goto c2ltX; else goto c2lu2;
       c2ltX: // global
           I64[Hp - 72] = sat_s2jas_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = _s2jae::I64;
           I64[Hp - 40] = sat_s2jai_info;
           I64[Hp - 24] = _s2jac::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lu2: // global
           if (%MO_S_Gt_W64(29, _s2jac::I64)) goto c2luw; else goto c2lu0;
       c2lu0: // global
           I64[Hp - 72] = sat_s2jau_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2ltY::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2ltY::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lud: // global
           if (%MO_S_Ge_W64(29, _s2jae::I64)) goto c2lu7; else goto c2luc;
       c2lu7: // global
           I64[Hp - 72] = sat_s2jaG_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = _s2jae::I64;
           I64[Hp - 40] = sat_s2jaw_info;
           I64[Hp - 24] = _s2jac::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2luc: // global
           if (%MO_S_Lt_W64(29, _s2jac::I64)) goto c2luw; else goto c2lua;
       c2lua: // global
           I64[Hp - 72] = sat_s2jaI_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2lu8::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2lu8::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2luz: // global
           if (%MO_S_Lt_W64(_s2jae::I64,
                            _s2jac::I64)) goto c2lup; else goto c2luy;
       c2lup: // global
           if (%MO_S_Le_W64(0, _s2jae::I64)) goto c2lui; else goto c2lun;
       c2lui: // global
           I64[Hp - 72] = sat_s2jaV_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = _s2jae::I64;
           I64[Hp - 40] = sat_s2jaL_info;
           I64[Hp - 24] = _s2jac::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lun: // global
           if (%MO_S_Gt_W64(0, _s2jac::I64)) goto c2luw; else goto c2lul;
       c2lul: // global
           I64[Hp - 72] = sat_s2jaX_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2luj::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2luj::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2luy: // global
           if (%MO_S_Ge_W64(0, _s2jae::I64)) goto c2lus; else goto c2lux;
       c2lus: // global
           I64[Hp - 72] = sat_s2jb9_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = _s2jae::I64;
           I64[Hp - 40] = sat_s2jaZ_info;
           I64[Hp - 24] = _s2jac::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lux: // global
           if (%MO_S_Lt_W64(0, _s2jac::I64)) goto c2luw; else goto c2luv;
       c2luw: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2luv: // global
           I64[Hp - 72] = sat_s2jbb_info;
           I64[Hp - 56] = _s2jac::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2lut::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2lut::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2lor() //  [R1]
         { info_tbl: [(c2lor,
                       label: block_c2lor_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lor: // global
           I64[Sp] = R1;
           call _c2los() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.956283289 UTC

[section ""data" . GHC.Unicode.$trModule3_closure" {
     GHC.Unicode.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.958441927 UTC

[section ""data" . GHC.Unicode.$trModule1_closure" {
     GHC.Unicode.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.960295146 UTC

[section ""data" . GHC.Unicode.$trModule_closure" {
     GHC.Unicode.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Unicode.$trModule3_closure+1;
         const GHC.Unicode.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.962234562 UTC

[section ""cstring" . GHC.Unicode.$tcGeneralCategory2_bytes" {
     GHC.Unicode.$tcGeneralCategory2_bytes:
         I8[] [71,101,110,101,114,97,108,67,97,116,101,103,111,114,121]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.964133242 UTC

[section ""data" . GHC.Unicode.$tcGeneralCategory1_closure" {
     GHC.Unicode.$tcGeneralCategory1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tcGeneralCategory2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.965855844 UTC

[section ""data" . GHC.Unicode.$tcGeneralCategory_closure" {
     GHC.Unicode.$tcGeneralCategory_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tcGeneralCategory1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10145990250269206894;
         const 14660269375011335890;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.967716324 UTC

[section ""data" . GHC.Unicode.$tc'ClosePunctuation1_closure" {
     GHC.Unicode.$tc'ClosePunctuation1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Unicode.$tcGeneralCategory_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.969681982 UTC

[section ""cstring" . GHC.Unicode.$tc'UppercaseLetter2_bytes" {
     GHC.Unicode.$tc'UppercaseLetter2_bytes:
         I8[] [39,85,112,112,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.971598107 UTC

[section ""data" . GHC.Unicode.$tc'UppercaseLetter1_closure" {
     GHC.Unicode.$tc'UppercaseLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'UppercaseLetter2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.974036512 UTC

[section ""data" . GHC.Unicode.$tc'UppercaseLetter_closure" {
     GHC.Unicode.$tc'UppercaseLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'UppercaseLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 14647285109492872061;
         const 14425225614845259385;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.975957988 UTC

[section ""cstring" . GHC.Unicode.$tc'LowercaseLetter2_bytes" {
     GHC.Unicode.$tc'LowercaseLetter2_bytes:
         I8[] [39,76,111,119,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.977739663 UTC

[section ""data" . GHC.Unicode.$tc'LowercaseLetter1_closure" {
     GHC.Unicode.$tc'LowercaseLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'LowercaseLetter2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.979587555 UTC

[section ""data" . GHC.Unicode.$tc'LowercaseLetter_closure" {
     GHC.Unicode.$tc'LowercaseLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'LowercaseLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 6843638521722139917;
         const 11845029203120951590;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.981682815 UTC

[section ""cstring" . GHC.Unicode.$tc'TitlecaseLetter2_bytes" {
     GHC.Unicode.$tc'TitlecaseLetter2_bytes:
         I8[] [39,84,105,116,108,101,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.983510067 UTC

[section ""data" . GHC.Unicode.$tc'TitlecaseLetter1_closure" {
     GHC.Unicode.$tc'TitlecaseLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'TitlecaseLetter2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.98544306 UTC

[section ""data" . GHC.Unicode.$tc'TitlecaseLetter_closure" {
     GHC.Unicode.$tc'TitlecaseLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'TitlecaseLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11035134207864173010;
         const 10162510539839760824;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.987453911 UTC

[section ""cstring" . GHC.Unicode.$tc'ModifierLetter2_bytes" {
     GHC.Unicode.$tc'ModifierLetter2_bytes:
         I8[] [39,77,111,100,105,102,105,101,114,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.98944835 UTC

[section ""data" . GHC.Unicode.$tc'ModifierLetter1_closure" {
     GHC.Unicode.$tc'ModifierLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ModifierLetter2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.991180968 UTC

[section ""data" . GHC.Unicode.$tc'ModifierLetter_closure" {
     GHC.Unicode.$tc'ModifierLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ModifierLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 9531845544999081993;
         const 15142721146394159202;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.993087589 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherLetter2_bytes" {
     GHC.Unicode.$tc'OtherLetter2_bytes:
         I8[] [39,79,116,104,101,114,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.995456704 UTC

[section ""data" . GHC.Unicode.$tc'OtherLetter1_closure" {
     GHC.Unicode.$tc'OtherLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherLetter2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.997120849 UTC

[section ""data" . GHC.Unicode.$tc'OtherLetter_closure" {
     GHC.Unicode.$tc'OtherLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 4852466454551376074;
         const 478150797319163725;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:02.998989473 UTC

[section ""cstring" . GHC.Unicode.$tc'NonSpacingMark2_bytes" {
     GHC.Unicode.$tc'NonSpacingMark2_bytes:
         I8[] [39,78,111,110,83,112,97,99,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.000746536 UTC

[section ""data" . GHC.Unicode.$tc'NonSpacingMark1_closure" {
     GHC.Unicode.$tc'NonSpacingMark1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'NonSpacingMark2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.003041343 UTC

[section ""data" . GHC.Unicode.$tc'NonSpacingMark_closure" {
     GHC.Unicode.$tc'NonSpacingMark_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'NonSpacingMark1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11798799283128539890;
         const 8595267121230037978;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.005081143 UTC

[section ""cstring" . GHC.Unicode.$tc'SpacingCombiningMark2_bytes" {
     GHC.Unicode.$tc'SpacingCombiningMark2_bytes:
         I8[] [39,83,112,97,99,105,110,103,67,111,109,98,105,110,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.006907086 UTC

[section ""data" . GHC.Unicode.$tc'SpacingCombiningMark1_closure" {
     GHC.Unicode.$tc'SpacingCombiningMark1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'SpacingCombiningMark2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.008654412 UTC

[section ""data" . GHC.Unicode.$tc'SpacingCombiningMark_closure" {
     GHC.Unicode.$tc'SpacingCombiningMark_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'SpacingCombiningMark1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 161806050746895686;
         const 6274417789988196957;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.010777215 UTC

[section ""cstring" . GHC.Unicode.$tc'EnclosingMark2_bytes" {
     GHC.Unicode.$tc'EnclosingMark2_bytes:
         I8[] [39,69,110,99,108,111,115,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.012537821 UTC

[section ""data" . GHC.Unicode.$tc'EnclosingMark1_closure" {
     GHC.Unicode.$tc'EnclosingMark1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'EnclosingMark2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.014763771 UTC

[section ""data" . GHC.Unicode.$tc'EnclosingMark_closure" {
     GHC.Unicode.$tc'EnclosingMark_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'EnclosingMark1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 18110486507519489617;
         const 1830565827398073667;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.017350605 UTC

[section ""cstring" . GHC.Unicode.$tc'DecimalNumber2_bytes" {
     GHC.Unicode.$tc'DecimalNumber2_bytes:
         I8[] [39,68,101,99,105,109,97,108,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.019268247 UTC

[section ""data" . GHC.Unicode.$tc'DecimalNumber1_closure" {
     GHC.Unicode.$tc'DecimalNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'DecimalNumber2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.021032841 UTC

[section ""data" . GHC.Unicode.$tc'DecimalNumber_closure" {
     GHC.Unicode.$tc'DecimalNumber_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'DecimalNumber1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 7339032513903136575;
         const 4295356444207098462;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.023083812 UTC

[section ""cstring" . GHC.Unicode.$tc'LetterNumber2_bytes" {
     GHC.Unicode.$tc'LetterNumber2_bytes:
         I8[] [39,76,101,116,116,101,114,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.024773829 UTC

[section ""data" . GHC.Unicode.$tc'LetterNumber1_closure" {
     GHC.Unicode.$tc'LetterNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'LetterNumber2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.02661917 UTC

[section ""data" . GHC.Unicode.$tc'LetterNumber_closure" {
     GHC.Unicode.$tc'LetterNumber_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'LetterNumber1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 10629256336866531923;
         const 16896950428492761972;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.028603986 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherNumber2_bytes" {
     GHC.Unicode.$tc'OtherNumber2_bytes:
         I8[] [39,79,116,104,101,114,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.030688946 UTC

[section ""data" . GHC.Unicode.$tc'OtherNumber1_closure" {
     GHC.Unicode.$tc'OtherNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherNumber2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.032449963 UTC

[section ""data" . GHC.Unicode.$tc'OtherNumber_closure" {
     GHC.Unicode.$tc'OtherNumber_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherNumber1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 10187389108931559810;
         const 2377339607923931442;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.034347287 UTC

[section ""cstring" . GHC.Unicode.$tc'ConnectorPunctuation2_bytes" {
     GHC.Unicode.$tc'ConnectorPunctuation2_bytes:
         I8[] [39,67,111,110,110,101,99,116,111,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.036032035 UTC

[section ""data" . GHC.Unicode.$tc'ConnectorPunctuation1_closure" {
     GHC.Unicode.$tc'ConnectorPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ConnectorPunctuation2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.038134825 UTC

[section ""data" . GHC.Unicode.$tc'ConnectorPunctuation_closure" {
     GHC.Unicode.$tc'ConnectorPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ConnectorPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 4917643529853318260;
         const 11665519332165151523;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.040433251 UTC

[section ""cstring" . GHC.Unicode.$tc'DashPunctuation2_bytes" {
     GHC.Unicode.$tc'DashPunctuation2_bytes:
         I8[] [39,68,97,115,104,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.042112199 UTC

[section ""data" . GHC.Unicode.$tc'DashPunctuation1_closure" {
     GHC.Unicode.$tc'DashPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'DashPunctuation2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.043813293 UTC

[section ""data" . GHC.Unicode.$tc'DashPunctuation_closure" {
     GHC.Unicode.$tc'DashPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'DashPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 10309144240368445329;
         const 13155144127162508040;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.045654506 UTC

[section ""cstring" . GHC.Unicode.$tc'OpenPunctuation2_bytes" {
     GHC.Unicode.$tc'OpenPunctuation2_bytes:
         I8[] [39,79,112,101,110,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.047245421 UTC

[section ""data" . GHC.Unicode.$tc'OpenPunctuation1_closure" {
     GHC.Unicode.$tc'OpenPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OpenPunctuation2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.049036342 UTC

[section ""data" . GHC.Unicode.$tc'OpenPunctuation_closure" {
     GHC.Unicode.$tc'OpenPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OpenPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11156540492509602203;
         const 14579738194966332373;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.051318709 UTC

[section ""cstring" . GHC.Unicode.$tc'ClosePunctuation3_bytes" {
     GHC.Unicode.$tc'ClosePunctuation3_bytes:
         I8[] [39,67,108,111,115,101,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.053003509 UTC

[section ""data" . GHC.Unicode.$tc'ClosePunctuation2_closure" {
     GHC.Unicode.$tc'ClosePunctuation2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ClosePunctuation3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.054752131 UTC

[section ""data" . GHC.Unicode.$tc'ClosePunctuation_closure" {
     GHC.Unicode.$tc'ClosePunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation2_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 2732552725164352280;
         const 2123618155201944931;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.05663216 UTC

[section ""cstring" . GHC.Unicode.$tc'InitialQuote2_bytes" {
     GHC.Unicode.$tc'InitialQuote2_bytes:
         I8[] [39,73,110,105,116,105,97,108,81,117,111,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.058432072 UTC

[section ""data" . GHC.Unicode.$tc'InitialQuote1_closure" {
     GHC.Unicode.$tc'InitialQuote1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'InitialQuote2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.060622909 UTC

[section ""data" . GHC.Unicode.$tc'InitialQuote_closure" {
     GHC.Unicode.$tc'InitialQuote_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'InitialQuote1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 15372309041196331722;
         const 15030215702152843543;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.062984787 UTC

[section ""cstring" . GHC.Unicode.$tc'FinalQuote2_bytes" {
     GHC.Unicode.$tc'FinalQuote2_bytes:
         I8[] [39,70,105,110,97,108,81,117,111,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.064618604 UTC

[section ""data" . GHC.Unicode.$tc'FinalQuote1_closure" {
     GHC.Unicode.$tc'FinalQuote1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'FinalQuote2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.066329428 UTC

[section ""data" . GHC.Unicode.$tc'FinalQuote_closure" {
     GHC.Unicode.$tc'FinalQuote_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'FinalQuote1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 7492133048483711520;
         const 4486297505861009288;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.068071334 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherPunctuation2_bytes" {
     GHC.Unicode.$tc'OtherPunctuation2_bytes:
         I8[] [39,79,116,104,101,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.069951353 UTC

[section ""data" . GHC.Unicode.$tc'OtherPunctuation1_closure" {
     GHC.Unicode.$tc'OtherPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherPunctuation2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.071574002 UTC

[section ""data" . GHC.Unicode.$tc'OtherPunctuation_closure" {
     GHC.Unicode.$tc'OtherPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 17526727746027692027;
         const 9970963912577062569;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.073356867 UTC

[section ""cstring" . GHC.Unicode.$tc'MathSymbol2_bytes" {
     GHC.Unicode.$tc'MathSymbol2_bytes:
         I8[] [39,77,97,116,104,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.075037649 UTC

[section ""data" . GHC.Unicode.$tc'MathSymbol1_closure" {
     GHC.Unicode.$tc'MathSymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'MathSymbol2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.076750392 UTC

[section ""data" . GHC.Unicode.$tc'MathSymbol_closure" {
     GHC.Unicode.$tc'MathSymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'MathSymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 4306295684901311676;
         const 14195098983421669147;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.078646585 UTC

[section ""cstring" . GHC.Unicode.$tc'CurrencySymbol2_bytes" {
     GHC.Unicode.$tc'CurrencySymbol2_bytes:
         I8[] [39,67,117,114,114,101,110,99,121,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.081148578 UTC

[section ""data" . GHC.Unicode.$tc'CurrencySymbol1_closure" {
     GHC.Unicode.$tc'CurrencySymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'CurrencySymbol2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.083088039 UTC

[section ""data" . GHC.Unicode.$tc'CurrencySymbol_closure" {
     GHC.Unicode.$tc'CurrencySymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'CurrencySymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 150101909358894799;
         const 4247883766619991310;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.084928364 UTC

[section ""cstring" . GHC.Unicode.$tc'ModifierSymbol2_bytes" {
     GHC.Unicode.$tc'ModifierSymbol2_bytes:
         I8[] [39,77,111,100,105,102,105,101,114,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.086795922 UTC

[section ""data" . GHC.Unicode.$tc'ModifierSymbol1_closure" {
     GHC.Unicode.$tc'ModifierSymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ModifierSymbol2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.088568271 UTC

[section ""data" . GHC.Unicode.$tc'ModifierSymbol_closure" {
     GHC.Unicode.$tc'ModifierSymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ModifierSymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 17930136738185325280;
         const 9680003641195432205;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.090581133 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherSymbol2_bytes" {
     GHC.Unicode.$tc'OtherSymbol2_bytes:
         I8[] [39,79,116,104,101,114,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.092363094 UTC

[section ""data" . GHC.Unicode.$tc'OtherSymbol1_closure" {
     GHC.Unicode.$tc'OtherSymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherSymbol2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.094201277 UTC

[section ""data" . GHC.Unicode.$tc'OtherSymbol_closure" {
     GHC.Unicode.$tc'OtherSymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherSymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11720563220218392367;
         const 765393478666748433;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.096180971 UTC

[section ""cstring" . GHC.Unicode.$tc'Space2_bytes" {
     GHC.Unicode.$tc'Space2_bytes:
         I8[] [39,83,112,97,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.098068633 UTC

[section ""data" . GHC.Unicode.$tc'Space1_closure" {
     GHC.Unicode.$tc'Space1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Space2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.099935751 UTC

[section ""data" . GHC.Unicode.$tc'Space_closure" {
     GHC.Unicode.$tc'Space_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Space1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 13451262004661357021;
         const 7623263649021992415;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.102503006 UTC

[section ""cstring" . GHC.Unicode.$tc'LineSeparator2_bytes" {
     GHC.Unicode.$tc'LineSeparator2_bytes:
         I8[] [39,76,105,110,101,83,101,112,97,114,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.104261683 UTC

[section ""data" . GHC.Unicode.$tc'LineSeparator1_closure" {
     GHC.Unicode.$tc'LineSeparator1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'LineSeparator2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.106062774 UTC

[section ""data" . GHC.Unicode.$tc'LineSeparator_closure" {
     GHC.Unicode.$tc'LineSeparator_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'LineSeparator1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 3777504190602031786;
         const 16534792546094157357;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.10793309 UTC

[section ""cstring" . GHC.Unicode.$tc'ParagraphSeparator2_bytes" {
     GHC.Unicode.$tc'ParagraphSeparator2_bytes:
         I8[] [39,80,97,114,97,103,114,97,112,104,83,101,112,97,114,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.110437791 UTC

[section ""data" . GHC.Unicode.$tc'ParagraphSeparator1_closure" {
     GHC.Unicode.$tc'ParagraphSeparator1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ParagraphSeparator2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.112388601 UTC

[section ""data" . GHC.Unicode.$tc'ParagraphSeparator_closure" {
     GHC.Unicode.$tc'ParagraphSeparator_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ParagraphSeparator1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 1259977240315406014;
         const 6836752952671088565;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.114800563 UTC

[section ""cstring" . GHC.Unicode.$tc'Control2_bytes" {
     GHC.Unicode.$tc'Control2_bytes:
         I8[] [39,67,111,110,116,114,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.116558465 UTC

[section ""data" . GHC.Unicode.$tc'Control1_closure" {
     GHC.Unicode.$tc'Control1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Control2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.118327457 UTC

[section ""data" . GHC.Unicode.$tc'Control_closure" {
     GHC.Unicode.$tc'Control_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Control1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 3769799789009110362;
         const 7129109849289868145;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.120175543 UTC

[section ""cstring" . GHC.Unicode.$tc'Format2_bytes" {
     GHC.Unicode.$tc'Format2_bytes:
         I8[] [39,70,111,114,109,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.122021474 UTC

[section ""data" . GHC.Unicode.$tc'Format1_closure" {
     GHC.Unicode.$tc'Format1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Format2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.124480707 UTC

[section ""data" . GHC.Unicode.$tc'Format_closure" {
     GHC.Unicode.$tc'Format_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Format1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 15516392160505082493;
         const 8582194312248021938;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.126503161 UTC

[section ""cstring" . GHC.Unicode.$tc'Surrogate2_bytes" {
     GHC.Unicode.$tc'Surrogate2_bytes:
         I8[] [39,83,117,114,114,111,103,97,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.128263667 UTC

[section ""data" . GHC.Unicode.$tc'Surrogate1_closure" {
     GHC.Unicode.$tc'Surrogate1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Surrogate2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.132136036 UTC

[section ""data" . GHC.Unicode.$tc'Surrogate_closure" {
     GHC.Unicode.$tc'Surrogate_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Surrogate1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 8891432866311764671;
         const 15154926068870472193;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.134165999 UTC

[section ""cstring" . GHC.Unicode.$tc'PrivateUse2_bytes" {
     GHC.Unicode.$tc'PrivateUse2_bytes:
         I8[] [39,80,114,105,118,97,116,101,85,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.135917488 UTC

[section ""data" . GHC.Unicode.$tc'PrivateUse1_closure" {
     GHC.Unicode.$tc'PrivateUse1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'PrivateUse2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.137675684 UTC

[section ""data" . GHC.Unicode.$tc'PrivateUse_closure" {
     GHC.Unicode.$tc'PrivateUse_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'PrivateUse1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 9277443220957795657;
         const 16819524490051355354;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.139483062 UTC

[section ""cstring" . GHC.Unicode.$tc'NotAssigned2_bytes" {
     GHC.Unicode.$tc'NotAssigned2_bytes:
         I8[] [39,78,111,116,65,115,115,105,103,110,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.14122754 UTC

[section ""data" . GHC.Unicode.$tc'NotAssigned1_closure" {
     GHC.Unicode.$tc'NotAssigned1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'NotAssigned2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.142934082 UTC

[section ""data" . GHC.Unicode.$tc'NotAssigned_closure" {
     GHC.Unicode.$tc'NotAssigned_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'NotAssigned1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 6894305772705953782;
         const 14217837899895516928;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.14562849 UTC

[section ""data" . GHC.Unicode.toLower_closure" {
     GHC.Unicode.toLower_closure:
         const GHC.Unicode.toLower_info;
         const 0;
 },
 GHC.Unicode.toLower_entry() //  [R2]
         { info_tbl: [(c2lA2,
                       label: GHC.Unicode.toLower_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lA2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lA3; else goto c2lA4;
       c2lA3: // global
           R2 = R2;
           R1 = GHC.Unicode.toLower_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lA4: // global
           I64[Sp - 8] = block_c2lzZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lAt; else goto c2lA0;
       u2lAt: // global
           call _c2lzZ(R1) args: 0, res: 0, upd: 0;
       c2lA0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lzZ() //  [R1]
         { info_tbl: [(c2lzZ,
                       label: block_c2lzZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lzZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2lA9; else goto c2lA8;
       c2lA9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2lA8: // global
           (_s2jbj::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towlower(I64[R1 + 7]);
           if (_s2jbj::I64 > 1114111) goto c2lAl; else goto c2lAs;
       c2lAl: // global
           Hp = Hp - 16;
           R2 = _s2jbj::I64;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2lAs: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s2jbj::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.153836337 UTC

[section ""data" . GHC.Unicode.toUpper_closure" {
     GHC.Unicode.toUpper_closure:
         const GHC.Unicode.toUpper_info;
         const 0;
 },
 GHC.Unicode.toUpper_entry() //  [R2]
         { info_tbl: [(c2lAL,
                       label: GHC.Unicode.toUpper_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lAL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lAM; else goto c2lAN;
       c2lAM: // global
           R2 = R2;
           R1 = GHC.Unicode.toUpper_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lAN: // global
           I64[Sp - 8] = block_c2lAI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lBc; else goto c2lAJ;
       u2lBc: // global
           call _c2lAI(R1) args: 0, res: 0, upd: 0;
       c2lAJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lAI() //  [R1]
         { info_tbl: [(c2lAI,
                       label: block_c2lAI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lAI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2lAS; else goto c2lAR;
       c2lAS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2lAR: // global
           (_s2jbu::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towupper(I64[R1 + 7]);
           if (_s2jbu::I64 > 1114111) goto c2lB4; else goto c2lBb;
       c2lB4: // global
           Hp = Hp - 16;
           R2 = _s2jbu::I64;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2lBb: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s2jbu::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.160358483 UTC

[section ""data" . GHC.Unicode.toTitle_closure" {
     GHC.Unicode.toTitle_closure:
         const GHC.Unicode.toTitle_info;
         const 0;
 },
 GHC.Unicode.toTitle_entry() //  [R2]
         { info_tbl: [(c2lBu,
                       label: GHC.Unicode.toTitle_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lBu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lBv; else goto c2lBw;
       c2lBv: // global
           R2 = R2;
           R1 = GHC.Unicode.toTitle_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lBw: // global
           I64[Sp - 8] = block_c2lBr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lBV; else goto c2lBs;
       u2lBV: // global
           call _c2lBr(R1) args: 0, res: 0, upd: 0;
       c2lBs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lBr() //  [R1]
         { info_tbl: [(c2lBr,
                       label: block_c2lBr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lBr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2lBB; else goto c2lBA;
       c2lBB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2lBA: // global
           (_s2jbF::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towtitle(I64[R1 + 7]);
           if (_s2jbF::I64 > 1114111) goto c2lBN; else goto c2lBU;
       c2lBN: // global
           Hp = Hp - 16;
           R2 = _s2jbF::I64;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2lBU: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s2jbF::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.166594954 UTC

[section ""data" . GHC.Unicode.wgencat_closure" {
     GHC.Unicode.wgencat_closure:
         const GHC.Unicode.wgencat_info;
 },
 GHC.Unicode.wgencat_entry() //  [R2]
         { info_tbl: [(c2lCd,
                       label: GHC.Unicode.wgencat_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lCd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lCj; else goto c2lCk;
       c2lCj: // global
           R2 = R2;
           R1 = GHC.Unicode.wgencat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lCk: // global
           I64[Sp - 8] = block_c2lCa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lCo; else goto c2lCb;
       u2lCo: // global
           call _c2lCa(R1) args: 0, res: 0, upd: 0;
       c2lCb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lCa() //  [R1]
         { info_tbl: [(c2lCa,
                       label: block_c2lCa_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lCa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2lCn; else goto c2lCm;
       c2lCn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2lCm: // global
           (_s2jbP::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2jbP::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.173214966 UTC

[section ""data" . GHC.Unicode.isAsciiUpper_closure" {
     GHC.Unicode.isAsciiUpper_closure:
         const GHC.Unicode.isAsciiUpper_info;
 },
 GHC.Unicode.isAsciiUpper_entry() //  [R2]
         { info_tbl: [(c2lCG,
                       label: GHC.Unicode.isAsciiUpper_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lCG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lCH; else goto c2lCI;
       c2lCH: // global
           R2 = R2;
           R1 = GHC.Unicode.isAsciiUpper_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lCI: // global
           I64[Sp - 8] = block_c2lCD_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lCU; else goto c2lCE;
       u2lCU: // global
           call _c2lCD(R1) args: 0, res: 0, upd: 0;
       c2lCE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lCD() //  [R1]
         { info_tbl: [(c2lCD,
                       label: block_c2lCD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lCD: // global
           _s2jbS::I64 = I64[R1 + 7];
           if (_s2jbS::I64 < 65) goto c2lCP; else goto c2lCQ;
       c2lCP: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lCQ: // global
           R1 = I64[((_s2jbS::I64 <= 90) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.179345425 UTC

[section ""data" . GHC.Unicode.isAsciiLower_closure" {
     GHC.Unicode.isAsciiLower_closure:
         const GHC.Unicode.isAsciiLower_info;
 },
 GHC.Unicode.isAsciiLower_entry() //  [R2]
         { info_tbl: [(c2lDf,
                       label: GHC.Unicode.isAsciiLower_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lDf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lDg; else goto c2lDh;
       c2lDg: // global
           R2 = R2;
           R1 = GHC.Unicode.isAsciiLower_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lDh: // global
           I64[Sp - 8] = block_c2lDc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lDt; else goto c2lDd;
       u2lDt: // global
           call _c2lDc(R1) args: 0, res: 0, upd: 0;
       c2lDd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lDc() //  [R1]
         { info_tbl: [(c2lDc,
                       label: block_c2lDc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lDc: // global
           _s2jbX::I64 = I64[R1 + 7];
           if (_s2jbX::I64 < 97) goto c2lDo; else goto c2lDp;
       c2lDo: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lDp: // global
           R1 = I64[((_s2jbX::I64 <= 122) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.18519576 UTC

[section ""data" . GHC.Unicode.isLatin1_closure" {
     GHC.Unicode.isLatin1_closure:
         const GHC.Unicode.isLatin1_info;
 },
 GHC.Unicode.isLatin1_entry() //  [R2]
         { info_tbl: [(c2lDO,
                       label: GHC.Unicode.isLatin1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lDO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lDP; else goto c2lDQ;
       c2lDP: // global
           R2 = R2;
           R1 = GHC.Unicode.isLatin1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lDQ: // global
           I64[Sp - 8] = block_c2lDL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lDV; else goto c2lDM;
       u2lDV: // global
           call _c2lDL(R1) args: 0, res: 0, upd: 0;
       c2lDM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lDL() //  [R1]
         { info_tbl: [(c2lDL,
                       label: block_c2lDL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lDL: // global
           R1 = I64[((I64[R1 + 7] <= 255) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.191234268 UTC

[section ""data" . GHC.Unicode.isAscii_closure" {
     GHC.Unicode.isAscii_closure:
         const GHC.Unicode.isAscii_info;
 },
 GHC.Unicode.isAscii_entry() //  [R2]
         { info_tbl: [(c2lEf,
                       label: GHC.Unicode.isAscii_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lEf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lEg; else goto c2lEh;
       c2lEg: // global
           R2 = R2;
           R1 = GHC.Unicode.isAscii_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lEh: // global
           I64[Sp - 8] = block_c2lEc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lEm; else goto c2lEd;
       u2lEm: // global
           call _c2lEc(R1) args: 0, res: 0, upd: 0;
       c2lEd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lEc() //  [R1]
         { info_tbl: [(c2lEc,
                       label: block_c2lEc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lEc: // global
           R1 = I64[((I64[R1 + 7] < 128) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.19757099 UTC

[section ""data" . GHC.Unicode.isOctDigit_closure" {
     GHC.Unicode.isOctDigit_closure:
         const GHC.Unicode.isOctDigit_info;
 },
 GHC.Unicode.isOctDigit_entry() //  [R2]
         { info_tbl: [(c2lEG,
                       label: GHC.Unicode.isOctDigit_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lEG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lEH; else goto c2lEI;
       c2lEH: // global
           R2 = R2;
           R1 = GHC.Unicode.isOctDigit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lEI: // global
           I64[Sp - 8] = block_c2lED_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lEW; else goto c2lEE;
       u2lEW: // global
           call _c2lED(R1) args: 0, res: 0, upd: 0;
       c2lEE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lED() //  [R1]
         { info_tbl: [(c2lED,
                       label: block_c2lED_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lED: // global
           R1 = I64[((I64[R1 + 7] - 48 <= 7) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.203447838 UTC

[section ""data" . GHC.Unicode.isDigit_closure" {
     GHC.Unicode.isDigit_closure:
         const GHC.Unicode.isDigit_info;
 },
 GHC.Unicode.isDigit_entry() //  [R2]
         { info_tbl: [(c2lFi,
                       label: GHC.Unicode.isDigit_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lFi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lFj; else goto c2lFk;
       c2lFj: // global
           R2 = R2;
           R1 = GHC.Unicode.isDigit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lFk: // global
           I64[Sp - 8] = block_c2lFf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lFy; else goto c2lFg;
       u2lFy: // global
           call _c2lFf(R1) args: 0, res: 0, upd: 0;
       c2lFg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lFf() //  [R1]
         { info_tbl: [(c2lFf,
                       label: block_c2lFf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lFf: // global
           R1 = I64[((I64[R1 + 7] - 48 <= 9) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.209529355 UTC

[section ""data" . GHC.Unicode.isHexDigit_closure" {
     GHC.Unicode.isHexDigit_closure:
         const GHC.Unicode.isHexDigit_info;
 },
 GHC.Unicode.isHexDigit_entry() //  [R2]
         { info_tbl: [(c2lFU,
                       label: GHC.Unicode.isHexDigit_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lFU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lFV; else goto c2lFW;
       c2lFV: // global
           R2 = R2;
           R1 = GHC.Unicode.isHexDigit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lFW: // global
           I64[Sp - 8] = block_c2lFR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lGE; else goto c2lFS;
       u2lGE: // global
           call _c2lFR(R1) args: 0, res: 0, upd: 0;
       c2lFS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lFR() //  [R1]
         { info_tbl: [(c2lFR,
                       label: block_c2lFR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lFR: // global
           _s2jco::I64 = I64[R1 + 7];
           if ((_s2jco::I64 + -48) <= 9) goto c2lGs; else goto c2lGr;
       c2lGr: // global
           if ((_s2jco::I64 + -65) <= 5) goto c2lGs; else goto c2lGo;
       c2lGs: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lGo: // global
           R1 = I64[(((_s2jco::I64 + -97) <= 5) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.21593563 UTC

[section ""data" . GHC.Unicode.isLower_closure" {
     GHC.Unicode.isLower_closure:
         const GHC.Unicode.isLower_info;
 },
 GHC.Unicode.isLower_entry() //  [R2]
         { info_tbl: [(c2lH2,
                       label: GHC.Unicode.isLower_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lH2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lH3; else goto c2lH4;
       c2lH3: // global
           R2 = R2;
           R1 = GHC.Unicode.isLower_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lH4: // global
           I64[Sp - 8] = block_c2lGZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lHh; else goto c2lH0;
       u2lHh: // global
           call _c2lGZ(R1) args: 0, res: 0, upd: 0;
       c2lH0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lGZ() //  [R1]
         { info_tbl: [(c2lGZ,
                       label: block_c2lGZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lGZ: // global
           (_s2jcI::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswlower(I64[R1 + 7]);
           if (_s2jcI::I64 == 0) goto c2lHg; else goto c2lHf;
       c2lHg: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lHf: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.222039728 UTC

[section ""cstring" . lvl66_r2j7h_bytes" {
     lvl66_r2j7h_bytes:
         I8[] [115,117,99,99,123,71,101,110,101,114,97,108,67,97,116,101,103,111,114,121,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,115,117,99,99,39,32,111,102,32,108,97,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.224073878 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory2_closure" {
     GHC.Unicode.$fEnumGeneralCategory2_closure:
         const GHC.Unicode.$fEnumGeneralCategory2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory2_entry() //  [R1]
         { info_tbl: [(c2lHC,
                       label: GHC.Unicode.$fEnumGeneralCategory2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lHC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2lHD; else goto c2lHE;
       c2lHD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lHE: // global
           (_c2lHx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2lHx::I64 == 0) goto c2lHz; else goto c2lHy;
       c2lHz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2lHy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2lHx::I64;
           I64[Sp - 24] = block_c2lHA_info;
           R2 = lvl66_r2j7h_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c2lHA() //  [R1]
         { info_tbl: [(c2lHA,
                       label: block_c2lHA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lHA: // global
           R3 = R1;
           R2 = $dIP3_r2j7a_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.230534568 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$csucc_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$csucc_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$csucc_info;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory_$csucc_entry() //  [R2]
         { info_tbl: [(c2lI3,
                       label: GHC.Unicode.$fEnumGeneralCategory_$csucc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lI3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lI4; else goto c2lI5;
       c2lI4: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lI5: // global
           I64[Sp - 8] = block_c2lHW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lIg; else goto c2lHX;
       u2lIg: // global
           call _c2lHW(R1) args: 0, res: 0, upd: 0;
       c2lHX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lHW() //  [R1]
         { info_tbl: [(c2lHW,
                       label: block_c2lHW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lHW: // global
           if (I32[I64[R1 - 1] + 20] == 29 :: W32) goto c2lI1; else goto c2lI0;
       c2lI1: // global
           R1 = GHC.Unicode.$fEnumGeneralCategory2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2lI0: // global
           R1 = I64[(%MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]) + 1 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.236403755 UTC

[section ""cstring" . lvl67_r2j7i_bytes" {
     lvl67_r2j7i_bytes:
         I8[] [112,114,101,100,123,71,101,110,101,114,97,108,67,97,116,101,103,111,114,121,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,112,114,101,100,39,32,111,102,32,102,105,114,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.238814796 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory1_closure" {
     GHC.Unicode.$fEnumGeneralCategory1_closure:
         const GHC.Unicode.$fEnumGeneralCategory1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory1_entry() //  [R1]
         { info_tbl: [(c2lIH,
                       label: GHC.Unicode.$fEnumGeneralCategory1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lIH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2lII; else goto c2lIJ;
       c2lII: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lIJ: // global
           (_c2lIC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2lIC::I64 == 0) goto c2lIE; else goto c2lID;
       c2lIE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2lID: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2lIC::I64;
           I64[Sp - 24] = block_c2lIF_info;
           R2 = lvl67_r2j7i_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c2lIF() //  [R1]
         { info_tbl: [(c2lIF,
                       label: block_c2lIF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lIF: // global
           R3 = R1;
           R2 = $dIP3_r2j7a_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.245124794 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cpred_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cpred_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cpred_info;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cpred_entry() //  [R2]
         { info_tbl: [(c2lJ8,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cpred_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lJ8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lJ9; else goto c2lJa;
       c2lJ9: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lJa: // global
           I64[Sp - 8] = block_c2lJ1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lJl; else goto c2lJ2;
       u2lJl: // global
           call _c2lJ1(R1) args: 0, res: 0, upd: 0;
       c2lJ2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lJ1() //  [R1]
         { info_tbl: [(c2lJ1,
                       label: block_c2lJ1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lJ1: // global
           if (I32[I64[R1 - 1] + 20] == 0 :: W32) goto c2lJ6; else goto c2lJ5;
       c2lJ6: // global
           R1 = GHC.Unicode.$fEnumGeneralCategory1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2lJ5: // global
           R1 = I64[(%MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]) - 1 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.25196056 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_info;
         const 0;
 },
 sat_s2jd8_entry() //  [R1]
         { info_tbl: [(c2lKe,
                       label: sat_s2jd8_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lKe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lKf; else goto c2lKg;
       c2lKf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lKg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jd2::I64 = I64[R1 + 32];
           if (_s2jd2::I64 == I64[R1 + 24]) goto c2lKd; else goto c2lKc;
       c2lKd: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c2lKc: // global
           R2 = _s2jd2::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s2jd1_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jd5_entry() //  [R1]
         { info_tbl: [(c2lKs,
                       label: sat_s2jd5_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lKs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lKt; else goto c2lKB;
       c2lKt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lKB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jd2::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jd2::I64, 0)) goto c2lKz; else goto c2lKr;
       c2lKr: // global
           if (%MO_S_Gt_W64(_s2jd2::I64, 29)) goto c2lKz; else goto c2lKA;
       c2lKz: // global
           R2 = _s2jd2::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2lKA: // global
           R1 = I64[(_s2jd2::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_s2jd1_entry() //  [R1, R2]
         { info_tbl: [(c2lKD,
                       label: go_s2jd1_info
                       rep:HeapRep 1 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lKD: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2lKH; else goto c2lKG;
       c2lKH: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lKG: // global
           _s2jcZ::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jd8_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jcZ::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jd5_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_entry() //  [R2, R3]
         { info_tbl: [(c2lKI,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lKI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lKJ; else goto c2lKK;
       c2lKJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2lKK: // global
           I64[Sp - 16] = block_c2lJH_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2lL5; else goto c2lJI;
       u2lL5: // global
           call _c2lJH(R1) args: 0, res: 0, upd: 0;
       c2lJI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lJH() //  [R1]
         { info_tbl: [(c2lJH,
                       label: block_c2lJH_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lJH: // global
           _s2jcX::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2lJP_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2jcX::I64;
           if (R1 & 7 != 0) goto u2lL2; else goto c2lJQ;
       u2lL2: // global
           call _c2lJP(R1) args: 0, res: 0, upd: 0;
       c2lJQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lJP() //  [R1]
         { info_tbl: [(c2lJP,
                       label: block_c2lJP_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lJP: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2lJV() args: 0, res: 0, upd: 0;
     }
 },
 _c2lJV() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lJV: // global
           Hp = Hp + 16;
           _s2jcZ::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2lKU; else goto c2lKT;
       c2lKU: // global
           HpAlloc = 16;
           I64[Sp] = block_c2lJU_info;
           R1 = _s2jcZ::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2lKT: // global
           _s2jcX::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s2jcX::I64,
                            _s2jcZ::I64)) goto c2lKW; else goto c2lKX;
       c2lKW: // global
           I64[Hp - 8] = go_s2jd1_info;
           I64[Hp] = _s2jcZ::I64;
           R2 = _s2jcX::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call go_s2jd1_entry(R2, R1) args: 8, res: 0, upd: 8;
       c2lKX: // global
           Hp = Hp - 16;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2lJU() //  [R1]
         { info_tbl: [(c2lJU,
                       label: block_c2lJU_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lJU: // global
           I64[Sp] = R1;
           call _c2lJV() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.273139827 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_info;
         const 0;
 },
 sat_s2jdw_entry() //  [R1]
         { info_tbl: [(c2lMJ,
                       label: sat_s2jdw_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lMJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lMK; else goto c2lML;
       c2lMK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lML: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s2jdp_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdu_entry() //  [R1]
         { info_tbl: [(c2lMV,
                       label: sat_s2jdu_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lMV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lMW; else goto c2lN4;
       c2lMW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lN4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdq::I64, 0)) goto c2lN2; else goto c2lMU;
       c2lMU: // global
           if (%MO_S_Gt_W64(_s2jdq::I64, 29)) goto c2lN2; else goto c2lN3;
       c2lN2: // global
           R2 = _s2jdq::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2lN3: // global
           R1 = I64[(_s2jdq::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdz_entry() //  [R1]
         { info_tbl: [(c2lNf,
                       label: sat_s2jdz_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lNf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lNg; else goto c2lNo;
       c2lNg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lNo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdq::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdq::I64, 0)) goto c2lNm; else goto c2lNe;
       c2lNe: // global
           if (%MO_S_Gt_W64(_s2jdq::I64, 29)) goto c2lNm; else goto c2lNn;
       c2lNm: // global
           R2 = _s2jdq::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2lNn: // global
           R1 = I64[(_s2jdq::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s2jdp_entry() //  [R1, R2]
         { info_tbl: [(c2lNs,
                       label: go_dn_s2jdp_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lNs: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2lNw; else goto c2lNv;
       c2lNw: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lNv: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c2lNq; else goto c2lNr;
       c2lNq: // global
           _s2jdn::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jdw_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jdn::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jdu_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lNr: // global
           I64[Hp - 80] = sat_s2jdz_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2lNy::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2lNy::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2jdA_entry() //  [R1]
         { info_tbl: [(c2lNz,
                       label: sat_s2jdA_info
                       rep:HeapRep 3 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lNz: // global
           _s2jdA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2lNA; else goto c2lNB;
       c2lNB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2lND; else goto c2lNC;
       c2lND: // global
           HpAlloc = 24;
           goto c2lNA;
       c2lNA: // global
           R1 = _s2jdA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lNC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jdA::P64;
           _s2jdf::I64 = I64[_s2jdA::P64 + 24];
           _s2jdn::I64 = _s2jdf::I64 - I64[_s2jdA::P64 + 16];
           _s2jdo::I64 = I64[_s2jdA::P64 + 32] - _s2jdn::I64;
           I64[Hp - 16] = go_dn_s2jdp_info;
           I64[Hp - 8] = _s2jdn::I64;
           I64[Hp] = _s2jdo::I64;
           R2 = _s2jdf::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s2jdp_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdm_entry() //  [R1]
         { info_tbl: [(c2lNN,
                       label: sat_s2jdm_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lNN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lNO; else goto c2lNW;
       c2lNO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lNW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdd::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdd::I64, 0)) goto c2lNU; else goto c2lNM;
       c2lNM: // global
           if (%MO_S_Gt_W64(_s2jdd::I64, 29)) goto c2lNU; else goto c2lNV;
       c2lNU: // global
           R2 = _s2jdd::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2lNV: // global
           R1 = I64[(_s2jdd::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdE_entry() //  [R1]
         { info_tbl: [(c2lOa,
                       label: sat_s2jdE_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lOa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lOb; else goto c2lOj;
       c2lOb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lOj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdd::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdd::I64, 0)) goto c2lOh; else goto c2lO9;
       c2lO9: // global
           if (%MO_S_Gt_W64(_s2jdd::I64, 29)) goto c2lOh; else goto c2lOi;
       c2lOh: // global
           R2 = _s2jdd::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2lOi: // global
           R1 = I64[(_s2jdd::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdS_entry() //  [R1]
         { info_tbl: [(c2lOM,
                       label: sat_s2jdS_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lOM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lON; else goto c2lOO;
       c2lON: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lOO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s2jdL_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdQ_entry() //  [R1]
         { info_tbl: [(c2lOY,
                       label: sat_s2jdQ_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lOY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lOZ; else goto c2lP7;
       c2lOZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lP7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdM::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdM::I64, 0)) goto c2lP5; else goto c2lOX;
       c2lOX: // global
           if (%MO_S_Gt_W64(_s2jdM::I64, 29)) goto c2lP5; else goto c2lP6;
       c2lP5: // global
           R2 = _s2jdM::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2lP6: // global
           R1 = I64[(_s2jdM::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdV_entry() //  [R1]
         { info_tbl: [(c2lPi,
                       label: sat_s2jdV_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lPi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lPj; else goto c2lPr;
       c2lPj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lPr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdM::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdM::I64, 0)) goto c2lPp; else goto c2lPh;
       c2lPh: // global
           if (%MO_S_Gt_W64(_s2jdM::I64, 29)) goto c2lPp; else goto c2lPq;
       c2lPp: // global
           R2 = _s2jdM::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2lPq: // global
           R1 = I64[(_s2jdM::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s2jdL_entry() //  [R1, R2]
         { info_tbl: [(c2lPv,
                       label: go_up_s2jdL_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lPv: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2lPz; else goto c2lPy;
       c2lPz: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lPy: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c2lPt; else goto c2lPu;
       c2lPt: // global
           _s2jdJ::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2jdS_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2jdJ::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2jdQ_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lPu: // global
           I64[Hp - 80] = sat_s2jdV_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2lPB::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2lPB::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2jdW_entry() //  [R1]
         { info_tbl: [(c2lPC,
                       label: sat_s2jdW_info
                       rep:HeapRep 3 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lPC: // global
           _s2jdW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2lPD; else goto c2lPE;
       c2lPE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2lPG; else goto c2lPF;
       c2lPG: // global
           HpAlloc = 24;
           goto c2lPD;
       c2lPD: // global
           R1 = _s2jdW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lPF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2jdW::P64;
           _s2jdf::I64 = I64[_s2jdW::P64 + 24];
           _s2jdJ::I64 = _s2jdf::I64 - I64[_s2jdW::P64 + 16];
           _s2jdK::I64 = I64[_s2jdW::P64 + 32] - _s2jdJ::I64;
           I64[Hp - 16] = go_up_s2jdL_info;
           I64[Hp - 8] = _s2jdJ::I64;
           I64[Hp] = _s2jdK::I64;
           R2 = _s2jdf::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s2jdL_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2jdI_entry() //  [R1]
         { info_tbl: [(c2lPQ,
                       label: sat_s2jdI_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lPQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lPR; else goto c2lPZ;
       c2lPR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lPZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdd::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdd::I64, 0)) goto c2lPX; else goto c2lPP;
       c2lPP: // global
           if (%MO_S_Gt_W64(_s2jdd::I64, 29)) goto c2lPX; else goto c2lPY;
       c2lPX: // global
           R2 = _s2jdd::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2lPY: // global
           R1 = I64[(_s2jdd::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2je0_entry() //  [R1]
         { info_tbl: [(c2lQd,
                       label: sat_s2je0_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lQd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2lQe; else goto c2lQm;
       c2lQe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2lQm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2jdd::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2jdd::I64, 0)) goto c2lQk; else goto c2lQc;
       c2lQc: // global
           if (%MO_S_Gt_W64(_s2jdd::I64, 29)) goto c2lQk; else goto c2lQl;
       c2lQk: // global
           R2 = _s2jdd::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2lQl: // global
           R1 = I64[(_s2jdd::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_entry() //  [R2,
                                                                 R3, R4]
         { info_tbl: [(c2lQn,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lQn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2lQo; else goto c2lQp;
       c2lQo: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2lQp: // global
           I64[Sp - 24] = block_c2lLR_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2lR6; else goto c2lLS;
       u2lR6: // global
           call _c2lLR(R1) args: 0, res: 0, upd: 0;
       c2lLS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lLR() //  [R1]
         { info_tbl: [(c2lLR,
                       label: block_c2lLR_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lLR: // global
           _s2jdd::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2lLZ_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2jdd::I64;
           if (R1 & 7 != 0) goto u2lR2; else goto c2lM0;
       u2lR2: // global
           call _c2lLZ(R1) args: 0, res: 0, upd: 0;
       c2lM0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lLZ() //  [R1]
         { info_tbl: [(c2lLZ,
                       label: block_c2lLZ_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lLZ: // global
           _s2jdf::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2lM7_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2jdf::I64;
           if (R1 & 7 != 0) goto u2lR3; else goto c2lM8;
       u2lR3: // global
           call _c2lM7(R1) args: 0, res: 0, upd: 0;
       c2lM8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lM7() //  [R1]
         { info_tbl: [(c2lM7,
                       label: block_c2lM7_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lM7: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2lMd() args: 0, res: 0, upd: 0;
     }
 },
 _c2lMd() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lMd: // global
           Hp = Hp + 88;
           _s2jdh::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2lQD; else goto c2lQC;
       c2lQD: // global
           HpAlloc = 88;
           I64[Sp] = block_c2lMc_info;
           R1 = _s2jdh::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2lQC: // global
           _s2jdd::I64 = I64[Sp + 8];
           _s2jdf::I64 = I64[Sp + 16];
           if (%MO_S_Lt_W64(_s2jdf::I64,
                            _s2jdd::I64)) goto c2lQN; else goto c2lQW;
       c2lQN: // global
           if (%MO_S_Le_W64(_s2jdh::I64,
                            _s2jdf::I64)) goto c2lQG; else goto c2lQL;
       c2lQG: // global
           I64[Hp - 80] = sat_s2jdA_info;
           I64[Hp - 64] = _s2jdd::I64;
           I64[Hp - 56] = _s2jdf::I64;
           I64[Hp - 48] = _s2jdh::I64;
           I64[Hp - 40] = sat_s2jdm_info;
           I64[Hp - 24] = _s2jdd::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lQL: // global
           if (%MO_S_Gt_W64(_s2jdh::I64,
                            _s2jdd::I64)) goto c2lQU; else goto c2lQJ;
       c2lQJ: // global
           I64[Hp - 80] = sat_s2jdE_info;
           I64[Hp - 64] = _s2jdd::I64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2lQH::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2lQH::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lQW: // global
           if (%MO_S_Ge_W64(_s2jdh::I64,
                            _s2jdf::I64)) goto c2lQQ; else goto c2lQV;
       c2lQQ: // global
           I64[Hp - 80] = sat_s2jdW_info;
           I64[Hp - 64] = _s2jdd::I64;
           I64[Hp - 56] = _s2jdf::I64;
           I64[Hp - 48] = _s2jdh::I64;
           I64[Hp - 40] = sat_s2jdI_info;
           I64[Hp - 24] = _s2jdd::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lQV: // global
           if (%MO_S_Lt_W64(_s2jdh::I64,
                            _s2jdd::I64)) goto c2lQU; else goto c2lQT;
       c2lQU: // global
           Hp = Hp - 88;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lQT: // global
           I64[Hp - 80] = sat_s2je0_info;
           I64[Hp - 64] = _s2jdd::I64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2lQR::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2lQR::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2lMc() //  [R1]
         { info_tbl: [(c2lMc,
                       label: block_c2lMc_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lMc: // global
           I64[Sp] = R1;
           call _c2lMd() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.31899153 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_closure" {
     GHC.Unicode.$fEnumGeneralCategory_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Unicode.$fEnumGeneralCategory_$csucc_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cpred_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure+2;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure+2;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.321375912 UTC

[section ""data" . GHC.Unicode.$wgeneralCategory_closure" {
     GHC.Unicode.$wgeneralCategory_closure:
         const GHC.Unicode.$wgeneralCategory_info;
         const 0;
 },
 GHC.Unicode.$wgeneralCategory_entry() //  [R2]
         { info_tbl: [(c2lTl,
                       label: GHC.Unicode.$wgeneralCategory_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lTl: // global
           (_s2je6::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(R2);
           if (%MO_S_Lt_W64(_s2je6::I64, 0)) goto c2lTA; else goto c2lTC;
       c2lTC: // global
           if (%MO_S_Gt_W64(_s2je6::I64, 29)) goto c2lTA; else goto c2lTB;
       c2lTA: // global
           R2 = _s2je6::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2lTB: // global
           R1 = I64[(_s2je6::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.325505367 UTC

[section ""data" . GHC.Unicode.generalCategory_closure" {
     GHC.Unicode.generalCategory_closure:
         const GHC.Unicode.generalCategory_info;
         const 0;
 },
 GHC.Unicode.generalCategory_entry() //  [R2]
         { info_tbl: [(c2lTQ,
                       label: GHC.Unicode.generalCategory_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lTQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lTR; else goto c2lTS;
       c2lTR: // global
           R2 = R2;
           R1 = GHC.Unicode.generalCategory_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lTS: // global
           I64[Sp - 8] = block_c2lTN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lTW; else goto c2lTO;
       u2lTW: // global
           call _c2lTN(R1) args: 0, res: 0, upd: 0;
       c2lTO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lTN() //  [R1]
         { info_tbl: [(c2lTN,
                       label: block_c2lTN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lTN: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.331568979 UTC

[section ""data" . GHC.Unicode.$wisPunctuation_closure" {
     GHC.Unicode.$wisPunctuation_closure:
         const GHC.Unicode.$wisPunctuation_info;
         const 0;
 },
 GHC.Unicode.$wisPunctuation_entry() //  [R2]
         { info_tbl: [(c2lUc,
                       label: GHC.Unicode.$wisPunctuation_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lUc: // global
           (_s2jeh::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(R2);
           if (%MO_S_Lt_W64(_s2jeh::I64, 0)) goto c2lUr; else goto c2lUF;
       c2lUF: // global
           if (%MO_S_Gt_W64(_s2jeh::I64, 29)) goto c2lUr; else goto c2lUE;
       c2lUr: // global
           R2 = _s2jeh::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2lUE: // global
           if (%MO_S_Ge_W64(_s2jeh::I64, 18)) goto c2lUw; else goto u2lUG;
       u2lUG: // global
           if (%MO_S_Lt_W64(_s2jeh::I64, 11)) goto c2lUw; else goto u2lUH;
       c2lUw: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u2lUH: // global
           switch [11 .. 17] _s2jeh::I64 {
               case 11, 12, 13, 14, 15, 16, 17 : goto c2lUD;
           }
       c2lUD: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.33596491 UTC

[section ""data" . GHC.Unicode.isPunctuation_closure" {
     GHC.Unicode.isPunctuation_closure:
         const GHC.Unicode.isPunctuation_info;
         const 0;
 },
 GHC.Unicode.isPunctuation_entry() //  [R2]
         { info_tbl: [(c2lUX,
                       label: GHC.Unicode.isPunctuation_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lUX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lUY; else goto c2lUZ;
       c2lUY: // global
           R2 = R2;
           R1 = GHC.Unicode.isPunctuation_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lUZ: // global
           I64[Sp - 8] = block_c2lUU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lV3; else goto c2lUV;
       u2lV3: // global
           call _c2lUU(R1) args: 0, res: 0, upd: 0;
       c2lUV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lUU() //  [R1]
         { info_tbl: [(c2lUU,
                       label: block_c2lUU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lUU: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wisPunctuation_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.341662763 UTC

[section ""data" . GHC.Unicode.$wisSymbol_closure" {
     GHC.Unicode.$wisSymbol_closure:
         const GHC.Unicode.$wisSymbol_info;
         const 0;
 },
 GHC.Unicode.$wisSymbol_entry() //  [R2]
         { info_tbl: [(c2lVj,
                       label: GHC.Unicode.$wisSymbol_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lVj: // global
           (_s2jev::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(R2);
           if (%MO_S_Lt_W64(_s2jev::I64, 0)) goto c2lVy; else goto c2lVJ;
       c2lVJ: // global
           if (%MO_S_Gt_W64(_s2jev::I64, 29)) goto c2lVy; else goto c2lVI;
       c2lVy: // global
           R2 = _s2jev::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2lVI: // global
           if (%MO_S_Lt_W64(_s2jev::I64, 21)) goto u2lVK; else goto u2lVM;
       u2lVK: // global
           if (%MO_S_Lt_W64(_s2jev::I64, 18)) goto c2lVD; else goto u2lVL;
       u2lVL: // global
           if (_s2jev::I64 == 19) goto c2lVH; else goto c2lVH;
       u2lVM: // global
           if (%MO_S_Lt_W64(_s2jev::I64, 22)) goto c2lVH; else goto c2lVD;
       c2lVH: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lVD: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.346219154 UTC

[section ""data" . GHC.Unicode.isSymbol_closure" {
     GHC.Unicode.isSymbol_closure:
         const GHC.Unicode.isSymbol_info;
         const 0;
 },
 GHC.Unicode.isSymbol_entry() //  [R2]
         { info_tbl: [(c2lW0,
                       label: GHC.Unicode.isSymbol_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lW0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lW1; else goto c2lW2;
       c2lW1: // global
           R2 = R2;
           R1 = GHC.Unicode.isSymbol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lW2: // global
           I64[Sp - 8] = block_c2lVX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lW6; else goto c2lVY;
       u2lW6: // global
           call _c2lVX(R1) args: 0, res: 0, upd: 0;
       c2lVY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lVX() //  [R1]
         { info_tbl: [(c2lVX,
                       label: block_c2lVX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lVX: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wisSymbol_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.352423849 UTC

[section ""data" . GHC.Unicode.isUpper_closure" {
     GHC.Unicode.isUpper_closure:
         const GHC.Unicode.isUpper_info;
 },
 GHC.Unicode.isUpper_entry() //  [R2]
         { info_tbl: [(c2lWn,
                       label: GHC.Unicode.isUpper_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lWn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lWo; else goto c2lWp;
       c2lWo: // global
           R2 = R2;
           R1 = GHC.Unicode.isUpper_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lWp: // global
           I64[Sp - 8] = block_c2lWk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lWC; else goto c2lWl;
       u2lWC: // global
           call _c2lWk(R1) args: 0, res: 0, upd: 0;
       c2lWl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lWk() //  [R1]
         { info_tbl: [(c2lWk,
                       label: block_c2lWk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lWk: // global
           (_s2jeL::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswupper(I64[R1 + 7]);
           if (_s2jeL::I64 == 0) goto c2lWB; else goto c2lWA;
       c2lWB: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lWA: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.358345163 UTC

[section ""data" . GHC.Unicode.isPrint_closure" {
     GHC.Unicode.isPrint_closure:
         const GHC.Unicode.isPrint_info;
 },
 GHC.Unicode.isPrint_entry() //  [R2]
         { info_tbl: [(c2lWV,
                       label: GHC.Unicode.isPrint_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lWV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lWW; else goto c2lWX;
       c2lWW: // global
           R2 = R2;
           R1 = GHC.Unicode.isPrint_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lWX: // global
           I64[Sp - 8] = block_c2lWS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lXa; else goto c2lWT;
       u2lXa: // global
           call _c2lWS(R1) args: 0, res: 0, upd: 0;
       c2lWT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lWS() //  [R1]
         { info_tbl: [(c2lWS,
                       label: block_c2lWS_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lWS: // global
           (_s2jeU::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswprint(I64[R1 + 7]);
           if (_s2jeU::I64 == 0) goto c2lX9; else goto c2lX8;
       c2lX9: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lX8: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.36453733 UTC

[section ""data" . GHC.Unicode.isControl_closure" {
     GHC.Unicode.isControl_closure:
         const GHC.Unicode.isControl_info;
 },
 GHC.Unicode.isControl_entry() //  [R2]
         { info_tbl: [(c2lXt,
                       label: GHC.Unicode.isControl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lXt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lXu; else goto c2lXv;
       c2lXu: // global
           R2 = R2;
           R1 = GHC.Unicode.isControl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lXv: // global
           I64[Sp - 8] = block_c2lXq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lXI; else goto c2lXr;
       u2lXI: // global
           call _c2lXq(R1) args: 0, res: 0, upd: 0;
       c2lXr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lXq() //  [R1]
         { info_tbl: [(c2lXq,
                       label: block_c2lXq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lXq: // global
           (_s2jf3::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswcntrl(I64[R1 + 7]);
           if (_s2jf3::I64 == 0) goto c2lXH; else goto c2lXG;
       c2lXH: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lXG: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.37069175 UTC

[section ""data" . GHC.Unicode.isAlphaNum_closure" {
     GHC.Unicode.isAlphaNum_closure:
         const GHC.Unicode.isAlphaNum_info;
 },
 GHC.Unicode.isAlphaNum_entry() //  [R2]
         { info_tbl: [(c2lY1,
                       label: GHC.Unicode.isAlphaNum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lY1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lY2; else goto c2lY3;
       c2lY2: // global
           R2 = R2;
           R1 = GHC.Unicode.isAlphaNum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lY3: // global
           I64[Sp - 8] = block_c2lXY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lYg; else goto c2lXZ;
       u2lYg: // global
           call _c2lXY(R1) args: 0, res: 0, upd: 0;
       c2lXZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lXY() //  [R1]
         { info_tbl: [(c2lXY,
                       label: block_c2lXY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lXY: // global
           (_s2jfc::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalnum(I64[R1 + 7]);
           if (_s2jfc::I64 == 0) goto c2lYf; else goto c2lYe;
       c2lYf: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lYe: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.377176101 UTC

[section ""data" . GHC.Unicode.isAlpha_closure" {
     GHC.Unicode.isAlpha_closure:
         const GHC.Unicode.isAlpha_info;
 },
 GHC.Unicode.isAlpha_entry() //  [R2]
         { info_tbl: [(c2lYz,
                       label: GHC.Unicode.isAlpha_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lYz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2lYA; else goto c2lYB;
       c2lYA: // global
           R2 = R2;
           R1 = GHC.Unicode.isAlpha_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2lYB: // global
           I64[Sp - 8] = block_c2lYw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2lYO; else goto c2lYx;
       u2lYO: // global
           call _c2lYw(R1) args: 0, res: 0, upd: 0;
       c2lYx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lYw() //  [R1]
         { info_tbl: [(c2lYw,
                       label: block_c2lYw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lYw: // global
           (_s2jfl::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalpha(I64[R1 + 7]);
           if (_s2jfl::I64 == 0) goto c2lYN; else goto c2lYM;
       c2lYN: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lYM: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.383304129 UTC

[section ""data" . GHC.Unicode.$wisSpace_closure" {
     GHC.Unicode.$wisSpace_closure:
         const GHC.Unicode.$wisSpace_info;
 },
 GHC.Unicode.$wisSpace_entry() //  [R2]
         { info_tbl: [(c2lZ6,
                       label: GHC.Unicode.$wisSpace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lZ6: // global
           if (R2 > 887) goto c2lZq; else goto c2lZK;
       c2lZq: // global
           (_s2jfv::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswspace(R2);
           if (_s2jfv::I64 == 0) goto c2lZC; else goto c2lZJ;
       c2lZK: // global
           if (R2 == 32) goto c2lZJ; else goto c2lZI;
       c2lZI: // global
           if ((R2 + -9) <= 4) goto c2lZJ; else goto c2lZF;
       c2lZF: // global
           if (R2 == 160) goto c2lZJ; else goto c2lZC;
       c2lZJ: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2lZC: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.387509345 UTC

[section ""data" . GHC.Unicode.isSpace_closure" {
     GHC.Unicode.isSpace_closure:
         const GHC.Unicode.isSpace_info;
 },
 GHC.Unicode.isSpace_entry() //  [R2]
         { info_tbl: [(c2lZZ,
                       label: GHC.Unicode.isSpace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lZZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2m00; else goto c2m01;
       c2m00: // global
           R2 = R2;
           R1 = GHC.Unicode.isSpace_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2m01: // global
           I64[Sp - 8] = block_c2lZW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2m05; else goto c2lZX;
       u2m05: // global
           call _c2lZW(R1) args: 0, res: 0, upd: 0;
       c2lZX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2lZW() //  [R1]
         { info_tbl: [(c2lZW,
                       label: block_c2lZW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2lZW: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wisSpace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.392759209 UTC

[section ""data" . GHC.Unicode.UppercaseLetter_closure" {
     GHC.Unicode.UppercaseLetter_closure:
         const GHC.Unicode.UppercaseLetter_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.39501689 UTC

[section ""data" . GHC.Unicode.LowercaseLetter_closure" {
     GHC.Unicode.LowercaseLetter_closure:
         const GHC.Unicode.LowercaseLetter_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.39665254 UTC

[section ""data" . GHC.Unicode.TitlecaseLetter_closure" {
     GHC.Unicode.TitlecaseLetter_closure:
         const GHC.Unicode.TitlecaseLetter_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.398343096 UTC

[section ""data" . GHC.Unicode.ModifierLetter_closure" {
     GHC.Unicode.ModifierLetter_closure:
         const GHC.Unicode.ModifierLetter_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.399958386 UTC

[section ""data" . GHC.Unicode.OtherLetter_closure" {
     GHC.Unicode.OtherLetter_closure:
         const GHC.Unicode.OtherLetter_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.40168946 UTC

[section ""data" . GHC.Unicode.NonSpacingMark_closure" {
     GHC.Unicode.NonSpacingMark_closure:
         const GHC.Unicode.NonSpacingMark_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.403357907 UTC

[section ""data" . GHC.Unicode.SpacingCombiningMark_closure" {
     GHC.Unicode.SpacingCombiningMark_closure:
         const GHC.Unicode.SpacingCombiningMark_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.404995326 UTC

[section ""data" . GHC.Unicode.EnclosingMark_closure" {
     GHC.Unicode.EnclosingMark_closure:
         const GHC.Unicode.EnclosingMark_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.407885174 UTC

[section ""data" . GHC.Unicode.DecimalNumber_closure" {
     GHC.Unicode.DecimalNumber_closure:
         const GHC.Unicode.DecimalNumber_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.409484351 UTC

[section ""data" . GHC.Unicode.LetterNumber_closure" {
     GHC.Unicode.LetterNumber_closure:
         const GHC.Unicode.LetterNumber_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.411128823 UTC

[section ""data" . GHC.Unicode.OtherNumber_closure" {
     GHC.Unicode.OtherNumber_closure:
         const GHC.Unicode.OtherNumber_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.412817197 UTC

[section ""data" . GHC.Unicode.ConnectorPunctuation_closure" {
     GHC.Unicode.ConnectorPunctuation_closure:
         const GHC.Unicode.ConnectorPunctuation_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.414945028 UTC

[section ""data" . GHC.Unicode.DashPunctuation_closure" {
     GHC.Unicode.DashPunctuation_closure:
         const GHC.Unicode.DashPunctuation_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.416625501 UTC

[section ""data" . GHC.Unicode.OpenPunctuation_closure" {
     GHC.Unicode.OpenPunctuation_closure:
         const GHC.Unicode.OpenPunctuation_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.419373152 UTC

[section ""data" . GHC.Unicode.ClosePunctuation_closure" {
     GHC.Unicode.ClosePunctuation_closure:
         const GHC.Unicode.ClosePunctuation_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.421068908 UTC

[section ""data" . GHC.Unicode.InitialQuote_closure" {
     GHC.Unicode.InitialQuote_closure:
         const GHC.Unicode.InitialQuote_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.422768354 UTC

[section ""data" . GHC.Unicode.FinalQuote_closure" {
     GHC.Unicode.FinalQuote_closure:
         const GHC.Unicode.FinalQuote_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.424420384 UTC

[section ""data" . GHC.Unicode.OtherPunctuation_closure" {
     GHC.Unicode.OtherPunctuation_closure:
         const GHC.Unicode.OtherPunctuation_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.42606748 UTC

[section ""data" . GHC.Unicode.MathSymbol_closure" {
     GHC.Unicode.MathSymbol_closure:
         const GHC.Unicode.MathSymbol_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.427731435 UTC

[section ""data" . GHC.Unicode.CurrencySymbol_closure" {
     GHC.Unicode.CurrencySymbol_closure:
         const GHC.Unicode.CurrencySymbol_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.429341409 UTC

[section ""data" . GHC.Unicode.ModifierSymbol_closure" {
     GHC.Unicode.ModifierSymbol_closure:
         const GHC.Unicode.ModifierSymbol_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.430910886 UTC

[section ""data" . GHC.Unicode.OtherSymbol_closure" {
     GHC.Unicode.OtherSymbol_closure:
         const GHC.Unicode.OtherSymbol_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.43251834 UTC

[section ""data" . GHC.Unicode.Space_closure" {
     GHC.Unicode.Space_closure:
         const GHC.Unicode.Space_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.434241739 UTC

[section ""data" . GHC.Unicode.LineSeparator_closure" {
     GHC.Unicode.LineSeparator_closure:
         const GHC.Unicode.LineSeparator_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.436488201 UTC

[section ""data" . GHC.Unicode.ParagraphSeparator_closure" {
     GHC.Unicode.ParagraphSeparator_closure:
         const GHC.Unicode.ParagraphSeparator_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.438840704 UTC

[section ""data" . GHC.Unicode.Control_closure" {
     GHC.Unicode.Control_closure:
         const GHC.Unicode.Control_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.440472914 UTC

[section ""data" . GHC.Unicode.Format_closure" {
     GHC.Unicode.Format_closure:
         const GHC.Unicode.Format_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.442221683 UTC

[section ""data" . GHC.Unicode.Surrogate_closure" {
     GHC.Unicode.Surrogate_closure:
         const GHC.Unicode.Surrogate_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.44388746 UTC

[section ""data" . GHC.Unicode.PrivateUse_closure" {
     GHC.Unicode.PrivateUse_closure:
         const GHC.Unicode.PrivateUse_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.44555949 UTC

[section ""data" . GHC.Unicode.NotAssigned_closure" {
     GHC.Unicode.NotAssigned_closure:
         const GHC.Unicode.NotAssigned_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.447186014 UTC

[section ""relreadonly" . GHC.Unicode.GeneralCategory_closure_tbl" {
     GHC.Unicode.GeneralCategory_closure_tbl:
         const GHC.Unicode.UppercaseLetter_closure+1;
         const GHC.Unicode.LowercaseLetter_closure+1;
         const GHC.Unicode.TitlecaseLetter_closure+1;
         const GHC.Unicode.ModifierLetter_closure+1;
         const GHC.Unicode.OtherLetter_closure+1;
         const GHC.Unicode.NonSpacingMark_closure+1;
         const GHC.Unicode.SpacingCombiningMark_closure+1;
         const GHC.Unicode.EnclosingMark_closure+1;
         const GHC.Unicode.DecimalNumber_closure+1;
         const GHC.Unicode.LetterNumber_closure+1;
         const GHC.Unicode.OtherNumber_closure+1;
         const GHC.Unicode.ConnectorPunctuation_closure+1;
         const GHC.Unicode.DashPunctuation_closure+1;
         const GHC.Unicode.OpenPunctuation_closure+1;
         const GHC.Unicode.ClosePunctuation_closure+1;
         const GHC.Unicode.InitialQuote_closure+1;
         const GHC.Unicode.FinalQuote_closure+1;
         const GHC.Unicode.OtherPunctuation_closure+1;
         const GHC.Unicode.MathSymbol_closure+1;
         const GHC.Unicode.CurrencySymbol_closure+1;
         const GHC.Unicode.ModifierSymbol_closure+1;
         const GHC.Unicode.OtherSymbol_closure+1;
         const GHC.Unicode.Space_closure+1;
         const GHC.Unicode.LineSeparator_closure+1;
         const GHC.Unicode.ParagraphSeparator_closure+1;
         const GHC.Unicode.Control_closure+1;
         const GHC.Unicode.Format_closure+1;
         const GHC.Unicode.Surrogate_closure+1;
         const GHC.Unicode.PrivateUse_closure+1;
         const GHC.Unicode.NotAssigned_closure+1;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.449620937 UTC

[GHC.Unicode.UppercaseLetter_con_entry() //  [R1]
         { info_tbl: [(c2m0K,
                       label: GHC.Unicode.UppercaseLetter_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,85,112,112,101,114,99,97,115,101,76,101,116,116,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m0K: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.453067476 UTC

[GHC.Unicode.LowercaseLetter_con_entry() //  [R1]
         { info_tbl: [(c2m0Q,
                       label: GHC.Unicode.LowercaseLetter_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,76,111,119,101,114,99,97,115,101,76,101,116,116,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m0Q: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.456718623 UTC

[GHC.Unicode.TitlecaseLetter_con_entry() //  [R1]
         { info_tbl: [(c2m0W,
                       label: GHC.Unicode.TitlecaseLetter_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,84,105,116,108,101,99,97,115,101,76,101,116,116,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m0W: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.459893544 UTC

[GHC.Unicode.ModifierLetter_con_entry() //  [R1]
         { info_tbl: [(c2m12,
                       label: GHC.Unicode.ModifierLetter_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,77,111,100,105,102,105,101,114,76,101,116,116,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m12: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.463460971 UTC

[GHC.Unicode.OtherLetter_con_entry() //  [R1]
         { info_tbl: [(c2m18,
                       label: GHC.Unicode.OtherLetter_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 4
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,76,101,116,116,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m18: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.466625744 UTC

[GHC.Unicode.NonSpacingMark_con_entry() //  [R1]
         { info_tbl: [(c2m1e,
                       label: GHC.Unicode.NonSpacingMark_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 5
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,78,111,110,83,112,97,99,105,110,103,77,97,114,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m1e: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.470059692 UTC

[GHC.Unicode.SpacingCombiningMark_con_entry() //  [R1]
         { info_tbl: [(c2m1k,
                       label: GHC.Unicode.SpacingCombiningMark_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 6
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,83,112,97,99,105,110,103,67,111,109,98,105,110,105,110,103,77,97,114,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m1k: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.473199866 UTC

[GHC.Unicode.EnclosingMark_con_entry() //  [R1]
         { info_tbl: [(c2m1q,
                       label: GHC.Unicode.EnclosingMark_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 7
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,69,110,99,108,111,115,105,110,103,77,97,114,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m1q: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.476806427 UTC

[GHC.Unicode.DecimalNumber_con_entry() //  [R1]
         { info_tbl: [(c2m1w,
                       label: GHC.Unicode.DecimalNumber_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 8
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,68,101,99,105,109,97,108,78,117,109,98,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m1w: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.479939141 UTC

[GHC.Unicode.LetterNumber_con_entry() //  [R1]
         { info_tbl: [(c2m1C,
                       label: GHC.Unicode.LetterNumber_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 9
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,76,101,116,116,101,114,78,117,109,98,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m1C: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.483009414 UTC

[GHC.Unicode.OtherNumber_con_entry() //  [R1]
         { info_tbl: [(c2m1I,
                       label: GHC.Unicode.OtherNumber_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 10
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,78,117,109,98,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m1I: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.486647115 UTC

[GHC.Unicode.ConnectorPunctuation_con_entry() //  [R1]
         { info_tbl: [(c2m1O,
                       label: GHC.Unicode.ConnectorPunctuation_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 11
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,111,110,110,101,99,116,111,114,80,117,110,99,116,117,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m1O: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.489906833 UTC

[GHC.Unicode.DashPunctuation_con_entry() //  [R1]
         { info_tbl: [(c2m1U,
                       label: GHC.Unicode.DashPunctuation_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 12
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,68,97,115,104,80,117,110,99,116,117,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m1U: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.493157357 UTC

[GHC.Unicode.OpenPunctuation_con_entry() //  [R1]
         { info_tbl: [(c2m20,
                       label: GHC.Unicode.OpenPunctuation_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 13
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,112,101,110,80,117,110,99,116,117,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m20: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.497027987 UTC

[GHC.Unicode.ClosePunctuation_con_entry() //  [R1]
         { info_tbl: [(c2m26,
                       label: GHC.Unicode.ClosePunctuation_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 14
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,108,111,115,101,80,117,110,99,116,117,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m26: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.500169807 UTC

[GHC.Unicode.InitialQuote_con_entry() //  [R1]
         { info_tbl: [(c2m2c,
                       label: GHC.Unicode.InitialQuote_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 15
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,73,110,105,116,105,97,108,81,117,111,116,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m2c: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.503573599 UTC

[GHC.Unicode.FinalQuote_con_entry() //  [R1]
         { info_tbl: [(c2m2i,
                       label: GHC.Unicode.FinalQuote_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 16
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,70,105,110,97,108,81,117,111,116,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m2i: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.50671795 UTC

[GHC.Unicode.OtherPunctuation_con_entry() //  [R1]
         { info_tbl: [(c2m2o,
                       label: GHC.Unicode.OtherPunctuation_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 17
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,80,117,110,99,116,117,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m2o: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.50988559 UTC

[GHC.Unicode.MathSymbol_con_entry() //  [R1]
         { info_tbl: [(c2m2u,
                       label: GHC.Unicode.MathSymbol_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 18
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,77,97,116,104,83,121,109,98,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m2u: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.513000682 UTC

[GHC.Unicode.CurrencySymbol_con_entry() //  [R1]
         { info_tbl: [(c2m2A,
                       label: GHC.Unicode.CurrencySymbol_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 19
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,117,114,114,101,110,99,121,83,121,109,98,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m2A: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.516176576 UTC

[GHC.Unicode.ModifierSymbol_con_entry() //  [R1]
         { info_tbl: [(c2m2G,
                       label: GHC.Unicode.ModifierSymbol_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 20
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,77,111,100,105,102,105,101,114,83,121,109,98,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m2G: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.520066689 UTC

[GHC.Unicode.OtherSymbol_con_entry() //  [R1]
         { info_tbl: [(c2m2M,
                       label: GHC.Unicode.OtherSymbol_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 21
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,83,121,109,98,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m2M: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.523208944 UTC

[GHC.Unicode.Space_con_entry() //  [R1]
         { info_tbl: [(c2m2S,
                       label: GHC.Unicode.Space_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 22
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,83,112,97,99,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m2S: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.526222861 UTC

[GHC.Unicode.LineSeparator_con_entry() //  [R1]
         { info_tbl: [(c2m2Y,
                       label: GHC.Unicode.LineSeparator_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 23
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,76,105,110,101,83,101,112,97,114,97,116,111,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m2Y: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.529785128 UTC

[GHC.Unicode.ParagraphSeparator_con_entry() //  [R1]
         { info_tbl: [(c2m34,
                       label: GHC.Unicode.ParagraphSeparator_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 24
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,80,97,114,97,103,114,97,112,104,83,101,112,97,114,97,116,111,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m34: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.532928638 UTC

[GHC.Unicode.Control_con_entry() //  [R1]
         { info_tbl: [(c2m3a,
                       label: GHC.Unicode.Control_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 25
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,111,110,116,114,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m3a: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.536120861 UTC

[GHC.Unicode.Format_con_entry() //  [R1]
         { info_tbl: [(c2m3g,
                       label: GHC.Unicode.Format_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 26
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,70,111,114,109,97,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m3g: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.539794459 UTC

[GHC.Unicode.Surrogate_con_entry() //  [R1]
         { info_tbl: [(c2m3m,
                       label: GHC.Unicode.Surrogate_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 27
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,83,117,114,114,111,103,97,116,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m3m: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.543128688 UTC

[GHC.Unicode.PrivateUse_con_entry() //  [R1]
         { info_tbl: [(c2m3s,
                       label: GHC.Unicode.PrivateUse_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 28
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,80,114,105,118,97,116,101,85,115,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m3s: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.546278663 UTC

[GHC.Unicode.NotAssigned_con_entry() //  [R1]
         { info_tbl: [(c2m3y,
                       label: GHC.Unicode.NotAssigned_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 29
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,78,111,116,65,115,115,105,103,110,101,100]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2m3y: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:03.54946485 UTC

[section ""relreadonly" . S2jm9_srt" {
     S2jm9_srt:
         const GHC.Unicode.$w$cshowsPrec_closure;
         const lvl1_r2j63_closure;
         const lvl3_r2j65_closure;
         const lvl5_r2j67_closure;
         const lvl7_r2j69_closure;
         const lvl9_r2j6b_closure;
         const lvl11_r2j6d_closure;
         const lvl13_r2j6f_closure;
         const lvl15_r2j6h_closure;
         const lvl17_r2j6j_closure;
         const lvl19_r2j6l_closure;
         const lvl21_r2j6n_closure;
         const lvl23_r2j6p_closure;
         const lvl25_r2j6r_closure;
         const lvl27_r2j6t_closure;
         const lvl29_r2j6v_closure;
         const lvl31_r2j6x_closure;
         const lvl33_r2j6z_closure;
         const lvl35_r2j6B_closure;
         const lvl37_r2j6D_closure;
         const lvl39_r2j6F_closure;
         const lvl41_r2j6H_closure;
         const lvl43_r2j6J_closure;
         const lvl45_r2j6L_closure;
         const lvl47_r2j6N_closure;
         const lvl49_r2j6P_closure;
         const lvl51_r2j6R_closure;
         const lvl53_r2j6T_closure;
         const lvl55_r2j6V_closure;
         const lvl57_r2j6X_closure;
         const lvl59_r2j6Z_closure;
         const GHC.Arr.hopelessIndexError_closure;
         const GHC.Unicode.$fIxGeneralCategory_$cindex_closure;
         const lvl62_r2j7d_closure;
         const lvl63_r2j7e_closure;
         const lvl64_r2j7f_closure;
         const GHC.Err.error_closure;
         const GHC.Unicode.$wlvl_closure;
         const $dIP3_r2j7a_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure;
         const GHC.Unicode.$w$ctoEnum_closure;
         const GHC.Char.$wlvl_closure;
         const GHC.Unicode.toLower_closure;
         const GHC.Unicode.toUpper_closure;
         const GHC.Unicode.toTitle_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$csucc_closure;
         const GHC.Unicode.$fEnumGeneralCategory2_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$cpred_closure;
         const GHC.Unicode.$fEnumGeneralCategory1_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure;
         const GHC.Unicode.generalCategory_closure;
         const GHC.Unicode.$wgeneralCategory_closure;
         const GHC.Unicode.isPunctuation_closure;
         const GHC.Unicode.$wisPunctuation_closure;
         const GHC.Unicode.isSymbol_closure;
         const GHC.Unicode.$wisSymbol_closure;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.394352166 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:57:06.395439727 UTC

[section ""data" . GHC.Unicode.$fBoundedGeneralCategory_closure" {
     GHC.Unicode.$fBoundedGeneralCategory_closure:
         const GHC.Enum.C:Bounded_con_info;
         const GHC.Unicode.UppercaseLetter_closure+1;
         const GHC.Unicode.NotAssigned_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.397212714 UTC

[section ""cstring" . lvl_r2j62_bytes" {
     lvl_r2j62_bytes:
         I8[] [85,112,112,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.399143995 UTC

[section ""data" . lvl1_r2j63_closure" {
     lvl1_r2j63_closure:
         const lvl1_r2j63_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r2j63_entry() //  [R1]
         { info_tbl: [(c2mc7,
                       label: lvl1_r2j63_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mc7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mc8; else goto c2mc9;
       c2mc8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mc9: // global
           (_c2mc4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mc4::I64 == 0) goto c2mc6; else goto c2mc5;
       c2mc6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mc5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mc4::I64;
           R2 = lvl_r2j62_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.403061995 UTC

[section ""cstring" . lvl2_r2j64_bytes" {
     lvl2_r2j64_bytes:
         I8[] [76,111,119,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.404950651 UTC

[section ""data" . lvl3_r2j65_closure" {
     lvl3_r2j65_closure:
         const lvl3_r2j65_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r2j65_entry() //  [R1]
         { info_tbl: [(c2mcp,
                       label: lvl3_r2j65_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mcp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mcq; else goto c2mcr;
       c2mcq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mcr: // global
           (_c2mcm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mcm::I64 == 0) goto c2mco; else goto c2mcn;
       c2mco: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mcn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mcm::I64;
           R2 = lvl2_r2j64_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.408847427 UTC

[section ""cstring" . lvl4_r2j66_bytes" {
     lvl4_r2j66_bytes:
         I8[] [84,105,116,108,101,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.410883512 UTC

[section ""data" . lvl5_r2j67_closure" {
     lvl5_r2j67_closure:
         const lvl5_r2j67_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r2j67_entry() //  [R1]
         { info_tbl: [(c2mcH,
                       label: lvl5_r2j67_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mcH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mcI; else goto c2mcJ;
       c2mcI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mcJ: // global
           (_c2mcE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mcE::I64 == 0) goto c2mcG; else goto c2mcF;
       c2mcG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mcF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mcE::I64;
           R2 = lvl4_r2j66_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.415500894 UTC

[section ""cstring" . lvl6_r2j68_bytes" {
     lvl6_r2j68_bytes:
         I8[] [77,111,100,105,102,105,101,114,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.417398374 UTC

[section ""data" . lvl7_r2j69_closure" {
     lvl7_r2j69_closure:
         const lvl7_r2j69_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r2j69_entry() //  [R1]
         { info_tbl: [(c2mcZ,
                       label: lvl7_r2j69_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mcZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2md0; else goto c2md1;
       c2md0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2md1: // global
           (_c2mcW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mcW::I64 == 0) goto c2mcY; else goto c2mcX;
       c2mcY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mcX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mcW::I64;
           R2 = lvl6_r2j68_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.421356463 UTC

[section ""cstring" . lvl8_r2j6a_bytes" {
     lvl8_r2j6a_bytes:
         I8[] [79,116,104,101,114,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.423261626 UTC

[section ""data" . lvl9_r2j6b_closure" {
     lvl9_r2j6b_closure:
         const lvl9_r2j6b_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_r2j6b_entry() //  [R1]
         { info_tbl: [(c2mdh,
                       label: lvl9_r2j6b_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mdh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mdi; else goto c2mdj;
       c2mdi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mdj: // global
           (_c2mde::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mde::I64 == 0) goto c2mdg; else goto c2mdf;
       c2mdg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mdf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mde::I64;
           R2 = lvl8_r2j6a_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.427154536 UTC

[section ""cstring" . lvl10_r2j6c_bytes" {
     lvl10_r2j6c_bytes:
         I8[] [78,111,110,83,112,97,99,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.428970141 UTC

[section ""data" . lvl11_r2j6d_closure" {
     lvl11_r2j6d_closure:
         const lvl11_r2j6d_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_r2j6d_entry() //  [R1]
         { info_tbl: [(c2mdz,
                       label: lvl11_r2j6d_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mdz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mdA; else goto c2mdB;
       c2mdA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mdB: // global
           (_c2mdw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mdw::I64 == 0) goto c2mdy; else goto c2mdx;
       c2mdy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mdx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mdw::I64;
           R2 = lvl10_r2j6c_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.433491247 UTC

[section ""cstring" . lvl12_r2j6e_bytes" {
     lvl12_r2j6e_bytes:
         I8[] [83,112,97,99,105,110,103,67,111,109,98,105,110,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.435459246 UTC

[section ""data" . lvl13_r2j6f_closure" {
     lvl13_r2j6f_closure:
         const lvl13_r2j6f_info;
         const 0;
         const 0;
         const 0;
 },
 lvl13_r2j6f_entry() //  [R1]
         { info_tbl: [(c2mdR,
                       label: lvl13_r2j6f_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mdR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mdS; else goto c2mdT;
       c2mdS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mdT: // global
           (_c2mdO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mdO::I64 == 0) goto c2mdQ; else goto c2mdP;
       c2mdQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mdP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mdO::I64;
           R2 = lvl12_r2j6e_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.439751488 UTC

[section ""cstring" . lvl14_r2j6g_bytes" {
     lvl14_r2j6g_bytes:
         I8[] [69,110,99,108,111,115,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.441791785 UTC

[section ""data" . lvl15_r2j6h_closure" {
     lvl15_r2j6h_closure:
         const lvl15_r2j6h_info;
         const 0;
         const 0;
         const 0;
 },
 lvl15_r2j6h_entry() //  [R1]
         { info_tbl: [(c2me9,
                       label: lvl15_r2j6h_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2me9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mea; else goto c2meb;
       c2mea: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2meb: // global
           (_c2me6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2me6::I64 == 0) goto c2me8; else goto c2me7;
       c2me8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2me7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2me6::I64;
           R2 = lvl14_r2j6g_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.446209896 UTC

[section ""cstring" . lvl16_r2j6i_bytes" {
     lvl16_r2j6i_bytes:
         I8[] [68,101,99,105,109,97,108,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.448110518 UTC

[section ""data" . lvl17_r2j6j_closure" {
     lvl17_r2j6j_closure:
         const lvl17_r2j6j_info;
         const 0;
         const 0;
         const 0;
 },
 lvl17_r2j6j_entry() //  [R1]
         { info_tbl: [(c2mer,
                       label: lvl17_r2j6j_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mer: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mes; else goto c2met;
       c2mes: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2met: // global
           (_c2meo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2meo::I64 == 0) goto c2meq; else goto c2mep;
       c2meq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mep: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2meo::I64;
           R2 = lvl16_r2j6i_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.45200908 UTC

[section ""cstring" . lvl18_r2j6k_bytes" {
     lvl18_r2j6k_bytes:
         I8[] [76,101,116,116,101,114,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.454056711 UTC

[section ""data" . lvl19_r2j6l_closure" {
     lvl19_r2j6l_closure:
         const lvl19_r2j6l_info;
         const 0;
         const 0;
         const 0;
 },
 lvl19_r2j6l_entry() //  [R1]
         { info_tbl: [(c2meJ,
                       label: lvl19_r2j6l_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2meJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2meK; else goto c2meL;
       c2meK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2meL: // global
           (_c2meG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2meG::I64 == 0) goto c2meI; else goto c2meH;
       c2meI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2meH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2meG::I64;
           R2 = lvl18_r2j6k_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.457923007 UTC

[section ""cstring" . lvl20_r2j6m_bytes" {
     lvl20_r2j6m_bytes:
         I8[] [79,116,104,101,114,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.459794556 UTC

[section ""data" . lvl21_r2j6n_closure" {
     lvl21_r2j6n_closure:
         const lvl21_r2j6n_info;
         const 0;
         const 0;
         const 0;
 },
 lvl21_r2j6n_entry() //  [R1]
         { info_tbl: [(c2mf1,
                       label: lvl21_r2j6n_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mf1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mf2; else goto c2mf3;
       c2mf2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mf3: // global
           (_c2meY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2meY::I64 == 0) goto c2mf0; else goto c2meZ;
       c2mf0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2meZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2meY::I64;
           R2 = lvl20_r2j6m_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.463640006 UTC

[section ""cstring" . lvl22_r2j6o_bytes" {
     lvl22_r2j6o_bytes:
         I8[] [67,111,110,110,101,99,116,111,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.465832793 UTC

[section ""data" . lvl23_r2j6p_closure" {
     lvl23_r2j6p_closure:
         const lvl23_r2j6p_info;
         const 0;
         const 0;
         const 0;
 },
 lvl23_r2j6p_entry() //  [R1]
         { info_tbl: [(c2mfj,
                       label: lvl23_r2j6p_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mfj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mfk; else goto c2mfl;
       c2mfk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mfl: // global
           (_c2mfg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mfg::I64 == 0) goto c2mfi; else goto c2mfh;
       c2mfi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mfh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mfg::I64;
           R2 = lvl22_r2j6o_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.469809476 UTC

[section ""cstring" . lvl24_r2j6q_bytes" {
     lvl24_r2j6q_bytes:
         I8[] [68,97,115,104,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.472241319 UTC

[section ""data" . lvl25_r2j6r_closure" {
     lvl25_r2j6r_closure:
         const lvl25_r2j6r_info;
         const 0;
         const 0;
         const 0;
 },
 lvl25_r2j6r_entry() //  [R1]
         { info_tbl: [(c2mfB,
                       label: lvl25_r2j6r_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mfB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mfC; else goto c2mfD;
       c2mfC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mfD: // global
           (_c2mfy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mfy::I64 == 0) goto c2mfA; else goto c2mfz;
       c2mfA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mfz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mfy::I64;
           R2 = lvl24_r2j6q_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.47603854 UTC

[section ""cstring" . lvl26_r2j6s_bytes" {
     lvl26_r2j6s_bytes:
         I8[] [79,112,101,110,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.478326609 UTC

[section ""data" . lvl27_r2j6t_closure" {
     lvl27_r2j6t_closure:
         const lvl27_r2j6t_info;
         const 0;
         const 0;
         const 0;
 },
 lvl27_r2j6t_entry() //  [R1]
         { info_tbl: [(c2mfT,
                       label: lvl27_r2j6t_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mfT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mfU; else goto c2mfV;
       c2mfU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mfV: // global
           (_c2mfQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mfQ::I64 == 0) goto c2mfS; else goto c2mfR;
       c2mfS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mfR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mfQ::I64;
           R2 = lvl26_r2j6s_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.482172757 UTC

[section ""cstring" . lvl28_r2j6u_bytes" {
     lvl28_r2j6u_bytes:
         I8[] [67,108,111,115,101,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.483952657 UTC

[section ""data" . lvl29_r2j6v_closure" {
     lvl29_r2j6v_closure:
         const lvl29_r2j6v_info;
         const 0;
         const 0;
         const 0;
 },
 lvl29_r2j6v_entry() //  [R1]
         { info_tbl: [(c2mgb,
                       label: lvl29_r2j6v_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mgb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mgc; else goto c2mgd;
       c2mgc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mgd: // global
           (_c2mg8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mg8::I64 == 0) goto c2mga; else goto c2mg9;
       c2mga: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mg9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mg8::I64;
           R2 = lvl28_r2j6u_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.487682605 UTC

[section ""cstring" . lvl30_r2j6w_bytes" {
     lvl30_r2j6w_bytes:
         I8[] [73,110,105,116,105,97,108,81,117,111,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.489680816 UTC

[section ""data" . lvl31_r2j6x_closure" {
     lvl31_r2j6x_closure:
         const lvl31_r2j6x_info;
         const 0;
         const 0;
         const 0;
 },
 lvl31_r2j6x_entry() //  [R1]
         { info_tbl: [(c2mgt,
                       label: lvl31_r2j6x_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mgt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mgu; else goto c2mgv;
       c2mgu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mgv: // global
           (_c2mgq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mgq::I64 == 0) goto c2mgs; else goto c2mgr;
       c2mgs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mgr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mgq::I64;
           R2 = lvl30_r2j6w_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.493482071 UTC

[section ""cstring" . lvl32_r2j6y_bytes" {
     lvl32_r2j6y_bytes:
         I8[] [70,105,110,97,108,81,117,111,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.49534987 UTC

[section ""data" . lvl33_r2j6z_closure" {
     lvl33_r2j6z_closure:
         const lvl33_r2j6z_info;
         const 0;
         const 0;
         const 0;
 },
 lvl33_r2j6z_entry() //  [R1]
         { info_tbl: [(c2mgL,
                       label: lvl33_r2j6z_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mgL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mgM; else goto c2mgN;
       c2mgM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mgN: // global
           (_c2mgI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mgI::I64 == 0) goto c2mgK; else goto c2mgJ;
       c2mgK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mgJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mgI::I64;
           R2 = lvl32_r2j6y_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.499536367 UTC

[section ""cstring" . lvl34_r2j6A_bytes" {
     lvl34_r2j6A_bytes:
         I8[] [79,116,104,101,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.501543103 UTC

[section ""data" . lvl35_r2j6B_closure" {
     lvl35_r2j6B_closure:
         const lvl35_r2j6B_info;
         const 0;
         const 0;
         const 0;
 },
 lvl35_r2j6B_entry() //  [R1]
         { info_tbl: [(c2mh3,
                       label: lvl35_r2j6B_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mh3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mh4; else goto c2mh5;
       c2mh4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mh5: // global
           (_c2mh0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mh0::I64 == 0) goto c2mh2; else goto c2mh1;
       c2mh2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mh1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mh0::I64;
           R2 = lvl34_r2j6A_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.505924555 UTC

[section ""cstring" . lvl36_r2j6C_bytes" {
     lvl36_r2j6C_bytes:
         I8[] [77,97,116,104,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.507815781 UTC

[section ""data" . lvl37_r2j6D_closure" {
     lvl37_r2j6D_closure:
         const lvl37_r2j6D_info;
         const 0;
         const 0;
         const 0;
 },
 lvl37_r2j6D_entry() //  [R1]
         { info_tbl: [(c2mhl,
                       label: lvl37_r2j6D_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mhl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mhm; else goto c2mhn;
       c2mhm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mhn: // global
           (_c2mhi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mhi::I64 == 0) goto c2mhk; else goto c2mhj;
       c2mhk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mhj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mhi::I64;
           R2 = lvl36_r2j6C_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.512075567 UTC

[section ""cstring" . lvl38_r2j6E_bytes" {
     lvl38_r2j6E_bytes:
         I8[] [67,117,114,114,101,110,99,121,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.514047238 UTC

[section ""data" . lvl39_r2j6F_closure" {
     lvl39_r2j6F_closure:
         const lvl39_r2j6F_info;
         const 0;
         const 0;
         const 0;
 },
 lvl39_r2j6F_entry() //  [R1]
         { info_tbl: [(c2mhD,
                       label: lvl39_r2j6F_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mhD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mhE; else goto c2mhF;
       c2mhE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mhF: // global
           (_c2mhA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mhA::I64 == 0) goto c2mhC; else goto c2mhB;
       c2mhC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mhB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mhA::I64;
           R2 = lvl38_r2j6E_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.518032653 UTC

[section ""cstring" . lvl40_r2j6G_bytes" {
     lvl40_r2j6G_bytes:
         I8[] [77,111,100,105,102,105,101,114,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.519890779 UTC

[section ""data" . lvl41_r2j6H_closure" {
     lvl41_r2j6H_closure:
         const lvl41_r2j6H_info;
         const 0;
         const 0;
         const 0;
 },
 lvl41_r2j6H_entry() //  [R1]
         { info_tbl: [(c2mhV,
                       label: lvl41_r2j6H_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mhV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mhW; else goto c2mhX;
       c2mhW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mhX: // global
           (_c2mhS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mhS::I64 == 0) goto c2mhU; else goto c2mhT;
       c2mhU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mhT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mhS::I64;
           R2 = lvl40_r2j6G_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.523668434 UTC

[section ""cstring" . lvl42_r2j6I_bytes" {
     lvl42_r2j6I_bytes:
         I8[] [79,116,104,101,114,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.525565144 UTC

[section ""data" . lvl43_r2j6J_closure" {
     lvl43_r2j6J_closure:
         const lvl43_r2j6J_info;
         const 0;
         const 0;
         const 0;
 },
 lvl43_r2j6J_entry() //  [R1]
         { info_tbl: [(c2mid,
                       label: lvl43_r2j6J_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mid: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mie; else goto c2mif;
       c2mie: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mif: // global
           (_c2mia::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mia::I64 == 0) goto c2mic; else goto c2mib;
       c2mic: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mib: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mia::I64;
           R2 = lvl42_r2j6I_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.529571313 UTC

[section ""cstring" . lvl44_r2j6K_bytes" {
     lvl44_r2j6K_bytes:
         I8[] [83,112,97,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.532105081 UTC

[section ""data" . lvl45_r2j6L_closure" {
     lvl45_r2j6L_closure:
         const lvl45_r2j6L_info;
         const 0;
         const 0;
         const 0;
 },
 lvl45_r2j6L_entry() //  [R1]
         { info_tbl: [(c2miv,
                       label: lvl45_r2j6L_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2miv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2miw; else goto c2mix;
       c2miw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mix: // global
           (_c2mis::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mis::I64 == 0) goto c2miu; else goto c2mit;
       c2miu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mit: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mis::I64;
           R2 = lvl44_r2j6K_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.538645074 UTC

[section ""cstring" . lvl46_r2j6M_bytes" {
     lvl46_r2j6M_bytes:
         I8[] [76,105,110,101,83,101,112,97,114,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.541212993 UTC

[section ""data" . lvl47_r2j6N_closure" {
     lvl47_r2j6N_closure:
         const lvl47_r2j6N_info;
         const 0;
         const 0;
         const 0;
 },
 lvl47_r2j6N_entry() //  [R1]
         { info_tbl: [(c2miN,
                       label: lvl47_r2j6N_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2miN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2miO; else goto c2miP;
       c2miO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2miP: // global
           (_c2miK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2miK::I64 == 0) goto c2miM; else goto c2miL;
       c2miM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2miL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2miK::I64;
           R2 = lvl46_r2j6M_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.546810843 UTC

[section ""cstring" . lvl48_r2j6O_bytes" {
     lvl48_r2j6O_bytes:
         I8[] [80,97,114,97,103,114,97,112,104,83,101,112,97,114,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.549642014 UTC

[section ""data" . lvl49_r2j6P_closure" {
     lvl49_r2j6P_closure:
         const lvl49_r2j6P_info;
         const 0;
         const 0;
         const 0;
 },
 lvl49_r2j6P_entry() //  [R1]
         { info_tbl: [(c2mj5,
                       label: lvl49_r2j6P_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mj5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mj6; else goto c2mj7;
       c2mj6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mj7: // global
           (_c2mj2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mj2::I64 == 0) goto c2mj4; else goto c2mj3;
       c2mj4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mj3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mj2::I64;
           R2 = lvl48_r2j6O_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.555183056 UTC

[section ""cstring" . lvl50_r2j6Q_bytes" {
     lvl50_r2j6Q_bytes:
         I8[] [67,111,110,116,114,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.55805251 UTC

[section ""data" . lvl51_r2j6R_closure" {
     lvl51_r2j6R_closure:
         const lvl51_r2j6R_info;
         const 0;
         const 0;
         const 0;
 },
 lvl51_r2j6R_entry() //  [R1]
         { info_tbl: [(c2mjn,
                       label: lvl51_r2j6R_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mjn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mjo; else goto c2mjp;
       c2mjo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mjp: // global
           (_c2mjk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mjk::I64 == 0) goto c2mjm; else goto c2mjl;
       c2mjm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mjl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mjk::I64;
           R2 = lvl50_r2j6Q_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.564025686 UTC

[section ""cstring" . lvl52_r2j6S_bytes" {
     lvl52_r2j6S_bytes:
         I8[] [70,111,114,109,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.566735409 UTC

[section ""data" . lvl53_r2j6T_closure" {
     lvl53_r2j6T_closure:
         const lvl53_r2j6T_info;
         const 0;
         const 0;
         const 0;
 },
 lvl53_r2j6T_entry() //  [R1]
         { info_tbl: [(c2mjF,
                       label: lvl53_r2j6T_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mjF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mjG; else goto c2mjH;
       c2mjG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mjH: // global
           (_c2mjC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mjC::I64 == 0) goto c2mjE; else goto c2mjD;
       c2mjE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mjD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mjC::I64;
           R2 = lvl52_r2j6S_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.572564922 UTC

[section ""cstring" . lvl54_r2j6U_bytes" {
     lvl54_r2j6U_bytes:
         I8[] [83,117,114,114,111,103,97,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.575670089 UTC

[section ""data" . lvl55_r2j6V_closure" {
     lvl55_r2j6V_closure:
         const lvl55_r2j6V_info;
         const 0;
         const 0;
         const 0;
 },
 lvl55_r2j6V_entry() //  [R1]
         { info_tbl: [(c2mjX,
                       label: lvl55_r2j6V_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mjX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mjY; else goto c2mjZ;
       c2mjY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mjZ: // global
           (_c2mjU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mjU::I64 == 0) goto c2mjW; else goto c2mjV;
       c2mjW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mjV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mjU::I64;
           R2 = lvl54_r2j6U_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.579595667 UTC

[section ""cstring" . lvl56_r2j6W_bytes" {
     lvl56_r2j6W_bytes:
         I8[] [80,114,105,118,97,116,101,85,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.581918103 UTC

[section ""data" . lvl57_r2j6X_closure" {
     lvl57_r2j6X_closure:
         const lvl57_r2j6X_info;
         const 0;
         const 0;
         const 0;
 },
 lvl57_r2j6X_entry() //  [R1]
         { info_tbl: [(c2mkf,
                       label: lvl57_r2j6X_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mkf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mkg; else goto c2mkh;
       c2mkg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mkh: // global
           (_c2mkc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mkc::I64 == 0) goto c2mke; else goto c2mkd;
       c2mke: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mkd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mkc::I64;
           R2 = lvl56_r2j6W_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.585832386 UTC

[section ""cstring" . lvl58_r2j6Y_bytes" {
     lvl58_r2j6Y_bytes:
         I8[] [78,111,116,65,115,115,105,103,110,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.587707343 UTC

[section ""data" . lvl59_r2j6Z_closure" {
     lvl59_r2j6Z_closure:
         const lvl59_r2j6Z_info;
         const 0;
         const 0;
         const 0;
 },
 lvl59_r2j6Z_entry() //  [R1]
         { info_tbl: [(c2mkx,
                       label: lvl59_r2j6Z_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mkx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mky; else goto c2mkz;
       c2mky: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mkz: // global
           (_c2mku::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mku::I64 == 0) goto c2mkw; else goto c2mkv;
       c2mkw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mkv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mku::I64;
           R2 = lvl58_r2j6Y_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.592633172 UTC

[section ""data" . GHC.Unicode.$w$cshowsPrec_closure" {
     GHC.Unicode.$w$cshowsPrec_closure:
         const GHC.Unicode.$w$cshowsPrec_info;
         const 0;
 },
 GHC.Unicode.$w$cshowsPrec_entry() //  [R2, R3]
         { info_tbl: [(c2mll,
                       label: GHC.Unicode.$w$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mll: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mlm; else goto c2mln;
       c2mlm: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2mln: // global
           I64[Sp - 16] = block_c2mkM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2mmQ; else goto c2mkN;
       u2mmQ: // global
           call _c2mkM(R1) args: 0, res: 0, upd: 0;
       c2mkN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mkM() //  [R1]
         { info_tbl: [(c2mkM,
                       label: block_c2mkM_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mkM: // global
           _s2m3G::P64 = P64[Sp + 8];
           switch [0 .. 29] (%MO_UU_Conv_W32_W64(I32[I64[R1 - 1] + 20])) {
               case 0 : goto c2mkQ;
               case 1 : goto c2mkR;
               case 2 : goto c2mkS;
               case 3 : goto c2mkT;
               case 4 : goto c2mkU;
               case 5 : goto c2mkV;
               case 6 : goto c2mkW;
               case 7 : goto c2mkX;
               case 8 : goto c2mkY;
               case 9 : goto c2mkZ;
               case 10 : goto c2ml0;
               case 11 : goto c2ml1;
               case 12 : goto c2ml2;
               case 13 : goto c2ml3;
               case 14 : goto c2ml4;
               case 15 : goto c2ml5;
               case 16 : goto c2ml6;
               case 17 : goto c2ml7;
               case 18 : goto c2ml8;
               case 19 : goto c2ml9;
               case 20 : goto c2mla;
               case 21 : goto c2mlb;
               case 22 : goto c2mlc;
               case 23 : goto c2mld;
               case 24 : goto c2mle;
               case 25 : goto c2mlf;
               case 26 : goto c2mlg;
               case 27 : goto c2mlh;
               case 28 : goto c2mli;
               case 29 : goto c2mlj;
           }
       c2mlj: // global
           R3 = _s2m3G::P64;
           R2 = lvl59_r2j6Z_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mli: // global
           R3 = _s2m3G::P64;
           R2 = lvl57_r2j6X_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mlh: // global
           R3 = _s2m3G::P64;
           R2 = lvl55_r2j6V_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mlg: // global
           R3 = _s2m3G::P64;
           R2 = lvl53_r2j6T_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mlf: // global
           R3 = _s2m3G::P64;
           R2 = lvl51_r2j6R_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mle: // global
           R3 = _s2m3G::P64;
           R2 = lvl49_r2j6P_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mld: // global
           R3 = _s2m3G::P64;
           R2 = lvl47_r2j6N_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mlc: // global
           R3 = _s2m3G::P64;
           R2 = lvl45_r2j6L_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mlb: // global
           R3 = _s2m3G::P64;
           R2 = lvl43_r2j6J_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mla: // global
           R3 = _s2m3G::P64;
           R2 = lvl41_r2j6H_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2ml9: // global
           R3 = _s2m3G::P64;
           R2 = lvl39_r2j6F_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2ml8: // global
           R3 = _s2m3G::P64;
           R2 = lvl37_r2j6D_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2ml7: // global
           R3 = _s2m3G::P64;
           R2 = lvl35_r2j6B_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2ml6: // global
           R3 = _s2m3G::P64;
           R2 = lvl33_r2j6z_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2ml5: // global
           R3 = _s2m3G::P64;
           R2 = lvl31_r2j6x_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2ml4: // global
           R3 = _s2m3G::P64;
           R2 = lvl29_r2j6v_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2ml3: // global
           R3 = _s2m3G::P64;
           R2 = lvl27_r2j6t_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2ml2: // global
           R3 = _s2m3G::P64;
           R2 = lvl25_r2j6r_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2ml1: // global
           R3 = _s2m3G::P64;
           R2 = lvl23_r2j6p_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2ml0: // global
           R3 = _s2m3G::P64;
           R2 = lvl21_r2j6n_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mkZ: // global
           R3 = _s2m3G::P64;
           R2 = lvl19_r2j6l_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mkY: // global
           R3 = _s2m3G::P64;
           R2 = lvl17_r2j6j_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mkX: // global
           R3 = _s2m3G::P64;
           R2 = lvl15_r2j6h_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mkW: // global
           R3 = _s2m3G::P64;
           R2 = lvl13_r2j6f_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mkV: // global
           R3 = _s2m3G::P64;
           R2 = lvl11_r2j6d_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mkU: // global
           R3 = _s2m3G::P64;
           R2 = lvl9_r2j6b_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mkT: // global
           R3 = _s2m3G::P64;
           R2 = lvl7_r2j69_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mkS: // global
           R3 = _s2m3G::P64;
           R2 = lvl5_r2j67_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mkR: // global
           R3 = _s2m3G::P64;
           R2 = lvl3_r2j65_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c2mkQ: // global
           R3 = _s2m3G::P64;
           R2 = lvl1_r2j63_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.604006315 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_closure" {
     GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_closure:
         const GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_info;
         const 0;
 },
 GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_entry() //  [R3, R4]
         { info_tbl: [(c2mnb,
                       label: GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mnb: // global
           _s2m3J::P64 = R3;
           R3 = R4;
           R2 = _s2m3J::P64;
           call GHC.Unicode.$w$cshowsPrec_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.607337873 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory1_closure" {
     GHC.Unicode.$fShowGeneralCategory1_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.609124301 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_$cshow_closure" {
     GHC.Unicode.$fShowGeneralCategory_$cshow_closure:
         const GHC.Unicode.$fShowGeneralCategory_$cshow_info;
         const 0;
 },
 GHC.Unicode.$fShowGeneralCategory_$cshow_entry() //  [R2]
         { info_tbl: [(c2mnn,
                       label: GHC.Unicode.$fShowGeneralCategory_$cshow_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mnn: // global
           R3 = GHC.Types.[]_closure+1;
           R2 = R2;
           call GHC.Unicode.$w$cshowsPrec_entry(R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.612611839 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_$cshowList_closure" {
     GHC.Unicode.$fShowGeneralCategory_$cshowList_closure:
         const GHC.Unicode.$fShowGeneralCategory_$cshowList_info;
         const 0;
 },
 GHC.Unicode.$fShowGeneralCategory_$cshowList_entry() //  [R2, R3]
         { info_tbl: [(c2mnz,
                       label: GHC.Unicode.$fShowGeneralCategory_$cshowList_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mnz: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Unicode.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.615864886 UTC

[section ""data" . GHC.Unicode.$fShowGeneralCategory_closure" {
     GHC.Unicode.$fShowGeneralCategory_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Unicode.$fShowGeneralCategory_$cshowsPrec_closure+3;
         const GHC.Unicode.$fShowGeneralCategory_$cshow_closure+1;
         const GHC.Unicode.$fShowGeneralCategory_$cshowList_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.618055903 UTC

[section ""data" . GHC.Unicode.$fEqGeneralCategory_$c==_closure" {
     GHC.Unicode.$fEqGeneralCategory_$c==_closure:
         const GHC.Unicode.$fEqGeneralCategory_$c==_info;
 },
 GHC.Unicode.$fEqGeneralCategory_$c==_entry() //  [R2, R3]
         { info_tbl: [(c2mnP,
                       label: GHC.Unicode.$fEqGeneralCategory_$c==_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mnP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mnV; else goto c2mnW;
       c2mnV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEqGeneralCategory_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2mnW: // global
           I64[Sp - 16] = block_c2mnL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2mog; else goto c2mnM;
       u2mog: // global
           call _c2mnL(R1) args: 0, res: 0, upd: 0;
       c2mnM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mnL() //  [R1]
         { info_tbl: [(c2mnL,
                       label: block_c2mnL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mnL: // global
           _s2m3R::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mnU_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m3R::I64;
           if (R1 & 7 != 0) goto u2mof; else goto c2mo1;
       u2mof: // global
           call _c2mnU(R1) args: 0, res: 0, upd: 0;
       c2mo1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mnU() //  [R1]
         { info_tbl: [(c2mnU,
                       label: block_c2mnU_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mnU: // global
           R1 = I64[((I64[Sp + 8] == %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.625700879 UTC

[section ""data" . GHC.Unicode.$fEqGeneralCategory_$c/=_closure" {
     GHC.Unicode.$fEqGeneralCategory_$c/=_closure:
         const GHC.Unicode.$fEqGeneralCategory_$c/=_info;
 },
 GHC.Unicode.$fEqGeneralCategory_$c/=_entry() //  [R2, R3]
         { info_tbl: [(c2moP,
                       label: GHC.Unicode.$fEqGeneralCategory_$c/=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2moP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2moV; else goto c2moW;
       c2moV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEqGeneralCategory_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2moW: // global
           I64[Sp - 16] = block_c2moL_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2mpk; else goto c2moM;
       u2mpk: // global
           call _c2moL(R1) args: 0, res: 0, upd: 0;
       c2moM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2moL() //  [R1]
         { info_tbl: [(c2moL,
                       label: block_c2moL_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2moL: // global
           _s2m3Y::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2moU_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m3Y::I64;
           if (R1 & 7 != 0) goto u2mpj; else goto c2mp1;
       u2mpj: // global
           call _c2moU(R1) args: 0, res: 0, upd: 0;
       c2mp1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2moU() //  [R1]
         { info_tbl: [(c2moU,
                       label: block_c2moU_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2moU: // global
           if (I64[Sp + 8] == %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) goto c2mpg; else goto c2mpf;
       c2mpg: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mpf: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.633811229 UTC

[section ""data" . GHC.Unicode.$fEqGeneralCategory_closure" {
     GHC.Unicode.$fEqGeneralCategory_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Unicode.$fEqGeneralCategory_$c==_closure+2;
         const GHC.Unicode.$fEqGeneralCategory_$c/=_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.636036142 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$ccompare_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$ccompare_entry() //  [R2, R3]
         { info_tbl: [(c2mpU,
                       label: GHC.Unicode.$fOrdGeneralCategory_$ccompare_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mpU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mq0; else goto c2mq1;
       c2mq0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2mq1: // global
           I64[Sp - 16] = block_c2mpQ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2mqv; else goto c2mpR;
       u2mqv: // global
           call _c2mpQ(R1) args: 0, res: 0, upd: 0;
       c2mpR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mpQ() //  [R1]
         { info_tbl: [(c2mpQ,
                       label: block_c2mpQ_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mpQ: // global
           _s2m45::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mpZ_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m45::I64;
           if (R1 & 7 != 0) goto u2mqu; else goto c2mq6;
       u2mqu: // global
           call _c2mpZ(R1) args: 0, res: 0, upd: 0;
       c2mq6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mpZ() //  [R1]
         { info_tbl: [(c2mpZ,
                       label: block_c2mpZ_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mpZ: // global
           _s2m45::I64 = I64[Sp + 8];
           _s2m47::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           if (%MO_S_Ge_W64(_s2m45::I64,
                            _s2m47::I64)) goto c2mqq; else goto c2mqr;
       c2mqq: // global
           if (_s2m45::I64 == _s2m47::I64) goto c2mqo; else goto c2mqn;
       c2mqo: // global
           R1 = GHC.Types.EQ_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mqn: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mqr: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.644168083 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c<_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c<_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c<_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c<_entry() //  [R2, R3]
         { info_tbl: [(c2mr5,
                       label: GHC.Unicode.$fOrdGeneralCategory_$c<_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mr5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mrb; else goto c2mrc;
       c2mrb: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2mrc: // global
           I64[Sp - 16] = block_c2mr1_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2mrw; else goto c2mr2;
       u2mrw: // global
           call _c2mr1(R1) args: 0, res: 0, upd: 0;
       c2mr2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mr1() //  [R1]
         { info_tbl: [(c2mr1,
                       label: block_c2mr1_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mr1: // global
           _s2m4d::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mra_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m4d::I64;
           if (R1 & 7 != 0) goto u2mrv; else goto c2mrh;
       u2mrv: // global
           call _c2mra(R1) args: 0, res: 0, upd: 0;
       c2mrh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mra() //  [R1]
         { info_tbl: [(c2mra,
                       label: block_c2mra_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mra: // global
           R1 = I64[(%MO_S_Lt_W64(I64[Sp + 8],
                                  %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.652117001 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c<=_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c<=_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c<=_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c<=_entry() //  [R2, R3]
         { info_tbl: [(c2ms5,
                       label: GHC.Unicode.$fOrdGeneralCategory_$c<=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ms5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2msb; else goto c2msc;
       c2msb: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2msc: // global
           I64[Sp - 16] = block_c2ms1_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2msA; else goto c2ms2;
       u2msA: // global
           call _c2ms1(R1) args: 0, res: 0, upd: 0;
       c2ms2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2ms1() //  [R1]
         { info_tbl: [(c2ms1,
                       label: block_c2ms1_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ms1: // global
           _s2m4k::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2msa_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m4k::I64;
           if (R1 & 7 != 0) goto u2msz; else goto c2msh;
       u2msz: // global
           call _c2msa(R1) args: 0, res: 0, upd: 0;
       c2msh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2msa() //  [R1]
         { info_tbl: [(c2msa,
                       label: block_c2msa_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2msa: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2msv; else goto c2msw;
       c2msv: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2msw: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.660063236 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$cmax_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$cmax_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$cmax_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$cmax_entry() //  [R2, R3]
         { info_tbl: [(c2mt9,
                       label: GHC.Unicode.$fOrdGeneralCategory_$cmax_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mt9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2mtf; else goto c2mtg;
       c2mtf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2mtg: // global
           I64[Sp - 24] = block_c2mt5_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2mtE; else goto c2mt6;
       u2mtE: // global
           call _c2mt5(R1) args: 0, res: 0, upd: 0;
       c2mt6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mt5() //  [R1]
         { info_tbl: [(c2mt5,
                       label: block_c2mt5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mt5: // global
           _s2m4r::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp - 8] = block_c2mte_info;
           R1 = P64[Sp + 8];
           I64[Sp] = _s2m4r::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mtD; else goto c2mtl;
       u2mtD: // global
           call _c2mte(R1) args: 0, res: 0, upd: 0;
       c2mtl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mte() //  [R1]
         { info_tbl: [(c2mte,
                       label: block_c2mte_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mte: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2mtz; else goto c2mtA;
       c2mtz: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2mtA: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.668487107 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c>=_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c>=_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c>=_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c>=_entry() //  [R2, R3]
         { info_tbl: [(c2mud,
                       label: GHC.Unicode.$fOrdGeneralCategory_$c>=_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mud: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2muj; else goto c2muk;
       c2muj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2muk: // global
           I64[Sp - 16] = block_c2mu9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2muI; else goto c2mua;
       u2muI: // global
           call _c2mu9(R1) args: 0, res: 0, upd: 0;
       c2mua: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mu9() //  [R1]
         { info_tbl: [(c2mu9,
                       label: block_c2mu9_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mu9: // global
           _s2m4y::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mui_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m4y::I64;
           if (R1 & 7 != 0) goto u2muH; else goto c2mup;
       u2muH: // global
           call _c2mui(R1) args: 0, res: 0, upd: 0;
       c2mup: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mui() //  [R1]
         { info_tbl: [(c2mui,
                       label: block_c2mui_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mui: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2muD; else goto c2muE;
       c2muD: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2muE: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.677477714 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$c>_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$c>_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$c>_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$c>_entry() //  [R2, R3]
         { info_tbl: [(c2mvh,
                       label: GHC.Unicode.$fOrdGeneralCategory_$c>_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mvh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mvn; else goto c2mvo;
       c2mvn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$c>_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2mvo: // global
           I64[Sp - 16] = block_c2mvd_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2mvI; else goto c2mve;
       u2mvI: // global
           call _c2mvd(R1) args: 0, res: 0, upd: 0;
       c2mve: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mvd() //  [R1]
         { info_tbl: [(c2mvd,
                       label: block_c2mvd_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mvd: // global
           _s2m4F::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mvm_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m4F::I64;
           if (R1 & 7 != 0) goto u2mvH; else goto c2mvt;
       u2mvH: // global
           call _c2mvm(R1) args: 0, res: 0, upd: 0;
       c2mvt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mvm() //  [R1]
         { info_tbl: [(c2mvm,
                       label: block_c2mvm_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mvm: // global
           R1 = I64[(%MO_S_Lt_W64(I64[Sp + 8],
                                  %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20])) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.685684925 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_$cmin_closure" {
     GHC.Unicode.$fOrdGeneralCategory_$cmin_closure:
         const GHC.Unicode.$fOrdGeneralCategory_$cmin_info;
 },
 GHC.Unicode.$fOrdGeneralCategory_$cmin_entry() //  [R2, R3]
         { info_tbl: [(c2mwh,
                       label: GHC.Unicode.$fOrdGeneralCategory_$cmin_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mwh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c2mwn; else goto c2mwo;
       c2mwn: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fOrdGeneralCategory_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2mwo: // global
           I64[Sp - 24] = block_c2mwd_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2mwM; else goto c2mwe;
       u2mwM: // global
           call _c2mwd(R1) args: 0, res: 0, upd: 0;
       c2mwe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mwd() //  [R1]
         { info_tbl: [(c2mwd,
                       label: block_c2mwd_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mwd: // global
           _s2m4M::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp - 8] = block_c2mwm_info;
           R1 = P64[Sp + 8];
           I64[Sp] = _s2m4M::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mwL; else goto c2mwt;
       u2mwL: // global
           call _c2mwm(R1) args: 0, res: 0, upd: 0;
       c2mwt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mwm() //  [R1]
         { info_tbl: [(c2mwm,
                       label: block_c2mwm_info
                       rep:StackRep [True, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mwm: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]))) goto c2mwH; else goto c2mwI;
       c2mwH: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2mwI: // global
           R1 = P64[Sp + 24] & (-8);
           Sp = Sp + 32;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.693296263 UTC

[section ""data" . GHC.Unicode.$fOrdGeneralCategory_closure" {
     GHC.Unicode.$fOrdGeneralCategory_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.Unicode.$fEqGeneralCategory_closure+1;
         const GHC.Unicode.$fOrdGeneralCategory_$ccompare_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c<_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c<=_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c>_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$c>=_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$cmax_closure+2;
         const GHC.Unicode.$fOrdGeneralCategory_$cmin_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.696203585 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_info;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_entry() //  [R2]
         { info_tbl: [(c2mxm,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mxm: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2mxs; else goto c2mxt;
       c2mxs: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mxt: // global
           I64[Sp - 8] = block_c2mxi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mxE; else goto c2mxj;
       u2mxE: // global
           call _c2mxi(R1) args: 0, res: 0, upd: 0;
       c2mxj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mxi() //  [R1]
         { info_tbl: [(c2mxi,
                       label: block_c2mxi_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mxi: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2mxp() args: 0, res: 0, upd: 0;
     }
 },
 _c2mxp() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mxp: // global
           Hp = Hp + 16;
           _s2m4S::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2mxz; else goto c2mxy;
       c2mxz: // global
           HpAlloc = 16;
           I64[Sp] = block_c2mxo_info;
           R1 = _s2m4S::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2mxy: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2m4S::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2mxo() //  [R1]
         { info_tbl: [(c2mxo,
                       label: block_c2mxo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mxo: // global
           I64[Sp] = R1;
           call _c2mxp() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.705147194 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_entry() //  [R2, R3]
         { info_tbl: [(c2my9,
                       label: GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2my9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2myw; else goto c2myx;
       c2myw: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2myx: // global
           I64[Sp - 16] = block_c2my6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2myO; else goto c2my7;
       u2myO: // global
           call _c2my6(R1) args: 0, res: 0, upd: 0;
       c2my7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2my6() //  [R1]
         { info_tbl: [(c2my6,
                       label: block_c2my6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2my6: // global
           I64[Sp] = block_c2myc_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto u2myN; else goto c2myd;
       u2myN: // global
           call _c2myc(R1) args: 0, res: 0, upd: 0;
       c2myd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2myc() //  [R1]
         { info_tbl: [(c2myc,
                       label: block_c2myc_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2myc: // global
           _s2m4Z::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2myk_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m4Z::I64;
           if (R1 & 7 != 0) goto u2myP; else goto c2myl;
       u2myP: // global
           call _c2myk(R1) args: 0, res: 0, upd: 0;
       c2myl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2myk() //  [R1]
         { info_tbl: [(c2myk,
                       label: block_c2myk_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2myk: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2myq() args: 0, res: 0, upd: 0;
     }
 },
 _c2myq() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2myq: // global
           Hp = Hp + 16;
           _s2m51::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2myI; else goto c2myH;
       c2myI: // global
           HpAlloc = 16;
           I64[Sp] = block_c2myp_info;
           R1 = _s2m51::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2myH: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2m51::I64 - I64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2myp() //  [R1]
         { info_tbl: [(c2myp,
                       label: block_c2myp_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2myp: // global
           I64[Sp] = R1;
           call _c2myq() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.717326106 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cinRange_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cinRange_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cinRange_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$cinRange_entry() //  [R2, R3]
         { info_tbl: [(c2mzA,
                       label: GHC.Unicode.$fIxGeneralCategory_$cinRange_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mzA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2mzU; else goto c2mzV;
       c2mzU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2mzV: // global
           I64[Sp - 16] = block_c2mzx_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2mAs; else goto c2mzy;
       u2mAs: // global
           call _c2mzx(R1) args: 0, res: 0, upd: 0;
       c2mzy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mzx() //  [R1]
         { info_tbl: [(c2mzx,
                       label: block_c2mzx_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mzx: // global
           I64[Sp - 8] = block_c2mzD_info;
           _s2m57::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2m57::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mAr; else goto c2mzE;
       u2mAr: // global
           call _c2mzD(R1) args: 0, res: 0, upd: 0;
       c2mzE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mzD() //  [R1]
         { info_tbl: [(c2mzD,
                       label: block_c2mzD_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mzD: // global
           _s2m59::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mzL_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m59::I64;
           if (R1 & 7 != 0) goto u2mAt; else goto c2mzM;
       u2mAt: // global
           call _c2mzL(R1) args: 0, res: 0, upd: 0;
       c2mzM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mzL() //  [R1]
         { info_tbl: [(c2mzL,
                       label: block_c2mzL_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mzL: // global
           _s2m5b::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mzT_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2m5b::I64;
           if (R1 & 7 != 0) goto u2mAu; else goto c2mA5;
       u2mAu: // global
           call _c2mzT(R1) args: 0, res: 0, upd: 0;
       c2mA5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mzT() //  [R1]
         { info_tbl: [(c2mzT,
                       label: block_c2mzT_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mzT: // global
           _s2m5d::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           if (%MO_S_Lt_W64(_s2m5d::I64,
                            I64[Sp + 8])) goto c2mAj; else goto c2mAk;
       c2mAj: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mAk: // global
           R1 = I64[(%MO_S_Le_W64(_s2m5d::I64,
                                  I64[Sp + 16]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.730856756 UTC

[section ""data" . GHC.Unicode.$w$crange_closure" {
     GHC.Unicode.$w$crange_closure:
         const GHC.Unicode.$w$crange_info;
 },
 sat_s2m5s_entry() //  [R1]
         { info_tbl: [(c2mBK,
                       label: sat_s2m5s_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mBK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mBL; else goto c2mBM;
       c2mBL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mBM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2m5o::I64 = I64[R1 + 32];
           if (_s2m5o::I64 == I64[R1 + 24]) goto c2mBJ; else goto c2mBI;
       c2mBJ: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c2mBI: // global
           R2 = _s2m5o::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s2m5n_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m5p_entry() //  [R1]
         { info_tbl: [(c2mBT,
                       label: sat_s2m5p_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mBT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mBU; else goto c2mBV;
       c2mBU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mBV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_s2m5n_entry() //  [R1, R2]
         { info_tbl: [(c2mBX,
                       label: go_s2m5n_info
                       rep:HeapRep 1 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mBX: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2mC1; else goto c2mC0;
       c2mC1: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mC0: // global
           _s2m5l::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2m5s_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2m5l::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2m5p_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Unicode.$w$crange_entry() //  [R2, R3]
         { info_tbl: [(c2mC2,
                       label: GHC.Unicode.$w$crange_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mC2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mC3; else goto c2mC4;
       c2mC3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$w$crange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2mC4: // global
           I64[Sp - 16] = block_c2mBd_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2mCp; else goto c2mBe;
       u2mCp: // global
           call _c2mBd(R1) args: 0, res: 0, upd: 0;
       c2mBe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mBd() //  [R1]
         { info_tbl: [(c2mBd,
                       label: block_c2mBd_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mBd: // global
           _s2m5j::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mBl_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m5j::I64;
           if (R1 & 7 != 0) goto u2mCm; else goto c2mBm;
       u2mCm: // global
           call _c2mBl(R1) args: 0, res: 0, upd: 0;
       c2mBm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mBl() //  [R1]
         { info_tbl: [(c2mBl,
                       label: block_c2mBl_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mBl: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2mBr() args: 0, res: 0, upd: 0;
     }
 },
 _c2mBr() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mBr: // global
           Hp = Hp + 16;
           _s2m5l::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2mCe; else goto c2mCd;
       c2mCe: // global
           HpAlloc = 16;
           I64[Sp] = block_c2mBq_info;
           R1 = _s2m5l::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2mCd: // global
           _s2m5j::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s2m5j::I64,
                            _s2m5l::I64)) goto c2mCg; else goto c2mCh;
       c2mCg: // global
           I64[Hp - 8] = go_s2m5n_info;
           I64[Hp] = _s2m5l::I64;
           R2 = _s2m5j::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call go_s2m5n_entry(R2, R1) args: 8, res: 0, upd: 8;
       c2mCh: // global
           Hp = Hp - 16;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2mBq() //  [R1]
         { info_tbl: [(c2mBq,
                       label: block_c2mBq_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mBq: // global
           I64[Sp] = R1;
           call _c2mBr() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.747698552 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$crange_closure" {
     GHC.Unicode.$fIxGeneralCategory_$crange_closure:
         const GHC.Unicode.$fIxGeneralCategory_$crange_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$crange_entry() //  [R2]
         { info_tbl: [(c2mDq,
                       label: GHC.Unicode.$fIxGeneralCategory_$crange_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mDq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2mDr; else goto c2mDs;
       c2mDr: // global
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mDs: // global
           I64[Sp - 8] = block_c2mDn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mDw; else goto c2mDo;
       u2mDw: // global
           call _c2mDn(R1) args: 0, res: 0, upd: 0;
       c2mDo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mDn() //  [R1]
         { info_tbl: [(c2mDn,
                       label: block_c2mDn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mDn: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$w$crange_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.753747016 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure" {
     GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure:
         const GHC.Unicode.$fIxGeneralCategory_$crangeSize_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$crangeSize_entry() //  [R2]
         { info_tbl: [(c2mDO,
                       label: GHC.Unicode.$fIxGeneralCategory_$crangeSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mDO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mE0; else goto c2mE1;
       c2mE0: // global
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mE1: // global
           I64[Sp - 8] = block_c2mDL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mED; else goto c2mDM;
       u2mED: // global
           call _c2mDL(R1) args: 0, res: 0, upd: 0;
       c2mDM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mDL() //  [R1]
         { info_tbl: [(c2mDL,
                       label: block_c2mDL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mDL: // global
           I64[Sp - 8] = block_c2mDR_info;
           _s2m5A::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2m5A::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mEC; else goto c2mDS;
       u2mEC: // global
           call _c2mDR(R1) args: 0, res: 0, upd: 0;
       c2mDS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mDR() //  [R1]
         { info_tbl: [(c2mDR,
                       label: block_c2mDR_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mDR: // global
           _s2m5C::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mDZ_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m5C::I64;
           if (R1 & 7 != 0) goto u2mEE; else goto c2mE7;
       u2mEE: // global
           call _c2mDZ(R1) args: 0, res: 0, upd: 0;
       c2mE7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mDZ() //  [R1]
         { info_tbl: [(c2mDZ,
                       label: block_c2mDZ_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mDZ: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2mEf() args: 0, res: 0, upd: 0;
     }
 },
 _c2mEf() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mEf: // global
           Hp = Hp + 16;
           _s2m5E::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2mEj; else goto c2mEi;
       c2mEj: // global
           HpAlloc = 16;
           I64[Sp] = block_c2mEe_info;
           R1 = _s2m5E::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2mEi: // global
           _s2m5C::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(_s2m5E::I64,
                            _s2m5C::I64)) goto c2mEn; else goto c2mEx;
       c2mEn: // global
           Hp = Hp - 16;
           R1 = GHC.Unicode.$fShowGeneralCategory1_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mEx: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2m5E::I64 - _s2m5C::I64 + 1;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2mEe() //  [R1]
         { info_tbl: [(c2mEe,
                       label: block_c2mEe_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mEe: // global
           I64[Sp] = R1;
           call _c2mEf() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.766760522 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_info;
 },
 GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_entry() //  [R2]
         { info_tbl: [(c2mFr,
                       label: GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mFr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mFR; else goto c2mFS;
       c2mFR: // global
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mFS: // global
           I64[Sp - 8] = block_c2mFo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mG9; else goto c2mFp;
       u2mG9: // global
           call _c2mFo(R1) args: 0, res: 0, upd: 0;
       c2mFp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mFo() //  [R1]
         { info_tbl: [(c2mFo,
                       label: block_c2mFo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mFo: // global
           I64[Sp - 8] = block_c2mFu_info;
           _s2m5L::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2m5L::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mG8; else goto c2mFv;
       u2mG8: // global
           call _c2mFu(R1) args: 0, res: 0, upd: 0;
       c2mFv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mFu() //  [R1]
         { info_tbl: [(c2mFu,
                       label: block_c2mFu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mFu: // global
           _s2m5N::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mFC_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m5N::I64;
           if (R1 & 7 != 0) goto u2mGa; else goto c2mFD;
       u2mGa: // global
           call _c2mFC(R1) args: 0, res: 0, upd: 0;
       c2mFD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mFC() //  [R1]
         { info_tbl: [(c2mFC,
                       label: block_c2mFC_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mFC: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2mFI() args: 0, res: 0, upd: 0;
     }
 },
 _c2mFI() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mFI: // global
           Hp = Hp + 16;
           _s2m5P::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2mG3; else goto c2mG2;
       c2mG3: // global
           HpAlloc = 16;
           I64[Sp] = block_c2mFH_info;
           R1 = _s2m5P::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2mG2: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2m5P::I64 - I64[Sp + 8] + 1;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2mFH() //  [R1]
         { info_tbl: [(c2mFH,
                       label: block_c2mFH_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mFH: // global
           I64[Sp] = R1;
           call _c2mFI() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.779142893 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_$cindex_closure" {
     GHC.Unicode.$fIxGeneralCategory_$cindex_closure:
         const GHC.Unicode.$fIxGeneralCategory_$cindex_info;
         const 0;
 },
 GHC.Unicode.$fIxGeneralCategory_$cindex_entry() //  [R2, R3]
         { info_tbl: [(c2mGW,
                       label: GHC.Unicode.$fIxGeneralCategory_$cindex_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mGW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2mHg; else goto c2mHh;
       c2mHg: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fIxGeneralCategory_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2mHh: // global
           I64[Sp - 16] = block_c2mGT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2mI2; else goto c2mGU;
       u2mI2: // global
           call _c2mGT(R1) args: 0, res: 0, upd: 0;
       c2mGU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mGT() //  [R1]
         { info_tbl: [(c2mGT,
                       label: block_c2mGT_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mGT: // global
           I64[Sp - 8] = block_c2mGZ_info;
           _s2m5W::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s2m5W::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mI1; else goto c2mH0;
       u2mI1: // global
           call _c2mGZ(R1) args: 0, res: 0, upd: 0;
       c2mH0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mGZ() //  [R1]
         { info_tbl: [(c2mGZ,
                       label: block_c2mGZ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mGZ: // global
           _s2m5Y::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mH7_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m5Y::I64;
           if (R1 & 7 != 0) goto u2mI3; else goto c2mH8;
       u2mI3: // global
           call _c2mH7(R1) args: 0, res: 0, upd: 0;
       c2mH8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mH7() //  [R1]
         { info_tbl: [(c2mH7,
                       label: block_c2mH7_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mH7: // global
           _s2m60::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mHf_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2m60::I64;
           if (R1 & 7 != 0) goto u2mI4; else goto c2mHr;
       u2mI4: // global
           call _c2mHf(R1) args: 0, res: 0, upd: 0;
       c2mHr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mHf() //  [R1]
         { info_tbl: [(c2mHf,
                       label: block_c2mHf_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mHf: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2mHz() args: 0, res: 0, upd: 0;
     }
 },
 _c2mHz() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mHz: // global
           Hp = Hp + 16;
           _s2m62::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2mHD; else goto c2mHC;
       c2mHD: // global
           HpAlloc = 16;
           I64[Sp] = block_c2mHy_info;
           R1 = _s2m62::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2mHC: // global
           _s2m5Y::I64 = I64[Sp + 8];
           if (%MO_S_Lt_W64(_s2m62::I64,
                            _s2m5Y::I64)) goto c2mHN; else goto c2mHV;
       c2mHV: // global
           if (%MO_S_Gt_W64(_s2m62::I64,
                            I64[Sp + 16])) goto c2mHN; else goto c2mHU;
       c2mHN: // global
           Hp = Hp - 16;
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2mHU: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2m62::I64 - _s2m5Y::I64;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2mHy() //  [R1]
         { info_tbl: [(c2mHy,
                       label: block_c2mHy_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mHy: // global
           I64[Sp] = R1;
           call _c2mHz() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.793600061 UTC

[section ""data" . GHC.Unicode.$fIxGeneralCategory_closure" {
     GHC.Unicode.$fIxGeneralCategory_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.Unicode.$fOrdGeneralCategory_closure+1;
         const GHC.Unicode.$fIxGeneralCategory_$crange_closure+1;
         const GHC.Unicode.$fIxGeneralCategory_$cindex_closure+2;
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeIndex_closure+2;
         const GHC.Unicode.$fIxGeneralCategory_$cinRange_closure+2;
         const GHC.Unicode.$fIxGeneralCategory_$crangeSize_closure+1;
         const GHC.Unicode.$fIxGeneralCategory_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.795455245 UTC

[section ""cstring" . GHC.Unicode.$trModule4_bytes" {
     GHC.Unicode.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.797364819 UTC

[section ""data" . loc_r2j70_closure" {
     loc_r2j70_closure:
         const loc_r2j70_info;
         const 0;
         const 0;
         const 0;
 },
 loc_r2j70_entry() //  [R1]
         { info_tbl: [(c2mIZ,
                       label: loc_r2j70_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mIZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mJ0; else goto c2mJ1;
       c2mJ0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mJ1: // global
           (_c2mIW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mIW::I64 == 0) goto c2mIY; else goto c2mIX;
       c2mIY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mIX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mIW::I64;
           R2 = GHC.Unicode.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.801192193 UTC

[section ""cstring" . GHC.Unicode.$trModule2_bytes" {
     GHC.Unicode.$trModule2_bytes:
         I8[] [71,72,67,46,85,110,105,99,111,100,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.803306256 UTC

[section ""data" . loc1_r2j71_closure" {
     loc1_r2j71_closure:
         const loc1_r2j71_info;
         const 0;
         const 0;
         const 0;
 },
 loc1_r2j71_entry() //  [R1]
         { info_tbl: [(c2mJh,
                       label: loc1_r2j71_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mJh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mJi; else goto c2mJj;
       c2mJi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mJj: // global
           (_c2mJe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mJe::I64 == 0) goto c2mJg; else goto c2mJf;
       c2mJg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mJf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mJe::I64;
           R2 = GHC.Unicode.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.807065855 UTC

[section ""cstring" . loc2_r2j72_bytes" {
     loc2_r2j72_bytes:
         I8[] [46,47,71,72,67,47,85,110,105,99,111,100,101,46,104,115]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.808866702 UTC

[section ""data" . loc3_r2j73_closure" {
     loc3_r2j73_closure:
         const loc3_r2j73_info;
         const 0;
         const 0;
         const 0;
 },
 loc3_r2j73_entry() //  [R1]
         { info_tbl: [(c2mJz,
                       label: loc3_r2j73_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mJz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mJA; else goto c2mJB;
       c2mJA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mJB: // global
           (_c2mJw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mJw::I64 == 0) goto c2mJy; else goto c2mJx;
       c2mJy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mJx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mJw::I64;
           R2 = loc2_r2j72_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.813081541 UTC

[section ""data" . loc4_r2j74_closure" {
     loc4_r2j74_closure:
         const GHC.Types.I#_con_info;
         const 135;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.815294506 UTC

[section ""data" . loc5_r2j75_closure" {
     loc5_r2j75_closure:
         const GHC.Types.I#_con_info;
         const 20;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.816898852 UTC

[section ""data" . loc6_r2j76_closure" {
     loc6_r2j76_closure:
         const GHC.Types.I#_con_info;
         const 24;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.818449696 UTC

[section ""cstring" . $dIP_r2j77_bytes" {
     $dIP_r2j77_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.820338437 UTC

[section ""data" . $dIP1_r2j78_closure" {
     $dIP1_r2j78_closure:
         const $dIP1_r2j78_info;
         const 0;
         const 0;
         const 0;
 },
 $dIP1_r2j78_entry() //  [R1]
         { info_tbl: [(c2mJU,
                       label: $dIP1_r2j78_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mJU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mJV; else goto c2mJW;
       c2mJV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mJW: // global
           (_c2mJR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mJR::I64 == 0) goto c2mJT; else goto c2mJS;
       c2mJT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mJS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mJR::I64;
           R2 = $dIP_r2j77_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.824303178 UTC

[section ""data" . $dIP2_r2j79_closure" {
     $dIP2_r2j79_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const loc_r2j70_closure;
         const loc1_r2j71_closure;
         const loc3_r2j73_closure;
         const loc4_r2j74_closure+1;
         const loc5_r2j75_closure+1;
         const loc4_r2j74_closure+1;
         const loc6_r2j76_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.826652272 UTC

[section ""data" . $dIP3_r2j7a_closure" {
     $dIP3_r2j7a_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const $dIP1_r2j78_closure;
         const $dIP2_r2j79_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.828334367 UTC

[section ""cstring" . lvl60_r2j7b_bytes" {
     lvl60_r2j7b_bytes:
         I8[] [41,32,105,115,32,111,117,116,115,105,100,101,32,111,102,32,101,110,117,109,101,114,97,116,105,111,110,39,115,32,114,97,110,103,101,32,40,48,44]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.830006154 UTC

[section ""cstring" . lvl61_r2j7c_bytes" {
     lvl61_r2j7c_bytes:
         I8[] [41]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.831895644 UTC

[section ""data" . lvl62_r2j7d_closure" {
     lvl62_r2j7d_closure:
         const lvl62_r2j7d_info;
         const 0;
         const 0;
         const 0;
 },
 lvl62_r2j7d_entry() //  [R1]
         { info_tbl: [(c2mKf,
                       label: lvl62_r2j7d_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mKf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mKg; else goto c2mKh;
       c2mKg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mKh: // global
           (_c2mKc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mKc::I64 == 0) goto c2mKe; else goto c2mKd;
       c2mKe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mKd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mKc::I64;
           R2 = lvl61_r2j7c_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.836179755 UTC

[section ""data" . lvl63_r2j7e_closure" {
     lvl63_r2j7e_closure:
         const lvl63_r2j7e_info;
         const 0;
         const 0;
         const 0;
 },
 lvl63_r2j7e_entry() //  [R1]
         { info_tbl: [(c2mKz,
                       label: lvl63_r2j7e_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mKz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2mKA; else goto c2mKB;
       c2mKA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mKB: // global
           (_c2mKt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mKt::I64 == 0) goto c2mKv; else goto c2mKu;
       c2mKv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mKu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mKt::I64;
           I64[Sp - 24] = block_c2mKw_info;
           R4 = lvl62_r2j7d_closure;
           R3 = 29;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c2mKw() //  [R1, R2]
         { info_tbl: [(c2mKw,
                       label: block_c2mKw_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mKw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2mKE; else goto c2mKD;
       c2mKE: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c2mKD: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.842903161 UTC

[section ""data" . lvl64_r2j7f_closure" {
     lvl64_r2j7f_closure:
         const lvl64_r2j7f_info;
         const 0;
         const 0;
         const 0;
 },
 lvl64_r2j7f_entry() //  [R1]
         { info_tbl: [(c2mKZ,
                       label: lvl64_r2j7f_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mKZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mL0; else goto c2mL1;
       c2mL0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mL1: // global
           (_c2mKW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2mKW::I64 == 0) goto c2mKY; else goto c2mKX;
       c2mKY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2mKX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2mKW::I64;
           R3 = lvl63_r2j7e_closure;
           R2 = lvl60_r2j7b_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.846964218 UTC

[section ""cstring" . lvl65_r2j7g_bytes" {
     lvl65_r2j7g_bytes:
         I8[] [116,111,69,110,117,109,123,71,101,110,101,114,97,108,67,97,116,101,103,111,114,121,125,58,32,116,97,103,32,40]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.84914567 UTC

[section ""data" . GHC.Unicode.$wlvl_closure" {
     GHC.Unicode.$wlvl_closure:
         const GHC.Unicode.$wlvl_info;
         const 0;
 },
 sat_s2m6d_entry() //  [R1]
         { info_tbl: [(c2mLm,
                       label: sat_s2m6d_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mLm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2mLn; else goto c2mLo;
       c2mLn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mLo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c2mLj_info;
           R4 = lvl64_r2j7f_closure;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 _c2mLj() //  [R1, R2]
         { info_tbl: [(c2mLj,
                       label: block_c2mLj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mLj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2mLr; else goto c2mLq;
       c2mLr: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c2mLq: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Unicode.$wlvl_entry() //  [R2]
         { info_tbl: [(c2mLu,
                       label: GHC.Unicode.$wlvl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mLu: // global
           _s2m69::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c2mLv; else goto c2mLw;
       c2mLw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2mLy; else goto c2mLx;
       c2mLy: // global
           HpAlloc = 24;
           goto c2mLv;
       c2mLv: // global
           R2 = _s2m69::I64;
           R1 = GHC.Unicode.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mLx: // global
           I64[Hp - 16] = sat_s2m6d_info;
           I64[Hp] = _s2m69::I64;
           I64[Sp - 8] = block_c2mLs_info;
           R3 = Hp - 16;
           R2 = lvl65_r2j7g_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 _c2mLs() //  [R1]
         { info_tbl: [(c2mLs,
                       label: block_c2mLs_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mLs: // global
           R3 = R1;
           R2 = $dIP3_r2j7a_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.858746271 UTC

[section ""data" . GHC.Unicode.$w$ctoEnum_closure" {
     GHC.Unicode.$w$ctoEnum_closure:
         const GHC.Unicode.$w$ctoEnum_info;
         const 0;
 },
 GHC.Unicode.$w$ctoEnum_entry() //  [R2]
         { info_tbl: [(c2mM6,
                       label: GHC.Unicode.$w$ctoEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mM6: // global
           _s2m6f::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto c2mMe; else goto c2mM5;
       c2mM5: // global
           if (%MO_S_Gt_W64(_s2m6f::I64, 29)) goto c2mMe; else goto c2mMf;
       c2mMe: // global
           R2 = _s2m6f::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2mMf: // global
           R1 = I64[(_s2m6f::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.862615062 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_info;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_entry() //  [R2]
         { info_tbl: [(c2mMu,
                       label: GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mMu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2mMv; else goto c2mMw;
       c2mMv: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mMw: // global
           I64[Sp - 8] = block_c2mMr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mMA; else goto c2mMs;
       u2mMA: // global
           call _c2mMr(R1) args: 0, res: 0, upd: 0;
       c2mMs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mMr() //  [R1]
         { info_tbl: [(c2mMr,
                       label: block_c2mMr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mMr: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$w$ctoEnum_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.868331255 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_go_closure" {
     GHC.Unicode.$fEnumGeneralCategory_go_closure:
         const GHC.Unicode.$fEnumGeneralCategory_go_info;
 },
 sat_s2m6p_entry() //  [R1]
         { info_tbl: [(c2mMX,
                       label: sat_s2m6p_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mMX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mMY; else goto c2mMZ;
       c2mMY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mMZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2m6n::I64 = I64[R1 + 16];
           if (_s2m6n::I64 != 29) goto c2mMV; else goto c2mMW;
       c2mMV: // global
           R2 = _s2m6n::I64 + 1;
           Sp = Sp - 16;
           call GHC.Unicode.$fEnumGeneralCategory_go_entry(R2) args: 24, res: 0, upd: 24;
       c2mMW: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m6m_entry() //  [R1]
         { info_tbl: [(c2mN6,
                       label: sat_s2m6m_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mN6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mN7; else goto c2mN8;
       c2mN7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mN8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Unicode.$fEnumGeneralCategory_go_entry() //  [R2]
         { info_tbl: [(c2mNa,
                       label: GHC.Unicode.$fEnumGeneralCategory_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mNa: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c2mNe; else goto c2mNd;
       c2mNe: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mNd: // global
           I64[Hp - 64] = sat_s2m6p_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2m6m_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.87713749 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_info;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_entry() //  [R2]
         { info_tbl: [(c2mNM,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mNM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2mNN; else goto c2mNO;
       c2mNN: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mNO: // global
           I64[Sp - 8] = block_c2mNI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2mO3; else goto c2mNJ;
       u2mO3: // global
           call _c2mNI(R1) args: 0, res: 0, upd: 0;
       c2mNJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mNI() //  [R1]
         { info_tbl: [(c2mNI,
                       label: block_c2mNI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mNI: // global
           _s2m6s::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           if (%MO_S_Le_W64(_s2m6s::I64, 29)) goto c2mO0; else goto c2mO1;
       c2mO0: // global
           R2 = _s2m6s::I64;
           Sp = Sp + 8;
           call GHC.Unicode.$fEnumGeneralCategory_go_entry(R2) args: 8, res: 0, upd: 8;
       c2mO1: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.887954247 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_info;
 },
 sat_s2m6L_entry() //  [R1]
         { info_tbl: [(c2mPa,
                       label: sat_s2m6L_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mPa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mPb; else goto c2mPc;
       c2mPb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mPc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s2m6G_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m6J_entry() //  [R1]
         { info_tbl: [(c2mPh,
                       label: sat_s2m6J_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mPh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mPi; else goto c2mPj;
       c2mPi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mPj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m6M_entry() //  [R1]
         { info_tbl: [(c2mPp,
                       label: sat_s2m6M_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mPp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mPq; else goto c2mPr;
       c2mPq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mPr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s2m6G_entry() //  [R1, R2]
         { info_tbl: [(c2mPv,
                       label: go_dn_s2m6G_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mPv: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2mPz; else goto c2mPy;
       c2mPz: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mPy: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c2mPt; else goto c2mPu;
       c2mPt: // global
           _s2m6E::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2m6L_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2m6E::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2m6J_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mPu: // global
           I64[Hp - 80] = sat_s2m6M_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2mPB::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2mPB::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2m6N_entry() //  [R1]
         { info_tbl: [(c2mPC,
                       label: sat_s2m6N_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mPC: // global
           _s2m6N::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2mPD; else goto c2mPE;
       c2mPE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2mPG; else goto c2mPF;
       c2mPG: // global
           HpAlloc = 24;
           goto c2mPD;
       c2mPD: // global
           R1 = _s2m6N::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mPF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2m6N::P64;
           _s2m6z::I64 = I64[_s2m6N::P64 + 24];
           _s2m6E::I64 = _s2m6z::I64 - I64[_s2m6N::P64 + 16];
           I64[Hp - 16] = go_dn_s2m6G_info;
           I64[Hp - 8] = _s2m6E::I64;
           I64[Hp] = 29 - _s2m6E::I64;
           R2 = _s2m6z::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s2m6G_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m6D_entry() //  [R1]
         { info_tbl: [(c2mPL,
                       label: sat_s2m6D_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mPL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mPM; else goto c2mPN;
       c2mPM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mPN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m6P_entry() //  [R1]
         { info_tbl: [(c2mPW,
                       label: sat_s2m6P_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mPW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mPX; else goto c2mPY;
       c2mPX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mPY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m6Z_entry() //  [R1]
         { info_tbl: [(c2mQr,
                       label: sat_s2m6Z_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mQr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mQs; else goto c2mQt;
       c2mQs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mQt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s2m6U_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m6X_entry() //  [R1]
         { info_tbl: [(c2mQy,
                       label: sat_s2m6X_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mQy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mQz; else goto c2mQA;
       c2mQz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mQA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m70_entry() //  [R1]
         { info_tbl: [(c2mQG,
                       label: sat_s2m70_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mQG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mQH; else goto c2mQI;
       c2mQH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mQI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s2m6U_entry() //  [R1, R2]
         { info_tbl: [(c2mQM,
                       label: go_up_s2m6U_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mQM: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2mQQ; else goto c2mQP;
       c2mQQ: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mQP: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c2mQK; else goto c2mQL;
       c2mQK: // global
           _s2m6S::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2m6Z_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2m6S::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2m6X_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mQL: // global
           I64[Hp - 80] = sat_s2m70_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2mQS::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2mQS::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2m71_entry() //  [R1]
         { info_tbl: [(c2mQT,
                       label: sat_s2m71_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mQT: // global
           _s2m71::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2mQU; else goto c2mQV;
       c2mQV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2mQX; else goto c2mQW;
       c2mQX: // global
           HpAlloc = 24;
           goto c2mQU;
       c2mQU: // global
           R1 = _s2m71::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mQW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2m71::P64;
           _s2m6z::I64 = I64[_s2m71::P64 + 24];
           _s2m6S::I64 = _s2m6z::I64 - I64[_s2m71::P64 + 16];
           I64[Hp - 16] = go_up_s2m6U_info;
           I64[Hp - 8] = _s2m6S::I64;
           I64[Hp] = 29 - _s2m6S::I64;
           R2 = _s2m6z::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s2m6U_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m6R_entry() //  [R1]
         { info_tbl: [(c2mR2,
                       label: sat_s2m6R_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mR2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mR3; else goto c2mR4;
       c2mR3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mR4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m73_entry() //  [R1]
         { info_tbl: [(c2mRd,
                       label: sat_s2m73_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mRd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mRe; else goto c2mRf;
       c2mRe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mRf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m7e_entry() //  [R1]
         { info_tbl: [(c2mRL,
                       label: sat_s2m7e_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mRL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mRM; else goto c2mRN;
       c2mRM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mRN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s2m79_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m7c_entry() //  [R1]
         { info_tbl: [(c2mRS,
                       label: sat_s2m7c_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mRS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mRT; else goto c2mRU;
       c2mRT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mRU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m7f_entry() //  [R1]
         { info_tbl: [(c2mS0,
                       label: sat_s2m7f_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mS0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mS1; else goto c2mS2;
       c2mS1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mS2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s2m79_entry() //  [R1, R2]
         { info_tbl: [(c2mS6,
                       label: go_dn_s2m79_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mS6: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2mSa; else goto c2mS9;
       c2mSa: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mS9: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c2mS4; else goto c2mS5;
       c2mS4: // global
           _s2m77::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2m7e_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2m77::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2m7c_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mS5: // global
           I64[Hp - 80] = sat_s2m7f_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2mSc::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2mSc::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2m7g_entry() //  [R1]
         { info_tbl: [(c2mSd,
                       label: sat_s2m7g_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mSd: // global
           _s2m7g::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2mSe; else goto c2mSf;
       c2mSf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2mSh; else goto c2mSg;
       c2mSh: // global
           HpAlloc = 24;
           goto c2mSe;
       c2mSe: // global
           R1 = _s2m7g::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mSg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2m7g::P64;
           _s2m6z::I64 = I64[_s2m7g::P64 + 24];
           _s2m77::I64 = _s2m6z::I64 - I64[_s2m7g::P64 + 16];
           I64[Hp - 16] = go_dn_s2m79_info;
           I64[Hp - 8] = _s2m77::I64;
           I64[Hp] = 0 - _s2m77::I64;
           R2 = _s2m6z::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s2m79_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m76_entry() //  [R1]
         { info_tbl: [(c2mSm,
                       label: sat_s2m76_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mSm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mSn; else goto c2mSo;
       c2mSn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mSo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m7i_entry() //  [R1]
         { info_tbl: [(c2mSx,
                       label: sat_s2m7i_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mSx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mSy; else goto c2mSz;
       c2mSy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mSz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m7s_entry() //  [R1]
         { info_tbl: [(c2mT2,
                       label: sat_s2m7s_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mT2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mT3; else goto c2mT4;
       c2mT3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mT4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s2m7n_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m7q_entry() //  [R1]
         { info_tbl: [(c2mT9,
                       label: sat_s2m7q_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mT9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mTa; else goto c2mTb;
       c2mTa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mTb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m7t_entry() //  [R1]
         { info_tbl: [(c2mTh,
                       label: sat_s2m7t_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mTh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mTi; else goto c2mTj;
       c2mTi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mTj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s2m7n_entry() //  [R1, R2]
         { info_tbl: [(c2mTn,
                       label: go_up_s2m7n_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mTn: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2mTr; else goto c2mTq;
       c2mTr: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2mTq: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c2mTl; else goto c2mTm;
       c2mTl: // global
           _s2m7l::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2m7s_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2m7l::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2m7q_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mTm: // global
           I64[Hp - 80] = sat_s2m7t_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2mTt::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2mTt::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2m7u_entry() //  [R1]
         { info_tbl: [(c2mTu,
                       label: sat_s2m7u_info
                       rep:HeapRep 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mTu: // global
           _s2m7u::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2mTv; else goto c2mTw;
       c2mTw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2mTy; else goto c2mTx;
       c2mTy: // global
           HpAlloc = 24;
           goto c2mTv;
       c2mTv: // global
           R1 = _s2m7u::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mTx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2m7u::P64;
           _s2m6z::I64 = I64[_s2m7u::P64 + 24];
           _s2m7l::I64 = _s2m6z::I64 - I64[_s2m7u::P64 + 16];
           I64[Hp - 16] = go_up_s2m7n_info;
           I64[Hp - 8] = _s2m7l::I64;
           I64[Hp] = 0 - _s2m7l::I64;
           R2 = _s2m6z::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s2m7n_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m7k_entry() //  [R1]
         { info_tbl: [(c2mTD,
                       label: sat_s2m7k_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mTD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mTE; else goto c2mTF;
       c2mTE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mTF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m7w_entry() //  [R1]
         { info_tbl: [(c2mTO,
                       label: sat_s2m7w_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mTO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mTP; else goto c2mTQ;
       c2mTP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2mTQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_entry() //  [R2,
                                                               R3]
         { info_tbl: [(c2mTR,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mTR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2mTS; else goto c2mTT;
       c2mTS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2mTT: // global
           I64[Sp - 16] = block_c2mOn_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2mUQ; else goto c2mOo;
       u2mUQ: // global
           call _c2mOn(R1) args: 0, res: 0, upd: 0;
       c2mOo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mOn() //  [R1]
         { info_tbl: [(c2mOn,
                       label: block_c2mOn_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mOn: // global
           _s2m6x::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2mOv_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m6x::I64;
           if (R1 & 7 != 0) goto u2mUN; else goto c2mOw;
       u2mUN: // global
           call _c2mOv(R1) args: 0, res: 0, upd: 0;
       c2mOw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2mOv() //  [R1]
         { info_tbl: [(c2mOv,
                       label: block_c2mOv_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mOv: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2mOB() args: 0, res: 0, upd: 0;
     }
 },
 _c2mOB() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mOB: // global
           Hp = Hp + 80;
           _s2m6z::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2mU3; else goto c2mU2;
       c2mU3: // global
           HpAlloc = 80;
           I64[Sp] = block_c2mOA_info;
           R1 = _s2m6z::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2mU2: // global
           _s2m6x::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s2m6x::I64,
                            _s2m6z::I64)) goto c2mUo; else goto c2mUI;
       c2mUo: // global
           if (%MO_S_Lt_W64(_s2m6z::I64,
                            _s2m6x::I64)) goto c2mUd; else goto c2mUm;
       c2mUd: // global
           if (%MO_S_Le_W64(29, _s2m6z::I64)) goto c2mU6; else goto c2mUb;
       c2mU6: // global
           I64[Hp - 72] = sat_s2m6N_info;
           I64[Hp - 56] = _s2m6x::I64;
           I64[Hp - 48] = _s2m6z::I64;
           I64[Hp - 40] = sat_s2m6D_info;
           I64[Hp - 24] = _s2m6x::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mUb: // global
           if (%MO_S_Gt_W64(29, _s2m6x::I64)) goto c2mUF; else goto c2mU9;
       c2mU9: // global
           I64[Hp - 72] = sat_s2m6P_info;
           I64[Hp - 56] = _s2m6x::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2mU7::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2mU7::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mUm: // global
           if (%MO_S_Ge_W64(29, _s2m6z::I64)) goto c2mUg; else goto c2mUl;
       c2mUg: // global
           I64[Hp - 72] = sat_s2m71_info;
           I64[Hp - 56] = _s2m6x::I64;
           I64[Hp - 48] = _s2m6z::I64;
           I64[Hp - 40] = sat_s2m6R_info;
           I64[Hp - 24] = _s2m6x::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mUl: // global
           if (%MO_S_Lt_W64(29, _s2m6x::I64)) goto c2mUF; else goto c2mUj;
       c2mUj: // global
           I64[Hp - 72] = sat_s2m73_info;
           I64[Hp - 56] = _s2m6x::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2mUh::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2mUh::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mUI: // global
           if (%MO_S_Lt_W64(_s2m6z::I64,
                            _s2m6x::I64)) goto c2mUy; else goto c2mUH;
       c2mUy: // global
           if (%MO_S_Le_W64(0, _s2m6z::I64)) goto c2mUr; else goto c2mUw;
       c2mUr: // global
           I64[Hp - 72] = sat_s2m7g_info;
           I64[Hp - 56] = _s2m6x::I64;
           I64[Hp - 48] = _s2m6z::I64;
           I64[Hp - 40] = sat_s2m76_info;
           I64[Hp - 24] = _s2m6x::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mUw: // global
           if (%MO_S_Gt_W64(0, _s2m6x::I64)) goto c2mUF; else goto c2mUu;
       c2mUu: // global
           I64[Hp - 72] = sat_s2m7i_info;
           I64[Hp - 56] = _s2m6x::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2mUs::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2mUs::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mUH: // global
           if (%MO_S_Ge_W64(0, _s2m6z::I64)) goto c2mUB; else goto c2mUG;
       c2mUB: // global
           I64[Hp - 72] = sat_s2m7u_info;
           I64[Hp - 56] = _s2m6x::I64;
           I64[Hp - 48] = _s2m6z::I64;
           I64[Hp - 40] = sat_s2m7k_info;
           I64[Hp - 24] = _s2m6x::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mUG: // global
           if (%MO_S_Lt_W64(0, _s2m6x::I64)) goto c2mUF; else goto c2mUE;
       c2mUF: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2mUE: // global
           I64[Hp - 72] = sat_s2m7w_info;
           I64[Hp - 56] = _s2m6x::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c2mUC::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c2mUC::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2mOA() //  [R1]
         { info_tbl: [(c2mOA,
                       label: block_c2mOA_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2mOA: // global
           I64[Sp] = R1;
           call _c2mOB() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.960896274 UTC

[section ""data" . GHC.Unicode.$trModule3_closure" {
     GHC.Unicode.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.962736089 UTC

[section ""data" . GHC.Unicode.$trModule1_closure" {
     GHC.Unicode.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.964366036 UTC

[section ""data" . GHC.Unicode.$trModule_closure" {
     GHC.Unicode.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Unicode.$trModule3_closure+1;
         const GHC.Unicode.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.966106763 UTC

[section ""cstring" . GHC.Unicode.$tcGeneralCategory2_bytes" {
     GHC.Unicode.$tcGeneralCategory2_bytes:
         I8[] [71,101,110,101,114,97,108,67,97,116,101,103,111,114,121]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.967752591 UTC

[section ""data" . GHC.Unicode.$tcGeneralCategory1_closure" {
     GHC.Unicode.$tcGeneralCategory1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tcGeneralCategory2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.969941559 UTC

[section ""data" . GHC.Unicode.$tcGeneralCategory_closure" {
     GHC.Unicode.$tcGeneralCategory_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tcGeneralCategory1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10145990250269206894;
         const 14660269375011335890;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.971748098 UTC

[section ""data" . GHC.Unicode.$tc'ClosePunctuation1_closure" {
     GHC.Unicode.$tc'ClosePunctuation1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Unicode.$tcGeneralCategory_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.973494089 UTC

[section ""cstring" . GHC.Unicode.$tc'UppercaseLetter2_bytes" {
     GHC.Unicode.$tc'UppercaseLetter2_bytes:
         I8[] [39,85,112,112,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.975151097 UTC

[section ""data" . GHC.Unicode.$tc'UppercaseLetter1_closure" {
     GHC.Unicode.$tc'UppercaseLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'UppercaseLetter2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.976873717 UTC

[section ""data" . GHC.Unicode.$tc'UppercaseLetter_closure" {
     GHC.Unicode.$tc'UppercaseLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'UppercaseLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 14647285109492872061;
         const 14425225614845259385;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.978670149 UTC

[section ""cstring" . GHC.Unicode.$tc'LowercaseLetter2_bytes" {
     GHC.Unicode.$tc'LowercaseLetter2_bytes:
         I8[] [39,76,111,119,101,114,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.980302096 UTC

[section ""data" . GHC.Unicode.$tc'LowercaseLetter1_closure" {
     GHC.Unicode.$tc'LowercaseLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'LowercaseLetter2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.982088858 UTC

[section ""data" . GHC.Unicode.$tc'LowercaseLetter_closure" {
     GHC.Unicode.$tc'LowercaseLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'LowercaseLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 6843638521722139917;
         const 11845029203120951590;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.983851914 UTC

[section ""cstring" . GHC.Unicode.$tc'TitlecaseLetter2_bytes" {
     GHC.Unicode.$tc'TitlecaseLetter2_bytes:
         I8[] [39,84,105,116,108,101,99,97,115,101,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.985946785 UTC

[section ""data" . GHC.Unicode.$tc'TitlecaseLetter1_closure" {
     GHC.Unicode.$tc'TitlecaseLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'TitlecaseLetter2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.987570306 UTC

[section ""data" . GHC.Unicode.$tc'TitlecaseLetter_closure" {
     GHC.Unicode.$tc'TitlecaseLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'TitlecaseLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11035134207864173010;
         const 10162510539839760824;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.989363178 UTC

[section ""cstring" . GHC.Unicode.$tc'ModifierLetter2_bytes" {
     GHC.Unicode.$tc'ModifierLetter2_bytes:
         I8[] [39,77,111,100,105,102,105,101,114,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.990956512 UTC

[section ""data" . GHC.Unicode.$tc'ModifierLetter1_closure" {
     GHC.Unicode.$tc'ModifierLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ModifierLetter2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.992565907 UTC

[section ""data" . GHC.Unicode.$tc'ModifierLetter_closure" {
     GHC.Unicode.$tc'ModifierLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ModifierLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 9531845544999081993;
         const 15142721146394159202;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.994390643 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherLetter2_bytes" {
     GHC.Unicode.$tc'OtherLetter2_bytes:
         I8[] [39,79,116,104,101,114,76,101,116,116,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.995984975 UTC

[section ""data" . GHC.Unicode.$tc'OtherLetter1_closure" {
     GHC.Unicode.$tc'OtherLetter1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherLetter2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.99797483 UTC

[section ""data" . GHC.Unicode.$tc'OtherLetter_closure" {
     GHC.Unicode.$tc'OtherLetter_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherLetter1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 4852466454551376074;
         const 478150797319163725;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:06.999653983 UTC

[section ""cstring" . GHC.Unicode.$tc'NonSpacingMark2_bytes" {
     GHC.Unicode.$tc'NonSpacingMark2_bytes:
         I8[] [39,78,111,110,83,112,97,99,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.00122172 UTC

[section ""data" . GHC.Unicode.$tc'NonSpacingMark1_closure" {
     GHC.Unicode.$tc'NonSpacingMark1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'NonSpacingMark2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.002874058 UTC

[section ""data" . GHC.Unicode.$tc'NonSpacingMark_closure" {
     GHC.Unicode.$tc'NonSpacingMark_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'NonSpacingMark1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11798799283128539890;
         const 8595267121230037978;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.004665398 UTC

[section ""cstring" . GHC.Unicode.$tc'SpacingCombiningMark2_bytes" {
     GHC.Unicode.$tc'SpacingCombiningMark2_bytes:
         I8[] [39,83,112,97,99,105,110,103,67,111,109,98,105,110,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.006236679 UTC

[section ""data" . GHC.Unicode.$tc'SpacingCombiningMark1_closure" {
     GHC.Unicode.$tc'SpacingCombiningMark1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'SpacingCombiningMark2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.007971408 UTC

[section ""data" . GHC.Unicode.$tc'SpacingCombiningMark_closure" {
     GHC.Unicode.$tc'SpacingCombiningMark_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'SpacingCombiningMark1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 161806050746895686;
         const 6274417789988196957;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.009856974 UTC

[section ""cstring" . GHC.Unicode.$tc'EnclosingMark2_bytes" {
     GHC.Unicode.$tc'EnclosingMark2_bytes:
         I8[] [39,69,110,99,108,111,115,105,110,103,77,97,114,107]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.012010557 UTC

[section ""data" . GHC.Unicode.$tc'EnclosingMark1_closure" {
     GHC.Unicode.$tc'EnclosingMark1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'EnclosingMark2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.01401642 UTC

[section ""data" . GHC.Unicode.$tc'EnclosingMark_closure" {
     GHC.Unicode.$tc'EnclosingMark_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'EnclosingMark1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 18110486507519489617;
         const 1830565827398073667;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.01575238 UTC

[section ""cstring" . GHC.Unicode.$tc'DecimalNumber2_bytes" {
     GHC.Unicode.$tc'DecimalNumber2_bytes:
         I8[] [39,68,101,99,105,109,97,108,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.017316647 UTC

[section ""data" . GHC.Unicode.$tc'DecimalNumber1_closure" {
     GHC.Unicode.$tc'DecimalNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'DecimalNumber2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.01899592 UTC

[section ""data" . GHC.Unicode.$tc'DecimalNumber_closure" {
     GHC.Unicode.$tc'DecimalNumber_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'DecimalNumber1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 7339032513903136575;
         const 4295356444207098462;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.020718024 UTC

[section ""cstring" . GHC.Unicode.$tc'LetterNumber2_bytes" {
     GHC.Unicode.$tc'LetterNumber2_bytes:
         I8[] [39,76,101,116,116,101,114,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.022356391 UTC

[section ""data" . GHC.Unicode.$tc'LetterNumber1_closure" {
     GHC.Unicode.$tc'LetterNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'LetterNumber2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.02397376 UTC

[section ""data" . GHC.Unicode.$tc'LetterNumber_closure" {
     GHC.Unicode.$tc'LetterNumber_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'LetterNumber1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 10629256336866531923;
         const 16896950428492761972;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.026274002 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherNumber2_bytes" {
     GHC.Unicode.$tc'OtherNumber2_bytes:
         I8[] [39,79,116,104,101,114,78,117,109,98,101,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.027925869 UTC

[section ""data" . GHC.Unicode.$tc'OtherNumber1_closure" {
     GHC.Unicode.$tc'OtherNumber1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherNumber2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.029592484 UTC

[section ""data" . GHC.Unicode.$tc'OtherNumber_closure" {
     GHC.Unicode.$tc'OtherNumber_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherNumber1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 10187389108931559810;
         const 2377339607923931442;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.031425285 UTC

[section ""cstring" . GHC.Unicode.$tc'ConnectorPunctuation2_bytes" {
     GHC.Unicode.$tc'ConnectorPunctuation2_bytes:
         I8[] [39,67,111,110,110,101,99,116,111,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.033083034 UTC

[section ""data" . GHC.Unicode.$tc'ConnectorPunctuation1_closure" {
     GHC.Unicode.$tc'ConnectorPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ConnectorPunctuation2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.034831539 UTC

[section ""data" . GHC.Unicode.$tc'ConnectorPunctuation_closure" {
     GHC.Unicode.$tc'ConnectorPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ConnectorPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 4917643529853318260;
         const 11665519332165151523;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.037213795 UTC

[section ""cstring" . GHC.Unicode.$tc'DashPunctuation2_bytes" {
     GHC.Unicode.$tc'DashPunctuation2_bytes:
         I8[] [39,68,97,115,104,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.039352597 UTC

[section ""data" . GHC.Unicode.$tc'DashPunctuation1_closure" {
     GHC.Unicode.$tc'DashPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'DashPunctuation2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.040976913 UTC

[section ""data" . GHC.Unicode.$tc'DashPunctuation_closure" {
     GHC.Unicode.$tc'DashPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'DashPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 10309144240368445329;
         const 13155144127162508040;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.042769844 UTC

[section ""cstring" . GHC.Unicode.$tc'OpenPunctuation2_bytes" {
     GHC.Unicode.$tc'OpenPunctuation2_bytes:
         I8[] [39,79,112,101,110,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.044267558 UTC

[section ""data" . GHC.Unicode.$tc'OpenPunctuation1_closure" {
     GHC.Unicode.$tc'OpenPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OpenPunctuation2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.045906987 UTC

[section ""data" . GHC.Unicode.$tc'OpenPunctuation_closure" {
     GHC.Unicode.$tc'OpenPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OpenPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11156540492509602203;
         const 14579738194966332373;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.047624524 UTC

[section ""cstring" . GHC.Unicode.$tc'ClosePunctuation3_bytes" {
     GHC.Unicode.$tc'ClosePunctuation3_bytes:
         I8[] [39,67,108,111,115,101,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.049210585 UTC

[section ""data" . GHC.Unicode.$tc'ClosePunctuation2_closure" {
     GHC.Unicode.$tc'ClosePunctuation2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ClosePunctuation3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.051081066 UTC

[section ""data" . GHC.Unicode.$tc'ClosePunctuation_closure" {
     GHC.Unicode.$tc'ClosePunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation2_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 2732552725164352280;
         const 2123618155201944931;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.052811054 UTC

[section ""cstring" . GHC.Unicode.$tc'InitialQuote2_bytes" {
     GHC.Unicode.$tc'InitialQuote2_bytes:
         I8[] [39,73,110,105,116,105,97,108,81,117,111,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.054434455 UTC

[section ""data" . GHC.Unicode.$tc'InitialQuote1_closure" {
     GHC.Unicode.$tc'InitialQuote1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'InitialQuote2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.056075497 UTC

[section ""data" . GHC.Unicode.$tc'InitialQuote_closure" {
     GHC.Unicode.$tc'InitialQuote_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'InitialQuote1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 15372309041196331722;
         const 15030215702152843543;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.05786804 UTC

[section ""cstring" . GHC.Unicode.$tc'FinalQuote2_bytes" {
     GHC.Unicode.$tc'FinalQuote2_bytes:
         I8[] [39,70,105,110,97,108,81,117,111,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.059445981 UTC

[section ""data" . GHC.Unicode.$tc'FinalQuote1_closure" {
     GHC.Unicode.$tc'FinalQuote1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'FinalQuote2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.061702533 UTC

[section ""data" . GHC.Unicode.$tc'FinalQuote_closure" {
     GHC.Unicode.$tc'FinalQuote_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'FinalQuote1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 7492133048483711520;
         const 4486297505861009288;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.06340345 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherPunctuation2_bytes" {
     GHC.Unicode.$tc'OtherPunctuation2_bytes:
         I8[] [39,79,116,104,101,114,80,117,110,99,116,117,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.064999521 UTC

[section ""data" . GHC.Unicode.$tc'OtherPunctuation1_closure" {
     GHC.Unicode.$tc'OtherPunctuation1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherPunctuation2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.066928896 UTC

[section ""data" . GHC.Unicode.$tc'OtherPunctuation_closure" {
     GHC.Unicode.$tc'OtherPunctuation_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherPunctuation1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 17526727746027692027;
         const 9970963912577062569;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.068537491 UTC

[section ""cstring" . GHC.Unicode.$tc'MathSymbol2_bytes" {
     GHC.Unicode.$tc'MathSymbol2_bytes:
         I8[] [39,77,97,116,104,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.070205851 UTC

[section ""data" . GHC.Unicode.$tc'MathSymbol1_closure" {
     GHC.Unicode.$tc'MathSymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'MathSymbol2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.071807777 UTC

[section ""data" . GHC.Unicode.$tc'MathSymbol_closure" {
     GHC.Unicode.$tc'MathSymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'MathSymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 4306295684901311676;
         const 14195098983421669147;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.073562409 UTC

[section ""cstring" . GHC.Unicode.$tc'CurrencySymbol2_bytes" {
     GHC.Unicode.$tc'CurrencySymbol2_bytes:
         I8[] [39,67,117,114,114,101,110,99,121,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.075191901 UTC

[section ""data" . GHC.Unicode.$tc'CurrencySymbol1_closure" {
     GHC.Unicode.$tc'CurrencySymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'CurrencySymbol2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.076848859 UTC

[section ""data" . GHC.Unicode.$tc'CurrencySymbol_closure" {
     GHC.Unicode.$tc'CurrencySymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'CurrencySymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 150101909358894799;
         const 4247883766619991310;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.078588537 UTC

[section ""cstring" . GHC.Unicode.$tc'ModifierSymbol2_bytes" {
     GHC.Unicode.$tc'ModifierSymbol2_bytes:
         I8[] [39,77,111,100,105,102,105,101,114,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.080213681 UTC

[section ""data" . GHC.Unicode.$tc'ModifierSymbol1_closure" {
     GHC.Unicode.$tc'ModifierSymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ModifierSymbol2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.081830211 UTC

[section ""data" . GHC.Unicode.$tc'ModifierSymbol_closure" {
     GHC.Unicode.$tc'ModifierSymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ModifierSymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 17930136738185325280;
         const 9680003641195432205;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.08356188 UTC

[section ""cstring" . GHC.Unicode.$tc'OtherSymbol2_bytes" {
     GHC.Unicode.$tc'OtherSymbol2_bytes:
         I8[] [39,79,116,104,101,114,83,121,109,98,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.086362503 UTC

[section ""data" . GHC.Unicode.$tc'OtherSymbol1_closure" {
     GHC.Unicode.$tc'OtherSymbol1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'OtherSymbol2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.088010388 UTC

[section ""data" . GHC.Unicode.$tc'OtherSymbol_closure" {
     GHC.Unicode.$tc'OtherSymbol_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'OtherSymbol1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 11720563220218392367;
         const 765393478666748433;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.089723515 UTC

[section ""cstring" . GHC.Unicode.$tc'Space2_bytes" {
     GHC.Unicode.$tc'Space2_bytes:
         I8[] [39,83,112,97,99,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.091292654 UTC

[section ""data" . GHC.Unicode.$tc'Space1_closure" {
     GHC.Unicode.$tc'Space1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Space2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.092867568 UTC

[section ""data" . GHC.Unicode.$tc'Space_closure" {
     GHC.Unicode.$tc'Space_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Space1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 13451262004661357021;
         const 7623263649021992415;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.094739645 UTC

[section ""cstring" . GHC.Unicode.$tc'LineSeparator2_bytes" {
     GHC.Unicode.$tc'LineSeparator2_bytes:
         I8[] [39,76,105,110,101,83,101,112,97,114,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.096261271 UTC

[section ""data" . GHC.Unicode.$tc'LineSeparator1_closure" {
     GHC.Unicode.$tc'LineSeparator1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'LineSeparator2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.097955829 UTC

[section ""data" . GHC.Unicode.$tc'LineSeparator_closure" {
     GHC.Unicode.$tc'LineSeparator_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'LineSeparator1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 3777504190602031786;
         const 16534792546094157357;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.099726124 UTC

[section ""cstring" . GHC.Unicode.$tc'ParagraphSeparator2_bytes" {
     GHC.Unicode.$tc'ParagraphSeparator2_bytes:
         I8[] [39,80,97,114,97,103,114,97,112,104,83,101,112,97,114,97,116,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.101415225 UTC

[section ""data" . GHC.Unicode.$tc'ParagraphSeparator1_closure" {
     GHC.Unicode.$tc'ParagraphSeparator1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'ParagraphSeparator2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.103021965 UTC

[section ""data" . GHC.Unicode.$tc'ParagraphSeparator_closure" {
     GHC.Unicode.$tc'ParagraphSeparator_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'ParagraphSeparator1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 1259977240315406014;
         const 6836752952671088565;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.104814281 UTC

[section ""cstring" . GHC.Unicode.$tc'Control2_bytes" {
     GHC.Unicode.$tc'Control2_bytes:
         I8[] [39,67,111,110,116,114,111,108]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.10674368 UTC

[section ""data" . GHC.Unicode.$tc'Control1_closure" {
     GHC.Unicode.$tc'Control1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Control2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.108340808 UTC

[section ""data" . GHC.Unicode.$tc'Control_closure" {
     GHC.Unicode.$tc'Control_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Control1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 3769799789009110362;
         const 7129109849289868145;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.110186967 UTC

[section ""cstring" . GHC.Unicode.$tc'Format2_bytes" {
     GHC.Unicode.$tc'Format2_bytes:
         I8[] [39,70,111,114,109,97,116]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.112277732 UTC

[section ""data" . GHC.Unicode.$tc'Format1_closure" {
     GHC.Unicode.$tc'Format1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Format2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.11439636 UTC

[section ""data" . GHC.Unicode.$tc'Format_closure" {
     GHC.Unicode.$tc'Format_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Format1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 15516392160505082493;
         const 8582194312248021938;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.116154229 UTC

[section ""cstring" . GHC.Unicode.$tc'Surrogate2_bytes" {
     GHC.Unicode.$tc'Surrogate2_bytes:
         I8[] [39,83,117,114,114,111,103,97,116,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.117861173 UTC

[section ""data" . GHC.Unicode.$tc'Surrogate1_closure" {
     GHC.Unicode.$tc'Surrogate1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'Surrogate2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.119434201 UTC

[section ""data" . GHC.Unicode.$tc'Surrogate_closure" {
     GHC.Unicode.$tc'Surrogate_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'Surrogate1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 8891432866311764671;
         const 15154926068870472193;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.121158045 UTC

[section ""cstring" . GHC.Unicode.$tc'PrivateUse2_bytes" {
     GHC.Unicode.$tc'PrivateUse2_bytes:
         I8[] [39,80,114,105,118,97,116,101,85,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.122797724 UTC

[section ""data" . GHC.Unicode.$tc'PrivateUse1_closure" {
     GHC.Unicode.$tc'PrivateUse1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'PrivateUse2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.124429921 UTC

[section ""data" . GHC.Unicode.$tc'PrivateUse_closure" {
     GHC.Unicode.$tc'PrivateUse_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'PrivateUse1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 9277443220957795657;
         const 16819524490051355354;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.126847104 UTC

[section ""cstring" . GHC.Unicode.$tc'NotAssigned2_bytes" {
     GHC.Unicode.$tc'NotAssigned2_bytes:
         I8[] [39,78,111,116,65,115,115,105,103,110,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.128485569 UTC

[section ""data" . GHC.Unicode.$tc'NotAssigned1_closure" {
     GHC.Unicode.$tc'NotAssigned1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Unicode.$tc'NotAssigned2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.130162373 UTC

[section ""data" . GHC.Unicode.$tc'NotAssigned_closure" {
     GHC.Unicode.$tc'NotAssigned_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Unicode.$trModule_closure+1;
         const GHC.Unicode.$tc'NotAssigned1_closure+1;
         const GHC.Unicode.$tc'ClosePunctuation1_closure+1;
         const 6894305772705953782;
         const 14217837899895516928;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.132585579 UTC

[section ""data" . GHC.Unicode.toLower_closure" {
     GHC.Unicode.toLower_closure:
         const GHC.Unicode.toLower_info;
         const 0;
 },
 GHC.Unicode.toLower_entry() //  [R2]
         { info_tbl: [(c2n1R,
                       label: GHC.Unicode.toLower_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n1R: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n1S; else goto c2n1T;
       c2n1S: // global
           R2 = R2;
           R1 = GHC.Unicode.toLower_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n1T: // global
           I64[Sp - 8] = block_c2n1O_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n2i; else goto c2n1P;
       u2n2i: // global
           call _c2n1O(R1) args: 0, res: 0, upd: 0;
       c2n1P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2n1O() //  [R1]
         { info_tbl: [(c2n1O,
                       label: block_c2n1O_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n1O: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2n1Y; else goto c2n1X;
       c2n1Y: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2n1X: // global
           (_s2m7E::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towlower(I64[R1 + 7]);
           if (_s2m7E::I64 > 1114111) goto c2n2a; else goto c2n2h;
       c2n2a: // global
           Hp = Hp - 16;
           R2 = _s2m7E::I64;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2n2h: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s2m7E::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.14002706 UTC

[section ""data" . GHC.Unicode.toUpper_closure" {
     GHC.Unicode.toUpper_closure:
         const GHC.Unicode.toUpper_info;
         const 0;
 },
 GHC.Unicode.toUpper_entry() //  [R2]
         { info_tbl: [(c2n2C,
                       label: GHC.Unicode.toUpper_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n2C: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n2D; else goto c2n2E;
       c2n2D: // global
           R2 = R2;
           R1 = GHC.Unicode.toUpper_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n2E: // global
           I64[Sp - 8] = block_c2n2z_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n33; else goto c2n2A;
       u2n33: // global
           call _c2n2z(R1) args: 0, res: 0, upd: 0;
       c2n2A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2n2z() //  [R1]
         { info_tbl: [(c2n2z,
                       label: block_c2n2z_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n2z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2n2J; else goto c2n2I;
       c2n2J: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2n2I: // global
           (_s2m7P::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towupper(I64[R1 + 7]);
           if (_s2m7P::I64 > 1114111) goto c2n2V; else goto c2n32;
       c2n2V: // global
           Hp = Hp - 16;
           R2 = _s2m7P::I64;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2n32: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s2m7P::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.147844746 UTC

[section ""data" . GHC.Unicode.toTitle_closure" {
     GHC.Unicode.toTitle_closure:
         const GHC.Unicode.toTitle_info;
         const 0;
 },
 GHC.Unicode.toTitle_entry() //  [R2]
         { info_tbl: [(c2n3n,
                       label: GHC.Unicode.toTitle_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n3n: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n3o; else goto c2n3p;
       c2n3o: // global
           R2 = R2;
           R1 = GHC.Unicode.toTitle_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n3p: // global
           I64[Sp - 8] = block_c2n3k_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n3O; else goto c2n3l;
       u2n3O: // global
           call _c2n3k(R1) args: 0, res: 0, upd: 0;
       c2n3l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2n3k() //  [R1]
         { info_tbl: [(c2n3k,
                       label: block_c2n3k_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n3k: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2n3u; else goto c2n3t;
       c2n3u: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2n3t: // global
           (_s2m80::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towtitle(I64[R1 + 7]);
           if (_s2m80::I64 > 1114111) goto c2n3G; else goto c2n3N;
       c2n3G: // global
           Hp = Hp - 16;
           R2 = _s2m80::I64;
           Sp = Sp + 8;
           call GHC.Char.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2n3N: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s2m80::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.154589574 UTC

[section ""data" . GHC.Unicode.wgencat_closure" {
     GHC.Unicode.wgencat_closure:
         const GHC.Unicode.wgencat_info;
 },
 GHC.Unicode.wgencat_entry() //  [R2]
         { info_tbl: [(c2n48,
                       label: GHC.Unicode.wgencat_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n48: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n4e; else goto c2n4f;
       c2n4e: // global
           R2 = R2;
           R1 = GHC.Unicode.wgencat_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n4f: // global
           I64[Sp - 8] = block_c2n45_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n4j; else goto c2n46;
       u2n4j: // global
           call _c2n45(R1) args: 0, res: 0, upd: 0;
       c2n46: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2n45() //  [R1]
         { info_tbl: [(c2n45,
                       label: block_c2n45_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n45: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c2n4i; else goto c2n4h;
       c2n4i: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c2n4h: // global
           (_s2m8a::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(I64[R1 + 7]);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s2m8a::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.160578393 UTC

[section ""data" . GHC.Unicode.isAsciiUpper_closure" {
     GHC.Unicode.isAsciiUpper_closure:
         const GHC.Unicode.isAsciiUpper_info;
 },
 GHC.Unicode.isAsciiUpper_entry() //  [R2]
         { info_tbl: [(c2n4D,
                       label: GHC.Unicode.isAsciiUpper_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n4D: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n4E; else goto c2n4F;
       c2n4E: // global
           R2 = R2;
           R1 = GHC.Unicode.isAsciiUpper_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n4F: // global
           I64[Sp - 8] = block_c2n4A_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n4R; else goto c2n4B;
       u2n4R: // global
           call _c2n4A(R1) args: 0, res: 0, upd: 0;
       c2n4B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2n4A() //  [R1]
         { info_tbl: [(c2n4A,
                       label: block_c2n4A_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n4A: // global
           _s2m8d::I64 = I64[R1 + 7];
           if (_s2m8d::I64 < 65) goto c2n4M; else goto c2n4N;
       c2n4M: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2n4N: // global
           R1 = I64[((_s2m8d::I64 <= 90) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.166796559 UTC

[section ""data" . GHC.Unicode.isAsciiLower_closure" {
     GHC.Unicode.isAsciiLower_closure:
         const GHC.Unicode.isAsciiLower_info;
 },
 GHC.Unicode.isAsciiLower_entry() //  [R2]
         { info_tbl: [(c2n5f,
                       label: GHC.Unicode.isAsciiLower_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n5f: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n5g; else goto c2n5h;
       c2n5g: // global
           R2 = R2;
           R1 = GHC.Unicode.isAsciiLower_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n5h: // global
           I64[Sp - 8] = block_c2n5c_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n5t; else goto c2n5d;
       u2n5t: // global
           call _c2n5c(R1) args: 0, res: 0, upd: 0;
       c2n5d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2n5c() //  [R1]
         { info_tbl: [(c2n5c,
                       label: block_c2n5c_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n5c: // global
           _s2m8i::I64 = I64[R1 + 7];
           if (_s2m8i::I64 < 97) goto c2n5o; else goto c2n5p;
       c2n5o: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2n5p: // global
           R1 = I64[((_s2m8i::I64 <= 122) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.173642427 UTC

[section ""data" . GHC.Unicode.isLatin1_closure" {
     GHC.Unicode.isLatin1_closure:
         const GHC.Unicode.isLatin1_info;
 },
 GHC.Unicode.isLatin1_entry() //  [R2]
         { info_tbl: [(c2n5R,
                       label: GHC.Unicode.isLatin1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n5R: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n5S; else goto c2n5T;
       c2n5S: // global
           R2 = R2;
           R1 = GHC.Unicode.isLatin1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n5T: // global
           I64[Sp - 8] = block_c2n5O_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n5Y; else goto c2n5P;
       u2n5Y: // global
           call _c2n5O(R1) args: 0, res: 0, upd: 0;
       c2n5P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2n5O() //  [R1]
         { info_tbl: [(c2n5O,
                       label: block_c2n5O_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n5O: // global
           R1 = I64[((I64[R1 + 7] <= 255) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.17915039 UTC

[section ""data" . GHC.Unicode.isAscii_closure" {
     GHC.Unicode.isAscii_closure:
         const GHC.Unicode.isAscii_info;
 },
 GHC.Unicode.isAscii_entry() //  [R2]
         { info_tbl: [(c2n6k,
                       label: GHC.Unicode.isAscii_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n6k: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n6l; else goto c2n6m;
       c2n6l: // global
           R2 = R2;
           R1 = GHC.Unicode.isAscii_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n6m: // global
           I64[Sp - 8] = block_c2n6h_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n6r; else goto c2n6i;
       u2n6r: // global
           call _c2n6h(R1) args: 0, res: 0, upd: 0;
       c2n6i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2n6h() //  [R1]
         { info_tbl: [(c2n6h,
                       label: block_c2n6h_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n6h: // global
           R1 = I64[((I64[R1 + 7] < 128) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.184628981 UTC

[section ""data" . GHC.Unicode.isOctDigit_closure" {
     GHC.Unicode.isOctDigit_closure:
         const GHC.Unicode.isOctDigit_info;
 },
 GHC.Unicode.isOctDigit_entry() //  [R2]
         { info_tbl: [(c2n6N,
                       label: GHC.Unicode.isOctDigit_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n6N: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n6O; else goto c2n6P;
       c2n6O: // global
           R2 = R2;
           R1 = GHC.Unicode.isOctDigit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n6P: // global
           I64[Sp - 8] = block_c2n6K_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n73; else goto c2n6L;
       u2n73: // global
           call _c2n6K(R1) args: 0, res: 0, upd: 0;
       c2n6L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2n6K() //  [R1]
         { info_tbl: [(c2n6K,
                       label: block_c2n6K_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n6K: // global
           R1 = I64[((I64[R1 + 7] - 48 <= 7) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.190362581 UTC

[section ""data" . GHC.Unicode.isDigit_closure" {
     GHC.Unicode.isDigit_closure:
         const GHC.Unicode.isDigit_info;
 },
 GHC.Unicode.isDigit_entry() //  [R2]
         { info_tbl: [(c2n7r,
                       label: GHC.Unicode.isDigit_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n7r: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n7s; else goto c2n7t;
       c2n7s: // global
           R2 = R2;
           R1 = GHC.Unicode.isDigit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n7t: // global
           I64[Sp - 8] = block_c2n7o_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n7H; else goto c2n7p;
       u2n7H: // global
           call _c2n7o(R1) args: 0, res: 0, upd: 0;
       c2n7p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2n7o() //  [R1]
         { info_tbl: [(c2n7o,
                       label: block_c2n7o_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n7o: // global
           R1 = I64[((I64[R1 + 7] - 48 <= 9) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.196355562 UTC

[section ""data" . GHC.Unicode.isHexDigit_closure" {
     GHC.Unicode.isHexDigit_closure:
         const GHC.Unicode.isHexDigit_info;
 },
 GHC.Unicode.isHexDigit_entry() //  [R2]
         { info_tbl: [(c2n85,
                       label: GHC.Unicode.isHexDigit_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n85: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n86; else goto c2n87;
       c2n86: // global
           R2 = R2;
           R1 = GHC.Unicode.isHexDigit_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n87: // global
           I64[Sp - 8] = block_c2n82_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n8P; else goto c2n83;
       u2n8P: // global
           call _c2n82(R1) args: 0, res: 0, upd: 0;
       c2n83: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2n82() //  [R1]
         { info_tbl: [(c2n82,
                       label: block_c2n82_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n82: // global
           _s2m8J::I64 = I64[R1 + 7];
           if ((_s2m8J::I64 + -48) <= 9) goto c2n8D; else goto c2n8C;
       c2n8C: // global
           if ((_s2m8J::I64 + -65) <= 5) goto c2n8D; else goto c2n8z;
       c2n8D: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2n8z: // global
           R1 = I64[(((_s2m8J::I64 + -97) <= 5) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.203097837 UTC

[section ""data" . GHC.Unicode.isLower_closure" {
     GHC.Unicode.isLower_closure:
         const GHC.Unicode.isLower_info;
 },
 GHC.Unicode.isLower_entry() //  [R2]
         { info_tbl: [(c2n9g,
                       label: GHC.Unicode.isLower_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n9g: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2n9h; else goto c2n9i;
       c2n9h: // global
           R2 = R2;
           R1 = GHC.Unicode.isLower_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2n9i: // global
           I64[Sp - 8] = block_c2n9d_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2n9v; else goto c2n9e;
       u2n9v: // global
           call _c2n9d(R1) args: 0, res: 0, upd: 0;
       c2n9e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2n9d() //  [R1]
         { info_tbl: [(c2n9d,
                       label: block_c2n9d_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n9d: // global
           (_s2m93::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswlower(I64[R1 + 7]);
           if (_s2m93::I64 == 0) goto c2n9u; else goto c2n9t;
       c2n9u: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2n9t: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.208721761 UTC

[section ""cstring" . lvl66_r2j7h_bytes" {
     lvl66_r2j7h_bytes:
         I8[] [115,117,99,99,123,71,101,110,101,114,97,108,67,97,116,101,103,111,114,121,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,115,117,99,99,39,32,111,102,32,108,97,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.210731736 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory2_closure" {
     GHC.Unicode.$fEnumGeneralCategory2_closure:
         const GHC.Unicode.$fEnumGeneralCategory2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory2_entry() //  [R1]
         { info_tbl: [(c2n9T,
                       label: GHC.Unicode.$fEnumGeneralCategory2_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n9T: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2n9U; else goto c2n9V;
       c2n9U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2n9V: // global
           (_c2n9O::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2n9O::I64 == 0) goto c2n9Q; else goto c2n9P;
       c2n9Q: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2n9P: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2n9O::I64;
           I64[Sp - 24] = block_c2n9R_info;
           R2 = lvl66_r2j7h_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c2n9R() //  [R1]
         { info_tbl: [(c2n9R,
                       label: block_c2n9R_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2n9R: // global
           R3 = R1;
           R2 = $dIP3_r2j7a_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.216821439 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$csucc_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$csucc_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$csucc_info;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory_$csucc_entry() //  [R2]
         { info_tbl: [(c2nam,
                       label: GHC.Unicode.$fEnumGeneralCategory_$csucc_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nam: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2nan; else goto c2nao;
       c2nan: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nao: // global
           I64[Sp - 8] = block_c2naf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2naz; else goto c2nag;
       u2naz: // global
           call _c2naf(R1) args: 0, res: 0, upd: 0;
       c2nag: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2naf() //  [R1]
         { info_tbl: [(c2naf,
                       label: block_c2naf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2naf: // global
           if (I32[I64[R1 - 1] + 20] == 29 :: W32) goto c2nak; else goto c2naj;
       c2nak: // global
           R1 = GHC.Unicode.$fEnumGeneralCategory2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2naj: // global
           R1 = I64[(%MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]) + 1 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.222488099 UTC

[section ""cstring" . lvl67_r2j7i_bytes" {
     lvl67_r2j7i_bytes:
         I8[] [112,114,101,100,123,71,101,110,101,114,97,108,67,97,116,101,103,111,114,121,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,112,114,101,100,39,32,111,102,32,102,105,114,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.224475809 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory1_closure" {
     GHC.Unicode.$fEnumGeneralCategory1_closure:
         const GHC.Unicode.$fEnumGeneralCategory1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory1_entry() //  [R1]
         { info_tbl: [(c2nb2,
                       label: GHC.Unicode.$fEnumGeneralCategory1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nb2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2nb3; else goto c2nb4;
       c2nb3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2nb4: // global
           (_c2naX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2naX::I64 == 0) goto c2naZ; else goto c2naY;
       c2naZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2naY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2naX::I64;
           I64[Sp - 24] = block_c2nb0_info;
           R2 = lvl67_r2j7i_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c2nb0() //  [R1]
         { info_tbl: [(c2nb0,
                       label: block_c2nb0_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nb0: // global
           R3 = R1;
           R2 = $dIP3_r2j7a_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.230499834 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cpred_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cpred_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cpred_info;
         const 0;
 },
 GHC.Unicode.$fEnumGeneralCategory_$cpred_entry() //  [R2]
         { info_tbl: [(c2nbv,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cpred_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nbv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2nbw; else goto c2nbx;
       c2nbw: // global
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nbx: // global
           I64[Sp - 8] = block_c2nbo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2nbI; else goto c2nbp;
       u2nbI: // global
           call _c2nbo(R1) args: 0, res: 0, upd: 0;
       c2nbp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2nbo() //  [R1]
         { info_tbl: [(c2nbo,
                       label: block_c2nbo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nbo: // global
           if (I32[I64[R1 - 1] + 20] == 0 :: W32) goto c2nbt; else goto c2nbs;
       c2nbt: // global
           R1 = GHC.Unicode.$fEnumGeneralCategory1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c2nbs: // global
           R1 = I64[(%MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]) - 1 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.238429136 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_info;
         const 0;
 },
 sat_s2m9t_entry() //  [R1]
         { info_tbl: [(c2ncD,
                       label: sat_s2m9t_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ncD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ncE; else goto c2ncF;
       c2ncE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ncF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2m9n::I64 = I64[R1 + 32];
           if (_s2m9n::I64 == I64[R1 + 24]) goto c2ncC; else goto c2ncB;
       c2ncC: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c2ncB: // global
           R2 = _s2m9n::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_s2m9m_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m9q_entry() //  [R1]
         { info_tbl: [(c2ncR,
                       label: sat_s2m9q_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ncR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ncS; else goto c2nd0;
       c2ncS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2nd0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2m9n::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2m9n::I64, 0)) goto c2ncY; else goto c2ncQ;
       c2ncQ: // global
           if (%MO_S_Gt_W64(_s2m9n::I64, 29)) goto c2ncY; else goto c2ncZ;
       c2ncY: // global
           R2 = _s2m9n::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2ncZ: // global
           R1 = I64[(_s2m9n::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_s2m9m_entry() //  [R1, R2]
         { info_tbl: [(c2nd2,
                       label: go_s2m9m_info
                       rep:HeapRep 1 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nd2: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2nd6; else goto c2nd5;
       c2nd6: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nd5: // global
           _s2m9k::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2m9t_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2m9k::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2m9q_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_entry() //  [R2, R3]
         { info_tbl: [(c2nd7,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nd7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2nd8; else goto c2nd9;
       c2nd8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2nd9: // global
           I64[Sp - 16] = block_c2nc6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u2ndu; else goto c2nc7;
       u2ndu: // global
           call _c2nc6(R1) args: 0, res: 0, upd: 0;
       c2nc7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2nc6() //  [R1]
         { info_tbl: [(c2nc6,
                       label: block_c2nc6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nc6: // global
           _s2m9i::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2nce_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m9i::I64;
           if (R1 & 7 != 0) goto u2ndr; else goto c2ncf;
       u2ndr: // global
           call _c2nce(R1) args: 0, res: 0, upd: 0;
       c2ncf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2nce() //  [R1]
         { info_tbl: [(c2nce,
                       label: block_c2nce_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nce: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2nck() args: 0, res: 0, upd: 0;
     }
 },
 _c2nck() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nck: // global
           Hp = Hp + 16;
           _s2m9k::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2ndj; else goto c2ndi;
       c2ndj: // global
           HpAlloc = 16;
           I64[Sp] = block_c2ncj_info;
           R1 = _s2m9k::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2ndi: // global
           _s2m9i::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s2m9i::I64,
                            _s2m9k::I64)) goto c2ndl; else goto c2ndm;
       c2ndl: // global
           I64[Hp - 8] = go_s2m9m_info;
           I64[Hp] = _s2m9k::I64;
           R2 = _s2m9i::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call go_s2m9m_entry(R2, R1) args: 8, res: 0, upd: 8;
       c2ndm: // global
           Hp = Hp - 16;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2ncj() //  [R1]
         { info_tbl: [(c2ncj,
                       label: block_c2ncj_info
                       rep:StackRep [True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ncj: // global
           I64[Sp] = R1;
           call _c2nck() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.259178183 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure" {
     GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure:
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_info;
         const 0;
 },
 sat_s2m9R_entry() //  [R1]
         { info_tbl: [(c2nfk,
                       label: sat_s2m9R_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nfk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2nfl; else goto c2nfm;
       c2nfl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2nfm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s2m9K_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m9P_entry() //  [R1]
         { info_tbl: [(c2nfw,
                       label: sat_s2m9P_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nfw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2nfx; else goto c2nfF;
       c2nfx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2nfF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2m9L::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2m9L::I64, 0)) goto c2nfD; else goto c2nfv;
       c2nfv: // global
           if (%MO_S_Gt_W64(_s2m9L::I64, 29)) goto c2nfD; else goto c2nfE;
       c2nfD: // global
           R2 = _s2m9L::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2nfE: // global
           R1 = I64[(_s2m9L::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m9U_entry() //  [R1]
         { info_tbl: [(c2nfQ,
                       label: sat_s2m9U_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nfQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2nfR; else goto c2nfZ;
       c2nfR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2nfZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2m9L::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2m9L::I64, 0)) goto c2nfX; else goto c2nfP;
       c2nfP: // global
           if (%MO_S_Gt_W64(_s2m9L::I64, 29)) goto c2nfX; else goto c2nfY;
       c2nfX: // global
           R2 = _s2m9L::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2nfY: // global
           R1 = I64[(_s2m9L::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_dn_s2m9K_entry() //  [R1, R2]
         { info_tbl: [(c2ng3,
                       label: go_dn_s2m9K_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ng3: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2ng7; else goto c2ng6;
       c2ng7: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2ng6: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c2ng1; else goto c2ng2;
       c2ng1: // global
           _s2m9I::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2m9R_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2m9I::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2m9P_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2ng2: // global
           I64[Hp - 80] = sat_s2m9U_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2ng9::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2ng9::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2m9V_entry() //  [R1]
         { info_tbl: [(c2nga,
                       label: sat_s2m9V_info
                       rep:HeapRep 3 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nga: // global
           _s2m9V::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2ngb; else goto c2ngc;
       c2ngc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2nge; else goto c2ngd;
       c2nge: // global
           HpAlloc = 24;
           goto c2ngb;
       c2ngb: // global
           R1 = _s2m9V::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ngd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2m9V::P64;
           _s2m9A::I64 = I64[_s2m9V::P64 + 24];
           _s2m9I::I64 = _s2m9A::I64 - I64[_s2m9V::P64 + 16];
           _s2m9J::I64 = I64[_s2m9V::P64 + 32] - _s2m9I::I64;
           I64[Hp - 16] = go_dn_s2m9K_info;
           I64[Hp - 8] = _s2m9I::I64;
           I64[Hp] = _s2m9J::I64;
           R2 = _s2m9A::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s2m9K_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m9H_entry() //  [R1]
         { info_tbl: [(c2ngo,
                       label: sat_s2m9H_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ngo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ngp; else goto c2ngx;
       c2ngp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ngx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2m9y::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2m9y::I64, 0)) goto c2ngv; else goto c2ngn;
       c2ngn: // global
           if (%MO_S_Gt_W64(_s2m9y::I64, 29)) goto c2ngv; else goto c2ngw;
       c2ngv: // global
           R2 = _s2m9y::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2ngw: // global
           R1 = I64[(_s2m9y::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2m9Z_entry() //  [R1]
         { info_tbl: [(c2ngL,
                       label: sat_s2m9Z_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ngL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ngM; else goto c2ngU;
       c2ngM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ngU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2m9y::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2m9y::I64, 0)) goto c2ngS; else goto c2ngK;
       c2ngK: // global
           if (%MO_S_Gt_W64(_s2m9y::I64, 29)) goto c2ngS; else goto c2ngT;
       c2ngS: // global
           R2 = _s2m9y::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2ngT: // global
           R1 = I64[(_s2m9y::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2mad_entry() //  [R1]
         { info_tbl: [(c2nhn,
                       label: sat_s2mad_info
                       rep:HeapRep 1 ptrs 2 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nhn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2nho; else goto c2nhp;
       c2nho: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2nhp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s2ma6_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2mab_entry() //  [R1]
         { info_tbl: [(c2nhz,
                       label: sat_s2mab_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nhz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2nhA; else goto c2nhI;
       c2nhA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2nhI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2ma7::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2ma7::I64, 0)) goto c2nhG; else goto c2nhy;
       c2nhy: // global
           if (%MO_S_Gt_W64(_s2ma7::I64, 29)) goto c2nhG; else goto c2nhH;
       c2nhG: // global
           R2 = _s2ma7::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2nhH: // global
           R1 = I64[(_s2ma7::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2mag_entry() //  [R1]
         { info_tbl: [(c2nhT,
                       label: sat_s2mag_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nhT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2nhU; else goto c2ni2;
       c2nhU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ni2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2ma7::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2ma7::I64, 0)) goto c2ni0; else goto c2nhS;
       c2nhS: // global
           if (%MO_S_Gt_W64(_s2ma7::I64, 29)) goto c2ni0; else goto c2ni1;
       c2ni0: // global
           R2 = _s2ma7::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2ni1: // global
           R1 = I64[(_s2ma7::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 go_up_s2ma6_entry() //  [R1, R2]
         { info_tbl: [(c2ni6,
                       label: go_up_s2ma6_info
                       rep:HeapRep 2 nonptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ni6: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c2nia; else goto c2ni9;
       c2nia: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2ni9: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c2ni4; else goto c2ni5;
       c2ni4: // global
           _s2ma4::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s2mad_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s2ma4::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s2mab_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2ni5: // global
           I64[Hp - 80] = sat_s2mag_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2nic::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2nic::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s2mah_entry() //  [R1]
         { info_tbl: [(c2nid,
                       label: sat_s2mah_info
                       rep:HeapRep 3 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nid: // global
           _s2mah::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2nie; else goto c2nif;
       c2nif: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2nih; else goto c2nig;
       c2nih: // global
           HpAlloc = 24;
           goto c2nie;
       c2nie: // global
           R1 = _s2mah::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2nig: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2mah::P64;
           _s2m9A::I64 = I64[_s2mah::P64 + 24];
           _s2ma4::I64 = _s2m9A::I64 - I64[_s2mah::P64 + 16];
           _s2ma5::I64 = I64[_s2mah::P64 + 32] - _s2ma4::I64;
           I64[Hp - 16] = go_up_s2ma6_info;
           I64[Hp - 8] = _s2ma4::I64;
           I64[Hp] = _s2ma5::I64;
           R2 = _s2m9A::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s2ma6_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2ma3_entry() //  [R1]
         { info_tbl: [(c2nir,
                       label: sat_s2ma3_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nir: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2nis; else goto c2niA;
       c2nis: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2niA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2m9y::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2m9y::I64, 0)) goto c2niy; else goto c2niq;
       c2niq: // global
           if (%MO_S_Gt_W64(_s2m9y::I64, 29)) goto c2niy; else goto c2niz;
       c2niy: // global
           R2 = _s2m9y::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2niz: // global
           R1 = I64[(_s2m9y::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2mal_entry() //  [R1]
         { info_tbl: [(c2niO,
                       label: sat_s2mal_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2niO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2niP; else goto c2niX;
       c2niP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2niX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s2m9y::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s2m9y::I64, 0)) goto c2niV; else goto c2niN;
       c2niN: // global
           if (%MO_S_Gt_W64(_s2m9y::I64, 29)) goto c2niV; else goto c2niW;
       c2niV: // global
           R2 = _s2m9y::I64;
           Sp = Sp - 16;
           call GHC.Unicode.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c2niW: // global
           R1 = I64[(_s2m9y::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_entry() //  [R2,
                                                                 R3, R4]
         { info_tbl: [(c2niY,
                       label: GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2niY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2niZ; else goto c2nj0;
       c2niZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c2nj0: // global
           I64[Sp - 24] = block_c2nes_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2njH; else goto c2net;
       u2njH: // global
           call _c2nes(R1) args: 0, res: 0, upd: 0;
       c2net: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2nes() //  [R1]
         { info_tbl: [(c2nes,
                       label: block_c2nes_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nes: // global
           _s2m9y::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2neA_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s2m9y::I64;
           if (R1 & 7 != 0) goto u2njD; else goto c2neB;
       u2njD: // global
           call _c2neA(R1) args: 0, res: 0, upd: 0;
       c2neB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2neA() //  [R1]
         { info_tbl: [(c2neA,
                       label: block_c2neA_info
                       rep:StackRep [True, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2neA: // global
           _s2m9A::I64 = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           I64[Sp] = block_c2neI_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s2m9A::I64;
           if (R1 & 7 != 0) goto u2njE; else goto c2neJ;
       u2njE: // global
           call _c2neI(R1) args: 0, res: 0, upd: 0;
       c2neJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2neI() //  [R1]
         { info_tbl: [(c2neI,
                       label: block_c2neI_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2neI: // global
           I64[Sp] = %MO_UU_Conv_W32_W64(I32[I64[R1 & (-8)] + 20]);
           call _c2neO() args: 0, res: 0, upd: 0;
     }
 },
 _c2neO() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2neO: // global
           Hp = Hp + 88;
           _s2m9C::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c2nje; else goto c2njd;
       c2nje: // global
           HpAlloc = 88;
           I64[Sp] = block_c2neN_info;
           R1 = _s2m9C::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c2njd: // global
           _s2m9y::I64 = I64[Sp + 8];
           _s2m9A::I64 = I64[Sp + 16];
           if (%MO_S_Lt_W64(_s2m9A::I64,
                            _s2m9y::I64)) goto c2njo; else goto c2njx;
       c2njo: // global
           if (%MO_S_Le_W64(_s2m9C::I64,
                            _s2m9A::I64)) goto c2njh; else goto c2njm;
       c2njh: // global
           I64[Hp - 80] = sat_s2m9V_info;
           I64[Hp - 64] = _s2m9y::I64;
           I64[Hp - 56] = _s2m9A::I64;
           I64[Hp - 48] = _s2m9C::I64;
           I64[Hp - 40] = sat_s2m9H_info;
           I64[Hp - 24] = _s2m9y::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2njm: // global
           if (%MO_S_Gt_W64(_s2m9C::I64,
                            _s2m9y::I64)) goto c2njv; else goto c2njk;
       c2njk: // global
           I64[Hp - 80] = sat_s2m9Z_info;
           I64[Hp - 64] = _s2m9y::I64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2nji::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2nji::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2njx: // global
           if (%MO_S_Ge_W64(_s2m9C::I64,
                            _s2m9A::I64)) goto c2njr; else goto c2njw;
       c2njr: // global
           I64[Hp - 80] = sat_s2mah_info;
           I64[Hp - 64] = _s2m9y::I64;
           I64[Hp - 56] = _s2m9A::I64;
           I64[Hp - 48] = _s2m9C::I64;
           I64[Hp - 40] = sat_s2ma3_info;
           I64[Hp - 24] = _s2m9y::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2njw: // global
           if (%MO_S_Lt_W64(_s2m9C::I64,
                            _s2m9y::I64)) goto c2njv; else goto c2nju;
       c2njv: // global
           Hp = Hp - 88;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2nju: // global
           I64[Hp - 80] = sat_s2mal_info;
           I64[Hp - 64] = _s2m9y::I64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c2njs::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c2njs::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c2neN() //  [R1]
         { info_tbl: [(c2neN,
                       label: block_c2neN_info
                       rep:StackRep [True, True])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2neN: // global
           I64[Sp] = R1;
           call _c2neO() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.305823943 UTC

[section ""data" . GHC.Unicode.$fEnumGeneralCategory_closure" {
     GHC.Unicode.$fEnumGeneralCategory_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.Unicode.$fEnumGeneralCategory_$csucc_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cpred_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cfromEnum_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFrom_closure+1;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThen_closure+2;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure+2;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.308093714 UTC

[section ""data" . GHC.Unicode.$wgeneralCategory_closure" {
     GHC.Unicode.$wgeneralCategory_closure:
         const GHC.Unicode.$wgeneralCategory_info;
         const 0;
 },
 GHC.Unicode.$wgeneralCategory_entry() //  [R2]
         { info_tbl: [(c2nmP,
                       label: GHC.Unicode.$wgeneralCategory_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nmP: // global
           (_s2mar::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(R2);
           if (%MO_S_Lt_W64(_s2mar::I64, 0)) goto c2nn4; else goto c2nn6;
       c2nn6: // global
           if (%MO_S_Gt_W64(_s2mar::I64, 29)) goto c2nn4; else goto c2nn5;
       c2nn4: // global
           R2 = _s2mar::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2nn5: // global
           R1 = I64[(_s2mar::I64 << 3) + GHC.Unicode.GeneralCategory_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.312138953 UTC

[section ""data" . GHC.Unicode.generalCategory_closure" {
     GHC.Unicode.generalCategory_closure:
         const GHC.Unicode.generalCategory_info;
         const 0;
 },
 GHC.Unicode.generalCategory_entry() //  [R2]
         { info_tbl: [(c2nnl,
                       label: GHC.Unicode.generalCategory_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nnl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2nnm; else goto c2nnn;
       c2nnm: // global
           R2 = R2;
           R1 = GHC.Unicode.generalCategory_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nnn: // global
           I64[Sp - 8] = block_c2nni_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2nnr; else goto c2nnj;
       u2nnr: // global
           call _c2nni(R1) args: 0, res: 0, upd: 0;
       c2nnj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2nni() //  [R1]
         { info_tbl: [(c2nni,
                       label: block_c2nni_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nni: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wgeneralCategory_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.317719726 UTC

[section ""data" . GHC.Unicode.$wisPunctuation_closure" {
     GHC.Unicode.$wisPunctuation_closure:
         const GHC.Unicode.$wisPunctuation_info;
         const 0;
 },
 GHC.Unicode.$wisPunctuation_entry() //  [R2]
         { info_tbl: [(c2nnI,
                       label: GHC.Unicode.$wisPunctuation_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nnI: // global
           (_s2maC::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(R2);
           if (%MO_S_Lt_W64(_s2maC::I64, 0)) goto c2nnX; else goto c2nob;
       c2nob: // global
           if (%MO_S_Gt_W64(_s2maC::I64, 29)) goto c2nnX; else goto c2noa;
       c2nnX: // global
           R2 = _s2maC::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2noa: // global
           if (%MO_S_Ge_W64(_s2maC::I64, 18)) goto c2no2; else goto u2noc;
       u2noc: // global
           if (%MO_S_Lt_W64(_s2maC::I64, 11)) goto c2no2; else goto u2nod;
       c2no2: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u2nod: // global
           switch [11 .. 17] _s2maC::I64 {
               case 11, 12, 13, 14, 15, 16, 17 : goto c2no9;
           }
       c2no9: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.322280034 UTC

[section ""data" . GHC.Unicode.isPunctuation_closure" {
     GHC.Unicode.isPunctuation_closure:
         const GHC.Unicode.isPunctuation_info;
         const 0;
 },
 GHC.Unicode.isPunctuation_entry() //  [R2]
         { info_tbl: [(c2nox,
                       label: GHC.Unicode.isPunctuation_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nox: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2noy; else goto c2noz;
       c2noy: // global
           R2 = R2;
           R1 = GHC.Unicode.isPunctuation_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2noz: // global
           I64[Sp - 8] = block_c2nou_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2noD; else goto c2nov;
       u2noD: // global
           call _c2nou(R1) args: 0, res: 0, upd: 0;
       c2nov: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2nou() //  [R1]
         { info_tbl: [(c2nou,
                       label: block_c2nou_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nou: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wisPunctuation_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.328660005 UTC

[section ""data" . GHC.Unicode.$wisSymbol_closure" {
     GHC.Unicode.$wisSymbol_closure:
         const GHC.Unicode.$wisSymbol_info;
         const 0;
 },
 GHC.Unicode.$wisSymbol_entry() //  [R2]
         { info_tbl: [(c2noU,
                       label: GHC.Unicode.$wisSymbol_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2noU: // global
           (_s2maQ::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_gencat(R2);
           if (%MO_S_Lt_W64(_s2maQ::I64, 0)) goto c2np9; else goto c2npk;
       c2npk: // global
           if (%MO_S_Gt_W64(_s2maQ::I64, 29)) goto c2np9; else goto c2npj;
       c2np9: // global
           R2 = _s2maQ::I64;
           call GHC.Unicode.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c2npj: // global
           if (%MO_S_Lt_W64(_s2maQ::I64, 21)) goto u2npl; else goto u2npn;
       u2npl: // global
           if (%MO_S_Lt_W64(_s2maQ::I64, 18)) goto c2npe; else goto u2npm;
       u2npm: // global
           if (_s2maQ::I64 == 19) goto c2npi; else goto c2npi;
       u2npn: // global
           if (%MO_S_Lt_W64(_s2maQ::I64, 22)) goto c2npi; else goto c2npe;
       c2npi: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2npe: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.332981841 UTC

[section ""data" . GHC.Unicode.isSymbol_closure" {
     GHC.Unicode.isSymbol_closure:
         const GHC.Unicode.isSymbol_info;
         const 0;
 },
 GHC.Unicode.isSymbol_entry() //  [R2]
         { info_tbl: [(c2npD,
                       label: GHC.Unicode.isSymbol_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2npD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2npE; else goto c2npF;
       c2npE: // global
           R2 = R2;
           R1 = GHC.Unicode.isSymbol_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2npF: // global
           I64[Sp - 8] = block_c2npA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2npJ; else goto c2npB;
       u2npJ: // global
           call _c2npA(R1) args: 0, res: 0, upd: 0;
       c2npB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2npA() //  [R1]
         { info_tbl: [(c2npA,
                       label: block_c2npA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2npA: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wisSymbol_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.338538625 UTC

[section ""data" . GHC.Unicode.isUpper_closure" {
     GHC.Unicode.isUpper_closure:
         const GHC.Unicode.isUpper_info;
 },
 GHC.Unicode.isUpper_entry() //  [R2]
         { info_tbl: [(c2nq1,
                       label: GHC.Unicode.isUpper_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nq1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2nq2; else goto c2nq3;
       c2nq2: // global
           R2 = R2;
           R1 = GHC.Unicode.isUpper_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nq3: // global
           I64[Sp - 8] = block_c2npY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2nqg; else goto c2npZ;
       u2nqg: // global
           call _c2npY(R1) args: 0, res: 0, upd: 0;
       c2npZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2npY() //  [R1]
         { info_tbl: [(c2npY,
                       label: block_c2npY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2npY: // global
           (_s2mb6::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswupper(I64[R1 + 7]);
           if (_s2mb6::I64 == 0) goto c2nqf; else goto c2nqe;
       c2nqf: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2nqe: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.344318057 UTC

[section ""data" . GHC.Unicode.isPrint_closure" {
     GHC.Unicode.isPrint_closure:
         const GHC.Unicode.isPrint_info;
 },
 GHC.Unicode.isPrint_entry() //  [R2]
         { info_tbl: [(c2nqC,
                       label: GHC.Unicode.isPrint_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nqC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2nqD; else goto c2nqE;
       c2nqD: // global
           R2 = R2;
           R1 = GHC.Unicode.isPrint_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nqE: // global
           I64[Sp - 8] = block_c2nqz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2nqR; else goto c2nqA;
       u2nqR: // global
           call _c2nqz(R1) args: 0, res: 0, upd: 0;
       c2nqA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2nqz() //  [R1]
         { info_tbl: [(c2nqz,
                       label: block_c2nqz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nqz: // global
           (_s2mbf::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswprint(I64[R1 + 7]);
           if (_s2mbf::I64 == 0) goto c2nqQ; else goto c2nqP;
       c2nqQ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2nqP: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.350331856 UTC

[section ""data" . GHC.Unicode.isControl_closure" {
     GHC.Unicode.isControl_closure:
         const GHC.Unicode.isControl_info;
 },
 GHC.Unicode.isControl_entry() //  [R2]
         { info_tbl: [(c2nrd,
                       label: GHC.Unicode.isControl_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nrd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2nre; else goto c2nrf;
       c2nre: // global
           R2 = R2;
           R1 = GHC.Unicode.isControl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nrf: // global
           I64[Sp - 8] = block_c2nra_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2nrs; else goto c2nrb;
       u2nrs: // global
           call _c2nra(R1) args: 0, res: 0, upd: 0;
       c2nrb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2nra() //  [R1]
         { info_tbl: [(c2nra,
                       label: block_c2nra_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nra: // global
           (_s2mbo::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswcntrl(I64[R1 + 7]);
           if (_s2mbo::I64 == 0) goto c2nrr; else goto c2nrq;
       c2nrr: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2nrq: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.357235952 UTC

[section ""data" . GHC.Unicode.isAlphaNum_closure" {
     GHC.Unicode.isAlphaNum_closure:
         const GHC.Unicode.isAlphaNum_info;
 },
 GHC.Unicode.isAlphaNum_entry() //  [R2]
         { info_tbl: [(c2nrO,
                       label: GHC.Unicode.isAlphaNum_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nrO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2nrP; else goto c2nrQ;
       c2nrP: // global
           R2 = R2;
           R1 = GHC.Unicode.isAlphaNum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nrQ: // global
           I64[Sp - 8] = block_c2nrL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2ns3; else goto c2nrM;
       u2ns3: // global
           call _c2nrL(R1) args: 0, res: 0, upd: 0;
       c2nrM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2nrL() //  [R1]
         { info_tbl: [(c2nrL,
                       label: block_c2nrL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nrL: // global
           (_s2mbx::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalnum(I64[R1 + 7]);
           if (_s2mbx::I64 == 0) goto c2ns2; else goto c2ns1;
       c2ns2: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2ns1: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.36303885 UTC

[section ""data" . GHC.Unicode.isAlpha_closure" {
     GHC.Unicode.isAlpha_closure:
         const GHC.Unicode.isAlpha_info;
 },
 GHC.Unicode.isAlpha_entry() //  [R2]
         { info_tbl: [(c2nsp,
                       label: GHC.Unicode.isAlpha_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nsp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2nsq; else goto c2nsr;
       c2nsq: // global
           R2 = R2;
           R1 = GHC.Unicode.isAlpha_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2nsr: // global
           I64[Sp - 8] = block_c2nsm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2nsE; else goto c2nsn;
       u2nsE: // global
           call _c2nsm(R1) args: 0, res: 0, upd: 0;
       c2nsn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2nsm() //  [R1]
         { info_tbl: [(c2nsm,
                       label: block_c2nsm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nsm: // global
           (_s2mbG::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswalpha(I64[R1 + 7]);
           if (_s2mbG::I64 == 0) goto c2nsD; else goto c2nsC;
       c2nsD: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2nsC: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.368990831 UTC

[section ""data" . GHC.Unicode.$wisSpace_closure" {
     GHC.Unicode.$wisSpace_closure:
         const GHC.Unicode.$wisSpace_info;
 },
 GHC.Unicode.$wisSpace_entry() //  [R2]
         { info_tbl: [(c2nsZ,
                       label: GHC.Unicode.$wisSpace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nsZ: // global
           if (R2 > 887) goto c2ntj; else goto c2ntD;
       c2ntj: // global
           (_s2mbQ::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_iswspace(R2);
           if (_s2mbQ::I64 == 0) goto c2ntv; else goto c2ntC;
       c2ntD: // global
           if (R2 == 32) goto c2ntC; else goto c2ntB;
       c2ntB: // global
           if ((R2 + -9) <= 4) goto c2ntC; else goto c2nty;
       c2nty: // global
           if (R2 == 160) goto c2ntC; else goto c2ntv;
       c2ntC: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c2ntv: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.373049158 UTC

[section ""data" . GHC.Unicode.isSpace_closure" {
     GHC.Unicode.isSpace_closure:
         const GHC.Unicode.isSpace_info;
 },
 GHC.Unicode.isSpace_entry() //  [R2]
         { info_tbl: [(c2ntU,
                       label: GHC.Unicode.isSpace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ntU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c2ntV; else goto c2ntW;
       c2ntV: // global
           R2 = R2;
           R1 = GHC.Unicode.isSpace_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2ntW: // global
           I64[Sp - 8] = block_c2ntR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u2nu0; else goto c2ntS;
       u2nu0: // global
           call _c2ntR(R1) args: 0, res: 0, upd: 0;
       c2ntS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c2ntR() //  [R1]
         { info_tbl: [(c2ntR,
                       label: block_c2ntR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ntR: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Unicode.$wisSpace_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.378513077 UTC

[section ""data" . GHC.Unicode.UppercaseLetter_closure" {
     GHC.Unicode.UppercaseLetter_closure:
         const GHC.Unicode.UppercaseLetter_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.380210862 UTC

[section ""data" . GHC.Unicode.LowercaseLetter_closure" {
     GHC.Unicode.LowercaseLetter_closure:
         const GHC.Unicode.LowercaseLetter_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.382512469 UTC

[section ""data" . GHC.Unicode.TitlecaseLetter_closure" {
     GHC.Unicode.TitlecaseLetter_closure:
         const GHC.Unicode.TitlecaseLetter_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.384138534 UTC

[section ""data" . GHC.Unicode.ModifierLetter_closure" {
     GHC.Unicode.ModifierLetter_closure:
         const GHC.Unicode.ModifierLetter_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.385708914 UTC

[section ""data" . GHC.Unicode.OtherLetter_closure" {
     GHC.Unicode.OtherLetter_closure:
         const GHC.Unicode.OtherLetter_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.387266338 UTC

[section ""data" . GHC.Unicode.NonSpacingMark_closure" {
     GHC.Unicode.NonSpacingMark_closure:
         const GHC.Unicode.NonSpacingMark_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.388887356 UTC

[section ""data" . GHC.Unicode.SpacingCombiningMark_closure" {
     GHC.Unicode.SpacingCombiningMark_closure:
         const GHC.Unicode.SpacingCombiningMark_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.390441992 UTC

[section ""data" . GHC.Unicode.EnclosingMark_closure" {
     GHC.Unicode.EnclosingMark_closure:
         const GHC.Unicode.EnclosingMark_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.392023383 UTC

[section ""data" . GHC.Unicode.DecimalNumber_closure" {
     GHC.Unicode.DecimalNumber_closure:
         const GHC.Unicode.DecimalNumber_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.393685852 UTC

[section ""data" . GHC.Unicode.LetterNumber_closure" {
     GHC.Unicode.LetterNumber_closure:
         const GHC.Unicode.LetterNumber_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.395326306 UTC

[section ""data" . GHC.Unicode.OtherNumber_closure" {
     GHC.Unicode.OtherNumber_closure:
         const GHC.Unicode.OtherNumber_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.396889904 UTC

[section ""data" . GHC.Unicode.ConnectorPunctuation_closure" {
     GHC.Unicode.ConnectorPunctuation_closure:
         const GHC.Unicode.ConnectorPunctuation_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.39873249 UTC

[section ""data" . GHC.Unicode.DashPunctuation_closure" {
     GHC.Unicode.DashPunctuation_closure:
         const GHC.Unicode.DashPunctuation_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.400351754 UTC

[section ""data" . GHC.Unicode.OpenPunctuation_closure" {
     GHC.Unicode.OpenPunctuation_closure:
         const GHC.Unicode.OpenPunctuation_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.401843267 UTC

[section ""data" . GHC.Unicode.ClosePunctuation_closure" {
     GHC.Unicode.ClosePunctuation_closure:
         const GHC.Unicode.ClosePunctuation_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.403413815 UTC

[section ""data" . GHC.Unicode.InitialQuote_closure" {
     GHC.Unicode.InitialQuote_closure:
         const GHC.Unicode.InitialQuote_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.405834749 UTC

[section ""data" . GHC.Unicode.FinalQuote_closure" {
     GHC.Unicode.FinalQuote_closure:
         const GHC.Unicode.FinalQuote_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.40745911 UTC

[section ""data" . GHC.Unicode.OtherPunctuation_closure" {
     GHC.Unicode.OtherPunctuation_closure:
         const GHC.Unicode.OtherPunctuation_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.409027714 UTC

[section ""data" . GHC.Unicode.MathSymbol_closure" {
     GHC.Unicode.MathSymbol_closure:
         const GHC.Unicode.MathSymbol_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.410672696 UTC

[section ""data" . GHC.Unicode.CurrencySymbol_closure" {
     GHC.Unicode.CurrencySymbol_closure:
         const GHC.Unicode.CurrencySymbol_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.41222249 UTC

[section ""data" . GHC.Unicode.ModifierSymbol_closure" {
     GHC.Unicode.ModifierSymbol_closure:
         const GHC.Unicode.ModifierSymbol_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.41388476 UTC

[section ""data" . GHC.Unicode.OtherSymbol_closure" {
     GHC.Unicode.OtherSymbol_closure:
         const GHC.Unicode.OtherSymbol_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.415506235 UTC

[section ""data" . GHC.Unicode.Space_closure" {
     GHC.Unicode.Space_closure:
         const GHC.Unicode.Space_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.417056868 UTC

[section ""data" . GHC.Unicode.LineSeparator_closure" {
     GHC.Unicode.LineSeparator_closure:
         const GHC.Unicode.LineSeparator_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.419355364 UTC

[section ""data" . GHC.Unicode.ParagraphSeparator_closure" {
     GHC.Unicode.ParagraphSeparator_closure:
         const GHC.Unicode.ParagraphSeparator_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.42094264 UTC

[section ""data" . GHC.Unicode.Control_closure" {
     GHC.Unicode.Control_closure:
         const GHC.Unicode.Control_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.422558504 UTC

[section ""data" . GHC.Unicode.Format_closure" {
     GHC.Unicode.Format_closure:
         const GHC.Unicode.Format_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.42414349 UTC

[section ""data" . GHC.Unicode.Surrogate_closure" {
     GHC.Unicode.Surrogate_closure:
         const GHC.Unicode.Surrogate_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.42609547 UTC

[section ""data" . GHC.Unicode.PrivateUse_closure" {
     GHC.Unicode.PrivateUse_closure:
         const GHC.Unicode.PrivateUse_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.427695404 UTC

[section ""data" . GHC.Unicode.NotAssigned_closure" {
     GHC.Unicode.NotAssigned_closure:
         const GHC.Unicode.NotAssigned_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.42931808 UTC

[section ""relreadonly" . GHC.Unicode.GeneralCategory_closure_tbl" {
     GHC.Unicode.GeneralCategory_closure_tbl:
         const GHC.Unicode.UppercaseLetter_closure+1;
         const GHC.Unicode.LowercaseLetter_closure+1;
         const GHC.Unicode.TitlecaseLetter_closure+1;
         const GHC.Unicode.ModifierLetter_closure+1;
         const GHC.Unicode.OtherLetter_closure+1;
         const GHC.Unicode.NonSpacingMark_closure+1;
         const GHC.Unicode.SpacingCombiningMark_closure+1;
         const GHC.Unicode.EnclosingMark_closure+1;
         const GHC.Unicode.DecimalNumber_closure+1;
         const GHC.Unicode.LetterNumber_closure+1;
         const GHC.Unicode.OtherNumber_closure+1;
         const GHC.Unicode.ConnectorPunctuation_closure+1;
         const GHC.Unicode.DashPunctuation_closure+1;
         const GHC.Unicode.OpenPunctuation_closure+1;
         const GHC.Unicode.ClosePunctuation_closure+1;
         const GHC.Unicode.InitialQuote_closure+1;
         const GHC.Unicode.FinalQuote_closure+1;
         const GHC.Unicode.OtherPunctuation_closure+1;
         const GHC.Unicode.MathSymbol_closure+1;
         const GHC.Unicode.CurrencySymbol_closure+1;
         const GHC.Unicode.ModifierSymbol_closure+1;
         const GHC.Unicode.OtherSymbol_closure+1;
         const GHC.Unicode.Space_closure+1;
         const GHC.Unicode.LineSeparator_closure+1;
         const GHC.Unicode.ParagraphSeparator_closure+1;
         const GHC.Unicode.Control_closure+1;
         const GHC.Unicode.Format_closure+1;
         const GHC.Unicode.Surrogate_closure+1;
         const GHC.Unicode.PrivateUse_closure+1;
         const GHC.Unicode.NotAssigned_closure+1;
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.432111355 UTC

[GHC.Unicode.UppercaseLetter_con_entry() //  [R1]
         { info_tbl: [(c2nuG,
                       label: GHC.Unicode.UppercaseLetter_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,85,112,112,101,114,99,97,115,101,76,101,116,116,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nuG: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.435287588 UTC

[GHC.Unicode.LowercaseLetter_con_entry() //  [R1]
         { info_tbl: [(c2nuN,
                       label: GHC.Unicode.LowercaseLetter_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 1
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,76,111,119,101,114,99,97,115,101,76,101,116,116,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nuN: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.438871542 UTC

[GHC.Unicode.TitlecaseLetter_con_entry() //  [R1]
         { info_tbl: [(c2nuU,
                       label: GHC.Unicode.TitlecaseLetter_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 2
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,84,105,116,108,101,99,97,115,101,76,101,116,116,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nuU: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.441986412 UTC

[GHC.Unicode.ModifierLetter_con_entry() //  [R1]
         { info_tbl: [(c2nv1,
                       label: GHC.Unicode.ModifierLetter_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 3
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,77,111,100,105,102,105,101,114,76,101,116,116,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nv1: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.445027783 UTC

[GHC.Unicode.OtherLetter_con_entry() //  [R1]
         { info_tbl: [(c2nv8,
                       label: GHC.Unicode.OtherLetter_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 4
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,76,101,116,116,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nv8: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.448069399 UTC

[GHC.Unicode.NonSpacingMark_con_entry() //  [R1]
         { info_tbl: [(c2nvf,
                       label: GHC.Unicode.NonSpacingMark_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 5
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,78,111,110,83,112,97,99,105,110,103,77,97,114,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nvf: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.451260511 UTC

[GHC.Unicode.SpacingCombiningMark_con_entry() //  [R1]
         { info_tbl: [(c2nvm,
                       label: GHC.Unicode.SpacingCombiningMark_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 6
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,83,112,97,99,105,110,103,67,111,109,98,105,110,105,110,103,77,97,114,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nvm: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.454711301 UTC

[GHC.Unicode.EnclosingMark_con_entry() //  [R1]
         { info_tbl: [(c2nvt,
                       label: GHC.Unicode.EnclosingMark_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 7
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,69,110,99,108,111,115,105,110,103,77,97,114,107]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nvt: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.457929235 UTC

[GHC.Unicode.DecimalNumber_con_entry() //  [R1]
         { info_tbl: [(c2nvA,
                       label: GHC.Unicode.DecimalNumber_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 8
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,68,101,99,105,109,97,108,78,117,109,98,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nvA: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.461548193 UTC

[GHC.Unicode.LetterNumber_con_entry() //  [R1]
         { info_tbl: [(c2nvH,
                       label: GHC.Unicode.LetterNumber_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 9
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,76,101,116,116,101,114,78,117,109,98,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nvH: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.464511264 UTC

[GHC.Unicode.OtherNumber_con_entry() //  [R1]
         { info_tbl: [(c2nvO,
                       label: GHC.Unicode.OtherNumber_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 10
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,78,117,109,98,101,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nvO: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.467764752 UTC

[GHC.Unicode.ConnectorPunctuation_con_entry() //  [R1]
         { info_tbl: [(c2nvV,
                       label: GHC.Unicode.ConnectorPunctuation_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 11
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,111,110,110,101,99,116,111,114,80,117,110,99,116,117,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nvV: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.470863622 UTC

[GHC.Unicode.DashPunctuation_con_entry() //  [R1]
         { info_tbl: [(c2nw2,
                       label: GHC.Unicode.DashPunctuation_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 12
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,68,97,115,104,80,117,110,99,116,117,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nw2: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.473919328 UTC

[GHC.Unicode.OpenPunctuation_con_entry() //  [R1]
         { info_tbl: [(c2nw9,
                       label: GHC.Unicode.OpenPunctuation_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 13
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,112,101,110,80,117,110,99,116,117,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nw9: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.476939918 UTC

[GHC.Unicode.ClosePunctuation_con_entry() //  [R1]
         { info_tbl: [(c2nwg,
                       label: GHC.Unicode.ClosePunctuation_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 14
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,108,111,115,101,80,117,110,99,116,117,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nwg: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.480422188 UTC

[GHC.Unicode.InitialQuote_con_entry() //  [R1]
         { info_tbl: [(c2nwn,
                       label: GHC.Unicode.InitialQuote_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 15
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,73,110,105,116,105,97,108,81,117,111,116,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nwn: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.483577704 UTC

[GHC.Unicode.FinalQuote_con_entry() //  [R1]
         { info_tbl: [(c2nwu,
                       label: GHC.Unicode.FinalQuote_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 16
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,70,105,110,97,108,81,117,111,116,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nwu: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.487504515 UTC

[GHC.Unicode.OtherPunctuation_con_entry() //  [R1]
         { info_tbl: [(c2nwB,
                       label: GHC.Unicode.OtherPunctuation_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 17
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,80,117,110,99,116,117,97,116,105,111,110]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nwB: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.490527173 UTC

[GHC.Unicode.MathSymbol_con_entry() //  [R1]
         { info_tbl: [(c2nwI,
                       label: GHC.Unicode.MathSymbol_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 18
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,77,97,116,104,83,121,109,98,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nwI: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.493824859 UTC

[GHC.Unicode.CurrencySymbol_con_entry() //  [R1]
         { info_tbl: [(c2nwP,
                       label: GHC.Unicode.CurrencySymbol_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 19
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,117,114,114,101,110,99,121,83,121,109,98,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nwP: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.496776552 UTC

[GHC.Unicode.ModifierSymbol_con_entry() //  [R1]
         { info_tbl: [(c2nwW,
                       label: GHC.Unicode.ModifierSymbol_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 20
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,77,111,100,105,102,105,101,114,83,121,109,98,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nwW: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.499682816 UTC

[GHC.Unicode.OtherSymbol_con_entry() //  [R1]
         { info_tbl: [(c2nx3,
                       label: GHC.Unicode.OtherSymbol_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 21
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,79,116,104,101,114,83,121,109,98,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nx3: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.502738141 UTC

[GHC.Unicode.Space_con_entry() //  [R1]
         { info_tbl: [(c2nxa,
                       label: GHC.Unicode.Space_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 22
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,83,112,97,99,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nxa: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.505934106 UTC

[GHC.Unicode.LineSeparator_con_entry() //  [R1]
         { info_tbl: [(c2nxh,
                       label: GHC.Unicode.LineSeparator_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 23
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,76,105,110,101,83,101,112,97,114,97,116,111,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nxh: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.508998637 UTC

[GHC.Unicode.ParagraphSeparator_con_entry() //  [R1]
         { info_tbl: [(c2nxo,
                       label: GHC.Unicode.ParagraphSeparator_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 24
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,80,97,114,97,103,114,97,112,104,83,101,112,97,114,97,116,111,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nxo: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.51214499 UTC

[GHC.Unicode.Control_con_entry() //  [R1]
         { info_tbl: [(c2nxv,
                       label: GHC.Unicode.Control_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 25
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,67,111,110,116,114,111,108]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nxv: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.51617302 UTC

[GHC.Unicode.Format_con_entry() //  [R1]
         { info_tbl: [(c2nxC,
                       label: GHC.Unicode.Format_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 26
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,70,111,114,109,97,116]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nxC: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.519337214 UTC

[GHC.Unicode.Surrogate_con_entry() //  [R1]
         { info_tbl: [(c2nxJ,
                       label: GHC.Unicode.Surrogate_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 27
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,83,117,114,114,111,103,97,116,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nxJ: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.522450796 UTC

[GHC.Unicode.PrivateUse_con_entry() //  [R1]
         { info_tbl: [(c2nxQ,
                       label: GHC.Unicode.PrivateUse_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 28
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,80,114,105,118,97,116,101,85,115,101]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nxQ: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.526004747 UTC

[GHC.Unicode.NotAssigned_con_entry() //  [R1]
         { info_tbl: [(c2nxX,
                       label: GHC.Unicode.NotAssigned_con_info
                       rep:HeapRep 1 nonptrs {
                             Con {tag: 29
                                  descr:[98,97,115,101,58,71,72,67,46,85,110,105,99,111,100,101,46,78,111,116,65,115,115,105,103,110,101,100]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2nxX: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:57:07.529034242 UTC

[section ""relreadonly" . S2mmR_srt" {
     S2mmR_srt:
         const GHC.Unicode.$w$cshowsPrec_closure;
         const lvl1_r2j63_closure;
         const lvl3_r2j65_closure;
         const lvl5_r2j67_closure;
         const lvl7_r2j69_closure;
         const lvl9_r2j6b_closure;
         const lvl11_r2j6d_closure;
         const lvl13_r2j6f_closure;
         const lvl15_r2j6h_closure;
         const lvl17_r2j6j_closure;
         const lvl19_r2j6l_closure;
         const lvl21_r2j6n_closure;
         const lvl23_r2j6p_closure;
         const lvl25_r2j6r_closure;
         const lvl27_r2j6t_closure;
         const lvl29_r2j6v_closure;
         const lvl31_r2j6x_closure;
         const lvl33_r2j6z_closure;
         const lvl35_r2j6B_closure;
         const lvl37_r2j6D_closure;
         const lvl39_r2j6F_closure;
         const lvl41_r2j6H_closure;
         const lvl43_r2j6J_closure;
         const lvl45_r2j6L_closure;
         const lvl47_r2j6N_closure;
         const lvl49_r2j6P_closure;
         const lvl51_r2j6R_closure;
         const lvl53_r2j6T_closure;
         const lvl55_r2j6V_closure;
         const lvl57_r2j6X_closure;
         const lvl59_r2j6Z_closure;
         const GHC.Arr.hopelessIndexError_closure;
         const GHC.Unicode.$fIxGeneralCategory_$cindex_closure;
         const lvl62_r2j7d_closure;
         const lvl63_r2j7e_closure;
         const lvl64_r2j7f_closure;
         const GHC.Err.error_closure;
         const GHC.Unicode.$wlvl_closure;
         const $dIP3_r2j7a_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$ctoEnum_closure;
         const GHC.Unicode.$w$ctoEnum_closure;
         const GHC.Char.$wlvl_closure;
         const GHC.Unicode.toLower_closure;
         const GHC.Unicode.toUpper_closure;
         const GHC.Unicode.toTitle_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$csucc_closure;
         const GHC.Unicode.$fEnumGeneralCategory2_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$cpred_closure;
         const GHC.Unicode.$fEnumGeneralCategory1_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromTo_closure;
         const GHC.Unicode.$fEnumGeneralCategory_$cenumFromThenTo_closure;
         const GHC.Unicode.generalCategory_closure;
         const GHC.Unicode.$wgeneralCategory_closure;
         const GHC.Unicode.isPunctuation_closure;
         const GHC.Unicode.$wisPunctuation_closure;
         const GHC.Unicode.isSymbol_closure;
         const GHC.Unicode.$wisSymbol_closure;
 }]

