
==================== Tidy Core ====================
2018-03-16 16:00:29.167972665 UTC

Result size of Tidy Core
  = {terms: 658, types: 635, coercions: 269, joins: 0/0}

-- RHS size: {terms: 3, types: 3, coercions: 2, joins: 0/0}
symbolSing [InlPrag=INLINE]
  :: forall (n :: Symbol). KnownSymbol n => SSymbol n
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=False,boring_ok=True)
         Tmpl= \ (@ (n_a5sXD :: Symbol))
                 (v_B1 [Occ=Once] :: KnownSymbol n_a5sXD) ->
                 v_B1
                 `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5sXD>_N
                         :: (KnownSymbol n_a5sXD :: Constraint)
                            ~R# (SSymbol n_a5sXD :: *))}]
symbolSing
  = \ (@ (n_a5sXD :: Symbol)) (v_B1 :: KnownSymbol n_a5sXD) ->
      v_B1
      `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5sXD>_N
              :: (KnownSymbol n_a5sXD :: Constraint) ~R# (SSymbol n_a5sXD :: *))

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
GHC.TypeLits.natVal1
  :: forall (n :: Nat) (proxy :: Nat -> *).
     KnownNat n =>
     proxy n -> KnownNat n
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ (n_a5t52 :: Nat))
                 (@ (proxy_a5t53 :: Nat -> *))
                 ($dKnownNat_a5t55 [Occ=Once] :: KnownNat n_a5t52)
                 _ [Occ=Dead] ->
                 $dKnownNat_a5t55}]
GHC.TypeLits.natVal1
  = \ (@ (n_a5t52 :: Nat))
      (@ (proxy_a5t53 :: Nat -> *))
      ($dKnownNat_a5t55 :: KnownNat n_a5t52)
      _ [Occ=Dead] ->
      $dKnownNat_a5t55

-- RHS size: {terms: 1, types: 0, coercions: 19, joins: 0/0}
natVal
  :: forall (n :: Nat) (proxy :: Nat -> *).
     KnownNat n =>
     proxy n -> Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.TypeLits.natVal1
               `cast` (forall (n :: <Nat>_N) (proxy :: <Nat -> *>_N).
                       <KnownNat n>_R
                       ->_R <proxy n>_R
                       ->_R GHC.TypeNats.N:KnownNat[0] <n>_N ; (GHC.TypeNats.N:SNat[0]
                                                                    <n>_P ; GHC.Natural.N:Natural[0])
                       :: (forall (n :: Nat) (proxy :: Nat -> *).
                           KnownNat n =>
                           proxy n -> KnownNat n :: *)
                          ~R# (forall (n :: Nat) (proxy :: Nat -> *).
                               KnownNat n =>
                               proxy n -> Integer :: *))}]
natVal
  = GHC.TypeLits.natVal1
    `cast` (forall (n :: <Nat>_N) (proxy :: <Nat -> *>_N).
            <KnownNat n>_R
            ->_R <proxy n>_R
            ->_R GHC.TypeNats.N:KnownNat[0] <n>_N ; (GHC.TypeNats.N:SNat[0]
                                                         <n>_P ; GHC.Natural.N:Natural[0])
            :: (forall (n :: Nat) (proxy :: Nat -> *).
                KnownNat n =>
                proxy n -> KnownNat n :: *)
               ~R# (forall (n :: Nat) (proxy :: Nat -> *).
                    KnownNat n =>
                    proxy n -> Integer :: *))

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
GHC.TypeLits.symbolVal1
  :: forall (n :: Symbol) (proxy :: Symbol -> *).
     KnownSymbol n =>
     proxy n -> KnownSymbol n
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ (n_a5t4w :: Symbol))
                 (@ (proxy_a5t4x :: Symbol -> *))
                 ($dKnownSymbol_a5t4z [Occ=Once] :: KnownSymbol n_a5t4w)
                 _ [Occ=Dead] ->
                 $dKnownSymbol_a5t4z}]
GHC.TypeLits.symbolVal1
  = \ (@ (n_a5t4w :: Symbol))
      (@ (proxy_a5t4x :: Symbol -> *))
      ($dKnownSymbol_a5t4z :: KnownSymbol n_a5t4w)
      _ [Occ=Dead] ->
      $dKnownSymbol_a5t4z

-- RHS size: {terms: 1, types: 0, coercions: 17, joins: 0/0}
symbolVal
  :: forall (n :: Symbol) (proxy :: Symbol -> *).
     KnownSymbol n =>
     proxy n -> String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.TypeLits.symbolVal1
               `cast` (forall (n :: <Symbol>_N) (proxy :: <Symbol -> *>_N).
                       <KnownSymbol n>_R
                       ->_R <proxy n>_R
                       ->_R GHC.TypeLits.N:KnownSymbol[0] <n>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                      <n>_P
                       :: (forall (n :: Symbol) (proxy :: Symbol -> *).
                           KnownSymbol n =>
                           proxy n -> KnownSymbol n :: *)
                          ~R# (forall (n :: Symbol) (proxy :: Symbol -> *).
                               KnownSymbol n =>
                               proxy n -> String :: *))}]
symbolVal
  = GHC.TypeLits.symbolVal1
    `cast` (forall (n :: <Symbol>_N) (proxy :: <Symbol -> *>_N).
            <KnownSymbol n>_R
            ->_R <proxy n>_R
            ->_R GHC.TypeLits.N:KnownSymbol[0] <n>_N ; GHC.TypeLits.N:SSymbol[0]
                                                           <n>_P
            :: (forall (n :: Symbol) (proxy :: Symbol -> *).
                KnownSymbol n =>
                proxy n -> KnownSymbol n :: *)
               ~R# (forall (n :: Symbol) (proxy :: Symbol -> *).
                    KnownSymbol n =>
                    proxy n -> String :: *))

-- RHS size: {terms: 4, types: 13, coercions: 21, joins: 0/0}
GHC.TypeLits.sameSymbol1
  :: forall (a :: Symbol) (b :: Symbol). Maybe (a :~: b)
[GblId,
 Caf=NoCafRefs,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.TypeLits.sameSymbol1
  = \ (@ (a_a5t4I :: Symbol)) (@ (b_a5t4J :: Symbol)) ->
      GHC.Base.Just
        @ (a_a5t4I :~: b_a5t4J)
        ((Data.Type.Equality.$WRefl @ GHC.Types.Any @ GHC.Types.Any)
         `cast` (((:~:)
                    (UnsafeCo nominal GHC.Types.Any Symbol)
                    (UnsafeCo nominal GHC.Types.Any a_a5t4I)
                    (UnsafeCo nominal GHC.Types.Any b_a5t4J))_R
                 :: (GHC.Types.Any :~: GHC.Types.Any :: *)
                    ~R# (a_a5t4I :~: b_a5t4J :: *)))

-- RHS size: {terms: 14, types: 19, coercions: 10, joins: 0/0}
sameSymbol
  :: forall (a :: Symbol) (b :: Symbol).
     (KnownSymbol a, KnownSymbol b) =>
     Proxy a -> Proxy b -> Maybe (a :~: b)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U><L,A><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ (a_a5t4I :: Symbol))
                 (@ (b_a5t4J :: Symbol))
                 ($dKnownSymbol_a5t4L [Occ=Once] :: KnownSymbol a_a5t4I)
                 ($dKnownSymbol1_a5t4M [Occ=Once] :: KnownSymbol b_a5t4J)
                 _ [Occ=Dead]
                 _ [Occ=Dead] ->
                 case GHC.Base.eqString
                        ($dKnownSymbol_a5t4L
                         `cast` (GHC.TypeLits.N:KnownSymbol[0] <a_a5t4I>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                                 <a_a5t4I>_P
                                 :: (KnownSymbol a_a5t4I :: Constraint) ~R# (String :: *)))
                        ($dKnownSymbol1_a5t4M
                         `cast` (GHC.TypeLits.N:KnownSymbol[0] <b_a5t4J>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                                 <b_a5t4J>_P
                                 :: (KnownSymbol b_a5t4J :: Constraint) ~R# (String :: *)))
                 of {
                   GHC.Types.False -> GHC.Base.Nothing @ (a_a5t4I :~: b_a5t4J);
                   GHC.Types.True -> GHC.TypeLits.sameSymbol1 @ a_a5t4I @ b_a5t4J
                 }}]
sameSymbol
  = \ (@ (a_a5t4I :: Symbol))
      (@ (b_a5t4J :: Symbol))
      ($dKnownSymbol_a5t4L :: KnownSymbol a_a5t4I)
      ($dKnownSymbol1_a5t4M :: KnownSymbol b_a5t4J)
      _ [Occ=Dead]
      _ [Occ=Dead] ->
      case GHC.Base.eqString
             ($dKnownSymbol_a5t4L
              `cast` (GHC.TypeLits.N:KnownSymbol[0] <a_a5t4I>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                      <a_a5t4I>_P
                      :: (KnownSymbol a_a5t4I :: Constraint) ~R# (String :: *)))
             ($dKnownSymbol1_a5t4M
              `cast` (GHC.TypeLits.N:KnownSymbol[0] <b_a5t4J>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                      <b_a5t4J>_P
                      :: (KnownSymbol b_a5t4J :: Constraint) ~R# (String :: *)))
      of {
        GHC.Types.False -> GHC.Base.Nothing @ (a_a5t4I :~: b_a5t4J);
        GHC.Types.True -> GHC.TypeLits.sameSymbol1 @ a_a5t4I @ b_a5t4J
      }

-- RHS size: {terms: 13, types: 12, coercions: 5, joins: 0/0}
GHC.TypeLits.$fShowSomeSymbol_$cshowsPrec
  :: GHC.Types.Int -> SomeSymbol -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<L,A><S,1*U><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (ds_d5t8t [Occ=Once!] :: SomeSymbol)
                 (eta_B1 [Occ=Once] :: String) ->
                 case ds_d5t8t of
                 { SomeSymbol @ n_a5t5F $dKnownSymbol_a5t5G [Occ=Once]
                              _ [Occ=Dead] ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Show.showLitString
                      ($dKnownSymbol_a5t5G
                       `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t5F>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                               <n_a5t5F>_P
                               :: (KnownSymbol n_a5t5F :: Constraint) ~R# (String :: *)))
                      (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta_B1))
                 }}]
GHC.TypeLits.$fShowSomeSymbol_$cshowsPrec
  = \ _ [Occ=Dead] (ds_d5t8t :: SomeSymbol) (eta_B1 :: String) ->
      case ds_d5t8t of
      { SomeSymbol @ n_a5t5F $dKnownSymbol_a5t5G x_a5sXJ ->
      GHC.Types.:
        @ GHC.Types.Char
        GHC.Show.$fShow(,)3
        (GHC.Show.showLitString
           ($dKnownSymbol_a5t5G
            `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t5F>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                    <n_a5t5F>_P
                    :: (KnownSymbol n_a5t5F :: Constraint) ~R# (String :: *)))
           (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta_B1))
      }

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.TypeLits.$fShowSomeSymbol2 :: [GHC.Types.Char]
[GblId,
 Caf=NoCafRefs,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.TypeLits.$fShowSomeSymbol2
  = GHC.Types.:
      @ GHC.Types.Char
      GHC.Show.$fShow(,)3
      (GHC.Types.[] @ GHC.Types.Char)

-- RHS size: {terms: 9, types: 9, coercions: 5, joins: 0/0}
GHC.TypeLits.$fShowSomeSymbol_$cshow :: SomeSymbol -> String
[GblId,
 Arity=1,
 Str=<S,1*U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i1Jj2 [Occ=Once!] :: SomeSymbol) ->
                 case x_i1Jj2 of
                 { SomeSymbol @ n_a5t5F $dKnownSymbol_a5t5G [Occ=Once]
                              _ [Occ=Dead] ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Show.showLitString
                      ($dKnownSymbol_a5t5G
                       `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t5F>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                               <n_a5t5F>_P
                               :: (KnownSymbol n_a5t5F :: Constraint) ~R# (String :: *)))
                      GHC.TypeLits.$fShowSomeSymbol2)
                 }}]
GHC.TypeLits.$fShowSomeSymbol_$cshow
  = \ (x_i1Jj2 :: SomeSymbol) ->
      case x_i1Jj2 of
      { SomeSymbol @ n_a5t5F $dKnownSymbol_a5t5G x1_a5sXJ ->
      GHC.Types.:
        @ GHC.Types.Char
        GHC.Show.$fShow(,)3
        (GHC.Show.showLitString
           ($dKnownSymbol_a5t5G
            `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t5F>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                    <n_a5t5F>_P
                    :: (KnownSymbol n_a5t5F :: Constraint) ~R# (String :: *)))
           GHC.TypeLits.$fShowSomeSymbol2)
      }

-- RHS size: {terms: 12, types: 11, coercions: 5, joins: 0/0}
GHC.TypeLits.$fShowSomeSymbol1 :: SomeSymbol -> String -> String
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d5t8t [Occ=Once!] :: SomeSymbol)
                 (eta_B1 [Occ=Once, OS=OneShot] :: String) ->
                 case ds_d5t8t of
                 { SomeSymbol @ n_a5t5F $dKnownSymbol_a5t5G [Occ=Once]
                              _ [Occ=Dead] ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Show.showLitString
                      ($dKnownSymbol_a5t5G
                       `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t5F>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                               <n_a5t5F>_P
                               :: (KnownSymbol n_a5t5F :: Constraint) ~R# (String :: *)))
                      (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta_B1))
                 }}]
GHC.TypeLits.$fShowSomeSymbol1
  = \ (ds_d5t8t :: SomeSymbol) (eta_B1 [OS=OneShot] :: String) ->
      case ds_d5t8t of
      { SomeSymbol @ n_a5t5F $dKnownSymbol_a5t5G x_a5sXJ ->
      GHC.Types.:
        @ GHC.Types.Char
        GHC.Show.$fShow(,)3
        (GHC.Show.showLitString
           ($dKnownSymbol_a5t5G
            `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t5F>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                    <n_a5t5F>_P
                    :: (KnownSymbol n_a5t5F :: Constraint) ~R# (String :: *)))
           (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta_B1))
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.TypeLits.$fShowSomeSymbol_$cshowList
  :: [SomeSymbol] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i1Mix [Occ=Once] :: [SomeSymbol])
                 (s_i1Miy [Occ=Once] :: String) ->
                 GHC.Show.showList__
                   @ SomeSymbol GHC.TypeLits.$fShowSomeSymbol1 ls_i1Mix s_i1Miy}]
GHC.TypeLits.$fShowSomeSymbol_$cshowList
  = \ (ls_i1Mix :: [SomeSymbol]) (s_i1Miy :: String) ->
      GHC.Show.showList__
        @ SomeSymbol GHC.TypeLits.$fShowSomeSymbol1 ls_i1Mix s_i1Miy

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.TypeLits.$fShowSomeSymbol [InlPrag=NOUSERINLINE CONLIKE]
  :: Show SomeSymbol
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: SomeSymbol
                       GHC.TypeLits.$fShowSomeSymbol_$cshowsPrec
                       GHC.TypeLits.$fShowSomeSymbol_$cshow
                       GHC.TypeLits.$fShowSomeSymbol_$cshowList]
GHC.TypeLits.$fShowSomeSymbol
  = GHC.Show.C:Show
      @ SomeSymbol
      GHC.TypeLits.$fShowSomeSymbol_$cshowsPrec
      GHC.TypeLits.$fShowSomeSymbol_$cshow
      GHC.TypeLits.$fShowSomeSymbol_$cshowList

-- RHS size: {terms: 11, types: 16, coercions: 10, joins: 0/0}
GHC.TypeLits.$fOrdSomeSymbol_$ccompare
  :: SomeSymbol -> SomeSymbol -> Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d5t8B [Occ=Once!] :: SomeSymbol)
                 (ds1_d5t8C [Occ=Once!] :: SomeSymbol) ->
                 case ds_d5t8B of
                 { SomeSymbol @ n_a5t67 $dKnownSymbol_a5t68 [Occ=Once]
                              _ [Occ=Dead] ->
                 case ds1_d5t8C of
                 { SomeSymbol @ n1_a5t69 $dKnownSymbol1_a5t6a [Occ=Once]
                              _ [Occ=Dead] ->
                 GHC.Classes.$fOrd[]_$s$ccompare1
                   ($dKnownSymbol_a5t68
                    `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t67>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                            <n_a5t67>_P
                            :: (KnownSymbol n_a5t67 :: Constraint) ~R# (String :: *)))
                   ($dKnownSymbol1_a5t6a
                    `cast` (GHC.TypeLits.N:KnownSymbol[0] <n1_a5t69>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                             <n1_a5t69>_P
                            :: (KnownSymbol n1_a5t69 :: Constraint) ~R# (String :: *)))
                 }
                 }}]
GHC.TypeLits.$fOrdSomeSymbol_$ccompare
  = \ (ds_d5t8B :: SomeSymbol) (ds1_d5t8C :: SomeSymbol) ->
      case ds_d5t8B of
      { SomeSymbol @ n_a5t67 $dKnownSymbol_a5t68 x_a5sXK ->
      case ds1_d5t8C of
      { SomeSymbol @ n1_a5t69 $dKnownSymbol1_a5t6a y_a5sXL ->
      GHC.Classes.$fOrd[]_$s$ccompare1
        ($dKnownSymbol_a5t68
         `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t67>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                 <n_a5t67>_P
                 :: (KnownSymbol n_a5t67 :: Constraint) ~R# (String :: *)))
        ($dKnownSymbol1_a5t6a
         `cast` (GHC.TypeLits.N:KnownSymbol[0] <n1_a5t69>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                  <n1_a5t69>_P
                 :: (KnownSymbol n1_a5t69 :: Constraint) ~R# (String :: *)))
      }
      }

-- RHS size: {terms: 11, types: 16, coercions: 10, joins: 0/0}
GHC.TypeLits.$fEqSomeSymbol_$c==
  :: SomeSymbol -> SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d5t8Q [Occ=Once!] :: SomeSymbol)
                 (ds1_d5t8R [Occ=Once!] :: SomeSymbol) ->
                 case ds_d5t8Q of
                 { SomeSymbol @ n_a5t6V $dKnownSymbol_a5t6W [Occ=Once]
                              _ [Occ=Dead] ->
                 case ds1_d5t8R of
                 { SomeSymbol @ n1_a5t6X $dKnownSymbol1_a5t6Y [Occ=Once]
                              _ [Occ=Dead] ->
                 GHC.Base.eqString
                   ($dKnownSymbol_a5t6W
                    `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t6V>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                            <n_a5t6V>_P
                            :: (KnownSymbol n_a5t6V :: Constraint) ~R# (String :: *)))
                   ($dKnownSymbol1_a5t6Y
                    `cast` (GHC.TypeLits.N:KnownSymbol[0] <n1_a5t6X>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                             <n1_a5t6X>_P
                            :: (KnownSymbol n1_a5t6X :: Constraint) ~R# (String :: *)))
                 }
                 }}]
GHC.TypeLits.$fEqSomeSymbol_$c==
  = \ (ds_d5t8Q :: SomeSymbol) (ds1_d5t8R :: SomeSymbol) ->
      case ds_d5t8Q of
      { SomeSymbol @ n_a5t6V $dKnownSymbol_a5t6W x_a5sXM ->
      case ds1_d5t8R of
      { SomeSymbol @ n1_a5t6X $dKnownSymbol1_a5t6Y y_a5sXN ->
      GHC.Base.eqString
        ($dKnownSymbol_a5t6W
         `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t6V>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                 <n_a5t6V>_P
                 :: (KnownSymbol n_a5t6V :: Constraint) ~R# (String :: *)))
        ($dKnownSymbol1_a5t6Y
         `cast` (GHC.TypeLits.N:KnownSymbol[0] <n1_a5t6X>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                  <n1_a5t6X>_P
                 :: (KnownSymbol n1_a5t6X :: Constraint) ~R# (String :: *)))
      }
      }

-- RHS size: {terms: 16, types: 17, coercions: 10, joins: 0/0}
GHC.TypeLits.$fEqSomeSymbol_$c/= [InlPrag=INLINE (sat-args=2)]
  :: SomeSymbol -> SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (x_a22b [Occ=Once!] :: SomeSymbol)
                 (y_a22c [Occ=Once!] :: SomeSymbol) ->
                 case x_a22b of
                 { SomeSymbol @ n_a5t6V $dKnownSymbol_a5t6W [Occ=Once]
                              _ [Occ=Dead] ->
                 case y_a22c of
                 { SomeSymbol @ n1_a5t6X $dKnownSymbol1_a5t6Y [Occ=Once]
                              _ [Occ=Dead] ->
                 case GHC.Base.eqString
                        ($dKnownSymbol_a5t6W
                         `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t6V>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                                 <n_a5t6V>_P
                                 :: (KnownSymbol n_a5t6V :: Constraint) ~R# (String :: *)))
                        ($dKnownSymbol1_a5t6Y
                         `cast` (GHC.TypeLits.N:KnownSymbol[0] <n1_a5t6X>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                                  <n1_a5t6X>_P
                                 :: (KnownSymbol n1_a5t6X :: Constraint) ~R# (String :: *)))
                 of {
                   GHC.Types.False -> GHC.Types.True;
                   GHC.Types.True -> GHC.Types.False
                 }
                 }
                 }}]
GHC.TypeLits.$fEqSomeSymbol_$c/=
  = \ (eta_B2 :: SomeSymbol) (eta1_B1 :: SomeSymbol) ->
      case eta_B2 of
      { SomeSymbol @ n_a5t6V $dKnownSymbol_a5t6W x_a5sXM ->
      case eta1_B1 of
      { SomeSymbol @ n1_a5t6X $dKnownSymbol1_a5t6Y y_a5sXN ->
      case GHC.Base.eqString
             ($dKnownSymbol_a5t6W
              `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t6V>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                      <n_a5t6V>_P
                      :: (KnownSymbol n_a5t6V :: Constraint) ~R# (String :: *)))
             ($dKnownSymbol1_a5t6Y
              `cast` (GHC.TypeLits.N:KnownSymbol[0] <n1_a5t6X>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                       <n1_a5t6X>_P
                      :: (KnownSymbol n1_a5t6X :: Constraint) ~R# (String :: *)))
      of {
        GHC.Types.False -> GHC.Types.True;
        GHC.Types.True -> GHC.Types.False
      }
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.TypeLits.$fEqSomeSymbol [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq SomeSymbol
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: SomeSymbol
                        GHC.TypeLits.$fEqSomeSymbol_$c==
                        GHC.TypeLits.$fEqSomeSymbol_$c/=]
GHC.TypeLits.$fEqSomeSymbol
  = GHC.Classes.C:Eq
      @ SomeSymbol
      GHC.TypeLits.$fEqSomeSymbol_$c==
      GHC.TypeLits.$fEqSomeSymbol_$c/=

-- RHS size: {terms: 16, types: 17, coercions: 10, joins: 0/0}
GHC.TypeLits.$fOrdSomeSymbol_$c<
  :: SomeSymbol -> SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a1MiF [Occ=Once!] :: SomeSymbol)
                 (y_a1MiG [Occ=Once!] :: SomeSymbol) ->
                 case x_a1MiF of
                 { SomeSymbol @ n_a5t67 $dKnownSymbol_a5t68 [Occ=Once]
                              _ [Occ=Dead] ->
                 case y_a1MiG of
                 { SomeSymbol @ n1_a5t69 $dKnownSymbol1_a5t6a [Occ=Once]
                              _ [Occ=Dead] ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1
                        ($dKnownSymbol_a5t68
                         `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t67>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                                 <n_a5t67>_P
                                 :: (KnownSymbol n_a5t67 :: Constraint) ~R# (String :: *)))
                        ($dKnownSymbol1_a5t6a
                         `cast` (GHC.TypeLits.N:KnownSymbol[0] <n1_a5t69>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                                  <n1_a5t69>_P
                                 :: (KnownSymbol n1_a5t69 :: Constraint) ~R# (String :: *)))
                 of {
                   __DEFAULT -> GHC.Types.False;
                   LT -> GHC.Types.True
                 }
                 }
                 }}]
GHC.TypeLits.$fOrdSomeSymbol_$c<
  = \ (x_a1MiF :: SomeSymbol) (y_a1MiG :: SomeSymbol) ->
      case x_a1MiF of
      { SomeSymbol @ n_a5t67 $dKnownSymbol_a5t68 x1_a5sXK ->
      case y_a1MiG of
      { SomeSymbol @ n1_a5t69 $dKnownSymbol1_a5t6a y1_a5sXL ->
      case GHC.Classes.$fOrd[]_$s$ccompare1
             ($dKnownSymbol_a5t68
              `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t67>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                      <n_a5t67>_P
                      :: (KnownSymbol n_a5t67 :: Constraint) ~R# (String :: *)))
             ($dKnownSymbol1_a5t6a
              `cast` (GHC.TypeLits.N:KnownSymbol[0] <n1_a5t69>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                       <n1_a5t69>_P
                      :: (KnownSymbol n1_a5t69 :: Constraint) ~R# (String :: *)))
      of {
        __DEFAULT -> GHC.Types.False;
        LT -> GHC.Types.True
      }
      }
      }

-- RHS size: {terms: 16, types: 17, coercions: 10, joins: 0/0}
GHC.TypeLits.$fOrdSomeSymbol_$c>=
  :: SomeSymbol -> SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a1fiT [Occ=Once!] :: SomeSymbol)
                 (y_a1fiU [Occ=Once!] :: SomeSymbol) ->
                 case x_a1fiT of
                 { SomeSymbol @ n_a5t67 $dKnownSymbol_a5t68 [Occ=Once]
                              _ [Occ=Dead] ->
                 case y_a1fiU of
                 { SomeSymbol @ n1_a5t69 $dKnownSymbol1_a5t6a [Occ=Once]
                              _ [Occ=Dead] ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1
                        ($dKnownSymbol_a5t68
                         `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t67>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                                 <n_a5t67>_P
                                 :: (KnownSymbol n_a5t67 :: Constraint) ~R# (String :: *)))
                        ($dKnownSymbol1_a5t6a
                         `cast` (GHC.TypeLits.N:KnownSymbol[0] <n1_a5t69>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                                  <n1_a5t69>_P
                                 :: (KnownSymbol n1_a5t69 :: Constraint) ~R# (String :: *)))
                 of {
                   __DEFAULT -> GHC.Types.True;
                   LT -> GHC.Types.False
                 }
                 }
                 }}]
GHC.TypeLits.$fOrdSomeSymbol_$c>=
  = \ (x_a1fiT :: SomeSymbol) (y_a1fiU :: SomeSymbol) ->
      case x_a1fiT of
      { SomeSymbol @ n_a5t67 $dKnownSymbol_a5t68 x1_a5sXK ->
      case y_a1fiU of
      { SomeSymbol @ n1_a5t69 $dKnownSymbol1_a5t6a y1_a5sXL ->
      case GHC.Classes.$fOrd[]_$s$ccompare1
             ($dKnownSymbol_a5t68
              `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t67>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                      <n_a5t67>_P
                      :: (KnownSymbol n_a5t67 :: Constraint) ~R# (String :: *)))
             ($dKnownSymbol1_a5t6a
              `cast` (GHC.TypeLits.N:KnownSymbol[0] <n1_a5t69>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                       <n1_a5t69>_P
                      :: (KnownSymbol n1_a5t69 :: Constraint) ~R# (String :: *)))
      of {
        __DEFAULT -> GHC.Types.True;
        LT -> GHC.Types.False
      }
      }
      }

-- RHS size: {terms: 16, types: 17, coercions: 10, joins: 0/0}
GHC.TypeLits.$fOrdSomeSymbol_$c>
  :: SomeSymbol -> SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a1fiM [Occ=Once!] :: SomeSymbol)
                 (y_a1fiN [Occ=Once!] :: SomeSymbol) ->
                 case x_a1fiM of
                 { SomeSymbol @ n_a5t67 $dKnownSymbol_a5t68 [Occ=Once]
                              _ [Occ=Dead] ->
                 case y_a1fiN of
                 { SomeSymbol @ n1_a5t69 $dKnownSymbol1_a5t6a [Occ=Once]
                              _ [Occ=Dead] ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1
                        ($dKnownSymbol_a5t68
                         `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t67>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                                 <n_a5t67>_P
                                 :: (KnownSymbol n_a5t67 :: Constraint) ~R# (String :: *)))
                        ($dKnownSymbol1_a5t6a
                         `cast` (GHC.TypeLits.N:KnownSymbol[0] <n1_a5t69>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                                  <n1_a5t69>_P
                                 :: (KnownSymbol n1_a5t69 :: Constraint) ~R# (String :: *)))
                 of {
                   __DEFAULT -> GHC.Types.False;
                   GT -> GHC.Types.True
                 }
                 }
                 }}]
GHC.TypeLits.$fOrdSomeSymbol_$c>
  = \ (x_a1fiM :: SomeSymbol) (y_a1fiN :: SomeSymbol) ->
      case x_a1fiM of
      { SomeSymbol @ n_a5t67 $dKnownSymbol_a5t68 x1_a5sXK ->
      case y_a1fiN of
      { SomeSymbol @ n1_a5t69 $dKnownSymbol1_a5t6a y1_a5sXL ->
      case GHC.Classes.$fOrd[]_$s$ccompare1
             ($dKnownSymbol_a5t68
              `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t67>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                      <n_a5t67>_P
                      :: (KnownSymbol n_a5t67 :: Constraint) ~R# (String :: *)))
             ($dKnownSymbol1_a5t6a
              `cast` (GHC.TypeLits.N:KnownSymbol[0] <n1_a5t69>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                       <n1_a5t69>_P
                      :: (KnownSymbol n1_a5t69 :: Constraint) ~R# (String :: *)))
      of {
        __DEFAULT -> GHC.Types.False;
        GT -> GHC.Types.True
      }
      }
      }

-- RHS size: {terms: 16, types: 17, coercions: 10, joins: 0/0}
GHC.TypeLits.$fOrdSomeSymbol_$c<=
  :: SomeSymbol -> SomeSymbol -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a1MiL [Occ=Once!] :: SomeSymbol)
                 (y_a1MiM [Occ=Once!] :: SomeSymbol) ->
                 case x_a1MiL of
                 { SomeSymbol @ n_a5t67 $dKnownSymbol_a5t68 [Occ=Once]
                              _ [Occ=Dead] ->
                 case y_a1MiM of
                 { SomeSymbol @ n1_a5t69 $dKnownSymbol1_a5t6a [Occ=Once]
                              _ [Occ=Dead] ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1
                        ($dKnownSymbol_a5t68
                         `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t67>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                                 <n_a5t67>_P
                                 :: (KnownSymbol n_a5t67 :: Constraint) ~R# (String :: *)))
                        ($dKnownSymbol1_a5t6a
                         `cast` (GHC.TypeLits.N:KnownSymbol[0] <n1_a5t69>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                                  <n1_a5t69>_P
                                 :: (KnownSymbol n1_a5t69 :: Constraint) ~R# (String :: *)))
                 of {
                   __DEFAULT -> GHC.Types.True;
                   GT -> GHC.Types.False
                 }
                 }
                 }}]
GHC.TypeLits.$fOrdSomeSymbol_$c<=
  = \ (x_a1MiL :: SomeSymbol) (y_a1MiM :: SomeSymbol) ->
      case x_a1MiL of
      { SomeSymbol @ n_a5t67 $dKnownSymbol_a5t68 x1_a5sXK ->
      case y_a1MiM of
      { SomeSymbol @ n1_a5t69 $dKnownSymbol1_a5t6a y1_a5sXL ->
      case GHC.Classes.$fOrd[]_$s$ccompare1
             ($dKnownSymbol_a5t68
              `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t67>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                      <n_a5t67>_P
                      :: (KnownSymbol n_a5t67 :: Constraint) ~R# (String :: *)))
             ($dKnownSymbol1_a5t6a
              `cast` (GHC.TypeLits.N:KnownSymbol[0] <n1_a5t69>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                       <n1_a5t69>_P
                      :: (KnownSymbol n1_a5t69 :: Constraint) ~R# (String :: *)))
      of {
        __DEFAULT -> GHC.Types.True;
        GT -> GHC.Types.False
      }
      }
      }

-- RHS size: {terms: 16, types: 17, coercions: 10, joins: 0/0}
GHC.TypeLits.$fOrdSomeSymbol_$cmax
  :: SomeSymbol -> SomeSymbol -> SomeSymbol
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a55d [Occ=Once!] :: SomeSymbol)
                 (y_a55e [Occ=Once!] :: SomeSymbol) ->
                 case x_a55d of wild_X1r
                 { SomeSymbol @ n_a5t67 $dKnownSymbol_a5t68 [Occ=Once]
                              _ [Occ=Dead] ->
                 case y_a55e of wild1_Xe
                 { SomeSymbol @ n1_a5t69 $dKnownSymbol1_a5t6a [Occ=Once]
                              _ [Occ=Dead] ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1
                        ($dKnownSymbol_a5t68
                         `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t67>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                                 <n_a5t67>_P
                                 :: (KnownSymbol n_a5t67 :: Constraint) ~R# (String :: *)))
                        ($dKnownSymbol1_a5t6a
                         `cast` (GHC.TypeLits.N:KnownSymbol[0] <n1_a5t69>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                                  <n1_a5t69>_P
                                 :: (KnownSymbol n1_a5t69 :: Constraint) ~R# (String :: *)))
                 of {
                   __DEFAULT -> wild1_Xe;
                   GT -> wild_X1r
                 }
                 }
                 }}]
GHC.TypeLits.$fOrdSomeSymbol_$cmax
  = \ (x_a55d :: SomeSymbol) (y_a55e :: SomeSymbol) ->
      case x_a55d of wild_X1r
      { SomeSymbol @ n_a5t67 $dKnownSymbol_a5t68 x1_a5sXK ->
      case y_a55e of wild1_Xe
      { SomeSymbol @ n1_a5t69 $dKnownSymbol1_a5t6a y1_a5sXL ->
      case GHC.Classes.$fOrd[]_$s$ccompare1
             ($dKnownSymbol_a5t68
              `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t67>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                      <n_a5t67>_P
                      :: (KnownSymbol n_a5t67 :: Constraint) ~R# (String :: *)))
             ($dKnownSymbol1_a5t6a
              `cast` (GHC.TypeLits.N:KnownSymbol[0] <n1_a5t69>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                       <n1_a5t69>_P
                      :: (KnownSymbol n1_a5t69 :: Constraint) ~R# (String :: *)))
      of {
        __DEFAULT -> wild1_Xe;
        GT -> wild_X1r
      }
      }
      }

-- RHS size: {terms: 16, types: 17, coercions: 10, joins: 0/0}
GHC.TypeLits.$fOrdSomeSymbol_$cmin
  :: SomeSymbol -> SomeSymbol -> SomeSymbol
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_a55m [Occ=Once!] :: SomeSymbol)
                 (y_a55n [Occ=Once!] :: SomeSymbol) ->
                 case x_a55m of wild_X1r
                 { SomeSymbol @ n_a5t67 $dKnownSymbol_a5t68 [Occ=Once]
                              _ [Occ=Dead] ->
                 case y_a55n of wild1_Xe
                 { SomeSymbol @ n1_a5t69 $dKnownSymbol1_a5t6a [Occ=Once]
                              _ [Occ=Dead] ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1
                        ($dKnownSymbol_a5t68
                         `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t67>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                                 <n_a5t67>_P
                                 :: (KnownSymbol n_a5t67 :: Constraint) ~R# (String :: *)))
                        ($dKnownSymbol1_a5t6a
                         `cast` (GHC.TypeLits.N:KnownSymbol[0] <n1_a5t69>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                                  <n1_a5t69>_P
                                 :: (KnownSymbol n1_a5t69 :: Constraint) ~R# (String :: *)))
                 of {
                   __DEFAULT -> wild_X1r;
                   GT -> wild1_Xe
                 }
                 }
                 }}]
GHC.TypeLits.$fOrdSomeSymbol_$cmin
  = \ (x_a55m :: SomeSymbol) (y_a55n :: SomeSymbol) ->
      case x_a55m of wild_X1r
      { SomeSymbol @ n_a5t67 $dKnownSymbol_a5t68 x1_a5sXK ->
      case y_a55n of wild1_Xe
      { SomeSymbol @ n1_a5t69 $dKnownSymbol1_a5t6a y1_a5sXL ->
      case GHC.Classes.$fOrd[]_$s$ccompare1
             ($dKnownSymbol_a5t68
              `cast` (GHC.TypeLits.N:KnownSymbol[0] <n_a5t67>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                      <n_a5t67>_P
                      :: (KnownSymbol n_a5t67 :: Constraint) ~R# (String :: *)))
             ($dKnownSymbol1_a5t6a
              `cast` (GHC.TypeLits.N:KnownSymbol[0] <n1_a5t69>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                       <n1_a5t69>_P
                      :: (KnownSymbol n1_a5t69 :: Constraint) ~R# (String :: *)))
      of {
        __DEFAULT -> wild_X1r;
        GT -> wild1_Xe
      }
      }
      }

-- RHS size: {terms: 9, types: 1, coercions: 0, joins: 0/0}
GHC.TypeLits.$fOrdSomeSymbol [InlPrag=NOUSERINLINE CONLIKE]
  :: Ord SomeSymbol
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Ord TYPE: SomeSymbol
                         GHC.TypeLits.$fEqSomeSymbol
                         GHC.TypeLits.$fOrdSomeSymbol_$ccompare
                         GHC.TypeLits.$fOrdSomeSymbol_$c<
                         GHC.TypeLits.$fOrdSomeSymbol_$c<=
                         GHC.TypeLits.$fOrdSomeSymbol_$c>
                         GHC.TypeLits.$fOrdSomeSymbol_$c>=
                         GHC.TypeLits.$fOrdSomeSymbol_$cmax
                         GHC.TypeLits.$fOrdSomeSymbol_$cmin]
GHC.TypeLits.$fOrdSomeSymbol
  = GHC.Classes.C:Ord
      @ SomeSymbol
      GHC.TypeLits.$fEqSomeSymbol
      GHC.TypeLits.$fOrdSomeSymbol_$ccompare
      GHC.TypeLits.$fOrdSomeSymbol_$c<
      GHC.TypeLits.$fOrdSomeSymbol_$c<=
      GHC.TypeLits.$fOrdSomeSymbol_$c>
      GHC.TypeLits.$fOrdSomeSymbol_$c>=
      GHC.TypeLits.$fOrdSomeSymbol_$cmax
      GHC.TypeLits.$fOrdSomeSymbol_$cmin

-- RHS size: {terms: 4, types: 6, coercions: 0, joins: 0/0}
GHC.TypeLits.natVal'1
  :: forall (n :: Nat). KnownNat n => Proxy# n -> KnownNat n
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ (n_a5t4o :: Nat))
                 ($dKnownNat_a5t4q [Occ=Once] :: KnownNat n_a5t4o)
                 _ [Occ=Dead] ->
                 $dKnownNat_a5t4q}]
GHC.TypeLits.natVal'1
  = \ (@ (n_a5t4o :: Nat))
      ($dKnownNat_a5t4q :: KnownNat n_a5t4o)
      _ [Occ=Dead] ->
      $dKnownNat_a5t4q

-- RHS size: {terms: 1, types: 0, coercions: 16, joins: 0/0}
natVal' :: forall (n :: Nat). KnownNat n => Proxy# n -> Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.TypeLits.natVal'1
               `cast` (forall (n :: <Nat>_N).
                       <KnownNat n>_R
                       ->_R <Proxy# n>_R
                       ->_R GHC.TypeNats.N:KnownNat[0] <n>_N ; (GHC.TypeNats.N:SNat[0]
                                                                    <n>_P ; GHC.Natural.N:Natural[0])
                       :: (forall (n :: Nat). KnownNat n => Proxy# n -> KnownNat n :: *)
                          ~R# (forall (n :: Nat). KnownNat n => Proxy# n -> Integer :: *))}]
natVal'
  = GHC.TypeLits.natVal'1
    `cast` (forall (n :: <Nat>_N).
            <KnownNat n>_R
            ->_R <Proxy# n>_R
            ->_R GHC.TypeNats.N:KnownNat[0] <n>_N ; (GHC.TypeNats.N:SNat[0]
                                                         <n>_P ; GHC.Natural.N:Natural[0])
            :: (forall (n :: Nat). KnownNat n => Proxy# n -> KnownNat n :: *)
               ~R# (forall (n :: Nat). KnownNat n => Proxy# n -> Integer :: *))

-- RHS size: {terms: 4, types: 6, coercions: 0, joins: 0/0}
GHC.TypeLits.symbolVal'1
  :: forall (n :: Symbol). KnownSymbol n => Proxy# n -> KnownSymbol n
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ (n_a5t4d :: Symbol))
                 ($dKnownSymbol_a5t4f [Occ=Once] :: KnownSymbol n_a5t4d)
                 _ [Occ=Dead] ->
                 $dKnownSymbol_a5t4f}]
GHC.TypeLits.symbolVal'1
  = \ (@ (n_a5t4d :: Symbol))
      ($dKnownSymbol_a5t4f :: KnownSymbol n_a5t4d)
      _ [Occ=Dead] ->
      $dKnownSymbol_a5t4f

-- RHS size: {terms: 1, types: 0, coercions: 14, joins: 0/0}
symbolVal'
  :: forall (n :: Symbol). KnownSymbol n => Proxy# n -> String
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,A>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.TypeLits.symbolVal'1
               `cast` (forall (n :: <Symbol>_N).
                       <KnownSymbol n>_R
                       ->_R <Proxy# n>_R
                       ->_R GHC.TypeLits.N:KnownSymbol[0] <n>_N ; GHC.TypeLits.N:SSymbol[0]
                                                                      <n>_P
                       :: (forall (n :: Symbol).
                           KnownSymbol n =>
                           Proxy# n -> KnownSymbol n :: *)
                          ~R# (forall (n :: Symbol).
                               KnownSymbol n =>
                               Proxy# n -> String :: *))}]
symbolVal'
  = GHC.TypeLits.symbolVal'1
    `cast` (forall (n :: <Symbol>_N).
            <KnownSymbol n>_R
            ->_R <Proxy# n>_R
            ->_R GHC.TypeLits.N:KnownSymbol[0] <n>_N ; GHC.TypeLits.N:SSymbol[0]
                                                           <n>_P
            :: (forall (n :: Symbol).
                KnownSymbol n =>
                Proxy# n -> KnownSymbol n :: *)
               ~R# (forall (n :: Symbol).
                    KnownSymbol n =>
                    Proxy# n -> String :: *))

-- RHS size: {terms: 4, types: 6, coercions: 9, joins: 0/0}
someSymbolVal :: String -> SomeSymbol
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_a5sY3 [Occ=Once] :: String) ->
                 GHC.TypeLits.SomeSymbol
                   @ GHC.Types.Any
                   (n_a5sY3
                    `cast` (Sym (GHC.TypeLits.N:SSymbol[0]
                                     <GHC.Types.Any>_P) ; Sym (GHC.TypeLits.N:KnownSymbol[0]) <GHC.Types.Any>_N
                            :: (String :: *) ~R# (KnownSymbol GHC.Types.Any :: Constraint)))
                   (Data.Proxy.Proxy @ Symbol @ GHC.Types.Any)}]
someSymbolVal
  = \ (n_a5sY3 :: String) ->
      GHC.TypeLits.SomeSymbol
        @ GHC.Types.Any
        (n_a5sY3
         `cast` (Sym (GHC.TypeLits.N:SSymbol[0]
                          <GHC.Types.Any>_P) ; Sym (GHC.TypeLits.N:KnownSymbol[0]) <GHC.Types.Any>_N
                 :: (String :: *) ~R# (KnownSymbol GHC.Types.Any :: Constraint)))
        (Data.Proxy.Proxy @ Symbol @ GHC.Types.Any)

Rec {
-- RHS size: {terms: 17, types: 33, coercions: 9, joins: 0/0}
GHC.TypeLits.$fReadSomeSymbol_go [Occ=LoopBreaker]
  :: [(String, String)] -> [(SomeSymbol, String)]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []]
GHC.TypeLits.$fReadSomeSymbol_go
  = \ (ds_i1y1c :: [(String, String)]) ->
      case ds_i1y1c of {
        [] -> GHC.Types.[] @ (SomeSymbol, String);
        : y_i1y1h ys_i1y1i ->
          case y_i1y1h of { (a_a5sXG, ys1_a5sXH) ->
          GHC.Types.:
            @ (SomeSymbol, String)
            (GHC.TypeLits.SomeSymbol
               @ GHC.Types.Any
               (a_a5sXG
                `cast` (Sym (GHC.TypeLits.N:SSymbol[0]
                                 <GHC.Types.Any>_P) ; Sym (GHC.TypeLits.N:KnownSymbol[0]) <GHC.Types.Any>_N
                        :: (String :: *) ~R# (KnownSymbol GHC.Types.Any :: Constraint)))
               (Data.Proxy.Proxy @ Symbol @ GHC.Types.Any),
             ys1_a5sXH)
            (GHC.TypeLits.$fReadSomeSymbol_go ys_i1y1i)
          }
      }
end Rec }

-- RHS size: {terms: 9, types: 9, coercions: 3, joins: 0/0}
GHC.TypeLits.$fReadSomeSymbol_$creadsPrec
  :: GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS SomeSymbol
[GblId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 90 0}]
GHC.TypeLits.$fReadSomeSymbol_$creadsPrec
  = \ (p_a5sXE :: GHC.Types.Int) (xs_a5sXF :: String) ->
      GHC.TypeLits.$fReadSomeSymbol_go
        (Text.ParserCombinators.ReadP.run
           @ [GHC.Types.Char]
           (GHC.Read.list3
              @ String
              (GHC.Read.$fReadChar2
               `cast` (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                <String>_R)
                       :: (Text.ParserCombinators.ReadPrec.Prec
                           -> Text.ParserCombinators.ReadP.ReadP String :: *)
                          ~R# (Text.ParserCombinators.ReadPrec.ReadPrec String :: *)))
              p_a5sXE
              @ [GHC.Types.Char]
              (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                 @ [GHC.Types.Char]))
           xs_a5sXF)

-- RHS size: {terms: 11, types: 17, coercions: 0, joins: 0/0}
GHC.TypeLits.$fReadSomeSymbol4
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (SomeSymbol -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,U><L,C(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (n_X3toz [Occ=Once]
                    :: Text.ParserCombinators.ReadPrec.Prec)
                 (@ b_s3ofG)
                 (eta_B1 [Occ=Once]
                    :: SomeSymbol -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
                 case Text.ParserCombinators.ReadP.$wreadS_to_P
                        @ SomeSymbol
                        (GHC.TypeLits.$fReadSomeSymbol_$creadsPrec n_X3toz)
                        @ b_s3ofG
                        eta_B1
                 of
                 { (# ww1_s3oiG [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
                 }}]
GHC.TypeLits.$fReadSomeSymbol4
  = \ (n_X3toz :: Text.ParserCombinators.ReadPrec.Prec)
      (@ b_s3ofG)
      (eta_B1 :: SomeSymbol -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
      case Text.ParserCombinators.ReadP.$wreadS_to_P
             @ SomeSymbol
             (GHC.TypeLits.$fReadSomeSymbol_$creadsPrec n_X3toz)
             @ b_s3ofG
             eta_B1
      of
      { (# ww1_s3oiG #) ->
      Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$fReadSomeSymbol3 :: GHC.Types.Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.TypeLits.$fReadSomeSymbol3 = GHC.Types.I# 0#

-- RHS size: {terms: 4, types: 5, coercions: 15, joins: 0/0}
GHC.TypeLits.$fReadSomeSymbol2
  :: Text.ParserCombinators.ReadP.P [SomeSymbol]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 40 0}]
GHC.TypeLits.$fReadSomeSymbol2
  = ((((GHC.Read.list
          @ SomeSymbol
          (GHC.TypeLits.$fReadSomeSymbol4
           `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                    ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                  <SomeSymbol>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                              <SomeSymbol>_R)
                   :: (Text.ParserCombinators.ReadPrec.Prec
                       -> forall b.
                          (SomeSymbol -> Text.ParserCombinators.ReadP.P b)
                          -> Text.ParserCombinators.ReadP.P b :: *)
                      ~R# (Text.ParserCombinators.ReadPrec.ReadPrec SomeSymbol :: *))))
       `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                   <[SomeSymbol]>_R
               :: (Text.ParserCombinators.ReadPrec.ReadPrec [SomeSymbol] :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.Prec
                       -> Text.ParserCombinators.ReadP.ReadP [SomeSymbol] :: *)))
        GHC.TypeLits.$fReadSomeSymbol3)
     `cast` (Text.ParserCombinators.ReadP.N:ReadP[0] <[SomeSymbol]>_R
             :: (Text.ParserCombinators.ReadP.ReadP [SomeSymbol] :: *)
                ~R# (forall b.
                     ([SomeSymbol] -> Text.ParserCombinators.ReadP.P b)
                     -> Text.ParserCombinators.ReadP.P b :: *)))
      @ [SomeSymbol]
      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure @ [SomeSymbol])

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
GHC.TypeLits.$fReadSomeSymbol_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [SomeSymbol]
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
GHC.TypeLits.$fReadSomeSymbol_$creadList
  = Text.ParserCombinators.ReadP.run
      @ [SomeSymbol] GHC.TypeLits.$fReadSomeSymbol2

-- RHS size: {terms: 10, types: 19, coercions: 0, joins: 0/0}
GHC.TypeLits.$fReadSomeSymbol1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        ([SomeSymbol] -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Str=<L,A><L,C(U)>m2,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (@ b_s3ofG)
                 (w1_s3ofH [Occ=Once]
                    :: [SomeSymbol] -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
                 case Text.ParserCombinators.ReadP.$wreadS_to_P
                        @ [SomeSymbol]
                        GHC.TypeLits.$fReadSomeSymbol_$creadList
                        @ b_s3ofG
                        w1_s3ofH
                 of
                 { (# ww1_s3oiG [Occ=Once] #) ->
                 Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
                 }}]
GHC.TypeLits.$fReadSomeSymbol1
  = \ _ [Occ=Dead]
      (@ b_s3ofG)
      (w1_s3ofH
         :: [SomeSymbol] -> Text.ParserCombinators.ReadP.P b_s3ofG) ->
      case Text.ParserCombinators.ReadP.$wreadS_to_P
             @ [SomeSymbol]
             GHC.TypeLits.$fReadSomeSymbol_$creadList
             @ b_s3ofG
             w1_s3ofH
      of
      { (# ww1_s3oiG #) ->
      Text.ParserCombinators.ReadP.Look @ b_s3ofG ww1_s3oiG
      }

-- RHS size: {terms: 5, types: 1, coercions: 20, joins: 0/0}
GHC.TypeLits.$fReadSomeSymbol [InlPrag=NOUSERINLINE CONLIKE]
  :: Read SomeSymbol
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Read.C:Read TYPE: SomeSymbol
                       GHC.TypeLits.$fReadSomeSymbol_$creadsPrec
                       GHC.TypeLits.$fReadSomeSymbol_$creadList
                       GHC.TypeLits.$fReadSomeSymbol4
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <SomeSymbol>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                          <SomeSymbol>_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      (SomeSymbol -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec SomeSymbol :: *))
                       GHC.TypeLits.$fReadSomeSymbol1
                       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                              <[SomeSymbol]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                                            <[SomeSymbol]>_R)
                               :: (Text.ParserCombinators.ReadPrec.Prec
                                   -> forall b.
                                      ([SomeSymbol] -> Text.ParserCombinators.ReadP.P b)
                                      -> Text.ParserCombinators.ReadP.P b :: *)
                                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [SomeSymbol] :: *))]
GHC.TypeLits.$fReadSomeSymbol
  = GHC.Read.C:Read
      @ SomeSymbol
      GHC.TypeLits.$fReadSomeSymbol_$creadsPrec
      GHC.TypeLits.$fReadSomeSymbol_$creadList
      (GHC.TypeLits.$fReadSomeSymbol4
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <SomeSymbol>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                          <SomeSymbol>_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      (SomeSymbol -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec SomeSymbol :: *)))
      (GHC.TypeLits.$fReadSomeSymbol1
       `cast` ((<Text.ParserCombinators.ReadPrec.Prec>_R
                ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                              <[SomeSymbol]>_R)) ; Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                            <[SomeSymbol]>_R)
               :: (Text.ParserCombinators.ReadPrec.Prec
                   -> forall b.
                      ([SomeSymbol] -> Text.ParserCombinators.ReadP.P b)
                      -> Text.ParserCombinators.ReadP.P b :: *)
                  ~R# (Text.ParserCombinators.ReadPrec.ReadPrec [SomeSymbol] :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$trModule4 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.TypeLits.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$trModule3 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.TypeLits.$trModule3 = GHC.Types.TrNameS GHC.TypeLits.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$trModule2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.TypeLits.$trModule2 = "GHC.TypeLits"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.TypeLits.$trModule1 = GHC.Types.TrNameS GHC.TypeLits.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$trModule :: GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.TypeLits.$trModule
  = GHC.Types.Module GHC.TypeLits.$trModule3 GHC.TypeLits.$trModule1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_r5tkw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep_r5tkw = GHC.Types.KindRepVar 0#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r5tkx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep1_r5tkx
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcChar (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_r5tky :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep2_r5tky
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcConstraint (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3_r5tkz :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep3_r5tkz
  = GHC.Types.KindRepTyConApp
      GHC.Types.$tcSymbol (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep4_r5tkA :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep4_r5tkA
  = GHC.Types.:
      @ GHC.Types.KindRep $krep1_r5tkx (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep5_r5tkB :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep5_r5tkB
  = GHC.Types.KindRepTyConApp GHC.Types.$tc[] $krep4_r5tkA

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep6_r5tkC :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep6_r5tkC
  = GHC.Types.:
      @ GHC.Types.KindRep $krep_r5tkw (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep7_r5tkD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep7_r5tkD
  = GHC.Types.: @ GHC.Types.KindRep $krep3_r5tkz $krep6_r5tkC

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8_r5tkE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep8_r5tkE
  = GHC.Types.KindRepTyConApp Data.Proxy.$tcProxy $krep7_r5tkD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tcKnownSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.TypeLits.$tcKnownSymbol1
  = GHC.Types.KindRepFun $krep3_r5tkz $krep2_r5tky

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tcSSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.TypeLits.$tcSSymbol1
  = GHC.Types.KindRepFun $krep3_r5tkz GHC.Types.krep$*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tcWrapS1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.TypeLits.$tcWrapS1
  = GHC.Types.KindRepFun $krep3_r5tkz GHC.Types.krep$*Arr*

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep9_r5tkF :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep9_r5tkF = GHC.Types.KindRepVar 1#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep10_r5tkG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep10_r5tkG = GHC.Types.KindRepFun $krep8_r5tkE $krep9_r5tkF

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tcErrorMessage2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.TypeLits.$tcErrorMessage2 = "ErrorMessage"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tcErrorMessage1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.TypeLits.$tcErrorMessage1
  = GHC.Types.TrNameS GHC.TypeLits.$tcErrorMessage2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tcErrorMessage :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.TypeLits.$tcErrorMessage
  = GHC.Types.TyCon
      7630159379940119730##
      9206405315391268733##
      GHC.TypeLits.$trModule
      GHC.TypeLits.$tcErrorMessage1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep11_r5tkH :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep11_r5tkH
  = GHC.Types.KindRepTyConApp
      GHC.TypeLits.$tcErrorMessage (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'ShowType1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.TypeLits.$tc'ShowType1
  = GHC.Types.KindRepFun $krep_r5tkw $krep11_r5tkH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'ShowType3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.TypeLits.$tc'ShowType3 = "'ShowType"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'ShowType2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.TypeLits.$tc'ShowType2
  = GHC.Types.TrNameS GHC.TypeLits.$tc'ShowType3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'ShowType :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.TypeLits.$tc'ShowType
  = GHC.Types.TyCon
      8382284352214508650##
      11348954620262118930##
      GHC.TypeLits.$trModule
      GHC.TypeLits.$tc'ShowType2
      1#
      GHC.TypeLits.$tc'ShowType1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'Text1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.TypeLits.$tc'Text1
  = GHC.Types.KindRepFun $krep3_r5tkz $krep11_r5tkH

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'Text3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.TypeLits.$tc'Text3 = "'Text"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'Text2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.TypeLits.$tc'Text2 = GHC.Types.TrNameS GHC.TypeLits.$tc'Text3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'Text :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.TypeLits.$tc'Text
  = GHC.Types.TyCon
      2493578998071024502##
      3678534661723514344##
      GHC.TypeLits.$trModule
      GHC.TypeLits.$tc'Text2
      0#
      GHC.TypeLits.$tc'Text1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep12_r5tkI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep12_r5tkI = GHC.Types.KindRepFun $krep11_r5tkH $krep11_r5tkH

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc':$$:1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.TypeLits.$tc':$$:1
  = GHC.Types.KindRepFun $krep11_r5tkH $krep12_r5tkI

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc':<>:2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.TypeLits.$tc':<>:2 = "':<>:"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc':<>:1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.TypeLits.$tc':<>:1 = GHC.Types.TrNameS GHC.TypeLits.$tc':<>:2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc':<>: :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.TypeLits.$tc':<>:
  = GHC.Types.TyCon
      3983262092273118172##
      8733217608481743011##
      GHC.TypeLits.$trModule
      GHC.TypeLits.$tc':<>:1
      0#
      GHC.TypeLits.$tc':$$:1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc':$$:3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.TypeLits.$tc':$$:3 = "':$$:"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc':$$:2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.TypeLits.$tc':$$:2 = GHC.Types.TrNameS GHC.TypeLits.$tc':$$:3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc':$$: :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.TypeLits.$tc':$$:
  = GHC.Types.TyCon
      16852088601940984151##
      507953211190232322##
      GHC.TypeLits.$trModule
      GHC.TypeLits.$tc':$$:2
      0#
      GHC.TypeLits.$tc':$$:1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tcSSymbol3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.TypeLits.$tcSSymbol3 = "SSymbol"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tcSSymbol2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.TypeLits.$tcSSymbol2
  = GHC.Types.TrNameS GHC.TypeLits.$tcSSymbol3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tcSSymbol :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.TypeLits.$tcSSymbol
  = GHC.Types.TyCon
      6053239415793076730##
      11057125606635161794##
      GHC.TypeLits.$trModule
      GHC.TypeLits.$tcSSymbol2
      0#
      GHC.TypeLits.$tcSSymbol1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep13_r5tkJ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep13_r5tkJ
  = GHC.Types.KindRepTyConApp GHC.TypeLits.$tcSSymbol $krep6_r5tkC

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'SSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.TypeLits.$tc'SSymbol1
  = GHC.Types.KindRepFun $krep5_r5tkB $krep13_r5tkJ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'SSymbol3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.TypeLits.$tc'SSymbol3 = "'SSymbol"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'SSymbol2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.TypeLits.$tc'SSymbol2
  = GHC.Types.TrNameS GHC.TypeLits.$tc'SSymbol3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'SSymbol :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.TypeLits.$tc'SSymbol
  = GHC.Types.TyCon
      1559313649785769064##
      360611317898112776##
      GHC.TypeLits.$trModule
      GHC.TypeLits.$tc'SSymbol2
      1#
      GHC.TypeLits.$tc'SSymbol1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tcKnownSymbol3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.TypeLits.$tcKnownSymbol3 = "KnownSymbol"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tcKnownSymbol2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.TypeLits.$tcKnownSymbol2
  = GHC.Types.TrNameS GHC.TypeLits.$tcKnownSymbol3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tcKnownSymbol :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.TypeLits.$tcKnownSymbol
  = GHC.Types.TyCon
      1897426542959159002##
      11426707038979253074##
      GHC.TypeLits.$trModule
      GHC.TypeLits.$tcKnownSymbol2
      0#
      GHC.TypeLits.$tcKnownSymbol1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep14_r5tkK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep14_r5tkK
  = GHC.Types.KindRepTyConApp
      GHC.TypeLits.$tcKnownSymbol $krep6_r5tkC

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep15_r5tkL :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep15_r5tkL = GHC.Types.KindRepFun $krep14_r5tkK $krep10_r5tkG

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'C:KnownSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.TypeLits.$tc'C:KnownSymbol1
  = GHC.Types.KindRepFun $krep13_r5tkJ $krep14_r5tkK

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'C:KnownSymbol3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.TypeLits.$tc'C:KnownSymbol3 = "'C:KnownSymbol"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'C:KnownSymbol2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.TypeLits.$tc'C:KnownSymbol2
  = GHC.Types.TrNameS GHC.TypeLits.$tc'C:KnownSymbol3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'C:KnownSymbol :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.TypeLits.$tc'C:KnownSymbol
  = GHC.Types.TyCon
      16813031602224516101##
      12647750771094255736##
      GHC.TypeLits.$trModule
      GHC.TypeLits.$tc'C:KnownSymbol2
      1#
      GHC.TypeLits.$tc'C:KnownSymbol1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tcSomeSymbol2 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.TypeLits.$tcSomeSymbol2 = "SomeSymbol"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tcSomeSymbol1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.TypeLits.$tcSomeSymbol1
  = GHC.Types.TrNameS GHC.TypeLits.$tcSomeSymbol2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tcSomeSymbol :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.TypeLits.$tcSomeSymbol
  = GHC.Types.TyCon
      8170228625754745342##
      5936112829002510826##
      GHC.TypeLits.$trModule
      GHC.TypeLits.$tcSomeSymbol1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep16_r5tkM :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep16_r5tkM
  = GHC.Types.KindRepTyConApp
      GHC.TypeLits.$tcSomeSymbol (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep17_r5tkN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep17_r5tkN = GHC.Types.KindRepFun $krep8_r5tkE $krep16_r5tkM

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'SomeSymbol1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.TypeLits.$tc'SomeSymbol1
  = GHC.Types.KindRepFun $krep14_r5tkK $krep17_r5tkN

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'SomeSymbol3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.TypeLits.$tc'SomeSymbol3 = "'SomeSymbol"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'SomeSymbol2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.TypeLits.$tc'SomeSymbol2
  = GHC.Types.TrNameS GHC.TypeLits.$tc'SomeSymbol3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'SomeSymbol :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.TypeLits.$tc'SomeSymbol
  = GHC.Types.TyCon
      3805514464201054242##
      4871133717641740493##
      GHC.TypeLits.$trModule
      GHC.TypeLits.$tc'SomeSymbol2
      1#
      GHC.TypeLits.$tc'SomeSymbol1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tcWrapS3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.TypeLits.$tcWrapS3 = "WrapS"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tcWrapS2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.TypeLits.$tcWrapS2 = GHC.Types.TrNameS GHC.TypeLits.$tcWrapS3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tcWrapS :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.TypeLits.$tcWrapS
  = GHC.Types.TyCon
      9018955994487767128##
      531430869376599499##
      GHC.TypeLits.$trModule
      GHC.TypeLits.$tcWrapS2
      0#
      GHC.TypeLits.$tcWrapS1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep18_r5tkO :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep18_r5tkO
  = GHC.Types.:
      @ GHC.Types.KindRep $krep9_r5tkF (GHC.Types.[] @ GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep19_r5tkP :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep19_r5tkP
  = GHC.Types.: @ GHC.Types.KindRep $krep_r5tkw $krep18_r5tkO

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep20_r5tkQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep20_r5tkQ
  = GHC.Types.KindRepTyConApp GHC.TypeLits.$tcWrapS $krep19_r5tkP

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'WrapS1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.TypeLits.$tc'WrapS1
  = GHC.Types.KindRepFun $krep15_r5tkL $krep20_r5tkQ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'WrapS3 :: GHC.Prim.Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.TypeLits.$tc'WrapS3 = "'WrapS"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'WrapS2 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.TypeLits.$tc'WrapS2 = GHC.Types.TrNameS GHC.TypeLits.$tc'WrapS3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.$tc'WrapS :: GHC.Types.TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.TypeLits.$tc'WrapS
  = GHC.Types.TyCon
      10848673411250088112##
      6323353939001754670##
      GHC.TypeLits.$trModule
      GHC.TypeLits.$tc'WrapS2
      2#
      GHC.TypeLits.$tc'WrapS1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.TypeLits.someNatVal1 :: Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
GHC.TypeLits.someNatVal1 = 0

-- RHS size: {terms: 13, types: 9, coercions: 9, joins: 0/0}
someNatVal :: Integer -> Maybe N.SomeNat
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 90 30}]
someNatVal
  = \ (n_a5sY2 :: Integer) ->
      case integer-simple-0.1.1.1:GHC.Integer.Type.geInteger#
             n_a5sY2 GHC.TypeLits.someNatVal1
      of {
        __DEFAULT -> GHC.Base.Nothing @ N.SomeNat;
        1# ->
          GHC.Base.Just
            @ N.SomeNat
            (GHC.TypeNats.SomeNat
               @ GHC.Types.Any
               ((GHC.Natural.naturalFromInteger n_a5sY2)
                `cast` (Sym (GHC.TypeNats.N:SNat[0]
                                 <GHC.Types.Any>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <GHC.Types.Any>_N
                        :: (GHC.Natural.Natural :: *)
                           ~R# (KnownNat GHC.Types.Any :: Constraint)))
               (Data.Proxy.Proxy @ Nat @ GHC.Types.Any))
      }


